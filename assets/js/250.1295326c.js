(window.webpackJsonp=window.webpackJsonp||[]).push([[250],{578:function(_,v,t){"use strict";t.r(v);var n=t(4),s=Object(n.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h1",{attrs:{id:"_1-基础"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-基础"}},[_._v("#")]),_._v(" 1.基础")]),_._v(" "),v("p",[_._v("树 (Tree) 是 n (n ≥ 0) 个结点的有限集 T, 并且当 n＞0 时满足下列条件:")]),_._v(" "),v("ul",[v("li",[_._v("有且仅有一个特定的称为"),v("strong",[_._v("根")]),_._v(" (Root) 的结点;")]),_._v(" "),v("li",[_._v("当 n＞1时, 其余结点可以划分为 m(m＞0) 个互不相交的有限集 T1, T2 , …, Tm, 每个集 Ti (1≤ i ≤ m) 均为树, 且称为树 T 的"),v("strong",[_._v("子树")]),_._v(" (SubTree).")])]),_._v(" "),v("p",[_._v("不含任何结点 (即 n＝0) 的树称为"),v("strong",[_._v("空树")]),_._v(".")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20210910224531268.png",alt:"image-20210910224531268"}})]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("结点: ​")]),_._v("存储数据元素和指向子树的链接, 由数据元素和构造数据元素之间关系的引用组成.")]),_._v(" "),v("li",[v("strong",[_._v("子结点: ​")]),_._v("树中一个结点的子树的根结点称为这个结点的子结点, 如图中的 A 的子结点有 B, C, D.")]),_._v(" "),v("li",[v("strong",[_._v("父结点: ​")]),_._v("树中某个结点有子结点(即该结点的度不为 0), 该结点称为它子结点的父结点. 图中 B, C, D 的父结点是 A.")]),_._v(" "),v("li",[v("strong",[_._v("兄弟结点: ​")]),_._v("具有相同双亲结点 (即同一个前驱) 的结点称为兄弟结点, 如图中 B, C, D 为兄弟结点.")]),_._v(" "),v("li",[v("strong",[_._v("结点的度: ​")]),_._v("​"),v("strong",[v("strong",[_._v("结点所有")])]),_._v("​"),v("strong",[_._v("子树的个数")]),_._v("称为该结点的"),v("strong",[_._v("度")]),_._v(", 如图中 A 的度为 3, B 的度为 2.")]),_._v(" "),v("li",[v("strong",[_._v("树的度: ​")]),_._v("​"),v("strong",[v("strong",[_._v("树中所有结点的度的最大值称为")])]),_._v("​"),v("strong",[_._v("树的度")]),_._v(", 如图该树的度为 3.")]),_._v(" "),v("li",[v("strong",[_._v("叶子结点: ​")]),_._v("​"),v("strong",[v("strong",[_._v("度为 0 的结点称为")])]),_._v("​"),v("strong",[_._v("叶子结点")]),_._v(". 如图中的 K, L, F, G, M, I, J.")]),_._v(" "),v("li",[v("strong",[_._v("非叶子结点: ​")]),_._v("度不为 0 的结点称为分支结点. 如图中的 A, B, C, D, E, H.")]),_._v(" "),v("li",[v("strong",[_._v("结点的层次: ​")]),_._v("从根结点到树中某结点所经路径的分支数称为该结点的层次.")]),_._v(" "),v("li",[v("strong",[_._v("树的深度: ​")]),_._v("​"),v("strong",[v("strong",[_._v("树中所有结点的层次的最大值称为该树的")])]),_._v("​"),v("strong",[_._v("深度")]),_._v(" (也就是最下面那个结点的层次).")]),_._v(" "),v("li",[v("strong",[_._v("森林")]),_._v(": 由 m 棵不相交的树组成的集合, 叫做森林.")]),_._v(" "),v("li",[v("strong",[_._v("二叉树")]),_._v(": 每个结点"),v("strong",[_._v("最多两个子节点")]),_._v("的树为二叉树.")]),_._v(" "),v("li",[v("strong",[_._v("满二叉树")]),_._v(": 如果二叉树的叶子结点都在"),v("strong",[_._v("最后一层")]),_._v(", 并且结点总数 = 2 ^ n - 1 (n 为层数), 则此为"),v("strong",[_._v("满二叉树")]),_._v(".")]),_._v(" "),v("li",[v("strong",[_._v("完全二叉树")]),_._v(": 如果二叉树除了最后一层之外均为满的, 且最后一层的子节点"),v("strong",[_._v("从左到右")]),_._v("排列, 此成为"),v("strong",[_._v("完全二叉树")]),_._v(".")])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20210910224902392.png",alt:"image-20210910224902392"}})]),_._v(" "),v("p",[_._v("‍")])])}),[],!1,null,null,null);v.default=s.exports}}]);