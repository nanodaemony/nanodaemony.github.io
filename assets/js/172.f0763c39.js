(window.webpackJsonp=window.webpackJsonp||[]).push([[172],{501:function(a,t,s){"use strict";s.r(t);var n=s(4),e=Object(n.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"_8-graalvm"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-graalvm"}},[a._v("#")]),a._v(" 8.GraalVM")]),a._v(" "),t("h4",{attrs:{id:"概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[a._v("#")]),a._v(" 概述")]),a._v(" "),t("p",[a._v("Graal VM 被官方称为“Universal VM”和“Polyglot VM”, 这是一个在 HotSpot 虚拟机基础上增强而成的"),t("strong",[a._v("跨语言全栈虚拟机")]),a._v(", 可以作为“任何语言”的运行平台使用, 这里“任何语言”包括了 Java, Scala, Groovy, Kotlin 等基于 Java 虚拟机之上的语言, 还包括了 C, C++, Rust 等基于 LLVM 的语言, 同时支持其他像 JavaScript, Ruby, Python 和 R 语言等等. Graal VM 可以无额外开销地混合使用这些编程语言, 支持不同语言中混用对方的接口和对象, 也能够支持这些语言使用已经编写好的本地库文件.")]),a._v(" "),t("p",[a._v("Graal VM 的基本工作原理是将这些语言的源代码(例如 JavaScript)或源代码编译后的中间格式(例如 LLVM 字节码)通过解释器转换为能被 Graal VM 接受的中间表示(Intermediate Representation, IR), 譬如设计一个解释器专门对 LLVM 输出的字节码进行转换来支持 C 和 C++ 语言, 这个过程称为“"),t("strong",[a._v("程序特化")]),a._v("”(Specialized, 也常称为 Partial Evaluation). Graal VM 提供了 Truffle 工具集来快速构建面向一种新语言的解释器, 并用它构建了一个称为 Sulong 的高性能 LLVM 字节码解释器.")]),a._v(" "),t("p",[a._v("以更严格的角度来看, Graal VM 才是"),t("strong",[a._v("真正意义上与物理计算机相对应的高级语言虚拟机, 理由是它与物理硬件的指令集一样, 做到了只与机器特性相关而不与某种高级语言特性相关")]),a._v('. Oracle Labs 的研究总监 Thomas Wuerthinger 在接受 InfoQ 采访时谈到: "随着 Graal VM 1.0 的发布, 我们已经证明了拥有高性能的多语言虚拟机是可能的, 并且实现这个目标的最佳方式不是通过类似 Java 虚拟机和微软 CLR 那样带有语言特性的字节码". 对于一些本来就不以速度见长的语言运行环境, 由于 Graal VM 本身能够对输入的中间表示进行自动优化, 在运行时还能进行即时编译优化, 往往使用 Graal VM 实现能够获得比原生编译器更优秀的执行效率, 譬如 Graal.js 要优于 Node.js, Graal.Python 要优于 CPtyhon, TruffleRuby 要优于 Ruby MRI, FastR 要优于 R 语言等等.')]),a._v(" "),t("p",[a._v("针对 Java 而言, "),t("strong",[a._v("Graal VM 本来就是在 HotSpot 基础上诞生的, 天生就可作为一套完整的符合 Java SE 8 标准的 Java 虚拟机来使用")]),a._v(". 它和标准的 HotSpot 差异主要在即时编译器上, 其执行效率, 编译质量目前与标准版的 HotSpot 相比也是互有胜负. 但现在 Oracle Labs 和美国大学里面的研究院所做的最新即时编译技术的研究全部都迁移至基于 Graal VM 之上进行了, 其发展潜力令人期待. 如果 Java 语言或者 HotSpot 虚拟机真的有被取代的一天, 那从现在看来 Graal VM 是希望最大的一个候选项, 这场革命很可能会在 Java 使用者没有明显感觉的情况下悄然而来, Java 世界所有的软件生态都没有发生丝毫变化, 但天下第一的位置已经悄然更迭.")]),a._v(" "),t("h4",{attrs:{id:"新一代即时编译器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#新一代即时编译器"}},[a._v("#")]),a._v(" 新一代即时编译器")]),a._v(" "),t("p",[t("strong",[a._v("对需要长时间运行的应用来说, 由于经过充分预热, 热点代码会被 HotSpot 的探测机制准确定位捕获, 并将其编译为物理硬件可直接执行的机器码, 在这类应用中 Java 的运行效率很大程度上是取决于即时编译器所输出的代码质量")]),a._v(".")]),a._v(" "),t("p",[a._v("HotSpot 虚拟机中包含有"),t("strong",[a._v("两个即时编译器")]),a._v(", 分别是编译时间较短但输出代码优化程度较低的客户端编译器(简称为 C1)以及编译耗时长但输出代码优化质量也更高的服务端编译器(简称为 C2), 通常它们会在分层编译机制下与解释器互相配合来共同构成 HotSpot 虚拟机的执行子系统的.")]),a._v(" "),t("p",[a._v("自 JDK 10 起, HotSpot 中又加入了一个全新的即时编译器: "),t("strong",[a._v("Graal 编译器")]),a._v(", 看名字就可以联想到它是来自于前一节提到的 Graal VM. Graal 编译器是作为 C2 编译器替代者的角色登场的. C2 的历史已经非常长了, 可以追溯到 Cliff Click 大神读博士期间的作品, 这个由 C++写成的编译器尽管目前依然效果拔群, 但已经复杂到连 Cliff Click 本人都不愿意继续维护的程度. Graal 的编译效果短短几年间迅速追平了 C2, 甚至某些测试项中开始逐渐反超 C2 编译器. Graal 能够做比 C2 更加复杂的优化, 如“部分逃逸分析”(Partial Escape Analysis), 也拥有比 C2 更容易使用“激进预测性优化”(Aggressive Speculative Optimization)的策略, 支持自定义的预测性假设等等.")]),a._v(" "),t("p",[a._v("今天的 Graal 编译器尚且年幼, 还未经过足够多的实践验证, 所以仍然带着“"),t("strong",[a._v("实验状态")]),a._v("”的标签, 需要用开关参数去激活, 这让笔者不禁联想起 JDK 1.3 时代, HotSpot 虚拟机刚刚横空出世时的场景, 同样也是需要用开关激活, 也是作为 Classic 虚拟机的替代品的一段历史.")]),a._v(" "),t("p",[a._v("Graal 编译器未来的前途可期, 作为 Java 虚拟机执行代码的最新引擎, 它的持续改进, 会同时为 HotSpot 与 Graal VM 注入更快更强的驱动力.")]),a._v(" "),t("h4",{attrs:{id:"向原生迈进"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#向原生迈进"}},[a._v("#")]),a._v(" 向原生迈进")]),a._v(" "),t("p",[a._v("对不需要长时间运行的, 或者小型化的应用而言, Java(而不是指 Java ME)天生就带有一些劣势, 这里并不光是指跑个 HelloWorld 也需要百多兆的 JRE 之类的问题, 而更重要的是指近几年从大型单体应用架构向小型微服务应用架构发展的技术潮流下, Java 表现出来的不适应.")]),a._v(" "),t("p",[a._v("在微服务架构的视角下, 应用拆分后, 单个微服务很可能就不再需要再面对数十, 数百 GB 乃至 TB 的内存, 有了高可用的服务集群, 也无须追求单个服务要 7×24 小时不可间断地运行, 它们随时可以中断和更新; 但相应地, Java 的启动时间相对较长, 需要预热才能达到最高性能等特点就显得相悖于这样的应用场景. 在无服务架构中, 矛盾则可能会更加突出, 比起服务, 一个函数的规模通常会更小, 执行时间会更短, 当前最热门的无服务运行环境 AWS Lambda 所允许的最长运行时间仅有 15 分钟.")]),a._v(" "),t("p",[a._v("一直把软件服务作为重点领域的 Java 自然不可能对此视而不见, 在最新的几个 JDK 版本的功能清单中, 已经陆续推出了跨进程的, 可以面向用户程序的类型信息共享(Application Class Data Sharing, AppCDS, 允许把加载解析后的类型信息缓存起来, 从而提升下次启动速度, 原本 CDS 只支持 Java 标准库, 在 JDK 10 时的 AppCDS 开始支持用户的程序代码), 无操作的垃圾收集器(Epsilon, 只做内存分配而不做回收的收集器, 对于运行完就退出的应用十分合适)等改善措施. 而酝酿中的一个更彻底的解决方案, 是逐步开始对提前编译(Ahead of Time Compilation, AOT)提供支持.")]),a._v(" "),t("p",[t("strong",[a._v("提前编译是相对于即时编译的概念, 提前编译能带来的最大好处是 Java 虚拟机加载这些已经预编译成二进制的库之后就能够直接调用, 而无须再等待即时编译器在运行时将其编译成二进制机器码")]),a._v(". 理论上, 提前编译可以减少即时编译带来的预热时间, 减少 Java 应用长期给人带来的“第一次运行慢”不良体验, 可以放心地进行很多全程序的分析行为, 可以使用时间压力更大的优化措施.")]),a._v(" "),t("p",[a._v("但是提前编译的坏处也很明显, 它破坏了 Java“一次编写, 到处运行”的承诺, 必须为每个不同的硬件, 操作系统去编译对应的发行包. 也显著降低了 Java 链接过程的动态性, 必须要求加载的代码在编译期就是全部已知的, 而不能再是运行期才确定, 否则就只能舍弃掉已经提前编译好的版本, 退回到原来的即时编译执行状态.")]),a._v(" "),t("p",[a._v("早在 JDK 9 时期, Java 就提供了实验性的 Jaotc 命令来进行提前编译, 不过多数人试用过后都颇感失望, 大家原本期望的是类似于 Excelsior JET 那样的编译过后能生成本地代码完全脱离 Java 虚拟机运行的解决方案, 但 Jaotc 其实仅仅是代替掉即时编译的一部分作用而已, 仍需要运行于 HotSpot 之上.")]),a._v(" "),t("p",[a._v("直到 Substrate VM 出现, 才算是满足了人们心中对 Java 提前编译的全部期待. Substrate VM 是在 Graal VM 0.20 版本里新出现的一个极小型的运行时环境, 包括了独立的异常处理, 同步调度, 线程管理, 内存管理(垃圾收集)和 JNI 访问等组件, 目标是代替 HotSpot 用来支持提前编译后的程序执行. 它还包含了一个本地镜像的构造器(Native Image Generator)用于为用户程序建立基于 Substrate VM 的本地运行时镜像. 这个构造器采用指针分析(Points-To Analysis)技术, 从用户提供的程序入口出发, 搜索所有可达的代码. 在搜索的同时, 它还将执行初始化代码, 并在最终生成可执行文件时, 将已初始化的堆保存至一个堆快照之中. 这样一来, Substrate VM 就可以直接从目标程序开始运行, 而无须重复进行 Java 虚拟机的初始化过程. 但相应地, 原理上也决定了 Substrate VM 必须要求目标程序是完全封闭的, 即不能动态加载其他编译期不可知的代码和类库. 基于这个假设, Substrate VM 才能探索整个编译空间, 并通过静态分析推算出所有虚方法调用的目标方法.")]),a._v(" "),t("p",[a._v("Substrate VM 带来的好处是能显著降低内存占用及启动时间, 由于 HotSpot 本身就会有一定的内存消耗(通常约几十 MB), 这对最低也从几 GB 内存起步的大型单体应用来说并不算什么, 但在微服务下就是一笔不可忽视的成本. 根据 Oracle 官方给出的测试数据, 运行在 Substrate VM 上的小规模应用, 其内存占用和启动时间与运行在 HotSpot 相比有了 5 倍到 50 倍的下降, 具体结果如下图所示.")]),a._v(" "),t("p",[a._v("内存占用对比:")]),a._v(" "),t("p",[t("img",{attrs:{src:"http://icyfenix.cn/assets/img/substrate1.f8e5fe7f.png",alt:""}}),a._v("启动时间对比")]),a._v(" "),t("p",[t("img",{attrs:{src:"http://icyfenix.cn/assets/img/substrate2.e515ae74.png",alt:""}})]),a._v(" "),t("p",[a._v("Substrate VM 补全了 Graal VM“Run Programs Faster Anywhere”愿景蓝图里最后的一块拼图, 让 Graal VM 支持其他语言时不会有重量级的运行负担. 譬如运行 JavaScript 代码, Node.js 的 V8 引擎执行效率非常高, 但即使是最简单的 HelloWorld, 它也要使用约 20MB 的内存, 而运行在 Substrate VM 上的 Graal.js, 跑一个 HelloWorld 则只需要 4.2MB 内存而已, 且运行速度与 V8 持平. Substrate VM 的轻量特性, 使得它十分适合于嵌入至其他系统之中, 譬如 Oracle 自家的数据库就已经开始使用这种方式支持用不同的语言代替 PL/SQL 来编写存储过程.")]),a._v(" "),t("h4",{attrs:{id:"没有虚拟机的java"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#没有虚拟机的java"}},[a._v("#")]),a._v(" 没有虚拟机的Java")]),a._v(" "),t("p",[a._v("尽管 Java 已经看清楚了在微服务时代的前进目标, 但是J ava 语言和生态在微服务, 微应用环境中的天生的劣势并不会一蹴而就地被解决, 通往这个目标的道路注定会充满荆棘; 尽管已经有了放弃“一次编写, 到处运行”, 放弃语言动态性的思想准备, 但是这些特性并不单纯是宣传口号, 它们在 Java 语言诞生之初就被植入到基因之中, 当 Graal VM 试图打破这些规则的同时, 也受到了 Java 语言和在其之上的生态的强烈反噬, 这里将其中最主要的一些困难列举如下:")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("某些 Java 语言的特性, 使得 Graal VM 编译本地镜像的过程变得极为艰难. 譬如常见的反射, 除非使用安全管理器去专门进行认证许可, 否则反射机制具有在运行期动态调用几乎所有 API 接口的能力, 且具体会调用哪些接口, 在程序不会真正运行起来的编译期是无法获知的. 反射显然是 Java 不能放弃不能妥协的重要特性, 为此, 只能由程序的开发者明确地告知 Graal VM 有哪些代码可能被反射调用(通过 JSON 配置文件的形式), Graal VM 才能在编译本地程序时将它们囊括进来.")]),a._v(" "),t("div",{staticClass:"language-json line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        name"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"com.github.fenixsoft.SomeClass"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n        allDeclaredConstructors"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n        allPublicMethods"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        name"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"com.github.fenixsoft.AnotherClass"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n        fileds"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("name"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"foo"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("name"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"bar"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n        methods"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            name"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"<init>"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n            parameterTypes"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"char[]"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// something else ……")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br")])]),t("p",[a._v("这是一种可操作性极其低下却又无可奈何的解决方案, 即使开发者接受不厌其烦地列举出自己代码中所用到的反射 API, 但他们又如何能保证程序所引用的其他类库的反射行为都已全部被获知, 其中没有任何遗漏? 与此类似的还有另外一些语言特性, 如动态代理等. 另外, 一切非代码性质的资源, 如最典型的配置文件等, 也都必须明确加入配置中才能被 Graal VM 编译打包. 这导致了如果没有专门的工具去协助, 使用 Graal VM 编译 Java 的遗留系统即使理论可行, 实际操作也将是极度的繁琐.")])]),a._v(" "),t("li",[t("p",[a._v("大多数运行期对字节码的生成和修改操作, 在 Graal VM 看来都是无法接受的, 因为 Substrate VM 里面不再包含即时编译器和字节码执行引擎, 所以一切可能被运行的字节码, 都必须经过 AOT 编译成为原生代码. 请不要觉得运行期直接生成字节码会很罕见, 误以为导致的影响应该不算很大. 事实上, 多数实际用于生产的 Java 系统都或直接或间接, 或多或少引用了 ASM, CGLIB, Javassist 这类字节码库. 举个例子, CGLIB 是通过运行时产生字节码(生成代理类的子类)来做动态代理的, 长期以来这都是 Java 世界里进行类增强的主流形式, 因为面向接口的增强可以使用 JDK 自带的动态代理, 但对类的增强则并没有多少选择的余地. CGLIB 也是 Spring 用来做类增强的选择, 但 Graal VM 明确表示是不可能支持 CGLIB 的, 因此, 这点就必须由用户(面向接口编程), 框架(Spring 这些 DI 框架放弃 CGLIB 增强)和 Graal VM(起码得支持 JDK 的动态代理, 留条活路可走)来共同解决. 自 Spring Framework 5.2 起, @Configuration 注解中加入了一个新的 proxyBeanMethods 参数, 设置为 false 则可避免 Spring 对于非接口类型的 Bean 进行代理. 同样地, 对应在 Spring Boot 2.2 中, @SpringBootApplication 注解也增加了 proxyBeanMethods 参数, 通常采用 Graal VM 去构建的 Spring Boot 本地应用都需要设置该参数.")])]),a._v(" "),t("li",[t("p",[a._v("一切 HotSpot 虚拟机本身的内部接口, 譬如 JVMTI, JVMCI 等, 都将不复存在了——在本地镜像中, 连 HotSpot 本身都被消灭了, 这些接口自然成了无根之木. 这对使用者一侧的最大影响是再也无法进行 Java 语言层次的远程调试了, 最多只能进行汇编层次的调试. 在生产系统中一般也没有人这样做, 开发环境就没必要采用 Graal VM 编译, 这点的实际影响并不算大.")])]),a._v(" "),t("li",[t("p",[a._v("Graal VM 放弃了一部分可以妥协的语言和平台层面的特性, 譬如 Finalizer, 安全管理器, InvokeDynamic 指令和 MethodHandles, 等等, 在 Graal VM 中都被声明为不支持的, 这些妥协的内容大多倒并非全然无法解决, 主要是基于工作量性价比的原因. 能够被放弃的语言特性, 说明确实是影响范围非常小的, 所以这个对使用者来说一般是可以接受的.")])]),a._v(" "),t("li",[t("p",[a._v("……")])])]),a._v(" "),t("p",[a._v("以上, 是 Graal VM 在 Java 语言中面临的部分困难, 在整个 Java 的生态系统中, 数量庞大的第三方库才是真正最棘手的难题. 可以预料, 这些第三方库一旦脱离了 Java 虚拟机, 在原生环境中肯定会暴露出无数千奇百怪的异常行为. Graal VM 团队对此的态度非常务实, 并没有直接硬啃. 要建设可持续, 可维护的 Graal VM, 就不能为了兼容现有 JVM 生态, 做出过多的会影响性能, 优化空间和未来拓展的妥协牺牲, 为此, 应该也只能反过来由 Java 生态去适应 Graal VM, 这是 Graal VM 团队明确传递出对第三方库的态度.")]),a._v(" "),t("p",[a._v("为了推进 Java 生态向 Graal VM 兼容, Graal VM 主动拉拢了 Java 生态中最庞大的一个派系: Spring. 从 2018 年起, 来自 Oracle 的 Graal VM 团队与来自 Pivotal 的 Spring 团队已经紧密合作了很长的一段时间, 共同创建了 Spring Graal Native 项目来解决 Spring 全家桶在 Graal VM 上的运行适配问题, 下一个大的 Spring 版本(Spring Framework 5.3, Spring Boot 2.3)的其中一项主要改进就是能够开箱即用地支持 Graal VM, 这样用于微服务环境的 Spring Cloud 便会获得不受 Java 虚拟机束缚的更广阔的舞台空间.")]),a._v(" "),t("h4",{attrs:{id:"spring-over-graal"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-over-graal"}},[a._v("#")]),a._v(" Spring over Graal")]),a._v(" "),t("p",[a._v("前面几部分以定性的角度分析了 Graal VM 诞生的背景与它的价值, 在最后这部分将尝试进行一些实践和定量的讨论, 介绍具体如何使用 Graal VM 之余, 也希望能以更加量化的角度去理解程序运行在 Graal VM 之上, 会有哪些具体的收益和代价.")]),a._v(" "),t("p",[a._v("尽管需要到 2020 年 10 月正式发布之后, Spring 对 Graal VM 的支持才会正式提供, 但现在的我们其实已经可以使用 Graal VM 来(实验性地)运行 Spring, Spring Boot, Spring Data, Netty, JPA 等等的一系列组件(不过 SpringCloud 中的组件暂时还不行). 接下来, 我们将尝试使用 Graal VM 来编译一个标准的 Spring Boot 应用:")]),a._v(" "),t("ul",[t("li",[t("p",[t("strong",[a._v("环境准备")]),a._v(":")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("安装 Graal VM, 可以选择直接下载安装(版本选择 Graal VM CE 20.0.0), 然后配置好 PATH 和 JAVA_HOME 环境变量即可; 也可以选择使用 SDKMAN 来快速切换环境. 个人推荐后者, 毕竟目前还不适合长期基于 Graal VM 环境下工作, 经常手工切换会很麻烦.")]),a._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 安装SDKMAN")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("curl")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-s")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"https://get.sdkman.io"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("bash")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 安装Graal VM")]),a._v("\n$ sdk "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("java")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("20.0")]),a._v(".0.r8-grl\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])])]),a._v(" "),t("li",[t("p",[a._v("安装本地镜像编译依赖的 LLVM 工具链.")]),a._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# gu命令来源于Graal VM的bin目录")]),a._v("\n$ gu "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" native-image\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])]),t("p",[a._v("请注意, 这里已经假设机器上已有基础的 GCC 编译环境, 即已安装过 build-essential, libz-dev 等套件. 没有的话请先行安装. 对于 Windows 环境来说, 这步是需要 Windows SDK 7.1 中的 C++编译环境来支持. 我个人并不建议在 Windows 上进行 Java 应用的本地化操作, 如果说在 Linux 中编译一个本地镜像, 通常是为了打包到 Docker, 然后发布到服务器中使用. 那在 Windows 上编译一个本地镜像, 你打算用它来干什么呢?")])])])]),a._v(" "),t("li",[t("p",[t("strong",[a._v("编译准备")]),a._v(":")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("首先先假设准备编译的代码是“符合要求”的, 即没有使用到 Graal VM 不支持的特性, 譬如前面提到的 Finalizer, CGLIB, InvokeDynamic 这类功能. 然后, 由于我们用的是 Graal VM 的 Java 8 版本, 也必须假设你编译使用 Java 语言级别在 Java 8 以内.")])]),a._v(" "),t("li",[t("p",[a._v("然后需要用到 Spring Boot 2.3. 将 pom.xml 中的 Spring Boot 版本修改如下(假设你编译用的是 Maven, 用 Gradle 的请自行调整):")]),a._v(" "),t("div",{staticClass:"language-xml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("parent")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("groupId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("org.springframework.boot"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("groupId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("artifactId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("spring-boot-starter-parent"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("artifactId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("version")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("2.3.0.M4"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("version")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("relativePath")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("/>")])]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("parent")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br")])])]),a._v(" "),t("li",[t("p",[a._v("最后, 尽管可以通过命令行(使用 native-image 命令)来直接进行编译, 这对于没有什么依赖的普通 Jar 包, 写一个 Helloworld 来说都是可行的, 但对于 Spring Boot, 光是在命令行中写 Classpath 上都忙活一阵的, 建议还是使用 Maven 插件来驱动 Graal VM 编译, 这个插件能够根据 Maven 的依赖信息自动组织好 Classpath, 只需要填其他命令行参数就行了. 因为并不是每次编译都需要构建一次本地镜像, 为了不干扰使用普通 Java 虚拟机的编译, 建议在 Maven 中独立建一个 Profile 来调用 Graal VM 插件, 具体如下所示:")]),a._v(" "),t("div",{staticClass:"language-xml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("profiles")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("profile")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("id")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("graal"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("id")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("build")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("plugins")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("plugin")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n          "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("groupId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("org.graalvm.nativeimage"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("groupId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n          "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("artifactId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("native-image-maven-plugin"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("artifactId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n          "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("version")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("20.0.0"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("version")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n          "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("configuration")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("buildArgs")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("-Dspring.graal.remove-unused-autoconfig=true --no-fallback -H:+ReportExceptionStackTraces --no-server"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("buildArgs")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n          "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("configuration")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n          "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("executions")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("execution")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n              "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("goals")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n                "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("goal")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("native-image"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("goal")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n              "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("goals")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n              "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("phase")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("package"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("phase")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("execution")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n          "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("executions")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("plugin")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("plugin")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n          "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("groupId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("org.springframework.boot"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("groupId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n          "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("artifactId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("spring-boot-maven-plugin"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("artifactId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("plugin")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("plugins")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("build")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("profile")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("profiles")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br"),t("span",{staticClass:"line-number"},[a._v("20")]),t("br"),t("span",{staticClass:"line-number"},[a._v("21")]),t("br"),t("span",{staticClass:"line-number"},[a._v("22")]),t("br"),t("span",{staticClass:"line-number"},[a._v("23")]),t("br"),t("span",{staticClass:"line-number"},[a._v("24")]),t("br"),t("span",{staticClass:"line-number"},[a._v("25")]),t("br"),t("span",{staticClass:"line-number"},[a._v("26")]),t("br"),t("span",{staticClass:"line-number"},[a._v("27")]),t("br"),t("span",{staticClass:"line-number"},[a._v("28")]),t("br"),t("span",{staticClass:"line-number"},[a._v("29")]),t("br")])]),t("p",[a._v("这个插件同样在 Maven 中央仓库中不存在, 所以也得加上前面 Spring 的私有库:")]),a._v(" "),t("div",{staticClass:"language-xml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("pluginRepositories")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("pluginRepository")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("id")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("spring-milestone"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("id")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("Spring milestone"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("url")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("https://repo.spring.io/milestone"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("url")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("pluginRepository")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("pluginRepositories")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br")])]),t("p",[a._v("至此, 编译环境的准备顺利完成.")])])])]),a._v(" "),t("li",[t("p",[t("strong",[a._v("程序调整")]),a._v(":")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("首先, 前面提到了 Graal VM 不支持 CGLIB, 只能使用 JDK 动态代理, 所以应当把 Spring 对普通类的 Bean 增强给关闭掉:")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@SpringBootApplication")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("proxyBeanMethods "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ExampleApplication")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("SpringApplication")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("run")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ExampleApplication")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br")])])]),a._v(" "),t("li",[t("p",[a._v("然后, 这是最麻烦的一个步骤, "),t("strong",[a._v("程序里反射调用过哪些 API, 用到哪些资源, 动态代理, 还有哪些类型需要在编译期初始化的, 都必须使用 JSON 配置文件逐一告知 Graal VM")]),a._v(". 前面也说过了, 这事情只有理论上的可行性, 实际做起来完全不可操作. Graal VM 的开发团队当然也清楚这一点, 所以这个步骤实际的处理途径有两种, 第一种是假设你依赖的第三方包, 全部都在 Jar 包中内置了以上编译所需的配置信息, 这样你只要提供你程序里用户代码中用到的配置即可, 如果你程序里没写过反射, 没用过动态代理什么的, 那就什么配置都无需提供. 第二种途径是 Graal VM 计划提供一个 Native Image Agent 的代理, 只要将它挂载在在程序中, 以普通 Java 虚拟机运行一遍, 把所有可能的代码路径都操作覆盖到, 这个 Agent 就能自动帮你根据程序实际运行情况来生成编译所需要的配置, 这样无论是你自己的代码还是第三方的代码, 都不需要做预先的配置. 目前, 第二种方式中的 Agent 尚未正式发布, 只有方式一是可用的. 幸好, Spring 与 Graal VM 共同维护的在 Spring Graal Native项目已经提供了大多数 Spring Boot 组件的配置信息(以及一些需要在代码层面处理的 Patch), 我们只需要简单依赖该工程即可.")]),a._v(" "),t("div",{staticClass:"language-xml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("dependencies")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("dependency")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("groupId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("org.springframework.experimental"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("groupId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("artifactId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("spring-graal-native"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("artifactId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("version")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("0.6.1.RELEASE"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("version")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("dependency")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("dependency")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("groupId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("org.springframework"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("groupId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("artifactId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("spring-context-indexer"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("artifactId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("dependency")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("dependencies")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br")])])]),a._v(" "),t("li",[t("p",[a._v("最后, 在 Maven 中给出程序的启动类的路径:")]),a._v(" "),t("div",{staticClass:"language-xml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("properties")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("start-class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("com.example.ExampleApplication"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("start-class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("properties")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])])])])]),a._v(" "),t("li",[t("p",[t("strong",[a._v("开始编译")]),a._v(":")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("到此一切准备就绪, 通过 Maven 进行编译:")]),a._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ mvn "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-Pgraal")]),a._v(" clean package\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("编译的结果默认输出在 target 目录, 以启动类的名字命名.")])]),a._v(" "),t("li",[t("p",[a._v("因为 AOT 编译可以放心大胆地进行大量全程序的重负载优化, 所以无论是编译时间还是空间占用都非常可观. 笔者在 intel 9900K, 64GB 内存的机器上, 编译了一个只引用了 org.springframework.boot:spring-boot-starter-web 的 Helloworld 类型的工程, 大约耗费了两分钟时间.")]),a._v(" "),t("div",{staticClass:"language-text line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("[com.example.exampleapplication:9839]   (typeflow):  22,093.72 ms,  6.48 GB\n[com.example.exampleapplication:9839]    (objects):  34,528.09 ms,  6.48 GB\n[com.example.exampleapplication:9839]   (features):   6,488.74 ms,  6.48 GB\n[com.example.exampleapplication:9839]     analysis:  65,465.65 ms,  6.48 GB\n[com.example.exampleapplication:9839]     (clinit):   2,135.25 ms,  6.48 GB\n[com.example.exampleapplication:9839]     universe:   4,449.61 ms,  6.48 GB\n[com.example.exampleapplication:9839]      (parse):   2,161.78 ms,  6.32 GB\n[com.example.exampleapplication:9839]     (inline):   3,113.77 ms,  6.25 GB\n[com.example.exampleapplication:9839]    (compile):  15,892.88 ms,  6.56 GB\n[com.example.exampleapplication:9839]      compile:  25,044.34 ms,  6.56 GB\n[com.example.exampleapplication:9839]        image:   6,580.71 ms,  6.63 GB\n[com.example.exampleapplication:9839]        write:   1,362.73 ms,  6.63 GB\n[com.example.exampleapplication:9839]      [total]: 120,410.26 ms,  6.63 GB\n[INFO]\n[INFO] --- spring-boot-maven-plugin:2.3.0.M4:repackage (repackage) @ exampleapplication ---\n[INFO] Replacing main artifact with repackaged archive\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 02:08 min\n[INFO] Finished at: 2020-04-25T22:18:14+08:00\n[INFO] Final Memory: 38M/599M\n[INFO] ------------------------------------------------------------------------\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br"),t("span",{staticClass:"line-number"},[a._v("20")]),t("br"),t("span",{staticClass:"line-number"},[a._v("21")]),t("br"),t("span",{staticClass:"line-number"},[a._v("22")]),t("br"),t("span",{staticClass:"line-number"},[a._v("23")]),t("br")])])])])]),a._v(" "),t("li",[t("p",[t("strong",[a._v("效果评估")]),a._v(":")]),a._v(" "),t("ul",[t("li",[a._v("笔者使用 Graal VM 编译一个最简单的 Helloworld 程序(就只在控制台输出个 Helloworld, 什么都不依赖), 最终输出的结果大约 3.6MB, 启动时间能低至 2ms 左右. 如果用这个程序去生成 Docker 镜像(不基于任何基础镜像, 即使用 FROM scratch 打包), 产生的镜像还不到 3.8MB.  而 OpenJDK 官方提供的 Docker 镜像, 即使是 slim 版, 其大小也在 200MB 到 300MB 之间.")]),a._v(" "),t("li",[a._v("使用 Graal VM 编译一个简单的 Spring Boot Web 应用, 仅导入 Spring Boot 的 Web Starter 的依赖的话, 编译结果有 77MB, 原始的 Fat Jar 包大约是 16MB, 这样打包出来的 Docker 镜像可以不依赖任何基础镜像, 大小仍然是 78MB 左右(实际使用时最好至少也要基于 alpine 吧, 不差那几 MB). 相比起空间上的收益, 启动时间上的改进是更主要的, Graal VM 的本地镜像启动时间比起基于虚拟机的启动时间有着绝对的优势, 一个普通 Spring Boot 的 Web 应用启动一般 2, 3 秒之间, 而本地镜像只要 100 毫秒左右即可完成启动, 这确实有了数量级的差距.")]),a._v(" "),t("li",[a._v("不过, 必须客观地说明一点, 尽管 Graal VM 在启动时间, 空间占用, 内存消耗等容器化环境中比较看重的方面确实比 HotSpot 有明显的改进, 尽管 Graal VM 可以放心大胆地使用重负载的优化手段, 但如果是处于长时间运行这个前提下, 至少到目前为止, 没有任何迹象表明它能够超越经过充分预热后的 HotSpot. 在延迟, 吞吐量, 可监控性等方面, 仍然是 HotSpot 占据较大优势, 下图引用了 DEVOXX 2019 中 Graal VM 团队自己给出的 Graal VM 与 HotSpot JIT 在各个方面的对比评估:")])])])]),a._v(" "),t("p",[t("img",{attrs:{src:"http://icyfenix.cn/assets/img/graal-hotspot.ac4d5b60.png",alt:"Graal VM 与 HotSpot 的对比",title:"Graal VM 与 HotSpot 的对比"}})]),a._v(" "),t("p",[a._v("Graal VM 团队同时也说了, Graal VM 有望在 2020 年之内, 在延迟和吞吐量这些关键指标上追评 HotSpot 现在的表现. Graal VM 毕竟是一个 2018 年才正式公布的新生事物, 我们能看到它这两三年间在可用性, 易用性和性能上持续地改进, Graal VM 有望成为 Java 在微服务时代里的最重要的基础设施变革者, 这项改进的结果如何, 甚至可能与 Java 的前途命运息息相关.")]),a._v(" "),t("p",[a._v("‍")]),a._v(" "),t("p",[a._v("‍")]),a._v(" "),t("h4",{attrs:{id:"参考资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[a._v("#")]),a._v(" 参考资料")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"http://icyfenix.cn/tricks/2020/graalvm/",target:"_blank",rel:"noopener noreferrer"}},[a._v("凤凰架构"),t("OutboundLink")],1)])]),a._v(" "),t("p",[a._v("‍")])])}),[],!1,null,null,null);t.default=e.exports}}]);