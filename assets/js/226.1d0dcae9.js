(window.webpackJsonp=window.webpackJsonp||[]).push([[226],{555:function(t,s,a){"use strict";a.r(s);var n=a(4),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"_1-缓存基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-缓存基础"}},[t._v("#")]),t._v(" 1.缓存基础")]),t._v(" "),s("h4",{attrs:{id:"缓存基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缓存基础"}},[t._v("#")]),t._v(" 缓存基础")]),t._v(" "),s("h5",{attrs:{id:"_1-基本概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-基本概念"}},[t._v("#")]),t._v(" 1.基本概念")]),t._v(" "),s("p",[s("strong",[t._v("缓存命中率")]),t._v(": 当某个请求能够通过访问缓存而得到响应时, 称为"),s("strong",[t._v("缓存命中")]),t._v(". 缓存命中率越高, 缓存利用率也就越高.")]),t._v(" "),s("p",[s("strong",[t._v("最大空间")]),t._v(": 缓存通常位于内存中, 内存空间通常比磁盘空间小的多, 因此缓存的最大空间不可能非常大. 当缓存存放的数据量"),s("strong",[t._v("超过最大空间")]),t._v("时, 就需要"),s("strong",[t._v("淘汰")]),t._v("部分数据来存放新的数据.")]),t._v(" "),s("h4",{attrs:{id:"缓存实现与缓存位置🌟"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缓存实现与缓存位置🌟"}},[t._v("#")]),t._v(" 缓存实现与缓存位置🌟")]),t._v(" "),s("h5",{attrs:{id:"_1-浏览器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-浏览器"}},[t._v("#")]),t._v(" 1.浏览器")]),t._v(" "),s("p",[t._v("当 HTTP 响应"),s("strong",[t._v("允许")]),t._v("进行缓存时, 浏览器会将 HTML, CSS, JavaScript, 图片等"),s("strong",[t._v("静态")]),t._v("资源进行缓存.")]),t._v(" "),s("h5",{attrs:{id:"_2-isp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-isp"}},[t._v("#")]),t._v(" 2.ISP")]),t._v(" "),s("p",[s("strong",[t._v("网络服务提供商")]),t._v("(ISP) 是网络访问的"),s("strong",[t._v("第一跳")]),t._v(", 通过将"),s("strong",[t._v("数据缓存在 ISP 中")]),t._v("能够大大提高用户的"),s("strong",[t._v("访问速度")]),t._v(".")]),t._v(" "),s("h5",{attrs:{id:"_3-cdn"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-cdn"}},[t._v("#")]),t._v(" 3.CDN")]),t._v(" "),s("p",[s("strong",[t._v("内容分发网络")]),t._v("(Content distribution network, CDN) 是一种"),s("strong",[t._v("互连的网络系统")]),t._v(", 它利用"),s("strong",[t._v("更靠近用户的服务器")]),t._v("从而更快更可靠地将 HTML, CSS, JavaScript, 音乐, 图片, 视频等"),s("strong",[t._v("静态资源分发给用户")]),t._v(".")]),t._v(" "),s("p",[t._v("CDN 主要有以下优点:")]),t._v(" "),s("ul",[s("li",[t._v("更快地将数据分发给用户.")]),t._v(" "),s("li",[t._v("通过部署多台服务器, 从而提高系统整体的带宽性能.")]),t._v(" "),s("li",[t._v("多台服务器可以看成是一种"),s("strong",[t._v("冗余机制")]),t._v(", 从而具有高可用性.")])]),t._v(" "),s("h5",{attrs:{id:"_4-反向代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-反向代理"}},[t._v("#")]),t._v(" 4.反向代理")]),t._v(" "),s("p",[t._v("反向代理位于服务器之前, "),s("strong",[t._v("请求与响应都需要经过反向代理")]),t._v(". 通过将"),s("strong",[t._v("数据缓存在反向代理")]),t._v(", 在用户请求反向代理时就可以直接使用缓存进行响应.")]),t._v(" "),s("h5",{attrs:{id:"_5-本地缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-本地缓存"}},[t._v("#")]),t._v(" 5.本地缓存")]),t._v(" "),s("p",[t._v("使用 "),s("strong",[t._v("Guava Cache")]),t._v(" 将数据缓存在"),s("strong",[t._v("服务器本地内存")]),t._v("中, 服务器代码可以直接读取本地内存中的缓存, 速度非常快.")]),t._v(" "),s("p",[t._v("缓存分为"),s("strong",[t._v("本地缓存和分布式缓存")]),t._v(". Java "),s("strong",[t._v("自带的 ConcurrentHashMap 或 Guava")]),t._v(" 实现的是本地缓存, 最主要的特点是轻量以及快速, "),s("strong",[t._v("生命周期")]),t._v("随着 JVM 的销毁而结束, 并且在多实例的情况下, 每个实例都需要各自保存一份缓存, 多个机器"),s("strong",[t._v("缓存不具有一致性")]),t._v(". 通常用于保存变化较少的数据.")]),t._v(" "),s("h5",{attrs:{id:"_6-分布式缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-分布式缓存"}},[t._v("#")]),t._v(" 6.分布式缓存")]),t._v(" "),s("p",[t._v("使用 Redis, Memcache 等"),s("strong",[t._v("分布式缓存")]),t._v("将数据缓存在分布式缓存系统中. 相对于本地缓存来说, 分布式缓存需单独部署, 可以根据需求分配硬件资源. "),s("strong",[t._v("服务器集群都可以访问分布式缓存")]),t._v(", 而本地缓存需要在服务器集群之间进行同步, 实现难度和性能开销上都更大.")]),t._v(" "),s("p",[t._v("在多实例情况下, 各实例共用一份缓存数据, "),s("strong",[t._v("缓存数据具有一致性")]),t._v(". 由于需要保证 Redis 服务的"),s("strong",[t._v("高可用")]),t._v(", 整个程序架构上较为复杂.")]),t._v(" "),s("h5",{attrs:{id:"_7-数据库缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-数据库缓存"}},[t._v("#")]),t._v(" 7.数据库缓存")]),t._v(" "),s("p",[t._v("MySQL 等数据库具有自己的"),s("strong",[t._v("查询缓存机制")]),t._v("来提高查询效率.")]),t._v(" "),s("h5",{attrs:{id:"_8-java内部缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-java内部缓存"}},[t._v("#")]),t._v(" 8.Java内部缓存")]),t._v(" "),s("p",[t._v("Java 为了优化空间, 提高字符串, 基本数据类型包装类的创建效率, 设计了字符串常量池及 Byte, Short, Character, Integer, Long, Boolean 这六种包装类"),s("strong",[t._v("缓冲池")]),t._v(".")]),t._v(" "),s("h5",{attrs:{id:"_9-cpu多级缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-cpu多级缓存"}},[t._v("#")]),t._v(" 9.CPU多级缓存")]),t._v(" "),s("p",[t._v("CPU 为了解决运算速度与"),s("strong",[t._v("主存 IO 速度不匹配")]),t._v("的问题, 引入了"),s("strong",[t._v("多级缓存")]),t._v("结构, 同时使用 MESI 等缓存一致性协议来解决多核 CPU 缓存数据一致性的问题.")]),t._v(" "),s("h4",{attrs:{id:"缓存淘汰-更新-策略🌟"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缓存淘汰-更新-策略🌟"}},[t._v("#")]),t._v(" 缓存淘汰(更新)策略🌟")]),t._v(" "),s("p",[t._v("缓存淘汰算法通常用于缓存使用量"),s("strong",[t._v("超过了预设最大值")]),t._v("的时候, 实现对现有数据进行剔除.")]),t._v(" "),s("h6",{attrs:{id:"_1-fifo-lru-lfu算法剔除"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-fifo-lru-lfu算法剔除"}},[t._v("#")]),t._v(" (1)FIFO/LRU/LFU算法剔除")]),t._v(" "),s("p",[s("strong",[t._v("先进先出策略")]),t._v(" FIFO(First In First Out): 在实时性场景下, 需要经常访问最新的数据, 那么就可以使用 FIFO, 使得最先进入的数据被淘汰.")]),t._v(" "),s("p",[s("strong",[t._v("最近最久未使用策略")]),t._v(" LRU(Least Recently Used): 优先淘汰"),s("strong",[t._v("最久未使用")]),t._v("的数据, 也就是上次"),s("strong",[t._v("被访问时间距离现在最久")]),t._v("的数据. 该策略可以保证内存中的数据都是热点数据, 也就是经常被访问的数据, 从而保证缓存命中率.")]),t._v(" "),s("p",[s("strong",[t._v("最不经常使用策略")]),t._v(" LFU(Least Frequently Used): 优先淘汰一段时间内使用"),s("strong",[t._v("次数最少")]),t._v("的数据.")]),t._v(" "),s("h6",{attrs:{id:"_2-超时剔除"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-超时剔除"}},[t._v("#")]),t._v(" (2)超时剔除")]),t._v(" "),s("p",[t._v("通过给缓存数据"),s("strong",[t._v("设置超时时间")]),t._v(", 让其在过期时间后"),s("strong",[t._v("自动删除")]),t._v(", 如 Redis 提供的 "),s("strong",[t._v("expire")]),t._v(" 命令.")]),t._v(" "),s("h6",{attrs:{id:"_3-主动更新"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-主动更新"}},[t._v("#")]),t._v(" (3)主动更新")]),t._v(" "),s("p",[t._v("对于"),s("strong",[t._v("高一致性要求")]),t._v("场景下, 需要在真实数据更新后, "),s("strong",[t._v("立即")]),t._v("更新缓存数据.")]),t._v(" "),s("h4",{attrs:{id:"缓存问题🌟"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缓存问题🌟"}},[t._v("#")]),t._v(" 缓存问题🌟")]),t._v(" "),s("p",[s("strong",[t._v("缓存")]),t._v("也可能存在一些问题.")]),t._v(" "),s("h5",{attrs:{id:"_1-缓存穿透"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-缓存穿透"}},[t._v("#")]),t._v(" 1.缓存穿透")]),t._v(" "),s("h6",{attrs:{id:"_1-概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述"}},[t._v("#")]),t._v(" (1)概述")]),t._v(" "),s("p",[t._v("指的是对某个"),s("strong",[t._v("缓存中一定不存在")]),t._v("的数据进行请求, 该请求将会"),s("strong",[t._v("穿透缓存到达数据库")]),t._v(". 举个例子: 某个黑客故意制造缓存中"),s("strong",[t._v("不存在的 key")]),t._v(" 发起"),s("strong",[t._v("大量请求")]),t._v(", 导致大量请求落到数据库.")]),t._v(" "),s("p",[t._v("正常缓存处理流程:")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20211218174357591.png",alt:""}})]),t._v(" "),s("p",[t._v("缓存穿透情况:")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20211218174250613.png",alt:""}})]),t._v(" "),s("p",[t._v("一般 MySQL 默认的最大连接数在 150 左右, 这个可以通过 "),s("strong",[t._v("show variables like '%max_connections%';")]),t._v(" 命令来查看. 最大连接数一个还只是一个指标, CPU, 内存, 磁盘, 网络等无力条件都是其运行指标, 这些指标都会限制其并发能力! 所以一般 3000 个并发请求就能打死大部分数据库了.")]),t._v(" "),s("h6",{attrs:{id:"_2-解决方案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-解决方案"}},[t._v("#")]),t._v(" (2)解决方案")]),t._v(" "),s("p",[t._v("首先可以在"),s("strong",[t._v("应用层")]),t._v("记录一下"),s("strong",[t._v("缓存穿透的次数")]),t._v(", 方便问题查找与预警.")]),t._v(" "),s("p",[s("strong",[t._v("(1) 参数校验")])]),t._v(" "),s("p",[s("strong",[t._v("最基本")]),t._v("的就是首先"),s("strong",[t._v("做好参数校验")]),t._v(", 一些不合法的参数请求直接"),s("strong",[t._v("抛出异常信息")]),t._v("返回给客户端. 比如查询的"),s("strong",[t._v("数据库 id 不能小于")]),t._v(" 0, 传入的邮箱"),s("strong",[t._v("格式不对")]),t._v("的时候直接返回错误消息给客户端等等.")]),t._v(" "),s("p",[s("strong",[t._v("(2) 缓存无效key")])]),t._v(" "),s("p",[t._v("如果缓存和数据库"),s("strong",[t._v("都查不到")]),t._v("某个 key 的数据就"),s("strong",[t._v("写一个")]),t._v("这个键的"),s("strong",[t._v("空对象")]),t._v("到 Redis 中去并"),s("strong",[t._v("设置过期时间")]),t._v(", 具体命令如下:")]),t._v(" "),s("div",{staticClass:"language-mysql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("SET key value EX 10086\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("这种方式可以解决请求的 "),s("strong",[t._v("key 变化不频繁")]),t._v("的情况, 但如果黑客恶意攻击, 每次构建不同的请求 key, 会导致 Redis 中缓存大量无效的 key. 很明显这种方案并不能从根本上解决此问题. 如果用这种方式来解决穿透问题的话, "),s("strong",[t._v("尽量将无效")]),t._v("的 key 的过期时间设置"),s("strong",[t._v("短一点")]),t._v("比如 1 分钟.")]),t._v(" "),s("p",[t._v("整体流程大致如下:")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getObjectInclNullById")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从缓存中获取数据")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" cacheValue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cache"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 缓存为空")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cacheValue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从数据库中获取")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" storageValue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" storage"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 缓存空对象")]),t._v("\n        cache"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" storageValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果存储数据为空, 需要设置一个较短的过期时间(300秒)")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("storageValue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 必须设置过期时间, 否则如果键变化较大可能造成Redis内存不够用")]),t._v("\n            cache"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("expire")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("60")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" storageValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" cacheValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br")])]),s("p",[s("strong",[t._v("(3) 使用布隆过滤器")])]),t._v(" "),s("p",[t._v("需要做的就是"),s("strong",[t._v("判断 key 是否合法")]),t._v(". "),s("strong",[t._v("事先")]),t._v("把所有"),s("strong",[t._v("可能存在的请求的值都存放在布隆过滤器")]),t._v("中, 当用户请求过来, 先判断"),s("strong",[t._v("请求的值是否存在于布隆过滤器")]),t._v("中. "),s("strong",[t._v("不存在")]),t._v("则直接返回"),s("strong",[t._v("请求参数错误")]),t._v("信息给客户端, 存在时才会走下面的流程. 布隆过滤器在缓存层"),s("strong",[t._v("之前")]),t._v(". 如下图所示.")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20211218174647325.png",alt:""}})]),t._v(" "),s("p",[t._v("这种方法适用于数据"),s("strong",[t._v("命中率不高, 数据相对固定")]),t._v(", 实时性低(通常是"),s("strong",[t._v("数据集较大")]),t._v(") 的场景.")]),t._v(" "),s("p",[t._v("使用 BloomFilter 布隆过滤器的话, 需要"),s("strong",[t._v("提前将已存在的 KEY 始化存储")]),t._v("到 BloomFilter 缓存中. 整个逻辑如下: 根据 KEY 查询 BloomFilter 缓存. 如果"),s("strong",[t._v("不存在对应的值, 直接返回")]),t._v("; 如果存在就说明是大概率是系统预先存入的键, 这时候就可以去 Redis 中查询是否存在缓存. 如果存在缓存值, 直接返回; 如果不存在则继续到数据库去查数据. 找到的数据可以再次存储到 Redis 中, 并且可以"),s("strong",[t._v("更新 BloomFilter")]),t._v(" 缓存记录.")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("BloomFilter的实现")])])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("Redisson BloomFilter")]),t._v(": Java Redis 库.")]),t._v(" "),s("li",[t._v("基于 Guava 实现.")]),t._v(" "),s("li",[t._v("基于 Redis 自带的 Bitmaps 结构.")])]),t._v(" "),s("h5",{attrs:{id:"_2-缓存雪崩"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-缓存雪崩"}},[t._v("#")]),t._v(" 2.缓存雪崩")]),t._v(" "),s("h6",{attrs:{id:"_1-概述-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述-2"}},[t._v("#")]),t._v(" (1)概述")]),t._v(" "),s("p",[t._v("指由于"),s("strong",[t._v("数据没有被加载到缓存")]),t._v("中, 或缓存数据在"),s("strong",[t._v("同一时间大面积过期失效")]),t._v(", 或"),s("strong",[t._v("缓存服务器宕机等")]),t._v(", 导致大量请求同时打到数据库, 造成数据库压力过大. 在有缓存的系统中, 缓存分担了很大一部分数据请求. 当发生缓存雪崩时, 数据库无法处理这么大的请求, 导致数据库崩溃. 就像"),s("strong",[t._v("雪崩")]),t._v("一样.")]),t._v(" "),s("h6",{attrs:{id:"_2-解决方案-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-解决方案-2"}},[t._v("#")]),t._v(" (2)解决方案")]),t._v(" "),s("ul",[s("li",[t._v("为了防止缓存在同一时间大面积过期导致的缓存雪崩, 可以通过"),s("strong",[t._v("观察用户行为")]),t._v(", 合理设置"),s("strong",[t._v("缓存过期时间")]),t._v(". 热点数据设置永不过期, 一般数据错开过期时间, 比如设置"),s("strong",[t._v("随机过期值")]),t._v("而不是全部一样.")]),t._v(" "),s("li",[t._v("为了防止缓存服务器宕机出现的缓存雪崩, 可以使用"),s("strong",[t._v("分布式缓存")]),t._v(", 保证"),s("strong",[t._v("缓冲层的高可用")]),t._v(". 分布式缓存中每一个节点只缓存部分的数据, 当某个节点宕机时可以保证其它节点的缓存仍然可用, 实现"),s("strong",[t._v("高可用")]),t._v(".")]),t._v(" "),s("li",[t._v("可以进行"),s("strong",[t._v("缓存预热")]),t._v(", "),s("strong",[t._v("提前放一些数据到缓存中")]),t._v(", 避免在系统刚启动不久由于还未将大量数据进行缓存而导致缓存雪崩.")]),t._v(" "),s("li",[s("strong",[t._v("依赖隔离组件为后端限流并降级")]),t._v(". 可以考虑进行"),s("strong",[t._v("服务降级")]),t._v(", 并对重要的资源进行"),s("strong",[t._v("隔离")]),t._v(".")])]),t._v(" "),s("p",[t._v("另一种说法:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("事前")]),t._v(": 尽量保证整个 Redis 集群的"),s("strong",[t._v("高可用性")]),t._v(", 发现机器宕机尽快补上. 选择合适的"),s("strong",[t._v("内存淘汰策略")]),t._v(".")]),t._v(" "),s("li",[s("strong",[t._v("事中")]),t._v(": "),s("strong",[t._v("本地缓存")]),t._v(" + "),s("strong",[t._v("限流与降级")]),t._v(", 避免 MySQL 崩掉.")]),t._v(" "),s("li",[s("strong",[t._v("事后")]),t._v(": 利用 Redis "),s("strong",[t._v("持久化")]),t._v("机制保存的数据"),s("strong",[t._v("尽快恢复缓存")]),t._v(".")])]),t._v(" "),s("h5",{attrs:{id:"_3-缓存一致性问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-缓存一致性问题"}},[t._v("#")]),t._v(" 3.缓存一致性问题")]),t._v(" "),s("h6",{attrs:{id:"_1-概述-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述-3"}},[t._v("#")]),t._v(" (1)概述")]),t._v(" "),s("p",[s("strong",[t._v("缓存层和存储层")]),t._v("的数据存在一定时间窗口的"),s("strong",[t._v("不一致性")]),t._v(". 缓存一致性要求数据"),s("strong",[t._v("更新的同时缓存数据也能够实时更新")]),t._v(".")]),t._v(" "),s("p",[t._v("更新 DB 和操作缓存两个动作之间, 明显"),s("strong",[t._v("缺乏原子性")]),t._v(", 有可能更新 DB 完成, 但是操作缓存失败(淘汰或者更新), 反之亦然. 所以两者之间必然是存在断层的.")]),t._v(" "),s("h6",{attrs:{id:"_2-解决方案-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-解决方案-3"}},[t._v("#")]),t._v(" (2)解决方案")]),t._v(" "),s("p",[s("strong",[t._v("可以考虑先更新数据库, 再更新缓存")]),t._v(". 如果采用先淘汰缓存, 后更新 DB 操作, 如果在 DB 更新完成之前, 来了一个新的读请求, 那么就会查询出数据库的旧数据, 缓存到 Redis, 导致 DB 更新完成之后, 两者数据不一致. 如果先更新 DB, 然后操作缓存失败, 客户端读取到的是旧的数据, 此时也是存在 DB 与缓存不一致. 但是实际业务上, 更多"),s("strong",[t._v("还是以 DB 数据为准")]),t._v(", 这种读取到旧数据的业务影响可能比读取到为未更新到 DB 的数据影响要小. 使用缓存本身就能容忍有一定的脏数据出现.")]),t._v(" "),s("p",[t._v("要保证缓存一致性需要付出很大的代价, "),s("strong",[t._v("==缓存数据最好是那些对一致性要求不高的数据, 允许缓存数据存在一些脏数据==")]),t._v(".")]),t._v(" "),s("h5",{attrs:{id:"_4-缓存无底洞"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-缓存无底洞"}},[t._v("#")]),t._v(" 4.缓存无底洞")]),t._v(" "),s("h6",{attrs:{id:"_1-概述-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述-4"}},[t._v("#")]),t._v(" (1)概述")]),t._v(" "),s("p",[t._v('缓存 "无底洞" 指的是为了满足业务要求'),s("strong",[t._v("添加了大量缓存节点")]),t._v(", 但是"),s("strong",[t._v("性能不但没有好转反而下降")]),t._v("了的现象.")]),t._v(" "),s("p",[s("strong",[t._v("产生原因")]),t._v(": 缓存系统通常"),s("strong",[t._v("采用 hash 函数将 key 映射到对应的缓存节点")]),t._v(", 随着缓存节点数目的增加, "),s("strong",[t._v("键值分布到更多的节点上")]),t._v(", 导致客户端一次批量操作会涉及"),s("strong",[t._v("多次网络操作")]),t._v(", 这意味着批量操作的"),s("strong",[t._v("耗时会随着节点数目的增加而不断增大")]),t._v(". 此外, 网络连接数变多, 对节点的性能也有一定影响.")]),t._v(" "),s("h6",{attrs:{id:"_2-解决方案-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-解决方案-4"}},[t._v("#")]),t._v(" (2)解决方案")]),t._v(" "),s("ul",[s("li",[t._v("优化"),s("strong",[t._v("批量数据")]),t._v("操作命令.")]),t._v(" "),s("li",[t._v("减少网络通信"),s("strong",[t._v("次数")]),t._v(".")]),t._v(" "),s("li",[t._v("降低"),s("strong",[t._v("接入成本")]),t._v(", 使用长连接, 连接池, "),s("strong",[t._v("NIO")]),t._v(" 等.")])]),t._v(" "),s("p",[s("strong",[t._v("分布式")]),t._v("条件下, 以 Redis 的 "),s("strong",[t._v("mget")]),t._v(" 指令为例, 有"),s("strong",[t._v("四种批量操作的解决方案")]),t._v(".")]),t._v(" "),s("ul",[s("li",[t._v("串行命令. 逐次执行 n 个 get 命令.")]),t._v(" "),s("li",[t._v('串行 IO. 在客户端缓存"'),s("strong",[t._v("键-槽-节点")]),t._v('"的对应关系, 在同一个节点的数据使用 Pipeline 请求完成.')]),t._v(" "),s("li",[t._v("并行 IO. 使用多线程方式进行串行 IO.")]),t._v(" "),s("li",[t._v("hash_tag 实现. Redis cluster 的 hash_tag 功能可以将多个 key 强制分配到一个节点上, 减少操作.")])]),t._v(" "),s("h4",{attrs:{id:"数据分布方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据分布方式"}},[t._v("#")]),t._v(" 数据分布方式")]),t._v(" "),s("h5",{attrs:{id:"_1-顺序分布"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-顺序分布"}},[t._v("#")]),t._v(" 1.顺序分布")]),t._v(" "),s("p",[t._v("将数据划分为"),s("strong",[t._v("多个连续")]),t._v("的部分, 按数据的 ID 或者时间分布到不同节点上. 例如 User 表的 ID 范围为 1 ~ 7000, 使用顺序分布可以将其划分成多个子表, 对应的主键范围为 1 ~ 1000, 1001 ~ 2000, ..., 6001 ~ 7000.")]),t._v(" "),s("p",[t._v("顺序分布相比于哈希分布的主要优点如下:")]),t._v(" "),s("ul",[s("li",[t._v("能保持数据原有的"),s("strong",[t._v("顺序")]),t._v(".")]),t._v(" "),s("li",[t._v("能够准确控制每台服务器存储的数据量, 从而使得存储空间的利用率最大.")])]),t._v(" "),s("h5",{attrs:{id:"_2-哈希分布"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-哈希分布"}},[t._v("#")]),t._v(" 2.哈希分布")]),t._v(" "),s("p",[s("strong",[t._v("哈希分布")]),t._v("就是将数据计算哈希值之后, 按照"),s("strong",[t._v("哈希值")]),t._v("分配到不同的节点上. 例如有 N 个节点, 数据的主键为 key, 则将该数据分配的节点序号为: "),s("strong",[t._v("hash(key) % N")]),t._v(".")]),t._v(" "),s("p",[t._v("传统的哈希分布算法存在一个问题: 当节点数量变化时, 也就是 N 值变化, 那么几乎所有的数据"),s("strong",[t._v("都需要重新分布")]),t._v(", 即"),s("strong",[t._v("再哈希")]),t._v(", 将"),s("strong",[t._v("导致大量的数据迁移")]),t._v(".")]),t._v(" "),s("h5",{attrs:{id:"_3-一致性哈希分布🌟"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-一致性哈希分布🌟"}},[t._v("#")]),t._v(" 3.一致性哈希分布🌟")]),t._v(" "),s("p",[s("strong",[t._v("Distributed Hash Table")]),t._v("(DHT) 是一种"),s("strong",[t._v("哈希分布方式")]),t._v(", 可以解决传统哈希分布在服务器节点数量变化再哈希时"),s("strong",[t._v("大量数据迁移")]),t._v("的问题.")]),t._v(" "),s("h6",{attrs:{id:"_1-基本原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-基本原理"}},[t._v("#")]),t._v(" (1)基本原理")]),t._v(" "),s("p",[t._v("将哈希空间 [0, 2n-1] 看成一个"),s("strong",[t._v("哈希环")]),t._v(", 每个服务器"),s("strong",[t._v("节点")]),t._v("都配置到"),s("strong",[t._v("哈希环")]),t._v("上. "),s("strong",[t._v("每个数据对象通过哈希取模得到哈希值之后, 存放到哈希环中顺时针方向第一个大于等于该哈希值的节点上")]),t._v(".")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20200527211945450.png",alt:"image-20200527211945450"}})]),t._v(" "),s("p",[t._v("一致性哈希在"),s("strong",[t._v("增加或者删除节点时只会影响到哈希环中相邻的节点")]),t._v(", 例如下图中新增节点 5, 只需要将它前一个节点 4 上的数据重新进行分布即可, 对于节点 1, 2, 3 都没有影响. 可以减少整体的数据迁移量.")]),t._v(" "),s("h6",{attrs:{id:"_2-虚拟节点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-虚拟节点"}},[t._v("#")]),t._v(" (2)虚拟节点")]),t._v(" "),s("p",[t._v("上面描述的一致性哈希依然可能存在数据"),s("strong",[t._v("分布不均匀")]),t._v("的问题, 不同节点存储的"),s("strong",[t._v("数据量")]),t._v("有可能会存在"),s("strong",[t._v("很大的不同")]),t._v(". 数据不均匀主要是因为"),s("strong",[t._v("节点在哈希环上分布的不均匀")]),t._v(", 这种情况在"),s("strong",[t._v("节点数量很少")]),t._v("的情况下尤其明显.")]),t._v(" "),s("p",[t._v("解决方式是通过"),s("strong",[t._v("增加多个虚拟节点")]),t._v(", 然后将"),s("strong",[t._v("虚拟节点映射到真实节点")]),t._v("上. 虚拟节点的数量比真实节点来得"),s("strong",[t._v("多")]),t._v(", 那么虚拟节点在哈希环上分布的均匀性就会比原来的真实节点好, 从而使得数据分布也更加均匀.")]),t._v(" "),s("h4",{attrs:{id:"如何保证缓存与数据库的双写一致性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何保证缓存与数据库的双写一致性"}},[t._v("#")]),t._v(" 如何保证缓存与数据库的双写一致性?")]),t._v(" "),s("p",[t._v("只要用"),s("strong",[t._v("缓存")]),t._v(", 就可能会涉及到缓存与数据库双存储双写, 只要是双写, 就"),s("strong",[t._v("一定会有数据一致性的问题")]),t._v(", 如何解决一致性问题?")]),t._v(" "),s("p",[t._v("最经典的"),s("strong",[t._v("缓存 + 数据库读写")]),t._v("的模式, 就是 "),s("strong",[t._v("Cache Aside Pattern")]),t._v(".")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("读的时候, 先读缓存, 缓存没有的话, 就读数据库, 然后取出数据后放入缓存, 同时返回响应")]),t._v(".")]),t._v(" "),s("li",[s("strong",[t._v("更新的时候, 先更新数据库, 然后再删除缓存.")])])]),t._v(" "),s("p",[s("strong",[t._v("为什么是删除缓存, 而不是更新缓存?")])]),t._v(" "),s("p",[t._v("因为在复杂点的缓存场景中, 缓存不仅是数据库中直接取出来的值. 比如可能更新了某个表的一个字段, 然后其对应的缓存, 是需要查询另外两个表的数据并进行"),s("strong",[t._v("运算")]),t._v(", 才能计算出缓存的最新值.")]),t._v(" "),s("p",[t._v("举个例子, 对于更新缓存的方案, 一个缓存涉及的表的字段, 在 1 分钟内就修改了 100 次, 那么缓存更新 100 次; 但是这个缓存在 1 分钟内"),s("strong",[t._v("只被读取了 1 次")]),t._v(", 有大量的冷数据. 而如果是删除缓存的话, 那么在 1 分钟内, 这个缓存不过就"),s("strong",[t._v("重新计算一次")]),t._v("而已, 开销大幅度降低.")]),t._v(" "),s("p",[s("strong",[t._v("用到缓存才去算缓存")]),t._v(". "),s("strong",[t._v("删除缓存而不是更新缓存, 就是一个 lazy 计算的思想")]),t._v(", 不要每次都重新做复杂的计算, 不管它会不会用到, 而是让它到需要被使用的时候再重新计算.")]),t._v(" "),s("p",[t._v("问题: "),s("strong",[t._v("先更新数据库, 再删除缓存")]),t._v(". 如果"),s("strong",[t._v("删除缓存失败")]),t._v("了, 那么会"),s("strong",[t._v("导致数据库中是新数据, 缓存中是旧数据")]),t._v(", 数据就出现了"),s("strong",[t._v("不一致")]),t._v(".")]),t._v(" "),s("p",[t._v("解决思路: "),s("strong",[t._v("先删除缓存, 再更新数据库")]),t._v(". 如果"),s("strong",[t._v("数据库更新失败了, 那么数据库中是旧数据")]),t._v(", 缓存中是"),s("strong",[t._v("空的")]),t._v(", 那么数据不会不一致. 因为读的时候缓存没有, 所以去读了数据库中的旧数据, 然后更新到缓存中.")]),t._v(" "),s("p",[t._v("问题: 数据发生了变更, 先删除了缓存, 然后要去修改数据库, "),s("strong",[t._v("此时还没修改")]),t._v(". 一个请求过来, 去读缓存, 发现缓存空了, 去查询数据库, "),s("strong",[t._v("查到了修改前的旧数据")]),t._v(", 放到了"),s("strong",[t._v("缓存")]),t._v("中. 随后数据变更的程序完成了数据库的修改. 此时数据库和缓存中的数据不一致了.")]),t._v(" "),s("p",[s("strong",[t._v("为什么上亿流量高并发场景下, 缓存会出现这个问题?")])]),t._v(" "),s("p",[t._v("只有在对一个数据在并发的进行读写的时候, 才可能会出现这种问题. 其实如果说并发量很低的话, 特别是读并发很低, 日活就 1 W, 那么很少的情况下, 会出现刚才描述的那种不一致的场景. 但如果日活上亿, 每秒并发读可能成千上万, 每秒只要有数据更新的请求, 就"),s("strong",[t._v("可能会出现上述的数据库 + 缓存不一致的情况")]),t._v(".")]),t._v(" "),s("p",[s("strong",[t._v("解决方案如下:")])]),t._v(" "),s("p",[t._v("更新数据的时候, 根据"),s("strong",[t._v("数据的唯一标识")]),t._v(', 将操作路由之后, 发送到一个 JVM 内部队列中. 读取数据的时候, 如果发现数据不在缓存中, 那么将重新执行 "读取数据+更新缓存" 的操作, 根据唯一标识路由之后, 也发送到同一个 JVM 内部队列中.')]),t._v(" "),s("p",[t._v("一个队列对应一个工作线程, 每个工作线程"),s("strong",[t._v("串行")]),t._v("拿到对应的操作, 然后一条一条的执行. 这样的话, 一个数据变更的操作, 先删除缓存, 然后再去更新数据库, 但是还没完成更新. 此时如果一个读请求过来, 没有读到缓存, 那么可以先将缓存更新的请求发送到队列中, 此时会在队列中积压, 然后同步等待缓存更新完成.")]),t._v(" "),s("p",[t._v("这里有一个"),s("strong",[t._v("优化点")]),t._v(", 一个队列中, 其实"),s("strong",[t._v("多个更新缓存请求串在一起是没意义的")]),t._v(", 因此可以做过滤, 如果发现队列中已经有一个更新缓存的请求了, 那么就不用再放个更新请求操作进去了, 直接等待前面的更新操作请求完成即可.")]),t._v(" "),s("p",[t._v("待那个队列对应的工作线程完成了上一个操作的数据库的修改之后, 才会去执行下一个操作, 也就是缓存更新的操作, 此时会从数据库中读取最新的值, 然后写入缓存中.")]),t._v(" "),s("p",[t._v("如果请求还在等待时间范围内, 不断轮询发现可以取到值了, 那么就直接返回; 如果请求等待的时间超过一定时长, 那么这一次直接从数据库中读取当前的旧值.")]),t._v(" "),s("h4",{attrs:{id:"lru实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lru实现"}},[t._v("#")]),t._v(" LRU实现")]),t._v(" "),s("p",[t._v("以下是基于 "),s("strong",[t._v("双向链表 + HashMap")]),t._v(" 的 LRU 算法实现, 对算法的解释如下:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("访问")]),t._v("某个节点时, 将其从原来的位置"),s("strong",[t._v("删除")]),t._v(", 并重新插入到"),s("strong",[t._v("链表头部")]),t._v(". 这样就能保证链表"),s("strong",[t._v("尾部")]),t._v("存储的就是"),s("strong",[t._v("最近最久未使用")]),t._v("的节点, 当节点数量"),s("strong",[t._v("大于")]),t._v("缓存最大空间时就"),s("strong",[t._v("淘汰")]),t._v("链表尾部的节点.")]),t._v(" "),s("li",[t._v("为了使"),s("strong",[t._v("删除")]),t._v("操作时间复杂度为 "),s("strong",[t._v("O(1)")]),t._v(", 就不能采用遍历的方式找到某个节点. "),s("strong",[t._v("HashMap")]),t._v(" 存储着 "),s("strong",[t._v("Key 到节点")]),t._v("的映射, 通过 Key 就能以 O(1) 的时间得到节点, 然后再以 O(1) 的时间将其从"),s("strong",[t._v("双向队列")]),t._v("中删除.")])]),t._v(" "),s("p",[t._v("采⽤这两种数据结构的组合, get 操作就可以在 "),s("strong",[t._v("O(1)")]),t._v(" 时间复杂度内完成了. 由于 put 操作要删除的节点⼀般是尾部节点, 所以可以⽤⼀个变量 tail 时刻记录尾部节点的位置, 这样 put 操作也可以在 O(1) 时间内完成了.")]),t._v(" "),s("p",[t._v("先来一个结点类.")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LRUNode")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LRUNode")]),t._v(" next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LRUNode")]),t._v(" pre"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LRUNode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])]),s("p",[t._v("注意: 不管是 put 方法还是 get 方法, "),s("strong",[t._v("都需要将访问的结点重新放到链表头部")]),t._v(", 所以会抽出一个公共的方法.")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LRUCache")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LRUNode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" map "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashMap")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LRUNode")]),t._v(" head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LRUNode")]),t._v(" tail"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 缓存最⼤容量大于1")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" capacity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LRUCache")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" capacity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("capacity "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" capacity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** 插入元素 */")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 说明缓存中没有任何元素")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("head "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\thead "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LRUNode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\ttail "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\tmap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 说明缓存中已经存在这个元素了")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LRUNode")]),t._v(" node "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 更新值")]),t._v("\n\t\t\tnode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 把这个结点从链表删除并且插⼊到头结点")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeAndInsert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 说明当前缓存不存在这个值")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LRUNode")]),t._v(" newHead "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LRUNode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此处溢出则需要删除最近最近未使用的节点")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" capacity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\tmap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tail"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 删除尾结点")]),t._v("\n\t\t\t\ttail "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tail"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pre"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t\ttail"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\tmap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newHead"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将新的结点插入链表头部")]),t._v("\n\t\t\tnewHead"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\thead"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pre "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newHead"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\thead "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newHead"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** 从缓存中取值 */")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LRUNode")]),t._v(" node "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果有值则需要将这个结点放到链表头部")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 把这个节点删除并插⼊到头结点")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeAndInsert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeAndInsert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LRUNode")]),t._v(" node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 特殊情况先判断, 例如该节点是头结点或是尾部节点")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" tail"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\ttail "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pre"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\ttail"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tnode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pre"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\tnode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pre "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pre"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 插⼊到头结点")]),t._v("\n\t\tnode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\tnode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pre "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\thead"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pre "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\thead "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br"),s("span",{staticClass:"line-number"},[t._v("39")]),s("br"),s("span",{staticClass:"line-number"},[t._v("40")]),s("br"),s("span",{staticClass:"line-number"},[t._v("41")]),s("br"),s("span",{staticClass:"line-number"},[t._v("42")]),s("br"),s("span",{staticClass:"line-number"},[t._v("43")]),s("br"),s("span",{staticClass:"line-number"},[t._v("44")]),s("br"),s("span",{staticClass:"line-number"},[t._v("45")]),s("br"),s("span",{staticClass:"line-number"},[t._v("46")]),s("br"),s("span",{staticClass:"line-number"},[t._v("47")]),s("br"),s("span",{staticClass:"line-number"},[t._v("48")]),s("br"),s("span",{staticClass:"line-number"},[t._v("49")]),s("br"),s("span",{staticClass:"line-number"},[t._v("50")]),s("br"),s("span",{staticClass:"line-number"},[t._v("51")]),s("br"),s("span",{staticClass:"line-number"},[t._v("52")]),s("br"),s("span",{staticClass:"line-number"},[t._v("53")]),s("br"),s("span",{staticClass:"line-number"},[t._v("54")]),s("br"),s("span",{staticClass:"line-number"},[t._v("55")]),s("br"),s("span",{staticClass:"line-number"},[t._v("56")]),s("br"),s("span",{staticClass:"line-number"},[t._v("57")]),s("br"),s("span",{staticClass:"line-number"},[t._v("58")]),s("br"),s("span",{staticClass:"line-number"},[t._v("59")]),s("br"),s("span",{staticClass:"line-number"},[t._v("60")]),s("br"),s("span",{staticClass:"line-number"},[t._v("61")]),s("br"),s("span",{staticClass:"line-number"},[t._v("62")]),s("br"),s("span",{staticClass:"line-number"},[t._v("63")]),s("br"),s("span",{staticClass:"line-number"},[t._v("64")]),s("br"),s("span",{staticClass:"line-number"},[t._v("65")]),s("br"),s("span",{staticClass:"line-number"},[t._v("66")]),s("br"),s("span",{staticClass:"line-number"},[t._v("67")]),s("br"),s("span",{staticClass:"line-number"},[t._v("68")]),s("br"),s("span",{staticClass:"line-number"},[t._v("69")]),s("br"),s("span",{staticClass:"line-number"},[t._v("70")]),s("br"),s("span",{staticClass:"line-number"},[t._v("71")]),s("br"),s("span",{staticClass:"line-number"},[t._v("72")]),s("br"),s("span",{staticClass:"line-number"},[t._v("73")]),s("br"),s("span",{staticClass:"line-number"},[t._v("74")]),s("br"),s("span",{staticClass:"line-number"},[t._v("75")]),s("br")])]),s("p",[s("strong",[t._v("LinkedHashMap")]),t._v(" 也可以用来实现"),s("strong",[t._v("固定大小")]),t._v("的 LRU 缓存, 当 LRU 缓存已经满了的时候, 它会把最老的键值对移出缓存. LinkedHashMap 提供了一个称为 "),s("strong",[t._v("removeEldestEntry")]),t._v("() 的方法, 该方法会被 put() 和 putAll() 调用来删除最老的键值对.")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LRUCache")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkedHashMap")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CACHE_SIZE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * 传递进来最多能缓存多少数据\n     */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LRUCache")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" cacheSize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true表示让linkedHashMap按照访问顺序来进行排序, 最近访问的放在头部, 最老访问的放在尾部")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Math")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ceil")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cacheSize "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.75")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.75f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CACHE_SIZE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cacheSize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * 钩子方法, 通过put新增键值对的时候, 若该方法返回true\n     * 便移除该map中最老的键和值\n     */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeEldestEntry")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Entry")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" eldest"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当map中的数据量大于指定的缓存个数的时候, 就自动删除最老的数据")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CACHE_SIZE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br")])]),s("p",[t._v("‍")]),t._v(" "),s("p",[t._v("‍")]),t._v(" "),s("h4",{attrs:{id:"参考资料"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),s("ul",[s("li",[t._v("大规模分布式存储系统")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://tech.meituan.com/cache_about.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("缓存那些事"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://my.oschina.net/jayhu/blog/732849",target:"_blank",rel:"noopener noreferrer"}},[t._v("一致性哈希算法"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E5%85%A7%E5%AE%B9%E5%82%B3%E9%81%9E%E7%B6%B2%E8%B7%AF",target:"_blank",rel:"noopener noreferrer"}},[t._v("内容分发网络"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=r.exports}}]);