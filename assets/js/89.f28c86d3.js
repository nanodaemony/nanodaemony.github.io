(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{403:function(s,t,a){"use strict";a.r(t);var n=a(7),r=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"_51-线程安全与内置锁优化🌼"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_51-线程安全与内置锁优化🌼"}},[s._v("#")]),s._v(" 51.线程安全与内置锁优化🌼")]),s._v(" "),t("p",[s._v("本节对应《深入理解 Java 虚拟机》的第十三章")]),s._v(" "),t("h4",{attrs:{id:"概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[s._v("#")]),s._v(" 概述")]),s._v(" "),t("p",[s._v("在软件业发展的初期, 程序编写都是以算法为核心的, 程序员会把数据和过程分别作为独立的部分来考虑, 数据代表问题空间中的客体, 程序代码则用于处理这些数据, 这种思维方式直接站在计算机的角度去抽象问题和解决问题, 被称为"),t("strong",[s._v("面向过程")]),s._v("的编程思想. 与此相对, 面向对象的编程思想则站在现实世界的角度去抽象和解决问题, 它把数据和行为都看作对象的一部分, 这样可以让程序员能以符合现实世界的思维方式来编写和组织程序.")]),s._v(" "),t("p",[s._v('面向对象的编程思想极大地提升了现代软件开发的效率和软件可以达到的规模, 但是现实世界与计算机世界之间不可避免地存在一些差异. 例如, 人们很难想象现实中的对象在一项工作进行期间, 会被不停地中断和切换, 对象的属性(数据)可能会在中断期间被修改和变脏, 而这些事件在计算机世界中是再普通不过的事情. 有时候, 良好的设计原则不得不向现实做出一些妥协, 大家必须保证程序在计算机中正确无误地运行, 然后再考虑如何将代码组织得更好, 让程序运行得更快. 对于本章的主题 "高效并发" 来说, 首先需要保证并发的正确性, 然后在此基础上来实现高效. 本章就先从'),t("strong",[s._v("如何保证并发的正确性及如何实现线程安全说起")]),s._v(".")]),s._v(" "),t("h4",{attrs:{id:"线程安全"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线程安全"}},[s._v("#")]),s._v(" 线程安全")]),s._v(" "),t("p",[s._v('《Java 并发编程实战(Java Concurrency In Practice)》为 "线程安全" 做出了一个比较恰当的定义: "'),t("strong",[s._v("当多个线程同时访问一个对象时, 如果不用考虑这些线程在运行时环境下的调度和交替执行, 也不需要进行额外的同步, 或者在调用方进行任何其他的协调操作, 调用这个对象的行为都可以获得正确的结果, 那就称这个对象是线程安全的")]),s._v('".')]),s._v(" "),t("p",[s._v("这个定义就很严谨而且有可操作性, 它要求线程安全的代码都必须"),t("strong",[s._v("具备一个共同特征")]),s._v(": "),t("strong",[s._v("代码本身封装了所有必要的正确性保障手段(如互斥同步等), 令调用者无须关心多线程下的调用问题, 更无须自己实现任何措施来保证多线程环境下的正确调用")]),s._v('. 这点听起来简单, 但其实并不容易做到, 在许多场景中, 都会将这个定义弱化一些. 如果把 "调用这个对象的行为" 限定为 "单次调用", 这个定义的其他描述能够成立的话, 那么就已经可以称它是线程安全了. 为什么要弱化这个定义? 现在先暂且放下这个问题, 稍后再详细探讨.')]),s._v(" "),t("h5",{attrs:{id:"_1-java语言中的线程安全"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-java语言中的线程安全"}},[s._v("#")]),s._v(" 1.Java语言中的线程安全")]),s._v(" "),t("p",[s._v("前面已经有了线程安全的一个可操作的定义, 那接下来就讨论一下: "),t("strong",[s._v("在 Java 语言中, 线程安全具体是如何体现的? 有哪些操作是线程安全的")]),s._v("? 这里讨论的线程安全, 将以多个线程之间存在共享数据访问为前提. 因为如果根本不存在多线程, 又或者一段代码根本不会与其他线程共享数据, 那么从线程安全的角度上看, 程序是串行执行还是多线程执行对它来说是没有什么区别的.")]),s._v(" "),t("p",[s._v("为了更深入地理解线程安全, 在这里可以不把线程安全当作一个非真即假的二元排他选项来看待, 而是按照线程安全的  "),t("strong",[s._v('"安全程度" 由强至弱来排序')]),s._v(", 可以将 Java 语言中各种操作共享的数据分为以下五类: "),t("mark",[t("strong",[s._v("不可变, 绝对线程安全, 相对线程安全, 线程兼容和线程对立")])]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("下面介绍的就是什么是线程安全, 如何理解线程安全的粒度?")])]),s._v(" "),t("h6",{attrs:{id:"_1-不可变"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-不可变"}},[s._v("#")]),s._v(" (1)不可变")]),s._v(" "),t("p",[s._v("在 Java 语言里面(特指 JDK 5 以后, 即 Java 内存模型被修正之后的 Java 语言), "),t("strong",[s._v("不可变(Immutable)的对象一定是线程安全的, 无论是对象的方法实现还是方法的调用者, 都不需要再进行任何线程安全保障措施")]),s._v('. 前面讲解 "final 关键字带来的可见性" 时曾经提到过这一点: '),t("strong",[s._v("只要一个不可变的对象被正确地构建出来(即没有发生 this 引用逃逸的情况), 那其外部的可见状态永远都不会改变, 永远都不会看到它在多个线程之中处于不一致的状态")]),s._v('. "不可变" 带来的安全性是最直接, 最纯粹的.')]),s._v(" "),t("p",[s._v("Java 语言中, "),t("strong",[s._v("如果多线程共享的数据是一个基本数据类型, 那么只要在定义时使用 final 关键字修饰它就可以保证它是不可变的")]),s._v(". 如果共享数据是一个对象, 由于 Java 语言目前暂时还没有提供值类型的支持, 那就需要对象自行保证其行为不会对其状态产生任何影响才行. 如果读者没想明白这句话所指的意思, 不妨类比 java.lang.String 类的对象实例, 它是一个"),t("strong",[s._v("典型的不可变对象")]),s._v(", 用户调用它的 substring(), replace() 和 concat() 这些方法都"),t("strong",[s._v("不会影响它原来的值, 只会返回一个新构造的字符串对象")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("保证对象行为不影响自己状态的途径有很多种, 最简单的一种就是把对象里面带有状态的变量都声明为 final, 这样在构造函数结束之后, 它就是不可变的")]),s._v(", 例如代码清单 13-1 中所示的 java.lang.Integer 构造函数, 它通过将内部状态变量 value 定义为 final 来保障状态不变.")]),s._v(" "),t("blockquote",[t("p",[s._v("代码清单13-1 JDK 中 Integer 类的构造函数")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * The value of the <code>Integer</code>.\n * @serial\n */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * Constructs a newly allocated <code>Integer</code> object that\n * represents the specified <code>int</code> value.\n *\n * @param   value   the value to be represented by the\n * <code>Integer</code> object.\n */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("value "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br")])]),t("p",[s._v("在 Java 类库 API 中符合"),t("strong",[s._v("不可变要求的类型")]),s._v(", 除了上面提到的 String 之外, 常用的还有枚举类型及 java.lang.Number 的部分子类, 如 Long 和 Double 等数值包装类型, BigInteger 和 BigDecimal 等大数据类型. 但同为 Number 子类型的原子类 AtomicInteger 和 AtomicLong 则是可变的, 读者不妨看看这两个原子类的源码, 想一想为什么它们要设计成可变的.")]),s._v(" "),t("h6",{attrs:{id:"_2-绝对线程安全"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-绝对线程安全"}},[s._v("#")]),s._v(" (2)绝对线程安全")]),s._v(" "),t("p",[s._v('绝对的线程安全能够完全满足线程安全的定义, 这个定义其实是很严格的, 一个类要达到 "不管运行时环境如何, 调用者都不需要任何额外的同步措施" 可能需要付出非常高昂的, 甚至不切实际的代价. 在 Java API 中标注自己是线程安全的类, 大多数都不是绝对的线程安全. 可以通过 Java API 中一个不是 "绝对线程安全" 的 "线程安全类型" 来看看这个语境里的 "'),t("strong",[s._v("绝对")]),s._v('" 究竟是什么意思.')]),s._v(" "),t("p",[s._v("如果说 java.util.Vector 是一个线程安全的容器, 相信所有的 Java 程序员对此都不会有异议, 因为它的 add(), get() 和 size() 等方法都是被 synchronized 修饰的, 尽管这样效率不高, 但保证了具备原子性, 可见性和有序性. 不过, 即使它所有的方法都被修饰成 synchronized, 也不意味着调用它的时候就永远都不再需要同步手段了, 请看看代码清单 13-2 中的测试代码.")]),s._v(" "),t("blockquote",[t("p",[s._v("代码清单13-2 对 Vector 线程安全的测试")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Vector")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" vector "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Vector")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            vector"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),s._v(" removeThread "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Runnable")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("run")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" vector"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("size")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    vector"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("remove")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),s._v(" printThread "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Runnable")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("run")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" vector"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("size")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("vector"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        removeThread"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("start")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        printThread"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("start")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 不要同时产生过多的线程, 否则会导致操作系统假死")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("activeCount")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br")])]),t("p",[s._v("运行结果如下:")]),s._v(" "),t("div",{staticClass:"language-ziti1 line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('Exception in thread "Thread-132" java.lang.ArrayIndexOutOfBoundsException:\nArray index out of range: 17\n    at java.util.Vector.remove(Vector.java:777)\n    at org.fenixsoft.mulithread.VectorTest$1.run(VectorTest.java:21)\n    at java.lang.Thread.run(Thread.java:662)\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("很明显, 尽管这里使用到的 Vector 的 get(), remove() 和 size() 方法都是同步的, 但是在多线程的环境中, 如果不在"),t("strong",[s._v("方法调用端做额外的同步措施")]),s._v(", 使用这段代码仍然是"),t("strong",[s._v("不安全")]),s._v("的. 因为如果另一个线程恰好在错误的时间里删除了一个元素, 导致序号 i 已经不再可用, 再用 i 访问数组就会抛出一个 ArrayIndexOutOfBoundsException 异常. 如果要保证这段代码能正确执行下去, 所以不得不把 removeThread 和 printThread 的定义改成代码清单 13-3 所示的这样.")]),s._v(" "),t("blockquote",[t("p",[s._v("代码清单13-3 必须加入同步保证 Vector 访问的线程安全性")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),s._v(" removeThread "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Runnable")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("run")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("vector"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" vector"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("size")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                vector"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("remove")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),s._v(" printThread "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Runnable")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("run")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("vector"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" vector"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("size")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("vector"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br")])]),t("p",[s._v("假如 Vector 一定要做到绝对的线程安全, 那就必须"),t("strong",[s._v("在它内部维护一组一致性的快照访问才行")]),s._v(", 每次对其中元素进行改动都要产生新的快照, 这样要付出的时间和空间成本都是非常大的.")]),s._v(" "),t("h6",{attrs:{id:"_3-相对线程安全"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-相对线程安全"}},[s._v("#")]),s._v(" (3)相对线程安全")]),s._v(" "),t("p",[t("strong",[s._v("相对线程安全就是通常意义上所讲的线程安全, 它需要保证对这个对象单次的操作是线程安全的")]),s._v(", 在调用的时候不需要进行额外的保障措施, 但是对于一些特定顺序的连续调用, 就可能需要在调用端使用额外的同步手段来保证调用的正确性. 代码清单 13-2 和代码清单 13-3 就是相对线程安全的案例.")]),s._v(" "),t("p",[t("strong",[s._v("在 Java 语言中, 大部分声称线程安全的类都属于这种类型")]),s._v(", 例如 Vector, HashTable, Collections 的 synchronizedCollection() 方法包装的集合等.")]),s._v(" "),t("h6",{attrs:{id:"_4-线程兼容"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-线程兼容"}},[s._v("#")]),s._v(" (4)线程兼容")]),s._v(" "),t("p",[t("strong",[s._v("线程兼容是指对象本身并不是线程安全的, 但是可以通过在调用端正确地使用同步手段来保证对象在并发环境中可以安全地使用")]),s._v(". 平常说一个类不是线程安全的, 通常就是指这种情况. Java 类库 API 中大部分的类都是线程兼容的, 如与前面的 Vector 和 HashTable 相对应的集合类 ArrayList 和 HashMap 等.")]),s._v(" "),t("h6",{attrs:{id:"_5-线程对立"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-线程对立"}},[s._v("#")]),s._v(" (5)线程对立")]),s._v(" "),t("p",[t("strong",[s._v("线程对立是指不管调用端是否采取了同步措施, 都无法在多线程环境中并发使用代码")]),s._v(". 由于 Java 语言天生就支持多线程的特性, 线程对立这种排斥多线程的代码是很少出现的, 而且通常都是有害的, 应当尽量避免.")]),s._v(" "),t("p",[s._v("一个线程对立的例子是 Thread 类的 suspend() 和 resume() 方法. 如果有两个线程同时持有一个线程对象, 一个尝试去中断线程, 一个尝试去恢复线程, 在并发进行的情况下, 无论调用时是否进行了同步, 目标线程都存在死锁风险. 假如 suspend() 中断的线程就是即将要执行 resume() 的那个线程, 那就肯定要产生死锁了. 也正是这个原因, "),t("strong",[s._v("suspend() 和 resume() 方法都已经被声明废弃")]),s._v("了. 常见的线程对立的操作还有 System.setIn(), Sytem.setOut() 和 System.runFinalizersOnExit() 等.")]),s._v(" "),t("h5",{attrs:{id:"_2-线程安全的实现方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-线程安全的实现方法"}},[s._v("#")]),s._v(" 2.线程安全的实现方法")]),s._v(" "),t("p",[s._v("了解过"),t("strong",[s._v("什么是线程安全")]),s._v("之后, 紧接着的一个问题就是应该"),t("strong",[s._v("如何实现线程安全")]),s._v(". 这听起来似乎是一件由代码如何编写来决定的事情, 不应该出现在讲解 Java 虚拟机的书里. 确实, 如何实现线程安全与代码编写有很大的关系, 但虚拟机提供的同步和锁机制也起到了至关重要的作用. 在本节中, 如何编写代码实现线程安全, 以及虚拟机如何实现同步与锁这两方面都会涉及, 相对而言更偏重后者一些, 只要读者明白了 "),t("strong",[s._v("Java 虚拟机线程安全措施的原理与运作过程")]),s._v(", 自己再去思考代码如何编写就不是一件困难的事情了.")]),s._v(" "),t("p",[s._v("同步是指在多个线程并发访问共享数据时, 保证共享数据在同一个时刻只被一个(或者是一些, 使用信号量的时候)线程使用.")]),s._v(" "),t("p",[s._v("保证线程间的"),t("strong",[s._v("安全同步")]),s._v("有以下几种实现方式:")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("阻塞同步")]),s._v("(悲观策略): Synchronized, ReentrantLock.")]),s._v(" "),t("li",[t("strong",[s._v("非阻塞同步")]),s._v("(乐观策略): CAS.")]),s._v(" "),t("li",[t("strong",[s._v("无同步")]),s._v(": ThreadLocal, 栈封闭, 不可变类.")])]),s._v(" "),t("h6",{attrs:{id:"_1-互斥-阻塞同步"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-互斥-阻塞同步"}},[s._v("#")]),s._v(" (1)互斥/阻塞同步")]),s._v(" "),t("p",[s._v("互斥同步面临的主要问题是进行线程阻塞和唤醒所带来的性能开销, 因此这种同步也被称为"),t("mark",[t("strong",[s._v("阻塞同步")])]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("互斥同步")]),s._v("是一种最常见也是最主要的并发正确性保障手段. "),t("strong",[s._v("同步是指在多个线程并发访问共享数据时, 保证共享数据在同一个时刻只被一条(或者是一些, 当使用信号量的时候)线程使用")]),s._v(". 而互斥是实现同步的一种手段, "),t("strong",[s._v("临界区(Critical Section), 互斥量(Mutex)和信号量(Semaphore)")]),s._v(' 都是常见的互斥实现方式. 因此在 "互斥同步" 这四个字里面, '),t("mark",[t("strong",[s._v("互斥是因, 同步是果; 互斥是方法, 同步是目的")])]),s._v(".")]),s._v(" "),t("p",[s._v("互斥同步可以使用 "),t("strong",[s._v("synchronized")]),s._v(" 和 "),t("strong",[s._v("ReentrantLock")]),s._v(" 实现. 它是一种"),t("strong",[s._v("悲观")]),s._v("的并发策略, 主要的问题就是线程"),t("strong",[s._v("阻塞和唤醒")]),s._v("可能带来性能问题.")]),s._v(" "),t("blockquote",[t("p",[s._v("synchronized")])]),s._v(" "),t("p",[s._v("参考: synchronized原理解析")]),s._v(" "),t("p",[t("mark",[t("strong",[s._v("在 Java 里面, 最基本的互斥同步手段就是 synchronized 关键字, 这是一种块结构的同步语法. synchronized 关键字经过 Javac 编译之后, 会在同步块的前后分别形成 monitorenter 和 monitorexit 这两个字节码指令. 这两个字节码指令都需要一个 reference 类型的参数来指明要锁定和解锁的对象. 如果 Java 源码中的 synchronized 明确指定了对象参数, 那就以这个对象的引用作为 reference; 如果没有明确指定, 那将根据 synchronized 修饰的方法类型(如实例方法或类方法), 来决定是取代码所在的对象实例还是取类型对应的 Class 对象来作为线程要持有的锁.")])])]),s._v(" "),t("p",[s._v("根据《Java 虚拟机规范》的要求, 在执行 monitorenter 指令时, 首先要去尝试获取对象的锁. 如果这个对象没被锁定, 或者当前线程已经持有了那个对象的锁, 就把"),t("strong",[s._v("锁的计数器的值增加一")]),s._v(", 而在执行 monitorexit 指令时会将"),t("strong",[s._v("锁计数器的值减一")]),s._v(". 一旦计数器的值为零, 锁随即就被释放了. 如果获取对象锁失败, 那当前线程就应当被阻塞等待, 直到请求锁定的对象被持有它的线程释放为止.")]),s._v(" "),t("p",[s._v("从功能上看, 根据以上《Java 虚拟机规范》对 monitorenter 和 monitorexit 的行为描述, 可以得出两个关于 synchronized 的直接推论, 这是使用它时需特别注意的:")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("被 synchronized 修饰的同步块对同一条线程来说是可重入的. 这意味着同一线程反复进入同步块也不会出现自己把自己锁死的情况")]),s._v(".")]),s._v(" "),t("li",[t("strong",[s._v("被 synchronized 修饰的同步块在持有锁的线程执行完毕并释放锁之前, 会无条件地阻塞后面其他线程的进入")]),s._v(". 这意味着无法像处理某些数据库中的锁那样, 强制已获取锁的线程释放锁; 也无法强制正在等待锁的线程中断等待或超时退出.")])]),s._v(" "),t("p",[s._v("从执行成本的角度看, 持有锁是一个"),t("strong",[s._v("重量级")]),s._v("(Heavy-Weight)的操作. 在主流 Java 虚拟机实现中, Java 的线程是映射到操作系统的原生内核线程之上的, "),t("mark",[t("strong",[s._v("如果要阻塞或唤醒一条线程, 则需要操作系统来帮忙完成, 这就不可避免地陷入用户态到核心态的转换中, 进行这种状态转换需要耗费很多的处理器时间")])]),s._v(". 尤其是对于代码特别简单的同步块(譬如被 synchronized 修饰的 getter() 或 setter() 方法), 状态转换消耗的时间甚至会比用户代码本身执行的时间还要长. 因此才说, synchronized 是 Java 语言中一个重量级的操作, 有经验的程序员都只会在确实必要的情况下才使用这种操作. 而虚拟机本身也会进行一些优化, 譬如在通知操作系统阻塞线程之前加入一段自旋等待过程, 以避免频繁地切入核心态之中. 稍后会专门介绍 Java 虚拟机锁优化的措施.")]),s._v(" "),t("blockquote",[t("p",[s._v("ReentrantLock")])]),s._v(" "),t("p",[s._v("还可以使用 JUC 包中的 "),t("strong",[s._v("ReentrantLock")]),s._v(" 实现互斥同步. 相比 synchronized, ReentrantLock 增加了一些高级功能, 主要以下 3 项: 等待可中断, 可实现公平锁, 以及锁可以绑定多个条件(参考: 相比synchronized的拓展功能).")]),s._v(" "),t("h6",{attrs:{id:"_2-非阻塞同步"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-非阻塞同步"}},[s._v("#")]),s._v(" (2)非阻塞同步")]),s._v(" "),t("p",[s._v("从解决问题的方式上看, 互斥同步属于一种"),t("strong",[s._v("悲观的并发策略")]),s._v(", 其总是认为"),t("strong",[s._v("只要不去做正确的同步措施(例如加锁), 那就肯定会出现问题, 无论共享的数据是否真的会出现竞争, 它都会进行加锁")]),s._v("(这里讨论的是概念模型, 实际上虚拟机会优化掉很大一部分不必要的加锁), 这将会导致用户态到核心态转换, 维护锁计数器和检查是否有被阻塞的线程需要被唤醒等开销.")]),s._v(" "),t("p",[s._v("随着硬件指令集的发展, 已经有了另外一个选择: "),t("mark",[t("strong",[s._v("基于冲突检测的乐观并发策略")])]),s._v(", 通俗地说就是"),t("strong",[s._v("不管风险, 先进行操作, 如果没有其他线程争用共享数据, 那操作就直接成功了; 如果共享的数据的确被争用, 产生了冲突, 那再进行其他的补偿措施, 最常用的补偿措施是不断地重试, 直到出现没有竞争的共享数据为止")]),s._v(". 这种乐观并发策略的实现不再需要把线程阻塞挂起, 因此这种同步操作被称为"),t("mark",[t("strong",[s._v("非阻塞同步")])]),s._v(", 使用这种措施的代码也常被称为"),t("strong",[s._v("无锁(Lock-Free)编程")]),s._v(".")]),s._v(" "),t("p",[s._v('为什么笔者说使用乐观并发策略需要 "硬件指令集的发展"? 因为必须'),t("mark",[t("strong",[s._v("要求操作和冲突检测这两个步骤具备原子性")])]),s._v(". 靠什么来保证原子性? 如果这里再使用互斥同步来保证就完全失去意义了, "),t("strong",[s._v("所以只能靠硬件来实现这件事情, 硬件保证某些从语义上看起来需要多次操作的行为可以只通过一条处理器指令就能完成")]),s._v(", 这类指令常用的有:")]),s._v(" "),t("ul",[t("li",[s._v("测试并设置(Test-and-Set);")]),s._v(" "),t("li",[s._v("获取并增加(Fetch-and-Increment);")]),s._v(" "),t("li",[s._v("交换(Swap);")]),s._v(" "),t("li",[t("mark",[t("strong",[s._v("比较并交换")])]),s._v("(Compare-and-Swap, 下文称 "),t("strong",[s._v("CAS")]),s._v(");")]),s._v(" "),t("li",[s._v("加载链接/条件储存(Load-Linked/Store-Conditional, 下文称 LL/SC).")])]),s._v(" "),t("p",[s._v("其中, 前面的三条是 20 世纪就已经存在于大多数指令集之中的处理器指令, 后面的两条是现代处理器新增的, 而且这两条指令的目的和功能也是类似的. 在 IA64, x86 指令集中有用 cmpxchg 指令完成的 CAS 功能, 在 SPARC-TSO 中也有用 casa 指令实现的, 而在 ARM 和 PowerPC 架构下, 则需要使用一对 ldrex/strex 指令来完成 LL/SC 的功能. 因为 "),t("strong",[s._v("Java 里最终暴露出来的是 CAS 操作")]),s._v(", 所以以 CAS 指令为例进行讲解.")]),s._v(" "),t("p",[t("mark",[t("strong",[s._v("CAS 指令需要有三个操作数, 分别是内存位置(在 Java 中可以简单地理解为变量的内存地址, 用 V 表示), 旧的预期值(用 A 表示)和准备设置的新值(用 B 表示). CAS 指令执行时, 当且仅当 V 符合 A 时, 处理器才会用 B 更新 V 的值, 否则它就不执行更新. 但是, 不管是否更新了 V 的值, 都会返回 V 的旧值, 上述的处理过程是一个原子操作, 执行期间不会被其他线程中断")])]),s._v(".")]),s._v(" "),t("p",[s._v("在 JDK 5 之后, Java 类库中才开始使用 CAS 操作, 该操作由 sun.misc.Unsafe 类里面的 "),t("strong",[s._v("compareAndSwapInt()")]),s._v("  和 "),t("strong",[s._v("compareAndSwapLong()")]),s._v("  等几个方法包装提供. HotSpot 虚拟机在内部对这些方法做了特殊处理, "),t("strong",[s._v("即时编译出来的结果就是一条平台相关的处理器 CAS 指令")]),s._v(", 没有方法调用的过程, 或者可以认为是无条件内联进去了. 不过由于 Unsafe 类在设计上就不是提供给用户程序调用的类("),t("code",[s._v("Unsafe::getUnsafe()")]),s._v("​ 的代码中限制了只有启动类加载器(Bootstrap ClassLoader)加载的 Class 才能访问它), 因此在 JDK 9 之前只有 Java 类库可以使用 CAS, 譬如 J.U.C 包里面的整数原子类, 其中的 compareAndSet() 和 getAndIncrement() 等方法都使用了 Unsafe 类的 CAS 操作来实现. 而如果用户程序也有使用 CAS 操作的需求, 那要么就"),t("strong",[s._v("采用反射手段突破 Unsafe 的访问限制")]),s._v(", 要么就只能通过 Java 类库 API 来间接使用它. 直到 JDK 9 之后, Java 类库才在 "),t("strong",[s._v("VarHandle 类里开放了面向用户程序使用的 CAS 操作")]),s._v(".")]),s._v(" "),t("p",[s._v("下面将用一段在前面章节中没有解决的问题代码来介绍如何通过 CAS 操作避免阻塞同步. 测试的代码如代码清单 12-1 所示, 为了节省版面就不重复贴到这里了. 这段代码里曾经通过 20 个线程自增 10000 次的操作来证明 volatile 变量不具备原子性, 那么如何才能让它"),t("strong",[s._v("具备原子性")]),s._v("呢? 之前的解决方案是把 race++ 操作或 increase() 方法用同步块包裹起来, 这毫无疑问是一个解决方案, 但是如果改成代码清单 13-4 所示的写法, 效率将会提高许多.")]),s._v(" "),t("blockquote",[t("p",[s._v("代码清单13-4 Atomic 的原子自增运算")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * Atomic 变量自增运算测试\n */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AtomicTest")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AtomicInteger")]),s._v(" race "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AtomicInteger")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("increase")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        race"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("incrementAndGet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("THREADS_COUNT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Exception")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" threads "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("THREADS_COUNT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("THREADS_COUNT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            threads"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Runnable")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("run")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("increase")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            threads"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("start")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("activeCount")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("yield")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("race"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br")])]),t("p",[s._v("运行结果如下:")]),s._v(" "),t("div",{staticClass:"language-ziti1 line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("200000\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("使用 AtomicInteger 代替 int 后")]),s._v(", 程序输出了正确的结果, 这一切都要"),t("strong",[s._v("归功于 incrementAndGet() 方法的原子性")]),s._v(". 它的实现其实非常简单, 如代码清单 13-5 所示.")]),s._v(" "),t("blockquote",[t("p",[s._v("代码清单13-5 incrementAndGet()方法的 JDK 源码")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * Atomically increment by one the current value.\n * @return the updated value\n */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("incrementAndGet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" current "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" next "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" current "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// CAS")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("compareAndSet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("current"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" next"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" next"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("p",[t("strong",[s._v("incrementAndGet() 方法在一个无限循环中, 不断尝试将一个比当前值大一的新值赋值给自己. 如果失败了, 那说明在执行 CAS 操作的时候, 旧值已经发生改变, 于是再次循环进行下一次操作, 直到设置成功为止")]),s._v(".")]),s._v(" "),t("p",[s._v('尽管 CAS 看起来很美好, 既简单又高效, 但显然这种操作无法涵盖互斥同步的所有使用场景, 并且 CAS 从语义上来说并不是真正完美的, 它存在一个逻辑漏洞: 如果一个变量 V 初次读取的时候是 A 值, 并且在准备赋值的时候检查到它仍然为 A 值, 那就能说明它的值没有被其他线程改变过了吗? 这是不能的, 因为如果在这段期间它的值曾经被改成 B, 后来又被改回为 A, 那 CAS 操作就会误认为它从来没有被改变过. 这个漏洞称为 CAS 操作的 "'),t("mark",[t("strong",[s._v("ABA 问题")])]),s._v('". J.U.C 包为了解决这个问题, 提供了一个'),t("strong",[s._v("带有标记的原子引用类 AtomicStampedReference")]),s._v(", 它可以通过控制变量值的版本来保证 CAS 的正确性. 不过目前来说这个类处于相当鸡肋的位置, 大部分情况下 ABA 问题不会影响程序并发的正确性, 如果需要解决 ABA 问题, 改用传统的互斥同步可能会比原子类更为高效.")]),s._v(" "),t("h6",{attrs:{id:"_3-无同步方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-无同步方案"}},[s._v("#")]),s._v(" (3)无同步方案")]),s._v(" "),t("p",[t("strong",[s._v("要保证线程安全, 也并非一定要进行阻塞或非阻塞同步")]),s._v(", 同步与线程安全两者没有必然的联系. "),t("strong",[s._v("同步只是保障存在共享数据争用时正确性的手段, 如果能让一个方法本来就不涉及共享数据, 那它自然就不需要任何同步措施去保证其正确性, 因此会有一些代码天生就是线程安全的")]),s._v(".")]),s._v(" "),t("blockquote",[t("p",[s._v("可重入代码(Reentrant Code)")])]),s._v(" "),t("p",[s._v("可重入代码代码又称纯代码(Pure Code), 是指可以在代码执行的"),t("strong",[s._v("任何时刻中断它")]),s._v(", 转而去执行另外一段代码(包括递归调用它本身), 而在控制权返回后, 原来的程序不会出现任何错误, 也不会对结果有所影响.")]),s._v(" "),t("p",[s._v("在特指多线程的上下文语境里(不涉及信号量等因素), 可以认为可重入代码是线程安全代码的一个真子集, 这意味着相对线程安全来说, 可重入性是更为基础的特性, 它可以保证代码线程安全, 即"),t("strong",[s._v("所有可重入的代码都是线程安全的")]),s._v(", 但并非所有的线程安全的代码都是可重入的.")]),s._v(" "),t("p",[t("strong",[s._v("可重入代码有一些共同的特征, 例如, 不依赖全局变量, 存储在堆上的数据和公用的系统资源, 用到的状态量都由参数中传入, 不调用非可重入的方法等")]),s._v(". 可以通过一个比较简单的原则来判断代码是否具备可重入性: "),t("mark",[t("strong",[s._v("如果一个方法的返回结果是可以预测的, 只要输入了相同的数据, 就都能返回相同的结果, 那它就满足可重入性的要求, 当然也就是线程安全的")])]),s._v(".")]),s._v(" "),t("blockquote",[t("p",[s._v("线程本地存储(ThreadLocal)")])]),s._v(" "),t("p",[s._v("线程本地存储(Thread Local Storage): 如果一段代码中所需要的数据必须与其他代码共享, 那就看看这些共享数据的代码是否能保证在同一个线程中执行. 如果能保证, 就可以"),t("strong",[s._v("把共享数据的可见范围限制在同一个线程之内")]),s._v(", 这样无须同步也能保证线程之间不出现数据争用的问题.")]),s._v(" "),t("p",[s._v('符合这种特点的应用并不少见, 大部分使用消费队列的架构模式(如 "生产者-消费者" 模式)都会将产品的消费过程限制在一个线程中消费完, 其中最重要的一种应用实例就是经典 Web 交互模型中的 "一个请求对应一个服务器线程"(Thread-per-Request)的处理方式, 这种处理方式的广泛应用使得很多 Web 服务端应用都可以'),t("strong",[s._v("使用线程本地存储")]),s._v("来解决线程安全问题.")]),s._v(" "),t("p",[s._v('Java 语言中, 如果一个变量要被多线程访问, 可以使用 volatile 关键字将它声明为 "易变的"; 如果一个变量只要被某个线程独享, Java 中就没有类似 C++ 中 __declspec(thread) 这样的关键字去修饰, 不过还是可以通过 '),t("mark",[t("strong",[s._v("java.lang.ThreadLocal")])]),s._v(" 类来实现线程本地存储的功能. "),t("mark",[t("strong",[s._v("每一个线程的 Thread 对象中都有一个 ThreadLocalMap 对象, 这个对象存储了一组以 ThreadLocal.threadLocalHashCode 为键, 以本地线程变量为值的 K-V 值对, ThreadLocal 对象就是当前线程的 ThreadLocalMap 的访问入口, 每一个 ThreadLocal 对象都包含了一个独一无二的 threadLocalHashCode 值, 使用这个值就可以在线程 K-V 值对中找回对应的本地线程变量")])]),s._v(". (参考: ThreadLocal基础)")]),s._v(" "),t("blockquote",[t("p",[s._v("栈封闭")])]),s._v(" "),t("p",[s._v("多个线程访问同一个"),t("strong",[s._v("方法的局部变量")]),s._v("时, 不会出现线程安全问题, 因为局部变量存储在"),t("strong",[s._v("虚拟机栈")]),s._v("中, 属于"),t("strong",[s._v("线程私有变量")]),s._v(".")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StackClosedExample")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add100")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 方法内部局部变量")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" cnt "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            cnt"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cnt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StackClosedExample")]),s._v(" example "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StackClosedExample")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ExecutorService")]),s._v(" executorService "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Executors")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("newCachedThreadPool")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    executorService"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("execute")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" example"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add100")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    executorService"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("execute")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" example"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add100")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    executorService"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("shutdown")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("div",{staticClass:"language-html line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-html"}},[t("code",[s._v("100\n100\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("blockquote",[t("p",[s._v("不可变类")])]),s._v(" "),t("p",[s._v("不可变("),t("strong",[s._v("Immutable")]),s._v(")的对象一定是线程安全的, 不需要采取任何的线程安全保障措施. 参考: 不可变类.")]),s._v(" "),t("h4",{attrs:{id:"内置锁优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内置锁优化"}},[s._v("#")]),s._v(" 内置锁优化")]),s._v(" "),t("p",[s._v("在早期 synchronized 是重量级的锁且效率低, 因为 monitor 是"),t("strong",[s._v("依赖底层操作系统")]),s._v("来实现的, 而操作系统实现线程之间的转换需要从用户态转换到内核态, 这个转换要浪费很多时间.")]),s._v(" "),t("p",[s._v("因此, HotSpot 虚拟机开发团队在这个版本上花费了大量的资源去实现各种锁优化技术, 如"),t("mark",[t("strong",[s._v("适应性自旋(Adaptive Spinning), 锁消除(Lock Elimination), 锁膨胀(Lock Coarsening), 轻量级锁(Lightweight Locking), 偏向锁(Biased Locking)")])]),s._v(" 等, 这些技术都是为了在线程之间更高效地共享数据及解决竞争问题, 从而提高程序的执行效率.")]),s._v(" "),t("h5",{attrs:{id:"_1-自旋锁与自适应自旋"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-自旋锁与自适应自旋"}},[s._v("#")]),s._v(" 1.自旋锁与自适应自旋")]),s._v(" "),t("p",[s._v("前面讨论互斥同步的时候, 提到了"),t("strong",[s._v("互斥同步对性能最大的影响是阻塞的实现")]),s._v(", 挂起线程和恢复线程的操作都需要转入内核态中完成, 这些操作给 Java 虚拟机的并发性能带来了很大的压力. 同时, 虚拟机的开发团队也注意到在许多应用上, "),t("strong",[s._v("共享数据的锁定状态只会持续很短的一段时间, 为了这段时间去挂起和恢复线程并不值得")]),s._v('. 现在绝大多数的个人电脑和服务器都是多路(核)处理器系统, 如果物理机器有一个以上的处理器或者处理器核心, 能让两个或以上的线程同时并行执行, 就可以让后面请求锁的那个线程 "稍等一会", 但不放弃处理器的执行时间, 看看持有锁的线程是否很快就会释放锁. '),t("mark",[t("strong",[s._v("为了让线程等待, 只须让线程执行一个忙循环(自旋), 这项技术就是所谓的自旋锁")])]),s._v(".")]),s._v(" "),t("p",[s._v("自旋锁在 JDK 1.4.2 中就已经引入, 只不过默认是关闭的, 可以使用 "),t("code",[s._v("-XX: +UseSpinning")]),s._v("​ 参数来开启, 在 JDK 6 中就已经改为默认开启了. 自旋等待不能代替阻塞, 且先不说对处理器数量的要求, 自旋等待本身虽然避免了线程切换的开销, "),t("strong",[s._v("但它是要占用处理器时间的")]),s._v(", 所以如果锁被占用的时间很短, 自旋等待的效果就会非常好, 反之如果锁被占用的时间很长, 那么自旋的线程只会白白消耗处理器资源, 而不会做任何有价值的工作, 这就会带来性能的浪费. 因此"),t("strong",[s._v("自旋等待的时间必须有一定的限度, 如果自旋超过了限定的次数仍然没有成功获得锁, 就应当使用传统的方式去挂起线程")]),s._v(". 自旋次数的默认值是十次, 用户也可以使用参数 "),t("code",[s._v("-XX: PreBlockSpin")]),s._v("​ 来自行更改.")]),s._v(" "),t("p",[s._v("不过无论是默认值还是用户指定的自旋次数, 对整个 Java 虚拟机中所有的锁来说都是相同的. 在 JDK 6 中对自旋锁的优化, 引入了"),t("strong",[s._v("自适应的自旋")]),s._v('. 自适应意味着自旋的时间不再是固定的了, 而是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定的. 如果在同一个锁对象上, 自旋等待刚刚成功获得过锁, 并且持有锁的线程正在运行中, 那么虚拟机就会认为这次自旋也很有可能再次成功, 进而允许自旋等待持续相对更长的时间, 比如持续 100 次忙循环. 另一方面, 如果对于某个锁, 自旋很少成功获得过锁, 那在以后要获取这个锁时将有可能直接省略掉自旋过程, 以避免浪费处理器资源. 有了自适应自旋, 随着程序运行时间的增长及性能监控信息的不断完善, 虚拟机对程序锁的状况预测就会越来越精准, 虚拟机就会变得越来越 "聪明" 了.')]),s._v(" "),t("p",[s._v("典型场景如下, T1 线程先进入到同步逻辑中, 当 T2 需要进到同步块逻辑时, 在竞争不激烈的情况下, 无需进行阻塞("),t("strong",[s._v("放弃 CPU 使用权")]),s._v("), 而只需要进行自旋("),t("strong",[s._v("不放弃 CPU 使用权")]),s._v("), 等到 T1 退出同步逻辑之后, T2 再直接进入同步逻辑, 而无需再次竞争锁.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220601232020635.png",alt:"image-20220601232020635"}})]),s._v(" "),t("p",[s._v("自旋锁虽然能避免进入阻塞状态从而减少开销, 但是它需要进行忙循环操作"),t("strong",[s._v("占用 CPU")]),s._v(" 时间, 它只适用于共享数据的"),t("strong",[s._v("锁定状态很短")]),s._v("的场景. 如果太长就太多的忙循环了.")]),s._v(" "),t("h5",{attrs:{id:"_2-锁消除"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-锁消除"}},[s._v("#")]),s._v(" 2.锁消除")]),s._v(" "),t("p",[t("mark",[t("strong",[s._v("锁消除")])]),s._v("​"),t("strong",[s._v("是指虚拟机即时编译器在运行时, 对一些代码要求同步, 但是对被")]),s._v("​"),t("mark",[t("strong",[s._v("检测到不可能存在共享数据竞争的锁进行消除")])]),s._v("​ "),t("strong",[s._v(". 锁消除的主要判定依据来源于")]),s._v("​"),t("mark",[t("strong",[s._v("逃逸分析")])]),s._v("​"),t("strong",[s._v("的数据支持, 如果判断到一段代码中, 在堆上的所有数据都不会逃逸出去被其他线程访问到, 那就可以把它们当作栈上数据对待, 认为它们是线程私有的, 同步加锁自然就无须再进行")]),s._v(".")]),s._v(" "),t("p",[s._v("也许读者会有疑问, 变量是否逃逸, 对于虚拟机来说是需要使用复杂的过程间分析才能确定的, 但是程序员自己应该是很清楚的, 怎么会在明知道不存在数据争用的情况下还要求同步呢? 这个问题的答案是: "),t("strong",[s._v("有许多同步措施并不是程序员自己加入的")]),s._v(", 同步的代码在 Java 程序中出现的频繁程度也许超过了大家的想象.")]),s._v(" "),t("p",[s._v("看看下面的例子, 这段非常简单的代码仅仅是输出三个字符串相加的结果, 无论是源代码字面上, 还是程序语义上都没有进行同步.")]),s._v(" "),t("blockquote",[t("p",[s._v("代码清单13-6 一段看起来没有同步的代码")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("concatString")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s3"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" s1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" s2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" s3"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("由于 String 是一个不可变的类, 对字符串的连接操作总是通过"),t("strong",[s._v("生成新的 String 对象")]),s._v("来进行的, 因此 Javac 编译器会对 String 连接做自动优化. 在 JDK 5 之前, 字符串加法会转化为 StringBuffer 对象的连续 append() 操作, 在 JDK 5 及以后的版本中, 会转化为 StringBuilder 对象的连续 append() 操作. 因此 StringBuffer 类是通过给方法加 "),t("strong",[s._v("synchronized")]),s._v(" 关键字保证的线程安全, 参考: StringBuffer类 . 即代码清单 13-6 所示的代码可能会变成代码清单 13-7 所示的样子.")]),s._v(" "),t("blockquote",[t("p",[s._v("代码清单13-7 Javac转化后的字符串连接操作")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("concatString")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s3"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StringBuffer")]),s._v(" sb "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StringBuffer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    sb"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("append")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    sb"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("append")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    sb"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("append")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s3"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" sb"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("现在大家还认为这段代码没有涉及同步吗? 这里每个 StringBuffer.append() 方法中都有一个同步块, 锁就是 sb 对象. 虚拟机观察变量 sb, 经过逃逸分析后会发现它的动态作用域被限制在 concatString() 方法内部. 也就是 sb 的所有引用都永远不会逃逸到 concatString() 方法之外, 其他线程无法访问到它, 所以这里虽然有锁, 但是可以被安全地消除掉. "),t("strong",[s._v("在解释执行时这里仍然会加锁, 但在经过服务端编译器的即时编译之后, 这段代码就会忽略所有的同步措施而直接执行")]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"_3-锁粗化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-锁粗化"}},[s._v("#")]),s._v(" 3.锁粗化")]),s._v(" "),t("p",[s._v("原则上, 在编写代码的时候, 总是推荐将同步块的作用范围限制得尽量小, "),t("strong",[s._v("只在共享数据的实际作用域中才进行同步, 这样是为了使得需要同步的操作数量尽可能变少, 即使存在锁竞争, 等待锁的线程也能尽可能快地拿到锁")]),s._v(".")]),s._v(" "),t("p",[s._v("大多数情况下, 上面的原则都是正确的, 但是如果一系列的连续操作都对同一个对象反复加锁和解锁, 甚至加锁操作是出现在循环体之中的, 那即使没有线程竞争, 频繁地进行互斥同步操作也会导致不必要的性能损耗.")]),s._v(" "),t("p",[s._v("代码清单 13-7 所示连续的 append() 方法就属于这类情况. "),t("strong",[s._v("如果虚拟机探测到有这样一串零碎的操作都对同一个对象加锁, 将会把加锁同步的范围扩展(粗化)到整个操作序列的外部")]),s._v(", 以代码清单 13-7 为例, 就是扩展到第一个 append() 操作之前直至最后一个 append() 操作之后, 这样"),t("strong",[s._v("只需要加锁一次")]),s._v("就可以了.")]),s._v(" "),t("h5",{attrs:{id:"_4-轻量级锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-轻量级锁"}},[s._v("#")]),s._v(" 4.轻量级锁")]),s._v(" "),t("p",[s._v('轻量级锁是 JDK 6 时加入的新型锁机制, 它名字中的 "轻量级" 是相对于使用操作系统互斥量来实现的传统锁而言的, 因此传统的锁机制就被称为 "重量级" 锁. 不过, 需要强调一点, 轻量级锁并不是用来代替重量级锁的, 它设计的'),t("strong",[s._v("初衷是在没有多线程竞争的前提下, 减少传统的重量级锁使用操作系统互斥量产生的性能消耗")]),s._v(".")]),s._v(" "),t("p",[s._v("要理解轻量级锁, 以及后面会讲到的偏向锁的原理和运作过程, 必须要对 HotSpot 虚拟机对象的内存布局(尤其是对象头部分)有所了解. HotSpot 虚拟机的"),t("strong",[s._v("对象头")]),s._v("(Object Header)分为两部分, "),t("strong",[s._v("第一部分用于存储对象自身的运行时数据, 如哈希码(HashCode), GC 分代年龄(Generational GC Age)等")]),s._v('. 这部分数据的长度在 32 位和 64 位的 Java 虚拟机中分别会占用 32 个或 64 个比特, 官方称它为 "'),t("strong",[s._v("Mark Word")]),s._v('". 这部分是'),t("strong",[s._v("实现轻量级锁和偏向锁的关键")]),s._v(". 另外一部分用于存储指向方法区对象类型数据的指针, 如果是数组对象, 还会有一个额外的部分用于存储数组长度. 这些对象内存布局的详细内容参考(对象头), 在此不再赘述, 只针对锁的角度做进一步细化.")]),s._v(" "),t("p",[s._v("由于对象头信息是与对象自身定义的数据无关的额外存储成本, 考虑到 Java 虚拟机的空间使用效率, Mark Word 被设计成"),t("strong",[s._v("一个非固定的动态数据结构")]),s._v(", 以便在极小的空间内存储尽量多的信息. 它会根据对象的状态复用自己的存储空间. 例如在 32 位的 HotSpot 虚拟机中, 对象未被锁定的状态下, Mark Word 的 32 个比特空间里的 25 个比特将用于存储对象哈希码, "),t("strong",[s._v("4 个比特用于存储对象分代年龄, 2 个比特用于存储锁标志位, 还有 1 个比特固定为 0(这表示未进入偏向模式)")]),s._v(" . 对象除了未被锁定的正常状态外, 还有轻量级锁定, 重量级锁定, GC 标记, 可偏向等几种不同状态, 这些状态下对象头的存储内容如表 13-1 所示.")]),s._v(" "),t("blockquote",[t("p",[s._v("表13-1 HotSpot 虚拟机对象头 Mark Word")])]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/Image00231-20240302133505-lyzzin2.jpg",alt:""}})]),s._v(" "),t("p",[s._v("简单回顾了对象的内存布局后, 接下来就可以介绍轻量级锁的工作过程了: "),t("strong",[s._v('在代码即将进入同步块的时候, 如果此同步对象没有被锁定(锁标志位为 "01" 状态), 虚拟机首先将在当前线程的栈帧中建立一个名为锁记录(Lock Record)的空间, 用于存储锁对象目前的 Mark Word 的拷贝')]),s._v("(官方为这份拷贝加了一个 Displaced 前缀, 即 Displaced Mark Word), 这时候线程堆栈与对象头的状态如图 13-3 所示.")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/Image00232-20240302133505-bgjkskz.jpg",alt:"",title:"图13-3　轻量级锁 CAS 操作之前堆栈与对象的状态"}})]),s._v(" "),t("p",[s._v("然后, 虚拟机将使用 CAS 操作尝试把对象的 Mark Word 更新为指向 Lock Record 的指针. 如果这个更新动作成功了, 即代表"),t("strong",[s._v("该线程拥有了这个对象的锁")]),s._v(', 并且对象 Mark Word 的锁标志位(Mark Word 的最后两个比特)将转变为 "'),t("strong",[s._v("00")]),s._v('", 表示'),t("strong",[s._v("此对象处于轻量级锁定状态")]),s._v(". 这时候线程堆栈与对象头的状态如图 13-4 所示.")]),s._v(" "),t("p",[t("strong",[s._v("如果这个更新操作失败了, 那就意味着至少存在一条线程与当前线程竞争获取该对象的锁")]),s._v(". 虚拟机首先会检查对象的 Mark Word 是否指向当前线程的栈帧, 如果是, 说明当前线程已经拥有了这个对象的锁, 那直接进入同步块继续执行就可以了, 否则就说明这个锁对象已经被其他线程抢占了. "),t("strong",[s._v('如果出现两条以上的线程争用同一个锁的情况, 那轻量级锁就不再有效, 必须要膨胀为重量级锁, 锁标志的状态值变为 "10"')]),s._v(" , 此时 Mark Word 中存储的就是指向重量级锁(互斥量)的指针, 后面"),t("strong",[s._v("等待锁的线程也必须进入阻塞状态")]),s._v(".")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/Image00233-20240302133505-2btbeuh.jpg",alt:"",title:"图13-4　轻量级锁 CAS 操作之后堆栈与对象的状态"}})]),s._v(" "),t("p",[s._v("上面描述的是"),t("strong",[s._v("轻量级锁的加锁过程")]),s._v(", 它的解锁过程也同样是通过 CAS 操作来进行的, 如果对象的 Mark Word 仍然指向线程的锁记录, 那就用 CAS 操作把对象当前的 Mark Word 和线程中复制的 Displaced Mark Word 替换回来. 假如能够成功替换, 那整个同步过程就顺利完成了; 如果替换失败, 则说明有其他线程尝试过获取该锁, 就要在释放锁的同时, 唤醒被挂起的线程.")]),s._v(" "),t("p",[s._v('轻量级锁能提升程序同步性能的依据是 "'),t("strong",[s._v("对于绝大部分的锁, 在整个同步周期内都是不存在竞争的")]),s._v('" 这一经验法则. 如果没有竞争, 轻量级锁便通过 CAS 操作成功避免了使用互斥量的开销; 但如果确实存在锁竞争, 除了互斥量的本身开销外, 还额外发生了 CAS 操作的开销. 因此'),t("strong",[s._v("在有竞争的情况下, 轻量级锁反而会比传统的重量级锁更慢")]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"_5-偏向锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-偏向锁"}},[s._v("#")]),s._v(" 5.偏向锁")]),s._v(" "),t("p",[s._v("当一个锁对象"),t("strong",[s._v("才创建")]),s._v("时, 是"),t("strong",[s._v("没有任何线程获得过这个锁")]),s._v("的, 这个时候是"),t("strong",[s._v("无锁状态")]),s._v(". 偏向锁适用于"),t("strong",[s._v("只有一个线程")]),s._v("访问的场景.")]),s._v(" "),t("p",[s._v("偏向锁也是 JDK 6 中引入的一项锁优化措施, 它的目的是"),t("strong",[s._v("消除数据在无竞争情况下的同步原语")]),s._v(", 进一步提高程序的运行性能. "),t("mark",[t("strong",[s._v("如果说轻量级锁是在无竞争的情况下使用 CAS 操作去消除同步使用的互斥量, 那偏向锁就是在无竞争的情况下把整个同步都消除掉, 连 CAS 操作都不去做了")])]),s._v(".")]),s._v(" "),t("p",[s._v('偏向锁中的 "偏", 就是偏心的 "偏". 它的意思是这个'),t("strong",[s._v("锁会偏向于第一个获得它的线程, 如果在接下来的执行过程中, 该锁一直没有被其他的线程获取, 则持有偏向锁的线程将永远不需要再进行同步")]),s._v(".")]),s._v(" "),t("p",[s._v("如果理解了前面轻量级锁中关于对象头 Mark Word 与线程之间的操作过程, 那偏向锁的原理就会很容易理解. 假设当前虚拟机启用了偏向锁(启用参数 "),t("code",[s._v("-XX: +UseBiasedLocking")]),s._v("​, 这是自 JDK 6 起 HotSpot 虚拟机的默认值), 那么当锁对象第一次被线程获取的时候, 虚拟机将会"),t("strong",[s._v('把对象头中的标志位设置为 "01"')]),s._v(' , 把偏向模式设置为 "1", 表示进入偏向模式. 同时使用 CAS 操作'),t("strong",[s._v("把获取到这个锁的线程的 ID 记录在对象的 Mark Word 之中")]),s._v(". 如果 CAS 操作成功, "),t("strong",[s._v("持有偏向锁的线程以后每次进入这个锁相关的同步块时, 虚拟机都可以不再进行任何同步操作")]),s._v("(例如加锁, 解锁及对 Mark Word 的更新操作等).")]),s._v(" "),t("p",[t("mark",[t("strong",[s._v("一旦出现另外一个线程去尝试获取这个锁的情况, 偏向模式就马上宣告结束")])]),s._v('. 根据锁对象目前是否处于被锁定的状态决定是否撤销偏向(偏向模式设置为 "0"), 撤销后标志位恢复到未锁定(标志位为 "01")或轻量级锁定(标志位为 "00")的状态, 后续的同步操作就按照上面介绍的轻量级锁那样去执行. 偏向锁, 轻量级锁的状态转化及对象 Mark Word 的关系如图 13-5 所示.')]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/Image00234-20240302133505-0qrez8g.jpg",alt:"",title:"图13-5　偏向锁, 轻量级锁的状态转化及对象 Mark Word 的关系"}})]),s._v(" "),t("p",[s._v("细心的读者看到这里可能会发现一个问题: 当对象进入偏向状态的时候, Mark Word 大部分的空间(23个比特)都用于存储持有锁的线程 ID 了, 这部分空间占用了原有存储对象哈希码的位置, 那原来对象的哈希码怎么办呢?")]),s._v(" "),t("p",[s._v("在 Java 语言里面一个对象如果计算过哈希码, 就应该一直保持该值不变(强烈推荐但不强制, 因为用户可以重载 hashCode() 方法按自己的意愿返回哈希码), 否则很多依赖对象哈希码的 API 都可能存在出错风险. 而作为绝大多数对象哈希码来源的 "),t("code",[s._v("Object::hashCode()")]),s._v("​ 方法, 返回的是对象的"),t("strong",[s._v("一致性哈希码")]),s._v(", 这个值是能强制保证不变的, 它通过在对象头中存储计算结果来保证第一次计算之后, 再次调用该方法取到的哈希码值永远不会再发生改变. 因此, "),t("strong",[s._v("当一个对象已经计算过一致性哈希码后, 它就再也无法进入偏向锁状态了")]),s._v('; 而当一个对象当前正处于偏向锁状态, 又收到需要计算其一致性哈希码请求时, 它的偏向状态会被立即撤销, 并且锁会膨胀为重量级锁. 在重量级锁的实现中, 对象头指向了重量级锁的位置, 代表重量级锁的 ObjectMonitor 类里有字段可以记录非加锁状态(标志位为 "01")下的 Mark Word, 其中自然可以存储原来的哈希码.')]),s._v(" "),t("p",[s._v("偏向锁可以提高带有同步但无竞争的程序性能, 但它同样是一个带有效益权衡(Trade Off)性质的优化, 也就是说它并非总是对程序运行有利. "),t("strong",[s._v("如果程序中大多数的锁都总是被多个不同的线程访问, 那偏向模式就是多余的")]),s._v(". 在具体问题具体分析的前提下, 有时候使用参数 "),t("code",[s._v("-XX: -UseBiasedLocking")]),s._v("​ 来禁止偏向锁优化反而可以提升性能.")]),s._v(" "),t("h5",{attrs:{id:"_6-内置锁优化升级过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-内置锁优化升级过程"}},[s._v("#")]),s._v(" 6.内置锁优化升级过程")]),s._v(" "),t("p",[s._v("JDK6 引入了"),t("strong",[s._v("偏向锁和轻量级锁")]),s._v(", 从而让锁拥有了"),t("strong",[s._v("四个状态")]),s._v(": "),t("strong",[s._v("无锁状态(unlocked), 偏向锁状态(biasble), 轻量级锁状态(lightweight locked)和重量级锁状态(inflated)")]),s._v(" .")]),s._v(" "),t("p",[s._v("对象头(参考 对象头)中包含的 "),t("strong",[s._v("Mark Word")]),s._v(" 在不同的"),t("strong",[s._v("锁状态")]),s._v("下存储的内容不同, 会随着锁升级而变动. 在 "),t("strong",[s._v("32 位 JVM")]),s._v(" 中是这么存的:")]),s._v(" "),t("p",[s._v("​"),t("img",{attrs:{src:"/img/image-20240623215550-0xepx9a.png",alt:"image"}}),s._v("​")]),s._v(" "),t("p",[s._v("所以内置锁有 4 种状态: "),t("strong",[s._v("无锁, 偏向锁, 轻量级锁, 重量级锁")]),s._v(". 锁对象的状态不是一来就重量级的, 而是按照如下的顺序进行膨胀升级, 因此这也是对内置锁的一种"),t("strong",[s._v("优化措施")]),s._v(".")]),s._v(" "),t("p",[s._v("几种锁会随着"),t("strong",[s._v("竞争的激烈而逐渐升级")]),s._v(", 注意锁"),t("strong",[s._v("可以升级不可降级")]),s._v(", 这种策略是为了提高获得锁和释放锁的效率.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220601231206114.png",alt:""}})]),s._v(" "),t("p",[s._v("下图"),t("strong",[s._v("左侧")]),s._v("是一个线程的"),t("strong",[s._v("虚拟机栈")]),s._v(", 其中有一部分称为 "),t("strong",[s._v("Lock Record")]),s._v(" 的区域, 这是在"),t("strong",[s._v("轻量级锁")]),s._v("运行过程创建的, 用于存放"),t("strong",[s._v("锁对象的 Mark Word")]),s._v(". 而右侧就是一个"),t("strong",[s._v("锁对象")]),s._v(", 包含了 "),t("strong",[s._v("Mark Word")]),s._v(" 和其它信息.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/1563602285907.png",alt:""}})]),s._v(" "),t("h5",{attrs:{id:"_7-锁膨胀后的优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-锁膨胀后的优化"}},[s._v("#")]),s._v(" 7.锁膨胀后的优化")]),s._v(" "),t("p",[s._v("系统"),t("strong",[s._v("并发高")]),s._v("的时候, 可能导致"),t("strong",[s._v("锁膨胀升级")]),s._v(", JVM 规定 synchronized 锁升级之后"),t("strong",[s._v("无法锁降级")]),s._v(", "),t("strong",[s._v("锁的升级是不可逆的")]),s._v("; 升级之后, 如果系统的并发下来了, 这无疑降低了系统的处理速度.")]),s._v(" "),t("p",[s._v("因此可以过一段时间看看并发度, "),t("strong",[s._v("统计并发度已经很低")]),s._v(", 并且还是重量级锁, 则可以进行"),t("mark",[t("strong",[s._v("锁对象的切换")])]),s._v(". 也就是换一个锁对象, 这样又开始偏向锁状态, 提升了处理速度; 锁对象切换时候, 需要注意并发操作.")]),s._v(" "),t("p",[s._v("可以用这个工具包可以获取对象的消息头详情, 获取当前锁对象是否处于重量级锁状态.")]),s._v(" "),t("div",{staticClass:"language-xml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("dependency")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("groupId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("org.openjdk.jol"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("groupId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("artifactId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("jol-core"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("artifactId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("version")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("0.9"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("version")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("dependency")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("‍")]),s._v(" "),t("h4",{attrs:{id:"本章小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本章小结"}},[s._v("#")]),s._v(" 本章小结")]),s._v(" "),t("p",[s._v("本章介绍了线程安全所涉及的概念和分类, 同步实现的方式及虚拟机的底层运作原理, 并且介绍了虚拟机为实现高效并发所做的一系列锁优化措施.")]),s._v(" "),t("p",[s._v("能够写出高性能, 高伸缩性的并发程序是一门艺术, 而了解并发在系统底层是如何实现的, 则是掌握这门艺术的前提条件, 也是成长为高级程序员的必备知识之一.")]),s._v(" "),t("p",[s._v("‍")])])}),[],!1,null,null,null);t.default=r.exports}}]);