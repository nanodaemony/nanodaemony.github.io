(window.webpackJsonp=window.webpackJsonp||[]).push([[180],{508:function(s,t,a){"use strict";a.r(t);var r=a(4),_=Object(r.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"_302-mysql索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_302-mysql索引"}},[s._v("#")]),s._v(" 302.MySQL索引")]),s._v(" "),t("h4",{attrs:{id:"索引基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#索引基础"}},[s._v("#")]),s._v(" 索引基础")]),s._v(" "),t("h5",{attrs:{id:"_1-概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述"}},[s._v("#")]),s._v(" 1.概述")]),s._v(" "),t("p",[s._v("索引是帮助高效获取数据的**==数据结构=="),t("strong",[s._v(". 索引就像是一本字典的")]),s._v("目录**, 可以用于快速定位需要查找的内容.")]),s._v(" "),t("p",[t("strong",[s._v("索引")]),s._v("是在"),t("strong",[s._v("存储引擎层")]),s._v("实现的, 而不是 server 层, 所以"),t("strong",[s._v("不同存储引擎有不同的索引类型和实现")]),s._v(", 不同存储引擎可以采用 "),t("strong",[s._v("B+Tree, Hash")]),s._v(" 等不同的数据结构实现索引.")]),s._v(" "),t("h5",{attrs:{id:"_2-索引语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-索引语法"}},[s._v("#")]),s._v(" 2.索引语法")]),s._v(" "),t("h6",{attrs:{id:"_1-创建索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-创建索引"}},[s._v("#")]),s._v(" (1)创建索引")]),s._v(" "),t("p",[s._v("执行 "),t("strong",[s._v("CREATE TABLE")]),s._v(" 语句建表时可以创建索引, 也可以单独用 "),t("strong",[s._v("CREATE INDEX 或 ALTER TABLE")]),s._v(" 为表增加索引.")]),s._v(" "),t("p",[t("strong",[s._v("ALTER TABLE")]),s._v(": 用来创建"),t("strong",[s._v("普通索引, UNIQUE 索引或 PRIMARY KEY 索引")]),s._v(". 例如:")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ALTER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" table_name "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ADD")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INDEX")]),s._v(" index_name "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("column_list"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ALTER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" table_name "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ADD")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("UNIQUE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("column_list"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ALTER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" table_name "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ADD")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PRIMARY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("KEY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("column_list"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("其中 column_list 指出对"),t("strong",[s._v("哪些列进行索引")]),s._v(", "),t("strong",[s._v("多列时各列之间用逗号分隔")]),s._v(". 索引名 index_name 可选, 缺省时 MySQL 将根据第一个索引列赋一个名称.")]),s._v(" "),t("p",[t("strong",[s._v("CREATE INDEX")]),s._v(": 可对表"),t("strong",[s._v("增加普通索引或 UNIQUE 索引")]),s._v(". 例如:")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INDEX")]),s._v(" index_name "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" table_name "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("column_list"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("UNIQUE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INDEX")]),s._v(" index_name "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" table_name "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("column_list"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("这种方式索引名不可选. 不能用 CREATE INDEX 语句创建 PRIMARY KEY 索引.")]),s._v(" "),t("h6",{attrs:{id:"_2-唯一索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-唯一索引"}},[s._v("#")]),s._v(" (2)唯一索引")]),s._v(" "),t("p",[s._v("在创建索引时, 可以规定索引"),t("strong",[s._v("能否包含重复值")]),s._v(". 如果不能包含, 则索引应该创建为 "),t("strong",[s._v("PRIMARY KEY 或 UNIQUE 索引")]),s._v(". 对于单列唯一性索引, 这保证单列不包含重复的值. 对于多列惟一性索引, 保证多个值的"),t("strong",[s._v("组合")]),s._v("不重复. PRIMARY KEY 索引和 UNIQUE 索引非常类似.")]),s._v(" "),t("h6",{attrs:{id:"_3-删除索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-删除索引"}},[s._v("#")]),s._v(" (3)删除索引")]),s._v(" "),t("p",[s._v("使用 "),t("strong",[s._v("ALTER TABLE")]),s._v(" 或 "),t("strong",[s._v("DROP INDEX")]),s._v(" 语句来删除索引.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除索引index_name")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DROP")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INDEX")]),s._v(" index_name "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" talbe_name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ALTER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" table_name "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DROP")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INDEX")]),s._v(" index_name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除主键索引")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ALTER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" table_name "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DROP")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PRIMARY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("KEY")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("前两条语句是"),t("strong",[s._v("等价")]),s._v("的, 即删除掉 table_name 中的索引 index_name.")]),s._v(" "),t("p",[s._v("第三条语句删除 PRIMARY KEY 索引, 因为一个表只能有一个 PRIMARY KEY 索引, 因此不需要指定索引名.")]),s._v(" "),t("p",[s._v("如果从表中删除了"),t("strong",[s._v("某列")]),s._v(", 则索引会受到影响. 对于多列组合的联合索引, 如果删除其中的某列, 则该列也会从索引中删除.")]),s._v(" "),t("h5",{attrs:{id:"_3-索引优缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-索引优缺点"}},[s._v("#")]),s._v(" 3.索引优缺点")]),s._v(" "),t("p",[t("strong",[s._v("优点")])]),s._v(" "),t("ul",[t("li",[s._v("索引可以大大减少服务器需要扫描的"),t("strong",[s._v("数据行数")]),s._v(", 加快数据的"),t("strong",[s._v("检索速度")]),s._v(".")]),s._v(" "),t("li",[s._v("索引帮助服务器"),t("strong",[s._v("避免进行排序和分组")]),s._v(", 以及"),t("strong",[s._v("避免创建临时表")]),s._v(".")]),s._v(" "),t("li",[s._v("B+Tree 索引是"),t("strong",[s._v("有序")]),s._v("的, 将"),t("strong",[s._v("随机 I/O")]),s._v(" 变为"),t("strong",[s._v("顺序 I/O")]),s._v(", 会将相邻的数据都"),t("strong",[s._v("存储在一起")]),s._v(", 可以"),t("strong",[s._v("用于 ORDER BY 和 GROUP BY 操作")]),s._v(".")]),s._v(" "),t("li",[s._v("可以通过创建"),t("strong",[s._v("唯一索引")]),s._v(", 可以保证数据库表中每一行数据的"),t("strong",[s._v("唯一性")]),s._v(". 可以加速表和表之间的"),t("strong",[s._v("联结")]),s._v(", 特别是在实现数据的参考完整性方面特别有意义.")])]),s._v(" "),t("p",[t("strong",[s._v("缺点")])]),s._v(" "),t("p",[s._v("索引有很多优点, 但是不能滥用索引.")]),s._v(" "),t("ul",[t("li",[s._v("创建索引和维护索引要"),t("strong",[s._v("耗费时间")]),s._v(", 这种时间随着"),t("strong",[s._v("数据量")]),s._v("的增加而增加.")]),s._v(" "),t("li",[s._v("索引需要占用"),t("strong",[s._v("物理空间")]),s._v(", 除了数据表占用数据空间之外, 每一个索引还要占一定的物理空间, 如果建立聚簇索引, 那么需要的"),t("strong",[s._v("空间就会更大")]),s._v(".")]),s._v(" "),t("li",[s._v("当对表中的数据进行增加, 删除和修改的时候, 索引也需要维护, 降低数据维护的速度.")])]),s._v(" "),t("h5",{attrs:{id:"_4-mysql索引分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-mysql索引分类"}},[s._v("#")]),s._v(" 4.MySQL索引分类")]),s._v(" "),t("h6",{attrs:{id:"_1-b-树索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-b-树索引"}},[s._v("#")]),s._v(" (1)B+树索引")]),s._v(" "),t("p",[s._v("B+ 树索引是大多数 MySQL 存储引擎的"),t("strong",[s._v("默认索引")]),s._v("类型. 因为不再需要进行全表扫描, 只需要对"),t("strong",[s._v("树进行搜索")]),s._v("即可, 所以查找速度很快. 这种索引除了用于查找, 还可以用于"),t("strong",[s._v("排序和分组")]),s._v("(这是由数据在叶子结点的存储方式决定的).")]),s._v(" "),t("p",[s._v("可以指定"),t("strong",[s._v("多个列")]),s._v("作为索引列, 多个索引列"),t("strong",[s._v("共同")]),s._v("组成联合索引. 适用于"),t("strong",[s._v("全键值, 键值范围和键前缀")]),s._v("查找, 其中键前缀查找只适用于**==最左前缀=="),t("strong",[s._v("查找. 如果")]),s._v("不是按照索引列的顺序进行查找, 则无法使用索引**.")]),s._v(" "),t("p",[s._v("InnoDB 的 B+ 树索引分为"),t("strong",[s._v("主索引和辅助索引")]),s._v(". 主索引的"),t("strong",[s._v("叶子节点")]),s._v(" data 域记录着"),t("strong",[s._v("完整")]),s._v("的"),t("strong",[s._v("数据")]),s._v("记录, 这种索引方式被称为"),t("strong",[s._v("聚簇索引")]),s._v(". 数据行存储在"),t("strong",[s._v("同一个地方")]),s._v(", "),t("strong",[s._v("所以一个表只能有一个聚簇索引")]),s._v(".")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20210904202750204.png",alt:""}})]),s._v(" "),t("p",[t("strong",[s._v("辅助索引")]),s._v("的"),t("strong",[s._v("叶子节点")]),s._v("的 data 域记录着"),t("strong",[s._v("主键的值")]),s._v(", 因此在使用"),t("strong",[s._v("辅助索引")]),s._v("进行查找时, 需要先查找到"),t("strong",[s._v("主键值")]),s._v(", 然后再到"),t("strong",[s._v("主索引")]),s._v("中进行查找.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20210904202943461.png",alt:"image-20210904202943461"}})]),s._v(" "),t("h6",{attrs:{id:"_2-哈希索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-哈希索引"}},[s._v("#")]),s._v(" (2)哈希索引")]),s._v(" "),t("p",[t("strong",[s._v("哈希索引")]),s._v("能以 "),t("strong",[s._v("O(1)")]),s._v(" 时间进行查找, 但"),t("strong",[s._v("失去了有序性")]),s._v(":")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("无法")]),s._v("用于"),t("strong",[s._v("排序与分组")]),s._v(";")]),s._v(" "),t("li",[s._v("只支持"),t("strong",[s._v("精确查找")]),s._v(", 无法用于"),t("strong",[s._v("部分查找和范围查找")]),s._v(".")])]),s._v(" "),t("p",[s._v("哈希索引底层基于哈希表实现, 就是对需要"),t("strong",[s._v("查询的字段做一次哈希")]),s._v(", 然后进行查找.")]),s._v(" "),t("p",[t("strong",[s._v("InnoDB 存储引擎")]),s._v('有一个特殊的功能叫 "自适应哈希索引", 当某个索引值被使用的'),t("strong",[s._v("非常频繁")]),s._v("时, 会在 "),t("strong",[s._v("B+Tree 索引之上")]),s._v("再创建一个"),t("strong",[s._v("哈希索引")]),s._v(", 这样就让 B+Tree 索引具有哈希索引的一些优点, 比如"),t("strong",[s._v("快速")]),s._v("的哈希查找.")]),s._v(" "),t("h6",{attrs:{id:"_3-全文索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-全文索引"}},[s._v("#")]),s._v(" (3)全文索引")]),s._v(" "),t("p",[t("strong",[s._v("MyISAM")]),s._v(" 存储引擎支持"),t("strong",[s._v("全文索引")]),s._v(", 用于查找文本中的"),t("strong",[s._v("关键词")]),s._v(", 而不是直接比较是否相等. 但是查找条件使用 "),t("strong",[s._v("MATCH AGAINST")]),s._v(", 而不是普通的 WHERE. 全文索引使用"),t("strong",[s._v("倒排索引")]),s._v("实现, 它记录着关键词到其所在"),t("strong",[s._v("文档的映射")]),s._v(". InnoDB 存储引擎现在也支持全文索引.")]),s._v(" "),t("h6",{attrs:{id:"_4-空间数据索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-空间数据索引"}},[s._v("#")]),s._v(" (4)空间数据索引")]),s._v(" "),t("p",[s._v("MyISAM 存储引擎支持空间数据索引(R-Tree), 可以用于"),t("strong",[s._v("地理数据")]),s._v("存储. 空间数据索引会从所有维度来索引数据, 可以有效地使用任意维度来进行组合查询.")]),s._v(" "),t("h4",{attrs:{id:"b-树原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#b-树原理"}},[s._v("#")]),s._v(" B+树原理")]),s._v(" "),t("p",[t("strong",[s._v("红黑树")]),s._v("等平衡树也可以用来实现"),t("strong",[s._v("索引")]),s._v(", 但是文件系统及数据库系统普遍采用 "),t("strong",[s._v("B+ 树作为实现索引的数据结构")]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"_1-b树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-b树"}},[s._v("#")]),s._v(" 1.B树")]),s._v(" "),t("p",[s._v("B 树(Balance Tree), 即平衡树. 平衡树是一颗查找树, 且所有**==叶子节点位于同一层==**.")]),s._v(" "),t("p",[s._v("B 树的结点会"),t("strong",[s._v("同时存数据与索引")]),s._v(", 其"),t("strong",[s._v("非叶子节点可能也会存储数据")]),s._v(", 且叶子节点之间"),t("strong",[s._v("不含有")]),s._v("指针. 通常一个结点大小有限制, 如果一个结点存储的数据过多, 就会导致能存储的索引变少, 树的分叉变少, 使得树的高度"),t("strong",[s._v("变高")]),s._v(". 然而加载一层"),t("strong",[s._v("结点")]),s._v("就对应了一次"),t("strong",[s._v("磁盘 IO 操作")]),s._v(".")]),s._v(" "),t("p",[s._v("所以需要用 B+ 树.")]),s._v(" "),t("h5",{attrs:{id:"_2-b-树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-b-树"}},[s._v("#")]),s._v(" 2.B+树")]),s._v(" "),t("h6",{attrs:{id:"_1-特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-特点"}},[s._v("#")]),s._v(" (1)特点")]),s._v(" "),t("p",[s._v("B+ 树是基于 B 树和"),t("strong",[s._v("叶子节点顺序访问指针")]),s._v("进行实现, 它具有 B 树的平衡性, 并且通过"),t("strong",[s._v("顺序访问指针")]),s._v("来提高区间查询的性能.")]),s._v(" "),t("p",[t("strong",[s._v("存储")]),s._v(": B+ 树中非叶子节点不存储数据, "),t("strong",[s._v("只存储索引(冗余)")]),s._v(", 可以放更多的索引. B+ 树存储索引时存在"),t("strong",[s._v("冗余")]),s._v(", 比如下图中 3 号在叶子结点和中间结点"),t("strong",[s._v("都存在")]),s._v(", 但是 B 树中"),t("strong",[s._v("不存在冗余")]),s._v(". "),t("strong",[s._v("全部数据都存放在叶子结点中")]),s._v(".")]),s._v(" "),t("p",[s._v("叶子节点之间可以用"),t("strong",[s._v("指针连接")]),s._v(", 提高"),t("strong",[s._v("区间访问")]),s._v("的性能. 在 B+ 树中, 一个"),t("strong",[s._v("节点")]),s._v("中的 "),t("strong",[s._v("key 从左到右非递减排列")]),s._v(", 如果某个指针的左右相邻 key 分别是 key(i) 和 key(i + 1), 且不为 null, 则该指针指向节点的所有 key 大于等于 key(i) 且小于等于 key(i + 1). 这种数据结构方便进行"),t("strong",[s._v("范围查询与排序")]),s._v(".")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20210904210037765.png",alt:"image-20210904210037765"}})]),s._v(" "),t("p",[s._v("而 B 树中数据可能在非叶子结点上, 而且叶子结点间不含有指针.")]),s._v(" "),t("p",[s._v("InnoDB 中一个结点大小参数 "),t("strong",[s._v("Innodb_page_size")]),s._v(" 默认为 "),t("strong",[s._v("16K")]),s._v(". 如果存放的是 "),t("strong",[s._v("INT 类型")]),s._v("的索引, 则一个结点可以存"),t("strong",[s._v("上千个值")]),s._v(", 可以有上千个分叉.")]),s._v(" "),t("h6",{attrs:{id:"_2-树高与查询次数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-树高与查询次数"}},[s._v("#")]),s._v(" (2)树高与查询次数")]),s._v(" "),t("p",[s._v("平衡树查找操作的时间复杂度和"),t("strong",[s._v("树高 h 相关")]),s._v(", O(h) = O(log"),t("sub",[s._v("d")]),s._v("N), 其中 d 为每个节点的出度. 红黑树的"),t("strong",[s._v("出度为 2")]),s._v(", 而 B+ 树的出度一般都"),t("strong",[s._v("非常大")]),s._v(", 所以红黑树的树"),t("strong",[s._v("高 h 很明显比 B+ 树大非常多")]),s._v(", 所以查找的次数也就更多. 对于 B 树, 由于其非叶子结点也能存储数据, 可能导致树的高度更高. B+ 树比红黑树和 B 树更加"),t("strong",[s._v("矮平")]),s._v(", 树越低, "),t("strong",[s._v("磁盘 IO 操作")]),s._v("次数就越少.")]),s._v(" "),t("h6",{attrs:{id:"_3-磁盘预读特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-磁盘预读特性"}},[s._v("#")]),s._v(" (3)磁盘预读特性")]),s._v(" "),t("p",[s._v("为减少磁盘 I/O 操作, 磁盘往往不是严格按需读取, 而是每次都会"),t("strong",[s._v("预读")]),s._v(". 预读过程中, 磁盘进行"),t("strong",[s._v("顺序读取")]),s._v(", 顺序读取不需要进行磁盘寻道, 并且只需要很短的旋转时间, 速度非常快. 操作系统一般将内存和磁盘分成"),t("strong",[s._v("固定大小的块")]),s._v(", 每一块称为"),t("strong",[s._v("一页")]),s._v(", 内存与磁盘以"),t("strong",[s._v("页为单位")]),s._v("交换数据. 数据库系统将索引的一个"),t("strong",[s._v("节点")]),s._v("的大小设置为"),t("strong",[s._v("页的大小")]),s._v(", 使得一次 IO 就能完全载入"),t("strong",[s._v("一个节点")]),s._v(". 利用"),t("strong",[s._v("预读特性")]),s._v(", 相邻的节点也能够被"),t("strong",[s._v("预先载入")]),s._v(".")]),s._v(" "),t("h4",{attrs:{id:"索引与存储引擎实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#索引与存储引擎实现"}},[s._v("#")]),s._v(" 索引与存储引擎实现")]),s._v(" "),t("p",[s._v("MyISAM 和 InnoDB 这两种存储引擎有"),t("strong",[s._v("不同的索引实现方式")]),s._v(". 索引可以分为"),t("strong",[s._v("主键索引")]),s._v("与"),t("strong",[s._v("普通索引")]),s._v(", 其实现方式依然可能有区别.")]),s._v(" "),t("h5",{attrs:{id:"_1-myisam索引实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-myisam索引实现"}},[s._v("#")]),s._v(" 1.MyISAM索引实现")]),s._v(" "),t("p",[s._v("MyISAM 存储引擎的表在"),t("strong",[s._v("磁盘")]),s._v("中会存储为三个文件: "),t("strong",[s._v(".myd(数据文件), .myi(索引文件)以及 .frm(表结构文件).")])]),s._v(" "),t("p",[s._v("通过文件存储方式可以看出, MyISAM "),t("strong",[s._v("主键索引")]),s._v("的"),t("strong",[s._v("索引文件和数据文件是分离")]),s._v("的, 这就是**==非聚簇索引=="),t("strong",[s._v(". MyISAM 存储引擎中")]),s._v("非主键索引**(普通索引)与"),t("strong",[s._v("主键索引组织方式是类似")]),s._v("的, 结构都差不多.")]),s._v(" "),t("p",[s._v("具体组织方法如下, B+ 树"),t("strong",[s._v("索引叶子结点")]),s._v("存储的是**==真实数据的地址=="),t("strong",[s._v("​")]),s._v(", 查询时通过索引叶子节点存储的数据地址去数据文件获取真实的数据**.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20210904211225803.png",alt:"image-20210904211225803"}})]),s._v(" "),t("h5",{attrs:{id:"_2-innodb索引实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-innodb索引实现"}},[s._v("#")]),s._v(" 2.InnoDB索引实现")]),s._v(" "),t("p",[s._v("InnoDB 存储引擎的表在磁盘中会存储为两个文件: "),t("strong",[s._v(".ibd 文件(索引+数据文件) 和 .frm 文件(表结构文件)")]),s._v(".")]),s._v(" "),t("p",[s._v("MyISAM 中主键索引与非主键索引的结构"),t("strong",[s._v("类似")]),s._v(", 而 InnoDB "),t("strong",[s._v("主键索引与非主键索引")]),s._v("(普通索引)的组织结构不同, 这里分别讨论.")]),s._v(" "),t("h6",{attrs:{id:"_1-主键索引-聚簇索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-主键索引-聚簇索引"}},[s._v("#")]),s._v(" (1)主键索引(聚簇索引)")]),s._v(" "),t("p",[s._v("InnoDB 的"),t("strong",[s._v("主键索引")]),s._v("就是**==聚簇索引=="),t("strong",[s._v(", 它通过")]),s._v("主键聚集索引**. 聚集索引的含义:")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("表数据文件本身")]),s._v("就是按 "),t("strong",[s._v("B+Tree")]),s._v(" 组织的一个"),t("strong",[s._v("索引结构文件")]),s._v(".")]),s._v(" "),t("li",[t("strong",[s._v("叶子节点包含了完整的数据记录")]),s._v(".")])]),s._v(" "),t("p",[s._v("其组织方式如下. 其中非叶子结点全是索引值, 不存储任何数据; 在"),t("strong",[s._v("叶子结点上索引是主键值")]),s._v("(黄色格子), 同时叶子结点下面保存了"),t("strong",[s._v("全部完整的数据")]),s._v(". 这也是聚簇的含义.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20210904211656882.png",alt:"image-20210904211656882"}})]),s._v(" "),t("p",[s._v('聚簇索引并不是一种单独的索引类型, 而是一种数据存储方式. 当表有聚簇索引时, 它的数据行实际上存放在索引的叶子页中. "聚簇"表示数据行和相邻的键值紧凑地存储在一起. 因为无法同时把数据行存放在两个不同的地方, 所以'),t("strong",[s._v("一个表只能有一个聚簇索引")]),s._v(".")]),s._v(" "),t("p",[s._v("如果没有定义主键, InnoDB 会选择一个唯一的非空索引代替. 如果没有这样的索引, InnoDB 会隐式定义一个主键来作为聚簇索引.")]),s._v(" "),t("p",[s._v("聚簇索引的每一个叶子节点都包含了主键值, 事务 ID, 用于事务和 MVCC 的回滚指针以及所有的剩余列.")]),s._v(" "),t("h6",{attrs:{id:"_2-非主键索引-二级索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-非主键索引-二级索引"}},[s._v("#")]),s._v(" (2)非主键索引(二级索引)")]),s._v(" "),t("p",[s._v("对于"),t("strong",[s._v("非主键索引(二级索引)")]),s._v(", InnoDB 组织方式大致如下. "),t("strong",[s._v("索引叶子")]),s._v("结点存储的是**==主键的值=="),t("strong",[s._v(", 这样的策略减少了当出现行移动或者数据页分裂时二级索引的维护工作. 二级索引并非像主键索引那样存储全部数据, 而是得到")]),s._v('主键值之后通过主键进行查找**, 也就是所谓的 =="==​**==回表==**​=="== 查询.')]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20210904212248299.png",alt:"image-20210904212248299"}})]),s._v(" "),t("p",[s._v("为什么这样做? 这是为了保证"),t("strong",[s._v("一致性和节省存储空间")]),s._v(". "),t("strong",[s._v("一致性")]),s._v("是指当插入一条数据的时候, 如果"),t("strong",[s._v("非主键索引上也存储全部元素")]),s._v(", 那就需要同时保证在不同的地方都"),t("strong",[s._v("全部插入数据")]),s._v(", 这就难以保证一致性; "),t("strong",[s._v("只在主键索引下面存放完整数据")]),s._v(", 只需要维护"),t("strong",[s._v("一份完整数据")]),s._v(", 既能保证一致性也能"),t("strong",[s._v("节省空间")]),s._v(".")]),s._v(" "),t("h6",{attrs:{id:"_3-联合索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-联合索引"}},[s._v("#")]),s._v(" (3)联合索引")]),s._v(" "),t("p",[t("strong",[s._v("两个或更多个字段上的索引")]),s._v("被称作"),t("strong",[s._v("联合索引")]),s._v(". 对于联合索引, MySQL "),t("strong",[s._v("从左到右")]),s._v("的使用索引中的字段, 一个查询可以只使用索引中的"),t("strong",[s._v("一部分")]),s._v(", 但只能是"),t("strong",[s._v("最左侧的部分")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("联合索引的存储结构")]),s._v("就是把多个字段同时放到了"),t("strong",[s._v("叶子结点的")]),s._v(" Key 中了. 联合索引怎么比大小排序? 比如有三个索引字段 (a, b, c), 那么此时比较大小是"),t("strong",[s._v("依次")]),s._v("比较索引字段, 先比较 a 字段, 再比较 b 字段. 注意: 如果索引相同, 那么是"),t("strong",[s._v("挨着排存储在结点")]),s._v("中的, 只要保证右边的值大于等于左边的即可.")]),s._v(" "),t("p",[s._v("下面是一个创建联合索引的例子.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("KEY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("idx_age_name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("联合索引")]),s._v("在 InnoDB 中的组织方式如下, 可以看到"),t("strong",[s._v("多个索引字段存储到了一起")]),s._v(", 索引叶子结点中, "),t("strong",[s._v("黄色的部分是联合索引的全部值")]),s._v(".")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20210904213422818.png",alt:""}})]),s._v(" "),t("p",[t("strong",[s._v("少用单值索引")]),s._v(", 比如有一个表有 5 个字段需要建索引, 如果建 5 个单值索引, 那么就会有"),t("strong",[s._v("五棵 B+ 树")]),s._v("结构存放在 InnoDB 引擎的 "),t("strong",[s._v(".ibd 文件")]),s._v("中. 如果使用"),t("strong",[s._v("联合索引")]),s._v(", 如果把五个字段联合起来"),t("strong",[s._v("建立联合索引")]),s._v(", 那么只会有一棵 B+ 树.")]),s._v(" "),t("h6",{attrs:{id:"_4-最左前缀法则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-最左前缀法则"}},[s._v("#")]),s._v(" (4)最左前缀法则")]),s._v(" "),t("p",[s._v("使用联合索引时需要遵守**==最左前缀法则=="),t("strong",[s._v(". 指查询从索引的")]),s._v("最左前列开始并且不跳过索引中的列**. 也就是要命中索引的话, "),t("strong",[s._v("必须包含左边的字段, 一个或者多个都可")]),s._v(". 结合上面联合索引的组织图, 可以看到联合索引是"),t("strong",[s._v("从左往右挨着比较")]),s._v("的. 如果缺少左边的字段, 那么其实也就是挨着比较, 也就相当于走"),t("strong",[s._v("全表")]),s._v("扫描了.")]),s._v(" "),t("p",[s._v("如联合索引是 "),t("strong",[s._v("key index_name (A, B, C)")]),s._v(", 索引字段为 A(name), B(age), C(position). 则:")]),s._v(" "),t("ul",[t("li",[s._v("查询条件为 "),t("strong",[s._v("A, AB, ABC")]),s._v(" 时, "),t("strong",[s._v("会走索引")]),s._v(".")]),s._v(" "),t("li",[s._v("查询条件为 "),t("strong",[s._v("BC")]),s._v(", "),t("strong",[s._v("不会走索引")]),s._v(".")]),s._v(" "),t("li",[s._v("查询条件为 "),t("strong",[s._v("AC")]),s._v(", 只会走字段 "),t("strong",[s._v("A 的索引")]),s._v(".")])]),s._v(" "),t("p",[s._v("Case1: 这里查询条件只含 B 和 C, "),t("strong",[s._v("不会")]),s._v("走索引.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" position "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'manager'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("Case 2: 这里查询条件只含 C, "),t("strong",[s._v("不会")]),s._v("走索引.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" position "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'manager'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("Case 3: 这里查询条件只含 A, 即最左前缀, "),t("strong",[s._v("会")]),s._v("走索引.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'LiLei'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("Case 4: 这里查询条件含 A 和 B(写的顺序无所谓), 满足最左前缀, "),t("strong",[s._v("会")]),s._v("走索引.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'LiLei'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'LiLei'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("当最左侧字段是"),t("strong",[s._v("常量引用")]),s._v("时, 索引就十分有效.")]),s._v(" "),t("h6",{attrs:{id:"_5-主键规则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-主键规则"}},[s._v("#")]),s._v(" (5)主键规则")]),s._v(" "),t("blockquote",[t("p",[s._v("为什么 InnoDB 表必须有主键?")])]),s._v(" "),t("p",[s._v("InnoDB 设计的"),t("strong",[s._v("数据文件")]),s._v("就是"),t("strong",[s._v("依附于 B+ 树")]),s._v("的, 所有"),t("strong",[s._v("数据都依附在主键")]),s._v("上, 所以"),t("strong",[s._v("必须有主键")]),s._v(". 如果建表时没有主键, 那么存储引擎会自动找一个可以充当唯一索引的字段当做主键; 如果找不到就会"),t("strong",[s._v("自动生成")]),s._v("一个 rowId 当做主键.")]),s._v(" "),t("blockquote",[t("p",[s._v("为什么推荐使用整型的自增主键?")])]),s._v(" "),t("p",[t("strong",[s._v("主键为啥推荐用自增整型")]),s._v("? 索引的查找都是"),t("strong",[s._v("基于比较")]),s._v("的, 用整型非常方便.")]),s._v(" "),t("p",[t("strong",[s._v("为什么推荐自增")]),s._v("? 如果是自增的话, 新数据"),t("strong",[s._v("直接顺序")]),s._v("放就行了, 如果不是自增, 如果插入数据的结点"),t("strong",[s._v("已经存满之后")]),s._v(", 此时为了维护 B+Tree 的平衡, 会导致前面的结点进行"),t("strong",[s._v("页分裂与平衡")]),s._v(", "),t("strong",[s._v("影响性能")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("主键规则")]),s._v(": 推荐使用自增主键. "),t("strong",[s._v("不要使用更新频繁的列")]),s._v("作为主键. 不"),t("strong",[s._v("要使用 UUID, MD5, HASH")]),s._v(" 字符串列作为主键, 它们无法保证数据的顺序增长且可能占用更多"),t("strong",[s._v("空间")]),s._v(". 主键值应该"),t("strong",[s._v("尽量短")]),s._v(", 由于一个结点的大小是固定的, 如果主键长度较大, 会导致一个结点存储的索引值个数变少, 导致 B+ 树的分叉变少, 进而导致树变高而影响性能.")]),s._v(" "),t("p",[s._v("所以自增整型是主键非常好的选择.")]),s._v(" "),t("h5",{attrs:{id:"_3-总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-总结"}},[s._v("#")]),s._v(" 3.总结")]),s._v(" "),t("p",[t("strong",[s._v("MyISAM 的主键索引是非聚集索引, InnoDB 的主键索引是聚集索引. ​")]),s._v("多个索引字段建议创建联合索引.")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("MyISAM: ​")]),s._v("​"),t("strong",[t("strong",[s._v("B+Tree ​")])]),s._v("​"),t("strong",[t("strong",[t("strong",[s._v("叶节点的 data 域"),t("strong",[t("strong",[t("strong",[s._v("​")])]),s._v("存放的是")])]),s._v("​")]),s._v("数据记录的地址")]),s._v(". 在索引检索的时候, 首先按照 B+Tree 搜索算法搜索索引, 如果指定的 Key 存在, 则取出其 data 域的值, 然后以 data 域的"),t("strong",[s._v("值为地址")]),s._v("读取相应的数据记录. MyISAM 中"),t("strong",[s._v("索引文件和数据文件是分离")]),s._v('的, 这被称为 "'),t("strong",[s._v("非聚簇索引")]),s._v('".')]),s._v(" "),t("li",[t("strong",[s._v("InnoDB: ​")]),s._v("​"),t("strong",[t("strong",[s._v("其")])]),s._v("​"),t("strong",[s._v("数据文件本身就是索引文件")]),s._v(". 其表数据文件本身就是按 B+Tree 组织的一个索引结构, 树的叶节点 "),t("strong",[s._v("data 域保存了完整的数据记录")]),s._v(". 这个索引的 "),t("strong",[s._v("key 是数据表的主键")]),s._v(', 因此 InnoDB 表数据文件本身就是主索引, 这被称为 "聚簇索引". 而其余的索引都作为'),t("strong",[s._v("辅助索引")]),s._v(", "),t("strong",[s._v("辅助索引的 data 域存储相应记录主键的值")]),s._v("而不是地址. "),t("strong",[s._v("在根据主键索引搜索时, 直接找到 key 所在的节点即可取出数据; 在根据辅助索引查找时, 则需要先取出主键的值, 再走一遍主索引")]),s._v(". "),t("strong",[s._v("因此在设计表的时候, 不建议使用过长的字段作为主键, 也不建议使用非单调的字段作为主键, 这样会造成主索引频繁分裂.")]),s._v(" PS: 整理自《Java工程师修炼之道》")])]),s._v(" "),t("h4",{attrs:{id:"索引失效"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#索引失效"}},[s._v("#")]),s._v(" 索引失效")]),s._v(" "),t("p",[s._v("有一些情况会导致"),t("strong",[s._v("索引失效")]),s._v("从而进行"),t("strong",[s._v("全表扫描")]),s._v(", 索引失效需要联系到 InnoDB 中的"),t("strong",[s._v("联合索引组织方式")]),s._v("来思考.")]),s._v(" "),t("blockquote",[t("p",[s._v("(1) 在索引列上做任何操作, 比如计算, 函数, 自动或手动类型转换等导致索引失效")])]),s._v(" "),t("p",[s._v("在进行查询时, "),t("strong",[s._v("索引列不能是表达式的一部分")]),s._v(", 也不要对其"),t("strong",[s._v("施加函数")]),s._v("或者成为"),t("strong",[s._v("函数的参数")]),s._v(", 否则"),t("strong",[s._v("无法")]),s._v("使用索引. 这是因为函数或者计算操作需要先进行数值转换, 函数或者操作的结果值在索引树中并不存在, 因此只能依次进行计算, 而不会走索引.")]),s._v(" "),t("p",[s._v("查询中有函数时直接不走索引.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用了函数")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("left")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Jack'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("date")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("hire_time"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'2018-09-30'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 对索引列进行运算")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" actor_id "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" actor "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" actor_id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("这种情况可以根据查询需求"),t("strong",[s._v("转换函数操作")]),s._v("为范围查询从而使用索引.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" hire_time "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'2018-09-30 00:00:00'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v("\nhire_time "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'2018-09-30 23:59:59'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("blockquote",[t("p",[s._v("(2) 范围查找之后的索引失效")])]),s._v(" "),t("p",[t("strong",[s._v("==MySQL 优化器会根据检索比例, 表大小等多个因素整体评估是否使用索引==")]),s._v(". 在使用不等于(!=), not in, not exists 等范围查询的时候, 如果 MySQL 估计使用"),t("strong",[s._v("全表扫秒比使用索引快")]),s._v(", 则不使用索引.")]),s._v(" "),t("p",[s._v("例如列 key 均匀分布在 1 和 100 之间, 下面的查询如果走索引可能会"),t("strong",[s._v("检索两棵索引树")]),s._v("(一棵二级索引树, 一棵聚簇索引树), 这时候可能还不如直接走聚簇索引全表查来得快, 所以下面的查询可能就不走索引.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" table_name "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("key")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("key")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("99")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("下面的句子中第一句走三个索引, 但是第二个 SQL 可能只走了两个索引, 也就是 age 是范围查找. 这里 age 后面的索引失效了, 也就是只会走 name 和 age 两个索引, position 失效了.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'LiLei'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" position "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'manager'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'LiLei'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" position "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'manager'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("blockquote",[t("p",[s._v("(3) 使用不等于(!= 或 <>)导致索引失效")])]),s._v(" "),t("p",[s._v("索引查询一般进行"),t("strong",[s._v("相等比较")]),s._v(", 比较不相等其实也就是"),t("strong",[s._v("全表扫描")]),s._v("了.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'LiLei'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("blockquote",[t("p",[s._v("(4) IS NULL, IS NOT NULL 无法使用索引")])]),s._v(" "),t("p",[s._v("这与使用不等于失效的原因类似. 因此建议所有字段设置为 "),t("strong",[s._v("NOT NULL")]),s._v(", "),t("strong",[s._v("并设置默认值")]),s._v(", 这样"),t("strong",[s._v("保证索引命中")]),s._v(". 否则可能导致引擎放弃使用索引而进行"),t("strong",[s._v("全表")]),s._v("扫描. 同时默认值也能"),t("strong",[s._v("防止业务代码中出现 NPE")]),s._v(".")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("IS")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("blockquote",[t("p",[s._v("(5) 模糊查询 LIKE 以通配符开头导致索引失效")])]),s._v(" "),t("p",[s._v("根据"),t("strong",[s._v("最左前缀法则")]),s._v(", 通配符 "),t("strong",[s._v("% 在前面无法走索引")]),s._v(", 直接全表扫描.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%Lei'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("% 在后面是可以走索引的. ​")]),s._v("这是知道前缀的情况, "),t("strong",[s._v("比对前缀")]),s._v("即可.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Lei%'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("问题: 解决 like '%字符串%' 索引不被使用的方法?")]),s._v(" "),t("p",[s._v("a) 查询的字段使用"),t("strong",[s._v("覆盖索引而不是查询所有字段")]),s._v(".")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" position "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%Lei%'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("b) 如果不能使用覆盖索引则可能需要借助"),t("strong",[s._v("搜索引擎")]),s._v(", 如 ES.")]),s._v(" "),t("blockquote",[t("p",[s._v("(6) 字符串不加单引号索引失效")])]),s._v(" "),t("p",[s._v("如果列为"),t("strong",[s._v("字符串")]),s._v(", 则 WHERE 条件中必须"),t("strong",[s._v("将字符常量值加引号")]),s._v(", 否则即使该列上存在索引, 也不会被使用. 因为执行的时候可能做了一次函数转换, 导致索引失效. 下面第一句走索引, 第二句不走索引.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'1000'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("blockquote",[t("p",[s._v("(7) 使用OR有可能引起索引失效")])]),s._v(" "),t("p",[s._v("对于 OR 查询可能不会使用索引, MySQL 优化器会根据检索比例, 表大小等多个因素整体评估是否使用索引.")]),s._v(" "),t("p",[s._v("例如:")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" key1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("OR")]),s._v(" key2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'b'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("如果在 key1 上有索引而在 key2 上没有索引, 则该查询也不会走索引.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'LiLei'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("or")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'HanMeimei'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("blockquote",[t("p",[s._v("(8) 使用联合索引失效")])]),s._v(" "),t("p",[s._v("使用"),t("strong",[s._v("联合索引")]),s._v("时, 如果不满足最左前缀法则时可能不会走索引.")]),s._v(" "),t("h4",{attrs:{id:"索引优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#索引优化"}},[s._v("#")]),s._v(" 索引优化")]),s._v(" "),t("h5",{attrs:{id:"_1-确保使用索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-确保使用索引"}},[s._v("#")]),s._v(" 1.确保使用索引")]),s._v(" "),t("p",[s._v("对于没有使用索引的情况, 考虑建立并使用索引.")]),s._v(" "),t("p",[s._v("对于建立了索引的情况, 确保确实使用到了索引, 也就是避免上述的各种会导致索引失效的情况.")]),s._v(" "),t("h5",{attrs:{id:"_2-联合索引优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-联合索引优化"}},[s._v("#")]),s._v(" 2.联合索引优化")]),s._v(" "),t("p",[s._v("在需要使用"),t("strong",[s._v("多个列")]),s._v("作为条件进行查询时, 使用"),t("strong",[s._v("联合索引比使用多个单列索引性能更好")]),s._v(". 例如下面的语句中, 最好把 actor_id 和 film_id 设置为联合索引.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" film_id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" actor_ id "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" film_actor "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" actor_id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" film_id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h5",{attrs:{id:"_3-覆盖索引优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-覆盖索引优化"}},[s._v("#")]),s._v(" 3.覆盖索引优化")]),s._v(" "),t("p",[t("strong",[s._v("覆盖索引")]),s._v("就是已经包含"),t("strong",[s._v("所有需要查询")]),s._v("的 (WHERE, SELECT, ORDER BY, GROUP BY 等包含的字段) 字段值的索引. 具有以下优点:")]),s._v(" "),t("ul",[t("li",[s._v("索引通常远小于数据行的大小, 只读取索引能大大减少数据访问量.")]),s._v(" "),t("li",[s._v("一些存储引擎(例如 MyISAM)在"),t("strong",[s._v("内存中只缓存索引")]),s._v(", 而数据依赖于操作系统来缓存, 因此只访问索引可以不使用系统调用.")]),s._v(" "),t("li",[t("strong",[s._v("避免进行索引的二次查询(回表查询)")]),s._v(". 如果能够实现覆盖索引, 覆盖索引(也是辅助索引)的索引中就能包含所有需要查询的字段, 就"),t("strong",[s._v("无需再访问主键索引")]),s._v("进行回表查询, 减少了 IO 操作, 提升了查询效率.")])]),s._v(" "),t("p",[t("strong",[s._v("==减少 SELECT * 语句的使用, 这会把所有数据查出来==")]),s._v(". 如果有的列没有建索引, 为了拿到这部分数据, 就一定会触发回表查询.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'LiLei'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("23")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" position "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'manager'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("尽量只查业务需要的字段")]),s._v(", 尽量实现覆盖索引, "),t("strong",[s._v("减少回表查询次数")]),s._v(".")]),s._v(" "),t("p",[s._v("如果某业务只需要查询 name 和 age 两个字段, 且如果 name 和 age 组成联合索引, 那么直接通过联合索引的索引列就能"),t("strong",[s._v("覆盖")]),s._v("需要的值了, 而不需要再次回表查询其他无关紧要的数据.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" age "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'LiLei'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("23")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" position "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'manager'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h5",{attrs:{id:"_4-索引列顺序优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-索引列顺序优化"}},[s._v("#")]),s._v(" 4.索引列顺序优化")]),s._v(" "),t("p",[s._v("让**==选择性最强的索引列放在前面==**.")]),s._v(" "),t("p",[s._v("索引选择性指: "),t("strong",[s._v("不重复的索引值和记录总数的比值")]),s._v(", 一般字段"),t("strong",[s._v("取值范围更广")]),s._v("的选择性更强. 选择性最大值"),t("strong",[s._v("为 1")]),s._v(", 此时"),t("strong",[s._v("每个记录都有唯一的索引与其对应")]),s._v(". 选择性越高, 查询效率也越高.")]),s._v(" "),t("p",[s._v("例如下面显示的结果中 customer_id 的选择性比 staff_id 更高, 因此最好把 customer_id 列放在多列索引的前面.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("COUNT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DISTINCT")]),s._v(" staff_id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("COUNT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" staff_id_selectivity"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("COUNT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DISTINCT")]),s._v(" customer_id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("COUNT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" customer_id_selectivity"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("COUNT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" payment"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("div",{staticClass:"language-html line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-html"}},[t("code",[s._v("staff_id_selectivity: 0.0001\ncustomer_id_selectivity: 0.0373\nCOUNT(*): 16049\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h5",{attrs:{id:"_5-冗余和重复索引优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-冗余和重复索引优化"}},[s._v("#")]),s._v(" 5.冗余和重复索引优化")]),s._v(" "),t("p",[s._v("重复索引是指在"),t("strong",[s._v("相同的列上按照相同的顺序创建的相同类型的索引")]),s._v(". 应该避免这样创建重复索引, 发现以后也应该立即移除.")]),s._v(" "),t("p",[s._v("冗余索引和重复索引有一些不同. 如果创建了索引(A, B), 再创建索引(A)就是冗余索引, 因为这只是前一个索引的前缀索引. 大多数情况下都不需要冗余索引, 应该尽量扩展已有的索引而不是创建新索引.")]),s._v(" "),t("h4",{attrs:{id:"索引设计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#索引设计"}},[s._v("#")]),s._v(" 索引设计")]),s._v(" "),t("h5",{attrs:{id:"_1-建立索引时机"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-建立索引时机"}},[s._v("#")]),s._v(" 1.建立索引时机")]),s._v(" "),t("h6",{attrs:{id:"_1-适合索引的场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-适合索引的场景"}},[s._v("#")]),s._v(" (1)适合索引的场景")]),s._v(" "),t("p",[s._v("经常用作"),t("strong",[s._v("查询条件")]),s._v("的字段需要创建索引, 经常需要"),t("strong",[s._v("排序, 分组和统计")]),s._v("的字段也需要建立索引, 查询中与其他表"),t("strong",[s._v("关联")]),s._v("的字段, 外键关系建立索引.")]),s._v(" "),t("p",[s._v("考虑使用"),t("strong",[s._v("索引覆盖")]),s._v(". 对数据很少被更新的表, 如果用户经常只查询其中的几个字段, 可以考虑在这几个字段上建立索引, 从而将表的扫描改变为索引的扫描.")]),s._v(" "),t("p",[s._v("对于"),t("strong",[s._v("非常小")]),s._v("的表, 大部分情况下简单的全表扫描比建立索引更高效; 对于"),t("strong",[s._v("中到大型的表, 索引就非常有效")]),s._v("; 但是对于"),t("strong",[s._v("特大型")]),s._v("的表, 建立和维护索引的代价将会随之增长, 可以考虑"),t("strong",[s._v("分库分表")]),s._v(".")]),s._v(" "),t("h6",{attrs:{id:"_2-不适合索引的场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-不适合索引的场景"}},[s._v("#")]),s._v(" (2)不适合索引的场景")]),s._v(" "),t("p",[s._v("表的记录太少时不需要创建索引.")]),s._v(" "),t("p",[s._v("数据"),t("strong",[s._v("重复")]),s._v("且分布平均的"),t("strong",[s._v("字段")]),s._v("不需要创建索引, 如 true, false 之类.")]),s._v(" "),t("p",[s._v("查询时 WHERE 条件里"),t("strong",[s._v("用不到")]),s._v("的字段不需要创建索引.")]),s._v(" "),t("h5",{attrs:{id:"_2-索引设计经验"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-索引设计经验"}},[s._v("#")]),s._v(" 2.索引设计经验")]),s._v(" "),t("blockquote",[t("p",[s._v("代码先行, 索引后上")])]),s._v(" "),t("p",[s._v("一般应该等到主体业务功能开发完毕, 把涉及到该表相关 SQL 都要拿出来分析之后再建立索引.")]),s._v(" "),t("blockquote",[t("p",[s._v("限制每张表上的索引数量, 建议单张表索引不超过5个")])]),s._v(" "),t("p",[s._v("索引并不是越多越好! 索引可以提高效率同样可以降低效率.")]),s._v(" "),t("p",[s._v("索引可以增加查询效率, 但同样也会降低"),t("strong",[s._v("插入和更新")]),s._v("的效率, 甚至有些情况下会降低查询效率. 因为 MySQL 优化器在选择如何优化查询时, 会根据统一信息, 对每一个可以用到的索引来进行评估, 以生成出一个最好的执行计划, 如果同时有很多个索引都可以用于查询, 就会增加 MySQL 优化器生成执行计划的时间, 同样会降低查询性能.")]),s._v(" "),t("blockquote",[t("p",[s._v("禁止给表中的每一列都建立单独的索引")])]),s._v(" "),t("p",[s._v("如果几个列是同时查询的, 可以设计成"),t("strong",[s._v("联合索引, 而不是给每个列都单独建一个索引(单值索引)")]),s._v(". 联合索引尽量覆盖条件.")]),s._v(" "),t("blockquote",[t("p",[s._v("每个InnoDB表必须有个主键")])]),s._v(" "),t("p",[s._v("InnoDB 是一种"),t("strong",[s._v("索引组织表")]),s._v(": 数据的存储的逻辑顺序和索引的顺序是相同的. 每个表都可以有多个索引, 但是表的存储顺序只能有一种. InnoDB 是按照"),t("strong",[s._v("主键索引的顺序")]),s._v("来组织表的.")]),s._v(" "),t("blockquote",[t("p",[s._v("对于需要建立索引的字段建议")])]),s._v(" "),t("ul",[t("li",[s._v("出现在 SELECT, UPDATE, DELETE 语句的 WHERE 条件中的字段.")]),s._v(" "),t("li",[s._v("包含在 ORDER BY, GROUP BY, DISTINCT 中的字段.")]),s._v(" "),t("li",[s._v("不要给每个字段都建立一个索引, 将一起查询中的字段建立"),t("strong",[s._v("联合索引")]),s._v("效果更好.")])]),s._v(" "),t("blockquote",[t("p",[s._v("索引列的顺序选择")])]),s._v(" "),t("p",[s._v("建立索引的目的是希望通过索引进行数据查找, 减少随机 IO, 增加查询性能, 如果索引能过滤出越少的数据, 则从磁盘中读入的数据也就越少.")]),s._v(" "),t("ul",[t("li",[s._v("将**==区分度最高==**的放在联合索引的最左侧. "),t("strong",[s._v("区分度 = 列中不同值的数量 / 列的总行数")]),s._v(".")]),s._v(" "),t("li",[s._v("尽量把字段**==长度小==**的列放在联合索引的最左侧. 因为字段长度越小, 一页能存储的数据量越大, IO 性能也就越好.")]),s._v(" "),t("li",[s._v("使用"),t("strong",[s._v("最频繁")]),s._v("的列放到联合索引的左侧. 这样可以比较少的建立一些索引.")])]),s._v(" "),t("blockquote",[t("p",[s._v("避免建立冗余索引和重复索引(增加了查询优化器生成执行计划的时间)")])]),s._v(" "),t("ul",[t("li",[s._v("重复索引示例: PRIMARY KEY(id), INDEX(id), UNIQUE INDEX(id)")]),s._v(" "),t("li",[s._v("冗余索引示例: INDEX(a, b, c), INDEX(a, b), INDEX(a)")])]),s._v(" "),t("blockquote",[t("p",[s._v("对于频繁的查询优先考虑使用覆盖索引")])]),s._v(" "),t("p",[s._v("只查询业务需要的字段, 使用覆盖索引, 避免进行回表查询.")]),s._v(" "),t("blockquote",[t("p",[s._v("索引与外键")])]),s._v(" "),t("p",[t("strong",[s._v("尽量避免使用外键约束")]),s._v(". 外键会影响父表和子表的写操作从而降低性能, 不建议使用外键约束, 但一定要在表与表之间的"),t("strong",[s._v("关联键")]),s._v("上建立索引. 虽然外键可用于保证数据的参照完整性, 但建议在"),t("strong",[s._v("业务端")]),s._v("实现.")]),s._v(" "),t("blockquote",[t("p",[s._v("长字符串可以考虑建立前缀索引")])]),s._v(" "),t("p",[s._v("如果对较长的大字段做索引可能会比较占用磁盘空间, 导致每个索引页存放的索引值较少. 因此可以只对该字段的前缀建立索引, 比如针对这个字段的前 20 个字符建立索引, 也就是将前 20 个字符放在索引树里, 比如 KEY index(name(20),age,position). 但是前缀索引在 ORDER BY 操作的时候会失效, 因为只存储了部分数据.")]),s._v(" "),t("p",[s._v("此时在 WHERE 条件里搜索的时候, 如果是根据 name 字段来搜索, 那么此时就会先到索引树里根据 name 字段的前 20 个字符去搜索, 定位到之后前 20 个字符的前缀匹配的部分数据之后, 再回到聚簇索引提取出来完整的 name 字段值进行比对.")]),s._v(" "),t("blockquote",[t("p",[s._v("对慢查询做优化")])]),s._v(" "),t("p",[s._v("定期排查系统中的慢查询 SQL, 做针对性的优化.")]),s._v(" "),t("p",[s._v("‍")]),s._v(" "),t("p",[s._v("‍")]),s._v(" "),t("h4",{attrs:{id:"参考资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[s._v("#")]),s._v(" 参考资料")]),s._v(" "),t("ul",[t("li",[s._v("美团技术团队的帖子: "),t("a",{attrs:{href:"https://www.cnblogs.com/php-rearch/p/5034118.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://www.cnblogs.com/php-rearch/p/5034118.html"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=_.exports}}]);