(window.webpackJsonp=window.webpackJsonp||[]).push([[129],{459:function(t,s,a){"use strict";a.r(s);var n=a(4),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"_302-jmm与volatile"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_302-jmm与volatile"}},[t._v("#")]),t._v(" 302.JMM与Volatile")]),t._v(" "),s("h4",{attrs:{id:"计算机模型与cpu架构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#计算机模型与cpu架构"}},[t._v("#")]),t._v(" 计算机模型与CPU架构")]),t._v(" "),s("h5",{attrs:{id:"_1-计算机基础架构与模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-计算机基础架构与模型"}},[t._v("#")]),t._v(" 1.计算机基础架构与模型")]),t._v(" "),s("p",[t._v("现代计算机基于"),s("strong",[t._v("冯诺依曼")]),t._v("模型, 计算机在运行时, 先从"),s("strong",[t._v("内存")]),t._v("中取出"),s("strong",[t._v("第一条指令")]),t._v(", 通过控制器的译码, 按指令的要求, 从"),s("strong",[t._v("存储器")]),t._v("中取出数据进行指定的运算和逻辑操作, 然后再按地址把结果送到"),s("strong",[t._v("内存")]),t._v("中去. 接下来再取出第二条指令, 在控制器的指挥下完成规定操作. 依此进行下去直至遇到停止指令.")]),t._v(" "),s("h5",{attrs:{id:"_2-多cpu架构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-多cpu架构"}},[t._v("#")]),t._v(" 2.多CPU架构")]),t._v(" "),s("h6",{attrs:{id:"_1-架构组成"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-架构组成"}},[t._v("#")]),t._v(" (1)架构组成")]),t._v(" "),s("p",[t._v("计算机通常有多个 CPU.")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220601222903643.png",alt:""}})]),t._v(" "),s("p",[t._v("这个架构"),s("strong",[t._v("组成大致")]),t._v("如下:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("多核 CPU")]),t._v(": 一个 CPU 除了处理器之外还包括寄存器, L1 L2 L3 缓存这些存储设备, 浮点运算单元, 整数运算单元等一些辅助运算设备以及内部总线等. "),s("strong",[t._v("一个多核 CPU 也就是一个 CPU 上有多个处理器核心")]),t._v(", 这样有什么好处呢? 比如在一台计算机上运行一个"),s("strong",[t._v("多线程")]),t._v("的程序, 因为"),s("strong",[t._v("是一个进程里的线程")]),t._v(", 所以需要一些"),s("strong",[t._v("共享一些存储变量")]),t._v(", 如果这台计算机都是单核单线程 CPU 的话, 那这个程序的不同线程需要经常在 CPU 之间的外部总线上通信, 同时还要处理"),s("strong",[t._v("不同 CPU 之间")]),t._v("不同缓存导致数据不一致的问题. 在这种场景下"),s("strong",[t._v("单 CPU 多核的架构")]),t._v("就能发挥很大的优势, 通信都在"),s("strong",[t._v("内部总线")]),t._v(", "),s("strong",[t._v("共用同一个缓存. ​")])]),t._v(" "),s("li",[s("strong",[t._v("CPU 寄存器")]),t._v(": 每个 CPU 都包含"),s("strong",[t._v("一系列的寄存器")]),t._v(", 它们是 CPU 内内存的基础. CPU "),s("strong",[t._v("在寄存器上执行操作的速度远大于在主存上执行的速度")]),t._v(". 这是因为 "),s("strong",[t._v("CPU 访问寄存器的速度远大于主内存")]),t._v(".")]),t._v(" "),s("li",[s("strong",[t._v("CPU 缓存")]),t._v(": 即"),s("strong",[t._v("高速缓冲存储器")]),t._v(", 是位于 CPU 与"),s("strong",[t._v("主内存")]),t._v("间的一种容量较小但"),s("strong",[t._v("速度很高的存储器")]),t._v(". 由于 CPU 的速度远"),s("strong",[t._v("高于")]),t._v("主内存, CPU 直接从内存中存取数据要"),s("strong",[t._v("等待一定时间周期")]),t._v(", Cache 中保存着 CPU 刚用过或循环使用的"),s("strong",[t._v("一部分数据")]),t._v(", 当 CPU 再次使用该部分数据时可从 "),s("strong",[t._v("Cache")]),t._v(" 中"),s("strong",[t._v("直接调用")]),t._v(", 减少 CPU 的等待时间, 提高了系统的效率. 一般有"),s("strong",[t._v("一级")]),t._v(" Cache(L1 Cache), "),s("strong",[t._v("二级")]),t._v(" Cache(L2 Cache), "),s("strong",[t._v("三级")]),t._v(" Cache(L3 Cache) 缓存.")]),t._v(" "),s("li",[s("strong",[t._v("内存")]),t._v(": 所有 CPU 都能访问主存. 主存通常比 CPU 中的缓存大得多. 内存需要通过"),s("strong",[t._v("总线")]),t._v("与 CPU 进行通信, 速度是比较慢的.")])]),t._v(" "),s("p",[t._v("假如只有一个 CPU 而需要运行多个进程, 就意味着要经常进行进程"),s("strong",[t._v("上下文切换")]),t._v(". 单 CPU 即便是"),s("strong",[t._v("多核")]),t._v("的, 也只是多个"),s("strong",[t._v("处理器核心")]),t._v(", 其他设备都是"),s("strong",[t._v("共用")]),t._v("的, 所以多个"),s("strong",[t._v("进程")]),t._v("就必然要经常进行进程上下文切换, 代价很高.")]),t._v(" "),s("h6",{attrs:{id:"_2-cpu读取存储器数据过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-cpu读取存储器数据过程"}},[t._v("#")]),t._v(" (2)CPU读取存储器数据过程")]),t._v(" "),s("p",[t._v("CPU 从不同地方读数据过程与复杂度是不同的.")]),t._v(" "),s("ul",[s("li",[t._v("CPU 要取"),s("strong",[t._v("寄存器 XX")]),t._v(" 的值, 只需要一步: "),s("strong",[t._v("直接读取")]),t._v(".")]),t._v(" "),s("li",[t._v("CPU 要"),s("strong",[t._v("取 L1 cache")]),t._v(" 的某个值, 需要 1-3 步(或者更多): 把 cache 行"),s("strong",[t._v("锁住")]),t._v(", 把某个数据拿来, 解锁, 如果没锁住就慢了.")]),t._v(" "),s("li",[t._v("CPU 要"),s("strong",[t._v("取 L2 cache")]),t._v(" 的某个值, 先要到 L1 cache 里取, L1 当中不存在, 在 L2 里, L2 开始加锁, 加锁以后, 把 L2 里的数据复制到 L1, 再执行读 L1 的过程, 上面的 3 步, 再解锁.")]),t._v(" "),s("li",[t._v("CPU "),s("strong",[t._v("取 L3 cache")]),t._v(" 的也是一样, 只不过先由 L3 复制到 L2, 从 L2 复制到 L1, 从 L1 到 CPU.")]),t._v(" "),s("li",[t._v("CPU "),s("strong",[t._v("取内存")]),t._v("中的值则最复杂: 通知内存控制器"),s("strong",[t._v("占用总线带宽")]),t._v(", 通知内存加锁, 发起内存读请求, 等待回应, 回应数据保存到 L3(如果没有就到 L2), 再从 L3/L2 到 L1, 再从 L1 到 CPU, 之后解除总线锁定. 比如需要"),s("strong",[t._v("读取变量")]),t._v(" age 的值, 也就是从内存复制到 L3 再到 L2 再到 L1 最后到寄存器. 从 CPU 同步数据到内存则是相反的流程.")])]),t._v(" "),s("p",[t._v("CPU 读写速度: "),s("strong",[t._v("==寄存器 > L1 > L2 > L3 > 内存条==")]),t._v(".")]),t._v(" "),s("h5",{attrs:{id:"_3-多线程存在的问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-多线程存在的问题"}},[t._v("#")]),t._v(" 3.多线程存在的问题")]),t._v(" "),s("h6",{attrs:{id:"_1-缓存一致性问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-缓存一致性问题"}},[t._v("#")]),t._v(" (1)缓存一致性问题")]),t._v(" "),s("p",[t._v("多处理器系统中每个处理器都有自己的"),s("strong",[t._v("高速缓存")]),t._v(", 它们又"),s("strong",[t._v("共享同一主内存")]),t._v("(MainMemory). 基于"),s("strong",[t._v("高速缓存的存储交互很好地解决了处理器与内存的速度矛盾, 但是也引入了新的问题: 缓存一致性问题(CacheCoherence)")]),t._v(".")]),t._v(" "),s("p",[t._v("当多个处理器的运算任务都涉及"),s("strong",[t._v("同一块主内存")]),t._v("区域时, 将可能导致"),s("strong",[t._v("各自的缓存数据不一致")]),t._v("的情况, 比如两个 CPU 都需要对主内存中的变量 age = 1 值进行 +1 操作, 此时两个 CPU 都会从主内存中复制一份 age 值到 L3, 再到 L2, 再到 L1 最后到寄存器进行 +1 操作. 也就是两个 CPU 中都有 age 变量的副本, 当 CPU1 执行 +1 之后, 同步回主内存, 此时 age = 2; 由于 CPU2 里面的缓存的 age 值也是 1, 因此 CPU2 处理完后 age 也等于 2, 此时再同步到主内存中, 最后 age = 2, 这就与 age 加两次等于 3 的结果不一致.")]),t._v(" "),s("p",[t._v("如果真发生这种情况, 那同步回到主内存时以谁的缓存数据为准?")]),t._v(" "),s("p",[t._v("为了"),s("strong",[t._v("解决一致性的问题")]),t._v(", 需要各个处理器"),s("strong",[t._v("访问缓存时都遵循一些协议")]),t._v(", 在"),s("strong",[t._v("读写时")]),t._v("要根据协议来进行操作, 这类协议有 "),s("strong",[t._v("MSI")]),t._v(", MESI, MOSI 等. 除此之外, 还可以采用"),s("strong",[t._v("总线加锁")]),t._v("的方式解决.")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220601222957802.png",alt:""}})]),t._v(" "),s("h6",{attrs:{id:"_2-指令重排序问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-指令重排序问题"}},[t._v("#")]),t._v(" (2)指令重排序问题")]),t._v(" "),s("p",[t._v("为了使处理器内部的运算单元能尽量被充分利用, "),s("strong",[t._v("处理器")]),t._v("可能会对输入代码进行"),s("strong",[t._v("乱序执行(Out-Of-Order Execution)优化")]),t._v(", 处理器会在计算之后将"),s("strong",[t._v("乱序执行的结果重组")]),t._v(", 保证该结果与顺序执行的"),s("strong",[t._v("结果是一致")]),t._v("的, "),s("strong",[t._v("但并不保证程序中各个语句计算的先后顺序与输入代码中的顺序一致")]),t._v(".")]),t._v(" "),s("p",[t._v("因此, 如果存在一个计算任务"),s("strong",[t._v("依赖")]),t._v("另一个计算任务的"),s("strong",[t._v("中间结果")]),t._v(", 那么其顺序性并不能靠代码的先后顺序来保证. 与处理器的乱序执行优化类似, Java 虚拟机的"),s("strong",[t._v("即时编译器")]),t._v("中也有类似的"),s("strong",[t._v("指令重排序(Instruction Reorder)优化")]),t._v(".")]),t._v(" "),s("h5",{attrs:{id:"_4-mesi协议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-mesi协议"}},[t._v("#")]),t._v(" 4.MESI协议")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("状态")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("描述")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("监听任务")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("M 修改")]),t._v("(Modified)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("该 Cache line 有效, 数据被修改了, 和内存中的数据不一致, 数据只存在与本 Cache 中")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("缓存行必须时刻监听所有试图读该缓存行相对的主存的操作")]),t._v(", 这种操作必须在缓存将该缓存行写回主存并将状态变成 S(共享)状态之前被延迟执行")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("E 独享, 互斥(Exclusive)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("该 Cache line 有效, 数据和内存中的数据一致, 数据只存在于本 Cache 中")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("缓存行也必须监听其他缓存读主存中该缓存行的操作, 一旦有这种操作, 该缓存行需要变成 S(共享)状态")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("S 共享(Shared)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("该 Cache line 有效, 数据和内存中的数据一致, 数据可以存在与多个 Cache 中")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("缓存行也必须监听其他缓存使该缓存行无效或者独享该缓存行的请求, 并将该缓存行变成无效(Invalid)")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("I 无效")]),t._v("(Invalid)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("该 Cache line 无效")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}})])])]),t._v(" "),s("h4",{attrs:{id:"jmm模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jmm模型"}},[t._v("#")]),t._v(" JMM模型")]),t._v(" "),s("h5",{attrs:{id:"_1-主内存与工作内存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-主内存与工作内存"}},[t._v("#")]),t._v(" 1.主内存与工作内存")]),t._v(" "),s("p",[t._v("CPU 中"),s("strong",[t._v("寄存器")]),t._v("的读写速度比"),s("strong",[t._v("内存")]),t._v("快几个数量级, 为解决这种"),s("strong",[t._v("速度矛盾")]),t._v(", 在它们之间加入了"),s("strong",[t._v("高速缓存")]),t._v("(一般有多级), 因此很多时候寄存器是直接从"),s("strong",[t._v("缓存")]),t._v("中读取缓存数据的. 但是"),s("strong",[t._v("主内存")]),t._v("中才是存放各种数据的主要位置, 因此加入"),s("strong",[t._v("高速缓存")]),t._v("带来了一个新问题: "),s("strong",[t._v("缓存一致性问题")]),t._v(". 如果多个缓存"),s("strong",[t._v("共享同一块主内存")]),t._v("区域, 那么多个缓存的数据可能会不一致. 需要一些"),s("strong",[t._v("协议")]),t._v("来解决这个问题, 如下图所示.")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220601223106950.png",alt:""}})]),t._v(" "),s("p",[s("strong",[t._v("==Java 内存模型=="),s("strong",[t._v("​==(==​")]),t._v("==Java Memory Model 简称 JMM)=="),s("strong",[t._v("是一种")]),t._v("抽象")]),t._v("的概念, "),s("strong",[t._v("并不真实存在")]),t._v(", 它描述了"),s("strong",[t._v("一组规则或规范")]),t._v(", 它定义了程序中各个变量(包括实例字段, 静态字段和构成数组对象的元素)的"),s("strong",[t._v("访问方式")]),t._v(".")]),t._v(" "),s("p",[s("strong",[t._v("主内存")]),t._v("主要存储的是 Java "),s("strong",[t._v("实例对象")]),t._v(", 所有"),s("strong",[t._v("线程创建的实例对象都存放在主内存中")]),t._v(", 不管该实例对象是成员变量还是方法中的本地变量(也称局部变量), 当然也包括了共享的类信息, 常量, 静态变量.")]),t._v(" "),s("p",[s("strong",[t._v("工作内存")]),t._v("主要存储"),s("strong",[t._v("当前方法")]),t._v("的所有"),s("strong",[t._v("本地变量信息")]),t._v("(工作内存中"),s("strong",[t._v("存储着主内存中的变量副本拷贝")]),t._v("), 每个线程只能访问自己的"),s("strong",[t._v("工作内存")]),t._v(", 即线程中的本地变量对其它线程是"),s("strong",[t._v("不可见")]),t._v("的, 就算是两个线程执行的是同一段代码, 它们也会各自在自己的工作内存中创建属于"),s("strong",[t._v("当前线程的本地变量")]),t._v(", 当然也包括了字节码行号指示器, 相关 Native 方法的信息. 注意由于工作内存是每个线程的私有数据, 线程间"),s("strong",[t._v("无法相互访问")]),t._v("工作内存, 因此"),s("strong",[t._v("存储在工作内存的数据不存在线程安全问题")]),t._v(". 根据 JVM 虚拟机规范主内存与工作内存的数据存储类型以及操作方式, 对于一个实例对象中的成员方法而言, 如果方法中包含"),s("strong",[t._v("本地变量")]),t._v("是"),s("strong",[t._v("基本数据类型")]),t._v("(boolean, byte, short, char, int, long, float, double), 将"),s("strong",[t._v("直接存储在工作内存的帧栈结构")]),t._v("中, 但倘若"),s("strong",[t._v("本地变量")]),t._v("是"),s("strong",[t._v("引用类型")]),t._v(", 那么该变量的引用会存储在工作"),s("strong",[t._v("内存的帧栈")]),t._v("中, 而"),s("strong",[t._v("对象实例将存储在主内存")]),t._v("(共享数据区域, 堆)中.")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220601223136410.png",alt:""}})]),t._v(" "),s("p",[s("strong",[t._v("JVM")]),t._v(" 创建每个"),s("strong",[t._v("线程")]),t._v("时都会为其创建一个"),s("strong",[t._v("工作内存")]),t._v("(有些地方称为栈空间), 用于"),s("strong",[t._v("存储线程私有的数据")]),t._v(".")]),t._v(" "),s("p",[t._v("JMM 规定"),s("strong",[t._v("所有变量都存储在主内存")]),t._v(", "),s("strong",[t._v("主内存是共享内存区域, 所有线程都可以访问, 但线程对变量的操作(读取赋值等)必须在工作内存中进行, 首先要将变量从主内存拷贝到线程自己的工作内存空间成为副本, 然后对变量进行操作, 操作完成后再将变量写回主内存; 线程不能直接操作主内存中的变量")]),t._v(".")]),t._v(" "),s("p",[s("strong",[t._v("线程")]),t._v("只能直接操作"),s("strong",[t._v("工作内存")]),t._v("中的变量, 因此不同线程之间的"),s("strong",[t._v("变量值传递")]),t._v("需要通过"),s("strong",[t._v("主内存")]),t._v("来完成. 基于 "),s("strong",[t._v("JMM 规范")]),t._v("的线程, 其工作内存与主内存之间的交互过程如下:")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220601223205007.png",alt:""}})]),t._v(" "),s("p",[t._v("由于是共享数据区域, "),s("strong",[t._v("多个线程对同一个变量进行访问可能会发生线程安全问题")]),t._v(". 在当前的 Java 内存模型下, 线程可以把变量保存"),s("strong",[t._v("本地内存")]),t._v("(比如机器的"),s("strong",[t._v("寄存器")]),t._v(")中, "),s("strong",[t._v("而不是直接在主存")]),t._v("中进行读写. 这就可能造成一个线程在主存中修改了一个变量的值, 而另外一个线程还继续使用它在寄存器中的变量值的拷贝, 造成"),s("strong",[t._v("数据的不一致")]),t._v(".")]),t._v(" "),s("p",[t._v("但对于"),s("strong",[t._v("实例对象")]),t._v("的成员变量, 不管它是基本数据类型或者包装类型(Integer, Double等)还是引用类型, 都会被存储到"),s("strong",[t._v("堆区")]),t._v(". 至于 "),s("strong",[t._v("static 变量")]),t._v("以及类本身相关信息将会存储在"),s("strong",[t._v("主内存")]),t._v("中. 需要注意的是, 在主内存中的"),s("strong",[t._v("实例对象")]),t._v("可以被多线程共享, 倘若两个线程同时调用了同一个对象的同一个方法, 那么两条线程会将要操作的数据拷贝一份到自己的工作内存中, 执行完成操作后"),s("strong",[t._v("才刷新到主内存")]),t._v(".")]),t._v(" "),s("blockquote",[s("p",[t._v("为什么要有Java内存模型?")])]),t._v(" "),s("p",[t._v("Java "),s("strong",[t._v("内存模型")]),t._v("试图屏蔽各种"),s("strong",[t._v("硬件和操作系统的内存访问差异")]),t._v(", 以实现让 Java 程序在各种平台下都能达到"),s("strong",[t._v("一致的内存访问效果")]),t._v(".")]),t._v(" "),s("h5",{attrs:{id:"_2-jmm与jvm模型的联系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-jmm与jvm模型的联系"}},[t._v("#")]),t._v(" 2.JMM与JVM模型的联系")]),t._v(" "),s("p",[t._v("JMM 与 JVM 内存区域的"),s("strong",[t._v("划分是不同的概念层次")]),t._v(". "),s("strong",[t._v("JMM 描述的是一组规则")]),t._v(", 通过"),s("strong",[t._v("这组规则控制程序中各个变量在共享数据区域和私有数据区域的访问方式")]),t._v(", JMM 围绕**==原子性, 有序性, 可见性==**展开.")]),t._v(" "),s("p",[t._v("JMM 与 Java 内存区域唯一相似点, 都存在共享数据区域和私有数据区域, 在 JMM 中主内存属于共享数据区域, 从某个程度上讲应该包括了堆和方法区, 而工作内存数据线程私有数据区域, 从某个程度上讲则应该包括程序计数器, 虚拟机栈以及本地方法栈.")]),t._v(" "),s("p",[t._v("JMM 是为了屏蔽不同硬件平台的差异而做的一种规范化模型. JVM 内存模型则是为了便于更好的管理, 使用内存而设计的架构模型.")]),t._v(" "),s("h5",{attrs:{id:"_3-jmm与硬件内存架构的关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-jmm与硬件内存架构的关系"}},[t._v("#")]),t._v(" 3.JMM与硬件内存架构的关系")]),t._v(" "),s("p",[t._v("JMM 模型跟 CPU 缓存模型结构类似, 是基于 CPU 缓存模型建立的, JMM 模型屏蔽了不同计算机底层架构的区别. 但 "),s("strong",[t._v("JMM 模型与硬件内存架构并不完全一致")]),t._v(".")]),t._v(" "),s("p",[s("strong",[t._v("硬件内存")]),t._v("有实际的寄存器, 缓存内存, 主内存概念, 并"),s("strong",[t._v("没有工作内存")]),t._v("(线程私有数据区域)和主内存(堆内存)之分. 工作内存通常映射到"),s("strong",[t._v("高速缓存或者寄存器")]),t._v("中.")]),t._v(" "),s("p",[t._v("JMM 对内存的划分对硬件内存并没有任何影响, 因为 JMM 只是一种"),s("strong",[t._v("抽象")]),t._v("的概念, 是"),s("strong",[t._v("一组规则")]),t._v(", 并不实际存在, 不管是"),s("strong",[t._v("工作内存的数据还是主内存的数据")]),t._v(", 对于计算机硬件来说都会存储在计算机"),s("strong",[t._v("主内存")]),t._v("中, 当然也有可能存储到 "),s("strong",[t._v("CPU 缓存或者寄存器中")]),t._v(", 因此 JMM 模型和计算机硬件内存架构是一个相互交叉的关系, 是一种"),s("strong",[t._v("抽象概念划分与真实物理硬件")]),t._v("的交叉. (JVM 的内存区域划分也是同样的道理).")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220601223247394.png",alt:"image-20220601223247394"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220601223336723.png",alt:""}})]),t._v(" "),s("h5",{attrs:{id:"_4-内存间交互的8种操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-内存间交互的8种操作"}},[t._v("#")]),t._v(" 4.内存间交互的8种操作")]),t._v(" "),s("p",[t._v("由于 "),s("strong",[t._v("JVM")]),t._v(" 运行程序的实体是"),s("strong",[t._v("线程")]),t._v(", 而每个线程创建时 JVM 都会为其创建一个"),s("strong",[t._v("工作内存")]),t._v("用于存储线程"),s("strong",[t._v("私有")]),t._v("的数据, 线程与主内存中的变量操作必须通过"),s("strong",[t._v("工作内存")]),t._v("间接完成. 主要过程是将变量从主内存拷贝的每个线程各自的工作内存空间, 然后对变量进行操作, 操作完成后再将变量"),s("strong",[t._v("写回")]),t._v("主内存.")]),t._v(" "),s("p",[t._v("针对以上关于主内存与工作内存之间的"),s("strong",[t._v("具体交互协议")]),t._v(", 即一个变量如何从主内存拷贝到工作内存, 如何从工作内存同步到主内存之间的实现细节, JMM 定义了"),s("strong",[t._v("八种操作")]),t._v("来完成"),s("strong",[t._v("主内存和工作内存")]),t._v("的交互操作. 如下图所示, 箭头"),s("strong",[t._v("绕了一圈")]),t._v(".")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220601223409654.png",alt:""}})]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("lock")]),t._v("(锁定): 作用于"),s("strong",[t._v("主内存")]),t._v("的变量, 把一个"),s("strong",[t._v("变量")]),t._v("标识为"),s("strong",[t._v("一条线程独占")]),t._v("的状态.")]),t._v(" "),s("li",[s("strong",[t._v("unclock")]),t._v("(解锁): 作用于"),s("strong",[t._v("主内存")]),t._v("的变量, 把一个处于"),s("strong",[t._v("锁定状态的变量释放")]),t._v("出来, 释放后的变量才可以被其他线程锁定.")]),t._v(" "),s("li",[s("strong",[t._v("read")]),t._v("(读取): 作用于"),s("strong",[t._v("主内存")]),t._v("的变量, 把一个变量的值从"),s("strong",[t._v("主内存")]),t._v("传输到线程的"),s("strong",[t._v("工作内存")]),t._v(", 以便随后的 "),s("strong",[t._v("load")]),t._v(" 动作使用.")]),t._v(" "),s("li",[s("strong",[t._v("load")]),t._v("(载入): 作用于"),s("strong",[t._v("工作内存")]),t._v("的变量, 把 read 操作从主内存中得到的变量值"),s("strong",[t._v("放入工作内存的变量副本")]),t._v("中.")]),t._v(" "),s("li",[s("strong",[t._v("use")]),t._v("(使用): 作用于"),s("strong",[t._v("工作内存")]),t._v("的变量, 把"),s("strong",[t._v("工作内存")]),t._v("中一个变量的值传递给"),s("strong",[t._v("处理器")]),t._v(".")]),t._v(" "),s("li",[s("strong",[t._v("assign")]),t._v("(赋值): 作用于"),s("strong",[t._v("工作内存")]),t._v("的变量, 把"),s("strong",[t._v("处理器")]),t._v("接收到的值赋给"),s("strong",[t._v("工作内存")]),t._v("的变量.")]),t._v(" "),s("li",[s("strong",[t._v("store")]),t._v("(存储): 作用于"),s("strong",[t._v("工作内存")]),t._v("的变量, 把工作内存中一个变量的值传送给"),s("strong",[t._v("主内存")]),t._v("中, 以便随后的 write 操作使用.")]),t._v(" "),s("li",[s("strong",[t._v("write")]),t._v("(写入): 作用于"),s("strong",[t._v("主内存")]),t._v("的变量, 把 store 操作从工作内存中得到的变量的值放入"),s("strong",[t._v("主内存的变量")]),t._v("中.")])]),t._v(" "),s("p",[t._v("如果要把一个变量从"),s("strong",[t._v("主内存中复制到工作内存")]),t._v("中, 就需要"),s("strong",[t._v("按顺序地执行 read 和 load 操作")]),t._v(", 如果把变量从"),s("strong",[t._v("工作内存中同步到主内存")]),t._v("中, 就需要按"),s("strong",[t._v("顺序地执行 store 和 write 操作")]),t._v(". 但 Java 内存模型**==只要求上述操作必须按顺序执行, 而没有保证必须是连续执行=="),s("strong",[t._v("​")]),t._v(". ​**")]),t._v(" "),s("p",[t._v("这里 "),s("strong",[t._v("read 与 load")]),t._v(" 必须一起执行, "),s("strong",[t._v("write 与 store")]),t._v(" 也必须一起执行.")]),t._v(" "),s("h5",{attrs:{id:"_5-同步规则分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-同步规则分析"}},[t._v("#")]),t._v(" 5.同步规则分析")]),t._v(" "),s("p",[t._v("基于上述的"),s("strong",[t._v("八种")]),t._v("操作, 有一些"),s("strong",[t._v("同步规则")]),t._v(".")]),t._v(" "),s("ul",[s("li",[t._v("不允许一个线程无原因地(没有发生过任何 assign 操作)把数据从工作内存同步回主内存中 .")]),t._v(" "),s("li",[t._v("一个新的变量只能在"),s("strong",[t._v("主内存")]),t._v("中诞生, 不允许在工作内存中直接使用一个未被初始化(load 或者 assign)的变量. 即就是对一个变量实施 use 和 store 操作之前, 必须先自行 assign 和 load 操作.")]),t._v(" "),s("li",[t._v("一个变量在同一时刻只允许一条线程对其进行 lock 操作, 但 lock 操作可以被"),s("strong",[t._v("同一线程")]),t._v("重复执行多次, 多次执行 lock 后, 只有执行相同次数的 unlock 操作, 变量才会被解锁. lock 和 unlock 必须"),s("strong",[t._v("成对")]),t._v("出现.")]),t._v(" "),s("li",[t._v("如果对一个变量执行 lock 操作, 将会清空工作内存中此变量的值, 在执行引擎使用这个变量之前需要重新执行 load 或 assign 操作初始化变量的值.")]),t._v(" "),s("li",[t._v("如果一个变量事先没有被 lock 操作锁定, 则不允许对它执行 unlock 操作; 也不允许去 unlock 一个被其他线程锁定的变量.")]),t._v(" "),s("li",[t._v("对一个变量执行 "),s("strong",[t._v("unlock 操作之前")]),t._v(", 必须先把此"),s("strong",[t._v("变量同步到主内存")]),t._v("中(执行 store 和 write 操作)  .")])]),t._v(" "),s("h5",{attrs:{id:"_6-并发操作的可见性-原子性-有序性问题及解决"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-并发操作的可见性-原子性-有序性问题及解决"}},[t._v("#")]),t._v(" 6.并发操作的可见性&原子性&有序性问题及解决")]),t._v(" "),s("p",[t._v("可见性, 原子性和有序性是"),s("strong",[t._v("并发编程")]),t._v("必须考虑的问题, 这里先描述这几个问题, 然后再讨论 JMM 模型是"),s("strong",[t._v("如何解决")]),t._v("这些问题的.")]),t._v(" "),s("h6",{attrs:{id:"_1-可见性问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-可见性问题"}},[t._v("#")]),t._v(" (1)可见性问题")]),t._v(" "),s("p",[s("strong",[t._v("可见性指的是当一个线程修改了某个共享变量的值, 其他线程是否能够马上得知这个修改的值")]),t._v(".")]),t._v(" "),s("p",[t._v("对于"),s("strong",[t._v("单线程环境")]),t._v(", 可见性的概念是不存在的, 因为任何一个操作中修改了某个变量的值, 后续的操作中都能读取这个变量值, 并且是修改过的新值.")]),t._v(" "),s("p",[t._v("在"),s("strong",[t._v("多线程环境")]),t._v("中, 由于线程对共享变量的操作都是线程拷贝到各自的工作内存进行操作后才写回到主内存中的, 这就可能存在一个线程 A 修改了共享变量 x 的值, 还"),s("strong",[t._v("未写回主内存")]),t._v("时, 另外一个线程 B 又对主内存中同一个共享变量 x 进行操作, 但此时 A 线程工作内存中共享变量 x 对线程 B 来说"),s("strong",[t._v("并不可见")]),t._v(", 这种"),s("strong",[t._v("工作内存与主内存同步延迟现象就造成了可见性问题")]),t._v(", 另外指令重排以及编译器优化也可能导致可见性问题. 无论是编译器优化还是处理器优化的重排现象, 在多线程环境下, 确实会导致程序乱序执行的问题, 从而也就导致可见性问题.")]),t._v(" "),s("p",[t._v("看一段多线程的代码.")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("VolatileVisibility")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 全局变量")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" flag "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("refresh")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        flag "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"线程 "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('" 修改 flag."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("load")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 死循环")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("flag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"线程: "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"发现flag变化."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("VolatileVisibility")]),t._v(" sample "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("VolatileVisibility")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" threadA "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            sample"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("load")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"threadA"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" threadB "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 刷新flag为true")]),t._v("\n            sample"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("refresh")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"threadB"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 先开启B线程")]),t._v("\n        threadA"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 再开启B线程")]),t._v("\n        threadB"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"当前变量值: "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" flag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br"),s("span",{staticClass:"line-number"},[t._v("39")]),s("br"),s("span",{staticClass:"line-number"},[t._v("40")]),s("br"),s("span",{staticClass:"line-number"},[t._v("41")]),s("br"),s("span",{staticClass:"line-number"},[t._v("42")]),s("br"),s("span",{staticClass:"line-number"},[t._v("43")]),s("br"),s("span",{staticClass:"line-number"},[t._v("44")]),s("br"),s("span",{staticClass:"line-number"},[t._v("45")]),s("br"),s("span",{staticClass:"line-number"},[t._v("46")]),s("br")])]),s("p",[t._v("这里定义了一个普通的全局变量 flag = false. 然后开启线程 A 首先进入死循环, 然后开启线程 B 对 flag 进行刷新. 执行结果如下:")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("线程 threadB 修改flag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n当前变量值"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("可以看到线程 B 成功修改了 flag 的值, 但是线程 A 依然在死循环中. 下面分析一下这个流程.")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220601223644287.png",alt:"image-20220601223644287"}})]),t._v(" "),s("ol",[s("li",[t._v("主内存 flag = false. 线程 A 通过 read 与 load 操作将 flag 的值从主内存读出并复制到一个线程 A 的工作内存中. 此时线程 A 的工作内存有 flag 的副本为 false.")]),t._v(" "),s("li",[t._v("然后线程 A 通过 while 循环持续监听 flag 的变化, 如果 flag 变为 true 则退出循环. 线程 A 的 CPU 使用其工作内存中的 flag 值用了 use 操作.")]),t._v(" "),s("li",[t._v("之后线程 B 采用同样的方式将 flag 的副本复制到其工作内存中, 然后 CPU 对 flag 值进行修改.")]),t._v(" "),s("li",[t._v("线程 B 修改完成后, 通过 assign 操作将 flag 的值写到其工作内存中, 此时 flag = true.")]),t._v(" "),s("li",[t._v("等到合适的时机, flag 的值通过 store 与 write 操作同步回主内存. 此时主内存中 flag = true.")]),t._v(" "),s("li",[t._v("由于线程 B 是通过普通写的方式将 flag 写回主内存, 所以线程 A 不会实时"),s("strong",[t._v("嗅探")]),t._v(" flag 的变化, 线程 A 一直使用的是其工作内存中的 flag 的"),s("strong",[t._v("副本")]),t._v(", 也就是 false, 所以线程 A 会一直死循环.")])]),t._v(" "),s("blockquote",[s("p",[t._v("如何解决可见性问题?")])]),t._v(" "),s("p",[t._v("Java 内存模型是通过在变量修改后"),s("strong",[t._v("将新值同步回主内存")]),t._v(", 在变量"),s("strong",[t._v("读取前")]),t._v("从主内存"),s("strong",[t._v("刷新变量值")]),t._v("来实现可见性的.")]),t._v(" "),s("p",[t._v("主要有三种解决可见性问题的方式:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("volatile")]),t._v(": 轻量级. "),s("strong",[t._v("volatile 关键字保证可见性")]),t._v(". 当一个共享变量被 volatile 修饰时, 它会保证"),s("strong",[t._v("修改的值立即被其他的线程看到")]),t._v(", 即修改的值"),s("strong",[t._v("立即更新到主存")]),t._v("中, 当其他线程需要读取时, 它会去内存中读取新值.")]),t._v(" "),s("li",[s("strong",[t._v("synchronized 与显示锁")]),t._v(": 可以保证任一时刻只有一个线程能访问共享资源, 并保证在其"),s("strong",[t._v("释放锁之前")]),t._v("将修改的变量"),s("strong",[t._v("刷新到内存")]),t._v("中.")]),t._v(" "),s("li",[s("strong",[t._v("final")]),t._v(": 即时编译器在 final 写操作后, 会插入"),s("strong",[t._v("内存屏障")]),t._v(", 来禁止重排序, 保证可见性.")])]),t._v(" "),s("h6",{attrs:{id:"_2-原子性问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-原子性问题"}},[t._v("#")]),t._v(" (2)原子性问题")]),t._v(" "),s("p",[s("strong",[t._v("原子性指的是一个操作是不可中断")]),t._v("的, 即使是在多线程环境下, 一个操作一旦开始就不会被其他线程影响.")]),t._v(" "),s("p",[t._v("原子性问题实例: 有一个"),s("strong",[t._v("错误认识")]),t._v("就是, "),s("strong",[t._v("int")]),t._v(" 等"),s("strong",[t._v("基本数据类型")]),t._v("在多线程环境中"),s("strong",[t._v("不会")]),t._v("出现线程安全问题. 下面的 cnt 属于 int 类型变量, 1000 个线程对它进行"),s("strong",[t._v("自增")]),t._v("操作之后, 得到的值为 999997 而不是 1000000.")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("VolatileAtomicExample")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注意这里加了volatile保证可见性")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" cnt "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("VolatileAtomicExample")]),t._v(" example "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("VolatileAtomicExample")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" thread "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不是原子操作")]),t._v("\n                    example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cnt"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            thread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cnt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br")])]),s("p",[t._v("这是因为 "),s("strong",[t._v("cnt++ 并不是原子操作")]),t._v(". 在多线程环境下, 有可能线程 A 将 cnt 读取到本地内存中, 此时其他线程可能已经将 cnt 增大了很多, 而线程 A 依然对过期的 cnt 进行自加, 然后重新刷新到主存中, 最终导致了 cnt 的结果不合预期, 而是小于 1000000.")]),t._v(" "),s("p",[t._v("为啥? 将"),s("strong",[t._v("内存间的交互操作")]),t._v("简化为 3 个: "),s("strong",[t._v("load, assign, store")]),t._v(".")]),t._v(" "),s("p",[t._v("load, assign, store 这一系列操作整体上来看不具备原子性, 那么在 T1 修改 cnt 并且还没有将修改后的值写入主内存, T2 依然可以读入旧值. 可以看出, 这两个线程虽然执行了两次自增运算, 但是主内存中 cnt 的值最后为 1 而不是 2. 对 int 类型读写操作只是说明 load, assign, store 这些"),s("strong",[t._v("单个操作具备原子性")]),t._v(", "),s("strong",[t._v("组合在一起不一定具有原子性")]),t._v(".")]),t._v(" "),s("p",[t._v("上述的例子可以用下面的图解释. 注意这里 cnt 变量加了 volatile 保证可见性. 开始执行的时候, cnt = 0 被多个线程加载到其工作内存中(这里只画了 2 个线程). 然后线程内部各自对 cnt 进行自增操作, 其值变成 1. 但线程 1 首先完成自增后, 需要将其值写入到主内存中. 由于 cnt 加了 volatile 关键字, 所以这里遵循缓存一致性协议, 根据 MESI 协议, 这里需要锁定缓存行, 因此 cnt 的状态被置为 "),s("strong",[t._v("M(Modified)")]),t._v(". 根据缓存一致性协议, 其他线程的工作内存中的 cnt 的值被置为 "),s("strong",[t._v("I(Invalid) 无效状态")]),t._v(". 所以这里线程 1 中的 cnt 能被写入到主内存, 而线程 2(或者还有其他线程)对 cnt 值的修改就变成无效的而不会写到主内存中了, 所以线程 2 中自增的循环就"),s("strong",[t._v("白费")]),t._v("了一次. 到最后, 可能有很多这样的情况出现, 使得最后 cnt 的值并不是期望的 1000000. "),s("strong",[t._v("所以 Volatile 关键字仅能保证可见性, 多线程下也不能保证原子性, 也就不能保证线程安全")]),t._v(".")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220601223705420.png",alt:"image-20220601223705420"}})]),t._v(" "),s("p",[t._v("使用 "),s("strong",[t._v("AtomicInteger")]),t._v(" 类能保证多个线程对 int 类型修改的"),s("strong",[t._v("原子性")]),t._v(", 也就是让几个内存间的交互执行完其他线程才能进行. 使用 "),s("strong",[t._v("AtomicInteger")]),t._v(" 重写之前线程不安全的代码之后得到以下线程安全实现:")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AtomicExample")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AtomicInteger")]),t._v(" cnt "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AtomicInteger")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        cnt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("incrementAndGet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" cnt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])]),s("p",[t._v("在 Java 中, 对基本数据类型变量的读取和赋值操作是"),s("strong",[t._v("原子性操作")]),t._v("有点要注意的是, 对于基本数据类型, byte, short, int, float, boolean, char 来说, 其"),s("strong",[t._v("读写是原子操作")]),t._v(". 而对于 32 位系统的来说, long 类型数据和 double 类型数据, 它们的读写"),s("strong",[t._v("并非原子性")]),t._v("的, 也就是说如果存在两条线程同时对 long 类型或者 double 类型的数据进行读写是存在相互干扰的, 因为对于 32 位虚拟机来说, 每次原子读写是 32 位的, 而 long 和 double 则是 "),s("strong",[t._v("64 位")]),t._v("的存储单元, 这样会导致一个线程在写时, 操作完前 32 位的原子操作后, 轮到 B 线程读取时, 恰好只读取到了"),s("strong",[t._v("后 32 位")]),t._v('的数据, 这样可能会读取到一个既非原值又不是线程修改值的变量, 它可能是 "'),s("strong",[t._v("半个变量")]),t._v('" 的数值, 即 64 位数据被两个线程分成了两次读取. 但也不必太担心, 因为读取到“半个变量”的情况比较少见. 在目前的商用的虚拟机中, 几乎都把 64 位的数据的读写操作作为原子操作来执行, 因此这个问题了解即可.')]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("如何解决原子性问题")]),t._v("?")])]),t._v(" "),s("p",[t._v("除了 JVM 自身提供的对基本数据类型读写操作的原子性外, 可以通过 "),s("strong",[t._v("synchronized 和 Lock")]),t._v(" 实现"),s("strong",[t._v("原子性")]),t._v(". 因为加锁能够保证任一时刻只有一个线程访问"),s("strong",[t._v("资源")]),t._v(".")]),t._v(" "),s("h6",{attrs:{id:"_3-有序性问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-有序性问题"}},[t._v("#")]),t._v(" (3)有序性问题")]),t._v(" "),s("p",[t._v("有序性是指在"),s("strong",[t._v("本线程")]),t._v("内观察, 所有操作都是"),s("strong",[t._v("有序")]),t._v("的; 而在一个线程观察另一个线程, 所有操作都是"),s("strong",[t._v("无序")]),t._v("的, 无序是因为发生了"),s("strong",[t._v("指令重排序")]),t._v(".")]),t._v(" "),s("p",[t._v("在 Java 内存模型中, "),s("strong",[t._v("允许")]),t._v("编译器和处理器对指令进行"),s("strong",[t._v("重排序")]),t._v(", 重排序过程不会影响到单线程程序的执行, 却会影响到"),s("strong",[t._v("多线程并发执行的正确性")]),t._v(".")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("如何解决有序性问题")]),t._v("?")])]),t._v(" "),s("p",[t._v("解决方式如下:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("volatile")]),t._v(": 通过添加"),s("strong",[t._v("内存屏障")]),t._v("的方式来"),s("strong",[t._v("禁止指令重排")]),t._v(", 即重排序时不能把后面的指令放到内存屏障之前.")]),t._v(" "),s("li",[s("strong",[t._v("synchronized 与显示锁")]),t._v(": 保证每个时刻"),s("strong",[t._v("只有一个线程")]),t._v("执行同步代码, 相当于是让"),s("strong",[t._v("线程顺序执行")]),t._v("同步代码, 自然就保证了有序性.")])]),t._v(" "),s("h4",{attrs:{id:"指令重排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#指令重排序"}},[t._v("#")]),t._v(" 指令重排序")]),t._v(" "),s("h5",{attrs:{id:"_1-概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述"}},[t._v("#")]),t._v(" 1.概述")]),t._v(" "),s("p",[t._v("为了"),s("strong",[t._v("提高性能")]),t._v(", "),s("strong",[t._v("编译器和处理器")]),t._v("常常会对程序"),s("strong",[t._v("指令进行重排序")]),t._v(". Java 虚拟机的"),s("strong",[t._v("即时编译器")]),t._v("中也有类似的指令重排序(Instruction Reorder)优化.")]),t._v(" "),s("p",[t._v("指令重排序的意义是什么?")]),t._v(" "),s("p",[t._v("JVM 能根据"),s("strong",[t._v("处理器特性")]),t._v("(CPU 多级缓存系统, 多核处理器等)适当的对机器指令进行重排序, "),s("strong",[t._v("使机器指令能更符合 CPU 的执行特性, 最大限度的发挥机器性能. ​")])]),t._v(" "),s("p",[t._v("重排序分为"),s("strong",[t._v("编译器重排序")]),t._v("和"),s("strong",[t._v("处理器(CPU运行时)重排序")]),t._v(", 也就是在编译器和处理器(CPU)两个地方都可能发生指令重排序.")]),t._v(" "),s("p",[t._v("重排序具体分"),s("strong",[t._v("三种类型")]),t._v(":")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("编译器优化的重排序")]),t._v(". 编译器在不改变单线程程序语义的前提下, 可以重新安排语句的执行顺序.")]),t._v(" "),s("li",[s("strong",[t._v("指令级并行的重排序")]),t._v(". 现代处理器采用了"),s("strong",[t._v("指令级并行技术")]),t._v("(Instruction-Level Parallelism, ILP)来将多条指令重叠执行. 如果不存在数据依赖性, 处理器可以改变语句对应机器指令的执行顺序.")]),t._v(" "),s("li",[s("strong",[t._v("内存系统的重排序")]),t._v(". 由于处理器使用缓存和读/写缓冲区, 这使得"),s("strong",[t._v("加载和存储")]),t._v("操作看上去可能是在乱序执行.")])]),t._v(" "),s("p",[t._v("下图为从源码到最终执行的指令序列示意图.")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220601223747940.png",alt:""}})]),t._v(" "),s("p",[t._v("重排序是指"),s("strong",[t._v("编译器或处理器")]),t._v("为了"),s("strong",[t._v("优化程序性能")]),t._v("而对指令序列进行排序的一种手段. 但是重排序也需要遵守一定"),s("strong",[t._v("规则")]),t._v(":")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("1. 重排序操作不会对存在数据依赖关系的操作进行重排序. ​")]),t._v("比如: a = 1; b = a; 这个指令序列, 由于第二个操作依赖于第一个操作, 所以在编译时和处理器运行时这两个操作不会被重排序.")]),t._v(" "),s("li",[s("strong",[t._v("2. 重排序是为了优化性能, 但是不管怎么重排序, 单线程下程序的执行结果不能被改变")]),t._v(".")])]),t._v(" "),s("p",[t._v("以上面的 cnt++ 为例子. 如下所示, 如果在 cnt++ 之后还有其他操作, 这里的其他操作与当前的 cnt++ 无关.")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" thread "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不是原子操作")]),t._v("\n        example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cnt"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 其他操作")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("p",[t._v("在之前的例子中, 由于 cnt 有 Volatile 关键字进行修饰, 所以当线程 1 根据缓存一致性协议将 cnt 的值置为 M(Modified) 的时候, 会把线程 2 中的 cnt 的值置为无效. 当线程 2 进行下一次循环时, 需要从主内存再次读取最新的 cnt 的值, 然而线程 1 此时有可能并未将 cnt 的值同步回内存, 所以线程 2 就需要"),s("strong",[t._v("进行等待")]),t._v(". 为了"),s("strong",[t._v("提升效率")]),t._v(", 在遵守 as-if-serial 语义的原则下, CPU 在这里可以进行指令重排序, 让后面的操作先执行, 等到 cnt 的值 ready 后再去读取最新的值. 这就用到了指令重排序.")]),t._v(" "),s("h5",{attrs:{id:"_2-重排序导致的问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-重排序导致的问题"}},[t._v("#")]),t._v(" 2.重排序导致的问题")]),t._v(" "),s("p",[t._v("编译器或者处理器都可能会对代码的结构进行重排序.")]),t._v(" "),s("p",[s("strong",[t._v("(1) 编译器重排序")])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 优化前")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 优化后")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br")])]),s("p",[s("strong",[t._v("CPU 只读一次")]),t._v(" x 和 y 的值. 不需反复读取"),s("strong",[t._v("寄存器")]),t._v("来"),s("strong",[t._v("交替 x 和 y 值")]),t._v(".")]),t._v(" "),s("p",[s("strong",[t._v("(2) 处理器重排序")])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 处理器A执行")]),t._v("\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nx "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 处理器B执行")]),t._v("\nb "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ny "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("p",[t._v("处理器 A 读 b = 0, 处理器 B 读 a = 0. A1 写 a = 1 先写到处理器 A 的工作内存中, 此时主内存中 a = 0. 如果这时处理器 B 从主内存中读 a, 读到的将是 0. 可能会出现 x, y 都是 0.")]),t._v(" "),s("p",[t._v("这说明重排序"),s("strong",[t._v("都可能")]),t._v("会导致多线程程序出现"),s("strong",[t._v("内存可见性")]),t._v("问题.")]),t._v(" "),s("h5",{attrs:{id:"_3-数据依赖性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-数据依赖性"}},[t._v("#")]),t._v(" 3.数据依赖性")]),t._v(" "),s("p",[t._v("如果两个操作访问"),s("strong",[t._v("同一个变量")]),t._v(", 且这两个操作中有一个为"),s("strong",[t._v("写操作")]),t._v(", 此时这两个操作之间就存在"),s("strong",[t._v("数据依赖性")]),t._v(". 数据依赖分下列三种类型:")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("名称")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("代码示例")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("写后读")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("a = 1; b = a;")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("写一个变量之后, 再读这个变量.")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("写后写")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("a = 1; a = 2;")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("写一个变量之后, 再写这个变量.")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("读后写")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("a = b; b = 1;")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("读一个变量之后, 再写这个变量.")])])])]),t._v(" "),s("p",[t._v("上面三种情况其实就是只要重排序两个操作的执行顺序, 程序的执行结果"),s("strong",[t._v("将会被改变")]),t._v(".")]),t._v(" "),s("p",[t._v("编译器和处理器在重排序时, 会"),s("strong",[t._v("遵守数据依赖性")]),t._v(", 编译器和处理器"),s("strong",[t._v("不会对存在数据依赖关系")]),t._v("的两个操作的进行重排序. 注意, 这里所说的数据依赖性仅针对"),s("strong",[t._v("单个处理器")]),t._v("中执行的指令序列和单个线程中执行的操作, 不同处理器之间和不同线程之间的数据依赖性不被编译器和处理器考虑.")]),t._v(" "),s("h5",{attrs:{id:"_4-as-if-serial语义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-as-if-serial语义"}},[t._v("#")]),t._v(" 4.as-if-serial语义")]),t._v(" "),s("p",[s("strong",[t._v("指令重排序")]),t._v("必须遵守 "),s("strong",[t._v("as-if-serial 语义")]),t._v(". as-if-serial 语义是指: "),s("strong",[t._v("不管怎么重排序")]),t._v("(编译器和处理器为了提高并行度), ("),s("strong",[t._v("单线程")]),t._v(")程序的执行结果"),s("strong",[t._v("不能被改变")]),t._v(".")]),t._v(" "),s("p",[t._v("为了遵守 as-if-serial 语义, 编译器和处理器"),s("strong",[t._v("不会对存在数据依赖关系的操作做重排序")]),t._v(", 因为这种重排序会改变执行结果. 但是, 如果操作之间"),s("strong",[t._v("不存在")]),t._v("数据依赖关系, 这些操作就可能被编译器和处理器"),s("strong",[t._v("重排序")]),t._v(". 比如下面计算圆面积的代码示例:")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" pi  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.14")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// A")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" r   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// B")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" area "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pi "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" r "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// C")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("上面三个操作的"),s("strong",[t._v("数据依赖关系")]),t._v("如下图所示:")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220601223825498.png",alt:""}})]),t._v(" "),s("p",[t._v("如上图所示, "),s("strong",[t._v("A 和 C")]),t._v(" 之间存在数据依赖关系, 同时 "),s("strong",[t._v("B 和 C")]),t._v(" 之间也存在数据依赖关系. 因此在最终执行的指令序列中, C 不能被重排序到 A 和 B 的前面(C 排到 A 和 B 的前面, 程序的结果将会被改变). 但 "),s("strong",[t._v("A 和 B 之间没有")]),t._v("数据依赖关系, 编译器和处理器"),s("strong",[t._v("可以重排序 A 和 B")]),t._v(" 之间的执行顺序. 下图是该程序的两种执行顺序:")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220601223853583.png",alt:""}})]),t._v(" "),s("p",[t._v("这里 A happens- before B, 但实际执行时 B 却可以"),s("strong",[t._v("排在 A 之前执行")]),t._v("(看上面的重排序后的执行顺序). 如果 A happens- before B, JMM 并不要求 A 一定要在 B 之前执行. JMM 仅仅要求前一个操作(执行的结果)对后一个操作可见, 且前一个操作按顺序排在第二个操作之前. 这里操作 A 的执行结果不需要对操作 B 可见; 而且重排序操作 A 和操作 B 后的执行结果, 与操作 A 和操作 B 按 happens- before 顺序执行的结果一致. 在这种情况下,  JMM 会认为这种重排序并不非法(not illegal), JMM 允许这种重排序.")]),t._v(" "),s("p",[t._v("在计算机中, 软件技术和硬件技术有一个共同的目标: "),s("strong",[t._v("在不改变程序执行结果的前提下, 尽可能的开发并行度")]),t._v(". 编译器和处理器遵从这一目标, 从 happens- before 的定义可以看出, JMM 同样遵从这一目标.")]),t._v(" "),s("h5",{attrs:{id:"_6-解决指令重排序导致的可见性问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-解决指令重排序导致的可见性问题"}},[t._v("#")]),t._v(" 6.解决指令重排序导致的可见性问题")]),t._v(" "),s("ul",[s("li",[t._v("对于"),s("strong",[t._v("编译器重排序")]),t._v(", JMM 的编译器重排序规则会"),s("strong",[t._v("禁止特定类型")]),t._v("的编译器重排序(不是所有的编译器重排序都要禁止).")]),t._v(" "),s("li",[t._v("对于"),s("strong",[t._v("处理器重排序")]),t._v(", JMM 的处理器重排序规则会要求 Java 编译器在"),s("strong",[t._v("生成指令序列时, 插入特定类型的内存屏障指令")]),t._v(", 通过内存屏障指令来禁止特定类型的处理器重排序(不是所有的处理器重排序都要禁止), "),s("strong",[t._v("Volatile")]),t._v(" 关键字就是通过加入内存屏障实现的禁止指令重排序.")])]),t._v(" "),s("h4",{attrs:{id:"volatile"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#volatile"}},[t._v("#")]),t._v(" Volatile")]),t._v(" "),s("p",[t._v("volatile 是 Java 虚拟机提供的"),s("strong",[t._v("轻量级的同步机制")]),t._v(". volatile 关键字有如下两个作用:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("保证可见性")]),t._v(": 保证被 volatile 修饰的共享变量"),s("strong",[t._v("对所有线程总数可见")]),t._v("的, 也就是当一个线程修改了一个被 volatile 修饰共享变量的值, 新值总是可以被其他线程立即得知. "),s("strong",[t._v("对 volatile 变量的修改, 修改之后, 马上同步回主内存, 而对其读则每次必须从主内存进行刷新读. ​")])]),t._v(" "),s("li",[s("strong",[t._v("禁止指令重排序优化")]),t._v(".")])]),t._v(" "),s("h5",{attrs:{id:"_1-volatile语义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-volatile语义"}},[t._v("#")]),t._v(" 1.volatile语义")]),t._v(" "),s("h6",{attrs:{id:"_1-volatile保证可见性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-volatile保证可见性"}},[t._v("#")]),t._v(" (1)volatile保证可见性")]),t._v(" "),s("p",[t._v("对 "),s("strong",[t._v("volatile 变量")]),t._v("的修改操作"),s("strong",[t._v("其他线程是能够立即感知")]),t._v("到的. 将一个共享变量声明为 volatile 后, 当"),s("strong",[t._v("写")]),t._v("一个 volatile 变量时, JMM 会把该线程对应的"),s("strong",[t._v("本地内存")]),t._v("中的变量"),s("strong",[t._v("强制刷新到主内存")]),t._v("中去, 这个写会操作会导致其他线程中的"),s("strong",[t._v("缓存无效")]),t._v(". "),s("strong",[t._v("读操作")]),t._v("会强制要求线程去"),s("strong",[t._v("主内存读取最新的数据")]),t._v(".")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220601224010107.png",alt:""}})]),t._v(" "),s("p",[t._v("缓存可见性原理:")]),t._v(" "),s("ul",[s("li",[t._v("JMM 内存交互层面: volatile 修饰的变量的 read, load, use 操作和 assign, store, write 必须是连续的, 即修改后必须立即同步回主内存. 且使用时必须从主内存刷新, 不再使用工作内存中的值, 由此保证可见性.")]),t._v(" "),s("li",[t._v("底层实现: 使用"),s("strong",[t._v("汇编 lock 指令")]),t._v("锁定变量缓存行区域并写回主内存, 这个操作称为“缓存锁定”, 缓存一致性机制会阻止同时修改被两个以上处理器缓存的内存区域数据. 一个处理器的缓存回写到主内存后, 会导致其他处理器的缓存值失效.")])]),t._v(" "),s("p",[t._v("对于上面的例子, 如果给 flag 加上 volatile 关键字, 那么就能保证线程 B 将 flag 修改完成并同步回主内存的时候, 线程 A 能够嗅探到 flag 值的变化, 并重新从主内存取值, 使得线程 A 可以退出死循环.")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NanoVolatileVisibilitySample")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 全局变量")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" flag "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("refresh")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        flag "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"线程 "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('" 修改 flag."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("load")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 死循环")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("flag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"线程: "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"发现flag变化."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NanoVolatileVisibilitySample")]),t._v(" sample "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NanoVolatileVisibilitySample")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" threadA "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            sample"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("load")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"threadA"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" threadB "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 刷新flag为true")]),t._v("\n            sample"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("refresh")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"threadB"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 先开启B线程")]),t._v("\n        threadA"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 再开启B线程")]),t._v("\n        threadB"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"当前变量值: "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" flag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br"),s("span",{staticClass:"line-number"},[t._v("39")]),s("br"),s("span",{staticClass:"line-number"},[t._v("40")]),s("br"),s("span",{staticClass:"line-number"},[t._v("41")]),s("br"),s("span",{staticClass:"line-number"},[t._v("42")]),s("br"),s("span",{staticClass:"line-number"},[t._v("43")]),s("br"),s("span",{staticClass:"line-number"},[t._v("44")]),s("br"),s("span",{staticClass:"line-number"},[t._v("45")]),s("br"),s("span",{staticClass:"line-number"},[t._v("46")]),s("br")])]),s("p",[t._v("运行结果:")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("线程 threadB 修改flag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n线程 threadA 发现flag变化"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n当前变量值"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("可以看出 Volatile 可以保证内存的可见性.")]),t._v(" "),s("h6",{attrs:{id:"_2-volatile禁止重排序优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-volatile禁止重排序优化"}},[t._v("#")]),t._v(" (2)volatile禁止重排序优化")]),t._v(" "),s("p",[t._v("volatile 关键字另一个作用就是"),s("strong",[t._v("禁止指令重排优化")]),t._v(", 从而避免多线程环境下程序出现乱序执行的现象. 其实现方式就是通过**==添加内存屏障==**实现的.")]),t._v(" "),s("p",[t._v("由于编译器和处理器都能执行指令重排优化, 而如果在"),s("strong",[t._v("指令间插入一条内存屏障可以告知编译器或者 CPU 禁止在内存屏障前后的指令执行重排序优化. ​")])]),t._v(" "),s("p",[t._v("volatile 禁止指令重排序有一些规则, 比如:")]),t._v(" "),s("p",[s("strong",[t._v("1. 当第二个操作是 voaltile 写时, 无论第一个操作是什么, 都不能进行重排序")]),t._v(".")]),t._v(" "),s("p",[s("strong",[t._v("2. 当地一个操作是 volatile 读时, 不管第二个操作是什么, 都不能进行重排序")]),t._v(".")]),t._v(" "),s("p",[s("strong",[t._v("3. 当第一个操作是 volatile 写时, 第二个操作是 volatile 读时, 不能进行重排序")]),t._v(".")]),t._v(" "),s("h5",{attrs:{id:"_2-volatile无法保证原子性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-volatile无法保证原子性"}},[t._v("#")]),t._v(" 2.volatile无法保证原子性")]),t._v(" "),s("p",[t._v("由前面的例子可以知道, volatile "),s("strong",[t._v("无法保证原子性")]),t._v(", 多线程操作仍存在安全性问题. volatile 对于单个的共享变量的读/写具有原子性, 但是像 cnt++ 这种"),s("strong",[t._v("复合")]),t._v("操作, volatile "),s("strong",[t._v("无法保证其原子性")]),t._v(", 解决方案就是使用并发包中的原子操作类, 通过"),s("strong",[t._v("循环 CAS")]),t._v(" 地方式来保证 cnt++ 操作的原子性.")]),t._v(" "),s("p",[t._v("在并发场景下, 使用 synchronized 便保证线程安全, 需要注意的是一旦使用 synchronized 修饰方法后, 由于 synchronized 本身也具备与 volatile "),s("strong",[t._v("相同的特性")]),t._v(", 即可见性, 因此在这样种情况下就完全可以"),s("strong",[t._v("省去")]),t._v(" volatile 修饰变量.")]),t._v(" "),s("h5",{attrs:{id:"_3-synchronized和volatile的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-synchronized和volatile的区别"}},[t._v("#")]),t._v(" 3.synchronized和volatile的区别")]),t._v(" "),s("ul",[s("li",[t._v("volatile 是告诉 JVM 当前变量在寄存器(工作内存)中的值是不确定的, 需要"),s("strong",[t._v("从主存")]),t._v("中读取; synchronized 则是用于并发资源访问控制.")]),t._v(" "),s("li",[s("strong",[t._v("使用上")]),t._v(": volatile 仅能作用于"),s("strong",[t._v("变量")]),t._v("; synchronized 则可以使用在"),s("strong",[t._v("变量, 方法, 和类")]),t._v("上.")]),t._v(" "),s("li",[s("strong",[t._v("阻塞上")]),t._v(": "),s("strong",[t._v("多线程访问 volatile 关键字不会发生阻塞, 而 synchronized 关键字可能会发生阻塞")]),t._v(".")]),t._v(" "),s("li",[s("strong",[t._v("功能上")]),t._v(": volatile 关键字主要用于保证变量在多个线程之间的"),s("strong",[t._v("可见性")]),t._v(", 但不能保证数据的"),s("strong",[t._v("原子性")]),t._v(". 而 synchronized 关键字解决的是多个线程之间访问"),s("strong",[t._v("资源的同步性")]),t._v(", 可见性与原子性"),s("strong",[t._v("都能保证")]),t._v(".")])]),t._v(" "),s("h5",{attrs:{id:"_4-volatile与cas的大量使用会有啥问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-volatile与cas的大量使用会有啥问题"}},[t._v("#")]),t._v(" 4.volatile与CAS的大量使用会有啥问题?")]),t._v(" "),s("p",[t._v("可能会导致"),s("strong",[t._v("总线风暴")]),t._v("问题. volatile 引入的 "),s("strong",[t._v("MESI")]),t._v(" 缓存一致性协议需要不断的从"),s("strong",[t._v("主内存嗅探")]),t._v("和 CAS 不断循环无效交互导致"),s("strong",[t._v("总线带宽达到峰值")]),t._v(".")]),t._v(" "),s("p",[t._v("解决办法: "),s("strong",[t._v("部分")]),t._v(" volatile 和 CAS 使用 synchronized. volatile 与 synchronize 同时使用的场景: "),s("strong",[t._v("单例模式")]),t._v(".")]),t._v(" "),s("h4",{attrs:{id:"内存屏障"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内存屏障"}},[t._v("#")]),t._v(" 内存屏障")]),t._v(" "),s("p",[s("strong",[t._v("编译器和处理器")]),t._v("必须"),s("strong",[t._v("同时遵守重排")]),t._v("规则. "),s("strong",[t._v("多核处理器")]),t._v("需使用"),s("strong",[t._v("内存屏障指令")]),t._v("来"),s("strong",[t._v("确保一致性")]),t._v(". "),s("strong",[t._v("内存屏障")]),t._v("又称内存栅栏, 是一个 "),s("strong",[t._v("CPU 指令")]),t._v(".")]),t._v(" "),s("p",[t._v("内存屏障的作用:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("强制刷出各种 CPU 的缓存数据")]),t._v(", 因此任何 CPU 上的线程都能读取到这些数据的"),s("strong",[t._v("最新版本")]),t._v("(解决可见性问题).")]),t._v(" "),s("li",[s("strong",[t._v("禁止")]),t._v("指令重排序(解决重排序问题).")])]),t._v(" "),s("p",[t._v("所以 "),s("strong",[t._v("volatile 变量正是通过内存屏障实现其在内存中的语义, 即可见性和禁止重排优化")]),t._v(".")]),t._v(" "),s("p",[s("strong",[t._v("处理器提供内存屏障指令")]),t._v("主要有:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("写内存屏障指令")]),t._v("(Store Memory Barrier): 处理器将存储缓存值"),s("strong",[t._v("写回主存")]),t._v("(阻塞方式).")]),t._v(" "),s("li",[s("strong",[t._v("读内存屏障指令")]),t._v("(Load Memory Barrier): 处理器处理"),s("strong",[t._v("失效队列")]),t._v("(阻塞方式).")])]),t._v(" "),s("p",[t._v("在 volatile "),s("strong",[t._v("读前插")]),t._v("读屏障, "),s("strong",[t._v("写后插")]),t._v("写屏障, "),s("strong",[t._v("避免 CPU 重排序")]),t._v("导致的问题, 实现多线程之间数据的"),s("strong",[t._v("可见性")]),t._v(".")]),t._v(" "),s("p",[s("strong",[t._v("屏障类型")]),t._v(":")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("屏障类型")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("指令实例")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("LoadLoad Barriers")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Load1;LoadLoad;Load2")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("确保 Load1 数据的装载先于 Load2 及所有后续指令的装载")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("StoreStore Barriers")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Store1;StoreStore;Store2")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("确保 Store1 数据对其他处理器可见(刷新到内存),先于 Store2 及所有后续存储指令的存储")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("LoadStore Barriers")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Load1;LoadStore;Store2")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("确保 Load1 数据的装载先于 Store2 及所有后续存储指令刷新到内存")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("StoreLoad Barriers")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Store1;StoreLoad;Load2")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("确保 Store1 数据对其他处理器可见(刷新到内存),先于 Load2 及所有后续装载指令的装载")])])])]),t._v(" "),s("p",[s("strong",[t._v("StoreLoad")]),t._v(" 开销最大. 万能屏障, 兼具其它三种内存屏障功能. 执行时, 处理器通常要把写缓冲区中的数据"),s("strong",[t._v("全部刷新的内存中")]),t._v(".")]),t._v(" "),s("p",[t._v("对于处理器来说, "),s("strong",[t._v("内存屏障")]),t._v("会导致 "),s("strong",[t._v("CPU 缓存的刷新")]),t._v(", 刷新时会遵循缓存一致性协议.")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("Synchronized")]),t._v(": "),s("strong",[t._v("解锁时")]),t._v(", JVM 会强制"),s("strong",[t._v("刷新 CPU 缓存")]),t._v(", 导致当前线程更改, 对其他线程可见.")]),t._v(" "),s("li",[s("strong",[t._v("volatile")]),t._v(": 标记 volatile 的字段, 在"),s("strong",[t._v("写")]),t._v("操作时, 会强制"),s("strong",[t._v("刷新 CPU 缓存")]),t._v(", 每次读取都是"),s("strong",[t._v("直接读内存")]),t._v(".")]),t._v(" "),s("li",[s("strong",[t._v("final")]),t._v(": 即时编译器在 final 写操作后, 会插入"),s("strong",[t._v("内存屏障")]),t._v(", 来禁止重排序, 保证可见性.")])]),t._v(" "),s("blockquote",[s("p",[t._v("还有没有什么方法可以禁止指令重排序?")])]),t._v(" "),s("p",[t._v("禁止指令重排序其实只需要加"),s("strong",[t._v("内存屏障")]),t._v("就行了. 上述的加锁, volatile, final 等都会加上内存屏障, 如果不用这些, 还可以"),s("strong",[t._v("自己手动在代码中加内存屏障")]),t._v(". 可以利用 "),s("strong",[t._v("Unsafe")]),t._v(" 类中的 "),s("strong",[t._v("loadFence(), storeFence()")]),t._v(" 等方法.")]),t._v(" "),s("p",[t._v("‍")]),t._v(" "),s("p",[t._v("‍")]),t._v(" "),s("p",[t._v("‍")])])}),[],!1,null,null,null);s.default=r.exports}}]);