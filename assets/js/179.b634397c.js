(window.webpackJsonp=window.webpackJsonp||[]).push([[179],{509:function(s,t,a){"use strict";a.r(t);var n=a(4),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"_301-mysql架构与日志"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_301-mysql架构与日志"}},[s._v("#")]),s._v(" 301.MySQL架构与日志")]),s._v(" "),t("h4",{attrs:{id:"mysql架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mysql架构"}},[s._v("#")]),s._v(" MySQL架构")]),s._v(" "),t("p",[s._v("下图是 MySQL 的简要架构图. 整体主要分为 "),t("strong",[s._v("Server 层和存储引擎层")]),s._v(".")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20210904145152067.png",alt:""}})]),s._v(" "),t("h5",{attrs:{id:"_1-server层"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-server层"}},[s._v("#")]),s._v(" 1.Server层")]),s._v(" "),t("p",[t("strong",[s._v("Server 层")]),s._v("主要包括连接器, 查询缓存, 分析器, 优化器, 执行器等, 所有"),t("strong",[s._v("跨存储引擎")]),s._v("的功能都在这一层实现, 比如存储过程, 触发器, 视图, 内置函数等, 还有一个通用的日志模块 binlog 日志模块.")]),s._v(" "),t("p",[s._v("总结一下: "),t("strong",[s._v("连接器用于身份权限校验; 分析器分析 SQL 语句要做什么; 优化器分析采用何种方案去执行语句; 执行器去执行语句")]),s._v(".")]),s._v(" "),t("h6",{attrs:{id:"_1-连接器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-连接器"}},[s._v("#")]),s._v(" (1)连接器")]),s._v(" "),t("p",[t("strong",[s._v("连接器用于身份认证和权限校验")]),s._v(".")]),s._v(" "),t("p",[s._v("客户端要向 MySQL 发起通信都必须先跟 Server 端建立通信连接, 而建立连接的工作就是连接器完成的.")]),s._v(" "),t("p",[s._v("连接器负责跟客户端建立连接, 获取权限, 维持和管理连接. 连接后如果用户名密码"),t("strong",[s._v("认证")]),s._v("通过, 连接器会到权限表里面查出账户拥有的"),t("strong",[s._v("权限")]),s._v(". 后面这个连接里面的权限判断逻辑都将依赖于此时读到的权限. 这意味着一个用户成功建立连接后, 即使用管理员账号对这个用户的权限做了修改, 也不会影响已经存在连接的权限. 修改完成后, 只有再新建连接才会使用新的权限设置.")]),s._v(" "),t("p",[s._v("每个客户端连接都会在服务器进程中拥有一个"),t("strong",[s._v("线程")]),s._v(", 这个连接的查询只会在这个"),t("strong",[s._v("单独的线程")]),s._v("中执行, 该线程只能轮流在某个 CPU 中运行.")]),s._v(" "),t("p",[s._v("客户端如果太长时间没动静, 连接器会自动断开连接. 这由参数 "),t("strong",[s._v("wait_timeout")]),s._v(" 控制, 默认为 8 小时. 建立连接的过程通常比较复杂, 所以建议尽量减少建立连接的动作, 尽量使用长连接.")]),s._v(" "),t("h6",{attrs:{id:"_2-查询缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-查询缓存"}},[s._v("#")]),s._v(" (2)查询缓存")]),s._v(" "),t("p",[s._v("执行查询语句的时候, 会先查询缓存.")]),s._v(" "),t("p",[s._v("之前执行过的语句及其结果可能会以 "),t("strong",[s._v("key-value")]),s._v(" 的形式被直接缓存在内存中. key 是查询的"),t("strong",[s._v("语句")]),s._v(", value 是查询的结果. 如果当前查询能够直接在这个缓存中找到 key, 那么这个 value 就会被直接返回给客户端.")]),s._v(" "),t("p",[s._v("但"),t("strong",[s._v("查询缓存的失效非常频繁")]),s._v(", 只要有对一个表的更新, 这个表上"),t("strong",[s._v("所有的查询缓存")]),s._v("都会被清空.")]),s._v(" "),t("p",[s._v("MySQL 8.0 版本已经"),t("strong",[s._v("删除")]),s._v("了查询缓存模块.")]),s._v(" "),t("h6",{attrs:{id:"_3-分析器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-分析器"}},[s._v("#")]),s._v(" (3)分析器")]),s._v(" "),t("p",[t("strong",[s._v("分析器会分析 SQL 语句的语法并判断其要做什么")]),s._v(".")]),s._v(" "),t("p",[s._v('分析器会对 SQL 进行 "'),t("strong",[s._v("词法分析")]),s._v('" 和 "'),t("strong",[s._v("语法分析")]),s._v('". 词法分析就是识别出 SQL 字符串的含义; 针对词法分析的结果, 词法分析器会根据语法规则判断输入的 SQL 语句语法是否合法. 如果输入的语句不对, 就会抛出 "You have an error in your SQL syntax..." 错误.')]),s._v(" "),t("p",[s._v("MySQL 会解析查询, 并创建内部数据结构(解析树), 然后对其进行各种优化, 包括重写查询, 决定表的读取顺序, 以及选择合适的索引等. SQL 语句经过分析器分析之后, 会生成一颗语法树, 如下图所示.")]),s._v(" "),t("p",[s._v("​"),t("img",{attrs:{src:"assets/image-20230315221642-cahwx26.png",alt:"image"}})]),s._v(" "),t("h6",{attrs:{id:"​​​-4-优化器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#​​​-4-优化器"}},[s._v("#")]),s._v(" ​​​(4)优化器")]),s._v(" "),t("p",[t("strong",[s._v("优化器根据实际情况去判断并选择最优的方案去执行语句")]),s._v(".")]),s._v(" "),t("p",[s._v("这里最优只是"),t("strong",[s._v("优化器觉得最优")]),s._v("的方案, 实际执行时不一定是最优的. 优化器可以在表里面有多个索引的时候, 决定使用哪个索引; 或者在一个语句有多表关联(JOIN) 的时候, 决定各个表的连接顺序. 比如:")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" t1 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("JOIN")]),s._v(" t2 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("USING")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ID"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" t1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("c "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" t2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("d "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("可以先从表 t1 里面取出 c = 10 的记录的 ID 值, 再根据 ID 值关联表 t2, 再判断 t2 里面 d 的值是否等于 20.")]),s._v(" "),t("li",[s._v("可以先从表 t2 里面取出 d = 20 的记录的 ID 值, 再根据 ID 值关联表 t1, 再判断 t1 里面 c 的值是否等于 10.")])]),s._v(" "),t("p",[s._v("这两种执行方法的逻辑结果是一样的, 但是执行的效率会有不同, 而优化器的作用就是决定选择使用哪种方案.")]),s._v(" "),t("p",[s._v("用户可以通过特殊的关键字提示(hint)优化器, 影响它的决策过程. 也可以请求优化器解释(explain)优化过程的各个因素, 使用户可以知道服务器是如何进行优化决策的, 并提供一个参考基准, 便于用户重构查询和 schema, 修改相关配置, 使应用尽可能高效运行.")]),s._v(" "),t("h6",{attrs:{id:"_5-执行器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-执行器"}},[s._v("#")]),s._v(" (5)执行器")]),s._v(" "),t("p",[t("strong",[s._v("执行器执行语句并从存储引擎返回数据")]),s._v(".")]),s._v(" "),t("p",[s._v("前面通过分析器知道 SQL 要做什么, 通过优化器知道了该怎么做, 于是就进入了执行器阶段, 开始执行语句.")]),s._v(" "),t("p",[s._v("开始执行的时候, 要先判断一下用户对数据表有没有执行查询权限, 如果有权限则打开表继续执行. 打开表的时候, 执行器就会根据表的引擎定义, 去使用这个引擎提供的接口.")]),s._v(" "),t("p",[s._v("比如查询:")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" T "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("这里 ID 字段没有索引, 执行器的执行流程如下:")]),s._v(" "),t("ol",[t("li",[s._v("调用 InnoDB 引擎接口取这个表的第一行, 判断 ID 值是不是 10, 如果不是则跳过, 如果是则将这行存在结果集中;")]),s._v(" "),t("li",[s._v('调用引擎接口取 "下一行", 重复相同的判断逻辑, 直到取到这个表的最后一行.')]),s._v(" "),t("li",[s._v("执行器将上述遍历过程中所有满足条件的行组成的记录集作为"),t("strong",[s._v("结果集")]),s._v("返回给客户端.")])]),s._v(" "),t("p",[s._v("数据库的慢查询日志中可以看到一个 "),t("strong",[s._v("rows_examined")]),s._v(" 的字段, 表示这个语句"),t("strong",[s._v("执行")]),s._v("过程中"),t("strong",[s._v("扫描了多少行")]),s._v(". 这个值就是在执行器每次调用引擎获取数据行的时候累加的. 有些场景下, 执行器调用一次, 在引擎内部则扫描了多行, 因此"),t("strong",[s._v("引擎扫描行数跟 rows_examined 并不是完全相同的")]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"_2-存储引擎层"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-存储引擎层"}},[s._v("#")]),s._v(" 2.存储引擎层")]),s._v(" "),t("p",[t("strong",[s._v("存储引擎层")]),s._v("主要负责"),t("strong",[s._v("数据的存储和读取")]),s._v(", 采用可以替换的插件式架构, 支持 InnoDB, MyISAM, Memory 等多种存储引擎. "),t("strong",[s._v("InnoDB")]),s._v(" 是默认的存储引擎.")]),s._v(" "),t("h4",{attrs:{id:"mysql存储引擎"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mysql存储引擎"}},[s._v("#")]),s._v(" MySQL存储引擎")]),s._v(" "),t("h5",{attrs:{id:"_1-概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述"}},[s._v("#")]),s._v(" 1.概述")]),s._v(" "),t("p",[t("strong",[s._v("存储引擎就是数据库用于数据存储, 更新, 查询等操作的不同实现方式")]),s._v(". MySQL 采用不同方式将数据存储在文件或内存中, 这些技术使用不同的"),t("strong",[s._v("存储机制, 索引技巧, 锁定水平")]),s._v("以提供不同的功能和能力.")]),s._v(" "),t("p",[s._v("查看 MySQL 提供的所有存储引擎.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SHOW")]),s._v(" ENGINES"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SHOW")]),s._v(" VARIABLES "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("LIKE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%storage_engine%'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看默认引擎")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("结果如下图所示:")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20210904140759531.png",alt:"image-20210904140759531"}})]),s._v(" "),t("p",[s._v("MySQL5.5 之前默认存储引擎是 "),t("strong",[s._v("MyISAM")]),s._v(", MySQL5.5 之后默认存储引擎是 "),t("strong",[s._v("InnoDB")]),s._v(", 在 5.7 版本中"),t("strong",[s._v("只有 InnoDB 是事务")]),s._v("型存储引擎.")]),s._v(" "),t("p",[s._v("不同存储引擎有不同的功能特点及"),t("strong",[s._v("适用场景")]),s._v(", 不同需求可以选择不同的存储引擎.")]),s._v(" "),t("h5",{attrs:{id:"_2-myisam"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-myisam"}},[s._v("#")]),s._v(" 2.MyISAM")]),s._v(" "),t("p",[s._v("MyISAM 是 MySQL5.5 版本之前的默认存储引擎, "),t("strong",[s._v("不支持事务")]),s._v(".")]),s._v(" "),t("p",[s._v("MyISAM 存储引擎下的表由 "),t("strong",[s._v(".myd(数据)和 .myi(索引文件)组成, .frm 文件存储表结构")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("不支持行级锁, 只能对整张表加锁")]),s._v(", 读取时会对需要读到的"),t("strong",[s._v("所有表加共享锁")]),s._v(", 写入时则对表加"),t("strong",[s._v("排它锁")]),s._v(". 但在表有读取操作的同时, 也可以往表中插入新的记录, 这被称为"),t("strong",[s._v("并发插入")]),s._v("(CONCURRENT INSERT).")]),s._v(" "),t("p",[s._v("如果指定了 "),t("strong",[s._v("DELAY_KEY_WRITE")]),s._v(" 选项, 在每次"),t("strong",[s._v("修改")]),s._v("执行完成时, "),t("strong",[s._v("不会立即")]),s._v("将修改的索引数据写入磁盘, 而是会写到内存中的"),t("strong",[s._v("键缓冲区")]),s._v(", 只有在清理键缓冲区或者关闭表的时候才会将对应的索引块写入磁盘. 这种方式可以极大的提升写入性能, 但是在数据库或者主机崩溃时会"),t("strong",[s._v("造成索引损坏")]),s._v(", 需要执行"),t("strong",[s._v("修复操作")]),s._v(". 可以手工或者自动执行检查和修复操作, 但是和事务恢复以及崩溃恢复不同, 可能导致一些"),t("strong",[s._v("数据丢失")]),s._v(", 而且修复操作是非常慢的.")]),s._v(" "),t("p",[t("strong",[s._v("应用场景")]),s._v(": 如果设计简单, 数据以"),t("strong",[s._v("紧密格式")]),s._v("存储. 对于"),t("strong",[s._v("只读数据")]),s._v(", 或者"),t("strong",[s._v("表比较小")]),s._v(", 可以"),t("strong",[s._v("容忍修复操作")]),s._v(", 则依然可以使用它.")]),s._v(" "),t("h5",{attrs:{id:"_3-innodb"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-innodb"}},[s._v("#")]),s._v(" 3.InnoDB")]),s._v(" "),t("p",[s._v("InnoDB 是 MySQL5.5 及之后版本的"),t("strong",[s._v("默认存储引擎")]),s._v(", 是"),t("strong",[s._v("事务型")]),s._v("存储引擎.")]),s._v(" "),t("p",[t("strong",[s._v("事务")]),s._v(": InnoDB 采用 MVCC 来支持高并发, 并且实现了四个标准的隔离级别. 其默认级别是"),t("strong",[s._v("可重复读")]),s._v(", 并且通过"),t("strong",[s._v("间隙锁")]),s._v("(next-key locking)策略防止幻读的出现. 间隙锁使得 InnoDB 不仅仅锁定查询涉及的行, 还会对索引中的间隙进行锁定, 以防止幻影行的插入.")]),s._v(" "),t("p",[t("strong",[s._v("索引")]),s._v(": 主索引是"),t("strong",[s._v("聚簇索引")]),s._v(", 在索引中保存了数据, 从而避免直接读取磁盘, 因此对查询性能有很大的提升.")]),s._v(" "),t("p",[s._v("它内部做了很多优化, 包括从磁盘读取数据时采用的可预测性读, 能够加快读操作并且自动创建的自适应哈希索引, 能够加速插入操作的插入缓冲区等.")]),s._v(" "),t("p",[t("strong",[s._v("应用场景")]),s._v(": 可靠性要求较高或要求事务. 只有在需要它"),t("strong",[s._v("不支持")]),s._v("的特性时, 才考虑使用其它存储引擎. "),t("strong",[s._v("能用就用")]),s._v(".")]),s._v(" "),t("blockquote",[t("p",[s._v("MyISAM与InnoDB对比")])]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("事务")]),s._v(": InnoDB 支持"),t("strong",[s._v("事务")]),s._v(", 可以使用 "),t("strong",[s._v("Commit 和 Rollback")]),s._v(" 语句; MyISAM 不支持事务.")]),s._v(" "),t("li",[t("strong",[s._v("锁的粒度")]),s._v(": MyISAM 只支持表锁, InnoDB 支持"),t("strong",[s._v("表锁与行锁")]),s._v(". InnoDB 在应对高并发事务上使用 MVCC 比单纯的加锁更高效.")]),s._v(" "),t("li",[t("strong",[s._v("外键")]),s._v(": InnoDB 支持"),t("strong",[s._v("外键")]),s._v("; MyISAM 不支持外键而.")]),s._v(" "),t("li",[t("strong",[s._v("备份")]),s._v(": InnoDB 支持"),t("strong",[s._v("在线热备份")]),s._v(".")]),s._v(" "),t("li",[t("strong",[s._v("崩溃恢复")]),s._v(": MyISAM "),t("strong",[s._v("崩溃")]),s._v("后发生损坏的概率比 InnoDB 高很多, 且恢复的速度也更慢; InnoDB 崩溃之后恢复更加容易.")]),s._v(" "),t("li",[t("strong",[s._v("其它特性")]),s._v(": MyISAM 支持压缩表和空间数据索引.")])]),s._v(" "),t("p",[s._v('《MySQL 高性能》: 不要轻易相信 "MyISAM 比 InnoDB 快" 之类的经验之谈, 这个结论往往不是绝对的. 在很多已知场景中, InnoDB 的速度都能让 MyISAM 望尘莫及, 尤其是用到了聚簇索引, 或者需要访问的数据都可以放入内存的应用. 所以'),t("strong",[s._v("一般情况下选择 InnoDB 都是没有问题")]),s._v("的. 如果并不在乎可扩展能力和并发能力, 也不需要事务支持以及崩溃后的安全恢复问题, 也可以选择 MyISAM.")]),s._v(" "),t("blockquote",[t("p",[s._v("如何选择存储引擎?")])]),s._v(" "),t("p",[t("strong",[s._v("根据具体的应用场景选择: ​")]),s._v("​"),t("strong",[t("strong",[s._v("综合考虑是否需要事务, 是否可以热备份, 崩溃恢复, 存储引擎的特有特性等. 注意不要混合使用存储引擎. 一般")])]),s._v("​"),t("strong",[s._v("使用 InnoDB")]),s._v(" 就行了.")]),s._v(" "),t("h5",{attrs:{id:"_4-其他存储引擎"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-其他存储引擎"}},[s._v("#")]),s._v(" 4.其他存储引擎")]),s._v(" "),t("h6",{attrs:{id:"_1-csv"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-csv"}},[s._v("#")]),s._v(" (1)CSV")]),s._v(" "),t("p",[t("strong",[s._v("特性")]),s._v(": 以 "),t("strong",[s._v("CSV 格式")]),s._v("进行数据存储, 所有列都不能为 NULL, 不支持索引, 可以对"),t("strong",[s._v("数据文件直接编辑")]),s._v("(其他引擎是二进制存储, 不可编辑).")]),s._v(" "),t("p",[t("strong",[s._v("对应文件系统存储特点")]),s._v(": 数据以文本方式存储在文件中, "),t("strong",[s._v(".csv")]),s._v(" 文件存储表内容, "),t("strong",[s._v(".csm")]),s._v(" 文件存储表的元数据, 如表状态和数据量, "),t("strong",[s._v(".frm")]),s._v(" 存储表的结构.")]),s._v(" "),t("p",[t("strong",[s._v("引用场景")]),s._v(": 作为数据交换的"),t("strong",[s._v("中间表")]),s._v(".")]),s._v(" "),t("h6",{attrs:{id:"_2-archive"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-archive"}},[s._v("#")]),s._v(" (2)Archive")]),s._v(" "),t("p",[t("strong",[s._v("特性")]),s._v(": 对表数据进行压缩, 磁盘 I/O 更少, 数据存储在 ARZ 为后缀的文件中(表文件为 "),t("strong",[s._v("a.arz, a.frm")]),s._v("), 只支持 INSERT 和 SELECT 操作(不可以 DELETE 和 UPDATE), 只允许在自增 ID 列上加索引.")]),s._v(" "),t("p",[t("strong",[s._v("应用场景")]),s._v(": 日志和数据采集类应用.")]),s._v(" "),t("h6",{attrs:{id:"_3-memory"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-memory"}},[s._v("#")]),s._v(" (3)Memory")]),s._v(" "),t("p",[t("strong",[s._v("特性")]),s._v(": 数据保存在内存中, 所以数据库重启后会导致数据丢失. 支持 HASH 索引(等值查找应选择 HASH)和 BTree 索引(范围查找应选择), 所有字段都为固定长度, Memory 存储使用表级锁.")]),s._v(" "),t("p",[t("strong",[s._v("应用场景")]),s._v(": 用于查找或是映射表, 例如用于保存数据分析中产生的中间表, 用于缓存周期性聚合数据的结果表等. Memory 数据易丢失, 所以要求数据可再生.")]),s._v(" "),t("h4",{attrs:{id:"sql语句执行流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sql语句执行流程"}},[s._v("#")]),s._v(" SQL语句执行流程")]),s._v(" "),t("p",[s._v("SQL 语句一般可以分为"),t("strong",[s._v("查询")]),s._v("与"),t("strong",[s._v("更新")]),s._v("(增加, 更新, 删除)两类. 整体流程如下:")]),s._v(" "),t("ul",[t("li",[s._v("客户端发送一条查询给服务器.")]),s._v(" "),t("li",[s._v("服务器先检查查询缓存, 如果命中了缓存, 则立刻返回存储在缓存中的结果. 否则进入下一阶段.")]),s._v(" "),t("li",[s._v("服务器端进行 SQL 解析, 预处理, 再由"),t("strong",[s._v("优化器")]),s._v("生成对应的执行计划.")]),s._v(" "),t("li",[s._v("MySQL 根据优化器生成的执行计划, 调用存储引擎的 API 来执行查询.")]),s._v(" "),t("li",[s._v("将结果返回给客户端.")])]),s._v(" "),t("h5",{attrs:{id:"_1-客户端与服务端通信协议"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-客户端与服务端通信协议"}},[s._v("#")]),s._v(" 1.客户端与服务端通信协议")]),s._v(" "),t("p",[s._v('MySQL 客户端和服务器之间的通信协议是"半双工"的, 这意味着在任何一个时刻, 要么是由服务器向客户端发送数据, 要么是由客户端向服务器发送数据, 这两个动作不能同时发生. 所以无法也无须将一个消息切成小块独立来发送. 这种协议让 MySQL 通信简单快速, 但是也从很多地方限制了 MySQL. 一个明显的限制是, 这意味着没法进行流量控制. 一旦一端开始发生消息, 另一端要接收完整个消息才能响应它. 客户端用一个单独的数据包将查询传给服务器. 这也是为什么当查询的语句很长的时候, 参数 max_allowed_packet 就特别重要了. 一旦客户端发送了请求, 它能做的事情就只是等待结果了. 一般服务器响应给用户的数据通常很多, 由多个数据包组成. 当服务器开始响应客户端请求时, 客户端必须完整地接收整个返回结果, 而不能简单地只取前面几条结果, 然后让服务器停止发送数据.')]),s._v(" "),t("h5",{attrs:{id:"_2-查询语句流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-查询语句流程"}},[s._v("#")]),s._v(" 2.查询语句流程")]),s._v(" "),t("p",[s._v("先分析下查询语句, 语句如下:")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" tb_student A "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" A"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'18'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" A"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Jack'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("参考 MySQL 架构分析下这个语句的执行流程如下.")]),s._v(" "),t("h6",{attrs:{id:"_1-查询权限"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-查询权限"}},[s._v("#")]),s._v(" (1) 查询权限")]),s._v(" "),t("p",[s._v("先检查该语句是"),t("strong",[s._v("否有权限")]),s._v(", 如果没有则直接返回错误信息.")]),s._v(" "),t("h6",{attrs:{id:"_2-查询缓存-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-查询缓存-2"}},[s._v("#")]),s._v(" (2) 查询缓存")]),s._v(" "),t("p",[s._v("如果有权限则计算这条 SQL 语句的 Hash 并以之为 key 在内存中查询是否缓存有结果, 当查询命中该缓存, MySQL会立刻返回结果, 跳过了解析, 优化和执行阶段, 如果没有, 执行下一步.")]),s._v(" "),t("p",[s._v("注意: MySQL8.0 之后已经"),t("strong",[s._v("去掉")]),s._v("了查询缓存机制.")]),s._v(" "),t("p",[s._v("为什么删除查询缓存?")]),s._v(" "),t("ul",[t("li",[s._v("查询缓存系统会跟踪查询中涉及的每个表, 如果这些表发生变化, 那么和这个表相关的所有的缓存数据"),t("strong",[s._v("都将失效")]),s._v(".")]),s._v(" "),t("li",[s._v("缓存碎片, 内存不足都会造成缓存失效. 如果表中任何数据或是结构发生改变, 包括INSERT, UPDATE, DELETE, TRUNCATE, ALTER TABLE, DROP TABLE或DROP DATABASE等, 那么使用这个表的所有缓存查询将不再有效, 查询缓存中值相关条目被清空. 缓存失效会带来额外的开销.")]),s._v(" "),t("li",[s._v("缓存全部在内存中, 容易造成内存资源紧张. 且 SQL 语句有任何不同, 都会因为 Hash 不同而认为是不同的查询, 从而进行缓存.")])]),s._v(" "),t("p",[s._v("对于频繁更新的表, 查询缓存并不好.")]),s._v(" "),t("h6",{attrs:{id:"_3-词法分析与语法检查"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-词法分析与语法检查"}},[s._v("#")]),s._v(" (3) 词法分析与语法检查")]),s._v(" "),t("p",[s._v('MySQL 通过关键字将 SQL 语句进行解析, 并生成一棵对应的 "解析树". MySQL 解析器将使用 MySQL 语法规则验证和解析查询. 例如, 它将验证是否使用错误的关键字, 或者使用关键字的顺序是否正确等, 再或者它还会验证引号是否能前后正确匹配.')]),s._v(" "),t("p",[s._v("通过分析器进行词法分析并分析是否有语法错误, 提取 SQL 语句的"),t("strong",[s._v("关键元素")]),s._v(", 并生成一棵对应的 \"解析树\". 比如提取上面这个语句是查询 SELECT, 提取需要查询的表名为 tb_student, 需要查询所有的列, 查询条件是这个表的 id = '1'.")]),s._v(" "),t("p",[s._v("MySQL 解析器将使用 MySQL 语法规则验证和解析查询. 例如, 它将验证是否使用错误的关键字, 或者使用关键字的顺序是否正确等, 再或者它还会验证引号是否能前后正确匹配.")]),s._v(" "),t("p",[s._v("预处理器则根据一些MySQL规则进一步检查解析树是否合法, 例如, 这里将检查数据表和数据列是否存在, 还会解析名字和别名, 看看它们是否有歧义.")]),s._v(" "),t("h6",{attrs:{id:"_4-优化器确定执行方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-优化器确定执行方案"}},[s._v("#")]),s._v(" (4) 优化器确定执行方案")]),s._v(" "),t("p",[t("strong",[s._v("生成执行计划")])]),s._v(" "),t("p",[s._v("现在语法树被认为是合法的了, 并且由优化器将其转化成"),t("strong",[s._v("执行计划")]),s._v(".")]),s._v(" "),t("p",[s._v("和很多其他关系数据库不同, MySQL 并不会生成查询字节码来执行查询. MySQL生成查询的一棵指令树, 然后通过存储引擎执行完成这棵指令树并返回结果. 最终的执行计划包含了重构查询的全部信息.")]),s._v(" "),t("p",[t("strong",[s._v("基于成本的执行计划选择策略")])]),s._v(" "),t("p",[s._v("一条查询可以有很"),t("strong",[s._v("多种")]),s._v("执行计划, 最后都返回相同的结果. 优化器的作用就是找到这其中最好的执行计划.")]),s._v(" "),t("p",[s._v("MySQL 使用"),t("strong",[s._v("基于成本的优化器")]),s._v(", 它将尝试预测一个查询使用某种执行计划时的成本, 并选择其中成本最小的一个.")]),s._v(" "),t("p",[s._v("最初, 成本的最小单位是随机读取一个4K数据页的成本, 后来成本计算公式变得更加复杂, 并且引入了一些“因子”来估算某些操作的代价, 如通过各种"),t("strong",[s._v("统计信息")]),s._v("来计算: 每个表或者索引的页面个数, 索引的基数(索引中不同值的数量), 索引和数据行的长度, 索引分布情况. 这些统计信息是通过存储引擎获取的.")]),s._v(" "),t("p",[s._v('上述 SQL 语句可以有两种执行方案: (1) 先查询学生表中姓名为 "Jack" 的学生, 然后判断是否年龄是 18. (2) 先找出学生中年龄 18 岁的学生, 然后再查询姓名为 "Jack" 的学生. 优化器会根据'),t("strong",[s._v("自己的优化算法")]),s._v("进行选择执行效率最好的一个方案(优化器的决定有时候不一定最好). 确定执行计划后就准备开始执行.")]),s._v(" "),t("p",[t("strong",[s._v("优化策略")])]),s._v(" "),t("p",[s._v("MySQL 的查询优化器是一个非常复杂的部件, 它使用了很多优化策略来生成一个最优的执行计划. 优化策略可以简单地分为两种, 一种是静态优化, 一种是动态优化. 静态优化可以直接对解析树进行分析, 并完成优化. 例如, 优化器可以通过一些简单的代数变换将WHERE条件转换成另一种等价形式. 静态优化不依赖于特别的数值, 如 WHERE 条件中带入的一些常数等. 静态优化在第一次完成后就一直有效, 即使使用不同的参数重复执行查询也不会发生变化. 可以认为这是一种“编译时优化”. 相反, 动态优化则和查询的上下文有关, 也可能和很多其他因素有关, 例如 WHERE 条件中的取值, 索引中条目对应的数据行数等. 这需要在每次查询的时候都重新评估, 可以认为这是“运行时优化”. 在执行语句和存储过程的时候, 动态优化和静态优化的区别非常重要. MySQL 对查询的静态优化只需要做一次, 但对查询的动态优化则在每次执行时都需要重新评估. 有时候甚至在查询的执行过程中也会重新优化.")]),s._v(" "),t("p",[s._v("下面是一些 MySQL 能够处理的优化类型:")]),s._v(" "),t("ul",[t("li",[s._v("重新定义关联表的顺序.")]),s._v(" "),t("li",[s._v("将外连接转化成内连接.")]),s._v(" "),t("li",[s._v("使用等价变换规则. 比如比较符号的变换.")]),s._v(" "),t("li",[s._v("覆盖索引扫描.")]),s._v(" "),t("li",[s._v("提前终止查询.")])]),s._v(" "),t("p",[t("strong",[s._v("数据与索引的统计信息")])]),s._v(" "),t("p",[s._v("MySQL 通过统计信息来计算执行计划的成本进而选择合适的执行计划. 统计信息由存储引擎实现, 不同的存储引擎可能会存储不同的统计信息(也可以按照不同的格式存储统计信息).")]),s._v(" "),t("p",[s._v("因为服务器层没有任何统计信息, 所以 MySQL 查询优化器在生成查询的执行计划时, 需要向存储引擎获取相应的统计信息. 存储引擎则提供给优化器对应的统计信息, 包括: 每个表或者索引有多少个页面, 每个表的每个索引的基数是多少, 数据行和索引长度, 索引的分布信息等. 优化器根据这些信息来选择一个最优的执行计划.")]),s._v(" "),t("p",[t("strong",[s._v("优化器选择错误的原因")])]),s._v(" "),t("p",[s._v("有很多种原因会导致MySQL优化器选择错误的执行计划, 如下所示:")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("统计信息不准确")]),s._v(". MySQL 依赖存储引擎提供的统计信息来评估成本, 但是有的存储引擎提供的信息是准确的, 有的偏差可能非常大. 例如, InnoDB因为其 MVCC 的架构, 并不能维护一个数据表的行数的精确统计信息.")]),s._v(" "),t("li",[s._v("执行计划中的成本估算不等同于实际执行的成本. 所以即使统计信息精准, 优化器给出的执行计划也可能不是最优的. 例如有时候某个执行计划虽然需要读取更多的页面, 但是它的成本却更小. 因为如果这些页面都是顺序读或者这些页面都已经在内存中的话, 那么它的访问成本将很小. MySQL 层面并不知道哪些页面在内存中, 哪些在磁盘上, 所以查询实际执行过程中到底需要多少次物理I/O是无法得知的.")]),s._v(" "),t("li",[s._v("MySQL 的最优可能和你想的最优不一样. 你可能希望执行时间尽可能的短, 但 MySQL 只是基于其成本模型选择最优的执行计划, 而有些时候这并不是最快的执行方式. 所以根据执行成本来选择执行计划并不是完美的模型.")]),s._v(" "),t("li",[s._v("MySQL 从不考虑其他并发执行的查询, 这可能会影响到当前查询的速度.")]),s._v(" "),t("li",[s._v("MySQL 也并不是任何时候都是基于成本的优化. 有时也会基于一些固定的规则, 例如, 如果存在全文搜索的 MATCH() 子句, 则在存在全文索引的时候就使用全文索引. 即使有时候使用别的索引和 WHERE 条件可以远比这种方式要快, MySQL 也仍然会使用对应的全文索引.")]),s._v(" "),t("li",[s._v("MySQL 不会考虑不受其控制的操作的成本, 例如执行存储过程或者用户自定义函数的成本.")])]),s._v(" "),t("p",[t("strong",[s._v("查询优化器的提示(hint)")])]),s._v(" "),t("p",[s._v("如果对优化器选择的执行计划不满意, 可以使用优化器提供的几个提示(hint)来控制最终的执行计划. 常见的提示如下.")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("USE INDEX, IGNORE INDEX和FORCE INDEX")]),s._v(". 这几个提示会告诉优化器使用或者不使用哪些索引来查询记录(例如, 在决定关联顺序的时候使用哪个索引). 在MySQL 5.0和更早的版本, 这些提示并不会影响到优化器选择哪个索引进行排序和分组, 在MyQL 5.1和之后的版本可以通过新增选项FOR ORDER BY和FOR GROUP BY来指定是否对排序和分组有效. FORCE INDEX和USE INDEX基本相同, 除了一点: FORCE INDEX会告诉优化器全表扫描的成本会远远高于索引扫描, 哪怕实际上该索引用处不大. 当发现优化器选择了错误的索引, 或者因为某些原因(比如在不使用ORDER BY的时候希望结果有序)要使用另一个索引时, 可以使用该提示.")]),s._v(" "),t("li",[t("strong",[s._v("FOR UPDATE和LOCK IN SHARE MODE")]),s._v(". 这也不是真正的优化器提示. 这两个提示主要控制SELECT语句的锁机制, 但只对实现了行级锁的存储引擎有效. 使用该提示会对符合查询条件的数据行加锁. 这两个提示经常被滥用, 很容易造成服务器的锁争用问题. 应"),t("strong",[s._v("避免使用")]),s._v("这个.")])]),s._v(" "),t("h6",{attrs:{id:"_5-执行查询并返回结果"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-执行查询并返回结果"}},[s._v("#")]),s._v(" (5) 执行查询并返回结果")]),s._v(" "),t("p",[s._v("在解析和优化阶段, MySQL将生成查询对应的执行计划, MySQL的查询执行引擎则根据这个执行计划来完成整个查询. 这里执行计划是一个数据结构, 而不是和很多其他的关系型数据库那样会生成对应的字节码.")]),s._v(" "),t("p",[s._v("MySQL只是简单地根据执行计划给出的指令"),t("strong",[s._v("逐步执行")]),s._v('. 在根据执行计划逐步执行的过程中, 有大量的操作需要通过调用存储引擎实现的接口来完成, 这些接口称为 "handler API" 接口.')]),s._v(" "),t("p",[s._v("最后将查询结果返回给客户端.")]),s._v(" "),t("h5",{attrs:{id:"_3-更新语句流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-更新语句流程"}},[s._v("#")]),s._v(" 3.更新语句流程")]),s._v(" "),t("p",[s._v("接下来看看更新语句如何执行, SQL 语句如下:")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("UPDATE")]),s._v(" tb_student A "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" A"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'19'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" A"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Jack'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("这条语句与之前查询的流程类似, 只不过执行"),t("strong",[s._v("更新需要进行日志记录")]),s._v(". 这就引入了日志模块, MySQL 自带的"),t("strong",[s._v("日志模块")]),s._v("是 "),t("strong",[s._v("binlog(归档日志)")]),s._v(", 所有的存储引擎都可以使用, "),t("strong",[s._v("常用的 InnoDB 引擎")]),s._v("还自带了一个日志模块 "),t("strong",[s._v("redo log(重做日志)")]),s._v(".")]),s._v(" "),t("p",[s._v("这里以 InnoDB 模式下来分析这个语句的执行流程, 流程如下:")]),s._v(" "),t("ul",[t("li",[s._v("先"),t("strong",[s._v("查询")]),s._v("到 Jack 这条数据, 如果"),t("strong",[s._v("有缓存")]),s._v("也会用缓存值.")]),s._v(" "),t("li",[s._v("然后拿到查询语句, 把 age 改为 19, 然后调用引擎 API 接口, 写入这一行数据, InnoDB 引擎把"),t("strong",[s._v("数据保存在内存中")]),s._v(", 同时"),t("strong",[s._v("记录 redo log")]),s._v(", 此时 redo log "),t("strong",[s._v("进入 prepare 状态")]),s._v(", 然后告诉执行器, 执行完成了随时可以"),t("strong",[s._v("提交")]),s._v(".")]),s._v(" "),t("li",[s._v("执行器"),t("strong",[s._v("收到通知后记录 binlog")]),s._v(", 然后调用引擎接口, "),t("strong",[s._v("提交 redo log 并且状态改为提交状态")]),s._v(", 更新完成.")])]),s._v(" "),t("blockquote",[t("p",[s._v("为什么要用两个日志模块, 用一个日志模块不行吗?")])]),s._v(" "),t("p",[s._v("这是因为最开始 MySQL 默认存储引擎是 MyISAM, 但 "),t("strong",[s._v("redo log 是 InnoDB 引擎独有的")]),s._v(", 这就导致会"),t("strong",[s._v("没有 crash-safe 的能力")]),s._v("(即使数据库发生"),t("strong",[s._v("异常重启")]),s._v(", 之前提交的记录都不会丢失), "),t("strong",[s._v("binlog 日志只能用来归档")]),s._v(".")]),s._v(" "),t("p",[s._v("并不是说只用一个日志模块不可以, "),t("strong",[s._v("只是 InnoDB 引擎就是通过 redo log 来支持事务")]),s._v(". 那么用两个日志模块, 但是不要这么复杂行不行, 为什么 redo log 要引入 prepare 预提交状态? 这里用"),t("strong",[s._v("反证法")]),s._v("来说明下为什么要这么做.")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("先写 redo log 直接提交, 然后写 binlog")]),s._v(". 假设写完 redo log 后机器挂了, binlog 日志没有被写入, 那么机器重启后, 这台机器会通过 redo log 恢复数据, 但是这个时候 binlog 并没有记录该数据, 后续进行机器备份的时候, 就会丢失这一条数据, 同时主从同步也会"),t("strong",[s._v("丢失")]),s._v("这一条数据.")]),s._v(" "),t("li",[t("strong",[s._v("先写 binlog, 然后写 redo log")]),s._v(". 假设写完了 binlog, 机器异常重启了, 由于没有 redo log, 本机是无法恢复这一条记录的, 但是 binlog 又有记录, 那么和上面同样的道理, 就会"),t("strong",[s._v("产生数据不一致")]),s._v("的情况.")])]),s._v(" "),t("p",[s._v("如果"),t("strong",[s._v("采用 redo log 两阶段提交")]),s._v("的方式就不一样了, "),t("strong",[s._v("写完 binglog 后, 然后再提交 redo log")]),s._v(" 就会防止出现上述的问题, 从而保证了数据一致性.")]),s._v(" "),t("p",[s._v("那么问题来了, 有没有一个极端的情况呢? 假设 redo log 处于预提交状态, binglog 也已经写完了, 这个时候发生了异常重启会怎么样呢?  这个就要依赖于 MySQL 的"),t("strong",[s._v("处理机制")]),s._v("了, MySQL 的处理过程如下:")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("判断 redo log 是否完整, 如果判断是完整的就立即提交.")])]),s._v(" "),t("li",[t("strong",[s._v("如果 redo log 只是预提交但不是 commit 状态, 这个时候就会去判断 binlog 是否完整, 如果完整就提交 redo log, 不完整就回滚事务")]),s._v(".")])]),s._v(" "),t("p",[s._v("这样就解决了"),t("strong",[s._v("数据一致性")]),s._v("问题.")]),s._v(" "),t("h5",{attrs:{id:"_4-数据更新模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-数据更新模型"}},[s._v("#")]),s._v(" 4.数据更新模型")]),s._v(" "),t("p",[s._v("数据更新的主要流程:")]),s._v(" "),t("p",[s._v("![https://www.processon.com/diagraming/6416cf40ff015f63025f88c3](https://nano-note.oss-cn-beijing.aliyuncs.com/images/图灵-MySQL执行过程与InnoDB底层原理 (1).png)")]),s._v(" "),t("p",[s._v("整体流程如下:")]),s._v(" "),t("p",[s._v("1.当需要更新的数据不在 Buffer Pool 缓存池的时候, 会从磁盘中把整页数据都加载到缓存池内存中.")]),s._v(" "),t("p",[s._v("2.将旧的数据值(name=Lucy)写入到 undo 回滚日志中, 便于后续回滚. 如果事务提交失败要回滚数据, 可以用 undo 日志里的数据恢复 buffer pool 里面的缓存数据.")]),s._v(" "),t("p",[s._v("3.执行器更新内存数据, 即 name=Jack.")]),s._v(" "),t("p",[s._v("4.更新信息写入到 redo log buffer 缓冲区中.")]),s._v(" "),t("p",[s._v("5.redo 日志顺序写入磁盘, 准备提交事务(prepare阶段).")]),s._v(" "),t("p",[s._v("6.准备提交事务, 将 binlog 日志写入磁盘.")]),s._v(" "),t("p",[s._v("7.写入 commit 标记到 redo 日志文件里, "),t("strong",[s._v("此时事务提交完成")]),s._v(". 该标记为了保证事务提交后 redo 与 binlog 数据一致. 到这里可以告知客户端事务已经提交完成. 这里 redo 日志文件记录了哪些位置的什么数据做了哪些修改, 由于 redo 日志具有"),t("strong",[s._v("顺序写")]),s._v("的特点, 所以写入是很快的, 因此修改记录到 redo 日志中即可认为事务已经完成. 这比每次都直接去修改磁盘上的 ibd 文件要快. 因此后面有个线程去专门将修改写入到随机的 ibd 文件中.")]),s._v(" "),t("p",[s._v("8.在系统空闲的时候将修改随机写入磁盘进行持久化, 以 page 为单位写入. 完成后实现磁盘中的数据更新. 如果事务提交成功, buffer pool 里的数据还没来得及写入磁盘的时候系统宕机了, 可以用 redo 日志的数据"),t("strong",[s._v("恢复磁盘 ibd 文件里面的数据")]),s._v('. 也就是 buffer pool 里面的数据还没持久化到磁盘文件中, 但是 redo log 中记录了哪些数据做了哪些修改, 因此当系统恢复的时候, 可以先根据 redo log 对数据进行磁盘中的数据重做, 让其与 redo log 中的数据状态保持一致, 也就是实现数据的持久化. 这个过程其实就是 "重做", 或者 "重放", 也就是 redo 的含义.')]),s._v(" "),t("blockquote",[t("p",[s._v("WAL(Write-Ahead Loggin)机制")])]),s._v(" "),t("p",[s._v("redo 日志文件顺序写: redo log 是一个或几个预先分配好磁盘空间的文件, 写入永远都是在文件末尾追加.")]),s._v(" "),t("p",[s._v("ibd 数据文件随机读写: 不同的数据表有不一样的 ibd 文件, 比如执行 10 条SQL, 修改不同的表, 需要修改不同的 ibd 文件, 不能实现顺序写文件的效果.")]),s._v(" "),t("p",[s._v("先写 redo log后刷新数据表文件的机制叫 WAL 机制(Write-Ahead Loggin), 效率更高.")]),s._v(" "),t("blockquote",[t("p",[s._v("binlog用处分析")])]),s._v(" "),t("p",[t("strong",[s._v("注意")]),s._v(": binlog 是属于 "),t("strong",[s._v("Server 层")]),s._v("的, 所有存储引擎都有. binlog 主要用来恢复数据库磁盘里的数据. 比如某次修改已经将数据的真实修改写入到了磁盘文件中, 但是有人误操作删除了磁盘文件的数据, 这时候就可以用 binlog 恢复原始的数据.")]),s._v(" "),t("blockquote",[t("p",[s._v("为什么会有 redo log 和 binlog 两份日志?")])]),s._v(" "),t("p",[s._v("因为最开始 MySQL 里并没有 InnoDB 引擎. MySQL 自带的引擎是 MyISAM, 但是 MyISAM 没有 crash-safe 的能力, binlog 日志只能用于"),t("strong",[s._v("归档")]),s._v(". 而 InnoDB 是另一个公司以插件形式引入 MySQL 的, 既然只依靠 binlog 是没有 crash-safe 能力的, 所以InnoDB 使用另外一套日志系统, 也就是 redo log 来实现 crash-safe 能力.")]),s._v(" "),t("p",[s._v("有了 redo log, InnoDB 就可以保证即使数据库发生异常重启, 之前提交的记录都不会丢失, 这个能力称为 crash-safe.")]),s._v(" "),t("blockquote",[t("p",[s._v("为什么MySQL不能直接更新磁盘上的数据而设置这么一套复杂的机制来执行SQL?")])]),s._v(" "),t("p",[s._v("因为如果来一个请求就直接对磁盘文件进行随机读写, 然后更新磁盘文件里的数据性能可能相当差. 磁盘随机读写的性能是非常差的, 所以直接更新磁盘文件是不能让数据库抗住很高并发的. MySQL 这套机制看起来复杂, 但它可以保证每个更新请求都是更新内存 Buffer Pool, 然后顺序写日志文件, 同时还能保证各种异常情况下的数据一致性. 更新内存的性能是极高的, 然后顺序写磁盘上的日志文件的性能也是非常高的, 要远高于随机读写磁盘文件. 正是通过这套机制, 才能让 MySQL 数据库在较高配置的机器上每秒可以抗下几干甚至上万的读写请求.")]),s._v(" "),t("h4",{attrs:{id:"redo-log重做日志"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redo-log重做日志"}},[s._v("#")]),s._v(" redo log重做日志")]),s._v(" "),t("h5",{attrs:{id:"redo-log重做日志关键参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redo-log重做日志关键参数"}},[s._v("#")]),s._v(" redo log重做日志关键参数")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("innodb_log_buffer_size: 设置 redo log buffer 大小, 默认 16M, 最大值是 4096M, 最小值为 1M.")])]),s._v(" "),t("li",[t("p",[s._v("innodb_log_group_home_dir: 设置 "),t("strong",[s._v("redo log 文件存储位置")]),s._v(', 默认值为"./", 即 InnoDB 数据文件存储位置, 其中的 ib_logfile0 和 ib_logfile1 即为 redo log 文件.')])]),s._v(" "),t("li",[t("p",[s._v("innodb_log_files_in_group: 设置 redo log 文件的个数, 命名方式如: ib_logfile0, iblogfile1... iblogfileN. 默认 2 个, 最大 100 个.")])]),s._v(" "),t("li",[t("p",[s._v("innodb_log_file_size: 设置单个 redo log 文件大小, 默认值为 48 M. 最大值为 512G, 注意最大值指的是"),t("strong",[s._v("整个 redo log 系列文件之和")]),s._v(", 即 (innodb_log_files_in_group * innodb_log_file_size) 不能大于最大值 512G.")])])]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("show")]),s._v(" variables "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%innodb_log_buffer_size%'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("show")]),s._v(" variables "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%innodb_log_group_home_dir%'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("show")]),s._v(" variables "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%innodb_log_files_in_group%'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h5",{attrs:{id:"redo-log写入磁盘过程分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redo-log写入磁盘过程分析"}},[s._v("#")]),s._v(" redo log写入磁盘过程分析")]),s._v(" "),t("p",[s._v("在有多个 redo log 日志文件的情况下, redo log 会对某个文件从头开始写, 写完一个文件继续写另一个文件, 写到最后一个文件末尾就又回到第一个文件开头循环写, 如下面这个图所示.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/20230319185252.png",alt:""}})]),s._v(" "),t("p",[s._v("write pos 是当前记录的位置, 一边写一边后移, 写到第 3 号文件末尾后就回到 0 号文件开头.")]),s._v(" "),t("p",[s._v("checkpoint 是当前要"),t("strong",[s._v("擦除")]),s._v("的位置, 也是往后推移并且循环的, 擦除记录前要把记录更新到数据文件里.")]),s._v(" "),t("p",[s._v("write pos 和 checkpoint 之间的部分就是空着的"),t("strong",[s._v("可写部分")]),s._v(", 可以用来记录新的操作. 如果 write pos 追上 checkpoint, 表示 redo log 写满了, 这时候不能再执行新的更新, 得停下来先擦掉一些记录, 也就是把一部分数据持久化到 ibd 磁盘文件中, 把 checkpoint 推进一下.")]),s._v(" "),t("p",[t("strong",[s._v("innodb_flush_log_at_trx_commit")]),s._v(": 这个参数控制 redo log 的"),t("strong",[s._v("写入策略")]),s._v(", 也就是上面流程图中更新信息写入到 redo log buffer 缓冲区中之后, 将 redo log buffer 缓冲区中的修改写入到 redo log 的过程(步骤 5).")]),s._v(" "),t("p",[s._v("它有三种可能取值:")]),s._v(" "),t("ul",[t("li",[s._v("设置为 0: 表示每次事务提交时都只是把 redo log "),t("strong",[s._v("留在 redo log buffer 中")]),s._v(", 数据库宕机可能会"),t("strong",[s._v("丢失数据. ​")]),s._v("对于上图就是没有步骤 5 了.")]),s._v(" "),t("li",[s._v("设置为 1(默认值): 表示"),t("strong",[s._v("每次事务提交时都将 redo log 直接持久化到磁盘, 数据最安全, 不会因为数据库宕机丢失数据")]),s._v(", 但是效率稍微差一点, 线上系统推荐这个设置.")]),s._v(" "),t("li",[s._v("设置为 2: 表示每次事务提交时都只是把 redo log 写到操作系统的缓存 page cache 里而不会写到文件中, 这种情况如果"),t("strong",[s._v("数据库宕机(数据库进程挂掉)是不会丢失数据的(因为数据是缓存在操作系统的 page cache 内存里面的). ​")]),s._v("但是操作系统如果宕机了, page cache 缓存里的数据还没来得及写入磁盘文件的话就会丢失数据.")])]),s._v(" "),t("p",[s._v("就上面的几个值, 0 和 2 都是不会写入文件的, 而是暂存到内存缓冲区中(0 是 redo log buffer, 2 是操作系统的 page cache), 因此存在宕机丢失数据的风险.")]),s._v(" "),t("p",[s._v("redo log 写入策略如下图所示, 几种策略对应了不同的 redo log 记录方式.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/202303191907182.png",alt:""}})]),s._v(" "),t("p",[s._v("InnoDB 有一个"),t("strong",[s._v("后台线程, 每隔 1 秒")]),s._v("就会把 redo log buffer 中的日志, 调用操作系统函数 write 写到文件系统的 page cache, 然后调用操作系统函数 fsync 持久化到磁盘文件.")]),s._v(" "),t("p",[s._v("这里 redo log buffer 是 MySQL 进程管理的内存区域, page cache 是操作系统管理的内存区域, redo log buffer 中的数据修改信息会被写入操作系统的缓存 page cache 中. page cache 是操作系统内存的一部分, 主要用于解决内存与磁盘速度差异较大的交互问题, 与 在 CPU 与内存之间设置高速缓存是一个道理.")]),s._v(" "),t("p",[s._v("YFD 配置的 innodb_flush_log_at_trx_commit"),t("strong",[s._v("​ ​")]),s._v("参数值为 1.")]),s._v(" "),t("h4",{attrs:{id:"binlog二进制归档日志"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#binlog二进制归档日志"}},[s._v("#")]),s._v(" binlog二进制归档日志")]),s._v(" "),t("p",[s._v("binlog 二进制日志是"),t("strong",[s._v("逻辑日志")]),s._v(", 记录保存了"),t("strong",[s._v("所有执行过的修改操作语句, 不保存查询操作")]),s._v(". 如果 MySQL 服务意外停止, 可通过 binlog 日志文件排查用户操作或表结构操作, 从而来恢复数据库数据.")]),s._v(" "),t("p",[s._v("启动 binlog 记录功能, 会影响服务器性能, 主要用处是**==恢复数据与主从复制==**.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 查看binlog相关参数")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("show")]),s._v(" variables "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%log_bin%'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("YFD 测试环境的执行结果如下所示:")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/202303191911123.png",alt:""}})]),s._v(" "),t("p",[s._v("几个参数的含义:")]),s._v(" "),t("ul",[t("li",[s._v("log_bin: binlog 日志是否打开状态")]),s._v(" "),t("li",[s._v("log_bin_basename: 是 binlog 日志的基本文件名, 后面会追加标识来表示每一个文件, binlog 日志文件会滚动增加.")]),s._v(" "),t("li",[s._v("log_bin_index: 指定的是 binlog 文件的索引文件, 这个文件管理了所有的 binlog 文件的目录.")]),s._v(" "),t("li",[s._v("sql_log_bin: SQL 语句是否写入 binlog 文件, ON 代表需要写入, OFF 代表不需要写入. 如果想在主库上执行一些操作, 但不复制到 slave 库上, 可以通过修改参数 sql_log_bin 来实现. 比如模拟主从同步复制异常.")])]),s._v(" "),t("p",[s._v("MySQL5.7 版本中, binlog 默认是关闭的, 8.0 版本默认是打开的. 上图中 log_bin 的值是 ON 就代表 binlog 是开启状态.")]),s._v(" "),t("p",[s._v("binlog 日志文件可能会存在多个, 比如:")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("mysql"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("bin"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("000001")]),s._v("\nmysql"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("bin"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("000002")]),s._v("\nmysql"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("bin"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("index")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("这里 mysql-bin.index 文件是 binlog 文件的索引文件, 这个文件管理了所有的 binlog 文件的目录.")]),s._v(" "),t("h5",{attrs:{id:"binlog的日志格式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#binlog的日志格式"}},[s._v("#")]),s._v(" binlog的日志格式")]),s._v(" "),t("p",[s._v("用参数 binlog_format 可以设置 binlog 日志的记录格式, MySQL 支持三种格式类型:")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("STATEMENT")]),s._v(": 基于 SQL 语句的复制, 每一条会修改数据的 SQL 都会记录到 master 机器的 bin-log 中, 这种方式日志量小, 节约 IO 开销, 提高性能, 但是对于一些执行过程中才能确定结果的函数, 比如 UUID(), SYSDATE() 等函数如果随 SQL 同步到 slave 机器去执行, 则结果跟 master 机器执行的不一样.")]),s._v(" "),t("li",[t("strong",[s._v("ROW")]),s._v(": 基于行的复制, 日志中会记录成每一行数据被修改的形式, 然后在 slave 端再对相同的数据进行修改记录下每一行数据修改的细节, 可以解决函数, 存储过程等在 slave 机器的复制问题, 但这种方式日志量较大, 性能不如 Statement. 举个例子, 假设 update 语句更新 100 行数据, Statement 方式就记录这条 update 语句, Row 方式会记录被修改的 100 行数据.")]),s._v(" "),t("li",[t("strong",[s._v("MIXED")]),s._v(": 混合模式复制, 实际就是前两种模式的结合, 在 Mixed 模式下, MySQL 会根据执行的每一条具体的 SQL 语句来区分对待记录的日志形式, 也就是在 Statement 和 Row 之间选择一种, 如果 SQl 里有函数或一些在执行时才知道结果的情况, 会选择 Row, 其它情况选择 Statement, 推荐使用这一种.")])]),s._v(" "),t("h5",{attrs:{id:"binlog写入磁盘机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#binlog写入磁盘机制"}},[s._v("#")]),s._v(" binlog写入磁盘机制")]),s._v(" "),t("p",[s._v("binlog 写入磁盘机制主要通过 "),t("strong",[s._v("sync_binlog")]),s._v(" 参数控制, 默认值是 0.")]),s._v(" "),t("ul",[t("li",[s._v("设置为 0. 表示每次提交事务都只 write 到 page cache, 由系统自行判断什么时候执行 fsync 写入磁盘. 虽然性能得到提升, 但是机器宕机, page cache 里面的 binlog 会丢失. 这与前面 redo log 类似.")]),s._v(" "),t("li",[s._v("设置为 1. 表示每次提交事务都会执行 fsync 写入磁盘, 这种方式最安全.")]),s._v(" "),t("li",[s._v("设置为 N(N>1). 表示每次提交事务都 write 到 page cache, 但累积 N 个事务后才 fsync 写入磁盘, 这种如果机器宕机会丢失 N 个事务的 binlog.")])]),s._v(" "),t("p",[s._v("发生以下任何事件时, "),t("strong",[s._v("binlog 日志文件会重新生成")]),s._v(":")]),s._v(" "),t("ul",[t("li",[s._v("服务器启动或重新启动.")]),s._v(" "),t("li",[s._v("服务器刷新日志, 执行命令 flush logs.")]),s._v(" "),t("li",[s._v("日志文件大小达到 max_binlog_size 值, 默认值为 1GB.")])]),s._v(" "),t("h5",{attrs:{id:"删除binlog日志文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#删除binlog日志文件"}},[s._v("#")]),s._v(" 删除binlog日志文件")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 删除当前的binlog文件")]),s._v("\nreset master"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 删除指定日志文件之前的所有日志文件, 下面这个是删除6之前的所有日志文件, 当前这个文件不删除")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("purge")]),s._v(" master logs "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("to")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'mysql-binlog.000006'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 删除指定日期前的日志索引中binlog日志文件")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("purge")]),s._v(" master logs before "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'2023-01-21 14:00:00'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h5",{attrs:{id:"查看binlog日志文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查看binlog日志文件"}},[s._v("#")]),s._v(" 查看binlog日志文件")]),s._v(" "),t("p",[s._v("可以用 MySQL 自带的命令工具 mysqlbinlog 查看 binlog 日志内容.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 查看bin-log二进制文件(命令行方式, 不用登录mysql)")]),s._v("\nmysqlbinlog "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("--no-defaults -v --base64-output=decode-rows D:/dev/mysql-5.7.25-winx64/data/mysql-binlog.000007 ")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 查看bin-log二进制文件(带查询条件)")]),s._v("\nmysqlbinlog "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('--no-defaults -v --base64-output=decode-rows D:/dev/mysql-5.7.25-winx64/data/mysql-binlog.000007 start-datetime="2023-01-21 00:00:00" stop-datetime="2023-02-01 00:00:00" start-position="5000" stop-position="20000"')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("执行 mysqlbinlog 命令.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("mysqlbinlog "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("--no-defaults -v --base64-output=decode-rows D:/dev/mysql-5.7.25-winx64/data/mysql-binlog.000007")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("查出来的 binlog 日志文件内容如下:")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DELIMITER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# at 4")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#230127 21:13:51 server id 1  end_log_pos 123 CRC32 0x084f390f  Start: binlog v 4, server v 5.7.25-log created 230127 21:13:51 at startup")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Warning: this binlog is either in use or was not closed properly.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ROLLBACK")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# at 123")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#230127 21:13:51 server id 1  end_log_pos 154 CRC32 0x672ba207  Previous-GTIDs")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# [empty]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# at 154")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#230127 21:22:48 server id 1  end_log_pos 219 CRC32 0x8349d010  Anonymous_GTID  last_committed=0        sequence_number=1       rbr_only=yes")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!50718 SET TRANSACTION ISOLATION LEVEL READ COMMITTED*/")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@SESSION.GTID_NEXT")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'ANONYMOUS'")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# at 219")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#230127 21:22:48 server id 1  end_log_pos 291 CRC32 0xbf49de02  Query   thread_id=3     exec_time=0     error_code=0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TIMESTAMP")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1674825768")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.pseudo_thread_id")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.foreign_key_checks")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.sql_auto_is_null")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.unique_checks")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.autocommit")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.sql_mode")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1342177280")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.auto_increment_increment")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.auto_increment_offset")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!\\C utf8 */")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.character_set_client")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("33")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("@"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.collation_connection")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("33")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("@"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.collation_server")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("33")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.lc_time_names")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.collation_database")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DEFAULT")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BEGIN")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# at 291")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#230127 21:22:48 server id 1  end_log_pos 345 CRC32 0xc4ab653e  Table_map: `test`.`account` mapped to number 99")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# at 345")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#230127 21:22:48 server id 1  end_log_pos 413 CRC32 0x54a124bd  Update_rows: table id 99 flags: STMT_END_F")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### UPDATE `test`.`account`")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### WHERE")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("###   @1=1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("###   @2='lilei'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("###   @3=1000")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### SET")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("###   @1=1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("###   @2='lilei'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("###   @3=2000")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# at 413")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#230127 21:22:48 server id 1  end_log_pos 444 CRC32 0x23355595  Xid = 10")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COMMIT")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# at 444")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br")])]),t("p",[s._v("能看到里面有具体执行的修改 SQL 语句以及执行时的相关情况.")]),s._v(" "),t("h5",{attrs:{id:"binlog日志文件恢复数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#binlog日志文件恢复数据"}},[s._v("#")]),s._v(" binlog日志文件恢复数据")]),s._v(" "),t("p",[s._v("用 binlog 日志文件恢复数据其实就是"),t("strong",[s._v("回放执行")]),s._v("之前记录在 binlog 文件里的 SQL, 举一个数据恢复的例子:")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 先执行刷新日志的命令生成一个新的binlog文件mysql-binlog.000008, 后面修改操作日志都会记录在最新的这个文件里")]),s._v("\nflush logs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 执行两条插入语句")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INSERT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INTO")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("test"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("account"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("balance"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VALUES")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'4'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'zhu'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'666'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INSERT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INTO")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("test"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("account"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("balance"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VALUES")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'5'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'zhu1'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'888'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 假设现在误操作执行了一条删除语句把刚新增的两条数据删掉了")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("delete")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" account "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("现在需要恢复被删除的两条数据, 先查看 binlog 日志文件.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("mysqlbinlog "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("--no-defaults -v --base64-output=decode-rows D:/dev/mysql-5.7.25-winx64/data/mysql-binlog.000008")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("文件内容如下:")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@SESSION.GTID_NEXT")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'ANONYMOUS'")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# at 219")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#230127 23:32:24 server id 1  end_log_pos 291 CRC32 0x4528234f  Query   thread_id=5     exec_time=0     error_code=0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TIMESTAMP")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1674833544")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.pseudo_thread_id")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.foreign_key_checks")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.sql_auto_is_null")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.unique_checks")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.autocommit")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.sql_mode")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1342177280")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.auto_increment_increment")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.auto_increment_offset")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!\\C utf8 */")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.character_set_client")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("33")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("@"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.collation_connection")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("33")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("@"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.collation_server")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("33")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.lc_time_names")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.collation_database")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DEFAULT")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BEGIN")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# at 291")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#230127 23:32:24 server id 1  end_log_pos 345 CRC32 0x7482741d  Table_map: `test`.`account` mapped to number 99")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# at 345")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#230127 23:32:24 server id 1  end_log_pos 396 CRC32 0x5e443cf0  Write_rows: table id 99 flags: STMT_END_F")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### INSERT INTO `test`.`account`")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### SET")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("###   @1=4")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("###   @2='zhu'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("###   @3=666")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# at 396")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#230127 23:32:24 server id 1  end_log_pos 427 CRC32 0x8a0d8a3c  Xid = 56")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COMMIT")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# at 427")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#230127 23:32:40 server id 1  end_log_pos 492 CRC32 0x5261a37e  Anonymous_GTID  last_committed=1        sequence_number=2       rbr_only=yes")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!50718 SET TRANSACTION ISOLATION LEVEL READ COMMITTED*/")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@SESSION.GTID_NEXT")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'ANONYMOUS'")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# at 492")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#230127 23:32:40 server id 1  end_log_pos 564 CRC32 0x01086643  Query   thread_id=5     exec_time=0     error_code=0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TIMESTAMP")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1674833560")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BEGIN")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# at 564")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#230127 23:32:40 server id 1  end_log_pos 618 CRC32 0xc26b6719  Table_map: `test`.`account` mapped to number 99")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# at 618")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#230127 23:32:40 server id 1  end_log_pos 670 CRC32 0x8e272176  Write_rows: table id 99 flags: STMT_END_F")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### INSERT INTO `test`.`account`")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### SET")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("###   @1=5")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("###   @2='zhu1'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("###   @3=888")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# at 670")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#230127 23:32:40 server id 1  end_log_pos 701 CRC32 0xb5e63d00  Xid = 58")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COMMIT")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# at 701")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#230127 23:34:23 server id 1  end_log_pos 766 CRC32 0xa0844501  Anonymous_GTID  last_committed=2        sequence_number=3       rbr_only=yes")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!50718 SET TRANSACTION ISOLATION LEVEL READ COMMITTED*/")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@SESSION.GTID_NEXT")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'ANONYMOUS'")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# at 766")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#230127 23:34:23 server id 1  end_log_pos 838 CRC32 0x687bdf88  Query   thread_id=7     exec_time=0     error_code=0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TIMESTAMP")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1674833663")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BEGIN")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# at 838")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#230127 23:34:23 server id 1  end_log_pos 892 CRC32 0x4f7b7d6a  Table_map: `test`.`account` mapped to number 99")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# at 892")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#230127 23:34:23 server id 1  end_log_pos 960 CRC32 0xc47ac777  Delete_rows: table id 99 flags: STMT_END_F")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### DELETE FROM `test`.`account`")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### WHERE")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("###   @1=4")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("###   @2='zhu'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("###   @3=666")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### DELETE FROM `test`.`account`")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### WHERE")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("###   @1=5")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("###   @2='zhu1'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("###   @3=888")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# at 960")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#230127 23:34:23 server id 1  end_log_pos 991 CRC32 0x386699fe  Xid = 65")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COMMIT")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@SESSION.GTID_NEXT")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'AUTOMATIC'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* added by mysqlbinlog */")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DELIMITER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# End of log file")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br"),t("span",{staticClass:"line-number"},[s._v("59")]),t("br"),t("span",{staticClass:"line-number"},[s._v("60")]),t("br"),t("span",{staticClass:"line-number"},[s._v("61")]),t("br"),t("span",{staticClass:"line-number"},[s._v("62")]),t("br"),t("span",{staticClass:"line-number"},[s._v("63")]),t("br"),t("span",{staticClass:"line-number"},[s._v("64")]),t("br"),t("span",{staticClass:"line-number"},[s._v("65")]),t("br"),t("span",{staticClass:"line-number"},[s._v("66")]),t("br"),t("span",{staticClass:"line-number"},[s._v("67")]),t("br"),t("span",{staticClass:"line-number"},[s._v("68")]),t("br"),t("span",{staticClass:"line-number"},[s._v("69")]),t("br"),t("span",{staticClass:"line-number"},[s._v("70")]),t("br"),t("span",{staticClass:"line-number"},[s._v("71")]),t("br"),t("span",{staticClass:"line-number"},[s._v("72")]),t("br"),t("span",{staticClass:"line-number"},[s._v("73")]),t("br"),t("span",{staticClass:"line-number"},[s._v("74")]),t("br"),t("span",{staticClass:"line-number"},[s._v("75")]),t("br"),t("span",{staticClass:"line-number"},[s._v("76")]),t("br")])]),t("p",[s._v("找到两条插入数据的 SQL, 每条 SQL 的上下都有 BEGIN 和 COMMIT, 找到第一条 SQL BEGIN 前面的文件位置标识 at "),t("strong",[s._v("219")]),s._v("(这是文件的位置标识), 再找到第二条 SQL COMMIT 后面的文件位置标识 at "),t("strong",[s._v("701")]),s._v(".")]),s._v(" "),t("p",[s._v("可以根据文件位置标识来恢复数据, 执行如下 SQL:")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("mysqlbinlog  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("--no-defaults --start-position=219 --stop-position=701 --database=test D:/dev/mysql-5.7.25-winx64/data/mysql-binlog.000009 | mysql -uroot -p123456 -v test")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 补充一个根据时间来恢复数据的命令, 找到第一条SQL BEGIN前面的时间戳标记 SET TIMESTAMP=1674833544, 再找到第二条SQL COMMIT后面的时间戳标记 SET TIMESTAMP=1674833663, 转成datetime格式")]),s._v("\nmysqlbinlog  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('--no-defaults --start-datetime="2023-1-27 23:32:24" --stop-datetime="2023-1-27 23:34:23" --database=test D:/dev/mysql-5.7.25-winx64/data/mysql-binlog.000009 | mysql -uroot -p123456 -v test')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("这样被删除数据就被恢复了!")]),s._v(" "),t("p",[s._v("注意: 如果要恢复大量数据, 比如程序员经常说的删库跑路的话题, 假设把数据库所有数据都删除了要怎么恢复了, 如果数据库之前没有备份, 所有的 binlog 日志都在的话, 就从 binlog 第一个文件开始逐个恢复每个 binlog 文件里的数据, 这种一般不太可能, 因为 binlog 日志比较大, 早期的 binlog 文件会定期删除的, 所以一般不可能用 binlog 文件恢复整个数据库的.")]),s._v(" "),t("p",[s._v("一般推荐的是定期做一次全量数据库备份, 那么恢复数据库可以用最近的一次全量备份再加上备份时间点之后的 binlog 来恢复数据.")]),s._v(" "),t("p",[s._v("备份数据库一般可以用 mysqldump 命令工具.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 备份整个数据库")]),s._v("\nmysqldump "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("u root 数据库名"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("备份文件名"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("   \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 备份整个表")]),s._v("\nmysqldump "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("u root 数据库名 表名字"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("备份文件名"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 恢复整个数据库, test为数据库名称, 需要自己先建一个数据库test")]),s._v("\nmysql "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("u root test "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" 备份文件名 \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h4",{attrs:{id:"undo-log回滚日志"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#undo-log回滚日志"}},[s._v("#")]),s._v(" undo log回滚日志")]),s._v(" "),t("p",[s._v("InnoDB 对 "),t("strong",[s._v("undo log 文件")]),s._v("的管理采用段的方式, 也就是"),t("strong",[s._v("回滚段")]),s._v("(rollback segment). 每个回滚段记录了 1024 个 undo log segment, "),t("strong",[s._v("每个事务只会使用一个 undo log segment")]),s._v(".")]),s._v(" "),t("p",[s._v("在 MySQL5.5 的时候, 只有一个回滚段, 那么最大同时支持的事务数量为 1024 个. 在 MySQL 5.6 开始, InnoDB 支持最大 128 个回滚段, 故其支持同时在线的事务限制提高到了 128 * 1024.")]),s._v(" "),t("ul",[t("li",[s._v('innodb_undo_directory: 设置 undo log 文件所在的路径. 该参数的默认值为 "./", 即 InnoDB 数据文件存储位置, 目录下 ibdata1 文件就是 undo log 存储的位置.')]),s._v(" "),t("li",[s._v("innodb_undo_logs: 设置 undo log 文件内部回滚段的个数, 默认值为 128.")]),s._v(" "),t("li",[s._v("innodb_undo_tablespaces: 设置 undo log 文件的数量, 这样回滚段可以较为平均地分布在多个文件中. 设置该参数后, 会在路径 innodb_undo_directory 看到以 undo 为前缀的文件.")])]),s._v(" "),t("h5",{attrs:{id:"undo-log日志什么时候删除"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#undo-log日志什么时候删除"}},[s._v("#")]),s._v(" undo log日志什么时候删除")]),s._v(" "),t("p",[t("strong",[s._v("新增类型的, 在事务提交之后就可以清除掉了")]),s._v(".")]),s._v(" "),t("p",[s._v("修改类型的, 事务提交之后不能立即清除掉, 这些日志会用于 MVCC, 只有当没有事务用到该版本信息时才可以清除.")]),s._v(" "),t("p",[s._v("‍")]),s._v(" "),t("p",[s._v("‍")]),s._v(" "),t("h4",{attrs:{id:"参考资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[s._v("#")]),s._v(" 参考资料")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://segmentfault.com/a/1190000012650596",target:"_blank",rel:"noopener noreferrer"}},[s._v("MySQL-InnoDB-MVCC多版本并发控制"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"http://xiaorui.cc/2016/12/08/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E5%BB%BA%E8%AE%AEinnodb%E4%BD%BF%E7%94%A8%E4%BA%BF%E7%BA%A7%E5%A4%A7%E8%A1%A8/",target:"_blank",rel:"noopener noreferrer"}},[s._v("为什么不建议innodb使用亿级大表 | 峰云就她了"),t("OutboundLink")],1)])]),s._v(" "),t("p",[s._v("‍")])])}),[],!1,null,null,null);t.default=e.exports}}]);