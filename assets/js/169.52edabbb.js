(window.webpackJsonp=window.webpackJsonp||[]).push([[169],{497:function(s,t,a){"use strict";a.r(t);var n=a(4),_=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"_5-虚拟机方法调用与指令执行引擎"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-虚拟机方法调用与指令执行引擎"}},[s._v("#")]),s._v(" 5.虚拟机方法调用与指令执行引擎")]),s._v(" "),t("p",[s._v("执行引擎是 JVM 最核心的组成部件之一. 虚拟机的执行引擎由自己实现, 所以可以"),t("strong",[s._v("自行定制指令集")]),s._v("与执行引擎的结构体系, 并且能够执行那些不被硬件直接支持的指令集格式.")]),s._v(" "),t("p",[s._v("所有 JVM 的执行引擎都是一致的: "),t("strong",[s._v("输入的是字节码文件, 处理过程是字节码解析的等效过程, 输出的是执行结果")]),s._v(". 本节将主要从概念模型的角度分析"),t("strong",[s._v("虚拟机的方法调用和字节码执行")]),s._v(".")]),s._v(" "),t("h4",{attrs:{id:"字节码指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字节码指令"}},[s._v("#")]),s._v(" 字节码指令")]),s._v(" "),t("h5",{attrs:{id:"_1-基于栈的指令集和基于寄存器的指令集"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-基于栈的指令集和基于寄存器的指令集"}},[s._v("#")]),s._v(" 1.基于栈的指令集和基于寄存器的指令集")]),s._v(" "),t("p",[s._v("Java 编译器输出的"),t("strong",[s._v("指令流")]),s._v(", 基本上是一种"),t("strong",[s._v("基于栈的指令集架构")]),s._v(", "),t("strong",[s._v("依赖操作数栈进行工作")]),s._v(". 与之相对应的另一套常用的指令集架构是"),t("strong",[s._v("基于寄存器的指令集")]),s._v(", "),t("strong",[s._v("则是依赖寄存器进行工作")]),s._v(". 操作数栈存在于"),t("strong",[s._v("栈帧")]),s._v("之中.")]),s._v(" "),t("p",[t("strong",[s._v("基于栈的指令集和基于寄存器的指令集有何不同?")])]),s._v(" "),t("p",[s._v("举个例子, 分别使用这两种指令计算 1 + 1, "),t("strong",[s._v("基于栈的指令集如下:")])]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[s._v("iconst_1\niconst_1\niadd\nistore_0\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("两条 iconst_1 指令连续把两个常量 1 "),t("strong",[s._v("压入栈")]),s._v("后, iadd 指令把栈顶的两个值"),t("strong",[s._v("出栈, 相加")]),s._v(", 然后将结果"),t("strong",[s._v("放回栈顶")]),s._v(", 最后 istore_0 把栈顶的值放到局部变量表中的第 0 个 Slot 中.")]),s._v(" "),t("p",[s._v("对于上面的操作, "),t("strong",[s._v("基于寄存器的指令集大致如下:")])]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[s._v("mov eax"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nadd eax"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("mov 指令把 EAX 寄存器的值设置为 1, 然后 add 指令再把这个值加 1, 将结果就"),t("strong",[s._v("保存在 EAX 寄存器")]),s._v("里面.")]),s._v(" "),t("p",[t("strong",[s._v("基于栈的指令集主要的优点就是可移植, 寄存器是由硬件直接提供, 程序直接依赖这些硬件寄存器则不可避免地要受到硬件的约束. ​")]),s._v("栈架构的指令集还有一些其他的优点, 如代码相对更加紧凑, 编译器实现更加简单等. 基于栈的指令集的主要"),t("strong",[s._v("缺点")]),s._v("是执行速度相对来说会稍微"),t("strong",[s._v("慢")]),s._v("一些.")]),s._v(" "),t("p",[s._v("JVM 的"),t("strong",[s._v("指令")]),s._v("由一个字节长度的, 代表着某种特定操作含义的"),t("strong",[s._v("数字")]),s._v("(称为"),t("strong",[s._v("操作码")]),s._v(", Opcode) 以及跟随其后的零至多个代表此操作所需参数(称为"),t("strong",[s._v("操作数")]),s._v(", Operands) 构成. 由于 JVM 采用"),t("strong",[s._v("面向操作数栈")]),s._v("而不是寄存器的架构, 所以许多指令都不包含操作数, 只有一个"),t("strong",[s._v("操作码")]),s._v(".")]),s._v(" "),t("p",[s._v("在 JVM 的指令集中, 大多数的指令都包含了其操作所对应的"),t("strong",[s._v("数据类型信息")]),s._v(", 因此看指令就大概知道知道的意思. 例如, iload 指令用于从局部变量表中加载 int 型的数据到操作数栈中, 而 fload 指令加载的则是 float 类型的数据. 这两条指令的操作在虚拟机内部可能会是由同一段代码来实现的, 但在 Class 文件中它们必须拥有各自独立的操作码.")]),s._v(" "),t("p",[s._v("对于大部分与数据类型相关的字节码指令, 它们的"),t("strong",[s._v("操作码助记符")]),s._v("中都有特殊的字符来表明专门为哪种数据类型服务: "),t("strong",[s._v("i 代表对 int 类型的数据操作, l 代表 long, s 代表 short, b 代表 byte, c 代表 char, f 代表 float, d 代表 double, a 代表 reference. ​")]),s._v("也有一些指令的助记符中没有明确地指明操作类型的字母, 如 arraylength 指令, 它没有代表数据类型的特殊字符, 但操作数永远只能是一个数组类型的对象. 还有另外一些指令, 如无条件跳转指令 goto 则是与数据类型无关的.")]),s._v(" "),t("p",[s._v("在处理 boolean, byte, short 和 char 类型的数组时, 也会"),t("strong",[s._v("转换")]),s._v("为使用对应的 "),t("strong",[s._v("int 类型")]),s._v("的字节码指令来处理. 因此大多数对于 boolean, byte, short 和 char 类型数据的操作, "),t("strong",[s._v("实际上都是使用相应的 int 类型作为运算类型")]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"_2-指令详解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-指令详解"}},[s._v("#")]),s._v(" 2.指令详解")]),s._v(" "),t("h6",{attrs:{id:"_1-加载和存储指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-加载和存储指令"}},[s._v("#")]),s._v(" (1)加载和存储指令")]),s._v(" "),t("p",[t("strong",[s._v("加载和存储")]),s._v("指令用于将数据在栈帧中的"),t("strong",[s._v("局部变量表")]),s._v("和"),t("strong",[s._v("操作数栈")]),s._v("之间来回传输, 这类指令包括如下内容(未列全).")]),s._v(" "),t("ul",[t("li",[s._v("将一个"),t("strong",[s._v("局部变量")]),s._v("加载到操作栈: iload, lload, fload, dload, aload.")]),s._v(" "),t("li",[s._v("将一个"),t("strong",[s._v("数值")]),s._v("从操作数栈存储到局部变量表: istore, lstore, fstore, dstore, astore.")]),s._v(" "),t("li",[s._v("将一个"),t("strong",[s._v("常")]),s._v("量加载到操作数栈: bipush, sipush, ldc, ldc_w, ldc2_w, aconst_null, iconst_m1.")]),s._v(" "),t("li",[s._v("扩充局部变量的访问索引的指令: wide.")])]),s._v(" "),t("p",[s._v("存储数据的操作数栈和局部变量表主要就是由"),t("strong",[s._v("加载和存储指令")]),s._v("进行操作, 除此之外, 还有少量指令, 如访问对象的字段或数组元素的指令也会向操作数栈传输数据.")]),s._v(" "),t("h6",{attrs:{id:"_2-运算指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-运算指令"}},[s._v("#")]),s._v(" (2)运算指令")]),s._v(" "),t("p",[s._v("运算指令用于"),t("strong",[s._v("对两个操作数栈上的值")]),s._v("进行某种特定运算, 并把结果重新"),t("strong",[s._v("存入到操作栈顶")]),s._v(". 大体上运算指令可以分为两种: 对"),t("strong",[s._v("整型")]),s._v("数据进行运算的指令与对"),t("strong",[s._v("浮点型")]),s._v("数据进行运算的指令. 无论哪种算术指令, 都使用 JVM 的数据类型, 由于没有直接支持 byte, short, char 和 boolean 类型的算术指令, 对于这类数据的运算, 应"),t("strong",[s._v("使用操作 int 类型")]),s._v("的指令代替. 整数与浮点数的算术指令在溢出和被零除的时候也有各自不同的行为表现, 所有的算术指令如下.")]),s._v(" "),t("ul",[t("li",[s._v("加法指令: iadd, ladd, fadd, dadd.")]),s._v(" "),t("li",[s._v("减法指令: isub, lsub, fsub, dsub.")]),s._v(" "),t("li",[s._v("乘法指令: imul, lmul, fmul, dmul.")]),s._v(" "),t("li",[s._v("除法指令: idiv, ldiv, fdiv, ddiv.")]),s._v(" "),t("li",[s._v("求余指令: irem, lrem, frem, drem.")]),s._v(" "),t("li",[s._v("取反指令: ineg, lneg, fneg, dneg.")]),s._v(" "),t("li",[s._v("位移指令: ishl, ishr, iushr, lshl, lshr, lushr.")]),s._v(" "),t("li",[s._v("按位或指令: ior, lor.")]),s._v(" "),t("li",[s._v("按位与指令: iand, land.")]),s._v(" "),t("li",[s._v("按位异或指令: ixor, lxor.")]),s._v(" "),t("li",[s._v("局部变量自增指令: iinc.")]),s._v(" "),t("li",[s._v("比较指令: dcmpg, dcmpl, fcmpg, fcmpl, lcmp.")])]),s._v(" "),t("p",[s._v("JVM 要求在进行浮点数运算时, 所有的运算结果都必须舍入到适当的精度, 非精确的结果必须"),t("strong",[s._v("舍入")]),s._v("为可被表示的最接近的精确值.")]),s._v(" "),t("h6",{attrs:{id:"_3-类型转换指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-类型转换指令"}},[s._v("#")]),s._v(" (3)类型转换指令")]),s._v(" "),t("p",[t("strong",[s._v("类型转换指令")]),s._v("可以将两种不同的"),t("strong",[s._v("数值")]),s._v("类型进行相互转换, 这些转换操作一般用于实现用户代码中的显式类型转换操作, 或者用来处理字节码指令集中数据类型相关指令无法与数据类型一一对应的问题.")]),s._v(" "),t("ul",[t("li",[s._v("int 类型到 long, float 或者 double 类型.")]),s._v(" "),t("li",[s._v("long 类型到 float, double 类型.")]),s._v(" "),t("li",[s._v("float 类型到 double 类型.")])]),s._v(" "),t("p",[s._v("尽管数据类型"),t("strong",[s._v("窄化转换")]),s._v("可能会发生上限溢出, 下限溢出和精度丢失等情况, 但是 Java 虚拟机规范中明确规定数值类型的窄化转换指令永远"),t("strong",[s._v("不可能")]),s._v("导致虚拟机抛出运行时异常.")]),s._v(" "),t("h6",{attrs:{id:"_4-对象创建与访问指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-对象创建与访问指令"}},[s._v("#")]),s._v(" (4)对象创建与访问指令")]),s._v(" "),t("p",[s._v("虽然类实例和数组都是"),t("strong",[s._v("对象")]),s._v(", 但 JVM "),t("strong",[s._v("对类实例和数组的创建与操作使用了不同的字节码指令")]),s._v(", 即数组和普通类型创建过程是不同的. 对象创建后, 就可以通过对象访问指令获取对象实例或者数组实例中的字段或者数组元素, 这些指令如下:")]),s._v(" "),t("ul",[t("li",[s._v("创建"),t("strong",[s._v("类实例")]),s._v("的指令: "),t("strong",[s._v("new")]),s._v(".")]),s._v(" "),t("li",[s._v("创建"),t("strong",[s._v("数组")]),s._v("的指令: newarray, anewarray, multianewarray.")]),s._v(" "),t("li",[s._v("访问类字段(static 字段, 或者成为类变量) 和实例字段(非 static 字段, 或者成为实例变量) 的指令: getfield, putfield, getstatic, putstatic.")]),s._v(" "),t("li",[s._v("把一个数组元素加载到操作数栈的指令: baload, caload, saload, iaload, laload, faload, daload, aaload.")]),s._v(" "),t("li",[s._v("将一个操作数栈的值存储到数组元素中的指令: bastore, castore, sastore, iastore, fastore, dastore, aastore.")]),s._v(" "),t("li",[s._v("取数组长度的指令: arraylength.")]),s._v(" "),t("li",[s._v("检查类实例类型的指令: instanceof, checkcast.")])]),s._v(" "),t("h6",{attrs:{id:"_5-操作数栈管理指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-操作数栈管理指令"}},[s._v("#")]),s._v(" (5)操作数栈管理指令")]),s._v(" "),t("p",[s._v("如同操作一个普通数据结构中的堆栈那样, JVM 提供了一些用于"),t("strong",[s._v("直接操作操作数栈")]),s._v("的指令, 包括:")]),s._v(" "),t("ul",[t("li",[s._v("将操作数栈的栈顶一个或两个元素"),t("strong",[s._v("出栈")]),s._v(": pop, pop2.")]),s._v(" "),t("li",[s._v("复制栈顶一个或两个数值并将复制值或双份的复制重新压入栈顶: dup, dup2, dup_x1, dup2_x1, dup_x2, dup2_x2.")]),s._v(" "),t("li",[s._v("将栈最顶端的两个数值"),t("strong",[s._v("互换")]),s._v(": swap.")])]),s._v(" "),t("h6",{attrs:{id:"_6-控制转移指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-控制转移指令"}},[s._v("#")]),s._v(" (6)控制转移指令")]),s._v(" "),t("p",[s._v("控制转移指令可以让虚拟机有条件或无条件地从指定的位置指令而不是控制转移指令的下一条指令继续执行程序. 从概念模型上理解, 可以认为控制转移指令就是在有条件或无条件地"),t("strong",[s._v("修改 PC 寄存器")]),s._v("的值. 控制转移指令如下.")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("条件")]),s._v("分支: ifeq, iflt, ifle, ifne, ifgt, ifge, ifnull, ifnonnull, if_icmpeq, if_icmpne, if_icmplt, if_icmpgt, if_icmple, if_icmpge, if_acmpeq 和 if_acmpne.")]),s._v(" "),t("li",[t("strong",[s._v("复合条件")]),s._v("分支: tableswitch, lookupswitch.")]),s._v(" "),t("li",[t("strong",[s._v("无条件")]),s._v("分支: goto, goto_w, jsr, jsr_w, ret.")])]),s._v(" "),t("h6",{attrs:{id:"_7-方法调用指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-方法调用指令"}},[s._v("#")]),s._v(" (7)方法调用指令")]),s._v(" "),t("p",[t("strong",[s._v("方法调用")]),s._v("有以下指令.")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("invokevirtual")]),s._v(": 用于调用对象的"),t("strong",[s._v("实例方法")]),s._v(", 根据对象的实际类型进行分派(虚方法分派), 这也是 Java 中最常见的方法分派方式.")]),s._v(" "),t("li",[t("strong",[s._v("invokeinterface")]),s._v(": 用于调用"),t("strong",[s._v("接口方法")]),s._v(", 它会在运行时寻找"),t("strong",[s._v("实现了这个接口方法")]),s._v("的对象, 找出适合的方法进行调用.")]),s._v(" "),t("li",[t("strong",[s._v("invokespecial")]),s._v(": 用于调用一些需要"),t("strong",[s._v("特殊处理的实例方法")]),s._v(", 包括实例初始化方法, 私有方法和父类方法.")]),s._v(" "),t("li",[t("strong",[s._v("invokestatic")]),s._v(": 用于调用"),t("strong",[s._v("静态方法")]),s._v("("),t("strong",[s._v("static")]),s._v(" 方法).")]),s._v(" "),t("li",[t("strong",[s._v("invokedynamic")]),s._v(": 用于在运行时"),t("strong",[s._v("动态解析")]),s._v("出调用点限定符所引用的方法, 并执行该方法, 前面 4 条调用指令的分派逻辑都固化在 Java 虚拟机内部, 而 invokedynamic 指令的分派逻辑是由用户所设定的引导方法决定的.")])]),s._v(" "),t("h6",{attrs:{id:"_8-异常处理指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-异常处理指令"}},[s._v("#")]),s._v(" (8)异常处理指令")]),s._v(" "),t("p",[s._v("在 Java 程序中显式抛出异常的操作(throw 语句) 都由 "),t("strong",[s._v("athrow")]),s._v(" 指令来实现. 除了用 throw 语句显式抛出异常情况之外, Java 虚拟机规范还规定了许多运行时异常会在其他 JVM 指令检测到异常状况时自动抛出.")]),s._v(" "),t("h6",{attrs:{id:"_9-同步指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-同步指令"}},[s._v("#")]),s._v(" (9)同步指令")]),s._v(" "),t("p",[s._v("Java 虚拟机可以支持"),t("strong",[s._v("方法级")]),s._v("(非类级)的同步和方法内部一段指令序列的同步, 这两种同步结构都是使用"),t("strong",[s._v("管程")]),s._v("(Monitor) 来支持的.")]),s._v(" "),t("p",[t("strong",[s._v("同步一段指令集序列")]),s._v("通常是由 Java 语言中的 "),t("strong",[s._v("synchronized")]),s._v(" 语句块来表示的, JVM 的指令集中有 "),t("strong",[s._v("==monitorenter 和 monitorexit 两条指令来支持 synchronized 关键字的语义==")]),s._v(", 正确实现 synchronized 关键字需要 javac 编译器与 JVM 两者共同协作支持.")]),s._v(" "),t("p",[s._v("编译器必须确保无论方法通过何种方式完成, 方法中调用过的"),t("strong",[s._v("每条 monitorenter 指令都必须执行其对应的 monitorexit 指令")]),s._v(", 而无论这个方法是正常结束还是异常结束.")]),s._v(" "),t("h4",{attrs:{id:"运行时栈帧结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#运行时栈帧结构"}},[s._v("#")]),s._v(" 运行时栈帧结构")]),s._v(" "),t("p",[t("strong",[s._v("栈帧(Stack Frame)")]),s._v(" 是用于支持虚拟机"),t("strong",[s._v("方法调用与执行")]),s._v("的数据结构, 它是虚拟机运行时数据区中"),t("strong",[s._v("虚拟机栈的栈元素")]),s._v(". 每一个"),t("strong",[s._v("方法")]),s._v("从调用开始至执行完成的过程, 都对应着一个"),t("strong",[s._v("栈帧在虚拟机栈里面从入栈到出栈")]),s._v("的过程. "),t("strong",[s._v("栈帧")]),s._v("结构如下图所示.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220514163834398.png",alt:""}})]),s._v(" "),t("p",[s._v("每一个栈帧都存储了方法的"),t("strong",[s._v("局部变量表, 操作数栈, 动态连接, 方法返回地址")]),s._v("和一些额外的"),t("strong",[s._v("附加信息")]),s._v(". 一个栈帧需要分配多少内存, 不会受到程序运行期变量数据的影响, 而仅仅取决于具体的虚拟机实现.")]),s._v(" "),t("p",[s._v("在活动线程中, 只有位于"),t("strong",[s._v("栈顶")]),s._v("的栈帧才是有效的, 称为"),t("strong",[s._v("当前栈帧")]),s._v(", 与这个栈帧相关联的方法称为"),t("strong",[s._v("当前方法")]),s._v(".")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220522150551523.png",alt:""}})]),s._v(" "),t("p",[s._v("如上图所示两个"),t("strong",[s._v("栈帧")]),s._v(", 在概念模型中, 一个活动线程中两个"),t("strong",[s._v("栈帧")]),s._v("是相互"),t("strong",[s._v("独立")]),s._v("的. 但大多数虚拟机实现都会做一些"),t("strong",[s._v("优化")]),s._v("处理: 让下一个栈帧的"),t("strong",[s._v("部分操作数栈")]),s._v("与上一个栈帧的部分"),t("strong",[s._v("局部变量表")]),s._v("重叠在一起, 这样的好处是方法调用时可以"),t("strong",[s._v("共享一部分数据")]),s._v(", 而无须进行额外的参数复制传递.")]),s._v(" "),t("h5",{attrs:{id:"_1-局部变量表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-局部变量表"}},[s._v("#")]),s._v(" 1.局部变量表")]),s._v(" "),t("p",[t("strong",[s._v("局部变量表")]),s._v("是一组"),t("strong",[s._v("变量值")]),s._v("存储空间, 用于"),t("strong",[s._v("存放方法参数和方法内定义的局部变量")]),s._v(".")]),s._v(" "),t("p",[s._v("局部变量表的容量以"),t("strong",[s._v("变量槽")]),s._v("(Variable Slot) 为最小单位. 一个 Slot 可以存放一个 "),t("strong",[s._v("32 位")]),s._v("以内(boolean, byte, char, short, int, float, reference 等) 的数据类型, "),t("strong",[s._v("reference 类型")]),s._v("表示一个"),t("strong",[s._v("对象实例")]),s._v("的引用, 用于"),t("strong",[s._v("指向对象的地址")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("虚拟机通过索引定位的方式使用局部变量表")]),s._v(", 索引值的范围从 0 开始至局部变量表最大的 Slot 数量.")]),s._v(" "),t("p",[t("strong",[s._v("为了节省栈帧空间, 局部变量 Slot 可以重用")]),s._v(", 方法体中定义的变量, 其作用域并不一定会覆盖整个方法体. 如果当前字节码 PC 计数器的值超出了某个变量的作用域, 那么这个变量的 Slot 就可以交给其他变量使用.")]),s._v(" "),t("p",[s._v("注意: "),t("strong",[s._v("局部变量")]),s._v('不像类变量具有 "准备阶段", 所以必须'),t("strong",[s._v("初始化")]),s._v(". 没有赋初始值是不能使用的.")]),s._v(" "),t("h5",{attrs:{id:"_2-操作数栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-操作数栈"}},[s._v("#")]),s._v(" 2.操作数栈")]),s._v(" "),t("p",[t("strong",[s._v('JVM 的解释执行引擎是 "基于栈的执行引擎", 这里的 "栈" 就是指 "操作数栈".')])]),s._v(" "),t("p",[t("strong",[s._v("操作数栈(Operand Stack)"),t("strong",[s._v("​"),t("strong",[t("strong",[s._v("是一个")])]),s._v("​")]),s._v("后进先出栈")]),s._v(". 当一个方法执行开始时, 这个方法的操作数栈是"),t("strong",[s._v("空")]),s._v("的, 在方法执行计算过程中, 会有各种"),t("strong",[s._v("字节码")]),s._v("指令往操作数栈中"),t("strong",[s._v("写入和提取内容")]),s._v(", 也就是 "),t("strong",[s._v("出栈/入栈")]),s._v(" 操作.")]),s._v(" "),t("h5",{attrs:{id:"_3-动态连接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-动态连接"}},[s._v("#")]),s._v(" 3.动态连接")]),s._v(" "),t("p",[s._v("每个"),t("strong",[s._v("栈帧")]),s._v("都包含一个"),t("strong",[s._v("指向运行时常量池")]),s._v("中这个"),t("strong",[s._v("栈帧该所对应方法的引用")]),s._v(", 持有这个引用是为了支持方法调用过程中的"),t("strong",[s._v("动态连接")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("字节码中方法调用指令是以常量池中的指向方法的符号引用")]),s._v("为参数的, 有一部分"),t("strong",[s._v("符号引用")]),s._v("会在类加载阶段或第一次使用的时候转化为"),t("strong",[s._v("直接引用")]),s._v(", 这种转化称为"),t("strong",[s._v("静态解析")]),s._v(", 另外一部分在每次的运行期间转化为直接引用, 这部分称为"),t("strong",[s._v("动态连接")]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"_4-方法返回地址"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-方法返回地址"}},[s._v("#")]),s._v(" 4.方法返回地址")]),s._v(" "),t("p",[s._v("当一个方法被执行后, 有两种方式退出这个方法:")]),s._v(" "),t("ul",[t("li",[s._v("第一种是执行引擎遇到任意一个方法返回的字节码指令, 这种退出方法的方式称为"),t("strong",[s._v("正常完成出口")]),s._v(".")]),s._v(" "),t("li",[s._v("另外一种是在方法执行过程中遇到了异常, 并且这个异常没有在方法体内得到处理, 即本方法异常处理表中没有匹配的异常处理器, 这就会导致方法退出, 这种退出方式称为"),t("strong",[s._v("异常完成出口")]),s._v(". 注意: 这种退出方式"),t("strong",[s._v("不会")]),s._v("给上层调用者产生任何返回值.")])]),s._v(" "),t("p",[t("strong",[s._v("无论采用何种退出方式, 在方法退出后, 都需要返回到方法被调用的位置, 程序才能继续执行")]),s._v(", 方法返回时可能需要在"),t("strong",[s._v("栈帧")]),s._v("中保存一些信息, 用来帮助恢复它的"),t("strong",[s._v("上层方法")]),s._v("的执行状态.")]),s._v(" "),t("p",[s._v("方法"),t("strong",[s._v("退出")]),s._v("的过程实际上等同于把"),t("strong",[s._v("当前栈帧出栈")]),s._v(", 因此退出时可能执行的操作有: 恢复上层方法的局部变量表和操作数栈, 把返回值(如果有)压入调用者栈帧的操作数栈中, 调整 PC 计数器的值以指向方法调用指令后面的一条指令等.")]),s._v(" "),t("h5",{attrs:{id:"_5-附加信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-附加信息"}},[s._v("#")]),s._v(" 5.附加信息")]),s._v(" "),t("p",[s._v("虚拟机规范允许虚拟机实现向栈帧中添加一些自定义的附加信息, 例如与调试相关的信息等.")]),s._v(" "),t("h4",{attrs:{id:"方法调用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法调用"}},[s._v("#")]),s._v(" 方法调用")]),s._v(" "),t("p",[s._v("在程序运行时, 进行方法调用是最普遍, 最频繁的操作. 虚拟机如何调用方法?")]),s._v(" "),t("p",[t("strong",[s._v("方法调用")]),s._v("阶段的目的: "),t("strong",[s._v("确定被调用方法的版本(哪一个方法), 不涉及方法内部的具体运行过程")]),s._v(",")]),s._v(" "),t("p",[t("strong",[s._v("一切方法调用在 Class 文件里存储的都只是符号引用, 这是需要在类加载期间或者是运行期间, 才能确定为方法在实际运行时内存中的入口地址(相当于之前说的直接引用)")]),s._v(".")]),s._v(" "),t("p",[s._v("JVM 进行方法调用的相关"),t("strong",[s._v("操作指令")]),s._v("参考前面.")]),s._v(" "),t("h5",{attrs:{id:"_1-静态解析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-静态解析"}},[s._v("#")]),s._v(" 1.静态解析")]),s._v(" "),t("p",[t("strong",[s._v("静态方法和私有方法")]),s._v('等这种在 "'),t("strong",[s._v("编译期可知, 运行期不可变")]),s._v('" 的方法, 在类加载的'),t("strong",[s._v("解析阶段")]),s._v("时就会将其"),t("strong",[s._v("符号引用")]),s._v("转化为"),t("strong",[s._v("直接引用(入口地址)")]),s._v('. 这类方法的调用称为 "'),t("strong",[s._v("解析(Resolution)")]),s._v('".')]),s._v(" "),t("p",[s._v("符合这种条件的有"),t("strong",[s._v("静态方法, 私有方法, 实例构造器, 父类方法")]),s._v("等 4 类, 这些方法称之为"),t("strong",[s._v("非虚方法")]),s._v(". 这些方法类加载时就可以"),t("strong",[s._v("确定入口地址")]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"_2-分派"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-分派"}},[s._v("#")]),s._v(" 2.分派")]),s._v(" "),t("p",[t("strong",[s._v('分派调用过程将会揭示多态性特征的一些最基本的体现, 如"重载"和"重写"在 JVM 中是如何实现的.')])]),s._v(" "),t("h6",{attrs:{id:"_1-静态分派"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-静态分派"}},[s._v("#")]),s._v(" (1)静态分派")]),s._v(" "),t("p",[s._v("所有依赖"),t("strong",[s._v("静态类型")]),s._v("来定位方法执行版本的分派动作, 都称为"),t("strong",[s._v("静态分派")]),s._v(". 静态分派发生在"),t("strong",[s._v("编译")]),s._v("阶段. "),t("strong",[s._v("静态分派")]),s._v("最典型的应用就是"),t("strong",[s._v("方法重载")]),s._v(".")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StaticDispatch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("abstract")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Human")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Man")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Human")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Woman")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Human")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sayhello")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Human")]),s._v(" guy"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Human guy"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sayhello")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Man")]),s._v(" guy"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Man guy"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sayhello")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Woman")]),s._v(" guy"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Woman guy"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Human")]),s._v(" man "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Man")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Human")]),s._v(" woman "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Woman")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StaticDispatch")]),s._v(" staticDispatch "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StaticDispatch")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        staticDispatch"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sayhello")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("man"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Human guy")]),s._v("\n        staticDispatch"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sayhello")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("woman"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Human guy")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br")])]),t("p",[s._v("运行结果:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Human")]),s._v(" guy\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Human")]),s._v(" guy\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("为什么会出现这样的结果呢?")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Human")]),s._v(" man "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Man")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("其中 Human 称为变量的"),t("strong",[s._v("静态类型(Static Type)")]),s._v(", Man 称为变量的"),t("strong",[s._v("实际类型(动态类型)(Actual Type)")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("两者的区别是")]),s._v(": 静态类型在"),t("strong",[s._v("编译器")]),s._v("可知, 而实际类型到"),t("strong",[s._v("运行期")]),s._v("才能确定.")]),s._v(" "),t("p",[s._v("在重载时通过参数的"),t("strong",[s._v("静态类型")]),s._v("而不是实际类型作为判定依据, 因此在编译阶段, Javac 编译器会根据"),t("strong",[s._v("参数的静态类型")]),s._v("决定使用"),t("strong",[s._v("哪个重载版本")]),s._v(". 使用哪个重载版本, 就完全取决于"),t("strong",[s._v("传入参数的数量和数据类型")]),s._v(".")]),s._v(" "),t("p",[s._v("所以选择了 sayhello(Human) 作为调用目标, 并把这个方法的符号引用写到 main() 方法里的两条 invokevirtual 指令的参数中.")]),s._v(" "),t("h6",{attrs:{id:"_2-动态分派"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-动态分派"}},[s._v("#")]),s._v(" (2)动态分派")]),s._v(" "),t("p",[s._v("在"),t("strong",[s._v("运行期")]),s._v("根据"),t("strong",[s._v("实际类")]),s._v("型确定方法执行"),t("strong",[s._v("版本")]),s._v("的分派过程称为"),t("strong",[s._v("动态分派")]),s._v(". 最典型的应用就是"),t("strong",[s._v("方法覆写")]),s._v(".")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("DynamicDisptch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("abstract")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Human")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("abstract")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sayhello")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Man")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Human")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sayhello")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"man"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Woman")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Human")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sayhello")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"woman"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Human")]),s._v(" man "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Man")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Human")]),s._v(" woman "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Woman")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        man"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sayhello")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        woman"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sayhello")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 动态类型变为Woman")]),s._v("\n        man "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Woman")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        man"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sayhello")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br")])]),t("p",[s._v("运行结果:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[s._v("man\nwoman\nwoman\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h6",{attrs:{id:"_3-动态分派的实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-动态分派的实现"}},[s._v("#")]),s._v(" (3)动态分派的实现")]),s._v(" "),t("p",[s._v("由于"),t("strong",[s._v("动态分派")]),s._v("是非常频繁的动作, 而动态分派在方法版本选择过程中又需要在方法元数据中搜索合适的目标方法, 虚拟机实现出于性能的考虑, 通常不直接进行频繁的搜索, 而是采用"),t("strong",[s._v("优化方法")]),s._v(".")]),s._v(" "),t("p",[s._v('其中一种"稳定优化"手段是: 在类的方法区中建立一个'),t("strong",[s._v("虚方法表")]),s._v(", 也称 vtable, 与此对应也存在"),t("strong",[s._v("接口方法表")]),s._v(", 也称 itable. "),t("strong",[s._v("使用虚方法表索引来代替元数据查找以提高性能. 其原理与 C++ 的虚函数表类似")]),s._v(".")]),s._v(" "),t("p",[s._v("虚方法表中存放的是各个方法的"),t("strong",[s._v("实际入口地址")]),s._v(". 如果某个方法在子类中没有被重写, 那子类的虚方法表里面的地址入口和父类中该方法相同, 都指向"),t("strong",[s._v("父类的实现入口")]),s._v(". "),t("strong",[s._v("虚方法表一般在类加载的连接阶段进行初始化")]),s._v(".")]),s._v(" "),t("h6",{attrs:{id:"_4-单分派和多分派"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-单分派和多分派"}},[s._v("#")]),s._v(" (4)单分派和多分派")]),s._v(" "),t("p",[s._v("方法的接收者, 方法的参数都可以称为方法的宗量. 根据分批基于多少种宗量, 可以将分派划分为单分派和多分派. "),t("strong",[s._v("单分派是根据一个宗量对目标方法进行选择的, 多分派是根据多于一个的宗量对目标方法进行选择的.")])]),s._v(" "),t("p",[s._v("Java 在进行静态分派时, 选择目标方法要依据两点: 一是变量的静态类型是哪个类型, 二是方法参数是什么类型. 因为要根据两个宗量进行选择, 所以 Java 的"),t("strong",[s._v("静态分派")]),s._v("属于多分派类型.")]),s._v(" "),t("p",[s._v("运行时阶段的动态分派过程, 由于编译器已经确定了目标方法的签名(包括方法参数), 运行时虚拟机只需要确定方法的接收者的实际类型, 就可以分派. 因为是根据一个宗量作为选择依据, 所以 Java 语言的"),t("strong",[s._v("动态分派")]),s._v("属于单分派类型.")]),s._v(" "),t("p",[s._v("‍")])])}),[],!1,null,null,null);t.default=_.exports}}]);