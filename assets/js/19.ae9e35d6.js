(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{372:function(t,s,a){"use strict";a.r(s);var n=a(7),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"_10-csapp🌟"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-csapp🌟"}},[t._v("#")]),t._v(" 10.CSAPP🌟")]),t._v(" "),s("h3",{attrs:{id:"_1-计算机系统漫游"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-计算机系统漫游"}},[t._v("#")]),t._v(" 1.计算机系统漫游")]),t._v(" "),s("p",[s("strong",[t._v("计算机系统")]),t._v("是由硬件和系统软件组成的, 它们共同工作来运行应用程序. 虽然系统的具体实现方式随着时间不断变化, 但是系统内在的概念却没有改变. 所有计算机系统都有相似的硬件和软件组件, 它们又执行着相似的功能.")]),t._v(" "),s("p",[t._v("在 Kernighan 和 Ritchie 的关于 C 编程语言的经典教材中, 他们通过下面所示的 hello 程序来向读者介绍 C. 尽管 hello 程序非常简单, 但是为了让它实现运行, 系统的每个主要组成部分都需要协调工作. 从某种意义上来说, "),s("strong",[t._v("本书的目的就是要帮助你了解当你在系统上执行 hello 程序时, 系统发生了什么以及为什么会这样")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello, world\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("本书通过"),s("strong",[t._v("跟踪 hello 程序的生命周期")]),t._v("来开始对系统的学习, 从它被程序员创建开始, 到在系统上运行, 输出简单的消息, 然后终止. 后面将沿着这个程序的生命周期, 简要地介绍一些逐步出现的关键概念, 专业术语和组成部分. 后面的章节将围绕这些内容展开.")]),t._v(" "),s("h4",{attrs:{id:"信息就是位-上下文"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#信息就是位-上下文"}},[t._v("#")]),t._v(" 信息就是位+上下文")]),t._v(" "),s("p",[t._v("hello 程序的生命周期是从一个"),s("strong",[t._v("源程序")]),t._v("(或者说源文件)开始的, 即"),s("strong",[t._v("程序员通过编辑器创建并保存的文本文件")]),t._v(", 文件名是 hello.c. 源程序实际上就是一个由值 0 和 1 组成的位(又称为比特)序列, 8 个位被组织成一组, 称为"),s("strong",[t._v("字节")]),t._v(". 每个字节表示程序中的某些文本字符.")]),t._v(" "),s("p",[t._v("大部分的现代计算机系统都使用 "),s("strong",[t._v("ASCII")]),t._v(" 标准来表示文本字符, 这种方式实际上就是用一个唯一的单字节大小的"),s("strong",[t._v("整数值")]),t._v("来表示每个字符. 比如, 下图给出了 hello.c 程序的 ASCII 码表示.")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20240720191901-ssstadv.png",alt:"image"}})]),t._v(" "),s("p",[t._v("hello.c 程序是以"),s("strong",[t._v("字节序列的方式储存在文件")]),t._v("中的. 每个字节都有一个整数值, 对应于某些字符. 例如, 第一个字节的整数值是 35, 它对应的就是字符 \"#\". 第二个字节的整数值为 105, 它对应的字符是 'i', 依此类推. 注意, 每个文本行都是以一个看不见的换行符 '\\n' 来结束的, 它所对应的整数值为 10. 像 hello.c 这样只由 ASCII 字符构成的文件称为"),s("mark",[s("strong",[t._v("文本文件")])]),t._v(", 所有其他文件都称为"),s("mark",[s("strong",[t._v("二进制文件")])]),t._v(".")]),t._v(" "),s("p",[t._v("hello.c 的表示方法说明了一个基本思想∶ "),s("mark",[s("strong",[t._v("系统中所有的信息, 包括磁盘文件, 内存中的程序, 内存中存放的用户数据以及网络上传送的数据, 都是由一串比特表示的. 区分不同数据对象的唯一方法是读到这些数据对象时的上下文")])]),t._v(".")]),t._v(" "),s("p",[t._v("比如, 在不同的上下文中, 一个同样的字节序列可能表示一个整数, 浮点数, 字符串或者机器指令. 作为程序员, 需要了解数字的机器表示方式, 因为它们与实际的整数和实数是不同的. 它们是对真值的有限近似值, 有时候会有意想不到的行为表现.")]),t._v(" "),s("h4",{attrs:{id:"程序被其他程序翻译成不同的格式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#程序被其他程序翻译成不同的格式"}},[t._v("#")]),t._v(" 程序被其他程序翻译成不同的格式")]),t._v(" "),s("p",[t._v("hello 程序的生命周期是从一个高级 C 语言程序开始的, 因为这种形式能够被人读懂. 然而为了在系统上运行 hello.c 程序, "),s("mark",[t._v("每条 C 语句都必须被其他程序转化为一系列的低级")]),t._v("​"),s("mark",[s("strong",[t._v("机器语言")])]),t._v("​"),s("mark",[t._v("指令. 然后这些指令按照一种称为")]),t._v("​"),s("mark",[s("strong",[t._v("可执行目标程序")])]),t._v("​"),s("mark",[t._v("的格式打好包, 并以二进制磁盘文件的形式存放起来. 目标程序也称为")]),t._v("​"),s("mark",[s("strong",[t._v("可执行目标文件")])]),t._v("​ "),s("strong",[t._v(".")])]),t._v(" "),s("p",[t._v("在 Unix 系统上, 从源文件到目标文件的转化是由"),s("strong",[t._v("编译器驱动程序")]),t._v("完成的∶")]),t._v(" "),s("blockquote",[s("p",[t._v("​"),s("code",[t._v("linux> gcc -o hello hello.c")]),t._v("​")])]),t._v(" "),s("p",[t._v("在这里, "),s("strong",[t._v("GCC 编译器驱动程序")]),t._v("读取源程序文件 hello.c, 并把它翻译成一个可执行目标文件 hello. 这个翻译过程可分为四个阶段完成, 如下图所示. "),s("mark",[t._v("执行这四个阶段的程序(")]),t._v("​"),s("mark",[s("strong",[t._v("预处理器")])]),t._v("​"),s("mark",[t._v(",")]),t._v(" "),s("mark",[s("strong",[t._v("编译器")])]),t._v("​"),s("mark",[t._v(",")]),t._v(" "),s("mark",[s("strong",[t._v("汇编器")])]),t._v("​"),s("mark",[t._v("和")]),t._v("​"),s("mark",[s("strong",[t._v("链接器")])]),t._v("​"),s("mark",[t._v(")一起构成了")]),t._v("​"),s("mark",[s("strong",[t._v("编译系统")])]),t._v("​"),s("mark",[t._v("(compilation system)")]),t._v(".")]),t._v(" "),s("p",[t._v("​"),s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/01-03-compilation-systems-20230730155342-qwwhqea.png",alt:"",title:"编译流程"}}),t._v("​")]),t._v(" "),s("p",[t._v("(1) "),s("strong",[t._v("预处理阶段.")]),t._v("  预处理器(cpp)根据以字符 # 开头的命令, 修改原始的 C 程序. 比如 hello.c 中第 1 行的 "),s("code",[t._v("#include <stdio.h>")]),t._v("​ 命令告诉预处理器读取系统头文件 stdio.h 的内容, 并把它直接插入程序文本中. 结果就得到了另一个 C 程序, 通常是以 .i 作为文件扩展名.")]),t._v(" "),s("p",[t._v("(2) "),s("strong",[t._v("编译阶段.")]),t._v(" "),s("strong",[s("strong",[t._v("编译器(ccl)将文本文件 hello.i 翻译成文本文件 hello.s, 它包含一个")])]),t._v("​"),s("strong",[t._v("汇编语言程序")]),t._v(". 该程序包含函数 main 的定义, 如下所示∶")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("main:\n    subq "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$8")]),t._v(", %rsp\n    movl $.LC0, %edi\n    call puts\n    movl "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$0")]),t._v(", %eax\n    addq "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$8")]),t._v(", %rsp\n    ret\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[t._v("定义中 2～7 行的每条语句都以一种文本格式描述了一条"),s("strong",[t._v("低级机器语言指令")]),t._v(". 汇编语言是非常有用的, 因为它为不同高级语言的不同编译器提供了"),s("strong",[t._v("通用的输出语言")]),t._v(". 例如 C 编译器和 Fortran 编译器产生的输出文件用的都是一样的汇编语言.")]),t._v(" "),s("p",[t._v("(3) "),s("strong",[t._v("汇编阶段.")]),t._v(" "),s("strong",[s("strong",[t._v("接下来, 汇编器(as)将 hello.s 翻译成机器语言指令, 把这些指令打包成一种叫做")])]),t._v("​"),s("strong",[t._v("可重定位目标程序")]),t._v("(relocatable object program)的格式, 并将结果保存在目标文件 hello.o 中. hello.o 文件是一个二进制文件, 它包含的 17 个字节是函数 main 的指令编码. 如果在文本编辑器中打开 hello.o 文件, 将看到一堆乱码.")]),t._v(" "),s("p",[t._v("(4) "),s("strong",[t._v("链接阶段.")]),t._v(" "),s("strong",[s("strong",[t._v("请注意, hello 程序调用了 printf 函数, 它是每个 C 编译器都提供的标准 C 库中的一个函数. printf 函数存在于一个名为 printf.o 的单独的预编译好了的目标文件中, 而这个文件必须以某种方式合并到 hello.o 程序中. 链接器(ld)就负责处理这种合并. 结果就得到 hello 文件, 它是一个")])]),t._v("​"),s("strong",[t._v("可执行目标文件")]),t._v("(或者简称为"),s("strong",[t._v("可执行文件")]),t._v("), 可以被加载到内存中, 由系统执行.")]),t._v(" "),s("h4",{attrs:{id:"了解编译系统如何工作是大有益处的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#了解编译系统如何工作是大有益处的"}},[t._v("#")]),t._v(" 了解编译系统如何工作是大有益处的")]),t._v(" "),s("p",[t._v("对于像 hello.c 这样简单的程序, 可以依靠编译系统生成正确有效的机器代码. 但是有一些重要的原因促使程序员必须知道编译系统是如何工作的.")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("优化程序性能.")]),t._v("  现代编译器都是成熟的工具, 通常可以生成很好的代码. 作为程序员, 无须为了写出高效代码而去了解编译器的内部工作. 但为了在 C 程序中做出好的编码选择, 确实需要了解一些机器代码以及编译器将不同的 C 语句转化为机器代码的方式. 比如, 一个 switch 语句是否总是比一系列的 if-else 语句高效得多? 一个函数调用的开销有多大? while 循环比 for 循环更有效吗? 指针引用比数组索引更有效吗? 为什么将循环求和的结果放到一个本地变量中, 会比将其放到一个通过引用传递过来的参数中, 运行起来快很多呢? 为什么只是简单地重新排列一下算术表达式中的括号就能让函数运行得更快?")]),t._v(" "),s("li",[s("strong",[t._v("理解链接时出现的错误.")]),t._v("  根据经验, 一些最令人困扰的程序错误往往都与"),s("strong",[t._v("链接器操作")]),t._v("有关, 尤其是试图构建大型的软件系统时. 比如, 链接器报告说它无法解析一个引用, 这是什么意思? 静态变量和全局变量的区别是什么? 如果在不同的 C 文件中定义了名字相同的两个全局变量会发生什么? 静态库和动态库的区别是什么? 在命令行上排列库的顺序有什么影响? 最严重的是, 为什么有些链接错误直到运行时才会出现?")]),t._v(" "),s("li",[s("strong",[t._v("避免安全漏洞.")]),t._v("  多年来, 缓冲区溢出错误是造成大多数网络和 Internet 服务器上安全漏洞的主要原因. 存在这些错误是因为很少有程序员能够理解需要限制从不受信任的源接收数据的数量和格式. 学习安全编程的第一步就是理解数据和控制信息存储在程序栈上的方式会引起的后果.")])]),t._v(" "),s("h4",{attrs:{id:"处理器读并解释储存在内存中的指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#处理器读并解释储存在内存中的指令"}},[t._v("#")]),t._v(" 处理器读并解释储存在内存中的指令")]),t._v(" "),s("p",[t._v("此刻, hello.c 源程序已经被编译系统翻译成了可执行目标文件 hello, 并被存放在"),s("strong",[t._v("磁盘")]),t._v("上. 要想在 Unix 系统上运行该可执行文件, 将它的文件名"),s("strong",[t._v("输入到称为 shell 的应用程序")]),t._v("中∶")]),t._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ./hello\nhello, world\nlinux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" \n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("shell 是一个"),s("strong",[t._v("命令行解释器")]),t._v(", 它输出一个提示符, 等待输入一个命令行, 然后执行这个命令. 如果该命令行的第一个单词不是一个内置的 shell 命令, 那么 shell 就会假设这是一个可执行文件的名字, 它将加载并运行这个文件. 所以在此例中, shell 将加载并运行 hello 程序, 然后等待程序终止. hello 程序在屏幕上输出它的消息, 然后终止. shell 随后输出一个提示符, 等待下一个输入的命令行.")]),t._v(" "),s("h5",{attrs:{id:"_1-系统的硬件组成"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-系统的硬件组成"}},[t._v("#")]),t._v(" 1.系统的硬件组成")]),t._v(" "),s("p",[t._v("为了理解"),s("strong",[t._v("运行 hello 程序时发生了什么")]),t._v(", 需要了解一个典型系统的硬件组织, 如下图所示. 这张图是近期 Intel 系统产品族的模型, 但是所有其他系统也有相同的外观和特性. 其中 CPU: 中央处理单元; ALU: 算术/逻辑单元; PC: 程序计数器; USB: 通用串行总线.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230806145710-xav4c97.png",alt:"image",title:"一个典型系统的硬件组成"}})]),t._v(" "),s("h6",{attrs:{id:"_1-总线"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-总线"}},[t._v("#")]),t._v(" (1)总线")]),t._v(" "),s("p",[t._v("贯穿整个系统的是一组电子管道, 称作"),s("strong",[t._v("总线")]),t._v(", 它"),s("strong",[t._v("携带信息字节并负责在各个部件间传递")]),t._v(". 通常总线被设计成传送"),s("strong",[t._v("定长的字节块")]),t._v(", 也就是"),s("strong",[t._v("字(word). 字中的字节数(即字长)是一个基本的系统参数, 各个系统中都不尽相同")]),t._v('. 现在的大多数机器字长要么是 4 个字节(32 位), 要么是 8 个字节(64 位). 本书中不对字长做任何固定的假设. 相反, 将在需要明确定义的上下文中具体说明一个"字"是多大.')]),t._v(" "),s("h6",{attrs:{id:"_2-i-o设备"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-i-o设备"}},[t._v("#")]),t._v(" (2)I/O设备")]),t._v(" "),s("p",[t._v("I/O(输入/输出)设备是"),s("strong",[t._v("系统与外部世界的联系通道")]),t._v(". 示例系统包括四个 I/O 设备∶ 作为用户输入的键盘和鼠标, 作为用户输出的显示器, 以及用于长期存储数据和程序的磁盘驱动器(简单地说就是磁盘). 最开始, 可执行程序 hello 就存放在磁盘上.")]),t._v(" "),s("p",[s("mark",[t._v("每个 I/O 设备都通过一个")]),t._v("​"),s("mark",[s("strong",[t._v("控制器")])]),t._v("​"),s("mark",[t._v("或")]),t._v("​"),s("mark",[s("strong",[t._v("适配器")])]),t._v("​"),s("mark",[t._v("与 I/O 总线相连")]),t._v(". 控制器和适配器之间的区别主要在于它们的封装方式. 控制器是 I/O 设备本身或者系统的主印制电路板(通常称作主板)上的芯片组. 而适配器则是一块插在主板插槽上的卡. 无论如何, 它们的功能都是在 I/O 总线和 I/O 设备之间传递信息.")]),t._v(" "),s("h6",{attrs:{id:"_3-主存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-主存"}},[t._v("#")]),t._v(" (3)主存")]),t._v(" "),s("p",[s("strong",[t._v("主存")]),t._v("是一个临时存储设备, 在处理器执行程序时, 用来"),s("strong",[t._v("存放程序和程序处理的数据")]),t._v(". 从物理上来说, 主存是由一组"),s("strong",[t._v("动态随机存取存储器")]),t._v("(DRAM)芯片组成的. 从逻辑上来说, "),s("strong",[t._v("存储器是一个线性的字节数组, 每个字节都有其唯一的地址(数组索引), 这些地址是从零开始的")]),t._v(". 一般来说, 组成程序的每条机器指令都由不同数量的字节构成. 与 C 程序变量相对应的数据项的大小是根据类型变化的. 比如, 在运行 Linux 的 x86-64 机器上, short 类型的数据需要 2 个字节, int 和 float 类型需要 4 个字节, 而 long 和 double 类型需要 8 个字节.")]),t._v(" "),s("h6",{attrs:{id:"_4-处理器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-处理器"}},[t._v("#")]),t._v(" (4)处理器")]),t._v(" "),s("p",[s("strong",[t._v("中央处理单元")]),t._v("(CPU), 简称"),s("strong",[t._v("处理器")]),t._v(", 是"),s("mark",[s("strong",[t._v("解释(或执行)存储在主存中指令的引擎")])]),t._v(". 处理器的核心是一个"),s("mark",[s("strong",[t._v("大小为一个字")])]),t._v("的存储设备(或"),s("strong",[t._v("寄存器")]),t._v("), 称为"),s("strong",[t._v("程序计数器")]),t._v("(PC). 在任何时刻, "),s("strong",[t._v("PC 都指向主存中的某条机器语言指令(即含有该条指令的地址)")]),t._v(" .")]),t._v(" "),s("p",[t._v("从系统通电开始, 直到系统断电, "),s("strong",[t._v("处理器一直在不断地执行程序计数器指向的指令, 再更新程序计数器, 使其指向下一条指令")]),t._v(". 处理器看上去是按照一个非常简单的指令执行模型来操作的, 这个模型是由"),s("strong",[t._v("指令集架构")]),t._v("决定的. 在这个模型中, 指令按照严格的顺序执行, 而执行一条指令包含执行一系列的步骤. 处理器从程序计数器指向的内存处读取指令, 解释指令中的位, 执行该指令指示的简单操作, 然后更新 PC, 使其指向下一条指令, 而这条指令并不一定和在内存中刚刚执行的指令相邻.")]),t._v(" "),s("p",[t._v("这样的简单操作并不多, 它们围绕着主存, "),s("strong",[t._v("寄存器文件")]),t._v("(register file)和"),s("strong",[t._v("算术/逻辑单元")]),t._v("(ALU)进行. 寄存器文件是一个小的存储设备, 由一些单个字长的寄存器组成, 每个寄存器都有唯一的名字. ALU 计算新的数据和地址值. 下面是一些简单操作的例子, CPU 在指令的要求下可能会执行这些操作.")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("加载")]),t._v(": 从主存复制一个字节或者一个字到寄存器, 以覆盖寄存器原来的内容.")]),t._v(" "),s("li",[s("strong",[t._v("存储")]),t._v(": 从寄存器复制一个字节或者一个字到主存的某个位置, 以覆盖这个位置上原 来的内容.")]),t._v(" "),s("li",[s("strong",[t._v("操作")]),t._v(": 把两个寄存器的内容复制到 ALU, ALU 对这两个字做算术运算, 并将结果存放到一个寄存器中, 以覆盖该寄存器中原来的内容.")]),t._v(" "),s("li",[s("strong",[t._v("跳转")]),t._v(": 从指令本身中抽取一个字, 并将这个字复制到程序计数器(PC)中, 以覆盖 PC 中原来的值.")])]),t._v(" "),s("p",[t._v("处理器看上去是它的指令集架构的简单实现, 但是实际上现代处理器使用了非常复杂的机制来加速程序的执行. 因此, 将处理器的指令集架构和处理器的"),s("strong",[t._v("微体系结构")]),t._v("区分开来: 指令集架构描述的是每条机器代码指令的效果; 而微体系结构描述的是处理器实际上是如何实现的.")]),t._v(" "),s("h5",{attrs:{id:"_2-运行hello程序的过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-运行hello程序的过程"}},[t._v("#")]),t._v(" 2.运行hello程序的过程")]),t._v(" "),s("p",[t._v("前面简单描述了系统的硬件组成和操作, 现在开始介绍"),s("strong",[t._v("当运行示例程序时到底发生了些什么")]),t._v(".")]),t._v(" "),s("p",[t._v('初始时, shell 程序执行它的指令, 等待用户输人一个命令. 当在键盘上输人字符串 "./hello" 后, shell 程序'),s("strong",[t._v("将字符逐一读入寄存器, 再把它存放到内存")]),t._v("中, 如下图所示.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230806150506-deo75ik.png",alt:"image",title:"从键盘上读取hello命令"}})]),t._v(" "),s("p",[t._v("当在键盘上敲回车键时, shell 程序就知道已经结束了命令的输入. 然后 "),s("strong",[t._v("shell 执行一系列指令来加载可执行的 hello 文件, 这些指令将 hello 目标文件中的代码和数据从磁盘复制到主存")]),t._v('. 数据包括最终会被输出的字符串 "hello, world\\n".')]),t._v(" "),s("p",[t._v("利用"),s("strong",[t._v("直接存储器存取")]),t._v("(DMA)技术, 数据可以不通过处理器而直接从磁盘到达主存. 这个步骤如下图所示.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230806150628-15lrllj.png",alt:"image",title:"从磁盘加载可执行文件到主存"}})]),t._v(" "),s("p",[t._v("一旦目标文件 hello 中的代码和数据被加载到主存, "),s("strong",[t._v("处理器就开始执行 hello 程序的 main 程序中的机器语言指令")]),t._v('. 这些指令将 "hello, world\\n" 字符串中的字节'),s("strong",[t._v("从主存复制到寄存器文件, 再从寄存器文件中复制到显示设备, 最终显示在屏幕上")]),t._v(". 这个步骤如下图所示.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230806150728-3uu7mp4.png",alt:"image",title:"将输出字符串从存储器写到显示器"}})]),t._v(" "),s("h4",{attrs:{id:"高速缓存至关重要"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#高速缓存至关重要"}},[t._v("#")]),t._v(" 高速缓存至关重要")]),t._v(" "),s("p",[t._v("这个简单的示例揭示了一个重要的问题, 即"),s("strong",[t._v("系统花费了大量的时间把信息从一个地方挪到另一个地方")]),t._v(". hello 程序的"),s("strong",[t._v("机器指令最初是存放在磁盘上, 当程序加载时, 它们被复制到主存; 当处理器运行程序时, 指令又从主存复制到处理器")]),t._v('. 相似地, 数据串 "hello, world\\n" 开始时在磁盘上, 然后被复制到主存, 最后从主存上复制到显示设备.')]),t._v(" "),s("p",[t._v("从程序员的角度来看, 这些"),s("mark",[s("strong",[t._v("复制就是开销")])]),t._v(", 减慢了程序真正的工作. 因此, "),s("strong",[t._v("系统设计者的一个主要目标就是使这些复制操作尽可能快地完成")]),t._v(".")]),t._v(" "),s("p",[t._v("根据机械原理, 较大的存储设备要比较小的存储设备运行得慢, 而快速设备的造价远高于同类的低速设备. 比如说, 一个典型系统上的磁盘驱动器可能比主存大 1000 倍, 但是对处理器而言, 从磁盘驱动器上读取一个字的时间开销要比从主存中读取的开销大 1000 万倍.")]),t._v(" "),s("p",[t._v("类似地, 一个典型的寄存器文件只存储几百字节的信息, 而主存里可存放几十亿字节. 然而处理器从寄存器文件中读数据比从主存中读取几乎要快 100 倍. 随着这些年半导体技术的进步, 这种处理器与主存之间的差距还在持续增大. 加快处理器的运行速度比加快主存的运行速度要容易和便宜得多. 针对这种"),s("mark",[s("strong",[t._v("处理器与主存之间的差异")])]),t._v("​ "),s("strong",[t._v(", 系统设计者采用了更小更快的存储设备")]),t._v(", 称为"),s("mark",[s("strong",[t._v("高速缓存存储器")])]),t._v("(cache memory, 简称为 cache 或高速缓存), 作为暂时的集结区域, "),s("strong",[t._v("存放处理器近期可能会需要的信息")]),t._v(". 下图展示了一个典型系统中的高速缓存存储器.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230806151116-n0mzlpm.png",alt:"image",title:"高速缓存存储器"}})]),t._v(" "),s("p",[t._v("位于处理器"),s("strong",[t._v("芯片上的 L1 高速缓存")]),t._v("的容量可以达到数万字节, "),s("strong",[t._v("访问速度几乎和访问寄存器文件一样快")]),t._v(". 一个容量为数十万到数百万字节的更大的 "),s("strong",[t._v("L2 高速缓存")]),t._v("通过一条特殊的总线连接到处理器. 进程访问 L2 高速缓存的时间要比访问 L1 高速缓存的时间长 5 倍, 但是这仍然比访问主存的时间快 5~10 倍. L1 和 L2 高速缓存是用一种叫做"),s("strong",[t._v("静态随机访问存储器")]),t._v("(SRAM)的硬件技术实现的. 比较新的处理能力更强大的系统有"),s("strong",[t._v("三级高速缓存∶ L1, L2 和 L3")]),t._v(". 系统可以获得一个很大的存储器, 同时访问速度也很快, "),s("mark",[s("strong",[t._v("原因是利用了高速缓存的局部性原理, 即程序具有访问局部区域里的数据和代码的趋势. 通过让高速缓存里存放可能经常访问的数据, 大部分的内存操作都能在快速的高速缓存中完成")])]),t._v(".")]),t._v(" "),s("p",[t._v("本书得出的重要结论之一就是, "),s("strong",[t._v("意识到高速缓存存储器存在的应用程序员能够利用高速缓存将程序的性能提高一个数量级")]),t._v(".")]),t._v(" "),s("h4",{attrs:{id:"存储设备形成层次结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#存储设备形成层次结构"}},[t._v("#")]),t._v(" 存储设备形成层次结构")]),t._v(" "),s("p",[t._v("在处理器和一个较大较慢的设备(例如主存)之间插入一个更小更快的存储设备(例如高速缓存)的想法已经成为一个普遍的观念. 实际上, 每个计算机系统中的存储设备都被组织成了一个"),s("strong",[t._v("存储器层次结构")]),t._v(", 如下图所示. 在这个层次结构中, "),s("strong",[t._v("从上至下, 设备的访问速度越来越慢, 容量越来越大, 并且每字节的造价也越来越便宜")]),t._v(". 寄存器文件在层次结构中位于最顶部, 也就是第 0 级或记为 L0. 这里展示的是三层高速缓存 L1 到 L3, 占据存储器层次结构的第 1 层到第 3 层. 主存在第 4 层, 以此类推.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230806151316-2psyb45.png",alt:"image",title:"一个存储器层次结构的示例"}})]),t._v(" "),s("p",[s("mark",[s("strong",[t._v("存储器层次结构的主要思想是上一层的存储器作为低一层存储器的高速缓存")])]),t._v(". 因此, 寄存器文件就是 L1 的高速缓存, L1 是 L2 的高速缓存, L2 是 L3 的高速缓存, L3 是主存的高速缓存, 而主存又是磁盘的高速缓存. 在某些具有分布式文件系统的网络系统中, 本地磁盘就是存储在其他系统中磁盘上的数据的高速缓存. 正如可以运用不同的高速缓存的知识来提高程序性能一样, 程序员同样可以利用对整个存储器层次结构的理解来提高程序性能.")]),t._v(" "),s("h4",{attrs:{id:"操作系统管理硬件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#操作系统管理硬件"}},[t._v("#")]),t._v(" 操作系统管理硬件")]),t._v(" "),s("p",[t._v("回到 hello 程序的例子. 当 shell 加载和运行 hello 程序时, 以及 hello 程序输出自己的消息时, shell 和 hello 程序都没有直接访问键盘, 显示器, 磁盘或者主存. 取而代之的是, "),s("strong",[t._v("它们依靠操作系统提供的服务")]),t._v(". 可以"),s("strong",[t._v("把操作系统看成是应用程序和硬件之间插入的一层软件")]),t._v(", 如下图所示. "),s("mark",[s("strong",[t._v("所有应用程序对硬件的操作尝试都必须通过操作系统")])]),t._v(".")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230806151456-8jr9o77.png",alt:"image",title:"计算机系统的分层视图"}})]),t._v(" "),s("p",[s("strong",[t._v("操作系统有两个基本功能∶ (1)防止硬件被失控的应用程序滥用; (2)向应用程序提供简单一致的机制来控制复杂而又通常大不相同的低级硬件设备")]),t._v(".")]),t._v(" "),s("p",[s("mark",[s("strong",[t._v("操作系统通过几个基本的抽象概念(进程, 虚拟内存和文件)来实现这两个功能. 如下图所示, 文件是对 I/O 设备的抽象表示, 虚拟内存是对主存和磁盘 I/O 设备的抽象表示, 进程则是对处理器, 主存和 I/O 设备的抽象表示")])]),t._v(". 后面将依次讨论每种抽象表示.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230806151600-infy3rn.png",alt:"image",title:"操作系统提供的抽象表示"}})]),t._v(" "),s("h5",{attrs:{id:"_1-进程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-进程"}},[t._v("#")]),t._v(" 1.进程")]),t._v(" "),s("p",[t._v("像 hello 这样的程序在现代系统上运行时, 操作系统会提供一种"),s("strong",[t._v("假象")]),t._v(", 就好像系统上只有这个程序在运行. 程序看上去是独占地使用处理器, 主存和 I/O 设备. 处理器看上去就像在不间断地一条接一条地执行程序中的指令, 即该程序的代码和数据是系统内存中唯一的对象. 这些假象是"),s("strong",[t._v("通过进程的概念")]),t._v("来实现的, 进程是计算机科学中最重要和最成功的概念之一.")]),t._v(" "),s("p",[s("mark",[s("strong",[t._v("进程是操作系统对一个正在运行的程序的一种抽象")])]),t._v(". 在一个系统上可以同时运行多个进程, 而每个进程都好像在独占地使用硬件. 而"),s("strong",[t._v("并发运行")]),t._v(", 则是说"),s("strong",[t._v("一个进程的指令和另一个进程的指令是交错执行")]),t._v("的. 在大多数系统中, 需要运行的进程数是多于可以运行它们的 CPU 个数的. 传统系统在一个时刻只能执行一个程序, 而先进的"),s("strong",[t._v("多核")]),t._v("处理器同时能够执行多个程序. 无论是在单核还是多核系统中, 一个 CPU 看上去都像是在并发地执行多个进程, 这是通过处理器在进程间切换来实现的. 操作系统实现这种交错执行的机制称为"),s("strong",[t._v("上下文切换")]),t._v(". 为了简化讨论, 只考虑包含一个 CPU 的"),s("strong",[t._v("单处理器系统")]),t._v("的情况. 后面会讨论"),s("strong",[t._v("多处理器系统")]),t._v(".")]),t._v(" "),s("p",[s("strong",[t._v("操作系统保持跟踪进程运行所需的所有状态信息")]),t._v(". 这种状态就是"),s("strong",[t._v("上下文")]),t._v(", 包括许多信息, 比如 PC 和寄存器文件的当前值, 以及主存的内容. 在任何一个时刻, 单处理器系统都只能执行一个进程的代码. 当操作系统决定要把控制权从当前进程转移到某个新进程时, 就会进行"),s("strong",[t._v("上下文切换, 即保存当前进程的上下文, 恢复新进程的上下文, 然后将控制权传递到新进程")]),t._v(". 新进程就会从它上次停止的地方开始. 下图展示了示例 hello 程序运行场景的基本理念.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230806155552-fyrf12m.png",alt:"image",title:"进程的上下文切换"}})]),t._v(" "),s("p",[t._v("示例场景中有两个并发的进程∶ shell 进程和 hello 进程. 最开始, 只有 shell 进程在运行, 即等待命令行上的输入. 当让它运行 hello 程序时, shell 通过调用一个专门的函数, 即系统调用, 来执行请求, 系统调用会将控制权传递给操作系统. 操作系统"),s("strong",[t._v("保存 shell 进程的上下文")]),t._v(", 创建一个新的 hello 进程及其上下文, 然后将控制权传给新的 hello 进程. hello 进程终止后, 操作系统恢复 shell 进程的上下文, 并将控制权传回给它, shell 进程会继续等待下一个命令行输入.")]),t._v(" "),s("p",[t._v("上图中从一个进程到另一个进程的转换是由操作系统"),s("strong",[t._v("内核")]),t._v("(kernel)管理的. "),s("strong",[t._v("内核是操作系统代码常驻主存的部分")]),t._v(". 当应用程序需要操作系统的某些操作时, 比如读写文件, 它就执行一条特殊的"),s("strong",[t._v("系统调用")]),t._v("(system call)指令, 将控制权传递给内核. 然后内核执行被请求的操作并返回应用程序. 注意, "),s("mark",[s("strong",[t._v("内核不是一个独立的进程. 它是系统管理全部进程所用代码和数据结构的集合")])]),t._v(".")]),t._v(" "),s("p",[t._v("实现进程这个抽象概念需要低级硬件和操作系统软件之间的紧密合作. 第 8 章会揭示这项工作的原理, 以及应用程序是如何创建和控制它们的进程的.")]),t._v(" "),s("h5",{attrs:{id:"_2-线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-线程"}},[t._v("#")]),t._v(" 2.线程")]),t._v(" "),s("p",[t._v("尽管通常认为一个进程只有单一的控制流, 但是在现代系统中, 一个进程实际上可以由多个称为"),s("strong",[t._v("线程")]),t._v("的执行单元组成, 每个线程都运行在"),s("strong",[t._v("进程的上下文")]),t._v("中, 并"),s("strong",[t._v("共享同样的代码和全局数据")]),t._v(". 由于网络服务器中对并行处理的需求, 线程成为越来越重要的编程模型, 因为多线程之间比多进程之间更容易共享数据, 也因为线程一般来说都比进程更高效. 当有多处理器可用的时候, 多线程也是一种使得程序可以运行得更快的方法, 后面会学习并发的基本概念, 包括如何写线程化的程序.")]),t._v(" "),s("h5",{attrs:{id:"_3-虚拟内存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-虚拟内存"}},[t._v("#")]),t._v(" 3.虚拟内存")]),t._v(" "),s("p",[s("mark",[s("strong",[t._v("虚拟内存是一个抽象概念, 它为每个进程提供了一个假象, 即每个进程都在独占地使用主存. 每个进程看到的内存都是一致的, 称为虚拟地址空间")])]),t._v(". 下图所示的是 Linux 进程的虚拟地址空间(其他 Unix 系统的设计也与此类似). 在 Linux 中, 地址空间最上面的区域是保留给"),s("strong",[t._v("操作系统中的代码和数据")]),t._v("的, 这对所有进程来说都是一样. "),s("strong",[t._v("地址空间的底部区域存放用户进程定义的代码和数据")]),t._v(". 请注意, 图中的地址是"),s("strong",[t._v("从下往上增大")]),t._v("的.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230806155851-7ealhoi.png",alt:"image",title:"进程的虚拟地址空间"}})]),t._v(" "),s("p",[s("strong",[t._v("每个进程看到的虚拟地址空间由大量准确定义的区构成, 每个区都有专门的功能")]),t._v(". 这里从最低的地址开始, 逐步向上介绍.")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("程序代码和数据.")]),t._v("  对所有的进程来说, "),s("strong",[t._v("代码是从同一固定地址开始")]),t._v(", 紧接着的是和 C 全局变量相对应的数据位置. 代码和数据区是直接按照可执行目标文件的内容初始化的, 在示例中就是可执行文件 hello. 在第 7 章研究链接和加载时, 会学习更多有关地址空间的内容.")]),t._v(" "),s("li",[s("strong",[t._v("堆.")]),t._v("  代码和数据区后紧随着的是"),s("strong",[t._v("运行时堆")]),t._v(". 代码和数据区在进程一开始运行时就被指定了大小, 与此不同, 当调用像 malloc 和 free 这样的 C 标准库函数时, 堆可以在运行时动态地扩展和收缩. 在第 9 章学习管理虚拟内存时, 将更详细地研究堆.")]),t._v(" "),s("li",[s("strong",[t._v("共享库.")]),t._v("  大约在地址空间的中间部分是一块用来存放像 C 标准库和数学库这样的"),s("strong",[t._v("共享库的代码和数据的区域")]),t._v(". 共享库的概念非常强大, 也相当难懂. 在第 7 章介绍动态链接时, 将学习共享库是如何工作的.")]),t._v(" "),s("li",[s("strong",[t._v("栈.")]),t._v(" "),s("strong",[s("strong",[t._v("位于用户虚拟地址空间顶部的是")])]),t._v("​"),s("strong",[t._v("用户栈")]),t._v(", 编译器用它来实现"),s("strong",[t._v("函数调用")]),t._v(". 和堆一样, 用户栈在程序执行期间可以动态地扩展和收缩. 特别地, 每次调用一个函数时, 栈就会增长; 从一个函数返回时, 栈就会收缩. 在第 3 章中将学习编译器是如何使用栈的.")]),t._v(" "),s("li",[s("strong",[t._v("内核虚拟内存.")]),t._v("  地址空间顶部的区域是为"),s("strong",[t._v("内核")]),t._v("保留的. 不允许应用程序读写这个区域的内容或者直接调用内核代码定义的函数. 相反, 它们必须调用内核来执行这些操作.")])]),t._v(" "),s("p",[t._v("虚拟内存的运作需要硬件和操作系统软件之间精密复杂的交互, 包括对处理器生成的每个地址的硬件翻译. "),s("mark",[s("strong",[t._v("基本思想是把一个进程虚拟内存的内容存储在磁盘上, 然后用主存作为磁盘的高速缓存")])]),t._v(". 第 9 章将解释它如何工作, 以及为什么对现代系统的运行如此重要.")]),t._v(" "),s("h5",{attrs:{id:"_4-文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-文件"}},[t._v("#")]),t._v(" 4.文件")]),t._v(" "),s("p",[s("strong",[t._v("文件")]),t._v("就是字节序列, 仅此而已. "),s("strong",[t._v("每个 I/O 设备, 包括磁盘, 键盘, 显示器, 甚至网络, 都可以看成是文件")]),t._v(". 系统中的所有输入输出都是通过使用一小组称为 Unix I/O 的"),s("strong",[t._v("系统函数调用读写文件")]),t._v("来实现的.")]),t._v(" "),s("p",[t._v("文件这个简单而精致的概念是非常强大的, 因为它向应用程序提供了一个"),s("strong",[t._v("统一的视图")]),t._v(", 来看待系统中可能含有的所有各式各样的 I/O 设备. 例如, 处理磁盘文件内容的应用程序员可以非常幸福, 因为他们无须了解具体的磁盘技术. 进一步说, 同一个程序可以在使用不同磁盘技术的不同系统上运行. 后面将在第 10 章中学习 Unix I/O.")]),t._v(" "),s("h4",{attrs:{id:"系统间利用网络通信"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#系统间利用网络通信"}},[t._v("#")]),t._v(" 系统间利用网络通信")]),t._v(" "),s("p",[t._v("系统漫游至此, 一直是把系统视为一个孤立的硬件和软件的集合体. 实际上, 现代系统经常通过网络和其他系统连接到一起. 从一个单独的系统来看, 网络可视为一个 I/O 设备, 如下图所示. "),s("strong",[t._v("当系统从主存复制一串字节到网络适配器时, 数据流经过网络到达另一台机器, 而不是比如说到达本地磁盘驱动器. 相似地, 系统可以读取从其他机器发送来的数据, 并把数据复制到自己的主存")]),t._v(".")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230806160316-on8rtpx.png",alt:"image",title:"网络也是一种I/O设备"}})]),t._v(" "),s("p",[t._v("随着 Internet 这样的全球网络的出现, 从一台主机复制信息到另外一台主机已经成为计算机系统最重要的用途之一. 比如, 像电子邮件, 即时通信, 万维网, FTP 和 telnet 这样的应用都是基于网络复制信息的功能. 回到 hello 示例, 可以使用熟悉的 telnet 应用在一个远程主机上运行 hello 程序. 假设用本地主机上的 telnet 客户端连接远程主机上的 telnet 服务器. 在登录到远程主机并运行 shell 后, 远端的 shell 就在等待接收输入命令. 此后在远端运行 hello 程序包括如下图所示的五个基本步骤.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230806160425-8ctl18v.png",alt:"image",title:"利用telnet通过网络远程运行hello "}})]),t._v(" "),s("p",[t._v('当在 telnet 客户端键入 "hello" 字符串并敲下回车键后, 客户端软件就会将这个字符串发送到 telnet 的服务器. telnet 服务器从网络上接收到这个字符串后, 会把它传递给远端 shell 程序. 接下来, 远端 shell 运行 hello 程序, 并将输出行返回给 telnet 服务器. 最后, telnet 服务器通过网络把输出串转发给 telnet 客户端, 客户端就将输出串输出到本地终端上. 这种客户端和服务器之间交互的类型在所有的网络应用中是非常典型的. 在第 11 章将学会如何构造网络应用程序, 并利用这些知识创建一个简单的 Web 服务器.')]),t._v(" "),s("h4",{attrs:{id:"amdahl定律"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#amdahl定律"}},[t._v("#")]),t._v(" Amdahl定律")]),t._v(" "),s("p",[t._v("Gene Amdahl, 计算领域的早期先锋之一, 对提升系统某一部分性能所带来的效果做出了简单却有见地的观察. 这个观察被称为 Amdahl 定律(Amdahl's law). 该定律的主要思想是, "),s("strong",[t._v("当对系统的某个部分加速时, 其对系统整体性能的影响取决于该部分的重要性和加速程度")]),t._v(".")]),t._v(" "),s("p",[s("strong",[t._v("Amdahl 定律描述了改善任何过程的一般原则")]),t._v(". 除了可以用在加速计算机系统方面之外, 它还可以用在公司试图降低刀片制造成本, 或学生想要提高自己的绩点平均值等方面.")]),t._v(" "),s("h4",{attrs:{id:"并发和并行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#并发和并行"}},[t._v("#")]),t._v(" 并发和并行")]),t._v(" "),s("p",[t._v("数字计算机的整个历史中, 有两个需求是驱动进步的持续动力: "),s("strong",[t._v("一个是想要计算机做得更多, 另一个是想要计算机运行得更快")]),t._v(". 当处理器能够同时做更多的事情时, 这两个因素都会改进. "),s("mark",[s("strong",[t._v("并发(concurrency)是一个通用的概念, 指一个同时具有多个活动的系统; 而并行(parallelism)指的是用并发来使一个系统运行得更快")])]),t._v(". 并行可以在计算机系统的多个抽象层次上运用. 在此, 按照系统层次结构中"),s("strong",[t._v("由高到低")]),t._v("的顺序重点强调三个层次.")]),t._v(" "),s("h5",{attrs:{id:"_1-线程级并发"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-线程级并发"}},[t._v("#")]),t._v(" 1.线程级并发")]),t._v(" "),s("p",[t._v("构建在"),s("strong",[t._v("进程")]),t._v("这个抽象之上, 能够设计出"),s("strong",[t._v("同时有多个程序执行的系统, 这就导致了并发")]),t._v(". 使用线程, 甚至能够在一个进程中执行多个控制流. 自 20 世纪 60 年代初期出现时间共享以来, 计算机系统中就开始有了对并发执行的支持. "),s("strong",[t._v("传统意义上, 这种并发执行只是模拟出来的, 是通过使一台计算机在它正在执行的进程间快速切换来实现")]),t._v("的, 就好像一个杂耍艺人保持多个球在空中飞舞一样. 这种并发形式允许多个用户同时与系统交互, 例如当许多人想要从一个 Web 服务器获取页面时. 它还允许一个用户同时从事多个任务, 例如在一个窗口中开启 Web 浏览器, 在另一窗口中运行字处理器, 同时又播放音乐. 在以前, 即使"),s("strong",[t._v("处理器必须在多个任务间切换")]),t._v(", 大多数实际的计算也都是由"),s("strong",[t._v("一个处理器")]),t._v("来完成的. 这种配置称为"),s("strong",[t._v("单处理器系统")]),t._v(".")]),t._v(" "),s("p",[t._v("当构建一个由单操作系统内核控制的"),s("strong",[t._v("多处理器")]),t._v("组成的系统时, 就得到了一个"),s("strong",[t._v("多处理器系统")]),t._v(". 其实从 20 世纪 80 年代开始, 在大规模的计算中就有了这种系统, 但是直到最近, 随着多核处理器和"),s("strong",[t._v("超线程")]),t._v("(hyperthreading)的出现, 这种系统才变得常见. 下图给出了这些不同处理器类型的分类.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230806161019-1vgzfyh.png",alt:"image"}})]),t._v(" "),s("p",[s("strong",[t._v("多核处理器")]),t._v("是将多个 CPU(称为核)集成到一个集成电路芯片上. 下图描述的是一个典型"),s("strong",[t._v("多核处理器的组织结构")]),t._v(", 其中微处理器芯片有 4 个 CPU 核, "),s("strong",[t._v("每个核都有自己的 L1 和 L2 高速缓存")]),t._v(", 其中的 L1 高速缓存分为两个部分---"),s("strong",[t._v("一个保存最近取到的指令, 另一个存放数据")]),t._v(". 这些核共享更高层次的高速缓存, 以及到主存的接口.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230806161116-qnaszvr.png",alt:"image",title:"多核处理器的组织结构"}})]),t._v(" "),s("p",[t._v("超线程, 有时称为"),s("strong",[t._v("同时多线程")]),t._v(", 是一项允许一个 CPU 执行多个控制流的技术. 它涉及 CPU 某些硬件有多个备份, 比如程序计数器和寄存器文件, 而其他的硬件部分只有一份, 比如执行浮点算术运算的单元. 常规的处理器需要大约 20000 个时钟周期做不同线程间的转换, 而超线程的处理器可以在单个周期的基础上决定要执行哪一个线程. 这使得 CPU 能够更好地利用它的处理资源. 比如, 假设一个线程必须等到某些数据被装载到高速缓存中, 那 CPU 就可以继续去执行另一个线程. 举例来说, Intel Core i7 处理器可以让每个核执行两个线程, 所以一个 4 核的系统实际上可以并行地执行 8 个线程.")]),t._v(" "),s("p",[s("strong",[t._v("多处理器的使用可以从两方面提高系统性能")]),t._v(". 首先, "),s("strong",[t._v("它减少了在执行多个任务时模拟并发的需要")]),t._v(". 正如前面提到的, 即使是只有一个用户使用的个人计算机也需要并发地执行多个活动. 其次, "),s("strong",[t._v("它可以使应用程序运行得更快")]),t._v(", 当然, 这必须要求程序是以多线程方式来书写的, 这些线程可以并行地高效执行. 因此, 虽然并发原理的形成和研究已经超过 50 年的时间了, 但是多核和超线程系统的出现才极大地激发了一种愿望, 即找到书写应用程序的方法利用硬件开发线程级并行性. 第 12 章会更深入地探讨并发, 以及使用并发来提供处理器资源的共享, 使程序的执行允许有更多的并行.")]),t._v(" "),s("h5",{attrs:{id:"_2-指令级并行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-指令级并行"}},[t._v("#")]),t._v(" 2.指令级并行")]),t._v(" "),s("p",[t._v("在较低的抽象层次上, "),s("strong",[t._v("现代处理器可以同时执行多条指令的属性称为指令级并行")]),t._v(". 早期的微处理器, 如 1978 年的 Intel 8086, 需要多个(通常是 3～10 个)时钟周期来执行一条指令. 最近的处理器可以保持每个时钟周期 2～4 条指令的执行速率. 其实每条指令从开始到结束需要长得多的时间, 大约 20 个或者更多周期, 但是处理器使用了非常多的聪明技巧来"),s("strong",[t._v("同时处理多达 100 条指令")]),t._v(". 在第 4 章中, 会研究"),s("strong",[t._v("流水线")]),t._v("(pipelining)的使用. 在流水线中, 将执行一条指令所需要的活动划分成不同的步骤, 将处理器的硬件组织成一系列的阶段, 每个阶段执行一个步骤. 这些阶段可以并行地操作, 用来处理不同指令的不同部分. 同时会看到一个相当简单的硬件设计, 它能够达到接近于一个时钟周期一条指令的执行速率.")]),t._v(" "),s("p",[t._v("如果处理器可以达到比一个周期一条指令更快的执行速率, 就称之为"),s("strong",[t._v("超标量")]),t._v("(super-scalar)处理器. 大多数现代处理器都支持超标量操作. 程序员可以用这个模型来理解程序的性能. 然后, 他们就能写出拥有更高程度的指令级并行性的程序代码, 因而也运行得更快.")]),t._v(" "),s("h5",{attrs:{id:"_3-单指令-多数据并行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-单指令-多数据并行"}},[t._v("#")]),t._v(" 3.单指令,多数据并行")]),t._v(" "),s("p",[t._v("在最低层次上, 许多现代处理器拥有"),s("strong",[t._v("特殊的硬件, 允许一条指令产生多个可以并行执行的操作, 这种方式称为单指令, 多数据, 即 SIMD 并行")]),t._v(". 例如, 较新几代的 Intel 和 AMD 处理器都具有并行地对 8 对单精度浮点数(C 数据类型 float)做加法的指令.")]),t._v(" "),s("p",[t._v("提供这些 SIMD 指令多是为了提高处理影像, 声音和视频数据应用的执行速度. 虽然有些编译器会试图从 C 程序中自动抽取 SIMD 并行性, 但是更可靠的方法是用编译器支持的特殊的向量数据类型来写程序, 比如 GCC 就支持向量数据类型.")]),t._v(" "),s("h4",{attrs:{id:"计算机系统中抽象的重要性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#计算机系统中抽象的重要性"}},[t._v("#")]),t._v(" 计算机系统中抽象的重要性")]),t._v(" "),s("p",[s("mark",[s("strong",[t._v("抽象的使用是计算机科学中最为重要的概念之一")])]),t._v(". 例如, 为一组函数规定一个简单的应用程序接口(API)就是一个很好的编程习惯, 程序员无须了解它内部的工作便可以使用这些代码. 不同的编程语言提供不同形式和等级的抽象支持, 例如 Java 类的声明和 C 语言的函数原型.")]),t._v(" "),s("p",[t._v("前面已经介绍了计算机系统中使用的几个抽象, 如下图所示, "),s("mark",[s("strong",[t._v("计算机系统中的一个重大主题就是提供不同层次的抽象表示, 来隐藏实际实现的复杂性")])]),t._v(". "),s("strong",[t._v("在处理器里, 指令集架构提供了对实际处理器硬件的抽象")]),t._v(". 使用这个抽象, 机器代码程序表现得就好像运行在一个一次只执行一条指令的处理器上. 底层的硬件远比抽象描述的要复杂精细, 它并行地执行多条指令, 但又总是与那个简单有序的模型保持一致. "),s("strong",[t._v("只要执行模型一样, 不同的处理器实现也能执行同样的机器代码, 而又提供不同的开销和性能")]),t._v(". 计算机系统提供的一些抽象.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230806161433-o6h4mck.png",alt:"image"}})]),t._v(" "),s("p",[t._v("在学习操作系统时, 介绍了三个抽象: "),s("mark",[s("strong",[t._v("文件是对 I/O 设备的抽象, 虚拟内存是对程序存储器的抽象, 而进程是对一个正在运行的程序的抽象")])]),t._v(". 这里再增加一个新的抽象∶ "),s("mark",[s("strong",[t._v("虚拟机")])]),t._v(", 它提供对整个计算机的抽象, 包括操作系统, 处理器和程序. 虚拟机的思想是在 20 世纪 60 年代提出来的, 但是最近才显示出其管理计算机方式上的优势, 因为一些计算机必须能够运行为不同的操作系统(例如, Microsoft Windows, MacOS 和 Linux)或同一操作系统的不同版本设计的程序.")]),t._v(" "),s("p",[t._v("本书后续的章节会具体介绍这些抽象.")]),t._v(" "),s("h4",{attrs:{id:"小结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),s("p",[t._v("计算机系统是由硬件和系统软件组成的, 它们共同协作以运行应用程序. 计算机内部的信息被表示为一组组的位, 它们依据上下文有不同的解释方式. 程序被其他程序翻译成不同的形式, 开始时是 ASCII 文本, 然后被编译器和链接器翻译成二进制可执行文件.")]),t._v(" "),s("p",[t._v("处理器读取并解释存放在主存里的二进制指令. 因为计算机花费了大量的时间在内存, I/O 设备和 CPU 寄存器之间复制数据, 所以将系统中的存储设备划分成层次结构---"),s("strong",[t._v("CPU 寄存器在顶部, 接着是多层的硬件高速缓存存储器, DRAM 主存和磁盘存储器")]),t._v(". 在层次模型中, 位于更高层的存储设备比低层的存储设备要更快, 单位比特造价也更高. 层次结构中较高层次的存储设备可以作为较低层次设备的高速缓存. 通过理解和运用这种存储层次结构的知识, 程序员可以优化 C 程序的性能.")]),t._v(" "),s("p",[s("mark",[s("strong",[t._v("操作系统内核是应用程序和硬件之间的媒介. 它提供三个基本的抽象∶ (1)文件是对 I/O 设备的抽象; (2)虚拟内存是对主存和磁盘的抽象; (3)进程是处理器, 主存和 I/O 设备的抽象")])]),t._v("​"),s("mark",[t._v(".")])]),t._v(" "),s("p",[t._v("最后, 网络提供了计算机系统之间通信的手段. 从特殊系统的角度来看, 网络就是一种 I/O 设备.")]),t._v(" "),s("p",[t._v("第二部分-在系统上运行程序")]),t._v(" "),s("h3",{attrs:{id:"_7-链接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-链接"}},[t._v("#")]),t._v(" 7.链接")]),t._v(" "),s("p",[t._v("继续对计算机系统的探索, 进一步来看看构建和运行应用程序的系统软件. "),s("strong",[t._v("链接器把程序的各个部分联合成一个文件, 处理器可以将这个文件加载到内存, 并且执行它. 现代操作系统与硬件合作, 为每个程序提供一种幻象, 好像这个程序是在独占地使用处理器和主存, 而实际上, 在任何时刻, 系统上都有多个程序在运行.")])]),t._v(" "),s("p",[t._v("在本书的第一部分, 你很好地理解了程序和硬件之间的交互关系. 本书的第二部分将拓宽对系统的了解, 使你牢固地掌握程序和操作系统之间的交互关系. 你将学习到如何"),s("strong",[t._v("使用操作系统提供的服务来构建系统级程序")]),t._v(", 例如 Unix shell 和动态内存分配包.")]),t._v(" "),s("p",[s("mark",[s("strong",[t._v("链接")])]),t._v("​"),s("mark",[t._v("(linking)是将各种代码和数据片段收集并组合成为一个单一文件的过程, 这个文件可被")]),t._v("​"),s("mark",[s("strong",[t._v("加载")])]),t._v("​"),s("mark",[t._v("(复制)到内存并执行. 链接可以执行于")]),t._v("​"),s("mark",[s("strong",[t._v("编译时")])]),t._v("​"),s("mark",[t._v("(compile time), 也就是在源代码被翻译成机器代码时; 也可以执行于")]),t._v("​"),s("mark",[s("strong",[t._v("加载时")])]),t._v("​"),s("mark",[t._v("(load time), 也就是在程序被")]),t._v("​"),s("mark",[s("strong",[t._v("加载器")])]),t._v("​"),s("mark",[t._v("(loader)加载到内存并执行时; 甚至执行于")]),t._v("​"),s("mark",[s("strong",[t._v("运行时")])]),t._v("​"),s("mark",[t._v("(runtime), 也就是由应用程序来执行. 在早期的计算机系统中, 链接是手动执行的. 在现代系统中, 链接是由叫做")]),t._v("​"),s("mark",[s("strong",[t._v("链接器")])]),t._v("​"),s("mark",[t._v("(linker)的程序自动执行的.")])]),t._v(" "),s("p",[s("strong",[t._v("链接器")]),t._v("在软件开发中扮演着一个关键的角色, 因为它们使得"),s("strong",[t._v("分离编译")]),t._v("(separate compilation)成为可能. 不用将一个大型的应用程序组织为一个巨大的源文件, 而是可以把它分解为更小, 更好管理的"),s("strong",[t._v("模块")]),t._v(", 可以独立地修改和编译这些模块. 当改变这些模块中的一个时, 只需简单地"),s("strong",[t._v("重新编译它, 并重新链接应用, 而不必重新编译其他文件")]),t._v(".")]),t._v(" "),s("blockquote",[s("p",[t._v("为什么要学习链接?")])]),t._v(" "),s("p",[t._v("链接通常是由链接器来默默地处理的, 对于那些在编程入门课堂上构造小程序的学生而言, 链接不是一个重要的议题. 那为什么还要这么麻烦地学习关于链接的知识呢?")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("理解链接器将帮助你构造大型程序.")]),t._v("  构造大型程序的程序员经常会遇到由于缺少模块, "),s("strong",[t._v("缺少库或者不兼容的库版本引起的链接器错误")]),t._v(". 除非你理解链接器是如何解析引用, 什么是库以及链接器是如何使用库来解析引用的, 否则这类错误将令你感到迷惑和挫败.")]),t._v(" "),s("li",[s("strong",[t._v("理解链接器将帮助你避免一些危险的编程错误.")]),t._v("  Linux 链接器解析符号引用时所做的决定可以不动声色地影响你程序的正确性. 在默认情况下, 错误地定义多个全局变量的程序将通过链接器, 而不产生任何警告信息. 由此得到的程序会产生令人迷惑的运行时行为, 而且非常难以调试. 本章将展示这是如何发生的, 以及该如何避免它.")]),t._v(" "),s("li",[s("strong",[t._v("理解链接将帮助你理解语言的作用域规则是如何实现的.")]),t._v("  例如, 全局和局部变量之间的区别是什么? 当定义一个具有 static 属性的变量或者函数时, 实际到底意味着什么?")]),t._v(" "),s("li",[s("strong",[t._v("理解链接将帮助你理解其他重要的系统概念.")]),t._v("  链接器产生的可执行目标文件在重要的系统功能中扮演着关键角色, 比如加载和运行程序, 虚拟内存, 分页, 内存映射.")]),t._v(" "),s("li",[s("strong",[t._v("理解链接将使你能够利用共享库.")]),t._v("  多年以来, 链接都被认为是相当简单和无趣的. 然而随着共享库和动态链接在现代操作系统中重要性的日益加强, 链接成为一个复杂的过程, 为掌握它的程序员提供了强大的能力. 比如许多软件产品在运行时使用共享库来升级压缩包装的(shrink-wrapped)二进制程序. 还有大多数 Web 服务器都依赖于共享库的动态链接来提供动态内容.")])]),t._v(" "),s("p",[t._v("本章提供了关于链接各方面的全面讨论, "),s("strong",[t._v("从传统静态链接到加载时的共享库的动态链接, 以及到运行时的共享库的动态链接")]),t._v(". 本章将使用实际示例来描述基本的机制, 而且指出链接问题在哪些情况中会影响程序的性能和正确性. 为了使描述具体和便于理解, 本章的讨论是基于这样的环境: "),s("strong",[t._v("一个运行 Linux 的 x86-64 系统, 使用标准的 ELF-64(此后称为 ELF)目标文件格式")]),t._v(". 不过, 无论是什么样的操作系统, ISA 或者目标文件格式, 基本的链接概念是通用的, 认识到这一点是很重要的. 细节可能不尽相同, 但是概念是相同的.")]),t._v(" "),s("h4",{attrs:{id:"编译器驱动程序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编译器驱动程序"}},[t._v("#")]),t._v(" 编译器驱动程序")]),t._v(" "),s("p",[t._v("考下面的 C 语言程序. 它将作为贯穿本章的一个小的运行示例, 以说明关于链接是如何工作的一些重要知识点. 这个示例程序由两个源文件组成, main.c 和 sum.c. main 函数初始化一个整数数组, 然后调用 sum 函数来对数组元素求和.")]),t._v(" "),s("blockquote",[s("p",[t._v("main.c")])]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" val "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("blockquote",[s("p",[t._v("sum.c")])]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("p",[t._v("大多数编译系统提供"),s("strong",[t._v("编译器驱动程序")]),t._v("(compiler driver), 它代表用户在需要时调用"),s("strong",[t._v("语言预处理器, 编译器, 汇编器和链接器")]),t._v(". 比如, 要用 GNU 编译系统构造示例程序, 就要通过在 shell 中输入下列命令来"),s("strong",[t._v("调用 GCC 驱动程序")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" gcc "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-Og")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-o")]),t._v(" prog main.c sum.c\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("下图概括了驱动程序在将示例程序"),s("strong",[t._v("从 ASCII 码源文件翻译成可执行目标文件时的行为")]),t._v(". (如果你想看看这些步骤, 用  "),s("strong",[t._v("-v")]),t._v(" 选项来运行 GCC.) 驱动程序首先运行 C 预处理器(cpp), 它将 C 的源程序 main.c 翻译成一个 ASCII 码的中间文件 main.i:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("cpp "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("other arguments"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("tmp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("i\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("img",{attrs:{src:"/img/image-20230806173016-2l516pd.png",alt:"image",title:"静态链接"}})]),t._v(" "),s("p",[t._v("接下来, 驱动程序运行 C 编译器(cc1), 它将 main.i 翻译成一个 ASCII 汇编语言文件 main.s:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("cc1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("tmp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Og "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("other arguments"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("o "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("tmp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("s\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("然后, 驱动程序运行汇编器(as), 它将 main.s 翻译成一个"),s("strong",[t._v("可重定位目标文件")]),t._v("(relocatable object file) main.o:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("as "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("other arguments"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("o "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("tmp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("o "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("tmp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("s\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("驱动程序经过相同的过程生成 sum.o. 最后, 它运行链接器程序 ld, "),s("strong",[t._v("将 main.o 和 sum.o 以及一些必要的系统目标文件组合起来")]),t._v(", 创建一个"),s("strong",[t._v("可执行目标文件")]),t._v("(executable object file)prog:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("ld "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("o prog "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("system object files and args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("tmp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("o "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("tmp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("sum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("o\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("要运行可执行文件 prog, 在 Linux shell 的命令行上输入它的名字:")]),t._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ./prog\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("shell 调用操作系统中一个叫做"),s("strong",[t._v("加载器")]),t._v("(loader)的函数, 它将可执行文件 prog 中的代码和数据复制到内存, 然后将控制转移到这个程序的开头.")]),t._v(" "),s("h4",{attrs:{id:"静态链接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#静态链接"}},[t._v("#")]),t._v(" 静态链接")]),t._v(" "),s("p",[t._v("像 Linux LD 程序这样的"),s("strong",[t._v("静态链接器")]),t._v("(static linker)以一组"),s("strong",[t._v("可重定位目标文件和命令行参数作为输入, 生成一个完全链接的, 可以加载和运行的可执行目标文件作为输出")]),t._v(". 输入的可重定位目标文件由各种不同的"),s("strong",[t._v("代码和数据节")]),t._v("(section)组成, 每一节都是一个连续的字节序列. 指令在一节中, 初始化了的全局变量在另一节中, 而未初始化的变量又在另外一节中.")]),t._v(" "),s("p",[t._v("为了构造可执行文件, "),s("strong",[t._v("链接器必须完成两个主要任务")]),t._v(":")]),t._v(" "),s("ul",[s("li",[s("mark",[s("strong",[t._v("符号解析(symbol resolution)")])]),t._v("​ "),s("strong",[t._v(".")]),t._v(" "),s("strong",[s("strong",[t._v("目标文件定义和引用符号, 每个符号对应于一个函数, 一个全局变量或一个")])]),t._v("​"),s("strong",[t._v("静态变量")]),t._v("(即 C 语言中任何以 static 属性声明的变量). 符号解析的目的是将每个符号引用正好和一个符号定义关联起来.")]),t._v(" "),s("li",[s("mark",[s("strong",[t._v("重定位(relocation)")])]),t._v("​ "),s("strong",[t._v(".")]),t._v(" "),s("strong",[s("strong",[t._v("编译器和汇编器生成从地址 0 开始的代码和数据节. 链接器通过把每个符号定义与一个内存位置关联起来, 从而重定位这些节, 然后修改所有对这些符号的引用, 使得它们指向这个内存位置. 链接器使用汇编器产生的")])]),t._v("​"),s("strong",[t._v("重定位条目")]),t._v("的详细指令, 不加甄别地执行这样的重定位.")])]),t._v(" "),s("p",[t._v("接下来的章节将更加详细地描述这些任务. 阅读的时候, 要记住关于链接器的一些基本事实: "),s("strong",[t._v("目标文件纯粹是字节块的集合. 这些块中, 有些包含程序代码, 有些包含程序数据, 而其他的则包含引导链接器和加载器的数据结构. 链接器将这些块连接起来, 确定被连接块的运行时位置, 并且修改代码和数据块中的各种位置. 链接器对目标机器了解甚少. 产生目标文件的编译器和汇编器已经完成了大部分工作")]),t._v(".")]),t._v(" "),s("h4",{attrs:{id:"目标文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#目标文件"}},[t._v("#")]),t._v(" 目标文件")]),t._v(" "),s("p",[t._v("目标文件有三种形式:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("可重定位目标文件.")]),t._v("  包含二进制代码和数据, 其形式可以在编译时与其他可重定位目标文件合并起来, 创建一个可执行目标文件.")]),t._v(" "),s("li",[s("strong",[t._v("可执行目标文件.")]),t._v("  包含二进制代码和数据, 其形式可以被"),s("strong",[t._v("直接复制到内存并执行")]),t._v(".")]),t._v(" "),s("li",[s("strong",[t._v("共享目标文件.")]),t._v("  一种特殊类型的可重定位目标文件, 可以在加载或者运行时被"),s("strong",[t._v("动态地加载进内存并链接")]),t._v(".")])]),t._v(" "),s("p",[s("mark",[s("strong",[t._v("编译器和汇编器生成可重定位目标文件(包括共享目标文件). 链接器生成可执行目标文件")])]),t._v(". 从技术上来说, 一个"),s("strong",[t._v("目标模块")]),t._v("(object module)就是一个字节序列, 而一个"),s("strong",[t._v("目标文件")]),t._v("(object file)就是一个以文件形式存放在磁盘中的目标模块. 不过, 一般会互换地使用这些术语.")]),t._v(" "),s("p",[s("strong",[t._v("目标文件是按照特定的目标文件格式来组织的, 各个系统的目标文件格式都不相同")]),t._v(". 从贝尔实验室诞生的第一个 Unix 系统使用的是 a.out 格式(直到今天, 可执行文件仍然称为 a.out 文件). Windows 使用可移植可执行(Portable Executable, PE)格式. MacOS-X 使用 Mach-O 格式. 现代 x86-64 Linux 和 Unix 系统使用可执行可链接格式(Executable and Linkable Format, ELF). 尽管讨论集中在 ELF 上, 但是不管是哪种格式, 基本的概念是相似的.")]),t._v(" "),s("h4",{attrs:{id:"可重定位目标文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可重定位目标文件"}},[t._v("#")]),t._v(" 可重定位目标文件")]),t._v(" "),s("p",[t._v("下图展示了一个"),s("strong",[t._v("典型的 ELF 可重定位目标文件的格式")]),t._v(". "),s("strong",[t._v("ELF 头")]),t._v("(ELF header)以一个 16 字节的序列开始, 这个序列描述了生成该文件的系统的字的大小和字节顺序. ELF 头剩下的部分包含帮助链接器语法分析和解释目标文件的信息. 其中包括 ELF 头的大小, 目标文件的类型(如可重定位, 可执行或者共享的), 机器类型(如 X86-64), "),s("strong",[t._v("节头部表")]),t._v("(section header table)的文件偏移, 以及节头部表中条目的大小和数量. 不同节的位置和大小是由节头部表描述的, 其中目标文件中每个节都有一个固定大小的"),s("strong",[t._v("条目")]),t._v("(entry).")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230806174149-s4g3oxu.png",alt:"image",title:"典型的ELF可重定位目标文件"}})]),t._v(" "),s("p",[t._v("夹在 ELF 头和节头部表之间的都是"),s("strong",[t._v("节")]),t._v(". 一个典型的 ELF 可重定位目标文件包含下面几个节:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v(".text:")]),t._v("  已编译程序的"),s("strong",[t._v("机器代码")]),t._v(".")]),t._v(" "),s("li",[s("strong",[t._v(".rodata:")]),t._v("  只读数据, 比如 printf 语句中的格式串和开关语句的跳转表.")]),t._v(" "),s("li",[s("strong",[t._v(".data:")]),t._v("  已"),s("strong",[t._v("初始化的全局和静态 C 变量")]),t._v(". 局部 C 变量在运行时被保存在栈中, 既不岀现在 .data 节中, 也不岀现在 .bss 节中.")]),t._v(" "),s("li",[s("strong",[t._v(".bss:")]),t._v("  未初始化的全局和静态 C 变量, 以及所有被初始化为 0 的全局或静态变量. 在目标文件中这个节不占据实际的空间, 它仅仅是一个占位符. 目标文件格式区分已初始化和未初始化变量是为了空间效率: 在目标文件中, 未初始化变量不需要占据任何实际的磁盘空间. 运行时在内存中分配这些变量, 初始值为 0.")]),t._v(" "),s("li",[s("strong",[t._v(".symtab:")]),t._v("  一个符号表, 它存放在程序中定义和引用的"),s("strong",[t._v("函数和全局变量的信息")]),t._v(". 一些程序员错误地认为必须通过 -g 选项来编译一个程序, 才能得到符号表信息. 实际上, 每个可重定位目标文件在 .symtab 中都有一张符号表(除非程序员特意用 STRIP 命令去掉它). 然而和编译器中的符号表不同, .symtab 符号表不包含局部变量的条目.")]),t._v(" "),s("li",[s("strong",[t._v(".rel.text:")]),t._v("  一个 .text 节中位置的列表, 当链接器把这个目标文件和其他文件组合时, 需要修改这些位置. 一般而言, 任何调用外部函数或者引用全局变量的指令都需要修改. 另一方面, 调用本地函数的指令则不需要修改. 注意, 可执行目标文件中并不需要重定位信息, 因此通常省略, 除非用户显式地指示链接器包含这些信息.")]),t._v(" "),s("li",[s("strong",[t._v(".rel.data:")]),t._v("  被模块引用或定义的所有全局变量的重定位信息. 一般而言, 任何已初始化的全局变量, 如果它的初始值是一个全局变量地址或者外部定义函数的地址, 都需要被修改.")]),t._v(" "),s("li",[s("strong",[t._v(".debug:")]),t._v("  一个调试符号表, 其条目是程序中定义的局部变量和类型定义, 程序中定义和引用的全局变量, 以及原始的 C 源文件. 只有以 -g 选项调用编译器驱动程序时, 才会得到这张表.")]),t._v(" "),s("li",[s("strong",[t._v(".line:")]),t._v("  原始 C 源程序中的行号和 .text 节中机器指令之间的映射. 只有以 -g 选项调用编译器驱动程序时, 才会得到这张表.")]),t._v(" "),s("li",[s("strong",[t._v(".strtab:")]),t._v("  一个字符串表, 其内容包括 .symtab 和 .debug 节中的符号表, 以及节头部中的节名字. 字符串表就是以 null 结尾的字符串的序列.")])]),t._v(" "),s("h4",{attrs:{id:"符号和符号表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#符号和符号表"}},[t._v("#")]),t._v(" 符号和符号表")]),t._v(" "),s("p",[t._v("每个可重定位目标模块 m 都有一个"),s("strong",[t._v("符号表")]),t._v(", 它"),s("strong",[t._v("包含 m 定义和引用的符号的信息")]),t._v(". 在链接器的上下文中, 有三种不同的符号:")]),t._v(" "),s("ul",[s("li",[t._v("由模块 m 定义并能被其他模块引用的"),s("strong",[t._v("全局符号")]),t._v(". 全局链接器符号对应于非静态的 C 函数和全局变量.")]),t._v(" "),s("li",[t._v("由其他模块定义并被模块 m 引用的"),s("strong",[t._v("全局符号")]),t._v(". 这些符号称为外部符号, 对应于在其他模块中定义的非静态 C 函数和全局变量.")]),t._v(" "),s("li",[t._v("只被模块 m 定义和引用的"),s("strong",[t._v("局部符号")]),t._v(". 它们对应于带 static 属性的 C 函数和全局变量. 这些符号在模块 m 中任何位置都可见, 但是不能被其他模块引用.")])]),t._v(" "),s("p",[t._v("认识到"),s("strong",[t._v("本地链接器符号和本地程序变量不同")]),t._v("是很重要的. .symtab 中的符号表不包含对应于本地非静态程序变量的任何符号. 这些符号在运行时在栈中被管理, 链接器对此类符号不感兴趣.")]),t._v(" "),s("p",[t._v("有趣的是, 定义为带有 C static 属性的本地过程变量是不在栈中管理的. 相反, 编译器在 .data 或 .bss 中为每个定义分配空间, 并在符号表中创建一个有唯一名字的本地链接器符号. 比如, 假设在同一模块中的两个函数各自定义了一个静态局部变量 x:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("g")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])]),s("p",[t._v("在这种情况中, 编译器向汇编器输出两个不同名字的局部链接器符号. 比如, 它可以用 x.1 表示函数 f 中的定义, 而用 x.2 表示函数 g 中的定义.")]),t._v(" "),s("blockquote",[s("p",[t._v("给 C 语言初学者 - 利用 static 属性隐藏变量和函数名字")])]),t._v(" "),s("p",[t._v("C 程序员使用 static 属性隐藏模块内部的变量和函数声明, 就像在 Java 和 C++ 中使用 public 和 private 声明一样. 在 C 中, 源文件扮演模块的角色. "),s("strong",[t._v("任何带有 static 属性声明的全局变量或者函数都是模块私有的")]),t._v(". 类似地, 任何不带 static 属性声明的全局变量和函数都是公共的, 可以被其他模块访问. 尽可能用 static 属性来保护你的变量和函数是很好的编程习惯.")]),t._v(" "),s("p",[s("strong",[t._v("符号表是由汇编器构造的, 使用编译器输出到汇编语言 .s 文件中的符号")]),t._v(". .symtab 节中包含 ELF 符号表. 这张符号表包含一个条目的数组. 下面展示了每个条目的格式. type 和 binding 字段每个都是 4 位.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v("     name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* String table offset */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v("    type"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Function or data (4 bits) */")]),t._v("\n            binding"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Local or global (4 bits) */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v("    reserved"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Unused */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),t._v("   section"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Section header index */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v("    value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Section offset or absolute address */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v("    size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Object size in bytes */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" Elf64_Symbol"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("p",[s("strong",[t._v("name 是字符串表中的字节偏移")]),t._v(", 指向符号的以 null 结尾的字符串名字. value 是符号的地址. 对于可重定位的模块来说, value 是距定义目标的节的起始位置的偏移. 对于可执行目标文件来说, 该值是一个绝对运行时地址. size 是目标的大小(以字节为单位). type 通常要么是数据, 要么是函数. "),s("strong",[t._v("符号表还可以包含各个节的条目, 以及对应原始源文件的路径名的条目")]),t._v(". 所以这些目标的类型也有所不同. binding 字段表示符号是本地的还是全局的.")]),t._v(" "),s("p",[s("strong",[t._v("每个符号都被分配到目标文件的某个节")]),t._v(", 由 section 字段表示, 该字段也是一个到节头部表的索引. 有三个特殊的伪节(pseudosection), 它们在节头部表中是没有条目的: ABS 代表不该被重定位的符号; UNDEF 代表未定义的符号, 也就是在本目标模块中引用, 但是却在其他地方定义的符号; COMMON 表示还未被分配位置的未初始化的数据目标. 对于 COMMON 符号, value 字段给出对齐要求, 而 size 给出最小的大小. 注意, 只有可重定位目标文件中才有这些伪节, 可执行目标文件中是没有的.")]),t._v(" "),s("p",[t._v("COMMON 和 .bss 的区别很细微. 现代的 GCC 版本根据以下规则来将可重定位目标文件中的符号分配到 COMMON 和 .bss 中:")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}}),t._v(" "),s("th",{staticStyle:{"text-align":"left"}})])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("COMMON")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("未初始化的全局变量")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v(".bss")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("未初始化的静态变量, 以及初始化为 0 的全局或静态变量")])])])]),t._v(" "),s("p",[t._v("釆用这种看上去很绝对的区分方式的原因来自于链接器执行符号解析的方式, 后面会在符号解析部分加以解释.")]),t._v(" "),s("p",[t._v("GNU READELF 程序是一个査看目标文件内容的很方便的工具. 比如下面是前面示例程序的可重定位目标文件 main.o 的符号表中的最后三个条目. 开始的 8 个条目没有显示出来, 它们是链接器内部使用的局部符号.")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"right"}},[t._v("Num:")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("Value")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("Size")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("Type")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("Bind")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("Vis")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("Ndx")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("Name")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"right"}},[t._v("8:")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("0000000000000000")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("24")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("FUNC")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("GLOBAL")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("DEFAULT")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("main")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"right"}},[t._v("9:")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("0000000000000000")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("8")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("OBJECT")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("GLOBAL")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("DEFAULT")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("3")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("array")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"right"}},[t._v("10:")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("0000000000000000")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("0")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("NOTYPE")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("GLOBAL")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("DEFAULT")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("UND")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("sum")])])])]),t._v(" "),s("p",[t._v("在这个例子中, 可以看到全局符号 main 定义的条目, 它是一个位于 .text 节中偏移量为 0(即 value 值)处的 24 字节函数. 其后跟随着的是"),s("strong",[t._v("全局符号 array 的定义")]),t._v(", 它是一个位于 .data 节中偏移量为 0 处的 8 字节目标. 最后一个条目来自对外部符号 sum 的引用. READELF 用一个整数索引来标识每个节. Ndx=1 表示 .text 节, 而 Ndx=3 表示 .data 节.")]),t._v(" "),s("h4",{attrs:{id:"符号解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#符号解析"}},[t._v("#")]),t._v(" 符号解析")]),t._v(" "),s("p",[s("strong",[t._v("链接器解析符号引用的方法是将每个引用与它输入的可重定位目标文件的符号表中的一个确定的符号定义关联起来")]),t._v(". 对那些和引用定义在相同模块中的局部符号的引用, 符号解析是非常简单明了的. 编译器只允许每个模块中每个局部符号有一个定义. 静态局部变量也会有本地链接器符号, 编译器还要确保它们拥有唯一的名字.")]),t._v(" "),s("p",[t._v("不过, 对全局符号的引用解析就棘手得多. "),s("strong",[t._v("当编译器遇到一个不是在当前模块中定义的符号(变量或函数名)时, 会假设该符号是在其他某个模块中定义的, 生成一个链接器符号表条目, 并把它交给链接器处理. 如果链接器在它的任何输入模块中都找不到这个被引用符号的定义, 就输出一条(通常很难阅读的)错误信息并终止")]),t._v(". 比如, 如果试着在一台 Linux 机器上编译和链接下面的源文件:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("那么编译器会没有障碍地运行, 但是当链接器"),s("strong",[t._v("无法解析对 foo 的引用")]),t._v("时, 就会终止:")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" gcc "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-Wall")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-Og")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-o")]),t._v(" linkerror linkerror.c\n/tmp/ccSz5uti.o: In "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'main'")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v("\n/tmp/ccSzSuti.o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(".text+0x7"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(": undefined reference to "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("对全局符号的符号解析很棘手, 还因为"),s("strong",[t._v("多个目标文件可能会定义相同名字的全局符号")]),t._v(". 在这种情况中, 链接器必须要么标志一个错误, 要么以某种方法选出一个定义并抛弃其他定义. Linux 系统采纳的方法涉及编译器, 汇编器和链接器之间的协作, 这样也可能给不警觉的程序员带来一些麻烦.")]),t._v(" "),s("blockquote",[s("p",[t._v("旁注: 对C++和Java中链接器符号的重整")])]),t._v(" "),s("p",[t._v("C++ 和 Java 都允许"),s("strong",[t._v("重载方法")]),t._v(", 这些方法在源代码中有相同的名字, 却有不同的"),s("strong",[t._v("参数列表")]),t._v(". 那么链接器是如何区别这些不同的重载函数之间的差异呢? C++ 和 Java 中能使用重载函数, 是因为编译器将"),s("strong",[t._v("每个唯一的方法和参数列表组合编码成一个对链接器来说唯一的名字. 这种编码过程叫做重整(mangling), 而相反的过程叫做恢复(demangling)")]),t._v(" .")]),t._v(" "),s("p",[t._v("幸运的是, C++ 和 Java 使用兼容的重整策略. 一个被重整的类名字是由名字中字符的整数数量, 后面跟原始名字组成的. 比如, 类 Foo 被编码成 3Foo. 方法被编码为原始方法名, 后面加上 __, 加上被重整的类名, 再加上每个参数的单字母编码. 比如, Foo::bar(int, long) 被编码为 bar__3Fooil. 重整全局变量和模板名字的策略是相似的.")]),t._v(" "),s("h5",{attrs:{id:"_1-链接器如何解析多重定义的全局符号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-链接器如何解析多重定义的全局符号"}},[t._v("#")]),t._v(" 1.链接器如何解析多重定义的全局符号")]),t._v(" "),s("p",[t._v("链接器的输入是"),s("strong",[t._v("一组可重定位目标模块")]),t._v(". 每个模块定义一组符号, 有些是"),s("strong",[t._v("局部")]),t._v("的(只对定义该符号的模块可见), 有些是"),s("strong",[t._v("全局")]),t._v("的(对其他模块也可见). 如果多个模块定义同名的全局符号, 会发生什么呢? 下面是 Linux 编译系统采用的方法.")]),t._v(" "),s("p",[s("strong",[t._v("在编译时, 编译器向汇编器输岀每个全局符号, 或者是强(strong)或者是弱(weak), 而汇编器把这个信息隐含地编码在可重定位目标文件的符号表里. 函数和已初始化的全局变量是强符号, 未初始化的全局变量是弱符号.")])]),t._v(" "),s("p",[t._v("根据强弱符号的定义, Linux 链接器使用下面的规则来处理多重定义的符号名:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("规则 1:")]),t._v("  不允许有多个同名的强符号.")]),t._v(" "),s("li",[s("strong",[t._v("规则 2:")]),t._v("  如果有一个强符号和多个弱符号同名, 那么选择强符号.")]),t._v(" "),s("li",[s("strong",[t._v("规则 3:")]),t._v("  如果有多个弱符号同名, 那么从这些弱符号中任意选择一个.")])]),t._v(" "),s("p",[t._v("比如, 假设试图编译和链接下面两个 C 模块:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* foo1.c */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* bar1.c */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("在这个情况中, 链接器将生成一条错误信息, 因为"),s("strong",[t._v("强符号 main 被定义了多次")]),t._v("(规则 1):")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" gcc foo1.c bar1.c\n/tmp/ccq2Uxnd.o: In "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'main'")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v("\nbar1.c:"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(".text+0x9"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(": multiple definition of "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'main'")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("相似地, 链接器对于下面的模块也会生成一条错误信息, 因为"),s("strong",[t._v("强符号 x 被定义了两次")]),t._v("(规则 1):")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* foo2.c */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15213")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* bar2.c */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15213")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("然而, 如果在一个模块里 x 未被初始化, 那么链接器将安静地选择在"),s("strong",[t._v("另一个模块中定义的强符号")]),t._v("(规则 2):")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* foo3.c */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// x初始化")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15213")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"x = %d\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br")])]),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* bar3.c */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// x未初始化")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15212")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("p",[t._v("在运行时, 函数 f 将 x 的值"),s("strong",[t._v("由 15213 改为 15212")]),t._v(", 这会给 main 函数的作者带来不受欢迎的意外! 注意, 链接器通常不会表明它检测到多个 x 的定义:")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" gcc "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-o")]),t._v(" foobar3 foo3.c bar3.c\nlinux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ./foobar3\nx "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15212")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("如果 x 有"),s("strong",[t._v("两个弱定义")]),t._v(", 也会发生相同的事情(规则 3):")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* foo4.c */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// x弱定义")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15213")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"x = %d\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br")])]),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* bar4.c */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// x弱定义")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15212")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("p",[t._v("规则 2 和规则 3 的应用会造成一些不易察觉的运行时错误, 对于不警觉的程序员来说, 是很难理解的, 尤其是如果重复的符号定义还有不同的类型时. 考虑下面这个例子, 其中 x 不幸地在一个模块中定义为 int, 而在另一个模块中定义为 double:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* foo5.c */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15212")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15213")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"x = 0x%x y = 0x%x \\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br")])]),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* bar5.c */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[t._v("在一台 x86-64/Linux 机器上, double 类型是 8 个字节, 而 int 类型是 4 个字节. 在我们的系统中, x 的地址是 0x601020, y 的地址是 0x601024. 因此, bar5.c 的第 6 行中的赋值 x = -0.0 将用负零的双精度浮点表示覆盖内存中 x 和 y 的位置(foo5.c 中的第 5 行和第 6 行)!")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" gcc "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-Wall")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-Og")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-o")]),t._v(" foobar5 foo5. c bar5 .c\n/usr/bin/ld: Warning: alignment "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" of symbol "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'x'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" /tmp/cclUFK5g.o\nis smaller than "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" /tmp/ccbTLcb9.o\nlinux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ./foobar5\nx "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 0x0 y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 0x80000000\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("这是一个细微而令人讨厌的错误, 尤其是因为它"),s("strong",[t._v("只会触发链接器发出一条警告")]),t._v(", 而且通常要在程序执行很久以后才表现出来, 且远离错误发生地. 在一个拥有成百上千个模块的大型系统中, 这种类型的错误相当难以修正, 尤其因为许多程序员根本不知道链接器是如何工作的. 当你怀疑有此类错误时, 用像 GCC-fno-common 标志这样的选项调用链接器, 这个选项会告诉链接器, 在遇到多重定义的全局符号时, 触发一个错误. 或者使用 -Werror 选项, 它会把所有的警告都变为错误.")]),t._v(" "),s("p",[t._v("在 7.5 节中, 看到了编译器如何按照一个看似绝对的规则来把符号分配为 COMMON 和 .bss. 实际上, 采用这个惯例是由于在某些情况中链接器允许多个模块定义向名能全局符号. 当编译器在翻译某个模块时, 遇到一个弱全局符号, 比如说 x, 它并不知道其他模块是否也定义了 x, 如果是, 它无法预测链接器该使用 x 的多重定义中的哪一个. 所以编祥器把 x 分配成 COMMON, 把决定权留给链接器. 另一方面, 如果 x 初始化为 0, 那么它是一个强符号(因此根据规则 2 必须是唯一的), 所以编译器可以很自信地将它分配成 .bss. 类似地, 静态符号的构造就必须是唯一的, 所以编译器可以自信地把它们分配成 .data 或 .bss.")]),t._v(" "),s("h5",{attrs:{id:"_2-与静态链接库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-与静态链接库"}},[t._v("#")]),t._v(" 2.与静态链接库")]),t._v(" "),s("p",[t._v("迄今为止, 都是"),s("strong",[t._v("假设链接器读取一组可重定位目标文件, 并把它们链接起来, 形成一个输出的可执行文件")]),t._v(". 实际上, 所有的编译系统都提供一种机制, 将"),s("strong",[t._v("所有相关的目标模块打包成为一个单独的文件")]),t._v(", 称为"),s("strong",[t._v("静态库")]),t._v("(staticlibrary), 它可以用做链接器的"),s("strong",[t._v("输入")]),t._v(". 当链接器"),s("strong",[t._v("构造一个输出的可执行文件时, 它只复制静态库里被应用程序引用的目标模块")]),t._v(".")]),t._v(" "),s("p",[t._v("为什么系统要支持库的概念呢? 以 ISO C99 为例, 它定义了一组广泛的标准 I/O, 字符串操作和整数数学函数, 例如 "),s("strong",[t._v("atoi, printf, scanf, strcpy 和 rand")]),t._v(". 它们在 libc.a 库中, 对每个 C 程序来说都是可用的. ISO C99 还在 libm.a 库中定义了一组广泛的浮点数学函数, 例如 sin, cos 和 sqrt.")]),t._v(" "),s("p",[t._v("来看看如果不使用静态库, 编译器开发人员会使用什么方法来向用户提供这些函数. "),s("strong",[t._v("一种方法是让编译器辨认出对标准函数的调用, 并直接生成相应的代码")]),t._v(". Pascal(只提供了一小部分标准函数)釆用的就是这种方法, 但是这种方法对 C 而言是不合适的, 因为 C 标准定义了大量的标准函数. 这种方法将给编译器增加显著的复杂性, "),s("strong",[t._v("而且每次添加, 删除或修改一个标准函数时, 就需要一个新的编译器版本")]),t._v(". 然而, 对于应用程序员而言, 这种方法会是非常方便的, 因为标准函数将总是可用的.")]),t._v(" "),s("p",[t._v("另一种方法是"),s("strong",[t._v("将所有的标准 C 函数都放在一个单独的可重定位目标模块中(比如说 libc.o 中)应用程序员可以把这个模块链接到他们的可执行文件")]),t._v("中:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" gcc main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("usr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("lib"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("libc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("o\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("这种方法的优点是"),s("strong",[t._v("它将编译器的实现与标准函数的实现分离开来, 并且仍然对程序员保持适度的便利")]),t._v(". 然而, 一个很大的缺点是系统中每个可执行文件现在都包含着一份标准: "),s("strong",[t._v("函数. 集合的完全副本")]),t._v(", 这对磁盘空间是很大的浪费. (在一个典型的系统上, libc.a 大约是 5MB, 而 libm.a 大约是 2MB.) 更糟的是, 每个正在运行的程序都将它自己的这些函数的副本放在内存中, 这是对内存的极度浪费. 另一个大的缺点是, 对任何标准函数的任何改变, 无论多么小的改变, 都要求库的开发人员重新编译整个源文件, 这是一个非常耗时的操作, 使得标准函数的开发和维护变得很复杂.")]),t._v(" "),s("p",[t._v("可以通过为每个标准函数创建一个独立的可重定位文件, 把它们存放在一个为大家都知道的目录中来解决其中的一些问题. 然而, 这种方法要求应用程序员显式地链接合适的目标模块到它们的可执行文件中, 这是一个容易出错而且耗时的过程:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" gcc main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("usr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("lib"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("printf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("o "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("usr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("lib"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("scanf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("o "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v("静态库概念被提出来, 以解决这些不同方法的缺点")]),t._v(". "),s("mark",[s("strong",[t._v("相关的函数可以被编译为独立的目标模块, 然后封装成一个单独的静态库文件. 然后, 应用程序可以通过在命令行上指定单独的文件名字来使用这些在库中定义的函数")])]),t._v(". 比如, 使用 C 标准库和数学库中函数的程序可以用形式如下的命令行来编译和链接:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" gcc main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("usr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("lib"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("libm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("usr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("lib"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("libc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("在链接时, 链接器"),s("strong",[t._v("将只复制被程序引用的目标模块")]),t._v(", 这就减少了可执行文件在磁盘和内存中的大小. 另一方面, 应用程序员只需要包含较少的库文件的名字(实际上, C 编译器驱动程序总是传送 libc.a 给链接器, 所以前面提到的对 libc.a 的引用是不必要的).")]),t._v(" "),s("p",[t._v("在 Linux 系统中, 静态库以一种称为"),s("strong",[t._v("存档")]),t._v("(archive)的特殊文件格式存放在"),s("strong",[t._v("磁盘")]),t._v("中. "),s("strong",[t._v("存档文件是一组连接起来的可重定位目标文件的集合, 有一个头部用来描述每个成员目标文件的大小和位置. 存档文件名由后缀 .a 标识")]),t._v(".")]),t._v(" "),s("p",[t._v("为了使得对库的讨论更加形象具体, 考虑下列代码中的两个向量例程. 每个例程, 定义在它自己的目标模块中, 对两个输入向量进行一个向量操作, 并把结果存放在一个输出向量中. 每个例程有一个副作用, 会记录它自己被调用的次数, 每次被调用会把一个全局变量加 1. (当在 7.12 节中解释位置无关代码的思想时会起作用.)")]),t._v(" "),s("blockquote",[s("p",[t._v("libvector 库中的成员目标文件代码")])]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" addcnt "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addvec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("z"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n    addcnt"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        z"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br")])]),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" multcnt "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("multvec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n             "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("z"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    multcnt"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        z"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br")])]),s("p",[t._v("要创建这些函数的一个静态库, 将使用 AR 工具, 如下:")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" gcc "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-c")]),t._v(" addvec.c multvec.c\nlinux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ar rcs libvector.a addvec.o multvec.o \n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("为了使用这个库, 可以编写一个应用,  比如下面的 main2.c, 它调用 addvec 库例程. 包含(或头)文件 vector .h 定义了 libvector.a 中例程的函数原型.")]),t._v(" "),s("blockquote",[s("p",[t._v("main2.c源代码-这个程序调用 libvector 库中的函数")])]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"vector.h"')])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" z"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addvec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" z"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"z = [%d %d]\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" z"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" z"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br")])]),s("p",[t._v("为了创建这个可执行文件, 要编译和链接输入文件 main.o 和 libvector.a:")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" gcc "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-c")]),t._v(" main2.c\nlinux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" gcc "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-o")]),t._v(" prog2c main2.o ./libvector.a\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("或者等价地使用:")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" gcc "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-c")]),t._v(" main2.c\nlinux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" gcc "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-o")]),t._v(" prog2c main2.o -L. "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-lvector")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("下图概括了链接器的行为.  "),s("strong",[t._v("-static")]),t._v(" 参数告诉编译器驱动程序, 链接器应该构建一个完全链接的可执行目标文件, 它可以加载到内存并运行, 在加载时无须更进一步的链接.  "),s("strong",[t._v("-lvector")]),t._v(" 参数是 libvector.a 的缩写,  "),s("strong",[t._v("-L.")]),t._v("  参数告诉链接器在当前目录下查找 libvector.a.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230806210927-6r99wiq.png",alt:"image",title:"与静态库链接"}})]),t._v(" "),s("p",[t._v("当链接器运行时, 它判定 main2.o 引用了 addvec.o 定义的 addvec 符号, 所以复制 addvec.o 到可执行文件. 因为程序不引用任何由 multvec.o 定义的符号, 所以链接器就不会复制这个模块到可执行文件. 链接器还会复制 libc.a 中的 printf.o 模块, 以及许多 C 运行时系统中的其他模块.")]),t._v(" "),s("h5",{attrs:{id:"_3-链接器如何使用静态库来解析引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-链接器如何使用静态库来解析引用"}},[t._v("#")]),t._v(" 3.链接器如何使用静态库来解析引用")]),t._v(" "),s("p",[t._v("虽然静态库很有用, 但是它们同时也是一个程序员迷惑的源头, 原因在于 Linux 链接器使用它们解析外部引用的方式. 在符号解析阶段, 链接器从左到右按照它们在编译器驱动程序命令行上出现的顺序来扫描可重定位目标文件和存档文件. (驱动程序自动将命令行中所有的 .c 文件翻译为 .o 文件.) 在这次扫描中, 链接器维护一个可重定位目标文件的集合 E (这个集合中的文件会被合并起来形成可执行文件), 一个未解析的符号(即引用了但是尚未定义的符号)集合 U, 以及一个在前面输入文件中已定义的符号集合 D. 初始时, E, U 和 D 均为空.")]),t._v(" "),s("ul",[s("li",[t._v("对于命令行上的每个输入文件 f, 链接器会判断 f 是一个目标文件还是一个存档文件. 如果 f 是一个目标文件, 那么链接器把 f 添加到 E, 修改 U 和 D 来反映 f 中的符号定义和引用, 并继续下一个输入文件.")]),t._v(" "),s("li",[t._v("如果 f 是一个存档文件, 那么链接器就尝试匹配 U 中未解析的符号和由存档文件成员定义的符号. 如果某个存档文件成员 m, 定义了一个符号来解析 U 中的一个引用, 那么就将 m 加到 E 中, 并且链接器修改 U 和 D 来反映 m 中的符号定义和引用. 对存档文件中所有的成员目标文件都依次进行这个过程, 直到 U 和 D 都不再发生变化. 此时, 任何不包含在 E 中的成员目标文件都简单地被丢弃, 而链接器将继续处理下一个输入文件.")]),t._v(" "),s("li",[t._v("如果当链接器完成对命令行上输入文件的扫描后, U 是非空的, 那么链接器就会输出一个错误并终止. 否则它会合并和重定位 E 中的目标文件, 构建输岀的可执行文件.")])]),t._v(" "),s("p",[t._v("不幸的是, 这种算法会导致一些令人困扰的链接时错误, 因为命令行上的库和目标文件的顺序非常重要. 在命令行中, 如果定义一个符号的库出现在引用这个符号的目标文件之前, 那么引用就不能被解析, 链接会失败. 比如, 考虑下面的命令行发生了什么?")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" gcc static ./libvector.a main2.c\n/tmp/cc9XH6Rp.o: In "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'main'")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v("\n/tmp/cc9XH6Rp.o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(".text+0x18"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(": undefined reference to "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'addvec'")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("在处理 libvector.a 时, U 是空的, 所以没有 libvector.a 中的成员目标文件会添加到 E 中. 因此, 对 addvec 的引用是绝不会被解析的, 所以链接器会产生一条错误信息并终止.")]),t._v(" "),s("p",[s("strong",[t._v("关于库的一般准则是将它们放在命令行的结尾")]),t._v(". 如果各个库的成员是相互独立的(也就是说没有成员引用另一个成员定义的符号), 那么这些库就可以以任何顺序放置在命令行的结尾处. 另一方面, 如果库不是相互独立的, 那么必须对它们排序, 使得对于每个被存档文件的成员外部引用的符号 S, 在命令行中至少有一个 S 的定义是在对 S 的引用之后的. 比如, 假设 foo.c 调用 libx.a 和 libz.a 中的函数, 而这两个库又调用 liby.a 中的函数. 那么在命令行中 libx.a 和 libz.a 必须处在 liby.a 之前:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" gcc foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c libx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a libz"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a liby"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("如果需要满足依赖需求, 可以在命令行上重复库. 比如, 假设 foo.c 调用 libx.a 中的函数, 该库又调用 liby.a 中的函数, 而 liby.a 又调用 libx.a 中的函数. 那么 libx.a 必须在命令行上重复出现:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" gcc foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c libx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a liby"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a libx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("另一种方法是, 可以将 libx.a 和 liby.a 合并成一个单独的存档文件.")]),t._v(" "),s("h4",{attrs:{id:"重定位"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重定位"}},[t._v("#")]),t._v(" 重定位")]),t._v(" "),s("p",[t._v("一旦链接器完成了符号解析这一步, "),s("strong",[t._v("就把代码中的每个符号引用和正好一个符号定义(即它的一个输入目标模块中的一个符号表条目)关联起来")]),t._v(". 此时, 链接器就知道它的输入目标模块中的"),s("strong",[t._v("代码节和数据节")]),t._v("的确切大小. 现在就可以开始"),s("strong",[t._v("重定位")]),t._v("步骤了, 在这个步骤中, "),s("mark",[s("strong",[t._v("将合并输入模块, 并为每个符号分配运行时地址")])]),t._v(". 重定位由两步组成:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("重定位节和符号定义.")]),t._v("  在这一步中, "),s("strong",[t._v("链接器将所有相同类型的节合并为同一类型的新的聚合节")]),t._v(". 例如, 来自所有输入模块的. data 节被全部合并成一个节, 这个节成为输出的可执行目标文件的 .data 节. 然后, 链接器将运行时内存地址赋给新的聚合节, 赋给输入模块定义的每个节, 以及赋给输入模块定义的每个符号. 当这一步完成时, "),s("strong",[t._v("程序中的每条指令和全局变量都有唯一的运行时内存地址了")]),t._v(".")]),t._v(" "),s("li",[s("strong",[t._v("重定位节中的符号引用.")]),t._v(" "),s("strong",[s("strong",[t._v("在这一步中, 链接器修改代码节和数据节中对每个符号的引用, 使得它们指向正确的运行时地址. 要执行这一步, 链接器依赖于可重定位目标模块中称为")])]),t._v("​"),s("strong",[t._v("重定位条目")]),t._v("(relocation entry)的数据结构, 接下来将会描述这种数据结构.")])]),t._v(" "),s("h5",{attrs:{id:"_1-重定位条目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-重定位条目"}},[t._v("#")]),t._v(" 1.重定位条目")]),t._v(" "),s("p",[t._v("当汇编器生成一个目标模块时, 它"),s("strong",[t._v("并不知道数据和代码最终将放在内存中的什么位置")]),t._v(". 它也不知道这个模块引用的任何外部定义的函数或者全局变量的位置. 所以, "),s("strong",[t._v("无论何时汇编器遇到对最终位置未知的目标引用, 它就会生成一个重定位条目, 告诉链接器在将目标文件合并成可执行文件时如何修改这个引用")]),t._v(". 代码的重定位条目放在 .rel.text 中. 已初始化数据的重定位条目放在 .rel.data 中.")]),t._v(" "),s("p",[t._v("下面的结构展示了 ELF 重定位条目的格式. offset 是需要被修改的引用的节偏移. symbol 标识被修改引用应该指向的符号. type 告知链接器如何修改新的引用. addend 是一个有符号常数, 一些类型的重定位要使用它对被修改引用的值做偏移调整.")]),t._v(" "),s("blockquote",[s("p",[t._v("ELF 重定位条目. 每个条目表示一个必须被重定位的引用, 并指明如何计算被修改的引用")])]),t._v(" "),s("div",{staticClass:"language-text line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("typedef struct {\n    long offset;    /* Offset of the reference to relocate */\n    long type:32,   /* Relocation type */\n         symbol:32; /* Symbol table index */\n    long addend;    /* Constant part of relocation expression */\n} Elf64_Rela;\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("ELF 定义了 32 种不同的"),s("strong",[t._v("重定位类型")]),t._v(", 有些相当隐秘. 一般只关心其中两种最基本的重定位类型:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("R_X86_64_PC32")]),t._v(". 重定位一个使用 32 位 PC "),s("strong",[t._v("相对地址的引用")]),t._v(". 一个 PC 相对地址就是距程序计数器(PC)的当前运行时值的偏移量. 当 CPU 执行一条使用 PC 相对寻址的指令时, 它就将在指令中编码的 32 位值加上 PC 的当前运行时值, 得到有效地址(如 call 指令的目标), PC 值通常是下一条指令在内存中的地址.")]),t._v(" "),s("li",[s("strong",[t._v("R_X86_64_32")]),t._v(". 重定位一个使用 32 位"),s("strong",[t._v("绝对地址的引用")]),t._v(". 通过绝对寻址, CPU 直接使用在指令中编码的 32 位值作为有效地址, 不需要进一步修改.")])]),t._v(" "),s("p",[t._v("这两种重定位类型支持 x86-64 "),s("strong",[t._v("小型代码模型")]),t._v("(small code model), 该模型假设可执行目标文件中的代码和数据的总体大小小于 2GB, 因此在运行时可以用 32 位 PC 相对地址来访问. GCC 默认使用小型代码模型. 大于 2GB 的程序可以用 -mcmodel=medium(中型代码模型)和 -mcmodel=large(大型代码模型)标志来编译, 不过在此不讨论这些模型.")]),t._v(" "),s("h5",{attrs:{id:"_2-重定位符号引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-重定位符号引用"}},[t._v("#")]),t._v(" 2.重定位符号引用")]),t._v(" "),s("p",[t._v("下面的代码(7-10)展示了"),s("strong",[t._v("链接器的重定位算法的伪代码")]),t._v(". 第 1 行和第 2 行在每个节 s 以及与每个节相关联的重定位条目 r 上迭代执行. 为了使描述具体化, 假设每个节 s 是一个字节数组, 每个重定位条目 r 是一个类型为 Elf64_Rela 的结构, 如前面的定义. 另外, 还假设当算法运行时, 链接器已经为每个节(用 ADDR(s) 表示)和每个符号都选择了运行时地址(用 ADDR(r.symbol) 表示). 第 3 行计算的是需要被重定位的 4 字节引用的数组 s 中的地址. 如果这个引用使用的是 PC 相对寻址, 那么它就用第 5 ~ 9 行来重定位. 如果该引用使用的是绝对寻址, 它就通过第 11 ~ 13 行来重定位.")]),t._v(" "),s("blockquote",[s("p",[t._v("代码7-10: 重定位算法")])]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("foreach section s "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    foreach relocation entry r "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        refptr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("offset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* ptr to reference to be relocated */")]),t._v("\n  \n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Relocate a PC-relative reference */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" R_X86_64_PC32"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            refaddr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ADDR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("offset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* ref's run-time address */")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("refptr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ADDR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("symbol"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("addend "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" refaddr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Relocate an absolute reference */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("R_X86_64_32"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("refptr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ADDR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("symbol"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("addend"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br")])]),s("p",[t._v("来看看链接器如何用这个算法来重定位开篇示例程序中的引用. 下面代码 7-11 给出了(用 "),s("code",[t._v("objdump-dx main.o")]),t._v("​ 产生的)GNU OBJDUMP 工具产生的 "),s("strong",[t._v("main.o 的反汇编代码")]),t._v(".")]),t._v(" "),s("blockquote",[s("p",[t._v("代码7-11: main.o 的代码和重定位条目")])]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("0000000000000000 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(":   \n   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(":   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("48")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("83")]),t._v(" ec 08             sub    "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$0x8")]),t._v(",%rsp\n   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(":   be 02 00 00 00          mov    "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$0x2")]),t._v(",%esi\n   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v(":   bf 00 00 00 00          mov    "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$0x0")]),t._v(",%edi        %edi "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("array\n                        a: R_X86_64_32 array            Relocation entry\n   e:   e8 00 00 00 00          callq  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("main+0x1"),s("span",{pre:!0,attrs:{class:"token operator"}},[s("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("3")]),t._v(">")]),t._v("   sum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                        f: R_X86_64_PC32 sum-0x4        Relocation entry\n  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),t._v(":   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("48")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("83")]),t._v(" c4 08             "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$0x8")]),t._v(",%rsp\n  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("17")]),t._v(":   c3                      retq\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("p",[t._v("main 函数引用了"),s("strong",[t._v("两个全局符号: array 和 sum")]),t._v(". 为每个引用, 汇编器产生一个"),s("strong",[t._v("重定位条目")]),t._v(", 显示在引用的后面一行上. 这些重定位条目"),s("strong",[t._v("告诉链接器对 sum 的引用要使用 32 位 PC 相对地址进行重定位")]),t._v(", 而对 array 的引用要使用 32 位绝对地址进行重定位. 接下来两节会详细介绍链接器是如何重定位这些引用的.")]),t._v(" "),s("h6",{attrs:{id:"_1-重定位pc相对引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-重定位pc相对引用"}},[t._v("#")]),t._v(" (1)重定位PC相对引用")]),t._v(" "),s("p",[t._v("代码 7-11 的第 6 行中, 函数 main 调用 sum 函数, sum 函数是在模块 sum.o 中定义的. call 指令开始于节偏移 0xe 的地方, 包括 1 字节的操作码 0xe8, 后面跟着的是对目标 sum 的 32 位 PC 相对引用的占位符.")]),t._v(" "),s("p",[t._v("相应的重定位条目 r 由 4 个字段组成:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("offset "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xf")]),t._v("\nr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("symbol "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sum\nr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" R_X86_64_PC32\nr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("addend "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("这些字段告诉链接器修改开始于偏移量 0xf 处的 32 位 PC 相对引用, 这样在运行时它会指向 sum 例程. 现在, 假设链接器已经确定")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ADDR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ADDR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x4004d0")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("和")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ADDR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("symbol"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ADDR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x4004e8")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("使用代码 7-10 中的算法, 链接器首先计算出引用的运行时地址(第 7 行):")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("refaddr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ADDR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("offset\n        "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x4004d0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xf")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x4004df")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("然后, 更新该引用, 使得它在运行时指向 sum 程序(第 8 行):")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("refptr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ADDR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("symbol"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("addend "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" refaddr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x4004e8")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x4004df")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("在得到的可执行目标文件中, call 指令有如下的重定位的形式:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4004")]),t._v("de"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("  e8 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("05")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("00")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("00")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("00")]),t._v("      callq  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4004e8")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("sum"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("在 call 指令之后的指令的地址. 为了执行这条指令, CPU 执行以下的步骤:")]),t._v(" "),s("ol",[s("li",[t._v("将 PC 压入栈中")]),t._v(" "),s("li",[t._v("PC ← PC + 0x5 = 0x4004e3 + 0x5 = 0x4004e8")])]),t._v(" "),s("p",[t._v("因此, 要执行的下一条指令就是 sum 例程的第一条指令, 这当然就是我们想要的!")]),t._v(" "),s("h6",{attrs:{id:"_2-重定位绝对引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-重定位绝对引用"}},[t._v("#")]),t._v(" (2)重定位绝对引用")]),t._v(" "),s("p",[t._v("重定位绝对引用相当简单. 例如, 代码 7-11 的第 4 行中, mov 指令将 array 的地址(一个 32 位立即数值)复制到寄存器 ％edi 中. mov 指令开始于节偏移量 0x9 的位置, 包括 1 字节操作码 Oxbf, 后面跟着对 array 的 32 位绝对引用的占位符.")]),t._v(" "),s("p",[t._v("对应的占位符条目 r 包括 4 个字段:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("offset "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xa")]),t._v("\nr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("symbol "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" array\nr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" R_X86_64_32\nr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("addend "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("这些字段告诉链接器要修改从偏移量 0xa 开始的绝对引用, 这样在运行时它将会指向 array 的第一个字节. 现在假设链接器巳经确定")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ADDR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("symbol"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ADDR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x601018")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("链接器使代码 7-10 中算法的第 13 行修改了引用:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("refptr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ADDR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("symbol"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("addend"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x601018")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x601018")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("在得到的可执行目标文件中, 该引用有下面的重定位形式:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4004")]),t._v("d9"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("  bf "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("60")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("00")]),t._v("\t      mov   $"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x601018")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("edi         "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("edi "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("array\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("综合到一起, 代码 7-12 给出了最终可执行目标文件中已重定位的 .text 节和 .data 节. 在加载的时候, 加载器会把这些节中的字节直接复制到内存, 不再进行任何修改地执行这些指令.")]),t._v(" "),s("blockquote",[s("p",[t._v("代码7-12: 可执行文件 prog 的已重定位的 .text 节")])]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("00000000004004")]),t._v("d0 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4004")]),t._v("d0"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("48")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("83")]),t._v(" ec "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("08")]),t._v("          sub    $"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("rsp\n  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4004")]),t._v("d4"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("  be "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("02")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("00")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("00")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("00")]),t._v("       mov    $"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("esi\n  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4004")]),t._v("d9"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("  bf "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("60")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("00")]),t._v("       mov    $"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x601018")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("edi    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("edi "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("array\n  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4004")]),t._v("de"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("  e8 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("05")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("00")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("00")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("00")]),t._v("       callq  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4004e8")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("sum"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4004e3")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("48")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("83")]),t._v(" c4 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("08")]),t._v("          add    $"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("rsp\n  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4004e7")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("  c3                   retq\n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("00000000004004e8")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("sum"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4004e8")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("  b8 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("00")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("00")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("00")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("00")]),t._v("       mov    $"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("eax\n  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4004")]),t._v("ed"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("  ba "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("00")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("00")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("00")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("00")]),t._v("       mov    $"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("edx\n  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4004f")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("  eb "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("09")]),t._v("                jmp    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4004f")]),t._v("d "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("sum"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x15")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4004f")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("48")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("63")]),t._v(" ca             movslq "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("edx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("rcx\n  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4004f")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("03")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("04")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8f")]),t._v("             "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("rdi"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("rcx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("eax\n  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4004f")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("83")]),t._v(" c2 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("01")]),t._v("             add    $"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("edx\n  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4004f")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("39")]),t._v(" f2                cmp    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("esi"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("edx\n  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4004ff")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v("c f3                jl     "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4004f")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("sum"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xc")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("400501")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("  f3 c3                repz retq\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br")])]),s("blockquote",[s("p",[t._v("代码7-12: 可执行文件 prog 的已重定位的 .data 节")])]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0000000000601018")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("601018")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("01")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("00")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("00")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("00")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("02")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("00")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("00")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("00")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("h4",{attrs:{id:"可执行目标文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可执行目标文件"}},[t._v("#")]),t._v(" 可执行目标文件")]),t._v(" "),s("p",[t._v("前面已经看到"),s("strong",[t._v("链接器如何将多个目标文件合并成一个可执行目标文件")]),t._v(". 前面示例的 C 程序, 开始时是一组 ASCII 文本文件, 现在已经被转化为一个"),s("strong",[t._v("二进制文件")]),t._v(", 且这个"),s("strong",[t._v("二进制文件包含加载程序到内存并运行它所需的所有信息")]),t._v(". 下图概括了一个典型的 ELF 可执行文件中的各类信息.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230807210840-w68uzw3.png",alt:"image",title:"典型的ELF可执行目标文件"}})]),t._v(" "),s("p",[s("strong",[t._v("可执行目标文件的格式类似于可重定位目标文件的格式")]),t._v(". ELF 头描述文件的总体格式. 它还包括程序的"),s("strong",[t._v("入口点")]),t._v("(entry point), 也就是当程序运行时要执行的"),s("strong",[t._v("第一条指令")]),t._v("的地址. .text, .rodata 和 .data 节与可重定位目标文件中的节是相似的, 除了这些节已经被重定位到它们最终的运行时内存地址以外. .init 节定义了一个小函数, 叫做 _init, 程序的"),s("strong",[t._v("初始化代码")]),t._v("会调用它. 因为可执行文件是"),s("mark",[s("strong",[t._v("完全链接")])]),t._v("​"),s("strong",[t._v("的")]),t._v("(已被重定位), 所以它不再需要 .rel 节.")]),t._v(" "),s("p",[t._v("ELF 可执行文件被设计得很容易加载到内存, 可执行文件的"),s("strong",[t._v("连续的片(chunk)被映射到连续的内存段")]),t._v(". "),s("strong",[t._v("程序头部表")]),t._v("(program header table)描述了这种映射关系. 下面展示了可执行文件 prog 的程序头部表, 是由 OBJDUMP 显示的.")]),t._v(" "),s("blockquote",[s("p",[t._v("代码: 示例可执行文件prog的程序头部表")]),t._v(" "),s("p",[t._v("off: 目标文件中的偏移; vaddr/paddr: 内存地址; align: 对齐要求; filesz: 目标文件中的段大小; memsz: 内存中的段大小; flags: 运行时访问权限.")])]),t._v(" "),s("div",{staticClass:"language-text line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Read-only code segment\nLOAD off    0x0000000000000000 vaddr 0x0000000000400000 paddr 0x0000000000400000 align 2**21\n     filesz 0x000000000000069c memsz 0x00000oo000o0069c flags r-x\n\nRead/write data segment\nLOAD off    0x0000000000000df8 vaddr 0x0000000000600df8 paddr 0x0000000000600df8 align 2**21\n     filesz 0x0000000000000228 memsz 0x0000000000000230 flags rw-\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[t._v("从程序头部表, 会看到"),s("strong",[t._v("根据可执行目标文件的内容初始化两个内存段")]),t._v(". 第 1 行和第 2 行告诉我们第一个段(代码段)有读/执行访问权限, 开始于内存地址 0x400000 处, 总共的内存大小是 0x69c 字节, 并且被初始化为可执行目标文件的头 0x69c 个字节, 其中包括 ELF 头, 程序头部表以及 .initx.text 和 .rodata 节.")]),t._v(" "),s("p",[t._v("第 3 行和第 4 行告诉我们第二个段(数据段)有读/写访问权限, 开始于内存地址 0x600df8 处, 总的内存大小为 0x230 字节, 并用从目标文件中偏移 0xdf8 处开始的 .data 节中的 0x228 个字节初始化. 该段中剩下的 8 个字节对应于运行时将被初始化为 0 的 .bss 数据.")]),t._v(" "),s("p",[t._v("对于任何段 s, 链接器必须选择一个起始地址 vaddr, 使得:")]),t._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("vaddr mod align "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" off mod align\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("这里, off 是目标文件中段的第一个节的偏移量, align 是程序头部中指定的对齐( "),s("span",{attrs:{"data-type":"text"}},[t._v("221")]),t._v(" = 0x200000). 例如, 上面的数据段中")]),t._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("vaddr mod align "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 0x600df8 mod 0x200000 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 0xdf8\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("以及")]),t._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("off mod align "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 0xdf8 mod 0x200000 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 0xdf8\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("这个对齐要求是一种优化, 使得当程序执行时, 目标文件中的段能够很有效率地传送到内存中. 原因有点儿微妙, 在于虚拟内存的组织方式, 它被组织成一些很大的, 连续的, 大小为 2 的幂的字节片. 第 9 章会学习到虚拟内存的知识.")]),t._v(" "),s("h4",{attrs:{id:"加载可执行目标文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#加载可执行目标文件"}},[t._v("#")]),t._v(" 加载可执行目标文件")]),t._v(" "),s("p",[t._v("要"),s("strong",[t._v("运行可执行目标文件")]),t._v(" prog, 可以在 Linux shell 的命令行中输入它的名字:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("prog\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("因为 prog 不是一个内置的 shell 命令, 所以 shell "),s("mark",[s("strong",[t._v("会认为 prog 是一个可执行目标文件, 通过调用某个驻留在存储器中称为加载器(loader)的操作系统代码来运行它")])]),t._v(". 任何 Linux 程序都可以通过调用 execve 函数来调用加载器, 后面将详细描述这个函数. "),s("strong",[t._v("加载器将可执行目标文件中的代码和数据从磁盘复制到内存中, 然后通过跳转到程序的第一条指令或入口点来运行该程序")]),t._v(". "),s("mark",[t._v("这个将程序复制到内存并运行的过程叫做")]),t._v("​"),s("mark",[s("strong",[t._v("加载")])]),t._v(".")]),t._v(" "),s("p",[t._v("每个 Linux 程序都有一个"),s("strong",[t._v("运行时内存映像")]),t._v(", 类似于图 7-15 中所示. 在 Linux 86-64 系统中, "),s("strong",[t._v("代码段总是从地址 0x400000 处开始, 后面是数据段")]),t._v(". 运行时"),s("strong",[t._v("堆")]),t._v("在数据段之后, 通过"),s("strong",[t._v("调用 malloc 库往上增长")]),t._v(". (后面也会详细描述 mallow 和堆). 堆后面的区域是为"),s("strong",[t._v("共享模块")]),t._v("保留的. 用户栈总是从最大的合法用户地址("),s("span",{attrs:{"data-type":"text"}},[t._v("2^48 − 1")]),t._v(")开始, 向较小内存地址增长. 栈上的区域, 从地址 "),s("span",{attrs:{"data-type":"text"}},[t._v("2^48")]),t._v(" 开始, 是为"),s("strong",[t._v("内核")]),t._v("(kernel)中的代码和数据保留的, 所谓内核就是操作系统驻留在内存的部分.")]),t._v(" "),s("blockquote",[s("p",[t._v("图 7-15 Linux x86-64 运行时内存映像.")]),t._v(" "),s("p",[t._v("没有展示出由于段对齐要求和地址空间布局随机化(ASLR)造成的空隙. 区域大小不成比例")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230807211527-tzw2fdo.png",alt:"image"}})]),t._v(" "),s("p",[t._v("为了简洁, 上面把堆, 数据和代码段画得彼此相邻, 并且把栈顶放在了最大的合法用户地址处. 实际上, 由于 .data 段有对齐要求(后面介绍), 所以代码段和数据段之间是有"),s("strong",[t._v("间隙")]),t._v("的. 同时, 在分配栈, 共享库和堆段运行时地址的时候, 链接器还会使用地址空间布局随机化(ASLR). "),s("strong",[t._v("虽然每次程序运行时这些区域的地址都会改变, 它们的相对位置是不变的")]),t._v(".")]),t._v(" "),s("p",[t._v("当加载器运行时, 它创建类似于图 7-15 所示的"),s("strong",[t._v("内存映像")]),t._v(". 在程序头部表的引导下, "),s("strong",[t._v("加载器将可执行文件的片(chunk)复制到代码段和数据段")]),t._v(". 接下来, 加载器跳转到程序的入口点, 也就是 "),s("code",[t._v("_start")]),t._v("​ 函数的地址. 这个函数是在"),s("strong",[t._v("系统目标文件 ctrl.o 中")]),t._v("定义的, 对所有的 C 程序都是一样的. "),s("code",[t._v("_start")]),t._v("​ 函数调用系统启动函数 __libc_start_main, 该函数定义在 libc.so 中. 它初始化执行环境, "),s("strong",[t._v("调用用户层的 main 函数, 处理 main 函数的返回值, 并且在需要的时候把控制返回给内核")]),t._v(".")]),t._v(" "),s("blockquote",[s("p",[t._v("旁注: 加载器实际是如何工作的?")])]),t._v(" "),s("p",[t._v("我们对于加载的描述从概念上来说是正确的, 但也不是完全准确, 这是有意为之. 要理解加载实际是如何工作的, 就必须理解进程, 虚拟内存和内存映射的概念, 这些还没有加以讨论. 在后面第 8 章和第 9 章中遇到这些概念时, 将重新回到加载的问题上, 并逐渐揭开它的神秘面纱.")]),t._v(" "),s("p",[t._v("对于不够有耐心的读者, 下面是关于加载实际是如何工作的一个概述: "),s("strong",[t._v("Linux 系统中的每个程序都运行在一个进程上下文中, 有自己的虚拟地址空间. 当 shell 运行一个程序时, 父 shell 进程生成一个子进程, 它是父进程的一个复制. 子进程通过 execve 系统调用启动加载器. 加载器删除子进程现有的虚拟内存段, 并创建一组新的代码, 数据, 堆和栈段. 新的栈和堆段被初始化为零. 通过将虚拟地址空间中的页映射到可执行文件的页大小的片(chunk), 新的代码和数据段被初始化为可执行文件的内容. 最后, 加载器跳转到_start 地址, 它最终会调用应用程序的 main 函数. 除了一些头部信息, 在加载过程中没有任何从磁盘到内存的数据复制. 直到 CPU 引用一个被映射的虚拟页时才会进行复制, 此时, 操作系统利用它的页面调度机制自动将页面从磁盘传送到内存")]),t._v(".")]),t._v(" "),s("h4",{attrs:{id:"动态链接共享库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#动态链接共享库"}},[t._v("#")]),t._v(" 动态链接共享库")]),t._v(" "),s("p",[t._v("前面的静态库解决了许多关于如何让大量相关函数对应用程序可用的问题. 然而, 静态库仍然有一些明显的缺点. "),s("strong",[t._v("静态库和所有的软件一样, 需要定期维护和更新")]),t._v(". 如果应用程序员想要使用一个库的最新版本, 他们必须以某种方式了解到该库的更新情况, 然后显式地将他们的程序与更新了的库重新链接.")]),t._v(" "),s("p",[t._v("另一个问题是几乎每个 C 程序都使用标准 I/O 函数, 比如 printf 和 scanf. 在运行时, "),s("strong",[t._v("这些函数的代码会被复制到每个运行进程的文本段中. 在一个运行上百个进程的典型系统上, 这将是对稀缺的内存系统资源的极大浪费")]),t._v(". 内存的一个有趣属性就是不论系统的内存有多大, 它总是一种稀缺资源. 磁盘空间和厨房的垃圾桶同样有这种属性.")]),t._v(" "),s("p",[s("strong",[t._v("共享库")]),t._v("(shared library)是致力于解决静态库缺陷的一个现代创新产物. "),s("strong",[t._v("共享库是一个目标模块, 在运行或加载时, 可以加载到任意的内存地址, 并和一个在内存中的程序链接起来. 这个过程称为")]),t._v("​"),s("mark",[s("strong",[t._v("动态链接")])]),t._v("​ "),s("strong",[t._v("(dynamic linking), 是由一个叫做")]),t._v("​"),s("mark",[s("strong",[t._v("动态链接器")])]),t._v("​ "),s("strong",[t._v("(dynamic linker)的程序来执行的. 共享库也称为")]),t._v("​"),s("mark",[s("strong",[t._v("共享目标")])]),t._v("​ "),s("strong",[t._v("(shared object)")]),t._v(" , 在 Linux 系统中"),s("mark",[s("strong",[t._v("通常用 .so 后缀")])]),t._v("来表示. 微软的操作系统大量地使用了共享库, 它们"),s("mark",[s("strong",[t._v("称为 DLL(动态链接库)")])]),t._v(" .")]),t._v(" "),s("p",[t._v('共享库是以两种不同的方式来 "共享" 的. 首先, 在任何给定的文件系统中, '),s("strong",[t._v("对于一个库只有一个. so 文件")]),t._v(". 所有引用该库的可执行目标文件共享这个 .so 文件中的代码和数据, 而不是像静态库的内容那样被复制和嵌入到引用它们的可执行的文件中. 其次, 在内存中, 一个共享库的 .text 节的一个副本可以被不同的正在运行的进程共享. 在第 9 章学习虚拟内存时将更加详细地讨论这个问题.")]),t._v(" "),s("p",[t._v("图 7-16 概括了 main2.c 示例程序的动态链接过程.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230807213641-2gg4ze8.png",alt:"image",title:"动态链接共享库"}})]),t._v(" "),s("p",[t._v("为了构造 main2.c 中示例向量例程的共享库 libvector.so, 需要调用编译器驱动程序, 给编译器和链接器如下特殊指令:")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" gcc "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-shared")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-fpic")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-o")]),t._v(" libvector.so addvec.c multvec.c\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v("-fpic")]),t._v(" 选项指示编译器生成与位置无关的代码(下一节将详细讨论这个问题).  "),s("strong",[t._v("-shared")]),t._v(" 选项指示链接器创建一个"),s("strong",[t._v("共享的目标文件")]),t._v(". 一旦创建了这个库, 随后就要将它链接到 main2.c 的示例程序中:")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" gcc "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-o")]),t._v(" prog2l main2.c ./libvector.so\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("这样就创建了一个"),s("strong",[t._v("可执行目标文件 prog2l")]),t._v(", 而此文件的形式使得它在运行时可以和 libvector.so 链接. "),s("strong",[t._v("基本的思路是当创建可执行文件时, 静态执行一些链接, 然后在程序加载时, 动态完成链接过程")]),t._v(". 认识到这一点是很重要的: 此时, 没有任何 libvector.so 的代码和数据节真的被复制到可执行文件 prog2l 中. 反之, "),s("strong",[t._v("链接器复制了一些重定位和符号表信息, 它们使得运行时可以解析对 libvector.so 中代码和数据的引用")]),t._v(".")]),t._v(" "),s("p",[t._v("当加载器加载和运行可执行文件 prog2l 时, 它会加载部分链接的可执行文件 prog2l. 接着, 它注意到 prog2l 包含一个  "),s("strong",[t._v(".interp 节")]),t._v(", 这一节包含动态链接器的路径名, 动态链接器本身就是一个共享目标(如在 Linux 系统上的 ld-linux.so). 加载器不会像它通常所做地那样将控制传递给应用, 而是加载和运行这个动态链接器. 然后, 动态链接器通过执行下面的重定位完成链接任务:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("重定位 libc.so 的文本和数据到某个内存段.")])]),t._v(" "),s("li",[s("strong",[t._v("重定位 libvector.so 的文本和数据到另一个内存段.")])]),t._v(" "),s("li",[s("strong",[t._v("重定位 prog2l 中所有对由 libc.so 和 libvector.so 定义的符号的引用.")])])]),t._v(" "),s("p",[t._v("最后, 动态链接器将控制传递给应用程序. 从这个时刻开始, "),s("strong",[t._v("共享库的位置就固定了, 并且在程序执行的过程中都不会改变")]),t._v(".")]),t._v(" "),s("h4",{attrs:{id:"从应用程序中加载和链接共享库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#从应用程序中加载和链接共享库"}},[t._v("#")]),t._v(" 从应用程序中加载和链接共享库")]),t._v(" "),s("p",[t._v("到目前为止已经讨论了在应用程序被加载后执行前时, 动态链接器加载和链接共享库的情景. 然而, 应用程序还可能在它"),s("strong",[t._v("运行时要求动态链接器加载和链接某个共享库, 而无需在编译时将那些库链接到应用中")]),t._v(".")]),t._v(" "),s("p",[t._v("动态链接是一项强大有用的技术. 下面是一些现实世界中的例子:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("分发软件.")]),t._v("  微软 Wmdows 应用的开发者常常利用共享库来分发软件更新. 他们生成一个"),s("strong",[t._v("共库的新版本")]),t._v(", 然后用户可以下载, 并用它替代当前的版本. 下一次他们运行应用程序时, 应用将自动链接和加载新的共享库.")]),t._v(" "),s("li",[s("strong",[t._v("构建高性能 Web 服务器.")]),t._v("  许多 Web 服务器生成动态内容, 比如个性化的 Web 页面, 账户余额和广告标语. 早期的 Web 服务器通过使用 fork 和 execve 创建一个子进程, 并在该子进程的上下文中运行 CGI 程序来生成动态内容. 然而, 现代高性能的 Web 服务器可以使用基于动态链接的更有效和完善的方法来生成动态内容.")])]),t._v(" "),s("p",[s("strong",[t._v("其思路是将每个生成动态内容的函数打包在共享库中")]),t._v(". 当一个来自 Web 浏览器的请求到达时, 服务器动态地加载和链接适当的函数, 然后直接调用它, 而不是使用 fork 和 execve 在子进程的上下文中运行函数. "),s("strong",[t._v("函数会一直缓存在服务器的地址空间中, 所以只要一个简单的函数调用的开销就可以处理随后的请求了")]),t._v(". 这对一个繁忙的网站来说是有很大影响的. 更进一步地说, 在运行时无需停止服务器, 就可以更新已存在的函数, 以及添加新的函数.")]),t._v(" "),s("p",[t._v("Linux 系统为动态链接器提供了一个简单的接口, 允许应用程序在运行时加载和链接共享库.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<dlfcn.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dlopen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" flag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 若成功则为指向句柄的指针, 若出错则为 NULL. ")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("dlopen 函数加载和链接共享库 filenameo 用已用带 RTLD_GLOBAL 选项打开了的库解析 filename 中的外部符号. 如果当前可执行文件是带 -rdynamic 选项编译的, 那么对符号解析而言, 它的全局符号也是可用的. flag 参数必须要么包括 RTLD_NOW, 该标志告诉链接器立即解析对外部符号的引用, 要么包括 RTLD_LAZY 标志, 该标志指示链接器推迟符号解析直到执行来自库中的代码. 这两个值中的任意一个都可以和 RTLD_GLOBAL 标志取或.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<dlfcn.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dlsym")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("handle"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("symbol"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 若成功则为指向符号的指针, 若出错则为 NULL. ")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("dlsym 函数的输入是一个指向前面已经打开了的共享库的句柄和一个 symbol 名字, 如果该符号存在, 就返回符号的地址, 否则返回 NULL.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<dlfcn.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dlclose")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("handle"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回:若成功则为0, 若出错则为-1.")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("如果没有其他共享库还在使用这个共享库, dlclose函数就卸载该共享库.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("include "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("dlfcn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("h"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dlerror")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 如果前面对 dlopen, dlsym 或 dlclose 的调用失败, ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 则为错误消息, 如果前面的调用成功, 则为 NULL. ")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("dlerror 函数返回一个字符串, 它描述的是调用 dlopen, dlsym 或者 dlclose 函数时发生的最近的错误, 如果没有错误发生, 就返回 NULL.")]),t._v(" "),s("p",[t._v("代码 7-17 展示了如何利用这个接口动态链接我们的 libvector.so 共享库, 然后调用它的 addvec 例程. 要编译这个程序, 我们将以下面的方式调用 GCC:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" gcc "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("rdynamic "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("o prog2r dll"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("ldl\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("blockquote",[s("p",[t._v("代码7-17: 在运行时动态加载和链接共享库 libvector.so")])]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdlib.h>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<dlfcn.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" z"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("handle"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("addvec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("error"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Dynamically load the shared library containing addvec() */")]),t._v("\n    handle "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dlopen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./libvector.so"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" RTLD_LAZY"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("handle"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stderr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dlerror")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Get a pointer to the addvec() function we just loaded */")]),t._v("\n    addvec "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dlsym")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("handle"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"addvec"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("error "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dlerror")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stderr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" error"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Now we can call addvec() just like any other function */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addvec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" z"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"z = [%d %d]\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" z"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" z"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Unload the shared library */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dlclose")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("handle"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stderr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dlerror")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br"),s("span",{staticClass:"line-number"},[t._v("39")]),s("br")])]),s("blockquote",[s("p",[t._v("旁注: 共享库和Java本地接口")])]),t._v(" "),s("p",[t._v("Java 定义了一个标准调用规则, 叫做 Java 本地接口(Java Native Interface, "),s("strong",[t._v("JNI")]),t._v('), 它允许 Java 程序调用 "本地的" C 和 C++ 函数. '),s("strong",[t._v("JNI 的基本思想是将本地 C 函数(如 foo)编译到一个共享库中(如 foo.so). 当一个正在运行的 Java 程序试图调用函数 foo 时, Java 解释器利用 dlopen 接口(或者与其类似的接口)动态链接和加载 foo.so, 然后再调用 foo")]),t._v(".")]),t._v(" "),s("h4",{attrs:{id:"位置无关代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#位置无关代码"}},[t._v("#")]),t._v(" 位置无关代码")]),t._v(" "),s("p",[t._v("共享库的一个主要目的就是允许多个正在运行的进程共享内存中相同的库代码, 因而节约宝贵的内存资源. 那么, "),s("strong",[t._v("多个进程是如何共享程序的一个副本的呢")]),t._v("? 一种方法是给每个共享库分配一个事先预备的专用的地址空间片, 然后要求加载器总是在这个地址加载共享库. 虽然这种方法很简单, 但是它也造成了一些严重的问题. 它对地址空间的使用效率不高, 因为即使一个进程不使用这个库, 那部分空间还是会被分配出来. 它也难以管理. 因为必须保证没有片会重叠. 每次当一个库修改了之后, 必须确认已分配给它的片还适合它的大小. 如果不适合了, 必须找一个新的片. 并且, 如果创建了一个新的库, 还必须为它寻找空间. 随着时间的进展, 假设在一个系统中有了成百个库和库的各个版本库, 就很难避免地址空间分裂成大量小的, 未使用而又不再能使用的小洞. 更糟的是, 对每个系统而言, 库在内存中的分配都是不同的, 这就引起了更多令人头痛的管理问题.")]),t._v(" "),s("p",[t._v("要避免这些问题, 现代系统"),s("strong",[t._v("以这样一种方式编译共享模块的代码段, 使得可以把它们加载到内存的任何位置而无需链接器修改. 使用这种方法, 无限多个进程可以共享一个共享模块的代码段的单一副本")]),t._v(". (当然, 每个进程仍然会有它自己的读/写数据块.)")]),t._v(" "),s("p",[s("strong",[t._v("可以加载而无需重定位的代码称为")]),t._v("​"),s("mark",[s("strong",[t._v("位置无关代码")])]),t._v("​ "),s("strong",[t._v("(Position-Independent Code, PIC)")]),t._v(" . 用户对 GCC 使用 -fpic 选项指示 GNU 编译系统生成 PIC 代码. "),s("strong",[t._v("共享库的编译必须总是使用该选项")]),t._v(".")]),t._v(" "),s("p",[t._v("在一个 x86-64 系统中, 对同一个目标模块中符号的引用是不需要特殊处理使之成为 PIC. 可以用 PC 相对寻址来编译这些引用, 构造目标文件时由静态链接器重定位. 然而, 对共享模块定义的外部过程和对全局变量的引用需要一些特殊的技巧, 接下来会谈到.")]),t._v(" "),s("h5",{attrs:{id:"_1-pic数据引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-pic数据引用"}},[t._v("#")]),t._v(" 1.PIC数据引用")]),t._v(" "),s("p",[t._v("编译器通过运用以下这个有趣的事实来生成对全局变量的 PIC 引用: "),s("strong",[t._v("无在内存中的何处加载一个目标模块(包括共享目标模块), 数据段与代码段的距离总是保持不变. 因此, 代码段中任何指令和数据段中任何变量之间的距离都是一个运行时常量, 与代码段和数据段的绝对内存位置是无关的")]),t._v(".")]),t._v(" "),s("p",[s("strong",[t._v("想要生成对全局变量 PIC 引用的编译器利用了这个事实, 它在数据段开始的地方创建了一个表, 叫做")]),t._v("​"),s("mark",[s("strong",[t._v("全局偏移量表")])]),t._v("​ "),s("strong",[t._v("(Global Offset Table, GOT). 在 GOT 中, 每个被这个目标模块引用的全局数据目标(过程或全局变量)都有一个 8 字节条目. 编译器还为 GOT 中每个条目生成一个重定位记录. 在加载时, 动态链接器会重定位 GOT 中的每个条目, 使得它包含目标的正确的绝对地址. 每个引用全局目标的目标模块都有自己的 GOT.")])]),t._v(" "),s("p",[t._v("下图展示了示例 libvector.so 共享模块的 GOT. addvec 例程通过 "),s("strong",[t._v("GOT[3] 间接地加载全局变量 addcnt 的地址,")]),t._v("  然后把 addcnt 在内存中加 1. 这里的关键思想是对 GOTQ[3] 的 PC 相对引用中的偏移量是一个"),s("strong",[t._v("运行时常量")]),t._v(".")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230809222551-wa841y3.png",alt:"image",title:"用 GOT 引用全局变量. libvector.so 中的 addvec 例程通过 libvector.so 的 GOT 间接引用了 addcnt"}})]),t._v(" "),s("p",[t._v("因为 addcnt 是由 libvector.so 模块定义的, "),s("strong",[t._v("编译器可以利用代码段和数据段之间不变的距离, 产生对 addcnt 的直接 PC 相对引用, 并增加一个重定位, 让链接器在构造这个共享模块时解析它")]),t._v(". 不过, 如果 addcnt 是由另一个共享模块定义的, 那么就需要通过 GOT 进行间接访问. 在这里, 编译器选择采用最通用的解决方案, 为所有的引用使用 GOT.")]),t._v(" "),s("h5",{attrs:{id:"_2-pic函数调用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-pic函数调用"}},[t._v("#")]),t._v(" 2.PIC函数调用")]),t._v(" "),s("p",[t._v("假设程序调用一个由共享库定义的函数. "),s("strong",[t._v("编译器没有办法预测这个函数的运行时地址, 因为定义它的共享模块在运行时可以加载到任意位置")]),t._v(". 正常的方法是为该引用生成一条重定位记录, 然后动态链接器在程序加载的时候再解析它. 不过, 这种方法并不是 PIC, 因为它需要链接器修改调用模块的代码段, GNU 编译系统使用了一种很有趣的技术来解决这个问题, "),s("strong",[t._v("称为")]),t._v("​"),s("mark",[s("strong",[t._v("延迟绑定")])]),t._v("​ "),s("strong",[t._v("(lazy binding), 将过程地址的绑定推迟到第一次调用该过程时")]),t._v(".")]),t._v(" "),s("p",[t._v("使用延迟绑定的动机是对于一个像 libc.so 这样的共享库输出的成百上千个函数中, 一个典型的应用程序只会使用其中很少的一部分. "),s("strong",[t._v("把函数地址的解析推迟到它实际被调用的地方, 能避免动态链接器在加载时进行成百上千个其实并不需要的重定位")]),t._v(". 第一次调用过程的运行时开销很大, 但是其后的每次调用都只会花费一条指令和一个间接的内存引用.")]),t._v(" "),s("p",[t._v("延迟绑定是通过两个数据结构之间简洁但又有些复杂的交互来实现的, 这两个数据结构是: "),s("strong",[t._v("GOT 和过程链接表")]),t._v("(Procedure Linkage Table, PLT). 如果一个目标模块调用定义在共享库中的任何函数, 那么它就有自己的 GOT 和 PLT. GOT 是数据段的一部分, 而 PLT 是代码段的一部分.")]),t._v(" "),s("p",[t._v("图 7-19 展示的是 PLT 和 GOT 如何协作"),s("strong",[t._v("在运行时解析函数的地址")]),t._v(".")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230809222832-t0ab3xk.png",alt:"image",title:"图7-19 用 PLT 和 GOT 调用外部函数. 在第一次调用 addvec 时, 动态链接器解析它的地址"}})]),t._v(" "),s("p",[t._v("首先检查一下这两个表的内容.")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("过程链接表")]),t._v("(PLT). PLT 是一个数组, 其中每个条目是 16 字节代码. PLT[0] 是一个特殊条目, 它跳转到动态链接器中. 每个被可执行程序调用的库函数都有它自己的 PLT 条目. 每个条目都负责调用一个具体的函数. PLT[1](图中未显示)调用系统启动函数(__libc_start_main), 它初始化执行环境, 调用 main 函数并处理其返回值从 PLT[2] 开始的条目调用用户代码调用的函数. 在这个例子中, PLT[2] 调用 addvec, PLT[3](图中未显示)调用 printf.")]),t._v(" "),s("li",[s("strong",[t._v("全局偏移量表")]),t._v("(GOT). 可以看到, GOT 是一个数组, 其中每个条目是 8 字节地址. 和 PLT 联合使用时, GOT[O] 和 GOT[1] 包含动态链接器在解析函数地址时会使用的信息. GOT[2] 是动态链接器在 ld-linux.so 模块中的入口点. "),s("strong",[t._v("其余的每个条目对应于一个被调用的函数, 其地址需要在运行时被解析. 每个条目都有一个相匹配的 PLT 条目")]),t._v(". 例如, GOT[4] 和 PLT[2] 对应于 addvec. 初始时, 每个 GOT 条目都指向对应 PLT 条目的第二条指令.")])]),t._v(" "),s("p",[t._v("图 7-19a 展示了 GOT 和 PLT 如何协同工作, 在 addvec 被第一次调用时, 延迟解析它的运行时地址:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("第 1 步.")]),t._v("  不直接调用 addvec, 程序调用进入 PLT[2], 这是 addvec 的 PLT 条目.")]),t._v(" "),s("li",[s("strong",[t._v("第 2 步.")]),t._v("  第一条 PLT 指令通过 GOT[4] 进行间接跳转. 因为每个 GOT 条目初始时都指向它对应的 PLT 条目的第二条指令, 这个间接跳转只是简单地把控制传送回 PLT[2] 中的下一条指令.")]),t._v(" "),s("li",[s("strong",[t._v("第 3 步.")]),t._v("  在把 addvec 的 ID(0x1) 压入栈中之后, PLT[2] 跳转到 PLT[0].")]),t._v(" "),s("li",[s("strong",[t._v("第 4 步.")]),t._v("  PLT[0] 通过 GOT[1] 间接地把动态链接器的一个参数压入栈中, 然后通过 GOT[2] 间接跳转进动态链接器中. 动态链接器使用两个栈条目来确定 addvec 的运行时位置, 用这个地址重写 GOT[4], 再把控制传递给 addvec.")])]),t._v(" "),s("p",[t._v("图 7-19b 给出的是后续再调用 addvec 时的控制流:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("第 1 步.")]),t._v("  和前面一样, 控制传递到 PLT[2].")]),t._v(" "),s("li",[s("strong",[t._v("第 2 步.")]),t._v("  不过这次通过 GOT[4] 的间接跳转会将控制直接转移到 addvec.")])]),t._v(" "),s("h4",{attrs:{id:"库打桩机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#库打桩机制"}},[t._v("#")]),t._v(" 库打桩机制")]),t._v(" "),s("p",[t._v("Linux 链接器支持一个很强大的技术, 称为"),s("strong",[t._v("库打桩")]),t._v("(library interpositioning), 它允许你"),s("strong",[t._v("截获对共享库函数的调用, 取而代之执行自己的代码")]),t._v(". 使用打桩机制, "),s("strong",[t._v("可以追踪对某个特殊库函数的调用次数, 验证和追踪它的输入和输出值, 或者甚至把它替换成一个完全不同的实现")]),t._v(".")]),t._v(" "),s("p",[t._v("下面是它的基本思想: 给定一个需要打桩的目标函数, 创建一个包装函数, 它的原型与目标函数完全一样. 使用某种特殊的打桩机制, 就可以欺骗系统调用包装函数而不是目标函数了. "),s("strong",[t._v("包装函数通常会执行它自己的逻辑, 然后调用目标函数, 再将目标函数的返回值传递给调用者")]),t._v(". (感觉有点像代理?)")]),t._v(" "),s("p",[t._v("打桩可以发生在编译时, 链接时或当程序被加载和执行的运行时. 要研究这些不同的机制, 以下面代码 7-20a 中的示例程序作为运行例子. 它调用 C 标准库(libc.so)中的 "),s("strong",[t._v("malloc 和 free")]),t._v(" 函数. 对 malloc 的调用从堆中分配一个 32 字节的块, 并返回指向该块的指针. 对 free 的调用把块还回到堆, 供后续的 malloc 调用使用. 我们的目标是用打桩来追踪程序运行时对 malloc 和 free 的调用.")]),t._v(" "),s("h5",{attrs:{id:"_1-编译时打桩"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-编译时打桩"}},[t._v("#")]),t._v(" 1.编译时打桩")]),t._v(" "),s("p",[t._v("代码 7-20 展示了如何使用 C 预处理器在编译时打桩. mymalloc.c 中的"),s("strong",[t._v("包装函数")]),t._v("(图 7-20c)调用目标函数, 打印追踪记录, 并返回. 本地的 malloc.h 头文件(图 7-20b)指示预处理器用对相应包装函数的"),s("strong",[t._v("调用替换掉对目标函数的调用")]),t._v(".")]),t._v(" "),s("blockquote",[s("p",[t._v("代码7-20: 用C预处理进行编译时打桩")])]),t._v(" "),s("blockquote",[s("p",[t._v("7-20(a) 示例程序 int.c")])]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<malloc.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("malloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("free")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("blockquote",[s("p",[t._v("7-20(b) 本地 malloc.h 文件")])]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name function"}},[t._v("malloc")]),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mymalloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name function"}},[t._v("free")]),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("myfree")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mymalloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("myfree")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("blockquote",[s("p",[t._v("7-20(c) mymalloc.c 中的包装函数")])]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("ifdef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("COMPILETIME")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<malloc.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* malloc wrapper function */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mymalloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("malloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"malloc(%d)=%p\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* free wrapper function */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("myfree")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("free")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"free(%p)\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br")])]),s("p",[t._v("像下面这样"),s("strong",[t._v("编译和链接")]),t._v("这个程序:")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" gcc "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-DCOMPILETIME")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-c")]),t._v(" mymalloc.c\nlinux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" gcc -I. "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-o")]),t._v(" intc int.c mymalloc.o\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("运行这个程序会得到如下的追踪信息:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("intc\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("malloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x9ee010")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("free")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x9ee010")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h5",{attrs:{id:"_2-链接时打桩"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-链接时打桩"}},[t._v("#")]),t._v(" 2.链接时打桩")]),t._v(" "),s("p",[t._v("Linux 静态链接器支持用  "),s("strong",[t._v("--wrap f")]),t._v(" 标志进行链接时打桩. 这个标志告诉链接器, 把对符号 "),s("strong",[t._v("f")]),t._v(" 的引用解析成 "),s("strong",[t._v("wrapf")]),t._v("(前缀是两个下划线), 还要把对符号 "),s("strong",[t._v("realf")]),t._v("(前缀是两个下划线)的引用解析为 "),s("strong",[t._v("f")]),t._v(". 代码 7-21 给出了示例程序的包装函数.")]),t._v(" "),s("blockquote",[s("p",[t._v("代码7-21: 用 --wrap 标志进行链接时打桩")])]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("ifdef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("LINKTIME")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__real_malloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__real_free")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* malloc wrapper function */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__wrap_malloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__real_malloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Call libc malloc */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"malloc(%d) = %p\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* free wrapper function */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__wrap_free")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__real_free")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Call libc free */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"free(%p)\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br")])]),s("p",[t._v("用下述方法把这些源文件编译成可重定位目标文件:")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" gcc "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-DLINKTIME")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-c")]),t._v(" mymalloc.c\nlinux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" gcc "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-c")]),t._v(" int.c\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("然后把目标文件链接成可执行文件:")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" gcc -Wl,--wrap,malloc -Wl,--wrap,free "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-o")]),t._v(" intl int.o mymalloc.o\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v("-Wl,option")]),t._v(" 标志把 "),s("strong",[t._v("option")]),t._v(" 传递给链接器. "),s("strong",[t._v("option")]),t._v(" 中的每个逗号都要替换为一个空格. 所以  "),s("strong",[t._v("-Wl,--wrap,malloc")]),t._v(" 就把  "),s("strong",[t._v("--wrap malloc")]),t._v(" 传递给链接器, 以类似的方式传递  "),s("strong",[t._v("-Wl,--wrap,free")]),t._v(".")]),t._v(" "),s("p",[t._v("运行该程序会得到如下追踪信息:")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ./intl\nmalloc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 0x18cf010\nfree"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("0x18cf010"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h5",{attrs:{id:"_3-运行时打桩"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-运行时打桩"}},[t._v("#")]),t._v(" 3.运行时打桩")]),t._v(" "),s("p",[t._v("编译时打桩需要能够访问程序的源代码, 链接时打桩需要能够访问程序的可重定位对象文件. 不过, 有一种机制能够在运行时打桩, 它只需要能够访问可执行目标文件. 这个很厉害的机制基于动态链接器的 LD_PRELOAD 环境变量.")]),t._v(" "),s("p",[t._v("如果 LD_PRELOAD 环境变量被设置为一个共享库路径名的列表(以空格或分号分隔), 那么当加载和执行一个程序, 需要解析未定义的引用时, 动态链接器(LD-LINUX.SO) 会先搜索 LD_PRELOAD 库, 然后才搜索任何其他的库. 有了这个机制, "),s("strong",[t._v("当加载和执行任意可执行文件时, 可以对任何共享库中的任何函数打桩, 包括 libc.so")]),t._v(".")]),t._v(" "),s("p",[t._v("代码 7-22 展示了 malloc 和 free 的包装函数. 每个包装函数中, 对 dlsym 的调用返回指向目标 libc 函数的指针. 然后包装函数调用目标函数, 打印追踪记录, 再返回.")]),t._v(" "),s("blockquote",[s("p",[t._v("代码7-22: 用 LD_PRELOAD 进行运行时打桩")])]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("ifdef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("RUNTIME")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("_GNU_SOURCE")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdlib.h>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<dlfcn.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* malloc wrapper function */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("malloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("mallocp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("error"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    mallocp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dlsym")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("RTLD_NEXT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"malloc"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Get address of libc   malloc */")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("error "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dlerror")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fputs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("error"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stderr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mallocp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Call libc malloc */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"malloc(%d) = %p\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* free wrapper function */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("free")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("freep"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("error"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    freep "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dlsym")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("RTLD_NEXT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"free"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Get address of libc free */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("error "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dlerror")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fputs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("error"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stderr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("freep")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Call libc free */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"free(%p)\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br"),s("span",{staticClass:"line-number"},[t._v("39")]),s("br"),s("span",{staticClass:"line-number"},[t._v("40")]),s("br")])]),s("p",[t._v("下面是如何构建包含这些包装函数的共享库的方法:")]),t._v(" "),s("div",{staticClass:"language-text line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("linux> gcc -DRUNTIME -shared -fpic -o mymalloc.so mymalloc.c -ldl\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("这是如何编译主程序:")]),t._v(" "),s("div",{staticClass:"language-text line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("linux> gcc -o intr int.c\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("下面是如何从 bash shell 中运行这个程序:")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("LD_PRELOAD")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./mymalloc.so"')]),t._v(" ./intr\nmalloc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 0x1bf7010\nfree"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("0x1bf7010"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("下面是如何在 csh 或 tcsh 中运行这个程序:")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("setenv LD_PRELOAD "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./mymalloc.so"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" ./intr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" unsetenv LD_PRELOAD"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nmalloc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 0x2157010\nfree"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("0x2157010"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("请注意, 可以用 LD_PRELOAD 对任何可执行程序的库函数调用打桩!")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("LD_PRELOAD")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./mymalloc.so"')]),t._v(" /usr/bin/uptime\nmalloc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("568")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 0x21bb010\nfree"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("0x21bb010"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nmalloc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 0x21bb010\nmalloc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("568")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 0x21bb030\nmalloc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2255")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 0x21bb270\nfree"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("0x21bb030"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nmalloc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 0x21bb030\nmalloc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 0x21bb050\nmalloc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 0x21bb070\nmalloc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 0x21bb090\nmalloc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 0x21bb0b0\nmalloc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("384")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 0x21bb0d0\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v(":47:36 up "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("85")]),t._v(" days, "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(":04, "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" user, load average: "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.10")]),t._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.04")]),t._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.05")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br")])]),s("h4",{attrs:{id:"处理目标文件的工具"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#处理目标文件的工具"}},[t._v("#")]),t._v(" 处理目标文件的工具")]),t._v(" "),s("p",[t._v("在 Linux 系统中有大量可用的工具可以帮助你理解和处理"),s("strong",[t._v("目标文件")]),t._v(". 特别地, GNU binutils 包尤其有帮助, 而且可以运行在每个 Linux 平台上.")]),t._v(" "),s("ul",[s("li",[t._v("AR: 创建静态库, 插入, 删除, 列出和提取成员.")]),t._v(" "),s("li",[t._v("STRINGS: 列出一个目标文件中所有可打印的字符串.")]),t._v(" "),s("li",[t._v("STRIP: 从目标文件中删除符号表信息.")]),t._v(" "),s("li",[t._v("NM: 列出一个目标文件的符号表中定义的符号.")]),t._v(" "),s("li",[t._v("SIZE: 列出目标文件中节的名字和大小.")]),t._v(" "),s("li",[t._v("READELF: 显示一个目标文件的完整结构, 包括 ELF 头中编码的所有信息. 包含 SIZE 和 NM 的功能.")]),t._v(" "),s("li",[t._v("OBJDUMP: 所有二进制工具之母. 能够显示一个目标文件中所有的信息. 它最大的作用是反汇编 .text 节中的二进制指令.")])]),t._v(" "),s("p",[t._v("Linux 系统为操作共享库还提供了 LDD 程序:")]),t._v(" "),s("ul",[s("li",[t._v("LDD: 列出一个可执行文件在运行时所需要的共享库.")])]),t._v(" "),s("h4",{attrs:{id:"小结-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小结-2"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),s("p",[t._v("链接可以在"),s("mark",[s("strong",[t._v("编译时由静态编译器")])]),t._v("来完成, 也可以在"),s("mark",[s("strong",[t._v("加载时和运行时由动态链接器")])]),t._v("来完成. 链接器处理称为目标文件的二进制文件, 它有 3 种不同的形式: "),s("mark",[s("strong",[t._v("可重定位的, 可执行的和共享的")])]),t._v(". "),s("strong",[t._v("可重定位的目标文件由静态链接器合并成一个可执行的目标文件, 它可以加载到内存中并执行. 共享目标文件(共享库)是在运行时由动态链接器链接和加载的, 或者隐含地在调用程序被加载和开始执行时, 或者根据需要在程序调用 dlopen 库的函数时")]),t._v(".")]),t._v(" "),s("p",[s("strong",[t._v("链接器的两个主要任务是符号解析和重定位, 符号解析将目标文件中的每个全局符号都绑定到一个唯一的定义, 而重定位确定每个符号的最终内存地址, 并修改对那些目标的引用.")])]),t._v(" "),s("p",[t._v("静态链接器是由像 GCC 这样的编译驱动程序调用的. 它们将多个可重定位目标文件合并成一个单独的可执行目标文件. 多个目标文件可以定义相同的符号, 而链接器用来悄悄地解析这些多重定义的规则可能在用户程序中引入微妙的错误.")]),t._v(" "),s("p",[s("strong",[t._v("多个目标文件可以被连接到一个单独的静态库中. 链接器用库来解析其他目标模块中的符号引用")]),t._v(". 许多链接器通过从左到右的顺序扫描来解析符号引用, 这是另一个引起令人迷惑的链接时错误的来源.")]),t._v(" "),s("p",[s("strong",[t._v("加载器将可执行文件的内容映射到内存, 并运行这个程序")]),t._v(". 链接器还可能生成部分链接的可执行目标文件, 这样的文件中有对定义在共享库中的例程和数据的未解析的引用. 在加载时, 加载器将部分链接的可执行文件映射到内存, 然后调用动态链接器, 它通过加载共享库和重定位程序中的引用来完成链接任务.")]),t._v(" "),s("p",[s("strong",[t._v("被编译为位置无关代码的共享库可以加载到任何地方, 也可以在运行时被多个进程共享. 为了加载, 链接和访问共享库的函数和数据, 应用程序也可以在运行时使用动态链接器.")])]),t._v(" "),s("h3",{attrs:{id:"_8-异常控制流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-异常控制流"}},[t._v("#")]),t._v(" 8.异常控制流")]),t._v(" "),s("p",[t._v("从给处理器加电开始, 直到断电为止, 程序计数器假设一个值的序列:")]),t._v(" "),s("p",[t._v("$$\na_0, a_1, \\cdots, a_{n-1}\n$$")]),t._v(" "),s("p",[t._v("其中, 每个 "),s("span",{attrs:{"data-type":"text"}},[t._v("a")]),t._v("​"),s("sub",[t._v("k")]),t._v(" 是某个相应的指令 "),s("span",{attrs:{"data-type":"text"}},[t._v("I")]),t._v("​"),s("sub",[t._v("k")]),t._v(" 的地址. 每次从 "),s("span",{attrs:{"data-type":"text"}},[t._v("a")]),t._v("​"),s("sub",[t._v("k")]),t._v(" 到 "),s("span",{attrs:{"data-type":"text"}},[t._v("a")]),t._v("​"),s("sub",[t._v("k+1")]),t._v(" 的过渡称为"),s("strong",[t._v("控制转移")]),t._v("(control transfer). 这样的控制转移序列叫做处理器的"),s("strong",[t._v("控制流")]),t._v("(flow of control 或 control flow).")]),t._v(" "),s("p",[t._v('最简单的一种控制流是一个"平滑的"序列, 其中每个 '),s("span",{attrs:{"data-type":"text"}},[t._v("I")]),t._v("​"),s("sub",[t._v("k")]),t._v(" 和 "),s("span",{attrs:{"data-type":"text"}},[t._v("I")]),t._v("​"),s("sub",[t._v("k+1")]),t._v(" 在内存中都是相邻的. 这种平滑流的突变(也就是 "),s("span",{attrs:{"data-type":"text"}},[t._v("I")]),t._v("​"),s("sub",[t._v("k+1")]),t._v(" 与 "),s("span",{attrs:{"data-type":"text"}},[t._v("I")]),t._v("​"),s("sub",[t._v("k")]),t._v(" 不相邻)通常是由诸如跳转, 调用和返回这样一些熟悉的程序指令造成的. 这样一些指令都是必要的机制, 使得程序能够对由程序变量表示的内部程序状态中的变化做出反应.")]),t._v(" "),s("p",[s("strong",[t._v("但是系统也必须能够对系统状态的变化做出反应, 这些系统状态不是被内部程序变量捕获的, 而且也不一定要和程序的执行相关")]),t._v(". 比如, 一个硬件定时器定期产生信号, 这个事件必须得到处理. 包到达网络适配器后, 必须存放在内存中. 程序向磁盘请求数据, 然后休眠, 直到被通知说数据已就绪. 当子进程终止时, 创造这些子进程的父进程必须得到通知.")]),t._v(" "),s("p",[s("strong",[t._v("现代系统通过使控制流发生突变来对这些情况做出反应")]),t._v(". 一般而言, 把这些突变称为"),s("mark",[s("strong",[t._v("异常控制流")])]),t._v("(Exceptional Control Flow, "),s("strong",[t._v("ECF")]),t._v("). 异常控制流发生在计算机系统的各个层次. 比如, 在硬件层, 硬件检测到的事件会触发控制突然转移到异常处理程序. 在操作系统层, 内核通过上下文切换将控制从一个用户进程转移到另一个用户进程. 在应用层, 一个进程可以发送信号到另一个进程, 而接收者会将控制突然转移到它的一个信号处理程序. 一个程序可以通过回避通常的栈规则, 并执行到其他函数中任意位置的非本地跳转来对错误做出反应.")]),t._v(" "),s("p",[t._v("作为程序员, 理解 ECF 很重要, 这有很多原因:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("理解 ECF 将帮助你理解重要的系统概念.")]),t._v("  ECF 是操作系统用来实现 I/O, 进程和虚拟内存的基本机制. 在能够真正理解这些重要概念之前, 必须理解 ECF.")]),t._v(" "),s("li",[s("strong",[t._v("理解 ECF 将帮助你理解应用程序是如何与操作系统交互的.")]),t._v("  应用程序通过使用一个叫做"),s("strong",[t._v("陷阱(trap)或者系统调用")]),t._v("(system call)的 ECF 形式, 向操作系统请求服务. 比如, 向磁盘写数据, 从网络读取数据, 创建一个新进程, 以及终止当前进程, 都是通过应用程序调用系统调用来实现的. 理解基本的系统调用机制将帮助你理解这些服务是如何提供给应用的.")]),t._v(" "),s("li",[s("strong",[t._v("理解 ECF 将帮助你编写有趣的新应用程序.")]),t._v("  操作系统为应用程序提供了强大的 ECF 机制, 用来创建新进程, 等待进程终止, 通知其他进程系统中的异常事件, 以及检测和响应这些事件. 如果理解了这些 ECF 机制, 那就能用它们来编写诸如 Unix shell 和 Web 服务器之类的程序了.")]),t._v(" "),s("li",[s("strong",[t._v("理解 ECF 将帮助你理解并发.")]),t._v("  ECF 是计算机系统中实现并发的基本机制. 在运行中的并发的例子有: 中断应用程序执行的异常处理程序, 在时间上重叠执行的进程和线程, 以及中断应用程序执行的信号处理程序. 理解 ECF 是理解并发的第一步. 第 12 章中会更详细地研究并发.")]),t._v(" "),s("li",[s("strong",[t._v("理解 ECF 将帮助你理解软件异常如何工作.")]),t._v("  像 C++ 和 Java 这样的语言通过 try, catch 以及 throw 语句来提供软件异常机制. 软件异常允许程序进行非本地跳转(即违反通常的调用/返回栈规则的跳转)来响应错误情况. 非本地跳转是一种"),s("strong",[t._v("应用层 ECF")]),t._v(", 在 C 中是通过 setjmp 和 longjmp 函数提供的. 理解这些低级函数将帮助你理解高级软件异常如何得以实现.")])]),t._v(" "),s("p",[t._v("本章的重要性在于你将开始学习"),s("strong",[t._v("应用是如何与操作系统交互")]),t._v("的. 有趣的是, 这些交互都是围绕着 ECF 的. 我们"),s("strong",[t._v("将描述存在于一个计算机系统中所有层次上的各种形式的 ECF")]),t._v(". 从异常开始, 异常位于硬件和操作系统交界的部分. 此外还会讨论系统调用, 它们是为应用程序提供到操作系统的入口点的异常. 然后会提升抽象的层次, 描述进程和信号, 它们位于应用和操作系统的交界之处. 最后讨论非本地跳转, 这是 ECF 的一种应用层形式.")]),t._v(" "),s("h4",{attrs:{id:"异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异常"}},[t._v("#")]),t._v(" 异常")]),t._v(" "),s("p",[s("strong",[t._v("异常是异常控制流的一种形式, 它一部分由硬件实现, 一部分由操作系统实现")]),t._v(". 因为它们有一部分是由硬件实现的, 所以具体细节将随系统的不同而有所不同. 然而, 对于每个系统而言, 基本的思想都是相同的. 在这一节的目的是让你对异常和异常处理有一个一般性的了解, 并揭示现代计算机系统的一个经常令人感到迷惑的方面.")]),t._v(" "),s("p",[s("mark",[s("strong",[t._v("异常")])]),t._v("​ "),s("strong",[t._v("(exception)就是控制流中的突变, 用来响应处理器状态中的某些变化")]),t._v(". 图 8-1 展示了基本的思想.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230812120204-ir5l3xj.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图 8-1 异常的剖析. 处理器状态中的变化(事件)触发从应用程序到异常处理程序的突发的控制转移(异常). 在异常处理程序完成处理后, 它将控制返回给被中断的程序或者终止")])]),t._v(" "),s("p",[t._v("在图中, 当处理器状态中发生一个重要的变化时, 处理器正在执行"),s("strong",[t._v("某个当前指令")]),t._v(" "),s("strong",[t._v("I")]),t._v("​**"),s("sub",[t._v("curr")]),s("strong",[t._v(". 在处理器中, 状态被编码为不同的")]),t._v("位和信号**. "),s("strong",[t._v("状态变化称为")]),t._v("​"),s("mark",[s("strong",[t._v("事件")])]),t._v("​ "),s("strong",[t._v("(event)")]),t._v(" . 事件可能和当前指令的执行直接相关. 比如, 发生虚拟内存缺页, 算术溢出, 或者一条指令试图除以零. 另一方面, 事件也可能和当前指令的执行没有关系. 比如, 一个系统定时器产生信号或者一个 I/O 请求完成.")]),t._v(" "),s("p",[s("strong",[t._v("在任何情况下, 当处理器检测到有事件发生时, 它就会通过一张叫做")]),t._v("​"),s("mark",[s("strong",[t._v("异常表")])]),t._v("​ "),s("strong",[t._v("(exception table)的跳转表, 进行一个")]),t._v("​"),s("mark",[s("strong",[t._v("间接过程调用")])]),t._v("​ **(异常), 到一个专门设计用来处理这类事件的操作系统子程序(**​"),s("mark",[s("strong",[t._v("异常处理程序")])]),t._v("​ "),s("strong",[t._v("(exception handler))")]),t._v(" .")]),t._v(" "),s("p",[t._v("当异常处理程序完成处理后, 根据引起异常的事件的类型, 会发生以下 3 种情况中的一种:")]),t._v(" "),s("ol",[s("li",[t._v("处理程序将控制返回给当前指令 "),s("span",{attrs:{"data-type":"text"}},[t._v("I")]),t._v("​"),s("sub",[t._v("curr")]),t._v(", 即当事件发生时正在执行的指令.")]),t._v(" "),s("li",[t._v("处理程序将控制返回给 "),s("span",{attrs:{"data-type":"text"}},[t._v("I")]),t._v("​"),s("sub",[t._v("next")]),t._v(", 如果没有发生异常将会执行的下一条指令.")]),t._v(" "),s("li",[t._v("处理程序终止被中断的程序.")])]),t._v(" "),s("p",[t._v("8.1.2 节将讲述关于这些可能性的更多内容.")]),t._v(" "),s("blockquote",[s("p",[t._v("旁注: 硬件异常与软件异常")])]),t._v(" "),s("p",[t._v('C++ 和 Java 的程序员会注意到术语 "异常" 也用来描述由 C++ 和 Java 以 catch, throw 和 try 语句形式提供的应用级 ECF. 如果想严格清晰, 必须区别 "硬件" 和 "软件" 异常, 但这通常是不必要的, 因为从上下文中就能够很清楚地知道是哪种含义.')]),t._v(" "),s("h5",{attrs:{id:"_1-异常处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-异常处理"}},[t._v("#")]),t._v(" 1.异常处理")]),t._v(" "),s("p",[t._v("异常可能会难以理解, 因为处理异常需要硬件和软件紧密合作. 很容易搞混哪个部分执行哪个任务. 下面更详细地来看看硬件和软件的分工.")]),t._v(" "),s("p",[s("strong",[t._v("系统中可能的每种类型的异常都分配了一个")]),t._v("​"),s("mark",[s("strong",[t._v("唯一的非负整数的异常号")])]),t._v("​ "),s("strong",[t._v("(exception number)")]),t._v(" . 其中一些号码是由处理器的设计者分配的, 其他号码是由操作系统内核(操作系统常驻内存的部分)的设计者分配的. 前者的示例包括被零除, 缺页, 内存访问违例, 断点以及算术运算溢出. 后者的示例包括系统调用和来自外部 I/O 设备的信号.")]),t._v(" "),s("p",[t._v("在系统启动时(当计算机重启或者加电时), 操作系统分配和初始化一张称为"),s("strong",[t._v("异常表")]),t._v("的跳转表, 使得表目 k 包含异常 k 的处理程序的地址. 图 8-2 展示了异常表的格式.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230812120613-ghkhjkc.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图8-2: 异常表. 异常表是一张跳表, 其中表目 k 包含异常 k 的处理程序代码的地址")])]),t._v(" "),s("p",[t._v("在运行时(当系统在执行某个程序时), "),s("strong",[t._v("处理器检测到发生了一个事件, 并且确定了相应的异常号 k. 随后, 处理器触发异常, 方法是执行间接过程调用, 通过异常表的表目 k, 转到相应的处理程序")]),t._v(".")]),t._v(" "),s("p",[t._v("图 8-3 展示了处理器如何使用异常表来形成适当的异常处理程序的地址. 异常号是到异常表中的"),s("strong",[t._v("索引")]),t._v(", 异常表的起始地址放在一个叫做"),s("strong",[t._v("异常表基址寄存器")]),t._v("(exception table base register)的特殊 CPU 寄存器里.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230812120812-8bg544s.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图8-3 生成异常处理查询的地址. 异常号是到异常表中的索引")])]),t._v(" "),s("p",[t._v("异常类似于过程调用, 但是有一些重要的不同之处:")]),t._v(" "),s("ul",[s("li",[t._v("过程调用时, 在跳转到处理程序之前, 处理器将返回地址压入栈中. 然而, 根据异常的类型, "),s("strong",[t._v("返回地址要么是当前指令(当事件发生时正在执行的指令), 要么是下一条指令(如果事件不发生, 将会在当前指令后执行的指令)")]),t._v(" .")]),t._v(" "),s("li",[t._v("处理器也把一些额外的处理器状态压到栈里, 在处理程序返回时, 重新开始执行被中断的程序会需要这些状态. 比如, x86-64 系统会将包含当前条件码的 EFLAGS 寄存器和其他内容压入栈中.")]),t._v(" "),s("li",[t._v("如果控制从用户程序转移到内核, 所有这些项目都被压到"),s("strong",[t._v("内核栈")]),t._v("中, 而不是压到用户栈中.")]),t._v(" "),s("li",[s("strong",[t._v("异常处理程序运行在内核模式下")]),t._v(", 这意味着它们对所有的系统资源都有"),s("strong",[t._v("完全的访问权限")]),t._v(".")])]),t._v(" "),s("p",[t._v('一旦硬件触发了异常, 剩下的工作就是由异常处理程序在软件中完成. 在处理程序处理完事件之后, 它通过执行一条特殊的 "从中断返回" 指令, 可选地返回到被中断的程序, 该指令将适当的状态弹回到处理器的控制和数据寄存器中, 如果异常中断的是一个用户程序, 就将状态恢复为'),s("strong",[t._v("用户模式")]),t._v(", 然后将控制返回给被中断的程序.")]),t._v(" "),s("h5",{attrs:{id:"_2-异常的类别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-异常的类别"}},[t._v("#")]),t._v(" 2.异常的类别")]),t._v(" "),s("p",[t._v("异常可以分为四类: "),s("strong",[t._v("中断")]),t._v("(interrupt), "),s("strong",[t._v("陷阱")]),t._v("(trap), "),s("strong",[t._v("故障")]),t._v("(fault) 和 "),s("strong",[t._v("终止")]),t._v("(abort). 下表 8-4 对这些类别的属性做了小结.")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("类别")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("原因")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("异步/同步")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("返回行为")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("中断")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("来自 I/O 设备的信号")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("异步")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("总是返回到下一条指令")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("陷阱")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("有意的异常")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("同步")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("总是返回到下一条指令")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("故障")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("潜在可恢复的错误")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("同步")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("可能返回到当前指令")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("终止")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("不可恢复的错误")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("同步")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("不会返回")])])])]),t._v(" "),s("blockquote",[s("p",[t._v("图 8-4 异常的类别. 异步异常是由处理器外部的 I/O 设备中的事件产生的. 同步异常是执行一条指令的直接产物")])]),t._v(" "),s("h6",{attrs:{id:"_1-中断"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-中断"}},[t._v("#")]),t._v(" (1)中断")]),t._v(" "),s("p",[s("mark",[s("strong",[t._v("中断")])]),t._v("​"),s("strong",[t._v("是异步发生的, 是来自")]),t._v("​"),s("mark",[s("strong",[t._v("处理器外部的 I/O 设备的信号")])]),t._v("​"),s("strong",[t._v("的结果")]),t._v(". 硬件中断不是由任何一条专门的指令造成的, 从这个意义上来说它是异步的. 硬件中断的异常处理程序常常称为"),s("strong",[t._v("中断处理程序")]),t._v("(interrupt handler).")]),t._v(" "),s("p",[t._v("图 8-5 概述了一个中断的处理. I/O 设备, 例如网络适配器, 磁盘控制器和定时器芯片, 通过向处理器芯片上的一个引脚发信号, 并将异常号放到系统总线上, 来触发中断, 这个"),s("strong",[t._v("异常号标识了引起中断的设备")]),t._v(".")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230812121144-8xbfopu.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图8-5 中断处理. 中断处理程序将控制返回给应用程序控制流中的下一条指令")])]),t._v(" "),s("p",[t._v("在当前指令完成执行之后, 处理器注意到中断引脚的电压变高了, 就从系统总线读取异常号, 然后调用适当的中断处理程序. 当处理程序返回时, 它就将控制返回给下一条指令(也即如果没有发生中断, 在控制流中会在当前指令之后的那条指令). 结果是程序继续执行, 就好像没有发生过中断一样.")]),t._v(" "),s("p",[s("mark",[s("strong",[t._v("剩下的异常类型(陷阱, 故障和终止)是同步发生的, 是执行当前指令的结果. 这类指令叫做故障指令(faulting instruction).")])])]),t._v(" "),s("h6",{attrs:{id:"_2-陷阱和系统调用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-陷阱和系统调用"}},[t._v("#")]),t._v(" (2)陷阱和系统调用")]),t._v(" "),s("p",[s("mark",[s("strong",[t._v("陷阱是有意的异常, 是执行一条指令的结果")])]),t._v(". 就像中断处理程序一样, 陷阱处理程序将控制返回到下一条指令. "),s("mark",[s("strong",[t._v("陷阱最重要的用途是在用户程序和内核之间提供一个像过程一样的接口, 叫做系统调用")])]),t._v(".")]),t._v(" "),s("p",[t._v('用户程序经常需要向内核请求服务, 比如读一个文件(read), 创建一个新的进程(fork), 加载一个新的程序(execve), 或者终止当前进程(exit). 为了允许对这些内核服务的受控的访问, 处理器提供了一条特殊的 "syscall n" 指令, 当用户程序想要请求服务 n 时, 可以执行这条指令. 执行 syscall 指令会'),s("strong",[t._v("导致一个到异常处理程序的陷阱, 这个处理程序解析参数, 并调用适当的内核程序")]),t._v(". 图 8-6 概述了一个系统调用的处理.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230812121403-koceqv8.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图8-6 陷阱处理. 陷阱处理程序将控制返回给应用程序控制流中的下一条指令")])]),t._v(" "),s("p",[t._v("从程序员的角度来看, 系统调用和普通的函数调用是一样的. 然而, 它们的实现非常不同. "),s("strong",[t._v("普通的函数运行在用户模式中, 用户模式限制了函数可以执行的指令的类型, 而且它们只能访问与调用函数相同的栈. 系统调用运行在内核模式中, 内核模式允许系统调用执行特权指令, 并访问定义在内核中的栈")]),t._v(". 后面会更详细地讨论用户模式和内核模式.")]),t._v(" "),s("h6",{attrs:{id:"_3-故障"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-故障"}},[t._v("#")]),t._v(" (3)故障")]),t._v(" "),s("p",[s("mark",[s("strong",[t._v("故障由错误情况引起, 它可能能够被故障处理程序修正")])]),t._v(". 当故障发生时, 处理器将控制转移给故障处理程序. 如果处理程序能够"),s("strong",[t._v("修正")]),t._v("这个错误情况, 它就将控制返回到引起故障的指令, 从而重新执行它. 否则, 处理程序返回到内核中的 abort 例程, abort 例程会终止引起故障的应用程序. 图 8-7 概述了一个故障的处理.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230812121649-4gljd8f.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图8-7 故障处理. 根据故障是否能够修复, 故障处理程序要么重新执行引起故障的指令, 要么终止")])]),t._v(" "),s("p",[t._v("一个经典的故障示例是"),s("strong",[t._v("缺页异常")]),t._v(", 当指令引用一个虚拟地址, 而与该地址相对应的物理页面不在内存中, 因此必须从磁盘中取出时, 就会发生故障. 一个页面就是虚拟内存的一个连续的块(典型的是 4KB). "),s("strong",[t._v("缺页处理程序从磁盘加载适当的页面")]),t._v(", 然后将控制返回给引起故障的指令. 当指令"),s("strong",[t._v("再次执行")]),t._v("时, 相应的物理页面已经驻留在内存中了, 指令就可以没有故障地运行完成了.")]),t._v(" "),s("h6",{attrs:{id:"_4-终止"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-终止"}},[t._v("#")]),t._v(" (4)终止")]),t._v(" "),s("p",[s("mark",[s("strong",[t._v("终止是不可恢复的致命错误造成的结果, 通常是一些硬件错误")])]),t._v(", 比如 DRAM 或者 SRAM 位被损坏时发生的奇偶错误. 终止处理程序从不将控制返回给应用程序. 如图 8-8 所示, 处理程序将控制返回给一个 abort 例程, 该例程会终止这个应用程序.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230812131555-xzpywec.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图8-8 终止处理. 终止处理程序将控制传递给一个内核 abort 例程.")])]),t._v(" "),s("h5",{attrs:{id:"_3-linux-x86-64系统中的异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-linux-x86-64系统中的异常"}},[t._v("#")]),t._v(" 3.Linux/x86-64系统中的异常")]),t._v(" "),s("p",[t._v("为了使描述更具体, 来看看为 x86-64 系统定义的一些异常. 有高达 256 种不同的异常类型. "),s("strong",[t._v("0 ∼ 31 的号码对应的是由 Intel 架构师定义的异常, 因此对任何 x86-64 系统都是一样的. 32 ∼ 255 的号码对应的是操作系统定义的中断和陷阱")]),t._v(". 下面表 8-9 展示了一些示例.")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("异常号")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("描述")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("异常类别")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("0")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("除法错误")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("故障")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("13")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("一般保护故障")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("故障")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("14")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("缺页")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("故障")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("18")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("机器检查")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("终止")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("32 ~ 255")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("操作系统定义的异常")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("中断或陷阱")])])])]),t._v(" "),s("blockquote",[s("p",[t._v("图 8-9 x86-64 系统中的异常示例")])]),t._v(" "),s("h6",{attrs:{id:"_1-linux-x86-64故障和终止"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-linux-x86-64故障和终止"}},[t._v("#")]),t._v(" (1)Linux/x86-64故障和终止")]),t._v(" "),s("p",[s("strong",[t._v("除法错误.")]),t._v('  当应用试图除以零时, 或者当一个除法指令的结果对于目标操作数来说太大了的时候, 就会发生除法错误(异常 0). Unix 不会试图从除法错误中恢复, 而是选择终止程序. Linuxshell 通常会把除法错误报告为 "浮点异常(Floating exception)".')]),t._v(" "),s("p",[s("strong",[t._v("一般保护故障.")]),t._v("  许多原因都会导致不为人知的一般保护故障(异常 13), 通常是因为一个"),s("strong",[t._v("程序引用了一个未定义的虚拟内存区域, 或者因为程序试图写一个只读的文本段")]),t._v('. Linux 不会尝试恢复这类故障. Linux shell 通常会把这种一般保护故障报告为 "段故障(Segmentation fault)".')]),t._v(" "),s("p",[s("strong",[t._v("缺页")]),t._v("(异常 14)是会"),s("strong",[t._v("重新执行")]),t._v("产生故障的指令的一个异常示例. 处理程序将适当的磁盘上虚拟内存的一个页面映射到物理内存的一个页面, 然后重新执行这条产生故障的指令. 将在第 9 章中看到缺页是如何工作的细节.")]),t._v(" "),s("p",[s("strong",[t._v("机器检查.")]),t._v("  机器检查(异常 18)是在导致故障的指令执行中检测到致命的硬件错误时发生的. 机器检查处理程序从不返回控制给应用程序.")]),t._v(" "),s("h6",{attrs:{id:"_2-linux-86-64系统调用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-linux-86-64系统调用"}},[t._v("#")]),t._v(" (2)Linux/86-64系统调用")]),t._v(" "),s("p",[t._v("Linux 提供几百种系统调用, 当应用程序想要请求内核服务时可以使用, 包括读文件, 写文件或是创建一个新进程. 下表 8-10 给出了一些常见的 Linux 系统调用. "),s("strong",[t._v("每个系统调用都有一个唯一的整数号, 对应于一个到内核中跳转表的偏移量")]),t._v(". (注意: 这个跳转表和异常表不一样.)")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("编号")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("名字")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("描述")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("编号")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("名字")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("0")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("read")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("读文件")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("33")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("pause")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("挂起进程直到信号到达")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("write")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("写文件")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("37")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("alarm")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("调度告警信号的传送")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("2")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("open")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("打开文件")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("39")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("getpid")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("获得进程ID")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("3")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("close")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("关闭文件")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("57")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("fork")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("创建进程")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("4")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("stat")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("获得文件信息")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("59")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("execve")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("执行一个程序")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("9")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("mmap")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("将内存页映射到文件")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("60")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("_exit")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("终止进程")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("12")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("brk")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("重置堆顶")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("61")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("wait4")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("等待一个进程终止")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("32")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("dup2")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("复制文件描述符")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("62")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("kill")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("发送信号到一个进程")])])])]),t._v(" "),s("blockquote",[s("p",[t._v("图 8-10 Linux x86-64 系统中常用的系统调用示例")])]),t._v(" "),s("p",[t._v("C 程序用 syscall 函数可以直接调用任何系统调用. 然而, 实际中几乎没必要这么做. 对于大多数系统调用, 标准 C 库提供了一组方便的包装函数. 这些包装函数将参数打包到一起, "),s("strong",[t._v("以适当的系统调用指令陷入内核, 然后将系统调用的返回状态传递回调用程序")]),t._v(". 在本书中, "),s("mark",[s("strong",[t._v("将系统调用和与它们相关联的包装函数都称为系统级函数")])]),t._v(", 这两个术语可以互换地使用.")]),t._v(" "),s("p",[t._v("在 X86-64 系统上, "),s("mark",[s("strong",[t._v("系统调用是通过一条称为 syscall 的陷阱指令来提供的")])]),t._v(". 研究程序能够如何使用这条指令来直接调用 Linux 系统调用是很有趣的. "),s("strong",[t._v("所有到 Linux 系统调用的参数都是通过通用寄存器而不是栈传递的")]),t._v(". 按照惯例, 寄存器 ％rax 包含系统调用号, 寄存器 %rdi, %rsi, %rdx, %r10, %r8  和 ％r9 包含最多 6 个参数. 第一个参数在 ％rdi 中, 第二个在 ％rsi 中, 以此类推. 从系统调用返回时, 寄存器 %rcx 和 ％r11 都会被破坏, ％rax 包含返回值. -4095 到 -1 之间的负数返回值表明发生了错误, 对应于负的 errno.")]),t._v(" "),s("p",[t._v("例如, 考虑大家熟悉的 hello 程序的下面这个版本, 用系统级函数 write(见 10.4 节)来写, 而不是用 printf:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello, world\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("_exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[s("strong",[t._v("write 函数的第一个参数将输出发送到 stdout")]),t._v(". 第二个参数是要写的字节序列, 而第三个参数是要写的字节数. 所以 printf 其实就是对系统级函数的封装.")]),t._v(" "),s("p",[t._v("下面的代码 8-11 给出的是 hello 程序的"),s("strong",[t._v("汇编语言")]),t._v("版本, "),s("strong",[t._v("直接使用 syscall 指令来调用 write 和 exit 系统调用")]),t._v(". 第 9 ∼ 13 行调用 write 函数. 首先, 第 9 行将系统调用 write 的编号存放在 ％rax 中, 第 10 ∼ 12 行设置参数列表. 然后第 13 行使用 syscall 指令来调用系统调用. 类似地, 第 14 ∼ 16 行调用 _exit 系统调用.")]),t._v(" "),s("blockquote",[s("p",[t._v("代码 8-11 直接用 Linux 系统调用来实现 hello 程序")])]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("section "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data\nstring"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ascii "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello, world\\n"')]),t._v("\nstring_end"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("equ len"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" string_end "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" string\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("section "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("globl main\nmain"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("First"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" call "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello, world\\n"')]),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),t._v("\n  movq $"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("rax                 # write is system call "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n  movq $"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("rdi                 # Arg1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stdout")]),t._v(" has descriptor "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n  movq $string"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("rsi            # Arg2"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" hello world string\n  movq $len"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("rdx               # Arg3"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string length\n  syscall                       # Make the system call\n\n  "),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("Next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" call "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("_exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),t._v("\n  movq $"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("60")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("rax                # _exit is system call "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("60")]),t._v("\n  movq $"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("rdi                 # Arg1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" exit status is "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n  syscall                       # Make the system call\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br")])]),s("blockquote",[s("p",[t._v("旁注: 关于术语的注释")])]),t._v(" "),s("p",[t._v('各种异常类型的术语根据系统的不同而有所不同. 处理器 ISA 规范通常会区分异步 "中断" 和同步 "异常", 但是并没有提供描述这些非常相似的概念的概括性的术语. 为了避免不断地提到 "异常和中断" 以及 "异常或者中断", 我们用单词 "异常" 作为通用的术语, 而且只有'),s("strong",[t._v("在必要时才区别异步异常(中断)和同步异常(陷阱, 故障和终止)")]),t._v(' . 正如前面提到过的, 对于每个系统而言, 基本的概念都是相同的, 但是你应该意识到一些制造厂商的手册会用 "异常" 仅仅表示同步事件引起的控制流的改变.')]),t._v(" "),s("h4",{attrs:{id:"进程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#进程"}},[t._v("#")]),t._v(" 进程")]),t._v(" "),s("p",[t._v("异常是允许操作系统内核提供"),s("strong",[t._v("进程")]),t._v("(process)概念的基本构造块, "),s("mark",[s("strong",[t._v("进程是计算机科学中最深刻, 最成功的概念之一")])]),t._v(".")]),t._v(" "),s("p",[s("strong",[t._v("在现代系统上运行一个程序时, 我们会得到一个假象, 就好像运行的程序是系统中当前运行的唯一的程序一样. 运行的程序好像是独占地使用处理器和内存. 处理器就好像是无间断地一条接一条地执行程序中的指令. 最后, 程序中的代码和数据好像是系统内存中唯一的对象. 这些假象都是通过进程的概念提供给的.")])]),t._v(" "),s("p",[s("strong",[t._v("进程的经典定义就是一个执行中程序的实例")]),t._v(". 系统中的每个程序都运行在某个进程的"),s("strong",[t._v("上下文")]),t._v("(context)中. 上下文是由程序正确运行所需的状态组成的. 这个"),s("strong",[t._v("状态包括存放在内存中的程序的代码和数据, 它的栈, 通用目的寄存器的内容, 程序计数器, 环境变量以及打开文件描述符的集合")]),t._v(".")]),t._v(" "),s("p",[s("mark",[s("strong",[t._v("每次用户通过向 shell 输入一个可执行目标文件的名字, 运行程序时, shell 就会创建一个新的进程, 然后在这个新进程的上下文中运行这个可执行目标文件")])]),t._v(". 应用程序也能够创建新进程, 并且在这个新进程的上下文中运行它们自己的代码或其他应用程序.")]),t._v(" "),s("p",[t._v("关于操作系统如何实现进程的细节的讨论超出了本书的范围. 反之, 我们将关注进程提供给应用程序的关键抽象:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("一个独立的逻辑控制流")]),t._v(", 它提供一个假象, 好像我们的程序独占地使用处理器.")]),t._v(" "),s("li",[s("strong",[t._v("一个私有的地址空间")]),t._v(", 它提供一个假象, 好像我们的程序独占地使用内存系统. 让我们更深入地看看这些抽象.")])]),t._v(" "),s("h5",{attrs:{id:"_1-逻辑控制流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-逻辑控制流"}},[t._v("#")]),t._v(" 1.逻辑控制流")]),t._v(" "),s("p",[t._v("即使在系统中通常有许多其他程序在运行, 像它在独占地使用处理器. 如果想用调试器单步执行程序, 会看到一系列的程序计数器(PC)的值, 这些值唯一地对应于包含在程序的可执行目标文件中的指令, 或是包含在运行时动态链接到程序的共享对象中的指令. 这个 PC 值的序列叫做"),s("strong",[t._v("逻辑控制流")]),t._v(", 或者简称"),s("strong",[t._v("逻辑流")]),t._v(".")]),t._v(" "),s("p",[t._v("考虑一个运行着三个进程的系统, 如图 8-12 所示. 处理器的一个物理控制流被分成了三个逻辑流, 每个进程一个. 每个竖直的条表示一个进程的逻辑流的一部分. 在这个例子中, 三个逻辑流的执行是交错的. 进程 A 运行了一会儿, 然后是进程 B 开始运行到完成. 然后, 进程 C 运行了一会儿, 进程 A 接着运行直到完成. 最后, 进程 C 可以运行到结束了.")]),t._v(" "),s("blockquote",[s("p",[t._v("图 8-12 逻辑控制流. 进程为每个程序提供了一种假象, 好像程序在独占地使用处理器. 每个竖直的条表示一个进程的逻辑控制流的一部分")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230812134908-uchzkrz.png",alt:"image"}})]),t._v(" "),s("p",[t._v("图 8-12 的"),s("strong",[t._v("关键点在于进程是轮流使用处理器")]),t._v("的. 每个进程执行它的流的一部分, 然后被"),s("strong",[t._v("抢占")]),t._v("(preempted)(暂时挂起), 然后轮到其他进程. 对于一个运行在这些进程之一的上下文中的程序, 它看上去就像是在独占地使用处理器. 唯一的反面例证是, 如果精确地测量每条指令使用的时间, 会发现在程序中一些指令的执行之间, "),s("strong",[t._v("CPU 好像会周期性地停顿")]),t._v(". 然而, 每次处理器停顿, 它随后会继续执行我们的程序, 并不改变程序内存位置或寄存器的内容.")]),t._v(" "),s("h5",{attrs:{id:"_2-并发流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-并发流"}},[t._v("#")]),t._v(" 2.并发流")]),t._v(" "),s("p",[t._v("计算机系统中逻辑流有许多不同的形式. 异常处理程序, 进程, 信号处理程序, 线程和 Java 进程都是逻辑流的例子.")]),t._v(" "),s("p",[s("strong",[t._v("一个逻辑流的")]),t._v("​"),s("mark",[s("strong",[t._v("执行在时间")])]),t._v("​"),s("strong",[t._v("上与另一个流重叠, 称为")]),t._v("​"),s("mark",[s("strong",[t._v("并发流")])]),t._v("​ "),s("strong",[t._v("(concurrent flow), 这两个流被称为")]),t._v("​"),s("mark",[s("strong",[t._v("并发地运行")])]),t._v(". 更准确地说, 流 X 和 Y 互相并发, 当且仅当 X 在 Y 开始之后和 Y 结束之前开始, 或者 Y 在 X 开始之后和 X 结束之前开始. 例如, 图 8-12 中, 进程 A 和 B 并发地运行, A 和 C 也一样. 另一方面, B 和 C 没有并发地运行, 因为 B 的最后一条指令在 C 的第一条指令之前执行.")]),t._v(" "),s("p",[t._v("多个流并发地执行的一般现象被称为"),s("strong",[t._v("并发")]),t._v("(concurrency). 一个进程和其他进程轮流运行的概念称为"),s("strong",[t._v("多任务")]),t._v("(multitasking)o 一个进程执行它的控制流的一部分的每一时间段叫做"),s("strong",[t._v("时间片")]),t._v("(time slice). 因此, 多任务也叫做"),s("strong",[t._v("时间分片")]),t._v("(timeslicing). 例如, 图 8-12 中, 进程 A 的流由两个时间片组成.")]),t._v(" "),s("p",[t._v("注意, "),s("strong",[t._v("并发流的思想与流运行的处理器核数或者计算机数无关")]),t._v(". 如果两个流在时间上"),s("strong",[t._v("重叠")]),t._v(", 那么它们就是并发的, 即使它们是运行在同一个处理器上. 不过, 有时会发现确认"),s("strong",[t._v("并行流是很有帮助的, 它是并发流的一个真子集")]),t._v(". "),s("mark",[t._v("如果两个流")]),t._v("​"),s("mark",[s("strong",[t._v("并发地运行在不同的处理器核或者计算机上")])]),t._v("​"),s("mark",[t._v(", 那么我们称它们为")]),t._v("​"),s("mark",[s("strong",[t._v("并行流")])]),t._v("​"),s("mark",[t._v("(parallel flow), 它们")]),t._v("​"),s("mark",[s("strong",[t._v("并行地运行")])]),t._v("​"),s("mark",[t._v("(running in parallel), 且并行地执行(parallel execution)")]),t._v(".")]),t._v(" "),s("h5",{attrs:{id:"_3-私有地址空间"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-私有地址空间"}},[t._v("#")]),t._v(" 3.私有地址空间")]),t._v(" "),s("p",[t._v("进程也为每个程序提供一种假象, 好像它独占地使用系统地址空间. 在一台 n 位地址的机器上, 地址空间是 "),s("span",{attrs:{"data-type":"text"}},[t._v("2n")]),t._v(" 个可能地址的集合, 0, 1, ⋯, "),s("span",{attrs:{"data-type":"text"}},[t._v("2n−1")]),t._v(". 进程为每个程序提供它自己的"),s("strong",[t._v("私有地址空间")]),t._v(". 一般而言, 和这个空间中某个地址相关联的那个内存字节是不能被其他进程读或者写的, 从这个意义上说, "),s("strong",[t._v("这个地址空间是私有的")]),t._v(".")]),t._v(" "),s("p",[t._v("尽管和每个私有地址空间相关联的内存的内容一般是不同的, 但是"),s("strong",[t._v("每个这样的空间都有相同的通用结构")]),t._v(". 比如, 图 8-13 展示了一个 x86-64 Linux 进程的地址空间的组织结构.")]),t._v(" "),s("blockquote",[s("p",[t._v("图8-13 进程地址空间")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230812154240-o8y0u1b.png",alt:"image"}})]),t._v(" "),s("p",[s("strong",[t._v("地址空间底部是保留给用户程序的, 包括通常的代码, 数据, 堆和栈段. 代码段总是从地址 0x400000 开始. 地址空间顶部保留给内核(操作系统常驻内存的部分). 地址空间的这个部分包含内核在代表进程执行指令时(比如当应用程序执行系统调用时)使用的代码, 数据和栈.")])]),t._v(" "),s("h5",{attrs:{id:"_4-用户模式和内核模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-用户模式和内核模式"}},[t._v("#")]),t._v(" 4.用户模式和内核模式")]),t._v(" "),s("p",[t._v("为了使操作系统内核提供一个无懈可击的"),s("strong",[t._v("进程抽象")]),t._v(", 处理器必须提供一种机制, 限制一个应用可以执行的指令以及它可以访问的地址空间范围.")]),t._v(" "),s("p",[t._v("处理器通常是用某个控制寄存器中的一个"),s("strong",[t._v("模式位")]),t._v("(mode bit)来提供这种功能的, 该"),s("strong",[t._v("寄存器描述了进程当前享有的特权")]),t._v(". 当设置了模式位时, 进程就运行在"),s("strong",[t._v("内核模式")]),t._v("中(有时叫做"),s("strong",[t._v("超级用户模式")]),t._v("). "),s("strong",[t._v("一个运行在内核模式的进程可以执行指令集中的任何指令, 并且可以访问系统中的任何内存位置")]),t._v(".")]),t._v(" "),s("p",[t._v("没有设置模式位时, 进程就运行在"),s("strong",[t._v("用户模式")]),t._v("中. 用户模式中的进程不允许执行"),s("strong",[t._v("特权指令")]),t._v("(privileged instruction), 比如停止处理器, 改变模式位, 或者发起一个 I/O. 操作. 也不允许用户模式中的进程直接引用地址空间中内核区内的代码和数据. 任何这样的尝试都会导致致命的保护故障. 反之, "),s("mark",[s("strong",[t._v("用户程序必须通过系统调用接口间接地访问内核代码和数据")])]),t._v(".")]),t._v(" "),s("p",[s("mark",[s("strong",[t._v("运行应用程序代码的进程初始时是在用户模式中的. 进程从用户模式变为内核模式的唯一方法是通过诸如中断, 故障或者陷入系统调用这样的异常. 当异常发生时, 控制传递到异常处理程序, 处理器将模式从用户模式变为内核模式. 处理程序运行在内核模式中, 当它返回到应用程序代码时, 处理器就把模式从内核模式改回到用户模式.")])])]),t._v(" "),s("p",[t._v("Linux 提供了一种聪明的机制, 叫做  "),s("strong",[t._v("/proc 文件系统, 它允许用户模式进程访问内核数据结构的内容")]),t._v(". /proc 文件系统将许多内核数据结构的内容输出为一个用户程序可以读的文本文件的层次结构. 比如, 可以使用 / proc 文件系统找出一般的"),s("strong",[t._v("系统属性")]),t._v(", 比如 CPU 类型(/proc/cpuinfo), 或者某个特殊的进程使用的内存段("),s("code",[t._v("/proc/<process-id>/maps")]),t._v("​). 2.6 版本的 Linux 内核引入 /sys 文件系统, 它输岀关于系统总线和设备的额外的低层信息.")]),t._v(" "),s("h5",{attrs:{id:"_5-上下文切换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-上下文切换"}},[t._v("#")]),t._v(" 5.上下文切换")]),t._v(" "),s("p",[t._v("操作系统内核使用一种称为"),s("strong",[t._v("上下文切换")]),t._v("(context switch)的较高层形式的异常控制流来实现"),s("strong",[t._v("多任务")]),t._v(". 上下文切换机制是建立在前面已经讨论过的那些较低层异常机制之上的.")]),t._v(" "),s("p",[s("strong",[t._v("内核为每个进程维持一个")]),t._v("​"),s("mark",[s("strong",[t._v("上下文")])]),t._v("​ "),s("strong",[t._v("(context)")]),t._v(" . "),s("strong",[t._v("上下文就是")]),t._v("​"),s("mark",[s("strong",[t._v("内核重新启动一个被抢占的进程所需的状态")])]),t._v("​ "),s("strong",[t._v(". 它由一些对象的值组成, 这些对象包括通用目的寄存器, 浮点寄存器, 程序计数器, 用户栈, 状态寄存器, 内核栈和各种内核数据结构, 比如描述地址空间的页表, 包含有关当前进程信息的进程表, 以及包含进程已打开文件的信息的文件表")]),t._v(".")]),t._v(" "),s("p",[t._v("在进程执行的某些时刻, 内核可以决定抢占当前进程, 并重新开始一个先前被抢占了的进程. 这种决策就叫做"),s("mark",[s("strong",[t._v("调度")])]),t._v("(scheduling), 是由内核中称为"),s("mark",[s("strong",[t._v("调度器")])]),t._v("(scheduler)的代码处理的. 当内核选择一个新的进程运行时, 可以说内核调度了这个进程. "),s("strong",[t._v("在内核调度了一个新的进程运行后, 它就抢占当前进程, 并使用一种称为上下文切换的机制来将控制转移到新的进程, 上下文切换会 (1) 保存当前进程的上下文, (2) 恢复某个先前被抢占的进程被保存的上下文, (3) 将控制传递给这个新恢复的进程")]),t._v(".")]),t._v(" "),s("p",[t._v("当内核代表用户执行系统调用时, 可能会发生上下文切换. 如果系统调用因为等待某个事件发生而阻塞, 那么内核可以让当前进程休眠, 切换到另一个进程. 比如, 如果一个 read 系统调用需要访问磁盘, 内核可以选择执行上下文切换, 运行另外一个进程, 而不是等待数据从磁盘到达. 另一个示例是 sleep 系统调用, 它显式地请求让调用进程休眠. 一般而言, 即使系统调用没有阻塞, 内核也可以决定执行上下文切换, 而不是将控制返回给调用进程.")]),t._v(" "),s("p",[s("strong",[t._v("中断也可能引发上下文切换")]),t._v(". 比如, 所有的系统都有某种产生"),s("strong",[t._v("周期性定时器中断的机制")]),t._v(", 通常为每 1 毫秒或每 10 毫秒. 每次发生定时器中断时, 内核就能判定当前进程已经运行了足够长的时间, 并切换到一个新的进程.")]),t._v(" "),s("p",[t._v("图 8-14 展示了一对进程 A 和 B 之间上下文切换的示例. 在这个例子中, 进程 A 初始运行在用户模式中, 直到它通过执行系统调用 read 陷入到内核. 内核中的陷阱处理程序请求来自磁盘控制器的 DMA 传输, 并且安排在磁盘控制器完成从磁盘到内存的数据传输后, 磁盘中断处理器.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230812160551-w5ibid6.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图8-14 进程上下文切换的剖析")])]),t._v(" "),s("p",[t._v("磁盘取数据要用一段相对较长的时间(数量级为几十毫秒), 所以"),s("strong",[t._v("内核执行从进程 A 到进程 B 的上下文切换")]),t._v(", 而不是在这个间歇时间内等待, 什么都不做. 注意在切换之前, 内核正代表进程 A 在用户模式下执行指令(即没有单独的内核进程). 在切换的第一部分中, 内核代表进程 A 在内核模式下执行指令. 然后在某一时刻, 它开始代表进程 B(仍然是内核模式下)执行指令. 在切换之后, 内核代表进程 B 在用户模式下执行指令.")]),t._v(" "),s("p",[t._v("随后, 进程 B 在用户模式下运行一会儿, 直到磁盘发出一个"),s("strong",[t._v("中断信号")]),t._v(", 表示数据已经从磁盘传送到了内存. 内核判定进程 B 已经运行了足够长的时间, 就执行一个从进程 B 到进程 A 的上下文切换, 将控制返回给进程 A 中紧随在系统调用 read 之后的那条指令. 进程 A 继续运行, 直到下一次异常发生, 依此类推.")]),t._v(" "),s("h4",{attrs:{id:"系统调用错误处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#系统调用错误处理"}},[t._v("#")]),t._v(" 系统调用错误处理")]),t._v(" "),s("p",[t._v("当 Unix 系统级函数"),s("strong",[t._v("遇到错误")]),t._v("时, 它们通常会"),s("strong",[t._v("返回 —1")]),t._v(", 并设置全局整数变量 errno 来表示什么出错了. 程序员应该总是检査错误, 但是不幸的是, 许多人都忽略了错误检查, 因为它使代码变得臃肿, 而且难以读懂. 比如, 下面是调用 Unix fork 函数时会如何检査错误:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pid "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fork")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stderr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fork error: %s\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strerror")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("errno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("strerror 函数返回一个文本串, 描述了和某个 errno 值相关联的错误. 通过定义下面的错误报告函数, 能够在某种程度上简化这个代码:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("unix_error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("msg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Unix-style error */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stderr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s: %s\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" msg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strerror")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("errno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("给定这个函数, 对 fork 的调用从 4 行缩减到 2 行:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pid "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fork")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("unix_error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fork error"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[s("strong",[t._v("通过使用错误处理包装函数")]),t._v(", 可以更进一步地简化代码. 对于一个给定的基本函数 foo, 可以定义一个具有相同参数的包装函数 Foo, 但是第一个字母大写了. "),s("strong",[t._v("包装函数调用基本函数, 检査错误, 如果有任何问题就终止")]),t._v(". 比如, 下面是 fork 函数的错误处理包装函数:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fork")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),t._v(" pid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pid "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fork")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("unix_error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Fork error"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" pid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("p",[t._v("给定这个包装函数, 对 fork 的调用就缩减为 1 行:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("pid "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fork")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("本书剩余的部分中都将使用错误处理包装函数. 它们能够保持代码示例简洁, 而又不会给你错误的假象, 认为允许忽略错误检査. "),s("mark",[s("strong",[t._v("注意, 当在本书中谈到系统级函数时, 总是用它们的小写字母的基本名字来引用它们, 而不是用它们大写的包装函数名来引用")])]),t._v(".")]),t._v(" "),s("p",[t._v("关于 Unix 错误处理以及本书中使用的错误处理包装函数的讨论, 请参见附录 A. 包装函数定义在一个叫做 csapp.c 的文件中, 它们的原型定义在一个叫做 csapp.h 的头文件中; 可以从 CSAPP 网站上在线地得到这些代码.")]),t._v(" "),s("h4",{attrs:{id:"进程控制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#进程控制"}},[t._v("#")]),t._v(" 进程控制")]),t._v(" "),s("p",[t._v("Unix 提供了大量从 C 程序中"),s("strong",[t._v("操作进程的系统调用")]),t._v(". 这一节将描述这些重要的函数, 并举例说明如何使用它们.")]),t._v(" "),s("h5",{attrs:{id:"_1-获取进程id"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-获取进程id"}},[t._v("#")]),t._v(" 1.获取进程ID")]),t._v(" "),s("p",[s("strong",[t._v("每个进程都有一个唯一的正数(非零)进程 ID(PID)")]),t._v(" . getpid 函数返回调用进程的 PID. getppid 函数返回它的父进程的 PID(创建调用进程的进程).")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/types.h>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<unistd.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 调用者或其父进程的 PID.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getpid")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getppid")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("getpid 和 getppid 函数返回一个类型为 "),s("strong",[t._v("pid_t")]),t._v(" 的整数值, 在 Linux 系统上它在 types.h 中被定义为 int.")]),t._v(" "),s("h5",{attrs:{id:"_2-创建和终止进程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-创建和终止进程"}},[t._v("#")]),t._v(" 2.创建和终止进程")]),t._v(" "),s("p",[t._v("从程序员的角度, 可以认为进程总是处于下面三种状态之一:")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("运行.")]),t._v("  进程要么在 CPU 上执行, 要么在"),s("strong",[t._v("等待被执行")]),t._v("且最终会被内核调度.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("停止.")]),t._v("  进程的执行被"),s("strong",[t._v("挂起")]),t._v("(suspended), 且"),s("strong",[t._v("不会被调度")]),t._v(". 当收到 SIGSTOP, SIGTSTP, SIGTTIN 或者 SIGTTOU 信号时, 进程就停止, 并且保持停止直到它收到一个 "),s("strong",[t._v("SIGCONT")]),t._v(" 信号, 在这个时刻, 进程再次开始运行. (信号是一种软件中断的形式, 将在后面详细描述.)")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("终止.")]),t._v("  进程永远地停止了. 进程会因为三种原因终止:")]),t._v(" "),s("p",[t._v("(1) 收到一个信号, 该信号的默认行为是终止进程;")]),t._v(" "),s("p",[t._v("(2) 从主程序返回;")]),t._v(" "),s("p",[t._v("(3) 调用 exit 函数.")])])]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdlib.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 该函数不返回.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" status"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("exit 函数以 status 退出状态来终止进程(另一种设置退出状态的方法是从主程序中返回一个整数值).")]),t._v(" "),s("p",[t._v("父进程通过调用 "),s("strong",[t._v("fork 函数创建一个新的运行的子进程")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/types.h>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<unistd.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 子进程返回 0, 父进程返回子进程的 PID, 如果出错, 则为 -1.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fork")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("新创建的子进程几乎但不完全与父进程相同. "),s("mark",[s("strong",[t._v("子进程得到与父进程用户级虚拟地址空间相同的(但是独立的)一份副本, 包括代码和数据段, 堆, 共享库以及用户栈. 子进程还获得与父进程任何打开文件描述符相同的副本, 这就意味着当父进程调用 fork 时, 子进程可以读写父进程中打开的任何文件. 父进程和新创建的子进程之间最大的区别在于它们有不同的 PID")])]),t._v(".")]),t._v(" "),s("p",[t._v("fork 函数是有趣的(也常常令人迷惑), 因为它"),s("mark",[s("strong",[t._v("只被调用一次, 却会返回两次: 一次是在调用进程(父进程)中, 一次是在新创建的子进程中")])]),t._v(". 在父进程中, fork 返回子进程的 PID. 在子进程中, fork 返回 0. 因为子进程的 PID 总是为非零, 返回值就提供一个明确的方法"),s("strong",[t._v("来分辨程序是在父进程还是在子进程中执行")]),t._v(".")]),t._v(" "),s("p",[t._v("下面代码 8-15 展示了一个使用 fork 创建子进程的父进程的示例. 当 fork 调用在第 6 行返回时, 在父进程和子进程中 x 的值都为 1. 子进程在第 8 行加一并输出它的 x 的副本. 相似地, 父进程在第 13 行减一并输出它的 x 的副本.")]),t._v(" "),s("blockquote",[s("p",[t._v("代码 8-15 使用 fork 创建一个新进程")])]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),t._v(" pid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    pid "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fork")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pid "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Child */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"child : x=%d\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Parent */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"parent: x=%d\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br")])]),s("p",[t._v("当在 Unix 系统上运行这个程序时, 得到下面的结果:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("fork\nparent"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\nchild "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("这个简单的例子有一些微妙的方面.")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("调用一次, 返回两次.")]),t._v("  fork 函数被父进程调用一次, 但是却返回两次, "),s("strong",[t._v("一次是返回到父进程, 一次是返回到新创建的子进程")]),t._v(". 对于只创建一个子进程的程序来说, 这还是相当简单直接的. 但是具有多个 fork 实例的程序可能就会令人迷惑, 需要仔细地推敲了.")]),t._v(" "),s("li",[s("strong",[t._v("并发执行.")]),t._v("  父进程和子进程是"),s("strong",[t._v("并发运行的独立进程")]),t._v(". 内核能够以任意方式交替执行它们的逻辑控制流中的指令. 在系统上运行这个程序时, 父进程先完成它的 printf 语句, 然后是子进程. 然而, 在另一个系统上"),s("strong",[t._v("可能正好相反")]),t._v(". 一般而言, 作为程序员, "),s("strong",[t._v("决不能对不同进程中指令的交替执行做任何假设")]),t._v(".")]),t._v(" "),s("li",[s("strong",[t._v("相同但是独立的地址空间.")]),t._v("  如果能够在 fork 函数在父进程和子进程中返回后立即暂停这两个进程, 可以会看到"),s("strong",[t._v("两个进程的地址空间都是相同的")]),t._v(". 每个进程有相同的用户栈, 相同的本地变量值, 相同的堆, 相同的全局变量值, 以及相同的代码. 因此, 在示例程序中, 当 fork 函数在第 6 行返回时, 本地变量 x 在父进程和子进程中都为 1. 然而, 因为父进程和子进程是独立的进程, 它们都有自己的"),s("strong",[t._v("私有地址空间")]),t._v(". 后面, 父进程和子进程对 x 所做的任何改变都是"),s("strong",[t._v("独立")]),t._v("的, 不会反映在另一个进程的内存中. 这就是为什么当父进程和子进程调用它们各自的 printf 语句时, 它们中的变量 x 会有不同的值.")]),t._v(" "),s("li",[s("strong",[t._v("共享文件.")]),t._v("  当运行这个示例程序时, 可以注意到父进程和子进程都把它们的输出显示在屏幕上. 原因是子进程"),s("strong",[t._v("继承")]),t._v("了父进程所有的打开文件. 当父进程调用 fork 时, stdout 文件是打开的, 并指向屏幕. "),s("strong",[t._v("子进程继承了这个文件, 因此它的输出也是指向屏幕的")]),t._v(".")])]),t._v(" "),s("p",[t._v("如果第一次学习 fork 函数, 画进程图通常会有所帮助, 进程图是刻画程序语句的偏序的一种简单的前趋图. 每个顶点 a 对应于一条程序语句的执行. 有向边 a → b 表示语句 a 发生在语句 b 之前. 边上可以标记出一些信息, 例如一个变量的当前值. 对应于 printf 语句的顶点可以标记上 printf 的输出. 每张图从一个顶点开始, 对应于调用 main 的父进程. 这个顶点没有入边, 并且只有一个出边. 每个进程的顶点序列结束于一个对应于 exit 调用的顶点. 这个顶点只有一条入边, 没有出边. 例如, 图 8-16 展示了图 8-15 中示例程序的进程图. 初始时, 父进程将变量 x 设置为 1. 父进程调用 fork, 创建一个子进程, 它在自己的私有地址空间中与父进程并发执行.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230812161458-sc88yt6.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图8-16 代码8-15中示例程序的进程图")])]),t._v(" "),s("p",[t._v("对于运行在单处理器上的程序, 对应进程图中所有顶点的"),s("strong",[t._v("拓扑排序")]),t._v("(topological sort)表示程序中语句的一个"),s("strong",[t._v("可行的全序排列")]),t._v(". 下面是一个理解拓扑排序概念的简单方法: 给定进程图中顶点的一个排列, 把顶点序列从左到右写成一行, 然后画出每条有向边. 排列是一个拓扑排序, 当且仅当画出的"),s("strong",[t._v("每条边的方向都是从左往右")]),t._v("的. 因此, 在代码 8-15 的示例程序中, 父进程和子进程的 printf 语句可以以任意先后顺序执行, 因为每种顺序都对应于图顶点的某种拓扑排序.")]),t._v(" "),s("p",[t._v("进程图特别有助于理解带有嵌套 fork 调用的程序. 例如, 图 8-17 中的程序源码中两次调用了 fork. 对应的进程图可帮助我们看清这个程序运行了四个进程, 每个都调用了一次 printf, 这些 printf 可以以任意顺序执行.")]),t._v(" "),s("blockquote",[s("p",[t._v("图8-17 嵌套fork的进程图")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230812161619-uvm4yl0.png",alt:"image"}})]),t._v(" "),s("h5",{attrs:{id:"_3-回收子进程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-回收子进程"}},[t._v("#")]),t._v(" 3.回收子进程")]),t._v(" "),s("p",[t._v("当一个进程由于某种原因终止时, "),s("strong",[t._v("内核并不是立即把它从系统中清除")]),t._v(". 相反, 进程被"),s("strong",[t._v("保持在一种已终止的状态")]),t._v("中, 直到被它的"),s("mark",[s("strong",[t._v("父进程回收")])]),t._v("(reaped). "),s("strong",[t._v("当父进程回收已终止的子进程时, 内核将子进程的退出状态传递给父进程, 然后抛弃已终止的进程, 从此时开始, 该进程就不存在了")]),t._v(". 一个终止了但还未被回收的进程称为"),s("mark",[s("strong",[t._v("僵死进程")])]),t._v("(zombie).")]),t._v(" "),s("blockquote",[s("p",[t._v("旁注: 为什么已终止的子进程被称为僵死进程")])]),t._v(" "),s("p",[t._v("在民间传说中, 僵尸是活着的尸体, 一种半生半死的实体. 僵死进程已经终止了, 而内核仍保留着它的某些状态直到父进程回收它为止, 从这个意义上说它们是类似的.")]),t._v(" "),s("p",[s("mark",[s("strong",[t._v("如果一个父进程终止了, 内核会安排 init 进程成为它的孤儿进程的养父")])]),t._v(". "),s("strong",[t._v("init 进程的 PID 为 1, 是在系统启动时由内核创建的, 它不会终止, 是所有进程的祖先. 如果父进程没有回收它的僵死子进程就终止了, 那么内核会安排 init 进程去回收它们")]),t._v(". 不过, 长时间运行的程序, 比如 shell 或者服务器, 总是应该回收它们的僵死子进程. 即使僵死子进程没有运行, 它们仍然消耗系统的"),s("strong",[t._v("内存")]),t._v("资源.")]),t._v(" "),s("p",[t._v("一个进程可以通过"),s("strong",[t._v("调用 waitpid 函数来等待它的子进程终止或者停止")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/types.h>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/wait.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 如果成功, 则为子进程的 PID, 如果 WNOHANG, 则为 0, 如果其他错误, 则为 -1.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("waitpid")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),t._v(" pid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("statusp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" options"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("waitpid 函数有点复杂. 默认情况下(当 options=0 时), waitpid 挂起调用进程的执行, 直到它的"),s("strong",[t._v("等待集合")]),t._v("(wait set)中的一个子进程终止. 如果等待集合中的一个进程在刚调用的时刻就已经终止了, 那么 waitpid 就立即返回. 在这两种情况中, waitpid 返回导致 waitpid 返回的已终止子进程的 PID. 此时, 已终止的子进程已经被回收, 内核会从系统中删除掉它的所有痕迹.")]),t._v(" "),s("h6",{attrs:{id:"_1-判定等待集合的成员"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-判定等待集合的成员"}},[t._v("#")]),t._v(" (1)判定等待集合的成员")]),t._v(" "),s("p",[t._v("等待集合的成员是由参数 pid 来确定的:")]),t._v(" "),s("ul",[s("li",[t._v("如果 Pid>0, 那么等待集合就是一个"),s("strong",[t._v("单独的子进程")]),t._v(", 它的进程 ID 等于 pid.")]),t._v(" "),s("li",[t._v("如果 Pid=-1, 那么等待集合就是由"),s("strong",[t._v("父进程所有的子进程")]),t._v("组成的.")])]),t._v(" "),s("p",[t._v("waitpid 函数还支持其他类型的等待集合, 包括 Unix 进程组, 对此不做讨论.")]),t._v(" "),s("h6",{attrs:{id:"_2-修改默认行为"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-修改默认行为"}},[t._v("#")]),t._v(" (2)修改默认行为")]),t._v(" "),s("p",[t._v("可以通过将 options 设置为常量 WNOHANG, WUNTRACED 和 WCONTINUED 的各种组合来"),s("strong",[t._v("修改默认行为")]),t._v(":")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("WNOHANG:")]),t._v("  如果等待集合中的任何子进程都还没有终止, 那么就立即返回(返回值为 0). 默认的行为是挂起调用进程, 直到有子进程终止. 在等待子进程终止的同时, 如果还想做些有用的工作, 这个选项会有用.")]),t._v(" "),s("li",[s("strong",[t._v("WUNTRACED:")]),t._v("  挂起调用进程的执行, "),s("strong",[t._v("直到等待集合中的一个进程变成已终止或者被停止")]),t._v(", 返回的 PID 为导致返回的已终止或被停止子进程的 PID. 默认的行为是只返回已终止的子进程. 当想要检査已终止和被停止的子进程时, 这个选项会有用.")]),t._v(" "),s("li",[s("strong",[t._v("WCONTINUED:")]),t._v("  挂起调用进程的执行, 直到等待集合中一个正在运行的进程终止或等待集合中一个被停止的进程收到 SIGCONT 信号重新开始执行. (后面会解释这些信号.)")])]),t._v(" "),s("p",[t._v("可以用或运算把这些选项组合起来. 例如:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("WNOHANG WUNTRACED:")]),t._v("  立即返回, 如果等待集合中的子进程都没有被停止或终止, 则返回值为 0; 如果有一个停止或终止, 则返回值为该子进程的 PID.")])]),t._v(" "),s("h6",{attrs:{id:"_3-检查已回收子进程的退出状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-检查已回收子进程的退出状态"}},[t._v("#")]),t._v(" (3)检查已回收子进程的退出状态")]),t._v(" "),s("p",[t._v("如果 statusp 参数是非空的, 那么 waitpid 就会在 status 中放上关于导致返回的子进程的状态信息, status 是 statusp 指向的值. wait.h 头文件定义了解释 status 参数的几个宏:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("WIFEXITED(status):")]),t._v("  如果于进程通过调用 exit 或者一个返回(return)正常终止, 就返回真.")]),t._v(" "),s("li",[s("strong",[t._v("WEXITSTATUS(status):")]),t._v("  返回一令正常终止的子进程的退出状态. 只有在 WIFEXITED() 返回为真时, 才会定义这个状态.")]),t._v(" "),s("li",[s("strong",[t._v("WIFSIGNALED(status)")]),t._v(" : 如果子进程是因为一个未被捕获的信号终止的, 那么就返回真.")]),t._v(" "),s("li",[s("strong",[t._v("WTERMSIG(status):")]),t._v("  返回导致子进程终止的信号的编号. 只有在 WIFSIGNALED() 返回为真时, 才定义这个状态.")]),t._v(" "),s("li",[s("strong",[t._v("WIFSTOPPED(status):")]),t._v("  如果引起返回的子进程当前是停止的, 那么就返回真.")]),t._v(" "),s("li",[s("strong",[t._v("WSTOPSIG(status):")]),t._v("  返回引起子进程停止的信号的编号. 只有在 WIFSTOPPED() 返回为真时, 才定义这个状态.")]),t._v(" "),s("li",[s("strong",[t._v("WIFCONTINUED(status):")]),t._v("  如果子进程收到 SIGCONT 信号重新启动, 则返回真.")])]),t._v(" "),s("h6",{attrs:{id:"_4-错误条件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-错误条件"}},[t._v("#")]),t._v(" (4)错误条件")]),t._v(" "),s("p",[t._v("如果调用进程没有子进程, 那么 waitpid 返回 -1, 并且设置 errno 为 ECHILD. 如果 waitpid 函数被一个信号中断, 那么它返回 -1, 并设置 errno 为 EINTR.")]),t._v(" "),s("blockquote",[s("p",[t._v("旁注 - 和 Unix 函数相关的常量")])]),t._v(" "),s("p",[t._v("像 WNOHANG 和 WUNTRACED 这样的常量是由"),s("strong",[t._v("系统头文件")]),t._v("定义的. 例如, WNOHANG 和 WUNTRACED 是由 wait.h 头文件(间接)定义的:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Bits in the third argument to 'waitpid'. */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("WNOHANG")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("   ")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Don’t block waiting. */")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("WUNTRACED")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("   ")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Report status of stopped children. */")])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("为了使用这些常量, 必须在代码中包含 "),s("strong",[t._v("wait.h")]),t._v(" 头文件:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/wait.h>")])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("每个 Unix 函数的 man 页列出了无论何时你在代码中使用那个函数都要包含的头文件. 同时, 为了检查诸如 ECHILD 和 EINTR 之类的返回代码, 必须包含 errno.h. 为了简化代码示例, 包含了一个称为 csapp.h 的头文件, 它包括了本书中使用的所有函数的头文件. csapp.h 头文件可以从 CS: APP 网站在线获得.")]),t._v(" "),s("h6",{attrs:{id:"_5-wait函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-wait函数"}},[t._v("#")]),t._v(" (5)wait函数")]),t._v(" "),s("p",[t._v("wait 函数是 waitpid 函数的简单版本:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/types.h>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/wait.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 如果成功, 则为子进程的 PID, 如果出错, 则为 -1.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("wait")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("statusp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("调用 "),s("strong",[t._v("wait(&status)")]),t._v("  等价于调用 "),s("strong",[t._v("waitpid(-1, &status, 0)")]),t._v(" .")]),t._v(" "),s("h6",{attrs:{id:"_6-使用waitpid的示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-使用waitpid的示例"}},[t._v("#")]),t._v(" (6)使用waitpid的示例")]),t._v(" "),s("p",[t._v("因为 waitpid 函数有些复杂, 看几个例子会有所帮助. 代码 8-18 展示了一个程序, 它使用 waitpid, 不按照特定的顺序等待它的所有 N 个子进程终止. 在第 11 行, 父进程创建 N 个子进程, 在第 12 行, 每个子进程以一个"),s("strong",[t._v("唯一的退出状态")]),t._v("退出. 在继续讲解之前, 请确认你已经理解为什么每个子进程会执行第 12 行, 而父进程不会.")]),t._v(" "),s("blockquote",[s("p",[t._v("图 8-18 使用 waitpid 函数不按照特定的顺序回收僵死子进程")])]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"csapp.h"')])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("N")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")])])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" status"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),t._v(" pid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Parent creates N children */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" N"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pid "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fork")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Child */")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Parent reaps N children in no particular order */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pid "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("waitpid")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("status"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("WIFEXITED")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("status"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"child %d terminated normally with exit status=%d\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                   pid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("WEXITSTATUS")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("status"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"child %d terminated abnormally\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" pid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* The only normal termination is if there are no more children */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("errno "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" ECHILD"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("unix_error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"waitpid error"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   \n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br")])]),s("h4",{attrs:{id:"信号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#信号"}},[t._v("#")]),t._v(" 信号")]),t._v(" "),s("p",[t._v("到目前为止对异常控制流的学习中, 已经看到了硬件和软件是如何合作以提供基本的低层异常机制的. 也看到了操作系统如何利用异常来支持进程上下文切换的异常控制流形式. 本节将研究一种更"),s("strong",[t._v("高层的软件形式的异常")]),t._v(", 称为 "),s("mark",[s("strong",[t._v("Linux 信号")])]),t._v(", 它"),s("strong",[t._v("允许进程和内核中断其他进程")]),t._v(".")]),t._v(" "),s("p",[t._v("一个"),s("strong",[t._v("信号")]),t._v("就是一条小消息, 它通知进程系统中发生了一个某种类型的事件. 比如, 表 8-26 展示了 Linux 系统上支持的 30 种不同类型的信号.")]),t._v(" "),s("p",[s("strong",[t._v("每种信号类型都对应于某种系统事件")]),t._v(". 低层的硬件异常是由内核异常处理程序处理的, 正常情况下, 对用户进程而言是不可见的. 信号提供了一种机制, 通知用户进程发生了这些异常. 比如, 如果一个进程试图除以 0, 那么内核就发送给它一个 SIGFPE 信号(号码 8). 如果一个进程执行一条非法指令, 那么内核就发送给它一个 SIGILL 信号(号码 4). 如果进程进行非法内存引用, 内核就发送给它一个 SIGSEGV 信号(号码 11). 其他信号对应于内核或者其他用户进程中较高层的软件事件. 比如, 如果当进程在前台运行时, 你键入 Ctrl+C(也就是同时按下 Ctrl 键和 C 键), 那么内核就会发送一个 "),s("strong",[t._v("SIGINT")]),t._v(" 信号(号码 2)给这个前台进程组中的每个进程. 一个进程可以通过向另一个进程发送一个 SIGKILL 信号(号码 9)强制终止它. 当一个子进程终止或者停止时, 内核会发送一个 SIGCHLD 信号(号码 17)给父进程.")]),t._v(" "),s("blockquote",[s("p",[t._v("表8-26 Linux 信号")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("序号")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("名称")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("默认行为")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("相应事件")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("SIGHUP")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("终止")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("终端线挂断")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("2")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("SIGINT")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("终止")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("来自键盘的中断")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("3")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("SIGQUIT")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("终止")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("来自键盘的退出")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("4")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("SIGILL")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("终止")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("非法指令")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("5")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("SIGTRAP")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("终止并转储内存"),s("span",{attrs:{"data-type":"text"}},[t._v("①")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("跟踪陷阱")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("6")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("SIGABRT")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("终止并转储内存"),s("span",{attrs:{"data-type":"text"}},[t._v("①")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("来自 abort 函数的终止信号")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("7")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("SIGBUS")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("终止")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("总线错误")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("8")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("SIGFPE")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("终止并转储内存"),s("span",{attrs:{"data-type":"text"}},[t._v("①")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("浮点异常")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("9")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("SIGKILL")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("终止"),s("span",{attrs:{"data-type":"text"}},[t._v("②")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("杀死程序")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("10")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("SIGUSR1")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("终止")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("用户定义的信号 1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("11")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("SIGSEGV")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("终止并转储内存"),s("span",{attrs:{"data-type":"text"}},[t._v("①")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("无效的内存引用(段故障)")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("12")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("SIGUSR2")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("终止")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("用户定义的信号 2")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("13")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("SIGPIPE")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("终止")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("向一个没有读用户的管道做写操作")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("14")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("SIGALRM")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("终止")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("来自 alarm 函数的定时器信号")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("15")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("SIGTERM")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("终止")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("软件终止信号")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("16")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("SIGSTKFLT")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("终止")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("协处理器上的栈故障")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("17")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("SIGCHLD")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("忽略")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("一个子进程停止或者终止")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("18")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("SIGCONT")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("忽略")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("继续进程如果该进程停止")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("19")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("SIGSTOP")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("停止直到下一个SIGCONT"),s("span",{attrs:{"data-type":"text"}},[t._v("②")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("不是来自终端的停止信号")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("20")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("SIGTSTP")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("停止直到下一个SIGCONT")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("来自终端的停止信号")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("21")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("SIGTTIN")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("停止直到下一个SIGCONT")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("后台进程从终端读")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("22")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("SIGTTOU")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("停止直到下一个SIGCONT")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("后台进程向终端写")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("23")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("SIGURG")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("忽略")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("套接字上的紧急情况")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("24")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("SIGXCPU")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("终止")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("CPU 时间限制超出")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("25")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("SIGXFSZ")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("终止")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("文件大小限制超出")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("26")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("SIGVTALRM")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("终止")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("虚拟定时器期满")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("27")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("SIGPROF")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("终止")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("剖析定时器期满")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("28")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("SIGWINCH")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("忽略")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("窗口大小变化")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("29")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("SIGIO")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("终止")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("在某个描述符上可执行 I/O 操作")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("30")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("SIGPWR")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("终止")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("电源故障")])])])]),t._v(" "),s("p",[t._v("注释:")]),t._v(" "),s("ul",[s("li",[t._v("① 多年前, 主存是用一种称为磁芯存储器(core memory)的技术来实现的. 转储内存(dumping core)是一个历史术语, 意思是把代码和数据内存段的映像写到磁盘上.")]),t._v(" "),s("li",[t._v("② 这个信号既不能被捕获, 也不能被忽略.")])]),t._v(" "),s("h5",{attrs:{id:"_1-信号术语"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-信号术语"}},[t._v("#")]),t._v(" 1.信号术语")]),t._v(" "),s("p",[t._v("传送一个信号到目的进程是由两个不同步骤组成的:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("发送信号.")]),t._v("  内核通过"),s("mark",[s("strong",[t._v("更新目的进程上下文中的某个状态, 发送(递送)一个信号给目的进程")])]),t._v(". 发送信号可以有如下两种原因: (1) 内核检测到一个系统事件, 比如除零错误或者子进程终止. (2) 一个进程调用了 kill 函数(在下一节中讨论), 显式地要求内核发送一个信号给目的进程. 一个进程可以发送信号给它自己.")]),t._v(" "),s("li",[s("strong",[t._v("接收信号.")]),t._v(" "),s("strong",[s("strong",[t._v("当目的进程被内核强迫以某种方式对信号的发送做出反应时, 它就接收了信号. 进程可以忽略这个信号, 终止或者通过执行一个称为")])]),t._v("​"),s("strong",[t._v("信号处理程序")]),t._v("(signal handler)的用户层函数捕获这个信号. 图 8-27 给出了信号处理程序捕获信号的基本思想.")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230812162756-28kpiij.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图 8-27 信号处理. 接收到信号会触发控制转移到信号处理程序. 在信号处理程序完成处理之后, 它将控制返回给被中断的程序")])]),t._v(" "),s("p",[t._v("一个发出而没有被接收的信号叫做"),s("strong",[t._v("待处理信号")]),t._v("(pending signal). 在任何时刻, 一种类型至多只会有一个待处理信号. 如果一个进程有一个类型为上的待处理信号, 那么任何接下来发送到这个进程的类型为左的信号都不会排队等待; 它们只是被简单地"),s("strong",[t._v("丢弃")]),t._v(". 一个进程可以有选择性地阻塞接收某种信号. 当一种信号被阻塞时, 它仍可以被发送, 但是产生的待处理信号不会被接收, 直到进程取消对这种信号的阻塞.")]),t._v(" "),s("p",[s("strong",[t._v("一个待处理信号最多只能被接收一次")]),t._v(". 内核为每个进程在 pending 位向量中维护着待处理信号的集合, 而在 blocked 位向量中维护着被阻塞的信号集合. 只要传送了一个类型为 k 的信号, 内核就会设置 pending 中的第 k 位, 而只要接收了一个类型为 k 的信号, 内核就会清除 pending 中的第 k 位.")]),t._v(" "),s("h5",{attrs:{id:"_2-发送信号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-发送信号"}},[t._v("#")]),t._v(" 2.发送信号")]),t._v(" "),s("p",[t._v("Unix 系统提供了大量向进程发送信号的机制. 所有这些机制都是"),s("mark",[s("strong",[t._v("基于进程组")])]),t._v("(process group)这个概念的.")]),t._v(" "),s("h6",{attrs:{id:"_1-进程组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-进程组"}},[t._v("#")]),t._v(" (1)进程组")]),t._v(" "),s("p",[s("strong",[t._v("每个进程都只属于一个进程组, 进程组是由一个正整数进程组 ID 来标识的")]),t._v(". getpgrp 函数返回当前进程的进程组 ID:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<unistd.h>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 调用进程的进程组 ID.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getpgrp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("默认地, 一个子进程和它的父进程"),s("strong",[t._v("同属于一个进程组")]),t._v(". 一个进程可以通过使用 setpgid 函数来改变自己或者其他进程的进程组:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<unistd.h>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 若成功则为o, 若错误则为 -1.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setpgid")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),t._v(" pid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),t._v(" pgid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("setpgid 函数将进程 pid 的进程组"),s("strong",[t._v("改为")]),t._v(" pgid. 如果 pid 是 0, 那么就使用当前进程的 PID. 如果 pgid 是 0, 那么就用 pid 指定的进程的 PID 作为进程组 ID. 例如, 如果进程 15213 是调用进程, 那么")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setpgid")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("会创建一个新的进程组, 其进程组 ID 是 15213, 并且把进程 15213 加入到这个新的进程组中.")]),t._v(" "),s("h6",{attrs:{id:"_2-用-bin-kill程序发送信号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-用-bin-kill程序发送信号"}},[t._v("#")]),t._v(" (2)用/bin/kill程序发送信号")]),t._v(" "),s("p",[t._v("/bin/kill 程序可以"),s("strong",[t._v("向另外的进程发送任意的信号")]),t._v(". 比如, 命令")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("bin"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("kill "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15213")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("发送信号 9(SIGKILL)给进程 15213. 一个为负的 PID 会导致信号被发送到进程组 PID 中的每个进程. 比如, 命令")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("bin"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("kill "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15213")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("发送一个 SIGKILL 信号给进程组 15213 中的每个进程. 注意, 在此使用完整路径 /bin/kill, 因为有些 Unix shell 有自己内置的 kill 命令.")]),t._v(" "),s("h6",{attrs:{id:"_3-从键盘发送信号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-从键盘发送信号"}},[t._v("#")]),t._v(" (3)从键盘发送信号")]),t._v(" "),s("p",[t._v("Unix shell 使用"),s("strong",[t._v("作业")]),t._v("(job)这个抽象概念来表示为对一条命令行求值而创建的进程. 在任何时刻, 至多只有一个前台作业和 0 个或多个后台作业. 比如, 键入")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ls "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" sort\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("会创建一个由两个进程组成的前台作业, 这两个进程是通过 Unix 管道连接起来的: 一个进程运行 ls 程序, 另一个运行 sort 程序. shell 为每个作业创建一个独立的进程组. 进程组 ID 通常取自作业中父进程中的一个. 比如, 图 8-28 展示了有一个前台作业和两个后台作业的 shell. 前台作业中的父进程 PID 为 20, 进程组 ID 也为 20. 父进程创建两个子进程, 每个也都是进程组 20 的成员.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230812163551-mmmwklb.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图8-28 前台和后台进程组")])]),t._v(" "),s("p",[t._v("在键盘上输入 Ctrl+C 会导致内核发送一个 SIGINT 信号到前台进程组中的每个进程. 默认情况下, 结果是终止前台作业. 类似地, 输入 Ctrl+Z 会发送一个 SIGTSTP 信号到前台进程组中的每个进程. 默认情况下, 结果是"),s("strong",[t._v("停止")]),t._v("(挂起)前台作业.")]),t._v(" "),s("h6",{attrs:{id:"_4-用kill函数发送信号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-用kill函数发送信号"}},[t._v("#")]),t._v(" (4)用kill函数发送信号")]),t._v(" "),s("p",[t._v("进程通过调用 kill 函数发送信号给其他进程(包括它们自己).")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/types.h>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<signal.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 若成功则为 0, 若错误则为 -1.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("kill")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),t._v(" pid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sig"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[s("strong",[t._v("如果 pid 大于零, 那么 kill 函数发送信号号码 sig 给进程 pid")]),t._v(". 如果 pid 等于零, 那么 kill 发送信号 sig 给调用进程所在进程组中的每个进程, 包括调用进程自己. 如果 pid 小于零, kill 发送信号 sig 给进程组  "),s("strong",[t._v("|pid|(pid 的绝对值)")]),t._v("  中的每个进程. 代码 8-29 展示了一个示例, 父进程用 kill 函数发送 SIGKILL 信号给它的子进程.")]),t._v(" "),s("blockquote",[s("p",[t._v("代码 8-29 使用 kill 函数发送信号给子进程")])]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"csapp.h"')])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),t._v(" pid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Child sleeps until SIGKILL signal received, then dies */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pid "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fork")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pause")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Wait for a signal to arrive */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"control should never reach here!\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Parent sends a SIGKILL signal to a child */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Kill")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" SIGKILL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br")])]),s("h6",{attrs:{id:"_5-用alarm函数发送信号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-用alarm函数发送信号"}},[t._v("#")]),t._v(" (5)用alarm函数发送信号")]),t._v(" "),s("p",[t._v("进程可以通过调用 "),s("strong",[t._v("alarm")]),t._v(" 函数向它自己发送 SIGALRM 信号.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<unistd.h>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 前一次闹钟剩余的秒数, 若以前没有设定闹钟, 则为0.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alarm")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" secs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("alarm 函数安排内核在 secs 秒后发送一个 SIGALRM 信号给调用进程. 如果 secs 是零, 那么不会调度安排新的闹钟(alarm). 在任何情况下, 对 alarm 的调用都将取消任何待处理的(pending)闹钟, 并且返回任何待处理的闹钟在被发送前还剩下的秒数(如果这次对 alarm 的调用没有取消它的话); 如果没有任何待处理的闹钟, 就返回零.")]),t._v(" "),s("h5",{attrs:{id:"_3-接收信号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-接收信号"}},[t._v("#")]),t._v(" 3.接收信号")]),t._v(" "),s("p",[t._v("当内核把进程 p "),s("strong",[t._v("从内核模式切换到用户模式")]),t._v("时(例如, 从系统调用返回或是完成了一次上下文切换), 它会检查进程 p 的未被阻塞的待处理信号的集合(pending &~blocked). 如果这个集合为空(通常情况下), 那么内核将控制传递到 p 的逻辑控制流中的下一条指令("),s("span",{attrs:{"data-type":"text"}},[t._v("Inext")]),t._v("). 然而, 如果集合是非空的, 那么内核选择集合中的某个信号 k (通常是最小的 k), 并且强制 p 接收信号 k. 收到这个信号会触发进程采取某种行为. 一旦进程完成了这个行为, 那么控制就传递回 p 的逻辑控制流中的"),s("strong",[t._v("下一条指令")]),t._v("("),s("span",{attrs:{"data-type":"text"}},[t._v("Inext")]),t._v("). 每个信号类型都有一个预定义的"),s("strong",[t._v("默认行为")]),t._v(", 是下面中的一种:")]),t._v(" "),s("ul",[s("li",[t._v("进程终止.")]),t._v(" "),s("li",[t._v("进程终止并转储内存.")]),t._v(" "),s("li",[t._v("进程停止(挂起)直到被 SIGCONT 信号重启.")]),t._v(" "),s("li",[t._v("进程忽略该信号.")])]),t._v(" "),s("p",[t._v("表 8-26 中展示了与"),s("strong",[t._v("每个信号类型相关联的默认行为")]),t._v(". 比如, 收到 SIGKILL 的默认行为就是终止接收进程. 另外, 接收到 SIGCHLD 的默认行为就是忽略这个信号. 进程可以通过使用 signal 函数修改和信号相关联的默认行为. 唯一的例外是 SIGSTOP 和 SIGKILL, 它们的默认行为是不能修改的.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<signal.h>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sighandler_t")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 若成功则为指向前次处理程序的指针, 若出错则为 SIG_ERR(不设置 errno).")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sighandler_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("signal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" signum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sighandler_t")]),t._v(" handler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("signal 函数可以通过下列三种方法之一来改变和信号 signum 相关联的行为:")]),t._v(" "),s("ul",[s("li",[t._v("如果 handler 是 SIG_IGN, 那么忽略类型为 signum 的信号.")]),t._v(" "),s("li",[t._v("如果 handler 是 SIG_DFL, 那么类型为 signum 的信号行为恢复为默认行为.")]),t._v(" "),s("li",[t._v("否则, handler 就是用户定义的函数的地址, 这个函数被称为"),s("strong",[t._v("信号处理程序")]),t._v(", 只要进程接收到一个类型为 signum 的信号, 就会调用这个程序. 通过把处理程序的地址传递到 signal 函数从而改变默认行为, 这叫做"),s("strong",[t._v("设置信号处理程序")]),t._v("(installing the handler). 调用信号处理程序被称为"),s("strong",[t._v("捕获信号")]),t._v(". 执行信号处理程序被称为"),s("strong",[t._v("处理信号")]),t._v(".")])]),t._v(" "),s("p",[t._v("当一个进程捕获了一个类型为 k 的信号时, 会调用为信号 k 设置的处理程序, 一个整数参数被设置为 k. 这个参数允许同一个处理函数捕获不同类型的信号.")]),t._v(" "),s("p",[t._v('当处理程序执行它的 return 语句时, 控制(通常)传递回控制流中进程被信号接收中断位置处的指令. 这里说"通常"是因为在某些系统中, 被中断的系统调用会立即返回一个错误.')]),t._v(" "),s("p",[t._v("代码 8-30 展示了一个程序, 它捕获用户在键盘上输入 Ctrl+C 时发送的 SIGINT 信号. SIGINT 的默认行为是立即终止该进程. 在这个示例中, 将默认行为修改为捕获信号, 输出一条消息, 然后终止该进程.")]),t._v(" "),s("blockquote",[s("p",[t._v("图 8-30 一个用信号处理程序捕获 SIGINT 信号的程序")])]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"csapp.h"')])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sigint_handler")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sig"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* SIGINT handler */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Caught SIGINT!\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Install the SIGINT handler */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("signal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SIGINT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sigint_handler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" SIG_ERR"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("unix_error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"signal error"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pause")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Wait for the receipt of a signal */")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br")])]),s("p",[t._v("信号处理程序可以被其他信号处理程序中断, 如图 8-31 所示. 在这个例子中, 主程序捕获到信号 s, 该信号会中断主程序, 将控制转移到处理程序 S. S 在运行时, 程序捕获信号 t≠s, 该信号会中断 S, 控制转移到处理程序 T. 当 T 返回时, S 从它被中断的地方继续执行. 最后, S 返回, 控制传送回主程序, 主程序从它被中断的地方继续执行.")]),t._v(" "),s("blockquote",[s("p",[t._v("图8-31 信号处理程序可以被其他信号处理程序中断")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230812210946-2jtkogl.png",alt:"image"}})]),t._v(" "),s("h5",{attrs:{id:"_4-阻塞和解除阻塞信号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-阻塞和解除阻塞信号"}},[t._v("#")]),t._v(" 4.阻塞和解除阻塞信号")]),t._v(" "),s("p",[t._v("Linux 提供"),s("strong",[t._v("阻塞信号")]),t._v("的隐式和显式的机制:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("隐式阻塞机制.")]),t._v("  内核"),s("strong",[t._v("默认阻塞任何当前处理程序正在处理信号类型的待处理的信号")]),t._v(". 例如图 8-31 中, 假设程序捕获了信号 s, 当前正在运行处理程序 S. 如果发送给该进程另一个信号 s, 那么直到处理程序 S 返回, s 会变成待处理而没有被接收.")]),t._v(" "),s("li",[s("strong",[t._v("显式阻塞机制.")]),t._v("  应用程序可以使用 sigprocmask 函数和它的辅助函数, "),s("strong",[t._v("明确地阻塞和解除阻塞")]),t._v("选定的信号.")])]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<signal.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sigprocmask")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" how"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sigset_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("set"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sigset_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("oldset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sigemptyset")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sigset_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("set"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sigfillset")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sigset_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("set"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sigaddset")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sigset_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("set"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" signum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sigdelset")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sigset_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("set"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" signum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回; 如果成功则为 0, 若出错则为 -1. ")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sigismember")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sigset_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("set"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" signum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 若 signum 是 set 的成员则为 1, 如果不是则为 0, 若出错则为 -1. ")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])]),s("p",[t._v("sigprocmask 函数改变当前阻塞的信号集合(8.5.1 节中描述的 blocked 位向量). 具体的行为依赖于 how 的值:")]),t._v(" "),s("ul",[s("li",[t._v("SIG_BLOCK: 把 set 中的信号添加到 blocked 中("),s("strong",[t._v("blocked=blocked | set")]),t._v(").")]),t._v(" "),s("li",[t._v("SIG_UNBLOCK: 从 blocked 中删除 set 中的信号("),s("strong",[t._v("blocked=blocked &~set")]),t._v(").")]),t._v(" "),s("li",[t._v("SIG_SETMASK: "),s("strong",[t._v("block=set")]),t._v(".")])]),t._v(" "),s("p",[t._v("如果 oldset 非空, 那么 blocked 位向量之前的值保存在 oldset 中.")]),t._v(" "),s("p",[t._v("使用下述函数对 set 信号集合进行操作: sigemptyset 初始化 set 为空集合. sigfillset 函数把每个信号都添加到 set 中. sigaddset 函数把 signum 添加到 set, sigdelset 从 set 中删除 signum, 如果 signum 是 set 的成员, 那么 sigismember 返回 1, 否则返回 0.")]),t._v(" "),s("p",[t._v("例如, 代码 8-32 展示了如何用 sigprocmask 来临时阻塞接收 SIGINT 信号.")]),t._v(" "),s("blockquote",[s("p",[t._v("图 8-32 临时阻塞接收一个信号")])]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sigset_t")]),t._v(" mask"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" prev_mask"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sigemptyset")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("mask"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sigaddset")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("mask"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" SIGINT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Block SIGINT and save previous blocked set */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sigprocmask")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SIG_BLOCK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("mask"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("prev_mask"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Code region that will not be interrupted by SIGINT")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Restore previous blocked set, unblocking SIGINT */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sigprocmask")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SIG_SETMASK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("prev_mask"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br")])]),s("h5",{attrs:{id:"_5-编写信号处理程序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-编写信号处理程序"}},[t._v("#")]),t._v(" 5.编写信号处理程序")]),t._v(" "),s("p",[t._v("信号处理是 Linux 系统编程最棘手的一个问题. 处理程序有几个属性使得它们很难推理分析:")]),t._v(" "),s("ol",[s("li",[t._v("处理程序与主程序并发运行, 共享同样的全局变量, 因此可能与主程序和其他处理程序互相干扰;")]),t._v(" "),s("li",[t._v("如何以及何时接收信号的规则常常有违人的直觉;")]),t._v(" "),s("li",[t._v("不同的系统有不同的信号处理语义.")])]),t._v(" "),s("h4",{attrs:{id:"非本地跳转"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#非本地跳转"}},[t._v("#")]),t._v(" 非本地跳转")]),t._v(" "),s("p",[t._v("C 语言提供了一种用户级异常控制流形式, 称为"),s("strong",[t._v("非本地跳转")]),t._v("(non local jump), 它"),s("strong",[t._v("将控制直接从一个函数转移到另一个当前正在执行的函数, 而不需要经过正常的调用-返回序列")]),t._v(". 非本地跳转是通过 setjmp 和 longjmp 函数来提供的.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<setjmp.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: setjmp 返回 0, longjmp 返回非零.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setjmp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("jmp_buf env"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sigsetjmp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sigjmp_buf env"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" savesigs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("setjmp 函数在 env 缓冲区中保存当前调用环境, 以供后面的 longjmp 使用, 并返回 0. 调用环境包括程序计数器, 栈指针和通用目的寄存器. 岀于某种超出本书描述范围的原因, setjmp 返回的值不能被赋值给变量:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("rc "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setjmp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("env"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Wrong! */")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("不过它可以安全地用在 switch 或条件语句的测试.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<setjmp.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从不返回.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("longjmp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("jmp_buf env"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" retval"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("siglongjmp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sigjmp_buf env"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" retval"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("longjmp 函数从 env 缓冲区中恢复调用环境, 然后触发一个从最近一次初始化 env 的 setjmp 调用的返回. 然后 setjmp 返回, 并带有非零的返回值 retval.")]),t._v(" "),s("p",[t._v("第一眼看过去, setjmp 和 longjmp 之间的相互关系令人迷惑. setjmp 函数只被调用一次, 但返回多次: 一次是当第一次调用 setjmp, 而调用环境保存在缓冲区 env 中时, 一次是为每个相应的 longjmp 调用. 另一方面, longjmp 函数被调用一次, 但从不返回.")]),t._v(" "),s("p",[s("strong",[t._v("非本地跳转的一个重要应用就是允许从一个深层嵌套的函数调用中立即返回, 通常是由检测到某个错误情况引起的")]),t._v(". 如果在一个深层嵌套的函数调用中发现了一个错误情况, 可以使用非本地跳转直接返回到一个普通的本地化的错误处理程序, 而不是费力地解开调用栈.")]),t._v(" "),s("p",[t._v("代码 8-43 展示了一个示例, 说明这可能是如何工作的. main 函数首先调用 setjmp 以保存当前的调用环境, 然后调用函数 foo, foo 依次调用函数 bar. 如果 foo 或者 bar 遇到一个错误, 它们立即通过一次 longjmp 调用从 setjmp 返回. setjmp 的非零返回值指明了错误类型, 随后可以被解码, 且在代码中的某个位置进行处理.")]),t._v(" "),s("blockquote",[s("p",[t._v("代码 8-43 非本地跳转的示例. 本示例表明了使用非本地跳转来从深层嵌套的函数调用中的错误情况恢复, 而不需要解开整个栈的基本框架")])]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"csapp.h"')])]),t._v("\n\njmp_buf buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" error1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" error2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setjmp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Detected an error1 condition in foo\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Detected an error2 condition in foo\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Unknown error condition in foo\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Deeply nested function foo */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("error1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("longjmp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("error2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("longjmp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br"),s("span",{staticClass:"line-number"},[t._v("39")]),s("br"),s("span",{staticClass:"line-number"},[t._v("40")]),s("br")])]),s("p",[t._v("longjmp 允许它跳过所有中间调用的特性可能产生意外的后果. 例如, 如果中间函数调用中分配了某些数据结构, 本来预期在函数结尾处释放它们, 那么这些释放代码会被跳过, 因而会产生内存泄漏.")]),t._v(" "),s("p",[s("strong",[t._v("非本地跳转的另一个重要应用是使一个信号处理程序分支到一个特殊的代码位置, 而不是返回到被信号到达中断了的指令的位置")]),t._v(". 代码 8-44 展示了一个简单的程序, 说明了这种基本技术. 当用户在键盘上键入 Ctrl+C 时, 这个程序用信号和非本地跳转来实现软重启. sigsetjmp 和 siglongjmp 函数是 setjmp 和 longjmp 的可以被信号处理程序使用的版本.")]),t._v(" "),s("blockquote",[s("p",[t._v("图 8-44 当用户键入 Ctrl+C 时, 使用非本地跳转来重启动它自身的程序")])]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"csapp.h"')])]),t._v("\n\nsigjmp_buf buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("handler")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sig"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("siglongjmp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sigsetjmp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Signal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SIGINT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" handler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sio_puts")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"starting\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sio_puts")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"restarting\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sleep")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sio_puts")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"processing...\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Control never reaches here */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br")])]),s("p",[t._v("在程序第一次启动时, 对 sigsetjmp 函数的初始调用保存调用环境和信号的上下文(包括待处理的和被阻塞的信号向量). 随后, 主函数进入一个无限处理循环. 当用户键入 Ctrl+C 时, 内核发送一个 SIGINT 信号给这个进程, 该进程捕获这个信号. 不是从信号处理程序返回, 如果是这样那么信号处理程序会将控制返回给被中断的处理循环, 反之, 处理程序完成一个非本地跳转, 回到 main 函数的开始处. 当在系统上运行这个程序时, 得到以下输出:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("restart\nstarting\nprocessing"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\nprocessing"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\nCtrl"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("C\nrestarting\nprocessing"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\nCtrl"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("C\nrestarting\nprocessing"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("p",[t._v("关于这个程序有两件很有趣的事情. 首先, 为了避免竞争, 必须在调用了 sigsetjmp 之后再设置处理程序. 否则, 就会冒在初始调用 sigsetjmp 为 siglongjmp 设置调用环境之前這行处理程序的风险. 其次, 你可能已经注意到了, sigsetjmp 和 siglongjmp 函数不在代码 8-33 中异步信号安全的函数之列. 原因是一般来说 siglongjmp 可以跳到任意代码, 所以必须小心, 只在 siglongjmp 可达的代码中调用安全的函数. 在本例中, 我们调用安全的 sio_puts 和 sleep 函数. 不安全的 exit 函数是不可达的.")]),t._v(" "),s("blockquote",[s("p",[t._v("旁注: C++ 和 Java 中的软件异常")])]),t._v(" "),s("p",[t._v("C++ 和 Java 提供的异常机制是较高层次的, 是 C 语言的 setjmp 和 longjmp 函数的更加结构化的版本. 你可以把 try 语句中的 catch 子句看做类似于 setjmp 函数. 相似地, throw 语句就类似于 longjmp 函数.")]),t._v(" "),s("h4",{attrs:{id:"操作进程的工具"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#操作进程的工具"}},[t._v("#")]),t._v(" 操作进程的工具")]),t._v(" "),s("p",[t._v("Linux 系统提供了大量的监控和操作进程的有用工具.")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("STRACE:")]),t._v("  打印一个正在运行的程序和它的子进程调用的每个系统调用的轨迹. 对于好奇的学生而言, 这是一个令人着迷的工具. 用 -static 编译你的程序, 能得到一个更干净的, 不带有大量与共享库相关的输出的轨迹.")]),t._v(" "),s("li",[s("strong",[t._v("PS:")]),t._v("  列出当前系统中的"),s("strong",[t._v("进程")]),t._v("(包括僵死进程).")]),t._v(" "),s("li",[s("strong",[t._v("TOP:")]),t._v("  打印出关于当前进程资源使用的信息.")]),t._v(" "),s("li",[s("strong",[t._v("PMAP:")]),t._v("  显示进程的内存映射.")]),t._v(" "),s("li",[s("strong",[t._v("/proc:")]),t._v('  一个虚拟文件系统, 以 ASCII 文本格式输出大量内核数据结构的内容, 用户程序可以读取这些内容. 比如, 输入 "cat/proc/loadavg", 可以看到 Linux 系统上当前的平均负载.')])]),t._v(" "),s("h4",{attrs:{id:"小结-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小结-3"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),s("p",[s("strong",[t._v("异常控制流(ECF)发生在计算机系统的各个层次, 是计算机系统中提供并发的基本机制.")])]),t._v(" "),s("p",[t._v("在硬件层, 异常是由处理器中的事件触发的控制流中的突变. 控制流传递给一个软件处理程序, 该处理程序进行一些处理, 然后返回控制给被中断的控制流.")]),t._v(" "),s("p",[s("mark",[s("strong",[t._v("有四种不同类型的异常: 中断, 故障, 终止和陷阱")])]),t._v(". 当一个外部 I/O 设备(例如定时器芯片或者磁盘控制器)设置了处理器芯片上的中断管脚时, (对于任意指令)中断会异步地发生. 控制返回到故障指令后面的那条指令. 一条指令的执行可能导致故障和终止同步发生. 故障处理程序会重新启动故障指令, 而终止处理程序从不将控制返回给被中断的流. 最后, 陷阱就像是用来实现向应用提供到操作系统代码的受控的人口点的系统调用的函数调用.")]),t._v(" "),s("p",[t._v("在操作系统层, 内核用 ECF 提供进程的基本概念. 进程提供给应用两个重要的抽象:")]),t._v(" "),s("ol",[s("li",[t._v("逻辑控制流, 它提供给每个程序一个假象, 好像它是在独占地使用处理器;")]),t._v(" "),s("li",[t._v("私有地址空间, 它提供给每个程序一个假象, 好像它是在独占地使用主存.")])]),t._v(" "),s("p",[t._v("在操作系统和应用程序之间的接口处, 应用程序可以创建子进程, 等待它们的子进程停止或者终止, 运行新的程序, 以及捕获来自其他进程的信号. 信号处理的语义是微妙的, 并且随系统不同而不同. 然而, 在与 Posix 兼容的系统上存在着一些机制, 允许程序清楚地指定期望的信号处理语义.")]),t._v(" "),s("p",[t._v("最后, 在应用层, C 程序可以使用非本地跳转来规避正常的调用/返回栈规则, 并且直接从一个函数分支到另一个函数.")]),t._v(" "),s("h3",{attrs:{id:"_9-虚拟内存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-虚拟内存"}},[t._v("#")]),t._v(" 9.虚拟内存")]),t._v(" "),s("p",[s("strong",[t._v("一个系统中的进程是与其他进程共享 CPU 和主存资源的")]),t._v(". 然而, "),s("strong",[t._v("共享主存会形成一些特殊的挑战")]),t._v(". 随着对 CPU 需求的增长, 进程以某种合理的平滑方式慢了下来. 但是如果太多的进程需要太多的内存, 那么它们中的一些就根本无法运行. 当一个程序没有空间可用时, 那就是它运气不好了. 内存还很容易被破坏. 如果某个进程不小心写了另一个进程使用的内存, 它就可能以某种完全和程序逻辑无关的令人迷惑的方式失败.")]),t._v(" "),s("p",[s("strong",[t._v("为了更加有效地管理内存并且少出错, 现代系统提供了一种对主存的抽象概念, 叫做")]),t._v("​"),s("mark",[s("strong",[t._v("虚拟内存")])]),t._v("​ "),s("strong",[t._v("(VM)")]),t._v(" . 虚拟内存是"),s("strong",[t._v("硬件异常")]),t._v(", 硬件地址翻译, 主存, 磁盘文件和内核软件的完美交互, 它"),s("mark",[s("strong",[t._v("为每个进程提供了一个大的, 一致的和私有的地址空间")])]),t._v(". 通过一个很清晰的机制, 虚拟内存提供了三个重要的能力:")]),t._v(" "),s("ol",[s("li",[t._v("它将主存看成是一个存储在磁盘上的地址空间的"),s("strong",[t._v("高速缓存")]),t._v(", 在主存中只保存活动区域, 并根据需要在磁盘和主存之间来回传送数据, 通过这种方式, 它高效地使用了主存.")]),t._v(" "),s("li",[t._v("它"),s("strong",[t._v("为每个进程提供了一致的地址空间")]),t._v(", 从而简化了内存管理.")]),t._v(" "),s("li",[t._v("它保护了"),s("strong",[t._v("每个进程的地址空间不被其他进程破坏")]),t._v(".")])]),t._v(" "),s("p",[t._v("虚拟内存是计算机系统最重要的概念之一. 它成功的一个主要原因就是因为它是沉默地, 自动地工作的, 不需要应用程序员的任何干涉. 既然虚拟内存在幕后工作得如此之好, 为什么程序员还需要理解它呢? 有以下几个原因:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("虚拟内存是核心的.")]),t._v("  虚拟内存遍及计算机系统的所有层面, 在硬件异常, 汇编器, 链接器, 加载器, 共享对象, 文件和进程的设计中扮演着重要角色. 理解虚拟内存将帮助你更好地理解系统通常是如何工作的.")]),t._v(" "),s("li",[s("strong",[t._v("虚拟内存是强大的.")]),t._v("  虚拟内存给予应用程序强大的能力, 可以创建和销毁内存片(chunk), 将内存片映射到磁盘文件的某个部分, 以及与其他进程共享内存. 比如, 你知道可以通过读写内存位置读或者修改一个磁盘文件的内容吗? 或者可以加载一个文件的内容到内存中, 而不需要进行任何显式地复制吗? 理解虚拟内存将帮助你利用它的强大功能在应用程序中添加动力.")]),t._v(" "),s("li",[s("strong",[t._v("虚拟内存是危险的.")]),t._v('  每次应用程序引用一个变量, 间接引用一个指针, 或者调用一个诸如 malloc 这样的动态分配程序时, 它就会和虚拟内存发生交互. 如果虚拟内存使用不当, 应用将遇到复杂危险的与内存有关的错误. 例如, 一个带有错误指针的程序可以立即崩溃于 "段错误" 或者 "保护错误", 它可能在崩溃之前还默默地运行了几个小时, 或者是最令人惊慌地, 运行完成却产生不正确的结果. 理解虚拟内存以及诸如 malloc 之类的管理虚拟内存的分配程序, 可以帮助你避免这些错误.')])]),t._v(" "),s("p",[t._v("这一章"),s("strong",[t._v("从两个角度来看虚拟内存")]),t._v(". 本章的前一部分描述虚拟内存是"),s("strong",[t._v("如何工作")]),t._v("的. 后一部分描述的是应用程序"),s("strong",[t._v("如何使用和管理虚拟内存")]),t._v(". 无可避免的事实是虚拟内存很复杂, 本章很多地方都反映了这一点. 如果你掌握这些细节, 就能够手工模拟一个小系统的虚拟内存机制, 而且虚拟内存的概念将永远不再神秘.")]),t._v(" "),s("p",[t._v("第二部分是建立在这种理解之上的, 向你展示了如何在程序中使用和管理虚拟内存. 你将学会如何通过显式的内存映射和对像 malloc 程序这样的动态内存分配器的调用来管理虚拟内存. 你还将了解到 C 程序中的大多数常见的与内存有关的错误, 并学会如何避免它们的出现.")]),t._v(" "),s("h4",{attrs:{id:"物理和虚拟寻址"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#物理和虚拟寻址"}},[t._v("#")]),t._v(" 物理和虚拟寻址")]),t._v(" "),s("p",[s("strong",[t._v("计算机系统的主存被组织成一个由 M 个连续的字节大小的单元组成的")]),t._v("​"),s("mark",[s("strong",[t._v("数组")])]),t._v(". 每字节都有一个唯一的"),s("strong",[t._v("物理地址")]),t._v("(Physical Address, PA). 第一个字节的地址为 0, 接下来的字节地址为 1, 再下一个为 2, 依此类推. 给定这种简单的结构, "),s("mark",[s("strong",[t._v("CPU 访问内存的最自然的方式就是使用物理地址")])]),t._v(". 我们把这种方式称为"),s("mark",[s("strong",[t._v("物理寻址")])]),t._v("(physical addressing). 图 9-1 展示了一个物理寻址的示例, 该示例的上下文是一条加载指令, 它读取从物理地址 4 处开始的 4 字节字. "),s("strong",[t._v("当 CPU 执行这条加载指令时, 会生成一个有效物理地址, 通过内存总线, 把它传递给主存")]),t._v(". 主存取岀从物理地址 4 处开始的 4 字节字, 并将它返回给 CPU, CPU 会将它存放在一个寄存器里.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230903104145-4u2k05m.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图9-1 一个使用物理寻址的系统")])]),t._v(" "),s("p",[t._v("早期的 PC 使用物理寻址, 而且诸如数字信号处理器, 嵌入式微控制器以及 Cray 超级计算机这样的系统仍然继续使用这种寻址方式. 然而, 现代处理器使用的是一种称为"),s("mark",[s("strong",[t._v("虚拟寻址")])]),t._v("(virtual addressing)的寻址形式, 参见图 9-2.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230903104949-fnhzy94.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图9-2 一个使用虚拟寻址的系统")])]),t._v(" "),s("p",[s("mark",[t._v("使用虚拟寻址, CPU 通过生成一个")]),t._v("​"),s("mark",[s("strong",[t._v("虚拟地址")])]),t._v("​"),s("mark",[t._v("(Virtual Address, VA)来访问")]),t._v("​"),s("mark",[s("strong",[t._v("主存")])]),t._v("​"),s("mark",[t._v(",")]),t._v(" "),s("mark",[s("strong",[t._v("这个虚拟地址在被送到内存之前先转换成适当的物理地址")])]),t._v("​"),s("mark",[t._v(". 将一个虚拟地址转换为物理地址的任务叫做")]),t._v("​"),s("mark",[s("strong",[t._v("地址翻译")])]),t._v("​"),s("mark",[t._v("(address translation). 就像异常处理一样, 地址翻译需要 CPU 硬件和操作系统之间的紧密合作. CPU 芯片上叫做")]),t._v("​"),s("mark",[s("strong",[t._v("内存管理单元")])]),t._v("​"),s("mark",[t._v("(Memory Management Unit, MMU)的")]),t._v("​"),s("mark",[s("strong",[t._v("专用硬件, 利用存放在主存中的查询表来动态翻译虚拟地址, 该表的内容由操作系统管理")])]),t._v("​"),s("mark",[t._v(".")])]),t._v(" "),s("h4",{attrs:{id:"地址空间"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#地址空间"}},[t._v("#")]),t._v(" 地址空间")]),t._v(" "),s("p",[s("strong",[t._v("地址空间")]),t._v("(addressspace)是一个非负整数地址的有序集合:")]),t._v(" "),s("p",[t._v("$$\n{0,1,2,\\cdots}\n$$")]),t._v(" "),s("p",[t._v("如果地址空间中的整数是"),s("strong",[t._v("连续")]),t._v("的, 那么说它是一个"),s("strong",[t._v("线性地址空间")]),t._v("(linear address space). 为了简化讨论, 这里总是假设使用的是线性地址空间. 在一个带"),s("strong",[t._v("虚拟内存")]),t._v("的系统中, CPU "),s("strong",[t._v("从一个有")]),t._v(" "),s("strong",[t._v("N = 2")]),t._v("​**"),s("sup",[t._v("n")]),t._v("** "),s("strong",[t._v("个地址的地址空间中生成虚拟地址")]),t._v(", 这个地址空间称为"),s("strong",[t._v("虚拟地址空间")]),t._v("(virtual addres sspace):")]),t._v(" "),s("p",[t._v("$$\n{0,1,2,\\cdots,N—1}\n$$")]),t._v(" "),s("p",[t._v("一个地址空间的大小是由表示"),s("strong",[t._v("最大地址所需要的位数")]),t._v("来描述的. 例如, 一个包含 "),s("span",{attrs:{"data-type":"text"}},[t._v("N=2")]),t._v("​"),s("sup",[t._v("n")]),t._v(" 个地址的虚拟地址空间就叫做"),s("strong",[t._v("一个 n 位地址空间")]),t._v(". 现代系统通常支持 32 位或者 64 位虚拟地址空间.")]),t._v(" "),s("p",[t._v("一个系统还有一个"),s("strong",[t._v("物理地址空间")]),t._v("(physical address space), 对应于系统中物理内存的 M 个字节:")]),t._v(" "),s("p",[t._v("$$\n{0,1,2,\\cdots,M—1}\n$$")]),t._v(" "),s("p",[t._v("M 不要求是 2 的幕, 但是为了简化讨论, 我们假设 "),s("span",{attrs:{"data-type":"text"}},[t._v("M=2")]),t._v("​"),s("sup",[t._v("m")]),t._v(".")]),t._v(" "),s("p",[t._v("地址空间的概念是很重要的, 因为它清楚地区分了"),s("strong",[t._v("数据对象(字节)和它们的属性(地址)")]),t._v(" . 一旦认识到了这种区别, 那么就可以将其推广, "),s("mark",[s("strong",[t._v("允许每个数据对象有多个独立的地址, 其中每个地址都选自一个不同的地址空间. 这就是虚拟内存的基本思想. 主存中的每字节都有一个选自虚拟地址空间的虚拟地址和一个选自物理地址空间的物理地址")])]),t._v(".")]),t._v(" "),s("h4",{attrs:{id:"虚拟内存作为缓存的工具"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#虚拟内存作为缓存的工具"}},[t._v("#")]),t._v(" 虚拟内存作为缓存的工具")]),t._v(" "),s("p",[t._v("概念上而言, 虚拟内存被组织为一个由存放在磁盘上的 N 个连续的字节大小的单元组成的数组. "),s("strong",[t._v("每字节都有一个唯一的虚拟地址, 作为到数组的索引")]),t._v(". 磁盘上数组的内容被缓存在主存中. 和存储器层次结构中其他缓存一样, 磁盘(较低层)上的数据被"),s("strong",[t._v("分割成块")]),t._v(", 这些块作为磁盘和主存(较高层)之间的传输单元. VM 系统通过将"),s("strong",[t._v("虚拟内存分割")]),t._v("为称为"),s("mark",[s("strong",[t._v("虚拟页")])]),t._v("(Virtual Page, VP)的大小固定的块来处理这个问题. "),s("strong",[t._v("每个虚拟页的大小为")]),t._v(" "),s("strong",[t._v("P=2")]),t._v("​"),s("sup",[s("strong",[t._v("p")])]),t._v(" "),s("strong",[t._v("字节")]),t._v(". 类似地, 物理内存被分割为"),s("mark",[s("strong",[t._v("物理页")])]),t._v("(Physical Page, PP), 大小也为 P 字节(物理页也被称为"),s("strong",[t._v("页帧")]),t._v("(page frame)).")]),t._v(" "),s("p",[t._v("在任意时刻, 虚拟页面的集合都分为三个不相交的子集:")]),t._v(" "),s("ul",[s("li",[s("mark",[s("strong",[t._v("未分配的")])]),t._v("​ "),s("strong",[t._v(":")]),t._v("  VM 系统还未分配(或者创建)的页. 未分配的块没有任何数据和它们相关联, 因此也就不占用任何磁盘空间.")]),t._v(" "),s("li",[s("mark",[s("strong",[t._v("缓存的")])]),t._v("​ "),s("strong",[t._v(":")]),t._v("  当前"),s("strong",[t._v("已缓存在物理内存")]),t._v("中的已分配页.")]),t._v(" "),s("li",[s("mark",[s("strong",[t._v("未缓存的")])]),t._v("​ "),s("strong",[t._v(": 未缓存在物理内存")]),t._v("中的已分配页.")])]),t._v(" "),s("p",[t._v("图 9-3 的示例展示了一个有 8 个虚拟页的小虚拟内存. 虚拟页 0 和 3 还没有被分配, 因此在磁盘上还不存在. 虚拟页 1, 4 和 6 被缓存在物理内存中. 页 2, 5 和 7 已经被分配了, 但是当前并未缓存在主存中.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230903111612-3b9c3jd.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图9-3 一个VM系统是如何使用主存作为缓存的")])]),t._v(" "),s("h5",{attrs:{id:"_1-dram缓存的组织结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-dram缓存的组织结构"}},[t._v("#")]),t._v(" 1.DRAM缓存的组织结构")]),t._v(" "),s("p",[t._v("为了有助于清晰理解存储层次结构中不同的缓存概念, 我们将使用术语 "),s("strong",[t._v("SRAM 缓存")]),t._v("来表示位于 CPU 和主存之间的 Ll, L2 和 L3 高速缓存, 并且用术语 "),s("strong",[t._v("DRAM 缓存来表示虚拟内存系统的缓存, 它在主存中缓存虚拟页")]),t._v(".")]),t._v(" "),s("p",[t._v("在存储层次结构中, DRAM 缓存的位置对它的组织结构有很大的影响. 回想一下, DRAM 比 SRAM 要慢大约 10 倍, 而磁盘要比 DRAM 慢大约 100000 多倍. 因此, DRAM 缓存中的不命中比起 SRAM 缓存中的不命中要昂贵得多, 这是因为 DRAM 缓存不命中要由磁盘来服务, 而 SRAM 缓存不命中通常是由基于 DRAM 的主存来服务的. 而且, 从磁盘的一个扇区读取第一个字节的时间开销比起读这个扇区中连续的字节要慢大约 100000 倍. 归根到底, DRAM 缓存的组织结构完全是由巨大的不命中开销驱动的.")]),t._v(" "),s("p",[t._v("因为大的不命中处罚和访问第一个字节的开销, "),s("strong",[t._v("虚拟页往往很大")]),t._v(", 通常是 4KB ~ 2MB. 由于大的不命中处罚, DRAM 缓存是全相联的, "),s("strong",[t._v("即任何虚拟页都可以放置在任何的物理页中")]),t._v(". 不命中时的替换策略也很重要, 因为替换错了虚拟页的处罚也非常之高. 因此, 与硬件对 SRAM 缓存相比, 操作系统对 DRAM 缓存使用了更复杂精密的替换算法. (这些替换算法超出了我们的讨论范围). 最后, 因为对磁盘的访问时间很长, DRAM 缓存总是使用写回, 而不是直写.")]),t._v(" "),s("h5",{attrs:{id:"_2-页表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-页表"}},[t._v("#")]),t._v(" 2.页表")]),t._v(" "),s("p",[t._v("同任何缓存一样, 虚拟内存系统必须"),s("strong",[t._v("有某种方法来判定一个虚拟页是否缓存在 DRAM 中的某个地方")]),t._v(". 如果是, 系统还必须确定这个虚拟页存放在哪个物理页中. 如果不命中, 系统必须判断这个虚拟页存放在磁盘的哪个位置, 在物理内存中选择一个牺牲页, 并将虚拟页从磁盘复制到 DRAM 中, 替换这个牺牲页.")]),t._v(" "),s("p",[t._v("这些功能是由软硬件联合提供的, "),s("strong",[t._v("包括操作系统软件, MMU(内存管理单元)中的地址翻译硬件和一个存放在物理内存中叫做")]),t._v("​"),s("mark",[s("strong",[t._v("页表")])]),t._v("(page table)的数据结构, "),s("mark",[s("strong",[t._v("页表将虚拟页映射到物理页. 每次地址翻译硬件将一个虚拟地址转换为物理地址时, 都会读取页表. 操作系统负责维护页表的内容, 以及在磁盘与 DRAM 之间来回传送页")])]),t._v(".")]),t._v(" "),s("p",[t._v("图 9-4 展示了一个"),s("strong",[t._v("页表")]),t._v("的基本组织结构. 页表就是一个页表条目(Page Table Entry, PTE)的数组. 虚拟地址空间中的每个页在页表中一个固定偏移量处都有一个 "),s("strong",[t._v("PTE")]),t._v(". 为了我们的目的, 我们将假设每个 PTE 是由一个有效位(valid bit)和一个 n 位地址字段组成的. 有效位表明了该虚拟页当前是否被缓存在 DRAM 中. 如果设置了有效位, 那么地址字段就表示 DRAM 中相应的物理页的起始位置, 这个物理页中缓存了该虚拟页. 如果没有设置有效位, 那么一个空地址表示这个虚拟页还未被分配. 否则, 这个地址就指向该虚拟页在磁盘上的起始位置.")]),t._v(" "),s("p",[t._v("图 9-4 中的示例展示了一个有 8 个虚拟页和 4 个物理页的系统的页表. 四个虚拟页(VP 1, VP 2, VP 4 和 VP 7)当前被缓存在 DRAM 中. 两个页(VP 0 和 VP 5 )还未被分配, 而剩下的页(VP 3 和 VP 6)已经被分配了, 但是当前还未被缓存. 图 9-4 中有一个要点要注意, 因为 DRAM 缓存是全相联的, 所以任意物理页都可以包含任意虚拟页.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230903112040-wm47etq.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图9-4 页表")])]),t._v(" "),s("h5",{attrs:{id:"_3-页命中"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-页命中"}},[t._v("#")]),t._v(" 3.页命中")]),t._v(" "),s("p",[t._v("考虑一下当 CPU 想要读包含在 "),s("strong",[t._v("VP2 中的虚拟内存的一个字")]),t._v("时会发生什么(图 9-5), VP 2 被缓存在 DRAM 中. 这里使用将在 9.6 节中详细描述的一种技术, "),s("strong",[t._v("地址翻译硬件将虚拟地址作为一个索引来定位 PTE 2, 并从内存中读取它")]),t._v(". 因为设置了有效位, 那么地址翻译硬件就知道 VP 2 是缓存在内存中的了. 所以它使用 PTE 中的"),s("strong",[t._v("物理内存地址")]),t._v("(该地址指向 PP 1 中缓存页的起始位置), 构造出这个字的物理地址.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230903112328-p2j2eal.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图9-5 VM页命中. 对 VP2 中一个字的引用就会命中")])]),t._v(" "),s("h5",{attrs:{id:"_4-缺页"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-缺页"}},[t._v("#")]),t._v(" 4.缺页")]),t._v(" "),s("p",[t._v("在虚拟内存的习惯说法中, "),s("mark",[s("strong",[t._v("DRAM 缓存不命中称为缺页")])]),t._v("(page fault). 图 9-6 展示了在缺页之前的示例页表的状态. CPU 引用了 VP 3 中的一个字, "),s("strong",[t._v("VP 3 并未缓存在 DRAM 中")]),t._v(". 地址翻译硬件从内存中读取 PTE 3, 从有效位推断出 VP 3 "),s("strong",[t._v("未被缓存")]),t._v(", 并且触发一个"),s("strong",[t._v("缺页异常")]),t._v(". 缺页异常调用内核中的缺页异常处理程序, 该程序会选择一个牺牲页, 在此例中就是存放在 PP 3 中的 VP 4. 如果 VP 4 已经被修改了, 那么内核就会将它复制回磁盘. 无论哪种情况, 内核都会修改 VP 4 的页表条目, 反映出 VP 4 不再缓存在主存中这一事实.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230903112637-jjfca43.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图9-6 VM缺页(之前). 对 VP 3 中的字的引用会不命中, 从而触发了缺页")])]),t._v(" "),s("p",[t._v("接下来, 内核从"),s("strong",[t._v("磁盘复制 VP 3 到内存中的 PP 3, 更新 PTE 3, 随后返回")]),t._v(". 当异常处理程序返回时, 它会"),s("strong",[t._v("重新启动导致缺页的指令, 该指令会把导致缺页的虚拟地址重发送到地址翻译硬件")]),t._v(". 但是现在, VP 3 "),s("strong",[t._v("已经缓存")]),t._v("在主存中了, 那么页命中也能由地址翻译硬件正常处理了. 图 9-7 展示了在缺页之后的示例页表的状态.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230903113453-9mniqvi.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图 9-7 VM 缺页(之后). 缺页处理程序选择 VP 4 作为牺牲页, 并从磁盘上用 VP 3 的副本取代它. 在缺页处理程序重新启动导致缺页的指令之后, 该指令将从内存中正常地读取字, 而不会再产生异常")])]),t._v(" "),s("p",[t._v("虚拟内存是在 20 世纪 60 年代早期发明的, 远在 CPU - 内存之间差距的加大引发产生 SRAM 缓存之前. 因此, 虚拟内存系统使用了和 SRAM 缓存不同的术语, 即使它们的许多概念是相似的. 在虚拟内存的习惯说法中, 块被称为页. "),s("mark",[s("strong",[t._v("在磁盘和内存之间传送页的活动叫做交换(swapping)或者页面调度(paging)")])]),t._v(" . 页从磁盘"),s("strong",[t._v("换入")]),t._v("(或者页面调入)DRAM 和从 DRAM "),s("strong",[t._v("换出")]),t._v("(或者页面调出)磁盘. 一直等待, 直到最后时刻, 也就是当"),s("strong",[t._v("有不命中发生")]),t._v("时, 才换入页面的这种策略称为"),s("mark",[s("strong",[t._v("按需页面调度")])]),t._v("(demand paging). 也可以采用其他的方法, 例如尝试着预测不命中, 在页面实际被引用之前就换入页面. 然而, 所有现代系统都使用的是按需页面调度的方式.")]),t._v(" "),s("h5",{attrs:{id:"_5-分配页面"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-分配页面"}},[t._v("#")]),t._v(" 5.分配页面")]),t._v(" "),s("p",[t._v("图 9-8 展示了当操作系统"),s("strong",[t._v("分配一个新的虚拟内存页")]),t._v("时对示例页表的影响, 例如, 调用 malloc 的结果. 在这个示例中, VP5 的分配过程是在磁盘上创建空间并更新 PTE 5, 使它指向磁盘上这个新创建的页面.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230903114214-9d1s0ki.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图 9-8 分配一个新的虚拟页面. 内核在磁盘上分配 VP 5, 并且将 PTE 5 指向这个新的位置")])]),t._v(" "),s("h5",{attrs:{id:"_6-又是局部性救了我们"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-又是局部性救了我们"}},[t._v("#")]),t._v(" 6.又是局部性救了我们")]),t._v(" "),s("p",[t._v("当都了解了虚拟内存的概念之后, 许多人的第一印象通常是它的效率应该是非常低. 因为"),s("strong",[t._v("不命中处罚很大")]),t._v(", 可能会担心页面调度会破坏程序性能. 实际上, 虚拟内存工作得相当好, 这主要归功于"),s("mark",[s("strong",[t._v("局部性")])]),t._v("(locality).")]),t._v(" "),s("p",[t._v("尽管在整个运行过程中程序引用的不同页面的总数可能超出物理内存总的大小, 但是"),s("strong",[t._v("局部性原则保证了在任意时刻, 程序将趋向于在一个较小的活动页面(active page)集合上工作")]),t._v(", 这个集合叫做"),s("strong",[t._v("工作集")]),t._v("(working set)或者"),s("strong",[t._v("常驻集合")]),t._v("(resident set). 在初始开销, 也就是将工作集页面调度到内存中之后, 接下来对这个工作集的引用将导致命中, 而不会产生额外的磁盘流量.")]),t._v(" "),s("p",[t._v("只要程序有好的时间局部性, 虚拟内存系统就能工作得相当好. 但是, 当然不是所有的程序都能展现良好的时间局部性. 如果工作集的大小超出了物理内存的大小, 那么程序将产生一种不幸的状态, 叫做"),s("strong",[t._v("抖动")]),t._v("(thrashing), 这时页面将不断地换进换出. 虽然虚拟内存通常是有效的, 但是如果一个程序性能慢得像爬一样, 那么聪明的程序员会考虑是不是发生了抖动.")]),t._v(" "),s("h4",{attrs:{id:"虚拟内存作为内存管理的工具"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#虚拟内存作为内存管理的工具"}},[t._v("#")]),t._v(" 虚拟内存作为内存管理的工具")]),t._v(" "),s("p",[t._v("在上一节中, 可以看到虚拟内存是如何提供一种机制, "),s("strong",[t._v("利用 DRAM 缓存来自通常更大的虚拟地址空间的页面")]),t._v(". 有趣的是, 一些早期的系统, 比如 DEC PDP-11/70, 支持的是一个比物理内存更小的虚拟地址空间. 然而, 虚拟地址仍然是一个有用的机制, 因为它大大地简化了内存管理, 并提供了一种自然的保护内存的方法.")]),t._v(" "),s("p",[t._v("到目前为止, 都假设有一个单独的页表, 将一个虚拟地址空间映射到物理地址空间. 实际上, "),s("mark",[s("strong",[t._v("操作系统为每个进程提供了一个独立的页表, 因而也就是一个独立的虚拟地址空间")])]),t._v(". 图 9-9 展示了基本思想. 在这个示例中, 进程 i 的页表将 VP 1 映射到 PP 2, VP 2 映射到 PP 7. 相似地, 进程 j 的页表将 VP 1 映射到 PP 7, VP 2 映射到 PP 10. 注意, "),s("strong",[t._v("多个虚拟页面可以映射到同一个共享物理页面上")]),t._v(".")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230903133517-frw1aa8.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图 9-9 VM 如何为进程提供独立的地址空间. 操作系统为系统中的每个进程都维护一个独立的页表")])]),t._v(" "),s("p",[s("strong",[t._v("按需页面调度和独立的虚拟地址空间的结合")]),t._v(", 对系统中内存的使用和管理造成了深远的影响. 特别地, VM 简化了"),s("strong",[t._v("链接和加载, 代码和数据共享")]),t._v(", 以及应用程序的内存分配.")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("简化链接.")]),t._v("  独立的地址空间允许每个进程的内存映像使用"),s("strong",[t._v("相同的基本格式")]),t._v(", 而不管代码和数据实际存放在物理内存的何处. 例如, 像在图 8-13 中看到的, 一个给定的 Linux 系统上的每个进程都使用类似的内存格式. 对于 64 位地址空间, 代码段总是从虚拟地址 "),s("strong",[t._v("0x400000")]),t._v(" 开始. 数据段跟在代码段之后, 中间有一段符合要求的对齐空白. 栈占据用户进程地址空间最高的部分, 并向下生长. 这样的一致性极大地简化了链接器的设计和实现, 允许链接器生成完全链接的可执行文件, 这些"),s("strong",[t._v("可执行文件是独立于物理内存中代码和数据的最终位置")]),t._v("的.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("简化加载.")]),t._v("  虚拟内存还使得"),s("strong",[t._v("容易向内存中加载可执行文件和共享对象文件")]),t._v(". 要把目标文件中 .text 和 .data 节加载到一个新创建的进程中, Linux 加载器为代码和数据段分配虚拟页, 把它们标记为无效的(即未被缓存的), 将页表条目指向目标文件中适当的位置. 有趣的是, 加载器从不从磁盘到内存实际复制任何数据. 在每个页初次被引用时, 要么是 CPU 取指令时引用的, 要么是一条正在执行的指令引用一个内存位置时引用的, 虚拟内存系统会按照需要自动地调入数据页.")]),t._v(" "),s("p",[t._v("将一组连续的虚拟页映射到任意一个文件中的任意位置的表示法称作"),s("strong",[t._v("内存映射")]),t._v("(memory mapping). Linux 提供一个称为 mmap 的系统调用, 允许应用程序自己做内存映射. 后面会在 9.8 节中更详细地描述应用级内存映射.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("简化共享.")]),t._v("  独立地址空间为操作系统提供了一个管理用户进程和操作系统自身之间共享的"),s("strong",[t._v("一致机制")]),t._v(". 一般而言, 每个进程都有自己私有的代码, 数据, 堆以及栈区域, 是不和其他进程共享的. 在这种情况中, "),s("strong",[t._v("操作系统创建页表, 将相应的虚拟页映射到不连续的物理页面")]),t._v(". 然而, 在一些情况中, 还是"),s("strong",[t._v("需要进程来共享代码和数据")]),t._v(". 例如, 每个进程必须调用相同的操作系统内核代码, 而每个 C 程序都会调用 C 标准库中的程序, 比如 printf. "),s("strong",[t._v("操作系统通过将不同进程中适当的虚拟页面映射到相同的物理页面, 从而安排多个进程共享这部分代码的一个副本, 而不是在每个进程中都包括单独的内核和 C 标准库的副本")]),t._v(", 如图 9-9 所示.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("简化内存分配.")]),t._v("  虚拟内存为向用户进程提供一个简单的分配额外内存的机制. 当一个运行在用户进程中的程序要求额外的堆空间时(如调用 malloc 的结果), "),s("strong",[t._v("操作系统分配一个适当数字(例如 k)个连续的虚拟内存页面, 并且将它们映射到物理内存中任意位置的 k 个任意的物理页面")]),t._v(". 由于页表工作的方式, 操作系统没有必要分配 k 个连续的物理内存页面. "),s("strong",[t._v("页面可以随机地分散在物理内存")]),t._v("中.")])])]),t._v(" "),s("h4",{attrs:{id:"虚拟内存作为内存保护的工具"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#虚拟内存作为内存保护的工具"}},[t._v("#")]),t._v(" 虚拟内存作为内存保护的工具")]),t._v(" "),s("p",[t._v("任何现代计算机系统必须为操作系统提供手段来控制对内存系统的访问. 不应该允许一个用户进程修改它的只读代码段. 而且也不应该允许它读或修改任何内核中的代码和数据结构. "),s("strong",[t._v("不应该允许它读或者写其他进程的私有内存, 并且不允许它修改任何与其他进程共享的虚拟页面, 除非所有的共享者都显式地允许它这么做(通过调用明确的进程间通信系统调用)")]),t._v(" .")]),t._v(" "),s("p",[t._v("就像我们所看到的, 提供"),s("strong",[t._v("独立的地址空间使得区分不同进程的私有内存变得容易")]),t._v(". 但是, 地址翻译机制可以以一种自然的方式扩展到提供更好的访问控制. 因为每次 CPU 生成一个地址时, 地址翻译硬件都会读一个 PTE, 所以通过"),s("strong",[t._v("在 PTE 上添加一些额外的许可位")]),t._v("来控制对一个虚拟页面内容的访问十分简单. 图 9-10 展示了大致的思想.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230903205758-j3nk42c.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图9-10 用虚拟内存来提供页面级的内存保护")])]),t._v(" "),s("p",[t._v("在这个示例中, 每个 PTE 中已经添加了"),s("strong",[t._v("三个许可位")]),t._v(". "),s("strong",[t._v("SUP 位")]),t._v("表示进程是否必须运行在"),s("strong",[t._v("内核")]),t._v("(超级用户)模式下才能访问该页. 运行在内核模式中的进程可以访问任何页面, 但是运行在用户模式中的进程只允许访问那些 SUP 为 0 的页面. "),s("strong",[t._v("READ 位和 WRITE 位")]),t._v("控制对页面的"),s("strong",[t._v("读和写访问")]),t._v(". 例如, 如果进程 i 运行在用户模式下, 那么它有读 VP 0 和读写 VP 1 的权限. 然而, 不允许它访问 VP 2.")]),t._v(" "),s("p",[t._v('如果一条指令违反了这些许可条件, 那么 CPU 就触发一个一般保护故障, 将控制传递给一个内核中的异常处理程序. Linux shell 一般将这种异常报告为 "段错误(segmentation fault)".')]),t._v(" "),s("h4",{attrs:{id:"地址翻译"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#地址翻译"}},[t._v("#")]),t._v(" 地址翻译")]),t._v(" "),s("p",[t._v("这一节讲述的是地址翻译的基础知识. 本节的目标是让你了解硬件在支持虚拟内存中的角色, 并给出足够多的细节使得你可以亲手演示一些具体的示例. 不过, 要记住这里省略了大量的细节, 尤其是和时序相关的细节, 虽然这些细节对硬件设计者来说是非常重要的, 但是超出了讨论的范围. 图 9-11 概括了在这节里将要使用的所有符号, 供读者参考.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230903211552-3dz3wly.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图 9-11 地址翻译符号小结")])]),t._v(" "),s("p",[t._v("形式上来说, 地址翻译是"),s("strong",[t._v("一个 N 元素的虚拟地址空间(VAS)中的元素和一个 M 元素的物理地址空间(PAS)中元素之间的映射")]),t._v(",")]),t._v(" "),s("p",[t._v("$$\n\\rm MAP: VAS \\rightarrow PAS \\cup Ø\n$$")]),t._v(" "),s("p",[t._v("这里")]),t._v(" "),s("p",[t._v("$$\n\\rm MAP(A) = \\begin{cases}\nA' &\\text{如果虚拟地址 } A \\text{ 处的数据在 PAS 的物理地址 } A' \\text{ 处}\\\nØ &\\text{如果虚拟地址 } A \\text{ 处的数据不在物理内存中}\n\\end{cases}\n$$")]),t._v(" "),s("p",[t._v("图 9-12 展示了 MMU 如何"),s("strong",[t._v("利用页表来实现这种映射")]),t._v(". CPU 中的一个控制寄存器, "),s("strong",[t._v("页表基址寄存器")]),t._v("(Page Table Base Register, PTBR)指向当前页表. n 位的虚拟地址包含两个部分: 一个 p 位的"),s("strong",[t._v("虚拟页面偏移")]),t._v("(Virtual Page Offset, VPO)和一个"),s("span",{attrs:{"data-type":"text"}},[t._v("(n−p)")]),t._v("位的"),s("strong",[t._v("虚拟页号")]),t._v("(Virtual Page Number, VPN). MMU 利用 VPN 来选择适当的 PTE. 例如, VPN 0 选择 PTE 0, VPN 1 选择 PTE 1, 以此类推. 将页表条目中"),s("strong",[t._v("物理页号")]),t._v("(Physical Page Number, PPN)和虚拟地址中的 VP. "),s("strong",[t._v("串联起来, 就得到相应的物理地址")]),t._v(". 注意, 因为物理和虚拟页面都是 P 字节的, 所以"),s("strong",[t._v("物理页面偏移")]),t._v("(Physical Page Offset, PPO)和 VPO 是相同的.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230903211721-81093bq.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图9-12 使用页表的地址翻译")])]),t._v(" "),s("p",[t._v("图 9-13a 展示了当"),s("strong",[t._v("页面命中")]),t._v("时, CPU 硬件执行的步骤.")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("第 1 步:")]),t._v("  处理器生成一个虚拟地址, 并把它传送给 MMU.")]),t._v(" "),s("li",[s("strong",[t._v("第 2 步:")]),t._v("  MMU 生成 PTE 地址, 并从高速缓存/主存请求得到它.")]),t._v(" "),s("li",[s("strong",[t._v("第 3 步:")]),t._v("  高速缓存/主存向 MMU 返回 PTE.")]),t._v(" "),s("li",[s("strong",[t._v("第 4 步:")]),t._v("  MMU 构造物理地址, 并把它传送给高速缓存/主存.")]),t._v(" "),s("li",[s("strong",[t._v("第 5 步:")]),t._v("  高速缓存/主存返回所请求的数据字给处理器.")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230903211852-fc9f6m5.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图 9-13 页面命中(a)和缺页(b)的操作图 (VA: 虚拟地址. PTEA: 页表条目地址. PTE: 页表条目. PA: 物理地址)")])]),t._v(" "),s("p",[t._v("页面命中完全是由硬件来处理的, 与之不同的是, "),s("strong",[t._v("处理缺页")]),t._v("要求硬件和操作系统内核协作完成, 如图 9-13b 所示.")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("第 1 步到第 3 步:")]),t._v("  和图 9-13a 中的第 1 步到第 3 步相同.")]),t._v(" "),s("li",[s("strong",[t._v("第 4 步:")]),t._v("  PTE 中的"),s("strong",[t._v("有效位是零")]),t._v(", 所以 MMU 触发了一次"),s("strong",[t._v("异常")]),t._v(", 传递 CPU 中的控制到操作系统内核中的"),s("strong",[t._v("缺页异常处理程序")]),t._v(".")]),t._v(" "),s("li",[s("strong",[t._v("第 5 步:")]),t._v("  缺页处理程序确定出物理内存中的牺牲页, 如果这个页面已经被修改了, 则把它换出到磁盘.")]),t._v(" "),s("li",[s("strong",[t._v("第 6 步:")]),t._v("  缺页处理程序页面"),s("strong",[t._v("调入")]),t._v("新的页面, 并"),s("strong",[t._v("更新内存中的 PTE")]),t._v(".")]),t._v(" "),s("li",[s("strong",[t._v("第 7 步:")]),t._v("  缺页处理程序返回到原来的进程, "),s("strong",[t._v("再次执行导致缺页的指令")]),t._v(". CPU 将引起缺页的虚拟地址重新发送给 MMU. 因为虚拟页面现在缓存在物理内存中, 所以就会命中, 在 MMU 执行了图 9-13b 中的步骤之后, 主存就会将所请求字返回给处理器.")])]),t._v(" "),s("h5",{attrs:{id:"_1-结合高速缓存和虚拟内存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-结合高速缓存和虚拟内存"}},[t._v("#")]),t._v(" 1.结合高速缓存和虚拟内存")]),t._v(" "),s("p",[t._v("在任何既使用虚拟内存又使用 SRAM 高速缓存的系统中, 都有应该使用虚拟地址还是使用物理地址来访问 SRAM 高速缓存的问题. 尽管关于这个折中的详细讨论已经超出了讨论范围, 但是"),s("strong",[t._v("大多数系统是选择物理寻址")]),t._v("的. 使用物理寻址, 多个进程同时在高速缓存中有存储块和共享来自相同虚拟页面的块成为很简单的事情. 而且, 高速缓存无需处理保护问题, 因为访问权限的检査是地址翻译过程的一部分.")]),t._v(" "),s("p",[t._v("图 9-14 展示了"),s("strong",[t._v("一个物理寻址的高速缓存如何和虚拟内存结合起来")]),t._v(". 主要的思路是"),s("strong",[t._v("地址翻译发生在高速缓存查找之前")]),t._v(". 注意, 页表条目可以缓存, 就像其他的数据字一样.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230903212149-rkovsld.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图 9-14 将 VM 与物理寻址的高速缓存结合起来 (VA: 虚拟地址. PTEA: 页表条目地址. PTE: 页表条目. PA: 物理地址)")])]),t._v(" "),s("h5",{attrs:{id:"_2-利用tlb加速地址翻译"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-利用tlb加速地址翻译"}},[t._v("#")]),t._v(" 2.利用TLB加速地址翻译")]),t._v(" "),s("p",[t._v("可以看到, "),s("strong",[t._v("每次 CPU 产生一个虚拟地址, MMU 就必须查阅一个 PTE, 以便将虚拟地址翻译为物理地址")]),t._v(". 在最糟糕的情况下, 这会要求从内存多取一次数据, 代价是几十到几百个周期. 如果 PTE 碰巧缓存在 L1 中, 那么开销就下降到 1 个或 2 个周期. 然而, 许多系统都试图消除即使是这样的开销, 它们在 MMU 中包括了一个关于 PTE 的小的缓存, 称为"),s("strong",[t._v("翻译后备缓冲器")]),t._v("(Translation Lookaside Buffer, TLB).")]),t._v(" "),s("p",[s("strong",[t._v("TLB 是一个小的, 虚拟寻址的缓存, 其中每一行都保存着一个由单个 PTE 组成的块")]),t._v(". TLB 通常有高度的相联度. 如图 9-15 所示, 用于组选择和行匹配的索引和标记字段是从虚拟地址中的虚拟页号中提取出来的. 如果 TLB 有 "),s("span",{attrs:{"data-type":"text"}},[t._v("T=2")]),t._v("​"),s("sup",[t._v("t")]),t._v(" 个组, 那么 "),s("strong",[t._v("TLB 索引")]),t._v("(TLBI)是由 VPN 的 t 个最低位组成的, 而 "),s("strong",[t._v("TLB 标记")]),t._v("(TLBT)是由 VPN 中剩余的位组成的.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230903212407-u867tql.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图9-15 虚拟地址中用以访问TLB的组成部分")])]),t._v(" "),s("p",[t._v("图 9-16a 展示了"),s("strong",[t._v("当 TLB 命中时")]),t._v("(通常情况)所包括的步骤. 这里的关键点是, 所有的"),s("strong",[t._v("地址翻译步骤都是在芯片上的 MMU 中执行")]),t._v("的, 因此非常快.")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("第 1 步:")]),t._v("  CPU 产生一个"),s("strong",[t._v("虚拟地址")]),t._v(".")]),t._v(" "),s("li",[s("strong",[t._v("第 2 步和第 3 步:")]),t._v("  MMU 从 TLB 中取出相应的 "),s("strong",[t._v("PTE")]),t._v(".")]),t._v(" "),s("li",[s("strong",[t._v("第 4 步:")]),t._v("  MMU 将这个虚拟地址翻译成一个物理地址, 并且将它"),s("strong",[t._v("发送到高速缓存/主存")]),t._v(".")]),t._v(" "),s("li",[s("strong",[t._v("第 5 步:")]),t._v("  高速缓存/主存将所请求的数据字返回给 CPU.")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230903212511-qwjfanf.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图9-16 TLB命中与不命中的操作图")])]),t._v(" "),s("p",[t._v("当 TLB 不命中时, MMU 必须从 L1 缓存中取出相应的 PTE, 如图 9-16b 所示. 新取出的 PTE 存放在 TLB 中, 可能会"),s("strong",[t._v("覆盖")]),t._v("一个已经存在的条目.")]),t._v(" "),s("h5",{attrs:{id:"_3-多级页表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-多级页表"}},[t._v("#")]),t._v(" 3.多级页表")]),t._v(" "),s("p",[t._v("到目前为止, 我们一直"),s("strong",[t._v("假设系统只用一个单独的页表来进行地址翻译")]),t._v(". 但是如果有一个 "),s("strong",[t._v("32 位的地址空间")]),t._v(", 4KB 的页面和一个 4 字节的 PTE, 那么即使应用所引用的只是虚拟地址空间中很小的一部分, 也总是需要一个 "),s("strong",[t._v("4MB")]),t._v(" 的页表驻留在内存中. 对于地址空间为 64 位的系统来说, 问题将变得更复杂.")]),t._v(" "),s("p",[s("strong",[t._v("用来压缩页表的常用方法是使用层次结构的页表")]),t._v(". 用一个具体的示例是最容易理解这个思想的. 假设 32 位虚拟地址空间被分为 "),s("strong",[t._v("4KB")]),t._v(" 的页, 而每个页表条目都是 4 字节. 还假设在这一时刻, 虚拟地址空间有如下形式: 内存的前 2K 个页面分配给了代码和数据, 接下来的 6K 个页面还未分配, 再接下来的 1023 个页面也未分配, 接下来的 1 个页面分配给了用户栈. 图 9-17 展示了如何为这个虚拟地址空间构造一个两级的页表层次结构.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230903212710-s8thlf5.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图9-17 一个两级页表层次结构. 注意地址是从上往下增加的")])]),t._v(" "),s("p",[s("strong",[t._v("一级页表")]),t._v("中的每个 PTE 负责映射虚拟地址空间中一个 4MB 的"),s("strong",[t._v("片")]),t._v("(chunk), 这里每一片都是由 1024 个连续的页面组成的. 比如, PTE 0 映射第一片, PTE 1 映射接下来的一片, 以此类推. 假设地址空间是 4GB, "),s("strong",[t._v("1024 个 PTE 已经足够覆盖整个空间")]),t._v("了.")]),t._v(" "),s("p",[t._v("如果片 i 中的每个页面都未被分配, 那么一级 PTE i 就为空. 例如, 图 9-17 中, 片 2 ~ 7 是未被分配的. 然而, 如果在片 i 中至少有一个页是分配了的, 那么"),s("strong",[t._v("一级 PTE i 就指向一个二级页表的基址")]),t._v(". 例如, 在图 9-17 中, 片 0, 1 和 8 的所有或者部分已被分配, 所以它们的一级 PTE 就指向二级页表.")]),t._v(" "),s("p",[t._v("二级页表中的"),s("strong",[t._v("每个 PTE 都负责映射一个 4KB 的虚拟内存页面")]),t._v(", 就像我们查看只有一级的页表一样. 注意, 使用 4 字节的 PTE, 每个一级和二级页表都是 4KB 字节, 这刚好和一个页面的大小是一样的.")]),t._v(" "),s("p",[t._v("这种方法从两个方面减少了内存要求. 第一, 如果一级页表中的一个 PTE 是空的, 那么"),s("strong",[t._v("相应的二级页表就根本不会存在")]),t._v(". 这代表着一种巨大的潜在节约, 因为对于一个典型的程序, 4GB 的虚拟地址空间的大部分都会是未分配的. 第二, "),s("strong",[t._v("只有一级页表才需要总是在主存中")]),t._v("; 虚拟内存系统可以在需要时创建, 页面调入或调出二级页表, 这就减少了主存的压力; "),s("strong",[t._v("只有最经常使用的二级页表才需要缓存在主存中")]),t._v(".")]),t._v(" "),s("p",[t._v("图 9-18 描述了使用 k 级页表层次结构的地址翻译. 虚拟地址被划分成为 k 个 VPN 和 1 个 VPO. 每个 VPN i 都是一个到第 i 级页表的索引, 其中 "),s("span",{attrs:{"data-type":"text"}},[t._v("1⩽i⩽k")]),t._v(" . 第 j 级页表中的每个 PTE, "),s("span",{attrs:{"data-type":"text"}},[t._v("1⩽j⩽k−1")]),t._v(", 都指向第 j+1 级的某个页表的基址. 第 k 级页表中的每个 PTE 包含某个物理页面的 PPN, 或者一个磁盘块的地址. 为了构造物理地址, 在能够确定 PPN 之前, MMU 必须访问为个 PTE. 对于只有一级的页表结构, PPO 和 VPO 是相同的.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230903212931-prtx449.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图9-18 使用k级页表的地址翻译")])]),t._v(" "),s("p",[t._v("访问 k 个 PTE, 第一眼看上去昂贵而不切实际. 然而, 这里 TLB 能够起作用, 正是通过将不同层次上页表的 PTE 缓存起来. 实际上, "),s("strong",[t._v("带多级页表的地址翻译并不比单级页表慢很多")]),t._v(".")]),t._v(" "),s("h5",{attrs:{id:"_4-综合-端到端的地址翻译"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-综合-端到端的地址翻译"}},[t._v("#")]),t._v(" 4.综合:端到端的地址翻译")]),t._v(" "),s("p",[t._v("这一节会通过一个具体的端到端的地址翻译示例, 来综合一下学过的这些内容, 这个示例运行在有一个 TLB 和 L1 d-cache 的小系统上. 为了保证可管理性, 做出如下假设:")]),t._v(" "),s("ul",[s("li",[t._v("内存是按字节寻址的.")]),t._v(" "),s("li",[t._v("内存访问是针对 1 字节的字的(不是 4 字节的字).")]),t._v(" "),s("li",[t._v("虚拟地址是 14 位长的("),s("span",{attrs:{"data-type":"text"}},[t._v("n=14")]),t._v(").")]),t._v(" "),s("li",[t._v("物理地址是 12 位长的("),s("span",{attrs:{"data-type":"text"}},[t._v("m=12")]),t._v(").")]),t._v(" "),s("li",[t._v("页面大小是 64 字节("),s("span",{attrs:{"data-type":"text"}},[t._v("P=64")]),t._v(").")]),t._v(" "),s("li",[t._v("TLB 是四路组相联的, 总共有 16 个条目.")]),t._v(" "),s("li",[t._v("L1 d-cache 是物理寻址, 直接映射的, 行大小为 4 字节, 而总共有 16 个组.")])]),t._v(" "),s("p",[t._v("图 9-19 展示了"),s("strong",[t._v("虚拟地址和物理地址")]),t._v("的格式. 因为每个页面是 "),s("span",{attrs:{"data-type":"text"}},[t._v("2")]),t._v("​"),s("sup",[t._v("6")]),t._v("​"),s("span",{attrs:{"data-type":"text"}},[t._v("=64")]),t._v(" 字节, 所以"),s("strong",[t._v("虚拟地址和物理地址的低 6 位分别作为 VPO 和 PPO. 虚拟地址的高 8 位作为 VPN. 物理地址的高 6 位作为 PPN")]),t._v(".")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230903213125-bm71ejp.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图 9-19 小内存系统的寻址. 假设 14 位的虚拟地址(n=14), 12 位的物理地址(m=12)和 64 字节的页面(P=64)")])]),t._v(" "),s("p",[t._v("图 9-20 展示了小内存系统的一个快照, 包括 "),s("strong",[t._v("TLB")]),t._v("(图 9-20a), 页表的一部分(图 9-20b)和 L1 高速缓存(图 9-20c). 在 TLB 和高速缓存的图上面, 还展示了访问这些设备时硬件是如何划分虚拟地址和物理地址的位的.")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("TLB.")]),t._v("  TLB 是利用 VPN 的位进行虚拟寻址的. 因为 TLB 有 4 个组, 所以 VPN 的低 2 位就作为组索引(TLBI). VPN 中剩下的高 6 位作为标记(TLBT), 用来区别可能映射到同一个 TLB 组的不同的 VPN.")]),t._v(" "),s("li",[s("strong",[t._v("页表.")]),t._v("  这个页表是一个单级设计, 一共有"),s("span",{attrs:{"data-type":"text"}},[t._v("28=256")]),t._v("个页表条目(PTE). 然而, 我们只对这些条目中的开头 16 个感兴趣. 为了方便, 我们用索引它的 VPN 来标识每个 PTE; 但是要记住这些 VPN 并不是页表的一部分, 也不储存在内存中. 另外, 注意每个无效 PTE 的 PPN 都用一个破折号来表示, 以加强一个概念: 无论刚好这里存储的是什么位值, 都是没有任何意义的.")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230903213225-v9a19em.png",alt:"image"}}),t._v("​"),s("img",{attrs:{src:"/img/image-20230903213241-9o6b16f.png",alt:"image"}}),t._v("​"),s("img",{attrs:{src:"/img/image-20230903213510-ehplq0b.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图 9-20 小内存系统的 TLB, 页表以及缓存. TLB, 页表和缓存中所有的值都是十六进制表示的")])]),t._v(" "),s("p",[t._v("‍")]),t._v(" "),s("p",[t._v("‍")]),t._v(" "),s("p",[t._v("给定了这种初始化设定, 来看看"),s("strong",[t._v("当 CPU 执行一条读地址 0x03d4 处字节的加载指令时")]),t._v("会发生什么. (回想一下假定 CPU 读取 1 字节的字, 而不是 4 字节的字.) 为了开始这种手工的模拟, 我们发现写下虚拟地址的各个位, 标识出我们会需要的各种字段, 并确定它们的十六进制值, 是非常有帮助的. 当硬件解码地址时, 它也执行相似的任务.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230903213616-a9uuakt.png",alt:"image"}})]),t._v(" "),s("p",[t._v("开始时, MMU 从虚拟地址中抽取出 VPN(0x0F), 并且检查 TLB, 看它是否因为前面的某个内存引用缓存了 PTE 0x0F 的一个副本. TLB 从 VPN 中抽取出 TLB 索引(0x03)和 TLB 标记(0x3), 组 0x3 的第二个条目中有效匹配, 所以命中, 然后将缓存的 PPN(0x0D) 返回给 MMU.")]),t._v(" "),s("p",[t._v("如果 TLB 不命中, 那么 MMU 就需要从主存中取出相应的 PTE. 然而, 在这种情况中, 我们很幸运, TLB 会命中. 现在, MMU 有了形成物理地址所需要的所有东西. 它通过将来自 PTE 的 PPN(0x0D) 和来自虚拟地址的 VPO(0x14) 连接起来, 这就形成了物理地址(0x354).")]),t._v(" "),s("p",[t._v("接下来, MMU 发送物理地址给缓存, 缓存从物理地址中抽取出缓存偏移 CO(0x0), 缓存组索引 CI(0x5)以及缓存标记 CT(0x0D).")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230903213649-jg79jxc.png",alt:"image"}})]),t._v(" "),s("p",[t._v("因为组 0x5 中的标记与 CT 相匹配, 所以缓存检测到一个命中, 读出在偏移量 CO 处的数据字节(0x36), 并将它返回给 MMU, 随后 MMU 将它传递回 CPU.")]),t._v(" "),s("p",[t._v("翻译过程的其他路径也是可能的. 例如, 如果 TLB 不命中, 那么 MMU 必须从页表中的 PTE 中取出 PPN. 如果得到的 PTE 是无效的, 那么就产生一个缺页, 内核必须调入合适的页面, 重新运行这条加载指令. 另一种可能性是 PTE 是有效的, 但是所需要的内存块在缓存中不命中.")]),t._v(" "),s("h4",{attrs:{id:"案例研究-intel-core-i7-linux内存系统"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#案例研究-intel-core-i7-linux内存系统"}},[t._v("#")]),t._v(" 案例研究:Intel Core i7/Linux内存系统")]),t._v(" "),s("p",[t._v("本节以一个实际系统的案例研究来总结对虚拟内存的讨论: 一个运行 Linux 的 Intel Core i7. 虽然底层的 Haswell 微体系结构允许完全的 64 位虚拟和物理地址空间, 而现在的(以及可预见的未来的)Core i7 实现支持 48 位(256 TB)虚拟地址空间和 52 位(4 PB)物理地址空间, 还有一个兼容模式, 支持 32 位(4 GB)虚拟和物理地址空间.")]),t._v(" "),s("p",[t._v("图 9-21 给出了 Corei7 内存系统的重要部分. "),s("strong",[t._v("处理器封装")]),t._v("(processor package)包括四个核, 一个大的所有核共享的 L3 高速缓存, 以及一个 DDR3 内存控制器. 每个核包含一个层次结构的 TLB, 一个层次结构的数据和指令高速缓存, 以及一组快速的点到点链路, 这种链路基于 QuickPath 技术, 是为了让一个核与其他核和外部 I/O 桥直接通信. TLB 是虚拟寻址的, 是四路组相联的. L1, L2 和 L3 高速缓存是物理寻址的, 块大小为 64 字节. L1 和 L2 是 8 路组相联的, 而 L3 是 16 路组相联的. 页大小可以在启动时被配置为 4 KB 或 4 MB. Linux 使用的是 4 KB 的页.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230903213803-hicsj5c.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图9-21 Core i7的内存系统")])]),t._v(" "),s("h5",{attrs:{id:"_1-core-i7地址翻译"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-core-i7地址翻译"}},[t._v("#")]),t._v(" 1.Core i7地址翻译")]),t._v(" "),s("p",[t._v("图 9-22 总结了完整的 Core i7 "),s("strong",[t._v("地址翻译过程")]),t._v(", 从 CPU 产生虚拟地址的时刻一直到来自内存的数据字到达 CPU. Core i7 采用"),s("strong",[t._v("四级页表")]),t._v("层次结构. 每个进程有它自己"),s("strong",[t._v("私有的页表层次结构")]),t._v(". 当一个 Linux 进程在运行时, 虽然 Core i7 体系结构允许页表换进换出, 但是与已分配了的页相关联的页表都是"),s("strong",[t._v("驻留在内存")]),t._v("中的. CR3 控制寄存器指向第一级页表(L1)的起始位置. CR3 的值是每个进程上下文的一部分, 每次上下文切换时, CR3 的值都会被恢复.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230903213916-3m23xmk.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图9-22 Core i7地址翻译概况. 为了简化, 没有显示 i-cache, i-TLB 和 L2 统一 TLB")])]),t._v(" "),s("p",[t._v("图 9-23 给出了"),s("strong",[t._v("第一级, 第二级或第三级页表中条目的格式")]),t._v(". 当 "),s("span",{attrs:{"data-type":"text"}},[t._v("P=1")]),t._v(" 时(Linux 中就总是如此), 地址字段包含一个 40 位物理页号(PPN), 它指向适当的页表的开始处. 注意, 这强加了一个要求, 要求物理页表 4 KB 对齐.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230903214025-k6hyae8.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图9-23 第一级, 第二级和第三级页表条目格式. 每个条目引用一个 4KB 子页表")])]),t._v(" "),s("p",[t._v("图 9-24 给出了"),s("strong",[t._v("第四级页表")]),t._v("中条目的格式. 当 "),s("span",{attrs:{"data-type":"text"}},[t._v("P=1")]),t._v(", 地址字段包括一个 40 位 PPN, 它"),s("strong",[t._v("指向物理内存中某一页的基地址")]),t._v(". 这又强加了一个要求, 要求物理页 4 KB 对齐.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230903214137-zlb23d5.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图9-24 第四级页表格式的条目. 每个条目引用一个 4KB 子页")])]),t._v(" "),s("p",[s("strong",[t._v("PTE 有三个权限位, 控制对页的访问. R/W 位确定页的内容是可以读写的还是只读的. U/S 位确定是否能够在用户模式中访问该页, 从而保护操作系统内核中的代码和数据不被用户程序访问. XD(禁止执行)位是在 64 位系统中引入的, 可以用来禁止从某些内存页取指令. 这是一个重要的新特性, 通过限制只能执行只读代码段, 使得操作系统内核降低了缓冲区溢出攻击的风险.")])]),t._v(" "),s("p",[t._v("当 MMU 翻译每一个虚拟地址时, 它还会更新另外两个内核缺页处理程序会用到的位. 每次访问一个页时, MMU 都会设置 A 位, 称为"),s("strong",[t._v("引用位")]),t._v("(reference bit). 内核可以用这个引用位来实现它的页替换算法. 每次对一个页进行了写之后, MMU 都会设置 D 位, 又称"),s("strong",[t._v("修改位或脏位")]),t._v("(dirty bit). 修改位告诉内核在"),s("strong",[t._v("复制替换页之前是否必须写回牺牲页")]),t._v(". 内核可以通过调用一条特殊的内核模式指令来清除引用位或修改位.")]),t._v(" "),s("p",[t._v("图 9-25 给出了 Core i7 MMU "),s("strong",[t._v("如何使用四级的页表来将虚拟地址翻译成物理地址")]),t._v(". 36 位 VPN 被划分成四个 9 位的片, 每个片被用作到一个页表的偏移量. CR3 寄存器包含 L1 页表的物理地址. VPN 1 提供到一个 L1 PTE 的偏移量, 这个 PTE 包含 L2 页表的基地址. VPN 2 提供到一个 L2 PTE 的偏移量, 以此类推.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230903214335-ht2m14f.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图 9-25Corei7 页表翻译 (PT: 页表, PTE: 页表条目, VPN: 虚拟页号, VPO: 虚拟页偏移, PPN: 物理页号, PPO: 物理页偏移量. 图中还给出了这四级页表的 Linux 名字)")])]),t._v(" "),s("blockquote",[s("p",[t._v("旁注: 优化地址翻译")])]),t._v(" "),s("p",[t._v("在对地址翻译的讨论中, 我们描述了一个顺序的两个步骤的过程, 1) MMU 将虚拟地址翻译成物理地址, 2) 将物理地址传送到 L1 高速缓存. 然而, 实际的硬件实现使用了一个灵活的技巧, 允许这些"),s("strong",[t._v("步骤部分重叠")]),t._v(", 因此也就加速了对 L1 高速缓存的访问. 例如, 页面大小为 4KB 的 Corei7 系统上的一个虚拟地址有 12 位的 VPO, 并且这些位和相应物理地址中的 PPO 的 12 位是相同的. 因为八路组相联的, 物理寻址的 L1 高速缓存有 64 个组和大小为 64 字节的缓存块, 每个物理地址有 6 个("),s("span",{attrs:{"data-type":"text"}},[t._v("log264")]),t._v(")缓存偏移位和 6 个("),s("span",{attrs:{"data-type":"text"}},[t._v("log264")]),t._v(")索引位. 这 12 位恰好符合虚拟地址的 VPO 部分, 这绝不是偶然! 当 CPU 需要翻译一个虚拟地址时, 它就发送 VPN 到 MMU, 发送 VPO 到高速 L1 缓存. 当 MMU 向 TLB 请求一个页表条目时, L1 高速缓存正忙着利用 VPO 位查找相应的组, 并读出这个组里的 8 个标记和相应的数据字. 当 MMU 从 TLB 得到 PPN 时, 缓存已经准备好试着把这个 PPN 与这 8 个标记中的一个进行匹配了.")]),t._v(" "),s("h5",{attrs:{id:"_2-linux虚拟内存系统"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-linux虚拟内存系统"}},[t._v("#")]),t._v(" 2.Linux虚拟内存系统")]),t._v(" "),s("p",[t._v("一个虚拟内存系统要求硬件和内核软件之间的紧密协作. 版本与版本之间细节都不尽相同, 对此完整的阐释超出了讨论的范围. 但是, 这一小节的目标是"),s("strong",[t._v("对 Linux 的虚拟内存系统做一个描述")]),t._v(", 使你能够大致了解一个实际的操作系统是如何组织虚拟内存, 以及如何处理缺页的.")]),t._v(" "),s("p",[s("mark",[s("strong",[t._v("Linux 为每个进程维护了一个单独的虚拟地址空间")])]),t._v(", 形式如图 9-26 所示. 我们已经多次看到过这幅图了, 包括它那些熟悉的代码, 数据, 堆, 共享库以及栈段. 既然理解了地址翻译, 就能够填入更多的关于内核虚拟内存的细节了, 这"),s("strong",[t._v("部分虚拟内存位于用户栈")]),t._v("之上.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230903215334-one8f2s.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图9-26 一个Linux进程的虚拟内存")])]),t._v(" "),s("p",[s("strong",[t._v("内核虚拟内存包含内核中的代码和数据结构")]),t._v(". 内核虚拟内存的某些区域被映射到"),s("strong",[t._v("所有进程共享的物理页面")]),t._v(". 例如, 每个进程共享内核的代码和全局数据结构. 有趣的是, Linux 也将一组连续的虚拟页面(大小等于系统中 DRAM 的总量)映射到相应的一组连续的物理页面. 这就为内核提供了一种便利的方法来访问物理内存中任何特定的位置, 例如, 当它需要访问页表, 或在一些设备上执行内存映射的 I/O 操作, 而这些设备被映射到特定的物理内存位置时.")]),t._v(" "),s("p",[s("strong",[t._v("内核虚拟内存的其他区域包含每个进程都不相同的数据")]),t._v(". 比如说, 页表, 内核在进程的上下文中执行代码时使用的栈, 以及记录虚拟地址空间当前组织的各种数据结构.")]),t._v(" "),s("h6",{attrs:{id:"_1-linux虚拟内存区域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-linux虚拟内存区域"}},[t._v("#")]),t._v(" (1)Linux虚拟内存区域")]),t._v(" "),s("p",[t._v("Linux 将虚拟内存组织成一些"),s("strong",[t._v("区域(也叫做段)的集合")]),t._v(". 一个区域(area)就是已经存在着的("),s("strong",[t._v("已分配")]),t._v("的)虚拟内存的连续片(chunk), 这些页是以某种方式相关联的. 例如, 代码段, 数据段, 堆, 共享库段, 以及用户栈都是不同的区域. "),s("strong",[t._v("每个存在的虚拟页面都保存在某个区域中, 而不属于某个区域的虚拟页是不存在的, 并且不能被进程引用")]),t._v(". 区域的概念很重要, 因为它允许虚拟地址空间有间隙. 内核不用记录那些不存在的虚拟页, 而这样的页也不占用内存, 磁盘或者内核本身中的任何额外资源.")]),t._v(" "),s("p",[t._v("图 9-27 强调了记录"),s("strong",[t._v("一个进程中虚拟内存区域的内核数据结构")]),t._v(". 内核为系统中的"),s("strong",[t._v("每个进程维护一个单独的任务结构")]),t._v("(源代码中的 "),s("strong",[t._v("task_struct")]),t._v("). 任务结构中的元素包含或者指向内核运行该进程所需要的所有信息(例如, PID, 指向用户栈的指针, 可执行目标文件的名字, 以及程序计数器).")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230904213544-ss23c6w.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图9-27 Linux是如何组织虚拟内存的")])]),t._v(" "),s("p",[t._v("任务结构中的一个条目指向 "),s("strong",[t._v("mm_struct")]),t._v(", 它描述了"),s("strong",[t._v("虚拟内存的当前状态")]),t._v(". 我们感兴趣的两个字段是 "),s("strong",[t._v("pgd 和 mmap, 其中 pgd 指向第一级页表(页全局目录)的基址, 而 mmap 指向一个 vm_area_structs(区域结构)的链表, 其中每个 vm_area_structs 都描述了当前虚拟地址空间的一个区域. 当内核运行这个进程时, 就将 pgd 存放在 CR3 控制寄存器中")]),t._v(".")]),t._v(" "),s("p",[t._v("为了我们的目的, 一个具体区域的"),s("strong",[t._v("区域结构")]),t._v("包含下面的字段:")]),t._v(" "),s("ul",[s("li",[t._v("vm_start: 指向这个区域的"),s("strong",[t._v("起始处")]),t._v(".")]),t._v(" "),s("li",[t._v("vm_end: 指向这个区域的"),s("strong",[t._v("结束处")]),t._v(".")]),t._v(" "),s("li",[t._v("vm_prot: 描述这个区域内包含的所有页的"),s("strong",[t._v("读写许可权限")]),t._v(".")]),t._v(" "),s("li",[t._v("vm_flags: 描述这个区域内的页面是与其他进程"),s("strong",[t._v("共享")]),t._v("的, 还是这个进程"),s("strong",[t._v("私有")]),t._v("的(还描述了其他一些信息).")]),t._v(" "),s("li",[t._v("vm_next: 指向链表中下—区域结构.")])]),t._v(" "),s("h6",{attrs:{id:"_2-linux缺页异常处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-linux缺页异常处理"}},[t._v("#")]),t._v(" (2)Linux缺页异常处理")]),t._v(" "),s("p",[t._v("假设 MMU 在试图翻译某个虚拟地址 A 时, 触发了一个"),s("strong",[t._v("缺页")]),t._v(". 这个异常导致控制转移到"),s("strong",[t._v("内核的缺页处理程序")]),t._v(", 处理程序随后就执行下面的步骤:")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("虚拟地址 A 是合法的吗?")]),t._v('  换句话说, A 在某个区域结构定义的区域内吗? 为了回答这个问题, 缺页处理程序搜索区域结构的链表, 把 A 和每个区域结构中的 vm_start 和 vm_end 做比较. 如果这个指令是不合法的, 那么缺页处理程序就触发一个段错误, 从而终止这个进程. 这个情况在图 9-28 中标识为 "1". 因为一个进程可以创建'),s("strong",[t._v("任意数量的新虚拟内存区域")]),t._v("(使用在下一节中描述的 mmap 函数), 所以顺序搜索区域结构的链表花销可能会很大. 因此在实际中, Linux 使用某些我们没有显示出来的字段, Linux 在链表中"),s("strong",[t._v("构建了一棵树")]),t._v(", 并在这棵树上进行查找.")]),t._v(" "),s("li",[s("strong",[t._v("试图进行的内存访问是否合法?")]),t._v("  换句话说, 进程是否"),s("strong",[t._v("有读, 写或者执行")]),t._v('这个区域内页面的权限? 例如, 这个缺页是不是由一条试图对这个代码段里的只读页面进行写操作的存储指令造成的? 这个缺页是不是因为一个运行在用户模式中的进程试图从内核虚拟内存中读取字造成的? 如果试图进行的访问是不合法的, 那么缺页处理程序会触发一个保护异常, 从而终止这个进程. 这种情况在图 9-28 中标识为 "2".')]),t._v(" "),s("li",[s("strong",[t._v("此刻, 内核知道了这个缺页是由于对合法的虚拟地址进行合法的操作造成的.")]),t._v("  它是这样来处理这个缺页的: "),s("strong",[t._v("选择一个牺牲页面, 如果这个牺牲页面被修改过, 那么就将它交换出去, 换入新的页面并更新页表")]),t._v(". 当缺页处理程序返回时, CPU "),s("strong",[t._v("重新启动引起缺页的指令")]),t._v(", 这条指令将再次发送 A 到 MMU. 这次, MMU 就能正常地翻译 A, 而不会再产生缺页中断了.")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230904215245-pyu8b80.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图9-18 Linux缺页处理")])]),t._v(" "),s("h4",{attrs:{id:"内存映射"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内存映射"}},[t._v("#")]),t._v(" 内存映射")]),t._v(" "),s("p",[t._v("Linux 通过将一个"),s("strong",[t._v("虚拟内存区域")]),t._v("与一个磁盘上的"),s("strong",[t._v("对象")]),t._v("(object)关联起来, 以"),s("strong",[t._v("初始化")]),t._v("这个虚拟内存区域的内容, 这个过程称为"),s("strong",[t._v("内存映射")]),t._v("(memory mapping), 虚拟内存区域可以映射到"),s("strong",[t._v("两种类型的对象")]),t._v("中的一种:")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("Linux 文件系统中的普通文件:")]),t._v("  一个区域可以映射到一个"),s("strong",[t._v("普通磁盘文件")]),t._v("的连续部分, 例如一个可执行目标文件. 文件区(section)被分成页大小的片, 每一片包含一个虚拟页面的初始内容. 因为按需进行页面调度, 所以这些虚拟页面没有实际交换进入物理内存, 直到 CPU 第一次引用到页面(即发射一个虚拟地址, 落在地址空间这个页面的范围之内). 如果区域比文件区要大, 那么就用零来填充这个区域的余下部分.")]),t._v(" "),s("li",[s("strong",[t._v("匿名文件")]),t._v(": 一个区域也可以映射到一个匿名文件, 匿名文件是由内核创建的, 包含的全是"),s("strong",[t._v("二进制零")]),t._v(". CPU 第一次引用这样一个区域内的虚拟页面时, 内核就在物理内存中找到一个合适的牺牲页面, 如果该页面被修改过, 就将这个页面换出来, 用二进制零覆盖牺牲页面并更新页表, 将这个页面标记为是驻留在内存中的. 注意在磁盘和内存之间并没有实际的数据传送. 因为这个原因, 映射到匿名文件的区域中的页面有时也叫做请求二进制零的页(demand-zero page).")])]),t._v(" "),s("p",[t._v("无论在哪种情况中, 一旦一个虚拟页面被初始化了, 它就在一个由内核维护的专门的"),s("strong",[t._v("交换文件")]),t._v("(swap file)之间换来换去. 交换文件也叫做"),s("mark",[s("strong",[t._v("交换空间")])]),t._v("(swap space)或者"),s("strong",[t._v("交换区域")]),t._v("(swap area). 需要意识到的很重要的一点是, "),s("mark",[s("strong",[t._v("在任何时刻, 交换空间都限制着当前运行着的进程能够分配的虚拟页面的总数")])]),t._v(".")]),t._v(" "),s("h5",{attrs:{id:"_1-再看共享对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-再看共享对象"}},[t._v("#")]),t._v(" 1.再看共享对象")]),t._v(" "),s("p",[t._v("内存映射的概念来源于一个聪明的发现: "),s("strong",[t._v("如果虚拟内存系统可以集成到传统的文件系统中, 那么就能提供一种简单而高效的把程序和数据加载到内存中的方法")]),t._v(".")]),t._v(" "),s("p",[t._v("正如已经看到的, 进程这一抽象能够为每个进程提供自己私有的虚拟地址空间, 可以免受其他进程的错误读写. 不过, "),s("strong",[t._v("许多进程有同样的只读代码区域")]),t._v(". 例如, 每个运行 Linux shell 程序 bash 的进程都有相同的代码区域. 而且, 许多程序需要访问只读运行时库代码的相同副本. 例如, 每个 C 程序都需要来自标准 C 库的诸如 printf 这样的函数. 那么, 如果每个进程都在物理内存中保持这些常用代码的副本, 那就是极端的浪费了. 幸运的是, "),s("strong",[t._v("内存映射提供了一种清晰的机制, 用来控制多个进程如何共享对象")]),t._v(".")]),t._v(" "),s("p",[s("mark",[s("strong",[t._v("一个对象可以被映射到虚拟内存的一个区域, 要么作为共享对象, 要么作为私有对象. 如果一个进程将一个共享对象映射到它的虚拟地址空间的一个区域内, 那么这个进程对这个区域的任何写操作, 对于那些也把这个共享对象映射到它们虚拟内存的其他进程而言, 也是可见的. 而且, 这些变化也会反映在磁盘上的原始对象中.")])])]),t._v(" "),s("p",[t._v("另一方面, 对于一个映射到私有对象的区域做的改变, 对于其他进程来说是"),s("strong",[t._v("不可见")]),t._v("的, 并且进程对这个区域所做的任何写操作都不会反映在磁盘上的对象中. 一个映射到共享对象的虚拟内存区域叫做"),s("strong",[t._v("共享区域")]),t._v(". 类似地, 也有"),s("strong",[t._v("私有区域")]),t._v(".")]),t._v(" "),s("p",[t._v("假设进程 1 将一个"),s("strong",[t._v("共享对象映射到它的虚拟内存的一个区域")]),t._v("中, 如图 9-29a 所示. 现在假设进程 2 将同一个共享对象映射到它的地址空间("),s("strong",[t._v("并不一定")]),t._v("要和进程 1 在相同的虚拟地址处, 如图 9-29b 所示).")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230904215616-8cyesee.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图9-29 一个共享对象(注意, 物理页面不一定是连续的)")])]),t._v(" "),s("p",[t._v("因为"),s("strong",[t._v("每个对象都有一个唯一的文件名")]),t._v(", 内核可以迅速地判定进程 1 已经映射了这个对象, 而且可以使进程 2 中的页表条目指向相应的物理页面. 关键点在于即使对象被映射到了多个共享区域, "),s("strong",[t._v("物理内存中也只需要存放共享对象的一个副本")]),t._v(". 为了方便, 我们将物理页面显示为连续的, 但是在一般情况下当然不是这样的.")]),t._v(" "),s("p",[s("strong",[t._v("私有对象")]),t._v("使用一种叫做"),s("mark",[s("strong",[t._v("写时复制")])]),t._v("(copy-on-write)的巧妙技术被映射到虚拟内存中. "),s("strong",[t._v("一个私有对象开始生命周期的方式基本上与共享对象的一样, 在物理内存中只保存有私有对象的一份副本")]),t._v(". 比如, 图 9-30a 展示了一种情况, 其中两个进程将一个"),s("strong",[t._v("私有对象映射")]),t._v("到它们虚拟内存的不同区域, 但是共享这个对象同一个物理副本. 对于每个映射私有对象的进程, 相应私有区域的页表条目都被标记为"),s("strong",[t._v("只读")]),t._v(", 并且区域结构"),s("strong",[t._v("被标记为私有的写时复制")]),t._v(". 只要没有进程试图写它自己的私有区域, 它们就可以继续共享物理内存中对象的一个单独副本. 然而, 只要有一个进程试图写私有区域内的某个页面, 那么"),s("strong",[t._v("这个写操作就会触发一个保护故障")]),t._v(".")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230904215839-xq7f3dj.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图9-30 一个私有的写时复制对象")])]),t._v(" "),s("p",[t._v("当故障处理程序注意到保护异常是由于进程试图写私有的写时复制区域中的一个页面而引起的, 它就会在物理内存中"),s("strong",[t._v("创建这个页面的一个新副本, 更新页表条目指向这个新的副本, 然后恢复这个页面的可写权限")]),t._v(", 如图 9-30b 所示. 当故障处理程序返回时, CPU 重新执行这个写操作, 现在在"),s("strong",[t._v("新创建的页面")]),t._v("上这个写操作就可以正常执行了.")]),t._v(" "),s("p",[s("strong",[t._v("通过延迟私有对象中的副本直到最后可能的时刻, 写时复制最充分地使用了稀有的物理内存. 其实就是如果只读则一直共享, 如果需要写时, 则复制一份作为私有的页.")])]),t._v(" "),s("h5",{attrs:{id:"_2-再看fork函数🌸"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-再看fork函数🌸"}},[t._v("#")]),t._v(" 2.再看fork函数🌸")]),t._v(" "),s("p",[t._v("既然理解了虚拟内存和内存映射, 那么可以清晰地知道 "),s("strong",[t._v("fork 函数是如何创建一个带有自己独立虚拟地址空间的新进程的")]),t._v(".")]),t._v(" "),s("p",[s("strong",[t._v("当 fork 函数被当前进程调用时, 内核为新进程创建各种数据结构, 并分配给它一个唯一的 PID. 为了给这个新进程创建虚拟内存, 它创建了当前进程的 mm_struct, 区域结构和页表的")]),t._v("​"),s("mark",[s("strong",[t._v("原样副本")])]),t._v("​ "),s("strong",[t._v(". 它将两个进程中的每个页面都标记为只读, 并将两个进程中的每个区域结构都标记为")]),t._v("​"),s("mark",[s("strong",[t._v("私有的写时复制")])]),t._v("​ "),s("strong",[t._v(".")])]),t._v(" "),s("p",[s("mark",[s("strong",[t._v("当 fork 在新进程中返回时, 新进程现在的虚拟内存刚好和调用 fork 时存在的虚拟内存相同. 当这两个进程中的任一个后来进行写操作时, 写时复制机制就会创建新页面, 因此, 也就为每个进程保持了私有地址空间的抽象概念.")])])]),t._v(" "),s("h5",{attrs:{id:"_3-再看execve函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-再看execve函数"}},[t._v("#")]),t._v(" 3.再看execve函数")]),t._v(" "),s("p",[t._v("虚拟内存和内存映射在"),s("strong",[t._v("将程序加载到内存")]),t._v("的过程中也扮演着关键的角色. 既然已经理解了这些概念, 就能够理解 execve 函数实际上是"),s("strong",[t._v("如何加载和执行程序")]),t._v("的. 假设运行在当前进程中的程序执行了如下的 execve 调用:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("execve")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a.out"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("正如在第 8 章中学到的, "),s("strong",[t._v("execve 函数在当前进程中加载并运行包含在可执行目标文件 a.out 中的程序, 用 a.out 程序有效地替代了当前程序")]),t._v(".")]),t._v(" "),s("p",[t._v("加载并运行 a.out 需要以下几个步骤:")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("删除已存在的用户区域.")]),t._v("  删除当前进程虚拟地址的用户部分中的已存在的区域结构.")]),t._v(" "),s("li",[s("strong",[t._v("映射私有区域.")]),t._v("  为新程序的代码, 数据, bss 和栈区域创建新的区域结构. 所有这些新的区域都是"),s("strong",[t._v("私有的, 写时复制")]),t._v("的. 代码和数据区域被映射为 a.out 文件中的 .text 和 .data 区. bss 区域是请求二进制零的, 映射到匿名文件, 其大小包含在 a.out 中. 栈和堆区域也是请求二进制零的, 初始长度为零. 图 9-31 概括了私有区域的不同映射.")]),t._v(" "),s("li",[s("strong",[t._v("映射共享区域.")]),t._v("  如果 a.out 程序"),s("strong",[t._v("与共享对象(或目标)链接")]),t._v(", 比如标准 C 库 libc.so, 那么这些对象都是动态链接到这个程序的, 然后再映射到用户虚拟地址空间中的共享区域内.")]),t._v(" "),s("li",[s("strong",[t._v("设置程序计数器(PC).")]),t._v("  execve 做的最后一件事情就是"),s("strong",[t._v("设置当前进程上下文中的程序计数器, 使之指向代码区域的入口点")]),t._v(".")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230904221724-ur1ui5t.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图9-31 加载器是如何映射用户地址空间的区域的")])]),t._v(" "),s("p",[t._v("下一次调度这个进程时, 它将"),s("strong",[t._v("从这个入口点")]),t._v("开始执行. Linux 将根据需要换入代码和数据页面.")]),t._v(" "),s("h5",{attrs:{id:"_4-使用mmap函数的用户级内存映射"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-使用mmap函数的用户级内存映射"}},[t._v("#")]),t._v(" 4.使用mmap函数的用户级内存映射")]),t._v(" "),s("p",[t._v("Linux 进程可以"),s("strong",[t._v("使用 mmap 函数来创建新的虚拟内存区域, 并将对象映射到这些区域")]),t._v("中.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<unistd.h>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/mman.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 若成功时则为指向映射区域的指针, 若出错则为 MAP_FAILED(-1).")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mmap")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("start"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" prot"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" flags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n           "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("off_t")]),t._v(" offset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[s("strong",[t._v("mmap 函数要求内核创建一个新的虚拟内存区域, 最好是从地址 start 开始的一个区域, 并将文件描述符 fd 指定的对象的一个连续的片(chunk)映射到这个新的区域")]),t._v(". 连续的对象片大小为 length 字节, 从距文件开始处偏移量为 offset 字节的地方开始. start 地址仅仅是一个暗示, 通常被定义为 NULL. 为了我们的目的, 我们总是假设起始地址为 NULL. 图 9-32 描述了这些参数的意义.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230904222026-k2vp707.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图9-32 mmap参数的可视化解释")])]),t._v(" "),s("p",[t._v("参数 prot 包含描述新映射的虚拟内存区域的"),s("strong",[t._v("访问权限位")]),t._v("(即在相应区域结构中的 vm_prot 位).")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("PROTEXEC:")]),t._v("  这个区域内的页面由可以被 CPU 执行的指令组成.")]),t._v(" "),s("li",[s("strong",[t._v("PROTREAD:")]),t._v("  这个区域内的页面可读.")]),t._v(" "),s("li",[s("strong",[t._v("PROTWRITE:")]),t._v("  这个区域内的页面可写.")]),t._v(" "),s("li",[s("strong",[t._v("PROTNONE:")]),t._v("  这个区域内的页面不能被访问.")])]),t._v(" "),s("p",[t._v("参数 flags 由描述被映射对象类型的位组成. 如果设置了 MAP_ANON 标记位, 那么被映射的对象就是一个匿名对象, 而相应的虚拟页面是请求二进制零的. MAP_PRI-VATE 表示被映射的对象是一个"),s("strong",[t._v("私有的, 写时复制")]),t._v("的对象, 而 MAP_SHARED 表示是一个"),s("strong",[t._v("共享对象")]),t._v(". 例如:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("bufp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Mmap")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" PROT_READ"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" MAP_PRIVATE"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("MAP_ANON"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("让内核创建一个新的包含 size 字节的只读, 私有, 请求二进制零的虚拟内存区域. 如果调用成功, 那么 bufp 包含新区域的地址.")]),t._v(" "),s("p",[s("strong",[t._v("munmap 函数")]),t._v("删除虚拟内存的区域:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<unistd.h>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/mman.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 若成功则为 0, 若出错则为 -1.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("munmap")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("start"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("munmap 函数删除从虚拟地址 start 开始的, 由接下来 length 字节组成的区域. 接下来对已删除区域的引用会导致段错误.")]),t._v(" "),s("h4",{attrs:{id:"动态内存分配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#动态内存分配"}},[t._v("#")]),t._v(" 动态内存分配")]),t._v(" "),s("p",[t._v("虽然可以使用低级的 mmap 和 munmap 函数来"),s("strong",[t._v("创建和删除虚拟内存的区域")]),t._v(", 但是 C 程序员还是会觉得当运行时需要额外虚拟内存时, 用"),s("strong",[t._v("动态内存分配器")]),t._v("(dynamic memory allocator)更方便, 也有更好的可移植性.")]),t._v(" "),s("p",[s("strong",[t._v("动态内存分配器维护着一个进程的虚拟内存区域")]),t._v(", 称为"),s("strong",[t._v("堆")]),t._v("(heap)(见图 9-33). 系统之间细节不同, 但是不失通用性, 假设堆是一个请求二进制零的区域, 它紧接在未初始化的数据区域后开始, 并"),s("strong",[t._v("向上生长")]),t._v('(向更高的地址). 对于每个进程, 内核维护着一个变量 brk(读做 "break"), 它指向堆的顶部.')]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230904222303-di5zmev.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图9-33 堆")])]),t._v(" "),s("p",[t._v("分配器将堆视为一组不同大小的"),s("strong",[t._v("块")]),t._v("(block)的集合来维护. "),s("strong",[t._v("每个块就是一个连续的虚拟内存片")]),t._v("(chunk), 要么是"),s("strong",[t._v("已分配的")]),t._v(", 要么是"),s("strong",[t._v("空闲的")]),t._v(". 已分配的块显式地保留为供应用程序使用. 空闲块可用来分配. 空闲块保持空闲, 直到它显式地被应用所分配. 一个已分配的块保持已分配状态, 直到它被释放, 这种释放要么是应用程序显式执行的, 要么是内存分配器自身隐式执行的.")]),t._v(" "),s("p",[t._v("分配器有两种基本风格. 两种风格都要求"),s("strong",[t._v("应用显式地分配块")]),t._v(". 它们的不同之处在于"),s("strong",[t._v("由哪个实体来负责释放已分配的块")]),t._v(".")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("显式分配器")]),t._v("(explicit allocator), 要求应用显式地释放任何已分配的块. 例如, C 标准库提供一种叫做 "),s("strong",[t._v("malloc")]),t._v(" 程序包的显式分配器. C 程序通过调用 malloc 函数来. 分配一个块, 并通过调用 "),s("strong",[t._v("free")]),t._v(" 函数来释放一个块. C++ 中的 new 和 delete 操作符与 C 中的 malloc 和 free 相当.")]),t._v(" "),s("li",[s("strong",[t._v("隐式分配器")]),t._v("(implicit allocator), 另一方面, 要求分配器检测一个已分配块何时不再被程序所使用, 那么就释放这个块. 隐式分配器也叫做"),s("strong",[t._v("垃圾收集器")]),t._v("(garbage collector), 而自动释放未使用的已分配的块的过程叫做"),s("strong",[t._v("垃圾收集")]),t._v("(garbage collection). 例如, 诸如 Lisp, ML 以及 Java 之类的高级语言就依赖垃圾收集来释放已分配的块.")])]),t._v(" "),s("p",[t._v("本节剩下的部分讨论的是"),s("strong",[t._v("显式分配器的设计和实现")]),t._v(". 后面将在 9.10 节中讨论隐式分配器. 为了更具体, 我们的讨论集中于管理堆内存的分配器. 然而, 应该明白内存分配是一个"),s("strong",[t._v("普遍的概念")]),t._v(", 可以出现在各种上下文中. 例如, 图形处理密集的应用程序就经常使用标准分配器来要求获得一大块虚拟内存, 然后使用与应用相关的分配器来管理内存, 在该块中创建和销毁图形的节点.")]),t._v(" "),s("h5",{attrs:{id:"_1-malloc和free函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-malloc和free函数"}},[t._v("#")]),t._v(" 1.malloc和free函数")]),t._v(" "),s("p",[t._v("C 标准库提供了一个称为 malloc 程序包的显式分配器. 程序通过调用 malloc 函数来从堆中分配块.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdlib.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 若成功则为已分配块的指针, 若出错则为 NULL.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("malloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[s("strong",[t._v("malloc 函数返回一个指针, 指向大小为至少 size 字节的内存块")]),t._v(", 这个块会为可能包含在这个块内的任何数据对象类型做对齐. 实际中, 对齐依赖于编译代码在 32 位模式("),s("strong",[t._v("gcc -m32")]),t._v(")还是 64 位模式(默认的)中运行. 在 32 位模式中, malloc 返回的块的地址总是 8 的倍数. 在 64 位模式中, 该地址总是 16 的倍数.")]),t._v(" "),s("blockquote",[s("p",[t._v("旁注 - 一个字有多大")])]),t._v(" "),s("p",[t._v("回想一下对机器代码的讨论, Intel 将 4 字节对象称为双字. 然而, 在本节中会假设字是 4 字节的对象, 而双字是 8 字节的对象, 这和传统术语是一致的.")]),t._v(" "),s("p",[t._v("如果 malloc 遇到问题(例如, 程序要求的内存块比可用的虚拟内存还要大), 那么它就返回 "),s("strong",[t._v("NULL")]),t._v(", 并设置 errno. "),s("strong",[t._v("malloc 不初始化它返回的内存")]),t._v(". 那些想要已初始化的动态内存的应用程序可以使用 calloc, calloc 是一个基于 malloc 的瘦包装函数, 它将分配的内存"),s("strong",[t._v("初始化为零")]),t._v(". 想要改变一个以前已分配块的大小, 可以使用 realloc 函数.")]),t._v(" "),s("p",[t._v("动态内存分配器, 例如 malloc, 可以通过使用 mmap 和 munmap 函数, 显式地分配和释放堆内存, 或者还可以使用 sbrk 函数:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<unistd.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 若成功则为旧的 brk 指针, 若出错则为 -1.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sbrk")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("intptr_t")]),t._v(" incr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("sbrk 函数通过将内核的 brk 指针增加 incr 来扩展和收缩堆. 如果成功, 它就返回 brk 的旧值, 否则, 它就返回 -1, 并将 errno 设置为 ENOMEM. 如果 incr 为零, 那么 sbrk 就返回 brk 的当前值. 用一个为负的 incr 来调用 sbrk 是合法的, 而且很巧妙, 因为返回值(brk 的旧值)指向距新堆顶向上 "),s("strong",[t._v("absincr")]),t._v(" 字节处.")]),t._v(" "),s("p",[t._v("程序是通过"),s("strong",[t._v("调用 free 函数来释放已分配的堆块")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdlib.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 无.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("free")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("ptr 参数必须指向一个从 malloc, calloc 或者 realloc 获得的已分配块的"),s("strong",[t._v("起始位置")]),t._v(". 如果不是, 那么 free 的行为就是未定义的. 更糟的是, 既然它什么都不返回, free 就不会告诉应用出现了错误. 就像将在 9.11 节里看到的, 这会产生一些令人迷惑的运行时错误.")]),t._v(" "),s("p",[t._v("图 9-34 展示了一个 malloc 和 free 的实现是如何管理一个 C 程序的 16 字的(非常)小的堆的. 每个方框代表了一个 4 字节的字. 粗线标出的矩形对应于已分配块(有阴影的)和空闲块(无阴影的). 初始时, 堆是由一个大小为 16 个字的, 双字对齐的, 空闲块组成的. (本节中, 我们假设分配器返回的块是 8 字节双字边界对齐的. )")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("图 9-34a:")]),t._v("  程序请求一个 4 字的块. malloc 的响应是: 从空闲块的前部切出一个 4 字的块, 并返回一个指向这个块的第一字的指针.")]),t._v(" "),s("li",[s("strong",[t._v("图 9-34b:")]),t._v("  程序请求一个 5 字的块. malloc 的响应是: 从空闲块的前部分配一个 6 字的块. 在本例中, malloc 在块里填充了一个额外的字, 是为了保持空闲块是双字边界对齐的.")]),t._v(" "),s("li",[s("strong",[t._v("图 9-34c:")]),t._v("  程序请求一个 6 字的块, 而 malloc 就从空闲块的前部切出一个 6 字的块.")]),t._v(" "),s("li",[s("strong",[t._v("图 9-34d:")]),t._v("  程序释放在图 9-34b 中分配的那个 6 字的块. 注意, 在调用 free 返回之后, 指针 p2 仍然指向被释放了的块. 应用有责任在它被一个新的 malloc 调用重新初始化之前, 不再使用 p2.")]),t._v(" "),s("li",[s("strong",[t._v("图 9-34e:")]),t._v("  程序请求一个 2 字的块. 在这种情况中, malloc 分配在前一步中被释放了的块的一部分, 并返回一个指向这个新块的指针.")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230904222847-t15tgnj.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图 9-34 用 malloc 和 free 分配和释放块. 每个方框对应于一个字. 每个粗线标出的矩形对应于一个块. 阴影部分是已分配的块. 已分配的块的填充区域是深阴影的. 无阴影部分是空闲块. 堆地址是从左往右增加的")])]),t._v(" "),s("h5",{attrs:{id:"_2-为什么要使用动态内存分配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-为什么要使用动态内存分配"}},[t._v("#")]),t._v(" 2.为什么要使用动态内存分配")]),t._v(" "),s("p",[s("strong",[t._v("程序使用动态内存分配的最重要的原因是经常直到程序实际运行时, 才知道某些数据结构的大小")]),t._v(". 例如, 假设要求我们编写一个 C 程序, 它读一个 n 个 ASCII 码整数的链表, 每一行一个整数, 从 stdin 到一个 C 数组. 输入是由整数 n 和接下来要读和存储到数组中的 n 个整数组成的. 最简单的方法就是静态地定义这个数组, 它的最大数组大小是硬编码的:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"csapp.h"')])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("MAXN")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15213")])])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MAXN"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("scanf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" MAXN"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("app_error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Input file too big"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("scanf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br")])]),s("p",[t._v("像这样用硬编码的大小来分配数组通常不是一种好想法. MAXN 的值是任意的, 与机器上可用的虚拟内存的实际数量没有关系. 而且, 如果这个程序的使用者想读取一个比 MAXN 大的文件, 唯一的办法就是用一个更大的 MAXN 值来重新编译这个程序. 虽然对于这个简单的示例来说这不成问题, 但是硬编码数组界限的出现对于拥有百万行代码和大量使用者的大型软件产品而言, 会变成一场维护的噩梦.")]),t._v(" "),s("p",[t._v("一种更好的方法是"),s("strong",[t._v("在运行时, 在已知了 n 的值之后, 动态地分配这个数组")]),t._v(". 使用这种方法, 数组大小的最大值就只由可用的虚拟内存数量来限制了.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"csapp.h"')])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("scanf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    array "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Malloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("scanf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("free")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br")])]),s("p",[t._v("动态内存分配是一种有用而重要的编程技术. 然而, 为了正确而高效地使用分配器, 程序员需要对它们是如何工作的有所了解. 后面将在 9.11 节中讨论因为不正确地使用分配器所导致的一些可怕的错误.")]),t._v(" "),s("h5",{attrs:{id:"_3-分配器的要求和目标"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-分配器的要求和目标"}},[t._v("#")]),t._v(" 3.分配器的要求和目标")]),t._v(" "),s("p",[s("strong",[t._v("显式分配器")]),t._v("必须在一些相当严格的约束条件下工作:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("处理任意请求序列.")]),t._v("  一个应用可以有任意的分配请求和释放请求序列, 只要满足约束条件: 每个释放请求必须对应于一个当前已分配块, 这个块是由一个以前的分配请求获得的. 因此, 分配器不可以假设分配和释放请求的顺序. 例如, 分配器不能假设所有的分配请求都有相匹配的释放请求, 或者有相匹配的分配和空闲请求是嵌套的.")]),t._v(" "),s("li",[s("strong",[t._v("立即响应请求.")]),t._v("  分配器必须"),s("strong",[t._v("立即响应")]),t._v("分配请求. 因此, 不允许分配器为了提高性能重新排列或者缓冲请求.")]),t._v(" "),s("li",[s("strong",[t._v("只使用堆.")]),t._v("  为了使分配器是可扩展的, 分配器使用的任何非标量数据结构都必须保存在堆里.")]),t._v(" "),s("li",[s("strong",[t._v("对齐块(对齐要求).")]),t._v("  分配器必须"),s("strong",[t._v("对齐块")]),t._v(", 使得它们可以保存任何类型的数据对象.")]),t._v(" "),s("li",[s("strong",[t._v("不修改已分配的块.")]),t._v("  分配器只能操作或者改变"),s("strong",[t._v("空闲块")]),t._v(". 特别是, 一旦块被分配了, 就不允许修改或者移动它了. 因此, 诸如压缩已分配块这样的技术是不允许使用的.")])]),t._v(" "),s("p",[t._v("在这些限制条件下, "),s("strong",[t._v("分配器的编写者试图实现吞吐率最大化和内存使用率最大化, 而这两个性能目标通常是相互冲突的")]),t._v(".")]),t._v(" "),s("p",[s("mark",[s("strong",[t._v("目标 1: 最大化呑吐率")])]),t._v("​ "),s("strong",[t._v(".")]),t._v("  假定 n 个分配和释放请求的某种序列:")]),t._v(" "),s("p",[t._v("$$\nR_0,R_1,\\cdots,R_k,\\cdots,R_{n-1}\n$$")]),t._v(" "),s("p",[t._v("我们希望一个分配器的吞吐率最大化, 吞吐率定义为"),s("strong",[t._v("每个单位时间里完成的请求数")]),t._v(". 例如, 如果一个分配器在 1 秒内完成 500 个分配请求和 500 个释放请求, 那么它的吞吐率就是每秒 1000 次操作. 一般而言, 可以通过使满足分配和释放请求的平均时间最小化来使吞吐率最大化. 可以看到, 开发一个具有合理性能的分配器并不困难, 所谓合理性能是指一个分配请求的最糟运行时间与空闲块的数量成线性关系, 而一个释放请求的运行时间是个常数.")]),t._v(" "),s("p",[s("mark",[s("strong",[t._v("目标 2: 最大化内存利用率")])]),t._v("​ "),s("strong",[t._v(".")]),t._v("  天真的程序员经常不正确地假设虚拟内存是一个无限的资源. 实际上, 一个系统中被所有进程分配的虚拟内存的全部数量是"),s("strong",[t._v("受磁盘上交换空间")]),t._v("的数量限制的. 好的程序员知道虚拟内存是一个有限的空间, 必须高效地使用. 对于可能被要求分配和释放大块内存的动态内存分配器来说, 尤其如此.")]),t._v(" "),s("p",[t._v("有很多方式来描述一个分配器使用堆的效率如何. 根据经验, 最有用的标准是"),s("strong",[t._v("峰值利用率")]),t._v("(peak utilization). 像以前一样, 给定 n 个分配和释放请求的某种顺序")]),t._v(" "),s("p",[t._v("$$\nR_0,R_1,\\cdots,R_k,\\cdots,R_{n-1}\n$$")]),t._v(" "),s("p",[t._v("如果一个应用程序请求一个 p 字节的块, 那么得到的已分配块的"),s("strong",[t._v("有效载荷")]),t._v("(payload)是 p 字节. 在请求 "),s("span",{attrs:{"data-type":"text"}},[t._v("R")]),t._v("​"),s("sub",[t._v("k")]),t._v(" 完成之后, "),s("strong",[t._v("聚集有效载荷")]),t._v("(aggregate payload)表示为 "),s("span",{attrs:{"data-type":"text"}},[t._v("P")]),t._v("​"),s("sub",[t._v("k")]),t._v(", 为当前已分配的块的有效载荷之和, 而 "),s("span",{attrs:{"data-type":"text"}},[t._v("H")]),t._v("​"),s("sub",[t._v("k")]),t._v(" 表示堆的当前的(单调非递减的)大小.")]),t._v(" "),s("p",[t._v("那么, 前如 "),s("span",{attrs:{"data-type":"text"}},[t._v("k+1")]),t._v(" 个请求的峰值利用率, 表示为 "),s("span",{attrs:{"data-type":"text"}},[t._v("U")]),t._v("​"),s("sub",[t._v("k")]),t._v(" 可以通过下式得到:")]),t._v(" "),s("p",[t._v("$$\nU_k = \\frac{max_{i\\leqslant k}P_i}{H_k}\n$$")]),t._v(" "),s("p",[t._v("那么, 分配器的目标就是在整个序列中使峰值利用率 "),s("span",{attrs:{"data-type":"text"}},[t._v("U")]),t._v("​"),s("sub",[t._v("n−1")]),t._v(" 最大化. 正如我们将要看到的, 在"),s("strong",[t._v("最大化吞吐率和最大化利用率之间是互相牵制")]),t._v("的. 特别是, 以堆利用率为代价, 很容易编写出吞吐率最大化的分配器. 分配器设计中一个有趣的挑战就是在两个目标之间找到一个适当的平衡.")]),t._v(" "),s("h5",{attrs:{id:"_4-碎片"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-碎片"}},[t._v("#")]),t._v(" 4.碎片")]),t._v(" "),s("p",[s("strong",[t._v("造成堆利用率很低")]),t._v("的主要原因是一种称为"),s("mark",[s("strong",[t._v("碎片")])]),t._v("(fragmentation)的现象, 当"),s("strong",[t._v("虽然有未使用的内存但不能用来满足分配请求时")]),t._v(", 就发生这种现象. 有两种形式的碎片: "),s("strong",[t._v("内部碎片(internal fragmentation)和外部碎片(external fragmentation)")]),t._v(" .")]),t._v(" "),s("p",[s("strong",[t._v("内部碎片")]),t._v("是在一个已分配块比有效载荷大时发生的. 很多原因都可能造成这个问题. 例如, 一个分配器的实现可能对已分配块强加一个最小的大小值, 而这个大小要比某个请求的有效载荷大. 或者, 就如在图 9-34b 中看到的, 分配器可能增加块大小以满足对齐约束条件.")]),t._v(" "),s("p",[t._v("内部碎片的量化是简单明了的. 它就是已分配块大小和它们的有效载荷大小之差的和. 因此, 在任意时刻, 内部碎片的数量只取决于以前请求的模式和分配器的实现方式.")]),t._v(" "),s("p",[s("strong",[t._v("外部碎片")]),t._v("是当空闲内存"),s("strong",[t._v("合计起来足够满足一个分配请求, 但是没有一个单独的空闲块足够大可以来处理这个请求")]),t._v("时发生的. 例如, 如果图 9-34e 中的请求要求 6 个字, 而不是 2 个字, 那么如果不向内核请求额外的虚拟内存就无法满足这个请求, 即使在堆中仍然有 6 个空闲的字. 问题的产生是由于这 6 个字是分在两个空闲块中的.")]),t._v(" "),s("p",[t._v("外部碎片比内部碎片的量化要困难得多, 因为它不仅取决于以前请求的模式和分配器的实现方式, 还取决于将来请求的模式. 例如, 假设在 k 个请求之后, 所有空闲块的大小都恰好是 4 个字. 这个堆会有外部碎片吗? 答案取决于将来请求的模式. 如果将来所有的分配请求都要求小于或者等于 4 个字的块, 那么就不会有外部碎片. 另一方面, 如果有一个或者多个请求要求比 4 个字大的块, 那么这个堆就会有外部碎片.")]),t._v(" "),s("p",[t._v("因为外部碎片难以量化且不可能预测, 所以"),s("strong",[t._v("分配器通常釆用启发式策略来试图维持少量的大空闲块, 而不是维持大量的小空闲块")]),t._v(".")]),t._v(" "),s("h5",{attrs:{id:"_5-实现问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-实现问题"}},[t._v("#")]),t._v(" 5.实现问题")]),t._v(" "),s("p",[t._v("可以想象出的最简单的分配器会把堆组织成一个大的字节数组, 还有一个指针 p, 初始指向这个数组的"),s("strong",[t._v("第一个字节")]),t._v(". 为了分配 size 个字节, malloc 将 p 的当前值保存在栈里, 将 p 增加 size, 并将 p 的旧值返回到调用函数. free 只是简单地返回到调用函数, 而不做其他任何事情.")]),t._v(" "),s("p",[t._v("这个简单的分配器是设计中的一种极端情况. 因为每个 malloc 和 free 只执行很少量的指令, 吞吐率会极好. 然而, 因为分配器从不重复使用任何块, 内存利用率将极差. 一个实际的分配器要在吞吐率和利用率之间把握好平衡, 就必须考虑以下几个问题:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("空闲块组织:")]),t._v("  如何记录空闲块?")]),t._v(" "),s("li",[s("strong",[t._v("放置:")]),t._v("  如何选择一个合适的空闲块来放置一个新分配的块?")]),t._v(" "),s("li",[s("strong",[t._v("分割:")]),t._v("  在将一个新分配的块放置到某个空闲块之后, 如何处理这个空闲块中的剩余部分?")]),t._v(" "),s("li",[s("strong",[t._v("合并:")]),t._v("  如何处理一个刚刚被释放的块?")])]),t._v(" "),s("p",[t._v("本节剩下的部分将更详细地讨论这些问题. 因为像"),s("strong",[t._v("放置, 分割以及合并这样的基本技术")]),t._v("贯穿在许多不同的空闲块组织中, 所以将在一种叫做"),s("strong",[t._v("隐式空闲链表")]),t._v("的简单空闲块组织结构中来介绍它们.")]),t._v(" "),s("h5",{attrs:{id:"_6-隐式空闲链表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-隐式空闲链表"}},[t._v("#")]),t._v(" 6.隐式空闲链表")]),t._v(" "),s("p",[t._v("任何实际的分配器都需要一些数据结构, 允许它来区别块边界, 以及区别已分配块和空闲块. 大多数分配器将这些信息嵌入块本身. 一个简单的方法如图 9-35 所示.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230904223650-ux5xukw.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图9-35 一个简单的堆块的格式")])]),t._v(" "),s("p",[t._v("在这种情况中, 一个块是由"),s("strong",[t._v("一个字的头部, 有效载荷, 以及可能的一些额外的填充")]),t._v("组成的. 头部编码了这个块的大小(包括头部和所有的填充), 以及这个块是已分配的还是空闲的. 如果强加一个双字的对齐约束条件, 那么块大小就总是 8 的倍数, 且块大小的最低 3 位总是零. 因此, 只需要内存大小的 29 个高位, 释放剩余的 3 位来编码其他信息. 在这种情况中, 用其中的"),s("strong",[t._v("最低位")]),t._v("(已分配位)来指明这个块是已分配的还是空闲的. 例如, 假设有一个已分配的块, 大小为 24(0x18)字节. 那么它的头部将是")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x00000018")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x00000019")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("类似地, 一个块大小为 40(0x28)字节的空闲块有如下的头部:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x00000028")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x00000028")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("头部后面就是应用调用 malloc 时请求的"),s("strong",[t._v("有效载荷")]),t._v(". 有效载荷后面是一片不使用的填充块, 其大小可以是任意的. 需要填充有很多原因. 比如, 填充可能是分配器策略的一部分, 用来对付外部碎片. 或者也需要用它来满足对齐要求.")]),t._v(" "),s("p",[t._v("假设块的格式如图 9-35 所示, 可以将堆组织为一个连续的已分配块和空闲块的序列, 如图 9-36 所示.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230904223855-c8r0y9e.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图 9-36 用隐式空闲链表来组织堆. 阴影部分是已分配块. 没有阴影的部分是空闲块. 头部标记为(大小(字节)/ 已分配位)")])]),t._v(" "),s("p",[t._v("我们称这种结构为"),s("strong",[t._v("隐式空闲链表")]),t._v(", 是因为"),s("strong",[t._v("空闲块是通过头部中的大小字段隐含地连接着")]),t._v("的. 分配器可以通过遍历堆中所有的块, 从而间接地遍历整个空闲块的集合. 注意, 我们需要某种特殊标记的结束块, 在这个示例中, 就是一个设置了已分配位而大小为零的终止头部(terminating header). (就像将在 9.9.12 节中看到的, 设置已分配位简化了空闲块的合并. )")]),t._v(" "),s("p",[t._v("隐式空闲链表的优点是简单. 显著的缺点是任何操作的开销, "),s("strong",[t._v("例如放置分配的块, 要求对空闲链表进行搜索, 该搜索所需时间与堆中已分配块和空闲块的总数呈线性关系")]),t._v(".")]),t._v(" "),s("p",[t._v("很重要的一点就是意识到系统对齐要求和分配器对块格式的选择会对分配器上的"),s("strong",[t._v("最小块大小")]),t._v("有强制的要求. 没有已分配块或者空闲块可以比这个最小值还小. 例如, 如果假设一个双字的对齐要求, 那么每个块的大小都必须是双字(8 字节)的"),s("strong",[t._v("倍数")]),t._v(". 因此, 图 9-35 中的块格式就导致最小的块大小为两个字: 一个字作头, 另一个字维持对齐要求. 即使应用只请求一字节, 分配器也仍然需要创建一个两字的块.")]),t._v(" "),s("h5",{attrs:{id:"_7-放置已分配的块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-放置已分配的块"}},[t._v("#")]),t._v(" 7.放置已分配的块")]),t._v(" "),s("p",[t._v("当一个应用请求一个 k 字节的块时, 分配器搜索空闲链表, 查找一个"),s("strong",[t._v("足够大")]),t._v("可以放置所请求块的空闲块. 分配器执行这种搜索的方式是由"),s("strong",[t._v("放置策略")]),t._v("(placement policy)确定的. 一些常见的策略是"),s("strong",[t._v("首次适配")]),t._v("(firstfit), "),s("strong",[t._v("下一次适配")]),t._v("(nextfit)和"),s("strong",[t._v("最佳适配")]),t._v("(bestfit).")]),t._v(" "),s("p",[t._v("首次适配从头开始搜索空闲链表, 选择"),s("strong",[t._v("第一个合适")]),t._v("的空闲块. 下一次适配和首次适配很相似, 只不过不是从链表的起始处开始每次搜索, 而是从上一次查询结束的地方开始. 最佳适配检查每个空闲块, 选择适合所需请求大小的最小空闲块. 首次适配的优点是它"),s("strong",[t._v("趋向于将大的空闲块保留在链表的后面")]),t._v('. 缺点是它趋向于在靠近链表起始处留下小空闲块的"碎片", 这就增加了对较大块的搜索时间.')]),t._v(" "),s("p",[t._v("下一次适配是由 Donald Knuth 作为首次适配的一种代替品最早提出的, 源于这样一个想法: 如果我们上一次在某个空闲块里已经发现了一个匹配, 那么很可能下一次我们也能在这个剩余块中发现匹配. 下一次适配比首次适配运行起来明显要快一些, 尤其是当链表的前面布满了许多小的碎片时. 然而, 一些研究表明, 下一次适配的内存利用率要比首次适配低得多.")]),t._v(" "),s("p",[s("strong",[t._v("研究还表明最佳适配比首次适配和下一次适配的内存利用率都要高一些")]),t._v(". 然而, 在简单空闲链表组织结构中, 比如隐式空闲链表中, 使用最佳适配的缺点是它要求对堆进行彻底的搜索. 在后面, 我们将看到更加精细复杂的分离式空闲链表组织, 它接近于最佳适配策略, 不需要进行彻底的堆搜索.")]),t._v(" "),s("h5",{attrs:{id:"_8-分割空闲块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-分割空闲块"}},[t._v("#")]),t._v(" 8.分割空闲块")]),t._v(" "),s("p",[t._v("一旦分配器找到一个"),s("strong",[t._v("匹配的空闲块")]),t._v(", 它就必须做另一个策略决定, 那就是"),s("strong",[t._v("分配这个空闲块中多少空间")]),t._v(". 一个选择是用整个空闲块. 虽然这种方式简单而快捷, 但是主要的缺点就是它会造成"),s("strong",[t._v("内部碎片")]),t._v(". 如果放置策略趋向于产生好的匹配, 那么额外的内部碎片也是可以接受的.")]),t._v(" "),s("p",[t._v("然而, 如果匹配不太好, 那么分配器通常会选择将这个空闲块分割为两部分. "),s("strong",[t._v("第一部分变成分配块, 而剩下的变成一个新的空闲块")]),t._v(". 图 9-37 展示了分配器如何分割图 9-36 中 8 个字的空闲块, 来满足一个应用的对堆内存 3 个字的请求.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230905231423-w75gb33.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图 9-37 分割一个空闲块, 以满足一个 3 个字的分配请求. 阴影部分是已分配块. 没有阴影的部分是空闲块. 头部标记为(大小(字节)/ 已分配位)")])]),t._v(" "),s("h5",{attrs:{id:"_9-获取额外的堆内存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-获取额外的堆内存"}},[t._v("#")]),t._v(" 9.获取额外的堆内存")]),t._v(" "),s("p",[t._v("如果分配器"),s("strong",[t._v("不能为请求块找到合适的空闲块")]),t._v("将发生什么呢? 一个选择是通过"),s("strong",[t._v("合并")]),t._v("那些在内存中物理上相邻的空闲块来创建一些更大的空闲块(在下一节中描述). 然而, 如果这样还是不能生成一个足够大的块, 或者如果空闲块已经最大程度地合并了, 那么分配器就会通过调用 sbrk 函数, "),s("strong",[t._v("向内核请求额外的堆内存")]),t._v(". 分配器将额外的内存转化成一个大的空闲块, 将这个块插入到空闲链表中, 然后将被请求的块放置在这个新的空闲块中.")]),t._v(" "),s("h5",{attrs:{id:"_10-合并空闲块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-合并空闲块"}},[t._v("#")]),t._v(" 10.合并空闲块")]),t._v(" "),s("p",[t._v("当分配器"),s("strong",[t._v("释放一个已分配块")]),t._v("时, 可能有其他空闲块与这个新释放的空闲块"),s("strong",[t._v("相邻")]),t._v(". 这些邻接的空闲块可能引起一种现象, 叫做"),s("strong",[t._v("假碎片")]),t._v("(fault fragmentation), 就是有许多可用的空闲块被切割成为小的, 无法使用的空闲块. 比如, 图 9-38 展示了释放图 9-37 中分配的块后得到的结果. 结果是两个相邻的空闲块, 每一个的有效载荷都为 3 个字. 因此, 接下来一个对 4 字有效载荷的请求就会失败, 即使两个空闲块的合计大小足够大, 可以满足这个请求.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230905231740-lib4nnq.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图9-38 假碎片的示例. 阴影部分是已分配块. 没有阴影的部分是空闲块. 头部标记为(大小(字节)/已分配位)")])]),t._v(" "),s("p",[t._v("为了解决假碎片问题, 任何实际的分配器都必须"),s("strong",[t._v("合并相邻的空闲块")]),t._v(", 这个过程称为"),s("strong",[t._v("合并")]),t._v(" (coalescing). 这就出现了一个重要的策略决定, 那就是"),s("strong",[t._v("何时执行合并")]),t._v(". 分配器可以选择立即合并 (immediate coalescing) , 也就是在每次一个块被释放时, 就合并所有的相邻 块. 或者它也可以选择推迟合并 (deferred coalescing) , 也就是等到某个稍晚的时候再合并空闲块. 例如, 分配器可以推迟合并, 直到某个分配请求失败, 然后扫描整个堆, 合并所有的空闲块.")]),t._v(" "),s("p",[t._v("立即合并很简单明了, 可以在常数时间内执行完成, 但是对于某些请求模式, 这种方式会产生一种形式的抖动, 块会反复地合并, 然后马上分割. 例如, 在图 9-38 中, 反复地分配和释放一个 3 个字的块将产生大量不必要的分割和合并.  在对分配器的讨论中, 我们会假设使用立即合并, 但是你应该了解, 快速的分配摇通常会选择某种形式的推迟合并 .")]),t._v(" "),s("h4",{attrs:{id:"垃圾收集"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#垃圾收集"}},[t._v("#")]),t._v(" 垃圾收集")]),t._v(" "),s("p",[t._v("在诸如 C malloc 包这样的显式分配器中, 应用通过调用 malloc 和 free 来分配和释放堆块. 应用要负责释放所有不再需要的已分配块.")]),t._v(" "),s("p",[s("strong",[t._v("未能释放已分配的块是一种常见的编程错误")]),t._v(". 例如, 考虑下面的 C 函数, 作为处理的一部分, 它分配一块临时存储:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("garbage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Malloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15213")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Array p is garbage at this point */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("因为程序不再需要 p, 所以在 garbage 返回前应该释放 p. 不幸的是, 程序员忘了释放这个块. 它在程序的生命周期内都保持为已分配状态, 毫无必要地"),s("strong",[t._v("占用着本来可以用来满足后面分配请求的堆空间")]),t._v(".")]),t._v(" "),s("p",[s("mark",[s("strong",[t._v("垃圾收集器")])]),t._v("​"),s("mark",[t._v("(garbage collector)是一种")]),t._v("​"),s("mark",[s("strong",[t._v("动态内存分配器")])]),t._v("​"),s("mark",[t._v(", 它自动释放程序不再需要的已分配块")]),t._v(". 这些块被称为"),s("strong",[t._v("垃圾")]),t._v("(garbage)(因此术语就称之为垃圾收集器). 自动回收堆存储的过程叫做"),s("strong",[t._v("垃圾收集")]),t._v("(garbagecollection). 在一个支持垃圾收集的系统中, 应用显式分配堆块, 但是从不显示地释放它们. 在 C 程序的上下文中, 应用调用 malloc, 但是从不调用 free. 反之, "),s("strong",[t._v("垃圾收集器定期识别垃圾块, 并相应地调用 free, 将这些块放回到空闲链表中")]),t._v(".")]),t._v(" "),s("p",[t._v("垃圾收集可以追溯到 John McCarthy 在 20 世纪 60 年代早期在 MIT 开发的 Lisp 系统. 它是诸如 Java, ML, Perl 和 Mathematica 等现代语言系统的一个重要部分, 而且它仍然是一个重要而活跃的研究领域. 有关文献描述了大量的垃圾收集方法, 其数量令人吃惊. 我们的讨论局限于 McCarthy 独创的 "),s("strong",[t._v("Mark&Sweep(标记 & 清除)算法")]),t._v(", 这个算法很有趣, 因为它可以建立在已存在的 malloc 包的基础之上, 为 C 和 C++ 程序提供垃圾收集.")]),t._v(" "),s("h5",{attrs:{id:"_1-垃圾收集器的基本知识"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-垃圾收集器的基本知识"}},[t._v("#")]),t._v(" 1.垃圾收集器的基本知识")]),t._v(" "),s("p",[t._v("垃圾收集器将"),s("strong",[t._v("内存")]),t._v("视为一张"),s("strong",[t._v("有向可达图")]),t._v("(reachability graph), 其形式如图 9-49 所示. 该图的节点被分成一组"),s("strong",[t._v("根节点")]),t._v("(root node)和一组"),s("strong",[t._v("堆节点")]),t._v("(heap node). 每个堆节点对应于堆中的一个已分配块. 有向边 p→q 意味着块 p 中的某个位置指向块 q 中的某个位置. 根节点对应于这样一种不在堆中的位置, 它们中包含指向堆中的指针. 这些位置可以是寄存器, 栈里的变量, 或者是虚拟内存中读写数据区域内的全局变量.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230905232043-edqk5nb.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图9-49 垃圾收集器将内存视为一张有向图")])]),t._v(" "),s("p",[t._v("当存在一条从"),s("strong",[t._v("任意根节点")]),t._v("出发并到达 p 的有向路径时, 我们说节点 p 是"),s("strong",[t._v("可达的")]),t._v("(reachable). 在任何时刻, "),s("strong",[t._v("不可达节点对应于垃圾, 是不能被应用再次使用的")]),t._v(". 垃圾收集器的角色是维护可达图的某种表示, 并通过释放不可达节点且将它们返回给空闲链表, 来定期地回收它们.")]),t._v(" "),s("p",[t._v("像 ML 和 Java 这样的语言的垃圾收集器, 对应用如何创建和使用指针有很严格的控制, 能够维护可达图的一种精确的表示, 因此也就能够回收所有垃圾. 然而, 诸如 C 和 C++ 这样的语言的收集器通常不能维持可达图的精确表示. 这样的收集器也叫做保守的"),s("strong",[t._v("垃圾收集器")]),t._v("(conservative garbage collector). 从某种意义上来说它们是保守的, 即每个可达块都被正确地标记为可达了, 而一些不可达节点却可能被错误地标记为可达. 收集器可以按需提供它们的服务, 或者它们可以作为一个和应用并行的独立线程, 不断地更新可达图和回收垃圾. 例如, 考虑如何将一个 C 程序的保守的收集器加入到已存在的 malloc 包中, 如图 9-50 所示.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230905232158-xlv2j3s.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图9-50 将一个保守的垃圾收集器加入到C的 malloc 包中")])]),t._v(" "),s("p",[t._v("无论何时"),s("strong",[t._v("需要堆空间时, 应用都会用通常的方式调用 malloc")]),t._v(". 如果 malloc 找不到一个合适的空闲块, 那么它就"),s("strong",[t._v("调用垃圾收集器")]),t._v(", 希望能够回收一些垃圾到空闲链表. 收集器识别出垃圾块, "),s("strong",[t._v("并通过调用 free 函数将它们返回给堆")]),t._v(". 关键的思想是收集器代替应用去调用 free. 当对收集器的调用返回时, malloc 重试, 试图发现一个合适的空闲块. 如果还是失败了, 那么它就会向操作系统要求额外的内存. 最后, malloc 返回一个指向请求块的指针(如果成功)或者返回一个空指针(如果不成功).")]),t._v(" "),s("h5",{attrs:{id:"_2-mark-sweep垃圾收集器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-mark-sweep垃圾收集器"}},[t._v("#")]),t._v(" 2.Mark&Sweep垃圾收集器")]),t._v(" "),s("p",[t._v("Mark&Sweep 垃圾收集器由"),s("strong",[t._v("标记")]),t._v("(mark)阶段和"),s("strong",[t._v("清除")]),t._v("(sweep)阶段组成, "),s("strong",[t._v("标记阶段")]),t._v("标记出根节点的所有可达的和已分配的后继, 而后面的"),s("strong",[t._v("清除阶段")]),t._v("释放每个未被标记的已分配块. "),s("strong",[t._v("块头部中空闲的低位中的一位通常用来表示这个块是否被标记了")]),t._v(".")]),t._v(" "),s("p",[t._v("我们对 Mark&Sweep 的描述将假设使用下列函数, 其中 ptr 定义为 "),s("strong",[t._v("typedef void ptr")]),t._v(":")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("ptr isPtr(ptr p)")]),t._v(" . 如果 p 指向一个已分配块中的某个字, 那么就返回一个指向这个块的起始位置的指针 b. 否则返回 NULL.")]),t._v(" "),s("li",[s("strong",[t._v("int blockMarked(ptr b).")]),t._v("  如果块 b 是已标记的, 那么就返回 true.")]),t._v(" "),s("li",[s("strong",[t._v("int blockAllocated(ptr b).")]),t._v("  如果块 b 是已分配的, 那么就返回 true.")]),t._v(" "),s("li",[s("strong",[t._v("void markBlock(ptr b).")]),t._v("  标记块 b.")]),t._v(" "),s("li",[s("strong",[t._v("int length(b).")]),t._v("  返回块 b 的以字为单位的长度(不包括头部).")]),t._v(" "),s("li",[s("strong",[t._v("void unmarkBlock(ptr b).")]),t._v("  将块 b 的状态由已标记的改为未标记的.")]),t._v(" "),s("li",[s("strong",[t._v("ptr nextBlock(ptr b).")]),t._v("  返回堆中块 b 的后继.")])]),t._v(" "),s("p",[t._v("标记阶段为每个根节点调用一次代码 9-51a 所示的 mark 函数. 如果 p 不指向一个已分配并且未标记的堆块, mark 函数就立即返回. 否则, 它就标记这个块, 并对块中的每个字"),s("strong",[t._v("递归")]),t._v("地调用它自己. "),s("strong",[t._v("每次对 mark 函数的调用都标记某个根节点的所有未标记并且可达的后继节点. 在标记阶段的末尾, 任何未标记的已分配块都被认定为是不可达的, 是垃圾, 可以在清除阶段回收")]),t._v(".")]),t._v(" "),s("p",[t._v("清除阶段是对代码 9-51b 所示的 sweep 函数的一次调用. sweep 函数在堆中每个块上反复循环, 释放它所遇到的所有未标记的已分配块(也就是垃圾).")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mark")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ptr p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isPtr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("blockMarked")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("markBlock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    len "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("length")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" len"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mark")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])]),s("blockquote",[s("p",[t._v("a)mark 函数")])]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sweep")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ptr b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ptr end"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" end"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("blockMarked")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("unmarkBlock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("blockAllocated")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("free")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("nextBlock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("blockquote",[s("p",[t._v("b)sweep 函数")])]),t._v(" "),s("blockquote",[s("p",[t._v("代码9-51 mark 和 sweep 函数的伪代码")])]),t._v(" "),s("p",[t._v("图 9-52 展示了一个小堆的 Mark&Sweep 的图形化解释. 块边界用粗线条表示. 每个方块对应于内存中的一个字. 每个块有一个字的头部, 要么是已标记的, 要么是未标记的.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230905232546-os8j1jj.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图 9-52 Mark&Sweep 示例. 注意这个示例中的箭头表示内存引用, 而不是空闲链表指针")])]),t._v(" "),s("p",[t._v("初始情况下, 图 9-52 中的堆由"),s("strong",[t._v("六个已分配块")]),t._v("组成, 其中每个块都是未分配的. 第 3 块包含一个指向第 1 块的指针. 第 4 块包含指向第 3 块和第 6 块的指针. 根指向第 4 块. 在标记阶段之后, 第 1 块, 第 3 块, 第 4 块和第 6 块被做了标记, 因为它们是从根节点可达的. 第 2 块和第 5 块是未标记的, 因为它们是不可达的. 在清除阶段之后, 这两个不可达块被回收到空闲链表.")]),t._v(" "),s("h5",{attrs:{id:"_3-c程序的保守mark-sweep"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-c程序的保守mark-sweep"}},[t._v("#")]),t._v(" 3.C程序的保守Mark&Sweep")]),t._v(" "),s("p",[t._v("Mark&Sweep 对 C 程序的垃圾收集是一种合适的方法, 因为它可以就地工作, 而"),s("strong",[t._v("不需要移动任何块")]),t._v(". 然而, C 语言为 isPtr 函数的实现造成了一些有趣的挑战.")]),t._v(" "),s("p",[t._v("第一, C 不会用任何类型信息来标记内存位置. 因此, 对 isPtr 没有一种明显的方式来判断它的输入参数 p 是不是一个指针. 第二, 即使我们知道 p 是一个指针, 对 isPtr 也没有明显的方式来判断 p 是否指向一个已分配块的有效载荷中的某个位置.")]),t._v(" "),s("p",[t._v("对后一问题的解决方法是将已分配块集合维护成一棵平衡二叉树, 这棵树保持着这样一个属性: 左子树中的所有块都放在较小的地址处, 而右子树中的所有块都放在较大的地址处. 如图 9-53 所示, 这就要求每个已分配块的头部里有两个附加字段(left 和 right). 每个字段指向某个已分配块的头部. "),s("strong",[t._v("isPtrptr(p)")]),t._v("  函数用树来执行对已分配块的二分查找. 在每一步中, 它依赖于块头部中的大小字段来判断 p 是否落在这个块的范围之内.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230905232658-8iy6ipe.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图9-53 一颗已分配块的平衡树中的左右指针")])]),t._v(" "),s("p",[t._v("平衡树方法保证会标记所有从根节点可达的节点, 从这个意义上来说它是正确的. 这是一个必要的保证, 因为应用程序的用户当然不会喜欢把他们的已分配块过早地返回给空闲链表. 然而, 这种方法从某种意义上而言又是保守的, 因为它可能不正确地标记实际上不可达的块, 因此它可能不会释放某些垃圾. 虽然这并不影响应用程序的正确性, 但是这可能导致不必要的外部碎片.")]),t._v(" "),s("p",[t._v("C 程序的 Mark&Sweep 收集器"),s("strong",[t._v("必须是保守的, 其根本原因是 C 语言不会用类型信息来标记内存位置")]),t._v(". 因此, 像 int 或者 float 这样的标量可以伪装成指针. 例如, 假设某个可达的已分配块在它的有效载荷中包含一个 int, 其值碰巧对应于某个其他已分配块 b 的有效载荷中的一个地址. 对收集器而言, 是没有办法推断出这个数据实际上是 int 而不是指针. 因此, 分配器必须保守地将块 b 标记为可达, 尽管事实上它可能是不可达的.")]),t._v(" "),s("h4",{attrs:{id:"c程序中常见的与内存有关的错误"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#c程序中常见的与内存有关的错误"}},[t._v("#")]),t._v(" C程序中常见的与内存有关的错误")]),t._v(" "),s("p",[t._v("对 C 程序员来说, 管理和使用虚拟内存可能是个困难的, 容易出错的任务. 与内存有关的错误属于那些最令人惊恐的错误, 因为它们在时间和空间上, 经常在距错误源一段距离之后才表现出来. 将错误的数据写到错误的位置, 你的程序可能在最终失败之前运行了好几个小时, 且使程序中止的位置距离错误的位置已经很远了. 我们用一些常见的与内存有关错误的讨论, 来结束对虚拟内存的讨论.")]),t._v(" "),s("h5",{attrs:{id:"_1-间接引用坏指针"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-间接引用坏指针"}},[t._v("#")]),t._v(" 1.间接引用坏指针")]),t._v(" "),s("p",[t._v("正如在 9.7.2 节中学到的, 在进程的虚拟地址空间中有"),s("strong",[t._v("较大的洞, 没有映射到任何有意义的数据")]),t._v(". 如果试图间接引用一个指向这些洞的指针, 那么操作系统就会以"),s("strong",[t._v("段异常")]),t._v("中止程序. 而且, 虚拟内存的某些区域是只读的. 试图写这些区域将会以保护异常中止这个程序.")]),t._v(" "),s("p",[s("strong",[t._v("间接引用坏指针")]),t._v("的一个常见示例是经典的 scanf 错误. 假设想要使用 scanf 从 stdin 读一个整数到一个变量. 正确的方法是传递给 scanf 一个格式串和变量的地址:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("scanf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("然而, 对于 C 程序员初学者而言(对有经验者也是如此!), 很容易传递 val 的内容, 而不是它的地址:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("scanf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("在这种情况下, scanf 将把 val 的"),s("strong",[t._v("内容解释为一个地址")]),t._v(", 并试图将一个字写到这个位置. 在最好的情况下, 程序立即以异常终止. 在最糟糕的情况下, val 的内容对应于虚拟内存的某个合法的读/写区域, 于是就覆盖了这块内存, 这通常会在相当长的一段时间以后造成灾难性的, 令人困惑的后果.")]),t._v(" "),s("h5",{attrs:{id:"_2-读未初始化的内存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-读未初始化的内存"}},[t._v("#")]),t._v(" 2.读未初始化的内存")]),t._v(" "),s("p",[t._v("虽然 bss 内存位置(诸如未初始化的全局 C 变量)总是被加载器初始化为零, 但是对于堆内存却并不是这样的. 一个常见的错误就是假设堆内存被初始化为零:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Return y = Ax */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("matvec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("A"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Malloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" A"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br")])]),s("p",[t._v("在这个示例中, 程序员不正确地假设向量 y 被初始化为零. 正确的实现方式是显式地将 y[i] 设置为零, 或者使用 calloc.")]),t._v(" "),s("h5",{attrs:{id:"_3-允许栈缓冲区溢出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-允许栈缓冲区溢出"}},[t._v("#")]),t._v(" 3.允许栈缓冲区溢出")]),t._v(" "),s("p",[t._v("正如在 3.10.3 节中看到的, 如果一个程序不检查输入串的大小就写入栈中的目标缓冲区, 那么这个程序就会有"),s("strong",[t._v("缓冲区溢出错误")]),t._v("(buffer overflow bug). 例如, 下面的函数就有缓冲区溢出错误, 因为 gets 函数复制一个任意长度的串到缓冲区. 为了纠正这个错误, 必须使用 fgets 函数, 这个函数限制了输入串的大小:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bufoverflow")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("gets")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Here is the stack buffer overflow bug */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("h5",{attrs:{id:"_4-假设指针和它们指向的对象是相同大小的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-假设指针和它们指向的对象是相同大小的"}},[t._v("#")]),t._v(" 4.假设指针和它们指向的对象是相同大小的")]),t._v(" "),s("p",[t._v("一种常见的错误是假设指向对象的指针和它们所指向的对象是相同大小的:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Create an nxm array */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("makeArray1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("A "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Malloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        A"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Malloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" A"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("p",[t._v("这里的目的是创建一个由 n 个指针组成的数组, 每个指针都指向一个包含 m 个 int 的数组. 然而, 因为程序员在第 5 行将 *"),s("em",[t._v("sizeof(int "),s("em",[t._v(")")])]),t._v("  写成了 "),s("strong",[t._v("sizeof(int)")]),t._v(" , 代码实际上创建的是一个 int 的数组.")]),t._v(" "),s("p",[t._v('这段代码只有在 int 和指向 int 的指针大小相同的机器上运行良好. 但是, 如果在像 Core i7 这样的机器上运行这段代码, 其中指针大于 int, 那么第 7 行和第 8 行的循环将写到超出 A 数组结尾的地方. 因为这些字中的一个很可能是已分配块的边界标记脚部, 所以可能不会发现这个错误, 直到在这个程序的后面很久释放这个块时, 此时, 分配器中的合并代码会戏剧性地失败, 而没有任何明显的原因. 这是"在远处起作用(action at distance)"的一个阴险的示例, 这类"在远处起作用"是与内存有关的编程错误的典型情况.')]),t._v(" "),s("h5",{attrs:{id:"_5-造成错位错误"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-造成错位错误"}},[t._v("#")]),t._v(" 5.造成错位错误")]),t._v(" "),s("p",[t._v("错位(off-by-one)错误是另一种很常见的造成覆盖错误的来源:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Create an nxm array */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("makeArray2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("A "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Malloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        A"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Malloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" A"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("p",[t._v("这是前面一节中程序的另一个版本. 这里在第 5 行创建了一个 n 个元素的指针数组, 但是随后在第 7 行和第 8 行试图初始化这个数组的 n+1 个元素, 在这个过程中覆盖了 A 数组后面的某个内存位置.")]),t._v(" "),s("h5",{attrs:{id:"_6-引用指针-而不是它所指向的对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-引用指针-而不是它所指向的对象"}},[t._v("#")]),t._v(" 6.引用指针,而不是它所指向的对象")]),t._v(" "),s("p",[t._v("如果不太注意 C "),s("strong",[t._v("操作符的优先级和结合性")]),t._v(", 就会错误地操作指针, 而不是指针所指向的对象. 比如, 考虑下面的函数, 其目的是删除一个有 *size 项的二叉堆里的第一项, 然后对剩下的 *size-1 项重新建堆:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("binheapDelete")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("binheap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("packet "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" binheap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n    binheap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" binheap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("size "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("size"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* This should be (*size)-- */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("heapify")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("binheap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("packet"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("p",[t._v("在第 6 行, 目的是减少 size 指针指向的整数的值. 然而, 因为一元运算符 -- 和 * 的优先级相同, 从右向左结合, 所以第 6 行中的代码实际减少的是指针自己的值, 而不是它所指向的整数的值. 如果幸运地话, 程序会立即失败; 但是更有可能发生的是, 当程序在执行过程后很久才产生出一个不正确的结果时, 我们只有一头的雾水. 这里的原则是当你对优先级和结合性有疑问的时候, 就使用括号. 比如, 在第 6 行, 可以使用表达式 (*size)--, 清晰地表明我们的意图.")]),t._v(" "),s("h5",{attrs:{id:"_7-误解指针运算"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-误解指针运算"}},[t._v("#")]),t._v(" 7.误解指针运算")]),t._v(" "),s("p",[t._v("另一种常见的错误是忘"),s("strong",[t._v("记了指针的算术操作是以它们指向的对象的大小为单位")]),t._v("来进行的, 而这种大小単位并不一定是字节. 例如, 下面函数的目的是扫描一个 int 的数组, 并返回一个指针, 指向 val 的首次出现:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("search")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Should be p++ */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("然而, 因为每次循环时, 第 4 行都把指针加了 4(一个整数的字节数), 函数就不正确地扫描数组中每 4 个整数.")]),t._v(" "),s("h5",{attrs:{id:"_8-引用不存在的变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-引用不存在的变量"}},[t._v("#")]),t._v(" 8.引用不存在的变量")]),t._v(" "),s("p",[t._v("没有太多经验的 C 程序员不理解栈的规则, 有时会引用不再合法的本地变量, 如下列所示:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stackref")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("这个函数返回一个指针(比如说是 p), 指向栈里的一个局部变量, 然后"),s("strong",[t._v("弹出它的栈帧")]),t._v(". 尽管 p 仍然指向一个合法的内存地址, 但是它已经不再指向一个合法的变量了. 当以后在程序中调用其他函数时, 内存将重用它们的栈帧. 再后来, 如果程序分配某个值给 *p, 那么它可能实际上正在修改另一个函数的栈帧中的一个条目, 从而潜在地带来灾难性的, 令人困惑的后果.")]),t._v(" "),s("h5",{attrs:{id:"_9-引用空闲堆块中的数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-引用空闲堆块中的数据"}},[t._v("#")]),t._v(" 9.引用空闲堆块中的数据")]),t._v(" "),s("p",[t._v("一个相似的错误是"),s("strong",[t._v("引用已经被释放了的堆块中的数据")]),t._v(". 例如, 考虑下面的示例, 这个示例在第 6 行分配了一个整数数组 x, 在第 10 行中先释放了块 x, 然后在第 14 行中又引用了它:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("heapref")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n    x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Malloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Other calls to malloc and free go here")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("free")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n    y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Malloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Oops! x[i] is a word in a free block */")]),t._v("\n  \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br")])]),s("p",[t._v("取决于在第 6 行和第 10 行发生的 malloc 和 free 的调用模式, 当程序在第 14 行引用 x[i] 时, 数组 x 可能是某个其他已分配堆块的一部分了, 因此其内容被重写了. 和其他许多与内存有关的错误一样, 这个错误只会在程序执行的后面, 当我们注意到 y 中的值被破坏了时才会显现出来.")]),t._v(" "),s("h5",{attrs:{id:"_10-引起内存泄漏"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-引起内存泄漏"}},[t._v("#")]),t._v(" 10.引起内存泄漏")]),t._v(" "),s("p",[t._v("内存泄漏是缓慢, 隐性的杀手, 当程序员不小心"),s("strong",[t._v("忘记释放已分配块, 而在堆里创建了垃圾时, 会发生这种问题")]),t._v(". 例如, 下面的函数分配了一个堆块 x, 然后不释放它就返回:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("leak")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Malloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* x is garbage at this point */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("如果经常调用 leak, 那么渐渐地, 堆里就会充满了垃圾, 最糟糕的情况下, 会占用整个虚拟地址空间. 对于像守护进程和服务器这样的程序来说, 内存泄漏是特别严重的, 根据定义这些程序是不会终止的.")]),t._v(" "),s("h4",{attrs:{id:"小结-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小结-4"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),s("p",[s("strong",[t._v("虚拟内存是对主存的一个抽象")]),t._v(". 支持虚拟内存的处理器通过使用一种叫做"),s("strong",[t._v("虚拟寻址的间接形式来引用主存")]),t._v(". 处理器产生一个"),s("strong",[t._v("虚拟地址")]),t._v(", 在被发送到主存之前, 这个地址"),s("strong",[t._v("被翻译成一个物理地址")]),t._v(". 从虚拟地址空间到物理地址空间的地址翻译要求硬件和软件紧密合作. 专门的"),s("strong",[t._v("硬件通过使用页表来翻译虚拟地址, 而页表的内容是由操作系统提供的")]),t._v(".")]),t._v(" "),s("p",[s("strong",[t._v("虚拟内存提供三个重要的功能. 第一, 它在主存中自动缓存最近使用的存放磁盘上的虚拟地址空间的内容. 虚拟内存缓存中的块叫做页. 对磁盘上页的引用会触发缺页, 缺页将控制转移到操作系统中的一个缺页处理程序. 缺页处理程序将页面从磁盘复制到主存缓存, 如果必要, 将写回被驱逐的页. 第二, 虚拟内存简化了内存管理, 进而又简化了链接, 在进程间共享数据, 进程的内存分配以及程序加载. 最后, 虚拟内存通过在每条页表条目中加入保护位, 从而了简化了内存保护.")])]),t._v(" "),s("p",[t._v("地址翻译的过程必须和系统中所有的硬件缓存的操作集成在一起. 大多数页表条目位于 L1 高速缓存中, 但是一个称为 "),s("strong",[t._v("TLB")]),t._v(" 的页表条目的片上高速缓存, 通常会消除访问在 L1 上的页表条目的开销.")]),t._v(" "),s("p",[s("strong",[t._v("现代系统通过将虚拟内存片和磁盘上的文件片关联起来, 来初始化虚拟内存片, 这个过程称为内存映射. 内存映射为共享数据, 创建新的进程以及加载程序提供了一种高效的机制. 应用可以使用 mmap 函数来手工地创建和删除虚拟地址空间的区域. 然而, 大多数程序依赖于动态内存分配器, 例如 malloc, 它管理虚拟地址空间区域内一个称为堆的区域. 动态内存分配器是一个感觉像系统级程序的应用级程序, 它直接操作内存, 而无需类型系统的很多帮助. 分配器有两种类型. 显式分配器要求应用显式地释放它们的内存块. 隐式分配器(垃圾收集器)自动释放任何未使用的和不可达的块.")])]),t._v(" "),s("p",[t._v("对于 C 程序员来说, 管理和使用虚拟内存是一件困难和容易出错的任务. 常见的错误示例包括: 间接引用坏指针, 读取未初始化的内存, 允许栈缓冲区溢岀, 假设指针和它们指向的对象大小相同, 引用指针而不是它所指向的对象, 误解指针运算, 引用不存在的变量, 以及引起内存泄漏.")]),t._v(" "),s("h3",{attrs:{id:"_10-系统级io"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-系统级io"}},[t._v("#")]),t._v(" 10.系统级IO")]),t._v(" "),s("h4",{attrs:{id:"第三部分-程序间的交互和通信"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第三部分-程序间的交互和通信"}},[t._v("#")]),t._v(" 第三部分:程序间的交互和通信")]),t._v(" "),s("p",[t._v("自学习计算机系统到现在, 一直假设程序是独立运行的, 只包含最小限度的输入和输出. 然而, 在现实世界里, 应用程序利用操作系统提供的服务来与 I/O 设备及其他程序通信.")]),t._v(" "),s("p",[t._v("本书的这一部分将使你了解 Unix 操作系统提供的基本 I/O 服务, 以及如何用这些服务来构造应用程序, 例如 Web 客户端和服务器, 它们是通过 Internet 彼此通信的. 你将学习编写诸如 Web 服务器这样的可以同时为多个客户端提供服务的并发程序. 编写并发应用程序还能使程序在现代多核处理器上执行得更快. 当学完了这个部分, 你将逐渐变成一个很牛的程序员, 对计算机系统以及它们对程序的影响有很成熟的理解.")]),t._v(" "),s("p",[s("strong",[t._v("输入/输出(I/O)是在主存和外部设备(例如磁盘驱动器, 终端和网络)之间复制数据的过程. 输入操作是从 I/O 设备复制数据到主存, 而输出操作是从主存复制数据到 I/O 设备.")])]),t._v(" "),s("p",[t._v("所有语言的运行时系统都提供执行 I/O 的较高级别的工具. 例如, ANSIC 提供标准 I/O 库, 包含像 printf 和 scanf 这样执行带缓冲区的 I/O 函数. C++ 语言用它的重载操作符 <<(输入)和 >>(输出)提供了类似的功能. 在 Linux 系统中, 是通过使用由内核提供的系统级 Unix I/O 函数来实现这些较高级别的 I/O 函数的. 大多数时候, 高级别 I/O 函数工作良好, 没有必要直接使用 Unix I/O. 那么为什么还要麻烦地学习 Unix I/O 呢?")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("了解 Unix I/O 将帮助你理解其他的系统概念.")]),t._v("  I/O 是系统操作不可或缺的一部分, 因此, 经常遇到 I/O 和其他系统概念之间的循环依赖. 例如, I/O 在进程的创建和执行中扮演着关键的角色. 反过来, 进程创建又在不同进程间的文件共享中扮演着关键角色. 因此, 要真正理解 I/O, 就必须理解进程, 反之亦然. 在对存储器层次结构, 链接和加载, 进程以及虚拟内存的讨论中, 我们已经接触了 I/O 的某些方面. 既然你对这些概念有了比较好的理解, 我们就能闭合这个循环, 更加深入地研究 I/O.")]),t._v(" "),s("li",[s("strong",[t._v("有时你除了使用 Unix I/O 以外别无选择.")]),t._v("  在某些重要的情况中, 使用高级 I/O 函数不太可能, 或者不太合适. 例如, 标准 I/O 库没有提供读取文件元数据的方式, 例如文件大小或文件创建时间. 另外, I/O 库还存在一些问题, 使得用它来进行网络编程非常冒险.")])]),t._v(" "),s("p",[t._v("这一章"),s("strong",[t._v("介绍 Unix I/O 和标准 I/O 的一般概念")]),t._v(", 并且向你展示在 C 程序中如何可靠地使用它们. 除了作为一般性的介绍之外, 这一章还为随后学习网络编程和并发性奠定坚实的基础.")]),t._v(" "),s("h4",{attrs:{id:"unix-i-o"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#unix-i-o"}},[t._v("#")]),t._v(" Unix I/O")]),t._v(" "),s("p",[t._v("一个 Linux 文件就是一个 m 个字节的"),s("strong",[t._v("序列")]),t._v(":")]),t._v(" "),s("p",[t._v("$$\nB_0,B_1,\\cdots,B_k,\\cdots,B_{m-1}\n$$")]),t._v(" "),s("p",[s("strong",[t._v("所有的 I/O 设备(例如网络, 磁盘和终端)都被模型化为文件, 而所有的输入和输出都被当作对相应文件的读和写来执行")]),t._v(". 这种将设备优雅地映射为文件的方式, 允许 Linux 内核引出一个简单, 低级的应用接口, 称为 "),s("strong",[t._v("Unix I/O")]),t._v(", 这使得所有的输入和输出都能以一种"),s("strong",[t._v("统一且一致的方式")]),t._v("来执行:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("打开文件.")]),t._v("  一个应用程序通过要求内核打开相应的文件, 来宣告它想要访问一个 I/O 设备. 内核返回一个小的非负整数, 叫做"),s("strong",[t._v("描述符")]),t._v(", 它在"),s("strong",[t._v("后续对此文件的所有操作中标识这个文件. 内核记录有关这个打开文件的所有信息. 应用程序只需记住这个描述符")]),t._v(".")]),t._v(" "),s("li",[t._v("Linux shell 创建的"),s("strong",[t._v("每个进程开始时都有三个打开的文件")]),t._v(": "),s("mark",[s("strong",[t._v("标准输入")])]),t._v("​"),s("mark",[t._v("(描述符为 0),")]),t._v(" "),s("mark",[s("strong",[t._v("标准输出")])]),t._v("​"),s("mark",[t._v("(描述符为 1)和")]),t._v("​"),s("mark",[s("strong",[t._v("标准错误")])]),t._v("​"),s("mark",[t._v("(描述符为 2)")]),t._v(". 头文件  "),s("strong",[t._v("<unistd.h>")]),t._v("  定义了常量 STDIN_FILENO, STDOUT_FILENO 和 STDERR_FILENO, 它们可用来代替显式的描述符值.")]),t._v(" "),s("li",[s("strong",[t._v("改变当前的文件位置.")]),t._v("  对于每个打开的文件, 内核保持着一个"),s("strong",[t._v("文件位置 k, 初始为 0")]),t._v(". 这个文件位置是从文件开头起始的字节偏移量. 应用程序能够通过执行 seek 操作, 显式地设置文件的当前位置为 k.")]),t._v(" "),s("li",[s("strong",[t._v("读写文件.")]),t._v("  一个读操作就是从文件复制 n > 0 个字节到内存, 从当前文件位置 k 开始, 然后将 k 增加到 k+n. 给定一个大小为 m 字节的文件, 当 "),s("span",{attrs:{"data-type":"text"}},[t._v("k⩾m")]),t._v(' 时执行读操作会触发一个称为 end-of-file(EOF)的条件, 应用程序能检测到这个条件. 在文件结尾处并没有明确的 "EOF 符号". 类似地, 写操作就是从内存复制 n > 0 个字节到一个文件, 从当前文件位置 k 开始, 然后更新 k.')]),t._v(" "),s("li",[s("strong",[t._v("关闭文件.")]),t._v("  当应用完成了对文件的访问之后, 它就通知内核关闭这个文件. 作为响应, 内核释放文件打开时创建的数据结构, 并将这个描述符恢复到可用的描述符池中. 无论一个进程因为何种原因终止时, "),s("strong",[t._v("内核都会关闭所有打开的文件并释放它们的内存资源")]),t._v(".")])]),t._v(" "),s("h4",{attrs:{id:"文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#文件"}},[t._v("#")]),t._v(" 文件")]),t._v(" "),s("p",[t._v("每个 Linux 文件都有一个"),s("strong",[t._v("类型")]),t._v("(type)来表明它在系统中的角色:")]),t._v(" "),s("ul",[s("li",[s("mark",[s("strong",[t._v("普通文件")])]),t._v("(regular file)包含"),s("strong",[t._v("任意数据")]),t._v(". 应用程序常常要区分"),s("strong",[t._v("文本文件")]),t._v("(text file)和"),s("strong",[t._v("二进制文件")]),t._v("(binary file), 文本文件是只含有 ASCII 或 Unicode 字符的普通文件; 二进制文件是所有其他的文件. 对内核而言, 文本文件和二进制文件没有区别. Linux 文本文件包含了一个"),s("strong",[t._v("文本行")]),t._v('(text line)序列, 其中每一行都是一个字符序列, 以一个新行符("\\n")结束. 新行符与 ASCII 的换行符(LF)是一样的, 其数字值为 0x0a.')]),t._v(" "),s("li",[s("mark",[s("strong",[t._v("目录")])]),t._v("(directory)是包含一组"),s("strong",[t._v("链接")]),t._v("(link)的文件, 其中每个链接都将一个"),s("strong",[t._v("文件名")]),t._v("(filename)映射到一个文件, 这个文件可能是另一个目录. 每个目录至少含有两个条目: 是到该目录自身的链接, 以及是到目录层次结构(见下文)中"),s("strong",[t._v("父目录")]),t._v("(parent directory)的链接. 可以用 mkdir 命令创建一个目录, 用 ls 查看其内容, 用 rmdir 删除该目录.")]),t._v(" "),s("li",[s("mark",[s("strong",[t._v("套接字")])]),t._v("(socket)是用来与另一个进程进行"),s("strong",[t._v("跨网络通信的文件")]),t._v("(11.4 节).")])]),t._v(" "),s("p",[t._v("其他文件类型包含"),s("strong",[t._v("命名通道")]),t._v("(named pipe), "),s("strong",[t._v("符号链接")]),t._v("(symbolic link), 以及"),s("strong",[t._v("字符和块设备")]),t._v("(character and block device), 这些不在本书的讨论范畴.")]),t._v(" "),s("p",[t._v("Linux 内核将所有文件都组织成一个"),s("strong",[t._v("目录层次结构")]),t._v("(directory hierarchy), 由名为 /(斜杠)的"),s("strong",[t._v("根目录")]),t._v("确定. 系统中的每个文件都是根目录的直接或间接的后代. 图 10-1 显示了 Linux 系统的目录层次结构的一部分.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230906221352-qvcnoke.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图10-1 Linux目录层次的一部分. 尾部有斜杠表示是目录")])]),t._v(" "),s("p",[t._v("作为其上下文的一部分, 每个进程都有一个"),s("strong",[t._v("当前工作目录")]),t._v("(current working directory)来确定其"),s("strong",[t._v("在目录层次结构中的当前位置")]),t._v(". 可以用 cd 命令来修改 shell 中的当前工作目录.")]),t._v(" "),s("p",[t._v("目录层次结构中的位置用"),s("strong",[t._v("路径名")]),t._v("(pathname)来指定. 路径名是一个字符串, 包括一个可选斜杠, 其后紧跟一系列的文件名, 文件名之间用斜杠分隔. 路径名有两种形式:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("绝对路径名")]),t._v("(absolute pathname)以一个斜杠开始, 表示从根节点开始的路径. 例如, 在图 10-1 中, hello.c 的绝对路径名为  "),s("strong",[t._v("/home/droh/hello.c")]),t._v(".")]),t._v(" "),s("li",[s("strong",[t._v("相对路径名")]),t._v("(relative pathname)以文件名开始, 表示从当前工作目录开始的路径. 例如, 在图 10-1 中, 如果  "),s("strong",[t._v("/home/droh")]),t._v(" 是当前工作目录, 那么 "),s("strong",[t._v("hello.c")]),t._v(" 的相对路径名就是  "),s("strong",[t._v("./hello.c")]),t._v(". 反之, 如果  "),s("strong",[t._v("/home/bryant")]),t._v(" 是当前工作目录, 那么相对路径名就是  "),s("strong",[t._v("../home/droh/hello.c")]),t._v(".")])]),t._v(" "),s("h4",{attrs:{id:"打开和关闭文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#打开和关闭文件"}},[t._v("#")]),t._v(" 打开和关闭文件")]),t._v(" "),s("p",[t._v("进程是通过"),s("strong",[t._v("调用 open 函数来打开一个已存在的文件或者创建一个新文件")]),t._v("的:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/types.h>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/stat.h>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<fcntl.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 若成功则为新文件描述符, 若出错为 -1.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" flags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("mode_t")]),t._v(" mode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[s("strong",[t._v("open 函数将 filename 转换为一个文件描述符, 并且返回描述符数字")]),t._v(". 返回的描述符总是在进程中当前没有打开的最小描述符. flags 参数指明了进程打算如何访问这个文件:")]),t._v(" "),s("ul",[s("li",[t._v("O_RDONLY: 只读.")]),t._v(" "),s("li",[t._v("O_WRONLY: 只写.")]),t._v(" "),s("li",[t._v("O_RDWR: 可读可写.")])]),t._v(" "),s("p",[t._v("例如, 下面的代码说明如何以读的方式打开一个已存在的文件:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("fd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Open")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo.txt"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" O_RDONLY"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("flags 参数也可以是一个或者更多位掩码的或, 为写提供给一些额外的指示:")]),t._v(" "),s("ul",[s("li",[t._v("O_CREAT: 如果文件不存在, 就创建它的一个"),s("strong",[t._v("截断的")]),t._v("(truncated)(空)文件.")]),t._v(" "),s("li",[t._v("O_TRUNC: 如果文件已经存在, 就截断它.")]),t._v(" "),s("li",[t._v("O_APPEND: 在每次写操作前, 设置文件位置到文件的结尾处.")])]),t._v(" "),s("p",[t._v("例如, 下面的代码说明的是如何打开一个已存在文件, 并在后面添加一些数据:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("fd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Open")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo.txt"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" O_WRONLY"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("O_APPEND"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("mode 参数指定了新文件的访问权限位. 这些位的符号名字如下表 10-2 所示.")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("掩码")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("S_IRUSR")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("使用者(拥有者)能够读这个文件")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("S_IWUSR")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("使用者(拥有者)能够写这个文件")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("S_IXUSR")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("使用者(拥有者)能够执行这个文件")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("S_IRGRP")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("拥有者所在组的成员能够读这个文件")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("S_IWGRP")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("拥有者所在组的成员能够写这个文件")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("S_IXGRP")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("拥有者所在组的成员能够执行这个文件")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("S_IROTH")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("其他人(任何人)能够读这个文件")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("S_IWOTH")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("其他人(任何人)能够写这个文件")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("S_IXOTH")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("其他人(任何人)能够执行这个文件")])])])]),t._v(" "),s("blockquote",[s("p",[t._v("表 10-2 访问权限位. 在 sys/stat.h 中定义")])]),t._v(" "),s("p",[t._v("作为上下文的一部分, "),s("strong",[t._v("每个进程都有一个 umask, 它是通过调用 umask 函数")]),t._v("来设置的. 当进程通过带某个 mode 参数的 open 函数调用来创建一个新文件时, 文件的访问权限位被设置为 "),s("strong",[t._v("mode &~ umask")]),t._v(". 例如, 假设给定下面的 mode 和 umask 默认值:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("DEF_MODE")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("S_IRUSR"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("S_IWUSR"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("S_IRGRP"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("S_IWGRP"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("S_IROTH"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("S_IWOTH")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("DEF_UMASK")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("S_IWGRP"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("S_IWOTH")])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("接下来, 下面的代码片段创建一个新文件, 文件的拥有者有读写权限, 而所有其他的用户都有读权限:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("umask")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("DEF_UMASK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Open")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo.txt"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" O_CREAT"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("O_TRUNC"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("O_WRONLY"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" DEF_MODE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("最后, 进程通过"),s("strong",[t._v("调用 close 函数关闭一个打开的文件")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<unistd.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 若成功则为 0, 若出错则为 -1.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("关闭一个已关闭的描述符会出错.")]),t._v(" "),s("h4",{attrs:{id:"读和写文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#读和写文件"}},[t._v("#")]),t._v(" 读和写文件")]),t._v(" "),s("p",[t._v("应用程序是通过分别"),s("strong",[t._v("调用 read 和 write 函数来执行输入和输出")]),t._v("的.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<unistd.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 若成功则为读的字节数, 若 EOF 则为0, 若出错为 -1.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ssize_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 若成功则为写的字节数, 若出错则为 -1.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ssize_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[s("strong",[t._v("read 函数从描述符为 fd 的当前文件位置复制最多 n 个字节到内存位置 buf")]),t._v(". 返回值 -1 表示一个错误, 而返回值 0 表示 EOF. 否则, 返回值表示的是实际传送的字节数量.")]),t._v(" "),s("p",[s("strong",[t._v("write 函数从内存位置 buf 复制至多 n 个字节到描述符 fd 的当前文件位置")]),t._v(". 代码 10-3 展示了一个程序使用 read 和 write 调用一次一个字节地从标准输入复制到标准输出.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"csapp.h"')])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Read")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("STDIN_FILENO"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Write")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("STDOUT_FILENO"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 10-3 一次一个字节地从标准输入复制到标准输出")])]),t._v(" "),s("p",[t._v("通过"),s("strong",[t._v("调用 lseek 函数, 应用程序能够显示地修改当前文件的位置")]),t._v(", 这部分内容不在我们的讲述范围之内.")]),t._v(" "),s("blockquote",[s("p",[t._v("旁注: ssize_t 和 size_t 有些什么区别?")])]),t._v(" "),s("p",[t._v("你可能已经注意到了, read 函数有一个 size_t 的输入参数和一个 ssize_t 的返回值. 那么这两种类型之间有什么区别呢? 在 x86-64 系统中, size_t 被定义为 unsigned long, 而 ssize_t(有符号的大小)被定义为 long. read 函数返回一个有符号的大小, 而不是一个无符号大小, 这是因为出错时它必须返回 -1. 有趣的是, 返回一个 -1 的可能性使得 read 的最大值减小了一半.")]),t._v(" "),s("p",[t._v("在某些情况下, read 和 write 传送的字节比应用程序要求的要少. 这些"),s("strong",[t._v("不足值")]),t._v("(short count)不表示有错误. 出现这样情况的原因有:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("读时遇到 EOF.")]),t._v("  假设准备读一个文件, 该文件从当前文件位置开始只含有 20 多个字节, 而我们以 50 个字节的片进行读取. 这样一来, 下一个 read 返回的不足值为 20, 此后的 read 将通过返回不足值 0 来发出 EOF 信号.")]),t._v(" "),s("li",[s("strong",[t._v("从终端读文本行.")]),t._v("  如果打开文件是与终端相关联的(如键盘和显示器), 那么每个 read 函数将一次传送一个文本行, 返回的不足值等于文本行的大小.")]),t._v(" "),s("li",[s("strong",[t._v("读和写网络套接字")]),t._v("(socket). 如果打开的文件对应于网络套接字(11.4 节), 那么内部缓冲约束和较长的网络延迟会引起 read 和 write 返回不足值. 对 Linux 管道(pipe)调用 read 和 write 时, 也有可能出现不足值, 这种进程间通信机制不在讨论的范围之内.")])]),t._v(" "),s("p",[t._v("实际上, 除了 EOF, 当在读磁盘文件时, 将不会遇到不足值, 而且在写磁盘文件时, 也不会遇到不足值. 然而, 如果你想创建健壮的(可靠的)诸如 Web 服务器这样的网络应用, 就必须通过反复调用 read 和 write 处理不足值, 直到所有需要的字节都传送完毕.")]),t._v(" "),s("h4",{attrs:{id:"用rio包健壮地读写"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用rio包健壮地读写"}},[t._v("#")]),t._v(" 用RIO包健壮地读写")]),t._v(" "),s("p",[t._v("在这一小节里, 会讲述一个 I/O 包, 称为 "),s("strong",[t._v("RIO")]),t._v("(Robust I/O, 健壮的 I/O)包, 它会"),s("strong",[t._v("自动为你处理上文中所述的不足值")]),t._v(". 在像网络程序这样容易出现不足值的应用中, RIO 包提供了方便, 健壮和高效的 I/O. RIO 提供了两类不同的函数:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("无缓冲的输入输出函数.")]),t._v("  这些函数直接在内存和文件之间传送数据, 没有应用级缓冲. 它们对将二进制数据读写到网络和从网络读写二进制数据尤其有用.")]),t._v(" "),s("li",[s("strong",[t._v("带缓冲的输入函数.")]),t._v("  这些函数允许你高效地从文件中读取文本行和二进制数据, 这些文件的内容缓存在应用级缓冲区内, 类似于为 printf 这样的标准 I/O 函数提供的缓冲区. 与【110】中讲述的带缓冲的 I/O 例程不同, 带缓冲的 RIO 输入函数是线程安全的(12.7.1 节), 它在同一个描述符上可以被交错地调用. 例如, 可以从一个描述符中读一些文本行, 然后读取一些二进制数据, 接着再多读取一些文本行.")])]),t._v(" "),s("p",[t._v("讲述 RIO 例程有两个原因. 第一, 在接下来的两章中开发的网络应用中使用了它们; 第二, 通过学习这些例程的代码, 将从总体上对 Unix I/O 有更深入的了解.")]),t._v(" "),s("h5",{attrs:{id:"_1-rio的无缓冲的输入输出函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-rio的无缓冲的输入输出函数"}},[t._v("#")]),t._v(" 1.RIO的无缓冲的输入输出函数")]),t._v(" "),s("p",[t._v("通过调用 rio_readn 和 rio_writen 函数, 应用程序可以在"),s("strong",[t._v("内存和文件之间直接传送数据")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"csapp.h"')])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 若成功则为传送的字节数, 若 EOF 则为 0(只对 rio_readn 而言), 若出错则为 -1.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ssize_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rio_readn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("usrbuf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ssize_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rio_writen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("usrbuf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("rio_readn 函数从描述符 fd 的当前文件位置最多传送 n 个字节到内存位置 usrbuf. 类似地, rio_writen 函数从位置 usrbuf 传送 n 个字节到描述符 fd. rio_read 函数在遇到 EOF 时只能返回一个不足值. rio_writen 函数决不会返回不足值. 对同一个描述符, 可以任意交错地调用 rio_readn 和 rio_writen.")]),t._v(" "),s("p",[t._v("代码 10-4 显示了 rio_readn 和 rio_writen 的代码. 注意, 如果 rio_readn 和 rio_writen 函数被一个从应用信号处理程序的返回中断, 那么每个函数都会手遍地重启 read 或 write. 为了尽可能有较好的可移植性, 我们允许被中断的系统调用, 且在必要时重启它们.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ssize_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rio_readn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("usrbuf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" nleft "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ssize_t")]),t._v(" nread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("bufp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" usrbuf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nleft "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nread "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bufp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nleft"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("errno "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" EINTR"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Interrupted by sig handler return */")]),t._v("\n                nread "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* and call read() again */")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* errno set by read() */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nread "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("              "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* EOF */")]),t._v("\n        nleft "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-=")]),t._v(" nread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        bufp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" nread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" nleft"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Return >= 0 */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br")])]),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ssize_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rio_writen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("usrbuf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" nleft "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ssize_t")]),t._v(" nwritten"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("bufp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" usrbuf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nleft "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nwritten "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bufp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nleft"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("errno "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" EINTR"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Interrupted by sig handler return */")]),t._v("\n                nwritten "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* and call write() again */")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* errno set by write() */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        nleft "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-=")]),t._v(" nwritten"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        bufp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" nwritten"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 10-4 rio_readn 和 rio_writen 函数")])]),t._v(" "),s("h5",{attrs:{id:"_2-rio的带缓冲的输入函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-rio的带缓冲的输入函数"}},[t._v("#")]),t._v(" 2.RIO的带缓冲的输入函数")]),t._v(" "),s("p",[t._v("假设要编写一个程序来计算文本文件中文本"),s("strong",[t._v("行的数量")]),t._v(", 该如何来实现呢? 一种方法就是用 read 函数来一次一个字节地从文件传送到用户内存, 检查每个字节来查找换行符. 这个方法的缺点是效率不是很高, 每读取文件中的一个字节都要求陷入内核.")]),t._v(" "),s("p",[t._v("一种更好的方法是调用一个"),s("strong",[t._v("包装函数")]),t._v("(rio_readlineb), 它从一个内部"),s("strong",[t._v("读缓冲区")]),t._v("复制一个文本行, 当缓冲区变空时, 会自动地调用 read 重新填满缓冲区. 对于既包含文本行也包含二进制数据的文件(例如 11.5.3 节中描述的 HTTP 响应), 我们也提供了一个 rio_readn 带缓冲区的版本, 叫做 rio_readnb, 它从和 rio_readlineb 一样的读缓冲区中传送原始字节.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"csapp.h"')])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 无.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rio_readinitb")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("rio_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("rp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 若成功则为读的字节数, 若 EOF 则为 0, 若出错则为 -1.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ssize_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rio_readlineb")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("rio_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("rp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("usrbuf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" maxlen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ssize_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rio_readnb")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("rio_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("rp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("usrbuf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("p",[t._v("每打开一个描述符, 都会调用一次 rio_readinitb 函数. 它将描述符 fd 和地址 rp 处的一个类型为 rio_t 的读缓冲区联系起来.")]),t._v(" "),s("p",[t._v("rio_readlineb 函数从文件叩读出下一个文本行(包括结尾的换行符), 将它复制到内存位置 usrbuf, 并且用 NULL(零)字符来结束这个文本行. rio_readlineb 函数最多读 "),s("strong",[t._v("maxlen-1")]),t._v(" 个字节, 余下的一个字符留给结尾的 NULL 字符. 超过 "),s("strong",[t._v("maxlen-1")]),t._v(" 字节的文本行被截断, 并用一个 NULL 字符结束.")]),t._v(" "),s("p",[t._v("rio_readnb 函数从文件 rp 最多读 n 个字节到内存位置 usrbuf. 对同一描述符, 对 rio_readlineb 和 rio_readnb 的调用可以任意交叉进行. 然而, 对这些带缓冲的函数的调用却不应和无缓冲的 rio_readn 函数交叉使用.")]),t._v(" "),s("p",[t._v("在本书剩下的部分中将给出大量的 RIO 函数的示例. 代码 10-5 展示了如何使用 RIO 函数来一次一行地从标准输入复制一个文本文件到标准输出.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"csapp.h"')])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" argc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("rio_t")]),t._v(" rio"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MAXLINE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Rio_readinitb")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rio"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" STDIN_FILENO"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Rio_readlineb")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rio"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" MAXLINE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Rio_writen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("STDOUT_FILENO"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 10-5 从标准输入复制一个文本文件到标准输出")])]),t._v(" "),s("p",[t._v("代码 10-6 展示了一个读缓冲区的格式, 以及初始化它的 rio_readinitb 函数的代码. rio_readinitb 函数创建了一个空的读缓冲区, 并且将一个打开的文件描述符和这个缓冲区联系起来.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("RIO_BUFSIZE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8192")])])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" rio_fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Descriptor for this internal buf */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" rio_cnt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("               "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Unread bytes in internal buf */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("rio_bufptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Next unread byte in internal buf */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" rio_buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("RIO_BUFSIZE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Internal buffer */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("rio_t")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rio_readinitb")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("rio_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("rp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    rp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rio_fd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    rp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rio_cnt "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    rp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rio_bufptr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rio_buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 10-6 一个类型为 rio_t 的读缓冲区和初始化它的 rio_readinitb 函数")])]),t._v(" "),s("p",[t._v("RIO 读程序的核心是代码 10-7 所示的 rio_read 函数. rio_read 函数是 Linuxread 函数的带缓冲的版本. 当调用 rio_read 要求读 n 个字节时, 读缓冲区内有 "),s("strong",[t._v("rp->riocnt")]),t._v(" 个未读字节. 如果缓冲区为空, 那么会通过调用 read 再填满它. 这个 read 调用收到一个不足值并不是错误, 只不过读缓冲区是填充了一部分. 一旦缓冲区非空, rio_read 就从读缓冲区复制 n 和 "),s("strong",[t._v("rp->riocnt")]),t._v(" 中较小值个字节到用户缓冲区, 并返回复制的字节数.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ssize_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rio_read")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("rio_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("rp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("usrbuf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" cnt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rio_cnt "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Refill if buf is empty */")]),t._v("\n        rp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rio_cnt "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rio_fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rio_buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                           "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rio_buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rio_cnt "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("errno "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" EINTR"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Interrupted by sig handler return */")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rio_cnt "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* EOF */")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n            rp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rio_bufptr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rio_buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Reset buffer ptr */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Copy min(n, rp->rio_cnt) bytes from internal buf to user buf */")]),t._v("\n    cnt "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rio_cnt "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        cnt "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rio_cnt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("memcpy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("usrbuf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rio_bufptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cnt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    rp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rio_bufptr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" cnt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    rp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rio_cnt "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-=")]),t._v(" cnt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" cnt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 10-7 内部的 rio_read 函数")])]),t._v(" "),s("p",[t._v("对于一个应用程序, rio_read 函数和 Linuxread 函数有同样的语义. 在出错时, 它返回值 -1, 并且适当地设置 errno. 在 EOF 时, 它返回值 0. 如果要求的字节数超过了读缓冲区内未读的字节的数量, 它会返回一个不足值. 两个函数的相似性使得很容易通过用 rio_read 代替 read 来创建不同类型的带缓冲的读函数. 例如, 用 rio_read 代替 read, 代码 10-8 中的 rio_readnb 函数和 rio_readn 有相同的结构. 相似地, 图 10-8 中的 rio_readlineb 程序最多调用 "),s("strong",[t._v("maxlen-1")]),t._v(" 次 rio_read. 每次调用都从读缓冲区返回一个字正然后检查这个字节是否是结尾的换行符.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ssize_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rio_readlineb")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("rio_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("rp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("usrbuf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" maxlen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("bufp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" usrbuf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" maxlen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rc "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rio_read")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("bufp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("mark"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ’\\n’"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rc "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("mark"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* EOF, no data read */")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* EOF, some data was read */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Error */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("bufp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br")])]),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ssize_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rio_readnb")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("rio_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("rp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("usrbuf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" nleft "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ssize_t")]),t._v(" nread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("bufp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" usrbuf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nleft "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nread "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rio_read")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bufp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nleft"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* errno set by read() */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nread "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("              "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* EOF */")]),t._v("\n        nleft "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-=")]),t._v(" nread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        bufp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" nread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" nleft"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Return >= 0 */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 10-8 rio_readlineb 和 rio_readnb 函数")])]),t._v(" "),s("blockquote",[s("p",[t._v("旁注: RIO 包的起源")])]),t._v(" "),s("p",[t._v("RIO 函数的灵感来自于 W. Richard Stevens 在他的经典网络编程作品【110】中描述的 readLine, readn 和 writen 函数. rio_readn 和 rio_writen 函数与 Stevens 的 readn 和 writen 函数是一样的. 然而, Stevens 的 readline 函数有一些局限性在 RI0 中得到了纠正. 第一, 因为 readline 是带缓冲的, 而 readn 不带, 所以这两个函数不能在同一描述符上一起使用. 第二, 因为它使用一个 static 缓冲区, Stevens 的 readline 函数不是线程安全的, 这就要求 Stevens 引入一个不同的线程安全的版本, 称为 read-line_ro 我们已经在 rio_readlineb 和 rio_readnb 函数中修改了这两个缺陷, 使得这两个函数是相互兼容和线程安全的.")]),t._v(" "),s("h4",{attrs:{id:"读取文件元数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#读取文件元数据"}},[t._v("#")]),t._v(" 读取文件元数据")]),t._v(" "),s("p",[t._v("应用程序能够通过"),s("strong",[t._v("调用 stat 和 fstat 函数, 检索到关于文件的信息")]),t._v("(有时也称为文件的"),s("strong",[t._v("元数据")]),t._v("(metadata)).")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<unistd.h>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/stat.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 若成功则为 0, 若出错则为 -1.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("stat")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fstat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("stat")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("stat 函数以一个文件名作为输入, 并填写如代码 10-9 所示的一个 stat 数据结构中的"),s("strong",[t._v("各个成员")]),t._v(". fstat 函数是相似的, 只不过是以文件描述符而不是文件名作为输入. 当在 11.5 节中讨论 Web 服务器时, 会需要 stat 数据结构中的 st_mode 和 st_size 成员, 其他成员则不在讨论之列.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Metadata returned by the stat and fstat functions */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("stat")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("dev_t")]),t._v("         st_dev"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Device */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ino_t")]),t._v("         st_ino"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* inode */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("mode_t")]),t._v("        st_mode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Protection and file type */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("nlink_t")]),t._v("       st_nlink"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Number of hard links */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uid_t")]),t._v("         st_uid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* User ID of owner */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("gid_t")]),t._v("         st_gid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Group ID of owner */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("dev_t")]),t._v("         st_rdev"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Device type (if inode device) */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("off_t")]),t._v("         st_size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Total size, in bytes */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" st_blksize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Block size for filesystem I/O */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" st_blocks"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Number of blocks allocated */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("time_t")]),t._v("        st_atime"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Time of last access */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("time_t")]),t._v("        st_mtime"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Time of last modification */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("time_t")]),t._v("        st_ctime"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Time of last change */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 10-9 stat 数据结构")])]),t._v(" "),s("p",[t._v("st_size 成员包含了"),s("strong",[t._v("文件的字节数大小")]),t._v(". st_mode 成员则编码了文件访问许可位(图 10-2)和文件类型(10.2 节). Linux 在 sys/stat.h 中定义了宏谓词来确定 st_mode 成员的文件类型:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("SISREGm")]),t._v(". 这是一个普通文件吗?")]),t._v(" "),s("li",[s("strong",[t._v("SISDIRm")]),t._v(". 这是一个目录文件吗?")]),t._v(" "),s("li",[s("strong",[t._v("SISSOCKm")]),t._v(". 这是一个网络套接字吗?")])]),t._v(" "),s("p",[t._v("代码 10-10 展示了如何使用这些宏和 stat 函数来读取和解释一个文件的 st_mode 位.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"csapp.h"')])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" argc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("stat")]),t._v(" stat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("readok"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Stat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("stat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("S_ISREG")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("st_mode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Determine file type */")]),t._v("\n        type "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"regular"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("S_ISDIR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("st_mode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        type "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"directory"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n        type "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"other"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("st_mode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" S_IRUSR"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Check read access */")]),t._v("\n        readok "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"yes"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n        readok "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"no"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"type: %s, read: %s\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" readok"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 10-10 查询和处理一个文件的 st_mode 位")])]),t._v(" "),s("h4",{attrs:{id:"读取目录内容"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#读取目录内容"}},[t._v("#")]),t._v(" 读取目录内容")]),t._v(" "),s("p",[t._v("应用程序可以用 "),s("strong",[t._v("readdir 系列函数来读取目录的内容")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/types.h>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<dirent.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 若成功, 则为处理的指针; 若出错, 则为 NULL.")]),t._v("\nDIR "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("opendir")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("函数 opendir 以路径名为参数, 返回指向"),s("strong",[t._v("目录流")]),t._v("(directory stream)的指针. 流是对条目有序列表的抽象, 在这里是指目录项的列表.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<dirent.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 若成功, 则为指向下一个目录项的指针; ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//      若没有更多的目录项或出错, 则为 NULL.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("dirent")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readdir")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("DIR "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dirp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("每次对 readdir 的调用返回的都是指向流 dirp 中"),s("strong",[t._v("下一个目录项")]),t._v("的指针, 或者, 如果没有更多目录项则返回 NULL. 每个目录项都是一个结构, 其形式如下:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("dirent")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ino_t")]),t._v(" d_ino"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* inode number */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" d_name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("256")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Filename */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("虽然有些 Linux 版本包含了其他的结构成员, 但是只有这两个对所有系统来说都是标准的. 成员 d_name 是文件名, d_ino 是文件位置.")]),t._v(" "),s("p",[t._v("如果出错, 则 readdir 返回 NULL, 并设置 errno. 可惜的是, 唯一能区分错误和流结束情况的方法是检査自调用 readdir 以来 errno 是否被修改过.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<dirent.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 成功为 0; 错误为 -1.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("closedir")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("DIR "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dirp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("函数 closedir 关闭流并释放其所有的资源. 代码 10-11 展示了怎样用 readdir 来读取目录的内容.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"csapp.h"')])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" argc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    DIR "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("streamp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("dirent")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dep"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    streamp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Opendir")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    errno "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dep "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readdir")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("streamp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Found file: %s\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dep"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("d_name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("errno "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("unix_error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"readdir error"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Closedir")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("streamp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 10-11 读取目录的内容")])]),t._v(" "),s("h4",{attrs:{id:"共享文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#共享文件"}},[t._v("#")]),t._v(" 共享文件")]),t._v(" "),s("p",[t._v("可以用许多不同的方式来"),s("strong",[t._v("共享 Linux 文件")]),t._v(". 除非你很清楚内核是如何表示打开的文件, 否则文件共享的概念相当难懂. 内核用三个相关的数据结构来表示打开的文件:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("描述符表")]),t._v("(descriptor table). "),s("strong",[t._v("每个进程都有它独立的描述符表, 它的表项是由进程打开的文件描述符来索引的. 每个打开的描述符表项指向文件表中的一个表项")]),t._v(".")]),t._v(" "),s("li",[s("strong",[t._v("文件表")]),t._v("(file table). 打开文件的集合是由"),s("strong",[t._v("一张文件表")]),t._v("来表示的, 所有的进程共享这张表. 每个文件表的表项组成(针对我们的目的)包括当前的文件位置, "),s("strong",[t._v("引用计数")]),t._v("(reference count)(即当前指向该表项的描述符表项数), 以及一个指向 v-node 表中对应表项的指针. 关闭一个描述符会减少相应的文件表表项中的引用计数. 内核不会删除这个文件表表项, 直到它的引用计数为零.")]),t._v(" "),s("li",[s("strong",[t._v("v-node 表")]),t._v("(v-node table). 同文件表一样, "),s("strong",[t._v("所有的进程共享这张 v-node 表")]),t._v(". 每个表项包含 stat 结构中的大多数信息, 包括 st_mode 和 st_size 成员.")])]),t._v(" "),s("p",[t._v("图 10-12 展示了一个示例, 其中描述符 1 和 4 通过不同的打开文件表表项来引用两个不同的文件. 这是一种典型的情况, 没有共享文件, 并且每个描述符对应一个不同的文件.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230906222349-73lsphb.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图 10-12 典型的打开文件的内核数据结构. 在这个示例中, 两个描述符引用不同的文件. 没有共享")])]),t._v(" "),s("p",[t._v("如图 10-13 所示, "),s("strong",[t._v("多个描述符也可以通过不同的文件表表项来引用同一个文件")]),t._v(". 例如, 如果以同一个 filename 调用 open 函数两次, 就会发生这种情况. 关键思想是每个描述符都有它自己的文件位置, 所以对不同描述符的读操作可以从文件的不同位置获取数据.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230906222428-og75rxs.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图 10-13 文件共享. 这个例子展示了两个描述符通过两个打开文件表表项共享同一个磁盘文件")])]),t._v(" "),s("p",[t._v("我们也能理解"),s("strong",[t._v("父子进程是如何共享文件")]),t._v("的. 假设在调用 fork 之前, 父进程有如图 10-12 所示的打开文件. 然后, 图 10-14 展示了调用 fork 后的情况. "),s("strong",[t._v("子进程有一个父进程描述符表的副本. 父子进程共享相同的打开文件表集合, 因此共享相同的文件位置. 一个很重要的结果就是, 在内核删除相应文件表表项之前, 父子进程必须都关闭了它们的描述符")]),t._v(".")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230906222513-numnou7.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图10-14 子进程如何继承父进程的打开文件. 初始状态如图10-12所示")])]),t._v(" "),s("h4",{attrs:{id:"i-o重定向"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#i-o重定向"}},[t._v("#")]),t._v(" I/O重定向")]),t._v(" "),s("p",[t._v("Linuxshell 提供了 "),s("strong",[t._v("I/O 重定向操作符, 允许用户将磁盘文件和标准输入输出联系起来")]),t._v(". 例如, 键入")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" foo.txt\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("使得 shell 加载和执行 ls 程序, 将标准输出重定向到磁盘文件 foo.txt. 就如将在 11.5 节中看到的那样, 当一个 Web 服务器代表客户端运行 CGI 程序时, 它就执行一种相似类型的重定向. 那么 I/O 重定向是如何工作的呢? 一种方式是使用 dup2 函数.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<unistd.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 若成功则为非负的描述符, 若出错则为 -1.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dup2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" oldfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" newfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[s("strong",[t._v("dup2 函数复制描述符表表项 oldfd 到描述符表表项 newfd, 覆盖描述符表表项 newfd 以前的内容")]),t._v(". 如果 newfd 已经打开了, dup2 会在复制 oldfd 之前关闭 newfd.")]),t._v(" "),s("p",[t._v("假设在调用 "),s("strong",[t._v("dup2(4,1)")]),t._v("  之前, 我们的状态如图 10-12 所示, 其中描述符 1(标准输出)对应于文件 A(比如一个终端), 描述符 4 对应于文件 B(比如一个磁盘文件). A 和 B 的引用计数都等于 1. 图 10-15 显示了调用 "),s("strong",[t._v("dup2(4,1)")]),t._v("  之后的情况. 两个描述符现在都指向文件 B; 文件 A 已经被关闭了, 并且它的文件表和 v-node 表表项也已经被删除了; 文件 B 的引用计数已经增加了. 从此以后, "),s("strong",[t._v("任何写到标准输出的数据都被重定向到文件 B")]),t._v(".")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230906222656-nwkc3da.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图 10-15 通过调用 dup2(4,1) 重定向标准输出之后的内核数据结构. 初始状态如图 10-12 所示")])]),t._v(" "),s("h4",{attrs:{id:"标准i-o"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标准i-o"}},[t._v("#")]),t._v(" 标准I/O")]),t._v(" "),s("p",[t._v("C 语言定义了一组"),s("strong",[t._v("高级输入输出函数, 称为标准 I/O 库")]),t._v(", 为程序员提供了 Unix I/O 的较高级别的替代. 这个库(libc)提供了打开和关闭文件的函数(fopen 和 fclose), 读和写字节的函数(fread 和 fwrite), 读和写字符串的函数(fgets 和 fputs), 以及复杂的格式化的 I/O 函数(scanf 和 printf).")]),t._v(" "),s("p",[t._v("标准 I/O 库将一个"),s("strong",[t._v("打开的文件模型化为一个流")]),t._v(". 对于程序员而言, 一个流就是一个指向 FILE 类型的结构的指针. 每个 ANSI C 程序开始时都有三个打开的流 "),s("strong",[t._v("stdin, stdout 和 stderr")]),t._v(", 分别对应于标准输入, 标准输出和标准错误:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extern")]),t._v(" FILE "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stdin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Standard input (descriptor 0) */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extern")]),t._v(" FILE "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stdout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Standard output (descriptor 1) */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extern")]),t._v(" FILE "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stderr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Standard error (descriptor 2) */")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("类型为 FILE 的流是对文件描述符和流缓冲区的抽象. 流缓冲区的目的和 RIO 读缓冲区的一样: 就是使开销较高的 Linux I/O 系统调用的数量尽可能得小. 例如, 假设有一个程序, 它反复调用标准 I/O 的 getc 函数, 每次调用返回文件的下一个字符. 当第一次调用 getc 时, 库通过调用一次 read 函数来填充流缓冲区, 然后将缓冲区中的第一个字节返回给应用程序. 只要缓冲区中还有未读的字节, 接下来对 getc 的调用就能直接从流缓冲区得到服务.")]),t._v(" "),s("h4",{attrs:{id:"综合-该使用哪些i-o函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#综合-该使用哪些i-o函数"}},[t._v("#")]),t._v(" 综合:该使用哪些I/O函数?")]),t._v(" "),s("p",[t._v("图 10-16 总结了在这一章里讨论过的各种 I/O 包.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230906222818-lo36v8s.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图10-16 Unix IO, 标准IO和RIO之间的关系")])]),t._v(" "),s("p",[s("strong",[t._v("Unix I/O 模型是在操作系统内核中实现的")]),t._v(". 应用程序可以通过诸如 open, close, lseek, read, write 和 stat 这样的函数来访问 UnixI/O. "),s("strong",[t._v("较高级别的 RIO 和标准 I/O 函数都是基于(使用)Unix I/O 函数来实现的")]),t._v(". RIO 函数是专为本书开发的 read 和 write 的健壮的包装函数. 它们自动处理不足值, 并且为读文本行提供一种高效的带缓冲的方法. 标准 I/O 函数提供了 Unix I/O 函数的一个更加完整的带缓冲的替代品, 包括格式化的 I/O 例程, 如 printf 和 scanf.")]),t._v(" "),s("p",[t._v("在你的程序中该使用这些函数中的哪一个呢? 下面是一些基本的指导原则:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("G1: 只要有可能就使用标准 I/O.")]),t._v("  对磁盘和终端设备 I/O 来说, 标准 I/O 函数是"),s("strong",[t._v("首选方法")]),t._v(". 大多数 C 程序员在其整个职业生涯中只使用标准 I/O, 从不受较低级的 UnixI/O 函数的困扰(可能 stat 除外, 因为在标准 I/O 库中没有与它对应的函数). 只要可能, 建议你也这样做.")]),t._v(" "),s("li",[s("strong",[t._v("G2: 不要使用 scanf 或 rioreadlineb 来读二进制文件.")]),t._v("  像 scanf 或 rio_read-lineb 这样的函数是专门设普来读取文本文件的. 学生通常会犯的一个错误就是用这些函数来读取二进制文件, 这就使得他们的程序出现了诡异莫测的失败. 比如, 二进制文件可能散布着很多 Oxa 字节, 而这些字节又与终止文本行无关.")]),t._v(" "),s("li",[s("strong",[t._v("G3: 对网络套接字的 I/O 使用 RIO 函数.")]),t._v("  不幸的是, 当试着将标准 I/O 用于网络的输入输出时, 出现了一些令人讨厌的问题. 如同将在 11.4 节所见, Linux 对网络的抽象是一种称为套接字的文件类型. 就像所有的 Linux 文件一样, 套接字由文件描述符来引用, 在这种情况下称为套接字描述符. 应用程序进程通过读写套接字描述符来与运行在其他计算机的进程实现通信.")])]),t._v(" "),s("p",[t._v("标准 I/O 流, 从某种意义上而言是"),s("strong",[t._v("全双工")]),t._v("的, 因为程序能够在同一个流上执行输入和输出. 然而, 对流的限制和对套接字的限制, 有时候会互相冲突, 而又极少有文档描述这些现象:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("限制 1: 跟在输出函数之后的输入函数.")]),t._v("  如果中间没有插入对 fflush, fseek, fsetpos 或者 rewind 的调用, 一个输入函数不能跟随在一个输出函数之后. fflush 函数清空与流相关的缓冲区. 后三个函数使用 Unix I/O lseek 函数来重置当前的文件位置.")]),t._v(" "),s("li",[s("strong",[t._v("限制 2: 跟在输入函数之后的输出函数.")]),t._v("  如果中间没有插入对 fseek, fsetpos 或者 rewind 的调用, 一个输出函数不能跟随在一个输入函数之后, 除非该输入函数遇到了一个文件结束.")])]),t._v(" "),s("p",[t._v("这些限制给网络应用带来了一个问题, 因为"),s("strong",[t._v("对套接字使用 lseek 函数是非法的")]),t._v(". 对流 I/O 的第一个限制能够通过采用在每个输入操作前刷新缓冲区这样的规则来满足. 然而, 要满足第二个限制的唯一办法是, 对同一个打开的套接字描述符打开两个流, 一个用来读, 一个用来写:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("FILE "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("fpin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("fpout"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nfpin "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fdopen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sockfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"r"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfpout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fdopen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sockfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"w"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("但是这种方法也有问题, 因为它要求应用程序在两个流上都要调用 fclose, 这样才能释放与每个流相关联的内存资源, 避免内存泄漏:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fclose")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fpin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fclose")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fpout"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("这些操作中的每一个都试图关闭同一个底层的套接字描述符, 所以第二个 close 操作就会失败. 对顺序的程序来说, 这并不是问题, 但是在一个线程化的程序中关闭一个已经关闭了的描述符是会导致灾难的(见 12.7.4 节).")]),t._v(" "),s("p",[t._v("因此, "),s("strong",[t._v("建议在网络套接字上不要使用标准 I/O 函数来进行输入和输出, 而要使用健壮的 RIO 函数")]),t._v(". 如果你需要格式化的输出, 使用 sprintf 函数在内存中格式化一个字符串, 然后用 rio_writen 把它发送到套接口. 如果你需要格式化输入, 使用 rio_readlineb 来读一个完整的文本行, 然后用 sscanf 从文本行提取不同的字段.")]),t._v(" "),s("h4",{attrs:{id:"小结-5"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小结-5"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),s("p",[t._v("Linux 提供了少量的基于 Unix I/O 模型的系统级函数, 它们允许应用程序打开, 关闭, 读和写文件, 提取文件的元数据, 以及执行 I/O 重定向. Linux 的读和写操作会出现不足值, 应用程序必须能正确地预计和处理这种情况. 应用程序不应直接调用 Unix I/O 函数, 而应该使用 RIO 包, RIO 包通过反复执行读写操作, 直到传送完所有的请求数据, 自动处理不足值.")]),t._v(" "),s("p",[s("strong",[t._v("Linux 内核使用三个相关的数据结构来表示打开的文件. 描述符表中的表项指向打开文件表中的表项, 而打开文件表中的表项又指向 v-node 表中的表项. 每个进程都有它自己单独的描述符表, 而所有的进程共享同一个打开文件表和 v-node 表. 理解这些结构的一般组成就能使我们清楚地理解文件共享和 I/O 重定向.")])]),t._v(" "),s("p",[s("strong",[t._v("标准 I/O 库是基于 Unix I/O 实现的")]),t._v(", 并提供了一组强大的高级 I/O 例程. 对于大多数应用程序而言, 标准 I/O 更简单, 是优于 Unix I/O 的选择. 然而, 因为对标准 I/O 和网络文件的一些相互不兼容的限制, Unix I/O 比之标准 I/O 更该适用于网络应用程序.")]),t._v(" "),s("h3",{attrs:{id:"_11-网络编程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-网络编程"}},[t._v("#")]),t._v(" 11.网络编程")]),t._v(" "),s("p",[t._v("网络应用随处可见. 任何时候浏览 Web, 发送 email 信息或是玩在线游戏, 你就正在使用网络应用程序. 有趣的是, "),s("strong",[t._v("所有的网络应用都是基于相同的基本编程模型, 有着相似的整体逻辑结构, 并且依赖相同的编程接口")]),t._v(".")]),t._v(" "),s("p",[t._v("网络应用依赖于很多在系统研究中已经学习过的概念. 例如, 进程, 信号, 字节顺序, 内存映射以及动态内存分配, 都扮演着重要的角色. 还有一些新概念要掌握. 我们需要理解基本的客户端-服务器编程模型, 以及如何编写使用因特网提供的服务的客户端-服务器程序. 最后将把所有这些概念结合起来, 开发一个虽小但功能齐全的 Web 服务器, 能够为真实的 Web 浏览器提供静态和动态的文本和图形内容.")]),t._v(" "),s("h4",{attrs:{id:"客户端-服务器编程模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#客户端-服务器编程模型"}},[t._v("#")]),t._v(" 客户端-服务器编程模型")]),t._v(" "),s("p",[t._v("每个网络应用都是基于"),s("strong",[t._v("客户端-服务器")]),t._v("模型的. 釆用这个模型, 一个应用是由一个服务器进程和一个或者多个"),s("strong",[t._v("客户端")]),t._v("进程组成. 服务器管理某种资源, 并且通过操作这种资源来为它的客户端提供某种服务. 例如, 一个 Web 服务器管理着一组磁盘文件, 它会代表客户端进行检索和执行. 一个 FTP 服务器管理着一组磁盘文件, 它会为客户端进行存储和检索. 相似地, 一个电子邮件服务器管理着一些文件, 它为客户端进行读和更新.")]),t._v(" "),s("p",[t._v("客户端—服务器模型中的基本操作是"),s("strong",[t._v("事务")]),t._v("(transaction)(见图 11-1).")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230906223400-nto1l2i.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图10-1 一个客户端-服务事务")])]),t._v(" "),s("p",[t._v("一个客户端-服务器事务由以下四步组成.")]),t._v(" "),s("ol",[s("li",[t._v("当一个客户端需要服务时, 它向服务器发送一个请求, 发起一个事务. 例如, 当 Web 浏览器需要一个文件时, 它就发送一个请求给 Web 服务器.")]),t._v(" "),s("li",[t._v("服务器收到请求后, 解释它, 并以适当的方式操作它的资源. 例如, 当 Web 服务器收到浏览器发出的请求后, 它就读一个磁盘文件.")]),t._v(" "),s("li",[t._v("服务器给客户端发送一个"),s("strong",[t._v("响应")]),t._v(", 并等待下一个请求. 例如, Web 服务器将文件发送回客户端.")]),t._v(" "),s("li",[t._v("客户端收到响应并处理它. 例如, 当 Web 浏览器收到来自服务器的一页后, 就在屏幕上显示此页.")])]),t._v(" "),s("p",[t._v("认识到客户端和服务器是"),s("strong",[t._v("进程")]),t._v(", 而不是常提到的机器或者"),s("strong",[t._v("主机")]),t._v(", 这是很重要的. 一台主机可以同时运行许多不同的客户端和服务器, 而且一个客户端和服务器的事务可以在同一台或是不同的主机上. 无论客户端和服务器是怎样映射到主机上的, 客户端—服务器模型都是相同的.")]),t._v(" "),s("p",[t._v("客户端-服务器事务不是数据库事务, 没有数据库事务的任何特性, 例如原子性. 在我们的上下文中, 事务仅仅是客户端和服务器执行的一系列歩骤.")]),t._v(" "),s("h4",{attrs:{id:"网络"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#网络"}},[t._v("#")]),t._v(" 网络")]),t._v(" "),s("p",[t._v("客户端和服务器通常运行在不同的主机上, 并且通过"),s("strong",[t._v("计算机网络")]),t._v("的硬件和软件资源来通信. 网络是很复杂的系统, 在这里我们只想了解一点皮毛. 我们的目标是从程序员的角度给你一个切实可行的思维模型.")]),t._v(" "),s("p",[t._v("对主机而言, "),s("strong",[t._v("网络只是又一种 I/O 设备, 是数据源和数据接收方")]),t._v(", 如图 11-2 所示.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230906223511-b8yyk5h.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图11-2 一个网络主机的硬件组成")])]),t._v(" "),s("p",[t._v("一个插到 I/O 总线扩展槽的适配器提供了到网络的"),s("strong",[t._v("物理接口")]),t._v(". 从"),s("mark",[s("strong",[t._v("网络上接收到的数据从适配器经过 I/O 和内存总线复制到内存, 通常是通过 DMA 传送. 相似地, 数据也能从内存复制到网络")])]),t._v(".")]),t._v(" "),s("p",[t._v("物理上而言, 网络是一个按照地理远近组成的层次系统. 最低层是 "),s("strong",[t._v("LAN")]),t._v("(Local Area Network, 局域网), 在一个建筑或者校园范围内. 迄今为止, 最流行的局域网技术是"),s("strong",[t._v("以太网")]),t._v("(Ethernet), 它是由施乐公司帕洛阿尔托研究中心(Xerox PARC)在 20 世纪 70 年代中期提出的. 以太网技术被证明是适应力极强的, 从 3 Mb/s 演变到 10 Gb/s.")]),t._v(" "),s("p",[t._v("一个"),s("strong",[t._v("以太网段")]),t._v("(Ethernet segment)包括一些电缆(通常是双绞线)和一个叫做"),s("strong",[t._v("集线器")]),t._v("的小盒子, 如图 11-3 所示. 以太网段通常跨越一些小的区域, 例如某建筑物的一个房间或者一个楼层. 每根电缆都有相同的最大位带宽, 通常是 100 Mb/s 或者 1 Gb/s.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230906223614-l8ovixc.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图11-3 以太网段")])]),t._v(" "),s("p",[s("strong",[t._v("一端连接到主机的适配器, 而另一端则连接到集线器的一个端口上")]),t._v(". 集线器不加分辨地将从一个端口上收到的每个位复制到其他所有的端口上. 因此, 每台主机都能看到每个位.")]),t._v(" "),s("p",[t._v("每个以太网适配器都有一个全球唯一的 48 位地址, 它存储在这个适配器的非易失性存储器上. 一台主机可以发送一段位(称为"),s("strong",[t._v("帧")]),t._v("(frame))到这个网段内的其他任何主机. 每个帧包括一些固定数量的"),s("strong",[t._v("头部")]),t._v("(header)位, 用来标识此帧的源和目的地址以及此帧的长度, 此后紧随的就是数据位的"),s("strong",[t._v("有效载荷")]),t._v("(payload). 每个主机适配器都能看到这个帧, 但是只有目的主机实际读取它.")]),t._v(" "),s("p",[t._v("使用一些电缆和叫做"),s("strong",[t._v("网桥")]),t._v("(bridge)的小盒子, 多个以太网段可以连接成较大的局域网, 称为"),s("strong",[t._v("桥接以太网")]),t._v("(bridged Ethernet), 如图 11-4 所示. 桥接以太网能够跨越整个建筑物或者校区. 在一个桥接以太网里, 一些电缆连接网桥与网桥, 而另外一些连接网桥和集线器. 这些电缆的带宽可以是不同的. 在我们的示例中, 网桥与网桥之间的电缆有 1 Gb/s 的带宽, 而四根网桥和集线器之间电缆的带宽却是 100 Mb/s.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230906223707-bqk2gbf.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("11-4 桥接以太网")])]),t._v(" "),s("p",[t._v("网桥比集线器更充分地利用了电缆带宽. 利用一种聪明的分配算法, 它们随着时间自动学习哪个主机可以通过哪个端口可达, 然后只在有必要时, 有选择地将帧从一个端口复制到另一个端口. 例如, 如果主机 A 发送一个帧到同网段上的主机 B, 当该帧到达网桥 X 的输入端口时, X 就将丢弃此帧, 因而节省了其他网段上的带宽. 然而, 如果主机 A 发送一个帧到一个不同网段上的主机 C, 那么网桥 X 只会把此帧复制到和网桥 Y 相连的端口上, 网桥 Y 会只把此帧复制到与主机 C 的网段连接的端口.")]),t._v(" "),s("p",[t._v("为了简化局域网的表示, 我们将把集线器和网桥以及连接它们的电缆画成一根水平线, 如图 11-5 所示.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230906223745-yorn11c.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图11-5 局域网的概念图")])]),t._v(" "),s("p",[t._v("在层次的更高级别中, 多个不兼容的局域网可以通过叫做"),s("strong",[t._v("路由器")]),t._v("(router)的特殊计算机连接起来, 组成一个 internet(互联网络). 每台路由器对于它所连接到的每个网络都有一个适配器(端口). 路由器也能连接高速点到点电话连接, 这是称为 WAN(Wide-Area Network, 广域网)的网络示例, 之所以这么叫是因为它们覆盖的地理范围比局域网的大. 一般而言, 路由器可以用来由各种局域网和广域网构建互联网络. 例如, 图 11-6 展示了一个互联网络的示例, 3 台路由器连接了一对局域网和一对广域网.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230906223919-dx8w6ze.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图11-6 一个小型的互联网络. 三台路由器连接起两个局域网和两个广域网")])]),t._v(" "),s("p",[t._v("互联网络至关重要的特性是, 它能由采用完全不同和不兼容技术的各种局域网和广域网组成. 每台主机和其他每台主机都是物理相连的, 但是如何能够让某台源主机跨过所有这些不兼容的网络发送数据位到另一台目的主机呢?")]),t._v(" "),s("p",[t._v("解决办法是一层"),s("strong",[t._v("运行在每台主机和路由器上的协议软件, 它消除了不同网络之间的差异")]),t._v(". 这个软件实现一种协议, 这种协议控制主机和路由器如何协同工作来实现数据传输. 这种协议必须提供两种基本能力:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("命名机制.")]),t._v("  不同的局域网技术有不同和不兼容的方式来为主机分配地址. 互联网络协议通过定义一种一致的主机地址格式消除了这些差异. 每台主机会被分配至少一个这种互联网络地址(internetaddress), 这个地址唯一地标识了这台主机.")]),t._v(" "),s("li",[s("strong",[t._v("传送机制.")]),t._v("  在电缆上编码位和将这些位封装成帧方面, 不同的联网技术有不同的和不兼容的方式. 互联网络协议通过定义一种把数据位捆扎成不连续的片(称为包)的统一方式, 从而消除了这些差异. 一个包是由包头和有效载荷组成的, 其中包头包括包的大小以及源主机和目的主机的地址, 有效载荷包括从源主机发出的数据位.")])]),t._v(" "),s("p",[t._v("图 11-7 展示了主机和路由器如何使用互联网络协议在不兼容的局域网间传送数据的一个示例. 这个互联网络示例由两个局域网通过一台路由器连接而成. 一个客户端运行在主机 A 上, 主机 A 与 LAN1 相连, 它发送一串数据字节到运行在主机 B 上的服务器端, 主机 B 则连接在 LAN2 上.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230906224029-ld8614f.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图 11-7 在互联网络上, 数据是如何从一台主机传送到另一台主机的")]),t._v(" "),s("p",[t._v("(PH: 互联网络包头; FH1: LAN1 的帧头; FH2: LAN2 的帧头)")])]),t._v(" "),s("p",[t._v("这个过程有 8 个基本步骤:")]),t._v(" "),s("ol",[s("li",[t._v("运行在主机 A 上的客户端进行一个"),s("strong",[t._v("系统调用")]),t._v(", 从客户端的"),s("strong",[t._v("虚拟地址空间复制数据到内核缓冲区")]),t._v("中.")]),t._v(" "),s("li",[t._v("主机 A 上的"),s("strong",[t._v("协议软件")]),t._v("通过在数据前附加互联网络包头和 LAN1 帧头, 创建了一个 LAN1 的帧. 互联网络包头寻址到互联网络主机 B. LAN1 帧头寻址到路由器. 然后它传送此帧到适配器. 注意, LAN1 帧的有效载荷是一个互联网络包, 而互联网络包的有效载荷是实际的用户数据. 这种封装是基本的网络互联方法之一.")]),t._v(" "),s("li",[s("strong",[t._v("LAN1 适配器复制该帧到网络")]),t._v("上.")]),t._v(" "),s("li",[t._v("当此帧到达路由器时, 路由器的 LAN1 适配器从电缆上读取它, 并把它"),s("strong",[t._v("传送到协议软件")]),t._v(".")]),t._v(" "),s("li",[t._v("路由器从互联网络包头中提取出目的互联网络地址, 并用它作为路由表的索引, 确定向哪里转发这个包, 在本例中是 LAN2. 路由器剥落旧的 LAN1 的帧头, 加上寻址到主机 B 的新的 LAN2 帧头, 并把得到的帧传送到适配器.")]),t._v(" "),s("li",[t._v("路由器的 LAN2 适配器复制该帧到网络上.")]),t._v(" "),s("li",[t._v("当此帧到达主机 B 时, 它的适配器从电缆上读到此帧, 并将它传送到"),s("strong",[t._v("协议软件")]),t._v(".")]),t._v(" "),s("li",[t._v("最后, 主机 B 上的"),s("strong",[t._v("协议软件剥落包头和帧头")]),t._v(". 当服务器进行一个读取这些数据的系统调用时, "),s("strong",[t._v("协议软件最终将得到的数据复制到服务器的虚拟地址空间")]),t._v(".")])]),t._v(" "),s("p",[t._v("当然, 在这里掩盖了许多很难的问题. 如果不同的网络有不同帧大小的最大值, 该怎么办呢? 路由器如何知道该往哪里转发帧呢? 当网络拓扑变化时, 如何通知路由器? 如果一个包丢失了又会如何呢? 虽然如此, 我们的示例抓住了"),s("mark",[s("strong",[t._v("互联网络思想的精髓, 封装是关键")])]),t._v(".")]),t._v(" "),s("h4",{attrs:{id:"全球ip因特网"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#全球ip因特网"}},[t._v("#")]),t._v(" 全球IP因特网")]),t._v(" "),s("p",[t._v("全球 IP 因特网是最著名和最成功的互联网络实现. 从 1969 年起, 它就以这样或那样的形式存在了. 虽然因特网的内部体系结构复杂而且不断变化, 但是自从 20 世纪 80 年代早期以来, 客户端-服务器应用的组织就一直保持着相当的稳定. 图 11-8 展示了一个因特网客户端—服务器应用程序的基本硬件和软件组织.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230906224226-hdz5vek.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图11-8 一个英特网应用程序的硬件和软件组织")])]),t._v(" "),s("p",[t._v("每台因特网主机都"),s("strong",[t._v("运行实现 TCP/IP 协议")]),t._v("(Transmission Control Protocol / Internet Protocol, 传输控制协议/互联网络协议)的软件, 几乎每个现代计算机系统都支持这个协议. 因特网的客户端和服务器混合使用"),s("strong",[t._v("套接字接口")]),t._v("函数和 Unix I/O 函数来进行通信(将在 11.4 节中介绍套接字接口). "),s("strong",[t._v("通常将套接字函数实现为系统调用, 这些系统调用会陷入内核, 并调用各种内核模式的 TCP/IP 函数")]),t._v(".")]),t._v(" "),s("p",[t._v("TCP/IP 实际是一个"),s("strong",[t._v("协议族")]),t._v(", 其中每一个都提供不同的功能. 例如, IP 协议提供基本的命名方法和递送机制, 这种递送机制能够从一台因特网主机往其他主机发送包, 也叫做"),s("strong",[t._v("数据报")]),t._v("(datagram). IP 机制从某种意义上而言是不可靠的, 因为, 如果数据报在网络中丢失或者重复, 它并不会试图恢复. UDP(Unreliable Datagram Protocol, 不可靠数据报协议)稍微扩展了 IP 协议, 这样一来, 包可以在进程间而不是在主机间传送. TCP 是一个构建在 IP 之上的复杂协议, 提供了进程间可靠的全双工(双向的)连接. 为了简化讨论, 我们将 TCP/IP 看做是一个单独的整体协议. 我们将不讨论它的内部工作, 只讨论 TCP 和 IP 为应用程序提供的某些基本功能. 我们将不讨论 UDP.")]),t._v(" "),s("p",[t._v("从程序员的角度, 可以把因特网看做一个世界范围的主机集合, 满足以下特性:")]),t._v(" "),s("ul",[s("li",[t._v("主机集合被映射为一组 32 位的 "),s("strong",[t._v("IP 地址")]),t._v(".")]),t._v(" "),s("li",[t._v("这组 IP 地址被映射为一组称为"),s("strong",[t._v("因特网域名")]),t._v("(Internet domain name)的标识符.")]),t._v(" "),s("li",[t._v("因特网主机上的进程能够通过"),s("strong",[t._v("连接")]),t._v("(connection)和任何其他因特网主机上的进程通信.")])]),t._v(" "),s("p",[t._v("接下来三节将更详细地讨论这些基本的因特网概念.")]),t._v(" "),s("h5",{attrs:{id:"_1-ip地址"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-ip地址"}},[t._v("#")]),t._v(" 1.IP地址")]),t._v(" "),s("p",[t._v("一个 IP 地址就是一个 32 位无符号整数. 网络程序将 IP 地址存放在如代码 11-9 所示的 "),s("strong",[t._v("IP 地址结构")]),t._v("中.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* IP address structure */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("in_addr")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint32_t")]),t._v(" s_addr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Address in network byte order (big-endian) */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 11-9 IP 地址结构")])]),t._v(" "),s("p",[t._v("把一个标量地址存放在结构中, 是套接字接口早期实现的不幸产物. 为 IP 地址定义一个标量类型应该更有意义, 但是现在更改已经太迟了, 因为已经有大量应用是基于此的.")]),t._v(" "),s("p",[t._v("因为因特网主机可以有不同的主机字节顺序, TCP/IP 为任意整数数据项定义了统一的"),s("strong",[t._v("网络字节顺序")]),t._v("(network byte order)(大端字节顺序), 例如 IP 地址, 它放在包头中跨过网络被携带. 在 IP 地址结构中存放的地址总是以(大端法)网络字节顺序存放的, 即使主机字节顺序(host byte order)是小端法. Unix 提供了下面这样的函数在网络和主机字节顺序间实现转换.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<arpa/inet.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 按照网络字节顺序的值.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint32_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("htonl")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint32_t")]),t._v(" hostlong"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint16_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("htons")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint16_t")]),t._v(" hostshort"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 按照主机字节顺序的值.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint32_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ntohl")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint32_t")]),t._v(" netlong"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint16_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ntohs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("unit16_t")]),t._v(" netshort"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("p",[t._v("hotnl 函数将 32 位整数由"),s("strong",[t._v("主机字节顺序转换为网络字节顺序")]),t._v(". ntohl 函数将 32 位整数从网络字节顺序转换为主机字节. htons 和 ntohs 函数为 16 位无符号整数执行相应的转换. 注意, 没有对应的处理 64 位值的函数.")]),t._v(" "),s("p",[t._v("IP 地址通常是以一种称为"),s("strong",[t._v("点分十进制表示法")]),t._v("来表示的, 这里, 每个字节由它的十进制值表示, 并且用句点和其他字节间分开. 例如, 128.2.194.242 就是地址 0x8002c2f2 的点分十进制表示. 在 Linux 系统上, 你能够使用 HOSTNAME 命令来确定你自己主机的点分十进制地址:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" hostname "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("i\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("128.2")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".210")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".175")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("应用程序使用 inet_pton 和 inet_ntop 函数来实现 IP 地址和点分十进制串之间的转换.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<arpa/inet.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 若成功则为 1, 若 src 为非法点分十进制地址则为 0, 若出错则为 -1.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("inet_pton")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("AF_INET"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("src"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dst"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 若成功则指向点分十进制字符串的指针, 若出错则为 NULL.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("inet_ntop")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("AF_INET"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("src"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dst"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("socklen_t")]),t._v(" size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("p",[t._v('在这些函数名中, "n" 代表网络, "p" 代表表示. 它们可以处理 32 位 IPv4 地址(AF_INET)(就像这里展示的那样), 或者 128 位 IPv6 地址(AF_INET6)(这部分我们不讲).')]),t._v(" "),s("p",[t._v("inet_pton 函数将一个点分十进制串(src)转换为一个二进制的网络字节顺序的 IP 地址(dst). 如果 src 没有指向一个合法的点分十进制字符串, 那么该函数就返回 0. 任何其他错误会返回 -1, 并设置 errno. 相似地, inet_ntop 函数将一个二进制的网络字节顺序的 IP 地址(src)转换为它所对应的点分十进制表示, 并把得到的以 null 结尾的字符串的最多 size 个字节复制到 dst.")]),t._v(" "),s("h5",{attrs:{id:"_2-因特网域名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-因特网域名"}},[t._v("#")]),t._v(" 2.因特网域名")]),t._v(" "),s("p",[t._v("因特网客户端和服务器互相通信时使用的是 IP 地址. 然而, 对于人们而言, 大整数是很难记住的, 所以因特网也定义了一组更加人性化的"),s("strong",[t._v("域名")]),t._v("(domain name), 以及一种将域名映射到 IP 地址的机制. 域名是一串用句点分隔的单词(字母, 数字和破折号), 例如 "),s("strong",[t._v("whaleshark.ics.cs.emu.edu")]),t._v(".")]),t._v(" "),s("p",[t._v("域名集合形成了一个层次结构, 每个域名编码了它在这个层次中的位置. 通过一个示例你将很容易理解这点. 图 11-10 展示了域名层次结构的一部分.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230906224630-hpbujpa.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图11-10 因特网域名层次结构的一部分")])]),t._v(" "),s("p",[t._v("层次结构可以表示为一棵树. 树的节点表示域名, 反向到根的路径形成了域名. 子树称为"),s("strong",[t._v("子域")]),t._v("(subdomain). 层次结构中的第一层是一个未命名的根节点. 下一层是一组"),s("strong",[t._v("一级域名")]),t._v("(first-level domain name), 由非营利组织 ICANN(Internet Corporation for Assigned Namesand Numbers, 因特网分配名字数字协会)定义. 常见的第一层域名包括 com, edu, gov, org 和 net.")]),t._v(" "),s("p",[t._v("下一层是"),s("strong",[t._v("二级")]),t._v("(second-level)域名, 例如 "),s("strong",[t._v("cmu.edu")]),t._v(", 这些域名是由 ICANN 的各个授权代理按照先到先服务的基础分配的. 一旦一个组织得到了一个二级域名, 那么它就可以在这个子域中创建任何新的域名了, 例如 "),s("strong",[t._v("cs.cmu.edu")]),t._v(".")]),t._v(" "),s("p",[t._v("因特网定义了域名集合和 IP 地址集合之间的映射. 直到 1988 年, 这个映射都是通过一个叫做 "),s("strong",[t._v("HOSTS.TXT")]),t._v(" 的"),s("strong",[t._v("文本文件")]),t._v("来手工维护的. 从那以后, 这个映射是通过分布世界范围内的数据库(称为 "),s("strong",[t._v("DNS")]),t._v("(Domain Name System, 域名系统))来维护的. 从概念上而言, DNS 数据库由上百万的"),s("strong",[t._v("主机条目结构")]),t._v("(host entry structure)组成, 其中每条定义了一组域名和一组 IP 地址之间的映射. 从数学意义上讲, 可以认为每条主机条目就是一个域名和 IP 地址的等价类. 可以用 Linux 的 "),s("mark",[s("strong",[t._v("NSLOOKUP")])]),t._v(" 程序来探究 DNS 映射的一些属性, 这个程序能展示与某个 IP 地址对应的域名.")]),t._v(" "),s("p",[t._v("每台因特网主机都有本地定义的域名 localhost, 这个域名总是映射为"),s("strong",[t._v("回送地址")]),t._v("(loopback address)127.0.0.1:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" nslookup localhost\nAddress"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".0")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".1")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("localhost 字为引用运行在同一台机器上的客户端和服务器提供了一种便利和可移植的方式, 这对调试相当有用. 可以使用 "),s("strong",[t._v("HOSTNAME")]),t._v(" 来确定本地主机的实际域名:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" hostname\nwhaleshark"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ics"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cmu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("edu\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("在最简单的情况中, "),s("strong",[t._v("一个域名和一个 IP 地址之间是一一映射")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" nslookup whaleshark"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ics"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cmu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("edu\nAddress"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("128.2")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".210")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".175")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("然而, 在某些情况下, "),s("strong",[t._v("多个域名可以映射为同一个 IP 地址")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" nslookup cs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("edu\nAddress"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("18.62")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".1")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".6")]),t._v("\n\nlinux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" nslookup eecs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("edu\nAddress"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("18.62")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".1")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".6")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("在最通常的情况下, "),s("strong",[t._v("多个域名可以映射到同一组的多个 IP 地址")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" nslookup www"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("twitter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com\nAddress"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("199.16")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".156")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".6")]),t._v("\nAddress"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("199.16")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".156")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".70")]),t._v("\nAddress"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("199.16")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".156")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".102")]),t._v("\nAddress"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("199.16")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".156")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".230")]),t._v("\n\nlinux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" nslookup twitter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com\nAddress"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("199.16")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".156")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".102")]),t._v("\nAddress"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("199.16")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".156")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".230")]),t._v("\nAddress"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("199.16")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".156")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".6")]),t._v("\nAddress"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("199.16")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".156")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".70")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])]),s("p",[t._v("最后, 我们注意到"),s("strong",[t._v("某些合法的域名没有映射到任何 IP 地址")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" nslookup edu\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" Can’t find edu"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" No answer\n\nlinux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" nslookup ics"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cmu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("edu\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" Can’t find ics"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cmu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("edu"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" No answer\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("h5",{attrs:{id:"_3-因特网连接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-因特网连接"}},[t._v("#")]),t._v(" 3.因特网连接")]),t._v(" "),s("p",[t._v("因特网客户端和服务器通过在"),s("strong",[t._v("连接上发送和接收字节流")]),t._v("来通信. 从连接一对进程的意义上而言, 连接是点对点的. 从数据可以同时双向流动的角度来说, 它是全双工的. 并且从(除了一些如粗心的耕锄机操作员切断了电缆引起灾难性的失败以外)由源进程发出的字节流最终被目的进程以它发出的顺序收到它的角度来说, 它也是可靠的.")]),t._v(" "),s("p",[s("strong",[t._v("一个套接字是连接的一个端点. 每个套接字都有相应的套接字地址")]),t._v(", 是由一个因特网地址和一个 16 位的整数"),s("strong",[t._v("端口")]),t._v('组成的, 用 "地址: 端口" 来表示.')]),t._v(" "),s("p",[t._v("当客户端发起一个连接请求时, 客户端套接字地址中的端口是由内核自动分配的, 称为"),s("strong",[t._v("临时端口")]),t._v("(ephemeral port).然而, 服务器套接字地址中的端口通常是某个"),s("strong",[t._v("知名端口")]),t._v(", 是和这个服务相对应的. 例如, Web 服务器通常使用端口 80, 而电子邮件服务器使用端口 25. 每个具有知名端口的服务都有一个对应的知名的服务名. 例如, Web 服务的知名名字是 http, email 的知名名字是 smtp. 文件  "),s("strong",[t._v("/etc/services")]),t._v(" 包含一张这台机器提供的知名名字和知名端口之间的映射.")]),t._v(" "),s("p",[s("strong",[t._v("一个连接是由它两端的套接字地址唯一确定的")]),t._v(". 这对套接字地址叫做"),s("strong",[t._v("套接字对")]),t._v("(socket pair), 由下列元组来表示:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cliaddr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("cliport"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" servaddr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("servport"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("其中 cliaddr 是客户端的 IP 地址, cliport 是客户端的端口, servaddr 是服务器的 IP 地址, 而 servport 是服务器的端口. 例如, 图 11-11 展示了一个 Web 客户端和一个 Web 服务器之间的连接.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230906225101-hcsjv4p.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图11-11 因特网连接分析")])]),t._v(" "),s("p",[t._v("在这个示例中, Web 客户端的套接字地址是")]),t._v(" "),s("p",[s("strong",[t._v("128.2.194.242:51213")])]),t._v(" "),s("p",[t._v("其中端口号 51213 是内核分配的临时端口号. Web 服务器的套接字地址是")]),t._v(" "),s("p",[s("strong",[t._v("208.216.181.15:80")])]),t._v(" "),s("p",[t._v("其中端口号 80 是和 Web 服务相关联的知名端口号. 给定这些客户端和服务器套接字地址, 客户端和服务器之间的连接就由下列套接字对唯一确定了:")]),t._v(" "),s("p",[t._v("("),s("strong",[t._v("128.2.194.242:51213, 208.216.181.15:80")]),t._v(")")]),t._v(" "),s("h4",{attrs:{id:"套接字接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#套接字接口"}},[t._v("#")]),t._v(" 套接字接口")]),t._v(" "),s("p",[s("strong",[t._v("套接字接口")]),t._v("(socket interface)是"),s("strong",[t._v("一组函数")]),t._v(", 它们和 Unix I/O 函数结合起来, 用以"),s("strong",[t._v("创建网络应用")]),t._v(". 大多数现代系统上都实现套接字接口, 包括所有的 Unix 变种, Windows 和 Macintosh 系统. 图 11-12 给岀了一个典型的客户端—服务器事务的上下文中的套接字接口概述. 当讨论各个函数时, 可以使用这张图来作为向导图.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230906225338-8r797a5.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图11-12 基于套接字接口的网络应用概述")])]),t._v(" "),s("h5",{attrs:{id:"_1-套接字地址结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-套接字地址结构"}},[t._v("#")]),t._v(" 1.套接字地址结构")]),t._v(" "),s("p",[t._v("从 Linux 内核的角度来看, "),s("strong",[t._v("一个套接字就是通信的一个端点")]),t._v(". 从 Linux 程序的角度来看, "),s("strong",[t._v("套接字就是一个有相应描述符的打开文件")]),t._v(".")]),t._v(" "),s("p",[t._v("因特网的套接字地址存放在如代码 11-13 所示的"),s("strong",[t._v("类型为 sockaddr_in 的 16 字节结构")]),t._v("中. 对于因特网应用, sin_family 成员是 AF_INET, sin_port 成员是一个 16 位的端口号, 而 sin_addr 成员就是一个 32 位的 IP 地址. IP 地址和端口号总是以网络字节顺序(大端法)存放的.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* IP socket address structure */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sockaddr_in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint16_t")]),t._v("       sin_family"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Protocol family (always AF_INET) */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint16_t")]),t._v("       sin_port"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Port number in network byte order */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("in_addr")]),t._v(" sin_addr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* IP address in network byte order */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v("  sin_zero"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Pad to sizeof(struct sockaddr) */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Generic socket address structure (for connect, bind, and accept) */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sockaddr")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint16_t")]),t._v("  sa_family"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Protocol family */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v("      sa_data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("14")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Address data */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 11-13 套接字地址结构")])]),t._v(" "),s("p",[s("strong",[t._v("connect, bind 和 accept 函数要求一个指向与协议相关的套接字地址结构的指针")]),t._v(". 套接字接口的设计者面临的问题是, 如何定义这些函数, 使之能接受各种类型的套接字地址结构. 今天可以使用通用的 "),s("strong",[t._v("void")]),t._v(" 指针, 但是那时在 C 中并不存在这种类型的指针. 解决办法是"),s("strong",[t._v("定义套接字函数要求一个指向通用 sockaddr 结构(图 11-13)的指针, 然后要求应用程序将与协议特定的结构的指针强制转换成这个通用结构")]),t._v(". 为了简化代码示例, 我们跟随 Steven 的指导, 定义下面的类型:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sockaddr")]),t._v(" SA"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("然后无论何时需要将 sockaddr_in 结构强制转换成通用 sockaddr 结构时, 我们都使用这个类型.")]),t._v(" "),s("h5",{attrs:{id:"_2-socket函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-socket函数"}},[t._v("#")]),t._v(" 2.socket函数")]),t._v(" "),s("p",[t._v("客户端和服务器"),s("strong",[t._v("使用 socket 函数")]),t._v("来创建一个"),s("strong",[t._v("套接字描述符")]),t._v("(socket descriptor).")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/types.h>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/socket.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 若成功则为非负描述符, 若出错则为 -1.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("socket")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" domain"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" protocol"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("如果想要使套接字成为"),s("strong",[t._v("连接的一个端点")]),t._v(", 就用如下硬编码的参数来调用 socket 函数:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("clientfd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Socket")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("AF_INET"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" SOCK_STREAM"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("其中, AF_INET 表明正在使用 32 位 IP 地址, 而 SOCK_STREAM 表示这个套接字是"),s("strong",[t._v("连接的一个端点")]),t._v(". 不过最好的方法是用 getaddrinfo 函数(11.4.7 节)来自动生成这些参数, 这样代码就与协议无关了. 我们会在 11.4.8 节中向你展示如何配合 socket 函数来使用 getaddrinfo.")]),t._v(" "),s("p",[t._v("socket 返回的 clientfd 描述符仅是部分打开的, 还不能用于读写. 如何完成打开套接字的工作, 取决于我们是客户端还是服务器. 下一节描述当我们是客户端时如何完成打开套接字的工作.")]),t._v(" "),s("h5",{attrs:{id:"_3-connect函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-connect函数"}},[t._v("#")]),t._v(" 3.connect函数")]),t._v(" "),s("p",[t._v("客户端通过"),s("strong",[t._v("调用 connect 函数来建立和服务器的连接")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/socket.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 若成功则为 0, 若出错则为 -1.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("connect")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" clientfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sockaddr")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("addr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("socklen_t")]),t._v(" addrlen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[s("strong",[t._v("connect 函数试图与套接字地址为 addr 的服务器建立一个因特网连接")]),t._v(", 其中 addrlen 是 "),s("strong",[t._v("sizeof(sockaddr_in)")]),t._v(" . connect 函数会"),s("strong",[t._v("阻塞")]),t._v(", 一直到连接成功建立或是发生错误. 如果成功, clientfd 描述符现在就准备好"),s("strong",[t._v("可以读写")]),t._v("了, 并且得到的连接是由套接字对")]),t._v(" "),s("p",[t._v("("),s("strong",[t._v("x:y, addr.sin_addr:addr.sin_port")]),t._v(")")]),t._v(" "),s("p",[t._v("刻画的, 其中 x 表示客户端的 IP 地址, 而 y 表示临时端口, 它唯一地确定了客户端主机上的客户端进程. 对于 socket, 最好的方法是用 getaddrinfo 来为 connect 提供参数(见 11.4.8 节).")]),t._v(" "),s("h5",{attrs:{id:"_4-bind函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-bind函数"}},[t._v("#")]),t._v(" 4.bind函数")]),t._v(" "),s("p",[t._v("剩下的套接字函数--bind, listen 和 accept, "),s("strong",[t._v("服务器用它们来和客户端建立连接")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/socket.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 若成功则为 0, 若出错则为 -1.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bind")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sockfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sockaddr")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("addr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("socklen_t")]),t._v(" addrlen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("bind 函数告诉内核将 addr 中的服务器套接字地址和套接字描述符 sockfd 联系起来. 参数 addrlen 就是 "),s("strong",[t._v("sizeof(sockaddr_in)")]),t._v(" . 对于 socket 和 connect, 最好的方法是用 getaddrinfo 来为 bind 提供参数(见 11.4.8 节).")]),t._v(" "),s("h5",{attrs:{id:"_5-listen函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-listen函数"}},[t._v("#")]),t._v(" 5.listen函数")]),t._v(" "),s("p",[t._v("客户端是发起连接请求的主动实体. 服务器是等待来自客户端的连接请求的被动实体. 默认情况下, 内核会认为 socket 函数创建的描述符对应于"),s("strong",[t._v("主动套接字")]),t._v("(active socket), 它存在于一个连接的客户端. "),s("strong",[t._v("服务器调用 listen 函数告诉内核, 描述符是被服务器而不是客户端使用的")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/socket.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 若成功则为 0, 若出错则为 -1.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("listen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sockfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" backlog"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("listen 函数将 sockfd 从一个主动套接字转化为一个"),s("strong",[t._v("监听套接字")]),t._v("(listening socket), 该套接字"),s("strong",[t._v("可以接受来自客户端的连接请求")]),t._v(". backlog 参数暗示了内核"),s("strong",[t._v("在开始拒绝连接请求之前, 队列中要排队的未完成的连接请求的数量")]),t._v(". backlog 参数的确切含义要求对 TCP/IP 协议的理解, 这超出了讨论的范围. 通常我们会把它设置为一个较大的值, 比如 1024.")]),t._v(" "),s("h5",{attrs:{id:"_6-accept函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-accept函数"}},[t._v("#")]),t._v(" 6.accept函数")]),t._v(" "),s("p",[t._v("服务器通过"),s("strong",[t._v("调用 accept 函数来等待来自客户端的连接请求")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/socket.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 若成功则为非负连接描述符, 若出错则为 -1.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("accept")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" listenfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sockaddr")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("addr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("addrlen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("accept 函数等待来自客户端的连接请求到达侦听描述符 listenfd, 然后在 addr 中填写客户端的套接字地址, 并返回一个"),s("strong",[t._v("已连接描述符")]),t._v("(connected descriptor), 这个"),s("strong",[t._v("描述符可被用来利用 Unix I/O 函数与客户端通信")]),t._v(".")]),t._v(" "),s("p",[t._v("监听描述符和已连接描述符之间的区别使很多人感到迷惑. "),s("strong",[t._v("监听描述符是作为客户端连接请求的一个端点. 它通常被创建一次, 并存在于服务器的整个生命周期. 已连接描述符是客户端和服务器之间已经建立起来了的连接的一个端点. 服务器每次接受连接请求时都会创建一次, 它只存在于服务器为一个客户端服务的过程中")]),t._v(".")]),t._v(" "),s("p",[t._v("图 11-14 描绘了监听描述符和已连接描述符的角色.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230907203514-udxa1zv.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图11-14 监听描述符和已连接描述符的角色")])]),t._v(" "),s("p",[t._v("在第一步中, "),s("strong",[t._v("服务器调用 accept, 等待连接请求到达监听描述符")]),t._v(", 具体地我们设定为描述符 3. 回忆一下, 描述符 0 ~ 2 是预留给了标准文件的.")]),t._v(" "),s("p",[t._v("在第二步中, "),s("strong",[t._v("客户端调用 connect 函数, 发送一个连接请求到 listenfd")]),t._v(". 第三步, accept 函数打开了一个新的"),s("strong",[t._v("已连接描述符")]),t._v(" connfd(假设是描述符 4), 在 clientfd 和 connfd 之间建立连接, 并且"),s("strong",[t._v("随后返回 connfd 给应用程序")]),t._v(". 客户端也从 connect 返回, 在这一点以后, "),s("strong",[t._v("客户端和服务器就可以分别通过读和写 clientfd 和 connfd 来回传送数据")]),t._v("了.")]),t._v(" "),s("blockquote",[s("p",[t._v("旁注: 为何要有监听描述符和已连接描述符之间的区别?")])]),t._v(" "),s("p",[t._v("你可能很想知道为什么套接字接口要区别监听描述符和已连接描述符. 乍一看, 这像是不必要的复杂化. 然而, 区分这两者被证明是很有用的, 因为它使得我们可以"),s("strong",[t._v("建立并发服务器")]),t._v(", 它能够同时处理许多客户端连接. 例如, 每次一个连接请求到达监听描述符时, 我们可以派生(fork)—个新的进程, 它通过已连接描述符与客户端通信. 在第 12 章中将介绍更多关于并发服务器的内容.")]),t._v(" "),s("h5",{attrs:{id:"_7-主机和服务的转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-主机和服务的转换"}},[t._v("#")]),t._v(" 7.主机和服务的转换")]),t._v(" "),s("p",[t._v("Linux 提供了一些强大的函数(称为 getaddrinfo 和 getnameinfo)"),s("strong",[t._v("实现二进制套接字地址结构和主机名, 主机地址, 服务名和端口号的字符串表示之间的相互转化")]),t._v(". 当和套接字接口一起使用时, 这些函数能使我们编写独立于任何特定版本的 IP 协议的网络程序.")]),t._v(" "),s("h6",{attrs:{id:"_1-getaddrinfo函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-getaddrinfo函数"}},[t._v("#")]),t._v(" (1)getaddrinfo函数")]),t._v(" "),s("p",[s("strong",[t._v("getaddrinfo 函数将主机名, 主机地址, 服务名和端口号的字符串表示转化成套接字地址结构")]),t._v(". 它是已弃用的 gethostbyname 和 getservbyname 函数的新的替代品. 和以前的那些函数不同, 这个函数是可重入的(见 12.7.2 节), 适用于任何协议.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/types.h>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/socket.h>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<netdb.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 如果成功则为 0, 如果错误则为非零的错误代码.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getaddrinfo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("host"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("service"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("addrinfo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("hints"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("addrinfo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 无.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("freeaddrinfo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("addrinfo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 错误消息.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("gai_strerror")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" errcode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br")])]),s("p",[t._v("给定 host 和 service(套接字地址的两个组成部分), getaddrinfo 返回 result, result 一个指向 addrinfo 结构的链表, 其中每个结构指向一个对应于 host 和 service 的套接字地址结构(图 11-15).")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230907203756-6hty5i0.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图11-15 getaddrinfo返回的数据结构")])]),t._v(" "),s("p",[t._v("在客户端调用了 getaddrinfo 之后, 会遍历这个列表, "),s("strong",[t._v("依次尝试每个套接字地址, 直到调用 socket 和 connect 成功, 建立起连接")]),t._v(". 类似地, 服务器会尝试遍历列表中的每个套接字地址, 直到调用 socket 和 bind 成功, 描述符会被绑定到一个合法的套接字地址. 为了避免内存泄漏, 应用程序必须在最后调用 freeaddrinfo, 释放该链表. 如果 getaddrinfo 返回非零的错误代码, 应用程序可以调用 gai_streeror, 将该代码转换成消息字符串.")]),t._v(" "),s("p",[t._v("getaddrinfo 的 host 参数可以是域名, 也可以是数字地址(如点分十进制 IP 地址). service 参数可以是服务名(如 http), 也可以是十进制端口号. 如果不想把主机名转换成地址, 可以把 host 设置为 NULL. 对 service 来说也是一样. 但是必须指定两者中至少一个.")]),t._v(" "),s("p",[t._v("可选的参数 hints 是一个 addrinfo 结构(见代码 11-16), 它提供对 getaddrinfo 返回的套接字地址列表的更好的控制.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("addrinfo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v("             ai_flags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Hints argument flags */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v("             ai_family"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* First arg to socket function */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v("             ai_socktype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Second arg to socket function */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v("             ai_protocol"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Third arg to socket function */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v("            "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ai_canonname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Canonical hostname */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v("          ai_addrlen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Size of ai_addr struct */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sockaddr")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ai_addr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Ptr to socket address structure */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("addrinfo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ai_next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Ptr to next item in linked list */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 11-16 getaddrinfo 使用的 addrinfo 结构")])]),t._v(" "),s("p",[t._v("如果要传递 hints 参数, 只能设置下列字段: ai_family, ai_socktype, ai_protocol 和 ai_flags 字段. 其他字段必须设置为 0(或 NULL). 实际中, 我们用 memset 将整个结而清零, 然后有选择地设置一些字段:")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("getaddrinfo 默认可以返回 IPv4 和 IPv6 套接字地址. ai_family 设置为 AF_INET 会将列表限制为 IPv4 地址; 设置为 AF_INET6 则限制为 IPv6 地址.")])]),t._v(" "),s("li",[s("p",[t._v("对于 host 关联的每个地址, getaddrinfo 函数默认最多返回三个 addrinfo 结构, 每个的 ai_socktype 字段不同: 一个是连接, 一个是数据报(本书未讲述), 一个是原始套接字(本书未讲述). ai_socktype 设置为 SOCK_STREAM 将列表限制为对每个地址最多一个 addrinfo 结构, 该结构的套接字地址可以作为连接的一个端点. 这是所有示例程序所期望的行为.")])]),t._v(" "),s("li",[s("p",[t._v("ai_flags 字段是一个位掩码, 可以进一步修改默认行为. 可以把各种值用 OR 组合起来得到该掩码. 下面是一些有用的值:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("AIADDRCONFIG.")]),t._v("  如果在使用连接, 就推荐使用这个标志【34】. 它要求只有当本地主机被配置为 IPv4 时, getaddrinfo 返回 IPv4 地址. 对 IPv6 也是类似.")]),t._v(" "),s("li",[s("strong",[t._v("AICANONNAME.")]),t._v("  ai_canonname 字段默认为 NULL. 如果设置了该标志, 就是告诉 getaddrinfo 将列表中第一个 addrinfo 结构的 ai_canonname 字段指向 host 的权威(官方)名字(见代码 11-15).")]),t._v(" "),s("li",[s("strong",[t._v("AINUMERICSERV.")]),t._v("  参数 service 默认可以是服务名或端口号. 这个标志强制参数 service 为端口号.")]),t._v(" "),s("li",[s("strong",[t._v("AIPASSIVE.")]),t._v("  getaddrinfo 默认返回套接字地址, 客户端可以在调用 connect 时用作主动套接字. 这个标志告诉该函数, 返回的套接字地址可能被服务器用作监听套接字. 在这种情况中, 参数 host 应该为 NULL. 得到的套接字地址结构中的地址字段会是通配符地址(wildcard address), 告诉内核这个服务器会接受发送到该主机所有 IP 地址的请求. 这是所有示例服务器所期望的行为.")])])])]),t._v(" "),s("p",[t._v("当 getaddrinfo 创建输出列表中的 addrinfo 结构时, 会填写每个字段, 除了 ai_flags. ai_addr 字段指向一个套接字地址结构, ai_addrlen 字段给出这个套接字地址结构的大小, 而 ai_next 字段指向列表中下一个 addrinfo 结构. 其他字段描述这个套接字地址的各种属性.")]),t._v(" "),s("p",[t._v("getaddrinfo 一个很好的方面是 addrinfo 结构中的字段是不透明的, 即它们可以直接传递给套接字接口中的函数, 应用程序代码无需再做任何处理. 例如, ai_family, ai_socktype 和 ai_protocol 可以直接传递给 socket. 类似地, ai_addr 和 ai_addrlen 可以直接传递给 connect 和 bind. 这个强大的属性使得我们编写的客户端和服务器能够独立于某个特殊版本的 IP 协议.")]),t._v(" "),s("h6",{attrs:{id:"_2-getnameinfo函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-getnameinfo函数"}},[t._v("#")]),t._v(" (2)getnameinfo函数")]),t._v(" "),s("p",[s("strong",[t._v("getnameinfo 函数和 getaddrinfo 是相反的, 将一个套接字地址结构转换成相应的主机和服务名字符串")]),t._v(". 它是已弃用的 gethostbyaddr 和 getservbyport 函数的新的替代品, 和以前的那些函数不同, 它是可重入和与协议无关的.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/socket.h>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<netdb.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 如果成功则为 0, 如果错误则为非零的错误代码.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getnameinfo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sockaddr")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("sa"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("socklen_t")]),t._v(" salen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("host"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" hostlen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("service"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" servlen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" flags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[t._v("参数 sa 指向大小为 salen 字节的套接字地址结构, host 指向大小为 hostlen 字节的缓冲区, service 指向大小为 servlen 字节的缓冲区. getnameinfo 函数将套接字地址结构 sa 转换成对应的主机和服务名字符串, 并将它们复制到 host 和 serveice 缓冲区. 如果 getnameinfo 返回非零的错误代码, 应用程序可以调用 gai_strerror 把它转化成字符串.")]),t._v(" "),s("p",[t._v("如果不想要主机名, 可以把 host 设置为 NULL, hostlen 设置为 0. 对服务字段来说也是一样. 不过, 两者必须设置其中之一.")]),t._v(" "),s("p",[t._v("参数 flags 是一个位掩码, 能够修改默认的行为. 可以把各种值用 OR 组合起来得到该掩码. 下面是两个有用的值:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("NINUMERICHOST.")]),t._v("  getnameinfo 默认试图返回 host 中的域名. 设置该标志会使该函数返回一个数字地址字符串.")]),t._v(" "),s("li",[s("strong",[t._v("NINUMERICSERV.")]),t._v("  getnameinfo 默认会检查  "),s("strong",[t._v("/etc/services")]),t._v(", 如果可能, 会返回服务名而不是端口号. 设置该标志会使该函数跳过査找, 简单地返回端口号.")])]),t._v(" "),s("p",[t._v("代码 11-17 给出了一个简单的程序, 称为 HOSTINFO, 它使用 getaddrinfo 和 getnameinfo 展示出域名到和它相关联的 IP 地址之间的映射. 该程序类似于 11.3.2 节中的 NSLOOKUP 程序.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"csapp.h"')])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" argc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("addrinfo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("listp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" hints"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MAXLINE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" rc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" flags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("argc "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stderr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"usage: %s <domain name>\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Get a list of addrinfo records */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("memset")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("hints"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("addrinfo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    hints"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ai_family "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" AF_INET"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* IPv4 only */")]),t._v("\n    hints"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ai_socktype "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" SOCK_STREAM"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Connections only */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rc "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getaddrinfo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("hints"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("listp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stderr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"getaddrinfo error: %s\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("gai_strerror")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Walk the list and display each IP address */")]),t._v("\n    flags "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NI_NUMERICHOST"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Display address string instead of domain name */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" listp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ai_next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Getnameinfo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ai_addr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ai_addrlen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" MAXLINE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" flags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Clean up */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Freeaddrinfo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("listp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 11-17 HOSTINFO 展示出域名到和它相关联的 IP 地址之间的映射")])]),t._v(" "),s("p",[t._v("首先, 初始化 hints 结构, 使 getaddrinfo 返回我们想要的地址. 在这里, 我们想查找 32 位的 IP 地址(第 16 行), 用作连接的端点(第 17 行). 因为只想 getaddrinfo 转换域名, 所以用 service 参数为 NULL 来调用它.")]),t._v(" "),s("p",[t._v("调用 getaddrinfo 之后, "),s("strong",[t._v("会遍历 addrinfo 结构, 用 getnameinfo 将每个套接字地址转换成点分十进制地址字符串")]),t._v(". 遍历完列表之后, 我们调用 freeaddrinf. 小心地释放这个列表(虽然对于这个简单的程序来说, 并不是严格需要这样做的).")]),t._v(" "),s("p",[t._v("运行 HOSTINFO 时, 可以看到 twitter.com 映射到了四个 IP 地址, 和 11.3.2 节用 NSLOOKUP 的结果一样.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("hostinfo twitter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("199.16")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".156")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".102")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("199.16")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".156")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".230")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("199.16")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".156")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".6")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("199.16")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".156")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".70")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("h5",{attrs:{id:"_8-套接字接口的辅助函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-套接字接口的辅助函数"}},[t._v("#")]),t._v(" 8.套接字接口的辅助函数")]),t._v(" "),s("p",[t._v("初学时, getnameinfo 函数和套接字接口看上去有些可怕. 用"),s("strong",[t._v("高级的辅助函数")]),t._v("包装一下会方便很多, 称为 "),s("strong",[t._v("open_clientfd")]),t._v(" 和 "),s("strong",[t._v("open_listenfd")]),t._v(", 客户端和服务器互相通信时可以使用这些函数.")]),t._v(" "),s("h6",{attrs:{id:"_1-open-clientfd函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-open-clientfd函数"}},[t._v("#")]),t._v(" (1)open_clientfd函数")]),t._v(" "),s("p",[s("strong",[t._v("客户端调用 open_clientfd 建立与服务器的连接")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"csapp.h"')])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 若成功则为描述符, 若出错则为 -1.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("open_clientfd")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("hostname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("port"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("open_clientfd 函数建立与服务器的连接, 该服务器运行在主机 hostname 上, 并在端口号 port 上监听连接请求. 它返回一个打开的套接字描述符, 该描述符准备好了, 可以用 Unix I/O 函数做输入和输出. 代码 11-18 给出了 open_clientfd 的代码.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("open_clientfd")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("hostname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("port"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" clientfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("addrinfo")]),t._v(" hints"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("listp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Get a list of potential server addresses */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("memset")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("hints"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("addrinfo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    hints"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ai_socktype "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" SOCK_STREAM"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Open a connection */")]),t._v("\n    hints"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ai_flags "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" AI_NUMERICSERV"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* ... using a numeric port arg. */")]),t._v("\n    hints"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ai_flags "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|=")]),t._v(" AI_ADDRCONFIG"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Recommended for connections */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Getaddrinfo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hostname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" port"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("hints"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("listp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Walk the list for one that we can successfully connect to */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" listp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ai_next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Create a socket descriptor */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("clientfd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("socket")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ai_family"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ai_socktype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ai_protocol"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Socket failed, try the next */")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Connect to the server */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("connect")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("clientfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ai_addr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ai_addrlen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Success */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Close")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("clientfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Connect failed, try another */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Clean up */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Freeaddrinfo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("listp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* All connects failed */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* The last connect succeeded */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" clientfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 11-18 open_clientfd: 和服务器建立连接的辅助函数. 它是可重入和与协议无关的")])]),t._v(" "),s("p",[t._v("我们调用 getaddrinfo, 它返回 addrinf. "),s("strong",[t._v("结构的列表, 每个结构指向一个套接字地址结构, 可用于建立与服务器的连接, 该服务器运行在 hostname 上并监听 port 端口. 然后遍历该列表, 依次尝试列表中的每个条目, 直到调用 socket 和 connect 成功")]),t._v(". 如果 connect 失败, 在尝试下一个条目之前, 要小心地关闭套接字描述符. 如果 connect 成功, 我们会释放列表内存, 并把套接字描述符返回给客户端, 客户端可以立即开始用 Unix I/O 与服务器通信了.")]),t._v(" "),s("p",[t._v("注意, 所有的代码都与任何版本的 IP 无关. socket 和 connect 的参数都是用 getaddrinfo 自动产生的, 这使得我们的代码干净可移植.")]),t._v(" "),s("h6",{attrs:{id:"_2-open-listenfd函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-open-listenfd函数"}},[t._v("#")]),t._v(" (2)open_listenfd函数")]),t._v(" "),s("p",[s("strong",[t._v("调用 open_listenfd 函数, 服务器创建一个监听描述符, 准备好接收连接请求")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"csapp.h"')])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 若成功则为描述符, 若出错则为 -1.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("open_listenfd")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("port"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("open_listenfd 函数打开和返回一个监听描述符, 这个描述符准备好在端口 port_h 接收连接请求. 代码 11-19 展示了 open_listenfd 的代码.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("open_listenfd")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("port"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("addrinfo")]),t._v(" hints"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("listp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" listenfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" optval "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Get a list of potential server addresses */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("memset")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("hints"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("addrinfo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    hints"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ai_socktype "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" SOCK_STREAM"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("             "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Accept connections */")]),t._v("\n    hints"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ai_flags "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" AI_PASSIVE "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" AI_ADDRCONFIG"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* ... on any IP address */")]),t._v("\n    hints"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ai_flags "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|=")]),t._v(" AI_NUMERICSERV"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* ... using port number */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Getaddrinfo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" port"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("hints"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("listp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Walk the list for one that we can bind to */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" listp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ai_next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Create a socket descriptor */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("listenfd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("socket")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ai_family"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ai_socktype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ai_protocol"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Socket failed, try the next */")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/* Eliminates "Address already in use" error from bind */')]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Setsockopt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("listenfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" SOL_SOCKET"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" SO_REUSEADDR"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("optval "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Bind the descriptor to the address */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bind")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("listenfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ai_addr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ai_addrlen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Success */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Close")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("listenfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Bind failed, try the next */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Clean up */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Freeaddrinfo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("listp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* No address worked */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Make it a listening socket ready to accept connection requests */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("listen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("listenfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" LISTENQ"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Close")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("listenfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" listenfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br"),s("span",{staticClass:"line-number"},[t._v("39")]),s("br"),s("span",{staticClass:"line-number"},[t._v("40")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 11-19 open_listenfd: 打开并返回监听描述符的辅助函数. 它是可重入和与协议无关的")])]),t._v(" "),s("p",[t._v("open_listenfd 的风格类似于 open_clientfd. 调用 getaddrinfo, 然后遍历结果列表, 直到调用 socket 和 bind 成功. 注意, 在第 20 行, 我们使用 setsockopt 函数(本书中没有讲述)来配置服务器, 使得服务器能够被终止, 重启和立即开始接收连接请求. 一个重启的服务器默认将在大约 30 秒内拒绝客户端的连接请求, 这严重地阻碍了调试.")]),t._v(" "),s("p",[t._v("因为调用 getaddrinfo 时, 使用了 AI_PASSIVE 标志并将 host 参数设置为 NULL, 每个套接字地址结构中的地址字段会被设置为通配符地址, 这告诉内核这个服务器会接收发送到本主机所有 IP 地址的请求.")]),t._v(" "),s("h4",{attrs:{id:"web服务器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#web服务器"}},[t._v("#")]),t._v(" Web服务器")]),t._v(" "),s("p",[t._v("迄今为止, 已经在一个简单的 echo 服务器的上下文中讨论了网络编程. 在这一节将展示如何利用网络编程的基本概念, 来创建虽小但功能齐全的 Web 服务器.")]),t._v(" "),s("h5",{attrs:{id:"_1-web基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-web基础"}},[t._v("#")]),t._v(" 1.Web基础")]),t._v(" "),s("p",[t._v("Web 客户端和服务器之间的交互用的是一个基于文本的应用级协议, 叫做 "),s("strong",[t._v("HTTP")]),t._v("(hypertext Transfer Protocol, 超文本传输协议). HTTP 是一个简单的协议. 一个 Web 客户端(即浏览器)打开一个到服务器的因特网连接, 并且请求某些内容. 服务器响应所请求的内容, 然后关闭连接. 浏览器读取这些内容, 并把它显示在屏幕上.")]),t._v(" "),s("p",[t._v("Web 服务和常规的文件检索服务(例如 FTP)有什么区别呢? 主要的区别是 Web 内容可以用一种叫做 "),s("strong",[t._v("HTML")]),t._v("(Hypertext  MarkupLanguage, 超文本标记语言)的语言来编写. 一个 HTML 程序(页)包含指令(标记), 它们告诉浏览器如何显示这页中的各种文本和图形对象. 例如, 代码:")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Make me bold"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("告诉浏览器用粗体字类型输出 "),s("b",[t._v(" 和 ")]),t._v(" 标记之间的文本. 然而, HTML 真正的强大之处在于一个页面可以包含指针(超链接), 这些指针可以指向存放在任何因特网主机上的内容. 例如, 一个格式如下的 HTML 行")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("a href"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://www.cmu.edu/index.html"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("Carnegie Mellon"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v('告诉浏览器高亮显示文本对象 "Carnegie Mellon", 并且创建一个超链接, 它指向存放在 CMU Web 服务器上叫做 '),s("strong",[t._v("index.html")]),t._v(" 的 HTML 文件. 如果用户单击了这个高亮文本对象, 浏览器就会从 CMU 服务器中请求相应的 HTML 文件并显示它.")]),t._v(" "),s("h5",{attrs:{id:"_2-web内容"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-web内容"}},[t._v("#")]),t._v(" 2.Web内容")]),t._v(" "),s("p",[t._v("对于 Web 客户端和服务器而言, "),s("strong",[t._v("内容")]),t._v("是与一个 "),s("strong",[t._v("MIME")]),t._v("(Multipurpose Internet Mail Extensions, 多用途的网际邮件扩充协议)"),s("strong",[t._v("类型相关的字节序列")]),t._v(". 下表 11-23 展示了一些常用的 MIME 类型.")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("MIME类型")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("text/html")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("HTML 页面")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("text/plain")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("无格式文本")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("application/postscript")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Postscript 文档")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("image/gif")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("GIF 格式编码的二进制图像")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("image/png")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("PNG 格式编码的二进制图像")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("image/jpeg")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("JPEG 格式编码的二进制图像")])])])]),t._v(" "),s("blockquote",[s("p",[t._v("表 11-23 MIME 类型示例")])]),t._v(" "),s("p",[t._v("Web 服务器以两种不同的方式向客户端提供内容:")]),t._v(" "),s("ul",[s("li",[t._v("取一个磁盘文件, 并将它的内容返回给客户端. 磁盘文件称为"),s("strong",[t._v("静态内容")]),t._v("(static content), 而返回文件给客户端的过程称为"),s("strong",[t._v("服务静态内容")]),t._v("(serving static content).")]),t._v(" "),s("li",[t._v("运行一个可执行文件, 并将它的"),s("strong",[t._v("输出")]),t._v("返回给客户端. 运行时可执行文件产生的输出称为"),s("strong",[t._v("动态内容")]),t._v("(dynamic content), 而运行程序并返回它的输出到客户端的过程称为"),s("strong",[t._v("服务动态内容")]),t._v("(serving dynamic content).")])]),t._v(" "),s("p",[t._v("每条由 Web 服务器返回的内容都是和它管理的某个文件相关联的. 这些文件中的每一个都有一个唯一的名字, 叫做 "),s("strong",[t._v("URL")]),t._v("(Universal Resource Locator, 通用资源定位符). 例如, URL:")]),t._v(" "),s("p",[s("strong",[t._v("http://www.google.com:80/index.html")])]),t._v(" "),s("p",[t._v("表示因特网主机 "),s("strong",[t._v("www.google.com")]),t._v(" 上一个称为  "),s("strong",[t._v("/index.html")]),t._v(" 的 HTML 文件, 它是由一个监听端口 80 的 Web 服务器管理的. 端口号是可选的, 默认为知名的 HTTP 端口 80. 可执行文件的 URL 可以在文件名后包括程序参数. “?” 字符分隔文件名和参数, 而且每个参数都用 “&” 字符分隔开. 例如, URL:")]),t._v(" "),s("p",[s("strong",[t._v("http://bluefish.ics.cs.cmu.edu:8000/cgi-bin/adder?15000&213")])]),t._v(" "),s("p",[t._v("标识了一个叫做  "),s("strong",[t._v("/cgi-bin/adder")]),t._v(" 的可执行文件, 会带两个参数字符串 15000 和 213 来调用它. 在事务过程中, 客户端和服务器使用的是 URL 的不同部分. 例如, 客户端使用前缀:")]),t._v(" "),s("p",[s("strong",[t._v("http://www.google.com:80")])]),t._v(" "),s("p",[t._v("来决定与哪类服务器联系, 服务器在哪里, 以及它监听的端口号是多少. 服务器使用后缀")]),t._v(" "),s("p",[s("strong",[t._v("/index.html")])]),t._v(" "),s("p",[t._v("来发现在它文件系统中的文件, 并确定请求的是静态内容还是动态内容.")]),t._v(" "),s("p",[t._v("关于服务器如何解释一个 URL 的后缀, 有几点需要理解:")]),t._v(" "),s("ul",[s("li",[t._v("确定一个 URL 指向的是静态内容还是动态内容没有标准的规则. 每个服务器对它所管理的文件都有自己的规则. 一种经典的(老式的)方法是, 确定一组目录, 例如 "),s("strong",[t._v("cgi-bin")]),t._v(", 所有的可执行性文件都必须存放这些目录中.")]),t._v(" "),s("li",[t._v('后缀中的最开始的那个 "/" 不表示 Linux 的根目录. 相反, 它表示的是被请求内容类型的主目录. 例如, 可以将一个服务器配置成这样: 所有的静态内容存放在目录  '),s("strong",[t._v("/usr/httpd/html")]),t._v(" 下, 而所有的动态内容都存放在目录  "),s("strong",[t._v("/usr/httpd/cgi-bin")]),t._v(" 下.")]),t._v(" "),s("li",[t._v('最小的 URL 后缀是 "/" 字符, 所有服务器将其扩展为某个默认的主页, 例如  '),s("strong",[t._v("/index.html")]),t._v('. 这解释了为什么简单地在浏览器中键入一个域名就可以取出一个网站的主页. 浏览器在 URL 后添加缺失的 "/", 并将之传递给服务器, 服务器又把 "/" 扩展到某个默认的文件名.')])]),t._v(" "),s("h5",{attrs:{id:"_3-http事务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-http事务"}},[t._v("#")]),t._v(" 3.HTTP事务")]),t._v(" "),s("p",[t._v("因为 HTTP 是基于在因特网连接上传送的文本行的, 可以使用 Linux 的 TELNET 程序来和因特网上的任何 Web 服务器执行事务. 对于调试在连接上通过文本行来与客户端对话的服务器来说, TELNET 程序是非常便利的. 例如, 代码 11-24 使用 TELNET 向 AOL Web 服务器请求主页.")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" telnet www"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("aol"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v("            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Client: open connection to server")]),t._v("\nTrying "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("205.188")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".146")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".23")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Telnet prints 3 lines to the terminal")]),t._v("\nConnected to aol"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\nEscape character "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'^]'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\nGET "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" HTTP"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.1")]),t._v("                          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Client: request line")]),t._v("\nHost"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" www"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("aol"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com                       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Client: required HTTP/1.1 header")]),t._v("\n                                        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Client: empty line terminates headers")]),t._v("\nHTTP"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v(" OK                         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Server: response line")]),t._v("\nMIME"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Version"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v("                       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Server: followed by five response headers")]),t._v("\nDate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Mon"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" Jan "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2010")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("59")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),t._v(" GMT\nServer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Apache"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Coyote"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.1")]),t._v("\nContent"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" text"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("html                 "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Server: expect HTML in the response body")]),t._v("\nContent"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("42092")]),t._v("                   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Server: expect 42,092 bytes in the response body")]),t._v("\n                                        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Server: empty line terminates response headers")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("html"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("                                  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Server: first HTML line in response body")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("                                     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Server: 766 lines of HTML not shown")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("html"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("                                 "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Server: last HTML line in response body")]),t._v("\nConnection closed by foreign host"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Server: closes connection")]),t._v("\nlinux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("                                  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Client: closes connection and terminate")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 11-24 一个服务静态内容的 HTTP 事务")])]),t._v(" "),s("p",[t._v('在第 1 行, 从 Linux shell 运行 TELNET, 要求它打开一个到 AOL Web 服务器的连接. TELNET 向终端打印三行输出, 打开连接, 然后等待我们输入文本(第 5 行). 每次输入一个文本行, 并键入回车键, TELNET 会读取该行, 在后面加上回车和换行符号(在 C 的表示中为 "\\r\\n"), 并且将这一行发送到服务器. 这是和 HTTP 标准相符的, HTTP 标准要求每个文本行都由一对回车和换行符来结束. 为了发起事务, 我们输入一个 HTTP 请求(第 5 ~ 7 行). 服务器返回 HTTP 响应(第 8 ~ 17 行), 然后关闭连接(第 18 行).')]),t._v(" "),s("h6",{attrs:{id:"_1-http请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-http请求"}},[t._v("#")]),t._v(" (1)HTTP请求")]),t._v(" "),s("p",[t._v("一个 HTTP 请求的组成是这样的: 一个"),s("strong",[t._v("请求行")]),t._v("(request line)(第 5 行), 后面跟随零个或更多个"),s("strong",[t._v("请求报头")]),t._v("(request header)(第 6 行), 再跟随一个空的文本行来终止报头列表(第 7 行). 一个请求行的形式是")]),t._v(" "),s("p",[s("strong",[t._v("method URI version")])]),t._v(" "),s("p",[t._v("HTTP 支持许多不同的方法, 包括 GET, POST, OPTIONS, HEAD, PUT, DELETE 和 TRACE. 我们将只讨论广为应用的 GET 方法, 大多数 HTTP 请求都是这种类型的. GET 方法指导服务器生成和返回 "),s("strong",[t._v("URI")]),t._v("(Uniform Resource Identifier, 统一资源标识符)标识的内容. URI 是相应的 URL 的后缀, 包括文件名和可选的参数.")]),t._v(" "),s("p",[t._v("请求行中的 version 字段表明了该请求遵循的 HTTP 版本. HTTP/1.0 是从 1996 年沿用至今的老版本【6】. HTTP/1.1 定义了一些附加的报头, 为诸如缓冲和安全等高级特性提供支持, 它还支持一种机制, 允许客户端和服务器在同一条"),s("strong",[t._v("持久连接")]),t._v("(persistent connection)上执行多个事务. 在实际中, 两个版本是互相兼容的, 因为 HTTP/1.0 的客户端和服务器会简单地忽略 HTTP/1.1 的报头.")]),t._v(" "),s("p",[t._v("总的来说, 第 5 行的请求行要求服务器取出并返回 HTML 文件  "),s("strong",[t._v("/index.html")]),t._v(". 它也告知服务器请求剩下的部分是 HTTP/1.1 格式的.")]),t._v(" "),s("p",[t._v("请求报头为服务器提供了额外的信息, 例如浏览器的商标名, 或者浏览器理解的 MIME 类型. 请求报头的格式为")]),t._v(" "),s("p",[s("strong",[t._v("header-name: header-data")])]),t._v(" "),s("p",[t._v("针对我们的目的, 唯一需要关注的报头是 "),s("strong",[t._v("Host 报头")]),t._v("(第 6 行), 这个报头在 HTTP/1.1 请求中是需要的, 而在 HTTP/1.0 请求中是不需要的. "),s("strong",[t._v("代理缓存")]),t._v("(proxy cache)会使用 Host 报头, 这个代理缓存有时作为浏览器和管理被请求文件的"),s("strong",[t._v("原始服务器")]),t._v("(origin server)的中介. 客户端和原始服务器之间, 可以有多个代理, 即所谓的"),s("strong",[t._v("代理链")]),t._v("(proxy chain). Host 报头中的数据指示了原始服务器的域名, 使得代理链中的代理能够判断它是否可以在本地缓存中拥有一个被请求内容的副本.")]),t._v(" "),s("p",[t._v("继续代码 11-24 中的示例, 第 7 行的空文本行(通过在键盘上键入回车键生成的)终止了报头, 并指示服务器发送被请求的 HTML 文件.")]),t._v(" "),s("h6",{attrs:{id:"_2-http响应"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-http响应"}},[t._v("#")]),t._v(" (2)HTTP响应")]),t._v(" "),s("p",[t._v("HTTP 响应和 HTTP 请求是相似的. 一个 HTTP 响应的组成是这样的: 一个"),s("strong",[t._v("响应行")]),t._v("(response line)(第 8 行), 后面跟随着零个或更多的"),s("strong",[t._v("响应报头")]),t._v("(response header)(第 9 ~ 13 行), 再跟随一个终止报头的空行(第 14 行), 再跟随一个"),s("strong",[t._v("响应主体")]),t._v("(response body)(第 15 ~ 17 行). 一个响应行的格式是")]),t._v(" "),s("p",[s("strong",[t._v("version status-code status-message")])]),t._v(" "),s("p",[t._v("version 字段描述的是响应所遵循的 HTTP 版本. "),s("strong",[t._v("状态码")]),t._v("(status-code)是一个 3 位的正整数, 指明对请求的处理. 状态消息(status message)给出与错误代码等价的英文描述. 下表 11-25 列出了一些常见的状态码, 以及它们相应的消息.")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("状态代码")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("状态消息")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("200")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("成功")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("处理请求无误")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("301")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("永久移动")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("内容已移动到 location 头中指明的主机上")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("400")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("错误请求")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("服务器不能理解请求")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("403")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("禁止")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("服务器无权访问所请求的文件")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("404")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("未发现")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("服务器不能找到所请求的文件")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("501")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("未实现")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("服务器不支持请求的方法")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("505")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("HTTP 版本不支持")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("服务器不支持请求的版本")])])])]),t._v(" "),s("blockquote",[s("p",[t._v("表 11-25 一些 HTTP 状态码")])]),t._v(" "),s("p",[t._v("第 9 ~ 13 行的响应报头提供了关于响应的附加信息. 针对我们的目的, 两个最重要的报头是 "),s("strong",[t._v("Content-Type")]),t._v("(第 12 行), 它告诉客户端响应主体中内容的 MIME 类型; 以及 "),s("strong",[t._v("Content-Length")]),t._v("(第 13 行), 用来指示响应主体的字节大小.")]),t._v(" "),s("p",[t._v("第 14 行的终止响应报头的空文本行, 其后跟随着响应主体, 响应主体中包含着被请求的内容.")]),t._v(" "),s("h5",{attrs:{id:"_4-服务动态内容"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-服务动态内容"}},[t._v("#")]),t._v(" 4.服务动态内容")]),t._v(" "),s("p",[t._v("如果停下来考虑一下, 一个服务器是如何向客户端提供动态内容的, 就会发现一些问题. 例如, 客户端如何将程序参数传递给服务器? 服务器如何将这些参数传递给它所创建的子进程? 服务器如何将子进程生成内容所需要的其他信息传递给子进程? 子进程将它的输出发送到哪里? 一个称为 "),s("strong",[t._v("CGI")]),t._v("(Common Gateway Interface, 通用网关接口)的实际标准的出现解决了这些问题.")]),t._v(" "),s("h6",{attrs:{id:"_1-客户端如何将程序参数传递给服务器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-客户端如何将程序参数传递给服务器"}},[t._v("#")]),t._v(" (1)客户端如何将程序参数传递给服务器")]),t._v(" "),s("p",[t._v('GET 请求的参数在 URI 中传递. 正如我们看到的, 一个 "?" 字符分隔了文件名和参数, 而每个参数都用一个 "&" 字符分隔开. 参数中不允许有空格, 而必须用字符串 "％20" 来表示. 对其他特殊字符, 也存在着相似的编码.')]),t._v(" "),s("h6",{attrs:{id:"_2-服务器如何将参数传递给子进程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-服务器如何将参数传递给子进程"}},[t._v("#")]),t._v(" (2)服务器如何将参数传递给子进程")]),t._v(" "),s("p",[t._v("在服务器接收一个如下的请求后:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("GET "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("cgi"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("bin"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("adder"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15000")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("213")]),t._v(" HTTP"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.1")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("它调用 fork 来"),s("strong",[t._v("创建一个子进程")]),t._v(", 并调用 execve 在子进程的上下文中执行  "),s("strong",[t._v("/cgi-bin/adder")]),t._v(' 程序. 像 adder 这样的程序, 常常被称为 CGI 程序, 因为它们遵守 CGI 标准的规则. 而且, 因为许多 CGI 程序是用 Perl 脚本编写的, 所以 CGI 程序也常被称为 CGI 脚本. 在调用 execve 之前, 子进程将 CGI 环境变量 QUERY_STRING 设置为 "15000&213", adder 程序在运行时可以用 Linux getenv 函数来引用它.')]),t._v(" "),s("h6",{attrs:{id:"_3-服务器如何将其他信息传递给子进程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-服务器如何将其他信息传递给子进程"}},[t._v("#")]),t._v(" (3)服务器如何将其他信息传递给子进程")]),t._v(" "),s("p",[t._v("CGI 定义了大量的其他环境变量, 一个 CGI 程序在它运行时可以设置这些环境变量. 下表 11-26 给出了其中的一部分.")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("环境变量")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("QUERY_STRING")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("程序参数")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("SERVER_PORT")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("父进程侦听的端口")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("REQUEST_METHOD")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("GET 或 POST")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("REMOTE_HOST")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("客户端的域名")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("REMOTE_ADDR")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("客户端的点分十进制 IP 地址")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("CONTENT_TYPE")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("只对 POST 而言: 请求体的 MIME 类型")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("CONTENT_LENGTH")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("只对 POST 而言: 请求体的字节大小")])])])]),t._v(" "),s("blockquote",[s("p",[t._v("表 11-26 CGI 环境变量示例")])]),t._v(" "),s("h6",{attrs:{id:"_4-子进程将它的输出发送到哪里"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-子进程将它的输出发送到哪里"}},[t._v("#")]),t._v(" (4)子进程将它的输出发送到哪里")]),t._v(" "),s("p",[t._v("一个 CGI 程序将它的"),s("strong",[t._v("动态内容发送到标准输出")]),t._v(". 在子进程加载并运行 CGI 程序之前, 它使用 Linux dup2 函数将标准输出重定向到和客户端相关联的已连接描述符. 因此, 任何 CGI 程序写到标准输出的东西都会直接到达客户端.")]),t._v(" "),s("p",[t._v("注意, 因为父进程不知道子进程生成的内容的类型或大小, 所以子进程就要负责生成 Content-type 和 Content-length 响应报头, 以及终止报头的空行.")]),t._v(" "),s("p",[t._v("代码 11-27 展示了一个简单的 CGI 程序, 它对两个参数求和, 并返回带结果的 HTML 文件给客户端.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"csapp.h"')])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" arg1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MAXLINE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arg2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MAXLINE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" content"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MAXLINE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Extract the two arguments */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getenv")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"QUERY_STRING"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strchr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ’"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("’"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ’\\"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("’"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strcpy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arg1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strcpy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arg2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        n1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("atoi")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arg1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        n2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("atoi")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arg2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Make the response body */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("content"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"QUERY_STRING=%s"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("content"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Welcome to add.com: "')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("content"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%sTHE Internet addition portal.\\r\\n<p>"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" content"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("content"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%sThe answer is: %d + %d = %d\\r\\n<p>"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            content"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" n2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("content"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%sThanks for visiting!\\r\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" content"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Generate the HTTP response */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Connection: close\\r\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Content-length: %d\\r\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strlen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("content"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Content-type: text/html\\r\\n\\r\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" content"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fflush")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stdout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 11-27 对两个整数求和的 CGI 程序")])]),t._v(" "),s("p",[t._v("代码 11-28 展示了一个 HTTP 事务, 它根据 adder 程序提供动态内容.")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" telnet kittyhawk"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cmcl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cmu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("edu "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8000")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Client: open connection")]),t._v("\nTrying "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("128.2")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".194")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".242")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\nConnected to kittyhawk"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cmcl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cmu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("edu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\nEscape character "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" ’"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("’"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\nGET "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("cgi"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bin")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("adder?"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15000")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("213")]),t._v(" HTTP"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v("               "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Client: request line")]),t._v("\n                                                    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Client: empty line terminates headers")]),t._v("\nHTTP"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v(" OK                                     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Server: response line")]),t._v("\nServer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Tiny Web Server                             "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Server: identify server")]),t._v("\nContent"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("115")]),t._v("                                 "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Adder: expect 115 bytes in response body")]),t._v("\nContent"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("type")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" text"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("html                             "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Adder: expect HTML in response body")]),t._v("\n                                                    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Adder: empty line terminates headers")]),t._v("\nWelcome to add"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" THE Internet addition portal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Adder: first HTML line")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("The answer "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15000")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("213")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15213")]),t._v("               "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Adder: second HTML line in response body")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("Thanks "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" visiting!                             "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Adder: third HTML line in response body")]),t._v("\nConnection closed by foreign host"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("                  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Server: closes connection")]),t._v("\nlinux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("                                              "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Client: closes connection and terminates")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 11-28 一个提供动态 HTML 内容的 HTTP 事务")])]),t._v(" "),s("h4",{attrs:{id:"综合-tiny-web服务器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#综合-tiny-web服务器"}},[t._v("#")]),t._v(" 综合:TINY Web服务器")]),t._v(" "),s("p",[t._v("本节通过开发一个虽小但功能齐全的称为 TINY 的 Web 服务器来结束对网络编程的讨论. TINY 是一个有趣的程序. 在短短 250 行代码中, 它结合了许多我们已经学习到的思想, 例如进程控制, Unix I/O, 套接字接口和 HTTP. 虽然它缺乏一个实际服务器所具备的功能性, 健壮性和安全性, 但是它足够用来为实际的 Web 浏览器提供静态和动态的内容. 我们鼓励你研究它, 并且自己实现它. 将一个实际的浏览器指向你自己的服务器, 看着它显示一个复杂的带有文本和图片的 Web 页面, 真是非常令人兴奋(甚至对我们这些作者来说, 也是如此! ).")]),t._v(" "),s("h5",{attrs:{id:"_1-tiny的main程序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-tiny的main程序"}},[t._v("#")]),t._v(" 1.TINY的main程序")]),t._v(" "),s("p",[t._v("代码 11-29 展示了 TINY 的主程序. TINY 是一个"),s("strong",[t._v("迭代服务器, 监听在命令行中传递来的端口上的连接请求")]),t._v(". 在通过调用 open_listenfd 函数打开一个监听套接字以后, TINY 执行典型的无限服务器循环, 不断地接受连接请求(第 32 行), 执行事务(第 36 行), 并关闭连接的它那一端(第 37 行).")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n* tiny.c - A simple, iterative HTTP/1.0 Web server that uses the\n* GET method to serve static and dynamic content\n*/")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"csapp.h"')])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("doit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("read_requesthdrs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("rio_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("rp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("parse_uri")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("uri"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("cgiargs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("serve_static")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" filesize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_filetype")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("filetype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("serve_dynamic")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("cgiargs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("clienterror")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("cause"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("errnum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("shortmsg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("longmsg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" argc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" listenfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" connfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" hostname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MAXLINE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" port"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MAXLINE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("socklen_t")]),t._v(" clientlen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sockaddr_storage")]),t._v(" clientaddr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Check command-line args */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("argc "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stderr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"usage: %s <port>\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  \n    listenfd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Open_listenfd")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        clientlen "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("clientaddr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        connfd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Accept")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("listenfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SA "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("clientaddr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("clientlen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Getnameinfo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SA "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("clientaddr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" clientlen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" hostname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" MAXLINE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                    port"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" MAXLINE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Accepted connection from (%s, %s)\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" hostname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" port"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("doit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("connfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Close")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("connfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br"),s("span",{staticClass:"line-number"},[t._v("39")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 11-29 TINY Web 服务器")])]),t._v(" "),s("h5",{attrs:{id:"_2-doit函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-doit函数"}},[t._v("#")]),t._v(" 2.doit函数")]),t._v(" "),s("p",[t._v("代码 11-30 中的 doit 函数处理一个 HTTP 事务.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("doit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" is_static"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("stat")]),t._v(" sbuf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MAXLINE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" method"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MAXLINE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" uri"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MAXLINE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" version"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MAXLINE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MAXLINE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cgiargs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MAXLINE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("rio_t")]),t._v(" rio"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Read request line and headers */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Rio_readinitb")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rio"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Rio_readlineb")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rio"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" MAXLINE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Request headers:\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sscanf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s %s %s"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" method"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" uri"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" version"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strcasecmp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("method"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"GET"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("clienterror")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" method"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"501"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Not implemented"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Tiny does not implement this method"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("read_requesthdrs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rio"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Parse URI from GET request */")]),t._v("\n    is_static "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("parse_uri")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("uri"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cgiargs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("sbuf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("clienterror")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"404"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Not found"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Tiny couldn’t find this file"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("is_static"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Serve static content */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("S_ISREG")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sbuf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("st_mode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("S_IRUSR "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" sbuf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("st_mode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("clienterror")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"403"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Forbidden"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                        "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Tiny couldn’t read the file"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("serve_static")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sbuf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("st_size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Serve dynamic content */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("S_ISREG")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sbuf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("st_mode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("S_IXUSR "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" sbuf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("st_mode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("clienterror")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"403"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Forbidden"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                        "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Tiny couldn’t run the CGI program"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("serve_dynamic")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cgiargs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br"),s("span",{staticClass:"line-number"},[t._v("39")]),s("br"),s("span",{staticClass:"line-number"},[t._v("40")]),s("br"),s("span",{staticClass:"line-number"},[t._v("41")]),s("br"),s("span",{staticClass:"line-number"},[t._v("42")]),s("br"),s("span",{staticClass:"line-number"},[t._v("43")]),s("br"),s("span",{staticClass:"line-number"},[t._v("44")]),s("br"),s("span",{staticClass:"line-number"},[t._v("45")]),s("br"),s("span",{staticClass:"line-number"},[t._v("46")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 11-30 TINY doit 处理一个 HTTP 事务")])]),t._v(" "),s("p",[t._v("首先, 我们读和解析请求行(第 11 ~ 14 行). 注意, 我们使用图 11-8 中的 rio_readlineb 函数读取请求行.")]),t._v(" "),s("p",[t._v("TINY 只支持 GET 方法. 如果客户端请求其他方法(比如 POST), 我们发送给它一个错误信息, 并返回到主程序(第 15 ~ 19 行), 主程序随后关闭连接"),s("strong",[t._v("并等待下一个连接请求")]),t._v(". 否则, 我们读并且(像我们将要看到的那样)忽略任何请求报头(第 20 行).")]),t._v(" "),s("p",[t._v("然后, 将 URI 解析为一个文件名和一个可能为空的 CGI 参数字符串, 并且设置一个标志, 表明请求的是静态内容还是动态内容(第 23 行). 如果文件在磁盘上不存在, 会立即发送一个错误信息给客户端并返回.")]),t._v(" "),s("p",[t._v("最后, 如果请求的是静态内容, 就验证该文件是一个普通文件, 而我们是有读权限的(第 31 行). 如果是这样, 就向客户端提供静态内容(第 36 行). 相似地, 如果请求的是动态内容, 就验证该文件是可执行文件(第 39 行), 如果是这样, 就继续并且提供动态内容(第 44 行).")]),t._v(" "),s("h5",{attrs:{id:"_3-clienterror函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-clienterror函数"}},[t._v("#")]),t._v(" 3.clienterror函数")]),t._v(" "),s("p",[t._v("TINY 缺乏一个实际服务器的许多错误处理特性. 然而, 它会检査一些明显的错误, 并把它们报告给客户端. 代码 11-31 中的 clienterror 函数发送一个 HTTP 响应到客户端, 在响应行中包含相应的状态码和状态消息, 响应主体中包含一个 HTML 文件, 向浏览器的用户解释这个错误.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("clienterror")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("cause"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("errnum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("shortmsg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("longmsg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MAXLINE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" body"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MAXBUF"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Build the HTTP response body */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("body"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<html><title>Tiny Error</title>"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("body"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s<body bgcolor="')]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ffffff"')]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('">\\r\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" body"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("body"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s%s: %s\\r\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" body"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" errnum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" shortmsg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("body"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s<p>%s: %s\\r\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" body"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" longmsg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cause"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("body"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s<hr><em>The Tiny Web server</em>\\r\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" body"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Print the HTTP response */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"HTTP/1.0 %s %s\\r\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" errnum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" shortmsg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Rio_writen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strlen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Content-type: text/html\\r\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Rio_writen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strlen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Content-length: %d\\r\\n\\r\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strlen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("body"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Rio_writen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strlen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Rio_writen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" body"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strlen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("body"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 11-31 TINY clienterror 向客户端发送一个出错消息")])]),t._v(" "),s("p",[t._v("回想一下, HTML 响应应该指明主体中内容的大小和类型. 因此, 选择创建 HTML 内容为一个字符串, 这样一来可以简单地确定它的大小. 还有, 请注意我们为所有的输出使用的都是图 10-4 中健壮的 rio_writen 函数.")]),t._v(" "),s("h5",{attrs:{id:"_4-read-requesthdrs函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-read-requesthdrs函数"}},[t._v("#")]),t._v(" 4.read_requesthdrs函数")]),t._v(" "),s("p",[t._v("TINY 不使用请求报头中的任何信息. 它仅仅调用代码 11-32 中的 read_requesthdrs 函数来读取并忽略这些报头. 注意, 终止请求报头的空文本行是由回车和换行符对组成的, 我们在第 6 行中检査它.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("read_requesthdrs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("rio_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("rp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MAXLINE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Rio_readlineb")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" MAXLINE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strcmp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\r\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Rio_readlineb")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" MAXLINE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 11-32 TINY read_requesthdrs 读取并忽略请求报头")])]),t._v(" "),s("h5",{attrs:{id:"_5-parse-uri函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-parse-uri函数"}},[t._v("#")]),t._v(" 5.parse_uri函数")]),t._v(" "),s("p",[t._v("TINY 假设静态内容的主目录就是它的当前目录, 而可执行文件的主目录是  "),s("strong",[t._v("./cgi-bin")]),t._v(". 任何包含字符串 "),s("strong",[t._v("cgi-bin")]),t._v(" 的 URI 都会被认为表示的是对动态内容的请求. 默认的文件名是  "),s("strong",[t._v("./home.html")]),t._v(".")]),t._v(" "),s("p",[t._v("代码 11-33 中的 parse_uri 函数实现了这些策略. 它将 URI 解析为一个文件名和一个可选的 CGI 参数字符串. 如果请求的是静态内容(第 5 行), 我们将清除 CGI 参数字符串(第 6 行), 然后将 URI 转换为一个 Linux 相对路径名, 例如  "),s("strong",[t._v("./index.html")]),t._v("(第 7 ~ 8 行). 如果 URI 是用结尾的(第 9 行), 我们将把默认的文件名加在后面(第 10 行). 另一方面, 如果请求的是动态内容(第 13 行), 我们就会抽取出所有的 CGI 参数(第 14 ~ 20 行), 并将 URI 剩下的部分转换为一个 Linux 相对文件名(第 21 ~ 22 行).")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("parse_uri")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("uri"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("cgiargs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strstr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("uri"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cgi-bin"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Static content */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strcpy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cgiargs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strcpy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strcat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" uri"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("uri"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strlen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("uri"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" ’ "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" ’"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strcat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"home.html"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Dynamic content */")]),t._v("\n        ptr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("index")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("uri"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ’ "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" ’"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strcpy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cgiargs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ptr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ’\\"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("’"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strcpy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cgiargs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strcpy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strcat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" uri"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 11-33 TINY parse_uri 解析一个 HTTP URI")])]),t._v(" "),s("h5",{attrs:{id:"_6-serve-static函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-serve-static函数"}},[t._v("#")]),t._v(" 6.serve_static函数")]),t._v(" "),s("p",[t._v("TINY 提供五种常见类型的静态内容: HTML 文件, 无格式的文本文件, 以及编码为 GIF, PNG 和 JPG 格式的图片.")]),t._v(" "),s("p",[t._v("代码 11-34 中的 serve_static 函数发送一个 HTTP 响应, 其主体包含一个本地文件的内容.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("serve_static")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" filesize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" srcfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("srcp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" filetype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MAXLINE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MAXBUF"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Send response headers to client */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_filetype")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" filetype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"HTTP/1.0 200 OK\\r\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%sServer: Tiny Web Server\\r\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%sConnection: close\\r\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%sContent-length: %d\\r\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" filesize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%sContent-type: %s\\r\\n\\r\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" filetype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Rio_writen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strlen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Response headers:\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Send response body to client */")]),t._v("\n    srcfd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Open")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" O_RDONLY"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    srcp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Mmap")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" filesize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" PROT_READ"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" MAP_PRIVATE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" srcfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Close")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("srcfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Rio_writen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" srcp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" filesize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Munmap")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("srcp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" filesize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n* get_filetype - Derive file type from filename\n*/")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_filetype")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("filetype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strstr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('".html"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strcpy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filetype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text/html"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strstr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('".gif"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strcpy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filetype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"image/gif"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strstr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('".png"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strcpy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filetype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"image/png"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strstr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('".jpg"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strcpy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filetype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"image/jpeg"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strcpy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filetype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text/plain"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br"),s("span",{staticClass:"line-number"},[t._v("39")]),s("br"),s("span",{staticClass:"line-number"},[t._v("40")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 11-34 TINY serve_static 为客户端提供静态内容")])]),t._v(" "),s("p",[t._v("首先, 我们通过检査文件名的后缀来判断文件类型(第 7 行), 并且发送响应行和响应报头给客户端(第 8 ~ 13 行). 注意用一个空行终止报头.")]),t._v(" "),s("p",[t._v("接着, 我们将被请求文件的内容复制到已连接描述符 fd 来发送响应主体. 这里的代码是比较微妙的, 需要仔细研究. 第 18 行以读方式打开 filename, 并获得它的描述符. 在第 19 行, Linux mmap 函数将被请求文件映射到一个虚拟内存空间. 回想我们在第 9.8 节中对 remap 的讨论, 调用 mmap 将文件 srcfd 的前 filesize 个字节映射到一个从地址 srcp 开始的私有只读虚拟内存区域.")]),t._v(" "),s("p",[t._v("一旦将文件映射到内存, 就不再需要它的描述符了, 所以我们关闭这个文件(第 20 行). 执行这项任务失败将导致潜在的致命的内存泄漏. 第 21 行执行的是到客户端的实际文件传送. rio_writen 函数复制从 srcp 位置开始的 filesize 个字节(它们当然已经被映射到了所请求的文件)到客户端的已连接描述符. 最后, 第 22 行释放了映射的虚拟内存区域. 这对于避免潜在的致命的内存泄漏是很重要的.")]),t._v(" "),s("h5",{attrs:{id:"_7-serve-dynamic函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-serve-dynamic函数"}},[t._v("#")]),t._v(" 7.serve_dynamic函数")]),t._v(" "),s("p",[t._v("TINY 通过派生一个子进程并在子进程的上下文中运行一个 CGI 程序, 来提供各种类型的动态内容.")]),t._v(" "),s("p",[t._v("代码 11-35 中的 serve_dynamic 函数一开始就向客户端发送一个表明成功的响应行, 同时还包括带有信息的 Server 报头. CGI 程序负责发送响应的剩余部分. 注意, 这并不像我们可能希望的那样健壮, 因为它没有考虑到 CGI 程序会遇到某些错误的可能性.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("serve_dynamic")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("cgiargs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MAXLINE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("emptylist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Return first part of HTTP response */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"HTTP/1.0 200 OK\\r\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Rio_writen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strlen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Server: Tiny Web Server\\r\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Rio_writen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strlen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fork")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Child */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Real server would set all CGI vars here */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setenv")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"QUERY_STRING"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cgiargs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Dup2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" STDOUT_FILENO"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Redirect stdout to client */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Execve")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" emptylist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" environ"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Run CGI program */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Wait")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Parent waits for and reaps child */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 11-35 TINY serve_dynamic 为客户端提供动态内容")])]),t._v(" "),s("p",[t._v("在发送了响应的第一部分后, 我们会派生一个新的子进程(第 11 行). "),s("strong",[t._v("子进程用来自请求 URI 的 CGI 参数初始化 QUERY_STRING 环境变量(第 13 行)")]),t._v(" . 注意, 一个真正的服务器还会在此处设置其他的 CGI 环境变量. 为了简短, 我们省略了这一步.")]),t._v(" "),s("p",[t._v("接下来, 子进程重定向它的标准输出到已连接文件描述符(第 14 行), 然后加载并运行 CGI 程序(第 15 行). 因为 CGI 程序运行在子进程的上下文中, 它能够访问所有在调用 ex¬ecve 函数之前就存在的打开文件和环境变量. 因此, CGI 程序写到标准输出上的任何东西都将直接送到客户端进程, 不会受到任何来自父进程的干涉. 其间, 父进程阻塞在对 wait 的调用中, 等待当子进程终止的时候, 回收操作系统分配给子进程的资源(第 17 行).")]),t._v(" "),s("h4",{attrs:{id:"小结-6"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小结-6"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),s("p",[t._v("每个网络应用都是基于客户端—服务器模型的. 根据这个模型, 一个应用是由一个服务器和一个或多个客户端组成的. 服务器管理资源, 以某种方式操作资源, 为它的客户端提供服务. 客户端—服务器模型中的基本操作是客户端—服务器事务, 它是由客户端请求和跟随其后的服务器响应组成的.")]),t._v(" "),s("p",[t._v("客户端和服务器通过因特网这个全球网络来通信. 从程序员的观点来看, 我们可以把因特网看成是一个全球范围的主机集合, 具有以下几个属性:")]),t._v(" "),s("ol",[s("li",[t._v("每个因特网主机都有一个唯一的 32 位名字, 称为它的 IP 地址.")]),t._v(" "),s("li",[t._v("IP 地址的集合被映射为一个因特网域名的集合.")]),t._v(" "),s("li",[t._v("不同因特网主机上的进程能够通过连接互相通信.")])]),t._v(" "),s("p",[s("strong",[t._v("客户端和服务器通过使用套接字接口建立连接. 一个套接字是连接的一个端点, 连接以文件描述符的形式提供给应用程序. 套接字接口提供了打开和关闭套接字描述符的函数. 客户端和服务器通过读写这些描述符来实现彼此间的通信.")])]),t._v(" "),s("p",[t._v("Web 服务器使用 HTTP 协议和它们的客户端(例如浏览器)彼此通信. 浏览器向服务器请求静态或者动态的内容. 对静态内容的请求是通过从服务器磁盘取得文件并把它返回给客户端来服务的. 对动态内容的请求是通过在服务器上一个子进程的上下文中运行一个程序并将它的输出返回给客户端来服务的. CGI 标准提供了一组规则, 来管理客户端如何将程序参数传递给服务器, 服务器如何将这些参数以及其他信息传递给子进程, 以及子进程如何将它的输岀发送回客户端. 只用几百行 C 代码就能实现一个简单但是有功效的 Web 服务器, 它既可以提供静态内容, 也可以提供动态内容.")]),t._v(" "),s("h3",{attrs:{id:"_12-并发编程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12-并发编程"}},[t._v("#")]),t._v(" 12.并发编程")]),t._v(" "),s("p",[t._v("正如在第 8 章学到的, 如果"),s("strong",[t._v("逻辑控制流在时间上重叠")]),t._v(", 那么它们就是"),s("strong",[t._v("并发的")]),t._v("(concurrent). 这种常见的现象称为"),s("strong",[t._v("并发")]),t._v("(concurrency), 出现在计算机系统的许多不同层面上. 硬件异常处理程序, 进程和 Linux 信号处理程序都是大家很熟悉的例子.")]),t._v(" "),s("p",[t._v("到目前为止, 主要"),s("strong",[t._v("将并发看做是一种操作系统内核用来运行多个应用程序的机制")]),t._v(". 但是, 并发不仅仅局限于内核. 它也可以在应用程序中扮演重要角色. 例如, 我们已经看到 Linux 信号处理程序如何允许应用响应异步事件, 例如用户键入 Ctrl+C, 或者程序访问虚拟内存的一个未定义的区域. 应用级并发在其他情况下也是很有用的:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("访问慢速 I/O 设备.")]),t._v("  当一个应用正在等待来自慢速 I/O 设备(例如磁盘)的数据到达时, 内核会运行其他进程, 使 CPU 保持繁忙. 每个应用都可以按照类似的方式, 通过交替执行 I/O 请求和其他有用的工作来利用并发.")]),t._v(" "),s("li",[s("strong",[t._v("与人交互.")]),t._v("  和计算机交互的人要求计算机有同时执行多个任务的能力. 例如, 他们在打印一个文档时, 可能想要调整一个窗口的大小. 现代视窗系统利用并发来提供这种能力. 每次用户请求某种操作(比如通过单击鼠标)时, 一个独立的并发逻辑流被创建来执行这个操作.")]),t._v(" "),s("li",[s("strong",[t._v("通过推迟工作以降低延迟.")]),t._v('  有时, 应用程序能够通过推迟其他操作和并发地执行它们, 利用并发来降低某些操作的延迟. 比如, 一个动态内存分配器可以通过推迟合并, 把它放到一个运行在较低优先级上的并发 "合并" 流中, 在有空闲的 CPU 周期时充分利用这些空闲周期, 从而降低单个 free 操作的延迟.')]),t._v(" "),s("li",[s("strong",[t._v("服务多个网络客户端.")]),t._v("  在第 11 章中学习的迭代网络服务器是不现实的, 因为它们一次只能为一个客户端提供服务. 因此, 一个慢速的客户端可能会导致服务器拒绝为所有其他客户端服务. 对于一个真正的服务器来说, 可能期望它每秒为成百上千的客户端提供服务, 由于一个慢速客户端导致拒绝为其他客户端服务, 这是不能接受的. 一个更好的方法是创建一个并发服务器, 它为每个客户端创建一个单独的逻辑流. 这就允许服务器同时为多个客户端服务, 并且也避免了慢速客户端独占服务器.")]),t._v(" "),s("li",[s("strong",[t._v("在多核机器上进行并行计算.")]),t._v("  许多现代系统都配备多核处理器, 多核处理器中包含有多个 CPU. 被划分成并发流的应用程序通常在多核机器上比在单处理器机器上运行得快, 因为这些流会"),s("strong",[t._v("并行执行")]),t._v(", 而不是交错执行.")])]),t._v(" "),s("p",[t._v("使用应用级并发的应用程序称为"),s("strong",[t._v("并发程序")]),t._v("(concurrent program). 现代操作系统提供了三种基本的构造并发程序的方法:")]),t._v(" "),s("ul",[s("li",[s("mark",[s("strong",[t._v("进程")])]),t._v("​ "),s("strong",[t._v(".")]),t._v("  用这种方法, 每个逻辑控制流都是一个进程, 由内核来调度和维护. 因为进程有独立的虚拟地址空间, 想要和其他流通信, 控制流必须使用某种显式的进程间通信(interprocesscommunication, IPC)机制.")]),t._v(" "),s("li",[s("mark",[s("strong",[t._v("I/O 多路复用")])]),t._v("​ "),s("strong",[t._v(".")]),t._v("  在这种形式的并发编程中, 应用程序在一个进程的上下文中显式地调度它们自己的逻辑流. 逻辑流被模型化为状态机, 数据到达文件描述符后, 主程序显式地从一个状态转换到另一个状态. 因为程序是一个单独的进程, 所以所有的流都共享同一个地址空间.")]),t._v(" "),s("li",[s("mark",[s("strong",[t._v("线程")])]),t._v("​ "),s("strong",[t._v(".")]),t._v("  线程是运行在一个单一进程上下文中的逻辑流, 由内核进行调度. 你可以把线程看成是其他两种方式的混合体, 像进程流一样由内核进行调度, 而像 I/O. 多路复用流一样共享同一个虚拟地址空间.")])]),t._v(" "),s("p",[t._v("本章研究这三种不同的并发编程技术. 为了使讨论比较具体, 我们始终以同一个应用为例--11.4.9 节中的迭代 echo 服务器的并发版本.")]),t._v(" "),s("h4",{attrs:{id:"基于进程的并发编程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基于进程的并发编程"}},[t._v("#")]),t._v(" 基于进程的并发编程")]),t._v(" "),s("p",[t._v("构造并发程序最简单的方法就是用"),s("strong",[t._v("进程")]),t._v(", 使用那些大家都很熟悉的函数, 像 fork, exec 和 waitpid. 例如, 一个构造并发服务器的自然方法就是, 在父进程中接受客户端连接请求, 然后创建一个新的子进程来为每个新客户端提供服务.")]),t._v(" "),s("p",[t._v("为了了解这是如何工作的, 假设有两个客户端和一个服务器, 服务器正在监听一个监听描述符(比如指述符 3)上的连接请求. 现在假设服务器接受了客户端 1 的连接请求, 并返回一个已连接描述符(比如指述符 4), 如图 12-1 所示. 在接受连接请求之后, 服务器派生一个子进程, 这个子进程获得服务器描述符表的完整副本. 子进程关闭它的副本中的监听描述符 3, 而父进程关闭它的已连接描述符 4 的副本, 因为不再需要这些描述符了.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230907225751-2l5k6ny.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图12-1 第一步: 服务器接受客户端的连接请求")])]),t._v(" "),s("p",[t._v("这就得到了图 12-2 中的状态, 其中子进程正忙于为客户端提供服务.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230907225818-vdd0v0b.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图12-2 第二步: 服务器派生一个子进程为这个客户端服务")])]),t._v(" "),s("p",[t._v("因为"),s("strong",[t._v("父, 子进程中的已连接描述符都指向同一个文件表表项, 所以父进程关闭它的已连接描述符的副本是至关重要的")]),t._v(". 否则, 将永不会释放已连接描述符 4 的文件表条目, 而且由此引起的内存泄漏将最终消耗光可用的内存, 使系统崩溃.")]),t._v(" "),s("p",[t._v("现在, 假设在父进程为客户端 1 创建了子进程之后, 它接受一个新的客户端 2 的连接请求, 并返回一个新的已连接描述符(比如描述符 5), 如图 12-3 所示.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230908212108-06jcqcq.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图12-3 第三步: 服务器接受另一个连接请求")])]),t._v(" "),s("p",[t._v("然后, 父进程"),s("strong",[t._v("又派生另一个子进程, 这个子进程用已连接描述符 5 为它的客户端提供服务")]),t._v(", 如图 12-4 所示. 此时, 父进程正在等待下一个连接请求, 而"),s("strong",[t._v("两个子进程正在并发地为它们各自的客户端提供服务")]),t._v(".")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230908212202-ig8xloo.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图12-4 第四步: 服务器派生另一个子进程为新的客户端服务")])]),t._v(" "),s("h5",{attrs:{id:"_1-基于进程的并发服务器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-基于进程的并发服务器"}},[t._v("#")]),t._v(" 1.基于进程的并发服务器")]),t._v(" "),s("p",[t._v("代码 12-5 展示了一个基于进程的并发 echo 服务器的代码.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"csapp.h"')])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("echo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" connfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sigchld_handler")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sig"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("waitpid")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" WNOHANG"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" argc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" listenfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" connfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("socklen_t")]),t._v(" clientlen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sockaddr_storage")]),t._v(" clientaddr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("argc "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stderr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"usage: %s <port>\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Signal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SIGCHLD"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sigchld_handler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    listenfd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Open_listenfd")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        clientlen "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sockaddr_storage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        connfd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Accept")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("listenfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SA "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("clientaddr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("clientlen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fork")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Close")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("listenfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Child closes its listening socket */")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("echo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("connfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Child services client */")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Close")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("connfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Child closes connection with client */")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Child exits */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Close")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("connfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Parent closes connected socket (important!) */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 12-5 基于进程的并发 echo 服务器. 父进程派生一个子进程来处理每个新的连接请求")])]),t._v(" "),s("p",[t._v("第 29 行调用的 echo 函数来自于图 11-21. 关于这个服务器, 有几点重要内容需要说明:")]),t._v(" "),s("ul",[s("li",[t._v("首先, 通常服务器会运行很长的时间, 所以必须要包括一个 "),s("strong",[t._v("SIGCHLD")]),t._v(" 处理程序, 来"),s("strong",[t._v("回收僵死(zombie)子进程")]),t._v("的资源(第 4~9 行). 因为当 SIGCHLD 处理程序执行时, SIGCHLD 信号是阻塞的, 而 Linux 信号是不排队的, "),s("strong",[t._v("所以 SIGCHLD 处理程序必须准备好回收多个僵死子进程的资源")]),t._v(".")]),t._v(" "),s("li",[t._v("其次, "),s("strong",[t._v("父子进程必须关闭它们各自的 connfd")]),t._v("(分别为第 33 行和第 30 行)副本. 前面已经提到过的, 这对父进程而言尤为重要, 它必须关闭它的已连接描述符, 以避免内存泄漏.")]),t._v(" "),s("li",[t._v("最后, 因为套接字的文件表表项中的引用计数, 直到父子进程的 connfd 都关闭了, 到客户端的连接才会终止.")])]),t._v(" "),s("h5",{attrs:{id:"_2-进程的优劣"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-进程的优劣"}},[t._v("#")]),t._v(" 2.进程的优劣")]),t._v(" "),s("p",[t._v("对于在父, 子进程间共享状态信息, 进程有一个非常清晰的模型: "),s("strong",[t._v("共享文件表, 但是不共享用户地址空间")]),t._v(". 进程有独立的地址空间既是优点也是缺点. 这样一来, 一个进程不可能不小心覆盖另一个进程的虚拟内存, 这就消除了许多令人迷惑的错误一一这是一个明显的优点.")]),t._v(" "),s("p",[t._v("另一方面, "),s("strong",[t._v("独立的地址空间使得进程共享状态信息变得更加困难")]),t._v(". 为了共享信息, 它们必须使用显式的 "),s("strong",[t._v("IPC")]),t._v("(进程间通信)机制. (参见下面的旁注.) 基于进程的设计的另一个缺点是, 它们往往比较慢, 因为进程控制和 IPC 的开销很高.")]),t._v(" "),s("h4",{attrs:{id:"基于i-o多路复用的并发编程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基于i-o多路复用的并发编程"}},[t._v("#")]),t._v(" 基于I/O多路复用的并发编程")]),t._v(" "),s("p",[t._v("假设要求你编写一个 echo 服务器, 它也能对用户从标准输入键入的交互命令做出响应. 在这种情况下, 服务器必须"),s("strong",[t._v("响应两个互相独立的 I/O 事件")]),t._v(": 1)网络客户端发起连接请求, 2)用户在键盘上键入命令行. 我们先等待哪个事件呢? "),s("strong",[t._v("没有哪个选择是理想的")]),t._v(". 如果在 accept 中等待一个连接请求, 就不能响应输入的命令. 类似地, 如果在 read 中等待一个输入命令, 就不能响应任何连接请求.")]),t._v(" "),s("p",[t._v("针对这种困境的一个解决办法就是 "),s("strong",[t._v("I/O 多路复用")]),t._v("(I/O multiplexing)技术. 基本的思路就是"),s("mark",[s("strong",[t._v("使用 select 函数, 要求内核挂起进程, 只有在一个或多个I/O 事件发生后, 才将控制返回给应用程序")])]),t._v(", 就像在下面的示例中一样:")]),t._v(" "),s("ul",[s("li",[t._v("当集合 {0, 4} 中任意描述符"),s("strong",[t._v("准备好读")]),t._v("时返回.")]),t._v(" "),s("li",[t._v("当集合 {1, 2, 7} 中任意描述符"),s("strong",[t._v("准备好写")]),t._v("时返回.")]),t._v(" "),s("li",[t._v("如果在等待一个 I/O 事件发生时过了 152.13 秒, 就超时.")])]),t._v(" "),s("p",[t._v("select 是一个复杂的函数, 有许多不同的使用场景. 我们将只讨论第一种场景: "),s("strong",[t._v("等待一组描述符准备好读")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/select.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回已准备好的描述符的非零的个数, 若出错则为 -1.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("select")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fd_set "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("fdset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 处理描述符集合的宏.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("FD_ZERO")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd_set "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("fdset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("           "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Clear all bits in fdset */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("FD_CLR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fd_set "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("fdset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Clear bit fd in fdset */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("FD_SET")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fd_set "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("fdset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Turn on bit fd in fdset */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("FD_ISSET")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fd_set "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("fdset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Is bit fd in fdset on? */")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("p",[t._v("select 函数处理类型"),s("strong",[t._v("为 fd_set 的集合, 也叫做描述符集合")]),t._v(". 逻辑上, 我们将描述符集合看成一个大小为 n 的位向量(在 2.1 节中介绍过):")]),t._v(" "),s("p",[t._v("$$\nb_{n-1},\\cdots,b_1,b_0\n$$")]),t._v(" "),s("p",[t._v("每个位 "),s("span",{attrs:{"data-type":"text"}},[t._v("b")]),t._v("​"),s("sub",[t._v("k")]),t._v(" 对应于描述符 k. 当且仅当 "),s("span",{attrs:{"data-type":"text"}},[t._v("b")]),t._v("​"),s("sub",[t._v("k")]),t._v("​"),s("span",{attrs:{"data-type":"text"}},[t._v("=1")]),t._v(", 描述符 k 才表明是描述符集合的一个元素. 只允许你对"),s("strong",[t._v("描述符集合做三件事: 1)分配它们, 2)将一个此种类型的变量赋值给另一个变量, 3)用 FD_ZERO, FD_SET, FD_CLR 和 FD_ISSET 宏来修改和检查它们")]),t._v(".")]),t._v(" "),s("p",[t._v("针对我们的目的, select 函数有两个输入: 一个称为"),s("strong",[t._v("读集合")]),t._v("的描述符集合(fdset)和该读集合的基数(n)(实际上是任何描述符集合的最大基数). select 函数会"),s("strong",[t._v("一直阻塞")]),t._v(", 直到读集合中"),s("strong",[t._v("至少有一个描述符准备好可以读")]),t._v(". 当且仅当一个从该描述符读取一个字节的请求不会阻塞时, 描述符 k 就表示"),s("strong",[t._v("准备好可以读")]),t._v("了. select 有一个副作用, 它修改参数 fdset 指向的 fd_set, 指明读集合的一个子集, 称为"),s("strong",[t._v("准备好集合")]),t._v("(ready set), 这个集合是由读集合中准备好可以读了的描述符组成的. 该函数返回的值指明了准备好集合的基数. 注意, 由于这个副作用, 必须"),s("strong",[t._v("在每次调用 select 时都更新读集合")]),t._v(".")]),t._v(" "),s("p",[t._v("理解 select 的最好办法是研究一个具体例子. 代码 12-6 展示了可以如何利用 select 来实现一个迭代 echo 服务器, 它也可以接受标准输入上的用户命令.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"csapp.h"')])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("echo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" connfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("command")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" argc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" listenfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" connfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("socklen_t")]),t._v(" clientlen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sockaddr_storage")]),t._v(" clientaddr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    fd_set read_set"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ready_set"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("argc "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stderr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"usage: %s <port>\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    listenfd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Open_listenfd")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("FD_ZERO")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("read_set"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("              "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Clear read set */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("FD_SET")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("STDIN_FILENO"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("read_set"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Add stdin to read set */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("FD_SET")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("listenfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("read_set"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Add listenfd to read set */")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        ready_set "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" read_set"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Select")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("listenfd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("ready_set"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("FD_ISSET")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("STDIN_FILENO"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("ready_set"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("command")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Read command line from stdin */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("FD_ISSET")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("listenfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("ready_set"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            clientlen "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sockaddr_storage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            connfd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Accept")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("listenfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SA "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("clientaddr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("clientlen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("echo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("connfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Echo client input until EOF */")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Close")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("connfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("command")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MAXLINE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fgets")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" MAXLINE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stdin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* EOF */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Process the input command */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br"),s("span",{staticClass:"line-number"},[t._v("39")]),s("br"),s("span",{staticClass:"line-number"},[t._v("40")]),s("br"),s("span",{staticClass:"line-number"},[t._v("41")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 12-6 使用 I/O 多路复用的迭代 echo 服务器. 服务器使用 select 等待监听描述符上的连接请求和标准输人上的命令")])]),t._v(" "),s("p",[t._v("一开始, 我们用图 11-19 中的 open_listenfd 函数"),s("strong",[t._v("打开一个监听描述符")]),t._v("(第 16 行), 然后使用 FD_ZERO "),s("strong",[t._v("创建一个空的读集合")]),t._v("(第 18 行):")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230908212723-uszjkp7.png",alt:"image"}})]),t._v(" "),s("p",[t._v("接下来, 在第 19 和 20 行中, 我们定义"),s("strong",[t._v("由描述符 0(标准输入)和描述符 3(监听描述符)组成的读集合")]),t._v(":")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230908212741-lfln5iq.png",alt:"image"}})]),t._v(" "),s("p",[t._v("在这里, 我们开始典型的"),s("strong",[t._v("服务器循环")]),t._v(". 但是我们不调用 accept 函数来等待一个连接请求, 而是"),s("strong",[t._v("调用 select 函数, 这个函数会一直阻塞, 直到监听描述符或者标准输入准备好可以读(第 24 行)")]),t._v(" . 例如, 下面是当用户按回车键, 因此使得标准输入描述符变为可读时, select 会返回的 ready_set 的值:")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230908212809-149001k.png",alt:"image"}})]),t._v(" "),s("p",[s("strong",[t._v("一旦 select 返回, 就用 FD_ISSET 宏指令来确定哪个描述符准备好可以读了")]),t._v(". 如果是"),s("strong",[t._v("标准输入准备")]),t._v("好了(第 25 行), 就调用 command 函数, 该函数在返回到主程序前, 会读, 解析和响应命令. 如果是"),s("strong",[t._v("监听描述符")]),t._v("准备好了(第 27 行), 就调用 accept 来得到一个已连接描述符, 然后调用图 11-22 中的 echo 函数, 它会将来自客户端的每一行又回送回去, 直到客户端关闭这个连接中它的那一端.")]),t._v(" "),s("p",[t._v("虽然这个程序是使用 select 的一个很好示例, 但是它仍然留下了一些问题待解决. 问题是一旦它连接到某个客户端, 就会连续回送输入行, 直到客户端关闭这个连接中它的那一端. 因此, 如果键入一个命令到标准输入, 你将不会得到响应, 直到服务器和客户端之间结 束. 一个更好的方法是"),s("strong",[t._v("更细粒度的多路复用, 服务器每次循环(至多)回送一个文本行")]),t._v(".")]),t._v(" "),s("h5",{attrs:{id:"_1-基于i-o多路复用的并发事件驱动服务器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-基于i-o多路复用的并发事件驱动服务器"}},[t._v("#")]),t._v(" 1.基于I/O多路复用的并发事件驱动服务器")]),t._v(" "),s("p",[t._v("I/O 多路复用可以用做并发"),s("strong",[t._v("事件驱动")]),t._v("(event-driven)程序的基础, 在事件驱动程序中, 某些事件会导致流向前推进. 一般的思路是将逻辑流模型化为状态机. 不严格地说, 一个"),s("strong",[t._v("状态机")]),t._v("(state machine)就是一组"),s("strong",[t._v("状态")]),t._v("(state), "),s("strong",[t._v("输入事件")]),t._v("(input event)和"),s("strong",[t._v("转移")]),t._v("(transition), 其中转移是将状态和输入事件映射到状态. 每个转移是将一个(输入状态, 输入事件)对映射到一个输出状态. "),s("strong",[t._v("自循环")]),t._v("(self-loop)是同一输入和输岀状态之间的转移. 通常把状态机画成有向图, 其中节点表示状态, 有向弧表示转移, 而弧上的标号表示输入事件. 一个状态机从某种初始状态开始执行. 每个输入事件都会引发一个从当前状态到下一状态的转移.")]),t._v(" "),s("p",[t._v("对于每个新的客户端 k, 基于 I/O 多路复用的并发服务器会创建一个新的状态机 "),s("span",{attrs:{"data-type":"text"}},[t._v("s")]),t._v("​"),s("sub",[t._v("k")]),t._v(", 并将它和已连接描述符联系起来. 如图 12-7 所示, 每个状态机 "),s("span",{attrs:{"data-type":"text"}},[t._v("s")]),t._v("​"),s("sub",[t._v("k")]),t._v(' 都有一个状态("等待描述符 '),s("span",{attrs:{"data-type":"text"}},[t._v("d")]),t._v("​"),s("sub",[t._v("k")]),t._v(' 准备好可读"), 一个输入事件("描述符 '),s("span",{attrs:{"data-type":"text"}},[t._v("d")]),t._v("​"),s("sub",[t._v("k")]),t._v(' 准备好可以读了")和一个转移("从描述符 '),s("span",{attrs:{"data-type":"text"}},[t._v("d")]),t._v("​"),s("sub",[t._v("k")]),t._v(' 读一个文本行").')]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230908213019-1bw1k68.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图12-7 并发事件驱动 echo 服务器中逻辑流的状态机")])]),t._v(" "),s("p",[s("strong",[t._v("服务器使用 I/O 多路复用, 借助 select 函数检测输入事件的发生")]),t._v(". 当每个已连接描述符准备好可读时, 服务器就为相应的状态机执行转移, 在这里就是从描述符读和写回一个文本行.")]),t._v(" "),s("p",[t._v("代码 12-8 展示了一个"),s("strong",[t._v("基于 I/O 多路复用的并发事件驱动服务器")]),t._v("的完整示例代码. 一个 pool 结构里维护着活动客户端的集合(第 3 ~ 11 行). 在调用 init_pool 初始化池(第 27 行)之后, 服务器进入一个无限循环. 在循环的每次迭代中, "),s("strong",[t._v("服务器调用 select 函数来检测两种不同类型的输入事件")]),t._v(": a)来自一个新客户端的连接请求到达, b)一个已存在的客户端的已连接描述符准备好可以读了. 当一个连接请求到达时(第 35 行), 服务器打开连接(第 37 行), 并调用 add_client 函数, 将该客户端添加到池里(第 38 行). 最后, 服务器调用 check_clients 函数, 把来自每个准备好的已连接描述符的一个文本行回送回去(第 42 行).")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"csapp.h"')])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Represents a pool of connected descriptors */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" maxfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Largest descriptor in read_set */")]),t._v("\n    fd_set read_set"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Set of all active descriptors */")]),t._v("\n    fd_set ready_set"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Subset of descriptors ready for reading */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" nready"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Number of ready descriptors from select */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" maxi"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* High water index into client array */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" clientfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("FD_SETSIZE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Set of active descriptors */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("rio_t")]),t._v(" clientrio"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("FD_SETSIZE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Set of active read buffers */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" pool"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" byte_cnt "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Counts total bytes received by server */")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" argc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" listenfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" connfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("socklen_t")]),t._v(" clientlen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sockaddr_storage")]),t._v(" clientaddr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" pool pool"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("argc "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stderr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"usage: %s <port>\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    listenfd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Open_listenfd")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("init_pool")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("listenfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("pool"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Wait for listening/connected descriptor(s) to become ready */")]),t._v("\n        pool"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ready_set "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pool"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("read_set"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        pool"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nready "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Select")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pool"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("maxfd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("pool"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ready_set"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* If listening descriptor ready, add new client to pool */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("FD_ISSET")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("listenfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("pool"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ready_set"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            clientlen "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sockaddr_storage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            connfd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Accept")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("listenfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SA "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("clientaddr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("clientlen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add_client")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("connfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("pool"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  \n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Echo a text line from each ready connected descriptor */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("check_clients")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("pool"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br"),s("span",{staticClass:"line-number"},[t._v("39")]),s("br"),s("span",{staticClass:"line-number"},[t._v("40")]),s("br"),s("span",{staticClass:"line-number"},[t._v("41")]),s("br"),s("span",{staticClass:"line-number"},[t._v("42")]),s("br"),s("span",{staticClass:"line-number"},[t._v("43")]),s("br"),s("span",{staticClass:"line-number"},[t._v("44")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 12-8 基于 I/O 多路复用的并发 echo 服务器. 每次服务器迭代都回送来自每个准备好的描述符的文本行")])]),t._v(" "),s("p",[t._v("init_pool 函数(代码 12-9)初始化客户端池. "),s("strong",[t._v("clientfd 数组表示已连接描述符的集合")]),t._v(", 其中整数 -1 表示一个可用的槽位. 初始时, 已连接描述符集合是空的(第 5 ~ 7 行), 而且"),s("strong",[t._v("监听描述符是 select 读集合中唯一的描述符")]),t._v("(第 10 ~ 12 行).")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("init_pool")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" listenfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" pool "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Initially, there are no connected descriptors */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("maxi "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" FD_SETSIZE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("clientfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Initially, listenfd is only member of select read set */")]),t._v("\n    p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("maxfd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" listenfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("FD_ZERO")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("read_set"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("FD_SET")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("listenfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("read_set"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 12-9 init_pool 初始化活动客户端池")])]),t._v(" "),s("p",[t._v("add_client 函数(代码 12-10)添加一个新的客户端到"),s("strong",[t._v("活动客户端池")]),t._v("中. 在 clientfd 数组中找到一个空槽位后, 服务器将这个已连接描述符添加到数组中, 并初始化相应的 RIO 读缓冲区, 这样一来就能够对这个描述符调用 rio_readlineb(第 8 ~ 9 行). 然后, 将这个已连接描述符添加到 select 读集合(第 12 行), 并更新该池的一些全局属性. maxfd 变量(第 15 ~ 16 行)记录了 select 的最大文件描述符. maxi 变量(第 17 ~ 18 行)记录的是到 clientfd 数组的最大索引, 这样 check_clients 函数就无需搜索整个数组了.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add_client")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" connfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" pool "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("nready"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" FD_SETSIZE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Find an available slot */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("clientfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Add connected descriptor to the pool */")]),t._v("\n            p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("clientfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" connfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Rio_readinitb")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("clientrio"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" connfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Add the descriptor to descriptor set */")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("FD_SET")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("connfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("read_set"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Update max descriptor and pool high water mark */")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("connfd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("maxfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("maxfd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" connfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("maxi"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("maxi "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" FD_SETSIZE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Couldn’t find an empty slot */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("app_error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"add_client error: Too many clients"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 12-10 add_client 向池中添加一个新的客户端连接")])]),t._v(" "),s("p",[t._v("代码 12-11 中的 check_clients 函数"),s("strong",[t._v("回送来自每个准备好的已连接描述符的一个文本行")]),t._v(". 如果成功地从描述符读取了一个文本行, 那么就将该文本行回送到客户端(第 15 ~ 18 行). 注意, 在第 15 行维护着一个从所有客户端接收到的全部字节的累计值. 如果因为客户端关闭这个连接中它的那一端, 检测到 EOF, 那么将关闭这边的连接端(第 23 行), 并从池中清除掉这个描述符(第 24 ~ 25 行).")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("check_clients")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pool "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" connfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MAXLINE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("rio_t")]),t._v(" rio"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("maxi"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("nready "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        connfd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("clientfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        rio "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("clientrio"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* If the descriptor is ready, echo a text line from it */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("connfd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("FD_ISSET")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("connfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ready_set"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("nready"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Rio_readlineb")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rio"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" MAXLINE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                byte_cnt "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Server received %d (%d total) bytes on fd %d\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                       n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" byte_cnt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" connfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Rio_writen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("connfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* EOF detected, remove descriptor from pool */")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Close")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("connfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("FD_CLR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("connfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("read_set"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("clientfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 12-11 check_clients 服务准备好的客户端连接")])]),t._v(" "),s("p",[t._v("根据图 12-7 中的有限状态模型, "),s("strong",[t._v("select 函数检测到输入事件, 而 add_client 函数创建一个新的逻辑流(状态机). check_clients 函数回送输入行, 从而执行状态转移, 而且当客户端完成文本行发送时, 它还要删除这个状态机")]),t._v(".")]),t._v(" "),s("h5",{attrs:{id:"_2-i-o多路复用技术的优劣"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-i-o多路复用技术的优劣"}},[t._v("#")]),t._v(" 2.I/O多路复用技术的优劣")]),t._v(" "),s("p",[t._v("代码 12-8 中的服务器提供了一个很好的基于 I/O 多路复用的事件驱动编程的优缺点示例. "),s("strong",[t._v("事件驱动设计的一个优点是, 它比基于进程的设计给了程序员更多的对程序行为的控制.")]),t._v("  例如, 可以设想编写一个事件驱动的并发服务器, 为某些客户端提供它们需要的服务, 而这对于基于进程的并发服务器来说, 是很困难的.")]),t._v(" "),s("p",[s("strong",[t._v("另一个优点是, 一个基于 I/O 多路复用的事件驱动服务器是运行在单一进程上下文中的, 因此每个逻辑流都能访问该进程的全部地址空间.")]),t._v("  这使得在"),s("strong",[t._v("流之间共享数据")]),t._v("变得很容易. 一个与作为单个进程运行相关的优点是, 你可以利用熟悉的调试工具, 例如 GDB, 来调试你的并发服务器, 就像对顺序程序那样. 最后, 事件驱动设计常常比基于进程的设计要高效得多, 因为它们"),s("strong",[t._v("不需要进程上下文切换")]),t._v("来调度新的流.")]),t._v(" "),s("p",[s("strong",[t._v("事件驱动设计一个明显的缺点就是编码复杂.")]),t._v('  这里事件驱动的并发 echo 服务器需要的代码比基于进程的服务器多三倍, 并且很不幸, 随着并发粒度的减小, 复杂性还会上升. 这里的粒度是指每个逻辑流每个时间片执行的指令数量. 例如, 在示例并发服务器中, 并发粒度就是读一个完整的文本行所需要的指令数量. 只要某个逻辑流正忙于读一个文本行, 其他逻辑流就不可能有进展. 对上述例子来说这没有问题, 但是它使得在 "故意只发送部分文本行然后就停止" 的恶意客户端的攻击面前, 我们的事件驱动服务器显得很脆弱. 修改事件驱动服务器来处理部分文本行不是一个简单的任务, 但是基于进程的设计却能处理得很好, 而且是自动处理的. '),s("strong",[t._v("基于事件的设计另一个重要的缺点是它们不能充分利用多核处理器.")])]),t._v(" "),s("h4",{attrs:{id:"基于线程的并发编程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基于线程的并发编程"}},[t._v("#")]),t._v(" 基于线程的并发编程")]),t._v(" "),s("p",[t._v("到目前为止已经看到了"),s("strong",[t._v("两种创建并发逻辑流")]),t._v("的方法. 在第一种方法中, 为每个流使用了单独的进程. 内核会自动调度每个进程. 而每个进程有它自己的私有地址空间, 这使得流共享数据很困难. 在第二种方法中, 创建自己的逻辑流, 并利用 I/O 多路复用来显式地调度流. 因为只有一个进程, 所有的流共享整个地址空间. 本节介绍第三种方法--"),s("mark",[s("strong",[t._v("基于线程, 它是这两种方法的混合")])]),t._v(".")]),t._v(" "),s("p",[s("strong",[t._v("线程")]),t._v("(thread)就是运行在进程上下文中的逻辑流. 在本书里迄今为止, 程序都是由每个进程中一个线程组成的. 但是现代系统也允许我们编写一个进程里同时运行多个线程的程序. "),s("strong",[t._v("线程由内核自动调度")]),t._v(". 每个线程都有它自己的"),s("strong",[t._v("线程上下文")]),t._v("(thread context), 包括一个唯一的整数"),s("strong",[t._v("线程 ID")]),t._v("(Thread ID, TID), 栈, 栈指针, 程序计数器, 通用目的寄存器和条件码. "),s("mark",[s("strong",[t._v("所有的运行在一个进程里的线程共享该进程的整个虚拟地址空间")])]),t._v(".")]),t._v(" "),s("p",[s("strong",[t._v("基于线程的逻辑流结合了基于进程和基于 I/O 多路复用的流的特性")]),t._v(". 同进程一样, 线程由内核自动调度, 并且内核通过一个整数 ID 来识别线程. 同基于 I/O 多路复用的流一样, 多个线程运行在单一进程的上下文中, 因此共享这个进程虚拟地址空间的所有内容, 包括它的代码, 数据, 堆, 共享库和打开的文件.")]),t._v(" "),s("h5",{attrs:{id:"_1-线程执行模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-线程执行模型"}},[t._v("#")]),t._v(" 1.线程执行模型")]),t._v(" "),s("p",[t._v("多线程的执行模型在某些方面和多进程的执行模型是相似的. 思考图 12-12 中的示例. 每个进程开始生命周期时都是单一线程, 这个线程称为"),s("strong",[t._v("主线程")]),t._v("(main thread). 在某一时刻, 主线程创建一个"),s("strong",[t._v("对等线程")]),t._v("(peer thread), 从这个时间点开始, 两个线程就并发地运行. 最后, 因为主线程执行一个慢速系统调用, 例如 read 或者 sleep, 或者因为被系统的间隔计时器中断, 控制就会通过上下文切换传递到对等线程. 对等线程会执行一段时间, 然后控制传递回主线程, 依次类推.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230909105943-rzutsjp.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图12-12 并发线程执行")])]),t._v(" "),s("p",[t._v("在一些重要的方面, 线程执行是不同于进程的. 因为"),s("strong",[t._v("一个线程的上下文要比一个进程的上下文小得多, 线程的上下文切换要比进程的上下文切换快得多")]),t._v(". 另一个不同就是线程不像进程那样, 不是按照严格的父子层次来组织的. 和一个进程相关的线程组成一个对等(线程)池, 独立于其他线程创建的线程. "),s("strong",[t._v("主线程和其他线程的区别仅在于它总是进程中第一个运行的线程. 对等(线程)池概念的主要影响是, 一个线程可以杀死它的任何对等线程, 或者等待它的任意对等线程终止. 另外, 每个对等线程都能读写相同的共享数据")]),t._v(".")]),t._v(" "),s("h5",{attrs:{id:"_2-posix线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-posix线程"}},[t._v("#")]),t._v(" 2.Posix线程")]),t._v(" "),s("p",[s("strong",[t._v("Posix")]),t._v(" 线程(Pthreads)是在 C 程序中处理线程的一个标准接口. 它最早出现在 1995 年, 而且在所有的 Linux 系统上都可用. Pthreads 定义了大约 60 个函数, 允许"),s("strong",[t._v("程序创建, 杀死和回收线程, 与对等线程安全地共享数据")]),t._v(", 还可以通知对等线程系统状态的变化.")]),t._v(" "),s("p",[t._v("代码 12-13 展示了一个简单的 Pthreads 程序.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"csapp.h"')])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("vargp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pthread_t")]),t._v(" tid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pthread_create")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("tid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" thread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pthread_join")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("vargp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Thread routine */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello, world!\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 12-13 hello.c: 使用 Pthreads 的 “Hello, world!” 程序")])]),t._v(" "),s("p",[t._v('主线程创建一个对等线程, 然后等待它的终止. 对等线程输岀 "Hello, world!\\n" 并且终止. 当主线程检测到对等线程终止后, 它就通过'),s("strong",[t._v("调用 exit 终止该进程")]),t._v(". 这是我们看到的第一个线程化的程序, 所以仔细地解析它. 线程的代码和本地数据被封装在一个"),s("strong",[t._v("线程例程")]),t._v("(thread routine)中. 正如第二行里的原型所示, 每个线程例程都以一个"),s("strong",[t._v("通用指针作为输入, 并返回一个通用指针")]),t._v(". 如果想传递多个参数给线程例程, 那么应该将参数放到一个结构中, 并传递一个指向该结构的指针. 相似地, 如果想要线程例程返回多个参数, 可以返回一个指向一个结构的指针.")]),t._v(" "),s("p",[t._v("第 4 行标出了主线程代码的开始. 主线程声明了一个"),s("strong",[t._v("本地变量 tid, 可以用来存放对等线程的 ID")]),t._v("(第 6 行). 主线程通过调用 pthread_create 函数"),s("strong",[t._v("创建一个新的对等线程")]),t._v("(第 7 行). 当对 pthread_create 的调用返回时, 主线程和新创建的对等线程同时运行, 并且 tid 包含新线程的 ID. 通过在第 8 行调用 pthread_join, 主线程等待对等线程终止. 最后, 主线程调用 exit(第 9 行), 终止当时运行在这个进程中的所有线程(在这个示例中就只有主线程).")]),t._v(" "),s("p",[t._v("第 12 ~ 16 行定义了对等线程的例程. 它只打印一个字符串, 然后就通过执行第 15 行中的 return 语句来终止对等线程.")]),t._v(" "),s("h5",{attrs:{id:"_3-创建线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-创建线程"}},[t._v("#")]),t._v(" 3.创建线程")]),t._v(" "),s("p",[t._v("线程通过"),s("strong",[t._v("调用 pthread_create 函数来创建其他线程")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<pthread.h>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("func"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 若成功则返回 0, 若出错则为非零.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pthread_create")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pthread_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("tid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pthread_attr_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("attr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                   func "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("arg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("pthread_create 函数创建一个新的线程, 并带着一个输入变量 arg, 在新线程的上下文中运行线程例程 f. 能用 attr 参数来改变新创建线程的默认属性. 改变这些属性已超出我们学习的范围, 本书的示例中, 总是用一个为 NULL 的参数来调用 pthread_create 函数.")]),t._v(" "),s("p",[t._v("当 pthread_create 返回时, 参数 tid 包含"),s("strong",[t._v("新创建线程的 ID")]),t._v(". 新线程可以通过调用 pthread_self 函数来获得它自己的线程 ID.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<pthread.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回调用者的线程 ID.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pthread_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pthread_self")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("h5",{attrs:{id:"_4-终止线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-终止线程"}},[t._v("#")]),t._v(" 4.终止线程")]),t._v(" "),s("p",[t._v("一个线程是以下列方式之一来终止的:")]),t._v(" "),s("ul",[s("li",[t._v("当顶层的"),s("strong",[t._v("线程例程返回")]),t._v("时, 线程会"),s("strong",[t._v("隐式地")]),t._v("终止.")]),t._v(" "),s("li",[t._v("通过调用 pthread_exit 函数, 线程会"),s("strong",[t._v("显式地")]),t._v("终止. 如果主线程调用 pthread_exit, 它会等待所有其他对等线程终止, 然后再终止主线程和整个进程, 返回值为 thread_return.")])]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<pthread.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从不返回.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pthread_exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("thread_return"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("ul",[s("li",[t._v("某个对"),s("strong",[t._v("等线程调")]),t._v("用 Linux 的 exit 函数, 该函数终止进程以及所有与该进程相关的线程.")]),t._v(" "),s("li",[t._v("另一个对等线程通过以当前线程 ID 作为参数调用 pthread_Cancel 函数来终止当前线程.")])]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<pthread.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 若成功则返回 0, 若出错则为非零.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pthread_cancel")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pthread_t")]),t._v(" tid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("h5",{attrs:{id:"_5-回收已终止线程的资源"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-回收已终止线程的资源"}},[t._v("#")]),t._v(" 5.回收已终止线程的资源")]),t._v(" "),s("p",[t._v("线程通过"),s("strong",[t._v("调用 pthread_join 函数等待其他线程终止")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<pthread.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 若成功则返回 0, 若出错则为非零.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pthread_join")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pthread_t")]),t._v(" tid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("thread_return"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("pthread_join 函数会"),s("strong",[t._v("阻塞")]),t._v(", 直到线程 tid 终止, 将线程例程返回的通用 "),s("strong",[t._v("void")]),t._v(" 指针赋值为 thread_return 指向的位置, 然后回收已终止线程占用的所有内存资源.")]),t._v(" "),s("p",[t._v("注意, 和 Linux 的 wait 函数不同, pthread_join 函数只能等待一个指定的线程终止. 没有办法让 pthread_wait 等待任意一个线程终止. 这使得代码更加复杂, 因为它迫使我们去使用其他一些不那么直观的机制来检测进程的终止. 实际上, Stevens 在【110】中就很有说服力地论证了这是规范中的一个错误.")]),t._v(" "),s("h5",{attrs:{id:"_6-分离线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-分离线程"}},[t._v("#")]),t._v(" 6.分离线程")]),t._v(" "),s("p",[t._v("在任何一个时间点上, 线程是"),s("strong",[t._v("可结合的")]),t._v("(joinable)或者是"),s("strong",[t._v("分离的")]),t._v("(detached). "),s("strong",[t._v("一个可结合的线程能够被其他线程收回和杀死. 在被其他线程回收之前, 它的内存资源(例如栈)是不释放的. 相反, 一个分离的线程是不能被其他线程回收或杀死的. 它的内存资源在它终止时由系统自动释放")]),t._v(".")]),t._v(" "),s("p",[t._v("默认情况下, 线程被创建成可结合的. 为了避免内存泄漏, 每个可结合线程都应该要么被其他线程显式地收回, 要么通过调用 pthread_detach 函数被分离.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<pthread.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 若成功则返回 0, 若出错则为非零.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pthread_detach")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pthread_t")]),t._v(" tid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("pthread_detach 函数分离可结合线程 tid. 线程能够通过以 pthread_self() 参数的 pthread_detach 调用来分离它们自己.")]),t._v(" "),s("p",[t._v("尽管一些例子会使用可结合线程, 但是在现实程序中, 有很好的理由要"),s("strong",[t._v("使用分离的线程")]),t._v(". 例如, 一个高性能 Web 服务器可能在每次收到 Web 浏览器的连接请求时都创建一个新的对等线程. 因为每个连接都是由一个单独的线程独立处理的, 所以对于服务器而言, 就很没有必要(实际上也不愿意)显式地等待每个对等线程终止. 在这种情况下, 每个对等线程都应该在它开始处理请求之前分离它自身, 这样就能在它终止后回收它的内存资源了.")]),t._v(" "),s("h5",{attrs:{id:"_7-初始化线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-初始化线程"}},[t._v("#")]),t._v(" 7.初始化线程")]),t._v(" "),s("p",[t._v("pthread_once 函数允许你"),s("strong",[t._v("初始化与线程例程相关的状态")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<pthread.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pthread_once_t")]),t._v(" once_control "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" PTHREAD_ONCE_INIT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 总是返回 0.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pthread_once")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pthread_once_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("once_control"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("init_routine"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[t._v("once_control 变量是一个全局或者静态变量, 总是被初始化为 "),s("strong",[t._v("PTHREAD_ONCE_INIT")]),t._v(". 当你第一次用参数 once_control 调用 pthread_once 时, 它调用 init_routine, 这是一个没有输入参数, 也不返回什么的函数. 接下来的以 once_control 为参数的 pthread_once 调用不做任何事情. 无论何时, 当需要动态初始化多个线程共享的全局变量时, pthread_once 函数是很有用的. 后面会有一个示例.")]),t._v(" "),s("h5",{attrs:{id:"_8-基于线程的并发服务器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-基于线程的并发服务器"}},[t._v("#")]),t._v(" 8.基于线程的并发服务器")]),t._v(" "),s("p",[t._v("代码 12-14 展示了"),s("strong",[t._v("基于线程的并发 echo 服务器")]),t._v("的代码.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"csapp.h"')])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("echo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" connfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("vargp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" argc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" listenfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("connfdp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("socklen_t")]),t._v(" clientlen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sockaddr_storage")]),t._v(" clientaddr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pthread_t")]),t._v(" tid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("argc "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stderr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"usage: %s <port>\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    listenfd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Open_listenfd")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        clientlen "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sockaddr_storage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        connfdp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Malloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("connfdp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Accept")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("listenfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SA "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("clientaddr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("clientlen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pthread_create")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("tid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" thread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" connfdp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Thread routine */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("vargp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" connfd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("vargp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pthread_detach")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pthread_self")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Free")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vargp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("echo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("connfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Close")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("connfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 12-14 基于线程的并发 echo 服务器")])]),t._v(" "),s("p",[t._v("整体结构类似于基于进程的设计. "),s("strong",[t._v("主线程不断地等待连接请求, 然后创建一个对等线程处理该请求")]),t._v(". 虽然代码看似简单, 但是有几个普遍而且有些微妙的问题需要更仔细地看一看. 第一个问题是当调用 pthread_create 时, 如何将已连接描述符传递给对等线程. 最明显的方法就是传递一个指向这个描述符的指针, 就像下面这样")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("connfd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Accept")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("listenfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SA "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("clientaddr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("clientlen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pthread_create")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("tid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" thread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("connfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("然后, 让对等线程间接引用这个指针, 并将它赋值给一个局部变量, 如下所示")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("vargp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" connfd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("vargp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("然而, 这样可能会出错, 因为它在对等线程的赋值语句和主线程的 accept 语句间引入了"),s("strong",[t._v("竞争")]),t._v("(race). 如果赋值语句在下一个 accept 之前完成, 那么对等线程中的局部变量 connfd 就得到正确的描述符值. 然而, 如果赋值语句是在 accept 之后才完成的, 那么对等线程中的局部变量 connfd 就得到下一次连接的描述符值. 那么不幸的结果就是, 现在两个线程在同一个描述符上执行输入和输出. 为了避免这种潜在的致命竞争, "),s("strong",[t._v("必须将 accept 返回的每个已连接描述符分配到它自己的动态分配的内存块")]),t._v(", 如第 20 ~ 21 行所示. 后面会在 12.7.4 节中回过来讨论竞争的问题.")]),t._v(" "),s("p",[t._v("另一个问题是在线程例程中避免内存泄漏. 既然不显式地收回线程, 就必须分离每个线程, 使得在它终止时它的内存资源能够被收回(第 31 行). 更进一步, 必须小心释放主线程分配的内存块(第 32 行).")]),t._v(" "),s("h4",{attrs:{id:"多线程程序中的共享变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多线程程序中的共享变量"}},[t._v("#")]),t._v(" 多线程程序中的共享变量")]),t._v(" "),s("p",[t._v("从程序员的角度来看, 线程很有吸引力的一个方面是"),s("strong",[t._v("多个线程很容易共享相同的程序变量")]),t._v(". 然而, 这种共享也是很棘手的. 为了编写正确的多线程程序, 必须对所谓的共享以及它是如何工作的有很清楚的了解.")]),t._v(" "),s("p",[t._v("为了理解 C 程序中的一个变量是否是共享的, 有一些基本的问题要解答:")]),t._v(" "),s("ol",[s("li",[t._v("线程的基础内存模型是什么?")]),t._v(" "),s("li",[t._v("根据这个模型, 变量实例是如何映射到内存的?")]),t._v(" "),s("li",[t._v("最后, 有多少线程引用这些实例? 一个变量是"),s("strong",[t._v("共享的")]),t._v(", 当且仅当多个线程引用这个变量的某个实例.")])]),t._v(" "),s("p",[t._v("为了对共享的讨论具体化, 将使用代码 12-15 中的程序作为运行示例. 尽管有些人为的痕迹, 但是它仍然值得研究, 因为它说明了关于共享的许多细微之处. 示例程序由"),s("strong",[t._v("一个创建了两个对等线程的主线程组成. 主线程传递一个唯一的 ID 给每个对等线程, 每个对等线程利用这个 ID 输出一条个性化的信息, 以及调用该线程例程的总次数")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"csapp.h"')])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("N")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")])])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("vargp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Global variable */")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pthread_t")]),t._v(" tid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("msgs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("N"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello from foo"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello from bar"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    ptr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" msgs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" N"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pthread_create")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("tid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" thread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pthread_exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("vargp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" myid "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("vargp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" cnt "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[%d]: %s (cnt=%d)\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" myid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("myid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("cnt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 12-15 说明共享不同方面的示例程序")])]),t._v(" "),s("h5",{attrs:{id:"_1-线程内存模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-线程内存模型"}},[t._v("#")]),t._v(" 1.线程内存模型")]),t._v(" "),s("p",[t._v("一组并发线程运行在一个进程的上下文中. "),s("mark",[s("strong",[t._v("每个线程都有它自己独立的线程上下文, 包括线程 ID, 栈, 栈指针, 程序计数器, 条件码和通用目的寄存器值. 每个线程和其他线程一起共享进程上下文的剩余部分. 这包括整个用户虚拟地址空间, 它是由只读文本(代码), 读/写数据, 堆以及所有的共享库代码和数据区域组成的. 线程也共享相同的打开文件的集合")])]),t._v(".")]),t._v(" "),s("p",[t._v("从实际操作的角度来说, "),s("mark",[s("strong",[t._v("让一个线程去读或写另一个线程的寄存器值是不可能的. 另一方面, 任何线程都可以访问共享虚拟内存的任意位置. 如果某个线程修改了一个内存位置, 那么其他每个线程最终都能在它读这个位置时发现这个变化. 因此, 寄存器是从不共享的, 而虚拟内存总是共享的")])]),t._v(".")]),t._v(" "),s("p",[t._v("各自独立的线程栈的内存模型不是那么整齐清楚的. 这些栈被保存在虚拟地址空间的栈区域中, 并且通常是被相应的线程独立地访问的. 这里说通常而不是总是, 是因为不同的线程栈是不对其他线程设防的. 所以, 如果一个线程以某种方式得到一个指向其他线程栈的指针, 那么它就可以读写这个栈的任何部分. 示例程序在第 26 行展示了这一点, 其中对等线程直接通过全局变量 ptr 间接引用主线程的栈的内容.")]),t._v(" "),s("h5",{attrs:{id:"_2-将变量映射到内存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-将变量映射到内存"}},[t._v("#")]),t._v(" 2.将变量映射到内存")]),t._v(" "),s("p",[t._v("多线程的 C 程序中变量根据它们的"),s("strong",[t._v("存储类型被映射到虚拟内存")]),t._v(":")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("全局变量.")]),t._v("  全局变量是定义在函数之外的变量. 在运行时, "),s("strong",[t._v("虚拟内存的读/写区域只包含每个全局变量的一个实例")]),t._v(", 任何线程都可以引用. 例如, 第 5 行声明的全局变量 ptr 在虚拟内存的读/写区域中有一个运行时实例. 当一个变量只有一个实例时, 我们只用变量名(在这里就是 ptr)来表示这个实例.")]),t._v(" "),s("li",[s("strong",[t._v("本地自动变量.")]),t._v("  本地自动变量就是"),s("strong",[t._v("定义在函数内部但是没有 static 属性的变量")]),t._v(". 在运行时, "),s("strong",[t._v("每个线程的栈都包含它自己的所有本地自动变量的实例")]),t._v(". 即使多个线程执行同一个线程例程时也是如此. 例如, 有一个本地变量 tid 的实例, 它保存在主线程的栈中. 我们用 "),s("strong",[t._v("tid.m")]),t._v(" 来表示这个实例. 再来看一个例子, 本地变量 myid 有两个实例, 一个在对等线程. 的栈内, 另一个在对等线程 1 的栈内. 我们将这两个实例分别表示为 "),s("strong",[t._v("myid.p0")]),t._v(" 和 "),s("strong",[t._v("myid.p1")]),t._v(".")]),t._v(" "),s("li",[s("strong",[t._v("本地静态变量.")]),t._v("  本地静态变量是"),s("strong",[t._v("定义在函数内部并有 static 属性的变量")]),t._v(". 和全局变量一样, 虚拟内存的读/写区域只包含在程序中声明的每个本地静态变量的一个实例. 例如, 即使示例程序中的每个对等线程都在第 25 行声明了 cnt, 在运行时, 虚拟内存的读/写区域中也只有一个 cnt 的实例. 每个对等线程都读和写这个实例.")])]),t._v(" "),s("h5",{attrs:{id:"_3-共享变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-共享变量"}},[t._v("#")]),t._v(" 3.共享变量")]),t._v(" "),s("p",[t._v("我们说一个变量 v 是共享的, 当且仅当它的一个实例被一个以上的线程引用. 例如, 示例程序中的变量 cnt 就是共享的, 因为它只有一个运行时实例, 并且这个实例被两个对等线程引用. 在另一方面, myid 不是共享的, "),s("strong",[t._v("因为它的两个实例中每一个都只被一个线程引用")]),t._v(". 然而, 认识到像 msgs 这样的本地自动变量也能被共享是很重要的.")]),t._v(" "),s("h4",{attrs:{id:"用信号量同步线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用信号量同步线程"}},[t._v("#")]),t._v(" 用信号量同步线程")]),t._v(" "),s("p",[t._v("共享变量是十分方便, 但是它们也引入了"),s("strong",[t._v("同步错误")]),t._v("(synchronization error)的可能性. 考虑代码 12-16 中的程序 badcnt.c, 它创建了两个线程, 每个线程都对共享计数变量 cnt 加 1.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* WARNING: This code is buggy! */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"csapp.h"')])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("vargp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Thread routine prototype */")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Global shared variable */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" cnt "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Counter */")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" argc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" niters"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pthread_t")]),t._v(" tid1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tid2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Check input argument */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("argc "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"usage: %s <niters>\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    niters "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("atoi")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Create threads and wait for them to finish */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pthread_create")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("tid1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" thread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("niters"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pthread_create")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("tid2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" thread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("niters"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pthread_join")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tid1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pthread_join")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tid2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Check result */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cnt "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" niters"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"BOOM! cnt=%ld\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cnt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"OK cnt=%ld\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cnt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Thread routine */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("vargp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" niters "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("vargp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" niters"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        cnt"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br"),s("span",{staticClass:"line-number"},[t._v("39")]),s("br"),s("span",{staticClass:"line-number"},[t._v("40")]),s("br"),s("span",{staticClass:"line-number"},[t._v("41")]),s("br"),s("span",{staticClass:"line-number"},[t._v("42")]),s("br"),s("span",{staticClass:"line-number"},[t._v("43")]),s("br"),s("span",{staticClass:"line-number"},[t._v("44")]),s("br"),s("span",{staticClass:"line-number"},[t._v("45")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 12-16 badcnt.c: 一个同步不正确的计数器程序")])]),t._v(" "),s("p",[t._v("因为每个线程都对计数器增加了 niters 次, 我们预计它的最终值是 2 × niters. 这看上去简单而直接. 然而, 当在 Linux 系统上运行 badcnt.c 时, 不仅得到错误的答案, 而且每次得到的答案都还不相同!")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("badcnt "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000000")]),t._v("\nBOOM"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" cnt"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1445085")]),t._v("\n\nlinux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("badcnt "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000000")]),t._v("\nBOOM"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" cnt"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1915220")]),t._v("\n\nlinux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("badcnt "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000000")]),t._v("\nBOOM"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" cnt"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1404746")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("p",[t._v("那么哪里出错了呢? 为了清晰地理解这个问题, 需要研究计数器循环(第 40 ~ 41 行)的汇编代码, 如图 12-17 所示.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230909112648-mbvx645.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图12-17 badcnt.c中计数器循环(第40-41行)的汇编代码")])]),t._v(" "),s("p",[t._v("我们发现, 将线程 i 的循环代码分解成五个部分是很有帮助的:")]),t._v(" "),s("ul",[s("li",[t._v("H"),s("sub",[t._v("i")]),t._v(": 在循环头部的指令块.")]),t._v(" "),s("li",[t._v("L"),s("sub",[t._v("i")]),t._v(": 加载共享变量 cnt 到累加寄存器 %rdx"),s("sub",[t._v("i")]),t._v(" 的指令, 这里 %rdx"),s("sub",[t._v("i")]),t._v(" 表示线程 i 中的寄存器 ％rdx 的值.")]),t._v(" "),s("li",[t._v("U"),s("sub",[t._v("i")]),t._v(": 更新(增加) %rdx"),s("sub",[t._v("i")]),t._v(" 的指令.")]),t._v(" "),s("li",[t._v("S"),s("sub",[t._v("i")]),t._v(": 将 ％rdx"),s("sub",[t._v("i")]),t._v(" 的更新值存回到共享变量 cnt 的指令.")]),t._v(" "),s("li",[t._v("T"),s("sub",[t._v("i")]),t._v(": 循环尾部的指令块.")])]),t._v(" "),s("p",[t._v("注意头和尾只操作本地栈变量, 而 "),s("span",{attrs:{"data-type":"text"}},[t._v("L")]),t._v("​"),s("sub",[t._v("i")]),t._v(",  "),s("span",{attrs:{"data-type":"text"}},[t._v("U")]),t._v("​"),s("sub",[t._v("i")]),t._v(" 和 "),s("span",{attrs:{"data-type":"text"}},[t._v("S")]),t._v("​"),s("sub",[t._v("i")]),t._v(" 操作共享计数器变量的内容.")]),t._v(" "),s("p",[t._v("当 badcnt.c 中的"),s("strong",[t._v("两个对等线程在一个单处理器上并发运行时, 机器指令以某种顺序一个接一个地完成")]),t._v(". 因此, "),s("strong",[t._v("每个并发执行定义了两个线程中的指令的某种全序(或者交叉)")]),t._v(" . 不幸的是, 这些顺序中的一些将会产生正确结果, 但是其他的则不会.")]),t._v(" "),s("p",[t._v("这里有个关键点: "),s("mark",[s("strong",[t._v("一般而言, 你没有办法预测操作系统是否将为你的线程选择一个正确的顺序")])]),t._v("​ "),s("strong",[t._v(".")]),t._v("  例如, 图 12-18a 展示了一个正确的指令顺序的分步操作. 在每个线程更新了共享变量 cnt 之后, 它在内存中的值就是 2, 这正是期望的值.")]),t._v(" "),s("p",[t._v("另一方面, 图 12-18b 的顺序产生"),s("strong",[t._v("一个不正确的 cnt 的值")]),t._v(". 会发生这样的问题是因为, 线程 2 在第 5 步加载 ent, 是在第 2 步线程 1 加载 cnt 之后, 而在第 6 步线程 1 存储它的更新值之前. 因此, "),s("strong",[t._v("每个线程最终都会存储一个值为 1 的更新后的计数器值")]),t._v(". 可以借助于一种叫做"),s("strong",[t._v("进度图")]),t._v("(progress graph)的方法来阐明这些正确的和不正确的指令顺序的概念, 这个图将在下一节中介绍.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230909113045-ibvcd6d.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图12-18 badcnt.c中第一次循环迭代的指令顺序")])]),t._v(" "),s("h5",{attrs:{id:"_1-进度图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-进度图"}},[t._v("#")]),t._v(" 1.进度图")]),t._v(" "),s("p",[s("strong",[t._v("进度图")]),t._v("(progress graph)将 n 个并发线程的执行模型化为一条 n 维笛卡儿空间中的轨迹线. 每条轴 k 对应于线程 k 的进度. 每个点 "),s("span",{attrs:{"data-type":"text"}},[t._v("(I")]),t._v("​"),s("sub",[t._v("1")]),t._v("​"),s("span",{attrs:{"data-type":"text"}},[t._v(",I")]),t._v("​"),s("sub",[t._v("2")]),t._v("​"),s("span",{attrs:{"data-type":"text"}},[t._v(",⋯,I")]),t._v("​"),s("sub",[t._v("n")]),t._v("​"),s("span",{attrs:{"data-type":"text"}},[t._v(")")]),t._v(" 代表线程 "),s("span",{attrs:{"data-type":"text"}},[t._v("k (k = 1,…,n)")]),t._v(" 已经完成了指令 "),s("span",{attrs:{"data-type":"text"}},[t._v("I")]),t._v("​"),s("sub",[t._v("k")]),t._v(" 这一状态. 图的原点对应于没有任何线程完成一条指令的初始状态.")]),t._v(" "),s("p",[t._v("图 12-19 展示了 badcnt.c 程序第一次循环迭代的二维进度图. 水平轴对应于线程 1, 垂直轴对应于线程 2. 点 "),s("span",{attrs:{"data-type":"text"}},[t._v("(L")]),t._v("​"),s("sub",[t._v("1")]),t._v("​"),s("span",{attrs:{"data-type":"text"}},[t._v(", S")]),t._v("​"),s("sub",[t._v("2")]),t._v("​"),s("span",{attrs:{"data-type":"text"}},[t._v(")")]),t._v(" 对应于线程 1 完成了 "),s("span",{attrs:{"data-type":"text"}},[t._v("L")]),t._v("​"),s("sub",[t._v("1")]),t._v(" 而线程 2 完成了 "),s("span",{attrs:{"data-type":"text"}},[t._v("S")]),t._v("​"),s("sub",[t._v("2")]),t._v(" 的状态.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230909113320-ywccgsi.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图12-19 badcnt.c第一次循环迭代的进度图")])]),t._v(" "),s("p",[t._v("进度图将指令执行模型化为从一种状态到另一种状态的"),s("strong",[t._v("转换")]),t._v("(transition). 转换被表示为一条从一点到相邻点的有向边. 合法的转换是向右(线程 1 中的一条指令完成)或者向上(线程 2 中的一条指令完成)的. "),s("strong",[t._v("两条指令不能在同一时刻完成--对角线转换是不允许的")]),t._v(". 程序决不会反向运行, 所以向下或者向左移动的转换也是不合法的.")]),t._v(" "),s("p",[t._v("一个程序的执行历史被模型化为状态空间中的一条轨迹线. 图 12-20 展示了下面指令顺序对应的轨迹线:")]),t._v(" "),s("p",[t._v("$$\nH_1,L_1,U_1,H_2,L_2,S_1,T_1,U_2,S_2,T_2\n$$")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230909113419-bdbtrcm.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图12-20 一个轨迹线示例")])]),t._v(" "),s("p",[t._v("对于线程 i, 操作共享变量 cnt 内容的指令"),s("span",{attrs:{"data-type":"text"}},[t._v("(L")]),t._v("​"),s("sub",[t._v("i")]),t._v("​"),s("span",{attrs:{"data-type":"text"}},[t._v(",U")]),t._v("​"),s("sub",[t._v("i")]),t._v("​"),s("span",{attrs:{"data-type":"text"}},[t._v(",S")]),t._v("​"),s("sub",[t._v("i")]),t._v("​"),s("span",{attrs:{"data-type":"text"}},[t._v(")")]),t._v("构成了一个(关于共享变量 cnt 的)"),s("strong",[t._v("临界区")]),t._v("(critical section), 这个临界区"),s("strong",[t._v("不应该和其他进程的临界区交替执行")]),t._v(". 换句话说, "),s("strong",[t._v("想要确保每个线程在执行它的临界区中的指令时, 拥有对共享变量的")]),t._v("​"),s("mark",[s("strong",[t._v("互斥的访问")])]),t._v("​ "),s("strong",[t._v("(mutually exclusive access). 通常这种现象称为")]),t._v("​"),s("mark",[s("strong",[t._v("互斥")])]),t._v("​ "),s("strong",[t._v("(mutual exclusion)")]),t._v(" .")]),t._v(" "),s("p",[t._v("在进度图中, 两个临界区的交集形成的状态空间区域称为"),s("mark",[s("strong",[t._v("不安全区")])]),t._v("(unsafe region). 图 12-21 展示了变量 cnt 的不安全区. 注意, "),s("strong",[t._v("不安全区和与它交界的状态相毗邻")]),t._v(", 但并不包括这些状态. 例如, 状态"),s("span",{attrs:{"data-type":"text"}},[t._v("(H")]),t._v("​"),s("sub",[t._v("1")]),t._v("​"),s("span",{attrs:{"data-type":"text"}},[t._v(",H")]),t._v("​"),s("sub",[t._v("2")]),t._v("​"),s("span",{attrs:{"data-type":"text"}},[t._v(")")]),t._v(" 和"),s("span",{attrs:{"data-type":"text"}},[t._v("(S")]),t._v("​"),s("sub",[t._v("1")]),t._v("​"),s("span",{attrs:{"data-type":"text"}},[t._v(",S")]),t._v("​"),s("sub",[t._v("2")]),t._v("​"),s("span",{attrs:{"data-type":"text"}},[t._v(")")]),t._v("毗邻不安全区, 但是它们并不是不安全区的一部分. 绕开不安全区的轨迹线叫做"),s("strong",[t._v("安全轨迹线")]),t._v("(safe trajectory). 相反, 接触到任何不安全区的轨迹线就叫做"),s("strong",[t._v("不安全轨迹线")]),t._v("(unsafe trajectory). 图 12-21 给出了示例程序 badcnt.c 的状态空间中的安全和不安全轨迹线. 上面的轨迹线绕开了不安全区域的左边和上边, 所以是安全的. 下面的轨迹线穿越不安全区, 因此是不安全的.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230909120713-jffs0oj.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图 12-21 安全和不安全轨迹线. 临界区的交集形成了不安全区. 绕开不安全区的轨迹线能够正确更新计数器变量")])]),t._v(" "),s("p",[s("strong",[t._v("任何安全轨迹线都将正确地更新共享计数器")]),t._v(". 为了保证线程化程序示例的正确执行(实际上任何共享全局数据结构的并发程序的正确执行)我们必须以某种方式"),s("strong",[t._v("同步")]),t._v("线程, "),s("mark",[s("strong",[t._v("使它们总是有一条安全轨迹线. 一个经典的方法是基于信号量的思想")])]),t._v(", 接下来我们就介绍它.")]),t._v(" "),s("h5",{attrs:{id:"_2-信号量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-信号量"}},[t._v("#")]),t._v(" 2.信号量")]),t._v(" "),s("p",[t._v("Edsger Dijkstra, 并发编程领域的先锋人物, 提出了一种经典的解决同步不同执行线程问题的方法, 这种方法是基于一种叫做"),s("strong",[t._v("信号量")]),t._v("(semaphore)的特殊类型变量的. 信号量 s 是具有非负整数值的"),s("strong",[t._v("全局变量, 只能由两种特殊的操作来处理, 这两种操作称为 P 和 V")]),t._v(":")]),t._v(" "),s("ul",[s("li",[t._v("P(s): 如果 s 是非零的, 那么 P 将 s 减 1, 并且立即返回. 如果 s 为零, 那么就"),s("strong",[t._v("挂起这个线程")]),t._v(", 直到 s 变为非零, 而一个 V 操作会重启这个线程. 在重启之后, P 操作将 s 减 1, 并将控制返回给调用者.")]),t._v(" "),s("li",[t._v("V(s): V 操作将 s 加 1. 如果有任何线程阻塞在 P 操作等待 s 变成非零, 那么 V 操作会重启这些线程中的一个, 然后该线程将 s 减 1, 完成它的 P 操作.")])]),t._v(" "),s("p",[s("strong",[t._v("P 中的测试和减 1 操作是不可分割的, 也就是说, 一旦预测信号量 s 变为非零, 就会将 s 减 1, 不能有中断. V 中的加 1 操作也是不可分割的, 也就是加载, 加 1 和存储信号量的过程中没有中断")]),t._v(". 注意, V 的定义中没有定义等待线程被重启动的顺序. 唯一的要求是 V 必须只能重启一个正在等待的线程. 因此, 当有多个线程在等待同一个信号量时, 就不能预测 V 操作要重启哪一个线程.")]),t._v(" "),s("p",[t._v("P 和 V 的定义确保了一个正在运行的程序绝不可能进入这样一种状态, 也就是一个正确初始化了的信号量有一个负值. 这个属性称为"),s("strong",[t._v("信号量不变性")]),t._v("(semaphore invariant), 为控制并发程序的轨迹线提供了强有力的工具, 在下一节中我们将看到.")]),t._v(" "),s("p",[t._v("Posix 标准定义了许多"),s("strong",[t._v("操作信号量的函数")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<semaphore.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 若成功则为 0, 若出错则为 -1.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sem_init")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sem_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("sem"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sem_wait")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sem_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* P(s) */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sem_post")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sem_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* V(s) */")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("sem_init 函数将信号量 sem 初始化为 value. "),s("strong",[t._v("每个信号量在使用前必须初始化")]),t._v(". 针对我们的目的, 中间的参数总是零. 程序分别通过"),s("strong",[t._v("调用 sem_wait 和 sem_post 函数来执行 P 和 V 操作")]),t._v(". 为了简明, 我们更喜欢使用下面这些等价的 P 和 V 的包装函数:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"csapp.h"')])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 无.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sem_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Wrapper function for sem_wait */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sem_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Wrapper function for sem_post */")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("h5",{attrs:{id:"_3-使用信号量来实现互斥"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-使用信号量来实现互斥"}},[t._v("#")]),t._v(" 3.使用信号量来实现互斥")]),t._v(" "),s("p",[t._v("信号量提供了一种很方便的方法来确保对共享变量的互斥访问. "),s("strong",[t._v("基本思想是将每个共享变量(或者一组相关的共享变量)与一个信号量 s(初始为 1)联系起来, 然后用")]),t._v("​"),s("strong",[t._v("P(s)"),s("strong",[t._v("​")]),t._v("和")]),t._v("​"),s("strong",[t._v("V(s)"),s("strong",[t._v("​")]),t._v("操作将相应的临界区包围起来")]),t._v(".")]),t._v(" "),s("p",[t._v("以这种方式来保护共享变量的信号量叫做"),s("strong",[t._v("二元信号量")]),t._v("(binary semaphore), 因为它的"),s("strong",[t._v("值总是 0 或者 1")]),t._v(". 以提供互斥为目的的二元信号量常常也称为"),s("mark",[s("strong",[t._v("互斥锁")])]),t._v("(mutex). "),s("mark",[s("strong",[t._v("在一个互斥锁上执行 P 操作称为对互斥锁加锁. 类似地, 执行 V 操作称为对互斥锁解锁. 对一个互斥锁加了锁但是还没有解锁的线程称为占用这个互斥锁. 一个被用作一组可用资源的计数器的信号量被称为计数信号量")])]),t._v(".")]),t._v(" "),s("p",[t._v("图 12-22 中的进度图展示了如何利用二元信号量来正确地同步计数器程序示例. 每个状态都标出了该状态中信号量 s 的值. 关键思想是这种 P 和 V 操作的结合创建了一组状态, 叫做"),s("strong",[t._v("禁止区")]),t._v("(forbidden region), 其中因为信号量的不变性, 没有实际可行的轨迹线能够包含禁止区中的状态. 而且, 因为禁止区完全包括了不安全区, 所以"),s("strong",[t._v("没有实际可行的轨迹线能够接触不安全区的任何部分")]),t._v(". 因此, 每条实际可行的轨迹线都是安全的, 而且不管运行时指令顺序是怎样的, 程序都会正确地增加计数器值.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230909121428-86qyte7.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图 12-22 使用信号量来互斥. "),s("span",{attrs:{"data-type":"text"}},[t._v("s<0")]),t._v("的不可行状态定义了一个禁止区, 禁止区完全包括了不安全区, 阻止了实际可行的轨迹线接触到不安全区")])]),t._v(" "),s("p",[t._v("从可操作的意义上来说, "),s("strong",[t._v("由 P 和 V 操作创建的禁止区使得在任何时间点上, 在被包围的临界区中, 不可能有多个线程在执行指令. 换句话说, 信号量操作确保了对临界区的互斥访问")]),t._v(".")]),t._v(" "),s("p",[t._v("总的来说, 为了用信号量正确同步图 12-16 中的计数器程序示例, 首先声明一个信号量 mutex:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" cnt "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Counter */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sem_t")]),t._v(" mutex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("           "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Semaphore that protects counter */")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("然后在主例程中将 mutex 初始化为 1:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sem_init")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("mutex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* mutex = 1 */")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("最后, 通过把在线程例程中"),s("strong",[t._v("对共享变量 cnt 的更新包围 P 和 V 操作")]),t._v(", 从而保护它们:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" niters"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("mutex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    cnt"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("mutex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("当运行这个正确同步的程序时, 现在它每次都能产生正确的结果了.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("goodcnt "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000000")]),t._v("\nOK cnt"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000000")]),t._v("\n\nlinux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("goodcnt "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000000")]),t._v("\nOK cnt"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000000")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("h5",{attrs:{id:"_4-利用信号量来调度共享资源"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-利用信号量来调度共享资源"}},[t._v("#")]),t._v(" 4.利用信号量来调度共享资源")]),t._v(" "),s("p",[t._v("除了提供互斥之外, 信号量的另一个重要作用是"),s("strong",[t._v("调度对共享资源的访问")]),t._v(". 在这种场景中, 一个"),s("strong",[t._v("线程用信号量操作来通知另一个线程")]),t._v(", 程序状态中的某个条件已经为真了. 两个经典而有用的例子是"),s("strong",[t._v("生产者-消费者")]),t._v("和"),s("strong",[t._v("读者-写者")]),t._v("问题.")]),t._v(" "),s("h6",{attrs:{id:"_1-生产者-消费者问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-生产者-消费者问题"}},[t._v("#")]),t._v(" (1)生产者-消费者问题")]),t._v(" "),s("p",[t._v("图 12-23 给出了生产者-消费者问题. 生产者和消费者线程共享一个"),s("strong",[t._v("有 n 个槽的有限缓冲区")]),t._v(". 生产者线程反复地生成新的"),s("strong",[t._v("项目")]),t._v("(item), 并把它们插入到缓冲区中. 消费者线程不断地从缓冲区中取出这些项目, 然后消费(使用)它们. 也可能有多个生产者和消费者的变种.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230909121908-chsrkw2.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图 12-23 生产者—消费者问题. 生产者产生项目并把它们插人到一个有限的缓冲区中. 消费者从缓冲区中取出这些项目, 然后消费它们")])]),t._v(" "),s("p",[t._v("因为插入和取出项目都涉及"),s("strong",[t._v("更新共享变量")]),t._v(", 所以"),s("strong",[t._v("必须保证对缓冲区的访问是互斥的")]),t._v(". 但是只保证互斥访问是不够的, "),s("strong",[t._v("还需要调度对缓冲区的访问. 如果缓冲区是满的(没有空的槽位), 那么生产者必须等待直到有一个槽位变为可用. 与之相似, 如果缓冲区是空的(没有可取用的项目), 那么消费者必须等待直到有一个项目变为可用")]),t._v(".")]),t._v(" "),s("p",[t._v("生产者-消费者的相互作用在现实系统中是很普遍的. 例如, 在一个多媒体系统中, 生产者编码视频帧, 而消费者解码并在屏幕上呈现出来. 缓冲区的目的是为了减少视频流的抖动, 而这种抖动是由各个帧的编码和解码时与数据相关的差异引起的. 缓冲区为生产者提供了一个槽位池, 而为消费者提供一个已编码的帧池. 另一个常见的示例是图形用户接口设计. 生产者检测到鼠标和键盘事件, 并将它们插入到缓冲区中. 消费者以某种基于优先级的方式从缓冲区取出这些事件, 并显示在屏幕上.")]),t._v(" "),s("p",[t._v("在本节中, 将开发一个简单的包, 叫做 SBUF, 用来构造生产者-消费者程序. 在下一节里会看到如何用它来构造一个基于"),s("strong",[t._v("预线程化")]),t._v("(prethreading)的有趣的并发服务器. SBUF 操作类型为 sbuf_t 的有限缓冲区(代码 12-24). 项目存放在一个动态分配的 1 项整数数组(buf)中. "),s("strong",[t._v("front 和 rear 索引值记录该数组中的第一项和最后一项. 三个信号量同步对缓冲区的访问. mutex 信号量提供互斥的缓冲区访问. slots 和 items 信号量分别记录空槽位和可用项目的数量")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Buffer array */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Maximum number of slots */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" front"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* buf[(front+1)%n] is first item */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" rear"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* buf[rear%n] is last item */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sem_t")]),t._v(" mutex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Protects accesses to buf */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sem_t")]),t._v(" slots"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Counts available slots */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sem_t")]),t._v(" items"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Counts available items */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sbuf_t")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 12-24 sbuf_t: SBUF 包使用的有限缓冲区")])]),t._v(" "),s("p",[t._v("代码 12-25 给出了 SBUF 函数的实现. "),s("strong",[t._v("sbuf_init 函数为缓冲区分配堆内存, 设置 front 和 rear 表示一个空的缓冲区, 并为三个信号量赋初始值")]),t._v(". 这个函数在调用其他三个函数中的任何一个之前调用一次. sbuf_deinit 函数是当应用程序使用完缓冲区时, 释放缓冲区存储的. sbuf_insert 函数等待一个可用的槽位, 对互斥锁加锁, 添加项目, 对互斥锁解锁, 然后宣布有一个新项目可用. sbuf_remove 函数是与 sbuf_insert 函数对称的. 在等待一个可用的缓冲区项目之后, 对互斥锁加锁, 从缓冲区的前面取出该项目, 对互斥锁解锁, 然后发信号通知一个新的槽位可供使用.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"csapp.h"')])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sbuf.h"')])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Create an empty, bounded, shared FIFO buffer with n slots */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sbuf_init")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sbuf_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("sp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    sp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("buf "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Calloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    sp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Buffer holds max of n items */")]),t._v("\n    sp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("front "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rear "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Empty buffer iff front == rear */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sem_init")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("sp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("mutex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Binary semaphore for locking */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sem_init")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("sp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("slots"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Initially, buf has n empty slots */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sem_init")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("sp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("items"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Initially, buf has zero data items */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Clean up buffer sp */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sbuf_deinit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sbuf_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("sp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Free")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Insert item onto the rear of shared buffer sp */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sbuf_insert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sbuf_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("sp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("sp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("slots"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                           "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Wait for available slot */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("sp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("mutex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                           "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Lock the buffer */")]),t._v("\n    sp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("sp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rear"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Insert the item */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("sp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("mutex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                           "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Unlock the buffer */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("sp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("items"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                           "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Announce available item */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Remove and return the first item from buffer sp */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sbuf_remove")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sbuf_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("sp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("sp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("items"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                           "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Wait for available item */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("sp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("mutex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                           "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Lock the buffer */")]),t._v("\n    item "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("sp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("front"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Remove the item */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("sp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("mutex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                           "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Unlock the buffer */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("sp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("slots"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                           "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Announce available slot */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br"),s("span",{staticClass:"line-number"},[t._v("39")]),s("br"),s("span",{staticClass:"line-number"},[t._v("40")]),s("br"),s("span",{staticClass:"line-number"},[t._v("41")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 12-25 SBUF: 同步对有限缓冲区并发访问的包")])]),t._v(" "),s("h6",{attrs:{id:"_2-读者-写者问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-读者-写者问题"}},[t._v("#")]),t._v(" (2)读者-写者问题")]),t._v(" "),s("p",[t._v("读者-写者问题是互斥问题的一个概括. 一组并发的线程要访问一个共享对象, 例如一个主存中的数据结构, 或者一个磁盘上的数据库. 有些线程只读对象, 而其他的线程只修改对象. 修改对象的线程叫做"),s("strong",[t._v("写者")]),t._v(". 只读对象的线程叫做"),s("strong",[t._v("读者")]),t._v(". "),s("strong",[t._v("写者必须拥有对对象的独占的访问, 而读者可以和无限多个其他的读者共享对象. 一般来说, 有无限多个并发的读者和写者")]),t._v(".")]),t._v(" "),s("p",[t._v("读者-写者交互在现实系统中很常见. 例如, 一个在线航空预定系统中, 允许有无限多个客户同时查看座位分配, 但是正在预订座位的客户必须拥有对数据库的独占的访问. 再来看另一个例子, 在一个多线程缓存 Web 代理中, 无限多个线程可以从共享页面缓存中取出已有的页面, 但是任何向缓存中写入一个新页面的线程必须拥有独占的访问.")]),t._v(" "),s("p",[t._v("读者-写者问题有几个变种, 分别基于读者和写者的优先级. 第一类读者-写者问题, 读者优先, 要求不要让读者等待, 除非已经把使用对象的权限赋予了一个写者. 换句话说, 读者不会因为有一个写者在等待而等待. 第二类读者-写者问题, 写者优先, 要求一旦一个写者准备好可以写, 它就会尽可能快地完成它的写操作. 同第一类问题不同, 在一个写者后到达的读者必须等待, 即使这个写者也是在等待.")]),t._v(" "),s("p",[t._v("代码 12-26 给出了一个对第一类读者-写者问题的解答. 同许多同步问题的解答一样, 这个解答很微妙, 极具欺骗性地简单. 信号量 w 控制对访问共享对象的临界区的访问. 信号量 mutex 保护对共享变量 readcnt 的访问, readcnt 统计当前在临界区中的读者数量. "),s("strong",[t._v("每当一个写者进入临界区时, 它对互斥锁 w 加锁, 每当它离开临界区时, 对 w 解锁. 这就保证了任意时刻临界区中最多只有一个写者. 另一方面, 只有第一个进入临界区的读者对 w 加锁, 而只有最后一个离开临界区的读者对 w 解锁")]),t._v(". 当一个读者进入和离开临界区时, 如果还有其他读者在临界区中, 那么这个读者会忽略互斥锁 w. 这就意味着只要还有一个读者占用互斥锁 w, 无限多数量的读者可以没有障碍地进入临界区.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Global variables */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" readcnt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Initially = 0 */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sem_t")]),t._v(" mutex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" w"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Both initially = 1 */")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("reader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("mutex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        readcnt"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("readcnt "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("mark"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* First in */")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("w"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("mutex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Critical section */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Reading happens  */")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("mutex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        readcnt"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("readcnt "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("mark"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Last out */")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("w"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("mutex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("writer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("w"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Critical section */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Writing happens  */")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("w"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 12-26 对第一类读者—写者问题的解答. 读者优先级高于写者")])]),t._v(" "),s("p",[t._v("对这两种读者-写者问题的正确解答可能导致饥饿(starvation), "),s("strong",[t._v("饥饿就是一个线程无限期地阻塞")]),t._v(", 无法进展. 例如, 代码 12-26 所示的解答中, 如果有读者不断地到达, 写者就可能无限期地等待.")]),t._v(" "),s("blockquote",[s("p",[t._v("旁注: 其他同步机制")])]),t._v(" "),s("p",[t._v("前面已经向你展示了如何利用信号量来同步线程, 主要是因为它们简单, 经典, 并且有一个清晰的语义模型. 但是你应该知道还是存在着其他同步技术的. 例如, Java 线程是用一种叫做 Java 监控器(Java Monitor)的机制来同步的, 它提供了对信号量互斥和调度能力的"),s("strong",[t._v("更高级别的抽象")]),t._v("; 实际上, 监控器可以用信号量来实现. 再来看一个例子, Pthreads 接口定义了一组对互斥锁和条件变量的同步操作. Pthreads 互斥锁被用来实现互斥. 条件变量用来调度对共享资源的访问, 例如在一个生产者-消费者程序中的有限缓冲区.")]),t._v(" "),s("h5",{attrs:{id:"_5-综合-基于预线程化的并发服务器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-综合-基于预线程化的并发服务器"}},[t._v("#")]),t._v(" 5.综合:基于预线程化的并发服务器")]),t._v(" "),s("p",[t._v("我们已经知道了如何使用信号量来访问共享变量和调度对共享资源的访问. 为了帮助你更清晰地理解这些思想, 我们把它们应用到一个基于称为"),s("strong",[t._v("预线程化")]),t._v("(prethreading)技术的并发服务器上.")]),t._v(" "),s("p",[t._v("在图 12-14 所示的并发服务器中, 我们为每一个新客户端创建了一个新线程. 这种方法的缺点是我们为每一个新客户端创建一个新线程, 导致不小的代价. 一个基于预线程化的服务器试图通过使用如图 12-27 所示的生产者—消费者模型来降低这种开销. 服务器是由一个主线程和一组工作者线程构成的. 主线程不断地接受来自客户端的连接请求, 并将得到的连接描述符放在一个有限缓冲区中. 每一个工作者线程反复地从共享缓冲区中取出描述符, 为客户端服务, 然后等待下一个描述符.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230909122325-0fm1q62.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图 12-27 预线程化的并发服务器的组织结构. 一组现有的线程不断地取出和处理来自有限缓冲区的已连接描述符")])]),t._v(" "),s("p",[t._v("代码 12-28 显示了怎样用 SBUF 包来实现一个"),s("strong",[t._v("预线程化的并发 echo 服务器")]),t._v(". 在初始化了缓冲区 sbuf(第 24 行)后, 主线程创建了一组工作者线程(第 25 ~ 26 行). 然后它进入了无限的服务器循环, 接受连接请求, 并将得到的已连接描述符插入到缓冲区 sbuf 中. 每个工作者线程的行为都非常简单. 它等待直到它能从缓冲区中取出一个已连接描述符(第 39 行), 然后调用 echo_cnt 函数回送客户端的输入.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"csapp.h"')])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sbuf.h"')])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("NTHREADS")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")])])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("SBUFSIZE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")])])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("echo_cnt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" connfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("vargp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sbuf_t")]),t._v(" sbuf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Shared buffer of connected descriptors */")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" argc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" listenfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" connfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("socklen_t")]),t._v(" clientlen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sockaddr_storage")]),t._v(" clientaddr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pthread_t")]),t._v(" tid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("argc "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stderr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"usage: %s <port>\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    listenfd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Open_listenfd")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sbuf_init")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("sbuf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" SBUFSIZE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" NTHREADS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Create worker threads */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pthread_create")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("tid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" thread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        clientlen "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sockaddr_storage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        connfd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Accept")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("listenfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SA "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("clientaddr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("clientlen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sbuf_insert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("sbuf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" connfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Insert connfd in buffer */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("vargp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pthread_detach")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pthread_self")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" connfd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sbuf_remove")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("sbuf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Remove connfd from buffer */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("echo_cnt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("connfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Service client */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Close")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("connfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br"),s("span",{staticClass:"line-number"},[t._v("39")]),s("br"),s("span",{staticClass:"line-number"},[t._v("40")]),s("br"),s("span",{staticClass:"line-number"},[t._v("41")]),s("br"),s("span",{staticClass:"line-number"},[t._v("42")]),s("br"),s("span",{staticClass:"line-number"},[t._v("43")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 12-28 一个预线程化的并发 echo 服务器. 这个服务器使用的是有一个生产者和多个消费者的生产者—消费者模型")])]),t._v(" "),s("p",[t._v("代码 12-29 所示的函数 echo_cnt 是图 11-22 中的 echo 函数的一个版本, 它在全局变量 byte_cnt 中记录了从所有客户端接收到的累计字节数. 这是一段值得研究的有趣代码, 因为它向你展示了一个从线程例程调用的初始化程序包的一般技术. 在这种情况中, 需要初始化 byte_cnt 计数器和 mutex 信号量. 一个方法是为 SBUF 和 RIO 程序包使用过的, 它要求主线程显式地调用一个初始化函数. 另外一个方法, 在此显示的, 是当第一次有某个线程调用 echo_cnt 函数时, 使用 pthread_once 函数(第 19 行)去调用初始化函数. 这个方法的优点是它届程序包的使用更加容易. 这种方法的缺点是每一次调用 echo_ent 都会导致调用 pthread_once 函数, 而在大多数时候它没有做什么有用的事.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"csapp.h"')])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" byte_cnt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Byte counter */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sem_t")]),t._v(" mutex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* and the mutex that protects it */")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("init_echo_cnt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sem_init")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("mutex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    byte_cnt "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("echo_cnt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" connfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MAXLINE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("rio_t")]),t._v(" rio"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pthread_once_t")]),t._v(" once "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" PTHREAD_ONCE_INIT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pthread_once")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("once"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" init_echo_cnt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Rio_readinitb")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rio"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" connfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Rio_readlineb")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rio"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" MAXLINE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("mutex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        byte_cnt "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"server received %d (%d total) bytes on fd %d\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n               n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" byte_cnt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" connfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("mutex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Rio_writen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("connfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 12-29 echo_cnt: echo 的一个版本, 它对从客户端接收的所有字节计数")])]),t._v(" "),s("p",[t._v("一旦程序包被初始化, echo_cnt 函数会初始化 RIO 带缓冲区的 I/O 包(第 20 行), 然后回送从客户端接收到的每一个文本行. 注意, 在第 23 ~ 25 行中对共享变量 byte_cnt 的访问是被 P 和 V 操作保护的.")]),t._v(" "),s("blockquote",[s("p",[t._v("旁注: 基于线程的事件驱动程序")])]),t._v(" "),s("p",[t._v('I/O 多路复用不是编写事件驱动程序的唯一方法. 例如, 你可能已经注意到刚才开发的并发的预线程化的服务器实际上是一个事件驱动服务器, 带有主线程和工作者线程的简单状态机. 主线程有两种状态("等待连接请求" 和 "等待可用的缓冲区槽位"), 两个 I/O 事件("连接请求到达" 和 "缓冲区槽位变为可用")和两个转换("接受连接请求" 和 "插入缓冲区项目"). 类似地, 每个工作者线程有一个状态("等待可用的缓冲项目"), 一个 I/O 事件("缓冲区项目变为可用")和一个转换("取出缓冲区项目").')]),t._v(" "),s("h4",{attrs:{id:"使用线程提高并行性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用线程提高并行性"}},[t._v("#")]),t._v(" 使用线程提高并行性")]),t._v(" "),s("p",[t._v("到目前为止, 在对并发的研究中, 都假设并发线程是在"),s("strong",[t._v("单处理器")]),t._v("系统上执行的. 然而, 大多数现代机器具有多核处理器. 并发程序通常在这样的机器上运行得更快, 因为"),s("strong",[t._v("操作系统内核在多个核上并行地调度这些并发线程")]),t._v(", 而不是在单个核上顺序地调度. 在像繁忙的 Web 服务器, 数据库服务器和大型科学计算代码这样的应用中利用这样的并行性是至关重要的, 而且在像 Web 浏览器, 电子表格处理程序和文档处理程序这样的主流应用中, 并行性也变得越来越有用.")]),t._v(" "),s("p",[t._v("图 12-30 给出了"),s("strong",[t._v("顺序, 并发和并行程序之间的集合关系")]),t._v(". 所有程序的集合能够被划分成不相交的顺序程序集合和并发程序的集合. 写顺序程序只有一条逻辑流. 写并发程序有多条并发流. "),s("strong",[t._v("并行程序是一个运行在多个处理器上的并发程序. 因此, 并行程序的集合是并发程序集合的真子集")]),t._v(".")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230909122648-bjuje1h.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图12-30 顺序, 并发和并行程序集合之间的关系")])]),t._v(" "),s("p",[t._v("并行程序的详细处理超出了本书讲述的范围, 但是研究一个非常简单的示例程序能够帮助你理解并行编程的一些重要的方面. 例如, 考虑如何并行地对一列整数 "),s("span",{attrs:{"data-type":"text"}},[t._v("0, ⋯, n−1")]),t._v(" 求和. 当然, 对于这个特殊的问题, 有闭合形式表达式的解答(译者注: 即有现成的公式来计算它, 即和等于 "),s("span",{attrs:{"data-type":"text"}},[t._v("n(n−1)/2")]),t._v("), 但是尽管如此, 它是一个简洁和易于理解的示例, 能让我们对并行程序做一些有趣的说明.")]),t._v(" "),s("p",[s("strong",[t._v("将任务分配到不同线程")]),t._v("的最直接方法是将"),s("strong",[t._v("序列划分成 t 个不相交的区域, 然后给 t 个不同的线程每个分配一个区域")]),t._v(". 为了简单, 假设 n 是 t 的倍数, 这样每个区域有以 n/t 个元素. 来看看多个线程并行处理分配给它们的区域的不同方法.")]),t._v(" "),s("p",[t._v("最简单也最直接的选择是"),s("strong",[t._v("将线程的和放入一个共享全局变量中, 用互斥锁保护这个变量")]),t._v(". 代码 12-31 给出了如何实现这种方法. 在第 28 ~ 33 行, 主线程创建对等线程, 然后等待它们结束. 注意, 主线程传递给每个对等线程一个"),s("strong",[t._v("小整数, 作为唯一的线程 ID")]),t._v(". 每个对等线程会用它的线程 ID 来决定它应该计算序列的哪一部分. 这个向对等线程传递一个小的唯一的线程 ID 的思想是一项通用技术, 许多并行应用中都用到了它. 在对等线程终止后, 全局变量 gsum 包含着最终的和. 然后主线程用闭合形式解答来验证结果(第 36 ~ 37 行).")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"csapp.h"')])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("MAXTHREADS")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")])])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum_mutex")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("vargp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Thread routine */")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Global shared variables */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" gsum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Global sum */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" nelems_per_thread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Number of elements to sum */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sem_t")]),t._v(" mutex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Mutex to protect global sum */")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" argc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nelems"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" log_nelems"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nthreads"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" myid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MAXTHREADS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pthread_t")]),t._v(" tid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MAXTHREADS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Get input arguments */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("argc "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Usage: %s <nthreads> <log_nelems>\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    nthreads "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("atoi")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    log_nelems "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("atoi")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    nelems "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1L")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" log_nelems"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    nelems_per_thread "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nelems "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" nthreads"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sem_init")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("mutex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Create peer threads and wait for them to finish */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" nthreads"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        myid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pthread_create")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("tid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sum_mutex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("myid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" nthreads"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pthread_join")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Check final answer */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("gsum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nelems "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nelems "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Error: result=%ld\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" gsum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br"),s("span",{staticClass:"line-number"},[t._v("39")]),s("br"),s("span",{staticClass:"line-number"},[t._v("40")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 12-31 psum-mutex 的主程序, 使用多个线程将一个序列元素的和放入一个用互斥锁保护的共享全局变量中")])]),t._v(" "),s("p",[t._v("代码 12-32 给出了"),s("strong",[t._v("每个对等线程执行的函数")]),t._v(". 在第 4 行中, 线程从线程参数中提取出线程 ID, 然后用这个 ID 来决定它要计算的序列区域(第 5 ~ 6 行). 在第 9 ~ 13 行中, 线程在它的那部分序列上迭代操作, 每次迭代都更新共享全局变量 gsum. 注意, 我们很小心地用 P 和 V 互斥操作来保护每次更新.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Thread routine for psum-mutex.c */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum_mutex")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("vargp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" myid "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("vargp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Extract the thread ID */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" start "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" myid "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" nelems_per_thread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Start element index */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" end "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" start "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" nelems_per_thread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* End element index */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" start"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" end"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("mutex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        gsum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("mutex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 12-32 psum-mutex 的线程例程. 每个对等线程将各自的和累加进一个用互斥锁保护的共享全局变量中")])]),t._v(" "),s("p",[t._v("我们在一个四核系统上, 对一个大小为 "),s("span",{attrs:{"data-type":"text"}},[t._v("n=231")]),t._v(" 的序列运行 psum-mutex, 测量它的运行时间(以秒为单位), 作为线程数的函数, 得到的结果难懂又令人奇怪:")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}}),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("线程数")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}}),t._v(" "),s("th",{staticStyle:{"text-align":"center"}}),t._v(" "),s("th",{staticStyle:{"text-align":"center"}}),t._v(" "),s("th",{staticStyle:{"text-align":"center"}})])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("版本")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("2")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("8")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("16")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("psum-mutex")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("68")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("432")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("719")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("552")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("599")])])])]),t._v(" "),s("p",[t._v("程序单线程顺序运行时非常慢, 几乎比多线程并行运行时慢了一个数量级. 不仅如此, "),s("strong",[t._v("使用的核数越多, 性能越差")]),t._v(". 造成性能差的原因是相对于内存更新操作的开销, "),s("strong",[t._v("同步操作(P 和 V)代价太大")]),t._v(". 这突显了并行编程的一项重要教训: "),s("mark",[s("strong",[t._v("同步开销巨大, 要尽可能避免. 如果无可避免, 必须要用尽可能多的有用计算弥补这个开销")])]),t._v("​ "),s("strong",[t._v(".")])]),t._v(" "),s("p",[t._v("在例子中, 一种"),s("strong",[t._v("避免同步的方法是让每个对等线程在一个私有变量中计算它自己的部分和, 这个私有变量不与其他任何线程共享")]),t._v(", 如代码 12-33 所示. 主线程(图中未显示)定义一个全局数组 psum, 每个对等线程 i 把它的部分和累积在 "),s("strong",[t._v("psum[i]")]),t._v("  中. 因为小心地给了每个对等线程一个不同的内存位置来更新, 所以"),s("strong",[t._v("不需要用互斥锁")]),t._v("来保护这些更新. "),s("strong",[t._v("唯一需要同步的地方是主线程必须等待所有的子线程完成. 在对等线程结束后, 主线程把 psum 向量的元素加起来, 得到最终的结果")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Thread routine for psum-array.c */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum_array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("vargp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" myid "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("vargp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Extract the thread ID */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" start "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" myid "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" nelems_per_thread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Start element index */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" end "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" start "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" nelems_per_thread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* End element index */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" start"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" end"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        psum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("myid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 12-33 psum-array 的线程例程. 每个对等线程把它的部分和累积在一个私有数组元素中, 不与其他任何对等线程共享该元素")])]),t._v(" "),s("p",[t._v("在四核系统上运行 psum-array 时, 可以看到它比 psum-mutex 运行得快好几个数量级:")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}}),t._v(" "),s("th",{staticStyle:{"text-align":"right"}},[t._v("线程数")]),t._v(" "),s("th",{staticStyle:{"text-align":"right"}}),t._v(" "),s("th",{staticStyle:{"text-align":"right"}}),t._v(" "),s("th",{staticStyle:{"text-align":"right"}}),t._v(" "),s("th",{staticStyle:{"text-align":"right"}})])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("版本")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("1")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("2")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("4")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("8")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("16")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("psum-mutex")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("68.00")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("432.00")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("719.00")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("552.00")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("599.00")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("psum-array")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("7.26")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("3.64")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("1.91")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("1.85")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("1.84")])])])]),t._v(" "),s("p",[t._v("在第 5 章中学习到了如何使用局部变量来消除不必要的内存引用. 代码 12-34 展示了如何应用这项原则, 让每个对等线程把它的部分和累积在一个局部变量而不是全局变量中. 当在四核机器上运行 psum-local 时, 得到一组新的递减的运行时间:")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}}),t._v(" "),s("th",{staticStyle:{"text-align":"right"}},[t._v("线程数")]),t._v(" "),s("th",{staticStyle:{"text-align":"right"}}),t._v(" "),s("th",{staticStyle:{"text-align":"right"}}),t._v(" "),s("th",{staticStyle:{"text-align":"right"}}),t._v(" "),s("th",{staticStyle:{"text-align":"right"}})])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("版本")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}}),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("4")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("8")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("16")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}})]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("psum-mutex")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("68.00")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("432.00")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("719.00")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("552.00")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("599.00")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("psum-array")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("7.26")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("3.64")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("1.91")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("1.85")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("1.84")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("psum-local")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("1.06")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("0.54")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("0.28")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("0.29")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("0.30")])])])]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Thread routine for psum-local.c */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum_local")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("vargp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" myid "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("vargp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Extract the thread ID */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" start "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" myid "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" nelems_per_thread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Start element index */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" end "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" start "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" nelems_per_thread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* End element index */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" start"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" end"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        sum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    psum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("myid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 12-34 psum-local 的线程例程. 每个对等线程把它的部分和累积在一个局部变量中")])]),t._v(" "),s("p",[t._v("从这个练习可以学习到一个重要的经验, 那就是写并行程序相当棘手. 对代码看上去很小的改动可能会对性能有极大的影响.")]),t._v(" "),s("h6",{attrs:{id:"刻画并行程序的性能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#刻画并行程序的性能"}},[t._v("#")]),t._v(" 刻画并行程序的性能")]),t._v(" "),s("p",[t._v("图 12-35 给出了代码 12-34 中程序 psum-local 的"),s("strong",[t._v("运行时间")]),t._v(", 它是线程数的函数. 在每个情况下, 程序运行在一个有四个处理器核的系统上, 对一个 "),s("span",{attrs:{"data-type":"text"}},[t._v("n=231")]),t._v(" 个元素的序列求和. 可以看到, "),s("strong",[t._v("随着线程数的增加, 运行时间下降, 直到增加到四个线程, 此时, 运行时间趋于平稳, 甚至开始有点增加")]),t._v(".")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230909123216-opo0td7.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图 12-35 psum-local 的性能(图 12-34). 用四个处理器核对一个"),s("span",{attrs:{"data-type":"text"}},[t._v("232")]),t._v("个元素序列求和")])]),t._v(" "),s("p",[t._v("在理想的情况中, 我们"),s("strong",[t._v("会期望运行时间随着核数的增加线性下降")]),t._v(". 也就是说, 会期望线程数每增加一倍, 运行时间就下降一半. 确实是这样, 直到到达 t > 4 的时候, 此时四个核中的每一个都忙于运行至少一个线程. 随着线程数量的增加, 运行时间实际上增加了一点儿, "),s("mark",[s("strong",[t._v("这是由于在一个核上多个线程上下文切换的开销. 由于这个原因, 并行程序常常被写为每个核上只运行一个线程")])]),t._v(".")]),t._v(" "),s("p",[t._v("虽然绝对运行时间是衡量程序性能的终极标准, 但是还是有一些有用的相对衡量标准能够说明并行程序有多好地利用了潜在的并行性. 并行程序的"),s("strong",[t._v("加速比")]),t._v("(speedup)通常定义为")]),t._v(" "),s("p",[t._v("$$\nS_p=\\frac{T_1}{T_p}\n$$")]),t._v(" "),s("p",[t._v("这里 p 是处理器核的数量, "),s("span",{attrs:{"data-type":"text"}},[t._v("T")]),t._v("​"),s("sub",[t._v("k")]),t._v(" 是在 k 个核上的运行时间. 这个公式有时被称为"),s("strong",[t._v("强扩展")]),t._v("(strong scaling). 当 "),s("span",{attrs:{"data-type":"text"}},[t._v("T")]),t._v("​"),s("sub",[t._v("1")]),t._v(" 是程序顺序执行版本的执行时间时, "),s("span",{attrs:{"data-type":"text"}},[t._v("S")]),t._v("​"),s("sub",[t._v("p")]),t._v(" 称为"),s("strong",[t._v("绝对加速比")]),t._v("(absolute speedup). 当 "),s("span",{attrs:{"data-type":"text"}},[t._v("T")]),t._v("​"),s("sub",[t._v("1")]),t._v(" 是程序并行版本在一个核上的执行时间时, "),s("span",{attrs:{"data-type":"text"}},[t._v("S")]),t._v("​"),s("sub",[t._v("p")]),t._v(" 称为"),s("strong",[t._v("相对加速比")]),t._v("(relative speedup). 绝对加速比比相对加速比能更真实地衡量并行的好处. 即使是当并行程序在一个处理器上运行时, 也常常会受到同步开销的影响, 而这些开销会人为地增加相对加速比的数值, 因为它们增加了分子的大小. 另一方面, 绝对加速比比相对加速比更难以测量, 因为测量绝对加速比需要程序的两种不同的版本. 对于复杂的并行代码, 创建一个独立的顺序版本可能不太实际, 或者因为代码太复杂, 或者因为源代码不可得.")]),t._v(" "),s("p",[t._v("一种相关的测量量称为"),s("strong",[t._v("效率")]),t._v("(efficiency), 定义为")]),t._v(" "),s("p",[t._v("$$\nE_p = \\frac{S_p}{p}=\\frac{T_1}{pT_p}\n$$")]),t._v(" "),s("p",[t._v("通常表示为范围在 "),s("span",{attrs:{"data-type":"text"}},[t._v("(0,100]")]),t._v(" 之间的百分比. 效率是对由于并行化造成的开销的衡量. 具有高效率的程序比效率低的程序在有用的工作上花费更多的时间, 在同步和通信上花费更少的时间.")]),t._v(" "),s("p",[t._v("下表 12-36 给出了并行求和示例程序的"),s("strong",[t._v("各个加速比和效率测量值")]),t._v(". 像这样超过 90% 的效率是非常好的, 但是不要被欺骗了. 能取得这么高的效率是因为我们的问题非常容易并行化. "),s("strong",[t._v("在实际中, 很少会这样")]),t._v(". 数十年来, 并行编程一直是一个很活跃的研究领域. 随着商用多核机器的出现, 这些机器的核数每几年就翻一番, 并行编程会继续是一个深入, 困难而活跃的研究领域.")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}}),t._v(" "),s("th",{staticStyle:{"text-align":"center"}}),t._v(" "),s("th",{staticStyle:{"text-align":"center"}}),t._v(" "),s("th",{staticStyle:{"text-align":"center"}}),t._v(" "),s("th",{staticStyle:{"text-align":"center"}}),t._v(" "),s("th",{staticStyle:{"text-align":"center"}})])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("线程(t)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("2")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("8")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("16")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("核(p)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("2")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("运行时间("),s("span",{attrs:{"data-type":"text"}},[t._v("Tp")]),t._v(")")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1.06")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("0.54")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("0.28")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("0.29")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("0.30")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("加速比("),s("span",{attrs:{"data-type":"text"}},[t._v("Sp")]),t._v(")")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1.9")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("3.8")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("3.7")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("3.5")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("效率("),s("span",{attrs:{"data-type":"text"}},[t._v("Ep")]),t._v(")")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("100%")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("98%")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("95%")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("91%")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("88%")])])])]),t._v(" "),s("blockquote",[s("p",[t._v("表 12-36 图 12-35 中执行时间的加速比和并行效率")])]),t._v(" "),s("p",[t._v("加速比还有另外一面, 称为"),s("strong",[t._v("弱扩展")]),t._v("(weak scaling), "),s("strong",[t._v("在增加处理器数量的同时, 增加问题的规模, 这样随着处理器数量的增加, 每个处理器执行的工作量保持不变")]),t._v(". 在这种描述中, 加速比和效率被表达为单位时间完成的工作总量. 例如, 如果将处理器数量翻倍, 同时每个小时也做了两倍的工作量, 那么就有线性的加速比和 100% 的效率.")]),t._v(" "),s("p",[s("strong",[t._v("弱扩展常常是比强扩展更真实的衡量值, 因为它更准确地反映了我们用更大的机器做更多的工作的愿望")]),t._v(". 对于科学计算程序来说尤其如此, 科学计算问题的规模很容易增加, 更大的问题规模直接就意味着更好地预测. 不过, 还是有一些应用的规模不那么容易增加, 对于这样的应用, 强扩展是更合适的. 例如, 实时信号处理应用所执行的工作量常常是由产生信号的物理传感器的属性决定的. 改变工作总量需要用不同的物理传感器, 这不太实际或者不太必要. 对于这类应用, 通常想要用并行来尽可能快地完成定量的工作.")]),t._v(" "),s("h4",{attrs:{id:"其他并发问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他并发问题"}},[t._v("#")]),t._v(" 其他并发问题")]),t._v(" "),s("p",[t._v("你可能已经注意到了, 一旦要求同步对共享数据的访问, 那么事情就变得复杂得多了. 迄今为止, 已经看到了用于互斥和生产者-消费者同步的技术, 但这仅仅是冰山一角. 同步从根本上说是很难的问题, 它引出了在普通的顺序程序中不会出现的问题. 这一小节是关于你在"),s("strong",[t._v("写并发程序时需要注意的一些问题的")]),t._v("(非常不完整的)综述. 为了让事情具体化, 将以线程为例描述讨论. 不过要记住, 这些典型问题是"),s("strong",[t._v("任何类型的并发流操作共享资源时都会出现的")]),t._v(".")]),t._v(" "),s("h5",{attrs:{id:"_1-线程安全"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-线程安全"}},[t._v("#")]),t._v(" 1.线程安全")]),t._v(" "),s("p",[t._v("当用线程编写程序时, 必须小心地编写那些具有称为"),s("strong",[t._v("线程安全性")]),t._v("(thread safety)属性的函数. 一个函数被称为"),s("strong",[t._v("线程安全的")]),t._v("(thread-safe), 当且仅当被多个并发线程反复地调用时, 它会一直产生正确的结果. 如果一个函数不是线程安全的, 就说它是"),s("strong",[t._v("线程不安全的")]),t._v("(thread-unsafe).")]),t._v(" "),s("p",[t._v("能够定义出四个(不相交的)线程不安全函数类:")]),t._v(" "),s("p",[s("strong",[t._v("第 1 类: 不保护共享变量的函数.")]),t._v("  在代码 12-16 的 thread 函数中就已经遇到了这样的问题, 该函数对一个未受保护的全局计数器变量加 1. 将这类线程不安全函数变成线程安全的, 相对而言比较容易: "),s("strong",[t._v("利用像 P 和 V 操作这样的同步操作来保护共享的变量")]),t._v(". 这个方法的优点是在调用程序中不需要做任何修改. 缺点是同步操作将减慢程序的执行时间.")]),t._v(" "),s("p",[s("strong",[t._v("第 2 类: 保持跨越多个调用的状态的函数.")]),t._v("  一个伪随机数生成器是这类线程不安全函数的简单例子. 请参考代码 12-37 中的伪随机数生成器程序包. rand 函数是线程不安全的, 因为当前调用的结果依赖于前次调用的中间结果. 当调用 srand 为 rand 设置了一个种子后, 我们从一个单线程中反复地调用 rand, 能够预期得到一个可重复的随机数字序列. 然而, 如果多线程调用 rand 函数, 这种假设就不再成立了.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" next_seed "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* rand - return pseudorandom integer in the range 0..32767 */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rand")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    next_seed "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" next_seed "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1103515245")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12543")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("next_seed "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("32768")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* srand - set the initial seed for rand() */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("srand")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" new_seed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    next_seed "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" new_seed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 12-37 一个线程不安全的伪随机数生成器(基于【61】)")])]),t._v(" "),s("p",[t._v("使得像 rand 这样的函数线程安全的唯一方式是"),s("strong",[t._v("重写它, 使得它不再使用任何 static 数据, 而是依靠调用者在参数中传递状态信息")]),t._v(". 这样做的缺点是, 程序员现在还要被迫修改调用程序中的代码. 在一个大的程序中, 可能有成百上千个不同的调用位置, 做这样的修改将是非常麻烦的, 而且容易出错.")]),t._v(" "),s("p",[s("strong",[t._v("第 3 类: 返回指向静态变量的指针的函数.")]),t._v("  某些函数, 例如 ctime 和 gethost-byname, 将计算结果放在一个 static 变量中, 然后返回一个指向这个变量的指针. 如果从并发线程中调用这些函数, 那么将可能发生灾难, "),s("strong",[t._v("因为正在被一个线程使用的结果会被另一个线程悄悄地覆盖了")]),t._v(".")]),t._v(" "),s("p",[t._v("有两种方法来处理这类线程不安全函数. 一种选择是"),s("strong",[t._v("重写函数, 使得调用者传递存放结果的变量的地址. 这就消除了所有共享数据")]),t._v(", 但是它要求程序员能够修改函数的源代码.")]),t._v(" "),s("p",[t._v("如果线程不安全函数是难以修改或不可能修改的(例如, 代码非常复杂或是没有源代码可用), 那么另外一种选择就是使用"),s("strong",[t._v("加锁-复制")]),t._v("(lock-and-copy)技术. 基本思想是将线程不安全函数与互斥锁联系起来. 在每一个调用位置, 对互斥锁加锁, 调用线程不安全函数, 将函数返回的结果复制到一个私有的内存位置, 然后对互斥锁解锁. 为了尽可能地减少对调用者的修改, 你应该定义一个线程安全的包装函数, 它执行加锁-复制, 然后通过调用这个包装函数来取代所有对线程不安全函数的调用. 例如, 代码 12-38 给出了 ctime 的一个线程安全的版本, 利用的就是加锁-复制技术.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ctime_ts")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("time_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("timep"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("privatep"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("sharedp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("mutex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    sharedp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ctime")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("timep"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strcpy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("privatep"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sharedp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Copy string from shared to private */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("mutex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" privatep"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 12-38 C 标准库函数 ctime 的线程安全的包装函数. 使用加锁—复制技术调用一个第 3 类线程不安全函数")])]),t._v(" "),s("p",[s("strong",[t._v("第 4 类: 调用线程不安全函数的函数.")]),t._v("  如果函数 f 调用线程不安全函数 g, 那么 f 就是线程不安全的吗? 不一定. 如果 g 是第 2 类函数, 即依赖于跨越多次调用的状态, 那么 f 也是线程不安全的, 而且除了重写 g 以外, 没有什么办法. 然而, 如果 g 是第 1 类或者第 3 类函数, 那么只要你用一个互斥锁保护调用位置和任何得到的共享数据, f 仍然可能是线程安全的. 在代码 12-38 中我们看到了一个这种情况很好的示例, 其中使用加锁-复制编写了一个线程安全函数, 它调用了一个线程不安全的函数.")]),t._v(" "),s("h5",{attrs:{id:"_2-可重入性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-可重入性"}},[t._v("#")]),t._v(" 2.可重入性")]),t._v(" "),s("p",[t._v("有一类重要的"),s("strong",[t._v("线程安全函数")]),t._v(", 叫做"),s("strong",[t._v("可重入函数")]),t._v("(reentrant function), 其特点在于它们具有这样一种属"),s("strong",[t._v("性: 当它们被多个线程调用时, 不会引用任何共享数据")]),t._v(". 尽管"),s("strong",[t._v("线程安全")]),t._v("和"),s("strong",[t._v("可重入")]),t._v("有时会(不正确地)被用做同义词, 但是它们之间还是有清晰的技术差别, 值得留意. 图 12-39 展示了可重入函数, 线程安全函数和线程不安全函数之间的集合关系. "),s("strong",[t._v("所有函数的集合被划分成不相交的线程安全和线程不安全函数集合. 可重入函数集合是线程安全函数的一个真子集")]),t._v(".")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230909130254-rkgg07t.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图12-39 可重入函数, 线程安全函数和线程不安全函数之间的集合关系")])]),t._v(" "),s("p",[t._v("可重入函数通常要比不可重入的线程安全的函数高效一些, 因为它们"),s("strong",[t._v("不需要同步操作")]),t._v(". 更进一步来说, 将第 2 类线程不安全函数转化为线程安全函数的唯一方法就是重写它, 使之变为可重入的. 例如, 代码 12-40 展示了图 12-37 中 rand 函数的一个可重入的版本. "),s("mark",[s("strong",[t._v("关键思想是用一个调用者传递进来的指针取代了静态的 next 变量")])]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* rand_r - return a pseudorandom integer on 0..32767 */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rand_r")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("nextp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("nextp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("nextp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1103515245")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12345")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("nextp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("65536")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("32768")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 12-40 rand_r: 图 12-37 中的 rand 函数的可重入版本")])]),t._v(" "),s("p",[t._v("检査某个函数的代码并先验地断定它是可重入的, 这可能吗? 不幸的是, 不一定能这样. "),s("strong",[t._v("如果所有的函数参数都是传值传递的(即没有指针)")]),t._v(" , 并且所有的数据引用都是本地的自动栈变量(即没有引用静态或全局变量), 那么函数就是"),s("strong",[t._v("显式可重入的")]),t._v("(explicitly reentrant), 也就是说, 无论它是被如何调用的, 都可以断言它是可重入的.")]),t._v(" "),s("p",[t._v("然而, 如果把假设放宽松一点, 允许显式可重入函数中一些参数是引用传递的(即允许它们传递指针), 那么就得到了一个"),s("strong",[t._v("隐式可重入的")]),t._v("(implicitly reentrant)函数, 也就是说, 如果调用"),s("strong",[t._v("线程小心地传递指向非共享数据的指针, 那么它是可重入的")]),t._v(". 例如, 代码 12-40 中的 rand_r 函数就是隐式可重入的.")]),t._v(" "),s("p",[t._v("我们总是使用术语"),s("strong",[t._v("可重入的")]),t._v("(reentrant)既包括显式可重入函数也包括隐式可重入函数. 然而, 认识到可重入性有时既是调用者也是被调用者的属性, 并不只是被调用者单独的属性是非常重要的.")]),t._v(" "),s("h5",{attrs:{id:"_3-在线程化的程序中使用已存在的库函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-在线程化的程序中使用已存在的库函数"}},[t._v("#")]),t._v(" 3.在线程化的程序中使用已存在的库函数")]),t._v(" "),s("p",[t._v("大多数 Linux 函数, 包括定义在标准 C 库中的函数(例如 malloc, free, realloc, printf 和 scanf)都是线程安全的, 只有一小部分是例外. 下表 12-41 列出了常见的例外. asctime, ctime 和 localtime 函数是在不同时间和数据格式间相互来回转换时经常使用的函数. gethostbyname, gethostbyaddr 和 inet_ntoa 函数是已弃用的网络编程函数, 已经分别被可重入的 getaddrinfo, getnameinfo 和 inet_ntop 函数取代(见第 11 章). 除了 rand 和 strtok 以外, 所有这些线程不安全函数都是第 3 类的, 它们返回一个指向静态变量的指针. 如果需要在一个线程化的程序中调用这些函数中的某一个, 对调用者来说最不惹麻烦的方法是加锁-复制.")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("线程不安全函数")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("线程不安全类")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("Linux 线程安全版本")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("rand")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("2")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("rand_r")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("strtok")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("2")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("strtok_r")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("asctime")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("3")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("asctime_r")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("ctime")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("3")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("ctime_r")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("gethostbyaddr")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("3")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("gethostbyaddr_r")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("gethostbyname")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("3")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("gethostbyname_r")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("inet_ntoa")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("3")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("(无)")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("localtime")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("3")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("localtime_r")])])])]),t._v(" "),s("blockquote",[s("p",[t._v("表 12-41 常见的线程不安全的库函数")])]),t._v(" "),s("p",[t._v("然而, 加锁-复制方法有许多缺点.")]),t._v(" "),s("ul",[s("li",[t._v("首先, 额外的同步降低了程序的速度.")]),t._v(" "),s("li",[t._v("第二, 像 gethostbyname 这样的函数返回指向复杂结构的结构的指针, 要复制整个结构层次, 需要"),s("strong",[t._v("深层复制")]),t._v("(deepcopy)结构.")]),t._v(" "),s("li",[t._v("第三, 加锁-复制方法对像 rand 这样依赖跨越调用的静态状态的第 2 类函数并不有效.")])]),t._v(" "),s("p",[t._v('因此, Linux 系统提供大多数线程不安全函数的可重入版本. 可重入版本的名字总是以 "_r" 后缀结尾. 例如, asctime 的可重入版本就叫做 asctime_r. 建议尽可能地使用这些函数.')]),t._v(" "),s("h5",{attrs:{id:"_4-竞争"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-竞争"}},[t._v("#")]),t._v(" 4.竞争")]),t._v(" "),s("p",[t._v("当一个程序的正确性"),s("strong",[t._v("依赖于一个线程要在另一个线程到达 y 点之前到达它的控制流中的 x 点")]),t._v("时, 就会发生"),s("strong",[t._v("竞争")]),t._v("(race). 通常发生竞争是因为程序员假定线程将按照某种特殊的轨迹线穿过执行状态空间, 而忘记了另一条准则规定: "),s("strong",[t._v("多线程的程序必须对任何可行的轨迹线都正确工作")]),t._v(".")]),t._v(" "),s("p",[t._v("例子是理解竞争本质的最简单的方法. 来看看代码 12-42 中的简单程序. 主线程创建了四个对等线程, 并传递一个指向一个唯一的整数 ID 的指针到每个线程. 每个对等线程复制它的参数中传递的 ID 到一个局部变量中(第 22 行), 然后输出一个包含这个 ID 的信息. 它看上去足够简单, 但是当在系统上运行这个程序时, 得到以下不正确的结果:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* WARNING: This code is buggy! */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"csapp.h"')])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("N")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")])])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("vargp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pthread_t")]),t._v(" tid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("N"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" N"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pthread_create")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("tid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" thread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" N"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pthread_join")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Thread routine */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("vargp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" myid "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("vargp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello from thread %d\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" myid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 12-42 一个具有竞争的程序")])]),t._v(" "),s("p",[t._v("问题是由"),s("strong",[t._v("每个对等线程和主线程之间的竞争")]),t._v("引起的. 你能发现这个竞争吗? 下面是发生的情况. 当主线程在第 13 行创建了一个对等线程, 它传递了一个指向本地栈变量 i 的指针. 在此时, 竞争出现在下一次在第 12 行对 i 加 1 和第 22 行参数的间接引用和赋值之间. 如果对等线程在主线程执行第 12 行对 i 加 1 之前就执行了第 22 行, 那么 myid 变量就得到正确的 ID. 否则, 它包含的就会是其他线程的 ID. 令人惊慌的是, "),s("strong",[t._v("是否得到正确的答案依赖于内核是如何调度线程的执行的")]),t._v('. 在我们的系统中它失败了, 但是在其他系统中, 它可能就能正确工作, 让程序员 "幸福地" 察觉不到程序的严重错误.')]),t._v(" "),s("p",[t._v("为了消除竞争, 可以动态地为每个整数 ID 分配一个独立的块, 并且传递给线程例程一个指向这个块的指针, 如代码 12-43 所示(第 12 ~ 14 行). 请注意线程例程必须释放这些块以避免内存泄漏.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"csapp.h"')])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("N")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")])])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("vargp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pthread_t")]),t._v(" tid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("N"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" N"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        ptr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Malloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pthread_create")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("tid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" thread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" N"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pthread_join")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Thread routine */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("vargp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" myid "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("vargp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Free")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vargp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello from thread %d\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" myid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br")])]),s("blockquote",[s("p",[t._v("代码 12-43  代码 12-42 中程序的一个没有竞争的正确版本")])]),t._v(" "),s("p",[t._v("当我们在系统上运行这个程序时, 现在得到了正确的结果:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("race\nHello from thread "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nHello from thread "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\nHello from thread "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\nHello from thread "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("h5",{attrs:{id:"_5-死锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-死锁"}},[t._v("#")]),t._v(" 5.死锁")]),t._v(" "),s("p",[t._v("信号量引入了一种潜在的令人厌恶的"),s("strong",[t._v("运行时错误")]),t._v(", 叫做"),s("strong",[t._v("死锁")]),t._v("(deadlock), 它指的是"),s("strong",[t._v("一组线程被阻塞了, 等待一个永远也不会为真的条件")]),t._v(". 进度图对于理解死锁是一个无价的工具. 例如, 图 12-44 展示了一对用两个信号量来实现互斥的线程的进程图.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230909131117-6efa2t9.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图12-44 一个会死锁的程序的进度图")])]),t._v(" "),s("p",[t._v("从这幅图中, 能够得到一些关于死锁的重要知识:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("程序员使用 P 和 V 操作顺序不当, 以至于两个信号量的禁止区域重叠")]),t._v(". 如果某个执行轨迹线碰巧到达了"),s("strong",[t._v("死锁状态 d")]),t._v(", 那么就不可能有进一步的进展了, 因为重叠的禁止区域阻塞了每个合法方向上的进展. 换句话说, "),s("strong",[t._v("程序死锁是因为每个线程都在等待其他线程执行一个根不可能发生的 V 操作")]),t._v(".")]),t._v(" "),s("li",[t._v("重叠的禁止区域引起了一组称为"),s("strong",[t._v("死锁区域")]),t._v("(deadlock region)的状态. 如果一个轨迹线碰巧到达了一个死锁区域中的状态, 那么死锁就是不可避免的了. "),s("strong",[t._v("轨迹线可以进入死锁区域, 但是它们不可能离开")]),t._v(".")]),t._v(" "),s("li",[t._v("死锁是一个相当困难的问题, 因为它不总是可预测的. 一些幸运的执行轨迹线将绕开死锁区域, 而其他的将会陷入这个区域. 图 12-44 展示了每种情况的一个示例. 对于程序员来说, 这其中隐含的着实令人惊慌. 你可以运行一个程序 1000 次不出任何问题, 但是下一次它就死锁了. 或者程序在一台机器上可能运行得很好, 但是在另外的机器上就会死锁. 最糟糕的是, "),s("strong",[t._v("错误常常是不可重复的, 因为不同的执行有不同的轨迹线")]),t._v(".")])]),t._v(" "),s("p",[t._v("程序死锁有很多原因, 要避免死锁一般而言是很困难的. 然而, 当使用"),s("strong",[t._v("二元信号量来实现互斥")]),t._v("时, 如图 12-44 所示, 你可以应用下面的简单而有效的规则来避免死锁:")]),t._v(" "),s("p",[s("mark",[s("strong",[t._v("互斥锁加锁顺序规则: 给定所有互斥操作的一个全序, 如果每个线程都是以一种顺序获得互斥锁并以相反的顺序释放, 那么这个程序就是无死锁的.")])])]),t._v(" "),s("p",[t._v("例如, 可以通过这样的方法来解决图 12-44 中的死锁问题: 在每个线程中先对 s 加锁, 然后再对 t 加锁. 图 12-45 展示了得到的进度图.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230909131322-h817s43.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("图12-45 一个无死锁程序的进度图")])]),t._v(" "),s("h4",{attrs:{id:"小结-7"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小结-7"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),s("p",[t._v("一个并发程序是由在时间上重叠的一组逻辑流组成的. 在这一章中, 学习了三种不同的构建并发程序的机制: "),s("strong",[t._v("进程, I/O 多路复用和线程")]),t._v(". 并以一个并发网络服务器作为贯穿全章的应用程序.")]),t._v(" "),s("p",[s("strong",[t._v("进程是由内核自动调度的, 而且因为它们有各自独立的虚拟地址空间, 所以要实现共享数据, 必须要有显式的 IPC 机制. 事件驱动程序创建它们自己的并发逻辑流, 这些逻辑流被模型化为状态机, 用 I/O 多路复用来显式地调度这些流. 因为程序运行在一个单一进程中, 所以在流之间共享数据速度很快而且很容易. 线程是这些方法的混合. 同基于进程的流一样, 线程也是由内核自动调度的. 同基于 I/O 多路复用的流一样, 线程是运行在一个单一进程的上下文中的, 因此可以快速而方便地共享数据.")])]),t._v(" "),s("p",[s("strong",[t._v("无论哪种并发机制, 同步对共享数据的并发访问都是一个困难的问题")]),t._v(". 提出对信号量的 P 和 V 操作就是为了帮助解决这个问题. "),s("strong",[t._v("信号量")]),t._v("操作可以用来提供对共享数据的互斥访问, 也对诸如生产者-消费者程序中有限缓冲区和读者-写者系统中的共享对象这样的资源访问进行调度. 一个并发预线程化的 echo 服务器提供了信号量使用场景的很好的例子.")]),t._v(" "),s("p",[t._v("并发也引入了其他一些困难的问题. "),s("strong",[t._v("被线程调用的函数必须具有一种称为线程安全的属性")]),t._v(". 我们定义了四类线程不安全的函数, 以及一些将它们变为线程安全的建议. 可重入函数是线程安全函数的一个真子集, 它不访问任何共享数据. 可重入函数通常比不可重入函数更为有效, 因为它们不需要任何同步原语. 竞争和死锁是并发程序中出现的另一些困难的问题. 当程序员错误地假设逻辑流该如何调度时, 就会发生竞争. 当一个流等待一个永远不会发生的事件时, 就会产生死锁.")]),t._v(" "),s("p",[t._v("‍")]),t._v(" "),s("p",[t._v("‍")]),t._v(" "),s("p",[t._v("‍")]),t._v(" "),s("p",[t._v("‍")]),t._v(" "),s("p",[t._v("‍")]),t._v(" "),s("p",[t._v("‍")]),t._v(" "),s("p",[t._v("‍")]),t._v(" "),s("p",[t._v("‍")])])}),[],!1,null,null,null);s.default=e.exports}}]);