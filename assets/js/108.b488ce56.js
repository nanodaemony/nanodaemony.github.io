(window.webpackJsonp=window.webpackJsonp||[]).push([[108],{426:function(s,t,a){"use strict";a.r(t);var n=a(7),r=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"_310-mysql优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_310-mysql优化"}},[s._v("#")]),s._v(" 310.MySQL优化")]),s._v(" "),t("h3",{attrs:{id:"一-基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一-基础"}},[s._v("#")]),s._v(" 一.基础")]),s._v(" "),t("p",[s._v("下图是优化的手段及其收益成本的经验图, 可以看出 SQL 及索引的优化效果是最好的, 而且成本最低, 所以工作中要在这块花更多时间.")]),s._v(" "),t("p",[s._v("​"),t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20250225210003-6nyp3en.png",alt:"image"}}),s._v("​")]),s._v(" "),t("p",[s._v("数据库优化主要包含以下内容:")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("硬件资源优化")]),s._v(": 换更大更强的机器.")]),s._v(" "),t("li",[t("strong",[s._v("操作系统优化")]),s._v(": 调整操作系统的某些设置.")]),s._v(" "),t("li",[t("strong",[s._v("服务器/引擎优化")]),s._v(": 也就是针对数据库软件本体进行优化, 比如说调整事务隔离级别. 在 MySQL 里面还可以针对不同的引擎做优化, 比如说调整 InnoDB 引擎的日志刷盘时机.")]),s._v(" "),t("li",[t("strong",[s._v("SQL 优化")]),s._v(": 针对的就是 SQL 本身了.")])]),s._v(" "),t("p",[s._v("如果站在数据库的角度, 那么 SQL 优化就是为了达到两个目标.")]),s._v(" "),t("ol",[t("li",[t("strong",[s._v("减少磁盘 IO")]),s._v(", 这个又可以说是尽量避免全表扫描, 尽量使用索引以及尽量使用覆盖索引.")]),s._v(" "),t("li",[t("strong",[s._v("减少内存 CPU 消耗")]),s._v(", 这一部分主要是尽可能减少排序, 分组, 去重之类的操作.")])]),s._v(" "),t("h4",{attrs:{id:"优化工具"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优化工具"}},[s._v("#")]),s._v(" 优化工具")]),s._v(" "),t("p",[s._v("如果想要知道优化后的效果, 优化相关的工具必不可少.")]),s._v(" "),t("p",[s._v("先来个表:")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("employees"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("NOT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AUTO_INCREMENT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("varchar")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("24")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("NOT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DEFAULT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COMMENT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'姓名'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("NOT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DEFAULT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'0'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COMMENT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'年龄'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("position"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("varchar")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("NOT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DEFAULT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COMMENT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'职位'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("hire_time"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("timestamp")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("NOT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DEFAULT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CURRENT_TIMESTAMP")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COMMENT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'入职时间'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PRIMARY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("KEY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("KEY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("idx_name_age_position"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("position"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("USING")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BTREE")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 联合索引")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENGINE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("InnoDB")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DEFAULT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CHARSET")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" utf8 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COMMENT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'员工表'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("这里创建了"),t("strong",[s._v("联合索引")]),s._v(": idx_name_age_position, 共三个字段 "),t("strong",[s._v("name, age 和 position")]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"_1-explain⭐️"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-explain⭐️"}},[s._v("#")]),s._v(" 1.EXPLAIN⭐️")]),s._v(" "),t("p",[s._v("使用 EXPLAIN 关键字可以"),t("strong",[s._v("模拟优化器执行 SQL 语句, 并返回一个")]),s._v("​"),t("mark",[t("strong",[s._v("执行计划")])]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("在 SELECT 语句之前加 EXPLAIN 关键字")]),s._v(", MySQL 会在查询上设置一个"),t("strong",[s._v("标记")]),s._v(", 执行查询会"),t("strong",[s._v("返回执行计划的信息")]),s._v(", 而"),t("strong",[s._v("不是执行")]),s._v("这条 SQL. 可以用于分析查询语句或结构的性能瓶颈.")]),s._v(" "),t("p",[s._v("如果一条 SQL 包含子查询等较复杂的查询, 那么 Explain 的结果可能有多行, 每行都可能各自有一些属性.")]),s._v(" "),t("p",[s._v("一般优化 SQL 都是在 "),t("strong",[s._v("EXPLAIN 查看执行计划, 尝试优化")]),s._v("两个步骤之间循环往复, 直到发现 SQL 性能达标.")]),s._v(" "),t("p",[s._v("​"),t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/3bc7f7d1f70494957272092cc643d1fa-20231223175001-dhwx9gd.png",alt:""}}),s._v("​")]),s._v(" "),t("h6",{attrs:{id:"重要属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重要属性"}},[s._v("#")]),s._v(" 重要属性")]),s._v(" "),t("p",[s._v("Explain 分析结果中比较重要的"),t("strong",[s._v("属性")]),s._v("如下:")]),s._v(" "),t("blockquote",[t("p",[s._v("table")])]),s._v(" "),t("p",[s._v("表示正在访问哪个表.")]),s._v(" "),t("blockquote",[t("p",[t("mark",[s._v("type(重要)")])])]),s._v(" "),t("p",[s._v("表示"),t("strong",[s._v("访问类型")]),s._v(", 即表示 MySQL 如何查找表中的行, 是"),t("strong",[s._v("较为重要")]),s._v("的一个指标.")]),s._v(" "),t("p",[s._v("从"),t("mark",[t("strong",[s._v("最优到最差")])]),s._v("依次为: "),t("strong",[s._v("system > const > eq_ref > ref > range > index > ALL")]),s._v(". 一般来说, "),t("strong",[s._v("得保证查询达到 range 级别, 最好达到 ref")]),s._v(", 如果达不到则可以考虑进行 SQL 优化.")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("const, system")]),s._v(": 当 "),t("strong",[s._v("MySQL 能对查询的某部分进行优化并将其转化成一个常量时, type 取值为 const 或 system. 用于 primary key 或 unique key 的所有列与常数")]),s._v("比较时, 所以表最多有一个匹配行, 读取 1 次, 速度比较快. system 是 const 的特例, 表里只有一条元组匹配时为 system.")]),s._v(" "),t("li",[t("strong",[s._v("eq_ref")]),s._v(": 使用这种索引查找, MySQL 知道"),t("strong",[s._v("最多只返回一条符合条件")]),s._v("的记录. 这种访问方法可以在 MySQL 使用主键或者唯一性索引查找时看到, 它会将它们与某个参考值做比较. primary key 或 unique key 索引的所有部分被连接使用, 最多只会返回一条符合条件的记录. 简单的 SELECT 查询不会出现这种 type.")]),s._v(" "),t("li",[t("strong",[s._v("ref")]),s._v(": 相比 eq_ref, 不使用唯一索引, 而是使用"),t("strong",[s._v("普通索引或唯一索引")]),s._v("的部分前缀. 索引要和某个值相比较, 可能会找到"),t("strong",[s._v("多个符合条件的行, 因此它是查找和扫描的混合体")]),s._v(". 这是一种索引访问(有时也叫做索引查找), 它返回"),t("strong",[s._v("所有匹配某个单个值")]),s._v("的行. 此类索引访问只有当使用非唯一性索引或唯一性索引的非唯一性前缀时才会发生.")]),s._v(" "),t("li",[t("strong",[s._v("range")]),s._v(": 使用一个"),t("strong",[s._v("索引来检索给定范围的行")]),s._v(". 范围扫描通常出现在 "),t("code",[s._v("in(), between ,> ,<, >=")]),s._v("​ 等操作中.")]),s._v(" "),t("li",[t("strong",[s._v("index")]),s._v(": "),t("strong",[s._v("扫描全索引就能拿到结果")]),s._v(", 一般是扫描某个"),t("strong",[s._v("二级索引")]),s._v(", 这种扫描不会从索引树根节点开始快速查找, 而是直接对二级索引的叶子节点遍历和扫描, 速度还是比较慢的, 这种查询一般为使用"),t("strong",[s._v("覆盖索引")]),s._v(", 二级索引一般比较小, 所以这种通常比 ALL 快一些. 这种情况虽然使用了索引, 但是其实是在遍历索引进行查找, 所以通常需要避免.")]),s._v(" "),t("li",[t("strong",[s._v("ALL")]),s._v(": 全表扫描. 扫描聚簇索引的所有叶子节点. 通常情况下这需要增加索引来进行优化.")])]),s._v(" "),t("blockquote",[t("p",[s._v("possible_keys")])]),s._v(" "),t("p",[s._v("表示本次查询"),t("mark",[t("strong",[s._v("可能会使用哪些索引")])]),s._v("来进行查找. 当 key 为 NULL 时, 可能是因为表中数据不多, MySQL 认为索引对此查询帮助不大, 选择了全表查询.")]),s._v(" "),t("blockquote",[t("p",[s._v("key")])]),s._v(" "),t("p",[s._v("表示查询"),t("mark",[t("strong",[s._v("实际采用哪个索引来进行查找")])]),s._v(". 如果"),t("strong",[s._v("没有选择使用索引, 则是 NULL")]),s._v(".")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("key = primary")]),s._v(" 表示使用了"),t("strong",[s._v("主键")]),s._v(".")]),s._v(" "),t("li",[t("strong",[s._v("key = null")]),s._v(" 表示"),t("strong",[s._v("没有用到索引")]),s._v(".")])]),s._v(" "),t("p",[s._v("有时候可能出现 possible_key 有值但是 key 没有值的情况, 就是实际上并没有用到索引.")]),s._v(" "),t("blockquote",[t("p",[s._v("key_len")])]),s._v(" "),t("p",[s._v("表示"),t("strong",[s._v("在索引里使用的字节数")]),s._v(". 如果键是 NULL, 长度就是 NULL. 比如查询用到了联合索引, 那么从 key_len 就可以推算出使用到的联合索引的前缀长度.")]),s._v(" "),t("p",[s._v("举例: film_actor 表的联合索引 idx_film_actor_id 由 film_id 和 actor_id 两个 int 列组成, 并且每个 int 是 4 字节. 通过结果中的 key_len = 4 可推断出查询使用了联合索引的第一个列即 film_id 列来执行索引查找.")]),s._v(" "),t("blockquote",[t("p",[s._v("ref")])]),s._v(" "),t("p",[s._v("表示哪个字段或常数与 key 一起被使用.")]),s._v(" "),t("blockquote",[t("p",[s._v("rows")])]),s._v(" "),t("p",[s._v("MySQL "),t("strong",[s._v("估计要读取的行数")]),s._v(", 注意这个不是结果集里的行数.")]),s._v(" "),t("blockquote",[t("p",[t("mark",[s._v("Extra")])])]),s._v(" "),t("p",[s._v("额外信息, 常见重要值如下:")]),s._v(" "),t("ul",[t("li",[t("mark",[t("strong",[s._v("Using index")])]),s._v(": 使用了"),t("mark",[t("strong",[s._v("覆盖索引")])]),s._v(".")]),s._v(" "),t("li",[t("mark",[t("strong",[s._v("Using where")])]),s._v(": 使用 WHERE 语句来处理结果, 并且查询的列未被索引覆盖.")]),s._v(" "),t("li",[t("mark",[t("strong",[s._v("Using index condition")])]),s._v(": 查询的列不完全被索引覆盖, WHERE 条件中是一个前导列的范围. 参考：索引下推。")]),s._v(" "),t("li",[s._v("Using temporary: 需要创建一张临时表来处理查询. 出现这种情况一般是要进行优化.")]),s._v(" "),t("li",[t("mark",[t("strong",[s._v("Using filesort")])]),s._v(": 使用了外部磁盘排序而不是索引排序. 在没有索引的情况下, 数据较小时可以在内存进行排序, 否则需要"),t("strong",[s._v("在磁盘完成排序")]),s._v(". 这种情况下一般也要考虑使用索引来优化.")])]),s._v(" "),t("h5",{attrs:{id:"_2-trace工具"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-trace工具"}},[s._v("#")]),s._v(" 2.Trace工具")]),s._v(" "),t("p",[s._v("对于 "),t("code",[s._v("name > 'a'")]),s._v("​ 和 "),t("code",[s._v("name > 'zzz'")]),s._v("​ 这种"),t("strong",[s._v("范围查询")]),s._v("的执行结果, MySQL "),t("strong",[s._v("最终")]),s._v("是否会选择走索引可能是"),t("strong",[s._v("无法轻易判断")]),s._v("的, 可以"),t("strong",[s._v("使用 trace 工具来看看 MySQL 最终如何选择索引")]),s._v(". 注意开启 trace 工具会影响 MySQL 性能, 所以只能临时分析 SQL 使用, 用完后应立即关闭.")]),s._v(" "),t("p",[s._v("开启 trace 工具.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("session")]),s._v(" optimizer_trace "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"enabled=on"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" end_markers_in_json "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("on")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 开启trace")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("执行语句.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" position"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("分析结果")]),s._v("存放到了下面的表中.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" information_schema"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("OPTIMIZER_TRACE"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("得到 trace 字段:")]),s._v(" "),t("div",{staticClass:"language-json line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"steps"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"join_preparation"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" ‐‐第一阶段"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" SQL准备阶段\n                 "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"select#"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                 "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"steps"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n                 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                 "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"expanded_query"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"/* select#1 */ select `employees`.`id` AS `id`,`employees`.`name` AS `name`,`employees`.`age` AS `age`,`employees`.`position` AS `position`,`employees`.`hire_time` AS `hire_time` from`employees` where (`employees`.`name` > 'a') order by `employees`.`position`\"")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* steps */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* join_preparation */")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"join_optimization"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" ‐‐第二阶段"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" SQL优化阶段\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"select#"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"steps"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"condition_processing"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" ‐‐条件处理\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"condition"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"WHERE"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"original_condition"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"(`employees`.`name` > 'a')\"")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"steps"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"transformation"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"equality_propagation"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"resulting_condition"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"(`employees`.`name` > 'a')\"")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"transformation"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"constant_propagation"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"resulting_condition"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"(`employees`.`name` > 'a')\"")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"transformation"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"trivial_condition_removal"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"resulting_condition"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"(`employees`.`name` > 'a')\"")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* steps */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* condition_processing */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"substitute_generated_columns"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* substitute_generated_columns */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"table_dependencies"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" ‐‐表依赖详情\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"table"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"`employees`"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"row_may_be_null"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"map_bit"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"depends_on_map_bits"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* depends_on_map_bits */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* table_dependencies */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"ref_optimizer_key_uses"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* ref_optimizer_key_uses */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"rows_estimation"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" ‐‐预估表的访问成本\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"table"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"`employees`"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"range_analysis"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"table_scan"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("     ‐‐全表扫描情况\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"rows"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10123")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("      ‐‐扫描行数\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"cost"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2054.7")]),s._v("      ‐‐查询成本\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* table_scan */")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("70")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"potential_range_indexes"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" ‐‐查询可能使用的索引\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"index"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"PRIMARY"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ‐‐主键索引\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"usable"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"cause"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"not_applicable"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"index"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"idx_name_age_position"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ‐‐辅助索引\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"usable"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"key_parts"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"name"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"age"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"position"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"id"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* key_parts */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* potential_range_indexes */")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"setup_range_conditions"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* setup_range_conditions */")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"group_index_range"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"chosen"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"cause"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"not_group_by_or_distinct"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* group_index_range */")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"analyzing_range_alternatives"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" ‐‐分析各个索引使用成本\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"range_scan_alternatives"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"index"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"idx_name_age_position"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"ranges"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a < name"')]),s._v(" ‐‐索引使用范围\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* ranges */")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"index_dives_for_eq_ranges"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"rowid_ordered"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ‐‐使用该索引获取的记录是否按照主键排序\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"using_mrr"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"index_only"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ‐‐是否使用覆盖索引\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"rows"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5061")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("        ‐‐索引扫描行数\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"cost"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6074.2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("      ‐‐索引使用成本\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"chosen"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("     ‐‐是否选择该索引\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"cause"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"cost"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* range_scan_alternatives */")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"analyzing_roworder_intersect"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"usable"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"cause"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"too_few_roworder_scans"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* analyzing_roworder_intersect */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* analyzing_range_alternatives */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* range_analysis */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* rows_estimation */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"considered_execution_plans"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"plan_prefix"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* plan_prefix */")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"table"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"`employees`"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"best_access_path"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" ‐‐最优访问路径\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"considered_access_paths"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" ‐‐最终选择的访问路径\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"rows_to_scan"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10123")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"access_type"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"scan"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ‐‐访问类型"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 为scan"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 全表扫描\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"resulting_rows"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10123")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"cost"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2052.6")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"chosen"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ‐‐确定选择\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"use_tmp_table"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* considered_access_paths */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* best_access_path */")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"condition_filtering_pct"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"rows_for_plan"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10123")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"cost_for_plan"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2052.6")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"sort_cost"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10123")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"new_cost_for_plan"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("12176")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"chosen"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* considered_execution_plans */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"attaching_conditions_to_tables"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"original_condition"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"(`employees`.`name` > 'a')\"")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"attached_conditions_computation"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* attached_conditions_computation */")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"attached_conditions_summary"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"table"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"`employees`"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"attached"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"(`employees`.`name` > 'a')\"")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* attached_conditions_summary */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* attaching_conditions_to_tables */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"clause_processing"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"clause"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ORDER BY"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"original_clause"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"`employees`.`position`"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"items"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"item"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"`employees`.`position`"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* items */")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"resulting_clause_is_simple"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"resulting_clause"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"`employees`.`position`"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* clause_processing */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"reconsidering_access_paths_for_index_ordering"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"clause"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ORDER BY"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"steps"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* steps */")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"index_order_summary"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"table"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"`employees`"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"index_provides_order"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"order_direction"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"undefined"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"index"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"unknown"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"plan_changed"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* index_order_summary */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* reconsidering_access_paths_for_index_ordering */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"refine_plan"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"table"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"`employees`"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* refine_plan */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* steps */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* join_optimization */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"join_execution"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" ‐‐第三阶段"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" SQL执行阶段\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"select#"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"steps"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* steps */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* join_execution */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* steps */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br"),t("span",{staticClass:"line-number"},[s._v("59")]),t("br"),t("span",{staticClass:"line-number"},[s._v("60")]),t("br"),t("span",{staticClass:"line-number"},[s._v("61")]),t("br"),t("span",{staticClass:"line-number"},[s._v("62")]),t("br"),t("span",{staticClass:"line-number"},[s._v("63")]),t("br"),t("span",{staticClass:"line-number"},[s._v("64")]),t("br"),t("span",{staticClass:"line-number"},[s._v("65")]),t("br"),t("span",{staticClass:"line-number"},[s._v("66")]),t("br"),t("span",{staticClass:"line-number"},[s._v("67")]),t("br"),t("span",{staticClass:"line-number"},[s._v("68")]),t("br"),t("span",{staticClass:"line-number"},[s._v("69")]),t("br"),t("span",{staticClass:"line-number"},[s._v("70")]),t("br"),t("span",{staticClass:"line-number"},[s._v("71")]),t("br"),t("span",{staticClass:"line-number"},[s._v("72")]),t("br"),t("span",{staticClass:"line-number"},[s._v("73")]),t("br"),t("span",{staticClass:"line-number"},[s._v("74")]),t("br"),t("span",{staticClass:"line-number"},[s._v("75")]),t("br"),t("span",{staticClass:"line-number"},[s._v("76")]),t("br"),t("span",{staticClass:"line-number"},[s._v("77")]),t("br"),t("span",{staticClass:"line-number"},[s._v("78")]),t("br"),t("span",{staticClass:"line-number"},[s._v("79")]),t("br"),t("span",{staticClass:"line-number"},[s._v("80")]),t("br"),t("span",{staticClass:"line-number"},[s._v("81")]),t("br"),t("span",{staticClass:"line-number"},[s._v("82")]),t("br"),t("span",{staticClass:"line-number"},[s._v("83")]),t("br"),t("span",{staticClass:"line-number"},[s._v("84")]),t("br"),t("span",{staticClass:"line-number"},[s._v("85")]),t("br"),t("span",{staticClass:"line-number"},[s._v("86")]),t("br"),t("span",{staticClass:"line-number"},[s._v("87")]),t("br"),t("span",{staticClass:"line-number"},[s._v("88")]),t("br"),t("span",{staticClass:"line-number"},[s._v("89")]),t("br"),t("span",{staticClass:"line-number"},[s._v("90")]),t("br"),t("span",{staticClass:"line-number"},[s._v("91")]),t("br"),t("span",{staticClass:"line-number"},[s._v("92")]),t("br"),t("span",{staticClass:"line-number"},[s._v("93")]),t("br"),t("span",{staticClass:"line-number"},[s._v("94")]),t("br"),t("span",{staticClass:"line-number"},[s._v("95")]),t("br"),t("span",{staticClass:"line-number"},[s._v("96")]),t("br"),t("span",{staticClass:"line-number"},[s._v("97")]),t("br"),t("span",{staticClass:"line-number"},[s._v("98")]),t("br"),t("span",{staticClass:"line-number"},[s._v("99")]),t("br"),t("span",{staticClass:"line-number"},[s._v("100")]),t("br"),t("span",{staticClass:"line-number"},[s._v("101")]),t("br"),t("span",{staticClass:"line-number"},[s._v("102")]),t("br"),t("span",{staticClass:"line-number"},[s._v("103")]),t("br"),t("span",{staticClass:"line-number"},[s._v("104")]),t("br"),t("span",{staticClass:"line-number"},[s._v("105")]),t("br"),t("span",{staticClass:"line-number"},[s._v("106")]),t("br"),t("span",{staticClass:"line-number"},[s._v("107")]),t("br"),t("span",{staticClass:"line-number"},[s._v("108")]),t("br"),t("span",{staticClass:"line-number"},[s._v("109")]),t("br"),t("span",{staticClass:"line-number"},[s._v("110")]),t("br"),t("span",{staticClass:"line-number"},[s._v("111")]),t("br"),t("span",{staticClass:"line-number"},[s._v("112")]),t("br"),t("span",{staticClass:"line-number"},[s._v("113")]),t("br"),t("span",{staticClass:"line-number"},[s._v("114")]),t("br"),t("span",{staticClass:"line-number"},[s._v("115")]),t("br"),t("span",{staticClass:"line-number"},[s._v("116")]),t("br"),t("span",{staticClass:"line-number"},[s._v("117")]),t("br"),t("span",{staticClass:"line-number"},[s._v("118")]),t("br"),t("span",{staticClass:"line-number"},[s._v("119")]),t("br"),t("span",{staticClass:"line-number"},[s._v("120")]),t("br"),t("span",{staticClass:"line-number"},[s._v("121")]),t("br"),t("span",{staticClass:"line-number"},[s._v("122")]),t("br"),t("span",{staticClass:"line-number"},[s._v("123")]),t("br"),t("span",{staticClass:"line-number"},[s._v("124")]),t("br"),t("span",{staticClass:"line-number"},[s._v("125")]),t("br"),t("span",{staticClass:"line-number"},[s._v("126")]),t("br"),t("span",{staticClass:"line-number"},[s._v("127")]),t("br"),t("span",{staticClass:"line-number"},[s._v("128")]),t("br"),t("span",{staticClass:"line-number"},[s._v("129")]),t("br"),t("span",{staticClass:"line-number"},[s._v("130")]),t("br"),t("span",{staticClass:"line-number"},[s._v("131")]),t("br"),t("span",{staticClass:"line-number"},[s._v("132")]),t("br"),t("span",{staticClass:"line-number"},[s._v("133")]),t("br"),t("span",{staticClass:"line-number"},[s._v("134")]),t("br"),t("span",{staticClass:"line-number"},[s._v("135")]),t("br"),t("span",{staticClass:"line-number"},[s._v("136")]),t("br"),t("span",{staticClass:"line-number"},[s._v("137")]),t("br"),t("span",{staticClass:"line-number"},[s._v("138")]),t("br"),t("span",{staticClass:"line-number"},[s._v("139")]),t("br"),t("span",{staticClass:"line-number"},[s._v("140")]),t("br"),t("span",{staticClass:"line-number"},[s._v("141")]),t("br"),t("span",{staticClass:"line-number"},[s._v("142")]),t("br"),t("span",{staticClass:"line-number"},[s._v("143")]),t("br"),t("span",{staticClass:"line-number"},[s._v("144")]),t("br"),t("span",{staticClass:"line-number"},[s._v("145")]),t("br"),t("span",{staticClass:"line-number"},[s._v("146")]),t("br"),t("span",{staticClass:"line-number"},[s._v("147")]),t("br"),t("span",{staticClass:"line-number"},[s._v("148")]),t("br"),t("span",{staticClass:"line-number"},[s._v("149")]),t("br"),t("span",{staticClass:"line-number"},[s._v("150")]),t("br"),t("span",{staticClass:"line-number"},[s._v("151")]),t("br"),t("span",{staticClass:"line-number"},[s._v("152")]),t("br"),t("span",{staticClass:"line-number"},[s._v("153")]),t("br"),t("span",{staticClass:"line-number"},[s._v("154")]),t("br"),t("span",{staticClass:"line-number"},[s._v("155")]),t("br"),t("span",{staticClass:"line-number"},[s._v("156")]),t("br"),t("span",{staticClass:"line-number"},[s._v("157")]),t("br"),t("span",{staticClass:"line-number"},[s._v("158")]),t("br"),t("span",{staticClass:"line-number"},[s._v("159")]),t("br"),t("span",{staticClass:"line-number"},[s._v("160")]),t("br"),t("span",{staticClass:"line-number"},[s._v("161")]),t("br"),t("span",{staticClass:"line-number"},[s._v("162")]),t("br"),t("span",{staticClass:"line-number"},[s._v("163")]),t("br"),t("span",{staticClass:"line-number"},[s._v("164")]),t("br"),t("span",{staticClass:"line-number"},[s._v("165")]),t("br"),t("span",{staticClass:"line-number"},[s._v("166")]),t("br"),t("span",{staticClass:"line-number"},[s._v("167")]),t("br"),t("span",{staticClass:"line-number"},[s._v("168")]),t("br"),t("span",{staticClass:"line-number"},[s._v("169")]),t("br"),t("span",{staticClass:"line-number"},[s._v("170")]),t("br"),t("span",{staticClass:"line-number"},[s._v("171")]),t("br"),t("span",{staticClass:"line-number"},[s._v("172")]),t("br"),t("span",{staticClass:"line-number"},[s._v("173")]),t("br"),t("span",{staticClass:"line-number"},[s._v("174")]),t("br"),t("span",{staticClass:"line-number"},[s._v("175")]),t("br"),t("span",{staticClass:"line-number"},[s._v("176")]),t("br"),t("span",{staticClass:"line-number"},[s._v("177")]),t("br"),t("span",{staticClass:"line-number"},[s._v("178")]),t("br"),t("span",{staticClass:"line-number"},[s._v("179")]),t("br"),t("span",{staticClass:"line-number"},[s._v("180")]),t("br"),t("span",{staticClass:"line-number"},[s._v("181")]),t("br"),t("span",{staticClass:"line-number"},[s._v("182")]),t("br"),t("span",{staticClass:"line-number"},[s._v("183")]),t("br"),t("span",{staticClass:"line-number"},[s._v("184")]),t("br"),t("span",{staticClass:"line-number"},[s._v("185")]),t("br"),t("span",{staticClass:"line-number"},[s._v("186")]),t("br"),t("span",{staticClass:"line-number"},[s._v("187")]),t("br"),t("span",{staticClass:"line-number"},[s._v("188")]),t("br"),t("span",{staticClass:"line-number"},[s._v("189")]),t("br"),t("span",{staticClass:"line-number"},[s._v("190")]),t("br"),t("span",{staticClass:"line-number"},[s._v("191")]),t("br"),t("span",{staticClass:"line-number"},[s._v("192")]),t("br"),t("span",{staticClass:"line-number"},[s._v("193")]),t("br"),t("span",{staticClass:"line-number"},[s._v("194")]),t("br"),t("span",{staticClass:"line-number"},[s._v("195")]),t("br")])]),t("p",[s._v("上述的 SQL 语句中"),t("strong",[s._v("全表扫描的成本低于索引扫描, 所以最终选择全表扫描.")])]),s._v(" "),t("p",[s._v("trace 工具会"),t("strong",[s._v("分析并预估走索引和全表扫描的成本")]),s._v(", 进行对比, 然后进行选择执行.")]),s._v(" "),t("h3",{attrs:{id:"二-查询性能优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二-查询性能优化"}},[s._v("#")]),s._v(" 二.查询性能优化")]),s._v(" "),t("h4",{attrs:{id:"通用优化原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#通用优化原则"}},[s._v("#")]),s._v(" 通用优化原则")]),s._v(" "),t("h5",{attrs:{id:"_1-查询方式优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-查询方式优化"}},[s._v("#")]),s._v(" 1.查询方式优化")]),s._v(" "),t("h6",{attrs:{id:"减少请求数据量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#减少请求数据量"}},[s._v("#")]),s._v(" 减少请求数据量")]),s._v(" "),t("p",[s._v("查询性能低下的常见原因是访问的数据太多. 确认应用程序是否在检索大量超过需要的数据. 这通常意味着访问了太多的行, 但有时候也可能是访问了太多的列.")]),s._v(" "),t("ul",[t("li",[s._v("只返回"),t("strong",[s._v("必要的列")]),s._v(": 最好*"),t("em",[s._v('不要使用 "SELECT '),t("em",[s._v('" 语句, 而只查询需要的字段')])]),s._v(", 使用覆盖索引.")]),s._v(" "),t("li",[s._v("只返回"),t("strong",[s._v("必要的行")]),s._v(": 使用 "),t("strong",[s._v("LIMIT")]),s._v(" 限制返回的数据量. 可以自己封装一层默认加上 LIMIT 参数.")]),s._v(" "),t("li",[s._v("缓存重复查询的数据: 使用缓存可以避免在数据库中进行查询, 缓存带来的查询性能提升将会非常明显.")]),s._v(" "),t("li",[s._v("禁止不带任何限制数据范围条件的查询语句. 比如: 当用户在查询订单历史的时候, 可以控制在一个月的范围内.")]),s._v(" "),t("li",[s._v("考虑随着业务发展, 查询条件是否会查询出越来越多的数据.")])]),s._v(" "),t("h6",{attrs:{id:"减少服务器端扫描行数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#减少服务器端扫描行数"}},[s._v("#")]),s._v(" 减少服务器端扫描行数")]),s._v(" "),t("p",[s._v("最有效的方式是"),t("strong",[s._v("使用索引来覆盖查询")]),s._v(".")]),s._v(" "),t("h6",{attrs:{id:"切分大查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#切分大查询"}},[s._v("#")]),s._v(" 切分大查询")]),s._v(" "),t("p",[s._v("一个"),t("strong",[s._v("大查询")]),s._v("如果"),t("strong",[s._v("一次性执行")]),s._v("的话, 可能一次锁住很多数据, 导致占满整个事务日志, 耗尽系统资源, 阻塞很多小但重要的查询.")]),s._v(" "),t("p",[s._v('有时候对于一个大查询可以 "'),t("strong",[s._v("分而治之")]),s._v('", 将大查询切分成小查询, 每个查询功能完全一样, 只完成一小部分, 每次只返回一小部分查询结果.')]),s._v(" "),t("p",[s._v("比如删除数据可以"),t("strong",[s._v("分批次删除")]),s._v(".")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DELETE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" messages "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" createTime "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" DATE_SUB"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("NOW")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INTERVAL")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("MONTH")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("切分一下:")]),s._v(" "),t("div",{staticClass:"language-python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[s._v("rows_affected "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\ndo "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    rows_affected "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" do_query"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"DELETE FROM messages WHERE create  < DATE_SUB(NOW(), INTERVAL 3 MONTH) LIMIT 10000"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" rows_affected "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h4",{attrs:{id:"范围查询优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#范围查询优化"}},[s._v("#")]),s._v(" 范围查询优化")]),s._v(" "),t("p",[s._v("MySQL 优化器会"),t("strong",[s._v("根据检索比例, 表大小等多个因素整体评估是否使用索引")]),s._v(". 如果使用范围查询, 可能会因为"),t("strong",[s._v("范围问题")]),s._v("使得优化器觉得全表扫描的效率还高, 进而使得索引失效. 具体的情况还得靠优化器根据实际场景自己分析.")]),s._v(" "),t("p",[s._v("例 1: 给年龄添加单值索引.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ALTER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("employees"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ADD")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INDEX")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("idx_age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("下面的"),t("strong",[s._v("范围查询")]),s._v(", 实际上"),t("strong",[s._v("没有走索引")]),s._v(".")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("本例可能是由于单次数据量"),t("strong",[s._v("查询过大")]),s._v("导致优化器最终选择不走索引.")]),s._v(" "),t("p",[s._v("优化方法: "),t("strong",[s._v("可以将大的范围拆分成多个小范围")]),s._v(". 比如改成下面的两个范围查询, 可能就会走索引.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1001")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("例 2: 看下面的 SQL 语句执行后是没走索引的.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("如果用 name 索引需要遍历 name 字段"),t("strong",[s._v("联合索引树")]),s._v(", 然后还需要根据"),t("strong",[s._v("遍历出来的主键值")]),s._v("去主键索引树里再去查出最终数据, 相当于"),t("strong",[s._v("遍历了两棵索引树")]),s._v("(一颗联合索引树, 一颗主键聚簇索引树), 成本比全表扫描还高, 所以就不走索引了.")]),s._v(" "),t("p",[s._v("可以用"),t("strong",[s._v("覆盖索引")]),s._v("优化, 这样"),t("strong",[s._v("只需要遍历 name 字段")]),s._v("的"),t("strong",[s._v("联合索引树")]),s._v("就能拿到所有结果, 如下:")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" age "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("再看下面的 SQL. 这一条其实跟上面的类似, 只是 name 的范围不同, 这里 MySQL 发现这里数据量较少, 于是"),t("strong",[s._v("走了索引")]),s._v(". 这里就是引擎执行的"),t("strong",[s._v("过程中")]),s._v("根据数据情况进行优化.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'zzz'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h4",{attrs:{id:"查询排序优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查询排序优化"}},[s._v("#")]),s._v(" 查询排序优化")]),s._v(" "),t("h5",{attrs:{id:"_1-排序基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-排序基础"}},[s._v("#")]),s._v(" 1.排序基础")]),s._v(" "),t("p",[s._v("ORDER BY 语句可以对查询出来的数据进行排序。进行排序时可能出现下面的排序方式：")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("索引排序(index sort)")]),s._v(" ​：直接在"),t("strong",[s._v("索引上完成了排序")]),s._v("。效率很高。")]),s._v(" "),t("li",[t("strong",[s._v("文件排序(file sort)")]),s._v(" ​：索引无法排序，数据量小的情况下，在"),t("strong",[s._v("内存中完成排序")]),s._v("; 数据量大的情况下，在内存中无法无法完成排序，会使用"),t("strong",[s._v("基于磁盘的文件排序")]),s._v("。效率很低。")])]),s._v(" "),t("h5",{attrs:{id:"_2-索引排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-索引排序"}},[s._v("#")]),s._v(" 2.索引排序")]),s._v(" "),t("p",[s._v("ORDER BY 满足两种情况会使用"),t("strong",[s._v("索引排序")]),s._v(".")]),s._v(" "),t("ul",[t("li",[s._v("ORDER BY 语句使用"),t("strong",[s._v("索引最左前列")]),s._v(".")]),s._v(" "),t("li",[s._v("使用 WHERE 子句与 ORDER BY子句"),t("strong",[s._v("条件列组合满足索引最左前列")]),s._v(".")])]),s._v(" "),t("p",[t("strong",[s._v("所以尽量在索引列上完成排序, 遵循最左前缀法则")]),s._v(". 如果 ORDER BY 的"),t("strong",[s._v("条件不在索引列上")]),s._v(", 就会产生文件排序. 所以能用覆盖索引尽量用覆盖索引.")]),s._v(" "),t("p",[s._v("GROUP BY 与 ORDER BY 很类似, 其实质是"),t("strong",[s._v("先排序后分组")]),s._v(", 遵照索引创建顺序的"),t("strong",[s._v("最左前缀法则")]),s._v(". 对于 GROUP BY 的优化如果不需要排序的可以"),t("strong",[s._v("加上 OEDER BY NULL 禁止排序")]),s._v(". 注意, "),t("strong",[s._v("WHERE 筛选先于 HAVING")]),s._v(", 能写在 WHERE 中的限定条件就不要去用 HAVING 限定.")]),s._v(" "),t("h5",{attrs:{id:"_3-文件排序-filesort"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-文件排序-filesort"}},[s._v("#")]),s._v(" 3.文件排序(filesort)")]),s._v(" "),t("p",[s._v("当"),t("strong",[s._v("不能使用索引生成排序结果")]),s._v("的时候, MySQL 需要自己进行排序, 如果数据量小则在"),t("strong",[s._v("内存")]),s._v("中进行, 如果数据量大则需要使用磁盘排序, MySQL 将这个过程统一称为"),t("strong",[s._v("文件排序(filesort)")]),s._v(' , 即使完全是内存排序不需要磁盘文件时也叫文件排序. 在内存中进行排序的区域叫做 "'),t("strong",[s._v("排序缓冲区(Sort Buffer, 这是一块内存区域)")]),s._v(' ".')]),s._v(" "),t("p",[s._v("当查询数据后, 如果需要排序的"),t("strong",[s._v("数据量小于排序缓冲区")]),s._v(", MySQL 将使用此"),t("strong",[s._v("内存")]),s._v('进行 "快速排序" 操作. 如果内存不够排序, 那么 MySQL 会先将数据分块, 对每个独立的块使用 "快速排序" 进行排序, 并'),t("strong",[s._v("将各个块的排序结果存放在磁盘上, 然后将各个排好序的块进行合并(merge), 最后返回排序结果")]),s._v(".")]),s._v(" "),t("blockquote",[t("p",[s._v("trace工具查看文件排序信息")])]),s._v(" "),t("p",[s._v("如果"),t("strong",[s._v("使用了 filesort")]),s._v(", 那么 "),t("strong",[s._v("trace")]),s._v(" 工具的分析结果中会有 "),t("strong",[s._v("filesort_summary")]),s._v(" 的信息. 双路排序的 sort_mode 信息里显示 "),t("code",[s._v("<sort_key, rowid>")]),s._v("​. 单路排序时 sort_mode 信息里显示 "),t("code",[s._v("<sort_key, additional_fields>")]),s._v("​ 或 "),t("code",[s._v("<sort_key, packed_additional_fields>")]),s._v("​.")]),s._v(" "),t("div",{staticClass:"language-json line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"filesort_summary"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" \n    "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"rows"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("          "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 预计扫描行数")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"examined_rows"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 参数排序的行")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"number_of_tmp_files"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" \n    "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"sort_buffer_size"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("262056")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 排序缓存的大小")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"sort_mode"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<sort_key, packed_additional_fields>"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 排序方式, 这里用的单路排序")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("如果内存不够用时, 可能使用"),t("strong",[s._v("磁盘排序")]),s._v(". number_of_tmp_files 表示使用的"),t("strong",[s._v("临时文件")]),s._v("数, 如果"),t("strong",[s._v("值为 0 代表全部使用 排序缓冲区进行内存排序, 否则使用磁盘文件排序")]),s._v(".")]),s._v(" "),t("blockquote",[t("p",[s._v("文件排序算法")])]),s._v(" "),t("p",[s._v("文件排序算法有:")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("双路排序")]),s._v("(又叫回表排序): 首先根据相应的条件"),t("strong",[s._v("仅取出需要排序的字段和数据行 ID")]),s._v(", 然后在 "),t("strong",[s._v("sort buffer")]),s._v(" 中进行排序, 排序完后需要"),t("strong",[s._v("再次回表查询得到其它需要的字段")]),s._v(". 由于只把一部分数据加载到内存排序, 所以占用的内存小一点, 但是排序完成需要回表查询.")]),s._v(" "),t("li",[t("strong",[s._v("单路排序")]),s._v(": 一次性取出满足条件行的"),t("strong",[s._v("所有字段")]),s._v(", 然后在排序缓冲区​中进行排序. 由于把全部需要的数据都加载到了内存, 所以占用内存较大, 但是排序完成后不需要进行回表了.")])]),s._v(" "),t("p",[t("strong",[s._v("双路排序")]),s._v("过程:")]),s._v(" "),t("ul",[t("li",[s._v("从索引 name 找到第一个满足 name = 'Tom' 的主键 "),t("strong",[s._v("id.")])]),s._v(" "),t("li",[s._v("根据主键 id 取出排序字段 position 和主键 id 这"),t("strong",[s._v("两个字段")]),s._v("放到 sort buffer 中.")]),s._v(" "),t("li",[s._v("从索引 name 取下一个满足 name = 'Tom' 记录的主键 id.")]),s._v(" "),t("li",[s._v("重复上述步骤直到不满足 name = 'Tom'.")]),s._v(" "),t("li",[s._v("对 "),t("strong",[s._v("sort_buffer 中的字段 position 和主键 id 按照字段 position 进行排序")]),s._v(".")]),s._v(" "),t("li",[s._v("遍历排序好的 id 和字段 position, 按照 id 的值"),t("strong",[s._v("回到原表")]),s._v("中取出所有字段的值返回给客户端.")])]),s._v(" "),t("p",[t("strong",[s._v("单路排序")]),s._v("过程:")]),s._v(" "),t("ul",[t("li",[s._v("从索引 name 找到第一个满足 name = 'Tom' 条件的主键 id.")]),s._v(" "),t("li",[s._v("根据主键 id 取出"),t("strong",[s._v("整行")]),s._v(", 取出所有字段的值, 存入 "),t("strong",[s._v("sort_buffer")]),s._v(" 中.")]),s._v(" "),t("li",[s._v("从索引 name 找到下一个满足 name = 'Tom' 条件的主键 id.")]),s._v(" "),t("li",[s._v("重复上述步骤直到不满足 name = 'Tom'.")]),s._v(" "),t("li",[s._v("对 sort_buffer 中的数据按照字段 position 进行排序.")]),s._v(" "),t("li",[s._v("返回结果给客户端.")])]),s._v(" "),t("p",[s._v("对比两个排序模式, "),t("strong",[s._v("单路排序")]),s._v("会把所有需要查询的字段"),t("strong",[s._v("都放到排序缓冲区")]),s._v(" 中, 而双路排序只会把"),t("strong",[s._v("主键和需要排序的字段")]),s._v("放到排序缓冲区中进行排序, 然后再通过主键"),t("strong",[s._v("回到原表")]),s._v("查询需要的字段.")]),s._v(" "),t("blockquote",[t("p",[s._v("排序算法与max_length_for_sort_data参数")])]),s._v(" "),t("p",[s._v("MySQL 通过比较参数 "),t("strong",[s._v("max_length_for_sort_data")]),s._v("(默认 1024 字节) 的大小和需要查询的字段总大小来判断使用哪种排序模式.")]),s._v(" "),t("ul",[t("li",[s._v("如果 max_length_for_sort_data 比查询字段的总长度"),t("strong",[s._v("小")]),s._v(", 使用"),t("strong",[s._v("双路排序")]),s._v("模式.")]),s._v(" "),t("li",[s._v("如果 max_length_for_sort_data 比查询字段的总长度"),t("strong",[s._v("大")]),s._v(", 使用"),t("strong",[s._v("单路排序")]),s._v("模式.")])]),s._v(" "),t("p",[s._v("其实就是如果需要回表的数据行太多或字段较多, 双路排序的内存开销已经接近单路排序了, 这时候还不如直接用单路排序减少一次回表查询.")]),s._v(" "),t("p",[s._v("如果 MySQL "),t("strong",[s._v("排序内存比较小")]),s._v("并且没有条件继续增加了, 可以适当把 "),t("strong",[s._v("max_length_for_sort_data")]),s._v(" 配置小点, 让优化器选择使用双路排序算法, 可以在 sort_buffer 中一次排序更多的行, 只是需要"),t("strong",[s._v("再根据主键回到原表取数据")]),s._v(".")]),s._v(" "),t("p",[s._v("如果 MySQL "),t("strong",[s._v("排序内存")]),s._v("有条件可以配置比较大, 可以适当增大 "),t("strong",[s._v("max_length_for_sort_data")]),s._v(" 的值, 让优化器优先选择全字段排序(单路排序), 把需要的字段放到 sort_buffer 中, 这样排序后就能直接从"),t("strong",[s._v("内存")]),s._v("里返回查询结果.")]),s._v(" "),t("p",[s._v("所以 MySQL 通过 "),t("strong",[s._v("max_length_for_sort_data")]),s._v(" 这个参数来控制排序, 在不同场景使用不同的排序模式, 从而提升排序效率.")]),s._v(" "),t("p",[s._v("注意, 如果"),t("strong",[s._v("全部使用 sort_buffer 内存排序一般情况下效率会高于磁盘文件排序")]),s._v(", 但不能因为这个就随便增大 sort_buffer(默认 1M), MySQL 很多参数设置都是做过优化的, 不要轻易调整.")]),s._v(" "),t("h4",{attrs:{id:"分页查询优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分页查询优化"}},[s._v("#")]),s._v(" 分页查询优化")]),s._v(" "),t("p",[s._v("一个常见的分页查询:")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LIMIT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("表示从表 employees 中取出"),t("strong",[s._v("从 10001 行开始的 10 行记录")]),s._v(". 如果"),t("strong",[s._v("没有索引")]),s._v(", 这里看似只查询了 10 条记录, 实际这条 SQL 是"),t("mark",[t("strong",[s._v("先读取 10010 条记录, 然后抛弃前 10000 条记录, 然后读到后面 10 条想要的数据")])]),s._v(". 因此要查询一张大表比较靠后的数据, 执行效率是非常低的.")]),s._v(" "),t("p",[s._v("优化此类分页查询的一个"),t("strong",[s._v("最简单的办法就是尽可能地使用索引覆盖扫描")]),s._v(", 而不是查询所有的列. 然后根据需要做一次"),t("strong",[s._v("关联操作")]),s._v("再返回所需的列. 分页查询时，一定要"),t("mark",[t("strong",[s._v("使用主键来限定查询范围")])]),s._v(" ("),t("code",[s._v("WHERE id > 10000 LIMIT 10")]),s._v("​) 进行查找.")]),s._v(" "),t("blockquote",[t("p",[s._v("优化示例")])]),s._v(" "),t("p",[s._v("看一个根据"),t("strong",[s._v("非主键字段排序")]),s._v("的分页查询, SQL 如下:")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" NAME "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LIMIT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("90000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("这里发现并没有使用 name 字段的索引(key 字段对应的值为 null), 具体原因是扫描整个索引并查找到没索引的行("),t("strong",[s._v("可能要遍历多个索引树)的成本比扫描全表的成本更高, 所以优化器")]),s._v("放弃使用索引.")]),s._v(" "),t("p",[s._v("这里优化关键是让排序时返回的字段尽可能少, 所以可以让排序和分页操作先查出主键, 然后根据主键查到对应的记录, SQL 改写如下:")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees e "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INNER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("JOIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" id "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" NAME "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LIMIT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("90000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" ed "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" ed"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("观察执行计划之后可以发现, 原 SQL 使用的是 filesort 排序, 而优化后的 SQL 使用的是索引排序.")]),s._v(" "),t("h4",{attrs:{id:"join联结查询优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#join联结查询优化"}},[s._v("#")]),s._v(" JOIN联结查询优化")]),s._v(" "),t("p",[t("strong",[s._v("少用 JOIN, JOIN 操作一般可以放到业务层进行")]),s._v(".")]),s._v(" "),t("p",[s._v("建个表:")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("t1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("NOT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AUTO_INCREMENT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DEFAULT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DEFAULT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PRIMARY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("KEY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("KEY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("idx_a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENGINE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("InnoDB")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DEFAULT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CHARSET")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" utf8"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 创建一个与 t1 表结构一样的表 t2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("create")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" t2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" t1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 然后在 t1 表插入 10000 行数据, 在 t2 表插入 100 条数据")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[s._v("MySQL 的"),t("strong",[s._v("表关联")]),s._v("常见有两种算法:")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("Nested-Loop Join")]),s._v(" 算法.")]),s._v(" "),t("li",[t("strong",[s._v("Block Nested-Loop Join")]),s._v(" 算法.")])]),s._v(" "),t("h5",{attrs:{id:"_1-嵌套循环连接-nlj-算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-嵌套循环连接-nlj-算法"}},[s._v("#")]),s._v(" 1.嵌套循环连接(NLJ)算法")]),s._v(" "),t("p",[s._v("嵌套循环连接 (NLJ) 算法即"),t("strong",[s._v("一次一行循环")]),s._v("地从第一张表(称为驱动表)中读取行, 在这行数据中取到关联字段, 根据关联字段在另一张表(被驱动表)里取出满足条件的行, 然后取出两张表的结果合集.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" t1 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INNER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("JOIN")]),s._v(" t2 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" t1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" t2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("驱动表是 t2")]),s._v(", 被驱动表是 t1. "),t("strong",[s._v("先执行的就是驱动表")]),s._v("(执行计划结果的 id 如果一样则按从上到下顺序执行 SQL); "),t("mark",[t("strong",[s._v("优化器一般会优先选择小表做驱动表")])]),s._v(". 所以使用 INNER JOIN 时, 排在前面的表并不一定就是驱动表. 一般 JOIN 语句中, 如果执行计划 Extra 中未出现 "),t("code",[s._v("Using join buffer")]),s._v("​ 则表示使用的 JOIN 算法是 NLJ.")]),s._v(" "),t("p",[s._v("上面 SQL 的大致流程如下:")]),s._v(" "),t("ul",[t("li",[s._v("从表 t2 中读取一行数据;")]),s._v(" "),t("li",[s._v("从第 1 步的数据中, 取出关联字段 a, 到表 t1 中查找;")]),s._v(" "),t("li",[s._v("取出表 t1 中满足条件的行, 跟 t2 中获取到的结果合并, 作为结果返回给客户端;")]),s._v(" "),t("li",[s._v("重复上面 3 步.")])]),s._v(" "),t("p",[s._v("整个过程会读取 t2 表的"),t("strong",[s._v("所有数据")]),s._v("(扫描 100 行), 然后遍历这每行数据中"),t("strong",[s._v("字段 a 的值")]),s._v(", 根据 t2 表中 a 的值索引扫描 t1 表中的对应行(扫描 100 次 t1 表的索引, 1 次扫描可以认为最终只扫描 t1 表一行完整数据, 也就是总共 t1 表也扫描了 100 行). 因此整个过程扫描了 200 行. 如果被驱动表的关联字段没索引, 使用 NLJ 算法"),t("strong",[s._v("性能会比较低")]),s._v(" (下面有详细解释), MySQL 会选择 Block Nested-Loop Join 算法.")]),s._v(" "),t("h5",{attrs:{id:"_2-基于块的嵌套循环连接-bnl-算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-基于块的嵌套循环连接-bnl-算法"}},[s._v("#")]),s._v(" 2.基于块的嵌套循环连接(BNL)算法")]),s._v(" "),t("p",[s._v("把驱动表的数据读入到 "),t("strong",[s._v("join_buffer")]),s._v(" 中, 然后"),t("strong",[s._v("扫描被驱动表")]),s._v(", 把被驱动表每一行取出来跟 join_buffer 中的数据做对比.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" t1 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INNER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("JOIN")]),s._v(" t2 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" t1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" t2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("EXPLAIN 结果的 Extra 字段中的 "),t("strong",[s._v("Using join buffer(Block Nested Loop)")]),s._v("  说明该关联查询使用的是 "),t("strong",[s._v("BNL 算法")]),s._v(".")]),s._v(" "),t("p",[s._v("上面 SQL 的大致流程如下:")]),s._v(" "),t("ul",[t("li",[s._v("把 t2 的所有数据放入到 join_buffer 中")]),s._v(" "),t("li",[s._v("把表 t1 中每一行取出来, 跟 join_buffer 中的数据做对比")]),s._v(" "),t("li",[s._v("返回满足 join 条件的数据")])]),s._v(" "),t("p",[s._v("整个过程对表 t1 和 t2 都做了"),t("strong",[s._v("一次全表扫描")]),s._v(", 因此扫描的总行数为 10000(表 t1 的数据总量) + 100(表 t2 的数据总量) = 10100. 并且 join_buffer 里的数据是"),t("strong",[s._v("无序")]),s._v("的, 因此对表 t1 中的每一行, 都要做 "),t("strong",[s._v("100 次判断")]),s._v(", 所以内存中的判断次数是 100 * 10000= "),t("strong",[s._v("100 万次")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("被驱动表的关联字段没索引为什么要选择使用 BNL 算法而不使用 Nested-Loop Join 呢")]),s._v("?  如果上面第二条 SQL 使用 Nested-Loop Join, 那么扫描行数为 100 * 10000 = 100 万次, 这个是"),t("strong",[s._v("磁盘扫描")]),s._v(". 很显然, 用 BNL 磁盘扫描次数少很多, 相比于磁盘扫描, BNL 的"),t("strong",[s._v("内存计算")]),s._v("会快得多. 因此 MySQL 对于被驱动表的"),t("strong",[s._v("关联字段没索引的关联查询, 一般都会使用 BNL 算法. 如果有索引一般选择 NLJ 算法, 有索引的情况下 NLJ 算法比 BNL 算法性能更高.")])]),s._v(" "),t("h5",{attrs:{id:"_3-联结查询优化建议"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-联结查询优化建议"}},[s._v("#")]),s._v(" 3.联结查询优化建议")]),s._v(" "),t("p",[s._v("对关联字段加"),t("strong",[s._v("索引")]),s._v(", 关联操作尽量走索引, 让 MySQL 做 JOIN 操作时尽量选择 "),t("strong",[s._v("NLJ 算法")]),s._v(". 驱动表因为需要全部查询出来, 所以过滤的条件也尽量要走索引, 避免全表扫描, 总之"),t("strong",[s._v("能走索引的过滤条件尽量都走索引")]),s._v(".")]),s._v(" "),t("p",[s._v("让"),t("strong",[s._v("小表驱动大表")]),s._v(", 写多表联结 SQL 时如果明确知道哪张表是小表可以用 "),t("strong",[s._v("straight_join")]),s._v(" 写法固定连接驱动方式, 省去 MySQL 优化器自己判断的时间. SRTAIGHT_JOIN 功能同 JOIN 类似, 但"),t("strong",[s._v("能让左边的表来驱动右边的表")]),s._v(", 能改表优化器对于联表查询的执行顺序. 比如: 代表制定 MySQL 选 t2 表作为驱动表. "),t("strong",[s._v("小表的判断方式")]),s._v(': 在决定哪个表做驱动表的时候, 应该是两个表按照各自的条件过滤, 过滤完成之后, 计算参与 JOIN 的各个字段的总数据量, 数据量小的那个表, 就是 "小表", 应该作为驱动表.')]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" t2 SRTAIGHT_JOIN t1 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" t2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" t1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h4",{attrs:{id:"count查询优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#count查询优化"}},[s._v("#")]),s._v(" COUNT查询优化")]),s._v(" "),t("p",[s._v("对于下面的语句.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("四个 SQL 的执行计划一样, 说明这四个 SQL 执行效率应该"),t("strong",[s._v("差不多")]),s._v(", 区别在于根据某个字段 count "),t("strong",[s._v("会不会统计字段为 NULL 值的数据行")]),s._v(".")]),s._v(" "),t("p",[s._v("InnoDB 存储引擎的表 MySQL "),t("mark",[t("strong",[s._v("不会维护表的总记录行数")])]),s._v("​ "),t("strong",[s._v("，因为需要实现 MVCC，数据可能有多个版本，所以并不好统计总数, 查询 count 需要实时计算")]),s._v(". 所以类似的语句在 MySQL InnoDB 引擎上执行起来特别慢.")]),s._v(" "),t("p",[s._v("优化 COUNT 的思路也比较简单, 整体来说就是"),t("strong",[s._v("不要去表里面 COUNT")]),s._v(".")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("如果业务要求精度不是很高, 可以考虑把总数维护到 Redis 里")]),s._v(". 插入或删除表数据行的时候同时维护 Redis 里的表总行数 key 的计数值(用 INCR 或 DECR 命令). 但这可能存在数据不一致.")]),s._v(" "),t("li",[t("strong",[s._v("使用一个额外的表来记录总数")]),s._v(".")])]),s._v(" "),t("p",[s._v("如果用了 Redis 来维持总数, 那么就会涉及数据一致性的问题. 也就是如果插入数据库成功, 但是更新 Redis 上的总数失败了, 应该怎么办?")]),s._v(" "),t("ol",[t("li",[t("strong",[s._v("如果数据短时间不一致但是业务可以接受的话, 那么就可以考虑异步刷新 Redis 上的总数")]),s._v(".")]),s._v(" "),t("li",[t("strong",[s._v("使用 Canal 之类的工具监听 MySQL binlog, 然后刷新 Redis 上的总数")]),s._v(".")])]),s._v(" "),t("h4",{attrs:{id:"group-by优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#group-by优化"}},[s._v("#")]),s._v(" GROUP BY优化")]),s._v(" "),t("p",[s._v("当无法使用索引的时候, GROUP BY 会使用两种策略来完成: "),t("strong",[s._v("使用临时表或者文件排序来做分组")]),s._v(". 为了避免文件排序, 可以"),t("strong",[s._v("使用索引来优化")]),s._v(", 这也是最有效的优化办法.")]),s._v(" "),t("h3",{attrs:{id:"三-服务器与基础设施优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三-服务器与基础设施优化"}},[s._v("#")]),s._v(" 三.服务器与基础设施优化")]),s._v(" "),t("h4",{attrs:{id:"mysql参数配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mysql参数配置"}},[s._v("#")]),s._v(" MySQL参数配置")]),s._v(" "),t("p",[s._v("可以通过"),t("strong",[s._v("设置一些参数控制 MySQL 的行为")]),s._v(".")]),s._v(" "),t("p",[s._v("配置项可以有多个作用域. 有些设置是服务器级的(全局作用域), 有些对每个连接是不同的(会话作用域), 剩下的一些是对象级的. 如果在服务器运行时修改了变量的全局值, 这个值对当前会话和其他任何已经存在的会话都不起效果, 因为会话的变量值是在连接创建时从全局值初始化来的.")]),s._v(" "),t("h5",{attrs:{id:"_1-缓存池大小配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-缓存池大小配置"}},[s._v("#")]),s._v(" 1.缓存池大小配置")]),s._v(" "),t("p",[s._v("如果大部分都是 InnoDB 表, 那么 "),t("strong",[s._v("InnoDB 缓冲池(Buffer Pool)或许比其他任何东西更需要内存")]),s._v(".")]),s._v(" "),t("p",[s._v("InnoDB 缓冲池并不仅仅缓存索引: "),t("strong",[s._v("它还会缓存行的数据, 自适应哈希索引, 插入缓冲(Insert Buffer), 锁, 以及其他内部数据结构")]),s._v(". InnoDB 还使用缓冲池来帮助延迟写入, 这样就能合并多个写入操作, 然后一起顺序地写回. "),t("strong",[s._v("总之 InnoDB 严重依赖缓冲池, 必须确认为它分配足够的内存")]),s._v(".")]),s._v(" "),t("blockquote",[t("p",[s._v("参数: ==innodb_buffer_pool_size=40G==")])]),s._v(" "),t("p",[s._v("配置 InnoDB "),t("strong",[s._v("存储引擎 buffer pool 缓存池大小")]),s._v(", 一般为物理内存的 60%-70%.")]),s._v(" "),t("h5",{attrs:{id:"_2-日志与io相关配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-日志与io相关配置"}},[s._v("#")]),s._v(" 2.日志与IO相关配置")]),s._v(" "),t("p",[s._v("日志相关参数主要配置了 MySQL 一些关于日志的行为参数，比如十分重要的重做(日志)日志。同时还可以决定一些 IO 相关的策略。")]),s._v(" "),t("p",[s._v("InnoDB 在大多数情况下如果要运行得很好, 除了配置大小合适的"),t("strong",[s._v("缓")]),s._v("冲池(Buffer Pool)之外，"),t("strong",[s._v("配置合适的日志文件(Log File)大小")]),s._v("也很重要.")]),s._v(" "),t("blockquote",[t("p",[s._v("参数: innodb_log_group_home_dir")])]),s._v(" "),t("p",[s._v("innodb_log_group_home_dir 可以设置 "),t("strong",[s._v("redo log 文件存储位置")]),s._v(', 默认值为 "./", 其中 ib_logfile0 和 ib_logfile1 即为 redo log 文件.')]),s._v(" "),t("blockquote",[t("p",[s._v("参数: innodb_log_buffer_size")])]),s._v(" "),t("p",[s._v("innodb_log_buffer_size 参数设置 redo log buffer 大小, 默认 16M, 最大值是 4096M, 最小值为 1M. YFD 设置为 8388608(8M).")]),s._v(" "),t("blockquote",[t("p",[s._v("参数：innodb_log_files_in_group")])]),s._v(" "),t("p",[s._v("innodb_log_files_in_group 参数设置 redo log 文件的个数, 命名方式如: ib_logfile0, iblogfile1... iblogfileN. 默认 2 个, 最大 100 个.")]),s._v(" "),t("blockquote",[t("p",[s._v("参数："),t("mark",[s._v("innodb_log_file_size")])])]),s._v(" "),t("p",[s._v("InnoDB 存储引擎使用一个指定大小的 "),t("strong",[s._v("Redo log 空间")]),s._v("(一个环形的数据结构)(参考: 重做日志(redo log)). Redo log 的空间通过 innodb_log_file_size 和 innodb_log_files_in_group(默认 2)参数来调节. 将这俩参数相乘即可得到总的可用 Redo log 空间. 多数情况下通过 innodb_log_file_size 来调节即可.")]),s._v(" "),t("p",[s._v("innodb_log_file_size 参数设置单个 redo log 文件大小, 默认值为 48 M. 最大值为 512G, 注意最大值指的是"),t("strong",[s._v("整个 redo log 系列文件之和")]),s._v(", 即 (innodb_log_files_in_group * innodb_log_file_size) 不能大于最大值 512G.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("show")]),s._v(" variables "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%innodb_log_buffer_size%'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("show")]),s._v(" variables "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%innodb_log_group_home_dir%'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("show")]),s._v(" variables "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%innodb_log_files_in_group%'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("blockquote",[t("p",[s._v("参数: innodb_flush_log_at_trx_commit")])]),s._v(" "),t("p",[s._v("参数 innodb_flush_log_at_trx_commit 可以控制 redo log 的"),t("strong",[s._v("从内存缓冲区写入磁盘的策略(日志缓冲刷新的频繁程度)")]),s._v(" . 具体参考: 刷盘策略与innodb_flush_log_at_trx_commit参数.")]),s._v(" "),t("h5",{attrs:{id:"_3-连接相关配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-连接相关配置"}},[s._v("#")]),s._v(" 3.连接相关配置")]),s._v(" "),t("p",[s._v("主要配置 MySQL 的对外连接建立、维护等行为。")]),s._v(" "),t("blockquote",[t("p",[s._v("参数: max_connections=3000")])]),s._v(" "),t("p",[s._v("连接的创建和销毁都需要系统资源, 比如内存, 文件句柄, 业务说的支持多少并发, 指的是每秒请求数, 也就是 QPS.")]),s._v(" "),t("p",[s._v("一个连接最少占用内存是 256 K, 最大是 64 M, 如果一个连接的请求数据超过 64MB(比如排序), 就会申请临时空间, 放到硬盘上. 如果 3000 个用户同时连上 MySQL, 最小需要内存 3000 * 256KB = 750M "),t("em",[s._v(",")]),s._v("  最大需要内存 3000 * 64MB = 192G.")]),s._v(" "),t("p",[s._v("如果 innodb_buffer_pool_size 是 40GB, 给操作系统分配 4G, 给连接使用的最大内存不到 20G, 如果连接过多, 使用的内存超过 20G, 将会产生磁盘 SWAP, 此时将会影响性能. "),t("strong",[s._v("连接数过高, 不一定带来吞吐量的提高, 而且可能占用更多的系统资源")]),s._v(".")]),s._v(" "),t("blockquote",[t("p",[s._v("参数: max_user_connections=2980")])]),s._v(" "),t("p",[s._v("允许用户连接的最大数量, 剩余连接数用作 DBA 管理.")]),s._v(" "),t("blockquote",[t("p",[s._v("参数: back_log=300")])]),s._v(" "),t("p",[s._v("MySQL 能够"),t("strong",[s._v("暂存的连接数量")]),s._v(". 如果 MySQL 的连接数达到 max_connections 时, 新的请求将会被存在堆栈中, 等待某一连接释放资源, 该堆栈数量即 back_log, 如果等待连接的数量超过 back_log, 将被拒绝.")]),s._v(" "),t("blockquote",[t("p",[s._v("参数: wait_timeout=20000")])]),s._v(" "),t("p",[s._v("指应用通过 JDBC 连接 MySQL 进行操作完毕后, 空闲 20000 秒后断开, "),t("strong",[s._v("默认是 28800, 单位秒, 即 8 个小时")]),s._v(".")]),s._v(" "),t("blockquote",[t("p",[s._v("参数: interactive_timeout=300")])]),s._v(" "),t("p",[s._v("指的是 MySQL client 连接 MySQL 进行操作完毕后, 空闲 300 秒后断开, 默认是 28800, 单位秒, 即 8 个小时.")]),s._v(" "),t("h5",{attrs:{id:"_4-并发相关配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-并发相关配置"}},[s._v("#")]),s._v(" 4.并发相关配置")]),s._v(" "),t("blockquote",[t("p",[s._v("线程缓存配置")])]),s._v(" "),t("p",[s._v("线程缓存保存那些当前没有与连接关联但是准备为后面新的连接服务的线程. 当一个新的连接创建时, 如果缓存中有线程存在, MySQL 从缓存中删除一个线程, 并且把它分配给这个新的连接. 当连接关闭时, 如果线程缓存还有空间的话, MySQL 又会把线程放回缓存. 如果没有空间的话, MySQL 会销毁这个线程. 只要 MySQL 在缓存里还有空闲的线程, 它就可以迅速地响应连接请求, 因为这样就不用为每个连接创建新的线程.")]),s._v(" "),t("p",[t("strong",[s._v("thread_cache_size 参数可以配置 MySQL 可以保持在缓存中的线程数")]),s._v(".")]),s._v(" "),t("blockquote",[t("p",[s._v("参数: "),t("mark",[s._v("innodb_thread_concurrency")]),s._v("=64")])]),s._v(" "),t("p",[s._v("最基本的限制并发的方式是使用 "),t("strong",[s._v("innodb_thread_concurrency")]),s._v(" 参数, 它会限制一次性可以有多少线程进入内核, 0 表示不限制.")]),s._v(" "),t("p",[s._v("经验公式:")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("并发值 = CPU数量 * 磁盘数量 * 2\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("如果已经进入内核的线程超过了允许的数量, 新的线程就无法再进入内核. InnoDB 使用两段处理来尝试让线程尽可能高效地进入内核. 两段策略减少了因操作系统调度引起的上下文切换. 线程第一次休眠 innodb_thread_sleep_delay 微秒, 然后再重试. 如果它依然不能进入内核, 则放入一个等待线程队列, 让操作系统来处理.")]),s._v(" "),t("p",[s._v("innodb_thread_concurrency 参数用来设置 InnoDB 线程的并发数, 默认值为 0 表示不被限制, "),t("strong",[s._v("若要设置则与服务器的 CPU 核心数相同或是 CPU 的核心数的 2 倍, 如果超过配置并发数, 则需要排队, 这个值不宜太大, 不然可能会导致线程之间锁争用严重")]),s._v(", 影响性能.")]),s._v(" "),t("blockquote",[t("p",[s._v("参数: innodb_lock_wait_timeout=10")])]),s._v(" "),t("p",[s._v("行锁锁定时间, 默认 50s, 根据公司业务定, 没有标准值.")]),s._v(" "),t("h5",{attrs:{id:"_5-查询相关配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-查询相关配置"}},[s._v("#")]),s._v(" 5.查询相关配置")]),s._v(" "),t("blockquote",[t("p",[s._v("参数: sort_buffer_size=4M")])]),s._v(" "),t("p",[s._v("每个需要"),t("strong",[s._v("排序的线程")]),s._v("分配该大小的一个缓冲区. 增加该值可以加速 ORDER BY 或 GROUP BY 操作.")]),s._v(" "),t("p",[t("strong",[s._v("sort_buffer_size 是一个 connection 级的参数, 在每个 connection(session) 第一次需要使用这个 buffer 的时候, 一次性分配设置的内存")]),s._v(".")]),s._v(" "),t("p",[s._v("sort_buffer_size 并不是越大越好, 由于是 connection 级的参数, 过大的设置 + 高并发可能会耗尽系统的内存资源. 例如: 500 个连接将会消耗 500 * sort_buffer_size(4M) = 2G.")]),s._v(" "),t("h4",{attrs:{id:"硬件优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#硬件优化"}},[s._v("#")]),s._v(" 硬件优化")]),s._v(" "),t("p",[s._v("许多不同的硬件都可以影响 MySQL 的性能, 需要依靠 CPU, 内存, 硬盘和网络等资源, 这些都可以进行优化.")]),s._v(" "),t("p",[s._v("应该分析应用是 IO 密集型还是 CPU 密集型, 然后据此选择合适的 CPU.")]),s._v(" "),t("h4",{attrs:{id:"应用层优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#应用层优化"}},[s._v("#")]),s._v(" 应用层优化")]),s._v(" "),t("p",[s._v("应用层可以想办法降低查询次数, 减少查询数量, 比如使用缓存.")]),s._v(" "),t("p",[s._v("‍")]),s._v(" "),t("h3",{attrs:{id:"参考资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[s._v("#")]),s._v(" 参考资料")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://segmentfault.com/a/1190000006158186",target:"_blank",rel:"noopener noreferrer"}},[s._v("MySQL大表优化方案"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"https://blog.51cto.com/kaifly/2114068",target:"_blank",rel:"noopener noreferrer"}},[s._v("如何设置innodb_log_file_size"),t("OutboundLink")],1)])]),s._v(" "),t("p",[s._v("‍")])])}),[],!1,null,null,null);t.default=r.exports}}]);