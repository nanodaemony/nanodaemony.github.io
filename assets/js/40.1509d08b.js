(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{354:function(_,v,t){"use strict";t.r(v);var s=t(7),n=Object(s.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h1",{attrs:{id:"_4-传输层"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-传输层"}},[_._v("#")]),_._v(" 4.传输层")]),_._v(" "),v("h4",{attrs:{id:"传输层概述"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#传输层概述"}},[_._v("#")]),_._v(" 传输层概述")]),_._v(" "),v("h5",{attrs:{id:"_1-进程间通信"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-进程间通信"}},[_._v("#")]),_._v(" 1.进程间通信")]),_._v(" "),v("p",[_._v("传输层"),v("strong",[_._v("为")]),_._v("​"),v("mark",[v("strong",[_._v("进程")])]),_._v("​"),v("strong",[_._v("提供通用数据传输服务")]),_._v(". "),v("strong",[_._v("网络层")]),_._v("只把"),v("strong",[_._v("分组")]),_._v("发送到"),v("strong",[_._v("目的主机")]),_._v(", 但是真正通信的并不是主机而是主机中的"),v("strong",[_._v("进程")]),_._v(". 传输层提供了进程间的通信, 它向高层用户屏蔽了网络层的细节, 使应用程序看起来像是在两个传输层实体之间有一条端到端的逻辑通信信道.")]),_._v(" "),v("p",[v("strong",[_._v("传输层")]),_._v("向它上面的"),v("strong",[_._v("应用层")]),_._v("提供"),v("strong",[_._v("通信服务")]),_._v(". 当网络边缘部分中的"),v("strong",[_._v("两个主机")]),_._v("使用网络的核心部分的功能进行端到端通信时, 只有位于网络边缘部分"),v("strong",[_._v("主机的协议栈才有传输层, 而网络核心部分中的路由器在转发分组时都只用到下三层的功能")]),_._v(".")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/1574661864808.png",alt:"",title:"传输层与进程通信"}})]),_._v(" "),v("p",[v("strong",[_._v("网络层和传输层的区别")]),_._v(": "),v("strong",[_._v("网络层")]),_._v("是为"),v("strong",[_._v("主机之间")]),_._v("提供逻辑通信, 而"),v("strong",[_._v("传输层")]),_._v("为"),v("strong",[_._v("应用进程")]),_._v("之间提供端到端的逻辑通信.")]),_._v(" "),v("h5",{attrs:{id:"_2-传输层协议"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-传输层协议"}},[_._v("#")]),_._v(" 2.传输层协议")]),_._v(" "),v("p",[_._v("传输层有两种不同的协议, 即"),v("strong",[_._v("面向连接的 TCP")]),_._v(" 和"),v("strong",[_._v("无连接的 UDP")]),_._v(".")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("用户数据报协议 UDP 协议")]),_._v("(User Datagram Protocol) 是"),v("strong",[_._v("无连接")]),_._v("的, 使用不可靠信道. 尽最大可能交付, 没有拥塞控制, 面向报文(对于应用程序传下来的报文不合并也不拆分, 只是添加 UDP 首部), 支持一对一, 一对多, 多对一和多对多的交互通信. 传输的是 "),v("strong",[_._v("UDP 用户数据报")]),_._v(".")]),_._v(" "),v("li",[v("strong",[_._v("传输控制协议 TCP 协议")]),_._v("(Transmission Control Protocol) 是"),v("strong",[_._v("面向连接")]),_._v("的, 提供可靠交付, 有流量控制, 拥塞控制, 提供全双工通信, 面向字节流(把应用层传下来的报文看成字节流, 把字节流组织成大小不等的数据块), 每一条 TCP 连接只能是"),v("strong",[_._v("点对点")]),_._v("的(一对一). 传输的是 "),v("strong",[_._v("TCP 报文段")]),_._v(".")])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220424203007418.png",alt:"",title:"TCP与UDP协议所处位置"}})]),_._v(" "),v("h5",{attrs:{id:"_3-传输层端口"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-传输层端口"}},[_._v("#")]),_._v(" 3.传输层端口")]),_._v(" "),v("p",[_._v("端口用一个 16 位"),v("strong",[_._v("端口号")]),_._v("进行标志, 允许 "),v("strong",[_._v("65535")]),_._v(" 个不同端口. 端口号只具有本地意义, 即"),v("strong",[_._v("端口号只是为了标识本计算机应用层中的各进程")]),_._v(", 不同计算机的相同端口号是"),v("strong",[_._v("没有联系")]),_._v("的. 两个计算机中的"),v("strong",[_._v("进程")]),_._v("要互相通信, 必须知道对方的 IP 地址以找到对方的计算机, 且还要知道对方的端口号以找到对方计算机中的"),v("strong",[_._v("应用进程")]),_._v(".")]),_._v(" "),v("p",[_._v("端口用处及区间划分如下.")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220424230630968.png",alt:"",title:"传输层端口分配"}})]),_._v(" "),v("h4",{attrs:{id:"用户数据报协议udp🌟"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#用户数据报协议udp🌟"}},[_._v("#")]),_._v(" 用户数据报协议UDP🌟")]),_._v(" "),v("h5",{attrs:{id:"_1-概述"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述"}},[_._v("#")]),_._v(" 1.概述")]),_._v(" "),v("p",[v("strong",[_._v("用户数据报协议 UDP "),v("strong",[_._v("​"),v("strong",[v("strong",[_._v("是")])]),_._v("​")]),_._v("无连接")]),_._v("的, 它在 IP 层的数据报服务上只增加了: 复用和分用功能, 差错检测功能.")]),_._v(" "),v("p",[_._v("当运输层从 IP 层收到 UDP 数据报时, 就根据"),v("strong",[_._v("首部")]),_._v("中的"),v("strong",[_._v("目的端口")]),_._v(", 把 UDP 数据报通过相应的端口上交至相应的应用进程. 如果接收方 UDP 发现收到的报文中的目的端口"),v("strong",[_._v("不正确")]),_._v(", 即不存在对应端口的进程, 就丢弃该报文, 并由"),v("mark",[v("strong",[_._v("网际控制报文协议 ICMP")])]),_._v(' 发送 "端口不可达" 差错报文给发送方.')]),_._v(" "),v("p",[v("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220424232011660.png",alt:""}})]),_._v(" "),v("p",[v("strong",[_._v("注意")]),_._v(", 虽然在 UDP 协议要用到端口号, 但**由于 UDP 通信是无连接的, **​"),v("mark",[v("strong",[_._v("因此不需要使用套接字")])]),_._v(".")]),_._v(" "),v("h5",{attrs:{id:"_2-udp协议首部格式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-udp协议首部格式"}},[_._v("#")]),_._v(" 2.UDP协议首部格式")]),_._v(" "),v("p",[_._v("用户数据报 UDP 有两个字段: "),v("strong",[_._v("首部字段和数据字段")]),_._v(". 首部只有"),v("strong",[_._v("四个字段共 8 个字节")]),_._v(".")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("源端口")]),_._v(": 需要对方回信时使用, 不需要时可用全 0.")]),_._v(" "),v("li",[v("strong",[_._v("目的端口")])]),_._v(" "),v("li",[v("strong",[_._v("长度")]),_._v(": UDP 数据报长度, 最小值是仅有首部时的 8 字节.")]),_._v(" "),v("li",[v("strong",[_._v("校验和")]),_._v(": 检验传输是否出错, 出错丢弃. UDP 的校验和是把"),v("strong",[_._v("首部和数据部分一起校验")]),_._v(". 12 字节的伪首部是为了计算检验和临时添加的.")])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220424232443877.png",alt:"",title:"UDP协议首部格式"}})]),_._v(" "),v("p",[_._v("注意首部字段"),v("strong",[_._v("不含 IP 地址")]),_._v(".")]),_._v(" "),v("h5",{attrs:{id:"_3-udp协议特点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-udp协议特点"}},[_._v("#")]),_._v(" 3.UDP协议特点")]),_._v(" "),v("p",[_._v("(1) "),v("strong",[_._v("UDP 是无连接的")]),_._v(", 发送数据之前不需要建立连接, 减少了开销和发送数据之前的时延.")]),_._v(" "),v("p",[_._v("(2) "),v("strong",[_._v("UDP 使用尽最大努力交付, 即不保证可靠交付")]),_._v(", 主机不需要维持复杂的连接状态表.")]),_._v(" "),v("p",[_._v("(3) "),v("strong",[_._v("UDP 是面向报文的")]),_._v(". UDP 对应用层交下来的报文, 既不合并也不拆分, 而是保留这些报文的边界. UDP 一次交付一个完整报文, 如下图.")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220424232919242.png",alt:"",title:"UDP报文封装"}})]),_._v(" "),v("p",[_._v("(4) "),v("strong",[_._v("UDP "),v("strong",[_._v("​"),v("mark",[v("strong",[_._v("没有拥塞控制")])]),_._v(", 因此网络出现的拥塞")]),_._v("不会")]),_._v("使源主机的发送速率降低. 这对某些"),v("strong",[_._v("实时应用")]),_._v("是很重要的, 如多媒体通信.")]),_._v(" "),v("p",[_._v("(5) "),v("strong",[_._v("UDP 支持一对一, 一对多, 多对一和多对多的交互通信")]),_._v(".")]),_._v(" "),v("p",[_._v("(6) "),v("strong",[_._v("UDP 的首部开销小")]),_._v(", 只有 8 个字节, 比 TCP 的 20 个字节的首部要短.")]),_._v(" "),v("h5",{attrs:{id:"_4-udp可靠传输"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-udp可靠传输"}},[_._v("#")]),_._v(" 4.UDP可靠传输")]),_._v(" "),v("p",[_._v("如何使用 UDP 也能可靠传输? 当使用 UDP 的传输层无法保证数据可靠传输时, 只能"),v("strong",[_._v("通过应用层")]),_._v("来实现. 可以参照 TCP 可靠性传输的方式, 只是实现不在传输层, 而是转移到了应用层. 主要方式:")]),_._v(" "),v("ul",[v("li",[_._v("添加 "),v("strong",[_._v("seq/ack 机制")]),_._v(", 确保数据发送到对端.")]),_._v(" "),v("li",[_._v("添加发送和"),v("strong",[_._v("接收缓冲区")]),_._v(", 配合"),v("strong",[_._v("超时重传机制")]),_._v("进行丢失数据的重传.")])]),_._v(" "),v("p",[_._v("相关的协议:")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("RUDP")]),_._v(": 提供一组数据服务质量增强机制, 如拥塞控制的改进, 重发机制及淡化服务器算法等, 从而在包丢失和网络拥塞的情况下, RTP 客户机面前呈现的就是一个高质量的 RTP 流.")]),_._v(" "),v("li",[v("strong",[_._v("RTP")]),_._v(": 为数据提供了具有实时特征的端对端传送服务, 如在组播或单播网络服务下的交互式视频音频或模拟数据.")]),_._v(" "),v("li",[v("strong",[_._v("UDT")]),_._v(": UDT 是"),v("strong",[_._v("面向连接的双向应用层协议")]),_._v(", UDT 建于 UDP 之上, 并引入新的拥塞控制和数据可靠性控制机制. 它同时支持可靠的数据流传输和部分可靠的数据报传输.")])]),_._v(" "),v("h4",{attrs:{id:"传输控制协议tcp🌟"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#传输控制协议tcp🌟"}},[_._v("#")]),_._v(" 传输控制协议TCP🌟")]),_._v(" "),v("h5",{attrs:{id:"_1-概述-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述-2"}},[_._v("#")]),_._v(" 1.概述")]),_._v(" "),v("p",[v("strong",[_._v("传输控制协议(TCP)"),v("strong",[_._v("​"),v("strong",[v("strong",[_._v("是")])]),_._v("​")]),_._v("面向连接的传输层协议")]),_._v(". TCP 提供"),v("strong",[_._v("全双工通信")]),_._v(", "),v("strong",[_._v("面向字节流的可靠交付的服务")]),_._v(".")]),_._v(" "),v("p",[_._v('TCP 中的 "流" 指的是流入或流出进程的'),v("strong",[_._v("字节序列")]),_._v('. "面向字节流" 的含义是: 虽然应用程序和 TCP 的交互是一次一个'),v("strong",[_._v("数据块")]),_._v(", 但 TCP 把进程交下来的数据看成是一连串无结构的"),v("strong",[_._v("字节流")]),_._v(", 如下图.")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220425215210699.png",alt:"",title:"基于TCP的通信方式"}})]),_._v(" "),v("p",[v("strong",[_._v("TCP 连接是一条虚连接而不是一条真正的物理连接")]),_._v(". 每一条 TCP 连接有且仅有 2 个端点(endpoint), 所以"),v("strong",[_._v("每一条 TCP 连接只能是点对点")]),_._v("(一对一)的. "),v("mark",[v("strong",[_._v("TCP 连接的端点叫做套接字(socket), 端口号拼接到 IP 地址即构成了套接字")])]),_._v(".")]),_._v(" "),v("div",{staticClass:"language-http line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-http"}},[v("code",[_._v("套接字 socket = (IP地址 : 端口号)\n")])]),_._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[_._v("1")]),v("br")])]),v("p",[v("strong",[_._v("每一条 TCP 连接被通信两端的两个套接字所确定")]),_._v(". 即:")]),_._v(" "),v("div",{staticClass:"language-http line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-http"}},[v("code",[_._v("TCP连接 ::= {socket1, socket2} = {(IP1:port1), (IP2:port2)}\n")])]),_._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[_._v("1")]),v("br")])]),v("p",[_._v("同一个 "),v("strong",[_._v("IP 地址")]),_._v("可以有多个"),v("strong",[_._v("不同的 TCP 连接")]),_._v(", 而"),v("strong",[_._v("同一个端口号")]),_._v("也可以出现在"),v("strong",[_._v("多个不同的 TCP 连接")]),_._v("中.")]),_._v(" "),v("h5",{attrs:{id:"_2-tcp报文格式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-tcp报文格式"}},[_._v("#")]),_._v(" 2.TCP报文格式")]),_._v(" "),v("p",[_._v("TCP 虽然是面向"),v("strong",[_._v("字节流")]),_._v("的, 但传送的数据单元却是"),v("strong",[_._v("报文段")]),_._v(". 一个 TCP 报文段分为"),v("strong",[_._v("首部和数据")]),_._v("两部分, TCP 的全部功能都体现在它首部中的各字段上. TCP 报文作为 "),v("strong",[_._v("IP 数据报")]),_._v("的数据部分.")]),_._v(" "),v("p",[_._v("TCP 报文段首部的"),v("strong",[_._v("前 20")]),_._v(" 个字节是"),v("strong",[_._v("固定")]),_._v("的, 后面有 4N 字节是根据需要而增加的选项(N 是整数). 因此 TCP 首部的最小长度是 "),v("strong",[_._v("20 字节")]),_._v(".")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220425215654667.png",alt:"",title:"TCP报文格式"}})]),_._v(" "),v("ul",[v("li",[v("p",[v("strong",[_._v("源端口和目的端口")]),_._v(": 各占 "),v("strong",[_._v("2 字节")]),_._v(". 端口是运输层与应用层的服务接口, 传输层的"),v("strong",[_._v("复用和分用")]),_._v("功能都要通过端口才能实现.")])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("序号 seq")]),_._v(": 占 "),v("strong",[_._v("4 字节")]),_._v(". TCP 连接中传送的数据流中的"),v("strong",[_._v("每一个字节")]),_._v("都有一个"),v("strong",[_._v("序号")]),_._v(". 序号字段的值则指的是"),v("strong",[_._v("本报文段")]),_._v("所"),v("strong",[_._v("发送的")]),_._v("数据的"),v("strong",[_._v("第一个字节")]),_._v("的序号.")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220425215929563.png",alt:""}})])])]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("确认号 ack")]),_._v(": 占 4 字节, 是"),v("strong",[_._v("期望")]),_._v("收到"),v("strong",[_._v("对方")]),_._v("的"),v("strong",[_._v("下一个报文段")]),_._v("的数据的"),v("strong",[_._v("第一个字节")]),_._v("序号. 若确认号 "),v("strong",[_._v("ack = N")]),_._v(", 则表明到序号 "),v("strong",[_._v("N - 1")]),_._v(" 为止的所有数据都"),v("strong",[_._v("已正确收到")]),_._v(".")]),_._v(" "),v("li",[v("strong",[_._v("数据偏移")]),_._v(": 即"),v("strong",[_._v("首部长度")]),_._v(". 占 4 位, 它指出当前 TCP 报文段的"),v("strong",[_._v("数据起始处")]),_._v('距离 TCP 报文段的起始处有多远. "数据偏移" 的单位是 32 位字(以 4 字节为计算单位).')]),_._v(" "),v("li",[v("strong",[_._v("保留")]),_._v(": 占 6 位, 保留为今后使用, 但目前应置为 0.")]),_._v(" "),v("li",[v("strong",[_._v("紧急 URG")]),_._v(": 当 URG = 1 时, 表明紧急指针字段"),v("strong",[_._v("有效")]),_._v(". 它告诉系统此报文段中有紧急数据, 应尽快传送(相当于高优先级的数据).")]),_._v(" "),v("li",[v("strong",[_._v("确认 ACK 标志位")]),_._v(": 只有当 "),v("strong",[_._v("ACK = 1")]),_._v(" 时"),v("strong",[_._v("确认号字段才有效")]),_._v(". 当 ACK = 0 时, 确认号无效.")]),_._v(" "),v("li",[v("strong",[_._v("推送 PSH")]),_._v(": 接收 TCP 收到 PSH = 1 的报文段, 就尽快地交付接收应用进程, 而不再等到整个缓存都填满了后再向上交付.")]),_._v(" "),v("li",[v("strong",[_._v("复位 RST")]),_._v(": 当 RST = 1 时, 表明 TCP 连接中如由于主机崩溃或其他原因出现严重差错而必须释放连接, 然后再重新建立运输连接.")]),_._v(" "),v("li",[v("strong",[_._v("同步 SYN 标志位")]),_._v("(Synchronize Sequence Numbers): 同步 SYN = 1 表示这是一个连接请求或连接接受报文, 在连接时用来同步序号.")]),_._v(" "),v("li",[v("strong",[_._v("终止 FIN 标志位")]),_._v(": 用来"),v("strong",[_._v("释放")]),_._v("一个连接. "),v("strong",[_._v("FIN = 1")]),_._v(" 表明此报文段的"),v("strong",[_._v("发送端")]),_._v("的数据已"),v("strong",[_._v("发送完毕")]),_._v(", 并"),v("strong",[_._v("要求释放连接")]),_._v(".")]),_._v(" "),v("li",[v("strong",[_._v("窗口")]),_._v(": 占 2 字节, 是用来"),v("strong",[_._v("对方设置")]),_._v("发送窗口大小的依据, 单位为字节. 窗口字段明确指出了现在"),v("strong",[_._v("允许对方发送")]),_._v("的数据量, 窗口值常在"),v("strong",[_._v("动态")]),_._v("变化着. TCP 根据对方给出"),v("strong",[_._v("的窗口值")]),_._v("和当前"),v("strong",[_._v("网络拥塞的程度")]),_._v("来决定一个报文段应"),v("strong",[_._v("包含多少个字节")]),_._v("(UDP 发送的报文"),v("strong",[_._v("长度是应用进程给出")]),_._v("的). TCP 并不关心应用进程一次把多长的报文发送到 TCP 的缓存中, 而是根据"),v("strong",[_._v("对方给出的窗口值")]),_._v("和当前网络拥塞的程序来决定一个报文段应该包含多少个字节. 如果缓存的数据块太长可以划分短一些再传送.")]),_._v(" "),v("li",[v("strong",[_._v("校验和")]),_._v(": 占 2 字节. 检验和字段检验的范围包括"),v("strong",[_._v("首部和数据")]),_._v("这两部分. 在计算检验和时, 临时在 TCP 报文段的前面加上 12 字节的伪首部.")]),_._v(" "),v("li",[v("strong",[_._v("紧急指针字段")]),_._v(": 占 16 位, 指出在本报文段中紧急数据共有多少个字节.")]),_._v(" "),v("li",[v("strong",[_._v("选项")]),_._v(": 长度可变. TCP 最初只规定了一种选项, 即"),v("strong",[_._v("最大报文段长度 MSS")]),_._v(". MSS 告诉对方 TCP: 我的缓存所能接收的报文段的数据字段的最大长度是 MSS 个字节.")]),_._v(" "),v("li",[v("strong",[_._v("填充")]),_._v(": 使整个首部长度是 "),v("strong",[_._v("4 字节")]),_._v("的"),v("strong",[_._v("整数倍")]),_._v(".")])]),_._v(" "),v("h4",{attrs:{id:"arq协议🌟"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#arq协议🌟"}},[_._v("#")]),_._v(" ARQ协议🌟")]),_._v(" "),v("p",[_._v("ARQ 协议的核心就是"),v("strong",[_._v("自动请求重传")]),_._v(". "),v("strong",[_._v("自动重传请求")]),_._v("(Automatic Repeat-reQuest, ARQ) 是数据链路层和传输层的错误纠正协议之一. 它通过"),v("strong",[_._v("确认和超时")]),_._v("机制, 在不可靠服务的基础上实现可靠信息传输. 如果发送方在发送后一段时间之内没有收到确认, 它通常会重新发送. "),v("strong",[_._v("ARQ 包括停止等待 ARQ 协议和连续 ARQ 协议")]),_._v(".")]),_._v(" "),v("h5",{attrs:{id:"_1-停止等待arq协议"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-停止等待arq协议"}},[_._v("#")]),_._v(" 1.停止等待ARQ协议")]),_._v(" "),v("p",[v("strong",[_._v("停止等待协议的要点就是对每个分组都进行编号, 且每发送完一个分组就停止发送, 等待对方的确认. 在收到确认后再发送下一个分组")]),_._v(". 发送方为"),v("strong",[_._v("每个发送的分组")]),_._v("设置一个"),v("strong",[_._v("超时计时器")]),_._v(". 若超时计时器超时, 发送方会"),v("strong",[_._v("自动重传")]),_._v("分组. 该协议很简单但信道利用率太低.")]),_._v(" "),v("p",[_._v("该协议工作时可能会遇到几种情况.")]),_._v(" "),v("h6",{attrs:{id:"_1-无差错情况"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-无差错情况"}},[_._v("#")]),_._v(" (1)无差错情况")]),_._v(" "),v("p",[_._v("发送方发送分组, 接收方在规定时间内收到, 并且回复确认. 发送方可再次发送分组, 这就是无差错的"),v("strong",[_._v("正常情况")]),_._v(".")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220425230531168.png",alt:"",title:"ARQ协议无差错情况"}})]),_._v(" "),v("h6",{attrs:{id:"_2-出现差错"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-出现差错"}},[_._v("#")]),_._v(" (2)出现差错")]),_._v(" "),v("p",[_._v("如果 B 接收 M1 分组后进行"),v("strong",[_._v("校验")]),_._v("出了差错, 就会直接"),v("strong",[_._v("丢弃 M1")]),_._v(", 其他什么也不做, "),v("strong",[_._v("不通知")]),_._v(" A 收到有差错的分组. 且如果分组 M1 在"),v("strong",[_._v("传输过程中丢失")]),_._v("了, 接收方 B 什么都不能做. 在这两种情况下, B 都"),v("strong",[_._v("不会回复")]),_._v("任何信息. 但 A 都必须"),v("strong",[_._v("重发分组")]),_._v(", 直到 "),v("strong",[_._v("B 正确接收")]),_._v("为止, 这样才能实现可靠通信.")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220425230746327.png",alt:"",title:"ARQ协议出现差错情况"}})]),_._v(" "),v("blockquote",[v("p",[_._v("A 如何知道 B 是否正确收到了 M1 分组?")])]),_._v(" "),v("p",[v("strong",[_._v("解决方法: 超时重传")])]),_._v(" "),v("p",[_._v("A 为"),v("strong",[_._v("每一个已发送的分组")]),_._v("都设置了一个"),v("strong",[_._v("超时计时器")]),_._v(". A 只要在超时计时器"),v("strong",[_._v("到期")]),_._v("之前收到了相应的"),v("strong",[_._v("确认")]),_._v(", 就"),v("strong",[_._v("撤销")]),_._v("该超时计时器, 继续发送下一个分组 M2. 若 A 在超时计时器规定时间内没有收到 B 的确认, 就认为分组错误或丢失, 就"),v("strong",[_._v("重发该分组")]),_._v(".")]),_._v(" "),v("blockquote",[v("p",[_._v("若分组正确到达 B, 但 B 回送的确认丢失或延迟了, A 未收到 B 的确认, 会超时重发. B 可能会收到重复的 M1 . B 如何知道收到了重复的分组, 需要丢弃呢?")])]),_._v(" "),v("p",[v("strong",[_._v("解决方法: 编号")])]),_._v(" "),v("p",[_._v("A 为"),v("strong",[_._v("每一个发送的分组")]),_._v("都进行"),v("strong",[_._v("编号")]),_._v(". 若 B 收到了编号"),v("strong",[_._v("相同的分组")]),_._v(", 则认为收到了重复分组, "),v("strong",[_._v("丢弃重复的分组")]),_._v(", 并"),v("strong",[_._v("回送确认")]),_._v(". B 为发送的确认也进行"),v("strong",[_._v("编号")]),_._v(", 指示该确认是对"),v("strong",[_._v("哪一个分组的确认")]),_._v(". A 根据确认及其编号, 可以确定它是对哪一个分组的确认, 避免重发发送. 若为重复的确认, 则将其"),v("strong",[_._v("丢弃")]),_._v(".")]),_._v(" "),v("h6",{attrs:{id:"_3-确认丢失"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-确认丢失"}},[_._v("#")]),_._v(" (3)确认丢失")]),_._v(" "),v("p",[_._v("若 B 所发送的对 M1 的"),v("strong",[_._v("确认信息丢失")]),_._v("了, 那么 A 在设定的超时重传时间内不能收到确认, 但 A 并"),v("strong",[_._v("无法知道")]),_._v(": 是自己发送的分组出错, 丢失了, 还是 B 发送的确认丢失了. 因此 A 在超时计时器到期后就要"),v("strong",[_._v("重传")]),_._v(" M1.")]),_._v(" "),v("p",[_._v("假定此时 B 又收到了重传的分组 M1. 这时 B 应采取"),v("strong",[_._v("两个行动")]),_._v(": 第一, "),v("strong",[_._v("丢弃这个重复")]),_._v("的分组 M1, 不向上层交付. 第二, 向 A "),v("strong",[_._v("发送确认")]),_._v(". "),v("strong",[_._v("不能认为已经发送过确认就不再发送")]),_._v(", 因为 A 之所以重传 M1 就表示 A 没有收到对 M1 的确认.")]),_._v(" "),v("h6",{attrs:{id:"_4-确认迟到"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-确认迟到"}},[_._v("#")]),_._v(" (4)确认迟到")]),_._v(" "),v("p",[_._v("如果传输过程中没有出现差错, 但 B 对分组 M1 的"),v("strong",[_._v("确认因网络阻塞等原因迟到")]),_._v("了. B 仍然会收到"),v("strong",[_._v("重复的 M1")]),_._v(", 并且同样要"),v("strong",[_._v("丢弃")]),_._v("重复的 M1, 并"),v("strong",[_._v("重传确认分组")]),_._v(". 此时 A 会收到"),v("strong",[_._v("重复的确认")]),_._v(". A 也会丢弃掉收到的重复确认.")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220425231030893.png",alt:"",title:"ARQ确认迟到情况"}})]),_._v(" "),v("p",[_._v("注意:")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("分组和确认分组都必须进行编号")]),_._v(".")]),_._v(" "),v("li",[_._v("在发送完一个分组后, 必须"),v("strong",[_._v("暂时保留")]),_._v("已发送的分组的"),v("strong",[_._v("副本")]),_._v(", 以备"),v("strong",[_._v("重发")]),_._v(".")]),_._v(" "),v("li",[_._v("超时计时器的重传时间应当比数据在分组传输的平均往返时间更长一些.")])]),_._v(" "),v("h6",{attrs:{id:"_5-信道利用率"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-信道利用率"}},[_._v("#")]),_._v(" (5)信道利用率")]),_._v(" "),v("p",[_._v("当往返时间 RTT 远大于分组发送时间 TD 时, 信道的利用率就会"),v("strong",[_._v("非常低")]),_._v(". 若出现超时重传, 则对传送有用的数据信息来说, 信道的利用率就还要降低.")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220425231207149.png",alt:"",title:"信道利用率"}})]),_._v(" "),v("h5",{attrs:{id:"_2-自动请求重传协议"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-自动请求重传协议"}},[_._v("#")]),_._v(" 2.自动请求重传协议")]),_._v(" "),v("p",[_._v("通常发送方"),v("strong",[_._v("最终")]),_._v("总是可以收到对所有发出分组的确认. 如果发送方不断重传分组但总是收不到确认, 就说明通信线路太差, 不能进行通信. 使用上述的确认和重传机制, 就可以在不可靠的传输网络上实现可靠的通信. 像上述的这种可靠传输协议常称为自动重传请求 ARQ(Automatic Repeat Request). 意思是重传的请求是自动进行的, 接收方不需要请求发送方重传某个出错的分组.")]),_._v(" "),v("p",[_._v("上面的停止等待 ARQ 协议就是自动请求重传协议的一种.")]),_._v(" "),v("h5",{attrs:{id:"_3-流水线传输"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-流水线传输"}},[_._v("#")]),_._v(" 3.流水线传输")]),_._v(" "),v("p",[_._v("为提高传输效率, 发送方可以采用"),v("strong",[_._v("流水线传输")]),_._v(". 流水线传输就是"),v("strong",[_._v("发送方可连续发送多个分组")]),_._v(", 不必每发完一个分组就停顿下来等待对方的确认. 这样可使信道上一直有数据不间断地传送, 这种传输方式可获得很高的"),v("strong",[_._v("信道利用率")]),_._v(".")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220425231350029.png",alt:"",title:"流水线传输"}})]),_._v(" "),v("p",[_._v("这就"),v("strong",[_._v("演变")]),_._v("出来"),v("strong",[_._v("连续 ARQ 协议")]),_._v(".")]),_._v(" "),v("h5",{attrs:{id:"_4-连续arq协议"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-连续arq协议"}},[_._v("#")]),_._v(" 4.连续ARQ协议")]),_._v(" "),v("p",[_._v("要点: "),v("strong",[_._v("自动请求重传(ARQ) + 流水线")]),_._v(".")]),_._v(" "),v("p",[_._v("连续 ARQ 协议就是在停止等待 ARQ 协议的基础上, 发送方一次可以发出"),v("strong",[_._v("多个分组")]),_._v(". 同时使用"),v("strong",[_._v("滑动窗口协议")]),_._v("控制发送方和接收方所能发送和接收的分组的"),v("strong",[_._v("数量和编号")]),_._v(". 发送方每收到一个确认, 就把发送窗口向前滑动. "),v("strong",[_._v("接收方")]),_._v("一般采用"),v("strong",[_._v("累积确认")]),_._v("的方式. 不必对分组逐个确认, 而可以对按序到达的"),v("strong",[_._v("最后一个分组")]),_._v("进行确认表示到这个分组为止的所有分组"),v("strong",[_._v("都已正确")]),_._v("收到了. "),v("strong",[_._v("超时重传")]),_._v("则采用"),v("strong",[_._v("回退 N")]),_._v("(Go-Back-N) 方法进行. 如果发送方发送了前 5 个分组, 而中间的第 3 个分组丢失了. 这时接收方只能对"),v("strong",[_._v("前两个")]),_._v("分组发出确认. 发送方无法知道后面三个分组的下落, 而只好把后面的三个分组"),v("strong",[_._v("都再重传")]),_._v("一次. 这就叫做回退 N, 表示需要"),v("strong",[_._v("再退回来重传已发送过的 N 个分组")]),_._v(".")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220425231552162.png",alt:"",title:"连续ARQ协议工作原理"}})]),_._v(" "),v("p",[_._v("连续 ARQ 协议是"),v("strong",[_._v("基于滑动窗口协议")]),_._v("的. 下面看看滑动窗口协议.")]),_._v(" "),v("h4",{attrs:{id:"tcp可靠传输实现原理🌟"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp可靠传输实现原理🌟"}},[_._v("#")]),_._v(" TCP可靠传输实现原理🌟")]),_._v(" "),v("p",[v("strong",[_._v("IP")]),_._v(" "),v("strong",[_._v("网络")]),_._v("所提供的是"),v("strong",[_._v("不可靠")]),_._v("的传输, TCP 为了实现可靠传输需要一些特定功能, 主要有"),v("strong",[_._v("停止等待协议")]),_._v(", "),v("strong",[_._v("连续 ARQ 协议, 滑动窗口协议(TCP 协议的精髓)")]),_._v(" .")]),_._v(" "),v("p",[v("strong",[_._v("注意关系")]),_._v(": ARQ 协议是"),v("strong",[_._v("自动重传请求")]),_._v("(Automatic Repeat-reQuest). 包含"),v("strong",[_._v("停止等待 ARQ")]),_._v("(信道利用率低) 和"),v("strong",[_._v("连续 ARQ")]),_._v("(信道利用率高), "),v("strong",[_._v("ARQ")]),_._v(" 协议实现连续发送基于滑动窗口协议. 除此之外滑动窗口还可以用于"),v("strong",[_._v("流量控制")]),_._v(".")]),_._v(" "),v("p",[_._v("上一节讲的是实现可靠传输的"),v("strong",[_._v("基本原理")]),_._v(", 这一节具体讲 TCP 如何实现可靠传输, 分为三个部分.")]),_._v(" "),v("h5",{attrs:{id:"_1-滑动窗口协议"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-滑动窗口协议"}},[_._v("#")]),_._v(" 1.滑动窗口协议")]),_._v(" "),v("p",[v("strong",[_._v("滑动窗口协议")]),_._v("在发送方和接收方之间各自维持一个"),v("strong",[_._v("滑动窗口")]),_._v(", 发送方是"),v("strong",[_._v("发送窗口")]),_._v(", 接收方是"),v("strong",[_._v("接收窗口")]),_._v(", 这个窗口是可以随着时间变化向前"),v("strong",[_._v("滑动")]),_._v("的. 它允许发送方"),v("strong",[_._v("发送多个分组")]),_._v("而不需等待确认, 提高了信道利用率.")]),_._v(" "),v("h6",{attrs:{id:"_1-基本流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-基本流程"}},[_._v("#")]),_._v(" (1)基本流程")]),_._v(" "),v("p",[_._v("窗口是"),v("strong",[_._v("缓存")]),_._v("的一部分, 用来暂时存放"),v("strong",[_._v("字节流")]),_._v(". 发送方和接收方各有一个窗口, "),v("strong",[_._v("接收方")]),_._v("通过 TCP 报文段中的"),v("strong",[_._v("窗口字段")]),_._v("告诉发送方自己的窗口大小, 发送方根据这个值和其它信息"),v("strong",[_._v("设置自己的窗口大小")]),_._v(". 滑动窗口以"),v("strong",[_._v("字节")]),_._v("为单位.")]),_._v(" "),v("p",[v("strong",[_._v("发送窗口")]),_._v("内的字节都"),v("strong",[_._v("允许被发送")]),_._v(", "),v("strong",[_._v("接收窗口")]),_._v("内的字节都"),v("strong",[_._v("允许被接收")]),_._v(". 如果发送窗口左边的字节已经发送并且"),v("strong",[_._v("收到了确认")]),_._v(", 那么就将发送窗口向"),v("strong",[_._v("右滑动")]),_._v("一定距离, 直到左部第一个字节不是已发送"),v("strong",[_._v("并且已确认")]),_._v("的状态; 接收窗口的滑动类似, 接收窗口左部字节已经发送"),v("strong",[_._v("确认")]),_._v("并交付主机, 就向"),v("strong",[_._v("右滑动")]),_._v("接收窗口.")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("发送窗口")]),_._v("表示: 即使在"),v("strong",[_._v("没有收到确认")]),_._v("的情况下, 也可以"),v("strong",[_._v("连续把窗口内的数据")]),_._v("全部发送出去.")]),_._v(" "),v("li",[v("strong",[_._v("接收窗口")]),_._v("表示: "),v("strong",[_._v("只允许")]),_._v("接收"),v("strong",[_._v("落入窗口内")]),_._v("的数据.")])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220425232219587.png",alt:""}})]),_._v(" "),v("p",[_._v("发送窗口里面的序号 "),v("strong",[_._v("31 - 50")]),_._v(" 表示是"),v("strong",[_._v("允许发送")]),_._v("的序号. 发送窗口后沿的后面部分表示已经收到"),v("strong",[_._v("并且确认")]),_._v(", 这部分数据"),v("strong",[_._v("不需要")]),_._v("继续保存. 描述一个发送窗口需要维护"),v("strong",[_._v("三个指针")]),_._v(", 如下图所示. 下图中如果 "),v("strong",[_._v("B 收到了 32, 33")]),_._v(" 序号的数据, 但并"),v("strong",[_._v("没有收到 31")]),_._v(" 的数据, 说明数据"),v("strong",[_._v("没有按序到达")]),_._v(", 所以 B 发送的确认报文段中的"),v("strong",[_._v("确认号")]),_._v("仍然是 "),v("strong",[_._v("31")]),_._v(", 即"),v("strong",[_._v("期望收到")]),_._v("的序号.")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220425233842105.png",alt:""}})]),_._v(" "),v("p",[_._v("下图所示为 B "),v("strong",[_._v("收到")]),_._v(" 31-33 的数据并交付主机, 同时给 A 确认, 其中"),v("strong",[_._v("窗口值为 20")]),_._v(" , "),v("strong",[_._v("确认值")]),_._v("变为 "),v("strong",[_._v("34")]),_._v(", 即"),v("strong",[_._v("下一个期望")]),_._v("收到序号为 34 的数据. 同时下图还收到了 37, 38, 40 序号的数据, 但是"),v("strong",[_._v("未按序到达")]),_._v(", 所以只是"),v("strong",[_._v("暂存")]),_._v("到接收窗口. 此时 B 的"),v("strong",[_._v("接收窗口向前滑动")]),_._v("到下一个期待接收的位置依然是 34.")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220425234214256.png",alt:""}})]),_._v(" "),v("p",[_._v("此时 A 收到确认号, "),v("strong",[_._v("发送窗口向前滑动")]),_._v(".")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220425234542900.png",alt:""}})]),_._v(" "),v("p",[_._v("如果 A 的发送窗口内的"),v("strong",[_._v("序号都已用完")]),_._v(", 但还"),v("strong",[_._v("没有")]),_._v("再收到确认, 必须"),v("strong",[_._v("停止发送")]),_._v(". 如下图.")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220425234837080.png",alt:""}})]),_._v(" "),v("p",[_._v("而如果 A 收到确认落在发送窗口内, 那就可以使发送窗口继续"),v("strong",[_._v("向前滑动")]),_._v(".")]),_._v(" "),v("p",[_._v("注意:")]),_._v(" "),v("ul",[v("li",[_._v("发送端的发送窗口"),v("strong",[_._v("并不总是")]),_._v("和 B 的接收窗口一样大, 因为可能有一定的"),v("strong",[_._v("时间滞后")]),_._v(".")]),_._v(" "),v("li",[_._v("TCP 标准没有规定对不按序到达的数据应如何处理. 通常是先"),v("strong",[_._v("临时存放在接收窗口")]),_._v("中, 等到字节流中所"),v("strong",[_._v("缺少的字节收到")]),_._v("后, 再按序交付上层的应用进程.")]),_._v(" "),v("li",[_._v("TCP 要求接收方必须有"),v("strong",[_._v("累积确认")]),_._v("的功能, 这样可以减小传输"),v("strong",[_._v("开销")]),_._v(".")]),_._v(" "),v("li",[_._v("真正的发送窗口值的大小还取决于网络的"),v("strong",[_._v("拥塞情况")]),_._v(", "),v("strong",[_._v("发送窗口的上限值 = Min (接收方窗口值, 拥塞窗口值)")]),_._v(" .")])]),_._v(" "),v("h6",{attrs:{id:"_2-滑动窗口与缓存"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-滑动窗口与缓存"}},[_._v("#")]),_._v(" (2)滑动窗口与缓存")]),_._v(" "),v("p",[v("strong",[_._v("发送缓存")]),_._v("用来暂时发送方"),v("strong",[_._v("准备发送")]),_._v("的数据, 以及已发送但"),v("strong",[_._v("尚未收到")]),_._v("确认的数据.")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220426001840347.png",alt:"",title:"发送缓存"}})]),_._v(" "),v("p",[v("strong",[_._v("接收缓存")]),_._v("用来暂时存放"),v("strong",[_._v("按序到达")]),_._v("的, 但尚未被接收进程读取的数据, 以及"),v("strong",[_._v("未按序")]),_._v("到达的数据.")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220426001812944.png",alt:"",title:"接收缓存"}})]),_._v(" "),v("h5",{attrs:{id:"_2-超时重传时间"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-超时重传时间"}},[_._v("#")]),_._v(" 2.超时重传时间")]),_._v(" "),v("p",[_._v("TCP 每发送一个报文段, 就对这个报文段设置一次"),v("strong",[_._v("计时器")]),_._v(". 只要"),v("strong",[_._v("计时器")]),_._v("设置的重传时间到但还没有收到确认, 就要重传这一报文段. 这里重传"),v("strong",[_._v("时间的选择")]),_._v("很关键. 如果把超时重传时间设置得"),v("strong",[_._v("太短")]),_._v(", 就会引起很多报文段的不必要的重传, 使网络负荷增大; 若设置得"),v("strong",[_._v("过长")]),_._v(", 则又使网络的空闲时间增大, 降低了传输效率.")]),_._v(" "),v("blockquote",[v("p",[_._v("如何设置超时重传时间?")])]),_._v(" "),v("p",[_._v("TCP 采用了一种"),v("strong",[_._v("自适应算法")]),_._v(", 它记录一个报文段发出的时间, 以及收到相应的确认的时间. 这两个时间之差就是报文段的往返时间 "),v("strong",[_._v("RTT")]),_._v(". 计算"),v("strong",[_._v("加权平均往返时间 RTTs")]),_._v(". 超时重传时间 "),v("strong",[_._v("RTO")]),_._v("(Retransmission Time-Out) 应"),v("strong",[_._v("略大于")]),_._v("上面得出的加权平均往返时间 RTTs.")]),_._v(" "),v("blockquote",[v("p",[_._v("如何准确计算RTTs?")])]),_._v(" "),v("p",[_._v("在计算平均往返时间 RTT 时, 只要发生了报文段"),v("strong",[_._v("重传")]),_._v("事件, 就"),v("strong",[_._v("不采用")]),_._v("其往返时间样本. 这样得出的加权平均 RTTs 和 RTO 就比较准确.")]),_._v(" "),v("h5",{attrs:{id:"_3-选择确认sack"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-选择确认sack"}},[_._v("#")]),_._v(" 3.选择确认SACK")]),_._v(" "),v("p",[_._v("若收到的报文段无差错, 只是"),v("strong",[_._v("未按序号")]),_._v(", 中间还"),v("strong",[_._v("缺少")]),_._v("一些序号的数据, 也可以采用选择确认 SACK(Selective ACK) 的方式只传送缺少的数据而不重传已经正确到达接收方的数据. 但其实"),v("strong",[_._v("大多数的实现")]),_._v("还是"),v("strong",[_._v("重传所有")]),_._v("未被确认的数据块.")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220426230925001.png",alt:"",title:"选择确认SACK"}})]),_._v(" "),v("h4",{attrs:{id:"tcp流量控制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp流量控制"}},[_._v("#")]),_._v(" TCP流量控制")]),_._v(" "),v("p",[v("strong",[_._v("流量控制")]),_._v("就是"),v("strong",[_._v("控制发送方发送速率")]),_._v(", 保证"),v("strong",[_._v("接收方")]),_._v("来得及接收. "),v("strong",[_._v("接收方")]),_._v("发送的"),v("strong",[_._v("确认")]),_._v("报文中的"),v("strong",[_._v("窗口字段")]),_._v("可以用来"),v("strong",[_._v("控制发送方窗口值")]),_._v("大小("),v("strong",[_._v("利用滑动窗口实现流量控制")]),_._v("), 从而影响发送方的发送速率. 将窗口字段设置为 "),v("strong",[_._v("0")]),_._v(", 则发送方"),v("strong",[_._v("不能")]),_._v("发送数据.")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220426231149028.png",alt:"",title:"TCP流量控制"}})]),_._v(" "),v("h4",{attrs:{id:"tcp拥塞控制🌟"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp拥塞控制🌟"}},[_._v("#")]),_._v(" TCP拥塞控制🌟")]),_._v(" "),v("h5",{attrs:{id:"_1-概述-3"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述-3"}},[_._v("#")]),_._v(" 1.概述")]),_._v(" "),v("p",[_._v("在某段时间, 若对网络中某资源的需求超过了该资源所能提供的可用部分, 网络的"),v("strong",[_._v("性能")]),_._v("就要变坏, 这种现象称为"),v("strong",[_._v("拥塞")]),_._v("(congestion). 最坏可能导致系统崩溃.")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220426231355599.png",alt:"",title:"拥塞"}})]),_._v(" "),v("p",[_._v("增加资源能解决拥塞吗? "),v("strong",[_._v("不能")]),_._v(". 网络拥塞往往是由"),v("strong",[_._v("许多因素")]),_._v("引起的, 简单地增加资源在许多情况下不但不能解决拥塞问题, 而且还可能使网络的性能更坏.")]),_._v(" "),v("p",[v("strong",[_._v("拥塞控制")]),_._v("的作用:")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220426231518474.png",alt:"",title:"拥塞控制的作用"}})]),_._v(" "),v("blockquote",[v("p",[_._v("流量控制与拥塞控制的对比")])]),_._v(" "),v("table",[v("thead",[v("tr",[v("th",{staticStyle:{"text-align":"center"}},[_._v("流量控制")]),_._v(" "),v("th",{staticStyle:{"text-align":"center"}},[_._v("拥塞控制")])])]),_._v(" "),v("tbody",[v("tr",[v("td",{staticStyle:{"text-align":"center"}},[_._v("抑制"),v("strong",[_._v("发送端发")]),_._v("送数据的速率, 以使接收端"),v("strong",[_._v("来得及接收")])]),_._v(" "),v("td",{staticStyle:{"text-align":"center"}},[v("strong",[_._v("防止")]),_._v("过多的数据"),v("strong",[_._v("注入到网络")]),_._v("中, 使网络中的路由器或链路"),v("strong",[_._v("不致过载")])])]),_._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[_._v("是"),v("strong",[_._v("点对点")]),_._v("通信量的控制, 是"),v("strong",[_._v("端到端")]),_._v("的问题")]),_._v(" "),v("td",{staticStyle:{"text-align":"center"}},[_._v("是一个"),v("strong",[_._v("全局性")]),_._v("的过程, 涉及到与降低网络传输性能有关的所有因素")])]),_._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[_._v("使用"),v("strong",[_._v("滑动窗口")]),_._v("实现")]),_._v(" "),v("td",{staticStyle:{"text-align":"center"}},[_._v("使用"),v("strong",[_._v("拥塞窗口")]),_._v("变量 + "),v("strong",[_._v("拥塞控制算法")]),_._v("实现, 还要"),v("strong",[_._v("配合滑动窗口")])])])])]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("拥塞控制")]),_._v("是一个"),v("strong",[_._v("全局性的过程")]),_._v(", 涉及到所有主机与路由器的通信链路全局, 以及与降低网络传输性能有关的所有因素.")]),_._v(" "),v("li",[v("strong",[_._v("流量控制")]),_._v("往往指在给定的发送端和接收端之间的"),v("strong",[_._v("点对点")]),_._v("通信量的控制, 只要通信双方进行协商即可. 流量控制所要做的就是抑制发送端发送数据的速率, 使接收端来得及接收.")]),_._v(" "),v("li",[_._v("流量控制需要通信双方各维护一个发送窗, 一个接收窗, 对任意一方, 接收窗大小由自身决定, 发送窗大小由接收方响应的 TCP 报文段中窗口值确定; 拥塞控制的拥塞窗口大小变化由试探性发送一定数据量数据探查网络状况后而自适应调整.")]),_._v(" "),v("li",[v("strong",[_._v("发送方实际最终发送窗口 = min{流控发送窗口, 拥塞窗口}.")])])]),_._v(" "),v("blockquote",[v("p",[_._v("滑动窗口与拥塞窗口的区别")])]),_._v(" "),v("p",[v("strong",[_._v("滑动窗口")]),_._v("是接收窗口, 就是 TCP 头的那个"),v("strong",[_._v("窗口")]),_._v(", 可以理解为一块"),v("strong",[_._v("内存")]),_._v(", 不仅要接收数据, 还要向应用层交付数据. 而拥塞窗口是一个"),v("strong",[_._v("变量")]),_._v(".")]),_._v(" "),v("h5",{attrs:{id:"_2-tcp拥塞控制方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-tcp拥塞控制方法"}},[_._v("#")]),_._v(" 2.TCP拥塞控制方法")]),_._v(" "),v("p",[v("strong",[_._v("拥塞控制")]),_._v(": 基于"),v("strong",[_._v("拥塞窗口变量 + 几种拥塞控制算法")]),_._v("实现.")]),_._v(" "),v("ul",[v("li",[_._v("TCP 采用"),v("strong",[_._v("基于拥塞窗口")]),_._v("的方法进行拥塞控制, 该方法属于闭环控制方法. TCP"),v("strong",[_._v("发送方")]),_._v("维持一个"),v("strong",[_._v("拥塞窗口 cwnd")]),_._v("(Congestion Window) 的变量. "),v("strong",[_._v("发送端")]),_._v("利用"),v("strong",[_._v("拥塞窗口")]),_._v("根据网络的拥塞情况"),v("strong",[_._v("调整发送的数据量")]),_._v(".")]),_._v(" "),v("li",[v("strong",[_._v("发送窗口大小")]),_._v("不仅取决于"),v("strong",[_._v("接收方窗口")]),_._v("(就是 TCP 头部中的窗口值), 还取决于网络的"),v("strong",[_._v("拥塞状况")]),_._v(", 所以真正的"),v("strong",[_._v("发送窗口值")]),_._v("为:")])]),_._v(" "),v("div",{staticClass:"language- line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("发送窗口的上限值 = Min (接收方窗口值, 拥塞窗口值) = Min(rwnd, cwnd)\n")])]),_._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[_._v("1")]),v("br")])]),v("ul",[v("li",[_._v("当 rwnd < cwnd 时, 是"),v("strong",[_._v("接收方")]),_._v("的接收能力限制发送窗口的"),v("strong",[_._v("最大值")]),_._v(".")]),_._v(" "),v("li",[_._v("当 cwnd < rwnd 时, 则是网络的"),v("strong",[_._v("拥塞限制")]),_._v("发送窗口的"),v("strong",[_._v("最大值")]),_._v(".")])]),_._v(" "),v("p",[_._v("即发送方让自己的"),v("strong",[_._v("发送窗口")]),_._v("取为"),v("strong",[_._v("拥塞窗口和接收方的接受窗口")]),_._v("中"),v("strong",[_._v("较小的一个")]),_._v(".")]),_._v(" "),v("p",[v("strong",[_._v("控制拥塞窗口的原则")]),_._v(": 只要网络"),v("strong",[_._v("没有")]),_._v("出现拥塞, 拥塞窗口就可以再"),v("strong",[_._v("增大")]),_._v("一些, 以便把更多的分组发送出去, 这样就可以提高网络的利用率. 但只要网络"),v("strong",[_._v("出现")]),_._v("拥塞或有可能出现拥塞, 就必须把拥塞窗口"),v("strong",[_._v("减小")]),_._v("一些, 以减少注入到网络中的分组数, 以便缓解网络出现的拥塞.")]),_._v(" "),v("p",[v("strong",[_._v("拥塞的判断")]),_._v(":")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("收到三个重复的")]),_._v(" "),v("strong",[_._v("ACK")]),_._v(": 预示网络可能会出现拥塞, 实际可能还未发生拥塞.")]),_._v(" "),v("li",[v("strong",[_._v("重传定时器超时")]),_._v(": 网络已经发生了拥塞.")])]),_._v(" "),v("h5",{attrs:{id:"_3-tcp拥塞控制算法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-tcp拥塞控制算法"}},[_._v("#")]),_._v(" 3.TCP拥塞控制算法")]),_._v(" "),v("p",[_._v("四种拥塞控制算法:")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("慢开始")]),_._v("(slow-start)")]),_._v(" "),v("li",[v("strong",[_._v("拥塞避免")]),_._v("(congestion avoidance)")]),_._v(" "),v("li",[v("strong",[_._v("快重传")]),_._v("(fast retransmit)")]),_._v(" "),v("li",[v("strong",[_._v("快恢复")]),_._v("(fast recovery)")])]),_._v(" "),v("p",[_._v("TCP 拥塞控制流程图.")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220426232125296.png",alt:"",title:"TCP拥塞控制流程图"}})]),_._v(" "),v("h6",{attrs:{id:"_1-慢开始算法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-慢开始算法"}},[_._v("#")]),_._v(" (1)慢开始算法")]),_._v(" "),v("p",[v("strong",[_._v("目的")]),_._v(": 用来确定网络的"),v("strong",[_._v("负载能力")]),_._v("或拥塞程度.")]),_._v(" "),v("p",[v("strong",[_._v("算法思路")]),_._v(": 由小到大"),v("strong",[_._v("逐渐")]),_._v("增大拥塞窗口数值.")]),_._v(" "),v("p",[_._v("两个变量:")]),_._v(" "),v("p",[_._v("(1)"),v("strong",[_._v("拥塞窗口")]),_._v(": "),v("strong",[_._v("初始")]),_._v("拥塞窗口值. "),v("strong",[_._v("2 - 4")]),_._v(" 个最大报文段, 窗口值逐渐增大.")]),_._v(" "),v("p",[_._v("(2)"),v("strong",[_._v("慢开始门限")]),_._v("("),v("strong",[_._v("ssthresh")]),_._v("): 防止拥塞窗口增长过大引起网络拥塞.")]),_._v(" "),v("p",[v("strong",[_._v("拥塞窗口 cwnd 控制方法")]),_._v(": 在每收到一个对"),v("strong",[_._v("新的报文段的确认")]),_._v("后, 可以把拥塞窗口"),v("strong",[_._v("增加最多一个")]),_._v(" "),v("strong",[_._v("SMSS")]),_._v(" 的数值.")]),_._v(" "),v("p",[_._v("发送方"),v("strong",[_._v("每收到")]),_._v("一个对新"),v("strong",[_._v("报文段")]),_._v("的确认(重传的不算在内)就使 cwnd 加 1, 如果一个轮次传了 4 个报文段, 那么等这 4 个都收到确认之后, 窗口值就会多出 4 个, 整体表现就是"),v("strong",[_._v("一个轮次后变成了原来的两倍")]),_._v(".")]),_._v(" "),v("p",[_._v("每经过一个"),v("strong",[_._v("传输轮次")]),_._v(", 拥塞窗口值就"),v("strong",[_._v("加倍")]),_._v(", 即 "),v("strong",[_._v("cwnd = cwnd * 2")]),_._v(". 一个传输轮次所经历的时间其实就是"),v("strong",[_._v("往返时间 RTT")]),_._v(".  "),v("strong",[_._v('"传输轮次"')]),_._v("  强调的是把拥塞窗口 cwnd 所允许发送的报文段"),v("strong",[_._v("都连续发送")]),_._v("出去, 并收到了对"),v("strong",[_._v("已发送")]),_._v("的"),v("strong",[_._v("最后一个字节")]),_._v("的确认. 例如拥塞窗口 cwnd = 4, 这时的往返时间 RTT 就是发送方"),v("strong",[_._v("连续发送 4 个报文段")]),_._v(", 并收到这全部 "),v("strong",[_._v("4 个报文段")]),_._v("的确认, 总共经历的时间.")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220430195938412.png",alt:"",title:"慢开始算法"}})]),_._v(" "),v("p",[v("strong",[_._v("设置慢开始门限状态变量 ssthresh")]),_._v(". "),v("strong",[_._v("慢开始门限 ssthresh")]),_._v(" 的用法如下:")]),_._v(" "),v("ul",[v("li",[_._v("当 "),v("strong",[_._v("cwnd < ssthresh")]),_._v(" 时, 使用"),v("strong",[_._v("慢开始")]),_._v("算法.")]),_._v(" "),v("li",[_._v("当 "),v("strong",[_._v("cwnd > ssthresh")]),_._v(" 时, 停止使用慢开始算法而改用"),v("strong",[_._v("拥塞避免算法")]),_._v(".")]),_._v(" "),v("li",[_._v("当 "),v("strong",[_._v("cwnd = ssthresh")]),_._v(" 时, 既可使用慢开始算法, 也可使用拥塞避免算法.")])]),_._v(" "),v("h6",{attrs:{id:"_2-拥塞避免算法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-拥塞避免算法"}},[_._v("#")]),_._v(" (2)拥塞避免算法")]),_._v(" "),v("p",[_._v("当 "),v("strong",[_._v("cwnd > ssthresh")]),_._v(" 时, 停止使用慢开始算法而改用"),v("strong",[_._v("拥塞避免算法")]),_._v(".")]),_._v(" "),v("p",[v("strong",[_._v("思路")]),_._v(": 让拥塞窗口 cwnd "),v("strong",[_._v("缓慢地增大")]),_._v(", 避免出现拥塞. "),v("strong",[_._v("超时之前")]),_._v(", 每经过一个"),v("strong",[_._v("传输轮次")]),_._v("(注意慢开始算法是每收到一个"),v("strong",[_._v("报文段")]),_._v("就加 1), 拥塞窗口 "),v("strong",[_._v("cwnd = cwnd + 1")]),_._v(". 这就使拥塞窗口 cwnd 按"),v("strong",[_._v("线性规律缓慢增长")]),_._v('. 在拥塞避免阶段, 具有 "'),v("strong",[_._v("加法增大")]),_._v('" 的特点.')]),_._v(" "),v("p",[v("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220429230001214.png",alt:"",title:"拥塞避免算法"}})]),_._v(" "),v("p",[_._v("当网络"),v("strong",[_._v("出现拥塞")]),_._v("时: 无论在慢开始阶段还是在拥塞避免阶段, 只要发送方判断网络出现拥塞(重传定时器超时), 就执行如下操作:")]),_._v(" "),v("p",[v("strong",[_._v("(1) ssthresh = max(cwnd / 2, 2)")]),_._v(" : "),v("strong",[_._v("降低门限值(取一半)")]),_._v(" .")]),_._v(" "),v("p",[v("strong",[_._v("(2) cwnd = 1")]),_._v(": 拥塞窗口"),v("strong",[_._v("重新变为 1")]),_._v(".")]),_._v(" "),v("p",[v("strong",[_._v("(3) 执行慢开始算法")]),_._v(": 重新执行"),v("strong",[_._v("慢开始")]),_._v(".")]),_._v(" "),v("p",[_._v("目的: "),v("strong",[_._v("迅速")]),_._v("减少主机发送到网络中的分组数, 使得发生拥塞的路由器有足够时间把队列中积压的分组"),v("strong",[_._v("处理完毕")]),_._v('. "拥塞避免" '),v("strong",[_._v("并非指完全")]),_._v('能够避免了拥塞, 利用以上的措施要完全避免网络拥塞还是不可能的. "'),v("strong",[_._v("拥塞避免")]),_._v('" 是说在拥塞避免阶段把拥塞窗口'),v("strong",[_._v("控制为按线性规律增长")]),_._v(", 使网络比较"),v("strong",[_._v("不容易")]),_._v("出现拥塞.")]),_._v(" "),v("p",[v("strong",[_._v("慢开始与拥塞避免算法的过程举例:")])]),_._v(" "),v("ul",[v("li",[_._v("当 TCP 连接进行初始化时, 将拥塞窗口置为 1. 图中的窗口单位不使用字节而使用"),v("strong",[_._v("报文段")]),_._v(". 慢开始门限的初始值设置为 16 个报文段, 即 ssthresh = 16.")])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220429230711266.png",alt:""}})]),_._v(" "),v("ul",[v("li",[_._v("在执行慢开始算法时, 拥塞窗口 "),v("strong",[_._v("cwnd = 1")]),_._v(", 发送第一个报文段.")])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220429230748014.png",alt:""}})]),_._v(" "),v("ul",[v("li",[_._v("发送方"),v("strong",[_._v("每收到一个")]),_._v("对新"),v("strong",[_._v("报文段")]),_._v("的确认 ACK, 就把拥塞窗口值加 1, 然后开始下一轮的传输, 注意横坐标是"),v("strong",[_._v("传输轮次")]),_._v(", 不是时间. 因此拥塞窗口 cwnd 随着传输轮次按"),v("strong",[_._v("指数规律增长")]),_._v(".")])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220429230828903.png",alt:""}})]),_._v(" "),v("ul",[v("li",[_._v("当拥塞窗口 cwnd 增长到慢开始门限值 ssthresh 时, 即图中的点 ①. 此时拥塞窗口 cwnd = 16, 就改为执行"),v("strong",[_._v("拥塞避免算法")]),_._v(", 拥塞窗口按"),v("strong",[_._v("线性规律增长")]),_._v(".")])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220429231016147.png",alt:""}})]),_._v(" "),v("ul",[v("li",[_._v("当拥塞窗口 cwnd = 24 时, 网络出现了超时(图中的点 ②), 发送方判断为网络拥塞. 于是调整门限值 ssthresh = cwnd / 2 = 12, 同时重新设置拥塞窗口 cwnd = 1, 进入"),v("strong",[_._v("慢开始")]),_._v("阶段.")])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220429231306423.png",alt:""}})]),_._v(" "),v("ul",[v("li",[_._v("按照慢开始算法, 发送方每收到一个对新"),v("strong",[_._v("报文段")]),_._v("的确认 ACK, 就把拥塞窗口值加 1. 当拥塞窗口 cwnd = ssthresh = 12 时, 即图中的点 ③, 这是新的 ssthresh 值, 改为执行拥塞避免算法, 拥塞窗口按线性规律增大.")])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220429231425681.png",alt:""}})]),_._v(" "),v("ul",[v("li",[_._v("当拥塞窗口 cwnd = 16 时(图中的点 ④), 出现了一个新的情况, 就是发送方一连收到 3 个对"),v("strong",[_._v("同一个报文段的重复确认")]),_._v(", 图中记为 3-ACK. 发送方改为执行快重传和快恢复算法.")])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220429231702236.png",alt:""}})]),_._v(" "),v("h6",{attrs:{id:"_3-快重传算法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-快重传算法"}},[_._v("#")]),_._v(" (3)快重传算法")]),_._v(" "),v("p",[v("strong",[_._v("发送方")]),_._v("只要一连收到"),v("strong",[_._v("三个重复确认")]),_._v(", 就知道接收方确实"),v("strong",[_._v("没有收到")]),_._v("报文段, 因而应当"),v("strong",[_._v("立即进行重传")]),_._v(', 即 "'),v("strong",[_._v("快重传")]),_._v('", 这样就'),v("strong",[_._v("不会出现超时")]),_._v(", 发送方也不就会误认为出现了网络拥塞. 使用快重传可以使整个网络的"),v("strong",[_._v("吞吐量")]),_._v("提高约 20%. 不难看出, 快重传并非取消重传计时器, 而是在某些情况下可以"),v("strong",[_._v("更早地(更快地)重传")]),_._v("丢失的报文段.")]),_._v(" "),v("p",[_._v("采用快重传算法可以让"),v("strong",[_._v("发送方")]),_._v("尽早知道发生了个别报文段的丢失. 快重传算法首先要求接收方"),v("strong",[_._v("不要等待")]),_._v("自己发送数据时才进行捎带确认, 而是要"),v("strong",[_._v("立即发送确认")]),_._v(", 即使收到了"),v("strong",[_._v("失序")]),_._v("的报文段也要"),v("strong",[_._v("立即")]),_._v("发出对已收到的报文段的"),v("strong",[_._v("重复确认")]),_._v(".")]),_._v(" "),v("p",[_._v("下图中"),v("strong",[_._v("仅仅是丢失了 M3")]),_._v(", 其实"),v("strong",[_._v("并没有发生拥塞")]),_._v(". 此时"),v("strong",[_._v("连续收")]),_._v("到其他三个"),v("strong",[_._v("重复确认")]),_._v(", 就说明其实网络"),v("strong",[_._v("大概率没有拥塞")]),_._v(", 而仅仅是发生了 M3 的丢失. 此时启用快重传立即重传 M3.")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220429231919714.png",alt:"",title:"快重传算法"}})]),_._v(" "),v("h6",{attrs:{id:"_4-快恢复算法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-快恢复算法"}},[_._v("#")]),_._v(" (4)快恢复算法")]),_._v(" "),v("p",[_._v("根据上图所示. 当发送端收到连续"),v("strong",[_._v("三个重复的确认")]),_._v("时, 由于发送方现在认为网络"),v("strong",[_._v("很可能没有发生拥塞")]),_._v(", 因此现在"),v("strong",[_._v("不需要")]),_._v("执行慢开始算法, 而是执行"),v("strong",[_._v("快恢复算法")]),_._v(":")]),_._v(" "),v("p",[v("strong",[_._v("(1) 慢开始门限 ssthresh = 当前拥塞窗口 cwnd / 2;")])]),_._v(" "),v("p",[v("strong",[_._v("(2) 新拥塞窗口 cwnd = 慢开始门限 ssthresh;")])]),_._v(" "),v("p",[v("strong",[_._v("(3) 开始执行拥塞避免算法, 使拥塞窗口缓慢地线性增大.")])]),_._v(" "),v("p",[_._v("因此在图的点 ④, 发送方知道现在只是丢失了个别的报文段. 于是不启动慢开始, 而是执行"),v("strong",[_._v("快恢复")]),_._v("算法. 这时发送方调整门限值 ssthresh = cwnd / 2 = 8, 同时设置拥塞窗口 cwnd = ssthresh = 8(见图中的点 ⑤), 并开始执行拥塞避免算法.")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220429232057542.png",alt:"",title:"快恢复算法"}})]),_._v(" "),v("h5",{attrs:{id:"_4-aimd"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-aimd"}},[_._v("#")]),_._v(" 4.AIMD")]),_._v(" "),v("p",[v("strong",[_._v("拥塞避免算法")]),_._v("中, "),v("strong",[_._v("拥塞窗口")]),_._v("是按照"),v("strong",[_._v("线性规律")]),_._v('增大的. 这常称为 "'),v("strong",[_._v("加法增大")]),_._v('" AI(Additive Increase). 当出现超时或 3 个'),v("strong",[_._v("重复的确认")]),_._v("时, 就要把"),v("strong",[_._v("门限值")]),_._v("设置为当前拥塞窗口值的"),v("strong",[_._v("一半")]),_._v(', 并大大减小拥塞窗口的数值这常称为 "'),v("strong",[_._v("乘法减小")]),_._v('" MD(Multiplicative Decrease). 二者合在一起就是所谓的 '),v("strong",[_._v("AIMD")]),_._v(" 算法.")]),_._v(" "),v("h4",{attrs:{id:"tcp建立连接🌟"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp建立连接🌟"}},[_._v("#")]),_._v(" TCP建立连接🌟")]),_._v(" "),v("p",[_._v("TCP 是"),v("strong",[_._v("面向连接")]),_._v("的协议. TCP 传输数据有三个阶段: "),v("strong",[_._v("连接建立")]),_._v(", "),v("strong",[_._v("数据传送")]),_._v(", "),v("strong",[_._v("连接释放")]),_._v(". TCP 连接的管理就是使 TCP 连接的"),v("strong",[_._v("建立和释放")]),_._v("都能正常地进行.")]),_._v(" "),v("h5",{attrs:{id:"_1-连接过程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-连接过程"}},[_._v("#")]),_._v(" 1.连接过程")]),_._v(" "),v("p",[_._v("TCP 连接建立过程中要解决三个问题:")]),_._v(" "),v("ul",[v("li",[_._v("要使每一方能够确知"),v("strong",[_._v("对方的存在")]),_._v(".")]),_._v(" "),v("li",[_._v("要允许双方"),v("strong",[_._v("协商一些参数")]),_._v(", 如最大窗口值, 是否使用窗口扩大选项和时间戳选项以及服务质量等.")]),_._v(" "),v("li",[_._v("能够对运输实体"),v("strong",[_._v("资源")]),_._v("如缓存大小, 连接表中的项目等进行"),v("strong",[_._v("分配")]),_._v(".")])]),_._v(" "),v("p",[_._v("TCP 建立连接的过程叫做"),v("strong",[_._v("握手")]),_._v(". 握手需要在客户和服务器之间"),v("strong",[_._v("交换三个 TCP 报文段")]),_._v(", 称之为"),v("strong",[_._v("三报文握手/三次握手")]),_._v(". 流程如下:")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220429232609774.png",alt:"",title:"TCP链接建立过程"}})]),_._v(" "),v("p",[v("strong",[_._v("第一次握手")]),_._v(": 客户端发送连接请求, "),v("strong",[_._v("SYN")]),_._v(" 是"),v("strong",[_._v("同步号")]),_._v(", "),v("strong",[_._v("seq")]),_._v(" 是数据的第一个"),v("strong",[_._v("字节序号")]),_._v(", 连接请求也有"),v("strong",[_._v("数据")]),_._v(", 只不过数据字节数"),v("strong",[_._v("为 1")]),_._v(". TCP 连接是只有"),v("strong",[_._v("客户端才能发起")]),_._v(".")]),_._v(" "),v("p",[v("strong",[_._v("第二次握手")]),_._v(": 服务器"),v("strong",[_._v("收到")]),_._v("连接请求, "),v("strong",[_._v("SYN 也为 1")]),_._v(". 并使 "),v("strong",[_._v("ACK = 1")]),_._v(", 表示收到客户端的连接请求. 只有当 "),v("strong",[_._v("ACK = 1")]),_._v(" 时"),v("strong",[_._v("确认号 ack 字段才有效")]),_._v(". 所以必须设置 ACK = 1. 由于服务器收到客户端发送的序号 "),v("strong",[_._v("seq = x")]),_._v(", 说明服务器收到这一个字节的数据, 因此期待客户端下一个发送的数据的第一个字节是 seq = "),v("strong",[_._v("x + 1")]),_._v(". 所以确认号 "),v("strong",[_._v("ack = x + 1")]),_._v(". 同时服务器也设置一个自己的序号 "),v("strong",[_._v("seq = y")]),_._v(".")]),_._v(" "),v("p",[_._v("这里要注意"),v("strong",[_._v("区分 ACK")]),_._v("("),v("strong",[_._v("标志位")]),_._v(", "),v("strong",[_._v("为 1 时 ack 才有效")]),_._v(",  ACK 表示回复对方"),v("strong",[_._v("已经收到")]),_._v("对方的消息) 与 "),v("strong",[_._v("ack")]),_._v("("),v("strong",[_._v("确认号")]),_._v(", 用于确认已经收到数据, 并且回复下一个期待收到的数据).")]),_._v(" "),v("p",[v("strong",[_._v("第三次握手")]),_._v(": 客户端收到服务器的第二次握手, 需要对服务器进行第三次握手, 此时客户端回复 "),v("strong",[_._v("ACK = 1")]),_._v(", 表示收到服务端的第二次握手信息. 由于之前客户端发送的是序列号 "),v("strong",[_._v("seq = x")]),_._v(". 而且服务端也发回来的确认号也是 x + 1. 因此如果是正常的握手报文则客户端第三次握手的数据报文就是 "),v("strong",[_._v("seq = x + 1")]),_._v(". 同时客户端也收到服务器的 "),v("strong",[_._v("seq = y")]),_._v(", 需要确认收到了这个, 因此回复给服务器的确认中确认号变为 "),v("strong",[_._v("ack = y + 1")]),_._v(".")]),_._v(" "),v("p",[_._v("此时完成三次握手. 之后进行数据传输.")]),_._v(" "),v("p",[_._v("简化流程, 相当于客户端和服务端"),v("strong",[_._v("都给")]),_._v("对方发送了 "),v("strong",[_._v("SYN 和 ACK")]),_._v(" 信号.")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220430204109602.png",alt:"",title:"TCP链接建立简化流程"}})]),_._v(" "),v("h5",{attrs:{id:"_2-三次握手的原因"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-三次握手的原因"}},[_._v("#")]),_._v(" 2.三次握手的原因")]),_._v(" "),v("blockquote",[v("p",[_._v("为什么要进行第三次? 只握手两次不行?")])]),_._v(" "),v("p",[v("strong",[_._v("原因 1: 三次握手最主要的目的就是双方确认自己与对方的发送与接收是正常的.")])]),_._v(" "),v("ul",[v("li",[_._v("第一次握手: Client 什么都不能确认; Server 确认了对方发送正常, 自己接收正常.")]),_._v(" "),v("li",[_._v("第二次握手: Client 确认了: 自己发送, 接收正常, 对方发送, 接收正常; Server 确认了: 对方发送正常, 自己接收正常.")]),_._v(" "),v("li",[_._v("第三次握手: Client 确认了: 自己发送, 接收正常, 对方发送, 接收正常; Server 确认了: 自己发送, 接收正常, 对方发送, 接收正常.")])]),_._v(" "),v("p",[v("strong",[_._v("原因 2: 进行第三次握手是为了防止失效的连接请求到达服务器, 让服务器错误再次打开连接, 占用服务器资源.")])]),_._v(" "),v("p",[_._v("客户端发送的连接请求如果在网络中"),v("strong",[_._v("滞留")]),_._v(", 那么就会隔很长一段时间才能收到服务器端发回的"),v("strong",[_._v("连接确认")]),_._v(". 客户端等待一个"),v("strong",[_._v("超时重传")]),_._v("时间之后, 就会"),v("strong",[_._v("重新请求连接")]),_._v(". 但是这个滞留的连接请求最后还是会到达服务器, 如果不进行三次握手, 那么服务器就会"),v("strong",[_._v("打开两个连接")]),_._v(". 如果有第三次握手, 客户端会"),v("strong",[_._v("忽略服务")]),_._v("器之后发送的对滞留连接请求的连接确认(因为序号这些对应不上), 不进行第三次握手, 因此就不会再次打开连接.")]),_._v(" "),v("blockquote",[v("p",[_._v("为什么要传回SYN")])]),_._v(" "),v("p",[_._v("服务端传回发送端所发送的 "),v("strong",[_._v("SYN 是为了告诉发送端")]),_._v("它接收到的信息确实就是客户端所发送的信号. SYN 是 TCP/IP 建立"),v("strong",[_._v("连接时")]),_._v("使用的"),v("strong",[_._v("握手信号")]),_._v(". 在客户机和服务器之间建立正常的 TCP 网络连接时, 客户机首先发出一个 "),v("strong",[_._v("SYN 消息")]),_._v(", 服务器使用 "),v("strong",[_._v("SYN-ACK 应答")]),_._v("表示"),v("strong",[_._v("接收到了这个消息")]),_._v(", 最后客户机"),v("strong",[_._v("再以 ACK")]),_._v(" 消息响应. 这样在客户机和服务器之间才能建立起可靠的 TCP 连接, 数据才可以在客户机和服务器之间传递.")]),_._v(" "),v("h5",{attrs:{id:"_3-其他"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-其他"}},[_._v("#")]),_._v(" 3.其他")]),_._v(" "),v("blockquote",[v("p",[_._v("TCP连接中如果断电怎么办?")])]),_._v(" "),v("p",[_._v("当 TCP 两端 A, B 建立了连接后, 如果一端拔掉网线或者直接断电, 另一端"),v("strong",[_._v("不能收到通知")]),_._v(".")]),_._v(" "),v("p",[_._v("TCP 两端保存了一种"),v("strong",[_._v("数据的状态")]),_._v(", 就代表这种连接, TCP 两端之间的路由设备只是将数据转发到目的地, 并不知道这些数据实际代表了什么含义, 也并没有在其中保存任何的状态信息.")]),_._v(" "),v("p",[_._v("正常情况下当 TCP 的一端 A 调用了 SOCKET 的 close() 或者进程结束, 操作系统就会按照 TCP 协议发送 FIN 数据报文. B 端收到后就会"),v("strong",[_._v("断开连接")]),_._v(". 如果遇到拔掉网线或者直接断电等异常情况, 就"),v("strong",[_._v("没有机会发出断开的 FIN 数据报文")]),_._v(", 而 B 端没有收到断开的数据报文就会"),v("strong",[_._v("依然保持连接状态")]),_._v(".")]),_._v(" "),v("p",[_._v("如果这种异常断开的连接有很多, 那么势必会耗费大量资源, 需要通过"),v("strong",[_._v("心跳机制")]),_._v("检测出这种异常连接. TCP 协议有一个 KEEP_LIVE 开关, 只要打开这个开关就会定时发送一些数据"),v("strong",[_._v("长度为零")]),_._v("的探测心跳包, 发送的频率和次数都可以设置. 由于两端都有可能发生异常断开的情况, 所以 TCP 连接的"),v("strong",[_._v("两端必须都向对端发送心跳")]),_._v(".")]),_._v(" "),v("h4",{attrs:{id:"tcp释放连接🌟"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp释放连接🌟"}},[_._v("#")]),_._v(" TCP释放连接🌟")]),_._v(" "),v("p",[_._v("TCP 连接释放过程比较复杂, 与连接不同的是, 数据传输结束后通信的双方"),v("strong",[_._v("都可")]),_._v("释放连接. TCP 连接释放过程是"),v("strong",[_._v("四报文挥手/四次挥手")]),_._v(".")]),_._v(" "),v("h5",{attrs:{id:"_1-释放过程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-释放过程"}},[_._v("#")]),_._v(" 1.释放过程")]),_._v(" "),v("p",[_._v('通俗的例子: A 和 B 打电话, 通话即将结束后, A 说 "我没啥要说的了"(第一次), B 回答 "我知道了"(第二次), 但是 B 可能还会有要说的话, A 不能要求 B 跟着自己的节奏结束通话, 于是 B 可能又补充说了一些, 最后 B 说 "我说完了"(第三次), A 回答 "知道了"(第四次), 这样通话才算结束.')]),_._v(" "),v("p",[_._v("这里假设客户端"),v("strong",[_._v("主动")]),_._v("释放连接, 释放过程如下:")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220429233237700.png",alt:"",title:"TCP链接释放过程"}})]),_._v(" "),v("p",[v("strong",[_._v("第一次挥手")]),_._v(": 客户端发送 "),v("strong",[_._v("FIN = 1")]),_._v(", 并且其数据部分序号为 "),v("strong",[_._v("seq = u")]),_._v("(仅一个字节数据).")]),_._v(" "),v("p",[v("strong",[_._v("第二次挥手")]),_._v(": 服务器收到"),v("strong",[_._v("释放连接")]),_._v("的请求, 那么"),v("strong",[_._v("直接")]),_._v("回复 "),v("strong",[_._v("ACK = 1")]),_._v(", 表示"),v("strong",[_._v("确认收到")]),_._v("客户端的释放请求. 同时回复其确认号 "),v("strong",[_._v("ack = u + 1 "),v("strong",[_._v("​ "),v("strong",[v("strong",[_._v("(即服务端期望客户端发送的下一个字节). 同时如果服务端还有未发送完成的数据, 此时服务端可以")])]),_._v("​")]),_._v("继续")]),_._v("发送给客户端, 直到数据发送完成. 注意此时只能服务端给客户端发送数据, 也就是主动发起释放连接的一方只能接受"),v("strong",[_._v("不能再发送")]),_._v("了.")]),_._v(" "),v("p",[v("strong",[_._v("第三次挥手")]),_._v(": 服务器数据发送完成之后发送另一个"),v("strong",[_._v("释放消息")]),_._v(", 即 "),v("strong",[_._v("FIN = 1")]),_._v(", 同时 "),v("strong",[_._v("ACK = 1")]),_._v(", 表示收到客户端的消息, 此时 ack 有效, 且 ack = "),v("strong",[_._v("u + 1")]),_._v(". 同时服务端设置自己的序列号 seq = w.")]),_._v(" "),v("p",[v("strong",[_._v("第四次挥手")]),_._v(": 客户端收到服务器的释放报文后, 需要"),v("strong",[_._v("再次确认")]),_._v(". 此时 "),v("strong",[_._v("ACK = 1")]),_._v("(确认信息有效), 同时 "),v("strong",[_._v("seq = u + 1")]),_._v("(客户端前一次发送 u 的基础上加 1), ack = "),v("strong",[_._v("w + 1")]),_._v("(表明收到服务器的 seq = w 的信息). "),v("strong",[_._v("四次挥手完成")]),_._v(".")]),_._v(" "),v("p",[_._v("四次挥手流程简化版如下. 相当于客户端和服务端"),v("strong",[_._v("都给")]),_._v("对方发送了 "),v("strong",[_._v("FIN 和 ACK")]),_._v(" 信息, 只不过服务端的分成了两次, 所以变成了四次挥手.")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220430211742063.png",alt:"",title:"TCP链接释放简化过程"}})]),_._v(" "),v("blockquote",[v("p",[_._v("四次挥手的原因")])]),_._v(" "),v("p",[_._v("客户端发送了 FIN 连接释放报文之后, 服务器收到了这个报文, 就进入了 "),v("strong",[_._v("CLOSE-WAIT")]),_._v(" 状态. 这个状态是为了"),v("strong",[_._v("让服务器端发送还未传送完毕的数据")]),_._v(", 传送完毕之后, 服务器"),v("strong",[_._v("会发送 FIN 连接释放")]),_._v("报文.")]),_._v(" "),v("h5",{attrs:{id:"_2-time-wait与close-wait"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-time-wait与close-wait"}},[_._v("#")]),_._v(" 2.TIME_WAIT与CLOSE_WAIT")]),_._v(" "),v("p",[v("strong",[_._v("TIME_WAIT")]),_._v(" 和 "),v("strong",[_._v("CLOSE_WAIT")]),_._v(" 分别表示主动关闭方与被动关闭方产生的"),v("strong",[_._v("阶段性状态")]),_._v(", 如果在线服务器大量出现这两种状态则会加重机器负载, 影响有效的连接.")]),_._v(" "),v("p",[v("strong",[_._v("TIME_WAIT")]),_._v(": 四次挥手之后之后主动关闭方"),v("strong",[_._v("并不是直接进入 CLOSED")]),_._v(" 状态, 而是进入 "),v("strong",[_._v("TIME_WAIT 状态")]),_._v(", 等待 "),v("mark",[v("strong",[_._v("2MSL")])]),_._v(" 的时间. "),v("strong",[_._v("MSL")]),_._v(' 中文可以译为 "'),v("strong",[_._v("报文最大生存时间")]),_._v('", 它是任何报文在网络上'),v("strong",[_._v("存在的最长时间")]),_._v(", 超过这个时间报文将被"),v("strong",[_._v("丢弃")]),_._v(". 一般时间长度是 30 秒. 等待 2MSL 时间主要"),v("strong",[_._v("目的")]),_._v("是"),v("strong",[_._v("怕最后一个 ACK")]),_._v(" 包对方"),v("strong",[_._v("没收到")]),_._v(", 那么对方在"),v("strong",[_._v("超时后将重发第三次握手的 FIN 包")]),_._v(", 主动关闭端接到"),v("strong",[_._v("重发的 FIN 包后可以再发一个 ACK 应答包")]),_._v(", 从而确保四次挥手完成. 在 TIME_WAIT 状态时"),v("strong",[_._v("两端的端口不能使用")]),_._v(", 要等到 2MSL 时间结束"),v("strong",[_._v("才可继续使用")]),_._v(". 当连接处于 2MSL 等待阶段时任何迟到的报文段都将被"),v("strong",[_._v("丢弃")]),_._v(".")]),_._v(" "),v("p",[_._v("等待 2MSL 的两个理由:")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("确认被动关闭方能够顺利进入 CLOSED 状态")]),_._v(". 也就是确保"),v("strong",[_._v("最后一个确认报文")]),_._v("能够到达. 如果 "),v("strong",[_._v("B 没收到")]),_._v(" A 发送来的"),v("strong",[_._v("确认报文")]),_._v(", 那么就会"),v("strong",[_._v("重新发送连接释放")]),_._v("请求报文, A 等待一段时间就是为了处理这种情况的发生.")]),_._v(" "),v("li",[v("strong",[_._v("防止失效请求")]),_._v(". 等待一段时间是为了让本连接持续时间内所产生的"),v("strong",[_._v("所有报文都从网络中消失")]),_._v(", 使得下一个新的连接"),v("strong",[_._v("不会出现旧的连接")]),_._v("请求报文.")])]),_._v(" "),v("p",[v("strong",[_._v("CLOSE_WAIT: 被动要求关闭的机器收到对方请求关闭连接的 FIN 报文, 在第一次 ACK 应答后进入马上进入")]),_._v(". 这种状态其实是在"),v("strong",[_._v("等待关闭")]),_._v(", 并且通知应用程序"),v("strong",[_._v("发送剩余数据")]),_._v(", 处理现场信息, 关闭相应资源.")]),_._v(" "),v("p",[v("strong",[_._v("注意")]),_._v(": 由于 TIME_WAIT 状态无法真正释放句柄资源, 此期间 Socket 中使用的"),v("strong",[_._v("本地端口")]),_._v("在默认情况下不能再被使用, 对于高并发服务器来说, 这会限制有效连接的创建数量, 成为性能瓶颈. 所以建议将"),v("strong",[_._v("高并发服务器的 TIME_WAIT 超时时间调小")]),_._v(".")]),_._v(" "),v("h5",{attrs:{id:"_3-tcp连接状态总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-tcp连接状态总结"}},[_._v("#")]),_._v(" 3.TCP连接状态总结")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("CLOSED")]),_._v(": 初始状态.")]),_._v(" "),v("li",[v("strong",[_._v("LISTEN")]),_._v(": 服务器处于监听状态.")]),_._v(" "),v("li",[v("strong",[_._v("SYN_SEND")]),_._v(": 客户端 socket 执行 CONNECT 连接, 发送 SYN 包, 进入此状态.")]),_._v(" "),v("li",[v("strong",[_._v("SYN_RECV")]),_._v(": 服务端收到 SYN 包并发送服务端 SYN 包, 进入此状态.")]),_._v(" "),v("li",[v("strong",[_._v("ESTABLISH")]),_._v(": 表示"),v("strong",[_._v("连接建立")]),_._v(". 客户端发送了最后一个 ACK 包后进入此状态, 服务端接收到 ACK 包后进入此状态.")]),_._v(" "),v("li",[v("strong",[_._v("FIN_WAIT_1")]),_._v(": 终止连接的一方(如客户端)发送了 FIN 报文后进入. "),v("strong",[_._v("等待对方 FIN")]),_._v(".")]),_._v(" "),v("li",[v("strong",[_._v("CLOSE_WAIT")]),_._v(": (假设服务端)接收到客户端 FIN 包之后等待关闭的阶段. 在接收到对方的 FIN 包之后, 自然是需要立即回复 ACK 包的, 表示已经知道断开请求. 但是本方是否立即断开连接(发送 FIN 包)取决于是否还有数据需要发送给客户端, 若有则在发送 FIN 包之前均为此状态.")]),_._v(" "),v("li",[v("strong",[_._v("FIN_WAIT_2")]),_._v(": 此时是半连接状态, 即有一方要求关闭连接, 等待另一方关闭. 客户端接收到服务器的 ACK 包, 但并没有立即接收到服务端的 FIN 包, 进入 FIN_WAIT_2 状态.")]),_._v(" "),v("li",[v("strong",[_._v("LAST_ACK")]),_._v(": 服务端发动最后的 FIN 包, 等待最后的客户端 ACK 响应, 进入此状态.")]),_._v(" "),v("li",[v("strong",[_._v("TIME_WAIT")]),_._v(": 客户端收到服务端的 FIN 包, 并立即发出 ACK 包做最后的确认, 在此之后的 2MSL 时间称为 TIME_WAIT 状态.")])]),_._v(" "),v("h5",{attrs:{id:"_4-其他"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-其他"}},[_._v("#")]),_._v(" 4.其他")]),_._v(" "),v("h6",{attrs:{id:"_1-保活计时器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-保活计时器"}},[_._v("#")]),_._v(" (1)保活计时器")]),_._v(" "),v("p",[_._v("保活计时器用来防止在 TCP 连接出现"),v("strong",[_._v("长时期的空闲")]),_._v(". 比如客户端"),v("strong",[_._v("直接断电")]),_._v(", 来不及发送释放的报文. "),v("strong",[_._v("保活计时器")]),_._v("通常设置为 2 小时. 若服务器过了 2 小时"),v("strong",[_._v("还没有收到")]),_._v("客户端的信息, 它就发送探测报文段. 若发送了 10 个探测报文段还没有响应, 就认为客户出了故障并主动"),v("strong",[_._v("终止该连接")]),_._v(".")]),_._v(" "),v("h6",{attrs:{id:"_2-tcp有限状态机"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-tcp有限状态机"}},[_._v("#")]),_._v(" (2)TCP有限状态机")]),_._v(" "),v("p",[_._v("箭头旁边的字, 表明引起这种变迁的原因, 或表明发生状态变迁后又出现什么动作.")]),_._v(" "),v("p",[_._v("图中有三种不同的箭头.")]),_._v(" "),v("ul",[v("li",[_._v("粗实线箭头表示对"),v("strong",[_._v("客户端")]),_._v("进程的正常变迁.")]),_._v(" "),v("li",[_._v("粗虚线箭头表示对"),v("strong",[_._v("服务器")]),_._v("进程的正常变迁.")]),_._v(" "),v("li",[_._v("细线箭头表示异常变迁.")])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220429233611612.png",alt:"",title:"TCP连接状态机"}})]),_._v(" "),v("h6",{attrs:{id:"_3-tcp连接限制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-tcp连接限制"}},[_._v("#")]),_._v(" (3)TCP连接限制")]),_._v(" "),v("p",[_._v("TCP 连接的建立是通过"),v("strong",[_._v("文件描述符(fd)")]),_._v("  完成的, 通过创建套接字获取一个 fd, 然后服务端和客户端需要基于获得的 fd 调用不同的函数分别进入监听状态和发起连接请求. "),v("strong",[_._v("fd 的数量")]),_._v("决定了服务端进程能创建连接的数量. 所以需要注意调整服务端进程和操作系统所支持的"),v("strong",[_._v("最大文件句柄数")]),_._v(".")]),_._v(" "),v("h4",{attrs:{id:"tcp协议保证可靠传输总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp协议保证可靠传输总结"}},[_._v("#")]),_._v(" TCP协议保证可靠传输总结")]),_._v(" "),v("p",[_._v("总结一下 TCP 协议是如何保证传输可靠的, 总结就是: "),v("strong",[_._v("ARQ 协议 + 滑动窗口协议")]),_._v(".")]),_._v(" "),v("ol",[v("li",[v("strong",[_._v("数据编号")]),_._v(": 应用数据被分割成 TCP 认为最适合发送的"),v("strong",[_._v("数据块")]),_._v(". TCP 给发送的每一个"),v("strong",[_._v("数据包进行编号")]),_._v(", 接收方对数据包进行排序, 把有序数据传送给应用层.")]),_._v(" "),v("li",[v("strong",[_._v("校验和")]),_._v(": TCP 将保持它首部和数据的"),v("strong",[_._v("检验和")]),_._v(". 这是一个端到端的检验和, 目的是检测数据在传输过程中的任何变化. 如果收到段的检验和有差错, TCP 将丢弃这个报文段和不确认收到此报文段.")]),_._v(" "),v("li",[v("strong",[_._v("ARQ 协议")]),_._v(": 每发完一个分组就停止发送, 等待收到对方确认后再发下一个分组. 为提高传输效率可以采用连续 ARQ 协议.")]),_._v(" "),v("li",[v("strong",[_._v("超时重传")]),_._v(": 当 TCP 发出一个"),v("strong",[_._v("报文")]),_._v("后就启动一个"),v("strong",[_._v("定时器")]),_._v(", 如果超过定时器还没收到接收方的确认, 就会重传报文.")]),_._v(" "),v("li",[_._v("**流量控制: ** TCP 连接的每一方都有固定大小的缓冲空间, TCP 的接收端只允许发送端发送接收端缓冲区能接纳的数据. 当接收方来不及处理发送方的数据, 能提示发送方降低发送的速率, 防止包丢失. TCP 利用滑动窗口实现流量控制.")]),_._v(" "),v("li",[_._v("**拥塞控制: ** 当网络拥塞时, 减少数据的发送. 包含慢开始, 拥塞避免, 快重传, 快恢复等拥塞控制算法.")])]),_._v(" "),v("p",[_._v("‍")]),_._v(" "),v("p",[_._v("‍")]),_._v(" "),v("h4",{attrs:{id:"参考资料"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[_._v("#")]),_._v(" 参考资料")]),_._v(" "),v("ul",[v("li",[_._v("《计算机网络 第七版 谢希仁》")]),_._v(" "),v("li",[v("a",{attrs:{href:"https://blog.csdn.net/bjrxyz/article/details/71076442",target:"_blank",rel:"noopener noreferrer"}},[_._v("TCP新手误区--心跳的意义"),v("OutboundLink")],1)])])])}),[],!1,null,null,null);v.default=n.exports}}]);