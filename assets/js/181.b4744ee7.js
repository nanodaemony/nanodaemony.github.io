(window.webpackJsonp=window.webpackJsonp||[]).push([[181],{510:function(s,t,a){"use strict";a.r(t);var n=a(4),r=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"_303-mysql优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_303-mysql优化"}},[s._v("#")]),s._v(" 303.MySQL优化")]),s._v(" "),t("h3",{attrs:{id:"基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[s._v("#")]),s._v(" 基础")]),s._v(" "),t("p",[s._v("下图是优化的手段及其收益成本的经验图, 可以看出 SQL 及索引的优化效果是最好的, 而且成本最低, 所以工作中要在这块花更多时间.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/202303202155477.png",alt:""}})]),s._v(" "),t("h4",{attrs:{id:"优化工具"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优化工具"}},[s._v("#")]),s._v(" 优化工具")]),s._v(" "),t("p",[s._v("先来个表:")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("employees"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("NOT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AUTO_INCREMENT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("varchar")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("24")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("NOT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DEFAULT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COMMENT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'姓名'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("NOT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DEFAULT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'0'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COMMENT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'年龄'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("position"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("varchar")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("NOT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DEFAULT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COMMENT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'职位'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("hire_time"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("timestamp")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("NOT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DEFAULT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CURRENT_TIMESTAMP")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COMMENT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'入职时间'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PRIMARY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("KEY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 联合索引")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("KEY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("idx_name_age_position"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("position"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("USING")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BTREE")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENGINE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("InnoDB")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DEFAULT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CHARSET")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" utf8 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COMMENT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'员工表'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[s._v("这里创建了"),t("strong",[s._v("联合索引")]),s._v(": idx_name_age_position, 共三个字段 "),t("strong",[s._v("name, age 和 position")]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"_1-explain关键字⭐️"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-explain关键字⭐️"}},[s._v("#")]),s._v(" 1.EXPLAIN关键字⭐️")]),s._v(" "),t("p",[s._v("使用 EXPLAIN 关键字可以"),t("strong",[s._v("模拟优化器执行 SQL 语句")]),s._v(", 分析查询语句或结构的性能瓶颈. "),t("strong",[s._v("在 SELECT 语句之前加 EXPLAIN 关键字")]),s._v(", MySQL 会在查询上设置一个"),t("strong",[s._v("标记")]),s._v(", 执行查询会"),t("strong",[s._v("返回执行计划的信息")]),s._v(", 而"),t("strong",[s._v("不是执行")]),s._v("这条 SQL. 如果包含子查询, 仍会执行该子查询, 将结果放入临时表中.")]),s._v(" "),t("p",[s._v("如果一条 SQL 包含子查询等较复杂的查询, 那么 Explain 的结果可能有多行, 每行都可能各自有下面的属性.")]),s._v(" "),t("p",[s._v("Explain 分析结果中比较重要的"),t("strong",[s._v("属性")]),s._v("如下:")]),s._v(" "),t("p",[t("strong",[s._v("(1) select_type")])]),s._v(" "),t("p",[s._v("SELECT 查询的类型. 主要是区别普通查询和联合查询, 子查询之类的复杂查询. (1) simple: 简单查询, 查询不包含子查询和 union. (2) subquery: 子查询. 还有一些不列了.")]),s._v(" "),t("p",[t("strong",[s._v("(2) table")])]),s._v(" "),t("p",[s._v("表示正在访问哪个表.")]),s._v(" "),t("p",[t("strong",[s._v("(3) ​")]),s._v("​**==type==**")]),s._v(" "),t("p",[s._v("表示"),t("strong",[s._v("访问类型")]),s._v(", 即表示 MySQL 如何查找表中的行, 是"),t("strong",[s._v("较为重要")]),s._v("的一个指标. 从**==最优到最差==**依次为: "),t("strong",[s._v("system > const > eq_ref > ref > range > index > ALL. ​")]),s._v("一般来说, "),t("strong",[s._v("得保证查询达到 range 级别, 最好达到 ref, ​")]),s._v("如果达不到则可以考虑进行 SQL 优化.")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("const, system")]),s._v(": 当 "),t("strong",[s._v("MySQL 能对查询的某部分进行优化并将其转化成一个常量时, type 取值为 const 或 system. 用于 primary key 或 unique key 的所有列与常数")]),s._v("比较时, 所以表最多有一个匹配行, 读取 1 次, 速度比较快. system 是 const 的特例, 表里只有一条元组匹配时为 system.")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("eq_ref")]),s._v(": 使用这种索引查找, MySQL 知道"),t("strong",[s._v("最多只返回一条符合条件")]),s._v("的记录. 这种访问方法可以在 MySQL 使用主键或者唯一性索引查找时看到, 它会将它们与某个参考值做比较. primary key 或 unique key 索引的所有部分被连接使用, 最多只会返回一条符合条件的记录. 简单的 SELECT 查询不会出现这种 type.")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("ref")]),s._v(": 相比 eq_ref, 不使用唯一索引, 而是使用"),t("strong",[s._v("普通索引或唯一索引")]),s._v("的部分前缀. 索引要和某个值相比较, 可能会找到"),t("strong",[s._v("多个符合条件的行, 因此它是查找和扫描的混合体")]),s._v(". 这是一种索引访问(有时也叫做索引查找), 它返回"),t("strong",[s._v("所有匹配某个单个值")]),s._v("的行. 此类索引访问只有当使用非唯一性索引或唯一性索引的非唯一性前缀时才会发生.")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("range")]),s._v(": 使用一个"),t("strong",[s._v("索引来检索给定范围的行")]),s._v(". 范围扫描通常出现在 in(), between ,> ,<, >= 等操作中.")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("index")]),s._v(": "),t("strong",[s._v("扫描全索引就能拿到结果")]),s._v(", 一般是扫描某个"),t("strong",[s._v("二级索引")]),s._v(", 这种扫描不会从索引树根节点开始快速查找, 而是直接对二级索引的叶子节点遍历和扫描, 速度还是比较慢的, 这种查询一般为使用"),t("strong",[s._v("覆盖索引")]),s._v(", 二级索引一般比较小, 所以这种通常比 ALL 快一些. 这种情况虽然使用了索引, 但是其实是在遍历索引进行查找, 所以通常需要避免.")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("ALL")]),s._v(": 全表扫描. 扫描聚簇索引的所有叶子节点. 通常情况下这需要增加索引来进行优化.")])])]),s._v(" "),t("p",[t("strong",[s._v("(4) possible_keys")])]),s._v(" "),t("p",[s._v("表示本次查询"),t("strong",[s._v("可能会使用哪些索引")]),s._v("来进行查找. 当 key 为 NULL 时, 可能是因为表中数据不多, MySQL 认为索引对此查询帮助不大, 选择了全表查询.")]),s._v(" "),t("p",[t("strong",[s._v("(5) key")])]),s._v(" "),t("p",[s._v("表示查询"),t("strong",[s._v("实际采用哪个索引")]),s._v("来进行查找. 如果"),t("strong",[s._v("没有选择使用所以, 键是 NULL")]),s._v(". "),t("strong",[s._v("key = primary")]),s._v(" 表示使用了"),t("strong",[s._v("主键")]),s._v("; "),t("strong",[s._v("key = null")]),s._v(" 表示"),t("strong",[s._v("没用到索引")]),s._v(". 有时候可能出现 possible_key 有值但是 key 没有值的情况, 就是实际上并没有用到索引.")]),s._v(" "),t("p",[t("strong",[s._v("(6) key_len")])]),s._v(" "),t("p",[s._v("表示"),t("strong",[s._v("在索引里使用的字节数")]),s._v(". 如果键是 NULL, 长度就是 NULL. 比如查询用到了联合索引, 那么从 key_len 就可以推算出使用到的联合索引的前缀长度. 举例: film_actor 表的联合索引 idx_film_actor_id 由 film_id 和 actor_id 两个 int 列组成, 并且每个 int 是 4 字节. 通过结果中的 key_len = 4 可推断出查询使用了联合索引的第一个列即 film_id 列来执行索引查找.")]),s._v(" "),t("p",[t("strong",[s._v("(7) ref")])]),s._v(" "),t("p",[s._v("表示哪个字段或常数与 key 一起被使用.")]),s._v(" "),t("p",[t("strong",[s._v("(8) rows")])]),s._v(" "),t("p",[s._v("MySQL "),t("strong",[s._v("估计")]),s._v("要读取的行数, 注意这个不是结果集里的行数.")]),s._v(" "),t("p",[t("strong",[s._v("(9) Extra")])]),s._v(" "),t("p",[s._v("额外信息, 常见重要值如下:")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("Using index")]),s._v(": 使用了"),t("strong",[s._v("覆盖索引")]),s._v(".")]),s._v(" "),t("li",[t("strong",[s._v("Using where")]),s._v(": 使用 WHERE 语句来处理结果, 并且查询的列未被索引覆盖.")]),s._v(" "),t("li",[s._v("Using index condition: 查询的列不完全被索引覆盖, WHERE 条件中是一个前导列的范围.")]),s._v(" "),t("li",[s._v("Using temporary: 需要创建一张临时表来处理查询. 出现这种情况一般是要进行优化.")]),s._v(" "),t("li",[t("strong",[s._v("Using filesort")]),s._v(": 使用了外部磁盘排序而不是索引排序. 在没有索引的情况下, 数据较小时可以在内存进行排序, 否则需要"),t("strong",[s._v("在磁盘完成排序")]),s._v(". 这种情况下一般也要考虑使用索引来优化.")])]),s._v(" "),t("h5",{attrs:{id:"_2-trace工具"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-trace工具"}},[s._v("#")]),s._v(" 2.Trace工具")]),s._v(" "),t("p",[s._v("对于 name > 'a' 和 name > 'zzz' 这种"),t("strong",[s._v("范围查询")]),s._v("的执行结果, MySQL "),t("strong",[s._v("最终")]),s._v("是否会选择走索引可能是"),t("strong",[s._v("无法轻易判断")]),s._v("的, 可以使用 "),t("strong",[s._v("trace 工具")]),s._v("来看看 MySQL "),t("strong",[s._v("最终如何选择索引")]),s._v(". 注意开启 trace 工具会"),t("strong",[s._v("影响 MySQL 性能")]),s._v(", 所以只能"),t("strong",[s._v("临时分析")]),s._v(" SQL 使用, "),t("strong",[s._v("用完后应立即关闭")]),s._v(".")]),s._v(" "),t("p",[s._v("开启 trace 工具.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("session")]),s._v(" optimizer_trace "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"enabled=on"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" end_markers_in_json "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("on")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 开启trace")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("执行语句.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" position"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("分析结果")]),s._v("存放到了下面的表中.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" information_schema"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("OPTIMIZER_TRACE"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("得到 trace 字段:")]),s._v(" "),t("div",{staticClass:"language-json line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"steps"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"join_preparation"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" ‐‐第一阶段"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" SQL准备阶段\n                 "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"select#"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                 "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"steps"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n                 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                 "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"expanded_query"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"/* select#1 */ select `employees`.`id` AS `id`,`employees`.`name` AS `name`,`employees`.`age` AS `age`,`employees`.`position` AS `position`,`employees`.`hire_time` AS `hire_time` from`employees` where (`employees`.`name` > 'a') order by `employees`.`position`\"")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* steps */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* join_preparation */")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"join_optimization"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" ‐‐第二阶段"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" SQL优化阶段\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"select#"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"steps"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"condition_processing"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" ‐‐条件处理\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"condition"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"WHERE"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"original_condition"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"(`employees`.`name` > 'a')\"")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"steps"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"transformation"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"equality_propagation"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"resulting_condition"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"(`employees`.`name` > 'a')\"")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"transformation"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"constant_propagation"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"resulting_condition"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"(`employees`.`name` > 'a')\"")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"transformation"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"trivial_condition_removal"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"resulting_condition"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"(`employees`.`name` > 'a')\"")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* steps */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* condition_processing */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"substitute_generated_columns"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* substitute_generated_columns */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"table_dependencies"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" ‐‐表依赖详情\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"table"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"`employees`"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"row_may_be_null"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"map_bit"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"depends_on_map_bits"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* depends_on_map_bits */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* table_dependencies */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"ref_optimizer_key_uses"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* ref_optimizer_key_uses */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"rows_estimation"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" ‐‐预估表的访问成本\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"table"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"`employees`"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"range_analysis"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"table_scan"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("     ‐‐全表扫描情况\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"rows"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10123")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("      ‐‐扫描行数\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"cost"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2054.7")]),s._v("      ‐‐查询成本\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* table_scan */")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("70")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"potential_range_indexes"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" ‐‐查询可能使用的索引\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"index"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"PRIMARY"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ‐‐主键索引\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"usable"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"cause"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"not_applicable"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"index"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"idx_name_age_position"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ‐‐辅助索引\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"usable"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"key_parts"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"name"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"age"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"position"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"id"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* key_parts */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* potential_range_indexes */")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"setup_range_conditions"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* setup_range_conditions */")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"group_index_range"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"chosen"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"cause"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"not_group_by_or_distinct"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* group_index_range */")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"analyzing_range_alternatives"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" ‐‐分析各个索引使用成本\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"range_scan_alternatives"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"index"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"idx_name_age_position"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"ranges"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a < name"')]),s._v(" ‐‐索引使用范围\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* ranges */")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"index_dives_for_eq_ranges"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"rowid_ordered"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ‐‐使用该索引获取的记录是否按照主键排序\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"using_mrr"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"index_only"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ‐‐是否使用覆盖索引\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"rows"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5061")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("        ‐‐索引扫描行数\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"cost"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6074.2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("      ‐‐索引使用成本\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"chosen"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("     ‐‐是否选择该索引\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"cause"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"cost"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* range_scan_alternatives */")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"analyzing_roworder_intersect"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"usable"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"cause"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"too_few_roworder_scans"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* analyzing_roworder_intersect */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* analyzing_range_alternatives */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* range_analysis */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* rows_estimation */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"considered_execution_plans"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"plan_prefix"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* plan_prefix */")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"table"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"`employees`"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"best_access_path"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" ‐‐最优访问路径\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"considered_access_paths"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" ‐‐最终选择的访问路径\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"rows_to_scan"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10123")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"access_type"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"scan"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ‐‐访问类型"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 为scan"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 全表扫描\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"resulting_rows"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10123")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"cost"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2052.6")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"chosen"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ‐‐确定选择\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"use_tmp_table"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* considered_access_paths */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* best_access_path */")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"condition_filtering_pct"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"rows_for_plan"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10123")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"cost_for_plan"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2052.6")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"sort_cost"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10123")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"new_cost_for_plan"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("12176")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"chosen"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* considered_execution_plans */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"attaching_conditions_to_tables"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"original_condition"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"(`employees`.`name` > 'a')\"")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"attached_conditions_computation"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* attached_conditions_computation */")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"attached_conditions_summary"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"table"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"`employees`"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"attached"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"(`employees`.`name` > 'a')\"")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* attached_conditions_summary */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* attaching_conditions_to_tables */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"clause_processing"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"clause"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ORDER BY"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"original_clause"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"`employees`.`position`"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"items"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"item"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"`employees`.`position`"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* items */")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"resulting_clause_is_simple"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"resulting_clause"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"`employees`.`position`"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* clause_processing */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"reconsidering_access_paths_for_index_ordering"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"clause"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ORDER BY"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"steps"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* steps */")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"index_order_summary"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"table"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"`employees`"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"index_provides_order"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"order_direction"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"undefined"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"index"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"unknown"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"plan_changed"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* index_order_summary */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* reconsidering_access_paths_for_index_ordering */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"refine_plan"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"table"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"`employees`"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* refine_plan */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* steps */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* join_optimization */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"join_execution"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" ‐‐第三阶段"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" SQL执行阶段\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"select#"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"steps"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* steps */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* join_execution */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* steps */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br"),t("span",{staticClass:"line-number"},[s._v("59")]),t("br"),t("span",{staticClass:"line-number"},[s._v("60")]),t("br"),t("span",{staticClass:"line-number"},[s._v("61")]),t("br"),t("span",{staticClass:"line-number"},[s._v("62")]),t("br"),t("span",{staticClass:"line-number"},[s._v("63")]),t("br"),t("span",{staticClass:"line-number"},[s._v("64")]),t("br"),t("span",{staticClass:"line-number"},[s._v("65")]),t("br"),t("span",{staticClass:"line-number"},[s._v("66")]),t("br"),t("span",{staticClass:"line-number"},[s._v("67")]),t("br"),t("span",{staticClass:"line-number"},[s._v("68")]),t("br"),t("span",{staticClass:"line-number"},[s._v("69")]),t("br"),t("span",{staticClass:"line-number"},[s._v("70")]),t("br"),t("span",{staticClass:"line-number"},[s._v("71")]),t("br"),t("span",{staticClass:"line-number"},[s._v("72")]),t("br"),t("span",{staticClass:"line-number"},[s._v("73")]),t("br"),t("span",{staticClass:"line-number"},[s._v("74")]),t("br"),t("span",{staticClass:"line-number"},[s._v("75")]),t("br"),t("span",{staticClass:"line-number"},[s._v("76")]),t("br"),t("span",{staticClass:"line-number"},[s._v("77")]),t("br"),t("span",{staticClass:"line-number"},[s._v("78")]),t("br"),t("span",{staticClass:"line-number"},[s._v("79")]),t("br"),t("span",{staticClass:"line-number"},[s._v("80")]),t("br"),t("span",{staticClass:"line-number"},[s._v("81")]),t("br"),t("span",{staticClass:"line-number"},[s._v("82")]),t("br"),t("span",{staticClass:"line-number"},[s._v("83")]),t("br"),t("span",{staticClass:"line-number"},[s._v("84")]),t("br"),t("span",{staticClass:"line-number"},[s._v("85")]),t("br"),t("span",{staticClass:"line-number"},[s._v("86")]),t("br"),t("span",{staticClass:"line-number"},[s._v("87")]),t("br"),t("span",{staticClass:"line-number"},[s._v("88")]),t("br"),t("span",{staticClass:"line-number"},[s._v("89")]),t("br"),t("span",{staticClass:"line-number"},[s._v("90")]),t("br"),t("span",{staticClass:"line-number"},[s._v("91")]),t("br"),t("span",{staticClass:"line-number"},[s._v("92")]),t("br"),t("span",{staticClass:"line-number"},[s._v("93")]),t("br"),t("span",{staticClass:"line-number"},[s._v("94")]),t("br"),t("span",{staticClass:"line-number"},[s._v("95")]),t("br"),t("span",{staticClass:"line-number"},[s._v("96")]),t("br"),t("span",{staticClass:"line-number"},[s._v("97")]),t("br"),t("span",{staticClass:"line-number"},[s._v("98")]),t("br"),t("span",{staticClass:"line-number"},[s._v("99")]),t("br"),t("span",{staticClass:"line-number"},[s._v("100")]),t("br"),t("span",{staticClass:"line-number"},[s._v("101")]),t("br"),t("span",{staticClass:"line-number"},[s._v("102")]),t("br"),t("span",{staticClass:"line-number"},[s._v("103")]),t("br"),t("span",{staticClass:"line-number"},[s._v("104")]),t("br"),t("span",{staticClass:"line-number"},[s._v("105")]),t("br"),t("span",{staticClass:"line-number"},[s._v("106")]),t("br"),t("span",{staticClass:"line-number"},[s._v("107")]),t("br"),t("span",{staticClass:"line-number"},[s._v("108")]),t("br"),t("span",{staticClass:"line-number"},[s._v("109")]),t("br"),t("span",{staticClass:"line-number"},[s._v("110")]),t("br"),t("span",{staticClass:"line-number"},[s._v("111")]),t("br"),t("span",{staticClass:"line-number"},[s._v("112")]),t("br"),t("span",{staticClass:"line-number"},[s._v("113")]),t("br"),t("span",{staticClass:"line-number"},[s._v("114")]),t("br"),t("span",{staticClass:"line-number"},[s._v("115")]),t("br"),t("span",{staticClass:"line-number"},[s._v("116")]),t("br"),t("span",{staticClass:"line-number"},[s._v("117")]),t("br"),t("span",{staticClass:"line-number"},[s._v("118")]),t("br"),t("span",{staticClass:"line-number"},[s._v("119")]),t("br"),t("span",{staticClass:"line-number"},[s._v("120")]),t("br"),t("span",{staticClass:"line-number"},[s._v("121")]),t("br"),t("span",{staticClass:"line-number"},[s._v("122")]),t("br"),t("span",{staticClass:"line-number"},[s._v("123")]),t("br"),t("span",{staticClass:"line-number"},[s._v("124")]),t("br"),t("span",{staticClass:"line-number"},[s._v("125")]),t("br"),t("span",{staticClass:"line-number"},[s._v("126")]),t("br"),t("span",{staticClass:"line-number"},[s._v("127")]),t("br"),t("span",{staticClass:"line-number"},[s._v("128")]),t("br"),t("span",{staticClass:"line-number"},[s._v("129")]),t("br"),t("span",{staticClass:"line-number"},[s._v("130")]),t("br"),t("span",{staticClass:"line-number"},[s._v("131")]),t("br"),t("span",{staticClass:"line-number"},[s._v("132")]),t("br"),t("span",{staticClass:"line-number"},[s._v("133")]),t("br"),t("span",{staticClass:"line-number"},[s._v("134")]),t("br"),t("span",{staticClass:"line-number"},[s._v("135")]),t("br"),t("span",{staticClass:"line-number"},[s._v("136")]),t("br"),t("span",{staticClass:"line-number"},[s._v("137")]),t("br"),t("span",{staticClass:"line-number"},[s._v("138")]),t("br"),t("span",{staticClass:"line-number"},[s._v("139")]),t("br"),t("span",{staticClass:"line-number"},[s._v("140")]),t("br"),t("span",{staticClass:"line-number"},[s._v("141")]),t("br"),t("span",{staticClass:"line-number"},[s._v("142")]),t("br"),t("span",{staticClass:"line-number"},[s._v("143")]),t("br"),t("span",{staticClass:"line-number"},[s._v("144")]),t("br"),t("span",{staticClass:"line-number"},[s._v("145")]),t("br"),t("span",{staticClass:"line-number"},[s._v("146")]),t("br"),t("span",{staticClass:"line-number"},[s._v("147")]),t("br"),t("span",{staticClass:"line-number"},[s._v("148")]),t("br"),t("span",{staticClass:"line-number"},[s._v("149")]),t("br"),t("span",{staticClass:"line-number"},[s._v("150")]),t("br"),t("span",{staticClass:"line-number"},[s._v("151")]),t("br"),t("span",{staticClass:"line-number"},[s._v("152")]),t("br"),t("span",{staticClass:"line-number"},[s._v("153")]),t("br"),t("span",{staticClass:"line-number"},[s._v("154")]),t("br"),t("span",{staticClass:"line-number"},[s._v("155")]),t("br"),t("span",{staticClass:"line-number"},[s._v("156")]),t("br"),t("span",{staticClass:"line-number"},[s._v("157")]),t("br"),t("span",{staticClass:"line-number"},[s._v("158")]),t("br"),t("span",{staticClass:"line-number"},[s._v("159")]),t("br"),t("span",{staticClass:"line-number"},[s._v("160")]),t("br"),t("span",{staticClass:"line-number"},[s._v("161")]),t("br"),t("span",{staticClass:"line-number"},[s._v("162")]),t("br"),t("span",{staticClass:"line-number"},[s._v("163")]),t("br"),t("span",{staticClass:"line-number"},[s._v("164")]),t("br"),t("span",{staticClass:"line-number"},[s._v("165")]),t("br"),t("span",{staticClass:"line-number"},[s._v("166")]),t("br"),t("span",{staticClass:"line-number"},[s._v("167")]),t("br"),t("span",{staticClass:"line-number"},[s._v("168")]),t("br"),t("span",{staticClass:"line-number"},[s._v("169")]),t("br"),t("span",{staticClass:"line-number"},[s._v("170")]),t("br"),t("span",{staticClass:"line-number"},[s._v("171")]),t("br"),t("span",{staticClass:"line-number"},[s._v("172")]),t("br"),t("span",{staticClass:"line-number"},[s._v("173")]),t("br"),t("span",{staticClass:"line-number"},[s._v("174")]),t("br"),t("span",{staticClass:"line-number"},[s._v("175")]),t("br"),t("span",{staticClass:"line-number"},[s._v("176")]),t("br"),t("span",{staticClass:"line-number"},[s._v("177")]),t("br"),t("span",{staticClass:"line-number"},[s._v("178")]),t("br"),t("span",{staticClass:"line-number"},[s._v("179")]),t("br"),t("span",{staticClass:"line-number"},[s._v("180")]),t("br"),t("span",{staticClass:"line-number"},[s._v("181")]),t("br"),t("span",{staticClass:"line-number"},[s._v("182")]),t("br"),t("span",{staticClass:"line-number"},[s._v("183")]),t("br"),t("span",{staticClass:"line-number"},[s._v("184")]),t("br"),t("span",{staticClass:"line-number"},[s._v("185")]),t("br"),t("span",{staticClass:"line-number"},[s._v("186")]),t("br"),t("span",{staticClass:"line-number"},[s._v("187")]),t("br"),t("span",{staticClass:"line-number"},[s._v("188")]),t("br"),t("span",{staticClass:"line-number"},[s._v("189")]),t("br"),t("span",{staticClass:"line-number"},[s._v("190")]),t("br"),t("span",{staticClass:"line-number"},[s._v("191")]),t("br"),t("span",{staticClass:"line-number"},[s._v("192")]),t("br"),t("span",{staticClass:"line-number"},[s._v("193")]),t("br"),t("span",{staticClass:"line-number"},[s._v("194")]),t("br"),t("span",{staticClass:"line-number"},[s._v("195")]),t("br")])]),t("p",[s._v("上述的 SQL 语句中"),t("strong",[s._v("全表扫描的成本低于索引扫描, 所以最终选择全表扫描.")])]),s._v(" "),t("p",[s._v("trace 工具会"),t("strong",[s._v("分析并预估")]),s._v("走索引和全表扫描的"),t("strong",[s._v("成本")]),s._v(", 进行对比, 然后进行选择执行.")]),s._v(" "),t("h3",{attrs:{id:"数据类型优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据类型优化"}},[s._v("#")]),s._v(" 数据类型优化")]),s._v(" "),t("h4",{attrs:{id:"数据类型优化原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据类型优化原则"}},[s._v("#")]),s._v(" 数据类型优化原则")]),s._v(" "),t("p",[s._v("不管存储哪种类型的数据, 下面几个简单的原则都有助于做出更好的选择.")]),s._v(" "),t("blockquote",[t("p",[s._v("更小的通常更好")])]),s._v(" "),t("p",[s._v("一般情况下, 应该尽量使用可以正确存储数据的最小数据类型. 更小的数据类型通常更快, 因为它们占用更少的磁盘, 内存和 CPU 缓存, 并且处理时需要的 CPU 周期也更少.")]),s._v(" "),t("p",[s._v("如果整形数据没有负数, 如 ID 号, 建议指定为 UNSIGNED 无符号类型, 容量可以扩大一倍.")]),s._v(" "),t("p",[s._v("建议使用 TINYINT 代替 ENUM, BITENUM, SET.")]),s._v(" "),t("blockquote",[t("p",[s._v("简单就好")])]),s._v(" "),t("p",[s._v("简单数据类型的操作通常需要更少的 CPU 周期. 例如, 整型比字符操作代价更低, 因为字符集和校对规则(排序规则)使字符比较比整型比较更复杂.")]),s._v(" "),t("blockquote",[t("p",[s._v("尽量避免NULL")])]),s._v(" "),t("p",[s._v("通常情况下最好指定列为 "),t("strong",[s._v("NOT NULL")]),s._v(", 除非真的需要存储 NULL 值. 如果查询中包含可为 NULL 的列, 对 MySQL 来说更难优化, 因为可为 NULL 的列使得索引, 索引统计和值比较都更复杂.")]),s._v(" "),t("h4",{attrs:{id:"char与varchar"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#char与varchar"}},[s._v("#")]),s._v(" CHAR与VARCHAR")]),s._v(" "),t("p",[s._v("VARCHAR 类型用于存储可变长字符串, 是最常见的字符串数据类型. 它比定长类型更节省空间, 因为它仅使用必要的空间(例如, 越短的字符串使用越少的空间). VARCHAR 需要使用 1 或 2 个额外字节记录字符串的长度: 如果列的最大长度小于等于 255 字节, 则只使用 1 个字节表示, 否则使用 2 个字节.")]),s._v(" "),t("p",[s._v("下面这些情况下使用 VARCHAR 是合适的: "),t("strong",[s._v("字符串列的最大长度比平均长度大很多")]),s._v("; 列的更新很少, 所以碎片不是问题; 使用了像 UTF-8 这样复杂的字符集, 每个字符都使用不同的字节数进行存储.")]),s._v(" "),t("p",[s._v("CHAR 适合存储很短的字符串, 或者所有值都接近同一个长度. 例如, CHAR 非常适合存储密码的 MD5 值, 因为这是一个定长的值. 对于经常变更的数据, CHAR 也比 VARCHAR 更好, 因为定长的 CHAR 类型不容易产生碎片.")]),s._v(" "),t("h4",{attrs:{id:"blob与text"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#blob与text"}},[s._v("#")]),s._v(" BLOB与TEXT")]),s._v(" "),t("p",[s._v("BLOB 和 TEXT 都是为存储很大的数据而设计的字符串数据类型, 分别采用二进制和字符方式存储.")]),s._v(" "),t("p",[s._v("MySQL 不能将 BLOB 和 TEXT 列全部长度的字符串进行索引, 也不能使用这些索引消除排序.")]),s._v(" "),t("p",[s._v("尽量少用 BLOB 和 TEXT, 如果实在要用可以考虑将 BLOB 和 TEXT 字段单独存一张表, 用 id 关联, 或者把大量数据放到 OSS 中.")]),s._v(" "),t("p",[s._v("BLOB 和 TEXT 都不能有默认值.")]),s._v(" "),t("h3",{attrs:{id:"查询性能优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查询性能优化"}},[s._v("#")]),s._v(" 查询性能优化")]),s._v(" "),t("h4",{attrs:{id:"查询优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查询优化"}},[s._v("#")]),s._v(" 查询优化")]),s._v(" "),t("h5",{attrs:{id:"_1-优化数据访问"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-优化数据访问"}},[s._v("#")]),s._v(" 1.优化数据访问")]),s._v(" "),t("h6",{attrs:{id:"_1-减少请求数据量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-减少请求数据量"}},[s._v("#")]),s._v(" (1)减少请求数据量")]),s._v(" "),t("p",[s._v("查询性能低下最基本的原因是访问的数据太多. 确认应用程序是否在检索大量超过需要的数据. 这通常意味着访问了太多的行, 但有时候也可能是访问了太多的列.")]),s._v(" "),t("ul",[t("li",[s._v("只返回"),t("strong",[s._v("必要的列")]),s._v(": 最好"),t("strong",[s._v('不要使用 "SELECT *" 语句, 而只查询需要的字段, 使用')]),s._v("覆盖索引.")]),s._v(" "),t("li",[s._v("只返回"),t("strong",[s._v("必要的行")]),s._v(": 使用 "),t("strong",[s._v("LIMIT")]),s._v(" 限制返回的数据量. 可以自己封装一层默认加上 LIMIT 参数.")]),s._v(" "),t("li",[t("strong",[s._v("缓存")]),s._v("重复查询的数据: 使用"),t("strong",[s._v("缓存")]),s._v("可以避免在数据库中进行查询, 缓存带来的查询性能提升将会非常明显.")]),s._v(" "),t("li",[t("strong",[s._v("禁止不带任何限制")]),s._v("数据范围条件的查询语句. 比如: 当用户在查询订单历史的时候, 可以控制在一个月的范围内.")])]),s._v(" "),t("h6",{attrs:{id:"_2-减少服务器端扫描行数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-减少服务器端扫描行数"}},[s._v("#")]),s._v(" (2)减少服务器端扫描行数")]),s._v(" "),t("p",[s._v("最有效的方式是"),t("strong",[s._v("使用索引来覆盖查询")]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"_2-重构查询方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-重构查询方式"}},[s._v("#")]),s._v(" 2.重构查询方式")]),s._v(" "),t("h6",{attrs:{id:"_1-切分大查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-切分大查询"}},[s._v("#")]),s._v(" (1)切分大查询")]),s._v(" "),t("p",[s._v("一个"),t("strong",[s._v("大查询")]),s._v("如果"),t("strong",[s._v("一次性执行")]),s._v("的话, 可能一次"),t("strong",[s._v("锁住")]),s._v("很多数据, 导致占满整个事务日志, 耗尽系统资源, 阻塞很多小但重要的查询.")]),s._v(" "),t("p",[s._v('有时候对于一个大查询可以"分而治之", 将大查询切分成小查询, 每个查询功能完全一样, 只完成一小部分, 每次只返回一小部分查询结果.')]),s._v(" "),t("p",[s._v("比如删除数据.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DELETE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" messages "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" createTime "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" DATE_SUB"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("NOW")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INTERVAL")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("MONTH")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("切分一下:")]),s._v(" "),t("div",{staticClass:"language-python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[s._v("rows_affected "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\ndo "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    rows_affected "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" do_query"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"DELETE FROM messages WHERE create  < DATE_SUB(NOW(), INTERVAL 3 MONTH) LIMIT 10000"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" rows_affected "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h6",{attrs:{id:"_2-分解联结查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-分解联结查询"}},[s._v("#")]),s._v(" (2)分解联结查询")]),s._v(" "),t("p",[s._v("将一个"),t("strong",[s._v("联结")]),s._v("查询分解成对每一个表进行"),t("strong",[s._v("一次单表查询")]),s._v(", 然后在"),t("strong",[s._v("应用程序中进行关联")]),s._v(", 这样做的好处有: (1) 减少锁竞争; (2) 在"),t("strong",[s._v("应用层进行联结")]),s._v(", 可以更容易对数据库进行拆分, 从而更容易做到高性能和可伸缩(阿里推荐).")]),s._v(" "),t("h5",{attrs:{id:"_3-范围查询优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-范围查询优化"}},[s._v("#")]),s._v(" 3.范围查询优化")]),s._v(" "),t("p",[s._v("MySQL 内部优化器会"),t("strong",[s._v("根据检索比例, 表大小等多个因素整体评估是否使用索引")]),s._v(". 如果使用范围查询, 可能会因为"),t("strong",[s._v("范围问题")]),s._v("使得优化器觉得全表扫描的效率还高, 进而使得索引失效. 具体的情况还得靠优化器根据实际场景自己分析.")]),s._v(" "),t("p",[t("strong",[s._v("例 1")]),s._v(": 给年龄添加单值索引.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ALTER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("employees"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ADD")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INDEX")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("idx_age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("下面的"),t("strong",[s._v("范围查询")]),s._v(", 实际上"),t("strong",[s._v("没有走索引")]),s._v(".")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("本例可能是由于单次数据量"),t("strong",[s._v("查询过大")]),s._v("导致优化器最终选择不走索引.")]),s._v(" "),t("p",[s._v("优化方法: "),t("strong",[s._v("可以将大的范围拆分成多个小范围")]),s._v(". 比如改成下面的两个范围查询, 可能就会走索引.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1001")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[t("strong",[s._v("例 2")]),s._v(": 看下面的 SQL 语句执行后是没走索引的.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("如果用 name 索引需要遍历 name 字段"),t("strong",[s._v("联合索引树")]),s._v(", 然后还需要根据"),t("strong",[s._v("遍历出来的主键值")]),s._v("去主键索引树里再去查出最终数据, 相当于"),t("strong",[s._v("遍历了两棵索引树")]),s._v("(一颗联合索引树, 一颗主键聚簇索引树), 成本比全表扫描还高, 所以就不走索引了.")]),s._v(" "),t("p",[s._v("可以用"),t("strong",[s._v("覆盖索引")]),s._v("优化, 这样"),t("strong",[s._v("只需要遍历 name 字段")]),s._v("的"),t("strong",[s._v("联合索引树")]),s._v("就能拿到所有结果, 如下:")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" age "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("再看下面的 SQL. 这一条其实跟上面的类似, 只是 name 的范围不同, 这里 MySQL 发现这里数据量较少, 于是"),t("strong",[s._v("走了索引")]),s._v(". 这里就是引擎执行的"),t("strong",[s._v("过程中")]),s._v("根据数据情况进行优化.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'zzz'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h5",{attrs:{id:"_4-排序优化-order-by"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-排序优化-order-by"}},[s._v("#")]),s._v(" 4.排序优化(ORDER BY)")]),s._v(" "),t("h6",{attrs:{id:"_1-概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述"}},[s._v("#")]),s._v(" (1)概述")]),s._v(" "),t("p",[s._v("MySQL 支持两种排序方式: "),t("strong",[s._v("index 和 filesort")]),s._v(". Using index 指 MySQL "),t("strong",[s._v("扫描索引")]),s._v("本身完成排序, 效率高; "),t("strong",[s._v("filesort 即加载数据")]),s._v("之后再进行"),t("strong",[s._v("重新排序")]),s._v(", 效率低.")]),s._v(" "),t("p",[s._v("ORDER BY 满足两种情况会使用 "),t("strong",[s._v("Using index")]),s._v(".")]),s._v(" "),t("ul",[t("li",[s._v("ORDER BY 语句使用"),t("strong",[s._v("索引最左前列")]),s._v(".")]),s._v(" "),t("li",[s._v("使用 WHERE 子句与 ORDER BY子句"),t("strong",[s._v("条件列组合满足索引最左前列")]),s._v(".")])]),s._v(" "),t("p",[s._v("所以尽量在"),t("strong",[s._v("索引列上完成排序")]),s._v(", 遵循"),t("strong",[s._v("最左前缀法则")]),s._v(". 如果 ORDER BY 的"),t("strong",[s._v("条件不在索引列上")]),s._v(", 就会产生 "),t("strong",[s._v("Using filesort")]),s._v(". 所以能用覆盖索引尽量用覆盖索引.")]),s._v(" "),t("p",[s._v("GROUP BY 与 ORDER BY 很类似, 其实质是"),t("strong",[s._v("先排序后分组")]),s._v(", 遵照索引创建顺序的"),t("strong",[s._v("最左前缀法则")]),s._v(". 对于 GROUP BY 的优化如果不需要排序的可以"),t("strong",[s._v("加上 OEDER BY NULL 禁止排序")]),s._v(". 注意, "),t("strong",[s._v("WHERE 筛选先于 HAVING")]),s._v(", 能写在 WHERE 中的限定条件就不要去用 HAVING 限定.")]),s._v(" "),t("h6",{attrs:{id:"_2-文件排序-filesort"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-文件排序-filesort"}},[s._v("#")]),s._v(" (2)文件排序(filesort)")]),s._v(" "),t("p",[s._v("当"),t("strong",[s._v("不能使用索引生成排序结果")]),s._v("的时候, MySQL 需要自己进行排序, 如果数据量小则在内存中进行, 如果数据量大则需要使用磁盘排序, 不过 MySQL 将这个过程统一称为"),t("strong",[s._v("文件排序(filesort)")]),s._v(", 即使完全是内存排序不需要磁盘文件时也叫文件排序.")]),s._v(" "),t("p",[s._v("当查询数据后, 如果需要排序的"),t("strong",[s._v('数据量小于 "排序缓冲区(Sort Buffer, 这是一块内存区域)"')]),s._v(", MySQL 将使用此"),t("strong",[s._v("内存")]),s._v('进行 "快速排序" 操作. 如果内存不够排序, 那么 MySQL 会先将数据分块, 对每个独立的块使用 "快速排序" 进行排序, 并将各个块的排序结果存放在磁盘上, 然后将各个排好序的块进行合并(merge), 最后返回排序结果.')]),s._v(" "),t("p",[s._v("filesort 排序算法有:")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("双路排序")]),s._v("(又叫回表排序): 首先根据相应的条件"),t("strong",[s._v("仅取出需要排序的字段和数据行 ID")]),s._v(", 然后在 "),t("strong",[s._v("sort buffer")]),s._v(" 中进行排序, 排序完后需要"),t("strong",[s._v("再次回表查询得到其它需要的字段")]),s._v(". 由于只把一部分数据加载到内存排序, 所以占用的内存小一点, 但是排序完成需要回表查询.")]),s._v(" "),t("li",[t("strong",[s._v("单路排序")]),s._v(": 一次性取出满足条件行的"),t("strong",[s._v("所有字段")]),s._v(", 然后在 "),t("strong",[s._v("sort buffer(排序缓冲区)")]),s._v(" 中进行排序. 由于把全部需要的数据都加载到了内存, 所以占用内存较大, 但是排序完成后不需要进行回表了.")])]),s._v(" "),t("p",[s._v("MySQL 通过比较系统变量 "),t("strong",[s._v("max_length_for_sort_data ​")]),s._v("(默认 1024 字节) 的大小和需要查询的字段总大小来判断使用哪种排序模式.")]),s._v(" "),t("ul",[t("li",[s._v("如果 max_length_for_sort_data 比查询字段的总长度"),t("strong",[s._v("小")]),s._v(", 使用"),t("strong",[s._v("双路排序")]),s._v("模式.")]),s._v(" "),t("li",[s._v("如果 max_length_for_sort_data 比查询字段的总长度"),t("strong",[s._v("大")]),s._v(", 使用"),t("strong",[s._v("单路排序")]),s._v("模式.")])]),s._v(" "),t("p",[s._v("其实就是如果需要回表的数据行太多或者字段较多, 双路排序的内存开销已经接近单路排序了, 这时候还不如直接用单路排序减少一次回表查询.")]),s._v(" "),t("p",[s._v("如果"),t("strong",[s._v("使用了 filesort")]),s._v(", 那么 "),t("strong",[s._v("trace")]),s._v(" 工具的分析结果中会有 "),t("strong",[s._v("filesort_summary")]),s._v(" 的信息. 双路排序的 sort_mode 信息里显示 <sort_key, rowid>. 单路排序时 sort_mode 信息里显示 <sort_key, additional_fields> 或 <sort_key, packed_additional_fields>.")]),s._v(" "),t("div",{staticClass:"language-json line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"filesort_summary"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" \n    "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"rows"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("          "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 预计扫描行数")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"examined_rows"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 参数排序的行")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"number_of_tmp_files"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" \n    "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"sort_buffer_size"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("262056")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 排序缓存的大小")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"sort_mode"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<sort_key, packed_additional_fields>"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 排序方式, 这里用的单路排序")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("如果内存不够用时, 可能使用磁盘排序. number_of_tmp_files 表示使用的"),t("strong",[s._v("临时文件")]),s._v("数, 如果值为 0 代表全部使用 "),t("strong",[s._v("sort_buffer 进行内存排序")]),s._v(", 否则使用磁盘文件排序.")]),s._v(" "),t("p",[s._v("查询例子如下:")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Tom'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" position"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("双路排序")]),s._v("过程:")]),s._v(" "),t("ul",[t("li",[s._v("从索引 name 找到第一个满足 name = 'Tom' 的主键 "),t("strong",[s._v("id.")])]),s._v(" "),t("li",[s._v("根据主键 id 取出排序字段 position 和主键 id 这"),t("strong",[s._v("两个字段")]),s._v("放到 sort buffer 中.")]),s._v(" "),t("li",[s._v("从索引 name 取下一个满足 name = 'Tom' 记录的主键 id.")]),s._v(" "),t("li",[s._v("重复上述步骤直到不满足 name = 'Tom'.")]),s._v(" "),t("li",[s._v("对 "),t("strong",[s._v("sort_buffer 中的字段 position 和主键 id 按照字段 position 进行排序")]),s._v(".")]),s._v(" "),t("li",[s._v("遍历排序好的 id 和字段 position, 按照 id 的值"),t("strong",[s._v("回到原表")]),s._v("中取出所有字段的值返回给客户端.")])]),s._v(" "),t("p",[t("strong",[s._v("单路排序")]),s._v("过程:")]),s._v(" "),t("ul",[t("li",[s._v("从索引 name 找到第一个满足 name = 'Tom' 条件的主键 id.")]),s._v(" "),t("li",[s._v("根据主键 id 取出"),t("strong",[s._v("整行")]),s._v(", 取出所有字段的值, 存入 "),t("strong",[s._v("sort_buffer")]),s._v(" 中.")]),s._v(" "),t("li",[s._v("从索引 name 找到下一个满足 name = 'Tom' 条件的主键 id.")]),s._v(" "),t("li",[s._v("重复上述步骤直到不满足 name = 'Tom'.")]),s._v(" "),t("li",[s._v("对 sort_buffer 中的数据按照字段 position 进行排序.")]),s._v(" "),t("li",[s._v("返回结果给客户端.")])]),s._v(" "),t("p",[s._v("对比两个排序模式, "),t("strong",[s._v("单路排序")]),s._v("会把所有需要查询的字段"),t("strong",[s._v("都放到 sort buffer")]),s._v(" 中, 而双路排序只会把"),t("strong",[s._v("主键和需要排序的字段")]),s._v("放到 sort buffer 中进行排序, 然后再通过主键"),t("strong",[s._v("回到原表")]),s._v("查询需要的字段.")]),s._v(" "),t("p",[s._v("如果 MySQL "),t("strong",[s._v("排序内存比较小")]),s._v("并且没有条件继续增加了, 可以适当把 "),t("strong",[s._v("max_length_for_sort_data")]),s._v(" 配置小点, 让优化器选择使用双路排序算法, 可以在 sort_buffer 中一次排序更多的行, 只是需要"),t("strong",[s._v("再根据主键回到原表取数据")]),s._v(".")]),s._v(" "),t("p",[s._v("如果 MySQL "),t("strong",[s._v("排序内存")]),s._v("有条件可以配置比较大, 可以适当增大 "),t("strong",[s._v("max_length_for_sort_data")]),s._v(" 的值, 让优化器优先选择全字段排序(单路排序), 把需要的字段放到 sort_buffer 中, 这样排序后就能直接从"),t("strong",[s._v("内存")]),s._v("里返回查询结果.")]),s._v(" "),t("p",[s._v("所以 MySQL 通过 "),t("strong",[s._v("max_length_for_sort_data")]),s._v(" 这个参数来控制排序, 在不同场景使用不同的排序模式, 从而提升排序效率.")]),s._v(" "),t("p",[s._v("注意, 如果"),t("strong",[s._v("全部使用 sort_buffer 内存排序一般情况下效率会高于磁盘文件排序")]),s._v(", 但不能因为这个就随便增大 sort_buffer(默认 1M), MySQL 很多参数设置都是做过优化的, 不要轻易调整.")]),s._v(" "),t("h5",{attrs:{id:"_5-分页查询优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-分页查询优化"}},[s._v("#")]),s._v(" 5.分页查询优化")]),s._v(" "),t("p",[s._v("一个常见的分页查询:")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LIMIT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("表示从表 employees 中取出"),t("strong",[s._v("从 10001 行开始的 10 行记录")]),s._v(". 如果"),t("strong",[s._v("没有索引")]),s._v(", 这里看似只查询了 10 条记录, 实际这条 SQL 是"),t("strong",[s._v("先读取 10010 条记录")]),s._v(", 然后"),t("strong",[s._v("抛弃")]),s._v("前 10000 条记录, 然后读到后面 10 条想要的数据. 因此要查询一张大表比较靠后的数据, 执行效率是非常低的.")]),s._v(" "),t("p",[s._v("优化此类分页查询的一个"),t("strong",[s._v("最简单的办法就是尽可能地使用索引覆盖扫描")]),s._v(", 而不是查询所有的列. 然后根据需要做一次"),t("strong",[s._v("关联操作")]),s._v("再返回所需的列. 比如使用主键来限定范围 (WHERE id > 10000 LIMIT 10) 进行查找.")]),s._v(" "),t("p",[s._v("看一个根据"),t("strong",[s._v("非主键字段排序")]),s._v("的分页查询, SQL 如下:")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" NAME "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LIMIT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("90000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("发现"),t("strong",[s._v("并没有使用 name 字段的索引")]),s._v("(key 字段对应的值为 null), 具体原因是"),t("strong",[s._v("扫描整个索引并查找到没索引的行("),t("strong",[s._v("​"),t("strong",[t("strong",[s._v("可能要遍历多个索引树)的成本比扫描全表的成本更高, 所以优化器")])]),s._v("​")]),s._v("放弃使用索引")]),s._v(".")]),s._v(" "),t("p",[s._v("这里优化关键是让"),t("strong",[s._v("排序时返回的字段尽可能少")]),s._v(", 所以可以"),t("strong",[s._v("让排序和分页操作先查出主键")]),s._v(", 然后根据"),t("strong",[s._v("主键")]),s._v("查到对应的记录, SQL 改写如下:")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees e "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INNER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("JOIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" id "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" NAME "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LIMIT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("90000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" ed "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" ed"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("观察"),t("strong",[s._v("执行计划")]),s._v("之后可以发现, 原 SQL 使用的是 "),t("strong",[s._v("filesort 排序")]),s._v(", 而优化后的 SQL 使用的是"),t("strong",[s._v("索引排序")]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"_6-join联结查询优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-join联结查询优化"}},[s._v("#")]),s._v(" 6.JOIN联结查询优化")]),s._v(" "),t("p",[t("strong",[s._v("少用 JOIN, JOIN 操作一般都是放到业务层")]),s._v("进行.")]),s._v(" "),t("p",[s._v("建个表:")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("t1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("NOT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AUTO_INCREMENT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DEFAULT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DEFAULT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PRIMARY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("KEY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("KEY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("idx_a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENGINE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("InnoDB")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DEFAULT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CHARSET")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" utf8"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 创建一个与 t1 表结构一样的表 t2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("create")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" t2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" t1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 然后在 t1 表插入 10000 行数据, 在 t2 表插入 100 条数据")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[s._v("MySQL 的"),t("strong",[s._v("表关联")]),s._v("常见有两种算法:")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("Nested-Loop Join")]),s._v(" 算法.")]),s._v(" "),t("li",[t("strong",[s._v("Block Nested-Loop Join")]),s._v(" 算法.")])]),s._v(" "),t("h6",{attrs:{id:"_1-嵌套循环连接-nlj-算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-嵌套循环连接-nlj-算法"}},[s._v("#")]),s._v(" (1)嵌套循环连接(NLJ)算法")]),s._v(" "),t("p",[s._v("嵌套循环连接 (NLJ) 算法即"),t("strong",[s._v("一次一行循环")]),s._v("地从第一张表(称为驱动表)中读取行, 在这行数据中取到关联字段, 根据关联字段在另一张表(被驱动表)里取出满足条件的行, 然后取出两张表的结果合集.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" t1 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INNER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("JOIN")]),s._v(" t2 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" t1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" t2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("驱动表是 t2")]),s._v(", 被驱动表是 t1. "),t("strong",[s._v("先执行的就是驱动表")]),s._v("(执行计划结果的 id 如果一样则按从上到下顺序执行 SQL); 优化器"),t("strong",[s._v("一般会优先选择小表做驱动表")]),s._v(". 所以使用 INNER JOIN 时, 排在前面的表并不一定就是驱动表. 一般 JOIN 语句中, 如果执行计划 Extra 中未出现 Using join buffer 则表示使用的 JOIN 算法是 NLJ.")]),s._v(" "),t("p",[s._v("上面 SQL 的大致流程如下:")]),s._v(" "),t("ul",[t("li",[s._v("从表 t2 中读取一行数据;")]),s._v(" "),t("li",[s._v("从第 1 步的数据中, 取出关联字段 a, 到表 t1 中查找;")]),s._v(" "),t("li",[s._v("取出表 t1 中满足条件的行, 跟 t2 中获取到的结果合并, 作为结果返回给客户端;")]),s._v(" "),t("li",[s._v("重复上面 3 步.")])]),s._v(" "),t("p",[s._v("整个过程会读取 t2 表的"),t("strong",[s._v("所有数据")]),s._v("(扫描 100 行), 然后遍历这每行数据中"),t("strong",[s._v("字段 a 的值")]),s._v(", 根据 t2 表中 a 的值索引扫描 t1 表中的对应行(扫描 100 次 t1 表的索引, 1 次扫描可以认为最终只扫描 t1 表一行完整数据, 也就是总共 t1 表也扫描了 100 行). 因此整个过程扫描了 200 行. 如果被驱动表的关联字段没索引, 使用 NLJ 算法"),t("strong",[s._v("性能会比较低")]),s._v(" (下面有详细解释), MySQL 会选择 Block Nested-Loop Join 算法.")]),s._v(" "),t("h6",{attrs:{id:"_2-基于块的嵌套循环连接-bnl-算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-基于块的嵌套循环连接-bnl-算法"}},[s._v("#")]),s._v(" (2)基于块的嵌套循环连接(BNL)算法")]),s._v(" "),t("p",[s._v("把驱动表的数据读入到 "),t("strong",[s._v("join_buffer")]),s._v(" 中, 然后"),t("strong",[s._v("扫描被驱动表")]),s._v(", 把被驱动表每一行取出来跟 join_buffer 中的数据做对比.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" t1 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INNER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("JOIN")]),s._v(" t2 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" t1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" t2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("EXPLAIN 结果的 Extra 字段中的 "),t("strong",[s._v("Using join buffer(Block Nested Loop)")]),s._v(" 说明该关联查询使用的是 "),t("strong",[s._v("BNL 算法")]),s._v(".")]),s._v(" "),t("p",[s._v("上面 SQL 的大致流程如下:")]),s._v(" "),t("ul",[t("li",[s._v("把 t2 的所有数据放入到 join_buffer 中")]),s._v(" "),t("li",[s._v("把表 t1 中每一行取出来, 跟 join_buffer 中的数据做对比")]),s._v(" "),t("li",[s._v("返回满足 join 条件的数据")])]),s._v(" "),t("p",[s._v("整个过程对表 t1 和 t2 都做了"),t("strong",[s._v("一次全表扫描")]),s._v(", 因此扫描的总行数为10000(表 t1 的数据总量) + 100(表 t2 的数据总量) = 10100. 并且 join_buffer 里的数据是"),t("strong",[s._v("无序")]),s._v("的, 因此对表 t1 中的每一行, 都要做 "),t("strong",[s._v("100 次判断")]),s._v(", 所以内存中的判断次数是 100 * 10000= "),t("strong",[s._v("100 万次")]),s._v(".")]),s._v(" "),t("p",[s._v("被驱动表的关联字段"),t("strong",[s._v("没索引")]),s._v("为什么要选择"),t("strong",[s._v("使用 BNL 算法")]),s._v("而不使用 Nested-Loop Join 呢?  如果上面第二条 SQL 使用 Nested-Loop Join, 那么扫描行数为 100 * 10000 = 100万次, 这个是"),t("strong",[s._v("磁盘扫描")]),s._v(". 很显然, 用 BNL 磁盘扫描次数少很多, 相比于磁盘扫描, BNL 的"),t("strong",[s._v("内存计算")]),s._v("会快得多. 因此 MySQL 对于被驱动表的"),t("strong",[s._v("关联字段没索引的关联查询, 一般都会使用 BNL 算法. 如果有索引一般选择 NLJ 算法, 有索引的情况下 NLJ 算法比 BNL算法性能更高.")])]),s._v(" "),t("h6",{attrs:{id:"_3-联结查询优化建议"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-联结查询优化建议"}},[s._v("#")]),s._v(" (3)联结查询优化建议")]),s._v(" "),t("p",[s._v("对关联字段加"),t("strong",[s._v("索引")]),s._v(", 然关联操作尽量走索引, 让 MySQL 做 JOIN 操作时尽量选择 "),t("strong",[s._v("NLJ 算法")]),s._v(". 驱动表因为需要全部查询出来, 所以过滤的条件也尽量要走索引, 避免全表扫描, 总之能走索引的过滤条件尽量都走索引.")]),s._v(" "),t("p",[s._v("让"),t("strong",[s._v("小表驱动大表")]),s._v(", 写多表联结 SQL 时如果明确知道哪张表是小表可以用 "),t("strong",[s._v("straight_join")]),s._v(" 写法固定连接驱动方式, 省去 MySQL 优化器自己判断的时间. SRTAIGHT_JOIN 解释: SRTAIGHT_JOIN 功能同 JOIN 类似, 但"),t("strong",[s._v("能让左边的表来驱动右边的表")]),s._v(", 能改表优化器对于联表查询的执行顺序. 比如: 代表制定 MySQL 选 t2 表作为驱动表. "),t("strong",[s._v("小表的判断方式")]),s._v(': 在决定哪个表做驱动表的时候, 应该是两个表按照各自的条件过滤, 过滤完成之后, 计算参与 JOIN 的各个字段的总数据量, 数据量小的那个表, 就是 "小表", 应该作为驱动表.')]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" t2 SRTAIGHT_JOIN t1 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" t2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" t1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h5",{attrs:{id:"_7-count-查询优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-count-查询优化"}},[s._v("#")]),s._v(" 7.count(*)查询优化")]),s._v(" "),t("p",[s._v("对于下面的语句.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("四个 SQL 的"),t("strong",[s._v("执行计划一样")]),s._v(", 说明这四个 SQL 执行效率应该"),t("strong",[s._v("差不多")]),s._v(", 区别在于根据某个字段 count "),t("strong",[s._v("会不会统计字段为 NULL 值的数据行")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("常见优化方法:")])]),s._v(" "),t("ul",[t("li",[s._v("查询 MySQL "),t("strong",[s._v("自己维护的总行数")]),s._v(". 对于 MyISAM 存储引擎的表做不带 WHERE 条件的 count 查询性能很高, 因为 MyISAM 存储引擎的表的"),t("strong",[s._v("总行数")]),s._v("会被 MySQL 存储在磁盘上, 查询不需要计算. 对于 InnoDB 存储引擎的表 MySQL 不会存储表的总记录行数(因为有 MVCC 机制), 查询 count 需要"),t("strong",[s._v("实时计算")]),s._v(".")]),s._v(" "),t("li",[s._v("将"),t("strong",[s._v("总数")]),s._v("维护到 "),t("strong",[s._v("Redis 里")]),s._v(". 插入或删除表数据行的时候同时维护 Redis 里的表总行数 key 的计数值(用 INCR 或 DECR 命令). 但这可能存在数据不一致.")])]),s._v(" "),t("h5",{attrs:{id:"_8-group-by优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-group-by优化"}},[s._v("#")]),s._v(" 8.GROUP BY优化")]),s._v(" "),t("p",[s._v("在MySQL中, 当无法使用索引的时候, GROUP BY使用两种策略来完成: 使用临时表或者文件排序来做分组. 为了避免文件排序, 可以使用索引来优化, 这也是最有效的优化办法.")]),s._v(" "),t("h4",{attrs:{id:"分库分表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分库分表"}},[s._v("#")]),s._v(" 分库分表")]),s._v(" "),t("p",[s._v("当 MySQL "),t("strong",[s._v("单表记录数过大")]),s._v("时, 数据库的性能会明显下降, 可以进行分库分表操作. 分表可以进行水平切分与垂直切分.")]),s._v(" "),t("h5",{attrs:{id:"_1-垂直切分"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-垂直切分"}},[s._v("#")]),s._v(" 1.垂直切分")]),s._v(" "),t("p",[t("strong",[s._v("根据数据表的相关性进行拆分")]),s._v(".")]),s._v(" "),t("p",[s._v("例如, 用户表中既有用户登录信息又有用户基本信息, 可以将用户不同信息拆分成两个单独的表, 甚至放到单独的库做分库. "),t("strong",[s._v("简单来说垂直拆分是指数据表列的拆分, 把一张列比较多的表拆分为多张表")]),s._v(". 通常是按照列的"),t("strong",[s._v("关系密集程度")]),s._v("进行切分, 也可以利用垂直切分将"),t("strong",[s._v("经常被使用的列和不经常被使用的列")]),s._v("切分到不同的表中.")]),s._v(" "),t("div",[t("img",{staticStyle:{zoom:"36%"},attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20210905104435153.png",alt:"image-20210905104435153"}})]),s._v(" "),t("p",[s._v("如果一个表中某个字段的"),t("strong",[s._v("内容长度过长")]),s._v(", 通常需要单独切分出去, 比如 TEXT 类型的字段, 可以考虑单独切分.")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("垂直拆分的优点")]),s._v(": 可以使得列数据变小, 在查询时减少读取的 Block 数, 减少 I/O 次数. 垂直分区可以简化表的结构, 易于维护.")]),s._v(" "),t("li",[t("strong",[s._v("垂直拆分的缺点")]),s._v(": "),t("strong",[s._v("主键会出现冗余")]),s._v(", 需要管理冗余列, 可能引起 "),t("strong",[s._v("JOIN 操作")]),s._v(", 可以通过在"),t("strong",[s._v("应用层进行 JOIN")]),s._v(" 来解决. 垂直分区会让事务变得更加复杂.")])]),s._v(" "),t("h5",{attrs:{id:"_2-水平切分"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-水平切分"}},[s._v("#")]),s._v(" 2.水平切分")]),s._v(" "),t("p",[s._v("水平切分("),t("strong",[s._v("Sharding")]),s._v(")指保持数据"),t("strong",[s._v("表结构不变")]),s._v(", 通过某种"),t("strong",[s._v("策略存储数据分片")]),s._v(".")]),s._v(" "),t("p",[s._v("水平切分后每一片数据分散到不同的"),t("strong",[s._v("数据表或库")]),s._v("中, 达到分布式的目的. 水平拆分后所有库表的数据加起来就是全部数据. 水平拆分将数据均匀放更多的库里, 用"),t("strong",[s._v("多个库")]),s._v("来扛更高的并发, 还有就是用多个库的存储容量来进行"),t("strong",[s._v("扩容")]),s._v(".")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20210905104714465.png",alt:"image-20210905104714465"}})]),s._v(" "),t("p",[s._v("当一个表的数据不断增多时, Sharding 是必然的选择, 它可以将数据分布到"),t("strong",[s._v("集群")]),s._v("的不同节点上, 从而缓解"),t("strong",[s._v("单个数据库")]),s._v("的压力. 数据量小的时候不用拆分, 因为拆分会带来"),t("strong",[s._v("逻辑, 部署, 运维的各种复杂度")]),s._v(", 一般的数据表在优化得当的情况下支撑千万以下的数据量是没有太大问题的.")]),s._v(" "),t("p",[s._v("需要注意: 分表仅仅是"),t("strong",[s._v("解决了单一表数据过大")]),s._v("的问题, 但由于表的数据还是在"),t("strong",[s._v("同一台机器")]),s._v("上, 这对于提升 MySQL 并发能力没有什么意义, 所以"),t("strong",[s._v("水平拆分通常也要分库")]),s._v(".")]),s._v(" "),t("p",[s._v("一个典型的分表逻辑, 根据主键而分成 64 张表.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[s._v("id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("以下是数据库分片的两种常见实现方案:")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("客户端代理: ​")]),s._v("​"),t("strong",[t("strong",[s._v("分片逻辑在")])]),s._v("​"),t("strong",[s._v("应用端")]),s._v(", 封装在 jar 包中, 通过修改或者封装 JDBC 层来实现. 如 "),t("strong",[s._v("Sharding-JDBC")]),s._v(" , 阿里的 "),t("strong",[s._v("TDDL")]),s._v(" 是两种比较常用的实现.")]),s._v(" "),t("li",[t("strong",[s._v("中间件代理:")]),s._v(" 在应用和数据中间加了一个"),t("strong",[s._v("代理层")]),s._v(", 分片逻辑统一维护在"),t("strong",[s._v("中间件服务")]),s._v("中. 如 "),t("strong",[s._v("Mycat")]),s._v(" , 360 的 "),t("strong",[s._v("Atlas")]),s._v(", 网易的 "),t("strong",[s._v("DDB")]),s._v(" 等都是这种方案的实现.")])]),s._v(" "),t("h5",{attrs:{id:"_3-sharding策略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-sharding策略"}},[s._v("#")]),s._v(" 3.Sharding策略")]),s._v(" "),t("p",[s._v("水平切分可以有不同的策略.")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("哈希取模")]),s._v(": "),t("strong",[s._v("hash(key) % N")]),s._v(".")]),s._v(" "),t("li",[t("strong",[s._v("范围")]),s._v(": 可以是 "),t("strong",[s._v("ID 范围")]),s._v("也可以是"),t("strong",[s._v("时间范围")]),s._v(".")]),s._v(" "),t("li",[t("strong",[s._v("映射表")]),s._v(": 使用"),t("strong",[s._v("单独")]),s._v("的一个数据库来存储映射关系.")]),s._v(" "),t("li",[t("strong",[s._v("根据字段特点分")]),s._v(": 比如主键是"),t("strong",[s._v("身份证号")]),s._v(", 就可以根据身份证号的特点来依据地域或者出生年月分. 但需要考虑数据的分布情况.")])]),s._v(" "),t("p",[s._v("需要注意的是有些策略很容易产生"),t("strong",[s._v("热点问题")]),s._v(", 导致大量的流量全部打到一个表上.")]),s._v(" "),t("h5",{attrs:{id:"_4-sharding的问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-sharding的问题"}},[s._v("#")]),s._v(" 4.Sharding的问题")]),s._v(" "),t("h6",{attrs:{id:"_1-事务问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-事务问题"}},[s._v("#")]),s._v(" (1)事务问题")]),s._v(" "),t("p",[s._v("使用"),t("strong",[s._v("分布式事务")]),s._v("来解决, 比如 "),t("strong",[s._v("XA 接口")]),s._v(".")]),s._v(" "),t("h6",{attrs:{id:"_2-联结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-联结"}},[s._v("#")]),s._v(" (2)联结")]),s._v(" "),t("p",[s._v("可以将原来的连接分解成"),t("strong",[s._v("多个单表查询")]),s._v(", 然后在"),t("strong",[s._v("用户程序")]),s._v("中进行"),t("strong",[s._v("联结")]),s._v(".")]),s._v(" "),t("h6",{attrs:{id:"_3-id唯一性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-id唯一性"}},[s._v("#")]),s._v(" (3)ID唯一性")]),s._v(" "),t("ul",[t("li",[s._v("使用"),t("strong",[s._v("全局唯一 ID(GUID)")]),s._v(".")]),s._v(" "),t("li",[s._v("为每个"),t("strong",[s._v("分片指定一个 ID 范围.")])]),s._v(" "),t("li",[t("strong",[s._v("分布式 ID 生成器")]),s._v("(如 "),t("strong",[s._v("Snowflake")]),s._v(" 算法).")])]),s._v(" "),t("h5",{attrs:{id:"_5-分布式id"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-分布式id"}},[s._v("#")]),s._v(" 5.分布式ID")]),s._v(" "),t("p",[s._v("分成多个表之后, 如果每个表都是从 1 开始自增就不对, 需要一个"),t("strong",[s._v("全局唯一的 id")]),s._v(" 来支持. 生成全局 ID 有下面这几种方式:")]),s._v(" "),t("h6",{attrs:{id:"_1-uuid"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-uuid"}},[s._v("#")]),s._v(" (1)UUID")]),s._v(" "),t("p",[s._v("UUID 是"),t("strong",[s._v("无序")]),s._v("的, 会导致 B+ 树索引在写的时候有过多的随机写操作, 性能下降明显. 此外 UUID 太长了, 占用空间大. 因此 UUID "),t("strong",[s._v("不适合")]),s._v("作为主键.")]),s._v(" "),t("h6",{attrs:{id:"_2-数据库自增id"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-数据库自增id"}},[s._v("#")]),s._v(" (2)数据库自增ID")]),s._v(" "),t("p",[s._v("两个数据库分别"),t("strong",[s._v("设置不同步长")]),s._v(", 生成不重复 ID 的策略. 虽然这样生成的 ID 有序, 但是需要独立部署数据库实例, 且难以进行水平扩展.")]),s._v(" "),t("h6",{attrs:{id:"_3-redis生成id"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-redis生成id"}},[s._v("#")]),s._v(" (3)Redis生成ID")]),s._v(" "),t("p",[s._v("性能比较好, 灵活方便, 不依赖于数据库. 但是引入了新的组件造成系统更加复杂, 可用性降低, 编码更加复杂, 增加了系统成本.")]),s._v(" "),t("h6",{attrs:{id:"_4-leaf"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-leaf"}},[s._v("#")]),s._v(" (4)Leaf")]),s._v(" "),t("p",[s._v("Leaf 是美团开源的分布式 ID 生成器, 能保证全局唯一性, 趋势递增, 单调递增, 信息安全, 里面也提到了几种分布式方案的对比, 但也需要依赖关系数据库, "),t("strong",[s._v("Zookeeper")]),s._v(" 等中间件.")]),s._v(" "),t("p",[s._v("参考美团技术团队的一篇文章: "),t("a",{attrs:{href:"https://tech.meituan.com/2017/04/21/mt-leaf.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://tech.meituan.com/2017/04/21/mt-leaf.html"),t("OutboundLink")],1),s._v(" .")]),s._v(" "),t("h6",{attrs:{id:"_5-雪花算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-雪花算法"}},[s._v("#")]),s._v(" (5)雪花算法")]),s._v(" "),t("p",[s._v("Github 地址: "),t("a",{attrs:{href:"https://github.com/twitter-archive/snowflake",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://github.com/twitter-archive/snowflake"),t("OutboundLink")],1),s._v(".")]),s._v(" "),t("p",[s._v("Snowflake 算法是 Twitter 开源的"),t("strong",[s._v("分布式 ID 生成算法")]),s._v(", 它可支持一般每秒几万并发的场景.")]),s._v(" "),t("p",[s._v("雪花算法生成一个 "),t("strong",[s._v("64 位的 long 型的 ID")]),s._v(", 1 个 bit 是不用的, 用其中 41 bits 作为"),t("strong",[s._v("毫秒数")]),s._v(", 用 10 bits 作为"),t("strong",[s._v("工作机器 id")]),s._v(", 12 bits 作为"),t("strong",[s._v("序列号")]),s._v(".")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0001100")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10100010")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10111110")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10001001")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("01011100")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("00")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10001")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1001")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("00000000")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("具体含义:")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("1 bit")]),s._v(": "),t("strong",[s._v("不用")]),s._v(". 因为二进制里第一个 bit 为如果是 1, 那么都是负数, 但是生成的 id 都是正数, 所以第一个 bit 统一为 0.")]),s._v(" "),t("li",[t("strong",[s._v("41 bits")]),s._v(": "),t("strong",[s._v("表示的是时间戳")]),s._v(", 单位是"),t("strong",[s._v("毫秒")]),s._v('. 41 bits 可以表示的数字多达 "2^41 - 1" 毫秒, 即 69 年.')]),s._v(" "),t("li",[t("strong",[s._v("10 bits")]),s._v(": "),t("strong",[s._v("记录工作机器 id")]),s._v(". 代表这个服务最多可以部署在 2^10 台机器上. 但 10 bits 里 5 个 bits 代表机房 id, 5 个 bits 代表机器 id. 意思就是最多代表 2^5(32) 个机房, 每个机房里可以部署 2^5(32) 个机器.")]),s._v(" "),t("li",[t("strong",[s._v("12 bits")]),s._v(": "),t("strong",[s._v("这个是用来记录同一个毫秒内产生的不同 id")]),s._v('. 12 bits 可以代表的最大正整数是 "2^12 = 4096", 所以 12 bits 代表的数字可以区分'),t("strong",[s._v("同一个毫秒内")]),s._v("的 4096 个不同的 id.")])]),s._v(" "),t("h5",{attrs:{id:"_6-分库分表中间件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-分库分表中间件"}},[s._v("#")]),s._v(" 6.分库分表中间件")]),s._v(" "),t("p",[s._v("常见的分库分表中间件有: Sharding-JDBC, Mycat, Cobar, TDDL, Atlas 等. 这些中间件可以在分库分表之后, "),t("strong",[s._v("根据指定的某个字段值")]),s._v("如 userId, "),t("strong",[s._v("自动路由到对应的库与表上去")]),s._v(".")]),s._v(" "),t("h6",{attrs:{id:"_1-sharding-jdbc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-sharding-jdbc"}},[s._v("#")]),s._v(" (1)Sharding-JDBC")]),s._v(" "),t("p",[s._v("属于 "),t("strong",[s._v("client 层")]),s._v("方案, 是 "),t("strong",[s._v("ShardingSphere 的 client 层方案")]),s._v(", 这种方案的"),t("strong",[s._v("优点在于不用部署, 运维成本低, 不需要代理层的二次转发请求, 性能很高")]),s._v(". 但如果遇到升级时需要各个系统都重新升级版本再发布, 各个系统都需要"),t("strong",[s._v("耦合")]),s._v(" Sharding-JDBC 的依赖.")]),s._v(" "),t("h6",{attrs:{id:"_2-mycat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-mycat"}},[s._v("#")]),s._v(" (2)Mycat")]),s._v(" "),t("p",[s._v("属于 "),t("strong",[s._v("Proxy 层")]),s._v("方案, 功能"),t("strong",[s._v("非常完善")]),s._v(". 这种 "),t("strong",[s._v("Proxy 层")]),s._v("方案的"),t("strong",[s._v("缺点在于需要部署")]),s._v(", 自己运维一套中间件, 运维成本高. "),t("strong",[s._v("好处在于对于各个项目是透明的")]),s._v(", 如果遇到升级之类的都是中间件的事.")]),s._v(" "),t("h6",{attrs:{id:"_3-选型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-选型"}},[s._v("#")]),s._v(" (3)选型")]),s._v(" "),t("p",[s._v("建议"),t("strong",[s._v("中小型公司选用 Sharding-JDBC")]),s._v(", client 层方案轻便, 而且维护成本低, 不需要额外增派人手, 而且中小型公司系统复杂度会低一些, 项目也没那么多.")]),s._v(" "),t("p",[t("strong",[s._v("中大型公司可以选用 Mycat 这类 Proxy 层")]),s._v("方案, 大公司可以有专门团队研究和维护 Mycat, 大量项目直接透明使用即可.")]),s._v(" "),t("h3",{attrs:{id:"mysql服务器优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mysql服务器优化"}},[s._v("#")]),s._v(" MySQL服务器优化")]),s._v(" "),t("h4",{attrs:{id:"mysql参数配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mysql参数配置"}},[s._v("#")]),s._v(" MySQL参数配置")]),s._v(" "),t("p",[s._v("可以通过"),t("strong",[s._v("配置文件")]),s._v("设置一些参数控制 MySQL 的行为. 配置项可以有多个作用域. 有些设置是服务器级的(全局作用域), 有些对每个连接是不同的(会话作用域), 剩下的一些是对象级的.")]),s._v(" "),t("p",[s._v("如果在服务器运行时修改了变量的全局值, 这个值对当前会话和其他任何已经存在的会话都"),t("strong",[s._v("不起效果")]),s._v(", 这是因为会话的变量值是在连接创建时从全局值初始化来的.")]),s._v(" "),t("p",[s._v("InnoDB 在大多数情况下如果要运行得很好, 配置大小合适的**缓冲池(Buffer Pool)和日志文件(Log File)**是必须的, 默认值都太小了. 因此, 对 InnoDB 来说, 最重要的两个参数是:")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("innodb_buffer_pool_size")])]),s._v(" "),t("li",[t("strong",[s._v("innodb_log_file_size")])])]),s._v(" "),t("p",[s._v("下面是一些常见的配置参数:")]),s._v(" "),t("blockquote",[t("p",[s._v("innodb_buffer_pool_size=40G")])]),s._v(" "),t("p",[s._v("InnoDB 存储引擎 buffer pool 缓存池大小, 一般为物理内存的 60%-70%.")]),s._v(" "),t("blockquote",[t("p",[s._v("innodb_log_file_size")])]),s._v(" "),t("p",[s._v("MySQL 的 InnoDB 存储引擎使用一个指定大小的 Redo log 空间(一个环形的数据结构). Redo log 的空间通过innodb_log_file_size 和 innodb_log_files_in_group(默认 2)参数来调节. 将这俩参数相乘即可得到总的可用 Redo log 空间. 多数情况下通过 innodb_log_file_size 来调节即可.")]),s._v(" "),t("blockquote",[t("p",[s._v("max_connections=3000")])]),s._v(" "),t("p",[s._v("连接的创建和销毁都需要系统资源, 比如内存, 文件句柄, 业务说的支持多少并发, 指的是每秒请求数, 也就是 QPS.")]),s._v(" "),t("p",[s._v("一个连接最少占用内存是 256 K, 最大是 64 M, 如果一个连接的请求数据超过 64MB(比如排序), 就会申请临时空间, 放到硬盘上.")]),s._v(" "),t("p",[s._v("如果 3000 个用户同时连上 MySQL, 最小需要内存 3000 * 256KB = 750M*, ​*最大需要内存 3000 * 64MB = 192G.")]),s._v(" "),t("p",[s._v("如果 innodb_buffer_pool_size 是 40GB, 给操作系统分配 4G, 给连接使用的最大内存不到 20G, 如果连接过多, 使用的内存超过 20G, 将会产生磁盘 SWAP, 此时将会影响性能. "),t("strong",[s._v("连接数过高, 不一定带来吞吐量的提高, 而且可能占用更多的系统资源")]),s._v(".")]),s._v(" "),t("blockquote",[t("p",[s._v("max_user_connections=2980")])]),s._v(" "),t("p",[s._v("允许用户连接的最大数量, 剩余连接数用作 DBA 管理.")]),s._v(" "),t("blockquote",[t("p",[s._v("back_log=300")])]),s._v(" "),t("p",[s._v("MySQL 能够暂存的连接数量. 如果 MySQL 的连接数达到 max_connections 时, 新的请求将会被存在堆栈中, 等待某一连接释放资源, 该堆栈数量即 back_log, 如果等待连接的数量超过 back_log, 将被拒绝.")]),s._v(" "),t("blockquote",[t("p",[s._v("wait_timeout=300")])]),s._v(" "),t("p",[s._v("指应用通过 JDBC 连接 MySQL 进行操作完毕后, 空闲 300 秒后断开, 默认是 28800, 单位秒, 即 8 个小时.")]),s._v(" "),t("blockquote",[t("p",[s._v("interactive_timeout=300")])]),s._v(" "),t("p",[s._v("指的是 MySQL client 连接 MySQL 进行操作完毕后, 空闲 300 秒后断开, 默认是 28800, 单位秒, 即 8 个小时.")]),s._v(" "),t("blockquote",[t("p",[s._v("innodb_thread_concurrency=64")])]),s._v(" "),t("p",[s._v("此参数用来设置 InnoDB 线程的并发数, 默认值为 0 表示不被限制, "),t("strong",[s._v("若要设置则与服务器的 CPU 核心数相同或是 CPU 的核心数的 2 倍, 如果超过配置并发数, 则需要排队, 这个值不宜太大, 不然可能会导致线程之间锁争用严重")]),s._v(", 影响性能.")]),s._v(" "),t("blockquote",[t("p",[s._v("innodb_lock_wait_timeout=10")])]),s._v(" "),t("p",[s._v("行锁锁定时间, 默认 50s, 根据公司业务定, 没有标准值.")]),s._v(" "),t("blockquote",[t("p",[s._v("sort_buffer_size=4M")])]),s._v(" "),t("p",[s._v("每个需要排序的线程分配该大小的一个缓冲区. 增加该值可以加速 ORDER BY 或 GROUP BY 操作.")]),s._v(" "),t("p",[s._v("sort_buffer_size 是一个 connection 级的参数, 在每个 connection(session) 第一次需要使用这个 buffer 的时候, 一次性分配设置的内存.")]),s._v(" "),t("p",[s._v("sort_buffer_size: 并不是越大越好, 由于是 connection 级的参数, 过大的设置 + 高并发可能会耗尽系统的内存资源. 例如: 500 个连接将会消耗 500 * sort_buffer_size(4M) = 2G.")]),s._v(" "),t("h4",{attrs:{id:"内存配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内存配置"}},[s._v("#")]),s._v(" 内存配置")]),s._v(" "),t("p",[s._v("配置MySQL正确地使用内存量对高性能是至关重要的, 要根据需求来定制内存使用. 无法控制MySQL服务器运行, 解析查询, 以及其内部管理所消耗的内存, 但是为特定目的而使用多少内存则有很多参数可以控制.")]),s._v(" "),t("p",[s._v("比较重要的内存配置需要的地方如下.")]),s._v(" "),t("h5",{attrs:{id:"_1-innodb缓冲池"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-innodb缓冲池"}},[s._v("#")]),s._v(" 1.InnoDB缓冲池")]),s._v(" "),t("p",[s._v("如果大部分都是InnoDB表, InnoDB缓冲池(Buffer Pool)或许比其他任何东西更需要"),t("strong",[s._v("内存")]),s._v(".")]),s._v(" "),t("p",[s._v("InnoDB 缓冲池并不仅仅缓存索引: 它还会缓存行的数据, 自适应哈希索引, 插入缓冲(Insert Buffer), 锁, 以及其他内部数据结构. InnoDB还使用缓冲池来帮助延迟写入, 这样就能合并多个写入操作, 然后一起顺序地写回. 总之, InnoDB严重依赖缓冲池, 必须"),t("strong",[s._v("确认为它分配了足够的内存")]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"_2-线程缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-线程缓存"}},[s._v("#")]),s._v(" 2.线程缓存")]),s._v(" "),t("p",[s._v("线程缓存保存那些当前没有与连接关联但是准备为后面新的连接服务的线程. 当一个新的连接创建时, 如果缓存中有线程存在, MySQL从缓存中删除一个线程, 并且把它分配给这个新的连接. 当连接关闭时, 如果线程缓存还有空间的话, MySQL又会把线程放回缓存. 如果没有空间的话, MySQL会销毁这个线程. 只要MySQL在缓存里还有空闲的线程, 它就可以迅速地响应连接请求, 因为这样就不用为每个连接创建新的线程.")]),s._v(" "),t("p",[s._v("thread_cache_size变量指定了MySQL可以保持在缓存中的线程数.")]),s._v(" "),t("h4",{attrs:{id:"io行为配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#io行为配置"}},[s._v("#")]),s._v(" IO行为配置")]),s._v(" "),t("h5",{attrs:{id:"_1-innodb事务日志"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-innodb事务日志"}},[s._v("#")]),s._v(" 1.InnoDB事务日志")]),s._v(" "),t("p",[s._v("InnoDB使用日志来减少提交事务时的开销. 因为日志中已经记录了事务, 就无须在每个事务提交时把缓冲池的脏块刷新(flush)到磁盘中. 事务修改的数据和索引通常会映射到表空间的随机位置, 所以刷新这些变更到磁盘需要很多随机I/O. InnoDB假设使用的是常规磁盘(机械磁盘), 随机I/O比顺序I/O要昂贵得多, 因为一个I/O请求需要时间把磁头移到正确的位置, 然后等待磁盘上读出需要的部分, 再转到开始位置.")]),s._v(" "),t("p",[s._v("InnoDB用日志把随机I/O变成顺序I/O. 一旦日志安全写到磁盘, 事务就持久化了, 即使变更还没写到数据文件. 如果一些糟糕的事情发生了(例如断电了), InnoDB可以重放日志并且恢复已经提交的事务.")]),s._v(" "),t("p",[s._v("当然, InnoDB最后还是必须把变更写到数据文件, 因为日志有固定的大小. InnoDB的日志是环形方式写的: 当写到日志的尾部, 会重新跳转到开头继续写, 但不会覆盖还没应用到数据文件的日志记录, 因为这样做会清掉已提交事务的唯一持久化记录.")]),s._v(" "),t("p",[s._v("InnoDB使用一个后台线程智能地刷新这些变更到数据文件. 这个线程可以批量组合写入, 使得数据写入更顺序, 以提高效率. 实际上, 事务日志把数据文件的随机I/O转换为几乎顺序的日志文件和数据文件I/O. 把刷新操作转移到后台使查询可以更快完成, 并且缓和查询高峰时I/O系统的压力.")]),s._v(" "),t("p",[s._v("整体的日志文件大小受控于innodb_log_file_size和innodb_log_files_in_group两个参数, 这对写性能非常重要. 日志文件的总大小是每个文件的大小之和. 默认情况下, 只有两个5MB的文件, 总共10MB. 对高性能工作来说这太小了. 至少需要几百MB, 或者甚至上GB的日志文件.")]),s._v(" "),t("p",[s._v("InnoDB使用多个文件作为一组循环日志. 通常不需要修改默认的日志数量, 只修改每个日志文件的大小即可. 要修改日志文件大小, 需要完全关闭MySQL, 将旧的日志文件移到其他地方保存, 重新配置参数, 然后重启. 一定要确保MySQL干净地关闭了, 或者还有日志文件可以保证需要应用到数据文件的事务记录, 否则数据库就无法恢复了! 当重启服务器的时候, 查看MySQL的错误日志. 在重启成功之后, 才可以删除旧的日志文件.")]),s._v(" "),t("p",[t("strong",[s._v("当InnoDB变更任何数据时, 会写一条变更记录到内存日志缓冲区")]),s._v(". 在"),t("strong",[s._v("缓冲满的时候, 事务提交的时候, 或者每一秒钟")]),s._v(", InnoDB都会刷写缓冲区的内容到磁盘日志文件——无论上述三个条件哪个先达到. 如果有大事务, 增加日志缓冲区(默认1MB)大小可以帮助减少I/O. 变量innodb_log_buffer_size可以控制日志缓冲区的大小.")]),s._v(" "),t("p",[s._v("通常不需要把日志缓冲区设置得非常大. 推荐的范围是1MB～8MB, 一般来说足够了, 除非要写很多相当大的BLOB记录. 相对于InnoDB的普通数据, 日志条目是非常紧凑的. 它们不是基于页的, 所以不会浪费空间来一次存储整个页. InnoDB也使得日志条目尽可能地短.")]),s._v(" "),t("p",[s._v("InnoDB怎样刷新日志缓冲? 当InnoDB把日志缓冲刷新到磁盘日志文件时, 先会使用一个Mutex锁住缓冲区, 刷新到所需要的位置, 然后移动剩下的条目到缓冲区的前面. 当Mutex释放时, 可能有超过一个事务已经准备好刷新其日志记录.")]),s._v(" "),t("p",[s._v("日志缓冲必须被刷新到持久化存储, 以确保提交的事务完全被持久化了. 如果和持久相比更在乎性能, 可以修改innodb_flush_log_at_trx_commit变量来控制日志缓冲刷新的频繁程度. 可能的设置如下:")]),s._v(" "),t("ul",[t("li",[t("ol",{attrs:{start:"0"}},[t("li",[s._v("把日志缓冲写到日志文件, 并且每秒钟刷新一次, 但是事务提交时不做任何事.")])])]),s._v(" "),t("li",[t("ol",[t("li",[s._v("将日志缓冲写到日志文件, 并且每次事务提交都刷新到持久化存储. 这是默认的(并且是最安全的)设置, 该设置能保证不会丢失任何已经提交的事务, 除非磁盘或者操作系统是“伪”刷新.")])])]),s._v(" "),t("li",[t("ol",{attrs:{start:"2"}},[t("li",[s._v("每次提交时把日志缓冲写到日志文件, 但是并不刷新. InnoDB每秒钟做一次刷新. 0与2最重要的不同是(也是为什么2是更合适的设置), 如果MySQL进程“挂了”,  2不会丢失任何事务. 如果整个服务器“挂了”或者断电了, 则还是可能会丢失一些事务.")])])])]),s._v(" "),t("p",[s._v("了解清楚“把日志缓冲写到日志文件”和“把日志刷新到持久化存储”之间的不同是很重要的. 在大部分操作系统中, 把缓冲写到日志只是简单地把数据从InnoDB的内存缓冲转移到了操作系统的缓存, 也是在内存里, 并没有真的把数据写到了持久化存储.")]),s._v(" "),t("p",[s._v("因此, 如果MySQL崩溃了或者电源断电了, 设置0和2通常会导致最多一秒的数据丢失, 因为数据可能只存在于操作系统的缓存. 我们说“通常”, 因为不论如何InnoDB会每秒尝试刷新日志文件到磁盘, 但是在一些场景下也可能丢失超过1秒的事务, 例如当刷新被推迟了. 与此相反, 把日志刷新到持久化存储意味着InnoDB请求操作系统把数据刷出缓存, 并且确认写到磁盘了. 这是一个阻塞I/O的调用, 直到数据被完全写回才会完成. 因为写数据到磁盘比较慢, 当innodb_flush_log_at_trx_commit被设置为1时, 可能明显地降低InnoDB每秒可以提交的事务数.")]),s._v(" "),t("p",[s._v("设置innodb_flush_log_at_trx_commit为不为1的值可能导致丢失事务. "),t("strong",[s._v("高性能事务处理")]),s._v("需要的最佳配置是把innodb_flush_log_at_trx_commit设置为1且把日志文件放到一个有电池保护的写缓存的RAID卷中. 这兼顾了安全和速度.")]),s._v(" "),t("h4",{attrs:{id:"并发配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#并发配置"}},[s._v("#")]),s._v(" 并发配置")]),s._v(" "),t("h5",{attrs:{id:"_1-innodb并发配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-innodb并发配置"}},[s._v("#")]),s._v(" 1.InnoDB并发配置")]),s._v(" "),t("p",[s._v("最基本的限制并发的方式是使用innodb_thread_concurrency变量, 它会限制一次性可以有多少线程进入内核, 0表示不限制.")]),s._v(" "),t("p",[s._v("经验公式:")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("并发值 = CPU数量 * 磁盘数量 * 2\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("如果已经进入内核的线程超过了允许的数量, 新的线程就无法再进入内核. InnoDB使用两段处理来尝试让线程尽可能高效地进入内核. 两段策略减少了因操作系统调度引起的上下文切换. 线程第一次休眠innodb_thread_sleep_delay微秒, 然后再重试. 如果它依然不能进入内核, 则放入一个等待线程队列, 让操作系统来处理.")]),s._v(" "),t("h3",{attrs:{id:"硬件优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#硬件优化"}},[s._v("#")]),s._v(" 硬件优化")]),s._v(" "),t("p",[s._v("许多不同的硬件都可以影响MySQL的性能, 需要依靠 CPU, 内存, 硬盘和网络等资源, 这些都可以进行优化.")]),s._v(" "),t("p",[s._v("应该分析应用是 IO 密集型还是 CPU 密集型, 然后据此选择合适的 CPU.")]),s._v(" "),t("h3",{attrs:{id:"应用层优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#应用层优化"}},[s._v("#")]),s._v(" 应用层优化")]),s._v(" "),t("p",[s._v("‍")]),s._v(" "),t("p",[s._v("‍")]),s._v(" "),t("h4",{attrs:{id:"参考资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[s._v("#")]),s._v(" 参考资料")]),s._v(" "),t("ul",[t("li",[s._v("MySQL大表优化方案["),t("a",{attrs:{href:"https://segmentfault.com/a/1190000006158186",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://segmentfault.com/a/1190000006158186"),t("OutboundLink")],1),s._v("]")]),s._v(" "),t("li",[s._v("如何设置innodb_log_file_size["),t("a",{attrs:{href:"https://blog.51cto.com/kaifly/2114068",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://blog.51cto.com/kaifly/2114068"),t("OutboundLink")],1),s._v("]")])]),s._v(" "),t("p",[s._v("‍")])])}),[],!1,null,null,null);t.default=r.exports}}]);