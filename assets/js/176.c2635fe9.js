(window.webpackJsonp=window.webpackJsonp||[]).push([[176],{485:function(t,_,v){"use strict";v.r(_);var r=v(7),s=Object(r.a)({},(function(){var t=this,_=t._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"_360-网关路由"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_360-网关路由"}},[t._v("#")]),t._v(" 360.网关路由")]),t._v(" "),_("h4",{attrs:{id:"基础"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[t._v("#")]),t._v(" 基础")]),t._v(" "),_("h5",{attrs:{id:"_1-概述"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述"}},[t._v("#")]),t._v(" 1.概述")]),t._v(" "),_("p",[t._v("微服务场景下一个系统被拆分为多个服务, 诸如"),_("strong",[t._v("安全认证, 流量控制, 日志, 监控")]),t._v("等功能是"),_("strong",[t._v("每个服务都需要")]),t._v("的, 没有网关的话, 就需要在每个服务中"),_("strong",[t._v("单独实现")]),t._v(", 这就会做很多重复的工作. 因此需要一个"),_("strong",[t._v("全局视图")]),t._v("来统一管理这些功能.")]),t._v(" "),_("p",[_("strong",[t._v("API 网关")]),t._v("可以看做系统与外界联通的入口, 可以在网关进行一些"),_("strong",[t._v("非业务逻辑")]),t._v("的处理, 网关一般可以提供"),_("mark",[_("strong",[t._v("请求路由, 安全认证(身份/权限认证), 流量控制, 负载均衡, 容灾, 日志, 监控")])]),t._v("等功能. 总体来说网关主要是对"),_("strong",[t._v("请求进行过滤")]),t._v("后进行各种操作.")]),t._v(" "),_("blockquote",[_("p",[t._v("网关的作用")])]),t._v(" "),_("p",[t._v("网关的常见作用:")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("RPC 协议转成 HTTP")]),t._v(". 由于在内部开发中都是以 RPC 协议(Thrift, Dubbo 等)去做开发, 暴露给内部服务, 当"),_("strong",[t._v("外部服务")]),t._v("需要使用这个"),_("strong",[t._v("接口")]),t._v("的时候往往需要将 RPC 协议转换成 HTTP 协议.")]),t._v(" "),_("li",[_("strong",[t._v("请求路由")]),t._v(": 一个系统可能同一个接口新老两套系统都在使用, 需要根据请求上下文将请求"),_("strong",[t._v("路由")]),t._v("到对应的服务接口.")]),t._v(" "),_("li",[_("strong",[t._v("统一鉴权")]),t._v(": "),_("strong",[t._v("鉴权操作")]),t._v("一般不涉及业务逻辑, 可以在网关层进行处理, 而不用放到业务逻辑层面.")]),t._v(" "),_("li",[_("strong",[t._v("统一监控")]),t._v(": 由于网关是外部服务的"),_("strong",[t._v("入口")]),t._v(", 所以可以通过网关获取如"),_("strong",[t._v("入参出参, 链路时间")]),t._v("等监控信息.")]),t._v(" "),_("li",[_("strong",[t._v("流量控制, 熔断降级")]),t._v(": 对于流量控制, 熔断降级等"),_("strong",[t._v("非业务逻辑")]),t._v("可以统一放到网关层.")])]),t._v(" "),_("h5",{attrs:{id:"_2-常见网关系统"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-常见网关系统"}},[t._v("#")]),t._v(" 2.常见网关系统")]),t._v(" "),_("p",[t._v("常见的开源 API 网关系统有:")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("Kong")])]),t._v(" "),_("li",[_("strong",[t._v("Netflix Zuul")])])]),t._v(" "),_("p",[t._v("总的来说, "),_("strong",[t._v("Kong 相比于 Zuul 更加强大并且简单易用")]),t._v(". Kong 基于 Openresty, Zuul 基于 Java. OpenResty 是一个全功能的 Web 应用服务器, 它"),_("strong",[t._v("打包了标准的 Nginx 核心")]),t._v(", 很多常用的第三方模块及其依赖. 通过整合众多设计良好的 Nginx 模块, OpenResty "),_("strong",[t._v("有效地把 Nginx 服务器转变为一个强大的 Web 应用服务器")]),t._v(".")]),t._v(" "),_("h4",{attrs:{id:"统一网关"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#统一网关"}},[t._v("#")]),t._v(" 统一网关")]),t._v(" "),_("h5",{attrs:{id:"_1-概述-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述-2"}},[t._v("#")]),t._v(" 1.概述")]),t._v(" "),_("p",[t._v("统一网关就是把所有的网关都统一实现, 对性能要求更高. 但"),_("strong",[t._v("统一的 API 网关")]),t._v("不仅有 API 网关所有的特点, 还有如下好处:")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("统一技术组件升级")]),t._v(". 在公司中如果有某个技术组件需要升级, 有了统一的网关升级是很快的.")]),t._v(" "),_("li",[_("strong",[t._v("统一服务接入")]),t._v(". 可以通过统一网关对其他服务进行接入, 方便快捷.")]),t._v(" "),_("li",[_("strong",[t._v("节约资源")]),t._v(". 统一 API 网关可以节约资源, 不同业务线可以共用.")])]),t._v(" "),_("h5",{attrs:{id:"_2-统一网关的设计"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-统一网关的设计"}},[t._v("#")]),t._v(" 2.统一网关的设计")]),t._v(" "),_("h6",{attrs:{id:"异步化请求"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#异步化请求"}},[t._v("#")]),t._v(" 异步化请求")]),t._v(" "),_("p",[t._v("如果是自己实现的网关层, 由于只有自己使用, 对于吞吐量的要求并不高所以, 一般"),_("strong",[t._v("同步请求调用")]),t._v("即可.")]),t._v(" "),_("p",[t._v("对于"),_("strong",[t._v("统一的网关层")]),t._v(", 如何用少量的机器接入更多的服务, 就需要"),_("strong",[t._v("异步化调用来提高吞吐量")]),t._v(". 对于异步化一般有下面两种策略:")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("Tomcat/Jetty + NIO + Servlet3")]),t._v(": 这种策略比较普遍, Zuul 选取的即这个策略, 这种策略比较"),_("strong",[t._v("适合 HTTP")]),t._v(". 在 Servlet3 中可以开启异步.")]),t._v(" "),_("li",[_("strong",[t._v("Netty + NIO")]),t._v(": Netty 为高并发而生, 但 Netty 需要自己处理 HTTP 协议, 稍微麻烦.")])]),t._v(" "),_("p",[t._v("对于网关是 HTTP 请求场景比较多的情况可以"),_("strong",[t._v("采用 Servlet")]),t._v(", 毕竟有更加成熟的处理 HTTP 协议. 如果更加"),_("strong",[t._v("重视吞吐量")]),t._v("那么可以采用 "),_("strong",[t._v("Netty")]),t._v(".")]),t._v(" "),_("blockquote",[_("p",[t._v("全链路异步")])]),t._v(" "),_("p",[t._v("对于来的"),_("strong",[t._v("请求已经使用异步")]),t._v("了, 为达到"),_("strong",[t._v("全链路异步")]),t._v("所以需要对"),_("strong",[t._v("去的请求")]),t._v("也进行异步处理, 对于去的请求可以利用 "),_("strong",[t._v("RPC 的异步支持")]),t._v("进行异步请求.")]),t._v(" "),_("p",[t._v("由在 Web 容器中开启 "),_("strong",[t._v("Servlet 异步")]),t._v(", 然后进入到"),_("strong",[t._v("网关的业务线程池中进行业务处理")]),t._v(", 然后进行 RPC 的"),_("strong",[t._v("异步调用并注册需要回调的业务")]),t._v(", 最后在回调线程池中进行回调处理.")]),t._v(" "),_("h6",{attrs:{id:"链式处理请求"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#链式处理请求"}},[t._v("#")]),t._v(" 链式处理请求")]),t._v(" "),_("p",[t._v("设计模式中"),_("strong",[t._v("责任链模式")]),t._v("的作用是避免请求发送者与接收者耦合在一起, 让多个对象都有可能接收请求, 将这些对象连接成一条链, 并且沿着这条链传递请求, 直到有对象处理它为止. 责任链将请求的发送者和请求的处理者解耦. 各个框架中对此模式都有体现, 比如 Servlet 里面的 Filter, Spring AOP 里面的 Interceptor. 在 "),_("strong",[t._v("Zuul")]),t._v(" 中也应用了这种模式.")]),t._v(" "),_("p",[t._v("可以借鉴这种设计模式到自己的网关设计中:")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("preFilters")]),t._v(": "),_("strong",[t._v("前置过滤器")]),t._v(", 用来处理一些公共的业务, 比如"),_("strong",[t._v("统一鉴权, 统一限流, 熔断降级, 缓存处理")]),t._v("等, 并且"),_("strong",[t._v("提供业务方扩展")]),t._v(".")]),t._v(" "),_("li",[_("strong",[t._v("routingFilters")]),t._v(": 用来处理一些"),_("strong",[t._v("泛化调用")]),t._v(", 主要是做"),_("strong",[t._v("协议的转换, 请求的路由")]),t._v("工作.")]),t._v(" "),_("li",[_("strong",[t._v("postFilters")]),t._v(": 后置过滤器, 主要用来做"),_("strong",[t._v("结果的处理, 日志打点, 记录时间")]),t._v("等等.")]),t._v(" "),_("li",[_("strong",[t._v("errorFilters")]),t._v(": 错误过滤器, 用来"),_("strong",[t._v("处理调用异常")]),t._v("的情况.")])]),t._v(" "),_("h6",{attrs:{id:"业务隔离"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#业务隔离"}},[t._v("#")]),t._v(" 业务隔离")]),t._v(" "),_("p",[t._v("上面在"),_("strong",[t._v("全链路异步")]),t._v("的情况下"),_("strong",[t._v("不同业务之间的影响很小")]),t._v(", 但是如果在提供的自定义 Filter 中进行了某些"),_("strong",[t._v("同步调用")]),t._v(", 一旦超时频繁那么就会对其他业务产生影响. 所以"),_("strong",[t._v("需要采用隔离之术, 降低业务之间的互相影响")]),t._v(".")]),t._v(" "),_("blockquote",[_("p",[t._v("(1)信号量隔离")])]),t._v(" "),_("p",[t._v("信号量隔离只是"),_("strong",[t._v("限制了总的并发数")]),t._v(", 服务还是主线程进行"),_("strong",[t._v("同步调用")]),t._v(". 这个隔离如果远程调用超时依然会影响主线程, 从而会影响其他业务. 因此, 如果只是想限制某个服务的总并发调用量或者调用的服务不涉及远程调用的话, 可以使用"),_("strong",[t._v("轻量级的信号量")]),t._v("来实现.")]),t._v(" "),_("blockquote",[_("p",[t._v("(2)线程池隔离")])]),t._v(" "),_("p",[t._v("最简单的就是"),_("mark",[_("strong",[t._v("不同业务之间通过不同的线程池进行隔离")])]),t._v(", 就算业务接口出现了问题由于线程池已经进行了隔离那么也不会影响其他业务.")]),t._v(" "),_("p",[t._v("在京东的网关实现之中就是采用的线程池隔离, 比较重要的业务比如商品或者订单都是"),_("strong",[t._v("单独的通过线程池去处理")]),t._v(". 但是由于是"),_("strong",[t._v("统一网关平台")]),t._v(", 如果业务线众多, 大家都觉得自己的业务比较重要需要单独的线程池隔离, 如果使用的是 Java 语言开发的话那么在 Java 中线程是比较重的资源比较受限, 如果需要隔离的线程池过多不是很适用. 如果使用一些其他语言比如 Golang 进行"),_("strong",[t._v("开发网关")]),t._v("的话, 线程是比较轻的资源, 所以"),_("strong",[t._v("比较适合使用线程池隔离")]),t._v(".")]),t._v(" "),_("blockquote",[_("p",[t._v("(3)集群隔离")])]),t._v(" "),_("p",[t._v("如果某些业务需要使用隔离, 但是统一网关又没有线程池隔离那可以使用"),_("strong",[t._v("集群隔离")]),t._v(", 如果某些业务真的很重要那么可以为这一系列业务单独申请一个集群或者多个集群, 通过机器之间进行隔离.")]),t._v(" "),_("h6",{attrs:{id:"请求限流"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#请求限流"}},[t._v("#")]),t._v(" 请求限流")]),t._v(" "),_("p",[_("strong",[t._v("流量控制")]),t._v("可以采用很多开源的实现, 比如阿里的 "),_("strong",[t._v("Sentinel")]),t._v(" 和比较成熟的 "),_("strong",[t._v("Hystrix")]),t._v(". 具体参考: 限流实现.")]),t._v(" "),_("h6",{attrs:{id:"熔断降级"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#熔断降级"}},[t._v("#")]),t._v(" 熔断降级")]),t._v(" "),_("p",[t._v("可以参照开源实现 "),_("strong",[t._v("Sentinel")]),t._v(" 和 "),_("strong",[t._v("Hystrix")]),t._v(".")]),t._v(" "),_("h6",{attrs:{id:"泛化调用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#泛化调用"}},[t._v("#")]),t._v(" 泛化调用")]),t._v(" "),_("p",[_("mark",[_("strong",[t._v("泛化调用指的是一些通信协议的转换")])]),t._v(", 比如将 HTTP 转换成 Thrift. 各个公司的"),_("strong",[t._v("内部服务通信协议都不同")]),t._v(". 比如淘宝支持 HTTPS, HTTP1, HTTP2 等协议转换成 HTTP, HSF, Dubbo 等协议.")]),t._v(" "),_("p",[t._v("如何实现"),_("strong",[t._v("泛化调用")]),t._v("? 由于协议很难自动转换, 那么其实"),_("strong",[t._v("每个协议对应的接口需要提供一种映射")]),t._v(". 简单来说就是"),_("mark",[_("strong",[t._v("把两个协议都能转换成共同语言, 从而互相转换")])]),t._v(".")]),t._v(" "),_("p",[t._v("一般来说"),_("strong",[t._v("共同语言")]),t._v("有两种方式指定:")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("JSON")]),t._v(": 数据格式比较简单, 解析速度快, 较轻量级. 在 Dubbo 生态中有一个 "),_("strong",[t._v("HTTP 转 Dubbo")]),t._v(" 的项目是用 JsonRpc 做的, 将 HTTP 转化成 JsonRpc 再转化成 Dubbo. 比如可以将一个 HTTP 请求: http://www.baidu.com?id = 1 映射为 JSON:")])]),t._v(" "),_("div",{staticClass:"language-json line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-json"}},[_("code",[_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token property"}},[t._v('"method"')]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token string"}},[t._v('"getBaidu"')]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token property"}},[t._v('"param"')]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),_("span",{pre:!0,attrs:{class:"token property"}},[t._v('"id"')]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br"),_("span",{staticClass:"line-number"},[t._v("2")]),_("br"),_("span",{staticClass:"line-number"},[t._v("3")]),_("br"),_("span",{staticClass:"line-number"},[t._v("4")]),_("br"),_("span",{staticClass:"line-number"},[t._v("5")]),_("br"),_("span",{staticClass:"line-number"},[t._v("6")]),_("br")])]),_("ul",[_("li",[_("strong",[t._v("XML")]),t._v(": 数据比较重, 解析比较困难, 不讨论.")]),t._v(" "),_("li",[_("strong",[t._v("自定义描述语言")]),t._v(": 一般来说成本比较高, 需要自己定义语言来进行描述并进行解析, 但是其扩展性, 自定义个性化性都是最高. 比如 Spring 自定义了一套自己的 SpEL 表达式语言.")])]),t._v(" "),_("p",[t._v("对于泛化调用如果要自己设计的话 "),_("strong",[t._v("JSON 基本可以满足")]),t._v(", 如果对于个性化的需要特别多的话倒是可以自己定义一套语言.")]),t._v(" "),_("h6",{attrs:{id:"管理平台"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#管理平台"}},[t._v("#")]),t._v(" 管理平台")]),t._v(" "),_("p",[t._v("上面介绍的都是"),_("strong",[t._v("如何实现一个网关")]),t._v("的技术关键. 有了网关之后, 需要一个管理平台去对上面所描述的技术关键进行"),_("strong",[t._v("配置与管理")]),t._v(", 包括但不限于下面这些配置: 限流, 熔断, 缓存, 日志, 自定义 Filter, 泛化调用等.")]),t._v(" "),_("p",[t._v("‍")]),t._v(" "),_("p",[t._v("‍")]),t._v(" "),_("h4",{attrs:{id:"参考资料"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),_("ul",[_("li",[t._v("京东: "),_("a",{attrs:{href:"http://www.yunweipai.com/archives/23653.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://www.yunweipai.com/archives/23653.html"),_("OutboundLink")],1)]),t._v(" "),_("li",[t._v("有赞网关: "),_("a",{attrs:{href:"https://tech.youzan.com/api-gateway-in-practice/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://tech.youzan.com/api-gateway-in-practice/"),_("OutboundLink")],1)]),t._v(" "),_("li",[t._v("唯品会: "),_("a",{attrs:{href:"https://mp.weixin.qq.com/s/gREMe-G7nqNJJLzbZ3ed3A",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://mp.weixin.qq.com/s/gREMe-G7nqNJJLzbZ3ed3A"),_("OutboundLink")],1)]),t._v(" "),_("li",[t._v("Zuul: "),_("a",{attrs:{href:"http://www.scienjus.com/api-gateway-and-netflix-zuul/",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://www.scienjus.com/api-gateway-and-netflix-zuul/"),_("OutboundLink")],1)])])])}),[],!1,null,null,null);_.default=s.exports}}]);