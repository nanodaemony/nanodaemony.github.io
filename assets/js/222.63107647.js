(window.webpackJsonp=window.webpackJsonp||[]).push([[222],{551:function(_,t,v){"use strict";v.r(t);var r=v(4),s=Object(r.a)({},(function(){var _=this,t=_._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"_520-网关路由"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_520-网关路由"}},[_._v("#")]),_._v(" 520.网关路由")]),_._v(" "),t("h4",{attrs:{id:"基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[_._v("#")]),_._v(" 基础")]),_._v(" "),t("h5",{attrs:{id:"_1-概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述"}},[_._v("#")]),_._v(" 1.概述")]),_._v(" "),t("p",[_._v("微服务场景下一个系统被拆分为多个服务, 诸如"),t("strong",[_._v("安全认证, 流量控制, 日志, 监控")]),_._v("等功能是"),t("strong",[_._v("每个服务都需要")]),_._v("的, 没有网关的话, 就需要在每个服务中"),t("strong",[_._v("单独实现")]),_._v(", 这就会做很多重复的工作. 因此需要一个"),t("strong",[_._v("全局视图")]),_._v("来统一管理这些功能.")]),_._v(" "),t("p",[t("strong",[_._v("API 网关")]),_._v("可以看做系统与外界联通的入口, 可以在网关进行一些"),t("strong",[_._v("非业务逻辑")]),_._v("的处理, 网关一般可以提供**==请求路由, 安全认证(身份/权限认证), 流量控制, 负载均衡, 容灾, 日志, 监控=="),t("strong",[_._v("等功能. 总体来说网关主要是对")]),_._v("请求进行过滤**后进行各种操作.")]),_._v(" "),t("p",[_._v("网关作用:")]),_._v(" "),t("ul",[t("li",[t("strong",[_._v("RPC 协议转成 HTTP")]),_._v(". 由于在内部开发中都是以 RPC 协议(Thrift, dubbo等)去做开发, 暴露给内部服务, 当"),t("strong",[_._v("外部服务")]),_._v("需要使用这个"),t("strong",[_._v("接口")]),_._v("的时候往往需要将 RPC 协议转换成 HTTP 协议.")]),_._v(" "),t("li",[t("strong",[_._v("请求路由")]),_._v(": 一个系统可能同一个接口新老两套系统都在使用, 需要根据请求上下文将请求"),t("strong",[_._v("路由")]),_._v("到对应的服务接口.")]),_._v(" "),t("li",[t("strong",[_._v("统一鉴权")]),_._v(": "),t("strong",[_._v("鉴权操作")]),_._v("一般不涉及业务逻辑, 可以在网关层进行处理, 而不用放到业务逻辑层面.")]),_._v(" "),t("li",[t("strong",[_._v("统一监控")]),_._v(": 由于网关是外部服务的"),t("strong",[_._v("入口")]),_._v(", 所以可以通过网关获取如"),t("strong",[_._v("入参出参, 链路时间")]),_._v("等监控信息.")]),_._v(" "),t("li",[t("strong",[_._v("流量控制, 熔断降级")]),_._v(": 对于流量控制, 熔断降级等"),t("strong",[_._v("非业务逻辑")]),_._v("可以统一放到网关层.")])]),_._v(" "),t("h5",{attrs:{id:"_2-常见网关系统"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-常见网关系统"}},[_._v("#")]),_._v(" 2.常见网关系统")]),_._v(" "),t("p",[_._v("常见的开源 API 网关系统有:")]),_._v(" "),t("ul",[t("li",[t("strong",[_._v("Kong")])]),_._v(" "),t("li",[t("strong",[_._v("Netflix Zuul")])])]),_._v(" "),t("p",[_._v("总的来说, "),t("strong",[_._v("Kong 相比于 Zuul 更加强大并且简单易用")]),_._v(". Kong 基于 Openresty, Zuul 基于 Java. OpenResty 是一个全功能的 Web 应用服务器, 它"),t("strong",[_._v("打包了标准的 Nginx 核心")]),_._v(", 很多常用的第三方模块及其依赖. 通过整合众多设计良好的 Nginx 模块, OpenResty "),t("strong",[_._v("有效地把 Nginx 服务器转变为一个强大的 Web 应用服务器")]),_._v(".")]),_._v(" "),t("h5",{attrs:{id:"_3-统一api网关"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-统一api网关"}},[_._v("#")]),_._v(" 3.统一API网关")]),_._v(" "),t("p",[t("strong",[_._v("统一的 API 网关")]),_._v("不仅有 API 网关所有的特点, 还有如下好处:")]),_._v(" "),t("p",[t("strong",[_._v("(1) 统一技术组件升级")]),_._v(". 在公司中如果有某个技术组件需要升级, 有了统一的网关升级是很快的.")]),_._v(" "),t("p",[t("strong",[_._v("(2) 统一服务接入")]),_._v(". 可以通过统一网关对其他服务进行接入, 方便快捷.")]),_._v(" "),t("p",[t("strong",[_._v("(3) 节约资源")]),_._v(". 统一 API 网关可以节约资源, 不同业务线可以共用.")]),_._v(" "),t("h4",{attrs:{id:"统一网关的设计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#统一网关的设计"}},[_._v("#")]),_._v(" 统一网关的设计")]),_._v(" "),t("h5",{attrs:{id:"_1-异步化请求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-异步化请求"}},[_._v("#")]),_._v(" 1.异步化请求")]),_._v(" "),t("p",[_._v("如果是自己实现的网关层, 由于只有自己使用, 对于吞吐量的要求并不高所以, 一般"),t("strong",[_._v("同步请求调用")]),_._v("即可.")]),_._v(" "),t("p",[_._v("对于统一的网关层, 如何用少量的机器接入更多的服务, 就需要"),t("strong",[_._v("异步化")]),_._v("用来提高吞吐量. 对于异步化一般有下面两种策略:")]),_._v(" "),t("ul",[t("li",[t("strong",[_._v("Tomcat/Jetty + NIO + Servlet3")]),_._v(": 这种策略比较普遍, Zuul 选取的即这个策略, 这种策略比较"),t("strong",[_._v("适合 HTTP")]),_._v(". 在 Servlet3 中可以开启异步.")]),_._v(" "),t("li",[t("strong",[_._v("Netty + NIO")]),_._v(": Netty 为高并发而生, 但 Netty 需要自己处理 HTTP 协议, 稍微麻烦.")])]),_._v(" "),t("p",[_._v("对于网关是 HTTP 请求场景比较多的情况可以"),t("strong",[_._v("采用 Servlet")]),_._v(", 毕竟有更加成熟的处理 HTTP 协议. 如果更加"),t("strong",[_._v("重视吞吐量")]),_._v("那么可以采用 "),t("strong",[_._v("Netty")]),_._v(".")]),_._v(" "),t("h6",{attrs:{id:"_1-全链路异步"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-全链路异步"}},[_._v("#")]),_._v(" (1)全链路异步")]),_._v(" "),t("p",[_._v("对于来的"),t("strong",[_._v("请求已经使用异步")]),_._v("了, 为达到"),t("strong",[_._v("全链路异步")]),_._v("所以需要对"),t("strong",[_._v("去的请求")]),_._v("也进行异步处理, 对于去的请求可以利用 "),t("strong",[_._v("RPC 的异步支持")]),_._v("进行异步请求.")]),_._v(" "),t("p",[_._v("由在 Web 容器中开启 "),t("strong",[_._v("Servlet 异步")]),_._v(", 然后进入到"),t("strong",[_._v("网关的业务线程池中进行业务处理")]),_._v(", 然后进行 RPC 的"),t("strong",[_._v("异步调用并注册需要回调的业务")]),_._v(", 最后在回调线程池中进行回调处理.")]),_._v(" "),t("h5",{attrs:{id:"_2-链式处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-链式处理"}},[_._v("#")]),_._v(" 2.链式处理")]),_._v(" "),t("p",[_._v("设计模式中"),t("strong",[_._v("责任链模式")]),_._v("的作用是避免请求发送者与接收者耦合在一起, 让多个对象都有可能接收请求, 将这些对象连接成一条链, 并且沿着这条链传递请求, 直到有对象处理它为止. 责任链将请求的发送者和请求的处理者解耦. 各个框架中对此模式都有体现, 比如 Servlet 里面的 Filter, Spring AOP 里面的 Interceptor. 在 "),t("strong",[_._v("Zuul")]),_._v(" 中也应用了这种模式.")]),_._v(" "),t("p",[_._v("可以借鉴这种设计模式到自己的网关设计中:")]),_._v(" "),t("ul",[t("li",[t("strong",[_._v("preFilters")]),_._v(": "),t("strong",[_._v("前置过滤器")]),_._v(", 用来处理一些公共的业务, 比如"),t("strong",[_._v("统一鉴权, 统一限流, 熔断降级, 缓存处理")]),_._v("等, 并且"),t("strong",[_._v("提供业务方扩展")]),_._v(".")]),_._v(" "),t("li",[t("strong",[_._v("routingFilters")]),_._v(": 用来处理一些"),t("strong",[_._v("泛化调用")]),_._v(", 主要是做"),t("strong",[_._v("协议的转换, 请求的路由")]),_._v("工作.")]),_._v(" "),t("li",[t("strong",[_._v("postFilters")]),_._v(": 后置过滤器, 主要用来做"),t("strong",[_._v("结果的处理, 日志打点, 记录时间")]),_._v("等等.")]),_._v(" "),t("li",[t("strong",[_._v("errorFilters")]),_._v(": 错误过滤器, 用来"),t("strong",[_._v("处理调用异常")]),_._v("的情况.")])]),_._v(" "),t("h5",{attrs:{id:"_3-业务隔离"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-业务隔离"}},[_._v("#")]),_._v(" 3.业务隔离")]),_._v(" "),t("p",[_._v("上面在"),t("strong",[_._v("全链路异步")]),_._v("的情况下"),t("strong",[_._v("不同业务之间的影响很小")]),_._v(", 但是如果在提供的自定义 Filter 中进行了某些"),t("strong",[_._v("同步调用")]),_._v(", 一旦超时频繁那么就会对其他业务产生影响. 所以"),t("strong",[_._v("需要采用隔离之术, 降低业务之间的互相影响")]),_._v(".")]),_._v(" "),t("h6",{attrs:{id:"_1-信号量隔离"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-信号量隔离"}},[_._v("#")]),_._v(" (1)信号量隔离")]),_._v(" "),t("p",[_._v("信号量隔离只是"),t("strong",[_._v("限制了总的并发数")]),_._v(", 服务还是主线程进行"),t("strong",[_._v("同步调用")]),_._v(". 这个隔离如果远程调用超时依然会影响主线程, 从而会影响其他业务. 因此, 如果只是想限制某个服务的总并发调用量或者调用的服务不涉及远程调用的话, 可以使用"),t("strong",[_._v("轻量级的信号量")]),_._v("来实现.")]),_._v(" "),t("h6",{attrs:{id:"_2-线程池隔离"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-线程池隔离"}},[_._v("#")]),_._v(" (2)线程池隔离")]),_._v(" "),t("p",[_._v("最简单的就是"),t("strong",[_._v("不同业务之间通过不同的线程池进行隔离")]),_._v(", 就算业务接口出现了问题由于线程池已经进行了隔离那么也不会影响其他业务. 在京东的网关实现之中就是采用的线程池隔离, 比较重要的业务比如商品或者订单都是"),t("strong",[_._v("单独的通过线程池去处理")]),_._v(". 但是由于是"),t("strong",[_._v("统一网关平台")]),_._v(", 如果业务线众多, 大家都觉得自己的业务比较重要需要单独的线程池隔离, 如果使用的是 Java 语言开发的话那么在 Java 中线程是比较重的资源比较受限, 如果需要隔离的线程池过多不是很适用. 如果使用一些其他语言比如 Golang 进行"),t("strong",[_._v("开发网关")]),_._v("的话, 线程是比较轻的资源, 所以"),t("strong",[_._v("比较适合使用线程池隔离")]),_._v(".")]),_._v(" "),t("h6",{attrs:{id:"_3-集群隔离"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-集群隔离"}},[_._v("#")]),_._v(" (3)集群隔离")]),_._v(" "),t("p",[_._v("如果某些业务需要使用隔离, 但是统一网关又没有线程池隔离那可以使用"),t("strong",[_._v("集群隔离")]),_._v(", 如果某些业务真的很重要那么可以为这一系列业务单独申请一个集群或者多个集群, 通过机器之间进行隔离.")]),_._v(" "),t("h5",{attrs:{id:"_4-请求限流"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-请求限流"}},[_._v("#")]),_._v(" 4.请求限流")]),_._v(" "),t("p",[t("strong",[_._v("流量控制")]),_._v("可以采用很多开源的实现, 比如阿里的 "),t("strong",[_._v("Sentinel")]),_._v(" 和比较成熟的 "),t("strong",[_._v("Hystrix")]),_._v(". 一般限流分为"),t("strong",[_._v("集群限流")]),_._v("和"),t("strong",[_._v("单机限流")]),_._v(":")]),_._v(" "),t("ul",[t("li",[_._v("单机限流: "),t("strong",[_._v("限流每台机器")]),_._v("可以直接利用 Guava 的"),t("strong",[_._v("令牌桶")]),_._v("去做, 由于没有远程调用所以性能消耗较小.")]),_._v(" "),t("li",[_._v("集群限流: 利用"),t("strong",[_._v("统一存储")]),_._v("保存"),t("strong",[_._v("当前流量的情况")]),_._v(", 一般可以采用 Redis, 这个一般会有一些"),t("strong",[_._v("性能损耗")]),_._v(".")])]),_._v(" "),t("h5",{attrs:{id:"_5-熔断降级"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-熔断降级"}},[_._v("#")]),_._v(" 5.熔断降级")]),_._v(" "),t("p",[_._v("可以参照开源实现 "),t("strong",[_._v("Sentinel")]),_._v(" 和 "),t("strong",[_._v("Hystrix")]),_._v(".")]),_._v(" "),t("h5",{attrs:{id:"_6-泛化调用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-泛化调用"}},[_._v("#")]),_._v(" 6.泛化调用")]),_._v(" "),t("p",[t("strong",[_._v("泛化调用")]),_._v("指的是一些"),t("strong",[_._v("通信协议的转换")]),_._v(", 比如将 HTTP 转换成 Thrift. 各个公司的"),t("strong",[_._v("内部服务通信协议都不同")]),_._v(". 比如淘宝支持 HTTPS, HTTP1, HTTP2 等协议转换成 HTTP, HSF, "),t("strong",[_._v("Dubbo")]),_._v(" 等协议.")]),_._v(" "),t("h6",{attrs:{id:"_1-泛化调用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-泛化调用"}},[_._v("#")]),_._v(" (1)泛化调用")]),_._v(" "),t("p",[_._v("如何实现"),t("strong",[_._v("泛化调用")]),_._v("? 由于协议很难自动转换, 那么其实"),t("strong",[_._v("每个协议对应的接口需要提供一种映射")]),_._v(". 简单来说就是"),t("strong",[_._v("把两个协议都能转换成共同语言, 从而互相转换")]),_._v(".")]),_._v(" "),t("p",[_._v("一般来说"),t("strong",[_._v("共同语言")]),_._v("有两种方式指定:")]),_._v(" "),t("ul",[t("li",[t("strong",[_._v("JSON")]),_._v(": 数据格式比较简单, 解析速度快, 较轻量级. 在 Dubbo 生态中有一个 "),t("strong",[_._v("HTTP 转 Dubbo")]),_._v(" 的项目是用 JsonRpc 做的, 将 HTTP 转化成 JsonRpc 再转化成 Dubbo. 比如可以将一个 HTTP 请求: http://www.baidu.com?id = 1 映射为 JSON:")])]),_._v(" "),t("div",{staticClass:"language-json line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("{")]),_._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[_._v('"method"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[_._v(":")]),_._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[_._v('"getBaidu"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(",")]),_._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[_._v('"param"')]),_._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[_._v(":")]),_._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("{")]),_._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[_._v('"id"')]),_._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[_._v(":")]),_._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[_._v("1")]),_._v("\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("}")]),_._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("}")]),_._v("\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br"),t("span",{staticClass:"line-number"},[_._v("3")]),t("br"),t("span",{staticClass:"line-number"},[_._v("4")]),t("br"),t("span",{staticClass:"line-number"},[_._v("5")]),t("br"),t("span",{staticClass:"line-number"},[_._v("6")]),t("br")])]),t("ul",[t("li",[t("strong",[_._v("XML")]),_._v(": 数据比较重, 解析比较困难, 不讨论.")]),_._v(" "),t("li",[t("strong",[_._v("自定义描述语言")]),_._v(": 一般来说成本比较高, 需要自己定义语言来进行描述并进行解析, 但是其扩展性, 自定义个性化性都是最高. 比如 Spring 自定义了一套自己的 SpEL 表达式语言.")])]),_._v(" "),t("p",[_._v("对于泛化调用如果要自己设计的话 "),t("strong",[_._v("JSON 基本可以满足")]),_._v(", 如果对于个性化的需要特别多的话倒是可以自己定义一套语言.")]),_._v(" "),t("h5",{attrs:{id:"_7-管理平台"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-管理平台"}},[_._v("#")]),_._v(" 7.管理平台")]),_._v(" "),t("p",[_._v("上面介绍的都是"),t("strong",[_._v("如何实现一个网关")]),_._v("的技术关键. 有了网关之后, 需要一个管理平台去对上面所描述的技术关键进行"),t("strong",[_._v("配置")]),_._v(", 包括但不限于下面这些配置: 限流, 熔断, 缓存, 日志, 自定义 Filter, 泛化调用等.")]),_._v(" "),t("p",[_._v("‍")]),_._v(" "),t("h4",{attrs:{id:"参考资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[_._v("#")]),_._v(" 参考资料")]),_._v(" "),t("ul",[t("li",[_._v("京东: "),t("a",{attrs:{href:"http://www.yunweipai.com/archives/23653.html",target:"_blank",rel:"noopener noreferrer"}},[_._v("http://www.yunweipai.com/archives/23653.html"),t("OutboundLink")],1)]),_._v(" "),t("li",[_._v("有赞网关: "),t("a",{attrs:{href:"https://tech.youzan.com/api-gateway-in-practice/",target:"_blank",rel:"noopener noreferrer"}},[_._v("https://tech.youzan.com/api-gateway-in-practice/"),t("OutboundLink")],1)]),_._v(" "),t("li",[_._v("唯品会: "),t("a",{attrs:{href:"https://mp.weixin.qq.com/s/gREMe-G7nqNJJLzbZ3ed3A",target:"_blank",rel:"noopener noreferrer"}},[_._v("https://mp.weixin.qq.com/s/gREMe-G7nqNJJLzbZ3ed3A"),t("OutboundLink")],1)]),_._v(" "),t("li",[_._v("Zuul: "),t("a",{attrs:{href:"http://www.scienjus.com/api-gateway-and-netflix-zuul/",target:"_blank",rel:"noopener noreferrer"}},[_._v("http://www.scienjus.com/api-gateway-and-netflix-zuul/"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=s.exports}}]);