(window.webpackJsonp=window.webpackJsonp||[]).push([[181],{632:function(t,a,s){"use strict";s.r(a);var n=s(7),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_20-左耳听风-极客时间-🌟"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_20-左耳听风-极客时间-🌟"}},[t._v("#")]),t._v(" 20.左耳听风(极客时间)🌟")]),t._v(" "),a("h3",{attrs:{id:"杂记"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#杂记"}},[t._v("#")]),t._v(" 杂记")]),t._v(" "),a("h4",{attrs:{id:"洞悉技术的本质-享受科技的乐趣"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#洞悉技术的本质-享受科技的乐趣"}},[t._v("#")]),t._v(" 洞悉技术的本质,享受科技的乐趣")]),t._v(" "),a("h5",{attrs:{id:"_1-技术"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-技术"}},[t._v("#")]),t._v(" 1.技术")]),t._v(" "),a("p",[t._v("对于技术方面, 我不会写太多关于知识点的东西, 因为这些知识点你可以自行 Google 可以 RTFM. 我要写的一定是以体系化的, 而且要能直达技术的本质. 入行这 20 年来, 我最擅长的就是架构和开发各种大规模的系统, 所以, 我会有 2-3 个和分布式系统相关的系列文章.")]),t._v(" "),a("p",[t._v("我学过也用过好多编程语言, 所以, 也会有一系列的关于编程本质的文章. 而我对一些基础知识研究得也比较多, 所以, 还会有一系列与基础知识相关的文章.")]),t._v(" "),a("p",[t._v("当然, 其中还会穿插一些其它的技术文章, 比如一些热点事件, 还有一些经验之谈, 包括我会把我的《程序员技术练级攻略》在这个专栏里重新再写一遍. 这些东西一定会让你有醍醐灌顶的感觉.")]),t._v(" "),a("h5",{attrs:{id:"_2-成长"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-成长"}},[t._v("#")]),t._v(" 2.成长")]),t._v(" "),a("p",[t._v("在过去这 20 年中, 我感觉到, 很多人都非常在意自己的成长. 所以, 我会分享一堆我亲身经历的, 也是我自己实验的与个人发展相关的文章.")]),t._v(" "),a("p",[t._v("比如, 如何利用技术变现, 如何面试, 如何选择新的技术, 如何学习, 如何管理自己的时间, 如何管理自己的老板和工作, 如何成为一个 Leader...这些东西一定会对你有用. (但是, 我这里"),a("strong",[t._v("一定不会有速成的东西. 一切都是要花时间和精力的")]),t._v(". 如果你想要速成, 你不应该来订阅我的专栏. )")]),t._v(" "),a("h5",{attrs:{id:"_3-管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-管理"}},[t._v("#")]),t._v(" 3.管理")]),t._v(" "),a("p",[t._v("这 20 年, 我觉得做好技术工作的前提是, 得做好技术的管理工作. 只有管理好了软件工程和技术团队, 技术才能发挥出最大的潜力. 大多数的技术问题都是管理上的问题.")]),t._v(" "),a("p",[t._v("所以, 我会写上一系列的和管理相关的文章, 涵盖管理三个要素: "),a("strong",[t._v("团队, 项目和管理者自己")]),t._v(". 比如, 人员招聘, 绩效考核, 提升士气, 解决冲突, 面对变化, 沟通说服, 项目管理, 任务排期, 会议, 远程管理, 等等.")]),t._v(" "),a("p",[t._v("这些内容都是我在外企工作时, 接受到的世界顶级管理培训机构培训内容, 我会把我的实践写出来分享给你. 这其中一定少不了亚马逊相关的各种实践. 这些东西, 我和很多公司和大佬都讲过, 到目前为止还没有人不赞的.")]),t._v(" "),a("h4",{attrs:{id:"程序员如何用技术变现-上"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#程序员如何用技术变现-上"}},[t._v("#")]),t._v(" 程序员如何用技术变现(上)")]),t._v(" "),a("p",[t._v("一种潜意识:")]),t._v(" "),a("blockquote",[a("p",[t._v("我完全没有必要通过打工听人安排而活着, 而是反过来通过在公司工作提高自己的技能, 让自己可以更为独立和自由地生活.")])]),t._v(" "),a("p",[t._v("因而, 在工作当中, 对于那些没什么技术含量的工作, 我基本上就像是在学生时代那样"),a("strong",[t._v("交作业")]),t._v("就好了. 我"),a("strong",[t._v("想尽一切方法提高交作业的效率")]),t._v(", 比如, "),a("strong",[t._v("提高代码的重用度, 能自动化的就自动化, 和需求人员谈需求, 简化掉需求")]),t._v(", 这样我就可以少干一些活了. 这样一来"),a("strong",[t._v("就可以有更多的时间, 去研究公司里外那些更为核心更有技术含量的技术了")]),t._v(".")]),t._v(" "),a("p",[t._v("一些道理:")]),t._v(" "),a("ul",[a("li",[t._v("**要去经历大多数人经历不到的, 要把学习时间花在那些比较难的地方. **")]),t._v(" "),a("li",[t._v("**要写文章就要写没有人写过的, 或是别人写过, 但我能写得更好的. **")]),t._v(" "),a("li",[t._v("**更重要的是, 技术和知识完全是可以变现的. **")])]),t._v(" "),a("blockquote",[a("p",[t._v("25~35 岁是每个人最宝贵的时光, 应该用在刀刃上.")])]),t._v(" "),a("p",[t._v("需要"),a("strong",[t._v("把时间投在一些主流, 高级和比较有挑战性的技术")]),t._v("上, 这可以保持两件事儿: "),a("strong",[t._v("一个是技术和技能的领先, 二是对技术本质和趋势的敏感度")]),t._v(".")]),t._v(" "),a("p",[t._v("并不是社会不尊重程序员, 只要你能帮上大忙, 就一定会赢得别人的尊重.")]),t._v(" "),a("h4",{attrs:{id:"程序员如何用技术变现-下"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#程序员如何用技术变现-下"}},[t._v("#")]),t._v(" 程序员如何用技术变现(下)")]),t._v(" "),a("h5",{attrs:{id:"_1-如何让自己的技能变现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-如何让自己的技能变现"}},[t._v("#")]),t._v(" 1.如何让自己的技能变现")]),t._v(" "),a("p",[a("strong",[t._v("本质上来说, 程序员是个手艺人, 有手艺的人就能做出别人做不出来的东西, 而付费也是一件很自然的事了")]),t._v(". 那么这个问题就变成如何让自己的手艺更为值钱的问题了.")]),t._v(" "),a("p",[t._v("第一, "),a("mark",[a("strong",[t._v("千里之行, 积于跬步")])]),t._v(". 任何一件成功的大事, 都是通过一个一个的小成功达到的. 所以得确保你有一个一个的小成功.")]),t._v(" "),a("p",[t._v("具体说来, 首先得让自己身边的人有求于你, 或是向别人推荐你. 这就需要你能够掌握大多数人不能掌握的技能或技术, 需要你更多地学习, 并要有更多的别人没有的经验和经历. 一旦你身边的人开始有求于你, 或是向别人推荐你, 你就会被外部的人注意到, 于是其他人就会付费来获取你的帮助. 而一旦你的帮忙对别人来说有效果, 那就会产生效益, 无论是经济效益还是社会效益, 都会为你开拓更大的空间. 你也会因为这样的正向反馈而鼓励自己去学习和钻研更多的东西, 从而得到一个正向的循环. 而且这个正向循环, 一旦开始就停不下来了.")]),t._v(" "),a("p",[t._v("第二, "),a("mark",[a("strong",[t._v("关注有价值的东西")])]),t._v(". 什么是有价值的东西? "),a("strong",[t._v("价值其实是受供需关系影响的, 供大于求, 就没什么价值, 供不应求, 就有价值")]),t._v(". 这意味着你不仅要看到市场, 还要看到技术的趋势, 能够分辨出什么是主流技术, 什么是过渡式的技术. 当你比别人有更好的嗅觉时, 你就能启动得更快, 也就比别人有先发优势.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("关于市场需求")]),t._v(". 你要看清市场, 就需要看看各个公司都在做什么, 他们的难题是什么. 简单来说, 现在的每家公司无论大小都缺人. 但是真的缺人吗? 中国是人口大国, 从不缺少写代码搬砖的人, 真正缺的其实是有能力能够解决技术难题的人, 能够提高团队人效的人. 所以, 从这些方面思考, 你会知道哪些技能才是真正的供不应求, 这样可以让你更有价值.")]),t._v(" "),a("li",[a("strong",[t._v("关于技术趋势")]),t._v(". 要看清技术趋势, 需要了解历史, 就像一个球运动一样, 要知道这个球未来运动的地方, 是需要观察球的已经完成运动的轨迹才知道的. 因此, 了解技术发展轨迹是一件很重要的事. 要看一个新的技术是否顺应技术发展趋势, 需要将一些老技术的本质吃得很透.")])]),t._v(" "),a("p",[t._v("因此, 在学习技术的过程一定要多问自己两个问题: "),a("mark",[a("strong",[t._v("1: 这个技术解决什么问题? 为什么别的同类技术做不到? 2: 为什么是这样解决的? 有没有更好的方式?")])]),t._v("  还有一个简单的判断方法, 如果一个新的技术顺应技术发展趋势, 那么在这个新的技术出现时, 后面一定会有大型的商业公司支持, 这类公司支持得越多, 就说明你越需要关注.")]),t._v(" "),a("p",[t._v("第三, "),a("mark",[a("strong",[t._v("找到能体现价值的地方")])]),t._v(". "),a("strong",[t._v("在一家高速发展的公司中, 技术人员的价值可以达到最大化")]),t._v(".")]),t._v(" "),a("p",[t._v("在一家大公司中, 技术架构和业务已经定型, 基本上没有什么太多的事可以做的. 而且对于已经发展起来的大公司来说, 往往稳定的重要性超过了创新. 此外, 大公司的高级技术人员很多, 多你一个不多, 少你一个不少, 所以你的价值很难被体现出来. 而刚起步的公司, 业务还没有跑顺, 公司的主要精力会放在业务拓展上, 这个时候也不太需要高精尖的技术, 所以技术人员的价值也体现不出来.")]),t._v(" "),a("p",[t._v("只有那些在高速发展的公司, 技术人员的价值才能被最大化地体现出来. "),a("strong",[t._v("比较好的成长路径是, 先进入大公司学习大公司的技术和成功的经验方法, 然后再找到高速成长的公司, 这样就可以实现自己更多的价值. 当然, 这里并不排除在大公司中找到高速发展的业务")]),t._v(".")]),t._v(" "),a("p",[t._v("第四, "),a("mark",[a("strong",[t._v("动手能力很重要")])]),t._v(". 成为一个手艺人, 动手能力是很重要的, 因为在解决任何一个具体问题的时候, 有没有动手能力就成为了关键. 这也是我一直在写代码的原因, 代码里全是细节, 细节是魔鬼, 只有了解了细节, 你才能提出更好或是更靠谱, 可以落地的解决方案. 而不是一些笼统和模糊的东西. 这太重要了.")]),t._v(" "),a("p",[t._v("第五, "),a("mark",[a("strong",[t._v("关注技术付费点")])]),t._v(". 技术付费点基本体现在两个地方, "),a("strong",[t._v("一个是, 能帮别人挣钱的地方; 另一个是, 能帮别人省钱的地方")]),t._v(". 也就是说, 能够帮助别人更流畅地挣钱, 或是能够帮助别人提高效率, 能节省更多的成本, 越直接越好. 而且这个技术或解决方案最好还是大多数人做不到的.")]),t._v(" "),a("p",[t._v("第六, "),a("mark",[a("strong",[t._v("提升自己的能力和经历")])]),t._v(". 付费的前提是信任, 只有你提升自己的能力和经历后, 别人才会对你有一定的信任, 才会觉得你靠谱, 才会给你机会. 而这个信任需要用你的能力和经历来填补. 比如你是一个很知名的开源软件的核心开发人员, 或是你是某知名公司核心项目的核心开发人员, 等等.")]),t._v(" "),a("p",[t._v("第七, "),a("mark",[a("strong",[t._v("找到有价值的信息源")])]),t._v(". 信息社会, 如果你比别人有更好的信息源, 那么你就可以比别人成长得更快. 对于技术人员来说, 我们知道, 几乎所有的技术都源自西方世界, 所以, 你应该走到信息的源头去.")]),t._v(" "),a("p",[t._v("如果你的信息来自朋友圈, 微博, 知乎, 百度或是今日头条, 那么我觉得你完蛋了. 因为这些渠道有价值的信息不多, 有营养的可能只有 1%, 而为了这 1%, 你需要读完 99% 的信息, 太不划算了.")]),t._v(" "),a("p",[t._v('那么如何找到这些信息源呢? 用好 Google 就是一个关键, 比如你在 Google 搜索引擎里输入 "XXX Best Practice", 或是 "Best programming resource"... 你就会找到很多. 而用好这个更好的信息源需要你的英文能力, 因此不断提升英文能力很关键.')]),t._v(" "),a("p",[t._v("第八, "),a("mark",[a("strong",[t._v("输出观点和价值观")])]),t._v(". 真正伟大的公司或是产品都是要输出价值观的. 只有输出了更先进的价值观, 才会获得真正的影响力. 但是, 你要能输出观点和价值观, 并不是一件容易的事, 这需要你的积累和经历, 而不是一朝之功. 因此如果想要让你的技能变现, 这本质上是一个厚积薄发的过程.")]),t._v(" "),a("p",[t._v("第九, "),a("mark",[a("strong",[t._v("朋友圈很重要")])]),t._v(". 一个人的朋友圈很重要, 你在什么样的朋友圈, 就会被什么样的朋友圈所影响. 如果你的朋友圈比较优质, 那么给你介绍过来的事儿和活儿也会好一些.")]),t._v(" "),a("p",[t._v("总之就一句话, "),a("mark",[a("strong",[t._v("会挣钱的人一定是会投资的人")])]),t._v(". 我一直认为, "),a("mark",[a("strong",[t._v("最宝贵的财富并不是钱, 而是你的时间, 时间比钱更宝贵, 因为钱你不用还在那里, 而时间你不用就浪费掉了. 你把你的时间投资在哪些地方, 就意味着你未来会走什么样的路. 所以, 利用好你的时间, 投到一些有意义的地方吧")])]),t._v(".")]),t._v(" "),a("h4",{attrs:{id:"何为技术领导力"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#何为技术领导力"}},[t._v("#")]),t._v(" 何为技术领导力?")]),t._v(" "),a("p",[t._v('本节要谈的并不是 "如何成为一名管理者". 本节想谈的是技术上的领先, 技术上的优势, 而不是一个职称, 一个人事组织者.')]),t._v(" "),a("p",[t._v("可以看到的技术领导力是:")]),t._v(" "),a("ul",[a("li",[t._v("尊重技术, 追求核心基础技术.")]),t._v(" "),a("li",[t._v("追逐自动化的高效率的工具和技术, 同时避免无效率的组织架构和管理.")]),t._v(" "),a("li",[t._v("解放生产力, 追逐人效的提高.")]),t._v(" "),a("li",[t._v("开发抽象和高质量的可以重用的技术组件.")]),t._v(" "),a("li",[t._v("坚持高于社会主流的技术标准和要求.")])]),t._v(" "),a("blockquote",[a("p",[t._v("如何拥有技术领导力?")])]),t._v(" "),a("p",[t._v('作为一个软件工程师怎样才算是拥有"技术领导力"的特质:')]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("能够发现问题")]),t._v(". 能够发现现有方案的问题.")]),t._v(" "),a("li",[a("strong",[t._v("能够提供解决问题的思路和方案, 并能比较这些方案的优缺点")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("能够做出正确的技术决定")]),t._v(". 用什么样的技术, 什么解决方案, 怎样实现来完成一个项目.")]),t._v(" "),a("li",[a("strong",[t._v("能够用更优雅, 更简单, 更容易的方式来解决问题")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("能够提高代码或软件的扩展性, 重用性和可维护性")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("能够用正确的方式管理团队")]),t._v(". 所谓正确的方式, 一方面是, 让正确的人做正确的事, 并发挥每个人的潜力; 另一方面是, 可以提高团队的生产力和人效, 找到最有价值的需求, 用最少的成本实现之. 并且, 可以不断地提高自身和团队的标准.")]),t._v(" "),a("li",[a("strong",[t._v("创新能力")]),t._v(". 能够使用新的方法新的方式解决问题, 追逐新的工具和技术.")])]),t._v(" "),a("p",[t._v("一句话, "),a("mark",[a("strong",[t._v("总是在提供解决问题的思路和方案的人才是有技术领导力的人")])]),t._v(".")]),t._v(" "),a("h4",{attrs:{id:"如何才能拥有技术领导力"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何才能拥有技术领导力"}},[t._v("#")]),t._v(" 如何才能拥有技术领导力?")]),t._v(" "),a("p",[t._v("那么作为一个软件工程师, 怎么让自己拥有技术领导力呢? 总体来说, 是四个方面:")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("扎实的基础技术")]),t._v(";")]),t._v(" "),a("li",[a("strong",[t._v("非同一般的学习能力")]),t._v(";")]),t._v(" "),a("li",[a("strong",[t._v("坚持做正确的事")]),t._v(";")]),t._v(" "),a("li",[a("strong",[t._v("不断得高对自己的要求标准")]),t._v(";")])]),t._v(" "),a("blockquote",[a("p",[t._v("第一, 要吃透基础技术. 基础技术是各种上层技术共同的基础.")])]),t._v(" "),a("p",[t._v("吃透基础技术是为了更好地理解程序的运行原理, 并基于这些基础技术进化出更优化的产品. 吃透基础技术, 有很多好处, 具体来说, 有如下几点.")]),t._v(" "),a("ol",[a("li",[t._v("万丈高楼平地起. 一栋楼能盖多高, 一座大桥能造多长, 重要的是它们的地基. 同样对于技术人员来说, 基础知识越扎实, 走得就会越远.")]),t._v(" "),a("li",[t._v("计算机技术太多了, 但是仔细分析你会发现, 只是表现形式很多, 而基础技术并不多. 学好基础技术, 能让你一通百通, 更快地使用各种新技术, 从而可以更轻松地与时代同行.")]),t._v(" "),a("li",[t._v("很多分布式系统架构, 以及高可用, 高性能, 高并发的解决方案基本都可以在基础技术上找到它们的身影. 所以, 学习基础技术能让你更好地掌握更高维度的技术.")])]),t._v(" "),a("p",[t._v("哪些才是基础技术呢? 下面罗列了一些. 老实说这些技术学起来可能会感到枯燥无味, 但还是鼓励你能够克服人性的弱点, 努力啃完. 具体来说, 可以分成两个部分: "),a("mark",[a("strong",[t._v("编程和系统")])]),t._v(".")]),t._v(" "),a("p",[a("strong",[t._v("1.编程部分")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("C 语言")]),t._v(": 相对于很多其他高级语言来说, C 语言更接近底层. 在具备跨平台能力的前提下, 它可以比较容易地被人工翻译成相应的汇编代码. 它的内存管理更为直接, 可以让我们直接和内存地址打交道. 学习好 C 语言的好处是能掌握程序的运行情况, 并能进行应用程序和操作系统编程(操作系统一般是汇编和 C 语言). 要学好 C 语言, 你可以阅读 C 语言的经典书籍《C 程序设计语言(第 2 版)》, 同时肯定也要多写程序, 多读一些优秀开源项目的源代码. 除了让你更为了解操作系统之外, 学习 C 语言还能让你更清楚地知道程序是怎么精细控制底层资源的, 比如内存管理, 文件操作, 网络通信...")]),t._v(" "),a("li",[a("strong",[t._v("编程范式")]),t._v(": 各种编程语言都有它们各自的编程范式, 用于解决各种问题. 比如面向对象编程(C++, Java), 泛型编程(C++, Go, C#), 函数式编程(JavaScript,  Python, Lisp, Haskell, Erlang)等. 学好编程范式, 有助于培养你的抽象思维, 同时也可以提高编程效率, 提高程序的结构合理性, 可读性和可维护性, 降低代码的冗余度, 进而提高代码的运行效率. 要学习编程范式, 你还可以多了解各种程序设计语言的功能特性.")]),t._v(" "),a("li",[a("strong",[t._v("算法和数据结构")]),t._v(": 算法(及其相应的数据结构)是程序设计的有力支撑. 适当地应用算法, 可以有效地抽象问题, 提高程序的合理性和执行效率. 算法是编程中最最重要的东西, 也是计算机科学中最重要的基础. 任何有技术含量的软件中一定有高级的算法和数据结构. 比如 epoll 中使用了红黑树, 数据库索引使用了 B+ 树.")])]),t._v(" "),a("p",[a("strong",[t._v("2.系统部分")])]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("计算机系统原理")]),t._v(": CPU 的体系结构(指令集 [CISC/RISC], 分支预测, 缓存结构, 总线, DMA, 中断, 陷阱, 多任务, 虚拟内存, 虚拟化等), 内存的原理与性能特点(SRAM, DRAM, DDR-SDRAM 等), 磁盘的原理(机械硬盘 [盘面, 磁头臂, 磁头, 启停区, 寻道等], 固态硬盘 [页映射, 块的合并与回收算法, TRIM 指令等]), GPU 的原理等.")]),t._v(" "),a("p",[t._v("学习计算机系统原理的价值在于, 除了能够了解计算机的原理之外, 还能举一反三地反推出高维度的分布式架构和高并发高可用的架构设计. 比如虚拟化内存就和云计算中的虚拟化的原理是相通的, 计算机总线和分布式架构中的 ESB 也有相通之处, 计算机指令调度, 并发控制可以让你更好地理解并发编程和程序性能调优...这里推荐书籍 "),a("strong",[t._v("《深入理解计算机系统》")]),t._v(" (Randal E. Bryant).")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("操作系统原理和基础")]),t._v(": 进程, 进程管理, 线程, 线程调度, 多核的缓存一致性, 信号量, 物理内存管理, 虚拟内存管理, 内存分配, 文件系统, 磁盘管理等.")]),t._v(" "),a("p",[t._v('学习操作系统的价值在于理解程序是怎样被管理的, 操作系统对应用程序提供了怎样的支持, 抽象出怎样的编程接口(比如 POSIX/Win32 API), 性能特性如何(比如控制合理的上下文切换次数), 怎样进行进程间通信(如管道, 套接字, 内存映射等), 以便让不同的软件配合一起运行等. 要学习操作系统知识, 一是要仔细观察和探索当前使用的操作系统, 二是要阅读操作系统原理相关的图书, 三是要阅读 API 文档(如 man pages 和 MSDN Library), 并编写调用操作系统功能的程序. 这里推荐三本书《UNIX 环境高级编程》, 《UNIX 网络编程》和《Windows 核心编程》. 学习操作系统基础原理的好处是, 这是所有程序运行的物理世界, 无论上层是像 C/C++ 这样编译成机器码的语言, 还是像 Java 这样有 JVM 做中间层的语言, 再或者像 Python/PHP/Perl/Node.js 这样直接在运行时解释的语言, 其在底层都逃离不了操作系统这个物理世界的"物理定律". 了解操作系统的原理, 可以让你更能从本质理解各种语言或是技术的底层原理. 一眼看透本质可以让你更容易地掌握和使用高阶技术.')])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("网络基础")]),t._v(": 计算机网络是现代计算机不可或缺的一部分. 需要了解基本的网络层次结构(ISO/OSI 模型, TCP/IP 协议栈), 包括物理层, 数据链路层(包含错误重发机制), 网络层(包含路由机制), 传输层(包含连接保持机制), 会话层, 表示层, 应用层(在 TCP/IP 协议栈里, 这三层可以并为一层).")]),t._v(" "),a("p",[t._v("比如底层的 ARP 协议, 中间的 TCP/UDP 协议, 以及高层的 HTTP 协议. 这里推荐书籍 "),a("strong",[t._v("《TCP/IP 详解》")]),t._v(" , 学习这些基础的网络协议, 可以为高维分布式架构中的一些技术问题提供很多的技术方案. 比如 TCP 的滑动窗口限流, 完全可以用于分布式服务中的限流方案.")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("数据库原理")]),t._v(": 数据库管理系统是管理数据库的利器. 通常操作系统提供文件系统来管理文件数据, 而文件比较适合保存连续的信息, 如一篇文章, 一个图片等. 但有时需要保存一个名字等较短的信息. 如果单个文件只保存名字这样的几个字节的信息的话, 就会浪费大量的磁盘空间, 而且无法方便地查询(除非使用索引服务).")]),t._v(" "),a("p",[t._v("但数据库则更适合保存这种短的数据, 而且可以方便地按字段进行查询. 现代流行的数据库管理系统有两大类: SQL(基于 B+ 树, 强一致性)和 NoSQL(较弱的一致性, 较高的存取效率, 基于哈希表或其他技术). 学习了数据库原理之后便能了解数据库访问性能调优的要点, 以及保证并发情况下数据操作原子性的方法. 要学习数据库, 你可以阅读各类数据库图书, 并多做数据库操作以及数据库编程, 多观察分析数据库在运行时的性能.")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("分布式技术架构")]),t._v(": 数据库和应用程序服务器在应对互联网上数以亿计的访问量的时候, 需要能进行横向扩展, 这样才能提供足够高的性能. 为了做到这一点, 要学习分布式技术架构, 包括"),a("strong",[t._v("负载均衡, DNS 解析, 多子域名, 无状态应用层, 缓存层, 数据库分片, 容错和恢复机制, Paxos, Map/Reduce 操作, 分布式 SQL 数据库一致性")]),t._v("(以 Google Cloud Spanner 为代表)等知识点.")])])]),t._v(" "),a("p",[t._v("注意, "),a("strong",[t._v("上面这些基础知识通常不是可以速成的")]),t._v(". 虽然说可以在一两年内看完相关的书籍或论文, 但这些基础技术是需要用一生的时间来学习的, 因为基础上的技术和知识, 会随着阅历和经验的增加而有不同的感悟.")]),t._v(" "),a("blockquote",[a("p",[t._v("第二, 提高学习能力. 所谓学习能力, 就是能够很快地学习新技术, 又能在关键技术上深入的能力.")])]),t._v(" "),a("p",[t._v("只有在掌握了上述的基础原理之上, 才能拥有好的学习能力. 下面是提升学习能力的一些做法.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("学习的信息源")]),t._v(". 信息源很重要, 有好的信息源就可以更快速地获取有价值的信息, 并提升学习效率. 常见的信息源有 Google 等搜索引擎, Stack Overflow, Quora 等社区, 图书, API 文档, 论文和博客等.")]),t._v(" "),a("li",[a("strong",[t._v("与高手交流")]),t._v(". 程序员可以通过技术社区以及参加技术会议与高手交流, 也可以通过参加开源项目来和高手切磋. 常闻听君一席话, 胜读十年书便是如此. 与高手交流对程序员的学习和成长很有益处, 不仅有助于了解热门的技术方向及关键的技术点, 更可以通过观察和学习高手的技术思维及解决问题的方式, 提高自己的技术前瞻性和技术决策力. 学习这些牛人的思维方式和看问题的角度, 这会让你有质的提高.")]),t._v(" "),a("li",[a("strong",[t._v("举一反三的思考")]),t._v(". 比如了解了操作系统的缓存和网页缓存以后, 要思考其相同点和不同点. 了解了 C++ 语言的面向对象特性以后, 思考 Java 面向对象的相同点和不同点. 遇到故障的时候, 举一反三, 把同类问题一次性地处理掉.")]),t._v(" "),a("li",[a("strong",[t._v("不怕困难的态度")]),t._v(". 遇到难点, 有时不花一番力气, 是不可能突破的. 此时如果没有不怕困难的态度, 就容易打退堂鼓. 但如果能坚持住, 多思考, 多下功夫, 往往就能找到出路. 绝大多数人是害怕困难的, 所以如果能够不怕困难, 并可以找到解决困难的方法和路径, 时间一长, 就能拥有别人所不能拥有的能力.")]),t._v(" "),a("li",[a("strong",[t._v("开放的心态")]),t._v(". 实现一个目的通常有多种办法. 带有开放的心态, 不拘泥于一个平台, 一种语言, 往往能带来更多思考, 也能得到更好的结果. 而且, 能在不同的方法和方案间做比较, 比较它们的优缺点, 那么你会知道在什么样的场景下用什么样的方案, 你就会比一般人能够有更全面和更完整的思路.")])]),t._v(" "),a("blockquote",[a("p",[t._v("第三, 坚持做正确的事. 做正确的事, 比用正确的方式做事更重要, 因为这样才始终会向目的地靠拢.")])]),t._v(" "),a("p",[t._v("哪些是正确的事呢? 下面是我的观点:")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("提高效率的事")]),t._v(". 要学习和掌握良好的时间管理方式, 管理好自己的时间, 能显著提高自己的效率.")]),t._v(" "),a("li",[a("strong",[t._v("自动化的事")]),t._v(". 程序员要充分利用自己的职业特质, 当看见有可以自动化的步骤时, 编写程序来自动化操作, 可以显著提高效率.")]),t._v(" "),a("li",[a("strong",[t._v("掌握前沿技术的事")]),t._v(". 掌握前沿的技术, 有利于拓展自己的眼界, 也有利于找到更好的工作. 需要注意的是, 有些技术虽然当下很火, 但未必前沿, 而是因为它比较易学易用, 或者性价比高. 由于学习一门技术需要花费不少时间, 你应该选择自己最感兴趣的, 有的放矢地去学习.")]),t._v(" "),a("li",[a("strong",[t._v("知识密集型的事")]),t._v(". 知识密集型是相对于劳动密集型来说的. 基本上, 劳动密集型的事都能通过程序和机器来完成, 而知识密集型的事却仍需要人来完成, 所以人的价值此时就显现出来了. 掌握了领域知识的人的价值依然很高.")]),t._v(" "),a("li",[a("strong",[t._v("技术驱动的事")]),t._v(". 不仅是指用程序驱动的事, 而且还包括一切技术改变生活的事. 比如自动驾驶, 火星登陆等. 就算自己一时用不着, 你也要了解这些, 以便将来这些技术来临时能适应它们.")])]),t._v(" "),a("blockquote",[a("p",[t._v("第四, 高标准要求自己. 只有不断地提高标准, 你才可能越走越高, 所以要以高标准要求自己, 不断地反思, 总结和审视自己, 才能够提升自己.")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Google 的自我评分卡")]),t._v(". Google 的评分卡是在面试 Google 时, 要求应聘人对自己的技能做出评估的工具, 它可以看出应聘人在各个领域的技术水平. 可以参考 Google 的这个评分卡来给自己做评估, 并通过它来不断地提高对自己的要求.")]),t._v(" "),a("li",[a("strong",[t._v("敏锐的技术嗅觉")]),t._v(". 这是一个相对综合的能力, 需要充分利用信息源, GET 到新的技术动态, 并通过参与技术社区的讨论, 丰富自己了解技术的角度. 思考一下是否是自己感兴趣的, 能解决哪些实际问题, 以及其背后的原因, 新技术也好, 旧技术的重大版本变化也罢.")]),t._v(" "),a("li",[a("strong",[t._v("强调实践, 学以致用")]),t._v(". 学习知识, 一定要实际用一用, 可以是工作中的项目, 也可以是自己的项目, 不仅有利于吸收理解, 更有利于深入到技术的本质. 并可以与现有技术对比一下, 同样的问题, 用新技术解决有什么不同, 带来了哪些优势, 还有哪些有待改进的地方.")]),t._v(" "),a("li",[a("strong",[t._v("Lead by Example")]),t._v(". 永远在编程. 不写代码, 就对技术细节不敏感, 就无法做出可以实践的技术决策和方案.")])]),t._v(" "),a("p",[t._v("不要小看这些方法和习惯, 坚持下来很有益处. 谁说下一个改进方向或者重大修改建议, 不可以是你给出的呢, 尤其是在一些开源项目中. 何为领导力, 能力体现之一不就是指明技术未来的发展方向吗?")]),t._v(" "),a("p",[t._v("**吃透基础技术, 提高学习能力, 坚持做正确的事, 高标准要求自己, 不仅会让你全面提升技术技能, 还能很好地锻炼自己的技术思维, 培养技术前瞻性和决策力, 进而形成技术领导力. **")]),t._v(" "),a("p",[t._v("然而, 仅有技术还不够. 作为一名合格的技术领导者, 还需要有解决问题的各种软技能. 比如, 良好的"),a("strong",[t._v("沟通能力, 组织能力, 驱动力, 团队协作能力")]),t._v("等等. 《技术领导之路》, 《卓有成效的管理者》等多本经典图书中均有细致的讲解.")]),t._v(" "),a("h4",{attrs:{id:"推荐阅读-每个程序员都该知道的知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#推荐阅读-每个程序员都该知道的知识"}},[t._v("#")]),t._v(" 推荐阅读:每个程序员都该知道的知识")]),t._v(" "),a("p",[t._v("这里推荐的 5 篇文章, 它们分别是:")]),t._v(" "),a("ul",[a("li",[t._v("Stack Overflow 上推荐的一个经典书单;")]),t._v(" "),a("li",[t._v("美国某大学教授给计算机专业学生的一些建议, 其中有很多的学习资源;")]),t._v(" "),a("li",[t._v("LinkedIn 的高效代码复查实践, 很不错的方法, 值得一读;")]),t._v(" "),a("li",[t._v("一份关于程序语言和 bug 数相关的有趣的报告, 可以让你对各种语言有所了解;")]),t._v(" "),a("li",[t._v("最后是一本关于 C++ 性能优化的电子书.")])]),t._v(" "),a("h5",{attrs:{id:"_1-每个程序员都应该要读的书"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-每个程序员都应该要读的书"}},[t._v("#")]),t._v(" 1.每个程序员都应该要读的书")]),t._v(" "),a("p",[t._v("在 Stack Overflow 上有用户问了一个"),a("a",{attrs:{href:"https://stackoverflow.com/questions/1711/what-is-the-single-most-influential-book-every-programmer-should-read",target:"_blank",rel:"noopener noreferrer"}},[t._v("问题"),a("OutboundLink")],1),t._v(", 大意是想让大家推荐一些每个程序员都应该阅读的最有影响力的图书.")]),t._v(" "),a("p",[t._v("虽然这个问题已经被关闭了, 但这真是一个非常热门的话题. 排在第一位的用户给出了一大串图书的列表, 看上去着实吓人, 不过都是一些相当经典相当有影响力的书.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("《代码大全》")]),t._v("  虽然这本书有点过时了, 而且厚到可以垫显示器, 但是这绝对是一本经典的书.")]),t._v(" "),a("li",[a("strong",[t._v("《程序员修练之道》")]),t._v("  这本书也是相当经典, 我觉得就是你的指路明灯.")]),t._v(" "),a("li",[a("strong",[t._v("《计算机的构造和解释》")]),t._v("  经典中的经典, 必读.")]),t._v(" "),a("li",[a("strong",[t._v("《算法导论》")]),t._v("  美国的本科生教材, 这本书应该也是中国计算机学生的教材.")]),t._v(" "),a("li",[a("strong",[t._v("《设计模式》")]),t._v("  这本书是面向对象设计的经典书籍.")]),t._v(" "),a("li",[a("strong",[t._v("《重构》")]),t._v("  代码坏味道和相应代码的最佳实践.")]),t._v(" "),a("li",[a("strong",[t._v("《人月神话》")]),t._v("  这本书可能也有点过时了. 但还是经典书.")]),t._v(" "),a("li",[a("strong",[t._v("《代码整洁之道》")]),t._v("  细节之处的效率, 完美和简单.")]),t._v(" "),a("li",[a("strong",[t._v("《Effective C++》/《More Effective C++》")]),t._v("  C++ 中两本经典得不能再经典的书. 也许你觉得 C++ 复杂, 但这两本书中带来对代码稳定性的探索方式让人受益, 因为这种思维方式同样可以用在其它地方. 以至于各种模仿者, 比如《Effective Java》也是一本经典书.")]),t._v(" "),a("li",[t._v("**《Unix 编程艺术》, 《Unix 高级环境编程》**也是相关的经典.")])]),t._v(" "),a("h5",{attrs:{id:"_2-每个搞计算机专业的学生应有的知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-每个搞计算机专业的学生应有的知识"}},[t._v("#")]),t._v(" 2.每个搞计算机专业的学生应有的知识")]),t._v(" "),a("p",[a("a",{attrs:{href:"http://matt.might.net/articles/what-cs-majors-should-know/",target:"_blank",rel:"noopener noreferrer"}},[t._v("What every computer science major should know"),a("OutboundLink")],1),t._v(", 每个搞计算机专业的学生应有的知识. 这篇文章的内容摘要如下.")]),t._v(" "),a("p",[t._v("首先, 对于我们每个人来说, 作品集(Portfolio)会比简历(Resume)更有参考意义. 所以, 在自己的简历中应该放上自己的一些项目经历, 或是一些开源软件的贡献, 或是你完成的软件的网址等. 最好有一个自己的个人网址, 上面有一些你做的事, 自己的技能, 经历, 以及你的一些文章和思考会比简历更好.")]),t._v(" "),a("p",[t._v("其次, 计算机专业工作者也要学会与人交流的技巧, 包括如何写演示文稿, 以及面对质疑时如何与人辩论的能力.")]),t._v(" "),a("p",[t._v("最后, 他就各个方面展开计算机专业人士所需要的硬技能: 工程类数学, Unix 哲学和实践, 系统管理, 程序设计语言, 离散数学, 数据结构与算法, 计算机体系结构, 操作系统, 网络, 安全, 密码学, 软件测试, 用户体验, 可视化, 并行计算, 软件工程, 形式化方法, 图形学, 机器人, 人工智能, 机器学习, 数据库等等. 详读本文可以了解计算机专业知识的全貌.")]),t._v(" "),a("h5",{attrs:{id:"_3-linkedin高效的代码复查技巧"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-linkedin高效的代码复查技巧"}},[t._v("#")]),t._v(" 3.LinkedIn高效的代码复查技巧")]),t._v(" "),a("p",[t._v("​"),a("a",{attrs:{href:"https://thenewstack.io/linkedin-code-review/",target:"_blank",rel:"noopener noreferrer"}},[t._v("LinkedIn’s Tips for Highly Effective Code Review"),a("OutboundLink")],1),t._v("​, LinkedIn 的高效代码复查技巧.")]),t._v(" "),a("p",[t._v("对于 Code Review, 我曾经写过一篇文章 《"),a("a",{attrs:{href:"https://coolshell.cn/articles/11432.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("从 Code Review 谈如何做技术"),a("OutboundLink")],1),t._v("》, 讲述了为什么 Code Review 是一件很重要事情. 今天推荐的这篇文章是 LinkedIn 的相关实践.")]),t._v(" "),a("p",[t._v("这篇文章介绍了 LinkedIn 内部实践的 Code Review 形式. 具体来说, LinkedIn 的代码复查有以下几个特点.")]),t._v(" "),a("ul",[a("li",[t._v("从 2011 年开始, 强制要求在团队成员之间做代码复查. Code Review 带来的反馈意见让团队成员能够迅速提升自己的技能水平, 这解决了 LinkedIn 各个团队近年来因迅速扩张带来的技能不足的问题.")]),t._v(" "),a("li",[t._v("通过建立公司范围的 Code Review 工具, 这就可以做跨团队的 Code Review. 既有利于消除 bug, 提升质量, 也有利于不同团队之间经验互通.")]),t._v(" "),a("li",[t._v("Code Review 的经验作为员工晋升的参考因素之一.")]),t._v(" "),a("li",[t._v("Code Review 的一个难点是, Reviewer 可能不了解某块代码修改的背景和目的. 所以 LinkedIn 要求代码签入版本管理系统前, 就对其做清晰的说明, 以便复查者了解其目的, 促进 Review 的进行. 这个方法实在太赞了. 因为很多时候, Reviewer 都会说不了解对方代码的背景或是代码量比较大而无法做 Code Review, 然而他们却没有找到相应的方法解决这个问题. LinkedIn 对提交代码写说明文档这个思路是一个非常不错的方法, 因为代码提交人写文档的过程其实也是重新梳理的过程. 我的个人经验是, 写文档的时候通常会发现自己把事儿干复杂了, 应该把代码再简化一下, 于是就会回头去改代码. 是的, 写文档就是在写代码.")]),t._v(" "),a("li",[t._v('有些 Code Review 工具所允许给出的反馈只是代码怎样修改以变得更好, 但长此以往会让人觉得复查提出的意见都表示原先的代码不够好. 为了提高员工积极性, LinkedIn 的代码复查工具允许提出"这段代码很棒"之类的话语, 以便让好代码的作者得到鼓励. 我认为, 这个方法也很赞, 正面鼓励的价值也不可小看.')]),t._v(" "),a("li",[t._v('为 Code Review 的结果写出有目的性的注释. 比如"消除重复代码", "增加了测试覆盖率", 等等. 长此以往也让团队的价值观得以明确.')]),t._v(" "),a("li",[t._v("Code Review 中, 不但要 Review 提交者的代码, 还要 Reivew 提交者做过的测试. 除了一些单元测试, 还有一些可能是手动的测试. 提交者最好列出所有测试过的案例. 这样可以让 Reviewer 可以做出更多的测试建议, 从而提高质量.")]),t._v(" "),a("li",[t._v("对 Code Review 有明确的期望, 不过分关注细枝末节, 也不要炫技, 而是对要 Review 的代码有一个明确的目标.")])]),t._v(" "),a("h5",{attrs:{id:"_4-编程语言和代码质量的研究报告"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-编程语言和代码质量的研究报告"}},[t._v("#")]),t._v(" 4.编程语言和代码质量的研究报告")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://cacm.acm.org/magazines/2017/10/221326-a-large-scale-study-of-programming-languages-and-code-quality-in-github/",target:"_blank",rel:"noopener noreferrer"}},[t._v("A Large-Scale Study of Programming Languages and Code Quality in GitHub"),a("OutboundLink")],1),t._v(", 编程语言和代码质量的研究报告.")]),t._v(" "),a("p",[t._v("这是一项有趣的研究. 有四个人从 GitHub 上分析了 728 个项目, 6300 万行代码, 近 3 万个提交人, 150 万次 commits, 以及 17 种编程语言(如下图所示), 他们想找到编程语言对软件质量的影响.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/5500ee85f15d4def8362d63b01c921e8-20230731162102-ru0jwn1.png",alt:""}})]),t._v(" "),a("p",[t._v("然后对编程语言做了一个分类, 想找到不同类型的编程语言的 bug 问题. 如下图所示:")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/7a90be3f7f0b018cdeb68435228e0940-20230731162102-puj9eyq.png",alt:""}})]),t._v(" "),a("p",[t._v("以及还对这众多的开源软件做了个聚类, 如下图:")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/f002b52c5d845ecfd069ee15a9d4bb86-20230731162102-5eps2on.png",alt:""}})]),t._v(" "),a("p",[t._v("对 bug 的类型也做了一个聚类, 如下图:")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/6a929ac241731921816655dc35f372c2-20230731162102-wj4e4t1.png",alt:""}})]),t._v(" "),a("p",[t._v("来看一下相关的结果.")]),t._v(" "),a("p",[t._v("首先得出来的第一个结果是, 从查看 bug fix 的 commits 的次数情况来看, C, C++, Objective-C, PHP 和 Python 中有很多很多的 commits 都是和 bug fix 相关的, 而 Clojure, Haskell, Ruby, Scala 在 bug fix 的 commits 的数上明显要少很多. 下图是各个编程语言的 bug 情况. 如果你看到是正数, 说明高于平均水平, 如果你看到是负数, 则是低于平均水平.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/34c9b71c5f4e5f33dc9a6fb68e14f939-20230731162102-5zkra8o.png",alt:""}})]),t._v(" "),a("p",[t._v("第二个结论是, "),a("strong",[t._v("函数式编程语言的 bug 明显比大多数其它语言要好很多")]),t._v(". 有隐式类型转换的语言明显产生的 bug 数要比强类型的语言要少很多. 函数式的静态类型的语言要比函数式的动态类型语言的程序出 bug 的可能性要小很多.")]),t._v(" "),a("p",[t._v("第三, 研究者想搞清是否 bug 数会和软件的领域相关. 比如, 业务型, 中间件型, 框架, lib, 或是数据库. 研究表明, 并没有什么相关性. 下面这个图是各个语言在不同领域的 bug 率.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/acbcbf0b4620803d20fb20da7c234658-20230731162102-rme5dfx.png",alt:""}})]),t._v(" "),a("p",[t._v("第四, 研究人员想搞清楚 bug 的类型是否会和语言有关系. 的确如此, "),a("strong",[t._v("bug 的类型和语言是强相关性的")]),t._v(". 下图是各个语言在不同的 bug 类型的情况. 如果你看到的是正数, 说明高于平均水平, 如果你看到的是负数, 则是低于平均水平.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/919cd06f40946e89c0f4950dcd0546e0-20230731162102-ssy1822.png",alt:""}})]),t._v(" "),a("p",[t._v("也许, 这份报告可以在你评估编程语言时有一定的借鉴作用.")]),t._v(" "),a("h5",{attrs:{id:"_5-电子书-《c-软件性能优化》"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-电子书-《c-软件性能优化》"}},[t._v("#")]),t._v(" 5.电子书:《C++ 软件性能优化》")]),t._v(" "),a("p",[a("a",{attrs:{href:"http://agner.org/optimize/optimizing_cpp.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Optimizing Software in C++ - Agner Fog"),a("OutboundLink")],1),t._v(" - PDF, C++ 软件性能优化.")]),t._v(" "),a("p",[t._v("这本书是所有 C++ 程序员都应该要读的一本书, 它从事无巨细地从语言层面, 编译器层面, 内存访问层面, 多线程层面, CPU 层面讲述了如何对软件性能调优. 实在是一本经典的电子书.")]),t._v(" "),a("h4",{attrs:{id:"go语言-docker和新技术"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#go语言-docker和新技术"}},[t._v("#")]),t._v(" Go语言,Docker和新技术")]),t._v(" "),a("p",[t._v("Go 语言和 Docker 这两种技术已经成为新一代的云计算技术, 而且可以看到他们的发展态势非常迅猛. 总有人会问我是否要学 Go 语言, 是否要学 Docker, Go 和 Docker 能否用在生产环境等等. 从这些问题来看, 对于 Go 语言和 Docker 这两种技术, 国内的技术圈中还有相当大的一部分人在观望. 这里从两个方面来论述一下我的观点和看法.")]),t._v(" "),a("ul",[a("li",[t._v("为什么 Go 语言和 Docker 会是新一代的云计算技术.")]),t._v(" "),a("li",[t._v("作为技术人员, 如何识别什么样的新技术会是未来的趋势.")])]),t._v(" "),a("p",[t._v("这两个问题是相辅相成的, 所以这里把这两个问题揉在一起谈.")]),t._v(" "),a("p",[t._v("综合下来, 我对 Go 语言有如下几点体会.")]),t._v(" "),a("ul",[a("li",[t._v("第一, "),a("strong",[t._v("语言简单, 上手快")]),t._v(". Go 语言的语法特性简直是太简单了, 简单到几乎玩不出什么花招, 直来直去的, 学习难度很低, 容易上手.")]),t._v(" "),a("li",[t._v("第二, "),a("strong",[t._v("并行和异步编程几乎无痛点")]),t._v(". Go 语言的 Goroutine 和 Channel 这两个神器简直就是并发和异步编程的巨大福音. 像 C, C++, Java, Python 和 JavaScript 这些语言的并发和异步的编程方式控制起来就比较复杂了, 并且容易出错, 但 Go 语言却用非常优雅和流畅的方式解决了这个问题.")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/d7a8e05c388ab03a6780cd7af9c0e910-20230731162102-qf8i85y.png",alt:""}})]),t._v(" "),a("ul",[a("li",[t._v("第三, "),a("strong",[t._v("Go 语言的 lib 库麻雀虽小, 五脏俱全")]),t._v(". Go 语言的 lib 库中基本上有绝大多数常用的库, 虽然有些库还不是很好, 但这都不是主要问题, 因为随着技术的发展和成熟, 这些问题肯定也都会随之解决.")]),t._v(" "),a("li",[t._v("第四, "),a("strong",[t._v("C 语言的理念和 Python 的姿态")]),t._v(". C 语言的理念是信任程序员, 保持语言的小巧, 不屏蔽底层且对底层友好, 关注语言的执行效率和性能. 而 Python 的姿态是用尽量少的代码完成尽量多的事. 于是我能够感觉到, Go 语言是想要把 C 和 Python 统一起来, 这是多棒的一件事.")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/3ccc0d560953775d8cc326f48b479476-20230731162102-9d957kx.png",alt:""}})]),t._v(" "),a("p",[t._v("所以, 即便 Go 语言存在诸多的问题, 比如垃圾回收, 异常处理, 泛型编程等, 但相较于上面这几个优势, 我认为这些问题都是些小问题. 于是就毫不犹豫地入坑了.")]),t._v(" "),a("p",[t._v("当然, 一个技术能不能发展起来, 关键还要看三点.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("有没有一个比较好的社区")]),t._v(". 像 C, C++, Java, Python 和 JavaScript 的生态圈都是非常丰富和火爆的. 尤其是有很多商业机构参与的社区那就更是人气爆棚了, 比如 Linux 社区.")]),t._v(" "),a("li",[a("strong",[t._v("有没有一个工业化的标准")]),t._v(". 像 C, C++, Java 这些编程语言都是有标准化组织的. 尤其是 Java, 它在架构上还搞出了像 J2EE 这样的企业级标准.")]),t._v(" "),a("li",[a("strong",[t._v("有没有一个或多个杀手级应用")]),t._v(". C, C++ 和 Java 的杀手级应用不用多说了, 就算是对于 PHP 这样还不能算是一个优秀的编程语言来说, 因为是 Linux 时代的第一个杀手级解决方案 LAMP 中的关键技术, 所以也发展起来了.")])]),t._v(" "),a("p",[t._v("上面提到的三点至关重要, 新的技术只需要占到其中一到两点就已经很不错了, 何况有的技术, 比如 Java 三点全都满足, 所以, Java 的蓬勃发展也在情理之中. 当然除了上面这三点重要的, 还有一些其它的影响因素, 比如:")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("学习难度是否低, 上手是否快")]),t._v(". 这点非常重要, C++ 在这点上越做越不好了.")]),t._v(" "),a("li",[a("strong",[t._v("有没有一个不错的提高开发效率的开发框架")]),t._v(". 如: Java 的 Spring 框架, C++ 的 STL 等.")]),t._v(" "),a("li",[a("strong",[t._v("是否有一个或多个巨型的技术公司作为后盾")]),t._v(". 如: Java 和 Linux 后面的 IBM, Sun...")]),t._v(" "),a("li",[a("strong",[t._v("有没有解决软件开发中的痛点")]),t._v(". 如: Java 解决了 C 和 C++ 的内存管理问题.")])]),t._v(" "),a("p",[t._v("用这些标尺来衡量一下 Go 语言, 可以清楚地看到:")]),t._v(" "),a("ul",[a("li",[t._v("Go 语言容易上手;")]),t._v(" "),a("li",[t._v("Go 语言解决了并发编程和底层应用开发效率的痛点;")]),t._v(" "),a("li",[t._v("Go 语言有 Google 这个世界一流的技术公司在后面;")]),t._v(" "),a("li",[t._v("Go 语言的杀手级应用是 Docker 容器, 而容器的生态圈这几年可谓是发展繁荣, 也是热点领域.")])]),t._v(" "),a("p",[t._v("所以, Go 语言的未来是不可限量的. 个人觉得, Go 可能会吞食很多 C, C++, Java 的项目. 不过, Go 语言所吞食的项目应该主要是"),a("strong",[t._v("中间层的项目, 既不是非常底层也不会是业务层")]),t._v(".")]),t._v(" "),a("p",[t._v("也就是说, Go 语言不会吞食底层到 C 和 C++ 那个级别的, 也不会吞食到上层如 Java 业务层的项目. Go 语言能吞食的一定是 "),a("strong",[t._v("PaaS 上的项目, 比如一些消息缓存中间件, 服务发现, 服务代理, 控制系统, Agent, 日志收集")]),t._v("等等, 他们没有复杂的业务场景, 也到不了特别底层(如操作系统)的软件项目或工具. 而 C 和 C++ 会被打到更底层, Java 会被打到更上层的业务层. 这是我的一个判断.")]),t._v(" "),a("p",[t._v("好了, 再用上面的标尺来衡量一下 Go 语言的杀手级应用 Docker, 会发现基本是一样的.")]),t._v(" "),a("ul",[a("li",[t._v("Docker 容易上手.")]),t._v(" "),a("li",[t._v("Docker 解决了运维中的环境问题以及服务调度的痛点.")]),t._v(" "),a("li",[t._v("Docker 的生态圈中有大公司在后面助力, 比如 Google.")]),t._v(" "),a("li",[t._v("Docker 产出了工业界标准 OCI.")]),t._v(" "),a("li",[t._v("Docker 的社区和生态圈已经出现像 Java 和 Linux 那样的态势.")]),t._v(" "),a("li",[t._v("......")])]),t._v(" "),a("p",[t._v("同样可以看到 Kubernetes 作为服务和容器调度的关键技术一定会是最后的赢家.")]),t._v(" "),a("p",[t._v("关于 Docker 还想多说几句, 这是云计算中 PaaS 的关键技术. 虽然, 这世上在出现 Docker 之前, 几乎所有的要玩公有 PaaS 的公司和产品都玩不起来, 比如: Google 的 GAE, 国内的各种 XAE, 如淘宝的 TAE, 新浪的 SAE 等. 但我还是想说, "),a("strong",[t._v("PaaS 是一个被世界或是被产业界严重低估的平台")]),t._v(".")]),t._v(" "),a("p",[t._v("PaaS 层是承上启下的关键技术, "),a("strong",[t._v("任何一个不重视 PaaS 的公司, 其技术架构都不可能让这家公司成长为一个大型的公司")]),t._v(". 因为 PaaS 层的技术主要能解决下面这些问题.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("软件生产线的问题")]),t._v(". 持续集成和持续发布, 以及 DevOps 中的技术必须通过 PaaS.")]),t._v(" "),a("li",[a("strong",[t._v("分布式服务化的问题")]),t._v(". 分布式服务化的服务高可用, 服务编排, 服务调度, 服务发现, 服务路由, 以及分布式服务化的支撑技术完全是 PaaS 的菜.")]),t._v(" "),a("li",[a("strong",[t._v("提高服务的可用性 SLA")]),t._v(". 提高服务可用性 SLA 所需要的分布式, 高可用的技术架构和运维工具, 也是 PaaS 层提供的.")]),t._v(" "),a("li",[a("strong",[t._v("软件能力的复用")]),t._v(". 软件工程中的核心就是软件能力的复用, 这一点也完美地体现在 PaaS 平台的技术上.")])]),t._v(" "),a("p",[t._v("老实说, 这些问题的关键程度已经到了能判断一家技术驱动公司的研发能力是否靠谱的程度. 没有这些技术, 我认为, 依托技术拓展业务的公司机会就不会很大.")]),t._v(" "),a("p",[t._v("最后说一下, 为什么要早一点地进入这些新技术, 而不是等待这些技术成熟了后再进入. 原因有这么几个.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("技术的发展过程非常重要")]),t._v(". 我进入 Go 和 Docker 的技术不能算早, 但也不算晚, 从 2012 年学习 Go, 再到 2013 年学习 Docker 再到今天, 我清楚地看到了这两种技术的生态圈发展过程. 这个过程中, 我收获最大的并不是这些技术本身, 而是一个"),a("strong",[t._v("技术的变迁和行业的发展")]),t._v(". 从中我看到了非常具体的各种浪潮和思路, 这些东西比起 Go 和 Docker 来说更有价值. 因为这不但让我重新思考我已掌握的技术以及如何更好地解决已有的问题, 而且还让我看到了未来. 我不但有了技术优势, 而且这些知识还让我的技术生涯有了更多的可能性.")]),t._v(" "),a("li",[a("strong",[t._v("这些关键新技术, 可以让你提前抢占技术的先机")]),t._v(". 这一点对一个需要技术领导力的个人或公司来说都是非常重要的. "),a("strong",[t._v("如果一个公司或是个人能够占有技术先机, 就会比其它公司或个人有更大的影响力")]),t._v(". 一旦未来行业需求引爆, 那么这个公司或是个人的影响力就会形成一个比较大的护城河, 并可以快速地从中获取经济利益.")])]),t._v(" "),a("h4",{attrs:{id:"答疑解惑-渴望-热情和选择"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#答疑解惑-渴望-热情和选择"}},[t._v("#")]),t._v(" 答疑解惑:渴望,热情和选择")]),t._v(" "),a("h5",{attrs:{id:"_1-加班太严重完全没有时间学习-怎么办"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-加班太严重完全没有时间学习-怎么办"}},[t._v("#")]),t._v(" 1.加班太严重完全没有时间学习, 怎么办?")]),t._v(" "),a("p",[t._v('我们在通宵打游戏, 追美剧, 泡妞的时候, 从来不会给自己找借口说时间不够. 总是能够挤得出时间来干这些 "顺人性" 的事, 甚至做到废寝忘食, 而不找任何借口.')]),t._v(" "),a("p",[a("strong",[t._v("所以我觉得, 可能并不在于加班和工作强度大到没时间, 关键看你对学习有多少的渴望程度, 对要学的东西有多大的热情. 这点是非常重要的, 因为学习这事其实挺反人性的. 反人性的事基本上都是要付出很多, 而且还要坚持很久. 所以如果对学习没有渴望的话, 或是不能从学习中找到快乐的话, 那么其实是很难坚持的, 无论你有没有时间.")])]),t._v(" "),a("h5",{attrs:{id:"_2-为什么你能够写出这么多东西"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-为什么你能够写出这么多东西"}},[t._v("#")]),t._v(" 2.为什么你能够写出这么多东西?")]),t._v(" "),a("p",[t._v("其实还是上面的那个问题, 就是你对写作这个事有多少的兴趣和热情.")]),t._v(" "),a("p",[t._v("先说一下我对写东西这个事的热情是怎么来的. 从 2002 年开始写东西到今天, 我基本上经历了几个阶段.")]),t._v(" "),a("p",[a("strong",[t._v("第一个阶段, 是学习的阶段")]),t._v(". 因为在我刚入行的时候, 软件公司对文档的要求还是比较高的, 干什么事都要写个文档, 所以, 我就有了写文档的习惯. 不过, 这个阶段, 对于我个人来说, 我会把学习到的东西都以笔记的方式记录下来, 方便我以后可以翻出来看看. 所以, 这个阶段主要还是学习的阶段.")]),t._v(" "),a("p",[a("strong",[t._v("第二个阶段, 是有利益驱动的阶段")]),t._v(". 正如《程序员如何用技术变现》一文中提到的, 因为我写的一篇技术文章, 让我接到了一个培训的私活, 两天时间就挣了我一个月的工资. 说实话, 这件事给了我很大的鼓励, 让我有了更多的热情来写文章.")]),t._v(" "),a("p",[a("strong",[t._v("第三个阶段, 是记录自己观点打自己脸的阶段")]),t._v(". 这个时候, 我遇到了博客火爆的时代, 我看到很多人写博客来记录自己的观点和想法, 我也跟着写博客, 记录一些自己的想法和观点. 时间一长, 我发现有个有趣的事——我看自己好几年前写的东西, 发现要么是我以前记录的观点打了现在的脸, 要么就是现在打了自己过去的脸.")]),t._v(" "),a("p",[t._v("这种有点科幻色彩的跨时空打自己脸的方式, 让我觉得很好, 因为这里面, 我能够看到自己成长的过程, 并且可以及时修正, 这真是太好了.")]),t._v(" "),a("p",[a("strong",[t._v("第四个阶段, 是与他人交互的阶段")]),t._v(". 这个阶段, 我开始写一些观点鲜明, 甚至看上去比较极端或是理想的文章了. 而且我的文章开始有很多人转载和评论, 还时不时地引发争论. 我发现在这个过程中, 我的收获也很大, 因为一旦一件事被真正地讨论起来(而不是点赞和转发), 就会有很多知识命中了我的认知盲区. 虽然这会被别人批评或是指责, 但是, 我能从中收获到更多, 因为我会从不同的观点, 以及别人的批评中, 让自己变得更加完善和成熟. 而且, 我从写作中还能训练自己的表达能力, 这让我能够更好更漂亮地与别人交流和沟通. 这一点对于我们整天面对电脑的技术人员来说, 太重要了.")]),t._v(" "),a("h5",{attrs:{id:"_3-怎样选择自己的人生和职业发展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-怎样选择自己的人生和职业发展"}},[t._v("#")]),t._v(" 3.怎样选择自己的人生和职业发展?")]),t._v(" "),a("p",[t._v("不同的人有不同的想法和追求, 所以这是一个完全没有正确答案的问题. 虽然我给不出具体的答案, 但是我还是可以给出一些相关的思路. 希望这些思想能对你有启发, 能帮助你规划和思考自己的职业或是人生.")]),t._v(" "),a("p",[t._v("总体来说, 我把人生分为两个阶段.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("一个是在 20-30 岁, 这是打基础的阶段")]),t._v(". 在这个阶段, 要的是开阔眼界, 把基础打扎实, 努力学习和成长.")]),t._v(" "),a("li",[a("strong",[t._v("另一个是在 30-40 岁, 这是人生发展的阶段")]),t._v(". 因为整个社会一定会把社会的重担交给这群人, 30-40 岁的人年富力强, 既有经验又有精力, 还敢想敢干, 所以这群人才是整个社会的中流砥柱. 在这个阶段, 你需要明确自己奋斗的方向, 需要做有挑战的事儿, 需要提升自己的技术领导力(关于如何发展技术领导力, 可以参看我在本专栏的相关文章).")])]),t._v(" "),a("p",[t._v("而过了 40 岁, 你的事业和人生就有可能会被定型, 不过这也不是绝对的. 我只是想说, 20-40 岁这 20 年是我们每个人最黄金的发展阶段, 我们每一个人都要好好把握.")]),t._v(" "),a("p",[t._v("除此之外, 再从我的角度给大家一些建议.")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("客观地审视自己")]),t._v(". 找到自己的长处, 不断地在自己的长处上发展自我. 知道自己几斤几两才能清楚自己适合干什么. 不然, 目标设置得过高自己达不到, 反而让自己难受. 在职场上, 审视自己的最佳方式, 就是隔三差五就出去面试一把, 看看自己在市场上能够到什么样的级别. "),a("strong",[t._v("如果你超过了身边的大多数人, 你不妨选择得激进一些冒险一些, 否则, 还是按部就班地来吧")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("确定自己想要什么")]),t._v(". 如果不确定这个事, 你就会纠结, 不知道自己要什么, 也就不知道自己要去哪里. 注意, 你不可能什么都要, 你需要极端地知道自己要什么. "),a("strong",[t._v('所谓"极端", 就是自己不会受到其它东西或其他人的影响, 不会因为这条路上有人退出你会开始怀疑或者迷茫, 也不会因为别的路上有人成功了, 你就会羡慕')]),t._v(".")]),t._v(" "),a("li",[a("mark",[a("strong",[t._v("注重长期的可能性, 而不是短期的功利")])]),t._v(". 20-30 岁应该多去经历一些有挑战的事, 多去选择能给自己带来更多可能性的事. 多去选择能让自己成长的事, 尤其是能让自己开阔眼界的事情. 人最害怕的不是自己什么都不会, 而是自己不知道自己不会.")]),t._v(" "),a("li",[a("mark",[a("strong",[t._v("尽量关注自己会得到的东西, 而不是自己会失去的东西")])]),t._v(". 因为无论你怎么选, 你都会有得有失. (绝大多数人都会考虑自己会失去的, 而不是考虑自己会得到的. )")]),t._v(" "),a("li",[a("mark",[a("strong",[t._v("不要和大众的思维方式一样")])]),t._v(". 因为绝大多数人都是平庸的, 所以如果你的思维方式和大众一样, 这意味着你做出来的选择也会和大众一样平庸. 如果你和大众不一样, 那么只有两种情况, 一个是你比大多数人聪明, 一个是你比大多数人愚蠢.")])]),t._v(" "),a("p",[t._v('很多事情能做到什么程度, 其实在思想的源头就被决定了, 因为它会绝大程度地受到思考问题的出发点, 思维方式, 格局观, 价值观等因素影响. 这些才是最本源的东西, 甚至可以定义成思维的"基因". 就程序员而言, 我认为'),a("strong",[t._v("编码能力很重要, 但是技术视野, 技术洞察力, 以及如何用技术解决问题的能力更为重要")]),t._v(".")]),t._v(" "),a("h4",{attrs:{id:"如何成为一个大家愿意追随的leader"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何成为一个大家愿意追随的leader"}},[t._v("#")]),t._v(" 如何成为一个大家愿意追随的Leader?")]),t._v(" "),a("p",[t._v("之前分享过技术领导力(Leadership)相关的话题, 主要讨论了作为一个技术人, 如何取得技术上的领先优势, 而不是如何成为一个技术管理者. 本节着重聊聊如何成为一个大家愿意跟随的技术领导者(Leader). 注意, Leader 不是管理者, 不是经理, 更不是职称, 而是一个领头人.")]),t._v(" "),a("p",[t._v("所谓领头人和经理或管理者的最大差别就是, 领头人(Leader)是大家愿意追随的, 而经理或管理者(Boss)则是一种行政和职位上的威慑. 说白了, Leader 的影响力来自大家愿意跟随的现象, 而经理或管理者的领导力来自职位和震慑, 这两者是完全不同的.")]),t._v(" "),a("h5",{attrs:{id:"_1-leader和boss的不同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-leader和boss的不同"}},[t._v("#")]),t._v(" 1.Leader和Boss的不同")]),t._v(" "),a("p",[t._v("再或者用通俗的话说, "),a("strong",[t._v("Leader 是大家跟我一起上")]),t._v(", 而 Boss 则是大家给我上, 一个在团队的前面, 一个在团队的后面.")]),t._v(" "),a("p",[t._v("具体来说, 这两者的不同点如下.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Boss 是驱动员工, Leader 是指导员工")]),t._v(". 在面对项目的时候, Boss 制定时间计划, 并且推动(push)和鞭策员工完成工作, 而 Leader 则是和员工一起讨论工作细节, 指导员工关注工作的重点, 和员工一起规划出(work out)工作的方向和计划, 并且在工作中和员工一起解决细节难题, 帮助员工完成工作.")]),t._v(" "),a("li",[a("strong",[t._v("Boss 制造畏惧, Leader 制造热情")]),t._v(". Boss 在工作中是用工作职位级别压人, 用你的绩效考核来制造威慑, 让员工畏惧他, 从而推行工作. 而 Leader 是通过描绘远景, 制造激动人心的目标来鼓舞和触发团队的热情和斗志.")]),t._v(" "),a("li",[a("strong",[t._v("Boss 面对错误喜欢使用人事惩罚的手段, 而 Leader 面对错误喜欢寻找解决问题的技术或管理方法")]),t._v(". 惩罚员工和解决问题完全是两码事, Boss 因为并不懂技术也并不懂问题的细节, 所以他们只能使用惩罚这样的手段, 而 Leader 通常是喜欢解决问题的技术型人才, 所以他们会深入技术细节, 从技术上找到既治标又治本的技术方案或管理方式.")]),t._v(" "),a("li",[a("strong",[t._v("Boss 只是知道怎么做, 而 Leader 则是展示怎么做")]),t._v(". 一个好 Leader 的最大特点就是 Lead by Example, 以身作则, 用身教而不是言传. 而 Boss 只是在说教, 总是在大道理上说的一套又一套, 但从来不管技术细节.")]),t._v(" "),a("li",[a("strong",[t._v("Boss 是用人, 而 Leader 是发展人")]),t._v(". Boss 不关心人的发展, 把人当成劳动力. 而 Leader 则会看到人的潜力和特长, 通过授权, 指导和给员工制定成长计划让员工成长, 从而发展员工. 所以通常可以看到 Boss 总是说自己的员工有这个问题有那个问题, 而 Leader 总是说, 如何让员工成长以解决员工个人的各种问题.")]),t._v(" "),a("li",[a("strong",[t._v("Boss 从团队收割成绩, 而 Leader 则是给予团队成绩")]),t._v(". Boss 通常都会把团队的成绩占为己有, 虽然 Boss 会说这是团队的功劳, 但基本上是一句带过. 而 Leader 则是让团队成功, 让团队的成员站在台前, 自己甘当绿叶和铺路石. Leader 知道只有团队的每个人成功了, 团队才会成功, 所以 Leader 会帮助团队中的每个人更好更流畅地走向成功.")]),t._v(" "),a("li",[a("strong",[t._v("Boss 喜欢命令和控制( Command + Control ), 而 Leader 喜欢沟通和协作( Communication + Cooperation )")]),t._v(" . Boss 喜欢通过命令来控制员工的行为, 从而实现团队的有效运转, 而 Leader 喜欢通过沟通和协作来增加员工的参与感, 从而让员工觉得这是自己的事, 愿意为之付出.")]),t._v(" "),a("li",[a("strong",[t._v('Boss 喜欢说"给我上", 而 Leader 喜欢说"跟我上"')]),t._v(" . Boss 总是躲在团队后面, 让团队冲锋陷阵, 而 Leader 总是冲在前面用自己的行动领着团队浴血奋战.")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/96eb5e2f958a30ac3d4a1561f0d4de41-20230731162102-oc80h0i.png",alt:""}})]),t._v(" "),a("p",[t._v("从上面这些比较, 应该可以看到 Boss 和 Leader 的不同, 相信你已经有了一些了解和认识到什么才是一个真正的 Leader, 什么才是一个 Leader 应有的素质和行为.")]),t._v(" "),a("p",[t._v("下面将结合我的一些经历和经验分享一下, 如何才能成为一个大家愿意追随的人.")]),t._v(" "),a("h5",{attrs:{id:"_2-如何成为众人愿意追随的leader"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-如何成为众人愿意追随的leader"}},[t._v("#")]),t._v(" 2.如何成为众人愿意追随的Leader")]),t._v(" "),a("p",[t._v('说白了, 要成为一个大家愿意追随的人, 那么你需要有以下这些"征兆".')]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("帮人解决问题")]),t._v('. 团队或身边大多数人都在问: "这个问题怎么办?", 而你总是能站出来告诉大家该怎么办.')]),t._v(" "),a("li",[a("strong",[t._v("被人依赖")]),t._v(". 团队或身边大多数人在做比较关键的决定时, 都会来找你咨询意见和想法.")])]),t._v(" "),a("p",[t._v("要有这样的现象, 你需要有技术领导力. 关于技术领导力, 可以参看之前《如何才能拥有技术领导力?》的文章. 有没有技术领导力(Leadership), 是成为一个 Leader 非常关键的因素. 因为人们想要跟随的人通常都是比自己强比自己出色的人, 或是能够跟他学到东西, 能够跟他成长的人.")]),t._v(" "),a("p",[t._v("但是有了技术领导力可能并不够, 作为一个 Leader, 你还需要有其它的一些能力和素质. 比如, 和我一起共事过的人和下属, 他们会把我当成他们的朋友, 他们会和我交流很多在员工和老板间比较禁忌的话题, 比如:")]),t._v(" "),a("ul",[a("li",[t._v("有猎头或是别的公司来挖我的下属, 我的下属会告诉我, 并会征求我的意见. 除了帮他们分析利弊, 有些时候, 我还会帮他们准备面试. 甚至我有时候还会为下属介绍其它公司的工作机会. 不要误会我(Don’t get me wrong), 我并不是不站在公司利益的角度, 我这样做完全是站在公司利益的角度. 你要知道这个世界很大, 一个公司或是一个 Leader 很难做到把人一辈子留下来, 因为人总是需要有不同经历的, 优秀的人更是如此. 既然做不到把人留一辈子, 那么不妨把这件事做得漂亮一些, 这样会让要离开的员工觉得这个 Leader 或是这个公司的胸怀不一般, 可能是他再也碰不到的公司或 Leader, 反而会想留下来, 或是离开后又想回来.")]),t._v(" "),a("li",[t._v("下属会来找我分享他的难处和让他彷徨的事情, 包括吐槽公司. 一般来说, 下属是不会找老板吐槽公司的, 因为这是办公室中的禁忌. 但是作为老板和经理, 其实我们都知道, 员工是一定会吐槽老板和公司的. 既然做不到不让员工吐槽公司, 那么不妨让这件事做得更漂亮一些---可以公开透明地说, 而不是在背后说, 因为在背后说对公司或是团队的伤害更大.")])]),t._v(" "),a("p",[t._v("举了上面两个例子, 我只是想告诉你一个 Leader 除了有技术领导力还需要有其它的素质和人格魅力. 如果你的员工把这些看似禁忌的事和你分享向你倾吐, 说明他们是何等信任你, 何等看重你, 这就说明你对他的价值已经非同寻常了, 这份信任和托付对于一个 Leader 来说要小心呵护.")]),t._v(" "),a("p",[t._v("下面是我罗列的一些比较关键的除了技术领导力之外的一个 Leader 需要的素质.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("赢得他人的信任")]),t._v(". 信任是人类一切活动的基础, 人与人之间的关系是否好, 完全都是基于信任的. "),a("strong",[t._v("对于信任来说, 并不完全是别人相信你能做到某个事, 还有别人愿意向你打开心扉, 和你说他心里面最柔软的东西. 而后者才是真正的信任")]),t._v(". 这还需要你的人格魅力, 你的真诚, 你的可信, 你的价值观和你的情怀等一些诸多因素, 才会让别人愿意找你分享心中的想法和情绪.")]),t._v(" "),a("li",[a("strong",[t._v("开放的心态 + 倾向性的价值观")]),t._v(". 这两个好像太矛盾了, 其实并不是. 对于新生事物要有开放的心态, 对于每个人的观点都有开放的心态, 但并不是要认同所有的观点和事情, 成为一个油腔滑调的人. 也就是说, 我可以听进各种不同观点, 并在讨论中根据自己的价值观对不同的观点做出相应的判断, 而并不是不加判断全部采用. 因为如果你要做一个 Leader, 你需要有明确的方向和观点, 而不是说一些放之四海皆准的完全正确的废话. 我的经验告诉我, 对于各种各样的技术都要持一种比较开放的态度, 可以讨论优缺点, 但不会争个是非对错, 尤其对于新技术来说, 更要开放. 然而, 就价值观来说, 还是需要有倾向性的, 比如, 我就倾向于不加班的文化, 倾向于全栈, 倾向于按职责分工而不是按技能分工, 倾向于做一个 Leader 而不是 Boss, 倾向于技术是第一生产力, 倾向于 OKR 而不是 KPI... "),a("strong",[t._v("我的这些倾向性可以让别人更清楚地知道我是一个什么样的人, 而不会对我琢磨不透, 一会东一会西只会让人觉得你太油了, 反而会产生距离感和厌恶感. 我认为, 倾向性的价值观是别人是否可以跟随你的一个基础")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("Lead by Example")]),t._v(". 用自己的示例来 Lead, 用自己的行为来向大家展示你的 Leadership. 这就是说, 你需要给大家做示范. 很多时候, 道理人人都知道, 但未必人人都会做, 知易行难, 以身示范, 一个示例会比讲一万遍道理都管用. 所以我认为, 对于软件开发来说, 不写代码的架构师是根本不靠谱的. "),a("strong",[t._v("要做一个有人愿意跟随的技术 Leader, 你需要终身写代码, 也就是所谓的 ABC – Always Be Coding. 这样你会得到更多的实际经验, 能够非常明白一个技术方案的优缺点, 实现复杂度, 知道什么是 Best Practice, 你的方案才会更具执行力和实践性. 当有了执行力, 你就会获得更多的成就, 而这些成就反过来会让更多的人来跟随你")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("保持热情和冲劲")]),t._v(". 在这个世界上, 有太多的东西会让人产生沮丧, 不满, 彷徨, 迷茫, 疲惫等这些负面情绪, 但是几乎所有的人都不会喜欢在这样的情绪中生活, 每个人都会去追求更为积极更为正面的生活方式. 所以, 作为一个 Leader 无论在什么情况下, 你都需要保持热情和冲劲, 只有这样, 你才会让别人有跟随的想法和冲动. 但是, "),a("strong",[t._v("所谓的保持热情和冲劲, 并不是自欺欺人, 也不是文过饰非, 因为掩耳盗铃, 掩盖问题, 强颜欢笑的方式根本不是热情. 真正的热情和冲劲是, 正视问题, 正视不足, 正视错误, 从中进行反思和总结得到更好的解决方案, 不怕困难, 迎难而上")]),t._v('. 正如鲁迅先生在《记念刘和珍君》中所说的那句话---"真的猛士, 敢于直面惨淡的人生, 敢于正视淋漓的鲜血".')]),t._v(" "),a("li",[a("strong",[t._v("能够抓住重点, 看透事物的本质")]),t._v(". 这个世界太复杂, 有太多的因素和杂音影响着我们的判断和决定. 绝大多数人都会在多重因素中迷失或是纠结. 作为一个 Leader, 能够抓住主要矛盾, 看清事物的本质, 给出清楚的观点或方向, 简化复杂的事情, 传道解惑, 开启民智, 让人豁然开朗, 醍醐灌顶, 才会让人追随之.")]),t._v(" "),a("li",[a("strong",[t._v("描绘令人激动的方向, 提供令人向住的环境")]),t._v(". 我相信每个人心中都有激动和理想, 就算是被现实摧残得最凶残的人, 他们已经忘却了心中那些曾经的激动和理想, 但我相信也只是暂时的. 一个好的 Leader 一定会把每个人心中最真善美的东西呼唤出来, 并且还能让人相信这是有机会有可能做到的.")]),t._v(" "),a("li",[a("strong",[t._v("甘当铺路石, 为他人创造机会")]),t._v(". 别人愿意跟随你, 愿意和你共事, 有一部分原因是你能够给别人带来更多的可能性和机会, 别人觉得和你在一起能够成长, 能够进步, 你能够带着大家到达更远的地方. 帮助别人其实就是帮助自己, 成就他人其实也是在成就自己, 这就像一个好的足球队一样, 球队中的人都互相给队友创造机会, 整个团队成功了, 球队的每个人也就成功了. 作为一个好的 Leader, 你一定要在团队中创造好这样的文化和风气.")])]),t._v(" "),a("p",[t._v("做一个好的 Leader 真的不容易, 你需要比大家强很多, 需要比大家付出更多; 需要容天下难容之事, 还需要保持热情和朝气; 需要带领团队守护理想, 还需要直面困难迎刃而上...")]),t._v(" "),a("p",[t._v("也许, 你不必做一个 Leader, 但是如果你有想跟随的人, 你应该去跟随这样的 Leader!")]),t._v(" "),a("h4",{attrs:{id:"程序中的错误处理-错误返回码和异常捕捉"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#程序中的错误处理-错误返回码和异常捕捉"}},[t._v("#")]),t._v(" 程序中的错误处理:错误返回码和异常捕捉")]),t._v(" "),a("p",[t._v("本节来讨论一下程序中的错误处理. 也许你会觉得这个事没什么意思, 处理错误的代码并不难写. 但你想过没有, 要把错误处理写好, 并不是件容易的事情. 另外, 任何一个稳定的程序中都会有大量的代码在处理错误, 所以处理错误是程序中一件比较重要的事情. 这里会用两篇文章来系统地讲一下错误处理的各种方式和相关实践.")]),t._v(" "),a("h5",{attrs:{id:"_1-传统的错误检查"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-传统的错误检查"}},[t._v("#")]),t._v(" 1.传统的错误检查")]),t._v(" "),a("p",[t._v("首先, 处理错误最直接的方式是通过"),a("strong",[t._v("错误码")]),t._v(", 这也是传统的方式, 在过程式语言中通常都是用这样的方式处理错误的. 比如 C 语言, 基本上来说, 其通过函数的返回值标识是否有错, 然后通过全局的 "),a("code",[t._v("errno")]),t._v("​ 变量并配合一个 "),a("code",[t._v("errstr")]),t._v("​ 的数组来告诉你为什么出错.")]),t._v(" "),a("p",[t._v("为什么是这样的设计? 道理很简单, 除了可以共用一些错误, 更重要的是这其实是一种妥协. 比如: "),a("code",[t._v("read()")]),t._v(", "),a("code",[t._v("write()")]),t._v(", "),a("code",[t._v("open()")]),t._v(" 这些函数的返回值其实是返回有业务逻辑的值. 也就是说, 这些函数的返回值有两种语义, 一种是成功的值, 比如 "),a("code",[t._v("open()")]),t._v(" 返回的文件句柄指针 "),a("code",[t._v("FILE*")]),t._v(" , 或是错误 "),a("code",[t._v("NULL")]),t._v(". 这样会导致调用者并不知道是什么原因出错了, 需要去检查 "),a("code",[t._v("errno")]),t._v(" 来获得出错的原因, 从而可以正确地处理错误.")]),t._v(" "),a("p",[t._v("一般而言, 这样的错误处理方式在大多数情况下是没什么问题的. 但是也有例外的情况, 来看一下下面这个 C 语言的函数:")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("atoi")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v('这个函数是把一个字符串转成整型. 但是问题来了, 如果一个要传的字符串是非法的(不是数字的格式), 如 "ABC" 或者整型溢出了, 那么这个函数应该返回什么呢? '),a("strong",[t._v("出错返回, 返回什么数都不合理, 因为这会和正常的结果混淆在一起")]),t._v(". 比如, 返回 "),a("code",[t._v("0")]),t._v('​, 那么会和正常的对 "0" 字符的返回值完全混淆在一起. 这样就无法判断出错的情况. 你可能会说, 是不是要检查一下 '),a("code",[t._v("errno")]),t._v("​, 按道理说应该是要去检查的, 但在 C99 的规格说明书中可以看到这样的描述:")]),t._v(" "),a("blockquote",[a("p",[t._v("7.20.1")]),t._v(" "),a("p",[t._v("The functions atof, atoi, atol, and atoll need not affect the value of the integer expression errno on an error. If the value of the result cannot be represented, the behavior is undeﬁned.")])]),t._v(" "),a("p",[t._v("像 "),a("code",[t._v("atoi()")]),t._v("​, "),a("code",[t._v("atof()")]),t._v("​, "),a("code",[t._v("atol()")]),t._v("​ 或是 "),a("code",[t._v("atoll()")]),t._v("​ 这样的函数是不会设置 "),a("code",[t._v("errno")]),t._v("​ 的, 而且还说了, 如果结果无法计算的话, 行为是 "),a("code",[t._v("undefined")]),t._v("​. 所以后来, libc 又给出了一个新的函数 "),a("code",[t._v("strtol()")]),t._v("​, 这个函数在出错的时会设置全局变量 "),a("code",[t._v("errno")]),t._v("​:")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("strtol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("restrict str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("restrict endptr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" base"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("于是就可以这样使用:")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" val "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("strtol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("in_str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("endptr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 10 的意思是 10 进制")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果无法转换")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("endptr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("mark"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fprintf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stderr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"No digits were found\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("EXIT_FAILURE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果整型溢出了")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("errno "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("mark"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ERANGE "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("mark"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" LONG_MAX "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" val "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("mark"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" LONG_MIN"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fprintf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stderr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ERROR: number out of range for LONG\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("EXIT_FAILURE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果是其它错误")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("errno "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" val "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("perror")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"strtol"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("EXIT_FAILURE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br")])]),a("p",[t._v("虽然, "),a("code",[t._v("strtol()")]),t._v("​ 函数解决了 "),a("code",[t._v("atoi()")]),t._v("​ 函数的问题, 但还是能感觉到不是很舒服和自然.")]),t._v(" "),a("p",[t._v("因为这种用 "),a("code",[t._v("返回值")]),t._v("​ + "),a("code",[t._v("errno")]),t._v("​ 的错误检查方式会有一些问题:")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("程序员一不小心就会忘记返回值的检查")]),t._v(", 从而造成代码的 Bug;")]),t._v(" "),a("li",[t._v("函数接口非常不纯洁, "),a("strong",[t._v("正常值和错误值混淆在一起")]),t._v(", 导致语义有问题.")])]),t._v(" "),a("p",[t._v("所以, 后来有一些类库就开始区分这样的事情. 比如, Windows 的系统调用开始使用 "),a("code",[t._v("HRESULT")]),t._v("​ 的返回来统一错误的返回值, 这样可以明确函数调用时的返回值是成功还是错误. 但这样一来, 函数的 input 和 output 只能通过函数的参数来完成, 于是出现了所谓的 "),a("code",[t._v("入参")]),t._v("​ 和 "),a("code",[t._v("出参")]),t._v("​ 这样的区别.")]),t._v(" "),a("p",[t._v("然而, 这又使得函数接入中参数的语义变得复杂, 一些参数是入参, 一些参数是出参, 函数接口变得复杂了一些. 而且, 依然没有解决函数的成功或失败可以被人为忽略的问题.")]),t._v(" "),a("h5",{attrs:{id:"_2-多返回值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-多返回值"}},[t._v("#")]),t._v(" 2.多返回值")]),t._v(" "),a("p",[t._v("于是有一些语言"),a("strong",[t._v("通过多返回值")]),t._v("来解决这个问题, 比如 Go 语言. Go 语言的很多函数都会返回 "),a("code",[t._v("result, err")]),t._v("​ 两个值, 于是:")]),t._v(" "),a("ul",[a("li",[t._v("参数上基本上就是入参, 而返回接口"),a("strong",[t._v("把结果和错误分离")]),t._v(", 这样使得函数的接口语义清晰;")]),t._v(" "),a("li",[t._v("而且 Go 语言中的错误参数如果要忽略, 需要显式地忽略, 用 "),a("code",[t._v("_")]),t._v("​ 这样的变量来忽略;")]),t._v(" "),a("li",[t._v("另外, 因为返回的 "),a("code",[t._v("error")]),t._v("​ 是个接口(其中只有一个方法 "),a("code",[t._v("Error()")]),t._v("​, 返回一个 "),a("code",[t._v("string")]),t._v("​ ), 所以可以扩展自定义的错误处理.")])]),t._v(" "),a("p",[t._v("比如下面这个 JSON 语法的错误:")]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" SyntaxError "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    msg    "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// description of error")]),t._v("\n    Offset "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// error occurred after reading Offset bytes")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("SyntaxError"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("msg "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("在使用上会是这个样子:")]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" err "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" dec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Decode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" err "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" serr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ok "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("json"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("SyntaxError"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" ok "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        line"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" col "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("findLine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" serr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Offset"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Errorf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s:%d:%d: %v"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" line"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" col"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" err\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("上面这个示例来自 Go 的官方文档 《"),a("a",{attrs:{href:"https://blog.golang.org/error-handling-and-go",target:"_blank",rel:"noopener noreferrer"}},[t._v("Error Handling and Go"),a("OutboundLink")],1),t._v("》.")]),t._v(" "),a("p",[t._v("多说一句, 如果一个函数返回了多个不同类型的 "),a("code",[t._v("error")]),t._v("​, 也可以使用下面这样的方式:")]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" err "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("json"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("SyntaxError"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ZeroDivisionError"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("NullPointerError"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("p",[t._v("但即便像 Go 这样的语言能让错误处理语义更清楚, 而且还有可扩展性, 也有其问题. 如果写过一段时间的 Go 语言, 你就会明白其中的痛苦--- "),a("code",[t._v("if err != nil")]),t._v("​ 这样的语句简直是写到吐, 只能在 IDE 中定义一个自动写这段代码的快捷键. 而且正常的逻辑代码会被大量的错误处理打得比较凌乱.")]),t._v(" "),a("h5",{attrs:{id:"_3-资源清理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-资源清理"}},[t._v("#")]),t._v(" 3.资源清理")]),t._v(" "),a("p",[t._v("程序出错时需要对已分配的一些资源做清理, 在传统的玩法下, 每一步的错误都要去清理前面已分配好的资源. 于是就出现了 "),a("code",[t._v("goto fail")]),t._v(" 这样的错误处理模式. 如下所示:")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name function"}},[t._v("FREE")]),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("free")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n                 "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("fname"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("lname"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("mname"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tfname "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("calloc")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" fname "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("goto")]),t._v(" fail"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tlname "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("calloc")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" lname "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("goto")]),t._v(" fail"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tmname "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("calloc")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" mname "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("goto")]),t._v(" fail"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  \n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n \n  \nfail"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FREE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FREE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FREE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ReportError")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ERR_NO_MEMORY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br")])]),a("p",[t._v("这样的处理方式虽然可以, 但是会有潜在的问题. 最主要的一个问题就是不能在中间的代码中有 "),a("code",[t._v("return")]),t._v("​ 语句, 因为需要清理资源. 在维护这样的代码时需要格外小心, 因为一不注意就会导致代码有资源泄漏的问题.")]),t._v(" "),a("p",[t._v("于是, C++ 的 RAII(Resource Acquisition Is Initialization)机制使用面向对象的特性可以容易地处理这个事情. RAII 其实使用 C++ 类的机制, 在构造函数中分配资源, 在析构函数中释放资源. 下面看个例子.")]),t._v(" "),a("p",[t._v("先看一个不好的示例:")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("mutex m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bad")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 请求互斥")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 若 f() 抛异常, 则互斥绝不被释放")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("everything_ok")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 提早返回, 互斥绝不被释放")]),t._v("\n    m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unlock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 若 bad() 抵达此语句, 互斥才被释放")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("p",[t._v("上面这个例子, 在函数的第三条语句提前返回了, 直接导致 "),a("code",[t._v("m.unlock()")]),t._v("​ 没有被调用, 这样会引起死锁问题. 来看一下用 RAII 的方式是怎样解决这个问题的.")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 首先, 先声明一个 RAII 类, 注意其中的构造函数和析构函数")]),t._v("\nclass LockGuard "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\npublic"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LockGuard")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("mutex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("_m")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LockGuard")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unlock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nprivate"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\tstd"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("mutex"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" _m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 然后, 来看一下, 怎样使用的")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("good")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tLockGuard "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lg")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// RAII 类: 构造时, 互斥量请求加锁")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                             "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 若 f() 抛异常, 则释放互斥")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("everything_ok")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 提早返回, LockGuard 析构时, 互斥量被释放")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("                                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 若 good() 正常返回, 则释放互斥")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br")])]),a("p",[t._v("在 Go 语言中, 使用 "),a("code",[t._v("defer")]),t._v("​ 关键字也可以做到这样的效果. 参看下面的示例:")]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Close")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c io"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Closer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\terr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Close")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" err "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tlog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fatal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" err "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Open")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" err "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tlog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fatalf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"error opening 'a'\\n\"")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Close")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用 defer 关键字在函数退出时关闭文件. ")]),t._v("\n \n\tr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" err "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Open")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" err "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tlog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fatalf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"error opening 'b'\\n\"")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Close")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用 defer 关键字在函数退出时关闭文件. ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br")])]),a("p",[t._v("不知道从上面这三个例子来看, 不同语言的错误处理, 你自己更喜欢哪个呢? 就代码的易读和干净而言, 我更喜欢 C++ 的 RAII 模式, 然后是 Go 的 defer 模式, 最后才是 C 语言的 goto fail 模式.")]),t._v(" "),a("h5",{attrs:{id:"_4-异常捕捉处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-异常捕捉处理"}},[t._v("#")]),t._v(" 4.异常捕捉处理")]),t._v(" "),a("p",[t._v("上面讲了错误检查和程序出错后对资源的清理这两个事. 能把这个事做得比较好的其实是 "),a("code",[t._v("try - catch - finally")]),t._v("​ 这个编程模式.")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正常的业务代码")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception1")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 处理异常 Exception1 的代码")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception2")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 处理异常 Exception2 的代码")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 资源清理的代码")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("p",[t._v("**把正常的代码, 错误处理的代码, 资源清理的代码分门别类, 看上去非常干净. ** 有一些人明确表示不喜欢 "),a("code",[t._v("try - catch")]),t._v("​ 这种错误处理方式, 比如著名的软件工程师"),a("a",{attrs:{href:"https://www.joelonsoftware.com/2005/05/11/making-wrong-code-look-wrong/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Joel Spolsky"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("p",[t._v("但是, 我想说一下, "),a("code",[t._v("try - catch - finally")]),t._v("​ 这样的异常处理方式有如下一些好处:")]),t._v(" "),a("ul",[a("li",[t._v("函数接口在 input(参数)和 output(返回值)以及错误处理的语义是比较清楚的.")]),t._v(" "),a("li",[t._v("正常逻辑的代码可以与错误处理和资源清理的代码分开, 提高了代码的"),a("strong",[t._v("可读性")]),t._v(".")]),t._v(" "),a("li",[t._v("异常不能被忽略(如果要忽略也需要 catch 住, 这是显式忽略).")]),t._v(" "),a("li",[t._v("在面向对象的语言中(如 Java), "),a("strong",[t._v("异常是个对象")]),t._v(", 所以可以实现"),a("strong",[t._v("多态式的 catch")]),t._v(".")]),t._v(" "),a("li",[t._v("与状态返回码相比, 异常捕捉有一个显著的好处是, 函数可以嵌套调用, 或是链式调用. 比如: "),a("code",[t._v("int x = add(a, div(b, c));")]),t._v("​ 或 "),a("code",[t._v("Pizza p = PizzaBuilder().SetSize(sz).SetPrice(p)...;")]),t._v("​.")])]),t._v(" "),a("p",[t._v("当然, 你可能会觉得异常捕捉对程序的性能是有影响的, 这句话也对也不对. 原因是这样的:")]),t._v(" "),a("ul",[a("li",[t._v("异常捕捉的确是对性能有影响的, 那是因为一旦异常被抛出, 函数也就跟着 return 了. 而程序在执行时需要处理函数栈的上下文, 这会导致性能变得很慢, 尤其是函数栈比较深的时候.")]),t._v(" "),a("li",[t._v("但从另一方面来说, 异常的抛出基本上表明程序的错误. 程序在绝大多数情况下, 应该是在没有异常的情况下运行的, 所以有异常的情况应该是少数的情况, 不会影响正常处理的性能问题.")])]),t._v(" "),a("p",[t._v("总体而言, 我还是觉得 "),a("code",[t._v("try - catch - finally")]),t._v(" 这样的方式是很不错的. 而且这个方式比返回错误码在诸多方面都更好.")]),t._v(" "),a("p",[t._v("但是, "),a("code",[t._v("try - catch - finally")]),t._v("​ 有个致命的问题, 那就是在"),a("strong",[t._v("异步运行")]),t._v("的世界里的问题. try 语句块里的函数运行在另外一个线程中, 其中抛出的异常无法在调用者的这个线程中被捕捉. 这个问题就比较大了.")]),t._v(" "),a("h5",{attrs:{id:"_5-错误返回码vs异常捕捉"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-错误返回码vs异常捕捉"}},[t._v("#")]),t._v(" 5.错误返回码VS异常捕捉")]),t._v(" "),a("p",[t._v("是返回错误状态, 还是用异常捕捉的方式处理错误, 可能是一个很容易引发争论的问题. 有人说, 对于一些偏底层的错误, 比如: 空指针, 内存不足等, 可以使用返回错误状态码的方式, 而对于一些上层的业务逻辑方面的错误, 可以使用异常捕捉. 这么说有一定道理, 因为偏底层的函数可能用得更多一些. 但是我并不这么认为.")]),t._v(" "),a("p",[a("strong",[t._v("前面也比较过两者的优缺点, 总体而言, 似乎异常捕捉的优势更多一些. 但是我觉得应该从场景上来讨论这个事才是正确的姿势")]),t._v(".")]),t._v(" "),a("p",[t._v("要讨论场景, 需要先把要处理的错误分好类别, 这样有利于简化问题.")]),t._v(" "),a("p",[t._v("因为, 错误其实是很多的, 不同的错误需要有不同的处理方式. 但错误处理是有一些通用规则的. 为了讲清楚这个事, 需要把错误来分个类. 个人觉得错误可以分为三个大类.")]),t._v(" "),a("ul",[a("li",[a("mark",[a("strong",[t._v("资源的错误")])]),t._v(". 当代码去请求一些资源时导致的错误, 比如打开一个没有权限的文件, 写文件时出现的写错误, 发送文件到网络端发现网络故障的错误等等. **这一类错误属于程序运行环境的问题. 对于这类错误, 有的可以处理, 有的则无法处理. 比如内存耗尽, 栈溢出或是一些程序运行时关键性资源不能满足等等这些情况, 只能停止运行, 甚至退出整个程序. **")]),t._v(" "),a("li",[a("mark",[a("strong",[t._v("程序的错误")])]),t._v(". 比如: 空指针, 非法参数等. "),a("strong",[t._v("这类是自己程序的错误, 需要记录下来, 写入日志, 最好触发监控系统报警")]),t._v(".")]),t._v(" "),a("li",[a("mark",[a("strong",[t._v("用户的错误")])]),t._v(". 比如: Bad Request, Bad Format 等这类由用户不合法输入带来的错误. "),a("strong",[t._v("这类错误基本上是在用户的 API 层上出现的问题")]),t._v(". 比如解析一个 XML 或 JSON 文件, 或是用户输入的字段不合法之类的. **对于这类问题, 需要向用户端报错, 让用户自己处理修正他们的输入或操作. 然后正常执行, 但是需要做统计, 统计相应的错误率, 这样有利于改善软件或是侦测是否有恶意的用户请求. **")])]),t._v(" "),a("p",[t._v("可以看到, 这三类错误中, 有些是希望杜绝发生的, 比如程序的 Bug, 有些则是杜绝不了的, 比如用户的输入. 而对于程序运行环境中的一些错误, 则是希望可以恢复的. 也就是说希望可以通过重试或是妥协的方式来解决这些环境的问题, 比如重建网络连接, 重新打开一个新的文件.")]),t._v(" "),a("p",[t._v("所以是不是可以这样来在逻辑上分类:")]),t._v(" "),a("ul",[a("li",[a("mark",[a("strong",[t._v("对于并不期望会发生的事, 可以使用异常捕捉;")])])]),t._v(" "),a("li",[a("mark",[a("strong",[t._v("对于觉得可能会发生的事, 使用返回码.")])])])]),t._v(" "),a("p",[t._v("比如, 如果函数参数传入的对象不应该是一个 null 对象, 那么一旦传入 null 对象后, 函数就可以抛异常, 因为并不期望总是会发生这样的事. 而对于一个需要检查用户输入信息是否正确的事, 比如: 电子邮箱的格式, 用返回码可能会好一些.")]),t._v(" "),a("p",[a("strong",[t._v("所以对于上面三种错误的类型来说, 程序中的错误, 可能用异常捕捉会比较合适; 用户的错误, 用返回码比较合适; 而资源类的错误, 要分情况, 是用异常捕捉还是用返回值, 要看这事是不应该出现的, 还是经常出现的.")])]),t._v(" "),a("p",[a("mark",[a("strong",[t._v("当然这只是一个大致的实践原则, 并不代表所有的事都需要符合这个原则.")])])]),t._v(" "),a("p",[t._v("除了用错误的分类来判断是否用返回码还是用异常捕捉之外, 还要从程序设计的角度来考虑哪种情况下使用异常捕捉更好, 哪种情况下使用返回码更好. 因为异常捕捉在编程上的好处比函数返回值好很多, 所以很多使用异常捕捉的代码会更易读也更健壮一些. 而返回码容易被忽略, 所以使用返回码的代码需要做好测试才能得到更好的软件质量.")]),t._v(" "),a("p",[t._v("不过也要知道, 在某些情况下, 只能使用其中的一个, 比如:")]),t._v(" "),a("ul",[a("li",[t._v("在 C++ 重载操作符的情况下, 就很难使用错误返回码, 只能抛异常;")]),t._v(" "),a("li",[t._v("异常捕捉只能在同步的情况下使用, 在异步模式下, 抛异常这事就不行了, 需要通过检查子进程退出码或是回调函数来解决;")]),t._v(" "),a("li",[t._v("**在分布式的情况下, 调用远程服务只能看错误返回码, 比如 HTTP 的返回码. **")])]),t._v(" "),a("p",[t._v("所以在大多数情况下, "),a("strong",[t._v("会混用这两种报错的方式, 有时候还会把异常转成错误码(比如 HTTP 的 RESTful API), 也会把错误码转成异常(比如对系统调用的错误)")]),t._v(" .")]),t._v(" "),a("p",[t._v('总之, "报错的类型" 和 "错误处理" 是紧密相关的, 错误处理方法多种多样, 而且会在不同的层面上处理错误. 有些底层错误就需要自己处理掉(比如: 底层模块会自动重建网络连接), 而有一些错误需要更上层的业务逻辑来处理(比如: 重建网络连接不成功后只能让上层业务来处理怎么办? 降级使用本地缓存还是直接报错给用户?).')]),t._v(" "),a("p",[t._v("所以, 不同的错误类型再加上不同的错误处理会导致代码组织层面上的不同, 从而有使用不同的方式. 也就是说, "),a("strong",[t._v("使用错误码还是异常捕捉主要还是看错误处理流程以及代码组织怎么写会更清楚")]),t._v(".")]),t._v(" "),a("p",[t._v("通过学习今天的内容, 你是不是已经对如何处理程序中的错误, 以及在不同情况下怎样选择错误处理方法, 有了一定的认知和理解呢? 然而, "),a("strong",[t._v("这些知识和经验仅在同步编程世界中适用. 因为在异步编程世界里, 被调用的函数是被放到另外一个线程里运行的, 所以本文中的两位主角, 不管是错误返回码, 还是异常捕捉, 都难以发挥其威力")]),t._v(".")]),t._v(" "),a("h4",{attrs:{id:"程序中的错误处理-异步编程以及我的最佳实践"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#程序中的错误处理-异步编程以及我的最佳实践"}},[t._v("#")]),t._v(" 程序中的错误处理:异步编程以及我的最佳实践")]),t._v(" "),a("p",[t._v("上一篇讨论了错误返回码和异常捕捉, 以及在不同情况下该如何选择和使用. 本文中会接着讲两个有趣的话题: "),a("strong",[t._v("异步编程世界里的错误处理方法, 以及我在实战中总结出来的错误处理最佳实践")]),t._v(".")]),t._v(" "),a("h5",{attrs:{id:"_1-异步编程世界里的错误处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-异步编程世界里的错误处理"}},[t._v("#")]),t._v(" 1.异步编程世界里的错误处理")]),t._v(" "),a("p",[t._v("在异步编程的世界里, 因为被调用的函数是被放到了另外一个线程里运行, 这将导致:")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("无法使用返回码")]),t._v('. 因为函数在 "被" 异步运行中, 所谓的返回只是把处理权交给下一条指令, 而不是把函数运行完的结果返回. '),a("strong",[t._v("所以, 函数返回的语义完全变了, 返回码也没有用了")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("无法使用抛异常的方式")]),t._v(". 因为除了上述的函数立马返回的原因之外, 抛出的异常也在另外一个线程中, 不同线程中的栈是完全不一样的, 所以主线程的 "),a("code",[t._v("catch")]),t._v(" 完全看不到另外一个线程中的异常.")])]),t._v(" "),a("p",[t._v("对此, "),a("mark",[a("strong",[t._v("在异步编程的世界里, 也会有好几种处理错误的方法, 最常用的就是 callback 方式")])]),t._v(". 在做异步请求的时候, 注册几个 "),a("code",[t._v("OnSuccess()")]),t._v("​, "),a("code",[t._v("OnFailure()")]),t._v("​ 这样的函数, 让在另一个线程中运行的异步代码来回调过来.")]),t._v(" "),a("h6",{attrs:{id:"_1-javascript异步编程的错误处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-javascript异步编程的错误处理"}},[t._v("#")]),t._v(" (1)JavaScript异步编程的错误处理")]),t._v(" "),a("p",[t._v("比如, 下面这个 JavaScript 示例:")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("successCallback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("result")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"It succeeded with "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("failureCallback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"It failed with "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" error"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doSomething")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("successCallback"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" failureCallback"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("p",[t._v("通过注册错误处理的回调函数, 让异步执行的函数在出错的时候, 调用被注册进来的错误处理函数, 这样的方式比较好地解决了程序的错误处理. "),a("strong",[t._v("而出错的语义从返回码, 异常捕捉到了直接耦合错误出处函数的样子")]),t._v(", 挺好的.")]),t._v(" "),a("p",[t._v("但是, 如果需要把几个异步函数顺序执行的话(异步程序中, 程序执行的顺序是不可预测的, 也是不确定的, 而有时候, 函数被调用的上下文是有相互依赖的, 所以希望它们能按一定的顺序处理), 就会出现了所谓的 Callback Hell 的问题. 如下所示:")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doSomething")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("result")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doSomethingElse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("newResult")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doThirdThing")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newResult"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("finalResult")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Got the final result: '")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" finalResult"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" failureCallback"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" failureCallback"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" failureCallback"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("而这样"),a("strong",[t._v("层层嵌套")]),t._v("中需要注册的错误处理函数也有可能是完全不一样的, 而且会导致代码非常混乱, 难以阅读和维护.")]),t._v(" "),a("p",[t._v("所以一般来说, 在"),a("strong",[t._v("异步编程的实践里会用 Promise 模式来处理")]),t._v(". 如下所示(箭头表达式):")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doSomething")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("result")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doSomethingElse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("newResult")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doThirdThing")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newResult"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("finalResult")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("Got the final result: ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("finalResult"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("catch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("failureCallback"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("上面代码中的 "),a("code",[t._v("then()")]),t._v(" 和 "),a("code",[t._v("catch()")]),t._v(" 方法就是 Promise 对象的方法, "),a("code",[t._v("then()")]),t._v("方法可以把各个异步的函数给串联起来, 而"),a("code",[t._v("catch()")]),t._v(" 方法则是出错的处理.")]),t._v(" "),a("p",[t._v("看到上面的那个级联式的调用方式, 这就要 "),a("code",[t._v("doSomething()")]),t._v("​ 函数返回 Promise 对象, 下面是这个函数的相关代码示例:")]),t._v(" "),a("p",[t._v("比如:")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doSomething")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" promise "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" xhr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("XMLHttpRequest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\txhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'GET'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://coolshell.cn/....'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n\txhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onload")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("status "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            results "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("responseText"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            promise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("results"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 成功时, 调用 resolve() 方法")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n    xhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onerror")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        promise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 失败时, 调用 reject() 方法")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n    xhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" promise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br")])]),a("p",[t._v("从上面的代码示例中, 可以看到, 如果成功了, 要调用 "),a("code",[t._v("Promise.resolve()")]),t._v("​ 方法, 这样 Promise 对象会继续调用下一个 "),a("code",[t._v("then()")]),t._v("​. 如果出错了就调用 "),a("code",[t._v("Promise.reject()")]),t._v("​ 方法, 这样就会忽略后面的 "),a("code",[t._v("then()")]),t._v("​ 直到 "),a("code",[t._v("catch()")]),t._v("​ 方法.")]),t._v(" "),a("p",[t._v("可以看到 "),a("code",[t._v("Promise.reject()")]),t._v("​ 就像是抛异常一样. 这个编程模式让代码组织方便了很多.")]),t._v(" "),a("p",[t._v("另外多说一句, Promise 还可以"),a("strong",[t._v("同时等待两个不同的异步方法")]),t._v(". 比如下面的代码所展示的方式:")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("promise1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doSomething")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\npromise2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doSomethingElse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nPromise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("when")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("promise1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" promise2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("result1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" result2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 处理 result1 和 result2 的代码")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" handleError"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("在 ECMAScript 2017 的标准中, 可以使用 "),a("code",[t._v("async")]),t._v("​/"),a("code",[t._v("await")]),t._v("​ 这两个关键字来取代 Promise 对象, 这样可以让代码更易读.")]),t._v(" "),a("p",[t._v("比如下面的代码示例:")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doSomething")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" newResult "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doSomethingElse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" finalResult "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doThirdThing")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newResult"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("Got the final result: ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("finalResult"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("error"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("failureCallback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("error"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("p",[t._v("如果在函数定义之前使用了 "),a("code",[t._v("async")]),t._v("​ 关键字, 就可以在函数内使用 "),a("code",[t._v("await")]),t._v("​. 当在 "),a("code",[t._v("await")]),t._v("​ 某个 "),a("code",[t._v("Promise")]),t._v("​ 时, 函数暂停执行, 直至该 "),a("code",[t._v("Promise")]),t._v("​ 产生结果, 并且暂停不会阻塞主线程. 如果 "),a("code",[t._v("Promise")]),t._v("​ resolve, 则会返回值. 如果 "),a("code",[t._v("Promise")]),t._v("​ reject, 则会抛出拒绝的值.")]),t._v(" "),a("p",[t._v("而异步代码完全可以放在一个 "),a("code",[t._v("try - catch")]),t._v("​ 语句块内, 在有语言支持了以后, 又可以使用 "),a("code",[t._v("try - catch")]),t._v("​ 语句块了.")]),t._v(" "),a("p",[t._v("下面来看一下 pipeline 的代码. 所谓 pipeline 就是把一串函数给编排起来, 从而形成更为强大的功能. 这个玩法是函数式编程中经常用到的方法.")]),t._v(" "),a("p",[t._v("比如, 下面这个 pipeline 的代码(注意, 其上使用了 "),a("code",[t._v("reduce()")]),t._v(" 函数):")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("func1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" func2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reduce")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Promise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("其等同于:")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Promise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("func1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("func2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("可以抽象成:")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("applyAsync")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("acc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("val")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" acc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("composeAsync")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("funcs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" funcs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reduce")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("applyAsync"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Promise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("于是, 可以这样使用:")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" transformData "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("composeAsync")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("func1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" asyncFunc1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" asyncFunc2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" func2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("transformData")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("但是, 在 ECMAScript 2017 的 "),a("code",[t._v("async")]),t._v("/"),a("code",[t._v("await")]),t._v(" 语法糖下, 这事儿就变得更简单了.")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" f "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("func1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" func2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("h6",{attrs:{id:"_2-java异步编程的promise模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-java异步编程的promise模式"}},[t._v("#")]),t._v(" (2)Java异步编程的Promise模式")]),t._v(" "),a("p",[t._v("在 Java 中, 在 JDK 1.8 里也引入了类似 JavaScript 的玩法 —— "),a("code",[t._v("CompletableFuture")]),t._v("​. 这个类提供了大量的异步编程中 Promise 的各种方式. 下面列举几个.")]),t._v(" "),a("p",[t._v("链式处理:")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CompletableFuture")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("supplyAsync")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("findReceiver")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("thenApply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sendMsg")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("thenAccept")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("notify")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("上面的这个链式处理和 JavaScript 中的"),a("code",[t._v("then()")]),t._v("​方法很像, 其中的 "),a("code",[t._v("supplyAsync()")]),t._v("​ 表示执行一个"),a("strong",[t._v("异步方法")]),t._v(", 而 "),a("code",[t._v("thenApply()")]),t._v("​ 表示"),a("strong",[t._v("执行成功后再串联另外一个异步方法")]),t._v(", 最后是 "),a("code",[t._v("thenAccept()")]),t._v("​ 来"),a("strong",[t._v("处理最终结果")]),t._v(".")]),t._v(" "),a("p",[t._v("下面这个例子是要合并两个异步函数的结果:")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CompletableFuture")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("supplyAsync")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("thenCombine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CompletableFuture")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("supplyAsync")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"world"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" s2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" s2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("接下来, 再来看一下, Java 这个类相关的异常处理:")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CompletableFuture")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("supplyAsync")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 输入: "ILLEGAL"')]),t._v("\n\t\t\t     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("thenApply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Math")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PI")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\t     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("thenApply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"apply>> "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\t     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exceptionally")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Error: "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" ex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("要注意到上面代码里的 "),a("code",[t._v("exceptionally()")]),t._v("​ 方法, 这个和 JavaScript Promise 中的 "),a("code",[t._v("catch()")]),t._v("​ 方法相似.")]),t._v(" "),a("p",[t._v("运行上面的代码, 会出现如下输出:")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Error")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lang"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),t._v("NumberFormatException")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("For")]),t._v(" input string"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ILLEGAL"')]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("也可以这样:")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CompletableFuture")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("supplyAsync")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 输入: "ILLEGAL"')]),t._v("\n\t\t\t\t "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("thenApply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Math")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PI")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\t\t "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("thenApply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"apply>> "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\t\t "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("handle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\t \t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\t \t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t\t \t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\t \t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Error handling: "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" ex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t\t \t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\t\t "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("p",[t._v("上面代码中可以看到, 其使用了 "),a("code",[t._v("handle()")]),t._v("​ 方法来"),a("strong",[t._v("处理最终的结果")]),t._v(", 其中"),a("strong",[t._v("包含了异步函数中的错误处理")]),t._v(".")]),t._v(" "),a("h6",{attrs:{id:"_3-go语言的promise"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-go语言的promise"}},[t._v("#")]),t._v(" (3)Go语言的Promise")]),t._v(" "),a("p",[t._v("在 Go 语言中, 如果想实现一个简单的 Promise 模式, 也是可以的. 下面的代码纯属示例, 只为说明问题. 如果想要更好的代码, 可以上 GitHub 上搜一下 Go 语言 Promise 的相关代码库.")]),t._v(" "),a("p",[t._v("首先, 先声明一个结构体. 其中有三个成员: 第一个 "),a("code",[t._v("wg")]),t._v(" 用于多线程同步; 第二个 "),a("code",[t._v("res")]),t._v(" 用于存放执行结果; 第三个 "),a("code",[t._v("err")]),t._v(" 用于存放相关的错误.")]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Promise "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\twg  sync"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("WaitGroup\n\tres "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n\terr "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("然后, 定义一个"),a("strong",[t._v("初始函数")]),t._v(", 来初始化 Promise 对象. 其中可以看到, 需要把一个函数 "),a("code",[t._v("f")]),t._v("​ 传进来, 然后调用 "),a("code",[t._v("wg.Add(1)")]),t._v("​ 对 waitGroup 做加一操作, 新开一个 Goroutine 通过异步去执行用户传入的函数 "),a("code",[t._v("f()")]),t._v("​ , 然后记录这个函数的成功或错误, 并把 waitGroup 做减一操作.")]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NewPromise")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("Promise "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("Promise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("wg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("go")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("err "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\tp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("wg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Done")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" p\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("p",[t._v("然后需要定义 Promise 的 Then 方法. 其中需要传入一个函数, 以及一个错误处理的函数. 并且调用 "),a("code",[t._v("wg.Wait()")]),t._v("​ 方法来阻塞(因为之前被"),a("code",[t._v("wg.Add(1)")]),t._v("​), 一旦上一个方法被调用了 "),a("code",[t._v("wg.Done()")]),t._v("​, 这个 Then 方法就会被唤醒.")]),t._v(" "),a("p",[t._v("唤醒的第一件事是, 检查一下之前的方法有没有错误. 如果有, 那么就调用错误处理函数. 如果之前成功了, 就把之前的结果以参数的方式传入到下一个函数中.")]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("Promise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("Promise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("go")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("wg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Wait")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("err "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("e")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" \n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("r")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" p\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br")])]),a("p",[t._v("下面定义一个用于测试的异步方法. 这个方面很简单, 就是在数数, 然后有一半的机率会出错.")]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exampleTicker")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v("time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Tick")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Second "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\trand"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Seed")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("UTC")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("UnixNano")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v("rand"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Intn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v("  r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello, world"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Errorf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"error"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br")])]),a("p",[t._v("下面来看看实现的 Go 语言 Promise 是怎么使用的. 代码还是比较直观的, 就不做更多的解释了.")]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tdoneChan "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("chan")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NewPromise")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exampleTicker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" doneChan "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n\t\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" doneChan "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\n\t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v("doneChan\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("p",[t._v("当然, 如果需要更好的 Go 语言 Promise, 可以到 GitHub 上找, 上面好些代码都是实现得很不错的. 上面的这个示例实现得比较简陋, 仅仅是为了说明问题.")]),t._v(" "),a("h5",{attrs:{id:"_2-错误处理的最佳实践"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-错误处理的最佳实践"}},[t._v("#")]),t._v(" 2.错误处理的最佳实践")]),t._v(" "),a("p",[t._v("下面是总结的几个错误处理的最佳实践.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("统一分类的错误字典")]),t._v(". 无论你是使用错误码还是异常捕捉, 都需要"),a("strong",[t._v("认真并统一地做好错误的分类")]),t._v(". 最好是"),a("strong",[t._v("在一个地方定义相关的错误")]),t._v(". 比如, HTTP 的 4XX 表示客户端有问题, 5XX 则表示服务端有问题. 也就是说, 要建立一个错误字典.")]),t._v(" "),a("li",[a("strong",[t._v("同类错误的定义最好是可以扩展的")]),t._v(". 这一点非常重要, 而对于这一点, 通过面向对象的继承或是像 Go 语言那样的接口多态可以很好地做到. 这样可以方便地重用已有的代码.")]),t._v(" "),a("li",[a("strong",[t._v("定义错误的严重程度")]),t._v(". 比如, Fatal 表示重大错误, Error 表示资源或需求得不到满足, Warning 表示并不一定是个错误但还是需要引起注意, Info 表示不是错误只是一个信息, Debug 表示这是给内部开发人员用于调试程序的.")]),t._v(" "),a("li",[a("strong",[t._v("错误日志的输出最好使用错误码, 而不是错误信息")]),t._v(". 打印错误日志的时候, 应该"),a("strong",[t._v("使用统一的格式")]),t._v(". 但最好不要用错误信息, 而应使用相应的错误码, 错误码不一定是数字, 也可以是一个能从错误字典里找到的一个唯一的可以让人读懂的关键字. 这样会非常有利于日志分析软件进行"),a("strong",[t._v("自动化监控")]),t._v(", 而不是要从错误信息中做语义分析. 比如: HTTP 的日志中就会有 HTTP 的返回码, 如: "),a("code",[t._v("404")]),t._v("​. 但更推荐使用像 "),a("code",[t._v("PageNotFound")]),t._v("​ 这样的标识, 这样人和机器都很容易处理.")]),t._v(" "),a("li",[a("strong",[t._v("忽略错误最好有日志")]),t._v(". 不然会给维护带来很大的麻烦.")]),t._v(" "),a("li",[a("strong",[t._v("对于同一个地方不停的报错, 最好不要都打到日志里")]),t._v(". 不然这样会导致其它日志被淹没了, 也会导致日志文件太大. 最好的实践是, 打出一个错误以及出现的次数.")]),t._v(" "),a("li",[a("strong",[t._v("不要用错误处理逻辑来处理业务逻辑")]),t._v(". 也就是说, 不要使用异常捕捉这样的方式来处理业务逻辑, 而是应该用条件判断. 如果一个逻辑控制可以用 if-else 清楚地表达, 那就不建议使用异常方式处理. "),a("strong",[t._v("异常捕捉是用来处理不期望发生的事情, 而错误码则用来处理可能会发生的事")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("对于同类的错误处理, 用一样的模式")]),t._v(". 比如, 对于 "),a("code",[t._v("null")]),t._v("​ 对象的错误, 要么都用返回 null, 加上条件检查的模式, 要么都用抛 NullPointerException 的方式处理. 不要混用, 这样有助于代码规范.")]),t._v(" "),a("li",[a("strong",[t._v("尽可能在错误发生的地方处理错误")]),t._v(". 因为这样会让调用者变得更简单.")]),t._v(" "),a("li",[a("strong",[t._v("向上尽可能地返回原始的错误")]),t._v(". 如果一定要把错误返回到更高层去处理, 那么应该"),a("strong",[t._v("返回原始的错误")]),t._v(", 而不是重新发明一个错误.")]),t._v(" "),a("li",[a("strong",[t._v("处理错误时, 总是要清理已分配的资源")]),t._v(". 这点非常关键, 使用 RAII 技术, 或是 try-catch-finally, 或是 Go 的 defer 都可以容易地做到.")]),t._v(" "),a("li",[a("strong",[t._v("不推荐在循环体里处理错误")]),t._v(". 这里说的是 try-catch, 绝大多数的情况你不需要这样做. 最好把整个循环体外放在 try 语句块内, 而在外面做 catch.")]),t._v(" "),a("li",[a("strong",[t._v("不要把大量的代码都放在一个 try 语句块内")]),t._v(". 一个 try 语句块内的语句应该是完成一个"),a("strong",[t._v("简单单一")]),t._v("的事情.")]),t._v(" "),a("li",[a("strong",[t._v("为你的错误定义提供清楚的文档以及每种错误的代码示例")]),t._v(". 如果你是做 RESTful API 方面的, 使用 Swagger 会帮你很容易搞定这个事.")]),t._v(" "),a("li",[a("strong",[t._v("对于异步的方式, 推荐使用 Promise 模式处理错误")]),t._v(". 对于这一点, JavaScript 中有很好的实践.")]),t._v(" "),a("li",[a("strong",[t._v("对于分布式的系统, 推荐使用 APM 相关的软件")]),t._v(". 尤其是使用 Zipkin 这样的服务调用跟踪的分析来关联错误.")])]),t._v(" "),a("h4",{attrs:{id:"推荐阅读-机器学习101"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#推荐阅读-机器学习101"}},[t._v("#")]),t._v(" 推荐阅读:机器学习101")]),t._v(" "),a("p",[t._v("自从 2012 年在亚马逊第一次接触机器学习(一个关于预测商品需求的 Demand Forecasting 的项目)以来, 我一直在用一些零星的时间学习机器学习相关的东西. 所以, 说实话, 在机器学习方面, 我也只是一个新手, 也在入门阶段. 在前面文章的评论中, 有网友希望我写一篇有关大数据和机器学习的文章, 老实说, 有点为难我了. 所以, 我只能结合自己的学习过程写一篇"),a("strong",[t._v("入门级的文章")]),t._v(", 希望能看到高手的指教和指正.")]),t._v(" "),a("p",[t._v("首先简单介绍一下机器学习的一些原理. 机器学习主要来说有两种方法, "),a("strong",[t._v("监督式学习(Supervised Learning)和非监督式学习(Unsupervised Learning)")]),t._v(" .")]),t._v(" "),a("h5",{attrs:{id:"_1-监督式学习"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-监督式学习"}},[t._v("#")]),t._v(" 1.监督式学习")]),t._v(" "),a("p",[a("strong",[t._v("所谓监督式学习, 也就是说, 需要提供一组学习样本, 包括相关的特征数据以及相应的标签. 程序可以通过这组样本来学习相关的规律或是模式, 然后通过得到的规律或模式来判断没有被打过标签的数据是什么样的数据.")])]),t._v(" "),a("p",[t._v("举个例子, 假设需要识别一些手写的数字, 那么就需要找到尽可能多的手写体数字的图像样本, 然后人工或是通过某种算法来明确地标注什么是这些手写体的图片, 谁是 1, 谁是 2, 谁是 3...这组数据就叫样本数据, 又叫训练数据(training data).")]),t._v(" "),a("p",[t._v("通过机器学习的算法, 可以找到每个数字在不同手写体下的特征, 进而找到规律和模式. 然后通过得到的规律或模式来识别那些没有被打过标签的手写数据, 以此完成识别手写体数字的目标.")]),t._v(" "),a("p",[t._v("一种比较常见的监督式学习, 就是从历史数据中获得数据的走向趋势, 来预测未来的走向. 比如, 使用历史上的股票走势数据来预测接下来的股价涨跌, 或者通过历史上的一些垃圾邮件的样本来识别新的垃圾邮件.")]),t._v(" "),a("p",[t._v("在监督式学习下, 需要有样本数据或是历史数据来进行学习, 这种方式会有一些问题. 比如:")]),t._v(" "),a("ul",[a("li",[t._v("如果一个事物没有历史数据, 那么就不好做了. 变通的解决方式是通过一个和其类似事物的历史数据. 我以前做过的需求预测, 就属于这种情况. 对于新上市的商品来说, 完全没有历史数据, 比如, iPhone X, 那么就需要从其类似的商品上找历史数据, 如 iPhone 7 或是别的智能手机.")]),t._v(" "),a("li",[t._v("历史数据中可能会有一些是噪音数据, 需要把这些噪音数据给过滤掉. 一般这样的过滤方式要通过人工判断和标注. 举两个例子, 某名人在其微博或是演讲上推荐了一本书, 于是这本书的销量就上升了. 这段时间的历史数据不是规律性的, 所以就不能成为样本数据, 需要去掉. 同样, 如果某名人(如 Michael Jackson)去世导致和其有关的商品销售量很好, 那么这个事件所产生的数据则不属于噪音数据. 因为每年这个名人忌日的时候出现销量上升的可能性非常高, 所以需要标注一下, 这是有规律的样本, 可以放入样本进行学习.")])]),t._v(" "),a("h5",{attrs:{id:"_2-非监督式学习"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-非监督式学习"}},[t._v("#")]),t._v(" 2.非监督式学习")]),t._v(" "),a("p",[t._v("**对于非监督式学习, 也就是说, 数据是没有被标注过的, 所以相关的机器学习算法需要找到这些数据中的共性. 因为大量的数据是没有被标识过的, 所以这种学习方式可以让大量未标识的数据能够更有价值. **")]),t._v(" "),a("p",[t._v('而且, 非监督式的学习, 可以为我们找到人类很难发现的数据里的规律或模型. 所以也有人将这种学习称为 "特征点学习". 其可以自动地为数据进行分类, 并找到分类的模型.')]),t._v(" "),a("p",[t._v("一般来说, 非监督式学习会应用在一些交易型的数据中. 比如, 有一堆的用户购买数据, 但是对于人类来说, 很难找到用户属性和购买商品类型之间的关系, 而非监督式学习算法可以帮助找到他们之间的关系.")]),t._v(" "),a("p",[t._v("比如, 一个在某一年龄段区间的女生购买了某种肥皂, 有可能说明这个女生在怀孕期, 或是某人购买儿童用品, 有可能说明这个人的关系链中有孩子, 等等. 于是这些信息会被用作一些所谓的精准市场营销活动, 从而可以增加商品销量.")]),t._v(" "),a("p",[a("strong",[t._v("这么来说吧, 监督式学习是在被告诉过正确的答案之后的学习, 而非监督式学习是在没有被告诉正确答案时的学习, 所以说, 非监督式的学习是在大量的非常混乱的数据中找寻一些潜在的关系, 这个成本也比较高.")])]),t._v(" "),a("p",[t._v("这种非监督式学习也会经常被用来检测一些不正常的事情发生, 比如信用卡的诈骗或是盗刷. 也有被用在推荐系统中, 比如买了这个商品的人又买了别的什么东西, 或是如果某个人喜欢某篇文章, 某个音乐, 某个餐馆, 那么可能他会喜欢某款车, 某个明星, 或某个地方.")]),t._v(" "),a("p",[t._v('在监督式的学习的算法下, 可以用一组"狗"的照片来确定某个照片中的物体是不是狗. 而在非监督式的学习算法下, 可以通过一个照片来找到与其相似事物的照片. 这两种学习方式都有各自适用的场景.')]),t._v(" "),a("h5",{attrs:{id:"_3-如何找到数据的规律和关联"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-如何找到数据的规律和关联"}},[t._v("#")]),t._v(" 3.如何找到数据的规律和关联")]),t._v(" "),a("p",[a("strong",[t._v("机器学习基本就是在已知的样本数据中寻找数据的规律, 在未知的数据中找数据的关系")]),t._v(". 所以这就需要一定的数学知识了, 但对于刚入门的人来说, 学好高数, 线性代数, 概率论, 数据建模等大学本科的数学知识应该就够用了. 以前上大学时, 总觉得这些知识没什么用处, 原来只不过是自己太 low, 还没有从事会运用到这些知识的工作.")]),t._v(" "),a("p",[t._v("总之, 机器学习中的基本方法论是这样的:")]),t._v(" "),a("ol",[a("li",[t._v("要找到数据中的规律, 你需要找到数据中的特征点.")]),t._v(" "),a("li",[t._v("把特征点抽象成数学中的向量, 也就是所谓的坐标轴. 一个复杂的学习可能会有成十上百的坐标轴.")]),t._v(" "),a("li",[t._v("抽象成数学向量后, 就可以通过某种数学公式来表达这类数据(就像 y=ax+b 是直线的公式), 这就是数据建模.")])]),t._v(" "),a("p",[t._v("这个数据公式就是找出来的规律. 通过这个规律, 才可能关联类似的数据.")]),t._v(" "),a("p",[t._v("当然, 也有更为简单粗暴的玩法:")]),t._v(" "),a("ol",[a("li",[t._v("把数据中的特征点抽象成数学中的向量.")]),t._v(" "),a("li",[t._v("每个向量一个权重.")]),t._v(" "),a("li",[t._v("写个算法来找各个向量的权重是什么.")])]),t._v(" "),a("p",[t._v('有人把这个事叫"数据搅拌机". 据说, 这种简单粗暴的方式超过了那些所谓的明确的数学公式或规则. 这种"土办法"有时候会比高大上的数学更有效.')]),t._v(" "),a("h5",{attrs:{id:"_4-相关算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-相关算法"}},[t._v("#")]),t._v(" 4.相关算法")]),t._v(" "),a("p",[t._v("对于监督式学习, 有如下经典算法.")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("决策树")]),t._v("(Decision Tree). 比如自动化放贷, 风控.")]),t._v(" "),a("li",[a("strong",[t._v("朴素贝叶斯分类")]),t._v("(Naive Bayesian classification). 可以用于判断垃圾邮件, 对新闻的类别进行分类, 比如科技, 政治, 运动, 判断文本表达的感情是积极的还是消极的, 以及人脸识别等.")]),t._v(" "),a("li",[a("strong",[t._v("最小二乘法")]),t._v("(Ordinary Least Squares Regression). 算是一种线性回归.")]),t._v(" "),a("li",[t._v("逻辑回归(Logisitic Regression). 一种强大的统计学方法, 可以用一个或多个变量来表示一个二项式结果. 它可以用于信用评分, 计算营销活动的成功率, 预测某个产品的收入等.")]),t._v(" "),a("li",[a("strong",[t._v("支持向量机")]),t._v("(Support Vector Machine, SVM). 可以用于基于图像的性别检测, 图像分类等.")]),t._v(" "),a("li",[t._v("集成方法(Ensemble methods). 通过构建一组分类器, 然后根据它们的预测结果进行加权投票来对新的数据点进行分类. 原始的集成方法是贝叶斯平均, 但是最近的算法包括纠错输出编码, Bagging 和 Boosting.")])]),t._v(" "),a("p",[t._v("对于非监督式的学习, 有如下经典算法.")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("聚类算法")]),t._v("(Clustering Algorithms). 聚类算法有很多, 目标是给数据分类.")]),t._v(" "),a("li",[a("strong",[t._v("主成分分析")]),t._v("(Principal Component Analysis, PCA). PCA 的一些应用包括压缩, 简化数据, 便于学习和可视化等.")]),t._v(" "),a("li",[t._v('奇异值分解(Singular Value Decomposition, SVD). 实际上, PCA 是 SVD 的一个简单应用. 在计算机视觉中, 第一个人脸识别算法使用 PCA 和 SVD 来将面部表示为"特征面"的线性组合, 进行降维, 然后通过简单的方法将面部匹配到身份. 虽然现代方法更复杂, 但很多方面仍然依赖于类似的技术.')]),t._v(" "),a("li",[t._v("独立成分分析(Independent Component Analysis, ICA). ICA 是一种统计技术, 主要用于揭示随机变量, 测量值或信号集中的隐藏因素.")])]),t._v(" "),a("p",[t._v("上面的这些相关算法来源自博文《"),a("a",{attrs:{href:"https://www.kdnuggets.com/2016/08/10-algorithms-machine-learning-engineers.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("The 10 Algorithms Machine Learning Engineers Need to Know"),a("OutboundLink")],1),t._v("》.")]),t._v(" "),a("h5",{attrs:{id:"_5-相关推荐"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-相关推荐"}},[t._v("#")]),t._v(" 5.相关推荐")]),t._v(" "),a("p",[t._v("学习机器学习有几个课是必须要上的, 具体如下.")]),t._v(" "),a("ul",[a("li",[t._v("吴恩达教授(Andrew Ng)在 "),a("a",{attrs:{href:"https://www.coursera.org/learn/machine-learning",target:"_blank",rel:"noopener noreferrer"}},[t._v("Coursera 上的机器学习课程"),a("OutboundLink")],1),t._v("非常棒. 我强烈建议从此入手. 对于任何拥有计算机科学学位的人, 或是还能记住一点点数学的人来说, 都非常容易入门. 这个斯坦福大学的课程后面是有作业的, 请尽量拿满分. 另外, "),a("a",{attrs:{href:"http://open.163.com/special/opencourse/machinelearning.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("网易公开课上也有该课程"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[t._v("卡内基梅隆大学计算机科学学院汤姆·米切尔(Tom Mitchell)教授的机器学习课程, 这里有"),a("a",{attrs:{href:"http://www.cs.cmu.edu/~tom/10701_sp11/lectures.shtml",target:"_blank",rel:"noopener noreferrer"}},[t._v("英文原版视频和课件 PDF"),a("OutboundLink")],1),t._v(" . 汤姆·米切尔是全球 AI 界顶级大牛, 在机器学习, 人工智能, 认知神经科学等领域都有建树, 撰写了机器学习方面最早的教科书之一"),a("a",{attrs:{href:"http://item.jd.com/10131321.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("《机器学习》"),a("OutboundLink")],1),t._v(", 被誉为入门必读图书.")]),t._v(" "),a("li",[t._v("加利福尼亚理工学院亚瑟·阿布·穆斯塔法(Yaser Abu-Mostafa)教授的 "),a("a",{attrs:{href:"http://work.caltech.edu/lectures.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Learning from Data 系列课程"),a("OutboundLink")],1),t._v(" . 本课程涵盖机器学习的基本理论和算法, 并将理论与实践相结合, 更具实践指导意义, 适合进阶.")])]),t._v(" "),a("p",[t._v("除了上述的那些课程外, 下面这些资源也很不错.")]),t._v(" "),a("ul",[a("li",[t._v("YouTube 上的 Google Developers 的 "),a("a",{attrs:{href:"https://www.youtube.com/playlist?list=PLOU2XLYxmsIIuiBfYad6rFYQU_jL2ryal",target:"_blank",rel:"noopener noreferrer"}},[t._v("Machine Learning Recipes with Josh Gordon"),a("OutboundLink")],1),t._v(" . 这 9 集视频, 每集不到 10 分钟, 从 Hello World 讲到如何使用 TensorFlow, 值得一看.")]),t._v(" "),a("li",[t._v("还有 "),a("a",{attrs:{href:"https://pythonprogramming.net/machine-learning-tutorial-python-introduction/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Practical Machine Learning Tutorial with Python Introduction"),a("OutboundLink")],1),t._v(" 上面一系列的用 Python 带着你玩 Machine Learning 的教程.")]),t._v(" "),a("li",[t._v("Medium 上的 "),a("a",{attrs:{href:"https://medium.com/machine-learning-101",target:"_blank",rel:"noopener noreferrer"}},[t._v("Machine Learning - 101"),a("OutboundLink")],1),t._v(" 讲述了好多我们上面提到过的经典算法.")]),t._v(" "),a("li",[t._v("还有, Medium 上的 "),a("a",{attrs:{href:"https://medium.com/machine-learning-for-humans",target:"_blank",rel:"noopener noreferrer"}},[t._v("Machine Learning for Humans"),a("OutboundLink")],1),t._v(", 不仅提供了入门指导, 更介绍了各种优质的学习资源.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://machinelearningmastery.com/blog/",target:"_blank",rel:"noopener noreferrer"}},[t._v("杰森·布朗利(Jason Brownlee)博士的博客"),a("OutboundLink")],1),t._v(' 也是非常值得一读, 其中好多的 "How-To", 会让你有很多的收获.')]),t._v(" "),a("li",[a("a",{attrs:{href:"http://iamtrask.github.io",target:"_blank",rel:"noopener noreferrer"}},[t._v("i am trask"),a("OutboundLink")],1),t._v(" 也是一个很不错的博客.")]),t._v(" "),a("li",[t._v("关于 Deep Learning 中神经网络的学习, 推荐 YouTube 介绍视频 "),a("a",{attrs:{href:"https://www.youtube.com/playlist?list=PLZHQObOWTQDNU6R1_67000Dx_ZCJB-3pi",target:"_blank",rel:"noopener noreferrer"}},[t._v("Neural Networks"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[t._v("用 Python 做自然语言处理"),a("a",{attrs:{href:"http://www.nltk.org/book/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Natural Language Processing with Python"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[t._v("以及 GitHub 上的 "),a("a",{attrs:{href:"https://github.com/ujjwalkarn/Machine-Learning-Tutorials",target:"_blank",rel:"noopener noreferrer"}},[t._v("Machine Learning 和 Deep Learning"),a("OutboundLink")],1),t._v(" 的相关教程列表.")])]),t._v(" "),a("p",[t._v("此外, 还有一些值得翻阅的图书.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://cs.nju.edu.cn/zhouzh/zhouzh.files/publication/MLbook2016.htm",target:"_blank",rel:"noopener noreferrer"}},[t._v("《机器学习》"),a("OutboundLink")],1),t._v(', 南京大学周志华教授著. 它是一本机器学习方面的入门级教科书, 适合本科三年级以上的学生学习. 这本书如同一张地图一般, 让你能"观其大略", 了解机器学习的各个种类, 各个学派, 其覆盖面与同类英文书籍相较不遑多让.')]),t._v(" "),a("li",[a("a",{attrs:{href:"http://ciml.info/",target:"_blank",rel:"noopener noreferrer"}},[t._v("A Course In Machine Learning"),a("OutboundLink")],1),t._v(", 马里兰大学哈尔·道姆(Hal Daumé III)副教授著.  这本书讲述了几种经典机器学习算法, 包括决策树, 感知器神经元, kNN 算法, K-means 聚类算法, 各种线性模型(包括对梯度下降, 支持向量机等的介绍), 概率建模, 神经网络, 非监督学习等很多主题, 还讲了各种算法使用时的经验技巧, 适合初学者学习. 此外, 官网还提供了免费电子版.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.deeplearningbook.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Deep Learning"),a("OutboundLink")],1),t._v(", 麻省理工学院伊恩·古德费洛(Ian Goodfellow), 友华·本吉奥(Yoshua Benjio)和亚伦·考维尔(Aaron Courville)著. 这本书是深度学习专题的经典图书. 它从历史的角度, 将读者带进深度学习的世界. 深度学习使用多层的(深度的)神经元网络, 通过梯度下降算法来实现机器学习, 对于监督式和非监督式学习都有大量应用. 如果读者对该领域有兴趣, 可以深入阅读本书. 本书官网提供免费电子版, 但不提供下载. 实体书(英文原版或中文翻译版)可以在网上买到.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.freetechbooks.com/reinforcement-learning-an-introduction-second-edition-draft-t1282.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Reinforcement Learning"),a("OutboundLink")],1),t._v(", 安德鲁·巴托(Andrew G.Barto)和理查德·萨顿(Richard S. Sutton)著. 这本书是强化学习(Reinforcement Learning)方面的入门书. 它覆盖了马尔可夫决策过程(MDP), Q-Learning, Sarsa, TD-Lamda 等方面. 这本书的作者是强化学习方面的创始人之一. 强化学习(结合深度学习)在围棋程序 AlphaGo 和自动驾驶等方面都有着重要的应用.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.amazon.com/Pattern-Recognition-Learning-Information-Statistics/dp/0387310738",target:"_blank",rel:"noopener noreferrer"}},[t._v("Pattern Recognition and Machine Learning"),a("OutboundLink")],1),t._v(" , 微软剑桥研究院克里斯托夫·比肖普(Christoph M. Bishop)著. 这本书讲述了模式识别的技术, 包括机器学习在模式识别中的应用. 模式识别在图像识别, 自然语言处理, 控制论等多个领域都有应用. 日常生活中扫描仪的 OCR, 平板或手机的手写输入等都属于该领域的研究.")])]),t._v(" "),a("h4",{attrs:{id:"时间管理-同扭曲时间的事儿抗争"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#时间管理-同扭曲时间的事儿抗争"}},[t._v("#")]),t._v(" 时间管理:同扭曲时间的事儿抗争")]),t._v(" "),a("p",[t._v("时间是人生中最宝贵的财富, 今天就来聊聊时间管理方面的话题.")]),t._v(" "),a("p",[t._v("关于时间管理, 我以前在外企工作时, 受过一个专门的培训, 后来我也在工作中总结过自己的方式. 时间管理是非常重要的, 因为时间过得实在是太快了, 快得让你有点受不了, 而看似忙碌的我们似乎在这一年中也没有做太多事, 尤其是让自己能成长的事情.")]),t._v(" "),a("p",[a("strong",[t._v("有那么一句话是这么说, 老天很公平, 给了所有人同样多的时间, 而有的人能够把时间用好, 有的人则没有把时间用好. 日积月累, 人和人的差距就越来越大了.")])]),t._v(" "),a("p",[t._v("之前的文章和你讲过, 我在工作强度很大的情况下, 依然可以找到时间来学习和提升自己, 主要是我自己很渴望学习. 今天我就想和你聊一下, 除了自己对某件事情的热情外, 还有什么方法可以管理好自己的时间.")]),t._v(" "),a("h5",{attrs:{id:"_1-主动管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-主动管理"}},[t._v("#")]),t._v(" 1.主动管理")]),t._v(" "),a("p",[t._v("无论什么事情, 如果"),a("strong",[t._v("你发现你持续处于被动的状态下, 那么一定要停下来想一想如何把被动变为主动")]),t._v('. 因为在被动的方式下工作, 你是不可能做好工作的, 无论什么事. 我是一个非常不喜欢被动的人, 所以对于任何被动状态, 我都要"反转控制", 想尽一切方式变成主动.')]),t._v(" "),a("p",[t._v('如果你发现你的时间老是被别人打断, 那么你就要告诉大家, 我什么时间段在做什么事, 请大家不要打扰我. 我以前在国外看到有个老外就在自己的工位上挂了一个条幅, 上面写着"正在努力写代码中, 请勿打断...". 而我在亚马逊工作时, 亚马逊也允许员工想沉浸于工作时不用来公司而是可以在家办公(work from home). 我在阿里工作那会, 有时候也怕被人打断, 所以我会跑到别的楼里找个空的工位工作.')]),t._v(" "),a("p",[t._v("在今天, 我觉得你也可以这么干, 你可以在群里事先告诉大家, 我在几点到几点要无间断地做某个事, 这个期间不会看任何微信或是钉钉的群聊, 也不会接任何的电话, 请大家不要来打扰我. 而且还可以学习一下那个我见过的老外, 在自己的工位上挂一个不要打扰我的条幅. 人肉 Mute 掉所有的打扰.")]),t._v(" "),a("p",[t._v("另外, 可以仿照一下以前在 Outlook 里设置工作日程的方式, 把你的工作安排预先设置到一个可以共享的日历上, 然后分享给大家, 让大家了解你的日程. 这样可以让你的同事和老板能事先有个谱儿, 而不至于想打断你就打断你.")]),t._v(" "),a("p",[t._v("你甚至可以要求你的同事, 重要的事, 不要发微信, 而是要发邮件, 因为微信会有很大概率看不到. 这样一来, 你就再也不用在一大堆聊天信息中做人肉的大数据挖掘, 来找到和你有关的信息.")]),t._v(" "),a("p",[a("strong",[t._v("信息管理")]),t._v("真的非常重要, 因为将信息做好分类, 才方便检索, 方便你通过自己的优先级来处理信息. 而目前看来, 这些只有邮件才能够更好地完成(邮件可以帮你通过邮件标题聚合, 你可以设置很多规则来自动化分类邮件, 还可以帮你设置自动化回复).")]),t._v(" "),a("p",[t._v("换句话说, "),a("strong",[t._v("你要主动管理的不是你的时间, 而是管理你的同事, 管理你的信息")]),t._v(".")]),t._v(" "),a("h5",{attrs:{id:"_2-学会说-不"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-学会说-不"}},[t._v("#")]),t._v(' 2.学会说"不"')]),t._v(" "),a("p",[t._v("上面说了如何主动地管理你的时间. 但是那只是能让你有大块可以专注于工作的时间. 然而这并不能帮助你解决时间不够的问题. 比如, 现在的很多公司总是把工作安排得非常紧, 今天提的需求, 恨不得明天就上线, 这也就是为什么今天加班的严重程度比我那个时候还更为严重.")]),t._v(" "),a("p",[t._v('我认为, 现在的很多公司已经不尊重科学和客观规律了, 如果让他来管理孕妇, 我觉得他们恨不得要把 10 个月的产期缩短成 2 个月.  所以在这种情况下, 你要学会对某些事说"不", 甚至是要学习对老板说不. 这其实是一种"'),a("strong",[t._v("向上管理")]),t._v('"的能力.')]),t._v(" "),a("p",[t._v('以前在外企接受到的管理方面的培训, 有这么一条 "Never Say No"--永不说不. 的确是这样, 说"不"会让人产生距离和不信任. 所以, 真是这样的, 永远不要说不. 但是你明明做不到, 还不能说不, 这应该怎么办呢? 这里面的诀窍如下.')]),t._v(" "),a("ol",[a("li",[t._v("当你面对做不到的需求时, 你不要说这个需求做不到. 尤其是, 你不要马上说做不到, 你要先想一下, 这样让别人觉得你是想做的, 但是在认真思考过后, 你觉得做不到, 并且给出一个你觉得能做到的方案. 这里的诀窍是--"),a("mark",[a("strong",[t._v("给出另一个你可以做到的方案, 而不是把对方的方案直接回绝掉")])]),t._v(".")]),t._v(" "),a("li",[t._v("当你面对过于复杂的需求时, 你不要说不. "),a("strong",[t._v("你要反问一下, 为什么要这样做? 这样做的目的是什么?")]),t._v("  当了解完目的以后, 你可以给出一个自己的方案, 或是和对方讨论一个性价比更好的方案. 你可以回复说, 这个需求好复杂, 能不能先干这个, 再做那个, 这样会更经济一些. 这里的诀窍是--"),a("strong",[t._v("我不说我不能完全满足你, 但我说我可以部分满足你")]),t._v(".")]),t._v(" "),a("li",[t._v("当你面对时间完全不够的需求时, 你也不要说不. 既然对方把压力给你, 你要想办法把这个压力还回去, 或是让对方来和你一同分担这个压力.")])]),t._v(" "),a("p",[t._v("这个时候, 我惯用的方式是给回三个选择: a. "),a("strong",[t._v("我可以加班加点完成, 但是我不保证好的质量")]),t._v(", 有 bug 你得认, 而且事后你要给我 1 个月的时间还债. b. 我可以加班加点, 还能保证质量, 但我没办法完成这么多需求, 能不能减少一些? c. 我可以保质保量地完成所有的需求, 但是能不能多给我 2 周时间?")]),t._v(" "),a("p",[t._v("这里的诀窍是--"),a("strong",[t._v("我不能说不, 但是我要有条件地说是. 而且, 我要把你给我的压力再反过来还给你, 看似我给了需求方选择, 实际上, 我掌握了主动")]),t._v(".")]),t._v(" "),a("p",[t._v('这就是学会说"不"的方法. 说白了, 你要学会在  '),a("strong",[t._v('"积极主动的态度下对于不合理的事讨价还价". 只有学会了说"不", 你才能够控制好你的时间')]),t._v(".")]),t._v(" "),a("h5",{attrs:{id:"_3-加班和开会"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-加班和开会"}},[t._v("#")]),t._v(" 3.加班和开会")]),t._v(" "),a("p",[t._v("国内的公司和国外公司还有一个很不同的事情, 就是大量的加班和大量冗长的会议. 我见过很多国内的公司, 无论大公司还是小的创业公司, 都是这个样子的.")]),t._v(" "),a("p",[t._v("老实说, 我对这个事情也能理解也不能理解. 一方面, 我能理解为什么会有这么多的加班和会议, 主要原因还是管理者在管理上只会使用低级的通过劳动密集型的方式来做事. 另一方面, 我不能理解的是, 国外公司的加班和会议长度根本不像国内的公司, 人家做的也比中国的公司好得多. 在国内的公司, 老板们看到团队在拼命加班, 会很高兴, 而在国外的公司, 老板看到团队在拼命加班, 会觉得这个团队一定是哪里出了问题, 老板会比较焦虑.")]),t._v(" "),a("p",[t._v("那么, 对于身处于这样环境中的我们, 应该怎样管理好自己的时间, 或是为自己争取时间呢? 老实说, 在恶劣的环境中优雅的行动, 基本上是一件不可能的事情. 我也经历过这样的事, 但我也没有太好的办法. 不过, 我还是可以跟你分享几个我的实践方式.")]),t._v(" "),a("p",[t._v('对于加班的事, 除了像上面说的那样, 学会如何说"不"外, 我发现很多时候造成加班的原因就是恶性循环. 也就是说, 因为加班干出来了质量不好的软件, 于是线上故障很多, 要花时间处理, 而后面的需求也过来了, 发现复杂代码的扩展性很差, 越干越慢, 越干越烂, 越干故障越多. 于是, 你会被抱怨得越来越多.')]),t._v(" "),a("p",[t._v("这里我觉得, "),a("strong",[t._v("如果怎么做都要受伤害, 那么两害相权取其轻")]),t._v(". 你要学会比较是项目延期的伤害大, 还是线上故障的伤害大, 是先苦后甜好, 还是积压问题好, 聪明的你应该能做出正确的判断.")]),t._v(" "),a("p",[t._v("对于开会, 我觉得今天大多数的会都开错了. 在会上抛出问题, 还是开放性的问题, 然后公说公有理, 婆说婆有理, 任大家自由发挥, 各种跑题跑偏, 最后还没有任何的答案. "),a("strong",[t._v("开会不是讨论问题, 而是讨论方案, 开会不是要有议题, 而是要有议案")]),t._v(".")]),t._v(" "),a("p",[t._v("所以作为与会者, 如果你发现没有议案, 大家海了去说, 那么你有两种选择, 跳出来帮大家理一理, 或者也可以说一下, 如果会上讨论不清, 要不先线下讨论, 有了方案再来评审. 也许在一些会上你不敢这么干, 但是有些会你是可以这么干的. 能影响的这些都能为你争取到很多时间.")]),t._v(" "),a("p",[t._v('好了, 总结一下. 今天我主要跟你分享了几个能为自己争取更多时间的方法, 比如主动管理时间, 学会说"不", 以及面对高强度的加班和冗长的会议时, 该如何应对和解决等. 因为我认为, 只有将使用时间的主动权掌握在自己手上, 才能更好地利用时间, 才能更为高效率的工作. 所以, **这才是时间管理的关键点. **')]),t._v(" "),a("h4",{attrs:{id:"时间管理-如何利用好自己的时间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#时间管理-如何利用好自己的时间"}},[t._v("#")]),t._v(" 时间管理:如何利用好自己的时间?")]),t._v(" "),a("p",[t._v("前面讨论了如何争取到更多自己可以控制的时间, 今天接着再来聊另外一个话题---如何利用好自己的时间. 对此, 我有下面的这些心得和方法.")]),t._v(" "),a("h5",{attrs:{id:"_1-投资自己的时间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-投资自己的时间"}},[t._v("#")]),t._v(" 1.投资自己的时间")]),t._v(" "),a("p",[t._v('其实时间就像金钱一样, 你得学会投资时间, 把时间投资在有价值有意义的地方, 你就会有"更多的时间".')]),t._v(" "),a("ul",[a("li",[a("mark",[a("strong",[t._v("花时间学习基础知识, 花时间读文档")])]),t._v(". 在参加工作的这 20 年时间里, 我发现很多程序员都把时间都浪费在了查错上. 究其根本原因就是基础知识不完整, 没有好好地把技术相关的用户文档读完就仓促上手做事情了. 其实只要把基础打扎实, 认真读一下文档, 你会省出很多很多的时间. "),a("strong",[t._v("系统地学习一门技术是非常关键的, 所以这个时间是值得投资的")]),t._v(".")]),t._v(" "),a("li",[a("mark",[a("strong",[t._v("花时间在解放自己生产力的事上")])]),t._v(". 在自动化, 可配置, 可重用, 可扩展上要多花时间. 对于软件开发来说, 能自动化的事, 就算多花点时间也要自动化, 因为下次就不用花时间了. 让自己的软件模块可以更灵活地配置和扩展, 这样如果有需求变更或是有新需求的时候, 可以不用改代码, 或者就算要改代码也很容易. 这里可能很多人会说不要过度设计, 对于这个观点, 我既同意, 也反对. 的确, 过度设计不好, 但是只要是能在未来节省时间的, 宁可这个项目延期, 我也会做的. "),a("strong",[t._v("花时间在解放自己的事上是最有意义的了")]),t._v(".")]),t._v(" "),a("li",[a("mark",[a("strong",[t._v("花时间在让自己成长的事上")])]),t._v(". 注意, 晋升并不代表成长, 成长不应该只看在一个公司内, 而是要看在行业内, 在行业内的成长才是真正的成长. 所以把时间花在能让自己成长, 能让自己有更强的竞争力, 能让自己有更大的视野, 能让自己有更多可能性的事情上. 这样的时间投资才是有价值的.")]),t._v(" "),a("li",[a("mark",[a("strong",[t._v("花时间在建立高效的环境上")])]),t._v('. 我相信你和我会有一样的一个习惯, 那就"工欲善其事, 必先利其器". 程序员在做事之前都喜欢把自己的工作环境整理到自己喜欢的状态下. 比如使用趁手的开发工具, 使用趁手的设备. 这里, 我想把这个事扩大一下, 花些时间在影响你身边的人上, 比如你的同事, 你的产品经理, 你的老板, 去影响他们, 让他们理解你, 让他们配合你来建立更好的流程和管理方法. 在这个方向上花时间也是很值得的.')])]),t._v(" "),a("h5",{attrs:{id:"_2-规划自己的时间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-规划自己的时间"}},[t._v("#")]),t._v(" 2.规划自己的时间")]),t._v(" "),a("p",[a("mark",[a("strong",[t._v("定义好优先级")])]),t._v(". 无论你写不写出来, 你一定都会有一个自己的 to-do list. 有 to-do list 并不是什么高深的事. 更重要的是, 要知道什么事是重要的, 什么事是紧急的, 什么事重要但不紧急, 什么事又重要又紧急. 这有利于你划分优先级.")]),t._v(" "),a("p",[a("mark",[a("strong",[t._v("最短作业优先")])]),t._v('. 对于相同优先级的事, 我个人喜欢的是 "最短作业优先" 的调度算法. 理由是, 先把可以快速做完的事做完, 看到 to-do list 上划掉一个任务, 看到任何的数据在减少, 对于自己也好, 对于老板也好. 老板可以看到你的工作进度飞快, 一方面有利于为后面复杂的工作争取更多的时间(老板只有在你有 Deliver 的时候才愿意给你更多的时间), 另一方面, 看到任务列表的减少会让你的心态更为积极. 而反过来, 你花太多的时间在长作业上, 长作业通常很容易出现"意外情况"让你花更多的时间, 但此时你发现还有很多别的事没有做, 这会让你产生焦虑感, 产生更多的压力, 进而导致更慢的生产效率.')]),t._v(" "),a("p",[a("mark",[a("strong",[t._v("想清楚再做")])]),t._v(". 我发现很多时候, 我们没有想清楚就开干了, "),a("mark",[a("strong",[t._v("边干边想, 这样的工作方式其实很糟糕")])]),t._v(". 你会发现, 如果你没有想清楚, 你总是要对已完成的工作进行返工, 返工好几次, 其实是非常浪费时间的. 所以对于一些没想清楚的事, 或是自己不太有信心的事, 还是先看看有没有已有的成熟解决方案, 或是找更牛的人来给你把把关, 帮你出出主意, 看看有没有更好, 更简单的方式.")]),t._v(" "),a("p",[a("mark",[a("strong",[t._v("关注长期利益规划")])]),t._v(". 要多关注长远可以节省多少时间, 而不是当前会花费多少时间. 长期成本会比短期成本大得多. 所以宁可在短期延期, 也不要透支未来. 这里的逻辑是, "),a("strong",[t._v("工作上的事你永远也做不完的, 长痛不如短痛")]),t._v(". 我一年要做 10 个项目, 我宁可第 1 或第 2 个项目被老板骂, 但是我可以赢得后面 8 个项目, 从后面 8 个项目上把之前失去的找回来. 而如果反过来的话, 我虽然一开始得到了老板的信任, 但是后面越来越玩不动, 最终搬起一块大石头砸了自己的脚. 而且, 不关注长远利益的人, 基本上来说也是很难有成长的.")]),t._v(" "),a("p",[t._v("也就是说, "),a("mark",[a("strong",[t._v("你要学会规划自己的行动计划, 不是短期的, 而是一个中长期的. 我个人建议是按季度来规划, 这个季度做什么, 达到什么目标, 一年往前走四步, 而不是只考虑眼下")])]),t._v(".")]),t._v(" "),a("h5",{attrs:{id:"_3-用好自己的时间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-用好自己的时间"}},[t._v("#")]),t._v(" 3.用好自己的时间")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("将军赶路不追小兔")]),t._v(". 这个世界有太多的东西会让我们分心和跑偏. 能专注地把时间投入到一个有价值的事上是非常重要的. 确定自己的目标, 专注达到这个目标, 而不是分心. 将军的目标是要攻城, 而不是追兔子. "),a("strong",[t._v("所以要学会过滤掉与自己目标无关的事, 不要让那些无关的事控制自己")]),t._v(". 比如, 不要让别人来影响自己的心情, 心情被影响了, 你一下就会什么都不想干了. 做自己心情的主人, 不要让别人 hack 了你的心情. 再比如, 知道哪些是自己可以控制的事, 哪些是自己控制不了的事, 在自己能控制的地方花时间. 再比如, 知道哪些是更有效的路径, 是花时间改变别人, 还是花时间去寻找志同道合的人. "),a("mark",[a("strong",[t._v("不与不如自己的人争论, 也不要尝试花时间去叫醒那些装睡的人, 这些都是非常浪费时间的事. 多花时间在有产出的事上, 少花时间在说服别人的事上")])]),t._v(".")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("形成习惯")]),t._v('. 再好的方法, 如果没有形成习惯, 不能在实际的工作和生活中解决实际问题, 都将成为空谈. 如果你是个追求上进的人, 我相信一定看过很多时间管理方法的文章和书籍, 并且看的时候还会有些振奋, 内心有时还会不自觉地想, "嗯, 嗯! 这个方法不错, 正是我需要的, 可以解决我的问题...". 但很多时候都坚持不了几天就抛之脑后了. 所以, 在讲述完如何争取时间, 及如何使用时间之后, 我想分享一下如何将这些时间管理方法形成习惯, 因为我坚信: "做" 比 "做好" 更重要. 养成一个好习惯通常需要 30 天左右的时间, 尤其在最初的几天就更为重要了. 这时, 不妨将文章中提到的方法和几个要点, 写在某本书或者笔记本的扉页上, 方便查看, 时刻提醒自己. 而且, 可以结合自己的实际情况, 适当做出调整. 我的方法是我根据自己的情况总结的, 不一定完全适合你, 你完全可以基于我说的几个原则, 发掘其他更适合自己的方法, 这样才能更有利于形成习惯, 对你更有帮助.')])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("形成正反馈")]),t._v(". 在前面的文章中提到过, 要有正反馈, 也就是"),a("strong",[t._v("成就感")]),t._v(", 有助于完成一些看似难以完成的事儿. 比如, 我们说过, 学习是逆人性的事儿, 但如果在学习过程中不断地有正反馈, 就更利于我们坚持下去. 要让自己有正反馈, 那就需要把时间花在有价值的地方, 比如解决自己和他人的痛点, 这样你会收获别人的赞扬和鼓励.")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("反思和举一反三")]),t._v('. 可以尝试每周末花上点时间思考一下, 本周做了哪些事儿? 时间安排是否合理? 还有哪些可以优化提高的地方? 有点儿类似于常说的 "复盘". 然后思考一下, 下周的主要任务是什么? 并根据优先级规划一下完成这些任务的顺序, 也就是做一些下周的工作规划.')])])]),t._v(" "),a("p",[a("strong",[t._v("这样每周都能及时得到自己做时间管理之后的反馈, 并有助于持续优化")]),t._v('. 通常坚持做时间管理一段时间以后, 你都能在每次复盘时得到正反馈, 这是有利于我们形成时间管理习惯的. 但我这里也想强调一点, 我们也要允许偶尔的"负反馈", 因为人的状态总是会有高潮和低谷的, 控制好一个合理的度就可以了.')]),t._v(" "),a("p",[t._v("**人最宝贵的财富就是时间, 把时间用在刀刃上, 必将让你的人生有更多收获. **")]),t._v(" "),a("h4",{attrs:{id:"故障处理最佳实践-应对故障"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#故障处理最佳实践-应对故障"}},[t._v("#")]),t._v(" 故障处理最佳实践:应对故障")]),t._v(" "),a("p",[t._v("或多或少我们都会经历线上的故障. 在我的职业生涯中, 就经历过很多的线上故障. 老实说, 线上故障是技术人员成长中必须要经历的事. 从故障中可以吸取到很多教训, 也能让我们学到很多书本上学不到的知识. 坑踩多了, 我们会变得越来越有经验, 也就成为老司机了.")]),t._v(" "),a("p",[t._v("不过, 我看到很多公司处理线上故障的方式并不科学, 而且存在很多问题, 所以今天这篇文章就来分享一些我的经验. 这些经验主要来自亚马逊和阿里这两家互联网公司, 以及个人的经验总结.")]),t._v(" "),a("h5",{attrs:{id:"_1-故障发生时"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-故障发生时"}},[t._v("#")]),t._v(" 1.故障发生时")]),t._v(" "),a("p",[t._v("在故障发生时, 最重要的是"),a("strong",[t._v("快速恢复故障")]),t._v(". 而快速恢复故障的前提是"),a("strong",[t._v("快速定位故障源")]),t._v('. 因为在很多分布式系统中, 一旦发生故障就会出现"多米诺骨牌效应". 也就是说, 系统会随着一个故障开始一点一点地波及到其它系统, 而且这个过程可能会很快. 一旦很多系统都在报警, 要想快速定位到故障源就不是一件简单的事了.')]),t._v(" "),a("p",[t._v("在亚马逊内部, 每个开发团队至少都会有一位 oncall 的工程师. 在 oncall 的时候, 工程师要专心处理线上故障, 轮换周期为每人一周. 一旦发生比较大的故障, 比如, S1 全部不可用, 或 S2 某功能不可用, 而且找不到替代方案, 那么这个故障就会被提交到一个工单系统里. 几乎所有相关团队 oncall 的工程师都会被叫到线上处理问题. 工作流是这样的, 工程师先线上签到, 然后自查自己的服务, 如果自己的服务没有问题, 那么就可以在旁边待命(standby), 以备在需要时进行配合. 如果问题没有被及时解决, 就会自动升级到高层, 直到 SVP 级别.")]),t._v(" "),a("p",[t._v("大家都知道, 在亚马逊, 不是按技能分工, 而是按职责分工, 也就是一个团队不是按前端, 后端, 运维等来分工, 而是按所负责的 Service 来分工. 所以, 亚马逊的开发人员都是前端, 后端, 测试, 运维全部都要干的. 而亚马逊内部有很多的服务, 一旦出现问题, 为了避免一个工单在各个团队流转, 需要所有团队上线处理, 这样是最快的.")]),t._v(" "),a("p",[t._v("如果系统架构是分布式服务化的, 那么一个用户的请求可能会经过很多的服务, 开发和运维起来是非常麻烦的. 此时, 跨团队跨部门的开发和运维就变得非常重要了.")]),t._v(" "),a("p",[t._v("就我的经历而言, 在故障发生时, 亚马逊的处理过程是比较有效和快速的, 尤其是能够快速地定位故障源. 对于被影响的其他团队也可以做一定的处理, 比如做降级处理, 这样可以控制故障的范围不被扩散.")]),t._v(" "),a("p",[t._v("故障源团队通常会有以下几种手段来恢复系统.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("重启和限流")]),t._v(". 重启和限流主要解决的是可用性的问题, 不是功能性的问题. 重启还好说, 但是限流这个事就需要相关的流控中间件了.")]),t._v(" "),a("li",[a("strong",[t._v("回滚操作")]),t._v(". 回滚操作一般来说是解决新代码的 bug, 把代码回滚到之前的版本是快速的方式.")]),t._v(" "),a("li",[a("strong",[t._v("降级操作")]),t._v(". 并不是所有的代码变更都是能够回滚的, 如果无法回滚, 就需要降级功能了. 也就是说, 需要挂一个停止服务的故障公告, 主要是不要把事态扩大.")]),t._v(" "),a("li",[a("strong",[t._v("紧急更新")]),t._v(". 紧急更新是常用的手段, 这个需要强大的自动化系统, 尤其是自动化测试和自动化发布系统. 假如你要紧急更新 1000 多台服务器, 没有一个强大的自动化发布系统是很难做到的.")])]),t._v(" "),a("p",[t._v("也就是说, 出现故障时, "),a("mark",[a("strong",[t._v("最重要的不是 debug 故障, 而是尽可能地减少故障的影响范围, 并尽可能快地修复问题")])]),t._v(".")]),t._v(" "),a("p",[t._v("国内的很多公司, 都是由专职的运维团队来处理线上问题的. 然而运维团队通常只能处理一些基础设施方面的问题, 或是非功能性的问题. 对于一些功能性的问题, 运维团队是完全没有能力处理的, 只能通过相应的联系人, 把相关的开发人员叫到线上来看. 而可能这个开发人员看到的是别的系统有问题, 又会叫上其它团队的人来. 所以一级一级地传递下去, 会浪费很多时间.")]),t._v(" "),a("h5",{attrs:{id:"_2-故障前的准备工作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-故障前的准备工作"}},[t._v("#")]),t._v(" 2.故障前的准备工作")]),t._v(" "),a("p",[t._v("为了能够在面临故障时做得有条不紊, 需要做一些前期的准备工作. 这些准备工作做得越细, 故障处理起来也就越有条理. 我们知道, 故障来临时, 一切都会变得混乱. 此时对于需要处理故障的我们来说, 事可以乱, 但人不能乱. 如果人跟着事一起乱, 那就是真正的混乱了.")]),t._v(" "),a("p",[t._v("所以需要做一些故障前的准备工作. 在这里给出一些我的经验.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("以用户功能为索引的服务和资源的全视图")]),t._v(". 首先需要一个系统来记录前端用户操作界面和后端服务, 以及服务使用到的硬件资源之间的关联关系. 这个系统有点像 CMDB(配置管理数据库), 但是比 CMDB 要大得多, 是以用户端的功能来做索引的. 然后, 把后端的服务, 服务的调用关系, 以及服务使用到的资源都关联起来做成一个视图. 这个视图最好是由相应的自动化监控系统生成. 有了这个资源图后, 就可以很容易地找到处理故障的路径了. "),a("strong",[t._v("这就好像一张地图, 如果没有地图, 我们只能像个无头苍蝇一样乱试了")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("为地图中的各个服务制定关键指标, 以及一套运维流程和工具, 包括应急方案")]),t._v(". 以用户功能为索引, 为每个用户功能的服务都制定一个服务故障的检测, 处理和恢复手册, 以及相关的检测, 查错或是恢复的运维工具. 对于基础层和一些通用的中间件, 也需要有相应的最佳实践的方法. 比如 Redis, 怎样检查其是否存在问题, 怎样查看其健康和运行状态? 哪些是关键指标, 面对常见的故障应该怎么应对, 服务不可用的服务方案是什么, 服务需要回滚了应该怎么操作, 等等. "),a("strong",[t._v("这就好像一个导航仪, 能够告诉你怎么做. 而没有导航仪, 就没有章法, 会导致混乱")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("设定故障的等级")]),t._v(". 还要设定不同故障等级的处理方式. 比如, 亚马逊一般将故障分为 4 级: 1 级是全站不可用; 2 级是某功能不可用, 且无替代方案; 3 级是某功能不可用, 但有替代方案; 4 级是非功能性故障, 或是用户不关心的故障. 阿里内的分类更多样一些, 有时会根据影响多少用户来定故障等级. 制定故障等级, 主要是为了确定该故障要牵扯进多大规模的人员来处理. 故障级别越高, 牵扯进来的人就越多, 参与进来的管理层级别也就越高. 就像亚马逊的全员上线 oncall 一样. "),a("strong",[t._v('这就好像是社会中常用的"红色警报", "橙色警报", "黄色警报"之类的, 会触发不同的处理流程')]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("故障演练")]),t._v(". 故障是需要演练的. 因为故障并不会时常发生, 但我们又需要不断提升处理故障的能力, 所以需要经常演练. 一些大公司, 如 Netflix, 会有一个叫 Chaos Monkey 的东西, 随机地在生产线上乱来. Facebook 也会有一些故障演习, 比如, 随机关掉线上的一些服务器. 总之, 要提升故障处理水平, 最好的方式就是实践. 见得多了, 处理得多了, 才能驾轻就熟. "),a("strong",[t._v("故障演练是一个非常好的实践")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("灰度发布系统")]),t._v(". 要减少线上故障的影响范围, 通过灰度发布系统来发布是一个很不错的方式. 毕竟在测试环境中很难模拟出线上环境的所有情况, 所以在生产线上进行灰度发布或是 A/B 测试是一件很好的事. 在亚马逊, 发布系统中有一个叫 Weblab 的系统, 就是用来做灰度发布的. 另外, 亚马逊全球会有多个站点. 一般来说, 会先发中国区. 如果中国区没什么问题了, 就发日本区, 然后发欧洲区, 最后是美国区. 而如果没有很多站点的话, 那么你就需要一个流量分配系统来做这个事了.")])]),t._v(" "),a("h4",{attrs:{id:"故障处理最佳实践-故障改进"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#故障处理最佳实践-故障改进"}},[t._v("#")]),t._v(" 故障处理最佳实践:故障改进")]),t._v(" "),a("p",[t._v("在上篇文章分享了在故障发生时, 该怎样做, 以及在故障前该做些什么准备. 只要做到我提到的那几点, 你基本上就能游刃有余地处理好故障了. 然而, 在故障排除后, "),a("strong",[t._v("如何做故障复盘及整改优化")]),t._v("则更为重要. 在这篇文章就跟聊聊这几个方面的内容.")]),t._v(" "),a("h5",{attrs:{id:"_1-故障复盘过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-故障复盘过程"}},[t._v("#")]),t._v(" 1.故障复盘过程")]),t._v(" "),a("p",[t._v("对于故障, 复盘是一件非常重要的事情, 因为我们的"),a("mark",[a("strong",[t._v("成长基本上就是从故障中总结各种经验教训, 从而可以获得最大的提升")])]),t._v(". 在亚马逊和阿里, 面对故障的复盘有不一样的流程, 虽然在内容上差不多, 但细节上有很多不同.")]),t._v(" "),a("p",[t._v("亚马逊内部面对 S1 和 S2 的故障复盘, 需要那个团队的经理写一个叫 COE(Correction of Errors)的文档. 这个 COE 文档, 基本上包括以下几方面的内容.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("故障处理的整个过程")]),t._v(". 就像一个 log 一样, 需要详细地记录几点几分干了什么事, 把故障从发生到解决的所有细节过程都记录下来.")]),t._v(" "),a("li",[a("strong",[t._v("故障原因分析")]),t._v(". 需要说明故障的原因和分析报告.")]),t._v(" "),a("li",[a("mark",[a("strong",[t._v("Ask 5 Whys")])]),t._v('. 需要反思并反问至少 5 个为什么, 并为这些 "为什么" 找到答案.')]),t._v(" "),a("li",[a("strong",[t._v("故障后续整改计划")]),t._v('. 需要针对上述的 "Ask 5 Whys" 说明后续如何举一反三地从根本上解决所有的问题.')])]),t._v(" "),a("p",[t._v("然后这个文档要提交到管理层, 向公司的 VP 级的负责人进行汇报, 并由他们来审查.")]),t._v(" "),a("p",[t._v("阿里的故障复盘会会把所有的相关人员都叫到现场进行复盘. 我比较喜欢这样的方式, 而不是亚马逊的由经理来操作这个事的方式. 虽然阿里的故障复盘会会开很长时间, 但是把大家叫在一起复盘的确是一个很好的方式. 一方面信息是透明的, 另一方面, 也是对大家的一次教育.")]),t._v(" "),a("p",[t._v('阿里的故障处理内容和亚马逊的很相似, 只是没有 "Ask 5 Whys", 但是加入了 "故障等级" 和 "故障责任人". 对于比较大的故障, 责任人基本上都是由 P9/M4 的人来承担. 而且对于引发故障的直接工程师, 阿里是会有相关的惩罚机制的, 比如全年无加薪无升职, 或者罚款.')]),t._v(" "),a("p",[t._v("**老实说, 我对惩罚故障责任人的方式非常不认同. **")]),t._v(" "),a("ul",[a("li",[t._v("首先, 惩罚故障责任人对于解决故障完全没有任何帮助. 因为它们之间没有因果关系, 既不是充分条件, 也不是必要条件, 更不是充要条件. 这是逻辑上的错误.")]),t._v(" "),a("li",[t._v("其次, 做得越多, 错得越多. 如果不想出错, 最好什么也不要做. 所以惩罚故障责任人只会让大家都很保守, 也会让大家都学会保守, 而且开始推诿, 营造一种恐怖的气氛.")])]),t._v(" "),a("p",[t._v("另外, 亚马逊和阿里的故障整改内容不太一样. 亚马逊更多的是通过技术手段来解决问题, 几乎没有增加更复杂的流程或是把现有的系统复杂化. 阿里的故障整改中会有一些复杂化问题的整改项, 比如对于误操作的处理方式是, 以后线上操作需要由两个人来完成, 其中一个人操作, 另一个人检查操作过程. 或是对于什么样的流程需要有审批环节. 再比如: 不去把原有的系统改好, 而是加入一个新的系统来看(kān, 第一声)着原来的那个不好的系统. 当然也有一些整改措施是好的, 比如, 通过灰度发布系统来减少故障面积.")]),t._v(" "),a("h5",{attrs:{id:"_2-故障整改方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-故障整改方法"}},[t._v("#")]),t._v(" 2.故障整改方法")]),t._v(" "),a("p",[t._v("就故障整改来说, 我比较喜欢亚马逊的那个 Ask 5 Whys 玩法, 这个对后面的整改会有非常大的帮助. 最近一次, 在帮一家公司做一个慢 SQL 的故障复盘时, 我一共问了近 9 个为什么.")]),t._v(" "),a("ol",[a("li",[t._v("为什么从故障发生到系统报警花了 27 分钟? 为什么只发邮件, 没有短信?")]),t._v(" "),a("li",[t._v("为什么花了 15 分钟, 开发的同学才知道是慢 SQL 问题?")]),t._v(" "),a("li",[t._v("为什么监控系统没有监测到 Nginx 499 错误, 以及 Nginx 的 upstream_response_time 和 request_time?")]),t._v(" "),a("li",[t._v("为什么在一开始按 DDoS 处理?")]),t._v(" "),a("li",[t._v("为什么要重启数据库?")]),t._v(" "),a("li",[t._v("为什么这个故障之前没有发生? 因为以前没有上首页, 最近上的.")]),t._v(" "),a("li",[t._v("为什么上首页时没有做性能测试?")]),t._v(" "),a("li",[t._v("为什么使用这个高危的 SQL 语句?")]),t._v(" "),a("li",[t._v("上线过程中为什么没有 DBA 评审?")])]),t._v(" "),a("p",[t._v("通过这 9 个为什么, 我为这家公司整理出来很多不足的地方. 提出这些问题的大致逻辑是这样的.")]),t._v(" "),a("p",[a("strong",[t._v("第一, 优化故障获知和故障定位的时间")]),t._v(".")]),t._v(" "),a("ul",[a("li",[t._v("从故障发生到我们知道的时间是否可以优化得更短?")]),t._v(" "),a("li",[t._v("定位故障的时间是否可以更短?")]),t._v(" "),a("li",[t._v("有哪些地方可以做到自动化?")])]),t._v(" "),a("p",[a("strong",[t._v("第二, 优化故障的处理方式")]),t._v(".")]),t._v(" "),a("ul",[a("li",[t._v("故障处理时的判断和章法是否科学, 是否正确?")]),t._v(" "),a("li",[t._v("故障处理时的信息是否全透明?")]),t._v(" "),a("li",[t._v("故障处理时人员是否安排得当?")])]),t._v(" "),a("p",[a("strong",[t._v("第三, 优化开发过程中的问题")]),t._v(".")]),t._v(" "),a("ul",[a("li",[t._v("Code Review 和测试中的问题和优化点.")]),t._v(" "),a("li",[t._v("软件架构和设计是否可以更好?")]),t._v(" "),a("li",[t._v("对于技术欠债或是相关的隐患问题是否被记录下来, 是否有风险计划?")])]),t._v(" "),a("p",[a("strong",[t._v("第四, 优化团队能力")]),t._v(".")]),t._v(" "),a("ul",[a("li",[t._v("如何提高团队的技术能力?")]),t._v(" "),a("li",[t._v("如何让团队有严谨的工程意识?")])]),t._v(" "),a("p",[t._v("具体采取什么样的整改方案会和这些为什么有很大关系. 总之还是那句话, 解决一个故障可以通过技术和管理两方面的方法. 如果你喜欢技术, 是个技术范, 你就更多地用技术手段; 如果你喜欢管理, 那么你就会使用更多的管理手段. **我是一个技术人员, 我更愿意使用技术手段. **")]),t._v(" "),a("h5",{attrs:{id:"_3-根除问题的本质"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-根除问题的本质"}},[t._v("#")]),t._v(" 3.根除问题的本质")]),t._v(" "),a("p",[t._v("最后对于故障处理, 我能感觉得到, "),a("strong",[t._v("一个技术问题, 后面隐藏的是工程能力问题, 工程能力问题后面隐藏的是管理问题, 管理问题后面隐藏的是一个公司文化的问题, 公司文化的问题则隐藏着创始人的问题...")])]),t._v(" "),a("p",[t._v("所以, 这里给出三条我工作这 20 年总结出来的原则(Principle), 供你参考.")]),t._v(" "),a("ol",[a("li",[a("mark",[a("strong",[t._v("举一反三解决当下的故障")])]),t._v(". 为自己赢得更多的时间.")]),t._v(" "),a("li",[a("mark",[a("strong",[t._v("简化复杂, 不合理的技术架构, 流程和组织")])]),t._v(". 你不可能在一个复杂的环境下根本地解决问题.")]),t._v(" "),a("li",[a("mark",[a("strong",[t._v("全面改善和优化整个系统, 包括组织")])]),t._v(". "),a("strong",[t._v("解决问题的根本方法是改善和调整整体结构")]),t._v(". 而只有简单优雅的东西才有被改善和优化的可能.")])]),t._v(" "),a("p",[t._v("换句话说, 我看到很多问题出了又出, 换着花样地出, 大多数情况下是因为这个公司的系统架构太过复杂和混乱, 以至于你不可能在这样的环境下干干净净地解决所有的问题. "),a("strong",[t._v("所以, 你要先做大扫除, 简化掉现有的复杂和混乱")]),t._v(". 如果要从根本上改善一个事, 那么首先得把它简化了. 这就是这么多年来我得到的认知.")]),t._v(" "),a("h4",{attrs:{id:"答疑解惑-我们应该能够识别的表象和本质"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#答疑解惑-我们应该能够识别的表象和本质"}},[t._v("#")]),t._v(" 答疑解惑:我们应该能够识别的表象和本质")]),t._v(" "),a("p",[t._v("前两天, 我以前在亚马逊(Amazon)团队的一个小伙伴从西雅图打来电话, 和我主要聊了一下他最近的一些想法和动向. 他在最近几个月面试了很多美国的本土公司, 从大公司到创业公司都有, 比如 Facebook, Snapchat, Oracle, 微软, 谷歌, Netflix, Uber 等. 他今年 30 岁出头, 到美国那边也有 3 年多时间了, 所以想要多一些经历, 到不同的公司看一下.")]),t._v(" "),a("p",[t._v("我觉得他这个想法挺好的. 于是我们聊了一些对这些公司的看法, 进而聊到他想要什么, 感兴趣什么, 想要经历什么, 以及擅长什么, 未来如何发展等话题...在两个多小时交谈的过程中, 我们谈论到了一些关于他个人发展以及技术上的东西. 他听我的建议后, 说很有价值. 于是, 我想既然有价值, 那么就把这些分享出来, 供更多的人参考吧.")]),t._v(" "),a("p",[t._v("首先, 我觉得在美国做技术真的比国内幸福好多, 有那么多很不错的不同类别的公司可供选择. 这与国内相比, 选择空间实在是太大了, 真是幸福. 所以在如此纷乱和多样化的地方, 真是需要确定自己的发展方向和目标. 不然就会像这个小伙儿一样, 当 offer 像雪片一样飞过来的时候, 却有点不知所措了.")]),t._v(" "),a("p",[t._v("我直接和他说, 你现在不愁工作了, 可以规划自己的职业生涯了, 那么问题是你想走哪条路, 对什么方向有兴趣, 或是自己的长项是什么? 结果, 他说他也不知道, 说就是想多看看多经历一些事情, 也不知道自己最终会对什么事有兴趣, 也不知道哪个方向更适合自己, 可能再来个 5 年就能明确了. 不过, 他明确表示对前端技术不感兴趣.")]),t._v(" "),a("p",[t._v("我对他的这些思考没有任何异议, 因为我觉得他的能力没有问题, 我无非就是想和他说说我的一些认识和看法, 希望可以帮他开阔开阔思路. 我基本上是给了他如下的这些看法和观点.")]),t._v(" "),a("h5",{attrs:{id:"_1-关于兴趣和投入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-关于兴趣和投入"}},[t._v("#")]),t._v(" 1.关于兴趣和投入")]),t._v(" "),a("p",[a("strong",[t._v("兴趣是学习的助燃剂")]),t._v(". 对一件事有兴趣是是否愿意对这件事投入更多时间或者资源的前提条件. 因此找到自己的兴趣点的确是非常关键的. 不过, 我们也能看到下面几点.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("一方面, 兴趣是需要保持的")]),t._v('. 有的人有的事就是三分钟的兴趣. 刚开始兴趣十足, 然而时间一长, 兴趣因为各种原因不能保持, 就会很快地 "移情别恋" 了. 所以, 不能持久的兴趣, 或是一时兴起的兴趣, 都无法让人投入下去.')]),t._v(" "),a("li",[a("strong",[t._v("另一方面, 兴趣其实也是可以培养出来的")]),t._v(". 我高考时, 对计算机软件毫无兴趣, 反而对物理世界里的很多东西感兴趣, 比如无线电, 原子能, 或是飞行器之类的. 但阴差阳错, 我最终考了个计算机软件专业, 然后发现, 自己越来越喜欢编程了, 于是就到了今天.")])]),t._v(" "),a("p",[t._v("一个可以持久的兴趣, 或是可以培养出来的兴趣, 后面都有一个比较本质的东西, 其实就是"),a("strong",[t._v("成就感")]),t._v(", 他是你坚持或者努力的最直接的正反馈. 也就是说, "),a("mark",[a("strong",[t._v("兴趣只是开始, 而能让人不断投入时间和精力的则是正反馈, 是成就感")])]),t._v(".")]),t._v(" "),a("p",[t._v("所以我对这个朋友说, 你对一件事的兴趣只是一种表象, 而内在更多的是你做这件事的成就感是否可以持续. "),a("strong",[t._v("你需要找到让自己能够更有成就感的事情, 兴趣总是可以培养的")]),t._v(".")]),t._v(" "),a("h5",{attrs:{id:"_2-关于学习和工作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-关于学习和工作"}},[t._v("#")]),t._v(" 2.关于学习和工作")]),t._v(" "),a("p",[t._v("后面, 我们又谈到了工作, 他觉得只有找到与兴趣相匹配的工作才是能否学好一个技术的关键. 对此我给了他如下一些回应.")]),t._v(" "),a("p",[t._v("我觉得学好一项技术和是否找到与之相匹配的工作有关联, 但它们之间并不是强关联的. 但之所以我们都觉得通过工作才让我们学习和成长得更快, 主要有这些原因.")]),t._v(" "),a("ul",[a("li",[t._v("工作能为我们带来相应的场景和实际的问题, 而不是空泛的学习. 带着问题去学习, 带着场景去解决问题, 的确是一种高效的学习方式.")]),t._v(" "),a("li",[t._v("在工作当中, 有同事和高手帮助. 和他们的交互和讨论, 可以让你更快地学习和成长.")])]),t._v(" "),a("p",[t._v("**本质上来说, 并不是只有找到了相应的工作我们才可以学好一项技术, 而是我们在通过解决实际问题, 在和他人讨论, 获得高手帮助的环境中, 才能更快更有效率地学习和成长. **")]),t._v(" "),a("p",[a("mark",[t._v("**有时候, 在工作中你反而学不到东西, 那是因为你找的这个工作能够提供的场景不够丰富, 需要解决的实际问题太过简单, 以及你的同事对你的帮助不大. 这时, 这个工作反而限制了你的学习和成长. **")])]),t._v(" "),a("p",[t._v("所以, 我给了这个小伙子两点建议.")]),t._v(" "),a("ul",[a("li",[t._v("找工作不只是找用这个技术的工作, 更是要找场景, 找实际问题, 找团队. 这些才是本质. 一项技术很多公司都在用, 然而只有进入到有更多的场景, 有挑战性的问题, 有靠谱团队的公司, 才对学习和成长更有帮助.")]),t._v(" "),a("li",[t._v("不要完全把自己的学习寄希望于找一份工作, 才会学得好. 我给他的建议是, 在一些开源社区内, 有助于学习的场景会更多, 要解决的实际问题也更多, 同时你能接触到的牛人也更多. 特别是一些有大量公司和几万, 几十万甚至上百万的开发人员在贡献代码的项目, 我认为可以让人成长很快.")])]),t._v(" "),a("p",[t._v("我入行前十年并没有生活在一个开源软件爆发的年代, 也没有生活在一个场景像今天这么丰富的年代, 所以也走了很多弯路. 不过, 比较幸运的是, 我还是在一些关键时期找到了靠谱的工作, 为我带来了一般人看不到的实际问题, 也为我提供了很不错的团队和实际场景.")]),t._v(" "),a("p",[t._v("今天的年轻人有比我更好的环境和条件, 应该能比我成长得更好, 更快. 当然, 和我的成长一样, 都需要小心地鉴别和甄选.")]),t._v(" "),a("p",[t._v("**总之, 找到学习的方法, 提升自己对新事物学习的能力, 才是学习和成长的关键. **")]),t._v(" "),a("h5",{attrs:{id:"_3-关于技术和价值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-关于技术和价值"}},[t._v("#")]),t._v(" 3.关于技术和价值")]),t._v(" "),a("p",[t._v('后面, 我们又聊到了什么样的技术会是属于未来的技术, 以及应该把时间花在什么样的技术上. 我问了他这样一个问题: "你觉得, 让人登月探索宇宙的技术价值大, 还是造高铁的技术价值大? 或者是科学种田的技术价值大?" 对于这个问题, 从不同的角度上看, 就会得到不同的结论. 似乎, 我们无法说明白哪项技术创造的价值更大, 因为完全没法比较.')]),t._v(" "),a("p",[t._v("于是我又说了一个例子, 在第一次工业革命的时候, 也就是蒸汽机时代, 除了蒸汽机之外还有其它一些技术含量更高的技术, 比如化学, 冶金, 水泥, 玻璃... 但是, 这么一个不起眼的技术引发了人类社会的变革. 也许那个时候, 在技术圈中, 很多技术专家还鄙视蒸汽机的技术含量太低呢.")]),t._v(" "),a("p",[t._v("我并不是想说高大上的技术无用, 我想说的是, 技术无贵贱, 很多伟大的事就是通过一些不起眼的技术造就的. 所以我们应该关注的是:")]),t._v(" "),a("ul",[a("li",[t._v("**要用技术解决什么样的问题, 场景非常重要; **")]),t._v(" "),a("li",[t._v("**如何降低技术的学习成本, 提高易用性, 从而可以让技术更为普及. **")])]),t._v(" "),a("p",[t._v('另外, 我又说了一个例子. 假设今天没有电, 忽然有人说他发明了电. 我相信, 这个世界上的很多人都会觉得"电"这个东西没什么用, 而只有等到"电灯"的发明, 人们才明白发明"电"是多么牛. 所以, 对于一些 "基础技术" 来说, 通常会在某段时间内会被人类社会低估. 就像国内前几年低估 "云计算" 技术一样. 基础技术就像是创新的引擎, 其不断地成熟和完善会引发更上层的技术不断地衍生, 越滚越大.')]),t._v(" "),a("p",[t._v("而在一个基础技术被广泛应用的过程中, 如何规模化也会成为一个关键. 这就好像发电厂一样, 没有发电厂, 电力就无法做到规模化. 记得汽车发明的时候, 要组装一个汽车的时间成本, 人力成本, 物力成本都非常高, 所以完全无法做到规模化, 而通过模块化分工, 自动化生产等技术手段才释放了产能, 从而普及.")]),t._v(" "),a("p",[t._v("所以, 我个人觉得一项有价值的技术, 并不在于这项技术是否有技术含量, 而是在于:")]),t._v(" "),a("ul",[a("li",[t._v("**能否低成本高效率地解决实际问题; **")]),t._v(" "),a("li",[t._v("**是不是众多产品的基础技术; **")]),t._v(" "),a("li",[t._v("**是不是可以支持规模化的技术. **")])]),t._v(" "),a("p",[t._v("对于搞计算机软件的人来说, 也可以找到相对应的技术点. 比如:")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("低成本高效率地解决实际问题的技术, 一定是自动化的技术")]),t._v(". 软件天生就是用来完成重复劳动的, 天生就是用来做自动化的. 而未来的 AI 和 IoT 也是在拼命数字化和自动化还没有自动化的领域.")]),t._v(" "),a("li",[a("strong",[t._v("基础技术总是枯燥和有价值的")]),t._v(". 数学, 算法, 网络, 存储等基础技术吃得越透, 就越容易服务上层的各种衍生技术或产品.")]),t._v(" "),a("li",[a("strong",[t._v("支持规模化的技术也是很有价值的")]),t._v(". 在软件行业中, 也就是 PaaS 的相关技术.")])]),t._v(" "),a("p",[t._v("当然, 我的意思并不是别的技术都没有价值了. 重申一下, **技术无贵贱. 我只是想说, 能规模化低成本高效率解决实际问题的技术及其基础技术, 就算是很 low, 也是很有价值的. **")]),t._v(" "),a("h5",{attrs:{id:"_4-关于趋势和未来"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-关于趋势和未来"}},[t._v("#")]),t._v(" 4.关于趋势和未来")]),t._v(" "),a("p",[t._v("老实说, 真的没人可以预测未来会是什么样的. 不过似乎有些规律也是有迹可寻的. 我一直认为, "),a("strong",[t._v("这个世界的技术趋势和未来其实是被人控制的")]),t._v(". 就是被那些有权有势有钱的公司或国家来控制的. 当然, 他们控制的不是长期的未来, 但短期的未来(3-5 年)一定是他们控制着的.")]),t._v(" "),a("p",[t._v("也就是说, 技术的未来要去哪, 主要是看这个世界的投入会到哪. 基本上就是这个世界上的有钱有势的人把财富投到哪个领域, 也就是这个世界的大公司或大国们的规划.")]),t._v(" "),a("p",[t._v("一旦他们把大量的金钱投到某个领域, 这个领域就会得到发展, 那么发展之后, 这个领域也就成为未来了. 只要是有一堆公司在往一个方向上不间断地投资或者花钱, 这个方向不想成为未来似乎都不可能.")]),t._v(" "),a("p",[t._v("听上去多少有点儿令人沮丧, 但我个人觉得世界就是如此简单粗暴运作着的.")]),t._v(" "),a("p",[t._v('所以, 对于我们这些在这个世界里排不上号的人来说, 只能默默地跟随着这些大公司所引领的趋势和未来. 对一些缺钱缺人的创业公司, 唯一能够做的, 也许只是两条路, 一是用更为低的成本来提供和大公司相应的技术, 另一条路是在细分垂直市场上做得比大公司更专更精. 等着自己有一天长大后, 也能加入第一梯队从而"引领"未来.')]),t._v(" "),a("h5",{attrs:{id:"_5-小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-小结"}},[t._v("#")]),t._v(" 5.小结")]),t._v(" "),a("p",[t._v("今天的这个主题, 我其实观察和酝酿了很久, 正好结合跟这位小伙伴的交流, 总结整理出来. 在我们的生活和工作中, 总是会有很多人混淆一些看似有联系, 实则关系不大的词和概念, 分辨不清事物的表象和本质.")]),t._v(" "),a("p",[t._v("比如文中提到的兴趣和投入. 表面上, 兴趣是决定一件事儿能否做持久的关键因素. 而反观我们自己和他人的经历不难发现, 兴趣扮演的角色通常是敲门砖, 它引发我们关注到某事某物. 而真正能让我们坚持下去的, 实际上是做一件事之后从中收获到的正反馈, 也就是成就感.")]),t._v(" "),a("p",[t._v("同样, 人们也经常搞错学习和工作之间的关系. 多数人都会认为, 在工作中学习和成长速度更快. 而仔细观察下来, 你会发现, 工作不过是提供了一个能够解决实际问题, 能跟人讨论, 有高手帮助的环境.")]),t._v(" "),a("p",[t._v("所以说, 让我们成长的并不是工作本身, 而是有利于学习的环境. 也就是说, 如果我们想学习, 除了可以选择有助于学习的工作机会, 开源社区提供的环境同样有助于我们的学习和提高, 那里高手更多, 实际问题不少.")]),t._v(" "),a("p",[t._v("还有, 技术和价值. 人们通常认为技术含量高的技术其价值会更高, 而历史上无数的事实却告诉我们, 能规模化, 低成本, 高效率地解决实际问题的技术及其基础技术, 才发挥出了更为深远的影响, 甚至其价值更是颠覆性的, 难以估量.")]),t._v(" "),a("p",[t._v('趋势和未来也是被误解得很深的一对"孪生兄弟". 虽然大家通常会认为有什么样的技术趋势, 必然带来什么样的未来. 殊不知, 所谓的趋势和未来, 其实都是可以由人为控制的, 特别是哪些有钱有势的人和公司. 也就是, 社会的资金和资源流向什么领域, 这个领域势必会得到成长和发展, 会逐渐形成趋势, 进而成为未来. 我们遵循这样的规律, 就能很容易地判断出未来的, 最起码是近几年的, 技术流向了.')]),t._v(" "),a("p",[t._v("再如, 加班和产出, 努力和成功, 速度和效率...加班等于高产出吗? 显然不是. 很努力就一定会成功吗? 当然不是. 速度快就是效率高吗? 更加不是. 可以枚举的还有很多, 如干得多就等于干得好吗? 等等.")]),t._v(" "),a("h4",{attrs:{id:"git协同工作流-你该怎么选"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git协同工作流-你该怎么选"}},[t._v("#")]),t._v(" Git协同工作流,你该怎么选?")]),t._v(" "),a("p",[t._v("与传统的代码版本管理工具相比, Git 有很多的优势, 因而越来越成为程序员喜欢的版本管理工具. 我觉得 Git 这个代码版本管理工具最大的优势有以下几个.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Git 是一个分布式的版本管理工具")]),t._v(", 而且可以是单机版的, 所以在没有网络的时候同样可以提交(commit)代码. 这意味着在出差途中或是没有网络的环境中依然可以工作写代码.")]),t._v(" "),a("li",[a("strong",[t._v("Git 从一个分支向另一个分支合并代码的时候, 会把要合并的分支上的所有提交一个一个应用到被合并的分支上, 合并后也能看得到整个代码的变更记录")]),t._v(". 而其他的版本管理工具则不能.")]),t._v(" "),a("li",[t._v("Git 切换分支的时候通常很快. 不像其他版本管理器, 每个分支一份拷贝.")]),t._v(" "),a("li",[t._v("Git 有很多非常有用的命令, 让你可以很方便地工作.")])]),t._v(" "),a("p",[t._v("比如我很喜欢的 "),a("code",[t._v("git stash")]),t._v("​ 命令, 可以把当前没有完成的事先暂存一下, 然后去忙别的事. "),a("code",[t._v("git cherry-pick")]),t._v("​ 命令可以让你"),a("strong",[t._v("有选择地合并提交")]),t._v(". "),a("code",[t._v("git add -p")]),t._v("​ 可以让你挑选改动提交, "),a("code",[t._v("git grep $regexp $(git rev-list --all)")]),t._v("​ 可以用来在所有的提交中找代码. 因为都是本地操作, 所以你会觉得速度飞快.")]),t._v(" "),a("p",[t._v("除此之外, 由 Git 衍生出来的 GitHub/GitLab 可以帮你很好地管理编程工作, 比如 wiki, fork, pull request, issue... 集成了与编程相关的工作, 让人觉得这不是一个冷冰冰的工具, 而真正和日常工作发生了很好的交互.")]),t._v(" "),a("p",[t._v("GitHub/GitLab 这样工具的出现, 让我们的工作可以呈现在一个工作平台上, 并以此来规范整个团队的工作, 这才正是 Git 这个版本管理工具成功的原因.")]),t._v(" "),a("p",[t._v("今天, 我们不讲 Git 是怎么用的, 因为互联网上有太多的文章和书了. 在这篇文章中, 我想讲一下 Git 的协同工作流, 因为我看到很多团队在使用 Git 时, 并没有用好. 注意, 因为 Git 是一个分布式的代码管理器, 所以是分布式就会出现"),a("strong",[t._v("数据不一致")]),t._v("的情况, 因此需要一个协同工作流来让工作变得高效, 同时可以有效地让代码具有更好的一致性.")]),t._v(" "),a("p",[t._v("说到一致性, 就是每个人手里的开发代码, 还有测试和生产线上的代码, 要有一个比较好的一致性的管理和协同方法. 这就是 Git 协同工作流需要解决的问题. 目前来说, 你可能以为我想说的是 GitFlow 工作流. 恭喜你猜对了. 但我想说的是, GitFlow 工作流太过复杂, 我并不觉得 GitFlow 工作流是一个好的工作流. 如果你的团队在用这种工作流开发软件, 我相信你的感觉一定是糟透了.")]),t._v(" "),a("p",[t._v("所以这篇文章会对比一些比较"),a("strong",[t._v("主流的协同工作流")]),t._v(", 然后再抨击一下 GitFlow 工作流.")]),t._v(" "),a("h5",{attrs:{id:"_1-中心式协同工作流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-中心式协同工作流"}},[t._v("#")]),t._v(" 1.中心式协同工作流")]),t._v(" "),a("p",[t._v("首先先说明一下, Git 是可以像 SVN 这样的中心工作流一样工作的. 我相信很多程序员都是在采用这样的工作方式.")]),t._v(" "),a("p",[t._v("这个过程一般是下面这个样子的.")]),t._v(" "),a("ol",[a("li",[t._v("从服务器上做 "),a("code",[t._v("git pull origin master")]),t._v("​ 把代码同步下来.")]),t._v(" "),a("li",[t._v("改完后, "),a("code",[t._v("git commit")]),t._v("​ 到本地仓库中.")]),t._v(" "),a("li",[t._v("然后 "),a("code",[t._v("git push origin master")]),t._v("​ 到远程仓库中, 这样其他同学就可以得到你的代码了.")])]),t._v(" "),a("p",[t._v("如果在第 3 步发现 push 失败, 因为别人已经提交了, 那么你需要先把服务器上的代码给 pull 下来, 为了避免有 merge 动作, 可以使用 "),a("code",[t._v("git pull --rebase")]),t._v("​. 这样就可以把服务器上的提交直接合并到你的代码中, 对此, Git 的操作是这样的.")]),t._v(" "),a("ol",[a("li",[t._v("**先把你本地提交的代码放到一边. **")]),t._v(" "),a("li",[t._v("**然后把服务器上的改动下载下来. **")]),t._v(" "),a("li",[t._v("**然后在本地把你之前的改动再重新一个一个地做 commit, 直到全部成功. **")])]),t._v(" "),a("p",[t._v("如下图所示. Git 会把 Origin/Master 的远程分支下载下来(紫色的), 然后把本地的 Master 分支上的改动一个一个地提交上去(蓝色的).")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/62735cc5e4cb71eb7ba94a7c34d506b5-20230731162102-1q5pf9s.png",alt:""}})]),t._v(" "),a("p",[t._v("如果有冲突, 那么要先解决冲突, 然后做 "),a("code",[t._v("git rebase --continue")]),t._v("​. 如下图所示, git 在做 pull --rebase 时, "),a("strong",[t._v("会一个一个地应用(apply)本地提交的代码, 如果有冲突就会停下来, 等你解决冲突")]),t._v(".")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/1542133d9fc097d00a410fab8fe7f74d-20230731162102-9zsrntu.png",alt:""}})]),t._v(" "),a("h5",{attrs:{id:"_2-功能分支协同工作流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-功能分支协同工作流"}},[t._v("#")]),t._v(" 2.功能分支协同工作流")]),t._v(" "),a("p",[t._v("上面的那种方式有一个问题, 就是"),a("strong",[t._v("大家都在一个主干上开发程序")]),t._v(", 对于小团队或是小项目你可以这么干, 但是对比较大的项目或是人比较多的团队, 这么干就会有很多问题.")]),t._v(" "),a("p",[t._v("最大的问题就是"),a("strong",[t._v("代码可能干扰太严重")]),t._v(". 尤其是, 我们想安安静静地开发一个功能时, 想把各个功能的代码变动隔离开来, 同时各个功能又会有多个开发人员在开发. 这时, 我们不想让各个功能的开发人员都在 Master 分支上共享他们的代码. 我们想要的协同方式是这样的: "),a("strong",[t._v("同时开发一个功能的开发人员可以分享各自的代码, 但是不会把代码分享给开发其他功能的开发人员, 直到整个功能开发完毕后, 才会分享给其他的开发人员(也就是进入主干分支)")]),t._v(" .")]),t._v(" "),a("p",[t._v('因此, 我们引入 "功能分支". 这个协同工作流的开发过程如下.')]),t._v(" "),a("ol",[a("li",[t._v("首先使用 "),a("code",[t._v("git checkout -b new-feature")]),t._v(' 创建 "new-feature"分支.')]),t._v(" "),a("li",[t._v("然后共同开发这个功能的程序员就在这个分支上工作, 进行 add, commit 等操作.")]),t._v(" "),a("li",[t._v("然后通过 "),a("code",[t._v("git push -u origin new-feature")]),t._v(" 把分支代码 push 到服务器上.")]),t._v(" "),a("li",[t._v("其他程序员可以通过 "),a("code",[t._v("git pull --rebase")]),t._v("​ 来拿到最新的这个分支的代码.")]),t._v(" "),a("li",[t._v("最后通过 Pull Request 的方式做完 Code Review 后合并到 Master 分支上.")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/04613897c366d83817682df5a6a9343b-20230731162102-wz769kq.png",alt:""}})]),t._v(" "),a("p",[t._v("就像上面这个图显示的一样, 紫色的分支就是功能分支, 合并后就会像上面这个样子. 可以看到, 其实这种开发也是以服务器为中心的开发, 还不是 Git 分布式开发, "),a("strong",[t._v("它只不过是用分支来完成代码改动的隔离")]),t._v(".")]),t._v(" "),a("p",[t._v('另外提醒一下, 为什么会叫"功能分支", 而不是"项目分支"? 因为 Git 的最佳实践希望大家在开发的过程中, 快速提交, 快速合并, 快速完成. 这样可以少很多冲突的事, 所以叫功能分支. 传统的项目分支开得太久, 时间越长就越合不回去. 这种玩法其实就是把一个大项目切分成若干个小项目来执行(最好是一个小功能一个项目). 这样才是互联网式的快速迭代式的开发流程.')]),t._v(" "),a("h5",{attrs:{id:"_3-gitflow协同工作流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-gitflow协同工作流"}},[t._v("#")]),t._v(" 3.GitFlow协同工作流")]),t._v(" "),a("p",[t._v("在真实的生产过程中, 前面的协同工作流还是不能满足工作的要求. 这主要因为生产过程是比较复杂的, 软件生产中会有各式各样的问题, 并要面对不同的环境. 要在不停地开发新代码的同时, 维护线上的代码, 于是就有了下面这些需求.")]),t._v(" "),a("ol",[a("li",[t._v("**希望有一个分支是非常干净的, 上面是可以发布的代码, 上面的改动永远都是可以发布到生产环境中的. 这个分支上不能有中间开发过程中不可以上生产线的代码提交. **")]),t._v(" "),a("li",[t._v("**希望当代码达到可以上线的状态时, 也就是在 alpha/beta release 时, 在测试和交付的过程中, 依然可以开发下一个版本的代码. **")]),t._v(" "),a("li",[t._v("**最后, 对于已经发布的代码, 也会有一些 Bug-fix 的改动, 不会将正在开发的代码提交到生产线上去. **")])]),t._v(" "),a("p",[t._v("面对这些需求, 前面的那些协同方式就都不行了. 因为我们不仅是要在整个团队中共享代码, 要的更是管理好不同环境下的代码不互相干扰. 说得技术一点儿就是, 要管理好代码与环境的一致性.")]),t._v(" "),a("p",[t._v("为了解决这些问题, GitFlow 协同工作流就出来了. GitFlow 协同工作流是由 Vincent Driessen 于 2010 年在 A successful Git branching model 这篇文章介绍给世人的.")]),t._v(" "),a("p",[t._v("这个协同工作流的核心思想如下图所示.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/32599ae734d529dfb3dd44130142e8e5-20230731162102-zxa4rct.png",alt:""}})]),t._v(" "),a("p",[t._v("整个代码库中一共有五种分支.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Master 分支")]),t._v(". 也就是"),a("strong",[t._v("主干分支, 用作发布环境")]),t._v(", 上面的每一次提交都是可以发布的.")]),t._v(" "),a("li",[a("strong",[t._v("Feature 分支")]),t._v(". 也就是功能分支, 用于开发功能, 其对应的是"),a("strong",[t._v("开发环境")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("Developer 分支")]),t._v(". 是开发分支, 一旦功能开发完成, 就向 Developer 分支合并, 合并完成后, 删除功能分支. 这个分支对应的是集成测试环境.")]),t._v(" "),a("li",[a("strong",[t._v("Release 分支")]),t._v(". 当 Developer 分支测试达到可以发布状态时, 开出一个 Release 分支来, 然后做发布前的准备工作. 这个分支对应的是预发环境. 之所以需要这个 Release 分支, 是我们的开发可以继续向前, 不会因为要发布而被 block 住而不能提交. 一旦 Release 分支上的代码达到可以上线的状态, 那么需要把 Release 分支向 Master 分支和 Developer 分支同时合并, 以保证代码的一致性. 然后再把 Release 分支删除掉.")]),t._v(" "),a("li",[a("strong",[t._v("Hotfix 分支")]),t._v(". 是用于处理生产线上代码的 Bug-fix, 每个线上代码的 Bug-fix 都需要开一个 Hotfix 分支, 完成后, 向 Developer 分支和 Master 分支上合并. 合并完成后, 删除 Hotfix 分支.")])]),t._v(" "),a("p",[t._v("这就是整个 GitFlow 协同工作流的工作过程. 可以看到:")]),t._v(" "),a("ol",[a("li",[t._v("需要长期维护 Master 和 Developer 两个分支.")]),t._v(" "),a("li",[t._v("这其中的方式还是有一定复杂度的, 尤其是 Release 和 Hotfix 分支需要同时向两个分支作合并. 所以, 如果没有一个好的工具来支撑的话, 这会因为可能会忘了做一些操作而导致代码不一致.")]),t._v(" "),a("li",[t._v("GitFlow 协同虽然工作流比较重. 但是它几乎可以应对所有公司的各种开发流程, 包括瀑布模型, 或是快速迭代模型.")])]),t._v(" "),a("h5",{attrs:{id:"_4-github-gitlab协同工作流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-github-gitlab协同工作流"}},[t._v("#")]),t._v(" 4.GitHub/GitLab协同工作流")]),t._v(" "),a("h6",{attrs:{id:"_1-gitflow的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-gitflow的问题"}},[t._v("#")]),t._v(" (1)GitFlow的问题")]),t._v(" "),a("p",[t._v("对于 GitFlow 来说, 虽然可以解决问题, 但是也有很多问题. 在 GitFlow 流行了一段时间后, 圈内出现了一些不同的声音. 参看下面两篇吐槽文章.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://endoflineblog.com/gitflow-considered-harmful",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitFlow considered harmful"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://luci.criosweb.ro/a-real-life-git-workflow-why-git-flow-does-not-work-for-us/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Why git flow does not work for us"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("其中有个问题就是因为"),a("strong",[t._v("分支太多")]),t._v(", 所以会出现 git log 混乱的局面. 具体来说, 主要是 git-flow 使用 "),a("code",[t._v("git merge --no-ff")]),t._v("​ 来合并分支, 在 git-flow 这样多个分支的环境下会让你的分支管理的 log 变得很难看. 如下所示, 左边是使用 –no-ff 参数在多个分支下的问题.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/e8c3b8294791b04c58d3765338d07b05-20230731162102-09szjph.png",alt:""}})]),t._v(" "),a("p",[t._v("所谓 "),a("code",[t._v("--no-ff")]),t._v("​ 参数的意思是 "),a("code",[t._v("——no fast forward")]),t._v("​ 的意思. 也就是说, 合并的方法不要把这个分支的提交以前置合并的方式, 而是留下一个 merge 的提交. 这是把双刃剑, 我们希望 "),a("code",[t._v("--no-ff")]),t._v("​ 能像右边那样, 而不是像左边那样.")]),t._v(" "),a("p",[t._v("对此的建议是: 只有 feature 合并到 developer 分支时, 使用 "),a("code",[t._v("–no-ff")]),t._v("​ 参数, 其他的合并都不使用 "),a("code",[t._v("--no-ff")]),t._v("​ 参数来做合并.")]),t._v(" "),a("p",[t._v("另外, 还有一个问题就是, 在开发得足够快的时候, 你会觉得同时维护 Master 和 Developer 两个分支是一件很无聊的事, 因为这两个分支在大多数情况下都是一样的. 包括 Release 分支, 会觉得创建的这些分支太无聊.")]),t._v(" "),a("p",[t._v("而你的整个开发过程也会因为这么复杂的管理变得非常复杂. 尤其当你想回滚某些人的提交时, 就会发现这事似乎有点儿不好干了. 而且在工作过程中, 会来来回回地切换工作的分支, 有时候一不小心没有切换, 就提交到了不正确的分支上, 你还要回滚和重新提交, 等等.")]),t._v(" "),a("p",[t._v("GitLab 一开始是 GitFlow 的坚定支持者, 后来因为这些吐槽, 以及 Hacker News 和 Reddit 上大量的讨论, GitLab 也开始不玩了. 他们写了"),a("a",{attrs:{href:"https://about.gitlab.com/2014/09/29/gitlab-flow/",target:"_blank",rel:"noopener noreferrer"}},[t._v("一篇 blog"),a("OutboundLink")],1),t._v("来创造了一个新的 Workflow——"),a("strong",[t._v("GitLab Flow")]),t._v(", 这个 GitLab Flow 是基于 GitHub Flow 来做的(参看: "),a("a",{attrs:{href:"http://scottchacon.com/2011/08/31/github-flow.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub Flow"),a("OutboundLink")],1),t._v(").")]),t._v(" "),a("h6",{attrs:{id:"_2-github-flow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-github-flow"}},[t._v("#")]),t._v(" (2)GitHub Flow")]),t._v(" "),a("p",[t._v("所谓 GitHub Flow, 其实也叫 Forking flow, 也就是 GitHub 上的那个开发方式.")]),t._v(" "),a("ol",[a("li",[t._v('每个开发人员都把 "官方库" 的代码 fork 到自己的代码仓库中.')]),t._v(" "),a("li",[t._v("然后开发人员在自己的代码仓库中做开发, 想干啥干啥.")]),t._v(" "),a("li",[t._v("因此开发人员的代码库中, 需要配两个远程仓库, 一个是自己的库, 一个是官方库(用户的库用于提交代码改动, 官方库用于同步代码).")]),t._v(" "),a("li",[t._v('然后在本地建 "功能分支", 在这个分支上做代码开发.')]),t._v(" "),a("li",[t._v("这个功能分支被 push 到开发人员自己的代码仓库中.")]),t._v(" "),a("li",[t._v('然后, 向 "官方库" 发起 pull request, 并做 Code Review.')]),t._v(" "),a("li",[t._v("一旦通过, 就向官方库进行合并.")])]),t._v(" "),a("p",[t._v("这就是 GitHub 的工作流程.")]),t._v(" "),a("p",[t._v('如果你有 "官方库" 的权限, 那么就可以直接在 "官方库" 中建功能分支开发, 然后提交 pull request. 通过 Code Review 后, 合并进 Master 分支, 而 Master 一旦有代码被合并就可以马上 release.')]),t._v(" "),a("p",[t._v("这是一种非常 Geek 的玩法. 这需要一个"),a("strong",[t._v("自动化的 CI/CD 工具")]),t._v("做辅助. 是的, CI/CD 应该是开发中的标配了.")]),t._v(" "),a("h6",{attrs:{id:"_3-gitlab-flow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-gitlab-flow"}},[t._v("#")]),t._v(" (3)GitLab Flow")]),t._v(" "),a("p",[t._v("然而 GitHub Flow 这种玩法依然会有好多问题, 因为其虽然变得很简单, 但是没有把代码和运行环境给联系在一起. 所以 GitLab 提出了几个优化点.")]),t._v(" "),a("p",[t._v("其中一个是引入环境分支, 如下图所示, 其包含了"),a("strong",[t._v("预发布(Pre-Production)和生产(Production)分支")]),t._v(".")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/c9450cfba28a950a3b1764683a3c2040-20230731162102-7lel4jo.png",alt:""}})]),t._v(" "),a("p",[t._v("而有些时候, 还会有不同版本的发布, 所以还需要有各种 release 的分支. 如下图所示. Master 分支是一个 roadmap 分支, 然后一旦稳定了就建稳定版的分支, 如 2.3.stable 分支和 2.4.stable 分支, 其中可以 cherry-pick master 分支上的一些改动过去.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/de360cc99cebbfe71a9be5e7a6868277-20230731162102-45vrp2e.png",alt:""}})]),t._v(" "),a("p",[t._v("这样也就解决了两个问题:")]),t._v(" "),a("ul",[a("li",[t._v("环境和代码分支对应的问题;")]),t._v(" "),a("li",[t._v("版本和代码分支对应的问题.")])]),t._v(" "),a("p",[t._v("老实说, 对于互联网公司来说, 环境和代码分支对应这个事, 只要有个比较好的 CI/CD 生产线, 这种环境分支应该也是没有必要的. 而对于版本和代码分支的问题, 我觉得这应该是有意义的, 但是最好不要维护太多的版本, 版本应该是短暂的, 等新的版本发布时, 老的版本就应该删除掉了.")]),t._v(" "),a("h5",{attrs:{id:"_5-协同工作流的本质"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-协同工作流的本质"}},[t._v("#")]),t._v(" 5.协同工作流的本质")]),t._v(" "),a("p",[t._v("对于上面这些各式各样的工作流的比较和思考, 虽然我个人非常喜欢 GitHub Flow, 在必要的时候使用上 GitLab 中的版本或环境分支. 不过现实生活中, 还是有一些开发工作不是以功能为主, 而是以项目为主的. 也就是说, 项目的改动量可能比较大, 时间和周期可能也比较长.")]),t._v(" "),a("p",[t._v("我在想, 是否有一种工作流, 可以面对现实工作中的各种情况. 但是这个世界太复杂了, 应该不存在一种一招鲜吃遍天的放之四海皆准的银弹方案. 所以还要根据自己的实际情况来挑选适合的协同工作的方式.")]),t._v(" "),a("p",[t._v("而代码的协同工作流属于 SCM(Software Configuration Management)的范畴, 要挑选好适合自己的方式, 需要知道软件工程配置管理的本质. 根据这么多年来我在各个公司的经历, 有互联网的, 有金融的, 有项目的, 有快速迭代的等, 我认为团队协同工作的本质不外乎这么几个事儿.")]),t._v(" "),a("ol",[a("li",[t._v("**不同的团队能够尽可能地并行开发. **")]),t._v(" "),a("li",[t._v("**不同软件版本和代码的一致性. **")]),t._v(" "),a("li",[t._v("**不同环境和代码的一致性. **")]),t._v(" "),a("li",[t._v("**代码总是会在稳定和不稳定间交替. 我们希望生产线上的代码总是能对应到稳定的代码上来. **")])]),t._v(" "),a("p",[t._v("基本上述的四个事儿, 上述的工作流大都是在以建立不同的分支, 来做到开发并行, 代码和环境版本一致, 以及稳定的代码. 要选择适合自己的协同工作流, 就不得不谈一下软件开发的工作模式.")]),t._v(" "),a("p",[t._v("首先知道软件开发的趋势一定是下面这个样子的.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("以微服务或是 SOA 为架构的方式")]),t._v(". 一个大型软件会被拆分成若干个服务, 那么代码应该也会跟着服务拆解成若干个代码仓库. 这样一来, 每个代码仓库都会变小, 于是协同工作流程就会变简单. 对于每个服务的代码仓库, 我们的开发和迭代速度也会变得很快, 开发团队也会跟服务一样被拆分成多个小团队. 这样一来, GitFlow 这种协同工作流程就非常重了, 而 GitHub 这种方式或是功能分支这种方式会更适合我们的开发.")]),t._v(" "),a("li",[a("strong",[t._v("以 DevOps 为主的开发流程")]),t._v(". DevOps 关注于 CI/CD, 需要有自动化的集成测试和持续部署的工具. 这样一来, 代码发布速度就会大大加快, 每一次提交都能很快地被完整地集成测试, 并很快地发布到生产线上. 于是就可以使用更简单的协同工作流程, 不需要维护多个版本, 也不需要关注不同的运行环境, 只需要一套代码, 就可以了. GitHub Flow 或是功能分支这种方式也更适应这种开发.")])]),t._v(" "),a("p",[t._v("你看, 如果将软件开发升级并简化到 SOA 服务化以及 DevOps 上来, 那么协同工作流就会变得非常简单. 所以, "),a("strong",[t._v("协同工作流的本质, 并不是怎么玩好代码仓库的分支策略, 而是玩好软件架构和软件开发流程")]),t._v(".")]),t._v(" "),a("p",[t._v("当然, 服务化和 DevOps 是每个开发团队需要去努力的目标, 但就算是这样, 也有某些情况需要用重的协同工作的模式. 比如, 整个公司在做一个大的升级项目, 这其中会对代码做一个大的调整(很有可能是一次重大的重构).")]),t._v(" "),a("p",[t._v("这个时候, 可能还有一些并行的开发需要做, 如一些小功能的优化, 一些线上 Bug 的处理, 可能还需要在生产线上做新旧两个版本的 A/B 测试. 在这样的情况下, 可能会或多或少地使用 GitFlow 协同工作流. 但这样的方式不会是常态, 是特殊时期, 我们不可能隔三差五地对系统做架构或是对代码做大规模的重构. 所以在大多数情况下, 还是应该选择一个比较轻量的协同工作流, 而在特殊时期特例特办.")]),t._v(" "),a("p",[t._v("最后用一句话来结束这篇文章: "),a("mark",[a("strong",[t._v("与其花时间在 Git 协同工作流上, 还不如把时间花在调整软件架构和自动化软件生产和运维流程上来, 这才是真正简化协同工作流程的根本")])]),t._v(".")]),t._v(" "),a("h3",{attrs:{id:"分布式系统技术栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式系统技术栈"}},[t._v("#")]),t._v(" 分布式系统技术栈")]),t._v(" "),a("h4",{attrs:{id:"分布式系统架构的冰与火"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式系统架构的冰与火"}},[t._v("#")]),t._v(" 分布式系统架构的冰与火")]),t._v(" "),a("p",[t._v("最近几年, 我们一直在谈论各式各样的架构, 如"),a("strong",[t._v("高并发架构, 异地多活架构, 容器化架构, 微服务架构, 高可用架构, 弹性化架构")]),t._v("等. 还有和这些架构相关的管理型的技术方法, 如 DevOps, 应用监控, 自动化运维, SOA 服务治理, 去 IOE 等. 面对这么多纷乱的技术, 很多团队或是公司都是一个一个地去做这些技术, 非常辛苦, 也非常累. 这样的做法就像我们在撑开一张网里面一个一个的网眼.")]),t._v(" "),a("p",[t._v('其实, 只要能够找到这张网的"纲", 就能比较方便和自如地打开整张网了. 那么, 这张"分布式大网"的总线——"纲"在哪里呢? 我希望通过这一系列文章可以让你找到这个"纲", 从而能让你更好更有效率地做好架构和工程.')]),t._v(" "),a("h5",{attrs:{id:"_1-分布式系统架构的冰与火"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-分布式系统架构的冰与火"}},[t._v("#")]),t._v(" 1.分布式系统架构的冰与火")]),t._v(" "),a("p",[t._v("首先需要阐述一下为什么需要分布式系统, 而不是传统的单体架构. 也许这对你来说已经不是什么问题了, 但是请允许我在这里重新说明一下. 使用分布式系统主要有两方面原因.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("增大系统容量")]),t._v(". 我们的业务量越来越大, 而要能应对越来越大的业务量, 一台机器的性能已经无法满足了, 需要多台机器才能应对大规模的应用场景. 所以需要垂直或是水平拆分业务系统, 让其变成一个分布式的架构.")]),t._v(" "),a("li",[a("strong",[t._v("加强系统可用")]),t._v(". 我们的业务越来越关键, 需要提高整个系统架构的可用性, 这就意味着架构中不能存在单点故障. 这样整个系统不会因为一台机器出故障而导致整体不可用. 所以需要通过分布式架构来冗余系统以消除单点故障, 从而提高系统的可用性.")])]),t._v(" "),a("p",[t._v("当然, 分布式系统还有一些优势, 比如:")]),t._v(" "),a("ul",[a("li",[t._v("因为模块化, 所以系统模块重用度更高;")]),t._v(" "),a("li",[t._v("因为软件服务模块被拆分, 开发和发布速度可以并行而变得更快;")]),t._v(" "),a("li",[t._v("系统扩展性更高;")]),t._v(" "),a("li",[t._v("团队协作流程也会得到改善;")]),t._v(" "),a("li",[t._v("...")])]),t._v(" "),a("p",[t._v('不过, 这个世界上不存在完美的技术方案, 采用任何技术方案都是"按下葫芦浮起瓢", 都是有得有失, 都是一种 trade-off. 也就是说, 分布式系统在解决上述问题的同时, 也给我们带来了其他的问题. 因此需要清楚地知道分布式系统所带来的问题.')]),t._v(" "),a("p",[t._v("下面这个表格比较了单体应用和分布式架构的优缺点.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/283507743af45efe8498803a1db577f2-20230731162102-6fsbncp.png",alt:""}})]),t._v(" "),a("p",[t._v("从上面的表格可以看到, 分布式系统虽然有一些优势, 但也存在一些问题.")]),t._v(" "),a("ul",[a("li",[t._v("架构设计变得复杂(尤其是其中的分布式事务).")]),t._v(" "),a("li",[t._v("部署单个服务会比较快, 但是如果一次部署需要多个服务, 流程会变得复杂.")]),t._v(" "),a("li",[t._v("系统的吞吐量会变大, 但是响应时间会变长.")]),t._v(" "),a("li",[t._v("运维复杂度会因为服务变多而变得很复杂.")]),t._v(" "),a("li",[t._v("架构复杂导致学习曲线变大.")]),t._v(" "),a("li",[t._v("测试和查错的复杂度增大.")]),t._v(" "),a("li",[t._v("技术多元化, 这会带来维护和运维的复杂度.")]),t._v(" "),a("li",[t._v("管理分布式系统中的服务和调度变得困难和复杂.")])]),t._v(" "),a("p",[t._v("也就是说, "),a("strong",[t._v("分布式系统架构的难点在于系统设计, 以及管理和运维")]),t._v('. 所以分布式架构解决了 "单点" 和 "性能容量" 的问题, 但却新增了一堆问题. 而对于这些新增的问题, 还会衍生出更多的子问题, 这就需要不断地用各式各样的技术和手段来解决这些问题. 这就出现了前面所说的那些架构方式, 以及各种相关的管理型的技术方法. 这个世界就是这样变得复杂起来的.')]),t._v(" "),a("h5",{attrs:{id:"_2-分布式系统的发展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-分布式系统的发展"}},[t._v("#")]),t._v(" 2.分布式系统的发展")]),t._v(" "),a("p",[t._v("从 20 世纪 70 年代的模块化编程, 80 年代的面向事件设计, 90 年代的基于接口 / 构件设计, 这个世界很自然地演化出了 SOA--基于服务的架构. "),a("strong",[t._v("SOA 架构是构造分布式计算应用程序的方法")]),t._v(". 它将应用程序功能作为服务发送给最终用户或者其他服务. 它采用开放标准与软件资源进行交互, 并采用标准的表示方式.")]),t._v(" "),a("p",[t._v("开发, 维护和使用 SOA 要遵循以下几条基本原则.")]),t._v(" "),a("ul",[a("li",[t._v("可重用, 粒度合适, 模块化, 可组合, 构件化以及有互操作性.")]),t._v(" "),a("li",[t._v("符合开放标准(通用的或行业的).")]),t._v(" "),a("li",[t._v("服务的识别和分类, 提供和发布, 监控和跟踪.")])]),t._v(" "),a("p",[t._v("但 IBM 搞出来的 SOA 非常重, 所以对 SOA 的裁剪和优化从来没有停止过. 比如之前的 SOAP, WSDL 和 XML 这样的东西基本上已经被抛弃了, 而改成了 RESTful 和 JSON 这样的方式. 而 ESB(Enterprise Service Bus, 企业服务总线)这样非常重要的东西也被简化成了 Pub/Sub 的消息服务... 不过, SOA 的思想一直延续着. 所以现在也不说 SOA 了, 而是说分布式服务架构了.")]),t._v(" "),a("p",[t._v("下面是一个 SOA 架构的演化图.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/43e29f29dc28fcb9120a00b7b61fece2-20230731162102-6394wnz.png",alt:""}})]),t._v(" "),a("p",[t._v("可以看到, 面向服务的架构有以下三个阶段.")]),t._v(" "),a("ul",[a("li",[t._v("20 世纪 90 年代前, 是单体架构, 软件模块高度耦合. 当然这张图同样也说明了有的 SOA 架构其实和单体架构没什么两样, 因为都是高度耦合在一起的. 就像图中的齿轮一样, 当你调用一个服务时, 这个服务会调用另一个服务, 然后又调用另外的服务...于是整个系统就转起来了. 但是这本质是比较耦合的做法.")]),t._v(" "),a("li",[t._v("而 2000 年左右出现了比较松耦合的 SOA 架构, 这个架构需要一个标准的协议或是中间件来联动其它相关联的服务(如 ESB). 这样一来, 服务间并不直接依赖, 而是通过中间件的标准协议或是通讯框架相互依赖. 这其实就是 IoC(控制反转)和 DIP(依赖倒置原则)设计思想在架构中的实践. 它们都依赖于一个标准的协议或是一个标准统一的交互方式, 而不是直接调用.")]),t._v(" "),a("li",[t._v("而 2010 年后, 出现了"),a("strong",[t._v("微服务架构")]),t._v(", 这个架构更为松耦合. 每一个微服务都能独立完整地运行(所谓的自包含), 后端单体的数据库也被微服务这样的架构分散到不同的服务中. 而它和传统 SOA 的差别在于, "),a("strong",[t._v("服务间的整合需要一个服务编排或是服务整合的引擎")]),t._v(". 就好像交响乐中需要有一个指挥来把所有乐器编排和组织在一起.")])]),t._v(" "),a("p",[t._v("一般来说, 这个编排和组织引擎可以是工作流引擎, 也可以是网关. 当然, 还需要辅助于像容器化调度这样的技术方式, 如 Kubernetes. 在 Martin Fowler 的 "),a("a",{attrs:{href:"https://martinfowler.com/articles/microservices.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Microservices 这篇文章"),a("OutboundLink")],1),t._v("中有详细描述.")]),t._v(" "),a("p",[t._v("微服务的出现使得开发速度变得更快, 部署快, 隔离性高, 系统的扩展度也很好, 但是在集成测试, 运维和服务管理等方面就比较麻烦了. 所以需要一套比较好的微服务 PaaS 平台. 就像 Spring Cloud 一样需要提供各种配置服务, 服务发现, 智能路由, 控制总线... 还有像 Kubernetes 提供的各式各样的部署和调度方式.")]),t._v(" "),a("p",[t._v("没有这些 PaaS 层的支撑, 微服务也是很难被管理和运维的. 好在今天的世界已经有具备了这些方面的基础设施, 所以采用微服务架构, 我认为只是一个时间问题了.")]),t._v(" "),a("h5",{attrs:{id:"_3-小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-小结"}},[t._v("#")]),t._v(" 3.小结")]),t._v(" "),a("p",[t._v("通过今天的学习, 你应该已经对为什么需要分布式系统, 而不是传统的单体架构, 有了清晰的认识. 并且对分布式系统的发展历程了然于心. 下一节将结合亚马逊的分布式架构实践, 来谈谈分布式系统架构的技术难点及应对方案.")]),t._v(" "),a("p",[t._v("下面列出了《分布式系统架构的本质》系列文章的目录, 希望你能在这个列表里找到自己感兴趣的内容.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/1411",target:"_blank",rel:"noopener noreferrer"}},[t._v("分布式系统架构的冰与火"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/1505",target:"_blank",rel:"noopener noreferrer"}},[t._v("从亚马逊的实践, 谈分布式系统的难点"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/1512",target:"_blank",rel:"noopener noreferrer"}},[t._v("分布式系统的技术栈"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/1513",target:"_blank",rel:"noopener noreferrer"}},[t._v("分布式系统关键技术: 全栈监控"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/1604",target:"_blank",rel:"noopener noreferrer"}},[t._v("分布式系统关键技术: 服务调度"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/1609",target:"_blank",rel:"noopener noreferrer"}},[t._v("分布式系统关键技术: 流量与数据调度"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/1610",target:"_blank",rel:"noopener noreferrer"}},[t._v("洞悉 PaaS 平台的本质"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/2080",target:"_blank",rel:"noopener noreferrer"}},[t._v("推荐阅读: 分布式系统架构经典资料"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/2421",target:"_blank",rel:"noopener noreferrer"}},[t._v("推荐阅读: 分布式数据调度相关论文"),a("OutboundLink")],1)])]),t._v(" "),a("h4",{attrs:{id:"从亚马逊的实践-谈分布式系统的难点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#从亚马逊的实践-谈分布式系统的难点"}},[t._v("#")]),t._v(" 从亚马逊的实践,谈分布式系统的难点")]),t._v(" "),a("p",[t._v("从目前已经公开的资料来看, 分布式服务化架构思想实践最早的公司应该是亚马逊. 因为早在 2002 年的时候, 亚马逊 CEO 杰夫·贝索斯(Jeff Bezos)就向全公司颁布了下面的这几条架构规定(来自《"),a("a",{attrs:{href:"https://coolshell.cn/articles/5701.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Steve Yegge 对 Google 平台吐槽"),a("OutboundLink")],1),t._v("》一文).")]),t._v(" "),a("ol",[a("li",[t._v("所有团队的程序模块都要通过 Service Interface 方式将其数据与功能开放出来.")]),t._v(" "),a("li",[t._v("团队间程序模块的信息通信, 都要通过这些接口.")]),t._v(" "),a("li",[t._v("除此之外没有其它的通信方式. 其他形式一概不允许: 不能直接链结别的程序(把其他团队的程序当做动态链接库来链接), 不能直接读取其他团队的数据库, 不能使用共享内存模式, 不能使用别人模块的后门, 等等. 唯一允许的通信方式是调用 Service Interface.")]),t._v(" "),a("li",[t._v("任何技术都可以使用. 比如: HTTP, CORBA, Pub/Sub, 自定义的网络协议等.")]),t._v(" "),a("li",[t._v("所有的 Service Interface, 毫无例外, 都必须从骨子里到表面上设计成能对外界开放的. 也就是说, 团队必须做好规划与设计, 以便未来把接口开放给全世界的程序员, 没有任何例外.")]),t._v(" "),a("li",[t._v("不这样做的人会被炒鱿鱼.")])]),t._v(" "),a("p",[t._v("这应该就是 AWS(Amazon Web Service)出现的基因吧. 当然前面说过, 采用分布式系统架构后会出现很多的问题. 比如:")]),t._v(" "),a("ul",[a("li",[t._v("一个线上故障的工单会在不同的服务和不同的团队中转过来转过去.")]),t._v(" "),a("li",[t._v("每个团队都可能成为一个潜在的 DDoS 攻击者, 除非每个服务都要做好配额和限流.")]),t._v(" "),a("li",[t._v("监控和查错变得更为复杂. 除非有非常强大的监控手段.")]),t._v(" "),a("li",[t._v("服务发现和服务治理也变得非常复杂.")])]),t._v(" "),a("p",[t._v("为了克服这些问题, 亚马逊这么多年的实践让其可以运维和管理极其复杂的分布式服务架构. 我觉得主要有以下几点.")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("分布式服务的架构需要分布式的团队架构")]),t._v(". 在亚马逊, 一个服务由一个小团队(Two Pizza Team 不超过 16 个人, 两张 Pizza 可以喂饱的团队)负责, 从前端到数据, 从需求分析到上线运维. 这是良性的分工策略——按职责分工, 而不是按技能分工.")]),t._v(" "),a("li",[a("strong",[t._v("分布式服务查错不容易")]),t._v(". 一旦出现比较严重的故障, 需要整体查错. 出现一个 S2 的故障, 就可以看到每个团队的人都会上线. 在工单系统里能看到, 在故障发生的一开始, 大家都在签到并自查自己的系统. 如果没问题, 也要在线待命(standby), 等问题解决.")]),t._v(" "),a("li",[a("strong",[t._v("没有专职的测试人员, 也没有专职的运维人员, 开发人员做所有的事情")]),t._v(". 开发人员做所有事情的好处是--吃自己的狗粮(Eat Your Own Dog Food). 自己写的代码自己维护自己养, 会让开发人员明白, 写代码容易维护代码复杂. 这样开发人员在接需求, 做设计, 写代码, 做工具时都会考虑到软件的长期维护性.")]),t._v(" "),a("li",[a("strong",[t._v("运维优先, 崇尚简化和自动化")]),t._v(". 为了能够运维如此复杂的系统, 亚马逊内部在运维上下了非常大的功夫. 现在人们所说的 DevOps 这个事, 亚马逊在 10 多年前就做到了. 亚马逊最为强大的就是运维, 拼命地对系统进行简化和自动化, 让亚马逊做到了可以轻松运维拥有上千万台虚机的 AWS 云平台.")]),t._v(" "),a("li",[a("strong",[t._v("内部服务和外部服务一致")]),t._v(". 无论是从安全方面, 还是接口设计方面, 无论是从运维方面, 还是故障处理的流程方面, 亚马逊的内部系统都和外部系统一样对待. 这样做的好处是, 内部系统的服务随时都可以开放出来. 而且从第一天开始, 服务提供方就有对外服务的能力. 可以想象, 以这样的标准运作的团队其能力会是什么样的.")])]),t._v(" "),a("p",[t._v('在进化的过程中, 亚马逊遇到的问题很多, 甚至还有很多几乎没有人会想到的非常生僻的东西, 它都一一学习和总结了, 而且都解决得很好. 构建分布式系统非常难, 这其中充满了各种各样的挑战, 但亚马逊还是毫不犹豫地走了下去. 这是因为亚马逊想做平台, 不是 "像淘宝这样的中介式流量平台", 而是那种 "可以对外输出能力的平台".')]),t._v(" "),a("p",[t._v("亚马逊觉得自己没有像史蒂夫·乔布斯(Steve Jobs)这样的牛人, 不可能做出像 iPhone 这样的爆款产品, 而且用户天生就是众口难调, 与其做一个大家都不满意的软件, 还不如把一些基础能力对外输出, 引入外部的力量来一起完成一个用户满意的产品. 这其实就是在建立自己的生态圈. 虽然在今天看来这个事已经不稀奇了, 但是贝索斯早在十五年前就悟到了, 实在是个天才.")]),t._v(" "),a("p",[t._v("所以, 分布式服务架构是需要从组织, 到软件工程, 再到技术上的一个大的改造, 需要比较长的时间来磨合和改进, 并不断地总结教训和成功经验.")]),t._v(" "),a("h5",{attrs:{id:"_1-分布式系统中需要注意的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-分布式系统中需要注意的问题"}},[t._v("#")]),t._v(" 1.分布式系统中需要注意的问题")]),t._v(" "),a("p",[t._v("再来看一下分布式系统在技术上需要注意的问题.")]),t._v(" "),a("h6",{attrs:{id:"_1-问题一-异构系统的不标准问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-问题一-异构系统的不标准问题"}},[t._v("#")]),t._v(" (1)问题一:异构系统的不标准问题")]),t._v(" "),a("p",[t._v("这主要表现在:")]),t._v(" "),a("ul",[a("li",[t._v("软件和应用不标准.")]),t._v(" "),a("li",[t._v("通讯协议不标准.")]),t._v(" "),a("li",[t._v("数据格式不标准.")]),t._v(" "),a("li",[t._v("开发和运维的过程和方法不标准.")])]),t._v(" "),a("p",[t._v("不同的软件, 不同的语言会出现不同的兼容性和不同的开发, 测试, 运维标准. 不同的标准会让我们用不同的方式来开发和运维, 引起架构复杂度的提升. 比如: 有的软件修改配置要改它的 .conf 文件, 而有的则是调用管理 API 接口.")]),t._v(" "),a("p",[t._v("在通讯方面, 不同的软件用不同的协议, 就算是相同的网络协议里也会出现不同的数据格式. 还有不同的团队因为使用不同的技术, 也会有不同的开发和运维方式. 这些不同的东西, 会让整个分布式系统架构变得异常复杂. 所以分布式系统架构需要有相应的规范.")]),t._v(" "),a("p",[t._v("比如, 我看到很多服务的 API 出错不返回 HTTP 的错误状态码, 而是返回个正常的状态码 200, 然后在 HTTP Body 里的 JSON 字符串中写着个: error, bla bla error message. 这简直就是一种反人类的做法. 我实在不明白为什么会有众多这样的设计. "),a("strong",[t._v("这让监控怎么做啊")]),t._v("? 现在, 你应该使用 Swagger 的规范了.")]),t._v(" "),a("p",[t._v("再比如, 我看到很多公司的软件配置管理里就是一个 key-value 的东西, 这样的东西灵活到可以很容易地被滥用. 不规范的配置命名, 不规范的值, 甚至在配置中直接嵌入前端展示内容...")]),t._v(" "),a("p",[t._v("一个好的配置管理, 应该分成三层: "),a("strong",[t._v("底层和操作系统相关, 中间层和中间件相关, 最上面和业务应用相关")]),t._v(". 于是底层和中间层是不能让用户灵活修改的, 而是只让用户选择. 比如: 操作系统的相关配置应该形成模板来让人选择, 而不是让人乱配置的. 只有配置系统形成了规范, 我们才 hold 得住众多的系统.")]),t._v(" "),a("p",[t._v("再比如: 数据通讯协议. 通常来说, 作为一个协议, "),a("strong",[t._v("一定要有协议头和协议体")]),t._v(". 协议头定义了最基本的协议数据, 而协议体才是真正的业务数据. 对于协议头, 需要非常规范地让每一个使用这个协议的团队都使用一套标准的方式来定义, 这样才容易对请求进行监控, 调度和管理.")]),t._v(" "),a("h6",{attrs:{id:"_2-问题二-系统架构中的服务依赖性问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-问题二-系统架构中的服务依赖性问题"}},[t._v("#")]),t._v(" (2)问题二:系统架构中的服务依赖性问题")]),t._v(" "),a("p",[t._v('对于传统的单体应用, 一台机器挂了, 整个软件就挂掉了. 但是你千万不要以为在分布式的架构下不会发生这样的事. 分布式架构下, 服务是会有依赖的, 一个服务依赖链上的某个服务挂掉了, 可能会导致出现"多米诺骨牌"效应.')]),t._v(" "),a("p",[t._v("所以, 在分布式系统中, 服务的依赖也会带来一些问题.")]),t._v(" "),a("ul",[a("li",[t._v("如果非关键业务被关键业务所依赖, 会导致非关键业务变成一个关键业务.")]),t._v(" "),a("li",[t._v('服务依赖链中, 出现"木桶短板效应"---整个 SLA 由最差的那个服务所决定.')])]),t._v(" "),a("p",[a("strong",[t._v("这是服务治理的内容了. 服务治理不但需要我们定义出服务的关键程度, 还需要我们定义或是描述出关键业务或服务调用的主要路径. 没有这个事情, 将无法运维或是管理整个系统.")])]),t._v(" "),a("p",[t._v("这里需要注意的是, 很多分布式架构在应用层上做到了业务隔离, 然而在数据库结点上并没有. 如果一个非关键业务把数据库拖死, 那么会导致全站不可用. 所以, "),a("strong",[t._v("数据库方面也需要做相应的隔离")]),t._v(". 也就是说, 最好一个业务线用一套自己的数据库. 这就是亚马逊服务器的实践---"),a("strong",[t._v("系统间不能读取对方的数据库, 只通过服务接口耦合")]),t._v(". 这也是微服务的要求. 不但要拆分服务, 还要为每个服务拆分相应的数据库.")]),t._v(" "),a("h6",{attrs:{id:"_3-问题三-故障发生的概率更大"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-问题三-故障发生的概率更大"}},[t._v("#")]),t._v(" (3)问题三:故障发生的概率更大")]),t._v(" "),a("p",[t._v("在分布式系统中, 因为使用的机器和服务会非常多, 所以故障发生的频率会比传统的单体应用更大. 只不过, 单体应用的故障影响面很大, 而分布式系统中, 虽然故障的影响面可以被隔离, 但是因为机器和服务多, 出故障的频率也会多. 另一方面, 因为管理复杂, 而且没人知道整个架构中有什么, 所以非常容易犯错误.")]),t._v(" "),a("p",[t._v("你会发现, 对分布式系统架构的运维, 简直就是一场噩梦. 我们会慢慢地明白下面这些道理.")]),t._v(" "),a("ul",[a("li",[t._v("出现故障不可怕, 故障恢复时间过长才可怕.")]),t._v(" "),a("li",[t._v("出现故障不可怕, 故障影响面过大才可怕.")])]),t._v(" "),a("p",[t._v('运维团队在分布式系统下会非常忙, 忙到每时每刻都要处理大大小小的故障. 我看到很多大公司都在自己的系统里拼命地添加各种监控指标, 有的能够添加出几万个监控指标. 我觉得这完全是在"使蛮力". 一方面, 信息太多等于没有信息, 另一方面, SLA 要求我们定义出 "Key Metrics", 也就是所谓的关键指标. 然而他们却没有. 这其实是一种思维上的懒惰.')]),t._v(" "),a("p",[t._v('但是, 上述的都是在"救火阶段"而不是"防火阶段". 所谓"防火胜于救火", 还要考虑如何防火, 这需要在设计或运维系统时都要为这些故障考虑, 即所谓 Design for Failure. '),a("strong",[t._v("在设计时就要考虑如何减轻故障")]),t._v(". 如果无法避免, 也要使用自动化的方式恢复故障, 减少故障影响面.")]),t._v(" "),a("p",[t._v("因为当机器和服务数量越来越多时, 你会发现, 人类的缺陷就成为了瓶颈. 这个缺陷就是人类无法对复杂的事情做到事无巨细的管理, 只有机器自动化才能帮助人类. 也就是, 人管代码, 代码管机器, 人不管机器!")]),t._v(" "),a("h6",{attrs:{id:"_4-问题四-多层架构的运维复杂度更大"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-问题四-多层架构的运维复杂度更大"}},[t._v("#")]),t._v(" (4)问题四:多层架构的运维复杂度更大")]),t._v(" "),a("p",[t._v("通常来说, 可以把系统分成四层: 基础层, 平台层, 应用层和接入层.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("基础层")]),t._v("就是机器, 网络和存储设备等.")]),t._v(" "),a("li",[a("strong",[t._v("平台层")]),t._v("就是中间件层, Tomcat, MySQL, Redis, Kafka 之类的软件.")]),t._v(" "),a("li",[a("strong",[t._v("应用层")]),t._v("就是业务软件, 比如, 各种功能的服务.")]),t._v(" "),a("li",[a("strong",[t._v("接入层")]),t._v("就是接入用户请求的网关, 负载均衡或是 CDN, DNS 这样的东西.")])]),t._v(" "),a("p",[t._v("对于这四层, 需要知道:")]),t._v(" "),a("ul",[a("li",[t._v("**任何一层的问题都会导致整体的问题; **")]),t._v(" "),a("li",[t._v("**没有统一的视图和管理, 导致运维被割裂开来, 造成更大的复杂度. **")])]),t._v(" "),a("p",[t._v('很多公司都是按技能分工的, 他们按照技能把技术团队分为产品开发, 中间件开发, 业务运维, 系统运维等子团队. 这样的分工导致的结果就是大家各管一摊, 很多事情完全连不在一起. 整个系统会像 "多米诺骨牌" 一样, 一个环节出现问题, 就会倒下去一大片. 因为没有一个统一的运维视图, 不知道一个服务调用是如何经过每一个服务和资源, 也就导致在出现故障时要花大量的时间在沟通和定位问题上.')]),t._v(" "),a("p",[t._v("之前我在某云平台的一次经历就是这样的. 从接入层到负载均衡, 再到服务层, 再到操作系统底层, 设置的 KeepAlive 的参数完全不一致, 导致用户发现, 软件运行的行为和文档中定义的完全不一样. 工程师查错的过程简直就是一场恶梦, 以为找到了一个, 结果还有一个, 来来回回花了大量的时间才把所有 KeepAlive 的参数设置成一致的, 浪费了太多的时间.")]),t._v(" "),a("p",[a("strong",[t._v("分工不是问题, 问题是分工后的协作是否统一和规范")]),t._v(". 这点你一定要重视.")]),t._v(" "),a("h5",{attrs:{id:"_2-小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-小结"}},[t._v("#")]),t._v(" 2.小结")]),t._v(" "),a("p",[t._v("我认为, 亚马逊在分布式服务系统方面的这些实践和经验积累, 是 AWS 出现的基因. 随后分享了在分布式系统中需要注意的几个问题, 同时给出了应对方案. 我认为, 构建分布式服务需要从组织, 到软件工程, 再到技术上的一次大的改造, 需要比较长的时间来磨合和改进, 并不断地总结教训和成功经验.")]),t._v(" "),a("h4",{attrs:{id:"分布式系统的技术栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式系统的技术栈"}},[t._v("#")]),t._v(" 分布式系统的技术栈")]),t._v(" "),a("p",[t._v("正如前面所说的, 构建分布式系统的"),a("strong",[t._v("目的是增加系统容量, 提高系统的可用性")]),t._v(", 转换成技术方面, 也就是完成下面两件事.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("大流量处理")]),t._v(". 通过集群技术把大规模并发请求的负载分散到不同的机器上.")]),t._v(" "),a("li",[a("strong",[t._v("关键业务保护")]),t._v(". 提高后台服务的可用性, 把故障隔离起来阻止多米诺骨牌效应(雪崩效应). 如果流量过大, 需要对业务降级, 以保护关键业务流转.")])]),t._v(" "),a("p",[t._v("说白了就是干两件事. "),a("mark",[a("strong",[t._v("一是提高整体架构的吞吐量, 服务更多的并发和流量, 二是为了提高系统的稳定性, 让系统的可用性更高")])]),t._v(".")]),t._v(" "),a("h5",{attrs:{id:"_1-提高架构的性能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-提高架构的性能"}},[t._v("#")]),t._v(" 1.提高架构的性能")]),t._v(" "),a("p",[t._v("先来看看"),a("strong",[t._v("提高系统性能")]),t._v("的常用技术.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/2c7aaac765a44d49b6469186a52fe252-20230731162102-v6gt6ls.png",alt:""}})]),t._v(" "),a("ul",[a("li",[a("mark",[a("strong",[t._v("缓存系统")])]),t._v(". 加入缓存系统, 可以有效地提高系统的访问能力. 从前端的浏览器, 到网络, 再到后端的服务, 底层的数据库, 文件系统, 硬盘和 CPU, 全都有缓存, 这是提高快速访问能力最有效的手段. 对于分布式系统下的缓存系统, 需要的是一个缓存集群. 这其中需要一个 Proxy 来做缓存的分片和路由.")]),t._v(" "),a("li",[a("mark",[a("strong",[t._v("负载均衡系统")])]),t._v(". 负载均衡系统是"),a("strong",[t._v("水平扩展")]),t._v("的关键技术, 它可以使用多台机器来共同分担一部分流量请求.")]),t._v(" "),a("li",[a("mark",[a("strong",[t._v("异步调用")])]),t._v(". 异步系统主要通过"),a("strong",[t._v("消息队列")]),t._v('来对请求做排队处理, 这样可以把前端的请求的峰值给 "削平" 了, 而后端通过自己能够处理的速度来处理请求. 这样可以增加系统的吞吐量, 但是实时性就差很多了. 同时还会引入消息丢失的问题, 所以要对消息做持久化, 这会造成 "有状态" 的结点, 从而增加了服务调度的难度.')]),t._v(" "),a("li",[a("mark",[a("strong",[t._v("数据分区和数据镜像")])]),t._v(". "),a("strong",[t._v("数据分区")]),t._v("是把数据按一定的方式分成多个区(比如通过地理位置), 不同的数据区来分担不同区的流量. 这需要一个数据路由的中间件, 会导致跨库的 Join 和跨库的事务非常复杂. 而"),a("strong",[t._v("数据镜像")]),t._v("是把一个数据库镜像成多份一样的数据, 这样就不需要数据路由的中间件了. 可以在任意结点上进行读写, 内部会自行同步数据. 然而数据镜像中最大的问题就是数据的一致性问题.")])]),t._v(" "),a("p",[t._v("对于一般公司来说, 在初期会使用"),a("strong",[t._v("读写分离")]),t._v("的数据镜像方式, 而后期会采用"),a("strong",[t._v("分库分表")]),t._v("的方式.")]),t._v(" "),a("h5",{attrs:{id:"_2-提高架构的稳定性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-提高架构的稳定性"}},[t._v("#")]),t._v(" 2.提高架构的稳定性")]),t._v(" "),a("p",[t._v("接下来再来看看"),a("strong",[t._v("提高系统系统稳定性")]),t._v("的一些常用技术.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/c4facb75fca976d2a24a0a88ae7b9e25-20230731162102-gaechlp.png",alt:""}})]),t._v(" "),a("ul",[a("li",[a("mark",[a("strong",[t._v("服务拆分")])]),t._v(". 服务拆分主要有两个目的: 一是为了"),a("strong",[t._v("隔离故障")]),t._v(", 二是为了"),a("strong",[t._v("重用服务模块")]),t._v(". 但服务拆分完之后, 会引入服务调用间的依赖问题.")]),t._v(" "),a("li",[a("mark",[a("strong",[t._v("服务冗余")])]),t._v(". 服务冗余是为了去除单点故障, 并可以支持服务的弹性伸缩, 以及故障迁移. 然而对于一些有状态的服务来说, 冗余这些有状态的服务带来了更高的复杂性. 其中一个是弹性伸缩时, 需要考虑数据的复制或是重新分片, 迁移的时候还要迁移数据到其它机器上.")]),t._v(" "),a("li",[a("mark",[a("strong",[t._v("限流降级")])]),t._v(". 当系统实在扛不住压力时, 只能通过限流或者功能降级的方式来停掉一部分服务, 或是拒绝一部分用户, 以确保整个架构不会挂掉. 这些技术属于保护措施.")]),t._v(" "),a("li",[a("mark",[a("strong",[t._v("高可用架构")])]),t._v(". 通常来说高可用架构是从"),a("strong",[t._v("冗余架构")]),t._v("的角度来保障可用性. 比如多租户隔离, 灾备多活, 或是数据可以在其中复制保持一致性的集群. 总之就是为了"),a("strong",[t._v("不出单点故障")]),t._v(".")]),t._v(" "),a("li",[a("mark",[a("strong",[t._v("高可用运维")])]),t._v('. 高可用运维指的是 DevOps 中的 CI/CD(持续集成/持续部署). 一个良好的运维应该是一条很流畅的软件发布管线, 其中做了足够的自动化测试, 还可以做相应的灰度发布, 以及对线上系统的自动化控制. 这样可以做到 "计划内" 或是 "非计划内" 的宕机事件的时长最短.')])]),t._v(" "),a("p",[t._v("上述这些技术非常有技术含量, 而且需要投入大量的时间和精力.")]),t._v(" "),a("h5",{attrs:{id:"_3-分布式系统的关键技术"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-分布式系统的关键技术"}},[t._v("#")]),t._v(" 3.分布式系统的关键技术")]),t._v(" "),a("p",[t._v("而通过上面的分析, 可以看到, 引入分布式系统, 会引入一堆技术问题, 需要从以下几个方面来解决.")]),t._v(" "),a("ul",[a("li",[a("mark",[a("strong",[t._v("服务治理")])]),t._v(". "),a("strong",[t._v("服务拆分, 服务调用, 服务发现, 服务依赖, 服务的关键度")]),t._v("定义...服务治理的最大意义是需要把服务间的依赖关系, 服务调用链, 以及关键的服务给梳理出来, 并对这些服务进行性能和可用性方面的管理.")]),t._v(" "),a("li",[a("mark",[a("strong",[t._v("架构软件管理")])]),t._v(". 服务之间有依赖, 而且有兼容性问题, 所以, 整体服务所形成的架构需要有架构版本管理, 整体架构的生命周期管理, 以及对服务的"),a("strong",[t._v("编排, 聚合, 事务处理")]),t._v("等服务调度功能.")]),t._v(" "),a("li",[a("mark",[a("strong",[t._v("DevOps")])]),t._v(". 分布式系统可以更为快速地更新服务, 但是对于服务的测试和部署都会是挑战. 所以还需要 DevOps 的全流程, 其中包括环境构建, 持续集成, 持续部署等.")]),t._v(" "),a("li",[a("mark",[a("strong",[t._v("自动化运维")])]),t._v(". 有了 DevOps 后, 就可以对服务进行"),a("strong",[t._v("自动伸缩, 故障迁移, 配置管理, 状态管理")]),t._v("等一系列的自动化运维技术了.")]),t._v(" "),a("li",[a("mark",[a("strong",[t._v("资源调度管理")])]),t._v(". 应用层的自动化运维需要基础层的调度支持, 也就是云计算 IaaS 层的计算, 存储, 网络等资源调度, 隔离和管理.")]),t._v(" "),a("li",[a("mark",[a("strong",[t._v("整体架构监控")])]),t._v(". 如果没有一个好的监控系统, 那么自动化运维和资源调度管理只可能成为一个泡影, 因为监控系统是你的眼睛. 没有眼睛, 没有数据, 就无法进行高效的运维. 所以监控是非常重要的部分. 这里的监控需要对"),a("strong",[t._v("三层系统(应用层, 中间件层, 基础层)")]),t._v(" 进行监控.")]),t._v(" "),a("li",[a("mark",[a("strong",[t._v("流量控制")])]),t._v(". 最后是流量控制, "),a("strong",[t._v("负载均衡, 服务路由, 熔断, 降级, 限流等和流量相关")]),t._v("的调度都会在这里, 包括灰度发布之类的功能也在这里.")])]),t._v(" "),a("p",[t._v("此时, 你会发现, 要做好这么多的技术, 或是要具备这么多的能力, 简直就是一个门槛, 是一个成本巨高无比的技术栈, 看着就都头晕. 要实现出来得投入多少人力, 物力和时间啊. 是的, 这就是分布式系统中最大的坑.")]),t._v(" "),a("p",[t._v('不过, 我们应该庆幸自己生活在了一个非常不错的年代. 今天有一个技术叫--Docker, 通过 Docker 以及其衍生出来的 Kubernetes 之类的软件或解决方案, 大大地降低了做上面很多事情的门槛. Docker 把软件和其运行的环境打成一个包, 然后比较轻量级地启动和运行. 在运行过程中, 因为软件变成了服务可能会改变现有的环境. 但是没关系, 当你重新启动一个 Docker 的时候, 环境又会变成初始化状态. 这样一来, 就可以利用 Docker 的这个特性来把软件在不同的机器上进行部署, 调度和管理. 如果没有 Docker 或是 Kubernetes, 那么你可以认为我们还活在"原始时代".')]),t._v(" "),a("p",[t._v("现在你知道为什么 Docker 这样的容器化虚拟化技术是未来了吧. 因为分布式系统已经是完全不可逆转的技术趋势了.")]),t._v(" "),a("p",[t._v('但是上面还有很多的技术是 Docker 及其周边技术没有解决的, 所以依然还有很多事情要做. 那么, 如果是一个一个地去做这些技术的话, 就像是在撑开一张网里面一个一个的网眼, 本质上这是使蛮力的做法. 我们希望可以找到系统的"纲", 一把就能张开整张网. 那么这个纲在哪里呢?')]),t._v(" "),a("h5",{attrs:{id:"_4-分布式系统的-纲"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-分布式系统的-纲"}},[t._v("#")]),t._v(' 4.分布式系统的"纲"')]),t._v(" "),a("p",[t._v("总结一下上面讲述的内容, 你不难发现, "),a("strong",[t._v("分布式系统有五个关键技术")]),t._v(", 它们是:")]),t._v(" "),a("ul",[a("li",[a("mark",[a("strong",[t._v("全栈系统监控")])])]),t._v(" "),a("li",[a("mark",[a("strong",[t._v("服务/资源调度")])])]),t._v(" "),a("li",[a("mark",[a("strong",[t._v("流量调度")])])]),t._v(" "),a("li",[a("mark",[a("strong",[t._v("状态/数据调度")])])]),t._v(" "),a("li",[a("mark",[a("strong",[t._v("开发和运维的自动化")])])])]),t._v(" "),a("p",[t._v("而最后一项--开发和运维的自动化, 是需要把前四项都做到了, 才有可能实现的. 所以最为关键是下面这四项技术, 即应用"),a("strong",[t._v("整体监控, 资源和服务调度, 状态和数据调度及流量调度")]),t._v(", 它们是构建分布式系统最最核心的东西.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/ea263f95412c7842704878ffd8784e67-20230731162102-8i3l27r.png",alt:""}})]),t._v(" "),a("p",[t._v("后面的文章会一项一项地解析这些关键技术.")]),t._v(" "),a("h5",{attrs:{id:"_5-小结-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-小结-2"}},[t._v("#")]),t._v(" 5.小结")]),t._v(" "),a("p",[t._v("首先, 总结了分布式系统需要干的两件事: "),a("mark",[a("strong",[t._v("一是提高整体架构的吞吐量, 服务更多的并发和流量, 二是为了提高系统的稳定性, 让系统的可用性更高")])]),t._v(". 然后分别从这两个方面阐释, 需要通过哪些技术来实现, 并梳理出其中的技术难点及可能会带来的问题.")]),t._v(" "),a("p",[t._v("虽然 Docker 及其衍生出来的 Kubernetes 等软件或解决方案, 能极大地降低很多事儿的门槛. 但它们没有解决的问题还有很多, 需要掌握分布式系统的五大关键技术, 从根本上解决问题. 后面将陆续撰写几篇文章一一阐述这几大关键技术, 详见文末给出的《分布式系统架构的本质》系列文章的目录.")]),t._v(" "),a("h4",{attrs:{id:"分布式系统关键技术-全栈监控"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式系统关键技术-全栈监控"}},[t._v("#")]),t._v(" 分布式系统关键技术:全栈监控")]),t._v(" "),a("p",[t._v("首先, 我们需要一个"),a("strong",[t._v("全栈系统监控")]),t._v("的东西. 它就像是我们的眼睛, 没有它, 就不知道系统到底发生了什么, 我们将无法管理或是运维整个分布式系统. 所以这个系统是非常非常关键的.")]),t._v(" "),a("p",[t._v("而在分布式或 Cloud Native 的情况下, 系统分成多层, 服务各种关联, 需要监控的东西特别多. 没有一个好的监控系统, 将无法进行自动化运维和资源调度.")]),t._v(" "),a("p",[t._v("这个监控系统需要完成的功能为:")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("全栈监控")]),t._v(";")]),t._v(" "),a("li",[a("strong",[t._v("关联分析")]),t._v(";")]),t._v(" "),a("li",[a("strong",[t._v("跨系统调用的串联")]),t._v(";")]),t._v(" "),a("li",[a("strong",[t._v("实时报警和自动处置")]),t._v(";")]),t._v(" "),a("li",[a("strong",[t._v("系统性能分析")]),t._v(".")])]),t._v(" "),a("h5",{attrs:{id:"_1-多层体系的监控"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-多层体系的监控"}},[t._v("#")]),t._v(" 1.多层体系的监控")]),t._v(" "),a("p",[t._v("所谓全栈监控, 其实就是三层监控.")]),t._v(" "),a("ul",[a("li",[a("mark",[a("strong",[t._v("基础层: 监控主机和底层资源")])]),t._v(". 比如: CPU, 内存, 网络吞吐, 硬盘 I/O, 硬盘使用等.")]),t._v(" "),a("li",[a("mark",[a("strong",[t._v("中间层: 就是中间件层的监控")])]),t._v(". 比如: Nginx, Redis, ActiveMQ, Kafka, MySQL, Tomcat 等.")]),t._v(" "),a("li",[a("mark",[a("strong",[t._v("应用层: 监控应用层的使用")])]),t._v(". 比如: HTTP 访问的吞吐量, 响应时间, 返回码, 调用链路分析, 性能瓶颈, 还包括用户端的监控.")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/e922ea2a716468beb0cfdd4891e48a28-20230731162102-wrtoeqr.png",alt:""}})]),t._v(" "),a("p",[t._v("这还需要一些监控的标准化.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("日志数据结构化")]),t._v(";")]),t._v(" "),a("li",[a("strong",[t._v("监控数据格式标准化")]),t._v(";")]),t._v(" "),a("li",[a("strong",[t._v("统一的监控平台")]),t._v(";")]),t._v(" "),a("li",[a("strong",[t._v("统一的日志分析")]),t._v(".")])]),t._v(" "),a("h5",{attrs:{id:"_2-什么才是好的监控系统"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-什么才是好的监控系统"}},[t._v("#")]),t._v(" 2.什么才是好的监控系统")]),t._v(" "),a("p",[t._v("这里还要多说一句, 现在很多监控系统都做得很不好, 它们主要有两个很大的问题.")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("监控数据是隔离开来的")]),t._v(". 因为公司分工的问题, 开发, 应用运维, 系统运维, 各管各的, 所以很多公司的监控系统之间都有一道墙, 完全串不起来.")]),t._v(" "),a("li",[a("strong",[t._v("监控的数据项太多")]),t._v(". 有些公司的运维团队把监控的数据项多做为一个亮点到处讲, 比如监控指标达到 5 万多个. 老实说, 这太丢人了. 因为"),a("mark",[a("strong",[t._v("信息太多等于没有信息")])]),t._v(", 抓不住重点的监控才会做成这个样子, 完全就是使蛮力的做法.")])]),t._v(" "),a("p",[t._v("一个好的监控系统应该有以下几个特征.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("关注于整体应用的 SLA")]),t._v(". 主要从为用户服务的 API 来监控整个系统.")]),t._v(" "),a("li",[a("strong",[t._v("关联指标聚合")]),t._v(". 把有关联的系统及其指标聚合展示. 主要是三层系统数据: 基础层, 平台中间件层和应用层. 其中最重要的是"),a("strong",[t._v("把服务和相关的中间件以及主机关联在一起")]),t._v(", 服务有可能运行在 Docker 中, 也有可能运行在微服务平台上的多个 JVM 中, 也有可能运行在 Tomcat 中. 总之, 无论运行在哪里, 都需要把服务的具体实例和主机关联在一起, 否则, 对于一个分布式系统来说, 定位问题犹如大海捞针.")]),t._v(" "),a("li",[a("strong",[t._v("快速故障定位")]),t._v(". 对于现有的系统来说, 故障总是会发生的, 而且还会频繁发生. 故障发生不可怕, 可怕的是故障的恢复时间过长. 所以快速地定位故障就相当关键. 快速定位问题需要对整个分布式系统做一个用户请求跟踪的 trace 监控, 需要监控到所有的请求在分布式系统中的调用链, 这个事最好是做成没有侵入性的.")])]),t._v(" "),a("p",[t._v("换句话说, 一个好的监控系统主要是为以下两个场景所设计的.")]),t._v(" "),a("h6",{attrs:{id:"_1-体检"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-体检"}},[t._v("#")]),t._v(' (1)"体检"')]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("容量管理")]),t._v(". 提供一个全局的系统运行时数据的展示, 可以让工程师团队知道是否需要增加机器或者其它资源.")]),t._v(" "),a("li",[a("strong",[t._v("性能管理")]),t._v(". 可以通过查看大盘, 找到系统瓶颈, 并有针对性地优化系统和相应代码.")])]),t._v(" "),a("h6",{attrs:{id:"_2-急诊"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-急诊"}},[t._v("#")]),t._v(' (2)"急诊"')]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("定位问题")]),t._v(". 可以快速地暴露并找到问题的发生点, 帮助技术人员诊断问题.")]),t._v(" "),a("li",[a("strong",[t._v("性能分析")]),t._v(". 当出现非预期的流量提升时, 可以快速地找到系统的瓶颈, 并帮助开发人员深入代码.")])]),t._v(" "),a("p",[t._v("只有做到了上述的这些关键点才能是一个好的监控系统.")]),t._v(" "),a("h5",{attrs:{id:"_3-如何做出一个好的监控系统"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-如何做出一个好的监控系统"}},[t._v("#")]),t._v(" 3.如何做出一个好的监控系统")]),t._v(" "),a("p",[t._v("下面是我认为一个好的监控系统应该实现的功能.")]),t._v(" "),a("ul",[a("li",[a("p",[a("mark",[a("strong",[t._v("服务调用链跟踪")])]),t._v(". 这个监控系统应该从对外的 API 开始, 然后将后台的实际服务给关联起来, 然后再进一步将这个服务的依赖服务关联起来, 直到最后一个服务(如 MySQL 或 Redis), 这样就可以把整个系统的服务全部都串连起来了. 这个事情的最佳实践是 Google Dapper 系统, 其对应于开源的实现是 Zipkin. 对于 Java 类的服务, 可以使用字节码技术进行字节码注入, 做到代码无侵入式.")])]),t._v(" "),a("li",[a("p",[a("mark",[a("strong",[t._v("服务调用时长分布")])]),t._v(". 使用 Zipkin, 可以看到一个服务调用链上的时间分布, 这样有助于知道最耗时的服务是什么. 下图是 Zipkin 的服务调用时间分布.")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/3e5d7d5daba38035bfe00b4f6f296ca0-20230731162102-pe0njsg.png",alt:""}})]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("服务的 TOP N 视图")]),t._v(". 所谓 TOP N 视图就是一个系统请求的排名情况. 一般来说, 这个排名会有三种排名的方法: a)按调用量排名, b) 按请求最耗时排名, c)按热点排名(一个时间段内的请求次数的响应时间和).")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/01c11c113ccd22c720edbb91b65bff16-20230731162102-8qiyxek.png",alt:""}})]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("数据库操作关联")]),t._v(". 对于 Java 应用, 可以很方便地通过 JavaAgent 字节码注入技术拿到 JDBC 执行数据库操作的执行时间. 对此可以和相关的请求对应起来.")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/d7aa8c19610a4d4ef8674ced0fd35382-20230731162102-i7iq2y6.png",alt:""}})]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("服务资源跟踪")]),t._v(". 我们的服务可能运行在物理机上, 也可能运行在虚拟机里, 还可能运行在一个 Docker 的容器里, Docker 容器又运行在物理机或是虚拟机上. 需要把服务运行的机器节点上的数据(如 CPU, MEM, I/O, DISK, NETWORK)关联起来.")])]),t._v(" "),a("p",[t._v("这样一来, 就可以知道服务和基础层资源的关系. 如果是 Java 应用, 还要和 JVM 里的东西进行关联, 这样才能知道服务所运行的 JVM 中的情况(比如 GC 的情况).")]),t._v(" "),a("p",[t._v("有了这些数据上的关联, 就可以达到如下的目标.")]),t._v(" "),a("ol",[a("li",[t._v("当一台机器挂掉是因为 CPU 或 I/O 过高的时候, 马上可以知道其会影响到哪些对外服务的 API.")]),t._v(" "),a("li",[t._v("当一个服务"),a("strong",[t._v("响应过慢")]),t._v("的时候, 马上能关联出来是否在做 Java GC, 或是其所在的计算结点上是否有资源不足的情况, 或是依赖的服务是否出现了问题.")]),t._v(" "),a("li",[t._v("当发现一个 SQL 操作过慢的时候, 能马上知道其会影响哪个对外服务的 API.")]),t._v(" "),a("li",[t._v("当发现一个消息队列拥塞的时候, 能马上知道其会影响哪些对外服务的 API.")])]),t._v(" "),a("p",[t._v("总之, 我们就是想知道用户访问哪些请求会出现问题, 这对于我们了解故障的影响面非常有帮助. 一旦了解了这些信息, 我们就可以做出调度. 比如:")]),t._v(" "),a("ul",[a("li",[t._v("一旦发现某个服务过慢是因为 CPU 使用过多, 就可以做弹性伸缩.")]),t._v(" "),a("li",[t._v("一旦发现某个服务过慢是因为 MySQL 出现了一个慢查询, 就无法在应用层上做弹性伸缩, 只能做流量限制, 或是降级操作了.")])]),t._v(" "),a("p",[t._v("所以, 一个分布式系统, 或是一个自动化运维系统, 或是一个 Cloud Native 的云化系统, 最重要的事就是把监控系统做好. 在把数据收集好的同时, 更重要的是"),a("strong",[t._v("把数据关联好")]),t._v(". 这样才可能很快地定位故障, 进而才能进行自动化调度.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/27e7023e727503aba85d191046c316df-20230731162102-io0cmyn.png",alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("上图只是简单地展示了一个分布式系统的服务调用链接上都在报错, 其根本原因是数据库链接过多, 服务不过来. 另外一个原因是, Java 在做 Full GC 导致处理过慢. 于是, 消息队列出现消息堆积堵塞")]),t._v(". 这个图只是一个示例, 其形象地体现了在分布式系统中监控数据关联的重要性.")]),t._v(" "),a("h4",{attrs:{id:"分布式系统关键技术-服务调度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式系统关键技术-服务调度"}},[t._v("#")]),t._v(" 分布式系统关键技术:服务调度")]),t._v(" "),a("p",[t._v("服务治理, 你应该听得很多了. 但你所听到的服务治理可能混合了流量调度等其它内容. 这里会"),a("strong",[t._v("把服务治理和流量调度分开")]),t._v("来讲. 所以本节只涉及服务治理上的一些关键技术, 主要有以下几点.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("服务关键程度")])]),t._v(" "),a("li",[a("strong",[t._v("服务依赖关系")])]),t._v(" "),a("li",[a("strong",[t._v("服务发现")])]),t._v(" "),a("li",[a("strong",[t._v("整个架构的版本管理")])]),t._v(" "),a("li",[a("strong",[t._v("服务应用生命周期全管理")])])]),t._v(" "),a("h5",{attrs:{id:"_1-服务关键程度和服务的依赖关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-服务关键程度和服务的依赖关系"}},[t._v("#")]),t._v(" 1.服务关键程度和服务的依赖关系")]),t._v(" "),a("p",[t._v("下面先看看服务关键程度和服务的依赖关系. 关于服务关键程度, 主要是要"),a("strong",[t._v("梳理和定义服务的重要程度")]),t._v(". 这不是使用技术可以完成的, 它需要细致地管理对业务的理解, 才能定义出架构中各个服务的重要程度.")]),t._v(" "),a("p",[t._v("然后还要"),a("strong",[t._v("梳理出服务间的依赖关系")]),t._v(', 这点也非常重要. 我们常说, "'),a("strong",[t._v("没有依赖, 就没有伤害")]),t._v('". 这句话的意思就是说, 服务间的依赖是一件很易碎的事. 依赖越多, 依赖越复杂, 系统就越易碎. 因为依赖关系就像 "铁锁连环" 一样, 一个服务的问题很容易出现一条链上的问题. 因此, 传统的 SOA 希望通过 ESB 来解决服务间的依赖关系, 这也是为什么微服务中希望服务间是没有依赖的, 而让上层或是前端业务来整合这些个后台服务.')]),t._v(" "),a("p",[t._v("但是要真正做到服务无依赖, 我认为还是比较有困难的, 总是会有一些公有服务会被依赖. 我们只能是降低服务依赖的深度和广度, 从而让管理更为简单和简洁. 在这一点上, 以 Spring Boot 为首的微服务开发框架就开了一个好头.")]),t._v(" "),a("p",[a("strong",[t._v("微服务是服务依赖最优解的上限, 而服务依赖的下限是千万不要有依赖环")]),t._v(". "),a("mark",[a("strong",[t._v("如果系统架构中有服务依赖环, 那么表明你的架构设计是错误的")])]),t._v(". 循环依赖有很多的副作用, 最大的问题是这是一种极强的耦合, 会导致服务部署相当复杂和难解, 而且会导致无穷尽的递归故障和一些你意想不到的问题.")]),t._v(" "),a("p",[a("strong",[t._v("解决服务依赖环的方案一般是, 依赖倒置的设计模式")]),t._v(". 在分布式架构上, 可以使用一个第三方的服务来解决这个事. 比如"),a("strong",[t._v("通过订阅或发布消息到一个消息中间件, 或是把其中的依赖关系抽到一个第三方的服务中, 然后由这个第三方的服务来调用这些原本循环依赖的服务")]),t._v(".")]),t._v(" "),a("p",[t._v("服务的依赖关系是可以通过技术的手段来发现的, 这其中 "),a("a",{attrs:{href:"https://zipkin.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Zipkin"),a("OutboundLink")],1),t._v(" 是一个很不错的服务调用跟踪系统, 它是通过 "),a("a",{attrs:{href:"https://research.google.com/pubs/pub36356.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Google Dapper"),a("OutboundLink")],1),t._v(" 这篇论文来实现的. 这个工具可以帮你梳理服务的依赖关系, 以及了解各个服务的性能.")]),t._v(" "),a("p",[t._v("在梳理完服务的重要程度和服务依赖关系之后, 就相当于知道了整个架构的全局. 就好像得到了一张城市地图, 在这张地图上可以看到城市的关键设施, 以及城市的主干道. 再加上相关的监控, 就可以看到城市各条道路上的工作和拥堵情况. 这对于整个分布式架构是非常非常关键的.")]),t._v(" "),a("p",[t._v('我给很多公司做过相关的咨询. 当他们需要我帮忙解决一些高并发或是架构问题的时候, 我一般都会向他们要一张这样的 "地图", 但是几乎所有的公司都没有这样的地图.')]),t._v(" "),a("h5",{attrs:{id:"_2-服务状态和生命周期的管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-服务状态和生命周期的管理"}},[t._v("#")]),t._v(" 2.服务状态和生命周期的管理")]),t._v(" "),a("p",[t._v("有了上面这张地图后, 还需要有一个"),a("strong",[t._v("服务发现")]),t._v('的中间件, 这个中间件是非常非常关键的. 因为这个 "架构城市" 是非常动态的, 有的服务会新加进来, 有的会离开, 有的会增加更多的实例, 有的会减少, 有的服务在维护过程中(发布, 伸缩等), 所以需要有一个服务注册中心, 来知道这么几个事.')]),t._v(" "),a("ul",[a("li",[t._v("**整个架构中有多少种服务? **")]),t._v(" "),a("li",[t._v("**这些服务的版本是什么样的? **")]),t._v(" "),a("li",[a("strong",[t._v("每个服务的实例数有多少个, 它们的状态是什么样的?")])]),t._v(" "),a("li",[a("strong",[t._v("每个服务的状态是什么样的? 是在部署中, 运行中, 故障中, 升级中, 还是在回滚中, 伸缩中, 或者是在下线中...")])])]),t._v(" "),a("p",[t._v("这个服务注册中心有点像系统运维同学说的 CMDB 这样的东西, 它也是非常之关键的, 因为没有它, 我们将无法知道这些服务运作的状态和情况.")]),t._v(" "),a("p",[t._v("有了这些服务的状态和运行情况之后, 就需要对这些服务的"),a("strong",[t._v("生命周期进行管理")]),t._v("了. 服务的生命周期通常会有以下几个状态:")]),t._v(" "),a("ul",[a("li",[t._v("Provision, 代表在供应一个新的服务;")]),t._v(" "),a("li",[t._v("Ready, 表示启动成功了;")]),t._v(" "),a("li",[t._v("Run, 表示通过了服务健康检查;")]),t._v(" "),a("li",[t._v("Update, 表示在升级中;")]),t._v(" "),a("li",[t._v("Rollback, 表示在回滚中;")]),t._v(" "),a("li",[t._v("Scale, 表示正在伸缩中(可以有 Scale-in 和 Scale-out 两种);")]),t._v(" "),a("li",[t._v("Destroy, 表示在销毁中;")]),t._v(" "),a("li",[t._v("Failed, 表示失败状态.")])]),t._v(" "),a("p",[t._v("这几个状态需要管理好, 不然的话, 你将不知道这些服务在什么样的状态下. 不知道在什么样的状态下, 对整个分布式架构也就无法控制了.")]),t._v(" "),a("p",[t._v("有了这些服务的状态和生命周期的管理, 以及服务的重要程度和服务的依赖关系, 再加上一个服务运行状态的拟合控制(后面会提到), 你一下子就有了管理整个分布式服务的手段了.")]),t._v(" "),a("p",[t._v("一个纷乱无比的世界从此就可以干干净净地管理起来了.")]),t._v(" "),a("h5",{attrs:{id:"_3-整个架构的版本管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-整个架构的版本管理"}},[t._v("#")]),t._v(" 3.整个架构的版本管理")]),t._v(" "),a("p",[t._v("对于"),a("strong",[t._v("整个架构的版本管理")]),t._v("这个事, 我只见到亚马逊有这个东西, 叫 VersionSet, 也就是"),a("strong",[t._v("由一堆服务的版本集所形成的整个架构的版本控制")]),t._v(".")]),t._v(" "),a("p",[t._v("除了各个项目的版本管理之外, 还需要在上面再盖一层版本管理. 如果 Build 过 Linux 分发包, 那么你就会知道, Linux 分发包中各个软件的版本上会再盖一层版本控制. 毕竟这些分发包也是有版本依赖的, 这样可以解决各个包的版本兼容性问题.")]),t._v(" "),a("p",[t._v("所以, 在分布式架构中, 也需要一个架构的版本, 用来"),a("strong",[t._v("控制其中各个服务的版本兼容")]),t._v(". 比如, A 服务的 1.2 版本只能和 B 服务的 2.2 版本一起工作, A 服务的上个版本 1.1 只能和 B 服务的 2.0 一起工作. 这就是版本兼容性.")]),t._v(" "),a("p",[t._v("如果架构中有这样的问题, 那么就需要一个上层架构的版本管理. 这样, 如果要回滚一个服务的版本, 就可以把与之有版本依赖的服务也一起回滚掉.")]),t._v(" "),a("p",[t._v("当然一般来说, 在设计过程中, 我们希望没有版本的依赖性问题. 但可能有些时候会有这样的问题, 那么就需要在架构版本中记录下这个事, 以便可以回滚到上一次相互兼容的版本.")]),t._v(" "),a("p",[t._v("要做到这个事, 你需要一个架构的 manifest, 一个服务清单, 这个服务清单定义了所有服务的版本运行环境, 其中包括但不限于:")]),t._v(" "),a("ul",[a("li",[t._v("服务的软件版本;")]),t._v(" "),a("li",[t._v("服务的运行环境——环境变量, CPU, 内存, 可以运行的结点, 文件系统等;")]),t._v(" "),a("li",[t._v("服务运行的最大最小实例数.")])]),t._v(" "),a("p",[t._v("每一次对这个清单的变更都需要被记录下来, 算是一个架构的版本管理. 而上面所说的那个集群控制系统需要能够解读并执行这个清单中的变更, 以操作和管理整个集群中的相关变更.")]),t._v(" "),a("h5",{attrs:{id:"_4-资源-服务调度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-资源-服务调度"}},[t._v("#")]),t._v(" 4.资源/服务调度")]),t._v(" "),a("p",[a("strong",[t._v("服务和资源的调度有点像操作系统")]),t._v(". 操作系统一方面把用户进程在硬件资源上进行调度, 另一方面提供进程间的通信方式, 可以让不同的进程在一起协同工作. 服务和资源调度的过程, 与操作系统调度进程的方式很相似, 主要有以下一些关键技术.")]),t._v(" "),a("ul",[a("li",[t._v("**服务状态的维持和拟合. **")]),t._v(" "),a("li",[t._v("**服务的弹性伸缩和故障迁移. **")]),t._v(" "),a("li",[t._v("**作业和应用调度. **")]),t._v(" "),a("li",[t._v("**作业工作流编排. **")]),t._v(" "),a("li",[t._v("**服务编排. **")])]),t._v(" "),a("h6",{attrs:{id:"_1-服务状态的维持和拟合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-服务状态的维持和拟合"}},[t._v("#")]),t._v(" (1)服务状态的维持和拟合")]),t._v(" "),a("p",[t._v("所谓服务状态不是服务中的数据状态, 而是"),a("strong",[t._v("服务的运行状态")]),t._v(", 换句话说就是服务的 Status, 而不是 State. 也就是上述服务运行时生命周期中的状态--Provision, Ready, Run, Scale, Rollback, Update, Destroy, Failed...")]),t._v(" "),a("p",[t._v("服务运行时的状态是非常关键的. 服务运行过程中, 状态也是会有变化的, 这样的变化有两种.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("一种是不预期的变化")]),t._v(". 比如服务运行因为故障导致一些服务挂掉, 或是别的什么原因出现了服务不健康的状态. 而一个好的集群管理控制器应该能够强行维护服务的状态. 在健康的实例数变少时, 控制器会把不健康的服务给摘除, 而又启动几个新的, 强行维护健康的服务实例数.")]),t._v(" "),a("li",[a("strong",[t._v("另外一种是预期的变化")]),t._v('. 比如需要发布新版本, 需要伸缩, 需要回滚. 这时集群管理控制器就应该把集群从现有状态迁移到另一个新的状态. 这个过程并不是一蹴而就的, 集群控制器需要一步一步地向集群发送若干控制命令. 这个过程叫 "拟合", 即从一个状态拟合到另一个状态, 而且要穷尽所有的可能, 玩命地不断地拟合, 直到达到目的.')])]),t._v(" "),a("p",[t._v("详细说明一下, 对于"),a("strong",[t._v("分布式系统的服务管理")]),t._v("来说, 当需要把一个状态变成另一个状态时, 我们需要对集群进行一系列的操作. 比如, 当需要对集群进行 Scale 的时候, 我们需要:")]),t._v(" "),a("ul",[a("li",[t._v("先扩展出几个结点;")]),t._v(" "),a("li",[t._v("再往上部署服务;")]),t._v(" "),a("li",[t._v("然后启动服务;")]),t._v(" "),a("li",[t._v("再检查服务的健康情况;")]),t._v(" "),a("li",[t._v("最后把新扩展出来的服务实例加入服务发现中提供服务.")])]),t._v(" "),a("p",[t._v("可以看到, 这是一个比较稳健和严谨的 Scale 过程, 这需要集群控制器往生产集群中进行若干次操作.")]),t._v(" "),a("p",[t._v('这个操作的过程一定是比较"慢"的. 一方面, 需要对其它操作排它; 另一方面, 在整个过程中, 控制系统需要努力地逼近最终状态, 直到完全达到. 此外正在运行的服务可能也会出现问题, 离开了想要的状态, 而控制系统检测到后, 会强行地维持服务的状态.')]),t._v(" "),a("p",[a("strong",[t._v('我们把这个过程就叫做"拟合"')]),t._v(" . 基本上来说, 集群控制系统都是要干这个事的. 没有这种设计的控制系统都不能算做设计精良的控制系统, 而且在运行时一定会有很多的坑和 bug.")]),t._v(" "),a("p",[t._v("如果研究过 Kubernetes 这个调度控制系统, 你就会看到它的思路就是这个样子的.")]),t._v(" "),a("h6",{attrs:{id:"_2-服务的弹性伸缩和故障迁移"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-服务的弹性伸缩和故障迁移"}},[t._v("#")]),t._v(" (2)服务的弹性伸缩和故障迁移")]),t._v(" "),a("p",[t._v("有了上述的服务状态拟合的基础工作之后, 就能很容易地管理服务的生命周期了, 甚至可以通过底层的支持进行便利的服务弹性伸缩和故障迁移.")]),t._v(" "),a("p",[t._v("对于弹性伸缩, 在上面已经给出了一个服务伸缩所需要的操作步骤. 还是比较复杂的, 其中涉及到了:")]),t._v(" "),a("ul",[a("li",[t._v("**底层资源的伸缩; **")]),t._v(" "),a("li",[t._v("**服务的自动化部署; **")]),t._v(" "),a("li",[t._v("**服务的健康检查; **")]),t._v(" "),a("li",[t._v("**服务发现的注册; **")]),t._v(" "),a("li",[t._v("**服务流量的调度. **")])]),t._v(" "),a("p",[t._v("而对于故障迁移, 也就是服务的某个实例出现问题时, 需要自动地恢复它. 对于服务来说, 有两种模式, 一种是宠物模式, 一种是奶牛模式.")]),t._v(" "),a("ul",[a("li",[t._v("所谓宠物模式, 就是一定要救活, 主要是对于 stateful 的服务.")]),t._v(" "),a("li",[t._v("而奶牛模式, 就是不救活了, 重新生成一个实例.")])]),t._v(" "),a("p",[t._v("对于这两种模式, 在运行中也是比较复杂的, 其中涉及到了:")]),t._v(" "),a("ul",[a("li",[t._v("服务的健康监控(这可能需要一个 APM 的监控).")]),t._v(" "),a("li",[t._v("如果是宠物模式, 需要: 服务的重新启动和服务的监控报警(如果重试恢复不成功, 需要人工介入).")]),t._v(" "),a("li",[t._v("如果是奶牛模式, 需要: 服务的资源申请, 服务的自动化部署, 服务发现的注册, 以及服务的流量调度.")])]),t._v(" "),a("p",[t._v("可以看到, 弹性伸缩和故障恢复需要很相似的技术步骤. 但是要完成这些事情并不容易, 需要做很多工作, 而且有很多细节上的问题会让你感到焦头烂额.")]),t._v(" "),a("p",[t._v("当然好消息是, 我们非常幸运地生活在了一个比较不错的时代, 因为有 Docker 和 Kubernetes 这样的技术, 可以非常容易地让我们做这个工作. 但是需要把传统的服务迁移到 Docker 和 Kubernetes 上来, 再加上更上层的对服务生命周期的控制系统的调度, 就可以做到一个完全自动化的运维架构了.")]),t._v(" "),a("h6",{attrs:{id:"_3-服务工作流和编排"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-服务工作流和编排"}},[t._v("#")]),t._v(" (3)服务工作流和编排")]),t._v(" "),a("p",[t._v("正如上面和操作系统做的类比一样, 一个好的操作系统需要能够通过一定的机制把一堆独立工作的进程给协同起来. 在分布式的服务调度中, 这个工作叫做 "),a("strong",[t._v("Orchestration")]),t._v(', 国内把这个词翻译成 "编排".')]),t._v(" "),a("p",[t._v("从《分布式系统架构的冰与火》一文中的 SOA 架构演化图来看, 要完成这个编排工作, 传统的 SOA 是通过 ESB(Enterprise Service Bus)---企业服务总线来完成的. ESB 的主要功能是服务通信路由, 协议转换, 服务编制和业务规则应用等.")]),t._v(" "),a("p",[t._v("注意, ESB 的服务编制叫 Choreography, 与我们说的 Orchestration 是不一样的.")]),t._v(" "),a("ul",[a("li",[t._v("Orchestration 的意思是, 一个服务像大脑一样来告诉大家应该怎么交互, 就跟乐队的指挥一样.")]),t._v(" "),a("li",[t._v("Choreography 的意思是, 在各自完成专属自己的工作的基础上, 怎样互相协作, 就跟芭蕾舞团的舞者一样.")])]),t._v(" "),a("p",[t._v("而在微服务中, 我们希望使用更为轻量的"),a("strong",[t._v("中间件")]),t._v("来取代 ESB 的服务编排功能.")]),t._v(" "),a("p",[t._v("简单来说, 这需要一个 API Gateway 或一个简单的消息队列来做相应的编排工作. 在 Spring Cloud 中, "),a("strong",[t._v("所有的请求都统一通过 API Gateway(Zuul)来访问内部的服务. 这个和 Kubernetes 中的 Ingress 相似")]),t._v(".")]),t._v(" "),a("p",[t._v("我觉得, 关于服务的编排会直接导致一个服务编排的工作流引擎中间件的产生, 这可能是因为我受到了亚马逊的软件工程文化的影响所致--亚马逊是一家超级喜欢工作流引擎的公司. 通过工作流引擎, 可以非常快速地将若干个服务编排起来形成一个业务流程. 这就是所谓的 Orchestration 中的 conductor 指挥了.")]),t._v(" "),a("h4",{attrs:{id:"分布式系统关键技术-流量与数据调度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式系统关键技术-流量与数据调度"}},[t._v("#")]),t._v(" 分布式系统关键技术:流量与数据调度")]),t._v(" "),a("p",[t._v("关于流量调度, 现在很多架构师都把这个事和服务治理混为一谈了. 我觉得还是应该分开的. 一方面, "),a("strong",[t._v("服务治理是内部系统的事, 而流量调度可以是内部的, 更是外部接入层的事")]),t._v(". 另一方面, 服务治理是数据中心的事, 而流量调度要做得好, 应该是数据中心之外的事, 也就是常说的边缘计算, 是应该在类似于 CDN 上完成的事.")]),t._v(" "),a("p",[a("strong",[t._v("所以, 流量调度和服务治理是在不同层面上的, 不应该混在一起, 所以在系统架构上应该把它们分开.")])]),t._v(" "),a("h5",{attrs:{id:"_1-流量调度的主要功能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-流量调度的主要功能"}},[t._v("#")]),t._v(" 1.流量调度的主要功能")]),t._v(" "),a("p",[t._v("对于一个流量调度系统来说, 其应该具有的主要功能是:")]),t._v(" "),a("ol",[a("li",[t._v("依据系统运行的情况, "),a("strong",[t._v("自动地进行流量调度")]),t._v(", 在无需人工干预的情况下, 提升整个系统的稳定性;")]),t._v(" "),a("li",[t._v("让系统应对爆品等突发事件时, 在"),a("strong",[t._v("弹性计算扩缩容")]),t._v("的较长时间窗口内或底层资源消耗殆尽的情况下, 保护系统平稳运行.")])]),t._v(" "),a("p",[t._v("这还是为了"),a("strong",[t._v("提高系统架构的稳定性和高可用性")]),t._v(".")]),t._v(" "),a("p",[t._v("此外, 这个流量调度系统还可以完成以下几方面的事情.")]),t._v(" "),a("ul",[a("li",[a("mark",[a("strong",[t._v("服务流控")])]),t._v(". 服务发现, 服务路由, 服务降级, 服务熔断, 服务保护等.")]),t._v(" "),a("li",[a("mark",[a("strong",[t._v("流量控制")])]),t._v(". 负载均衡, 流量分配, 流量控制, 异地灾备(多活)等.")]),t._v(" "),a("li",[a("mark",[a("strong",[t._v("流量管理")])]),t._v(". 协议转换, 请求校验, 数据缓存, 数据计算等.")])]),t._v(" "),a("p",[t._v("所有的这些都应该是一个 "),a("strong",[t._v("API Gateway")]),t._v(" 应该做的事.")]),t._v(" "),a("h5",{attrs:{id:"_2-流量调度的关键技术"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-流量调度的关键技术"}},[t._v("#")]),t._v(" 2.流量调度的关键技术")]),t._v(" "),a("p",[t._v("但是作为一个 API Gateway 来说, 因为要调度流量, 首先需要扛住流量, 而且还需要有一些比较轻量的业务逻辑, 所以一个好的 API Gateway 需要具备以下的关键技术.")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("高性能")]),t._v(". API Gateway 必须使用高性能的技术, 所以也就需要使用高性能的语言.")]),t._v(" "),a("li",[a("strong",[t._v("扛流量")]),t._v(". 要能扛流量, 就需要使用集群技术. 集群技术的关键点是在集群内的各个结点中共享数据. 这就需要使用像 Paxos, Raft, Gossip 这样的通讯协议. 因为 Gateway 需要部署在广域网上, 所以还需要集群的分组技术.")]),t._v(" "),a("li",[a("strong",[t._v("业务逻辑")]),t._v(". API Gateway 需要有简单的业务逻辑, 所以最好是像 AWS 的 Lambda 服务一样, 可以让人注入不同语言的简单业务逻辑.")]),t._v(" "),a("li",[a("strong",[t._v("服务化")]),t._v(". 一个好的 API Gateway 需要能够通过 Admin API 来不停机地管理配置变更, 而不是通过一个 .conf 文件来人肉地修改配置.")])]),t._v(" "),a("p",[t._v("基于上述的这几个技术要求, 就其本质来说, 目前可以做成这样的 API Gateway 几乎没有. 这也是为什么我现在自己自主开发的原因.")]),t._v(" "),a("h5",{attrs:{id:"_3-状态数据调度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-状态数据调度"}},[t._v("#")]),t._v(" 3.状态数据调度")]),t._v(" "),a("p",[t._v("对于服务调度来说, 最难办的就是"),a("strong",[t._v("有状态的服务")]),t._v("了. 这里的状态是 State, 也就是说, 有些服务会保存一些数据, 而这些数据是不能丢失的, 所以这些数据是需要随服务一起调度的.")]),t._v(" "),a("p",[t._v('一般来说, 会通过 "转移问题" 的方法来让服务变成 "无状态的服务". 也就是说, 会把这些有状态的东西'),a("strong",[t._v("存储到第三方服务")]),t._v("上, 比如 Redis, MySQL, ZooKeeper, 或是 NFS, Ceph 的文件系统中.")]),t._v(" "),a("p",[t._v('这些 "转移问题" 的方式把问题转移到了第三方服务上, 于是自己的 Java 或 PHP 服务中没有状态, 但是 Redis 和 MySQL 上则有了状态. 所以可以看到, '),a("strong",[t._v("现在的分布式系统架构中出问题的基本都是这些存储状态的服务")]),t._v(". 因为数据存储结点在 Scale 上比较困难, 所以成了一个单点的瓶颈.")]),t._v(" "),a("h5",{attrs:{id:"_4-分布式事务一致性的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-分布式事务一致性的问题"}},[t._v("#")]),t._v(" 4.分布式事务一致性的问题")]),t._v(" "),a("p",[t._v("要解决数据结点的 Scale 问题, 也就是让数据服务可以像"),a("strong",[t._v("无状态的服务")]),t._v("一样在不同的机器上进行调度, 这就会涉及"),a("strong",[t._v("数据的 replication 问题")]),t._v(". 而数据 replication 则会带来数据一致性的问题, 进而对性能带来严重的影响.")]),t._v(" "),a("p",[t._v("要解决数据不丢失的问题, 只能通过"),a("strong",[t._v("数据冗余")]),t._v("的方法, 就算是数据分区, 每个区也需要进行数据冗余处理. 这就是数据副本. 当出现某个节点的数据丢失时, 可以从副本读到. 数据副本是分布式系统解决数据丢失异常的唯一手段. 简单来说:")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("要想让数据有高可用性, 就得写多份数据")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("写多份会引起数据一致性的问题")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("数据一致性的问题又会引发性能问题")]),t._v(".")])]),t._v(" "),a("p",[t._v("在解决数据副本间的一致性问题时, 有一些技术方案.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Master-Slave 方案")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("Master-Master 方案")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("两阶段和三阶段提交方案")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("Paxos 方案")]),t._v(".")])]),t._v(" "),a("p",[t._v("可以仔细地读一下"),a("a",{attrs:{href:"https://coolshell.cn/articles/10910.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("《分布式系统的事务处理》这篇文章"),a("OutboundLink")],1),t._v(". 其中引用了 Google App Engine 联合创始人赖安·巴里特(Ryan Barrett)在 2009 年 Google I/O 上的演讲"),a("a",{attrs:{href:"http://www.youtube.com/watch?v=srOgpXECblk",target:"_blank",rel:"noopener noreferrer"}},[t._v("Transaction Across DataCenter 视频"),a("OutboundLink")],1),t._v(" 中的一张图.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/81858eede1d3f7afc967f43f14235411-20230731162102-t892zei.png",alt:""}})]),t._v(" "),a("p",[t._v("从上面这张经典的图中, 可以看到各种不同方案的对比.")]),t._v(" "),a("p",[t._v("现在, 很多公司的分布式系统事务基本上都是"),a("strong",[t._v("两阶段提交")]),t._v("的变种. 比如: 阿里推出的 TCC–Try–Confirm–Cancel, 或是我在亚马逊见到的 Plan–Reserve–Confirm 的方式, 等等. 凡是"),a("mark",[a("strong",[t._v("通过业务补偿, 或是在业务应用层上做的分布式事务的玩法, 基本上都是两阶段提交, 或是两阶段提交的变种")])]),t._v(".")]),t._v(" "),a("p",[t._v("换句话说, 迄今为止, "),a("mark",[a("strong",[t._v('在应用层上解决事务问题, 只有 "两阶段提交" 这样的方式, 而在数据层解决事务问题, Paxos 算法则是不二之选')])]),t._v(".")]),t._v(" "),a("h5",{attrs:{id:"_5-数据结点的分布式方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-数据结点的分布式方案"}},[t._v("#")]),t._v(" 5.数据结点的分布式方案")]),t._v(" "),a("p",[t._v("真正完整解决数据 Scale 问题的应该还是"),a("strong",[t._v("数据结点自身")]),t._v(". 只有数据结点自身解决了这个问题, 才能做到对上层业务层的透明, 业务层可以像"),a("strong",[t._v("操作单机数据库")]),t._v("一样来操作分布式数据库, 这样才能做到整个分布式服务架构的调度.")]),t._v(" "),a("p",[t._v("也就是说, 这个问题应该解决在数据存储方. 但是因为数据存储结果有太多不同的 Scheme, 所以现在的数据存储也是多种多样的, 有文件系统, 有对象型的, 有 Key-Value 式, 有时序的, 有搜索型的, 有关系型的...")]),t._v(" "),a("p",[t._v("这就是为什么分布式数据存储系统比较难做, 因为很难做出来一个放之四海皆准的方案. 类比一下编程中的各种不同的数据结构就会明白为什么会有这么多的数据存储方案了.")]),t._v(" "),a("p",[t._v('但是可以看到, 这个 "数据存储的动物园" 中, '),a("strong",[t._v("基本上都在解决数据副本, 数据一致性和分布式事务的问题")]),t._v(".")]),t._v(" "),a("p",[t._v('比如 AWS 的 Aurora, 就是改写了 MySQL 的 InnoDB 引擎. 为了承诺高可用的 SLA, 所以需要写 6 个副本, 但实现方式上, 它不像 MySQL 通过 bin log 的数据复制方式, 而是更为 "惊艳" 地复制 SQL 语句, 然后拼命地使用各种 tricky 的方式来降低 latency. 比如, 使用多线程并行, 使用 SQL 操作的 merge 等.')]),t._v(" "),a("p",[t._v("MySQL 官方也有 MySQL Cluster 的技术方案. 此外, MongoDB, 国内的 PingCAP 的 TiDB, 国外的 CockroachDB, 还有阿里的 OceanBase 都是为了"),a("strong",[t._v("解决大规模数据的写入和读取的问题")]),t._v("而出现的数据库软件. 所以, 我觉得成熟的可以用到生产线上的分布式数据库这个事估计也不远了.")]),t._v(" "),a("p",[t._v("而对于一些需要"),a("strong",[t._v("文件存储")]),t._v("的, 则需要分布式文件系统的支持. 试想, 一个 Kafka 或 ZooKeeper 需要把它们的数据存储到文件系统上. 当这个结点有问题时, 需要再启动一个 Kafka 或 ZooKeeper 的实例, 那么也需要把它们持久化的数据搬迁到另一台机器上.")]),t._v(" "),a("p",[t._v("注意, 虽然 Kafka 和 ZooKeeper 是 HA 的, 数据会在不同的结点中进行复制, 但是也应该搬迁数据, 这样有利用于新结点的快速启动. 否则新的结点需要等待数据同步, 这个时间会比较长, 可能会导致数据层的其它问题.")]),t._v(" "),a("p",[t._v("于是, 就需要一个底层是分布式的文件系统, 这样新的结点只需要做一个简单的远程文件系统的 mount 就可以把数据调度到另外一台机器上了.")]),t._v(" "),a("p",[t._v("所以, "),a("strong",[t._v("真正解决数据结点调度的方案应该是底层的数据结点")]),t._v(". 在它们上面做这个事才是真正有效和优雅的. 而像阿里的用于分库分表的数据库中间件 TDDL 或是别的公司叫什么 DAL 之类的这样的中间件都会成为过渡技术.")]),t._v(" "),a("h6",{attrs:{id:"_1-状态数据调度小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-状态数据调度小结"}},[t._v("#")]),t._v(" (1)状态数据调度小结")]),t._v(" "),a("p",[t._v("下面对状态数据调度做个小小的总结.")]),t._v(" "),a("ul",[a("li",[t._v("**对于应用层上的分布式事务一致性, 只有两阶段提交这样的方式. **")]),t._v(" "),a("li",[t._v("**而底层存储可以解决这个问题的方式是通过一些像 Paxos, Raft 或是 NWR 这样的算法和模型来解决. **")]),t._v(" "),a("li",[a("strong",[t._v("状态数据调度应该是由分布式存储系统来解决的")]),t._v(", 这样会更为完美. 但是因为数据存储的 Scheme 太多, 所以导致有各式各样的分布式存储系统, 有文件对象的, 有关系型数据库的, 有 NoSQL 的, 有时序数据的, 有搜索数据的, 有队列的...")])]),t._v(" "),a("p",[t._v("总之, 我相信"),a("strong",[t._v("状态数据调度应该是在 IaaS 层的数据存储解决的问题, 而不是在 PaaS 层或者 SaaS 层来解决的")]),t._v(".")]),t._v(" "),a("p",[t._v("在 IaaS 层上解决这个问题, 一般来说有三种方案, 一种是使用比较廉价的开源产品, 如: NFS, Ceph, TiDB, CockroachDB, ElasticSearch, InfluxDB, MySQL Cluster 和 Redis Cluster 之类的; 另一种是用云计算厂商的方案. 当然如果不差钱的话, 可以使用更为昂贵的商业网络存储方案.")]),t._v(" "),a("h5",{attrs:{id:"_6-小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-小结"}},[t._v("#")]),t._v(" 6.小结")]),t._v(" "),a("p",[t._v("回顾一下今天分享的主要内容. 首先, 不要将流量调度和服务治理混为一谈(当然, 服务治理是流量调度的前提), 并比较了两者有何不同.")]),t._v(" "),a("p",[t._v("然后, 讲述了流量调度的主要功能和关键技术. 接着进入本文的第二个话题——状态数据调度, 讲述了真正完整解决数据 Scale 问题的应该还是数据结点自身, 并给出了相应的技术方案, 随后对状态数据调度进行了小结.")]),t._v(" "),a("h4",{attrs:{id:"洞悉paas平台的本质"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#洞悉paas平台的本质"}},[t._v("#")]),t._v(" 洞悉PaaS平台的本质")]),t._v(" "),a("p",[t._v("在了解了前面几篇文章中提的这些问题以后, 需要思考一下该怎样解决这些问题. 为了解决这些问题, 请先允许我来谈谈软件工程的本质.")]),t._v(" "),a("p",[t._v("我认为, 一家商业公司的"),a("mark",[a("strong",[t._v("软件工程能力")])]),t._v("主要体现在三个地方.")]),t._v(" "),a("p",[t._v("**第一, 提高服务的 SLA. **")]),t._v(" "),a("p",[t._v("所谓服务的 SLA, 也就是能提供多少个 9 的系统可用性, 而每提高一个 9 的可用性都是对整个系统架构的重新洗礼. 在我看来, 提高系统的 SLA 主要表现在两个方面:")]),t._v(" "),a("ul",[a("li",[t._v("高可用的系统;")]),t._v(" "),a("li",[t._v("自动化的运维.")])]),t._v(" "),a("p",[t._v("**第二, 能力和资源重用或复用. **")]),t._v(" "),a("p",[t._v("软件工程还有一个重要的能力就是让能力和资源可以重用. 其主要表现在如下两个方面:")]),t._v(" "),a("ul",[a("li",[t._v("软件模块的重用;")]),t._v(" "),a("li",[t._v("软件运行环境和资源的重用.")])]),t._v(" "),a("p",[t._v('为此, 需要有两个重要的能力: 一个是"软件抽象的能力", 另一个是"软件标准化的能力". 你可以认为软件抽象就是找出通用的软件模块或服务, 软件标准化就是使用统一的软件通讯协议, 统一的开发和运维管理方法...这样能让整体软件开发运维的能力和资源得到最大程度的复用, 从而增加效率.')]),t._v(" "),a("p",[t._v("**第三, 过程的自动化. **")]),t._v(" "),a("p",[t._v("编程本来就是把一个重复工作自动化的过程, 所以"),a("strong",[t._v("软件工程的第三个本质就是把软件生产和运维的过程自动化起来")]),t._v(". 也就是下面这两个方面:")]),t._v(" "),a("ul",[a("li",[t._v("软件生产流水线;")]),t._v(" "),a("li",[t._v("软件运维自动化.")])]),t._v(" "),a("p",[t._v("为此, 除了需要 CI/CD 的 DevOps 式的自动化之外, 也需要能够对正在运行的生产环境中的软件进行自动化运维.")]),t._v(" "),a("p",[t._v("通过了解软件工程的这三个本质, 你会发现, 上面所说的那些分布式的技术点是高度一致的, 也就是下面这三个方面的能力. (是的, 世界就是这样的. 当参透了本质之后, 你会发现世界是大同的.)")]),t._v(" "),a("ul",[a("li",[t._v("**分布式多层的系统架构. **")]),t._v(" "),a("li",[t._v("**服务化的能力供应. **")]),t._v(" "),a("li",[t._v("**自动化的运维能力. **")])]),t._v(" "),a("p",[t._v("只有做到了这些, 才能够真正拥有云计算的威力. 这就是所谓的 Cloud Native. 而这些目标都"),a("strong",[t._v("完美地体现在 PaaS 平台")]),t._v("上.")]),t._v(" "),a("p",[t._v("前面讲述的"),a("strong",[t._v("分布式系统关键技术和软件工程的本质, 都可以在 PaaS 平台上得到完全体现")]),t._v(". 所以, 需要一个 PaaS 平台把那么多的东西给串联起来.")]),t._v(" "),a("h5",{attrs:{id:"_1-paas平台的本质"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-paas平台的本质"}},[t._v("#")]),t._v(" 1.PaaS平台的本质")]),t._v(" "),a("p",[t._v("一个好的 PaaS 平台应该具有"),a("strong",[t._v("分布式, 服务化, 自动化部署, 高可用, 敏捷以及分层开放")]),t._v("的特征, 并可与 IaaS 实现良好的联动.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/6abe4b90f8b5cdebd4cb2820f1511a34-20230731162102-q916bhv.png",alt:""}})]),t._v(" "),a("p",[t._v("下面这三件事是 PaaS 跟传统中间件最大的差别.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("服务化是 PaaS 的本质")]),t._v(". 软件模块重用, 服务治理, 对外提供能力是 PaaS 的本质.")]),t._v(" "),a("li",[a("strong",[t._v("分布式是 PaaS 的根本特性")]),t._v(". 多租户隔离, 高可用, 服务编排是 PaaS 的基本特性.")]),t._v(" "),a("li",[a("strong",[t._v("自动化是 PaaS 的灵魂")]),t._v(". 自动化部署安装运维, 自动化伸缩调度是 PaaS 的关键.")])]),t._v(" "),a("h5",{attrs:{id:"_2-paas平台的总体架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-paas平台的总体架构"}},[t._v("#")]),t._v(" 2.PaaS平台的总体架构")]),t._v(" "),a("p",[t._v('从下面的图中可以看到, 我用了 Docker+Kubernetes 层来做了一个"技术缓冲层". 也就是说, 如果没有 Docker 和 Kubernetes, 构建 PaaS 将会复杂很多. 当然, 如果你正在开发一个类似 PaaS 的平台, 那么你会发现自己开发出来的东西会跟 Docker 和 Kubernetes 非常像. 相信我, 最终你还是会放弃自己的轮子而采用 Docker+Kubernetes 的.')]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/c6855b5ce84d1f0cfbbaa455dc13d4df-20230731162102-2ybsg9w.png",alt:""}})]),t._v(" "),a("p",[t._v("在 Docker+Kubernetes 层之上, 我们看到了两个相关的 "),a("strong",[t._v("PaaS 层")]),t._v(". 一个是 "),a("strong",[t._v("PaaS 调度层")]),t._v(", 很多人将其称为 iPaaS; 另一个是 "),a("strong",[t._v("PaaS 能力层")]),t._v(", 通常被称为 aPaaS. 没有 PaaS 调度层, PaaS 能力层很难被管理和运维, 而没有 PaaS 能力层, PaaS 就失去了提供实际能力的业务价值. 而本文更多的是在讲 "),a("strong",[t._v("PaaS 调度层")]),t._v("上的东西.")]),t._v(" "),a("p",[t._v("在两个相关的 PaaS 层之上, 有一个"),a("strong",[t._v("流量调度")]),t._v("的接入模块, 这也是 PaaS 中非常关键的东西. 流控, 路由, 降级, 灰度, 聚合, 串联等等都在这里, 包括最新的 AWS Lambda Service 的小函数等也可以放在这里. 这个模块应该是像 CDN 那样来部署的.")]),t._v(" "),a("p",[t._v("然后, 在这个图的两边分别是与"),a("strong",[t._v("运营和运维")]),t._v("相关的. 运营这边主要是管理一些软件资源方面的东西(类似 Docker Hub 和 CMDB), 以及外部接入和开放平台上的东西, 这主要是对外提供能力的相关组件; 而运维这边主要是对内的相关东西, 主要就是 DevOps.")]),t._v(" "),a("p",[t._v("总结一下, 一个完整的 PaaS 平台会包括以下几部分.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("PaaS 调度层")]),t._v(" – 主要是 PaaS 的自动化和分布式对于高可用高性能的管理.")]),t._v(" "),a("li",[a("strong",[t._v("PaaS 能力服务层")]),t._v(" – 主要是 PaaS 真正提供给用户的服务和能力.")]),t._v(" "),a("li",[a("strong",[t._v("PaaS 的流量调度")]),t._v(" – 主要是与流量调度相关的东西, 包括对高并发的管理.")]),t._v(" "),a("li",[a("strong",[t._v("PaaS 的运营管理")]),t._v(" – 软件资源库, 软件接入, 认证和开放平台门户.")]),t._v(" "),a("li",[a("strong",[t._v("PaaS 的运维管理")]),t._v(" – 主要是 DevOps 相关的东西.")])]),t._v(" "),a("p",[t._v("因为我画的是一个大而全的东西, 所以看上去似乎很重很复杂. 实际上, 其中的很多组件是可以根据自己的需求被简化和裁剪的, 而且很多开源软件能帮你简化好多工作.")]),t._v(" "),a("h5",{attrs:{id:"_3-paas平台的生产和运维"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-paas平台的生产和运维"}},[t._v("#")]),t._v(" 3.PaaS平台的生产和运维")]),t._v(" "),a("p",[t._v("下图给出了一个大概的软件生产, 运维和服务接入的流程, 它把之前的东西都串起来了.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/b7ff9fee78d4709c43587210b5a1b6c5-20230731162102-t0j0dx2.png",alt:""}})]),t._v(" "),a("p",[t._v("**从左上开始软件构建, 进入软件资产库(Docker Registry+ 一些软件的定义), 然后走 DevOps 的流程, 通过整体架构控制器进入生产环境, 生产环境通过控制器操作 Docker+Kubernetes 集群进行软件部署和生产变更. **")]),t._v(" "),a("p",[t._v("其中, 同步服务的运行状态, 并通过生命周期管理来拟合状态, 如图右侧部分所示. 服务运行时的数据会进入到相关应用监控, 应用监控中的一些监控事件会同步到生命周期管理中, 再由生命周期管理器来做出决定, 通过控制器来调度服务运行. 当应用监控中心发现流量变化, 要进行强制性伸缩时, 它通过生命周期管理来通知控制系统进行伸缩.")]),t._v(" "),a("p",[t._v("左下是服务接入的相关组件, 主要是网关服务, 以及 API 聚合编排和流程处理. 这对应于之前说过的流量调度和 API Gateway 的相关功能.")]),t._v(" "),a("h5",{attrs:{id:"_4-总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-总结"}},[t._v("#")]),t._v(" 4.总结")]),t._v(" "),a("p",[t._v("恭喜你, 已经听完了《分布式系统架构的本质》系列文章的 7 篇文章. 下面对这些内容做一下总结.")]),t._v(" "),a("p",[t._v("**传统的单体架构系统容量显然是有上限的. 同时, 为了应对有计划和无计划的下线时间, 系统的可用性也是有其极限的. 分布式系统为以上两个问题提供了解决方案, 并且还附带有其他优势. 但是要同时解决这两个问题决非易事. 为了构建分布式系统, 我们面临的主要问题如下. **")]),t._v(" "),a("ul",[a("li",[t._v("分布式系统的硬件故障发生率更高, 故障发生是常态, 需要尽可能地将"),a("strong",[t._v("运维流程自动化")]),t._v(".")]),t._v(" "),a("li",[t._v("需要良好地设计服务, 避免某服务的单点故障对依赖它的其他服务造成大面积影响.")]),t._v(" "),a("li",[t._v("为了容量的可伸缩性, 服务的拆分, 自治和无状态变得更加重要, 可能需要对老的软件逻辑做大的修改.")]),t._v(" "),a("li",[t._v("老的服务可能是异构的, 此时需要让它们使用标准的协议, 以便可以被调度, 编排, 且互相之间可以通信.")]),t._v(" "),a("li",[t._v("服务软件故障的处理也变得复杂, 需要优化的流程, 以加快故障的恢复.")]),t._v(" "),a("li",[t._v("为了管理各个服务的容量, 让分布式系统发挥出最佳性能, 需要有"),a("strong",[t._v("流量调度")]),t._v("技术.")]),t._v(" "),a("li",[a("strong",[t._v("分布式存储")]),t._v("会让事务处理变得复杂; 在事务遇到故障无法被自动恢复的情况下, 手动恢复流程也会变得复杂.")]),t._v(" "),a("li",[t._v("测试和查错的复杂度增大.")]),t._v(" "),a("li",[t._v("系统的吞吐量会变大, 但响应时间会变长.")])]),t._v(" "),a("p",[t._v("为了解决这些问题, 我们深入了解了以下这些解决方案.")]),t._v(" "),a("ul",[a("li",[t._v("需要有完善的"),a("strong",[t._v("监控系统")]),t._v(", 以便对服务运行状态有全面的了解.")]),t._v(" "),a("li",[t._v("设计服务时要"),a("strong",[t._v("分析其依赖链")]),t._v("; 当非关键服务故障时, 其他服务要自动降级功能, 避免调用该服务.")]),t._v(" "),a("li",[a("strong",[t._v("重构老的软件, 使其能被服务化")]),t._v("; 可以参考 SOA 和微服务的设计方式, 目标是微服务化; 使用 Docker 和 Kubernetes 来调度服务.")]),t._v(" "),a("li",[t._v("为老的服务编写接口逻辑来使用标准协议, 或在必要时重构老的服务以使得它们有这些功能.")]),t._v(" "),a("li",[t._v("自动构建服务的依赖地图, 并引入好的处理流程, 让团队能以最快速度定位和恢复故障.")]),t._v(" "),a("li",[t._v("使用一个 API Gateway, 它具备服务流向控制, 流量控制和管理的功能.")]),t._v(" "),a("li",[a("strong",[t._v("事务处理建议在存储层实现")]),t._v("; 根据业务需求, 或者降级使用更简单, 吞吐量更大的最终一致性方案, 或者通过二阶段提交, Paxos, Raft, NWR 等方案之一, 使用吞吐量小的强一致性方案.")]),t._v(" "),a("li",[t._v("通过更真实地模拟生产环境, 乃至在生产环境中做灰度发布, 从而增加测试强度; 同时做充分的单元测试和集成测试以发现和消除缺陷; 最后, 在服务故障发生时, 相关的多个团队同时上线自查服务状态, 以最快地定位故障原因.")]),t._v(" "),a("li",[t._v("通过"),a("strong",[t._v("异步调用")]),t._v("来减少对短响应时间的依赖; 对关键服务提供专属硬件资源, 并优化软件逻辑以缩短响应时间.")])]),t._v(" "),a("p",[t._v("你已经看到, 解决分布式服务的吞吐量和可用性问题不是件容易的事, 以及目前的主流技术是怎么办到的. 衍生出来的许多子问题, 每一个都值得去细化, 去研究其解决方案.")]),t._v(" "),a("h4",{attrs:{id:"推荐阅读-分布式系统架构经典资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#推荐阅读-分布式系统架构经典资料"}},[t._v("#")]),t._v(" 推荐阅读:分布式系统架构经典资料")]),t._v(" "),a("p",[t._v("就像我在前面的文章中多次提到的, 分布式系统的技术栈巨大无比, 所以要推荐的学习资料也比较多, 后面在文章中我会结合主题逐步推荐给你. 在今天这篇文章中, 将推荐一些分布式系统的基础理论和一些不错的图书和资料.")]),t._v(" "),a("h5",{attrs:{id:"_1-基础理论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-基础理论"}},[t._v("#")]),t._v(" 1.基础理论")]),t._v(" "),a("h6",{attrs:{id:"_1-cap定理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-cap定理"}},[t._v("#")]),t._v(" (1)CAP定理")]),t._v(" "),a("p",[t._v("CAP 定理是分布式系统设计中最基础, 也是最为关键的理论. 它指出, "),a("mark",[a("strong",[t._v("分布式数据存储")])]),t._v("不可能同时满足以下三个条件.")]),t._v(" "),a("ul",[a("li",[a("mark",[a("strong",[t._v("一致性(Consistency)")])]),t._v(" : "),a("strong",[t._v("每次读取要么获得最近写入的数据, 要么获得一个错误")]),t._v(".")]),t._v(" "),a("li",[a("mark",[a("strong",[t._v("可用性(Availability)")])]),t._v(" : "),a("strong",[t._v("每次请求都能获得一个(非错误)响应, 但不保证返回的是最新写入的数据")]),t._v(".")]),t._v(" "),a("li",[a("mark",[a("strong",[t._v("分区容忍(Partition tolerance)")])]),t._v(" : "),a("strong",[t._v("尽管任意数量的消息被节点间的网络丢失(或延迟), 系统仍继续运行")]),t._v(".")])]),t._v(" "),a("p",[t._v("也就是说, CAP 定理表明, "),a("mark",[a("strong",[t._v("在存在网络分区的情况下, 一致性和可用性必须二选一.")])]),t._v("  而在没有发生网络故障时, 即分布式系统正常运行时, 一致性和可用性是可以同时被满足的. 这里需要注意的是, CAP 定理中的一致性与 ACID 数据库事务中的一致性截然不同.")]),t._v(" "),a("p",[t._v("掌握 CAP 定理, 尤其是能够正确理解 C, A, P 的含义, 对于系统架构来说非常重要. 因为对于分布式系统来说, "),a("strong",[t._v("网络故障在所难免, 如何在出现网络故障的时候, 维持系统按照正常的行为逻辑运行就显得尤为重要")]),t._v(". 你可以结合实际的业务场景和具体需求, 来进行权衡.")]),t._v(" "),a("p",[t._v("例如, 对于大多数互联网应用来说(如门户网站), 因为机器数量庞大, 部署节点分散, "),a("strong",[t._v("网络故障是常态, 可用性是必须要保证的, 所以只有舍弃一致性来保证服务的 AP")]),t._v(". 而对于银行等, 需要确保一致性的场景, 通常会权衡 CA 和 CP 模型, CA 模型网络故障时完全不可用, CP 模型具备部分可用性.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/84fed1425648a6f48d321e54d98c0ab9-20230731162102-m4f4exk.png",alt:""}})]),t._v(" "),a("ul",[a("li",[a("mark",[a("strong",[t._v("CA (consistency + availability)")])]),t._v(" , 这样的系统关注"),a("strong",[t._v("一致性和可用性")]),t._v(', 它需要非常严格的全体一致的协议, 比如"两阶段提交"(2PC). CA 系统不能容忍网络错误或节点错误, 一旦出现这样的问题, 整个系统就会'),a("strong",[t._v("拒绝写请求")]),t._v(", 因为它并不知道对面的那个结点是否挂掉了, 还是只是网络问题. 唯一安全的做法就是把自己变成只读的.")]),t._v(" "),a("li",[a("mark",[a("strong",[t._v("CP (consistency + partition tolerance)")])]),t._v(" , 这样的系统关注"),a("strong",[t._v("一致性和分区容忍性")]),t._v(". 它关注的是系统里大多数人的一致性协议, 比如: "),a("strong",[t._v("Paxos 算法")]),t._v("(Quorum 类的算法). 这样的系统"),a("strong",[t._v("只需要保证大多数结点数据一致")]),t._v(", 而少数的结点会在没有同步到最新版本的数据时变成不可用的状态. 这样能够提供一部分的可用性.")]),t._v(" "),a("li",[a("mark",[a("strong",[t._v("AP (availability + partition tolerance)")])]),t._v(" , 这样的系统关心"),a("strong",[t._v("可用性和分区容忍性")]),t._v(". 这样的系统不能达成一致性, 需要给出数据冲突, 给出数据冲突就需要维护数据版本. Dynamo 就是这样的系统.")])]),t._v(" "),a("p",[t._v("在谷歌的"),a("a",{attrs:{href:"http://www.youtube.com/watch?v=srOgpXECblk",target:"_blank",rel:"noopener noreferrer"}},[t._v("Transaction Across DataCenter 视频"),a("OutboundLink")],1),t._v("中, 可以看到下面这样的图. 这个是 CAP 理论在具体工程中的体现.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/429ca9155c9bea342d94d2ceba500a10-20230731162102-0hf28a8.png",alt:""}})]),t._v(" "),a("h6",{attrs:{id:"_2-fallacies-of-distributed-computing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-fallacies-of-distributed-computing"}},[t._v("#")]),t._v(" (2)Fallacies of Distributed Computing")]),t._v(" "),a("p",[t._v("本文是英文维基百科上的一篇文章. 它是 Sun 公司的"),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/L_Peter_Deutsch",target:"_blank",rel:"noopener noreferrer"}},[t._v("劳伦斯·彼得·多伊奇(Laurence Peter Deutsch)"),a("OutboundLink")],1),t._v("等人于 1994~1997 年提出的, 讲的是刚刚进入分布式计算领域的程序员常会有的一系列错误假设.")]),t._v(" "),a("p",[t._v("基本上, "),a("strong",[t._v("每个人刚开始建立一个分布式系统时, 都做了以下 8 条假定. 随着时间的推移, 每一条都会被证明是错误的")]),t._v(", 也都会导致严重的问题, 以及痛苦的学习体验.")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("网络是稳定的")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("网络传输的延迟是零")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("网络的带宽是无穷大")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("网络是安全的")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("网络的拓扑不会改变")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("只有一个系统管理员")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("传输数据的成本为零")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("整个网络是同构的")]),t._v(".")])]),t._v(" "),a("p",[t._v("阿尔农·罗特姆-盖尔-奥兹(Arnon Rotem-Gal-Oz)写了一篇长文 "),a("a",{attrs:{href:"http://www.rgoarchitects.com/Files/fallacies.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Fallacies of Distributed Computing Explained"),a("OutboundLink")],1),t._v(" 来解释这些点. 由于他写这篇文章的时候已经是 2006 年了, 所以从中能看到这 8 条常见错误被提出十多年后还有什么样的影响: 一是, 为什么当今的分布式软件系统也需要避免这些设计错误; 二是, 在当今的软硬件环境里, 这些错误意味着什么.")]),t._v(" "),a("p",[t._v("而"),a("a",{attrs:{href:"http://blog.fogcreek.com/eight-fallacies-of-distributed-computing-tech-talk/",target:"_blank",rel:"noopener noreferrer"}},[t._v("加勒思·威尔逊(Gareth Wilson)的文章"),a("OutboundLink")],1),t._v("则用日常生活中的例子, 对这些点做了更为通俗的解释. 这 8 个需要避免的错误不仅对于中间件和底层系统开发者及架构师是重要的知识, 而且对于网络应用程序开发者也同样重要. 分布式系统的其他部分, 如容错, 备份, 分片, 微服务等也许可以对应用程序开发者部分透明, 但这 8 点则是应用程序开发者也必须知道的.")]),t._v(" "),a("p",[t._v("**为什么要深刻地认识这 8 个错误? 是因为这要我们清楚地认识到--**​"),a("mark",[a("strong",[t._v("在分布式系统中错误是不可能避免的, 我们能做的不是避免错误, 而是要把错误的处理当成功能写在代码中")])]),t._v("​ **. **")]),t._v(" "),a("h5",{attrs:{id:"_2-经典资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-经典资料"}},[t._v("#")]),t._v(" 2.经典资料")]),t._v(" "),a("h6",{attrs:{id:"_1-distributed-systems-theory-for-the-distributed-systems-engineer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-distributed-systems-theory-for-the-distributed-systems-engineer"}},[t._v("#")]),t._v(" (1)Distributed systems theory for the distributed systems engineer")]),t._v(" "),a("p",[t._v("本文作者认为, 推荐大量的理论论文是学习分布式系统理论的错误方法, 除非这是你的博士课程. 因为论文通常难度大又很复杂, 需要认真学习, 而且需要理解这些研究成果产生的时代背景, 才能真正的领悟到其中的精妙之处. 本文作者给出了他整理的分布式工程师必须要掌握的知识列表, 并直言掌握这些足够设计出新的分布式系统. 首先, 作者推荐了 4 份阅读材料, 它们共同概括了构建分布式系统的难点, 以及所有工程师必须克服的技术难题.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://book.mixu.net/distsys/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Distributed Systems for Fun and Profit"),a("OutboundLink")],1),t._v(", 这是一本小书, 涵盖了分布式系统中的关键问题, 包括时间的作用和不同的复制策略. 后文中对这本书有较详细的介绍.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.somethingsimilar.com/2013/01/14/notes-on-distributed-systems-for-young-bloods/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Notes on distributed systems for young bloods"),a("OutboundLink")],1),t._v(", 这篇文章中没有理论, 是一份适合新手阅读的分布式系统实践笔记.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.41.7628",target:"_blank",rel:"noopener noreferrer"}},[t._v("A Note on Distributed Systems"),a("OutboundLink")],1),t._v(", 这是一篇经典的论文, 讲述了为什么在分布式系统中, 远程交互不能像本地对象那样进行.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing",target:"_blank",rel:"noopener noreferrer"}},[t._v("The fallacies of distributed computing"),a("OutboundLink")],1),t._v(", 每个分布式系统新手都会做的 8 个错误假设, 并探讨了其会带来的影响. 上文中专门对这篇文章做了介绍.")])]),t._v(" "),a("p",[t._v("随后, 分享了几个关键点.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("失败和时间(Failure and Time)")]),t._v(" . 分布式系统工程师面临的很多困难都可以归咎于两个根本原因: 1. 进程可能会失败; 2. 没有好方法表明进程失败. 这就涉及到如何设置系统时钟, 以及进程间的通讯机制, 在没有任何共享时钟的情况下, 如何确定一个事件发生在另一个事件之前.")])]),t._v(" "),a("p",[t._v("可以参考 Lamport 时钟和 Vector 时钟, 还可以看看 "),a("a",{attrs:{href:"http://www.allthingsdistributed.com/files/amazon-dynamo-sosp2007.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Dynamo 论文"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("容错的压力(The basic tension of fault tolerance)")]),t._v(" . 能在不降级的情况下容错的系统一定要像没有错误发生的那样运行. 这就意味着, 系统的某些部分必须冗余地工作, 从而在性能和资源消耗两方面带来成本.")])]),t._v(" "),a("p",[a("strong",[t._v("最终一致性")]),t._v("以及其他技术方案在以系统行为弱保证为代价, 来试图避免这种系统压力. 阅读 "),a("a",{attrs:{href:"http://www.allthingsdistributed.com/files/amazon-dynamo-sosp2007.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Dynamo 论文"),a("OutboundLink")],1),t._v(" 和帕特·赫尔兰(Pat Helland)的经典论文 "),a("a",{attrs:{href:"http://www.cloudtran.com/pdfs/LifeBeyondDistTRX.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Life Beyond Transactions"),a("OutboundLink")],1),t._v(" 能获很得大启发.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("基本原语(Basic primitives)")]),t._v(" . 在分布式系统中几乎没有一致认同的基本构建模块, 但目前在越来越多地在出现. 比如 Leader 选举, 可以参考 "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Bully_algorithm",target:"_blank",rel:"noopener noreferrer"}},[t._v("Bully 算法"),a("OutboundLink")],1),t._v("; 分布式状态机复制, 可以参考"),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/State_machine_replication",target:"_blank",rel:"noopener noreferrer"}},[t._v("维基百科"),a("OutboundLink")],1),t._v("和"),a("a",{attrs:{href:"https://www.microsoft.com/en-us/research/publication/how-to-build-a-highly-available-system-using-consensus/?from=http%3A%2F%2Fresearch.microsoft.com%2Fen-us%2Fum%2Fpeople%2Fblampson%2F58-consensus%2Facrobat.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Lampson 的论文"),a("OutboundLink")],1),t._v(", 后者更权威, 只是有些枯燥.")]),t._v(" "),a("li",[a("strong",[t._v("基本结论(Fundamental Results)")]),t._v(" . 某些事实是需要吸收理解的, 有几点: 如果进程之间可能丢失某些消息, 那么不可能在实现一致性存储的同时响应所有的请求, 这就是 CAP 定理; 一致性不可能同时满足以下条件: a. 总是正确, b. 在异步系统中只要有一台机器发生故障, 系统总是能终止运行——停止失败(FLP 不可能性); 一般而言, 消息交互少于两轮都不可能达成共识(Consensus).")]),t._v(" "),a("li",[a("strong",[t._v("真实系统(Real systems)")]),t._v(" . 学习分布式系统架构最重要的是, 结合一些真实系统的描述, 反复思考和点评其背后的设计决策. 如谷歌的 GFS, Spanner, Chubby, BigTable, Dapper 等, 以及 Dryad, Cassandra 和 Ceph 等非谷歌系统.")])]),t._v(" "),a("h6",{attrs:{id:"_2-flp-impossibility-result"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-flp-impossibility-result"}},[t._v("#")]),t._v(" (2)FLP Impossibility Result")]),t._v(" "),a("p",[t._v("FLP 不可能性的名称起源于它的三位作者, Fischer, Lynch 和 Paterson. 它是关于理论上能做出的功能最强的共识算法会受到怎样的限制的讨论.")]),t._v(" "),a("p",[t._v("所谓"),a("strong",[t._v("共识问题")]),t._v(", 就是让网络上的分布式处理者最后都对同一个结果值达成共识. 该解决方案对错误有恢复能力, 处理者一旦崩溃以后, 就不再参与计算. 在同步环境下, 每个操作步骤的时间和网络通信的延迟都是有限的, 要解决共识问题是可能的, 方式是: 等待一个完整的步长来检测某个处理者是否已失败. 如果没有收到回复, 那就假定它已经崩溃.")]),t._v(" "),a("p",[t._v('共识问题有几个变种, 它们在"强度"方面有所不同——通常, 一个更"强"问题的解决方案同时也能解决比该问题更"弱"的问题. 共识问题的一个较强的形式如下.')]),t._v(" "),a("p",[t._v("给出一个处理者的集合, 其中每一个处理者都有一个初始值:")]),t._v(" "),a("ul",[a("li",[t._v("所有无错误的进程(处理过程)最终都将决定一个值;")]),t._v(" "),a("li",[t._v("所有会做决定的无错误进程决定的都将是同一个值;")]),t._v(" "),a("li",[t._v("最终被决定的值必须被至少一个进程提出过.")])]),t._v(" "),a("p",[t._v('这三个特性分别被称为"终止", "一致同意"和"有效性". 任何一个具备这三点特性的算法都被认为是解决了共识问题.')]),t._v(" "),a("p",[t._v("FLP 不可能性则讨论了异步模型下的情况, 主要结论有两条.")]),t._v(" "),a("ol",[a("li",[t._v('在异步模型下不存在一个完全正确的共识算法. 不仅上述较"强"形式的共识算法不可能实现, FLP 还证明了比它弱一些的, 只需要有一些无错误的进程做决定就足够的共识算法也是不可能实现的.')]),t._v(" "),a("li",[t._v("在异步模型下存在一个部分正确的共识算法, 前提是所有无错误的进程都总能做出一个决定, 此外没有进程会在它的执行过程中死亡, 并且初始情况下超过半数进程都是存活状态.")])]),t._v(" "),a("p",[t._v("FLP 的结论是, 在异步模型中, 仅一个处理者可能崩溃的情况下, 就已经没有分布式算法能解决共识问题. 这是该问题的理论上界. 其背后的原因在于, 异步模型下对于一个处理者完成工作然后再回复消息所需的时间并没有上界. 因此, 无法判断出一个处理者到底是崩溃了, 还是在用较长的时间来回复, 或者是网络有很大的延迟.")]),t._v(" "),a("p",[t._v("FLP 不可能性对我们还有别的启发. 一是网络延迟很重要, 网络不能长时间处于拥塞状态, 否则共识算法将可能因为网络延迟过长而导致超时失败. 二是计算时间也很重要. 对于需要计算共识的处理过程(进程), 如分布式数据库提交, 需要在短时间里就计算出能否提交的结果, 那就要保证计算结点资源充分, 特别是内存容量, 磁盘空闲时间和 CPU 时间方面要足够, 并在软件层面确保计算不超时.")]),t._v(" "),a("p",[t._v('另一个问题是, 像 Paxos 这样的共识算法为什么可行? 实际上它并不属于 FLP 不可能性证明中所说的"完全正确"的算法. 它的正确性会受超时值的影响. 但这并不妨碍它在实践中有效, 因为我们可以通过避免网络拥塞等手段来保证超时值是合适的.')]),t._v(" "),a("h6",{attrs:{id:"_3-an-introduction-to-distributed-systems"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-an-introduction-to-distributed-systems"}},[t._v("#")]),t._v(" (3)An introduction to distributed systems")]),t._v(" "),a("p",[t._v("它是分布式系统基础课的课程提纲, 也是一份很棒的分布式系统介绍, 几乎涵盖了所有知识点, 并辅以简洁并切中要害的说明文字, 非常适合初学者提纲挈领地了解知识全貌, 快速与现有知识结合, 形成知识体系. 此外, 还可以把它作为分布式系统的知识图谱, 根据其中列出的知识点一一搜索, 你能学会所有的东西.")]),t._v(" "),a("h6",{attrs:{id:"_4-distributed-systems-for-fun-and-profit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-distributed-systems-for-fun-and-profit"}},[t._v("#")]),t._v(" (4)Distributed Systems for fun and profit")]),t._v(" "),a("p",[t._v("这是一本免费的"),a("strong",[t._v("电子书")]),t._v(". 作者撰写此书的目的是希望以一种更易于理解的方式, 讲述以亚马逊的 Dynamo, 谷歌的 BigTable 和 MapReduce 等为代表的分布式系统背后的核心思想. 因而书中着力撰写分布式系统中的关键概念, 以便让读者能够快速了解最为核心的知识, 并且进行了足够详实的讲述, 方便读者体会和理解, 又不至于陷入细节.")]),t._v(" "),a("p",[t._v("全书分为五章, 讲述了扩展性, 可用性, 性能和容错等基础知识, FLP 不可能性和 CAP 定理, 探讨了大量的一致性模型; 讨论了时间和顺序, 及时钟的各种用法. 随后, 探讨了复制问题, 如何防止差异, 以及如何接受差异. 此外, 每章末尾都给出了针对本章内容的扩展阅读资源列表, 这些资料是对本书内容的很好补充.")]),t._v(" "),a("h6",{attrs:{id:"_5-distributed-systems-principles-and-paradigms"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-distributed-systems-principles-and-paradigms"}},[t._v("#")]),t._v(" (5)Distributed Systems: Principles and Paradigms")]),t._v(" "),a("p",[t._v("本书是由计算机科学家安德鲁·斯图尔特·塔能鲍姆(Andrew S. Tanenbaum)和其同事马丁·范·斯蒂恩(Martin van Steen)合力撰写的, 是分布式系统方面的经典教材. 语言简洁, 内容通俗易懂, 介绍了分布式系统的七大核心原理, 并给出了大量的例子; 系统讲述了分布式系统的概念和技术, 包括通信, 进程, 命名, 同步化, 一致性和复制, 容错以及安全等; 讨论了分布式应用的开发方法(即范型).")]),t._v(" "),a("p",[t._v('但本书不是一本指导"如何做"的手册, 仅适合系统性地学习基础知识, 了解编写分布式系统的基本原则和逻辑. 中文翻译版为'),a("a",{attrs:{href:"https://item.jd.com/10079452.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("《分布式系统原理与范型》(第二版)"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("h6",{attrs:{id:"_6-scalable-web-architecture-and-distributed-systems"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-scalable-web-architecture-and-distributed-systems"}},[t._v("#")]),t._v(" (6)Scalable Web Architecture and Distributed Systems")]),t._v(" "),a("p",[t._v("这是一本免费的在线小册子, 其中文翻译版为"),a("a",{attrs:{href:"http://nettee.github.io/posts/2016/Scalable-Web-Architecture-and-Distributed-Systems/",target:"_blank",rel:"noopener noreferrer"}},[t._v("可扩展的 Web 架构和分布式系统"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("p",[t._v("本书主要针对面向的互联网(公网)的分布式系统, 但其中的原理或许也可以应用于其他分布式系统的设计中. 作者的观点是, 通过了解大型网站的分布式架构原理, 小型网站的构建也能从中受益. 本书从大型互联网系统的常见特性, 如高可用, 高性能, 高可靠, 易管理等出发, 引出了一个类似于 Flickr 的典型的大型图片网站的例子.")]),t._v(" "),a("p",[t._v("首先, 从程序模块化易组合的角度出发, 引出了面向服务架构(SOA)的概念. 同时, 引申出写入和读取两者的性能问题, 及对此二者如何调度的考量——在当今的软硬件架构上, 写入几乎总是比读取更慢, 包括软件层面引起的写入慢(如数据库的一致性要求和 B 树的修改)和硬件层面引起的写入慢(如 SSD).")]),t._v(" "),a("p",[t._v("网络提供商提供的下载带宽也通常比上传带宽更大. 读取往往可以异步操作, 还可以做 gzip 压缩. 写入则往往需要保持连接直到数据上传完成. 因此, 往往我们会想把服务做成读写分离的形式. 然后通过一个 Flickr 的例子, 介绍了他们的服务器分片式集群做法.")]),t._v(" "),a("p",[t._v("接下来讲了冗余. 数据的冗余异地备份(如 master-slave), 服务的多版本冗余, 避免单点故障等.")]),t._v(" "),a("p",[t._v("随后, 在冗余的基础上, 讲了多分区扩容, 亦即横向扩容. 横向扩容是在单机容量无法满足需求的情况下不得不做的设计. 但横向扩容会带来一个问题, 即数据的局域性会变差. 本来数据可以存在于同一台服务器上, 但现在数据不得不存在于不同服务器上, 潜在地降低了系统的性能(主要是可能延长响应时间). 另一个问题是多份数据的不一致性.")]),t._v(" "),a("p",[t._v("之后, 本书开始深入讲解数据访问层面的设计. 首先抛出一个大型数据(TB 级以上)的存储问题. 如果内存都无法缓存该数据量, 性能将大幅下降, 那么就需要缓存数据. 数据可以缓存在每个节点上.")]),t._v(" "),a("p",[t._v("但如果为所有节点使用负载均衡, 那么分配到每个节点的请求将十分随机, 大大降低缓存命中率, 从而导致低效的缓存. 接下来考虑全局缓存的设计. 再接下来考虑分布式缓存的设计. 进一步, 介绍了 Memcached, 以及 Facebook 的缓存设计方案.")]),t._v(" "),a("p",[t._v("代理服务器则可以用于把多个重复请求合并成一个, 对于公网上的公共服务来说, 这样做可以大大减少对数据层访问的次数. Squid 和 Varnish 是两个可用于生产的代理服务软件.")]),t._v(" "),a("p",[t._v("当知道所需要读取的数据的元信息时, 比如知道一张图片的 URL, 或者知道一个要全文搜索的单词时, 索引就可以帮助找到那几台存有该信息的服务器, 并从它们那里获取数据. 文中扩展性地讨论了本话题.")]),t._v(" "),a("p",[t._v("接下来谈负载均衡器, 以及一些典型的负载均衡拓扑. 然后讨论了对于用户会话数据如何处理. 比如, 对于电子商务网站, 用户的购物车在没有下单之前都必须保持有效.")]),t._v(" "),a("p",[t._v("一种办法是让用户会话与服务器产生关联, 但这样做会较难实现自动故障转移, 如何做好是个问题. 另外, 何时该使用负载均衡是个问题. 有时节点数量少的情况下, 只要使用轮换式 DNS 即可. 负载均衡也会让在线性能问题的检测变得更麻烦.")]),t._v(" "),a("p",[t._v("对于写入的负载, 可以用队列的方式来减少对服务器的压力, 保证服务器的效率. 消息队列的开源实现有很多, 如 RabbitMQ, ActiveMQ, BeanstalkD, 但有些队列方案也使用了如 Zookeeper, 甚至是像 Redis 这样的存储服务.")]),t._v(" "),a("p",[t._v("本书主要讲述了高性能互联网分布式服务的架构方案, 并介绍了许多实用的工具. 作者指出这是一个令人兴奋的设计领域, 虽然只讲了一些皮毛, 但这一领域不仅现在有很多创新, 将来也会越来越多.")]),t._v(" "),a("h6",{attrs:{id:"_7-principles-of-distributed-systems"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-principles-of-distributed-systems"}},[t._v("#")]),t._v(" (7)Principles of Distributed Systems")]),t._v(" "),a("p",[t._v("本书是苏黎世联邦理工学院的教材. 它讲述了多种分布式系统中会用到的算法. 虽然分布式系统的不同场景会用到不同算法, 但并不表示这些算法都会被用到. 不过, 对于学生来说, 掌握了算法设计的精髓也就能举一反三地设计出解决其他问题的算法, 从而得到分布式系统架构设计中所需的算法.")]),t._v(" "),a("p",[t._v("本书覆盖的算法有:")]),t._v(" "),a("ul",[a("li",[t._v("顶点涂色算法(可用于解决互相冲突的任务分配问题)")]),t._v(" "),a("li",[t._v("分布式的树算法(广播算法, 会聚算法, 广度优先搜索树算法, 最小生成树算法)")]),t._v(" "),a("li",[t._v("容错以及 Paxos(Paxos 是最经典的共识算法之一)")]),t._v(" "),a("li",[t._v("拜占庭协议(节点可能没有完全宕机, 而是输出错误的信息)")]),t._v(" "),a("li",[t._v("全互联网络(服务器两两互联的情况下算法的复杂度)")]),t._v(" "),a("li",[t._v("多核计算的工程实践(事务性存储, 资源争用管理)")]),t._v(" "),a("li",[t._v("主导集(又一个用随机化算法打破对称性的例子; 这些算法可以用于路由器建立路由)")]),t._v(" "),a("li",[t._v("...")])]),t._v(" "),a("p",[t._v("这些算法对你迈向更高级更广阔的技术领域真的相当有帮助的.")]),t._v(" "),a("h6",{attrs:{id:"_8-making-reliable-distributed-systems-in-the-presence-of-software-errors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-making-reliable-distributed-systems-in-the-presence-of-software-errors"}},[t._v("#")]),t._v(" (8)Making reliable distributed systems in the presence of software errors")]),t._v(" "),a("p",[t._v("这本书的书名直译过来是在有软件错误的情况下, 构建可靠的分布式系统, Erlang 之父乔·阿姆斯特朗(Joe Armstrong)的力作. 书中撰写的内容是从 1981 年开始的一个研究项目的成果, 这个项目是寻找更好的电信应用编程方式.")]),t._v(" "),a("p",[t._v("当时的电信应用都是大型程序, 虽然经过了仔细的测试, 但投入使用时程序中仍会存在大量的错误. 作者及其同事假设这些程序中确实有错误, 然后想法设法在这些错误存在的情况下构建可靠的系统. 他们测试了所有的编程语言, 没有一门语言拥有电信行业所需要的所有特性, 所以促使一门全新的编程语言 Erlang 的开发, 以及随之出现的构建健壮系统(OTP)的设计方法论和库集.")]),t._v(" "),a("p",[t._v("书中抽象了电信应用的所有需求, 定义了问题域, 讲述了系统构建思路——模拟现实, 简单通用, 并给出了指导规范. 阿姆斯特朗认为, 在存在软件错误的情况下, 构建可靠系统的核心问题可以通过编程语言或者编程语言的标准库来解决. 所以本书有很大的篇幅来介绍 Erlang, 以及如何运用其构建具有容错能力的电信应用.")]),t._v(" "),a("p",[t._v("虽然书中的内容是以构建 20 世纪 80 年代的电信系统为背景, 但是这种大规模分布式的系统开发思路, 以及对系统容错能力的核心需求, 与互联网时代的分布式系统架构思路出奇一致. 书中对问题的抽象, 总结, 以及解决问题的思路和方案, 有深刻的洞察和清晰的阐释, 所以此书对现在的项目开发和架构有极强的指导和借鉴意义.")]),t._v(" "),a("h6",{attrs:{id:"_9-designing-data-intensive-applications"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-designing-data-intensive-applications"}},[t._v("#")]),t._v(" (9)Designing Data Intensive Applications")]),t._v(" "),a("p",[t._v("这是一本非常好的书. 在分布式的世界里, 数据结点的扩展是一件非常麻烦的事. 而这本书则深入浅出地用很多工程案例讲解了如何让数据结点做扩展.")]),t._v(" "),a("p",[t._v("作者马丁·科勒普曼(Martin Kleppmann)在分布式数据系统领域有着很深的功底, 并在这本书中完整地梳理各类纷繁复杂设计背后的技术逻辑, 不同架构之间的妥协与超越, 很值得开发人员与架构设计者阅读.")]),t._v(" "),a("p",[t._v("这本书深入到 B-Tree, SSTables, LSM 这类数据存储结构中, 并且从外部的视角来审视这些数据结构对 NoSQL 和关系型数据库所产生的影响. 它可以让你很清楚地了解到真正世界的大数据架构中的数据分区, 数据复制的一些坑, 并提供了很好的解决方案.")]),t._v(" "),a("p",[a("strong",[t._v("最赞的是, 作者将各种各样的技术的本质非常好地关联在一起, 帮你触类旁通")]),t._v('. 而且抽丝剥茧, 循循善诱, 从"提出问题", 到"解决问题", 到"解决方案", 再到"优化方案"和"对比不同的方案", 一点一点地把非常晦涩的技术和知识展开.')]),t._v(" "),a("p",[t._v("本书的引用相当多, 每章后面都有几百个 Reference. 通过这些 Reference, 你可以看到更为广阔更为精彩的世界.")]),t._v(" "),a("p",[t._v("这本书是 2017 年 3 月份出版的, 目前还没有中译版, 不过英文也不难读. 非常推荐. 这里有"),a("a",{attrs:{href:"http://www.antonfagerberg.com/files/intensive.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("这本书的 PPT"),a("OutboundLink")],1),t._v(", 你可从这个 PPT 中管中窥豹一下.")]),t._v(" "),a("h4",{attrs:{id:"推荐阅读-分布式数据调度相关论文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#推荐阅读-分布式数据调度相关论文"}},[t._v("#")]),t._v(" 推荐阅读:分布式数据调度相关论文")]),t._v(" "),a("p",[t._v('在之前的系列文章《分布式系统架构的本质》中说过, 分布式系统的一个关键技术是"数据调度". 因为需要扩充节点, 提高系统的高可用性, 所以必需冗余数据结点.')]),t._v(" "),a("p",[t._v("建立数据结点的副本看上去容易, 但其中最大的难点就是"),a("strong",[t._v("分布式一致性")]),t._v("的问题. 下面, 我会带你看看数据调度世界中的一些技术点以及相关的技术论文.")]),t._v(" "),a("p",[t._v("对于分布式的一致性问题, 相信你在前面看过好几次下面这张图. 从中可以看出, Paxos 算法的重要程度. 还有人说, "),a("strong",[t._v("分布式下真正的一致性算法只有 Paxos")]),t._v(".")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/633c9f64ab6e746906c1f3fb5964d4aa-20230731162102-khy6oxm.png",alt:""}})]),t._v(" "),a("h5",{attrs:{id:"_1-paxos算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-paxos算法"}},[t._v("#")]),t._v(" 1.Paxos算法")]),t._v(" "),a("p",[t._v("Paxos 算法, 是莱斯利·兰伯特(Lesile Lamport)于 1990 年提出来的一种"),a("strong",[t._v("基于消息传递且具有高度容错特性的一致性算法")]),t._v(". 但是这个算法太过于晦涩, 所以一直以来都属于理论上的论文性质的东西.")]),t._v(" "),a("p",[t._v("其进入工程圈的源头在于 Google 的 Chubby lock, 一个分布式的锁服务, 用在了 Bigtable 中. 直到 Google 发布了下面的这两篇论文, Paxos 才进入到工程界的视野中来.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://static.googleusercontent.com/media/research.google.com/en//archive/bigtable-osdi06.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Bigtable: A Distributed Storage System for Structured Data"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://static.googleusercontent.com/media/research.google.com/en//archive/chubby-osdi06.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Chubby lock service for loosely-coupled distributed systems"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("Google 与 Big Table 相齐名的还有另外两篇论文.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://static.googleusercontent.com/media/research.google.com/en//archive/gfs-sosp2003.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Google File System"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://static.googleusercontent.com/media/research.google.com/en//archive/mapreduce-osdi04.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("MapReduce: Simplifed Data Processing on Large Clusters"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("不过, 这几篇论文中并没有讲太多的 Paxos 算法细节上的内容, 反而在论文 "),a("a",{attrs:{href:"https://static.googleusercontent.com/media/research.google.com/en//archive/paxos_made_live.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Paxos Made Live – An Engineering Perspective"),a("OutboundLink")],1),t._v(" 中提到了很多工程实现的细节. 比如 Google 实现 Paxos 时遇到的各种问题和解决方案, 讲述了从理论到实际应用二者之间巨大的鸿沟.")]),t._v(" "),a("p",[t._v("尤其在满地都是坑的分布式系统领域, 这篇论文没有过多讨论 Paxos 算法本身, 而是在讨论如何将理论应用到实践, 如何弥补理论在实践中的不足, 如何取舍, 如何测试, 这些在实践中的各种问题才是工程的魅力. 所以建议你读一读.")]),t._v(" "),a("p",[t._v("Paxos 算法的原版论文这里就不贴了, 因为一来比较晦涩, 二来也不易懂. 推荐一篇比较容易读的——"),a("a",{attrs:{href:"http://harry.me/blog/2014/12/27/neat-algorithms-paxos/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Neat Algorithms - Paxos"),a("OutboundLink")],1),t._v(", 这篇文章中还有一些小动画帮助你读懂. 还有一篇可以帮你理解的文章是 "),a("a",{attrs:{href:"https://angus.nyc/2012/paxos-by-example/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Paxos by Examples"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("p",[t._v("如果你要自己实现 Paxos 算法, 这里有几篇文章供你参考.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://www.inf.usi.ch/faculty/pedone/MScThesis/marco.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Paxos Made Code"),a("OutboundLink")],1),t._v(", 作者是马克罗·普里米 (Macro Primi), 他实现了一个 Paxos 开源库 "),a("a",{attrs:{href:"http://libpaxos.sourceforge.net/",target:"_blank",rel:"noopener noreferrer"}},[t._v("libpaxos"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.cnds.jhu.edu/pub/papers/cnds-2008-2.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Paxos for System Builders"),a("OutboundLink")],1),t._v(", 从一个系统实现者的角度讨论了实现 Paxos 的诸多具体问题, 比如 Leader 选举, 数据及消息类型, 流控等.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.cs.cornell.edu/courses/cs7412/2011sp/paxos.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Paxos Made Moderately Complex"),a("OutboundLink")],1),t._v(", 这篇文章比较新, 是 2011 年才发表的. 文中介绍了很多实现细节, 并提供了很多伪代码, 一方面可以帮助理解 Paxos, 另一方面也可以据此实现一个 Paxos.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://web.stanford.edu/class/cs340v/papers/paxos.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Paxos Made Practical"),a("OutboundLink")],1),t._v(" 主要介绍如何采用 Paxos 实现 replication.")])]),t._v(" "),a("p",[t._v("除了马克罗·普里米的那个开源实现外, 到 GitHub 上找一下, 你就会看到这些项目: "),a("a",{attrs:{href:"https://github.com/cocagne/paxos",target:"_blank",rel:"noopener noreferrer"}},[t._v("Plain Paxos Implementations Python & Java"),a("OutboundLink")],1),t._v(", "),a("a",{attrs:{href:"https://github.com/xiang90/paxos",target:"_blank",rel:"noopener noreferrer"}},[t._v("A go implementation of the Paxos algorithm"),a("OutboundLink")],1),t._v(" .")]),t._v(" "),a("p",[t._v("ZooKeeper 有和 Paxos 非常相似的一些特征, 比如领导选举, 提案号等, 但是它本质上不是 Paxos 协议, 而是自己发明的 Zab 协议, 有兴趣的话, 可以读一下这篇论文:\n"),a("a",{attrs:{href:"https://pdfs.semanticscholar.org/fc11/031895c302dc52404d34de58af1a72f3b817.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Zab: High-Performance broadcast for primary-backup systems"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("p",[t._v("上述的 "),a("strong",[t._v("Google File System, MapReduce, Bigtable")]),t._v(' 并称为 "谷三篇". 基本上来说, 整个世界工程系统因为这三篇文章, 开始向分布式系统演化, 而云计算中的很多关键技术也是因为这三篇文章才得以成熟. 后来, 雅虎公司也基于这三篇论文开发了一个开源的软件--Hadoop.')]),t._v(" "),a("h5",{attrs:{id:"_2-raft算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-raft算法"}},[t._v("#")]),t._v(" 2.Raft算法")]),t._v(" "),a("p",[t._v("因为 Paxos 算法太过于晦涩, 而且在实际的实现上有太多的坑, 并不太容易写对. 所以有人搞出了另外一个一致性的算法, 叫 Raft. 其原始论文是 "),a("a",{attrs:{href:"https://raft.github.io/raft.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("In search of an Understandable Consensus Algorithm (Extended Version)"),a("OutboundLink")],1),t._v(" 寻找一种易于理解的 Raft 算法. 这篇论文的译文在 InfoQ 上《"),a("a",{attrs:{href:"http://www.infoq.com/cn/articles/raft-paper",target:"_blank",rel:"noopener noreferrer"}},[t._v("Raft 一致性算法论文译文"),a("OutboundLink")],1),t._v("》, 推荐你读一读.")]),t._v(" "),a("p",[t._v("Raft 算法和 Paxos 的性能和功能是一样的, 但是它和 Paxos 算法的结构不一样, 这使 Raft 算法更容易理解并且更容易实现. 那么 Raft 是怎样做到的呢?")]),t._v(" "),a("p",[t._v("Raft 把这个一致性的算法分解成了几个部分, 一个是"),a("strong",[t._v("领导选举")]),t._v("(Leader Selection), 一个是"),a("strong",[t._v("日志复制")]),t._v("(Log Replication), 一个是"),a("strong",[t._v("安全性")]),t._v("(Safety), 还有一个是"),a("strong",[t._v("成员变化")]),t._v("(Membership Changes). 对于一般人来说, Raft 协议比 Paxos 的学习曲线更低, 也更平滑.")]),t._v(" "),a("p",[t._v("Raft 协议中有一个"),a("strong",[t._v("状态机")]),t._v(", 每个结点会有三个状态, 分别是 "),a("strong",[t._v("Leader, Candidate 和 Follower")]),t._v(". Follower 只响应其他服务器的请求, 如果没有收到任何信息, 它就会成为一个 Candidate, 并开始进行选举. 收到大多数人同意选票的人会成为新的 Leader.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/03caa46d34078d1f60cfca7044a2f7c4-20230731162102-ge9tx0h.png",alt:""}})]),t._v(" "),a("p",[t._v("**一旦选举出了一个 Leader, 它就开始负责服务客户端的请求. 每个客户端的请求都包含一个要被复制状态机执行的指令. Leader 首先要把这个指令追加到 log 中形成一个新的 entry, 然后通过 AppendEntries RPC 并行地把该 entry 发给其他服务器(server). 如果其他服务器没发现问题, 复制成功后会给 Leader 一个表示成功的 ACK. **")]),t._v(" "),a("p",[t._v("Leader 收到大多数 ACK 后应用该日志, 返回客户端执行结果. 如果 Follower 崩溃 (crash)或者丢包, Leader 会不断重试 AppendEntries RPC.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/523d2ef0c7627df8bc5148ee5e4dd969-20230731162102-x6yfssh.png",alt:""}})]),t._v(" "),a("p",[t._v("这里推荐几个不错的 Raft 算法的动画演示.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://thesecretlivesofdata.com/raft/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Raft – The Secret Lives of Data"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://raft.github.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Raft Consensus Algorithm"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://kanaka.github.io/raft.js/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Raft Distributed Consensus Algorithm Visualization"),a("OutboundLink")],1)])]),t._v(" "),a("h5",{attrs:{id:"_3-逻辑钟和向量钟"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-逻辑钟和向量钟"}},[t._v("#")]),t._v(" 3.逻辑钟和向量钟")]),t._v(" "),a("p",[t._v("后面, 业内又搞出来一些工程上的东西, 比如 Amazon 的 DynamoDB, 其论文 "),a("a",{attrs:{href:"http://bnrg.eecs.berkeley.edu/~randy/Courses/CS294.F07/Dynamo.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Dynamo: Amazon’s Highly Available Key Value Store"),a("OutboundLink")],1),t._v(" 的影响力也很大. 这篇论文中讲述了 Amazon 的 DynamoDB 是如何满足系统的高可用, 高扩展和高可靠要求的, 其中还展示了系统架构是如何做到数据分布以及数据一致性的.")]),t._v(" "),a("p",[t._v("GFS 采用的是查表式的数据分布, 而 DynamoDB 采用的是计算式的, 也是一个改进版的通过虚拟结点减少增加结点带来数据迁移的一致性哈希. 另外, 这篇论文中还讲述了一个 NRW 模式用于让用户可以灵活地在 CAP 系统中选取其中两项, 这使用到了 Vector Clock——向量时钟来检测相应的数据冲突. 最后还介绍了使用 Handoff 的机制对可用性的提升.")]),t._v(" "),a("p",[t._v("这篇文章中有几个关键的概念, 一个是 Vector Clock, 另一个是 Gossip 协议.")]),t._v(" "),a("p",[t._v("提到向量时钟就需要提一下逻辑时钟. 所谓逻辑时间, 也就是在分布系统中为了解决消息有序的问题, 由于在不同的机器上有不同的本地时间, 这些本地时间的同步很难搞, 会导致消息乱序.")]),t._v(" "),a("p",[t._v("于是 Paxos 算法的发明人兰伯特(Lamport)搞了个向量时钟, 每个系统维护一个本地的计数器, 这就是所谓的逻辑时钟. 每执行一个事件(例如向网络发送消息, 或是交付到应用层)都对这个计数器做加 1 操作. 当跨系统的时候, 在消息体上附着本地计算器, 当接收端收到消息时, 更新自己的计数器(取对端传来的计数器和自己当成计数器的最大值), 也就是调整自己的时钟.")]),t._v(" "),a("p",[t._v("逻辑时钟可以保证, 如果事件 A 先于事件 B, 那么事件 A 的时钟一定小于事件 B 的时钟, 但是返过来则无法保证, 因为返过来没有因果关系. 所以, 向量时钟解释了因果关系. 向量时钟维护了数据更新的一组版本号(版本号其实就是使用逻辑时钟).")]),t._v(" "),a("p",[t._v("假如一个数据需要存在三个结点上 A, B, C. 那么向量维度就是 3, 在初始化的时候, 所有结点对于这个数据的向量版本是 [A:0, B:0, C:0]. 当有数据更新时, 比如从 A 结点更新, 那么, 数据的向量版本变成 [A:1, B:0, C:0], 然后向其他结点复制这个版本, 其在语义上表示为我当前的数据是由 A 结果更新的, 而在逻辑上则可以让分布式系统中的数据更新的顺序找到相关的因果关系.")]),t._v(" "),a("p",[t._v("这其中的逻辑关系, 你可以看一下 "),a("a",{attrs:{href:"http://lass.cs.umass.edu/~shenoy/courses/spring05/lectures.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("马萨诸塞大学课程 Distributed Operating System"),a("OutboundLink")],1),t._v(" 中第 10 节 "),a("a",{attrs:{href:"http://lass.cs.umass.edu/~shenoy/courses/spring05/lectures/Lec10.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Clock Synchronization"),a("OutboundLink")],1),t._v(" 这篇讲议. 关于 Vector Clock, 你可以看一下 "),a("a",{attrs:{href:"http://basho.com/posts/technical/why-vector-clocks-are-easy/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Why Vector Clocks are Easy"),a("OutboundLink")],1),t._v("和"),a("a",{attrs:{href:"http://basho.com/posts/technical/why-vector-clocks-are-hard/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Why Vector Clocks are Hard"),a("OutboundLink")],1),t._v(" 这两篇文章.")]),t._v(" "),a("h5",{attrs:{id:"_4-gossip协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-gossip协议"}},[t._v("#")]),t._v(" 4.Gossip协议")]),t._v(" "),a("p",[t._v("另外, DynamoDB 中使用到了 Gossip 协议来做数据同步, 这个协议的原始论文是 "),a("a",{attrs:{href:"https://www.cs.cornell.edu/home/rvr/papers/flowgossip.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Efficient Reconciliation and Flow Control for Anti-Entropy Protocols"),a("OutboundLink")],1),t._v('. Gossip 算法也是 Cassandra 使用的数据复制协议. 这个协议就像八卦和谣言传播一样, 可以 "一传十, 十传百" 传播开来. 但是这个协议看似简单, 细节上却非常麻烦.')]),t._v(" "),a("p",[t._v("根据这篇论文, 节点之间存在三种通信方式.")]),t._v(" "),a("ul",[a("li",[t._v("push 方式. A 节点将数据 (key,value,version) 及对应的版本号推送给 B 节点, B 节点更新 A 中比自己新的数据.")]),t._v(" "),a("li",[t._v("pull 方式. A 仅将数据 key,version 推送给 B, B 将本地比 A 新的数据 (key,value,version) 推送给 A, A 更新本地.")]),t._v(" "),a("li",[t._v("push/pull 方式. 与 pull 类似, 只是多了一步, A 再将本地比 B 新的数据推送给 B, B 更新本地.")])]),t._v(" "),a("p",[t._v("如果把两个节点数据同步一次定义为一个周期, 那么在一个周期内, push 需通信 1 次, pull 需 2 次, push/pull 则需 3 次. 从效果上来讲, push/pull 最好, 理论上一个周期内可以使两个节点完全一致. 直观感觉上, 也是 push/pull 的收敛速度最快.")]),t._v(" "),a("p",[t._v("另外, 每个节点上的又需要一个协调机制, 也就是如何交换数据能达到最快的一致性——消除节点的不一致性. 上面所讲的 push, pull 等是通信方式, 协调是在通信方式下的数据交换机制.")]),t._v(" "),a("p",[t._v("协调所面临的最大问题是, 一方面需要找到一个经济的方式, 因为不可能每次都把一个节点上的数据发送给另一个节点; 另一方面, 还需要考虑到相关的容错方式, 也就是当因为网络问题不可达的时候, 怎么办?")]),t._v(" "),a("p",[t._v("一般来说, 有两种机制: 一种是以固定概率传播的 Anti-Entropy 机制, 另一种是仅传播新到达数据的 Rumor-Mongering 机制. 前者有完备的容错性, 但是需要更多的网络和 CPU 资源, 后者则反过来, 不耗资源, 但在容错性上难以保证.")]),t._v(" "),a("p",[t._v("Anti-Entropy 的机制又分为 Precise Reconciliation(精确协调)和 Scuttlebutt Reconciliation(整体协调)这两种. 前者希望在每次通信周期内都非常精确地消除双方的不一致性, 具体表现就是互发对方需要更新的数据. 因为每个结点都可以读写, 所以这需要每个数据都要独立维护自己的版本号.")]),t._v(" "),a("p",[t._v("而整体协调与精确协调不同的是, 整体协调不是为每个数据都维护单独的版本号, 而是每个节点上的数据统一维护一个版本号, 也就是一个一致的全局版本. 这样与其他结果交换数据的时候, 就只需要比较节点版本, 而不是数据个体的版本, 这样会比较经济一些. 如果版本不一样, 则需要做精确协调.")]),t._v(" "),a("p",[t._v("因为篇幅问题, 这里就不多说了, 你可以看看原始的论文, 还可以去看看 Cassandra 中的源码, 以及到 GitHub 搜一下其他人的实现. 多说一句, Cassandra 的实现是基于整体协调的 push/pull 模式.")]),t._v(" "),a("p",[t._v("关于 Gossip 的一些图示化的东西, 你可以看一下动画"),a("a",{attrs:{href:"https://rrmoelker.github.io/gossip-visualization/",target:"_blank",rel:"noopener noreferrer"}},[t._v("gossip visualization"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("h5",{attrs:{id:"_5-分布式数据库方面"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-分布式数据库方面"}},[t._v("#")]),t._v(" 5.分布式数据库方面")]),t._v(" "),a("p",[t._v("上面讲的都是一些基本概念相关的东西, 下面来谈谈数据库方面的一些论文.")]),t._v(" "),a("p",[t._v("一篇是 AWS Aurora 的论文 "),a("a",{attrs:{href:"http://www.allthingsdistributed.com/files/p1041-verbitski.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Amazon Aurora: Design Considerations for High Throughput Cloud –Native Relation Databases"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("p",[t._v("Aurora 是 AWS 将 MySQL 的计算和存储分离后, 计算节点 scale up, 存储节点 scale out. 并把其 redo log 独立设计成一个存储服务, 把分布式的数据方面的东西全部甩给了底层存储系统. 从而提高了整体的吞吐量和水平的扩展能力.")]),t._v(" "),a("p",[t._v("Aurora 要写 6 份拷贝, 但是其只需要把一个 Quorum 中的日志写成功就可以了. 如下所示. 可以看到, 将存储服务做成一个跨数据中心的服务, 提高数据库容灾, 降低性能影响.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/5c3c99f263a924779f75f33b7c997ad7-20230731162102-062q8gz.png",alt:""}})]),t._v(" "),a("p",[t._v("对于存储服务的设计, 核心的原理就是 latency 一定要低, 毕竟写 6 个 copy 是一件开销很大的事. 所以, 基本上来说, Aurora 用的是异步模型, 然后拼命地做并行处理, 其中用到的也是 Gossip 协议. 如下所示.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/855ee8430cd803f0ab543ac26b55618f-20230731162102-49u8m8c.png",alt:""}})]),t._v(" "),a("p",[t._v("在上面这个图中, 可以看到, 完成前两步, 就可以 ACK 回调用方. 也就是说, 只要数据在本地落地了, 就可以返回成功了. 然后对于六个副本, 这个 log 会同时发送到 6 个存储结点, 只需要有大于 4 个成功 ACK, 就算写成功了. 第 4 步可以看到用的是 Gossip 协议. 然后, 第 5 步产生 cache 页, 便于查询. 第 6 步在 S3 做 Snapshot, 类似于 Checkpoint.")]),t._v(" "),a("p",[t._v("第二篇比较有代表的论文是 Google 的 "),a("a",{attrs:{href:"http://static.googleusercontent.com/media/research.google.com/zh-CN//archive/spanner-osdi2012.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spanner: Google’s Globally-Distributed Database"),a("OutboundLink")],1),t._v(".\nSpanner 是 Google 的全球分布式数据库 Globally-Distributed Database). Spanner 的扩展性达到了令人咋舌的全球级, 可以扩展到数百万台机器, 数以百计的数据中心, 上万亿的行. 更给力的是, 除了夸张的扩展性之外, 它还能同时通过同步复制和多版本来满足外部一致性, 可用性也是很好的.")]),t._v(" "),a("p",[t._v("下面是 Spanserver 的一个架构.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/4b8eeb8451e2c78c27ad1ec9afc128de-20230731162102-ciatchp.png",alt:""}})]),t._v(" "),a("p",[t._v("可以看到, 每个数据中心都会有一套 Colossus, 这是第二代的 GFS. 每个机器有 100-1000 个 tablet, 也就是相当数据库表中的行集, 物理存储就是数据文件. 比如, 一张表有 2000 行, 然后有 20 个 tablet, 那么每个 tablet 分别有 100 行数据.")]),t._v(" "),a("p",[t._v("在 tablet 上层通过 Paxos 协议进行分布式跨数据中心的一致性数据同步. Paxos 会选出一个 replica 做 Leader, 这个 Leader 的寿命默认是 10s, 10s 后重选. Leader 就相当于复制数据的 master, 其他 replica 的数据都是从它那里复制的. 读请求可以走任意的 replica, 但是写请求只有去 Leader. 这些 replica 统称为一个 Paxos Group.")]),t._v(" "),a("p",[t._v("Group 之间也有数据交互传输, Google 定义了最小传输复制单元 directory, 是一些有共同前缀的 key 记录, 这些 key 也有相同的 replica 配置属性.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/66222f8f576d4e7f419334b3770373d7-20230731162102-t90i8q7.png",alt:""}})]),t._v(" "),a("p",[t._v("目前, 基于 Spanner 论文的开源实现有两个, 一个是 Google 公司自己的人出来做的 "),a("a",{attrs:{href:"https://github.com/cockroachdb/cockroach",target:"_blank",rel:"noopener noreferrer"}},[t._v("CockroachDB"),a("OutboundLink")],1),t._v(", 另一个是国人做的 "),a("a",{attrs:{href:"https://github.com/pingcap/tidb",target:"_blank",rel:"noopener noreferrer"}},[t._v("TiDB"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("h5",{attrs:{id:"_6-小结-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-小结-2"}},[t._v("#")]),t._v(" 6.小结")]),t._v(" "),a("p",[t._v("正如之前的分布式系统的本质文章里所说到的, 分布式的服务的调度需要一个分布式的存储系统来支持服务的数据调度. 而我们可以看到, 各大公司都在分布式的数据库上做各种各样的创新, 他们都在使用底层的分布式文件系统来做存储引擎, 把存储和计算分离开来, 然后使用分布式一致性的数据同步协议的算法来在上层提供高可用, 高扩展的支持.")]),t._v(" "),a("p",[t._v("从这点来看, 可以预见到, 过去的分库分表并通过一个数据访问的代理服务的玩法, 应该在不久就会过时就会成为历史. 真正的现代化的分布式数据存储就是 Aurora 和 Spanner 这样的方式.")]),t._v(" "),a("h3",{attrs:{id:"编程范式游记"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编程范式游记"}},[t._v("#")]),t._v(" 编程范式游记")]),t._v(" "),a("h4",{attrs:{id:"编程范式游记-1-起源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编程范式游记-1-起源"}},[t._v("#")]),t._v(" 编程范式游记(1)-起源")]),t._v(" "),a("p",[t._v("现在很多的文章和演讲都在谈架构, 很少有人再会谈及编程范式. 然而, 这些基础性和本质性的话题, 却是非常非常重要的. 一方面, 我发现在一些语言争论上, 有很多人对编程语言的认识其实并不深; 另一方面, 通过编程语言的范式, 我们不但可以知道整个编程语言的发展史, 而且还能提高自己的编程技能写出更好的代码.")]),t._v(" "),a("p",[t._v("**我希望通过一系列的文章带大家漫游一下各式各样的编程范式. **")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/301",target:"_blank",rel:"noopener noreferrer"}},[t._v("编程范式游记(1)- 起源"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/303",target:"_blank",rel:"noopener noreferrer"}},[t._v("编程范式游记(2)- 泛型编程"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/2017",target:"_blank",rel:"noopener noreferrer"}},[t._v("编程范式游记(3)- 类型系统和泛型的本质"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/2711",target:"_blank",rel:"noopener noreferrer"}},[t._v("编程范式游记(4)- 函数式编程"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/2723",target:"_blank",rel:"noopener noreferrer"}},[t._v("编程范式游记(5)- 修饰器模式"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/2729",target:"_blank",rel:"noopener noreferrer"}},[t._v("编程范式游记(6)- 面向对象编程"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/2741",target:"_blank",rel:"noopener noreferrer"}},[t._v("编程范式游记(7)- 基于原型的编程范式"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/2748",target:"_blank",rel:"noopener noreferrer"}},[t._v("编程范式游记(8)- Go 语言的委托模式"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/2751",target:"_blank",rel:"noopener noreferrer"}},[t._v("编程范式游记(9)- 编程的本质"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/2752",target:"_blank",rel:"noopener noreferrer"}},[t._v("编程范式游记(10)- 逻辑编程范式"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/2754",target:"_blank",rel:"noopener noreferrer"}},[t._v("编程范式游记(11)- 程序世界里的编程范式"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("这一经历可能有些漫长, 途中也会有各式各样的各种语言的代码. 但是我保证这一历程对于一个程序员来说是非常有价值的, 因为你不但可以对主流编程语言的一些特性有所了解, 而且当我们到达终点的时候, 你还能了解到编程的本质是什么.")]),t._v(" "),a("p",[t._v("这一系列文章中有各种语言的代码, 其中有 C, C++, Python, Java, Scheme, Go, JavaScript, Prolog 等. 所以, 如果要能跟上本文的前因后果, 你要对这几门比较主流的语言多少有些了解.")]),t._v(" "),a("p",[t._v("而且, 你需要在一线编写一段时间(大概 5 年以上吧)的代码, 可能才能体会到这一系列文章的内涵.")]),t._v(" "),a("p",[t._v("我根据每篇文章中所讲述的内容, 将这一系列文章分为四个部分.")]),t._v(" "),a("ul",[a("li",[t._v("**第一部分: **​"),a("mark",[a("strong",[t._v("泛型编程")])]),t._v(", 第 1~3 章, 讨论了从 C 到 C++ 的泛型编程方法, 并系统地总结了编程语言中的类型系统和泛型编程的本质.")]),t._v(" "),a("li",[t._v("**第二部分: **​"),a("mark",[a("strong",[t._v("函数式编程")])]),t._v(", 第 4 章和第 5 章, 讲述了函数式编程用到的技术, 及其思维方式, 并通过 Python 和 Go 修饰器的例子, 展示了函数式编程下的代码扩展能力, 以及函数的相互和随意拼装带来的好处.")]),t._v(" "),a("li",[t._v("**第三部分: **​"),a("mark",[a("strong",[t._v("面向对象编程")])]),t._v(", 第 6~8 章, 讲述与传统的编程思想相反, 面向对象设计中的每一个对象都应该能够接受数据, 处理数据并将数据传达给其它对象, 列举了面向对象编程的优缺点, 基于原型的编程范式, 以及 Go 语言的委托模式.")]),t._v(" "),a("li",[t._v("**第四部分: **​"),a("mark",[a("strong",[t._v("编程本质和逻辑编程")])]),t._v(", 第 9~11 章, 先探讨了编程的本质: 逻辑部分才是真正有意义的, 控制部分只能影响逻辑部分的效率, 然后结合 Prolog 语言介绍了逻辑编程范式, 最后对程序世界里的编程范式进行了总结, 对比了它们之间的不同.")])]),t._v(" "),a("p",[t._v('下面来说说什么是编程范式. 编程范式的英语是 programming paradigm, 范即模范之意, 范式即模式, 方法, 是一类典型的编程风格, 是指从事软件工程的一类典型的风格(可以对照"方法学"一词).')]),t._v(" "),a("p",[t._v("编程语言发展到今天, 出现了好多不同的代码编写方式, 但不同的方式解决的都是同一个问题, 那就是如何写出更为通用, 更具可重用性的代码或模块.")]),t._v(" "),a("h5",{attrs:{id:"_1-先从c语言开始"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-先从c语言开始"}},[t._v("#")]),t._v(" 1.先从C语言开始")]),t._v(" "),a("p",[t._v("为了讲清楚这个问题, 需要从 C 语言开始讲起. 因为 C 语言历史悠久, 而几乎现在看到的所有编程语言都是以 C 语言为基础来拓展的, 不管是 C++, Java, C#, Go, Python, PHP, Perl, JavaScript, Lua, 还是 Shell.")]),t._v(" "),a("p",[t._v("自 C 语言问世 40 多年以来, 其影响了太多太多的编程语言, 到现在还一直被广泛使用, 不得不佩服它的生命力. 但是, 也要清楚地知道, 大多数 C Like 编程语言其实都是在改善 C 语言带来的问题.")]),t._v(" "),a("p",[t._v("那 C 语言有哪些特性呢? 简单来总结下:")]),t._v(" "),a("ol",[a("li",[t._v("C 语言是一个静态弱类型语言, 在使用变量时需要声明变量类型, 但是类型间可以有隐式转换;")]),t._v(" "),a("li",[t._v("不同的变量类型可以用结构体(struct)组合在一起, 以此来声明新的数据类型;")]),t._v(" "),a("li",[t._v("C 语言可以用 "),a("code",[t._v("typedef")]),t._v(" 关键字来定义类型的别名, 以此来达到变量类型的抽象;")]),t._v(" "),a("li",[t._v("C 语言是一个有结构化程序设计, 具有变量作用域以及递归功能的过程式语言;")]),t._v(" "),a("li",[t._v("C 语言传递参数一般是以值传递, 也可以传递指针;")]),t._v(" "),a("li",[t._v("通过指针, C 语言可以容易地对内存进行低级控制, 然而这引入了非常大的编程复杂度;")]),t._v(" "),a("li",[t._v("编译预处理让 C 语言的编译更具有弹性, 比如跨平台.")])]),t._v(" "),a("p",[t._v("C 语言的这些特性, 可以让程序员在微观层面写出非常精细和精确的编程操作, 让程序员可以在底层和系统细节上非常自由, 灵活和精准地控制代码.")]),t._v(" "),a("p",[t._v("然而, 在代码组织和功能编程上, C 语言的上述特性, 却不那么美妙了.")]),t._v(" "),a("h6",{attrs:{id:"_1-从c语言的一个简单例子说起"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-从c语言的一个简单例子说起"}},[t._v("#")]),t._v(" (1)从C语言的一个简单例子说起")]),t._v(" "),a("p",[t._v("从 C 语言最简单的交换两个变量的 swap 函数说起, 参看下面的代码.")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("swap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" temp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("可以想一想, 这里为什么要传指针? 这里是 C 语言指针, 因为如果你不用指针的话, 那么参数变成传值, 即函数的形参是调用实参的一个拷贝, 函数里面对形参的修改无法影响实参的结果. 为了要达到调用完函数后, 实参内容的交换, 必须要把实参的地址传递进来, 也就是传指针. 这样在函数里面做交换, 实际变量的值也被交换了.")]),t._v(" "),a("p",[t._v("然而, 这个函数最大的问题就是它"),a("strong",[t._v("只能给 int 值用")]),t._v(", 这个世界上还有很多类型包括 double, float, 这就是静态语言最糟糕的一个问题.")]),t._v(" "),a("h6",{attrs:{id:"_2-数据类型与现实世界的类比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-数据类型与现实世界的类比"}},[t._v("#")]),t._v(" (2)数据类型与现实世界的类比")]),t._v(" "),a("p",[t._v("与现实世界类比一下, 数据类型就好像螺帽一样, 有多种接口方式: 平口的, 有十字的, 有六角的等, 而螺丝刀就像是函数, 或是用来操作这些螺丝的算法或代码. 这些不同类型的螺帽(数据类型), 需要我们为之适配一堆不同的螺丝刀. 而且它们还有不同的尺寸(尺寸就代表它是单字节的, 还是多字节的, 比如整型的 int, long, 浮点数的 float 和 double), 这样复杂度一下就提高了, 最终导致电工(程序员)工作的时候需要带下图这样的一堆工具.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/6a28587b65ac9f09ed62c5fd86ef67f3-20230731162102-0o16hxe.png",alt:""}})]),t._v(" "),a("p",[t._v("这就是"),a("strong",[t._v("类型")]),t._v("为编程带来的问题. 要解决这个问题, 还是来看一下现实世界. 你应该见过下面图片中的这种经过优化的螺丝刀, 上面手柄是一样的, 拧螺丝的动作也是一样的, 只是接口不一样. 每次我看到这张图片的时候就在想, 这密密麻麻的看着有 40 多种接口, 不知道为什么人类世界要干出这么多的花样? 你们这群人类究竟是要干什么啊.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/267392a34858a293c6261a031b54a577-20230731162102-a3tu25c.png",alt:""}})]),t._v(" "),a("p",[t._v("可以看到, 无论是传统世界, 还是编程世界, 我们都在干一件事情, 什么事呢? "),a("mark",[a("strong",[t._v('那就是通过使用一种更为通用的方式, 用另外的话说就是抽象和隔离, 让复杂的"世界"变得简单一些')])]),t._v(".")]),t._v(" "),a("p",[t._v("然而要做到抽象, 对于 C 语言这样的类型语言来说, 首当其冲的就是抽象类型, 这就是所谓的--泛型编程.")]),t._v(" "),a("p",[t._v("另外还要注意到, 在编程世界里, 对于 C 语言来说, "),a("strong",[t._v("类型还可以转换")]),t._v(". 编译器会使用一切方式来做类型转换, 因为类型转换有时候可以让编程更方便一些, 也让相近的类型可以做到一点点的泛型.")]),t._v(" "),a("p",[t._v("然而, 对于 C 语言的类型转换, 是会出很多问题的. 比如说, 传给我一个数组, 这个数组本来是 double 的, 或者是 long 64 位的, 但是如果把数组类型强转成 int, 那么就会出现很多问题, 因为这会导致程序遍历数组的步长不一样了.")]),t._v(" "),a("p",[t._v("比如: 一个 "),a("code",[t._v("double a[10]")]),t._v("​ 的数组, "),a("code",[t._v("a[2]")]),t._v("​ 意味着 "),a("code",[t._v("a + sizeof(double) * 2")]),t._v("​. 如果把 "),a("code",[t._v("a")]),t._v("​ 强转成 "),a("code",[t._v("int")]),t._v("​, 那么 "),a("code",[t._v("a[2]")]),t._v("​ 就意味着 "),a("code",[t._v("a + sizeof(int) * 2")]),t._v("​. 我们知道 "),a("code",[t._v("sizeof(double)")]),t._v("​ 是 "),a("code",[t._v("8")]),t._v("​, 而 "),a("code",[t._v("sizeof(int)")]),t._v("​ 是 "),a("code",[t._v("4")]),t._v("​. 于是访问到了不同的地址和内存空间, 这就导致程序出现严重的问题.")]),t._v(" "),a("h6",{attrs:{id:"_3-c语言的泛型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-c语言的泛型"}},[t._v("#")]),t._v(" (3)C语言的泛型")]),t._v(" "),a("blockquote",[a("p",[t._v("一个泛型的示例 - swap 函数")])]),t._v(" "),a("p",[t._v("再看下 C 语言是如何泛型的. C 语言的类型泛型基本上来说就是使用 "),a("code",[t._v("void *")]),t._v("​ 关键字或是使用宏定义.")]),t._v(" "),a("p",[t._v("下面是一个使用了 "),a("code",[t._v("void*")]),t._v("​ 泛型版本的 swap 函数.")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("swap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" tmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("memcpy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("memcpy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("memcpy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("上面这个函数几乎完全改变了 int 版的函数的实现方式, 这个实现方式有三个重点:")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("函数接口中增加了一个 "),a("strong",[t._v("​")]),t._v("​"),a("code",[t._v("size")]),t._v("​")]),t._v("​ "),a("strong",[t._v("参数")]),t._v(". 为什么要这么干呢? 因为用了 "),a("code",[t._v("void*")]),t._v('​ 后, 类型被"抽象"掉了, 编译器不能通过类型得到类型的尺寸了, 所以需要手动地加上一个类型长度的标识.')]),t._v(" "),a("li",[a("strong",[t._v("函数的实现中使用了 "),a("strong",[t._v("​")]),t._v("​"),a("code",[t._v("memcpy()")]),t._v("​")]),t._v(" ​ "),a("strong",[t._v("函数")]),t._v('. 为什么要这样干呢? 还是因为类型被"抽象"掉了, 所以不能用赋值表达式了, 很有可能传进来的参数类型还是一个结构体, 因此为了要交换这些复杂类型的值, 只能使用内存复制的方法了.')]),t._v(" "),a("li",[a("strong",[t._v("函数的实现中使用了一个 "),a("strong",[t._v("​")]),t._v("​"),a("code",[t._v("temp[size]")]),t._v("​")]),t._v(" ​"),a("strong",[t._v("数组")]),t._v(". 这就是交换数据时需要用的 buffer, 用 buffer 来做临时的空间存储.")])]),t._v(" "),a("p",[t._v("于是, 新增的 "),a("code",[t._v("size")]),t._v("​ 参数, 使用的 "),a("code",[t._v("memcpy")]),t._v("​ 内存拷贝以及一个 buffer, 这增加了编程的复杂度. 这就是 C 语言的"),a("strong",[t._v("类型抽象所带来的复杂度的提升")]),t._v(".")]),t._v(" "),a("p",[t._v("在提升复杂度的同时, 我们发现还有问题, 比如想交换两个字符串数组, 类型是: "),a("code",[t._v("char*")]),t._v("​, 那么, 我的 "),a("code",[t._v("swap()")]),t._v("​ 函数的 "),a("code",[t._v("x")]),t._v("​ 和 "),a("code",[t._v("y")]),t._v("​ 参数是不是要用 "),a("code",[t._v("void**")]),t._v("​ 了? 这样一来, 接口就没法定义了.")]),t._v(" "),a("p",[t._v("除了使用 "),a("code",[t._v("void*")]),t._v(" 来做泛型, 在 C 语言中, 还可以用宏定义来做泛型, 如下所示:")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name function"}},[t._v("swap")]),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" temp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("memcpy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("temp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("memcpy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("memcpy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" temp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])])]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("但用宏带来的问题就是"),a("strong",[t._v("编译器做字符串替换")]),t._v(", 因为宏是做字符串替换, 所以会导致代码膨胀, 导致编译出的执行文件比较大. 不过对于 swap 这个简单的函数来说, 用 "),a("code",[t._v("void*")]),t._v("​和宏替换来说都可以达到泛型.")]),t._v(" "),a("p",[t._v("但是, 如果不是 swap, 而是 min() 或 max() 函数, 那么宏替换的问题就会暴露得更多一些. 比如, 对于下面的这个宏:")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name function"}},[t._v("min")]),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("其中一个最大的问题, 就是有可能会有"),a("strong",[t._v("重复执行")]),t._v("的问题. 如:")]),t._v(" "),a("ul",[a("li",[t._v("​"),a("code",[t._v("min(i++, j++)")]),t._v("​ 对于这个案例来说, 本意是比较完后, 对变量做累加, 但是因为宏替换的缘故, 这会导致变量 "),a("code",[t._v("i")]),t._v("​ 或 "),a("code",[t._v("j")]),t._v("​ 被累加两次.")]),t._v(" "),a("li",[t._v("​"),a("code",[t._v("min(foo(), bar())")]),t._v("​ 对于这个示例来说, 本意是比较 "),a("code",[t._v("foo()")]),t._v("​ 和 "),a("code",[t._v("bar()")]),t._v("​ 函数的返回值, 然而经过宏替换后, "),a("code",[t._v("foo()")]),t._v("​ 或 "),a("code",[t._v("bar()")]),t._v("​ 会被调用两次, 这会带来很多问题.")])]),t._v(" "),a("p",[t._v('另外, 你会不会觉得无论是用哪种方式, 这种 "泛型" 是不是太宽松了一些, '),a("strong",[t._v("完全不做类型检查, 就是在内存上对拷")]),t._v(", 直接操作内存的这种方式, 感觉是不是比较危险, 而且就像一个定时炸弹一样, 不知道什么时候, 在什么条件下就爆炸了.")]),t._v(" "),a("p",[t._v("从上面的两个例子, 可以发现, 无论哪种方式, 接口都变得复杂了--加入了"),a("code",[t._v("size")]),t._v("​, 因为如果不加入 "),a("code",[t._v("size")]),t._v("​ 的话, 那么函数内部就需要自己检查 "),a("code",[t._v("size")]),t._v("​. 然而, "),a("code",[t._v("void*")]),t._v("​ 这种地址的方式是没法得到 "),a("code",[t._v("size")]),t._v("​ 的.")]),t._v(" "),a("p",[t._v("而宏定义的那种方式, 虽然不会把类型给隐藏掉, 可以使用像 "),a("code",[t._v("sizeof(x)")]),t._v("​ 这样的方式得到 "),a("code",[t._v("size")]),t._v("​. 但是如果类型是 "),a("code",[t._v("char*")]),t._v("​, 那么使用 "),a("code",[t._v("sizeof")]),t._v("​ 方式只能提到指针类型的 "),a("code",[t._v("size")]),t._v("​, 而不是值的 "),a("code",[t._v("size")]),t._v("​. 另外, 对于不同的类型, 比如说 "),a("code",[t._v("double")]),t._v("​ 和 "),a("code",[t._v("int")]),t._v("​, 那应该用谁的 "),a("code",[t._v("size")]),t._v("​ 呢? 是不是先转一下型呢? 这些都是问题.")]),t._v(" "),a("p",[t._v("于是, 这种泛型, 让我们根本没有办法检查传入参数的 "),a("code",[t._v("size")]),t._v("​, 导致只能增加接口复杂度, 加入一个 "),a("code",[t._v("size")]),t._v("​ 参数, 然后把这个问题抛给调用者了.")]),t._v(" "),a("blockquote",[a("p",[t._v("一个更为复杂的泛型示例 - Search函数")])]),t._v(" "),a("p",[t._v("如果把这个事情变得更复杂, 写个 "),a("code",[t._v("search")]),t._v("​ 函数, 再传一个 "),a("code",[t._v("int")]),t._v("​ 数组, 然后想搜索 "),a("code",[t._v("target")]),t._v("​, 搜到返回数组下标, 搜不到返回 "),a("code",[t._v("-1")]),t._v("​.")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("search")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[t._v("可以看到, 这个函数是类型 "),a("code",[t._v("int")]),t._v("​ 版的. 如果要把这个函数变成泛型的应该怎么变呢?")]),t._v(" "),a("p",[t._v("就像上面 "),a("code",[t._v("swap()")]),t._v("​ 函数那样, 如果要把它变成泛型, 需要变更并复杂化函数接口.")]),t._v(" "),a("ol",[a("li",[t._v("需要在函数接口上增加一个 element size, 也就是数组里面每个元素的 size. 这样, 当遍历数组的时候, 可以通过这个 size 正确地移动指针到下一个数组元素.")]),t._v(" "),a("li",[t._v("还要加个 "),a("code",[t._v("cmpFn")]),t._v("​. 因为要去比较数组里的每个元素和 "),a("code",[t._v("target")]),t._v("​ 是否相等. 因为不同数据类型的比较的实现不一样, 比如整型比较用 "),a("code",[t._v("==")]),t._v("​ 就好了. 但是如果是一个字符串数组, 那么比较就需要用 "),a("code",[t._v("strcmp")]),t._v("​ 这类的函数. 而如果传一个结构体数组(如 Account 账号), 那么比较两个数据对象是否一样就比较复杂了. 所以必须要自定义一个"),a("strong",[t._v("比较函数")]),t._v(".")])]),t._v(" "),a("p",[t._v("最终的 "),a("code",[t._v("search")]),t._v("​ 函数的泛型版如下所示:")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("search")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" elem_size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("cmpFn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// why not use memcmp()")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// use unsigned char * to calculate the address")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cmpFn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" elem_size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("p",[t._v("在上面的代码中, 没有使用 "),a("code",[t._v("memcmp()")]),t._v("​函数, 这是因为, 如果这个数组是一个指针数组, 或是这个数组是一个结构体数组, 而结构体数组中有指针成员. 我们想比较的是指针指向的内容, 而不是指针这个变量. 所以用 "),a("code",[t._v("memcmp()")]),t._v("​ 会导致在比较指针(内存地址), 而不是指针所指向的值.")]),t._v(" "),a("p",[t._v("而调用者需要提供如下的比较函数:")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("int_cmp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("string_cmp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("strcmp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[t._v("如果面对有业务类型的结构体, 可能会是这样的比较函数:")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("_account")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" Account"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("account_cmp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Account"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Account"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("strcmp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("strcmp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("p",[t._v("我们的 C 语言干成这个样子, 看上去还行, 但是上面的这个 "),a("code",[t._v("search")]),t._v("​ 函数只能用于数组这样的顺序型的数据容器(数据结构). 如果这个 "),a("code",[t._v("search")]),t._v("​函数能支持一些非顺序型的数据容器(数据结构), 比如: 堆, 栈, 哈希表, 树, 图. 那么, 用 C 语言来干基本上干不下去了, 对于像 "),a("code",[t._v("search()")]),t._v("​ 这样的算法来说, 数据类型的自适应问题就已经把事情搞得很复杂了. 然而数据结构的自适应就会把这个事的复杂度搞上几个数量级.")]),t._v(" "),a("h5",{attrs:{id:"_2-小结-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-小结-2"}},[t._v("#")]),t._v(" 2.小结")]),t._v(" "),a("p",[t._v("如果说 "),a("code",[t._v("程序 = 算法 + 数据")]),t._v("​, 我觉得 C 语言会有这几个问题.")]),t._v(" "),a("ol",[a("li",[t._v("一个通用的算法, 需要对所处理的数据的数据类型进行适配. 但在适配数据类型的过程中, C 语言只能使用 "),a("code",[t._v("void*")]),t._v("​ 或 "),a("code",[t._v("宏替换")]),t._v("​ 的方式, 这两种方式导致了类型过于宽松, 并带来很多其它问题.")]),t._v(" "),a("li",[t._v("适配数据类型, 需要 C 语言在泛型中加入一个类型的 size, 这是因为识别不了被泛型后的数据类型, 而 C 语言没有运行时的类型识别, 所以只能将这个工作抛给调用泛型算法的程序员来做了.")]),t._v(" "),a("li",[t._v("算法其实是在操作数据结构, 而数据则是放到数据结构中的. 所以真正的泛型除了适配数据类型外, 还要适配数据结构. 最后这个事情导致泛型算法的复杂急剧上升. 比如容器内存的分配和释放, 不同的数据体可能有非常不一样的内存分配和释放模型, 再比如对象之间的复制, 要把它存进来我需要有一个复制, 这其中又涉及到是深拷贝, 还是浅拷贝.")]),t._v(" "),a("li",[t._v("最后, 在实现泛型算法的时候, 你会发现自己在纠结哪些东西应该抛给调用者处理, 哪些又是可以封装起来. 如何平衡和选择, 并没有定论, 也不好解决.")])]),t._v(" "),a("p",[t._v("总体来说, C 语言设计目标是提供一种能以简易的方式编译, 处理低层内存, 产生少量的机器码以及不需要任何运行环境支持便能运行的编程语言. C 语言也很适合搭配汇编语言来使用. C 语言把非常底层的控制权交给了程序员, 它设计的理念是:")]),t._v(" "),a("ul",[a("li",[t._v("相信程序员;")]),t._v(" "),a("li",[t._v("不会阻止程序员做任何底层的事;")]),t._v(" "),a("li",[t._v("保持语言的最小和最简的特性;")]),t._v(" "),a("li",[t._v("保证 C 语言的最快的运行速度, 那怕牺牲移值性.")])]),t._v(" "),a("p",[t._v("从某种角度上来说, C 语言的伟大之处在于"),a("strong",[t._v("使用 C 语言的程序员在高级语言的特性之上还能简单地做任何底层上的微观控制")]),t._v(". 这是 C 语言的强大和优雅之处. 也有人说, C 语言是高级语言中的汇编语言.")]),t._v(" "),a("p",[t._v("不过, 这只是在针对底层指令控制和过程式的编程方式. 而对于更高阶更为抽象的编程模型来说, C 语言这种基于过程和底层的初衷设计方式就会成为它的短板. 因为在编程这个世界中, 更多的编程工作是解决业务上的问题, 而不是计算机的问题, 所以需要更为贴近业务更为抽象的语言.")]),t._v(" "),a("p",[t._v("说到这里, 我想你会问, 那 C 语言本会怎么去解决这些问题呢? 简单点说, "),a("strong",[t._v("C 语言并没有解决这些问题")]),t._v(", 所以才有了后面的 C++ 等其他语言. C 语言诞生于 1972 年, 到现在已经有 45 年的历史, 在它之后, C++, Java, C# 等语言前仆后继, 一浪高过一浪, 都在试图解决那个时代的那个特定问题, 我们不能去否定某个语言, 但可以确定的是, 随着历史的发展, 每一门语言都还在默默迭代, 不断优化和更新. 同时也会有很多新的编程语言带着新的闪光耀眼的特性出现在我们面前.")]),t._v(" "),a("p",[t._v("再回过头来说, 编程范式其实就是程序的指导思想, 它也代表了这门语言的设计方向, 并不能说哪种范式更为超前, 只能说各有千秋. 比如 C 语言就是"),a("strong",[t._v("过程式")]),t._v('的编程语言, 像 C 语言这样的过程式编程语言优点是底层灵活而且高效, 特别适合开发运行较快且对系统资源利用率要求较高的程序, 但上面抛出的问题它在后来也没有试图去解决, 因为编程范式的选择基本已经决定了它的"命运".')]),t._v(" "),a("h4",{attrs:{id:"编程范式游记-2-泛型编程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编程范式游记-2-泛型编程"}},[t._v("#")]),t._v(" 编程范式游记(2)-泛型编程")]),t._v(" "),a("p",[t._v("上一篇文章从 C 语言开始说起, 聊了聊面向过程式的编程范式, 相信从代码的角度你对这类型的语言已经有了一些理解. 作为一门高级语言, C 语言绝对是编程语言历史发展中的一个重要里程碑, 但随着认知的升级, 面向过程的 C 语言已经无法满足更高层次的编程的需要. 于是 C++ 出现了.")]),t._v(" "),a("h5",{attrs:{id:"_1-c-语言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-c-语言"}},[t._v("#")]),t._v(" 1.C++语言")]),t._v(" "),a("p",[t._v("1980 年, 贝尔实验室的 **Bjarne Stroustrup ** 创建的 C++ 语言横空出世, 它既可以全面兼容 C 语言, 又巧妙揉和了一些面向对象的编程理念. 现在来看, 不得不佩服 Stroustrup 的魄力. 在这里也推荐一本书《C++ 语言的设计和演化》. 这本书系统介绍了 C++ 诞生的背景以及初衷, 书的作者就是 "),a("a",{attrs:{href:"https://book.douban.com/author/362072/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Stroustrup"),a("OutboundLink")],1),t._v(" 本人, 所以你可以非常详细地从语言创建者的角度了解他的设计思路和创新之旅. 当然, 就是在今天, C++ 这门语言也还有很多争议, 这里我不细说.")]),t._v(" "),a("p",[t._v("从语言角度来说, 实际上早期 C++ 的许多工作是对 C 的强化和净化, 并把完全兼容 C 作为强制性要求(这也是 C++ 复杂晦涩的原因, 这点 Java 就干得比 C++ 彻底得多). 在 C89, C99 这两个 C 语言的标准中, 有许多改进都是从 C++ 中引进的.")]),t._v(" "),a("p",[t._v("可见, C++ 对 C 语言的贡献非常之大. 是的, 因为 C++ 很大程度就是用来解决 C 语言中的各种问题和各种不方便的. 比如:")]),t._v(" "),a("ul",[a("li",[t._v("用引用来解决指针的问题.")]),t._v(" "),a("li",[t._v("用 namespace 来解决名字空间冲突的问题.")]),t._v(" "),a("li",[t._v("通过 try-catch 来解决检查返回值编程的问题.")]),t._v(" "),a("li",[t._v("用 class 来解决对象的创建, 复制, 销毁的问题, 从而可以达到在结构体嵌套时可以深度复制的内存安全问题.")]),t._v(" "),a("li",[t._v("通过重载操作符来达到操作上的泛型.")]),t._v(" "),a("li",[t._v("通过模板 template 和虚函数的多态以及运行时识别来达到更高层次的泛型和多态.")]),t._v(" "),a("li",[t._v("用 RAII, 智能指针的方式, 解决了 C 语言中因为需要释放资源而出现的那些非常 ugly 也很容易出错的代码的问题.")]),t._v(" "),a("li",[t._v("用 STL 解决了 C 语言中算法和数据结构的 N 多种坑.")])]),t._v(" "),a("h5",{attrs:{id:"_2-c-泛型编程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-c-泛型编程"}},[t._v("#")]),t._v(" 2.C++泛型编程")]),t._v(" "),a("p",[t._v("C++ 是支持编程范式最多的一门语言, 它虽然解决了很多 C 语言的问题, 但个人觉得它最大的意义是解决了 C 语言泛型编程的问题. 因为一些 C++ 的标准规格说明书里, 有一半以上都在说明 STL 的标准规格应该是什么样的, 这说明泛型编程是 C++ 重点中的重点.")]),t._v(" "),a("p",[t._v("理想情况下, 算法应是和数据结构以及类型无关的, 各种特殊的数据类型理应做好自己分内的工作. 算法只关心一个标准的实现. **而对于泛型的抽象, 我们需要回答的问题是, 如果数据类型符合通用算法, 那么对数据类型的最小需求又是什么呢? **")]),t._v(" "),a("p",[t._v("来看看 C++ 是如何有效解决程序泛型问题的, 我认为有三点.")]),t._v(" "),a("p",[a("strong",[t._v("第一, 它通过类的方式来解决")]),t._v(".")]),t._v(" "),a("ul",[a("li",[t._v("类里面会有构造函数, 析构函数表示这个类的分配和释放.")]),t._v(" "),a("li",[t._v("还有它的拷贝构造函数, 表示了对内存的复制.")]),t._v(" "),a("li",[t._v("还有重载操作符, 像我们要去比较大于, 等于, 不等于.")])]),t._v(" "),a("p",[t._v("这样可以让一个用户自定义的数据类型和内建的那些数据类型就很一致了.")]),t._v(" "),a("p",[a("strong",[t._v("第二, 通过模板达到类型和算法的妥协")]),t._v(".")]),t._v(" "),a("ul",[a("li",[t._v("模板有点像 DSL, 模板的特化会根据使用者的类型在编译时期生成那个模板的代码.")]),t._v(" "),a("li",[t._v("模板可以通过一个虚拟类型来做类型绑定, 这样不会导致类型转换时的问题.")])]),t._v(" "),a("p",[t._v("模板很好地取代了 C 时代宏定义带来的问题.")]),t._v(" "),a("p",[a("strong",[t._v("第三, 通过虚函数和运行时类型识别")]),t._v(".")]),t._v(" "),a("ul",[a("li",[t._v('虚函数带来的多态在语义上可以支持"同一类"的类型泛型.')]),t._v(" "),a("li",[t._v("运行时类型识别技术可以做到在泛型时对具体类型的特殊处理.")])]),t._v(" "),a("p",[t._v("这样一来, 就可以写出基于抽象接口的泛型.")]),t._v(" "),a("p",[t._v("拥有了这些 C++ 引入的技术, 就可以做到 C 语言很难做到的泛型编程了.")]),t._v(" "),a("p",[t._v("正如前面说过的, 一个良好的泛型编程需要解决如下几个泛型编程的问题:")]),t._v(" "),a("ol",[a("li",[t._v("算法的泛型;")]),t._v(" "),a("li",[t._v("类型的泛型;")]),t._v(" "),a("li",[t._v("数据结构(数据容器)的泛型.")])]),t._v(" "),a("h6",{attrs:{id:"_1-c-泛型编程的示例-search函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-c-泛型编程的示例-search函数"}},[t._v("#")]),t._v(" (1)C++泛型编程的示例-Search函数")]),t._v(" "),a("p",[t._v("就像前面的 "),a("code",[t._v("search()")]),t._v("​ 函数, 里面的 "),a("code",[t._v("for(int i = 0; i < len; i++)")]),t._v("​ 这样的遍历方式, 只能适用于"),a("strong",[t._v("顺序型的数据结构")]),t._v("的方式迭代, 如: array, set, queue, list 和 link 等. 并不适用于"),a("strong",[t._v("非顺序型的数据结构")]),t._v(".")]),t._v(" "),a("p",[t._v("如哈希表 hash table, 二叉树 binary tree, 图 graph 等这样数据不是按顺序存放的数据结构(数据容器). 所以, 如果找不到一种"),a("strong",[t._v("泛型的数据结构的操作方式(如遍历, 查找, 增加, 删除, 修改...)")]),t._v(" , 那么任何的算法或是程序都不可能做到真正意义上的泛型.")]),t._v(" "),a("p",[t._v("除了 "),a("code",[t._v("search()")]),t._v('​函数的 "遍历操作" 之外, 还有 search 函数的返回值, 是一个整型的索引下标. 这个整型的下标对于 "顺序型的数据结构" 是没有问题的, 但是对于 "非顺序的数据结构", 在语义上都存在问题.')]),t._v(" "),a("p",[t._v('比如, 如果要在一个 hash table 中查找一个 key, 返回什么呢? 一定不是返回 "索引下标", 因为在 hash table 这样的数据结构中, 数据的存放位置不是顺序的, 而且还会因为容量不够的问题被重新 hash 后改变, 所以返回数组下标是没有意义的.')]),t._v(" "),a("p",[t._v("对此要把这个事做得泛型和通用一些. 如果找到, 返回找到的这个元素的一个指针(地址)会更靠谱一些.")]),t._v(" "),a("p",[t._v("所以, 为了解决泛型的问题, 需要动用以下几个 C++ 的技术.")]),t._v(" "),a("ol",[a("li",[t._v("使用模板技术来抽象类型, 这样可以写出类型无关的数据结构(数据容器).")]),t._v(" "),a("li",[t._v("使用一个迭代器来遍历或是操作数据结构内的元素.")])]),t._v(" "),a("p",[t._v("来看一下 C++ 版的 "),a("code",[t._v("search()")]),t._v("​ 函数是什么样的.")]),t._v(" "),a("p",[t._v("先重温一下 C 语言版的代码:")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("search")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" elem_size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("cmpFn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cmpFn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" elem_size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("p",[t._v("再来看一下 C++ 泛型版的代码:")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("template"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("typename T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" typename Iter"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nIter "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("search")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Iter pStart"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Iter pEnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" T target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Iter p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pStart"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" pEnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" target "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n\t\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("p",[t._v("在 C++ 的泛型版本中可以看到:")]),t._v(" "),a("ul",[a("li",[t._v("使用 "),a("code",[t._v("typename T")]),t._v("​ 抽象了数据结构中存储数据的类型.")]),t._v(" "),a("li",[t._v("使用 "),a("code",[t._v("typename Iter")]),t._v('​, 这是不同的数据结构需要自己实现的"迭代器", 这样也就抽象掉了不同类型的数据结构.')]),t._v(" "),a("li",[t._v("然后对数据容器的遍历使用了 "),a("code",[t._v("Iter")]),t._v("​ 中的 "),a("code",[t._v("++")]),t._v("​ 方法, 这是数据容器需要重载的操作符, 这样通过操作符重载也就泛型掉了遍历.")]),t._v(" "),a("li",[t._v("在函数的入参上使用了 "),a("code",[t._v("pStart")]),t._v("​ 和 "),a("code",[t._v("pEnd")]),t._v("​ 来表示遍历的起止.")]),t._v(" "),a("li",[t._v("使用 "),a("code",[t._v("*Iter")]),t._v('​来取得这个"指针"的内容. 这也是通过重载 '),a("code",[t._v("*")]),t._v("​ 取值操作符来达到的泛型.")])]),t._v(" "),a("p",[t._v("当然, 你可能会问, 为什么不用标准接口 "),a("code",[t._v("Iter.Next()")]),t._v("​ 取代 "),a("code",[t._v("++")]),t._v("​,  用 "),a("code",[t._v("Iter.GetValue()")]),t._v("​ 来取代 "),a("code",[t._v("*")]),t._v("​, 而是通过重载操作符? 其实这样做是为了兼容原有 C 语言的编程习惯.")]),t._v(" "),a("p",[t._v("说明一下, 所谓的 "),a("code",[t._v("Iter")]),t._v("​, 在实际代码中, 就是像 "),a("code",[t._v("vector<int>::iterator")]),t._v("​ 或 "),a("code",[t._v("map<int, string>::iterator")]),t._v("​ 这样的东西. 这是由相应的数据容器来实现和提供的.")]),t._v(" "),a("p",[t._v("注: 下面是 C++ STL 中的 "),a("code",[t._v("find()")]),t._v("​ 函数的代码.")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("template"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("class InputIterator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" class T"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  InputIterator "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("InputIterator first"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" InputIterator last"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" T"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("first"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v("last"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("first"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" first"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("first"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" last"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("h6",{attrs:{id:"_2-c-泛型编程示例-sum函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-c-泛型编程示例-sum函数"}},[t._v("#")]),t._v(" (2)C++泛型编程示例-Sum函数")]),t._v(" "),a("p",[t._v("也许你觉得到这一步, 我们的泛型设计就完成了. 其实还远远不够. "),a("code",[t._v("search")]),t._v("​ 函数只是一个开始, 还有很多别的算法会让问题变得更为复杂.")]),t._v(" "),a("p",[t._v("再来看一个 "),a("code",[t._v("sum()")]),t._v("​ 函数.")]),t._v(" "),a("p",[t._v("先看 C 语言版:")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tresult "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("再看一下 C++ 泛型的版本:")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("template"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("typename T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" typename Iter"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nT "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Iter pStart"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Iter pEnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tT result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Iter p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("pStart"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v("pEnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tresult "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[t._v("你看到了什么样的问题? 这个代码中最大的问题就是 "),a("code",[t._v("T result = 0;")]),t._v(" 这条语句:")]),t._v(" "),a("ul",[a("li",[t._v("那个 "),a("code",[t._v("0")]),t._v("​ 假设了类型是 "),a("code",[t._v("int")]),t._v("​;")]),t._v(" "),a("li",[t._v("那个 "),a("code",[t._v("T")]),t._v("​ 假设了 Iter 中出来的类型是"),a("code",[t._v("T")]),t._v("​.")])]),t._v(" "),a("p",[t._v("这样的假设是有问题的, 如果类型不一样, 就会导致转型的问题, 这会带来非常 buggy 的代码. 那么怎么解决呢?")]),t._v(" "),a("h6",{attrs:{id:"_3-c-泛型编程的重要技术-迭代器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-c-泛型编程的重要技术-迭代器"}},[t._v("#")]),t._v(" (3)C++泛型编程的重要技术-迭代器")]),t._v(" "),a("p",[t._v("我们知道 "),a("code",[t._v("Iter")]),t._v("​ 在实际调用者那会是一个具体的像 "),a("code",[t._v("vector<int>::iterator")]),t._v("​ 这样的东西. 在这个声明中, "),a("code",[t._v("int")]),t._v("​ 已经被传入 "),a("code",[t._v("Iter")]),t._v("​ 中了. 所以定义 "),a("code",[t._v("result")]),t._v("​ 的 "),a("code",[t._v("T")]),t._v("​ 应该可以从 "),a("code",[t._v("Iter")]),t._v("​ 中来. 这样就可以保证类型是一样的, 而且不会有被转型的问题.")]),t._v(" "),a("p",[t._v('所以, 需要精心地实现一个"迭代器". 下面是一个"精简版"的迭代器(我没有把 C++ STL 代码里的迭代器列出来, 是因为代码太多太复杂, 这里只是为了说明问题).')]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("template "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("class T"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nclass container "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\npublic"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\tclass iterator "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tpublic"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" iterator self_type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" T   value_type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" T"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("  pointer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" T"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" \treference"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n\t\treference operator"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\tpointer operator"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\tbool operator"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" self_type"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" rhs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\t\tbool operator"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" self_type"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" rhs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\t\tself_type operator"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" self_type i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("this"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" ptr_"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\tself_type operator"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" junk"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" ptr_"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("this"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\tprivate"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t\tpointer _ptr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n\titerator "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("begin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\titerator "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br")])]),a("p",[t._v("上面的代码是我写的一个迭代器(这个迭代器在语义上是没有问题的), 我没有把所有的代码列出来, 而把它的一些基本思路列了出来. 这里说明一下几个关键点.")]),t._v(" "),a("ul",[a("li",[t._v("首先, 一个迭代器需要和一个容器在一起, 因为里面是对这个容器的具体的代码实现.")]),t._v(" "),a("li",[t._v("它需要重载一些操作符, 比如: 取值操作 "),a("code",[t._v("*")]),t._v("​, 成员操作 "),a("code",[t._v("->")]),t._v("​, 比较操作 "),a("code",[t._v("==")]),t._v("​ 和 "),a("code",[t._v("!=")]),t._v("​, 还有遍历操作 "),a("code",[t._v("++")]),t._v("​, 等等.")]),t._v(" "),a("li",[t._v("然后, 还要 "),a("code",[t._v("typedef")]),t._v("​ 一些类型, 比如 "),a("code",[t._v("value_type")]),t._v("​, 告诉我们容器内的数据的实际类型是什么样子.")]),t._v(" "),a("li",[t._v("还有一些, 如 "),a("code",[t._v("begin()")]),t._v("​ 和 "),a("code",[t._v("end()")]),t._v("​ 的基本操作.")]),t._v(" "),a("li",[t._v("还可以看到其中有一个 "),a("code",[t._v("pointer _ptr")]),t._v("​ 的内部指针来指向当前的数据(注意 "),a("code",[t._v("pointer")]),t._v("​ 就是 "),a("code",[t._v("T*")]),t._v("​).")])]),t._v(" "),a("p",[t._v("好了, 有了这个迭代器后, 还要解决 "),a("code",[t._v("T result = 0")]),t._v("​ 后面的这个 "),a("code",[t._v("0")]),t._v("​ 的问题. 这个事, 算法没有办法搞定, 最好由用户传入. 于是出现了下面最终泛型的 "),a("code",[t._v("sum()")]),t._v("​ 版函数.")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("template "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("class Iter"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\ntypename Iter"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("value_type\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Iter start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Iter end"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" T init"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\ttypename Iter"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("value_type result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" init"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("start "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" end"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tresult "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\tstart"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("p",[t._v("可以看到 "),a("code",[t._v("typename Iter::value_type result = init")]),t._v("​ 这条语句是关键. 我们解决了所有的问题.")]),t._v(" "),a("p",[t._v("我们如下使用:")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("container"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncontainer"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("iterator it "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("begin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("begin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("这就是整个 STL 的泛型方法, 其中包括:")]),t._v(" "),a("ul",[a("li",[t._v("泛型的数据容器;")]),t._v(" "),a("li",[t._v("泛型数据容器的迭代器;")]),t._v(" "),a("li",[t._v("然后泛型的算法就很容易写了.")])]),t._v(" "),a("h5",{attrs:{id:"_3-需要更多的抽象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-需要更多的抽象"}},[t._v("#")]),t._v(" 3.需要更多的抽象")]),t._v(" "),a("h6",{attrs:{id:"_1-更为复杂的需求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-更为复杂的需求"}},[t._v("#")]),t._v(" (1)更为复杂的需求")]),t._v(" "),a("p",[t._v("还能不能做到更为泛型呢? 比如: 如果有这样的一个数据结构 Employee, 里面有 vacation 就是休假多少天, 以及工资.")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Employee")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tstring name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tstring id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" vacation"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" salary"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("现在想计算员工的总薪水, 或是总休假天数.")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("vector"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Employee"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" staff"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//total salary or total vacation days?")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("staff"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("begin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" staff"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("我们的 "),a("code",[t._v("sum")]),t._v("​ 完全不知道怎么搞了, 因为要累加的是 "),a("code",[t._v("Employee")]),t._v("​ 类中的不同字段, 即便 Employee 中重载了 "),a("code",[t._v("+")]),t._v("​ 操作, 也不知道要加哪个字段.")]),t._v(" "),a("p",[t._v('另外可能还会有: 求平均值 average, 求最小值 min, 求最大值 max, 求中位数 mean 等等. 你会发现, 算法写出来基本上都是一样的, 只是其中的 "累加" 操作变成了另外一个操作. 就这个例子而言, 我想计算员工薪水里面最高的, 和休假最少的, 或者我想计算全部员工的总共休假多少天. 那么面对这么多的需求, 是否可以泛型一些呢? 怎样解决这些问题呢?')]),t._v(" "),a("h6",{attrs:{id:"_2-更高维度的抽象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-更高维度的抽象"}},[t._v("#")]),t._v(" (2)更高维度的抽象")]),t._v(" "),a("p",[t._v("要解决这个问题, 我希望我的"),a("strong",[t._v("这个算法只管遍历, 具体要干什么, 那是业务逻辑, 由外面的调用方来定义")]),t._v("我就好了, 和我无关. 这样一来, 代码的重用度就更高了.")]),t._v(" "),a("p",[t._v("下面是一个抽象度更高的版本, 这个版本再叫 "),a("code",[t._v("sum")]),t._v("​ 就不太合适了. 这个版本应该是 "),a("code",[t._v("reduce")]),t._v("​ ---用于把一个数组 reduce 成一个值.")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("template"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("class Iter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" class T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" class Op"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nT "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reduce")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Iter start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Iter end"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" T init"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Op op"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tT result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" init"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" start "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" end "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tresult "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("op")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("start "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\tstart"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("p",[t._v("上面的代码中, 需要传一个函数进来. 在 STL 中, 它是个函数对象, 还是这套算法, 但是 result 不是像前面那样去加, 是把整个迭代器值给你一个 operation, 然后由它来做. 我把这个方法又拿出去了, 所以就会变成这个样子.")]),t._v(" "),a("p",[t._v("在 C++ STL 中, 与这个 reduce 函数对应的函数名叫 "),a("code",[t._v("accumulate()")]),t._v("​, 其实际代码有两个版本.")]),t._v(" "),a("p",[t._v("第一个版本就是上面的版本, 只不过是用 "),a("code",[t._v("for")]),t._v("​ 语句而不是 "),a("code",[t._v("while")]),t._v("​.")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("template"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("class InputIt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" class T"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nT "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("accumulate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("InputIt first"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" InputIt last"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" T init"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" first "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" last"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("first"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        init "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" init "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("first"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" init"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[t._v('第二个版本, 更为抽象, 因为需要传入一个 "二元操作函数"--'),a("code",[t._v("BinaryOperation op")]),t._v("​ 来做 accumulate. accumulate 的语义比 sum 更抽象了.")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("template"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("class InputIt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" class T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" class BinaryOperation"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nT "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("accumulate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("InputIt first"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" InputIt last"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" T init"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n             BinaryOperation op"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" first "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" last"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("first"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        init "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("op")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("init"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("first"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" init"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("p",[t._v("来看看在使用中是什么样子的:")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" sum_salaries "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" \n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reduce")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" staff"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("begin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" staff"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t  \n\t\t    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("salary"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" max_salary "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reduce")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" staff"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("begin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" staff"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t  \n\t\t    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("salary"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("salary"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("p",[t._v("注意: 这里用了 C++ 的 lambda 表达式. 可以很清楚地看到, reduce 这个函数就更通用了, 具体要干什么样的事情呢? 放在匿名函数里面, 它会定义我, 我只做一个 reduce. 更抽象地来说, 我就把一个数组, 一个集合, 变成一个值. 怎么变成一个值呢? 由这个函数来决定.")]),t._v(" "),a("blockquote",[a("p",[t._v("Reduce函数")])]),t._v(" "),a("p",[t._v("来看看如何使用 reduce 和其它函数完成一个更为复杂的功能.")]),t._v(" "),a("p",[t._v("下面这个示例中, 先定义了一个函数对象 "),a("code",[t._v("counter")]),t._v("​. 这个函数对象需要一个 "),a("code",[t._v("Cond")]),t._v("​ 的函数对象, 它是个条件判断函数, 如果满足条件, 则加 1, 否则加 0.")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("template"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("class T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" class Cond"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("counter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("operator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" T t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Cond")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("然后用上面的 "),a("code",[t._v("counter")]),t._v("​ 函数对象和 "),a("code",[t._v("reduce")]),t._v("​ 函数共同来打造一个 "),a("code",[t._v("counter_if")]),t._v("​ 算法(当条件满足的时候我就记个数, 也就是统计满足某个条件的个数), 可以看到, 就是一行代码的事.")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("template"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("class Iter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" class Cond"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("count_if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Iter begin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Iter end"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Cond c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reduce")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("begin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n\t\t\t\t  counter"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Iter"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("value_type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Cond"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("至于是什么样的条件, 这个属于业务逻辑, 不是我的流程控制, 所以这应该交给使用方.")]),t._v(" "),a("p",[t._v("于是, 当需要统计薪资超过 1 万元的员工的数量时, 一行代码就完成了.")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" cnt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("count_if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("staff"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("begin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" staff"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("salary "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("Reduce 时可以只对结构体中的某些值做 Reduce, 比如说只对 "),a("code",[t._v("salary>10000")]),t._v("​ 的人做, 只选出这个里面的值, 它用 Reduce 就可以达到这步, 只要传不同的方式给它, 就可以又造出一个新的东西出来.")]),t._v(" "),a("p",[t._v("说着说着, 就到了函数式编程. 函数式编程里面, 可以用很多的像 reduce 这样的函数来完成更多的像 STL 里面的 "),a("code",[t._v("count_if()")]),t._v("​ 这样有具体意义的函数. 关于函数式编程, 会在后面继续具体聊.")]),t._v(" "),a("h5",{attrs:{id:"_4-小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-小结"}},[t._v("#")]),t._v(" 4.小结")]),t._v(" "),a("p",[t._v("在这篇文章中聊到 C++ 语言是如何通过泛型来解决 C 语言遇到的问题, 其实这里面主要就是泛型编程和函数式编程的基本方法相关的细节, 虽然解决编程语言中类型带来的问题可能有多种方式, 不一定就是 C++ 这种方式.")]),t._v(" "),a("p",[t._v("而之所以从 C/C++ 开始, 目的只是因为 C/C++ 都是比较偏底层的编程语言. 从底层的原理上, 可以更透彻地了解, 从 C 到 C++ 的演进这一过程中带来的编程方式的变化. 这可以让你看到, 在静态类型语言方面解决泛型编程的一些技术和方法, 从而感受到其中的奥妙和原理.")]),t._v(" "),a("p",[a("strong",[t._v("因为形式是多样的, 但是原理是相通的. 所以这个过程会非常有助于你更深刻地了解后面会谈到的更多的编程范式")]),t._v(".")]),t._v(" "),a("h4",{attrs:{id:"编程范式游记-3-类型系统和泛型的本质"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编程范式游记-3-类型系统和泛型的本质"}},[t._v("#")]),t._v(" 编程范式游记(3)-类型系统和泛型的本质")]),t._v(" "),a("p",[t._v("前面讨论了从 C 到 C++ 的泛型编程方法, 并且初探了更为抽象的函数式编程. 正如在上一篇文章中所说的, 泛型编程的方式并不只有 C++ 这一种类型, 只是通过这个过程了解一下, 底层静态类型语言的泛型编程原理. 这样能够方便继续后面的历程.")]),t._v(" "),a("p",[t._v("是的, 除了 C++ 那样的泛型, 如果你了解其它编程语言一定会发现, 在动态类型语言或是某些有语法糖支持的语言中, 那个 "),a("code",[t._v("swap()")]),t._v("​ 或 "),a("code",[t._v("search()")]),t._v("​ 函数的泛型其实可以很简单地就实现了.")]),t._v(" "),a("p",[t._v("比如甚至可以把 "),a("code",[t._v("swap()")]),t._v("​ 函数简单地写成下面这个样子(包括 Go 语言也有这样的语法):")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("在上一篇文章后面的 Reduce 函数中, 可以看到, 在编程世界中需要处理好两件事.")]),t._v(" "),a("ul",[a("li",[t._v("第一件事是编程语言中的"),a("strong",[t._v("类型问题")]),t._v(".")]),t._v(" "),a("li",[t._v("第二件事是对真实世界中"),a("strong",[t._v("业务代码的抽象, 重用和拼装")]),t._v(".")])]),t._v(" "),a("p",[t._v("所以在这篇文章中, 还是继续深入地讨论上面这两个问题, 着重讨论一下编程语言中的"),a("strong",[t._v("类型系统和泛型编程的本质")]),t._v(".")]),t._v(" "),a("h5",{attrs:{id:"_1-类型系统"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-类型系统"}},[t._v("#")]),t._v(" 1.类型系统")]),t._v(" "),a("p",[t._v("在计算机科学中, 类型系统用于定义如何将编程语言中的数值和表达式归类为许多不同的类型, 以及如何操作这些类型, 还有这些类型如何互相作用. "),a("strong",[t._v("类型可以确认一个值或者一组值具有特定的意义和目的")]),t._v(".")]),t._v(" "),a("p",[t._v("一般来说, 编程语言会有两种类型, 一种是内建类型, 如 int, float 和 char 等, 一种是抽象类型, 如 struct, class 和 function 等. 抽象类型在程序运行中, 可能不表示为值. 类型系统在各种语言之间有非常大的不同, 也许, 最主要的差异存在于编译时期的语法, 以及运行时期的操作实现方式.")]),t._v(" "),a("p",[t._v('编译器可能使用值的静态类型以最优化所需的存储区, 并选取对数值运算时的最佳算法. 例如在许多 C 编译器中, "浮点数" 数据类型是以 32 比特表示, 与 IEEE 754 规格一致的单精度浮点数. 因此在数值运算上, C 应用了浮点数规范(浮点数加法, 乘法等).')]),t._v(" "),a("p",[t._v("类型的约束程度以及评估方法, 影响了语言的类型. 更进一步, 编程语言可能就类型多态性部分, 对每一个类型都对应了一个针对于这个类型的算法运算. 类型理论研究类型系统, 尽管实际的编程语言类型系统, 起源于计算机架构的实际问题, 编译器实现, 以及语言设计.")]),t._v(" "),a("p",[t._v("程序语言的类型系统主要提供如下的功能.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("程序语言的安全性")]),t._v(". 使用类型可以让编译器侦测一些代码的错误. 例如: 可以识别出一个错误无效的表达式. 如: "),a("code",[t._v('"Hello, World" + 3')]),t._v("​ 这样的不同数据类型间操作的问题. 强类型语言提供更多的安全性, 但是并不能保证绝对的安全.")]),t._v(" "),a("li",[a("strong",[t._v("利于编译器的优化")]),t._v(". 静态类型语言的类型声明, 可以让编译器明确地知道程序员的意图. 因此编译器就可以利用这一信息做很多代码优化工作. 例如: 如果指定一个类型是 "),a("code",[t._v("int")]),t._v("​ , 那么编译就知道, 这个类型会以 4 个字节的倍数进行对齐, 编译器就可以非常有效地利用更有效率的机器指令.")]),t._v(" "),a("li",[a("strong",[t._v("代码的可读性")]),t._v(". 有类型的编程语言, 可以让代码更易读和更易维护. 代码的语义也更清楚, 代码模块的接口(如函数)也更丰富和清楚.")]),t._v(" "),a("li",[a("strong",[t._v("抽象化")]),t._v(". 类型允许程序设计者对程序以较高层次的方式思考, 而不是烦人的低层次实现. 例如, 使用整型或是浮点型来取代底层的字节实现, 可以将字符串设计成一个值, 而不是底层字节的数组. 从高层上来说, 类型可以用来定义不同模块间的交互协议, 比如函数的入参类型和返回类型, 从而可以让接口更有语义, 而且不同的模块数据交换更为直观和易懂.")])]),t._v(" "),a("p",[t._v("但是正如前面说的, "),a("strong",[t._v("类型带来的问题就是作用于不同类型的代码, 虽然长得非常相似, 但是由于类型的问题需要根据不同版本写出不同的算法, 如果要做到泛型, 就需要涉及比较底层的玩法")]),t._v(".")]),t._v(" "),a("p",[t._v("对此, 这个世界出现了两类语言, 一类是静态类型语言, 如 C, C++, Java, 一种是动态类型语言, 如 Python, PHP, JavaScript 等.")]),t._v(" "),a("p",[t._v("来看一下一段动态类型语言的代码:")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("在这个示例中, 可以看到变量 "),a("code",[t._v("x")]),t._v('​ 一开始好像是整型, 然后又成了字符串型. 如果在静态类型的语言中写出这样的代码, 那么就会在编译期出错. 而在动态类型的语言中, 会以类型标记维持程序所有数值的 "标记", 并在运算任何数值之前检查标记. 所以一个变量的类型是'),a("strong",[t._v("由运行时的解释器来动态标记")]),t._v("的, 这样就可以动态地和底层的计算机指令或内存布局对应起来.")]),t._v(" "),a("p",[t._v("再来看一个示例, 对于 JavaScript 这样的动态语言来说可以定义出下面这样的数据结构(一个数组的元素可以是各式各样的类型), 这在静态类型的语言中是很难做到的.")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("ar a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" new "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2017")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hao Chen"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("blockquote",[a("p",[t._v("注: 其实这并不是一个数组, 而是一个 "),a("code",[t._v("key:value")]),t._v("​. 因为动态语言的类型是动态的, 所以 key 和 value 的类型都可以随意. 比如对于 "),a("code",[t._v("a")]),t._v("​ 这个数据结构, 还可以写成: "),a("code",[t._v('a["key"] = "value"')]),t._v("​ 这样的方式.")])]),t._v(" "),a("p",[t._v("在弱类型或是动态类型的语言中, 下面代码的执行会有不确定的结果.")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ny "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"37"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nz "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v('有的像 Visual Basic 语言给出的结果是 42: 系统将字符串 "37" 转换成数字 37, 以匹配运算上的直觉. 而有的像 JavaScript 语言给出的结果是 "537": 系统将数字 5 转换成字符串 "5" 并把两者串接起来. 像 Python 这样的语言则会产生一个运行时错误.')]),t._v(" "),a("p",[t._v("但是, "),a("strong",[t._v("需要清楚地知道, 无论哪种程序语言, 都避免不了一个特定的类型系统")]),t._v(". 哪怕是可随意改变变量类型的动态类型的语言, 在读代码的过程中也需要脑补某个变量在运行时的类型.")]),t._v(" "),a("p",[t._v("所以, 每个语言都需要一个"),a("strong",[t._v("类型检查系统")]),t._v(".")]),t._v(" "),a("ul",[a("li",[t._v("静态类型检查是在编译器进行语义分析时进行的. 如果一个语言强制实行类型规则(即通常只允许以不丢失信息为前提的自动类型转换), 那么称此处理为"),a("strong",[t._v("强类型")]),t._v(", 反之称为弱类型.")]),t._v(" "),a("li",[a("strong",[t._v("动态类型检查")]),t._v("系统更多的是在运行时期做动态类型标记和相关检查. 所以动态类型的语言必然要给出一堆诸如: "),a("code",[t._v("is_array()")]),t._v("​, "),a("code",[t._v("is_int()")]),t._v("​, "),a("code",[t._v("is_string()")]),t._v("​ 或是 "),a("code",[t._v("typeof()")]),t._v("​ 这样的运行时类型检查函数.")])]),t._v(" "),a("p",[t._v('总之, "类型" 有时候是一个有用的事, 有时候又是一件很讨厌的事情. 因为类型是对底层内存布局的一个抽象, 会让代码要关注于这些非业务逻辑上的东西. 而且代码需要在不同类型的数据间做处理. 但是如果程序语言类型检查得过于严格, 那么写出来的代码就不能那么随意.')]),t._v(" "),a("p",[t._v('所以, 对于静态类型的语言也开了些 "小后门": 比如, 类型转换, 还有 C++, Java 运行时期的类型测试.')]),t._v(" "),a("p",[t._v("这些小后门也会带来相当讨厌的问题, 比如下面这个 C 语言的示例.")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"37"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" z "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("在上面这个例子中, 结果可能和你想的完全不一样. 由于 C 语言的底层特性, 这个例子中的 "),a("code",[t._v("z")]),t._v(" 会指向一个超过 "),a("code",[t._v("y")]),t._v(" 地址 5 个字节的内存地址, 相当于指向 y 字符串的指针之后的两个空字符处.")]),t._v(" "),a("p",[t._v("静态类型语言的支持者和动态类型自由形式的支持者, 经常发生争执. 前者主张在编译的时候就可以较早发现错误, 而且还可增进运行时期的性能. 后者主张使用更加动态的类型系统, 分析代码更为简单, 减少出错机会, 才能更加轻松快速地编写程序. 与此相关的是, 后者还主张, 考虑到在类型推断的编程语言中, 通常不需要手动宣告类型, 这部分的额外开销也就自动降低了.")]),t._v(" "),a("p",[t._v("在本系列内容的前两篇文章中, 我们用 C/C++ 语言来做泛型编程的示例, 似乎动态类型语言能够比较好地规避类型导致需要出现多个版本代码的问题. 这样可以让我们更好地关注于业务.")]),t._v(" "),a("p",[t._v("但是需要清楚地明白, "),a("strong",[t._v("任何语言都有类型系统")]),t._v(", 只是"),a("strong",[t._v("动态类型语言在运行时做类型检查")]),t._v(". 动态语言的代码复杂度比较低, 并可以更容易地关注业务, 在某些场景下是对的, 但有些情况下却并不见得.")]),t._v(" "),a("p",[t._v("比如: 在 JavaScript 中需要做一个变量转型的函数, 可能会是下面这个样子:")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ToNumber")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"number"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"undefined"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"boolean"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"string"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"object"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"function"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("p",[t._v("我相信, 你在动态类型语言的代码中可以看到大量类似 "),a("code",[t._v("typeof")]),t._v("​ 这样的类型检查代码. 是的, 这是动态类型带来的另一个问题, 就是"),a("strong",[t._v("运行时识别")]),t._v("(这个是比较耗性能的).")]),t._v(" "),a("p",[t._v('如果你用过一段时间的动态类型语言, 一旦代码量比较大了, 就会发现, 代码中出现 "类型问题" 而引发整个程序出错的情况实在是太多太多了. 而且这样的出错会让整个程序崩溃掉, 太恐怖了. 这个时候, 就很希望提前发现这些类型的问题.')]),t._v(" "),a("p",[a("strong",[t._v("静态语言的支持者会说编译器能帮找到这些问题, 而动态语言的支持者则认为, 静态语言的编译器也无法找到所有的问题, 想真正提前找到问题只能通过测试来解决. 其实他们都对.")])]),t._v(" "),a("h5",{attrs:{id:"_2-泛型的本质"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-泛型的本质"}},[t._v("#")]),t._v(" 2.泛型的本质")]),t._v(" "),a("p",[t._v("要了解泛型的本质, 就需要了解"),a("strong",[t._v("类型的本质")]),t._v(".")]),t._v(" "),a("ul",[a("li",[a("mark",[a("strong",[t._v("类型是对内存的一种抽象. 不同的类型, 会有不同的内存布局和内存分配的策略.")])])]),t._v(" "),a("li",[a("strong",[t._v("不同的类型, 有不同的操作")]),t._v(". 所以对于特定的类型, 也有特定的一组操作.")])]),t._v(" "),a("p",[t._v("所以, 要做到泛型, 需要做下面的事情.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("标准化掉类型的内存分配, 释放和访问.")])]),t._v(" "),a("li",[a("strong",[t._v("标准化掉类型的操作")]),t._v(". 比如: 比较操作, I/O 操作, 复制操作...")]),t._v(" "),a("li",[a("strong",[t._v("标准化掉数据容器的操作")]),t._v(". 比如: 查找算法, 过滤算法, 聚合算法...")]),t._v(" "),a("li",[a("strong",[t._v("标准化掉类型上特有的操作")]),t._v(". 需要有标准化的接口来回调不同类型的具体操作...")])]),t._v(" "),a("p",[t._v("所以, C++ 动用了非常繁多和复杂的技术来达到泛型编程的目标.")]),t._v(" "),a("ul",[a("li",[t._v("通过类中的构造, 析构, 拷贝构造, 重载赋值操作符, 标准化(隐藏)了类型的内存分配, 释放和复制的操作.")]),t._v(" "),a("li",[t._v("通过重载操作符, 可以标准化类型的比较等操作.")]),t._v(" "),a("li",[t._v("通过 iostream, 标准化了类型的输入输出控制.")]),t._v(" "),a("li",[t._v("通过模板技术(包括模板的特化), 来为不同的类型生成类型专属的代码.")]),t._v(" "),a("li",[t._v("通过迭代器来标准化数据容器的遍历操作.")]),t._v(" "),a("li",[t._v("通过面向对象的接口依赖(虚函数技术), 来标准化了特定类型在特定算法上的操作.")]),t._v(" "),a("li",[t._v("通过函数式(函数对象), 来标准化对于不同类型的特定操作.")])]),t._v(" "),a("p",[t._v("通过学习 C++, 可以看到一个比较完整的泛型编程里所涉及的编程范式, 这些编程泛式在其它语言中都会或多或少地体现着. 比如, JDK 5 引入的泛型类型, 就源自 C++ 的模板.")]),t._v(" "),a("p",[t._v("泛型编程于 1985 年在论文 "),a("a",{attrs:{href:"http://stepanovpapers.com/genprog.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Generic Programming"),a("OutboundLink")],1),t._v(" 中被这样定义:")]),t._v(" "),a("blockquote",[a("p",[t._v("Generic programming centers around the idea of abstracting from concrete, efficient algorithms to obtain generic algorithms that can be combined with different data representations to produce a wide variety of useful software.")]),t._v(" "),a("p",[t._v("— Musser, David R.; Stepanov, Alexander A., Generic Programming")])]),t._v(" "),a("p",[t._v("我理解其本质就是---"),a("mark",[a("strong",[t._v("屏蔽掉数据和操作数据的细节, 让算法更为通用, 让编程者更多地关注算法的结构, 而不是在算法中处理不同的数据类型")])]),t._v("​ **. **")]),t._v(" "),a("h5",{attrs:{id:"_3-小结-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-小结-2"}},[t._v("#")]),t._v(" 3.小结")]),t._v(" "),a("p",[t._v("在编程语言中, 类型系统的出现主要是对容许混乱的操作加上了严格的限制, 以避免代码以无效的数据使用方式编译或运行. 例如, 整数运算不可用于字符串; 指针的操作不可用于整数上, 等等. 但是, 类型的产生和限制, 虽然对底层代码来说是安全的, 但是对于更高层次的抽象产生了些负面因素. 比如在 C++ 语言里, 为了同时满足静态类型和抽象, 就导致了模板技术的出现, 带来了语言的复杂性.")]),t._v(" "),a("p",[t._v("需要清楚地明白, 编程语言本质上帮助程序员屏蔽底层机器代码的实现, 而让我们可以更为关注于业务逻辑代码. 但是因为编程语言作为机器代码和业务逻辑的粘合层, 是在让程序员可以控制更多底层的灵活性, 还是屏蔽底层细节, 让程序员可以更多地关注于业务逻辑, 这是很难两全需要 trade-off 的事.")]),t._v(" "),a("p",[t._v("所以不同的语言在设计上都会做相应的取舍. 比如: C 语言偏向于让程序员可以控制更多的底层细节, 而 Java 和 Python 则让程序员更多地关注业务功能的实现. 而 C++ 则是两者都想要, 导致语言在设计上非常复杂.")]),t._v(" "),a("h4",{attrs:{id:"编程范式游记-4-函数式编程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编程范式游记-4-函数式编程"}},[t._v("#")]),t._v(" 编程范式游记(4)-函数式编程")]),t._v(" "),a("p",[t._v('从前三章内容中可以了解到, 虽然 C 语言简单灵活, 能够让程序员在高级语言特性之上轻松进行底层上的微观控制, 被誉为"高级语言中的汇编语言", 但其基于过程和底层的设计初衷又成了它的短板.')]),t._v(" "),a("p",[t._v("在程序世界中, 编程工作更多的是解决业务上的问题, 而不是计算机的问题, 需要更为贴近业务, 更为抽象的语言, 如典型的面向对象语言 C++ 和 Java 等. C++ 很大程度上解决了 C 语言中的各种问题和不便, 尤其是通过类, 模板, 虚函数和运行时识别等解决了 C 语言的泛型编程问题. 然而, "),a("strong",[t._v("如何做更为抽象的泛型呢? 答案就是函数式编程(Functional Programming)")]),t._v(" .")]),t._v(" "),a("h5",{attrs:{id:"_1-函数式编程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-函数式编程"}},[t._v("#")]),t._v(" 1.函数式编程")]),t._v(" "),a("p",[t._v("相对于计算机的历史而言, 函数式编程其实是一个非常古老的概念. 函数式编程的基础模型来源于 λ 演算, 而 λ 演算并没有设计在计算机上执行. 它是由 Alonzo Church 和 Stephen Cole Kleene 在 20 世纪 30 年代引入的一套用于研究函数定义, 函数应用和递归的形式系统.")]),t._v(" "),a("p",[t._v("如 Alonzo 所说, 像 booleans, integers 或者其他的数据结构都可以被函数取代掉.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/41f736347833331c1fb60ed770076422-20230731162102-c7ekqgz.png",alt:""}})]),t._v(" "),a("p",[t._v("来看一下函数式编程, 它的理念就来自于数学中的代数.")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("h")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("14")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("假设 f(x) 是一个函数, g(x) 是第二个函数, 把 f(x) 这个函数套下来, 并展开. 然后还可以定义一个由两个一元函数组合成的二元函数, 还可以做递归, 下面这个函数定义就是斐波那契数列.")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("对于函数式编程来说, 它只关心"),a("mark",[a("strong",[t._v("定义输入数据和输出数据相关的关系, 数学表达式里面其实是在做一种映射(mapping), 输入的数据和输出的数据关系是什么样的, 是用函数来定义的")])]),t._v(".")]),t._v(" "),a("p",[t._v("函数式编程有以下特点.")]),t._v(" "),a("p",[a("strong",[t._v("特征")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("stateless")]),t._v(": "),a("mark",[a("strong",[t._v("函数不维护任何状态")])]),t._v(". 函数式编程的核心精神是 stateless, 简而言之就是它不能存在状态, 打个比方, 你给我数据我处理完扔出来. 里面的数据是不变的.")]),t._v(" "),a("li",[a("strong",[t._v("immutable")]),t._v(": "),a("mark",[a("strong",[t._v("输入数据是不能动的")])]),t._v(", 动了输入数据就有危险, 所以要返回新的数据集.")])]),t._v(" "),a("p",[a("strong",[t._v("优势")])]),t._v(" "),a("ul",[a("li",[t._v("没有状态就没有伤害.")]),t._v(" "),a("li",[t._v("并行执行无伤害.")]),t._v(" "),a("li",[t._v("Copy-Paste 重构代码无伤害.")]),t._v(" "),a("li",[t._v("函数的执行没有顺序上的问题.")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/0d497064a7b0502aef0765d76db46ec4-20230731162102-ky038ok.png",alt:""}})]),t._v(" "),a("p",[t._v("函数式编程还带来了以下一些好处.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("惰性求值")]),t._v(". 这需要编译器的支持. 表达式不在它被绑定到变量之后就立即求值, 而是在该值被取用的时候求值. 也就是说, 语句如 "),a("code",[t._v("x:=expression;")]),t._v(" (把一个表达式的结果赋值给一个变量) 显式地调用这个表达式被计算并把结果放置到 "),a("code",[t._v("x")]),t._v(" 中, 但是先不管实际在 "),a("code",[t._v("x")]),t._v(" 中的是什么, 直到通过后面的表达式中到 "),a("code",[t._v("x")]),t._v(" 的引用而有了对它的值的需求的时候, 而后面表达式自身的求值也可以被延迟, 最终为了生成让外界看到的某个符号而计算这个快速增长的依赖树.")]),t._v(" "),a("li",[a("strong",[t._v("确定性")]),t._v(". 所谓确定性, 就是像在数学中那样, "),a("code",[t._v("f(x) = y")]),t._v("​ 这个函数无论在什么场景下, 都会得到同样的结果, 而不是像程序中的很多函数那样, 同一个参数, 在不同的场景下会计算出不同的结果, 这个称之为函数的确定性. 所谓不同的场景, 就是函数会根据运行中的状态信息的不同而发生变化.")])]),t._v(" "),a("p",[t._v("我们知道, 因为状态, 在并行执行和 copy-paste 时引发 bug 的概率是非常高的, 所以没有状态就没有伤害, 就像没有依赖就没有伤害一样, 并行执行无伤害, copy 代码无伤害, 因为没有状态, 代码怎样拷都行.")]),t._v(" "),a("p",[a("strong",[t._v("劣势")])]),t._v(" "),a("ul",[a("li",[t._v("数据复制比较严重.")])]),t._v(" "),a("blockquote",[a("p",[t._v("注: 有一些人可能会觉得这会对性能造成影响. 其实这个劣势不见得会导致性能不好. 因为没有状态, 所以代码在并行上根本不需要锁(不需要对状态修改的锁), 所以可以拼命地并发, 反而可以让性能很不错. 比如: Erlang 就是其中的代表.")])]),t._v(" "),a("p",[t._v("对于纯函数式(也就是完全没有状态的函数)的编程来说, 各个语言支持的程度如下.")]),t._v(" "),a("ul",[a("li",[t._v("完全纯函数式 Haskell")]),t._v(" "),a("li",[t._v("容易写纯函数 F#, Ocaml, Clojure, Scala")]),t._v(" "),a("li",[t._v("纯函数需要花点精力 C#, Java, JavaScript")])]),t._v(" "),a("p",[t._v("完全纯函数的语言, 很容易写成函数, 纯函数需要花精力. 只要所谓的纯函数的问题, 传进来的数据不改, 改完的东西复制一份拷出去, 然后没有状态.")]),t._v(" "),a("p",[t._v("但是很多人并不习惯函数式编程, 因为函数式编程和过程式编程的思维方式完全不一样. 过程式编程是在把具体的流程描述出来, 所以可以不假思索, 而函数式编程的抽象度更大, 在实现方式上, 函数套函数, 函数返回函数, 函数里定义函数...把人搞得很糊涂.")]),t._v(" "),a("h5",{attrs:{id:"_2-函数式编程用到的技术"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-函数式编程用到的技术"}},[t._v("#")]),t._v(" 2.函数式编程用到的技术")]),t._v(" "),a("p",[t._v("下面是"),a("strong",[t._v("函数式编程")]),t._v("用到的一些技术.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("first class function(头等函数)")]),t._v(" : 这个技术可以让你的函数就像变量一样来使用. 也就是说, 你的函数可以像变量一样被创建, 修改, 并当成变量一样传递, 返回, 或是在函数中嵌套函数.")]),t._v(" "),a("li",[a("strong",[t._v("tail recursion optimization(尾递归优化)")]),t._v(" : 我们知道递归的害处, 那就是如果递归很深的话, stack 受不了, 并会导致性能大幅度下降. 因此使用尾递归优化技术--每次递归时都会重用 stack, 这样能够提升性能. 当然这需要语言或编译器的支持. Python 就不支持.")]),t._v(" "),a("li",[a("strong",[t._v("map & reduce")]),t._v(": 这个技术不用多说了, 函数式编程最常见的技术就是对一个集合做 Map 和 Reduce 操作. 这比起过程式的语言来说, 在代码上要更容易阅读. (传统过程式的语言需要使用 for/while 循环, 然后在各种变量中把数据倒过来倒过去的)这个很像 C++ STL 中 foreach, find_if, count_if 等函数的玩法.")]),t._v(" "),a("li",[a("strong",[t._v("pipeline(管道)")]),t._v(" : 这个技术的意思是, 将函数实例成一个一个的 action, 然后将一组 action 放到一个数组或是列表中, 再把数据传给这个 action list, 数据就像一个 pipeline 一样顺序地被各个函数所操作, 最终得到想要的结果.")]),t._v(" "),a("li",[a("strong",[t._v("recursing(递归)")]),t._v(" : 递归最大的好处就简化代码, 它可以把一个复杂的问题用很简单的代码描述出来. 注意: 递归的精髓是描述问题, 而这正是函数式编程的精髓.")]),t._v(" "),a("li",[a("strong",[t._v("currying(柯里化)")]),t._v(" : 将一个函数的多个参数分解成多个函数, 然后将函数多层封装起来, 每层函数都返回一个函数去接收下一个参数, 这可以简化函数的多个参数. 在 C++ 中, 这很像 STL 中的 bind1st 或是 bind2nd.")]),t._v(" "),a("li",[a("strong",[t._v("higher order function(高阶函数)")]),t._v(" : 所谓高阶函数就是函数当参数, 把传入的函数做一个封装, 然后返回这个封装函数. 现象上就是函数传进传出, 就像面向对象对象满天飞一样. 这个技术用来做 Decorator 很不错.")])]),t._v(" "),a("p",[t._v("上面这些技术太抽象了, 还是从一个最简单的例子开始.")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 非函数式, 不是 pure funciton, 有状态")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" cnt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("increment")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    cnt"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("这里有个全局变量, 调这个全局函数变量 ++, 这里面是有状态的, 这个"),a("strong",[t._v("状态在外部")]),t._v(". 所以, 如果是多线程的话, 这里面的代码是不安全的.")]),t._v(" "),a("p",[t._v("如果写成纯函数, 应该是下面这个样子.")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数式, pure function,  无状态")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("increment")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" cnt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" cnt"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("这个是你传给我什么, 就返回这个值的 +1 值, 你会发现, 代码随便拷, 而且与线程无关, 代码在并行时候不用锁, 因为是复制了原有的数据, 并返回了新的数据.")]),t._v(" "),a("p",[t._v("再来看另一个例子:")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("def "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("inc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    def "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("incx")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("y\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" incx\n \ninc2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("inc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ninc5 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("inc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n \nprint "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("inc2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" # 输出 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v("\nprint "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("inc5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" # 输出 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("p",[t._v("上面这段 Python 的代码, 开始有点复杂了. 可以看到上面那个例子 "),a("code",[t._v("inc()")]),t._v("​ 函数返回了另一个函数 "),a("code",[t._v("incx()")]),t._v("​, 于是可以用 "),a("code",[t._v("inc()")]),t._v("​ 函数来构造各种版本的 inc 函数, 比如: "),a("code",[t._v("inc2()")]),t._v("​ 和 "),a("code",[t._v("inc5()")]),t._v("​. 这个技术其实就是上面所说的 "),a("strong",[t._v("currying 技术")]),t._v(". 从这个技术上, 你可能体会到函数式编程的理念.")]),t._v(" "),a("ul",[a("li",[a("mark",[a("strong",[t._v("把函数当成变量来用, 关注描述问题而不是怎么实现, 这样可以让代码更易读")])]),t._v("​"),a("mark",[t._v(". ")])]),t._v(" "),a("li",[a("mark",[a("strong",[t._v("因为函数返回里面的这个函数, 所以函数关注的是表达式, 关注的是描述这个问题, 而不是怎么实现这个事情")])]),t._v("​"),a("mark",[t._v(". ")])])]),t._v(" "),a("h5",{attrs:{id:"_3-lisp语言介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-lisp语言介绍"}},[t._v("#")]),t._v(" 3.Lisp语言介绍")]),t._v(" "),a("p",[t._v("要说函数式语言, 不可避免地要说一下 Lisp. 下面再来看看 Scheme 语言(Lisp 的一个方言)的函数式玩法. 在 Scheme 里, 所有的操作都是函数, 包括加减乘除这样的东西. 所以, 一个表达式是这样的形式--(函数名 参数 1 参数 1)")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("plus x y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" x y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("times x y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" x y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("square x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("times x x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("上面三个函数:")]),t._v(" "),a("ul",[a("li",[t._v("用内置的 "),a("code",[t._v("+")]),t._v(" 函数定义了一个新的 "),a("code",[t._v("plus")]),t._v(" 函数.")]),t._v(" "),a("li",[t._v("用内置的 "),a("code",[t._v("*")]),t._v(" 函数定义了一个新的 "),a("code",[t._v("times")]),t._v(" 函数.")]),t._v(" "),a("li",[t._v("用之前的 "),a("code",[t._v("times")]),t._v(" 函数定义了一个 "),a("code",[t._v("square")]),t._v(" 函数.")])]),t._v(" "),a("p",[t._v("下面这个函数定义了: "),a("code",[t._v("f(x) = 5 * x^2 +10")]),t._v("​")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f1 x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("plus "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("times "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("square x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("也可以这样定义---使用 lambda 匿名函数.")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("define "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f2")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lambda")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("define "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("plus")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lambda")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" a b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("define "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("times")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lambda")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" a b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("plus "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("times "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("times x x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("在上面的这个代码里, 使用 lambda 来定义函数 "),a("code",[t._v("f2")]),t._v("​, 然后也同样用 lambda 定义了两个函数 "),a("code",[t._v("plus")]),t._v("​ 和 "),a("code",[t._v("times")]),t._v("​. 最后, 由 "),a("code",[t._v("(plus 10 (times 5 (times x x)))")]),t._v("​ 定义了 "),a("code",[t._v("f2")]),t._v("​.")]),t._v(" "),a("p",[t._v("再来看一个阶乘的示例:")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("recursion")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("define "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("factoral")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lambda")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("x")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("factoral")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newline"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("display")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("factoral "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("下面是另一个版本的, 使用了尾递归.")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" another version of "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("recursion")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("factoral_x n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("iter product counter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" counter n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("product")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("iter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" counter product"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" counter "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("iter "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newline"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("display")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("factoral_x "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("h5",{attrs:{id:"_4-函数式编程的思维方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-函数式编程的思维方式"}},[t._v("#")]),t._v(" 4.函数式编程的思维方式")]),t._v(" "),a("p",[t._v("前面提到过多次, 函数式编程关注的是: describe what to do, rather than how to do it. 于是, 我们把以前的过程式编程范式叫做 Imperative Programming--指令式编程, 而把函数式编程范式叫做 Declarative Programming--声明式编程.")]),t._v(" "),a("h6",{attrs:{id:"_1-传统方式的写法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-传统方式的写法"}},[t._v("#")]),t._v(" (1)传统方式的写法")]),t._v(" "),a("p",[t._v("下面看一下相关的示例. 比如, 有 3 辆车比赛, 简单起见, 分别给这 3 辆车 70% 的概率让它们可以往前走一步, 一共有 5 次机会, 然后打出每一次这 3 辆车的前行状态.")]),t._v(" "),a("p",[t._v("对于 Imperative Programming 来说, 代码如下(Python):")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("from random import random\n \ntime "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\ncar_positions "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" time"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("decrease")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("time")])]),t._v("\n    time "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n \n    print "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("''")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i in "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("car_positions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("move")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("car")])]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("random")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.3")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n            car_positions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n \n        "),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("draw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("car")])]),t._v("\n        print "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'-'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" car_positions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br")])]),a("p",[t._v("可以把这两重循环变成一些函数模块, 这样有利于更容易地阅读代码:")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("from random import random\n \ndef "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("move_cars")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" _ in "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("enumerate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("car_positions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("random")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.3")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n            car_positions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n \ndef "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("draw_car")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("car_position"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    print "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'-'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" car_position\n \ndef "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("run_step_of_race")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    global time\n    time "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("move_cars")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n \ndef "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("draw")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    print "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("''")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" car_position in car_positions"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("draw_car")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("car_position"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n \ntime "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\ncar_positions "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" time"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("run_step_of_race")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("draw")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br")])]),a("p",[t._v("上面的代码, 从主循环开始, 可以很清楚地看到程序的主干, 因为我们把程序的逻辑分成了几个函数. 这样一来, 代码逻辑就会变成几个小碎片, 于是读代码时要考虑的上下文就少了很多, 阅读代码也会更容易. 不像第一个示例, 如果没有注释和说明, 还是需要花些时间理解一下. 而将代码逻辑封装成了函数后, 就相当于给每个相对独立的程序逻辑取了个名字, 于是代码成了自解释的.")]),t._v(" "),a("p",[t._v("但是你会发现, 封装成函数后, "),a("strong",[t._v("这些函数都会依赖于共享的变量来同步其状态")]),t._v(". 于是, 在读代码的过程中, 每当进入到函数里, 读到访问了一个外部的变量时, 我们马上要去查看这个变量的上下文, 然后还要在大脑里推演这个变量的状态, 才能知道程序的真正逻辑. 也就是说, "),a("strong",[t._v("这些函数必须知道其它函数是怎么修改它们之间的共享变量的, 所以这些函数是有状态的")]),t._v(".")]),t._v(" "),a("h6",{attrs:{id:"_2-函数式的写法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-函数式的写法"}},[t._v("#")]),t._v(" (2)函数式的写法")]),t._v(" "),a("p",[t._v("我们知道, 有状态并不是一件很好的事情, 无论是对代码重用, 还是对代码的并行来说, 都是有副作用的. 因此要想个方法把这些"),a("strong",[t._v("状态搞掉")]),t._v(", 于是出现了函数式编程的编程范式. 下面来看看函数式的方式应该怎么写?")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("from random import random\n \ndef "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("move_cars")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("car_positions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lambda x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("random")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n               car_positions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n \ndef "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("output_car")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("car_position"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'-'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" car_position\n \ndef "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("run_step_of_race")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'time'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'time'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'car_positions'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("move_cars")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'car_positions'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \ndef "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("draw")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    print "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("''")]),t._v("\n    print "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'\\n'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("output_car"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'car_positions'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n \ndef "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("race")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("draw")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'time'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("race")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("run_step_of_race")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("race")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'time'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'car_positions'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br")])]),a("p",[t._v("上面的代码依然把程序的逻辑分成了函数. 不过这些函数都是"),a("strong",[t._v("函数式")]),t._v("的, 它们有三个特点: "),a("strong",[t._v("它们之间没有共享的变量; 函数间通过参数和返回值来传递数据; 在函数里没有临时变量")]),t._v(".")]),t._v(" "),a("p",[t._v("还可以看到, for 循环被递归取代了(见 race 函数)---递归是函数式编程中常用到的技术, 正如前面所说的, "),a("strong",[t._v("递归的本质就是描述问题是什么")]),t._v(".")]),t._v(" "),a("h5",{attrs:{id:"_5-函数式语言的三套件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-函数式语言的三套件"}},[t._v("#")]),t._v(" 5.函数式语言的三套件")]),t._v(" "),a("p",[t._v("函数式语言有三套件, "),a("strong",[t._v("Map")]),t._v(", "),a("strong",[t._v("Reduce")]),t._v(" 和 "),a("strong",[t._v("Filter")]),t._v(". 这在谈 C++ 的泛型编程时已经介绍过. 下面来看一下 Python 语言中的一个示例. 这个示例的需求是, 想把一个字符串数组中的字符串都转成小写.")]),t._v(" "),a("p",[t._v("用常规的面向过程的方式, 代码如下所示:")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("# 传统的非函数式\nupname "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'HAO'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'CHEN'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'COOLSHELL'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nlowname "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i in "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("upname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    lowname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" upname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lower")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("如果写成函数式, 用 "),a("code",[t._v("map()")]),t._v(" 函数, 是下面这个样子.")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("# 函数式\ndef "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toUpper")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("upper")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n \nupper_name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("toUpper"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hao"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"chen"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"coolshell"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n \nprint upper_name\n# 输出 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'HAO'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'CHEN'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'COOLSHELL'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[t._v("顺便说一下, 上面的例子是不是和 C++ 语言中的 STL 的 "),a("code",[t._v("transform()")]),t._v("​ 函数有些像?")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("string s"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("transform")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("begin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("back_inserter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("toupper"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("在上面 Python 的那个例子中可以看到, 我们定义了一个函数 toUpper, 这个函数没有改变传进来的值, 只是把传进来的值做个简单的操作, 然后返回. 然后把它用在 map 函数中, 就可以很清楚地描述出我们想要干什么, 而不是去理解一个在循环中怎么实现的代码, 最终在读了很多循环的逻辑后才发现是什么意思.")]),t._v(" "),a("p",[t._v("如果你觉得上面的代码在传统的非函数式的方式下还是很容易读的, 那么再来看一个计算数组平均值的代码:")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("# 计算数组中正数的平均值\nnum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\npositive_num_cnt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\npositive_num_sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i in "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        positive_num_cnt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n        positive_num_sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" positive_num_cnt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    average "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" positive_num_sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" positive_num_cnt\n \nprint average\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br")])]),a("p",[t._v("上面的代码如果没有注释的话, 你需要看一会儿才能明白, 只是计算数组中正数的平均值.")]),t._v(" "),a("p",[t._v("再来看看函数式下使用 filter/reduce 函数的玩法.")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("# 计算数组中正数的平均值\npositive_num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lambda x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\naverage "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reduce")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lambda x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" positive_num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" positive_num "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("首先, 使用 filter 函数把正数过滤出来(注意: "),a("code",[t._v("lambda x : x>0")]),t._v("​ 这个 lambda 表达式), 保存在一个新的数组中---"),a("code",[t._v("positive_num")]),t._v("​. 然后使用 reduce 函数对数组 "),a("code",[t._v("positive_num")]),t._v("​ 求和后, 再除以其个数, 就得到正数的平均值了.")]),t._v(" "),a("p",[t._v("可以看到, "),a("strong",[t._v("隐藏了数组遍历并过滤数组控制流程的 filter 和 reduce, 不仅让代码更为简洁, 因为代码里只有业务逻辑了, 而且让我们能更容易地理解代码")]),t._v(".")]),t._v(" "),a("ol",[a("li",[t._v("对 "),a("code",[t._v("num")]),t._v(" 数组 "),a("code",[t._v("filter")]),t._v(" 条件 "),a("code",[t._v("x > 0")]),t._v(" 的数据.")]),t._v(" "),a("li",[t._v("然后对 "),a("code",[t._v("positive_num")]),t._v(" 进行 "),a("code",[t._v("x + y")]),t._v(" 操作的 reduce, 即求和.")]),t._v(" "),a("li",[t._v("...")])]),t._v(" "),a("p",[t._v("感觉代码更亲切了, 不是吗? 因为:")]),t._v(" "),a("ul",[a("li",[t._v("数据集, 对数据的操作和返回值都放在了一起.")]),t._v(" "),a("li",[t._v("没有了循环体, 就可以少了些临时用来控制程序执行逻辑的变量, 也少了把数据倒来倒去的控制逻辑.")]),t._v(" "),a("li",[a("strong",[t._v("代码变成了在描述你要干什么, 而不是怎么干")]),t._v(".")])]),t._v(" "),a("p",[t._v("当然, 如果你是第一次见到 map/reduce/filter, 那你可能还是会有点儿陌生和不解, 这只是你不了解罢了.")]),t._v(" "),a("p",[t._v("对于函数式编程的思路, 下图是一个比较形象的例子, 面包和蔬菜 map 到切碎的操作上, 再把结果给 reduce 成汉堡.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/4a2ba20345b4d63a568624d5690f7741-20230731162102-tmpqu7j.png",alt:""}})]),t._v(" "),a("p",[t._v("在这个图中, "),a("strong",[t._v("可以看到 map 和 reduce 不关心源输入数据, 它们只是控制, 并不是业务. 控制是描述怎么干, 而业务是描述要干什么")]),t._v(".")]),t._v(" "),a("h5",{attrs:{id:"_6-函数式的pipeline模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-函数式的pipeline模式"}},[t._v("#")]),t._v(" 6.函数式的pipeline模式")]),t._v(" "),a("p",[t._v("pipeline(管道)借鉴于 Unix Shell 的管道操作---把若干个命令串起来, 前面命令的输出成为后面命令的输入, 如此完成一个流式计算. (注: 管道绝对是一个伟大的发明, 它的设计哲学就是 KISS: 让每个功能就做一件事, 并把这件事做到极致, 软件或程序的拼装会变得更为简单和直观. 这个设计理念影响非常深远, 包括今天的 Web Service, 云计算, 以及大数据的流式计算等.)")]),t._v(" "),a("p",[t._v("比如如下的 shell 命令:")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("ps auwwx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" awk "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'{print $2}'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" sort "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" xargs echo\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("上面的例子是要查看一个用户执行的进程列表, 列出来以后, 然后取第二列, 第二列是它的进程 ID, 排个序, 再把它显示出来.")]),t._v(" "),a("p",[t._v("抽象成函数式的样子, 就可以反过来, 一层套一层.")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("xargs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("  echo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("awk")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'print $2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("auwwx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("也可以把函数放进数组里面, 然后顺序执行一下.")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("pids "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("for_each")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("ps_auwwx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" awk_p2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sort_n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" xargs_echo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("多说一句, 如果把这些函数比作微服务, 那么管道这个事是在干什么呢? 其实就是在做服务的编排. 像 Unix 这些经典的技术上的实践或理论, 往往是可以反映到分布式架构的, 所以一般来说, 一个好的分布式架构师, 通常都是对这些传统的微观上的经典技术有非常深刻的认识, 因为这些东西在方法论上都是相通的.")]),t._v(" "),a("p",[t._v("好了, 还是用一个简单的示例来看一下如何实现 pipeline.")]),t._v(" "),a("p",[t._v("先来看一个程序, 这个程序的 process() 有三个步骤:")]),t._v(" "),a("ol",[a("li",[t._v("找出偶数;")]),t._v(" "),a("li",[t._v("乘以 3;")]),t._v(" "),a("li",[t._v("转成字符串返回.")])]),t._v(" "),a("p",[t._v("传统的非函数式的实现如下:")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("def "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("process")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("filter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("out non"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("evens")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n    num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n    num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'The Number: %s'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" num\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" num\n \nnums "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" num in nums"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    print "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("process")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  \n# 输出"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("None")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("The Number"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")])])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("None")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("The Number"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")])])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("None")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("The Number"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")])])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("None")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("The Number"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("24")])])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("None")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("The Number"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")])])]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br")])]),a("p",[t._v("可以看到, 输出的结果并不够完美, 另外, 代码阅读上如果没有注释, 你也会比较晕. 下面来看看函数式的 pipeline(第一种方式)应该怎么写?")]),t._v(" "),a("p",[t._v('第一步, 先把三个"子需求"写成函数:')]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("def "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("even_filter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" num in nums"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n            yield num\ndef "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("multiply_by_three")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" num in nums"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        yield num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\ndef "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("convert_to_string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" num in nums"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        yield "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'The Number: %s'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" num\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("p",[t._v("然后再把这三个函数串起来:")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("nums "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\npipeline "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("convert_to_string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("multiply_by_three")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("even_filter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" num in pipeline"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    print num\n# 输出"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("The Number"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")])])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("The Number"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")])])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("The Number"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")])])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("The Number"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("24")])])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("The Number"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")])])]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("p",[t._v("上面动用了 Python 的关键字 yield, 它是一个类似 return 的关键字, 只是这个函数返回的是 Generator(生成器). 所谓生成器, 指的是 yield 返回的是一个可迭代的对象, 并没有真正的执行函数. 也就是说, 只有其返回的迭代对象被迭代时, yield 函数才会真正运行, 运行到 yield 语句时就会停住, 然后等下一次的迭代. (yield 是个比较诡异的关键字)这就是 lazy evluation(懒惰加载).")]),t._v(" "),a("p",[t._v('好了, 根据前面的原则--"'),a("strong",[t._v("使用 Map & Reduce, 不要使用循环")]),t._v('"(还记得吗? 使用循环会让我们只能使用顺序型的数据结构), 那我们用比较纯朴的 Map & Reduce 吧.')]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("def "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("even_filter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lambda x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n \ndef "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("multiply_by_three")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lambda x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n \ndef "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("convert_to_string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lambda x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'The Number: %s'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n \nnums "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\npipeline "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("convert_to_string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n               "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("multiply_by_three")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n                   "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("even_filter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n               "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" num in pipeline"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    print num\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br")])]),a("p",[t._v("上面的代码是不是更容易读了, 但需要嵌套使用函数, 这个有点儿令人不爽, 如果能像下面这个样子就好了(第二种方式).")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pipeline_func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("even_filter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                     multiply_by_three"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                     convert_to_string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("可以看到, 其实就是对一堆函数做一个 reduce, 于是, pipeline 函数可以实现成下面这样:")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("def "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pipeline_func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fns"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reduce")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lambda a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("   fns"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("   data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("当然, 使用 Python 的 "),a("code",[t._v("force")]),t._v(" 函数以及 decorator 模式可以把上面的代码写得更像管道:")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("class "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pipe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    def "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" func"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("func "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" func\n \n    def "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__ror__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" other"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        def "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("generator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" obj in other"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" obj is not None"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n                    yield self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("generator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n \n@Pipe\ndef "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("even_filter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" None\n \n@Pipe\ndef "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("multiply_by_three")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" num"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n \n@Pipe\ndef "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("convert_to_string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'The Number: %s'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" num\n \n@Pipe\ndef "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("echo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    print item\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" item\n \ndef "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("force")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sqs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" item in sqs"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" pass\n \nnums "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("force")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" even_filter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" multiply_by_three "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" convert_to_string "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" echo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br"),a("span",{staticClass:"line-number"},[t._v("31")]),a("br"),a("span",{staticClass:"line-number"},[t._v("32")]),a("br"),a("span",{staticClass:"line-number"},[t._v("33")]),a("br"),a("span",{staticClass:"line-number"},[t._v("34")]),a("br")])]),a("h5",{attrs:{id:"_7-小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-小结"}},[t._v("#")]),t._v(" 7.小结")]),t._v(" "),a("p",[t._v("相对于计算机发展史, "),a("strong",[t._v("函数式编程是个非常古老的概念, 它的核心思想是将运算过程尽量写成一系列嵌套的函数调用, 关注的是做什么而不是怎么做, 因而被称为声明式编程")]),t._v(". 以 "),a("strong",[t._v("Stateless(无状态)和 Immutable(不可变)")]),t._v(" 为主要特点, 代码简洁, 易于理解, 能便于进行并行执行, 易于做代码重构, 函数执行没有顺序上的问题, 支持惰性求值, 具有函数的确定性--无论在什么场景下都会得到同样的结果.")]),t._v(" "),a("p",[t._v("本文结合递归, map 和 reduce, 以及 pipeline 等技术, 对比了非函数式编程和函数式编程在解决相同问题时的不同处理思路, 让你对函数式编程范式有了清晰明确的认知. 并在文末引入了 decorator(修饰器), 使得将普通函数管道化成为一件轻而易举的事情. 此时你可能有疑问, decorator 到底是什么呢? 怎样使用它呢? 下一章中可以得到这些答案.")]),t._v(" "),a("h4",{attrs:{id:"编程范式游记-5-修饰器模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编程范式游记-5-修饰器模式"}},[t._v("#")]),t._v(" 编程范式游记(5)-修饰器模式")]),t._v(" "),a("p",[t._v("上一篇文章主要讲了函数式编程的主要技术. 还记得有哪些吗? 递归, Map, Reduce, Filter 等, 并利用 Python 的 Decorator 和 Generator 功能, 将多个函数组合成了管道.")]),t._v(" "),a("p",[t._v("此时, 你心中可能会有个疑问, 这个 "),a("strong",[t._v("decorator")]),t._v(' 又是怎样工作的呢? 这就是本文中要讲述的内容, "Decorator 模式", 又叫 "修饰器模式", 或是 "'),a("strong",[t._v("装饰器模式")]),t._v('".')]),t._v(" "),a("h5",{attrs:{id:"_1-python的decorator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-python的decorator"}},[t._v("#")]),t._v(" 1.Python的Decorator")]),t._v(" "),a("p",[t._v("Python 的 Decorator 在使用上和 Java 的 Annotation(以及 C# 的 Attribute)很相似, 就是在方法名前面加一个 @XXX 注解来为这个方法装饰一些东西. 但是, Java/C# 的 Annotation 也很让人望而却步, 太过于复杂了. 你要玩它, 需要先了解一堆 Annotation 的类库文档, 感觉几乎就是在学另外一门语言.")]),t._v(" "),a("p",[t._v("而 Python 使用了一种相对于 Decorator Pattern 和 Annotation 来说非常优雅的方法, 这种方法不需要你去掌握什么复杂的 OO 模型或是 Annotation 的各种类库规定, 完全就是语言层面的玩法: "),a("strong",[t._v("一种函数式编程的技巧")]),t._v(".")]),t._v(" "),a("p",[t._v("这是我最喜欢的一个模式了, 也是一个挺好玩儿的东西, 这个模式动用了函数式编程的一个技术: "),a("strong",[t._v("用一个函数来构造另一个函数")]),t._v(".")]),t._v(" "),a("p",[t._v("好了, 先来点感性认识, 看一个 Python 修饰器的 Hello World 代码.")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("def "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    def "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("wrapper")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        print "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello, %s"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" fn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__name__\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        print "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"goodbye, %s"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" fn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__name__\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" wrapper\n \n@hello\ndef "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Hao")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    print "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"i am Hao Chen"')]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Hao")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("p",[t._v("代码的执行结果如下:")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("$ python hello"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("py\nhello"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Hao\ni am Hao Chen\ngoodbye"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Hao\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("你可以看到如下的东西:")]),t._v(" "),a("ol",[a("li",[t._v("函数 "),a("code",[t._v("Hao")]),t._v('​ 前面有个 @hello 的 "注解", '),a("code",[t._v("hello")]),t._v("​ 就是前面定义的函数 "),a("code",[t._v("hello")]),t._v("​;")]),t._v(" "),a("li",[t._v("在 "),a("code",[t._v("hello")]),t._v("​ 函数中, 其需要一个 "),a("code",[t._v("fn")]),t._v("​ 的参数(这就是用来做"),a("strong",[t._v("回调")]),t._v("的函数);")]),t._v(" "),a("li",[t._v("hello 函数中返回了一个 inner 函数 "),a("code",[t._v("wrapper")]),t._v(", 这个 "),a("code",[t._v("wrapper")]),t._v("函数回调了传进来的 "),a("code",[t._v("fn")]),t._v(", 并在回调前后加了两条语句.")])]),t._v(" "),a("p",[t._v("对于 Python 的这个  "),a("strong",[t._v("@注解语法糖")]),t._v("(syntactic sugar)来说, 当你在用某个 @decorator 来修饰某个函数 "),a("code",[t._v("func")]),t._v("​ 时, 如下所示:")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("@decorator\ndef "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    pass\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("其解释器会解释成下面这样的语句:")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("func "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("decorator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("func"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("嘿! 这"),a("strong",[t._v("不就是把一个函数当参数传到另一个函数中")]),t._v(", 然后再回调吗? 是的. 但是需要注意, 那里还有一个赋值语句, 把 decorator 这个函数的返回值赋值回了原来的 "),a("code",[t._v("func")]),t._v("​.")]),t._v(" "),a("p",[t._v("再来看一个带参数的玩法:")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("def "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("makeHtmlTag")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("kwds"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    def "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("real_decorator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        css_class "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\" class='{0}'\"")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("format")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("kwds"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"css_class"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \\\n                                     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"css_class"')]),t._v(" in kwds "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v("\n        def "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("wrapped")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("kwds"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("tag"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("css_class"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('">"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("kwds"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"</"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("tag"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('">"')]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" wrapped\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" real_decorator\n \n@"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("makeHtmlTag")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tag"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" css_class"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bold_css"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n@"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("makeHtmlTag")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tag"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"i"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" css_class"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"italic_css"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ndef "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello world"')]),t._v("\n \nprint "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n \n# 输出"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" \n# "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("b class"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'bold_css'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("i class"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'italic_css'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("hello world"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br")])]),a("p",[t._v("在上面这个例子中, 可以看到: "),a("code",[t._v("makeHtmlTag")]),t._v("​ 有两个参数. 所以为了让 "),a("code",[t._v("hello = makeHtmlTag(arg1, arg2)(hello)")]),t._v("​ 成功, "),a("code",[t._v("makeHtmlTag")]),t._v("​ 必需返回一个 decorator(这就是为什么在 "),a("code",[t._v("makeHtmlTag")]),t._v("​ 中加入了 "),a("code",[t._v("real_decorator()")]),t._v("​).")]),t._v(" "),a("p",[t._v("这样一来, 就可以进入到 decorator 的逻辑中去了--decorator 得返回一个 wrapper, wrapper 里回调 "),a("code",[t._v("hello")]),t._v("​. 看似那个 "),a("code",[t._v("makeHtmlTag()")]),t._v("​ 写得层层叠叠, 但是已经了解了本质的我们觉得写得很自然.")]),t._v(" "),a("p",[t._v("再来看一个为其它函数加缓存的示例:")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("from functools import wraps\ndef "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("memoization")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    cache "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    miss "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n \n    @"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("wraps")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    def "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("wrapper")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cache"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" miss"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" result is miss"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n            result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            cache"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" result\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result\n \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" wrapper\n \n@memoization\ndef "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fib")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fib")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fib")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br")])]),a("p",[t._v("上面这个例子中, 是一个斐波那契数例的递归算法. 我们知道, 这个递归是相当没有效率的, 因为会重复调用. 比如: 要计算 fib(5), 于是其分解成 "),a("code",[t._v("fib(4) + fib(3)")]),t._v("​, 而 "),a("code",[t._v("fib(4)")]),t._v("​ 分解成 "),a("code",[t._v("fib(3) + fib(2)")]),t._v("​, "),a("code",[t._v("fib(3)")]),t._v("​ 又分解成 "),a("code",[t._v("fib(2) + fib(1)")]),t._v("​...可以看到, 基本上来说, "),a("code",[t._v("fib(3)")]),t._v("​, "),a("code",[t._v("fib(2)")]),t._v("​, "),a("code",[t._v("fib(1)")]),t._v("​ 在整个递归过程中被调用了至少两次.")]),t._v(" "),a("p",[t._v("而用 decorator, 在调用函数前"),a("strong",[t._v("查询一下缓存")]),t._v(", 如果没有才调用, 有了就从缓存中返回值. 一下子, 这个递归从二叉树式的递归成了线性的递归. "),a("code",[t._v("wraps")]),t._v("​ 的作用是保证 "),a("code",[t._v("fib")]),t._v("​ 的函数名不被 "),a("code",[t._v("wrapper")]),t._v("​ 所取代.")]),t._v(" "),a("p",[t._v("除此之外, Python 还支持类方式的 decorator.")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("class "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("myDecorator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    def "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        print "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"inside myDecorator.__init__()"')]),t._v("\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fn "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fn\n \n    def "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__call__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        print "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"inside myDecorator.__call__()"')]),t._v("\n \n@myDecorator\ndef "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("aFunction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    print "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"inside aFunction()"')]),t._v("\n \nprint "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Finished decorating aFunction()"')]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("aFunction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n \n# 输出"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("inside")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("myDecorator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("Finished decorating "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("aFunction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("inside")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("aFunction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("inside")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("myDecorator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__call__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br")])]),a("p",[t._v("上面这个示例展示了, 用类的方式声明一个 decorator. 可以看到这个类中有两个成员:")]),t._v(" "),a("ol",[a("li",[t._v("一个是 "),a("code",[t._v("__init__()")]),t._v("​, 这个方法是在给某个函数 decorate 时被调用, 所以需要有一个 "),a("code",[t._v("fn")]),t._v("​ 的参数, 也就是被 decorate 的函数.")]),t._v(" "),a("li",[t._v("一个是 "),a("code",[t._v("__call__()")]),t._v("​, 这个方法是在调用被 decorate 的函数时被调用的.")])]),t._v(" "),a("p",[t._v('从上面的输出中, 可以看到整个程序的执行顺序. 这看上去要比 "函数式" 的方式更易读一些.')]),t._v(" "),a("p",[t._v("来看一个实际点的例子. 下面这个示例展示了通过 URL 的路由来调用相关注册的函数示例:")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("class "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MyApp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    def "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("func_map "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n    def "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("register")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        def "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("func_wrapper")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("func"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n            self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("func_map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" func\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" func\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" func_wrapper\n \n    def "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call_method")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("None"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        func "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("func_map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" None"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" func is None"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n            raise "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Exception")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"No function registered against - "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n \napp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MyApp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n \n@app"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("register")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'/'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ndef "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main_page_func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"This is the main page."')]),t._v("\n \n@app"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("register")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'/next_page'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ndef "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next_page_func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"This is the next page."')]),t._v("\n \nprint app"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call_method")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'/'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nprint app"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call_method")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'/next_page'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br")])]),a("p",[t._v("注意: 上面这个示例中 decorator 类不是真正的 decorator, 其中也没有 "),a("code",[t._v("__call__()")]),t._v("​, 并且, wrapper 返回了原函数. 所以原函数没有发生任何变化.")]),t._v(" "),a("h5",{attrs:{id:"_2-go语言的decorator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-go语言的decorator"}},[t._v("#")]),t._v(" 2.Go语言的Decorator")]),t._v(" "),a("p",[t._v("Python 有语法糖, 所以写出来的代码比较酷. 但是对于没有修饰器语法糖这类语言, 写出来的代码会是怎么样的? 来看一下 Go 语言的代码.")]),t._v(" "),a("p",[t._v("还是从一个 Hello World 开始.")]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("decorator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Started"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Done"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Hello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("decorator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Hello"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello, World!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br")])]),a("p",[t._v("可以看到, 我们动用了一个高阶函数 "),a("code",[t._v("decorator()")]),t._v(", 在调用的时候, 先把 "),a("code",[t._v("Hello()")]),t._v(" 函数传进去, 然后其返回一个匿名函数. 这个匿名函数中除了运行了自己的代码, 也调用了被传入的 "),a("code",[t._v("Hello()")]),t._v(" 函数.")]),t._v(" "),a("p",[t._v("这个玩法和 Python 的异曲同工, 只不过, Go 并不支持像 Python 那样的 @decorator 语法糖. 所以在调用上有些难看. 当然如果要想让代码容易读一些, 你可以这样:")]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("hello "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("decorator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Hello"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("再来看一个为函数 log 消耗时间的例子:")]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" SumFunc "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getFunctionName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" runtime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FuncForPC")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reflect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ValueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pointer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("timedSumFunc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f SumFunc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" SumFunc "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"--- Time Elapsed (%s): %v ---\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n                "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getFunctionName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Since")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sum1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" sum "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v("\n    sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" start "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" end "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" end"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" end"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" i\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" sum\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sum2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" start "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" end "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" end"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("end "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" start "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("end "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n \n    sum1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("timedSumFunc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Sum1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    sum2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("timedSumFunc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Sum2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n \n    fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d, %d\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br"),a("span",{staticClass:"line-number"},[t._v("31")]),a("br"),a("span",{staticClass:"line-number"},[t._v("32")]),a("br"),a("span",{staticClass:"line-number"},[t._v("33")]),a("br"),a("span",{staticClass:"line-number"},[t._v("34")]),a("br"),a("span",{staticClass:"line-number"},[t._v("35")]),a("br"),a("span",{staticClass:"line-number"},[t._v("36")]),a("br"),a("span",{staticClass:"line-number"},[t._v("37")]),a("br"),a("span",{staticClass:"line-number"},[t._v("38")]),a("br"),a("span",{staticClass:"line-number"},[t._v("39")]),a("br"),a("span",{staticClass:"line-number"},[t._v("40")]),a("br"),a("span",{staticClass:"line-number"},[t._v("41")]),a("br"),a("span",{staticClass:"line-number"},[t._v("42")]),a("br")])]),a("p",[t._v("关于上面的代码:")]),t._v(" "),a("ul",[a("li",[t._v("有两个 Sum 函数, "),a("code",[t._v("Sum1()")]),t._v("​ 函数就是简单地做个循环, "),a("code",[t._v("Sum2()")]),t._v("​ 函数动用了数据公式. (注意: "),a("code",[t._v("start")]),t._v("​ 和 "),a("code",[t._v("end")]),t._v("​ 有可能有负数的情况.)")]),t._v(" "),a("li",[t._v("代码中使用了 Go 语言的反射机制来获取函数名.")]),t._v(" "),a("li",[t._v("修饰器函数是 "),a("code",[t._v("timedSumFunc()")]),t._v(".")])]),t._v(" "),a("p",[t._v("再来看一个 HTTP 路由的例子:")]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("WithServerHeader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("h http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("HandlerFunc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("HandlerFunc "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("w http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ResponseWriter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"---\x3eWithServerHeader()"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        w"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Header")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Server"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"HelloServer v0.0.1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("h")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("w"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("WithAuthCookie")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("h http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("HandlerFunc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("HandlerFunc "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("w http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ResponseWriter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"---\x3eWithAuthCookie()"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        cookie "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Cookie"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Auth"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Pass"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SetCookie")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("w"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cookie"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("h")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("w"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("WithBasicAuth")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("h http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("HandlerFunc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("HandlerFunc "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("w http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ResponseWriter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"---\x3eWithBasicAuth()"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        cookie"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" err "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Cookie")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Auth"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" err "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" cookie"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Pass"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            w"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("WriteHeader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("StatusForbidden"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("h")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("w"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("WithDebugLog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("h http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("HandlerFunc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("HandlerFunc "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("w http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ResponseWriter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"---\x3eWithDebugLog"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ParseForm")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Form"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"path"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("URL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"scheme"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("URL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Scheme"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Form"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"url_long"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("range")]),t._v(" r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Form "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"key:"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"val:"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" strings"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Join")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("h")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("w"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("w http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ResponseWriter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Received Request %s from %s\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("URL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("RemoteAddr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fprintf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("w"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello, World! "')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("URL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br"),a("span",{staticClass:"line-number"},[t._v("31")]),a("br"),a("span",{staticClass:"line-number"},[t._v("32")]),a("br"),a("span",{staticClass:"line-number"},[t._v("33")]),a("br"),a("span",{staticClass:"line-number"},[t._v("34")]),a("br"),a("span",{staticClass:"line-number"},[t._v("35")]),a("br"),a("span",{staticClass:"line-number"},[t._v("36")]),a("br"),a("span",{staticClass:"line-number"},[t._v("37")]),a("br"),a("span",{staticClass:"line-number"},[t._v("38")]),a("br"),a("span",{staticClass:"line-number"},[t._v("39")]),a("br"),a("span",{staticClass:"line-number"},[t._v("40")]),a("br"),a("span",{staticClass:"line-number"},[t._v("41")]),a("br"),a("span",{staticClass:"line-number"},[t._v("42")]),a("br"),a("span",{staticClass:"line-number"},[t._v("43")]),a("br"),a("span",{staticClass:"line-number"},[t._v("44")]),a("br"),a("span",{staticClass:"line-number"},[t._v("45")]),a("br"),a("span",{staticClass:"line-number"},[t._v("46")]),a("br"),a("span",{staticClass:"line-number"},[t._v("47")]),a("br"),a("span",{staticClass:"line-number"},[t._v("48")]),a("br")])]),a("p",[t._v("上面的代码中, 写了多个函数. 有写 HTTP 响应头的, 有写认证 Cookie 的, 有检查认证 Cookie 的, 有打日志的...在使用过程中, 可以把其嵌套起来使用, 在修饰过的函数上继续修饰, 这样就可以拼装出更复杂的功能.")]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("HandleFunc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/v1/hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("WithServerHeader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("WithAuthCookie")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hello"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("HandleFunc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/v2/hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("WithServerHeader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("WithBasicAuth")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hello"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("HandleFunc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/v3/hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("WithServerHeader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("WithBasicAuth")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("WithDebugLog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hello"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    err "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ListenAndServe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('":8080"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" err "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fatal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ListenAndServe: "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("p",[t._v("当然, 如果一层套一层不好看的话, 可以使用 pipeline 的玩法--需要先写一个工具函数--用来遍历并调用各个 decorator:")]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" HttpHandlerDecorator "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("HandlerFunc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("HandlerFunc\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Handler")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("h http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("HandlerFunc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" decors "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("HttpHandlerDecorator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("HandlerFunc "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("range")]),t._v(" decors "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        d "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" decors"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("decors"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// iterate in reverse")]),t._v("\n        h "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("d")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("h"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" h\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("p",[t._v("然后, 就可以像下面这样使用了.")]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("HandleFunc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/v4/hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Handler")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hello"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                WithServerHeader"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" WithBasicAuth"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" WithDebugLog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("这样的代码是不是更易读了一些? pipeline 的功能也就出来了.")]),t._v(" "),a("p",[t._v("不过, 对于 Go 的修饰器模式, 还有一个小问题, 好像无法做到泛型, 就像上面那个计算时间的函数一样, 它的代码耦合了需要被修饰的函数的接口类型, 无法做到非常通用. 如果这个事解决不了, 那么这个修饰器模式还是有点不好用的.")]),t._v(" "),a("p",[t._v("因为 Go 语言不像 Python 和 Java, Python 是动态语言, 而 Java 有语言虚拟机, 所以它们可以干许多比较变态的事儿, 然而 Go 语言是一个静态的语言, 这意味着其类型需要在编译时就要搞定, 否则无法编译. 不过, Go 语言支持的最大的泛型是 interface{}, 还有比较简单的 reflection 机制, 在上面做做文章, 应该还是可以搞定的.")]),t._v(" "),a("p",[t._v("废话不说, 下面是用 reflection 机制写的一个比较通用的修饰器(为了便于阅读, 我删除了出错判断代码).")]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Decorator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("decoPtr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fn "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" decoratedFunc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" targetFunc reflect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Value\n \n    decoratedFunc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" reflect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ValueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("decoPtr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Elem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    targetFunc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" reflect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ValueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n \n    v "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" reflect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MakeFunc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("targetFunc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("in "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("reflect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("out "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("reflect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"before"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            out "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" targetFunc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("in"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"after"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n \n    decoratedFunc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br")])]),a("p",[t._v("上面的代码动用了 "),a("code",[t._v("reflect.MakeFunc()")]),t._v("​ 函数制作出了一个新的函数. 其中的 "),a("code",[t._v("targetFunc.Call(in)")]),t._v("​ 调用了被修饰的函数. 关于 Go 语言的反射机制, 推荐官方文章---《"),a("a",{attrs:{href:"https://blog.golang.org/laws-of-reflection",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Laws of Reflection"),a("OutboundLink")],1),t._v("》, 在这里我不多说了.")]),t._v(" "),a("p",[t._v("上面这个 "),a("code",[t._v("Decorator()")]),t._v(" 需要两个参数:")]),t._v(" "),a("ul",[a("li",[t._v("第一个是出参 "),a("code",[t._v("decoPtr")]),t._v("​, 就是完成修饰后的函数.")]),t._v(" "),a("li",[t._v("第二个是入参 "),a("code",[t._v("fn")]),t._v("​, 就是需要修饰的函数.")])]),t._v(" "),a("p",[t._v("这样写是不是有些二? 的确是的. 不过, 这是我个人在 Go 语言里所能写出来的最好的代码了.")]),t._v(" "),a("p",[t._v("来看一下使用效果. 首先, 假设有两个需要修饰的函数:")]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d, %d, %d \\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" c\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s, %s \\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("p",[t._v("然后, 可以这样做:")]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" MyFoo "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" myfoo MyFoo\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Decorator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("myfoo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("myfoo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("你会发现, 使用 "),a("code",[t._v("Decorator()")]),t._v(" 时, 还需要先声明一个函数签名, 感觉好傻啊. 一点都不泛型, 不是吗? 谁叫这是有类型的静态编译的语言呢?")]),t._v(" "),a("p",[t._v("嗯. 如果你不想声明函数签名, 那么也可以这样:")]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("mybar "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" bar\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Decorator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("mybar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mybar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello,"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"world!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("好吧, 看上去不是那么的漂亮, 但是 it does work. 看样子 Go 语言目前本身的特性无法做成像 Java 或 Python 那样, 对此, 只能多求 Go 语言多放糖了!")]),t._v(" "),a("h5",{attrs:{id:"_3-小结-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-小结-3"}},[t._v("#")]),t._v(" 3.小结")]),t._v(" "),a("p",[t._v("通过上面 Python 和 Go 修饰器的例子, 可以看到, 所谓的修饰器模式其实是在做下面的几件事.")]),t._v(" "),a("ul",[a("li",[t._v("表面上看, 修饰器模式就是"),a("strong",[t._v("扩展现有的一个函数的功能")]),t._v(", 让它可以干一些其他的事, 或是在现有的函数功能上再附加上一些别的功能.")]),t._v(" "),a("li",[t._v("除了可以感受到"),a("strong",[t._v("函数式编程")]),t._v("下的代码扩展能力, 我们还能感受到函数的互相和随意拼装带来的好处.")]),t._v(" "),a("li",[t._v("但是深入一下, 不难发现, Decorator 这个函数"),a("strong",[t._v("其实是可以修饰几乎所有的函数")]),t._v("的. 于是, 这种可以通用于其它函数的编程方式, 可以很容易地将一些非业务功能的, 属于控制类型的代码给抽象出来(所谓的控制类型的代码就是像 for-loop, 或是打日志, 或是函数路由, 或是求函数运行时间之类的非业务功能性的代码).")])]),t._v(" "),a("h4",{attrs:{id:"编程范式游记-6-面向对象编程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编程范式游记-6-面向对象编程"}},[t._v("#")]),t._v(" 编程范式游记(6)-面向对象编程")]),t._v(" "),a("p",[t._v('前面谈了函数式编程, 函数式编程总结起来就是把一些功能或逻辑代码通过函数拼装方式来组织的玩法. 这其中涉及最多的是函数, 也就是编程中的代码逻辑. 但代码中还是需要处理数据的, 这些就是所谓的 "状态", 函数式编程需要我们写出无状态的代码.')]),t._v(" "),a("p",[t._v("而这天下并不存在没有状态没有数据的代码, 如果函数式编程不处理状态这些东西, 那么"),a("strong",[t._v("状态")]),t._v("会放在什么地方呢? "),a("strong",[t._v("总是需要一个地方放这些数据的")]),t._v(".")]),t._v(" "),a("p",[t._v('对于状态和数据的处理, 有必要提一下 "面向对象编程"(Object-oriented programming, 缩写为 OOP)这个编程范式了. **面向对象的编程有三大特性: **​'),a("mark",[a("strong",[t._v("封装, 继承和多态")])]),t._v(".")]),t._v(" "),a("p",[t._v("面向对象编程是一种具有对象概念的程序编程范型, 同时也是一种程序开发的抽象方针. 它可能包含"),a("strong",[t._v("数据, 属性, 代码与方法")]),t._v(". 对象则指的是类的实例. 它将对象作为程序的基本单元, 将程序和数据封装其中, 以提高软件的可重用性, 灵活性和可扩展性, 对象里的程序可以访问及修改对象相关联的数据. 在面向对象编程里, 计算机程序会被设计成彼此相关的对象.")]),t._v(" "),a("p",[t._v("面向对象程序设计可以看作一种在程序中包含各种独立而又互相调用的对象的思想, 这与传统的思想刚好相反: 传统的程序设计主张将程序看作一系列函数的集合, 或者直接就是一系列对计算机下达的指令. "),a("strong",[t._v('面向对象程序设计中的每一个对象都应该能够接受数据, 处理数据并将数据传达给其它对象, 因此它们都可以被看作一个小型的"机器", 即对象')]),t._v(".")]),t._v(" "),a("p",[t._v("目前已经被证实的是, 面向对象程序设计推广了程序的灵活性和可维护性, 并且在大型项目设计中广为应用. 此外, 支持者声称面向对象程序设计要比以往的做法更加便于学习, 因为它能够让人们更简单地设计并维护程序, 使得程序更加便于分析, 设计, 理解.")]),t._v(" "),a("p",[t._v("现在, 几乎所有的主流语言都支持面向对象, 比如: Common Lisp, Python, C++, Objective-C, Smalltalk, Delphi, Java, Swift, C#, Perl, Ruby 与 PHP 等.")]),t._v(" "),a("p",[t._v("说起面向对象, 就不得不提由 Erich Gamma, Richard Helm, Ralph Johnson 和 John Vlissides 合作出版的《"),a("a",{attrs:{href:"https://book.douban.com/subject/1052241/",target:"_blank",rel:"noopener noreferrer"}},[t._v("设计模式: 可复用面向对象软件的基础"),a("OutboundLink")],1),t._v("》(Design Patterns - Elements of Reusable Object-Oriented Software)一书, 在此书中共收录了 23 种"),a("strong",[t._v("设计模式")]),t._v(".")]),t._v(" "),a("p",[t._v("这本书的 23 个经典的设计模式, 基本上就是说了两个面向对象的核心理念.")]),t._v(" "),a("blockquote",[a("p",[t._v("Program to an 'interface', not an 'implementation'.")])]),t._v(" "),a("ul",[a("li",[t._v("使用者不需要知道数据类型, 结构, 算法的细节.")]),t._v(" "),a("li",[t._v("使用者不需要知道实现细节, 只需要知道提供的接口.")]),t._v(" "),a("li",[t._v("利于抽象, 封装, 动态绑定, 多态.")]),t._v(" "),a("li",[t._v("符合面向对象的特质和理念.")])]),t._v(" "),a("blockquote",[a("p",[t._v("Favor 'object composition' over 'class inheritance'.")])]),t._v(" "),a("ul",[a("li",[t._v("继承需要给子类暴露一些父类的设计和实现细节.")]),t._v(" "),a("li",[t._v("父类实现的改变会造成子类也需要改变.")]),t._v(" "),a("li",[t._v("我们以为继承主要是为了代码重用, 但实际上在子类中需要重新实现很多父类的方法.")]),t._v(" "),a("li",[t._v("继承更多的应该是为了多态.")])]),t._v(" "),a("h5",{attrs:{id:"_1-示例一-拼装对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-示例一-拼装对象"}},[t._v("#")]),t._v(" 1.示例一:拼装对象")]),t._v(" "),a("p",[t._v("先来看一个示例, 假设有如下的描述:")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("四个物体")]),t._v(": 木头桌子, 木头椅子, 塑料桌子, 塑料椅子")]),t._v(" "),a("li",[a("strong",[t._v("四个属性")]),t._v(": 燃点, 密度, 价格, 重量")])]),t._v(" "),a("p",[t._v("那么, 怎么用面向对象的方式来设计我类呢?")]),t._v(" "),a("p",[t._v("参看下图:")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/0f0629ca36d5a6fe718068b21520d10d-20230731162102-m0uqrkn.png",alt:""}})]),t._v(" "),a("p",[t._v('图的左边是 "材质类" Material. 其属性有燃点和密度. 图的右边是 "家具类" Furniture. 其属性有价格和体积. 在 Furniture 中耦合了 Material. 而具体的 Material 是 Wood 还是 Plastic, 这是在构造对象的时候注入到 Furniture 里就好了. 这样在家具类中, 通过材料的密度属性和家具的体积属性就可以计算出重量属性.')]),t._v(" "),a("p",[t._v('这样设计的优点显而易见, 它能和现实世界相对应起来. 而且材料类是可以重用的. 这个模式也表现了面向对象的拼装数据的另一个精髓——喜欢组合, 而不是继承. 这个模式在设计模式里叫 "桥接模式".')]),t._v(" "),a("p",[t._v("和函数式编程来比较, "),a("mark",[a("strong",[t._v("函数式强调动词, 而面向对象强调名词, 面向对象更多的关注接口间的关系, 而通过多态来适配不同的具体实现")])]),t._v(".")]),t._v(" "),a("h5",{attrs:{id:"_2-示例二-拼装功能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-示例二-拼装功能"}},[t._v("#")]),t._v(" 2.示例二:拼装功能")]),t._v(" "),a("p",[t._v("再来看一个示例. 我们的需求是: 处理电商系统中的订单, 处理订单有一个关键的动作就是计算订单的价格. 有的订单需要打折, 有的则不打折.")]),t._v(" "),a("p",[t._v("在进行面向对象编程时, 假设用 Java 语言, 需要先写一个接口--- "),a("code",[t._v("BillingStrategy")]),t._v("​, 其中就是一个方法: "),a("code",[t._v("GetActPrice(double rawPrice)")]),t._v("​, 输入一个原始的价格, 输出一个根据相应的策略计算出来的价格.")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BillingStrategy")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GetActPrice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" rawPrice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("这个接口很简单, 只是对接口的抽象, 而与实现无关. 现在需要对这个接口进行实现.")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Normal billing strategy (unchanged price)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NormalStrategy")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BillingStrategy")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GetActPrice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" rawPrice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" rawPrice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Strategy for Happy hour (50% discount)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HappyHourStrategy")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BillingStrategy")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GetActPrice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" rawPrice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" rawPrice "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br")])]),a("p",[t._v("上面的代码实现了两个策略, 一个是不打折的: "),a("code",[t._v("NormalStrategy")]),t._v(", 一个是打了 5 折的: "),a("code",[t._v("HappyHourStrategy")]),t._v(".")]),t._v(" "),a("p",[t._v("于是先封装订单项 "),a("code",[t._v("OrderItem")]),t._v("​, 其包含了每个商品的原始价格和数量, 以及计算价格的策略.")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OrderItem")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Price")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Quantity")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BillingStrategy")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Strategy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OrderItem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" price"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" quantity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BillingStrategy")]),t._v(" strategy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("this"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),t._v("Name")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("this"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),t._v("Price")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" price"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("this"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),t._v("Quantity")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" quantity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("this"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),t._v("Strategy")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" strategy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("p",[t._v("然后, 在订单类 "),a("code",[t._v("Order")]),t._v("​ 中封装了 "),a("code",[t._v("OrderItem")]),t._v("​ 的列表, 即商品列表. 并在操作订单添加购买商品时, 加入一个计算价格的 "),a("code",[t._v("BillingStrategy")]),t._v("​.")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Order")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OrderItem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" orderItems "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OrderItem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BillingStrategy")]),t._v(" strategy "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NormalStrategy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" price"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" quantity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BillingStrategy")]),t._v(" strategy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        orderItems"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OrderItem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" price"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" quantity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" strategy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Payment of bill")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PayBill")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OrderItem")]),t._v(" item "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" orderItems"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          \n            actPrice "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),t._v("Strategy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("GetActPrice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("price "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("quantity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" actPrice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n          \n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s -- %f(%d) - %f"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n            \t\titem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("price"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("quantity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" actPrice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Total due: "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" sum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br")])]),a("p",[t._v("最终, 在 "),a("code",[t._v("PayBill()")]),t._v("​ 函数中, 把整个订单的价格明细和总价打印出来.")]),t._v(" "),a("p",[t._v("在上面这个示例中, 可以看到, 我把定价策略和订单处理的流程分开了. 这么做的好处是, 可以随时给不同的商品注入不同的价格计算策略, 这样一来就有很高的灵活度了. 剩下的事就交给运营人员来配置不同的商品使用什么样的价格计算策略了.")]),t._v(" "),a("p",[t._v("注意, 现实社会中, 订单价格计算会比这个事复杂得多, 比如: 有会员价, 有打折卡, 还有商品的打包价等, 而且还可以叠加不同的策略(叠加策略用前面说的函数式的 pipeline 或 decorator 就可以实现). 这里只是为了说明面向对象编程范式, 所以故意简单化了.")]),t._v(" "),a("p",[t._v("其实, 这个设计模式叫---策略模式. 我认为这是设计模式中最为经典的模式了, 其充分体现了面向对象编程的方式.")]),t._v(" "),a("h5",{attrs:{id:"_3-示例三-资源管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-示例三-资源管理"}},[t._v("#")]),t._v(" 3.示例三:资源管理")]),t._v(" "),a("p",[t._v("先看一段代码:")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("mutex m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("everythingOk")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unlock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("p",[t._v("可以看到, 上面这段代码是有问题的, 原因是, 那个 "),a("code",[t._v("if")]),t._v("​ 语句返回时没有把锁给 unlock 掉, 这会导致锁没有被释放. 如果要把代码写对, 需要在 return 前 unlock 一下.")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("mutex m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("everythingOk")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unlock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unlock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br")])]),a("p",[t._v("但是, 在所有的函数退出的地方都要加上 "),a("code",[t._v("m.unlock();")]),t._v("​ 语句, 这会让我们很难维护代码. 于是可以使用面向对象的编程模式, 先设计一个代理类.")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" lock_guard "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" \n\t\tmutex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("_m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lock_guard")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("_m")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" _m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lock_guard")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" _m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unlock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("然后, 代码就可以这样写了:")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("mutex m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tlock_guard "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("guard")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("everythingOk")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br")])]),a("p",[t._v('这个技术叫 RAII(Resource Acquisition Is Initialization),  是 C++ 中的一个利用了面向对象的技术. 这个设计模式叫"代理模式". 可以把一些控制资源分配和释放的逻辑交给这些代理类, 然后只需要关注业务逻辑代码了. 而且在业务逻辑代码中, 减少了这些和业务逻辑不相关的程序控制的代码.')]),t._v(" "),a("p",[t._v("从上面的代码中, 可以看到下面几个面向对象的事情.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("使用接口抽象了具体的实现类.")])]),t._v(" "),a("li",[t._v("**然后其它类耦合的是接口而不是实现类. 这就是多态, 其增加了程序的可扩展性. **")]),t._v(" "),a("li",[t._v("因为这就是"),a("strong",[t._v("接口编程")]),t._v(', 所谓接口也就是一种 "协议", 就像 HTTP 协议一样. 浏览器和后端的程序都依赖于这一种协议, 而不是具体实现(如果是依赖具体实现, 那么浏览器就要依赖后端的编程语言或中间件了, 这就太恶心了). 于是, 浏览器和后端的程序就完全解开依赖关系, 而去依赖于一个标准的协议.')]),t._v(" "),a("li",[t._v("这就是面向对象的编程范式的精髓! 同样也是 IoC/DIP(控制反转 / 依赖倒置)的本质.")])]),t._v(" "),a("h5",{attrs:{id:"_4-ioc控制反转"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-ioc控制反转"}},[t._v("#")]),t._v(" 4.IoC控制反转")]),t._v(" "),a("p",[t._v("关于 IoC 的的概念提出来已经很多年了, 其被用于一种面向对象的设计. 在这里再简单地回顾一下这个概念. 先谈技术, 再说管理.")]),t._v(" "),a("p",[t._v("话说有一个开关要控制一个灯的开和关这两个动作, 最常见也是最没有技术含量的实现会是这个样子:")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/b27991945ccc5d8437421d9b9f0f7139-20230731162102-91ne8md.png",alt:""}})]),t._v(" "),a("p",[t._v("然后有一天, 发现需要对灯泡扩展一下, 于是做了个抽象类:")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/16e9e8e6a7adb91c876ea40cc47f9e5d-20230731162102-vwryxvh.png",alt:""}})]),t._v(" "),a("p",[t._v("但是如果有一天, 我们发现这个开关可能还要控制别的不单单是灯泡的东西, 就会发现这个"),a("strong",[t._v("开关耦合了灯泡这种类别")]),t._v(", 非常不利于扩展, 于是反转控制出现了.")]),t._v(" "),a("p",[t._v("就像现实世界一样, "),a("strong",[t._v("造开关的工厂根本不关心要控制的东西是什么, 它只做一个开关应该做好的事, 就是把电接通, 把电断开(不管是手动的, 还是声控的, 还是光控, 还是遥控的)")]),t._v(" . 而造的各种各样的灯泡(不管是日光灯, 白炽灯)的工厂也不关心你用什么样的开关, 反正只管把灯的电源接口给做出来. 然后"),a("strong",[t._v("开关厂和电灯厂依赖于一个标准的通电和断电的接口")]),t._v(". 于是产生了 IoC 控制反转, 如下图.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/f03f2b9cf9498b051be6b75f767c065d-20230731162102-zvhowru.png",alt:""}})]),t._v(" "),a("p",[a("mark",[a("strong",[t._v("所谓控制反转的意思是, 开关从以前设备的专用开关, 转变到了控制电源的开关, 而以前的设备要反过来依赖于开关厂声明的电源连接接口. 只要符合开关厂定义的电源连接的接口, 这个开关可以控制所有符合这个电源连接接口的设备. 也就是说, 开关从依赖设备这种情况, 变成了设备反过来依赖于开关所定义的接口.")])])]),t._v(" "),a("p",[t._v("这样的例子在生活中太多见了. 比如说:")]),t._v(" "),a("ul",[a("li",[t._v('钱就是一个很好的例子. 以前大家都是 "以物易物", 所以在各种物品之前都需要相应的 "交易策略", 比如: 一头羊换 2 袋米, 一袋米换一斤猪后腿肉...这种换算太复杂了. 于是, "钱"就出来了, 所谓"钱", 其实就是一种交易协议, 所有的商品都依赖这个协议, 而不用再互相依赖了. 于是整个世界的运作就简单了很多.')]),t._v(" "),a("li",[t._v("在交易的过程中, 卖家向买家卖东西, 一手交钱一手交货, 所以基本上来说卖家和买家必需强耦合(必需见面). 这个时候, 银行出来做担保, 买家把钱先垫到银行, 银行让卖家发货, 买家验货后, 银行再把钱打给卖家. 这就是反转控制. 买卖双方把对对方的直接依赖和控制, 反转到了让对方来依赖一个标准的交易模型的接口. 股票交易也是一样的, 证交所就是买卖双方的标准交易模型接口.")]),t._v(" "),a("li",[t._v("上面这个例子, 可能还不明显, 再举一个例子. 海尔公司作为一个电器制商需要把自己的商品分销到全国各地, 但是不同的分销渠道有不同的玩法, 于是派出了各种销售代表玩不同的玩法. 随着渠道越来越多, 发现每增加一个渠道就要新增一批人和一个新的流程, 严重耦合并依赖各渠道商的玩法. 实在受不了了, 于是制定业务标准, 开发分销信息化系统, 只有符合这个标准的渠道商才能成为海尔的分销商. "),a("strong",[t._v("让各个渠道商反过来依赖自己标准")]),t._v(". 反转了控制, 倒置了依赖.")])]),t._v(" "),a("p",[t._v("这个思维方式其实还深远地影响了很多东西, 比如我们的"),a("strong",[t._v("系统架构")]),t._v(".")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("云计算平台中有很多的云产品线")]),t._v(". 一些底层服务的开发团队只管开发底层的技术, 然后什么也不管了, 就交给上层的开发人员. 上层开发人员在底层团队开发出来的产品上面开发各种管理这个底层资源的东西, 比如: 生产底层资源的业务, 底层资源的控制台, 底层资源的监控系统. 然而随着接入的资源越来越多, 上层为各个云资源控制生产, 开发控制台和监控的团队, 完全干不过来了. 这个时候依赖倒置和反转控制又可以解决问题了. 为了有统一体验, "),a("strong",[t._v("各个云产品线需要遵从一定的协议或规范来开发")]),t._v(". 比如每个云产品团队需要按照标准定义相关资源的生命周期管理, 提供控制台, 接入整体监控系统, 通过标准的协议开发控制系统.")]),t._v(" "),a("li",[t._v("集中式处理电子商务订单的流程. 各个垂直业务线都需要通过这个平台来处理自己的交易业务, 但是垂直业务线上的个性化需求太多. 于是这个技术平台开始发现, 对来自各个业务方的需求应接不暇, 各种变态需求严重干扰系统, 各种技术决策越来越不好做, 导致需求排期排不过来. 这个时候也可以使用依赖倒置和反转控制的思想来解决问题: 开发一个"),a("strong",[t._v("插件模型, 工作流引擎和 Pub/Sub 系统")]),t._v(", 让业务方的个性化需求支持以插件的方式插入订单流程中. 业务方自己的数据存在自己的库中, 业务逻辑也不要侵入系统, 并可以使用工作流引擎或 Pub/Sub 的协议标准来自己定义工作流的各个步骤(甚至把工作流引擎的各个步骤的 decider 交给各个业务方自行处理). 让各个业务方来依赖于标准插件和工作流接口, 反转控制, 让它们来控制系统, 依赖倒置, 让它们来依赖标准.")])]),t._v(" "),a("p",[t._v("上面这些我想说什么? 我想说的是:")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("我们每天都在标准化和定制化中纠结")]),t._v(". 我们痛苦于哪些应该是平台要做的, 哪些应该要甩出去的.")]),t._v(" "),a("li",[t._v("这里面会出现大量的与业务无关的软件或中间件, 包括协议, 数据, 接口...")]),t._v(" "),a("li",[t._v("通过面向对象的这些方式, 可以通过抽象来解耦, 通过中间件来解耦, 这样可以降低软件的复杂度.")])]),t._v(" "),a("p",[t._v("总而言之, 就是想"),a("strong",[t._v("通过一种标准来让业务更为规范")]),t._v(".")]),t._v(" "),a("h5",{attrs:{id:"_5-小结-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-小结-3"}},[t._v("#")]),t._v(" 5.小结")]),t._v(" "),a("p",[t._v("不过, 我们也需要知道面向对象的优缺点.")]),t._v(" "),a("p",[a("strong",[t._v("优点")])]),t._v(" "),a("ul",[a("li",[t._v("能和真实的世界交相辉映, 符合人的直觉.")]),t._v(" "),a("li",[t._v("面向对象和数据库模型设计类型, 更多地关注对象间的模型设计.")]),t._v(" "),a("li",[t._v('强调于"名词"而不是"动词", 更多地关注对象和对象间的接口.')]),t._v(" "),a("li",[t._v("根据业务的特征形成一个个高内聚的对象, 有效地分离了抽象和具体实现, 增强了可重用性和可扩展性.")]),t._v(" "),a("li",[t._v("拥有大量非常优秀的设计原则和设计模式.")]),t._v(" "),a("li",[t._v("S.O.L.I.D(单一功能, 开闭原则, 里氏替换, 接口隔离以及依赖反转, 是面向对象设计的五个基本原则), IoC/DIP...")])]),t._v(" "),a("p",[a("strong",[t._v("缺点")])]),t._v(" "),a("ul",[a("li",[t._v("代码都需要附着在一个类上, 从一侧面上说, 其鼓励了类型.")]),t._v(" "),a("li",[t._v('代码需要通过对象来达到抽象的效果, 导致了相当厚重的"代码粘合层".')]),t._v(" "),a("li",[t._v("因为太多的封装以及对状态的鼓励, 导致了大量不透明并在并发下出现很多问题.")])]),t._v(" "),a("p",[t._v("还是好多人并不是喜欢面向对象, 尤其是喜欢函数式和泛型那些人, 似乎都是非常讨厌面向对象的. 通过对象来达到抽象结果, 把代码分散在不同的类里面, 然后要让它们执行起来, 就需要把这些类粘合起来. 所以它另外一方面鼓励相当厚重的代码黏合层(代码黏合层就是把代码黏合到这里面).")]),t._v(" "),a("p",[t._v("在 Java 里有很多注入方式, 像 Spring 那些注入, 鼓励黏合, "),a("strong",[t._v("导致了大量的封装, 完全不知道里面在干什么事情")]),t._v(". 而且封装屏蔽了细节, 具体发生啥事你还不知道. 这些都是面向对象不太好的地方.")]),t._v(" "),a("h4",{attrs:{id:"编程范式游记-7-基于原型的编程范式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编程范式游记-7-基于原型的编程范式"}},[t._v("#")]),t._v(" 编程范式游记(7)-基于原型的编程范式")]),t._v(" "),a("p",[t._v("基于"),a("strong",[t._v("原型")]),t._v("(prototype)的编程其实也是面向对象编程的一种方式. 没有 class 化的, 直接使用对象. 又叫基于实例的编程. 其主流的语言就是 JavaScript. 与传统的面对象编程的比较如下.")]),t._v(" "),a("ul",[a("li",[t._v("在基于类的编程当中, 对象总共有两种类型. 类定义了对象的"),a("strong",[t._v("基本布局和函数特性")]),t._v(', 而接口是 "可以使用的" 对象, 它基于特定类的样式. 在此模型中, 类表现为行为和结构的集合, 对所有接口来说这些类的行为和结构都是相同的. 因而区分规则首先是基于行为和结构, 而后才是状态.')]),t._v(" "),a("li",[t._v("原型编程的主张者经常争论说, 基于类的语言提倡"),a("strong",[t._v("使用一个关注分类和类之间关系的开发模型")]),t._v(". 与此相对, 原型编程看起来提倡程序员关注一系列对象实例的行为, 而之后才关心如何将这些对象划分到最近的使用方式相似的原型对象, 而不是分成类.")])]),t._v(" "),a("p",[t._v("因为如此, 很多基于原型的系统"),a("strong",[t._v("提倡运行时原型的修改")]),t._v(", 而只有极少数基于类的面向对象系统(比如第一个动态面向对象的系统 Smalltalk)允许类在程序运行时被修改.")]),t._v(" "),a("ul",[a("li",[t._v("在基于类的语言中, 一个新的实例通过类构造器和构造器可选的参数来构造, 结果实例由类选定的行为和布局创建模型.")]),t._v(" "),a("li",[t._v("在基于原型的系统中构造对象有两种方法, 通过复制已有的对象或者通过扩展空对象创建. 很多基于原型的系统提倡运行时原型的修改, 而基于类的面向对象系统只有动态语言允许类在运行时被修改(Common Lisp, Dylan, Objective-C, Perl, Python, Ruby 和 Smalltalk).")])]),t._v(" "),a("h5",{attrs:{id:"_1-javascript的原型概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-javascript的原型概念"}},[t._v("#")]),t._v(" 1.JavaScript的原型概念")]),t._v(" "),a("p",[t._v("这里主要以 JavaScript 举例, 面向对象里面要有个 Class. 但是 JavaScript 觉得不是这样的, 它就是要基于原型编程, 就不要 Class, 就"),a("strong",[t._v("直接在对象上改")]),t._v("就行了. 基于编程的修改, 直接对类型进行修改.")]),t._v(" "),a("p",[t._v("先来看一个示例.")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("one")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("two")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" bar "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("three")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("每个对象都有一个 "),a("code",[t._v("__proto__")]),t._v('​ 的属性, 这个就是"原型". 对于上面的两个对象, 如果把 '),a("code",[t._v("foo")]),t._v("​ 赋值给 "),a("code",[t._v("bar.__proto__")]),t._v("​, 那就意味着, "),a("code",[t._v("bar")]),t._v("​ 的原型就成了 "),a("code",[t._v("foo")]),t._v("​ 的.")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("bar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("proto"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// foo is now the prototype of bar.")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("于是就可以在 "),a("code",[t._v("bar")]),t._v("​ 里面访问 "),a("code",[t._v("foo")]),t._v("​ 的属性了.")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If we try to access foo's properties from bar ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// from now on, we'll succeed. ")]),t._v("\nbar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("one "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Resolves to 1.")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The child object's properties are also accessible.")]),t._v("\nbar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("three "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Resolves to 3.")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Own properties shadow prototype properties")]),t._v("\nbar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfoo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// unaffected, resolves to "foo"')]),t._v("\nbar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// Resolves to "bar"')]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br")])]),a("p",[t._v("需要解释一下 JavaScript 的两个东西, 一个是 "),a("code",[t._v("__proto__")]),t._v(", 另一个是 "),a("code",[t._v("prototype")]),t._v(", 这两个东西很容易混淆. 这里说明一下:")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("​"),a("code",[t._v("__proto__")]),t._v("​")]),t._v("  主要是安放在一个实际的对象中, 用它来产生一个链接, 一个原型链, 用于寻找方法名或属性, 等等.")]),t._v(" "),a("li",[a("strong",[t._v("​"),a("code",[t._v("prototype")]),t._v("​")]),t._v(" 是用 "),a("code",[t._v("new")]),t._v(" 来创建一个对象时构造 "),a("code",[t._v("__proto__")]),t._v(" 用的. 它是构造函数的一个属性.")])]),t._v(" "),a("p",[t._v("在 JavaScript 中, 对象有两种表现形式, 一种是 "),a("code",[t._v("Object")]),t._v("​ (ES5 关于 Object 的文档), 一种是 "),a("code",[t._v("Function")]),t._v("​ (ES5 关于 Function 的文档).")]),t._v(" "),a("p",[t._v("可以简单地认为, "),a("code",[t._v("__proto__")]),t._v("​ 是所有对象用于"),a("strong",[t._v("链接原型的一个指针")]),t._v(", 而 "),a("code",[t._v("prototype")]),t._v("​ 则是 Function 对象的属性, 其主要是用来当需要 new 一个对象时让 "),a("code",[t._v("__proto__")]),t._v("​ 指针所指向的地方. 对于超级对象 "),a("code",[t._v("Function")]),t._v("​ 而言, "),a("code",[t._v("Function.__proto__")]),t._v("​ 就是 "),a("code",[t._v("Function.prototype")]),t._v("​.")]),t._v(" "),a("p",[t._v("比如有如下的代码:")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("calculate")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("z")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("y")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("__proto__")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" a\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("y")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("__proto__")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" a\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// call the inherited method")]),t._v("\nb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("calculate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 60")]),t._v("\nc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("calculate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("40")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 80")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br")])]),a("p",[t._v('其中的"原型链"如下所示:')]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/0ac331cfd2ed54576e5b75c8b45918f6-20230731162102-w3n0a80.png",alt:""}})]),t._v(" "),a("p",[t._v("注意: ES5 中, 规定原型继承需要使用 "),a("code",[t._v("Object.create()")]),t._v(" 函数. 如下所示:")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("y")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("y")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("好了, 再来看一段代码:")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一种构造函数写法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("y")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 修改 Foo 的 prototype, 加入一个成员变量 x")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 修改 Foo 的 prototype, 加入一个成员函数 calculate")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("calculate")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("z")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 现在, 我们用 Foo 这个原型来创建 b 和 c")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用原型中的方法, 可以得到正确的值")]),t._v("\nb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("calculate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 60")]),t._v("\nc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("calculate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("40")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 80")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br")])]),a("p",[t._v("那么, 在内存中的布局是怎么样的呢? 大概是下面这个样子.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/485b731fe9af12ca2bf151de8a06a79b-20230731162102-i53nda4.png",alt:""}})]),t._v(" "),a("p",[t._v("这个图应该可以让你很好地看明白 "),a("code",[t._v("__proto__")]),t._v(" 和 "),a("code",[t._v("prototype")]),t._v(" 的差别了.")]),t._v(" "),a("p",[t._v("可以测试一下:")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("mark"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("mark"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n \nb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("mark"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("mark"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" Foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("mark"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n \nb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("calculate "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("mark"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("calculate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("calculate "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("calculate "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("p",[t._v("这里需要说明的是 "),a("code",[t._v("Foo.prototype")]),t._v("​ 自动创建了一个属性 "),a("code",[t._v("constructor")]),t._v("​, 这是一个指向函数自己的一个 reference. 这样一来, 对于实例 "),a("code",[t._v("b")]),t._v("​ 或 "),a("code",[t._v("c")]),t._v("​ 来说, 就能访问到这个继承的 "),a("code",[t._v("constructor")]),t._v("​ 了 **. **")]),t._v(" "),a("p",[t._v("有了这些基本概念, 就可以讲一下 JavaScript 的面向对象编程了.")]),t._v(" "),a("h5",{attrs:{id:"_2-javascript原型编程的面向对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-javascript原型编程的面向对象"}},[t._v("#")]),t._v(" 2.JavaScript原型编程的面向对象")]),t._v(" "),a("p",[t._v("再来重温一下上面讲述的内容:")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hao Chen"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("sayHello")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hi, I am "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "Hao Chen"')]),t._v("\np"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "Hi, I am Hao Chen"')]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("p",[t._v("在上面这个例子中:")]),t._v(" "),a("ul",[a("li",[t._v("先生成了一个空的函数对象 "),a("code",[t._v("Person()")]),t._v("​;")]),t._v(" "),a("li",[t._v("然后将这个空的函数对象 "),a("code",[t._v("new")]),t._v(" 出另一个对象, 存在 "),a("code",[t._v("p")]),t._v(" 中;")]),t._v(" "),a("li",[t._v("这时再改变 "),a("code",[t._v("Person.prototype")]),t._v(", 让其有一个 "),a("code",[t._v("name")]),t._v(" 的属性和一个 "),a("code",[t._v("sayHello()")]),t._v(" 的方法;")]),t._v(" "),a("li",[t._v("我们发现, 另外那个 "),a("code",[t._v("p")]),t._v(" 的对象也跟着一起改变了.")])]),t._v(" "),a("p",[t._v("注意一下,")]),t._v(" "),a("ul",[a("li",[t._v("当创建 "),a("code",[t._v("function Person(){}")]),t._v(" 时, "),a("code",[t._v("Person.__proto__")]),t._v(" 指向 "),a("code",[t._v("Function.prototype")]),t._v(";")]),t._v(" "),a("li",[t._v("当创建 "),a("code",[t._v("var p = new Person()")]),t._v(" 时, "),a("code",[t._v("p.__proto__")]),t._v(" 指向 "),a("code",[t._v("Person.prototype")]),t._v(";")]),t._v(" "),a("li",[t._v("当修改了 "),a("code",[t._v("Person.prototype")]),t._v(" 的内容后, "),a("code",[t._v("p.__proto__")]),t._v(" 的内容也就被改变了.")])]),t._v(" "),a("p",[t._v('好了, 再来看一下"原型编程"中面向对象的编程玩法.')]),t._v(" "),a("p",[t._v("首先定义一个 "),a("code",[t._v("Person")]),t._v("​ 类.")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Define human class")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("Person")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("fullName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" email")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fullName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fullName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("email "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" email"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("speak")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"I speak English!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("introduction")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hi, I am "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fullName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("p",[t._v("上面这个对象中, 包含了:")]),t._v(" "),a("ul",[a("li",[t._v("属性: "),a("code",[t._v("fullName")]),t._v("​ 和 "),a("code",[t._v("email")]),t._v("​;")]),t._v(" "),a("li",[t._v("方法: "),a("code",[t._v("speak()")]),t._v("​ 和 "),a("code",[t._v("introduction()")]),t._v("​.")])]),t._v(" "),a("p",[t._v("其实, 所谓的方法也是属性.")]),t._v(" "),a("p",[t._v("然后可以定义一个 "),a("code",[t._v("Student")]),t._v("​ 对象.")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Define Student class")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("Student")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("fullName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" email"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" school"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" courses")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n \n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fullName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" email"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Initialize our Student properties")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("school "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" school"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("courses "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" courses"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// override the "introduction" method')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("introduction")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hi, I am "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fullName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" \n\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('". I am a student of "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("school "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" \n\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('", I study "')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("courses "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// Add a "exams" method')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("takeExams")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"This is my exams time!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br")])]),a("p",[t._v("在上面的代码中:")]),t._v(" "),a("ul",[a("li",[t._v("使用了 "),a("code",[t._v("Person.call(this, fullName, email)")]),t._v(", "),a("code",[t._v("call()")]),t._v(" 或 "),a("code",[t._v("apply()")]),t._v(" 都是为了动态改变 "),a("code",[t._v("this")]),t._v(" 所指向的对象的内容而出现的. 这里的 "),a("code",[t._v("this")]),t._v(" 就是 "),a("code",[t._v("Student")]),t._v(".")]),t._v(" "),a("li",[t._v("上面的例子中, 重载了 "),a("code",[t._v("introduction()")]),t._v("​ 方法, 并新增加了一个 "),a("code",[t._v("takeExams()")]),t._v("​ 的方法.")])]),t._v(" "),a("p",[t._v("虽然这样定义了 "),a("code",[t._v("Student")]),t._v("​, 但是它还没有和 "),a("code",[t._v("Person")]),t._v("​ 发生继承关系. 为了要让它们发生关系, 就需要修改 "),a("code",[t._v("Student")]),t._v("​ 的原型.")]),t._v(" "),a("p",[t._v("可以简单粗暴地做赋值: "),a("code",[t._v("Student.__proto__ = Person.prototype")]),t._v("​, 但是这太粗暴了.")]),t._v(" "),a("p",[t._v("还是使用比较规范的方式:")]),t._v(" "),a("ul",[a("li",[t._v("先用 "),a("code",[t._v("Object.create()")]),t._v("​ 来将 "),a("code",[t._v("Person.prototype")]),t._v("​ 和 "),a("code",[t._v("Student.prototype")]),t._v("​ 关联上.")]),t._v(" "),a("li",[t._v("然后修改一下构造函数 "),a("code",[t._v("Student.prototype.constructor = Student;")]),t._v("​.")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Create a Student.prototype object that inherits ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// from Person.prototype.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// Set the "constructor" property to refer to Student')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Student"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("这样就可以这样使用了.")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" student "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hao Chen"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n\t\t\t\t\t\t  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"haoel@hotmail.com"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t\t\t\t\t  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"XYZ University"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n\t\t\t\t\t\t  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Computer Science"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstudent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("introduction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   \nstudent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("speak")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     \nstudent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("takeExams")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Check that instanceof works correctly")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("student "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true ")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("student "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br")])]),a("p",[t._v("上述就是基于原型的面向对象编程的玩法了.")]),t._v(" "),a("blockquote",[a("p",[t._v('注: 在 ECMAScript 标准的第四版开始寻求使 JavaScript 提供基于类的构造, 且 ECMAScript 第六版有提供 "class"(类) 作为原有的原型架构之上的语法糖, 提供构建对象与处理继承时的另一种语法.')])]),t._v(" "),a("h5",{attrs:{id:"_3-小结-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-小结-4"}},[t._v("#")]),t._v(" 3.小结")]),t._v(" "),a("p",[t._v("可以看到, 这种玩法就是一种"),a("strong",[t._v("委托的方式")]),t._v('. 在使用委托的基于原型的语言中, 运行时语言可以"仅仅通过序列的指针找到匹配"这样的方式来定位属性或者寻找正确的数据. 所有这些创建行为共享的行为需要的是委托指针.')]),t._v(" "),a("p",[t._v('不像是基于类的面向对象语言中类和接口的关系, 原型和它的分支之间的关系并不要求子对象有相似的内存结构, 因为如此, 子对象可以继续修改而无需像基于类的系统那样整理结构. 还有一个要提到的地方是, 不仅仅是数据, 方法也能被修改. 因为这个原因, 大多数基于原型的语言把数据和方法提作 "slots".')]),t._v(" "),a("p",[t._v("这种在对象里面直接修改的玩法, 虽然这个特性可以带来运行时的灵活性, 我们可以在运行时修改一个 prototype, 给它增加甚至删除属性和方法. 但是其带来了执行的"),a("strong",[t._v("不确定性")]),t._v(", 也有安全性的问题, 而代码还变得不可预测, 这有点黑科技的味道了. 因为这些不像静态类型系统, 没有一个不可变的契约对代码的确定性有保证, 所以需要使用者来自己保证.")]),t._v(" "),a("h4",{attrs:{id:"编程范式游记-8-go语言的委托模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编程范式游记-8-go语言的委托模式"}},[t._v("#")]),t._v(" 编程范式游记(8)-Go语言的委托模式")]),t._v(" "),a("p",[t._v("再来看 Go 语言这个模式, Go 语言的这个模式挺好玩儿的. 声明一个 struct, 跟 C 很一样, 然后直接把这个 struct 类型放到另一个 struct 里.")]),t._v(" "),a("h5",{attrs:{id:"_1-委托的简单示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-委托的简单示例"}},[t._v("#")]),t._v(" 1.委托的简单示例")]),t._v(" "),a("p",[t._v("来看几个示例:")]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Widget "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    X"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Y "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Label "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Widget        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Embedding (delegation)")]),t._v("\n    Text   "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Aggregation")]),t._v("\n    X "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Override ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("label Label"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Paint")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// [0xc4200141e0] - Label.Paint("State")')]),t._v("\n    fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[%p] - Label.Paint(%q)\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n    \t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("label"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" label"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br")])]),a("p",[t._v("上面,")]),t._v(" "),a("ul",[a("li",[t._v("声明了一个 "),a("code",[t._v("Widget")]),t._v("​, 其有 "),a("code",[t._v("X")]),t._v("​,"),a("code",[t._v("Y")]),t._v("​;")]),t._v(" "),a("li",[t._v("然后用它来声明一个 "),a("code",[t._v("Label")]),t._v(", 直接把 "),a("code",[t._v("Widget")]),t._v(" 委托进去;")]),t._v(" "),a("li",[t._v("然后再给 "),a("code",[t._v("Label")]),t._v(" 声明并实现了一个 "),a("code",[t._v("Paint()")]),t._v(" 方法.")])]),t._v(" "),a("p",[t._v("于是就可以这样编程了:")]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("label "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" Label"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Widget"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"State"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// X=100, Y=10, Text=State, Widget.X=10")]),t._v("\nfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"X=%d, Y=%d, Text=%s Widget.X=%d\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n\tlabel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("X"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" label"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" label"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n\tlabel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Widget"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("X"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {Widget:{X:10 Y:10} Text:State X:100} ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {{10 10} State 100}")]),t._v("\nfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%+v\\n%v\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" label"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" label"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n \nlabel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Paint")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("p",[t._v("可以看到, 如果有成员变量重名, 则需要手动地解决冲突.")]),t._v(" "),a("p",[t._v("继续扩展代码. 先来一个 "),a("code",[t._v("Button")]),t._v("​:")]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Button "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Label "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Embedding (delegation)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NewButton")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" text "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" Button "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Button"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Label"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Widget"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("button Button"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Paint")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Override")]),t._v("\n    fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[%p] - Button.Paint(%q)\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n    \t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("button"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" button"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("button Button"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Click")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[%p] - Button.Click()\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("button"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br")])]),a("p",[t._v("再来一个 "),a("code",[t._v("ListBox")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" ListBox "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Widget          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Embedding (delegation)")]),t._v("\n    Texts  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Aggregation")]),t._v("\n    Index  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Aggregation")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("listBox ListBox"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Paint")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[%p] - ListBox.Paint(%q)\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n    \t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("listBox"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" listBox"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Texts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("listBox ListBox"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Click")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[%p] - ListBox.Click()\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("listBox"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("p",[t._v("然后, 声明两个接口用于"),a("strong",[t._v("多态")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Painter "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Paint")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Clicker "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Click")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("于是就可以这样泛型地使用(注意其中的两个 for 循环):")]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("button1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" Button"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Label"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Widget"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("70")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"OK"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nbutton2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NewButton")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("70")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Cancel"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nlistBox "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" ListBox"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Widget"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("40")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"AL"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"AK"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"AZ"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"AR"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \nfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//[0xc4200142d0] - Label.Paint("State")')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//[0xc420014300] - ListBox.Paint(["AL" "AK" "AZ" "AR"])')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//[0xc420014330] - Button.Paint("OK")')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//[0xc420014360] - Button.Paint("Cancel")')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" painter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("range")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("Painter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("label"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" listBox"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" button1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" button2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tpainter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Paint")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \nfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[0xc420014450] - ListBox.Click()")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[0xc420014480] - Button.Click()")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[0xc4200144b0] - Button.Click()")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" widget "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("range")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("label"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" listBox"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" button1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" button2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" clicker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ok "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" widget"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Clicker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" ok "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \tclicker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Click")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br")])]),a("h5",{attrs:{id:"_2-一个undo的委托重构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-一个undo的委托重构"}},[t._v("#")]),t._v(" 2.一个Undo的委托重构")]),t._v(" "),a("p",[t._v("上面这个是 Go 语中的"),a("strong",[t._v("委托和接口多态")]),t._v("的编程方式, 其实是面向对象和原型编程综合的玩法. 这个玩法可不可以玩得更有意思呢? 这是可以的.")]),t._v(" "),a("p",[t._v("首先, 先声明一个数据容器, 其中有 "),a("code",[t._v("Add()")]),t._v("​, "),a("code",[t._v("Delete()")]),t._v("​ 和 "),a("code",[t._v("Contains()")]),t._v("​ 方法. 还有一个转字符串的方法.")]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" IntSet "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    data "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NewIntSet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" IntSet "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" IntSet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("set "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("IntSet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("set "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("IntSet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Delete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("delete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("set "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("IntSet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Contains")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("set "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("IntSet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Satisfies fmt.Stringer interface")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{}"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    ints "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("range")]),t._v(" set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        ints "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ints"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    sort"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Ints")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ints"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    parts "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ints"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("range")]),t._v(" ints "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        parts "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sprint")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" strings"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Join")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('","')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"}"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br"),a("span",{staticClass:"line-number"},[t._v("31")]),a("br"),a("span",{staticClass:"line-number"},[t._v("32")]),a("br"),a("span",{staticClass:"line-number"},[t._v("33")]),a("br"),a("span",{staticClass:"line-number"},[t._v("34")]),a("br"),a("span",{staticClass:"line-number"},[t._v("35")]),a("br")])]),a("p",[t._v("我们如下使用这个数据容器:")]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("ints "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NewIntSet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("range")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ints"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ints"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("range")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ints"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Contains")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    ints"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Delete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ints"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("p",[t._v("这个数据容器平淡无奇, 我们想给它加一个 Undo 的功能. 可以这样来:")]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" UndoableIntSet "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Poor style")]),t._v("\n    IntSet    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Embedding (delegation)")]),t._v("\n    functions "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NewUndoableIntSet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" UndoableIntSet "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" UndoableIntSet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NewIntSet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("set "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("UndoableIntSet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Contains")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n        set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("functions "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("functions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Delete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("functions "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("functions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("set "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("UndoableIntSet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Delete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Contains")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("delete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("functions "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("functions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("functions "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("functions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("set "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("UndoableIntSet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Undo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("functions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" errors"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("New")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"No functions to undo"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    index "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("functions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" function "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("functions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" function "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("functions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Free closure for garbage collection")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("functions "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("functions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br"),a("span",{staticClass:"line-number"},[t._v("31")]),a("br"),a("span",{staticClass:"line-number"},[t._v("32")]),a("br"),a("span",{staticClass:"line-number"},[t._v("33")]),a("br"),a("span",{staticClass:"line-number"},[t._v("34")]),a("br"),a("span",{staticClass:"line-number"},[t._v("35")]),a("br"),a("span",{staticClass:"line-number"},[t._v("36")]),a("br"),a("span",{staticClass:"line-number"},[t._v("37")]),a("br"),a("span",{staticClass:"line-number"},[t._v("38")]),a("br"),a("span",{staticClass:"line-number"},[t._v("39")]),a("br")])]),a("p",[t._v("于是就可以这样使用了:")]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("ints "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NewUndoableIntSet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("range")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ints"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ints"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("range")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ints"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Contains")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    ints"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Delete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ints"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" err "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" ints"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Undo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" err "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ints"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br")])]),a("p",[t._v("但是, 需要注意的是, 我们用了一个新的 "),a("code",[t._v("UndoableIntSet")]),t._v(" 几乎重写了所有的 "),a("code",[t._v("IntSet")]),t._v(' 和 "写" 相关的方法, 这样就可以把操作记录下来, 然后 '),a("strong",[t._v("Undo")]),t._v(" 了.")]),t._v(" "),a("p",[t._v("但是可能别的类也需要 Undo 的功能, 是不是要重写所有的需要这个功能的类啊? 这样的代码类似, 就是因为数据容器不一样, 我就要去重写它们, 这太二了.")]),t._v(" "),a("p",[t._v("能不能利用前面学到的泛型编程, 函数式编程, IoC 等范式来把这个事干得好一些呢? 当然是可以的.")]),t._v(" "),a("p",[t._v("如下所示:")]),t._v(" "),a("ul",[a("li",[t._v("先声明一个 "),a("code",[t._v("Undo[]")]),t._v("​ 的函数数组(其实是一个栈).")]),t._v(" "),a("li",[t._v("并实现一个通用 "),a("code",[t._v("Add()")]),t._v(". 其需要一个函数指针, 并把这个函数指针存放到 "),a("code",[t._v("Undo[]")]),t._v(" 函数数组中.")]),t._v(" "),a("li",[t._v("在 "),a("code",[t._v("Undo()")]),t._v("​ 的函数中, 会遍历 "),a("code",[t._v("Undo[]")]),t._v("​ 函数数组, 并执行之, 执行完后就弹栈.")])]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Undo "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("undo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("Undo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("function "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("undo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("undo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" function"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("undo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("Undo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Undo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    functions "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("undo\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("functions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" errors"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("New")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"No functions to undo"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    index "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("functions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" function "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" functions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" function "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        functions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Free closure for garbage collection")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("undo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" functions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br")])]),a("p",[t._v("那么我们的 "),a("code",[t._v("IntSet")]),t._v(" 就可以改写成如下的形式:")]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" IntSet "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    data "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v("\n    undo Undo\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NewIntSet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" IntSet "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" IntSet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[t._v("然后在其中的 "),a("code",[t._v("Add")]),t._v(" 和 "),a("code",[t._v("Delete")]),t._v("中实现 Undo 操作.")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Add")]),t._v(" 操作时加入 "),a("code",[t._v("Delete")]),t._v(" 操作的 Undo.")]),t._v(" "),a("li",[a("code",[t._v("Delete")]),t._v(" 操作时加入 "),a("code",[t._v("Add")]),t._v(" 操作的 Undo.")])]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("set "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("IntSet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Contains")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n        set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("undo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Delete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("undo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("set "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("IntSet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Delete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Contains")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("delete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("undo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("undo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("set "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("IntSet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Undo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("undo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Undo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("set "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("IntSet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Contains")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br")])]),a("p",[t._v("再次看到, Go 语言的 Undo 接口把 Undo 的流程给抽象出来, 而要怎么 Undo 的事交给了业务代码来维护(通过注册一个 Undo 的方法). 这样在 Undo 的时候, 就可以回调这个方法来做与业务相关的 Undo 操作了.")]),t._v(" "),a("h5",{attrs:{id:"_3-小结-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-小结-5"}},[t._v("#")]),t._v(" 3.小结")]),t._v(" "),a("p",[t._v("这是不是和最一开始的 C++ 的泛型编程很像? 也和 map, reduce, filter 这样的只关心控制流程, 不关心业务逻辑的做法很像? 而且, 一开始用一个 UndoableIntSet 来包装 "),a("code",[t._v("IntSet")]),t._v("​ 类, 到反过来在 "),a("code",[t._v("IntSet")]),t._v("​ 里依赖 "),a("code",[t._v("Undo")]),t._v("​ 类, 这就是控制反转 IoC.")]),t._v(" "),a("h4",{attrs:{id:"编程范式游记-9-编程的本质"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编程范式游记-9-编程的本质"}},[t._v("#")]),t._v(" 编程范式游记(9)-编程的本质")]),t._v(" "),a("p",[t._v("前面讲了各式各样的不同语言的编程范式, 从 C 语言的泛型, 讲到 C++ 的泛型, 再讲到函数式的 Map/Reduce/Filter, 以及 Pipeline 和 Decorator, 还有面向对象的多态通过依赖接口而不是实现的桥接模式, 策略模式和代理模式, 以及面向对象的 IoC, 还有 JavaScript 的原型编程在运行时对对象原型进行修改, 以及 Go 语言的委托模式...")]),t._v(" "),a("p",[t._v("所有的这一切, 不知道你是否看出一些端倪, 或是其中的一些"),a("strong",[t._v("共性")]),t._v("来了?")]),t._v(" "),a("h5",{attrs:{id:"_1-两篇论文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-两篇论文"}},[t._v("#")]),t._v(" 1.两篇论文")]),t._v(" "),a("p",[t._v("1976 年, 瑞士计算机科学家, Algol W, Modula, Oberon 和 Pascal 语言的设计师 "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Niklaus_Wirth",target:"_blank",rel:"noopener noreferrer"}},[t._v("Niklaus Emil Wirth"),a("OutboundLink")],1),t._v(" 写了一本非常经典的书《"),a("a",{attrs:{href:"http://www.ethoberon.ethz.ch/WirthPubl/AD.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Algorithms + Data Structures = Programs"),a("OutboundLink")],1),t._v("》, 即算法 + 数据结构 = 程序.")]),t._v(" "),a("p",[t._v("1979 年, 英国逻辑学家和计算机科学家 "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Robert_Kowalski",target:"_blank",rel:"noopener noreferrer"}},[t._v("Robert Kowalski"),a("OutboundLink")],1),t._v(" 发表论文 "),a("a",{attrs:{href:"https://www.doc.ic.ac.uk/~rak/papers/algorithm%20=%20logic%20+%20control.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Algorithm = Logic + Control"),a("OutboundLink")],1),t._v(', 并且主要开发"逻辑编程"相关的工作. Robert Kowalski 是一位逻辑学家和计算机科学家, 从 20 世纪 70 年代末到整个 80 年代致力于数据库的研究, 并在用计算机证明数学定理等当年的重要应用上颇有建树, 尤其是在逻辑, 控制和算法等方面提出了革命性的理论, 极大地影响了数据库, 编程语言, 直至今日的人工智能.')]),t._v(" "),a("p",[t._v("在这篇论文里提到:")]),t._v(" "),a("blockquote",[a("p",[t._v("An algorithm can be regarded as consisting of a logic component, which specifies the knowledge to be used in solving problems, and a control component, which determines the problem-solving strategies by means of which that knowledge is used. The logic component determines the meaning of the algorithm whereas the control component only affects its efficiency. The efficiency of an algorithm can often be improved by improving the control component without changing the logic of the algorithm. We argue that computer programs would be more often correct and more easily improved and modified if their logic and control aspects were identified and separated in the program text.")])]),t._v(" "),a("p",[t._v("翻译过来的意思大概就是:")]),t._v(" "),a("blockquote",[a("p",[t._v("任何算法都会有两个部分, 一个是 Logic 部分, 这是用来解决实际问题的. 另一个是 Control 部分, 这是用来决定用什么策略来解决问题. Logic 部分是真正意义上的解决问题的算法, 而 Control 部分只是影响解决这个问题的效率. 程序运行的效率问题和程序的逻辑其实是没有关系的. 我们认为, 如果将 Logic 和 Control 部分有效地分开, 那么代码就会变得更容易改进和维护.")])]),t._v(" "),a("p",[t._v("注意, 最后一句话是重点---"),a("mark",[a("strong",[t._v("如果将 Logic 和 Control 部分有效地分开, 那么代码就会变得更容易改进和维护.")])])]),t._v(" "),a("h5",{attrs:{id:"_2-编程的本质"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-编程的本质"}},[t._v("#")]),t._v(" 2.编程的本质")]),t._v(" "),a("p",[t._v("两位老先生的两个表达式:")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Programs = Algorithms + Data Structures")])]),t._v(" "),a("li",[a("strong",[t._v("Algorithm = Logic + Control")])])]),t._v(" "),a("p",[t._v("第一个表达式倾向于数据结构和算法, 它是想把这两个拆分, 早期都在走这条路. 他们认为, 如果数据结构设计得好, 算法也会变得简单, 而且一个好的通用的算法应该可以用在不同的数据结构上.")]),t._v(" "),a("p",[t._v("第二个表达式则想表达的是数据结构不复杂, 复杂的是算法, 也就是业务逻辑是复杂的. 算法由两个逻辑组成, 一个是真正的业务逻辑, 另外一种是控制逻辑. 程序中有两种代码, 一种是真正的业务逻辑代码, 另一种代码是控制程序的代码, 叫控制代码, 这根本不是业务逻辑, 业务逻辑不关心这个事情.")]),t._v(" "),a("p",[t._v("算法的效率往往可以通过提高控制部分的效率来实现, 而无须改变逻辑部分, 也就无无须改变算法的意义. 举个阶乘的例子: "),a("code",[t._v("X(n)! = X(n) * X(n-1) * X(n-2) * X(n-3)* ... * 3 * 2 * 1")]),t._v("​. 逻辑部分用来定义阶乘: 1) 1 是 0 的阶乘;  2)如果 v 是 x 的阶乘, 且 u=v*(x+1), 那么 u 是 x+1 的阶乘.")]),t._v(" "),a("p",[t._v("用这个定义, 既可以从上往下地将 x+1 的阶乘缩小为先计算 x 的阶乘, 再将结果乘以 1(recursive, 递归), 也可以由下而上逐个计算一系列阶乘的结果(iteration, 遍历).")]),t._v(" "),a("p",[t._v('控制部分用来描述如何使用逻辑. 最粗略的看法可以认为"控制"是解决问题的策略, 而不会改变算法的意义, 因为算法的意义是由逻辑决定的. 对同一个逻辑, 使用不同控制, 所得到的算法, 本质是等价的, 因为它们解决同样的问题, 并得到同样的结果.')]),t._v(" "),a("p",[t._v("因此, 可以通过逻辑分析, 来提高算法的效率, 保持它的逻辑, 而更好地使用这一逻辑. 比如有时用自上而下的控制替代自下而上, 能提高效率. 而将自上而下的顺序执行改为并行执行, 也会提高效率.")]),t._v(" "),a("p",[t._v("总之, 通过这两个表达式, 我们可以得出:")]),t._v(" "),a("p",[a("strong",[t._v("Program = Logic + Control + Data Structure")])]),t._v(" "),a("p",[t._v("前面讲了这么多的编程范式, 或是程序设计的方法. 其实都是在围绕着这三件事来做的. 比如:")]),t._v(" "),a("ul",[a("li",[t._v("就像函数式编程中的 Map/Reduce/Filter, 它们都是一种控制. 而传给这些控制模块的那个 Lambda 表达式才是要解决的问题的逻辑, 它们共同组成了一个算法. 最后再把数据放在数据结构里进行处理, 最终就成为了程序.")]),t._v(" "),a("li",[t._v("就像 Go 语言的委托模式的那个 Undo 示例一样. Undo 这个事是想要解决的问题, 是 Logic, 但是 Undo 的流程是控制.")]),t._v(" "),a("li",[t._v("就像面向对象中依赖于接口而不是实现一样, 接口是对逻辑的抽象, 真正的逻辑放在不同的具现类中, 通过多态或是依赖注入这样的控制来完成对数据在不同情况下的不同处理.")])]),t._v(" "),a("p",[t._v("如果你再仔细地结合我们之前讲的各式各样的编程范式来思考上述这些概念的话, 你是否会觉得, 所有的语言或编程范式都在解决上面的这些问题. 也就下面的这几个事.")]),t._v(" "),a("ul",[a("li",[t._v("Control 是可以标准化的. 比如: 遍历数据, 查找数据, 多线程, 并发, 异步等, 都是可以标准化的.")]),t._v(" "),a("li",[t._v("因为 Control 需要处理数据, 所以标准化 Control, 需要标准化 Data Structure, 可以通过泛型编程来解决这个事.")]),t._v(" "),a("li",[t._v("而 Control 还要处理用户的业务逻辑, 即 Logic. 所以, 可以通过标准化接口 / 协议来实现, 我们的 Control 模式可以适配于任何的 Logic.")])]),t._v(" "),a("p",[t._v("上述三点, 就是编程范式的本质.")]),t._v(" "),a("ul",[a("li",[t._v("**有效地分离 Logic, Control 和 Data 是写出好程序的关键所在! **")]),t._v(" "),a("li",[t._v("**有效地分离 Logic, Control 和 Data 是写出好程序的关键所在! **")]),t._v(" "),a("li",[t._v("**有效地分离 Logic, Control 和 Data 是写出好程序的关键所在! **")])]),t._v(" "),a("p",[t._v("在写代码当中, 就会看到好多这种代码, 会"),a("strong",[t._v("把控制逻辑和业务逻辑放在一块")]),t._v(". 里面有些变量和流程是跟业务相关的, 有些是不相关的. 业务逻辑决定了程序的复杂度, 业务逻辑本身就复杂, 你的代码就不可能写得简单.")]),t._v(" "),a("p",[t._v("Logic, 它是程序复杂度的的下限, 然后为了控制程序, 需要再搞出很多控制代码, 于是 Logic+Control 的相互交织成为了最终的程序复杂度.")]),t._v(" "),a("h5",{attrs:{id:"_3-把逻辑和控制混淆的示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-把逻辑和控制混淆的示例"}},[t._v("#")]),t._v(" 3.把逻辑和控制混淆的示例")]),t._v(" "),a("p",[t._v("来看一个示例, 这是我在 leetcode 上做的一道题, 这是通配符匹配, 给两个字符串匹配. 需求如下:")]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("通配符匹配\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isMatch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aa"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" → "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isMatch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aa"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aa"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" → "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isMatch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aaa"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aa"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" → "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isMatch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aa"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" → "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isMatch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aa"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a*"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" → "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isMatch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ab"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"?*"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" → "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isMatch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aab"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"c*a*b"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" → "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("p",[t._v("现在你再看看我写出来的代码:")]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isMatch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" char "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" char "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" char "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("last_s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NULL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" char "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("last_p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NULL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\twhile "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'\\0'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("mark"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'*'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tp"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("mark"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'\\0'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\tlast_s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\tlast_p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("mark"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'?'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("mark"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\ts"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\tp"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" last_s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" NULL "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" last_p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\ts "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("last_s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\twhile "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("mark"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'*'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("mark"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'\\0'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br")])]),a("p",[t._v("我也不知道我怎么写出来的, 好像是为了要通过, 我需要关注于性能, 你看上面这段代码有多乱. 如果我不写注释你可能都看不懂了. 就算我写了注释以后, 你敢改吗? 你可能连动都不敢动(哈哈). 上面这些代码里面很多都不是业务逻辑, 是用来控制程序的逻辑.")]),t._v(" "),a("p",[t._v("业务逻辑是相对复杂的, 但是控制逻辑跟业务逻辑交叉在一块, 虽然代码写得不多, 但是这个代码已经够复杂了. 两三天以后, 我回头看, 我到底写的什么, 我也不懂, 为什么会写成这样? 我当时脑子是怎么想的? 我完全不知道. 我现在就是这种感觉.")]),t._v(" "),a("p",[t._v("那么怎么把上面那段代码写得更好一些呢?")]),t._v(" "),a("ul",[a("li",[t._v("首先, 需要一个比较通用的状态机(NFA, 非确定有限自动机, 或者 DFA, 确定性有限自动机), 来维护匹配的开始和结束的状态. 这属于 Control.")]),t._v(" "),a("li",[t._v("如果做得好的话, 还可以抽像出一个像程序的文法分析一样的东西. 这也是 Control.")]),t._v(" "),a("li",[t._v("然后把匹配 "),a("code",[t._v("*")]),t._v("​ 和 "),a("code",[t._v("?")]),t._v("​ 的算法形成不同的匹配策略.")])]),t._v(" "),a("p",[t._v("这样代码就会变得漂亮一些了, 而且也会快速一些.")]),t._v(" "),a("p",[t._v("这里有篇正则表达式的高效算法的论文 "),a("a",{attrs:{href:"https://swtch.com/~rsc/regexp/regexp1.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Regular Expression Matching Can Be Simple And Fast"),a("OutboundLink")],1),t._v(", 推荐你读一读, 里面有相关的实现, 这里就不多说了.")]),t._v(" "),a("p",[t._v("这里想说的"),a("strong",[t._v("程序的本质是 Logic + Control + Data, 而其中, Logic 和 Control 是关键")]),t._v(". 注意, 这个和系统架构也有相通的地方, 逻辑是你的业务逻辑, 逻辑过程的抽象, 加上一个由术语表示的数据结构的定义, 控制逻辑跟你的业务逻辑是没关系的, 你控制它执行.")]),t._v(" "),a("p",[t._v("控制一个程序流转的方式, 即程序执行的方式, 并行还是串行, 同步还是异步, 以及调度不同执行路径或模块, 数据之间的存储关系, 这些和业务逻辑没有关系.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/b1f587cde8308074c158d4a965456bce-20230731162102-e38p49v.png",alt:""}})]),t._v(" "),a("p",[t._v("如果你看过那些混乱不堪的代码, 你会发现其中最大的问题是把这 Logic 和 Control 纠缠在一起了, 所以会导致代码很混乱, 难以维护, Bug 很多. 绝大多数程序复杂的原因就是这个问题.")]),t._v(" "),a("h5",{attrs:{id:"_4-再来一个简单的示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-再来一个简单的示例"}},[t._v("#")]),t._v(" 4.再来一个简单的示例")]),t._v(" "),a("p",[t._v("这里给一个简单的示例.")]),t._v(" "),a("p",[t._v("下面是一段检查用户表单信息的常见代码, 我相信这样的代码你见得多了.")]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("function "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("check_form_x")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'#name'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("val")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("null "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" status "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 'Invalid name' "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" password "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'#password'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("val")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("null "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" password "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" password"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" status "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 'Invalid password' "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" repeat_password "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("'#repeat_password'"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("val")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("repeat_password "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" password"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" status "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 'Password and repeat password mismatch' "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" email "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'#email'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("val")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("check_email_format")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("email"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" status "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 'Invalid email' "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n    \\"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\\"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\\"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" status "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'OK'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br")])]),a("p",[t._v("但其实, 可以做一个 DSL+ 一个 DSL 的解析器, 比如:")]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" meta_create_user "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    form_id "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 'create_user'"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    fields "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" id "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'name'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'text'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" min_length "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" id "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'password'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'password'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" min_length "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" id "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 'repeat"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("password"),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("', type : '")]),t._v("password'"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" min_length "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" id "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'email'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'email'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("check_form")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("meta_create_user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br")])]),a("p",[t._v('这样, DSL 的描述是"Logic", 而 '),a("code",[t._v("check_form")]),t._v('​ 则成了"Control", 代码就非常好看了.')]),t._v(" "),a("h5",{attrs:{id:"_5-小结-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-小结-4"}},[t._v("#")]),t._v(" 5.小结")]),t._v(" "),a("p",[t._v("代码复杂度的原因:")]),t._v(" "),a("ul",[a("li",[t._v("业务逻辑的复杂度决定了代码的复杂度;")]),t._v(" "),a("li",[t._v("控制逻辑的复杂度 + 业务逻辑的复杂度 ==> 程序代码的混乱不堪;")]),t._v(" "),a("li",[t._v("绝大多数程序复杂混乱的根本原因: "),a("mark",[a("strong",[t._v("业务逻辑与控制逻辑的耦合")])]),t._v(".")])]),t._v(" "),a("p",[t._v("如何分离 control 和 logic 呢? 可以使用下面的这些技术来解耦.")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("State Machine")])]),t._v(" "),a("ul",[a("li",[t._v("状态定义")]),t._v(" "),a("li",[t._v("状态变迁条件")]),t._v(" "),a("li",[t._v("状态的 action")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("DSL – Domain Specific Language")])]),t._v(" "),a("ul",[a("li",[t._v("HTML, SQL, Unix Shell Script, AWK, 正则表达式...")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("编程范式")])]),t._v(" "),a("ul",[a("li",[t._v("面向对象: 委托, 策略, 桥接, 修饰, IoC/DIP, MVC...")]),t._v(" "),a("li",[t._v("函数式编程: 修饰, 管道, 拼装")]),t._v(" "),a("li",[t._v("逻辑推导式编程: Prolog")])])])]),t._v(" "),a("p",[t._v("**这就是编程的本质: **")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Logic 部分才是真正有意义的(What)")])]),t._v(" "),a("li",[a("strong",[t._v("Control 部分只是影响 Logic 部分的效率(How)")])])]),t._v(" "),a("h4",{attrs:{id:"编程范式游记-10-程序世界里的编程范式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编程范式游记-10-程序世界里的编程范式"}},[t._v("#")]),t._v(" 编程范式游记(10)-程序世界里的编程范式")]),t._v(" "),a("p",[t._v('这个世界到今天已经有很多很多的编程范式, 相当复杂. 下面这个图比较好地描绘了这些各式各样的编程范式. 这个图越往左边就越是"声明式的", 越往右边就越不是"声明式的"(指令式的), 可以看到, 函数式编程, 逻辑编程, 都在左边, 而右边是指令式的, 有状态的, 有类型的.')]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/579235142700b3c69e31fb407584b253-20230731162102-itpi37o.png",alt:""}})]),t._v(" "),a("p",[t._v("上面这个图有点乱, 不过总体说来, 可以简单地把这世界上纷乱的编程范式, 分成这几类: "),a("strong",[t._v("声明式")]),t._v(", "),a("strong",[t._v("命名式")]),t._v(", "),a("strong",[t._v("逻辑的")]),t._v(", "),a("strong",[t._v("函数式")]),t._v(", "),a("strong",[t._v("面向对象的")]),t._v(", "),a("strong",[t._v("面向过程的")]),t._v(".")]),t._v(" "),a("p",[t._v("于是归纳一下, 就可以得到下面这个简单的图. 简单描述一下,")]),t._v(" "),a("ul",[a("li",[t._v("中间两个声明式编程范式(函数式和逻辑式)偏向于你定义要什么, 而不是怎么做.")]),t._v(" "),a("li",[t._v("而两边的命令式编程范式和面向对象编程范式, 偏向于怎么做, 而不是要做什么.")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/01f5cdb17508eb0cc2e36d5b3c6177b9-20230731162102-qw2qmup.png",alt:""}})]),t._v(" "),a("p",[t._v("再归纳一下, 基本上来说, 就是两大分支, "),a("strong",[t._v("一边是在解决数据和算法, 一边是在解决逻辑和控制")]),t._v(".")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/a9583693e7472a21ce6a7f632bbf0445-20230731162102-p9y8jwv.png",alt:""}})]),t._v(" "),a("p",[t._v("下面再给一张表格说明一下这世界上四大编程范式的类别, 它们的特性和主要的编程语言.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/83b2d8d6418323a5ff2df5b932151886-20230731162102-lvmb2gq.png",alt:""}})]),t._v(" "),a("p",[t._v("程序编程范式. 一个是左脑, 一个右脑. 程序员基本上是在用左脑, 左脑是理性分析, 喜欢数据证据, 线性思维, 陷入细节, 具体化的, 不抽象. 但是实际上玩儿出这些东西的都在右脑, 函数式, 还有像逻辑式的抽象能力都在右脑. 所以非线性的想象力都在这边, 而标准化教育把我们这边已经全部干掉了, 我们只剩左边. 我们陷入细节, 我一说 Java 是最好的程序设计语言, 一堆人就来了, 找各种各样的细节问题跟你纠缠.")]),t._v(" "),a("p",[t._v("离我们最近的是函数式编程, 但既然函数式编程这么好, 为什么函数式编程火不起来呢? 首先, 这里有个逻辑上的问题, 并不是用的人越多的东西就越好. 因为还要看是不是大多数人都能理解的东西. 函数式编程或是声明式编程, 需要的是右脑, 而指令式的则需要用我们的左脑.")]),t._v(" "),a("p",[a("strong",[t._v("人的左脑的特性是")]),t._v(":")]),t._v(" "),a("ul",[a("li",[t._v("理性分析型")]),t._v(" "),a("li",[t._v("喜欢数据证据")]),t._v(" "),a("li",[t._v("线性思维")]),t._v(" "),a("li",[t._v("陷入细节")]),t._v(" "),a("li",[t._v("具体化的")])]),t._v(" "),a("p",[a("strong",[t._v("人的右脑的特性是")]),t._v(":")]),t._v(" "),a("ul",[a("li",[t._v("直觉型")]),t._v(" "),a("li",[t._v("想象力")]),t._v(" "),a("li",[t._v("非线性")]),t._v(" "),a("li",[t._v("宏观思维")]),t._v(" "),a("li",[t._v("抽象化的")])]),t._v(" "),a("p",[t._v("人类社会中, 绝大多数人都是左脑型的人, 而只有少数人是右脑型的人, 比如那些哲学家, 艺术家, 以及能够创造理论知识的人. 这些人在这个世界上太少了. 这是为什么很多人理解和使用声明式的编程范式比较有困难, 因为这要用你的右脑, 但是我们习惯于用左脑, 左脑用多了以后右脑就有点跟不上了.")]),t._v(" "),a("h3",{attrs:{id:"分布式系统设计模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式系统设计模式"}},[t._v("#")]),t._v(" 分布式系统设计模式")]),t._v(" "),a("p",[t._v("下面是《"),a("strong",[t._v("分布式系统设计模式")]),t._v("》系列文章的目录.")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("弹力设计篇")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/3912",target:"_blank",rel:"noopener noreferrer"}},[t._v("认识故障和弹力设计"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/3917",target:"_blank",rel:"noopener noreferrer"}},[t._v("隔离设计 Bulkheads"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/3926",target:"_blank",rel:"noopener noreferrer"}},[t._v("异步通讯设计 Asynchronous"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/4050",target:"_blank",rel:"noopener noreferrer"}},[t._v("幂等性设计 Idempotency"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/4086",target:"_blank",rel:"noopener noreferrer"}},[t._v("服务的状态 State"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/4087",target:"_blank",rel:"noopener noreferrer"}},[t._v("补偿事务 Compensating Transaction"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/4121",target:"_blank",rel:"noopener noreferrer"}},[t._v("重试设计 Retry"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/4241",target:"_blank",rel:"noopener noreferrer"}},[t._v("熔断设计 Circuit Breaker"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/4245",target:"_blank",rel:"noopener noreferrer"}},[t._v("限流设计 Throttle"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/4252",target:"_blank",rel:"noopener noreferrer"}},[t._v("降级设计 degradation"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/4253",target:"_blank",rel:"noopener noreferrer"}},[t._v("弹力设计总结"),a("OutboundLink")],1)])])]),t._v(" "),a("li",[a("p",[t._v("管理设计篇")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/5175",target:"_blank",rel:"noopener noreferrer"}},[t._v("分布式锁 Distributed Lock"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/5819",target:"_blank",rel:"noopener noreferrer"}},[t._v("配置中心 Configuration Management"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/5909",target:"_blank",rel:"noopener noreferrer"}},[t._v("边车模式 Sidecar"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/5920",target:"_blank",rel:"noopener noreferrer"}},[t._v("服务网格 Service Mesh"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/6086",target:"_blank",rel:"noopener noreferrer"}},[t._v("网关模式 Gateway"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/6283",target:"_blank",rel:"noopener noreferrer"}},[t._v("部署升级策略"),a("OutboundLink")],1)])])]),t._v(" "),a("li",[a("p",[t._v("性能设计篇")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/6282",target:"_blank",rel:"noopener noreferrer"}},[t._v("缓存 Cache"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/7036",target:"_blank",rel:"noopener noreferrer"}},[t._v("异步处理 Asynchronous"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/7045",target:"_blank",rel:"noopener noreferrer"}},[t._v("数据库扩展"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/7047",target:"_blank",rel:"noopener noreferrer"}},[t._v("秒杀 Flash Sales"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/7086",target:"_blank",rel:"noopener noreferrer"}},[t._v("边缘计算 Edge Computing"),a("OutboundLink")],1)])])])]),t._v(" "),a("h4",{attrs:{id:"弹力设计篇之-认识故障和弹力设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#弹力设计篇之-认识故障和弹力设计"}},[t._v("#")]),t._v(' 弹力设计篇之"认识故障和弹力设计"')]),t._v(" "),a("p",[t._v('前面的《分布式系统架构的本质》系列文章, 从分布式系统的业务层, 中间件层, 数据库层等各个层面介绍了高并发架构, 异地多活架构, 容器化架构, 微服务架构, 高可用架构, 弹性化架构等, 也就是所谓的"纲". 通过这个"纲", 你能够按图索骥, 掌握分布式系统中每个部件的用途与总体架构思路.')]),t._v(" "),a("p",[t._v("为了让你更深入地了解分布式系统, 在接下来的几期中, 我想谈谈"),a("strong",[t._v("分布式系统中一些比较关键的设计模式")]),t._v(", 其中包括"),a("strong",[t._v("容错, 性能, 管理")]),t._v("等几个方面.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("容错设计又叫弹力设计")]),t._v(', 其中着眼于分布式系统的各种"'),a("strong",[t._v("容忍")]),t._v('"能力, 包括'),a("strong",[t._v("容错能力")]),t._v("(服务隔离, 异步调用, 请求幂等性), "),a("strong",[t._v("可伸缩性")]),t._v("(有 / 无状态的服务), "),a("strong",[t._v("一致性")]),t._v("(补偿事务, 重试), "),a("strong",[t._v("应对大流量的能力")]),t._v("(熔断, 降级). 可以看到, 在确保系统正确性的前提下, 系统的可用性是弹力设计保障的重点.")]),t._v(" "),a("li",[a("strong",[t._v("管理篇")]),t._v("会讲述一些管理分布式系统架构的一些设计模式, 比如"),a("strong",[t._v("网关方面的, 边车模式")]),t._v(", 还有一些刚刚开始流行的, 如 Service Mesh 相关的设计模式.")]),t._v(" "),a("li",[a("strong",[t._v("性能设计篇")]),t._v("会讲述一些缓存, CQRS, 索引表, 优先级队列, 业务分片等相关的架构模式.")])]),t._v(" "),a("p",[t._v("我相信, 你在掌握了这些设计模式之后, 无论是对于部署一个分布式系统, 开发一个分布式的业务模块, 还是研发一个新的分布式系统中间件, 都会有所裨益.")]),t._v(" "),a("p",[t._v('今天分享的就是《分布式系统设计模式》系列文章中的第一篇《弹力设计篇之"认识故障和弹力设计"》.')]),t._v(" "),a("h5",{attrs:{id:"_1-系统可用性测量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-系统可用性测量"}},[t._v("#")]),t._v(" 1.系统可用性测量")]),t._v(" "),a("p",[t._v("对于分布式系统的容错设计, 在英文中又叫 "),a("strong",[t._v("Resiliency")]),t._v("(弹力). 意思是, 系统在不健康, 不顺, 甚至出错的情况下有能力 hold 得住, 挺得住, 还有能在这种逆境下力挽狂澜的能力.")]),t._v(" "),a("p",[t._v("要做好一个设计, 需要一个设计目标, 或是一个基准线, 通过这个基准线或目标来指导我们的设计, 否则在没有明确基准线的指导下, 设计会变得非常不明确, 并且也不可预测, 不可测量. "),a("strong",[t._v("可测试和可测量性是软件设计中非常重要的事情")]),t._v(".")]),t._v(" "),a("p",[t._v("我们知道, "),a("strong",[t._v("容错主要是为了可用性")]),t._v(", 那怎样计算一个系统的可用性的呢? 下面是一个工业界里使用的一个公式:")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/image-20231116230602-j5x08tt.png",alt:"image"}}),t._v("其中,")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("MTTF 是 Mean Time To Failure, 平均故障前的时间")]),t._v(", 即系统平均能够正常运行多长时间才发生一次故障. 系统的可靠性越高, MTTF 越长. (注意: 从字面上来说, 看上去有 Failure 的字样, 但其实是正常运行的时间. )")]),t._v(" "),a("li",[a("strong",[t._v("MTTR 是 Mean Time To Recovery, 平均修复时间")]),t._v(", 即从故障出现到故障修复的这段时间, 这段时间越短越好.")])]),t._v(" "),a("p",[t._v("这个公式就是计算系统可用性的, 也就是常说的, 多少个 9, 如下表所示.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/e7d4ea050ff42796b26139988e4ca069-20230731162102-uujbj71.png",alt:""}})]),t._v(" "),a("p",[t._v("根据上面的这个公式, 为了提高可用性, 要么提高系统的无故障时间, 要么减少系统的故障恢复时间.")]),t._v(" "),a("p",[t._v("然而要明白, 我们运行的是一个分布式系统, 对于一个分布式系统来说, 要不出故障简直是太难了.")]),t._v(" "),a("h5",{attrs:{id:"_2-故障原因"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-故障原因"}},[t._v("#")]),t._v(" 2.故障原因")]),t._v(" "),a("p",[t._v('老实说, 我们很难计算设计的系统有多少的可用性, 因为影响一个系统的因素实在是太多了, 除了软件设计, 还有硬件, 还有第三方服务(如电信联通的宽带 SLA), 当然包括 "建筑施工队的挖掘机". 所以, 正如 SLA 的定义, 这不只是一个技术指标, 而是一种服务提供商和用户之间的 contract 或契约. 这种工业级的玩法, 就像飞机一样, 并不是把飞机造出来就好了, 还有大量的无比专业的配套设施, 工具, 流程, 管理和运营.')]),t._v(" "),a("p",[t._v("简而言之, SLA 的几个 9 就是能持续提供可用服务的级别. 不过, 工业界中, 会把服务不可用的因素分成两种: 一种是"),a("strong",[t._v("有计划")]),t._v("的, 一种是"),a("strong",[t._v("无计划")]),t._v("的.")]),t._v(" "),a("p",[a("strong",[t._v("无计划的宕机原因")]),t._v(". 下图来自 Oracle 的 "),a("a",{attrs:{href:"https://docs.oracle.com/cd/A91202_01/901_doc/rac.901/a89867/pshavdtl.htm",target:"_blank",rel:"noopener noreferrer"}},[t._v("High Availability Concepts and Best Practices"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/b4faeac27996774c6d1b3b700cc7d334-20230731162102-el4i77t.png",alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("有计划的宕机原因")]),t._v(". 下图来自 Oracle 的"),a("a",{attrs:{href:"https://docs.oracle.com/cd/A91202_01/901_doc/rac.901/a89867/pshavdtl.htm",target:"_blank",rel:"noopener noreferrer"}},[t._v("High Availability Concepts and Best Practices"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/7d6bbe36da0e288bd6370ca9429ef95c-20230731162102-fvodhky.png",alt:""}})]),t._v(" "),a("p",[t._v("可以看到, 宕机原因主要有以下这些.")]),t._v(" "),a("p",[t._v("**无计划的: **")]),t._v(" "),a("ul",[a("li",[t._v("系统级故障, 包括主机, 操作系统, 中间件, 数据库, 网络, 电源以及外围设备.")]),t._v(" "),a("li",[t._v("数据和中介的故障, 包括人员误操作, 硬盘故障, 数据乱了.")]),t._v(" "),a("li",[t._v("还有自然灾害, 人为破坏, 以及供电问题等.")])]),t._v(" "),a("p",[t._v("**有计划的: **")]),t._v(" "),a("ul",[a("li",[t._v("日常任务: 备份, 容量规划, 用户和安全管理, 后台批处理应用.")]),t._v(" "),a("li",[t._v("运维相关: 数据库维护, 应用维护, 中间件维护, 操作系统维护, 网络维护.")]),t._v(" "),a("li",[t._v("升级相关: 数据库, 应用, 中间件, 操作系统, 网络, 包括硬件升级.")])]),t._v(" "),a("p",[t._v("再给它们归个类.")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("网络问题")]),t._v(". 网络链接出现问题, 网络带宽出现拥塞...")]),t._v(" "),a("li",[a("strong",[t._v("性能问题")]),t._v(". 数据库慢 SQL, Java Full GC, 硬盘 IO 过大, CPU 飙高, 内存不足...")]),t._v(" "),a("li",[a("strong",[t._v("安全问题")]),t._v(". 被网络攻击, 如 DDoS 等.")]),t._v(" "),a("li",[a("strong",[t._v("运维问题")]),t._v(". 系统总是在被更新和修改, 架构也在不断地被调整, 监控问题...")]),t._v(" "),a("li",[a("strong",[t._v("管理问题")]),t._v(". 没有梳理出关键服务以及服务的依赖关系, 运行信息没有和控制系统同步...")]),t._v(" "),a("li",[a("strong",[t._v("硬件问题")]),t._v(". 硬盘损坏, 网卡出问题, 交换机出问题, 机房掉电, 挖掘机问题...")])]),t._v(" "),a("h5",{attrs:{id:"_3-故障不可避免"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-故障不可避免"}},[t._v("#")]),t._v(" 3.故障不可避免")]),t._v(" "),a("p",[t._v("如果你看过我写过的《分布式系统架构的本质》和《故障处理》这两个系列的文章, 就会知道要管理好一个分布式系统是一件非常难的事. "),a("strong",[t._v("对于大规模的分布式系统, 出现故障基本上就是常态")]),t._v(", 甚至还有些你根本就不知道会出问题的地方.")]),t._v(" "),a("p",[t._v("在今天来说, 一个分布式系统的故障已经非常复杂了, 因为故障是分布式的, 多米诺骨牌式的. 就像在《分布式系统架构的本质》中展示过的这个图一样.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/713ef59af87ca5fe4c5d5271df8d1934-20230731162102-9hkqvgi.png",alt:""}})]),t._v(" "),a("p",[t._v('如果你在云平台上, 或者使用了 "微服务", 面对大量的 IoT 设备以及不受控制的用户流量, 那么系统故障会更为复杂和变态. 因为上面这些因素增加了整个系统的复杂度.')]),t._v(" "),a("p",[t._v("所以要充分地意识到下面两个事.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("故障是正常的, 而且是常见的")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("故障是不可预测突发的, 而且相当难缠")]),t._v(".")])]),t._v(" "),a("p",[t._v("所以亚马逊的 AWS 才会把 Design for Failure 做为其七大 Design Principle 的重点. 这告诉我们, 不要尝试着去避免故障, "),a("strong",[t._v("而是要把处理故障的代码当成正常的功能做在架构里写在代码里")]),t._v(".")]),t._v(" "),a("p",[t._v("因为我们要干的事儿就是"),a("mark",[a("strong",[t._v("想尽一切手段来降低 MTTR--故障的修复时间")])]),t._v(". 这就是为什么把这个设计叫做弹力(Resiliency).")]),t._v(" "),a("ul",[a("li",[t._v("一方面, 在好的情况下, 这个事对于用户和内部运维来说是完全透明的, 系统自动修复不需要人的干预.")]),t._v(" "),a("li",[t._v("另一方面, 如果修复不了, 系统能够做自我保护, 而不让事态变糟糕.")])]),t._v(" "),a("p",[t._v('这就是所谓的"弹力"---能上能下.')]),t._v(" "),a("h5",{attrs:{id:"_4-小结-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-小结-2"}},[t._v("#")]),t._v(" 4.小结")]),t._v(" "),a("p",[t._v("好了, 今天的内容就到这里. 相信通过今天的学习, 你应该已经明白了弹力设计的真正目的, 并对系统可用性的衡量指标和故障的各种原因有所了解. 下一篇文章, 我们将开始罗列一些相关的设计模式.")]),t._v(" "),a("h4",{attrs:{id:"弹力设计篇之-隔离设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#弹力设计篇之-隔离设计"}},[t._v("#")]),t._v(' 弹力设计篇之"隔离设计"')]),t._v(" "),a("p",[t._v("隔离设计对应的单词是 Bulkheads, 中文翻译为隔板. 但其实这个术语是用在造船上的, 也就是船舱里防漏水的隔板. 一般的船无论大小都会有这个东西, 大一点的船都会把船舱隔成若干个空间. 这样如果船舱漏水, 只会进到一个小空间里, 不会让整个船舱都进水而导致整艘船都沉了, 如下图所示.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/2a556eb7886ced169f6a1ccbdefc12ea-20230731162102-u4xs76w.png",alt:""}})]),t._v(" "),a("p",[t._v('​​我们的软件设计当然也"漏水", 所以为了不让这个"故障"蔓延开来, 需要使用"隔板"技术, 来将架构分隔成多个"船舱"来隔离故障.')]),t._v(" "),a("p",[t._v("在分布式软件架构中, 同样需要使用类似这样的技术来"),a("strong",[t._v("让故障得到隔离")]),t._v(". 这就需要对系统进行分离. 一般来说, 对于系统的分离有两种方式, "),a("strong",[t._v("一种是以服务的种类来做分离, 一种是以用户来做分离")]),t._v(". 下面具体说明一下这两种方式.")]),t._v(" "),a("h5",{attrs:{id:"_1-按服务的种类来做分离"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-按服务的种类来做分离"}},[t._v("#")]),t._v(" 1.按服务的种类来做分离")]),t._v(" "),a("p",[t._v("下面这个图中, 说明了按"),a("strong",[t._v("服务种类")]),t._v("来做分离的情况.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/0eab5d04078cb119dd6d95049edee722-20230731162102-cxvceb4.png",alt:""}})]),t._v(" "),a("p",[t._v("上图中, 将系统分成了用户, 商品, 社区三个版块. 三个板块分别使用"),a("strong",[t._v("不同的域名, 服务器和数据库")]),t._v(", 做到从接入层到应用层再到数据层三层完全隔离. 这样一来, 在物理上来说, 一个版块的故障就不会影响到另一版块.")]),t._v(" "),a("p",[t._v("在亚马逊, 每个服务都有自己的一个数据库, 每个数据库中都保存着和这个业务相关的数据和相应的处理状态. 而每个服务从一开始就准备好了对外暴露. 同时这也是微服务所推荐的架构方式.")]),t._v(" "),a("p",[t._v("然而任何架构都有其好和不好的地方, 上面这种架构虽然在系统隔离上做得比较好, 但是也存在以下一些问题.")]),t._v(" "),a("ul",[a("li",[t._v("如果需要同时获得多个版块的数据, 那么就需要调用多个服务, 这会降低性能. 注意, 这里性能降低指的是"),a("strong",[t._v("响应时间")]),t._v(", 而不是吞吐量(相反, 在这种架构下, 吞吐量可以得到提高).")])]),t._v(" "),a("p",[t._v("对于这样的问题, 一般来说, 我们需要"),a("strong",[t._v("小心地设计用户交互")]),t._v(", 最好不要让用户在一个页面上获得所有的数据. 对于目前的手机端上来说, 因为手机屏幕尺寸比较小, 所以也不可能在一个屏幕页上展示太多的内容.")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("如果有大数据平台, 就需要把这些数据都抽取到一个数据仓库中进行计算, 这也增加了数据合并的复杂度. 对于这个问题, 我们需要一个"),a("strong",[t._v("框架或是一个中间件")]),t._v("来对数据进行相应的抽取.")])]),t._v(" "),a("li",[a("p",[t._v("另外, 如果业务逻辑或是业务流程需要跨版块的话, 那么一个版块的故障也会导致整个流程走不下去, 同样会导致整体业务故障. 对于这个问题, 一方面需要"),a("strong",[t._v("保证这个业务流程中各个子系统的高可用性")]),t._v(", 并且在业务流程上做成 Step-by-Step 的方式, 这样用户交互的每一步都可以保存, 以便故障恢复后可以继续执行, 而不是从头执行.")])]),t._v(" "),a("li",[a("p",[t._v("还有, 如果需要有跨版块的交互也会变得有点复杂. 对此需要一个类似于 Pub/Sub 的高可用的并可以持久化的"),a("strong",[t._v("消息订阅通知的中间件")]),t._v("来打通各个版块的数据和信息交换.")])]),t._v(" "),a("li",[a("p",[t._v("最后还会有在多个版块中"),a("strong",[t._v("分布式事务")]),t._v('的问题. 对此需要 "二阶段提交" 这样的方案. 在亚马逊中, 使用的是 Plan – Reserve – Commit/Cancel 模式. 也就是说, 先做一个 plan 的 API 调用, 然后各个子系统 reserve 住相应的资源, 如果成功, 则 Commit; 如果有一个失败, 则整体 Cancel. 这其实很像阿里的 '),a("strong",[t._v("TCC")]),t._v(" – try confirm/cancel.")])])]),t._v(" "),a("p",[t._v("可见, 隔离了的系统在具体的业务场景中还是有很多问题的, 是需要我们小心和处理的. 根据我的经验, 这样的系统通常会引入大量的"),a("strong",[t._v("异步处理模型")]),t._v(".")]),t._v(" "),a("h5",{attrs:{id:"_2-按用户的请求来做分离"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-按用户的请求来做分离"}},[t._v("#")]),t._v(" 2.按用户的请求来做分离")]),t._v(" "),a("p",[t._v("下图是一个按用户请求来做分离的图示.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/fa9d3cc4bea02b6cfbe22a69edde7d29-20230731162102-pxmwgmb.png",alt:""}})]),t._v(" "),a("p",[t._v("在这个图中, 可以看到, 我们将用户分成不同的组, 并把后端的同一个服务根据这些不同的组分成不同的实例. 让同一个服务对于不同的用户进行冗余和隔离, 这样一来, 当服务实例挂掉时, 只会影响其中一部分用户, 而不会导致所有的用户无法访问.")]),t._v(" "),a("p",[t._v('这种分离和上面按功能的分离可以融合. 说白了, 这就是所谓的 "'),a("strong",[t._v("多租户")]),t._v('" 模式. 对于一些比较大的客户, 可以为他们设置专门独立的服务实例, 或是服务集群与其他客户隔离开来, 对于一些比较小的用户来说, 可以让他们共享一个服务实例, 这样可以节省相关的资源.')]),t._v(" "),a("p",[t._v('对于 "多租户" 的架构来说, 会引入一些系统设计的复杂度. 一方面, 如果完全隔离, 资源使用上会比较浪费, 如果共享, 又会导致程序设计的一些复杂度.')]),t._v(" "),a("p",[t._v("通常来说多租户的做法有三种.")]),t._v(" "),a("ol",[a("li",[t._v("完全独立的设计. 每个租户有自己完全独立的服务和数据.")]),t._v(" "),a("li",[t._v("独立的数据分区, 共享的服务. 多租户的服务是共享的, 但数据是分开隔离的.")]),t._v(" "),a("li",[t._v("共享的服务, 共享的数据分区. 每个租户的数据和服务都是共享的.")])]),t._v(" "),a("p",[t._v("这三种方案各有优缺点, 如图所示.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/ceaeee60877c10d6e6d06585646c693c-20230731162102-nj0u9xh.png",alt:""}})]),t._v(" "),a("p",[t._v("通过上图, 可以看到:")]),t._v(" "),a("ul",[a("li",[t._v("如果使用完全独立的方案, 在开发实现上和资源隔离度方面会非常好, 然而成本会比较高, 计算资源也会有一定的浪费.")]),t._v(" "),a("li",[t._v("如果使用完全共享的方案, 在资源利用和成本上会非常好, 然而开发难度非常大, 而且数据和资源隔离非常不好.")])]),t._v(" "),a("p",[t._v("所以一般来说, 技术方案会使用折衷方案, 也就是中间方案, 服务是共享的, 数据通过分区来隔离, 而对于一些比较重要的租户(需要好的隔离性), 则使用完全独立的方式.")]),t._v(" "),a("p",[t._v('然而, 在虚拟化技术非常成熟的今天, 完全可以使用 "'),a("strong",[t._v("完全独立")]),t._v('" (完全隔离)的方案, 通过底层的虚拟化技术(Hypervisor 的技术, 如 KVM, 或是 Linux Container 的技术, 如 Docker)来实现物理资源的共享和成本的节约.')]),t._v(" "),a("h5",{attrs:{id:"_3-隔离设计的重点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-隔离设计的重点"}},[t._v("#")]),t._v(" 3.隔离设计的重点")]),t._v(" "),a("p",[t._v("要能做好隔离设计, 需要有如下的一些设计考量.")]),t._v(" "),a("ol",[a("li",[t._v("需要定义好隔离业务的大小和粒度, 过大和过小都不好. 这需要认真地做业务上的需求和系统分析.")]),t._v(" "),a("li",[t._v("无论是做系统版块还是多租户的隔离, 都需要考虑系统的复杂度, 成本, 性能, 资源使用的问题, 找到一个合适的均衡方案, 或是分布实施的方案尤其重要, 这其中需要你定义好要什么和不要什么. 因为, 我们不可能做出一个什么都能满足的系统.")]),t._v(" "),a("li",[t._v("隔离模式需要配置一些高可用, 重试, 异步, 消息中间件, 流控, 熔断等设计模式的方式配套使用.")]),t._v(" "),a("li",[t._v("不要忘记了分布式系统中的运维的复杂度的提升, 要能驾驭得好的话, 还需要很多自动化运维的工具, 尤其是使用像容器或是虚拟机这样的虚拟化技术可以帮助我们更方便地管理, 和对比资源更好地利用. 否则做出来了也管理不好.")]),t._v(" "),a("li",[t._v("最后, 你需要一个非常完整的能够看得到所有服务的"),a("strong",[t._v("监控系统")]),t._v(", 这点非常重要.")])]),t._v(" "),a("h5",{attrs:{id:"_4-小结-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-小结-3"}},[t._v("#")]),t._v(" 4.小结")]),t._v(" "),a("p",[t._v("总结一下今天分享的主要内容. 首先, 我从船体水密舱的设计, 引出了分布式系统设计中的隔离设计. 然后介绍了常见的隔离有两种, 一种是按服务种类隔离, 另一种是按用户隔离(即多租户).")]),t._v(" "),a("h4",{attrs:{id:"弹力设计篇之-异步通讯设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#弹力设计篇之-异步通讯设计"}},[t._v("#")]),t._v(' 弹力设计篇之"异步通讯设计"')]),t._v(" "),a("p",[t._v("前面所说的隔离设计通常都需要对系统做解耦设计, 而把一个单体系统解耦, 不单单是把业务功能拆分出来, 正如上面所说, 拆分完后还会面对很多的问题. 其中一个重要的问题就是这些"),a("strong",[t._v("系统间的通讯")]),t._v(".")]),t._v(" "),a("p",[t._v("通讯一般来说分"),a("strong",[t._v("同步和异步")]),t._v("两种. 同步通讯就像打电话, 需要实时响应, 而异步通讯就像发邮件, 不需要马上回复. 各有千秋, 很难说谁比谁好. 但是在面对超高吐吞量的场景下, 异步处理就比同步处理有比较大的优势了, 这就好像一个人不可能同时接打很多电话, 但是他可以同时接收很多的电子邮件一样.")]),t._v(" "),a("p",[t._v("同步调用虽然让系统间只耦合于接口, 而且实时性也会比异步调用要高, 但是同步调用会带来如下几个问题.")]),t._v(" "),a("ul",[a("li",[t._v("同步调用需要被调用方的吞吐不低于调用方的吞吐. 否则会导致被调用方因为性能不足而拖死调用方. 换句话说, "),a("strong",[t._v("整个同步调用链的性能会由最慢的那个服务所决定")]),t._v(".")]),t._v(" "),a("li",[t._v("同步调用会导致调用方一直在等待被调用方完成, 如果一层接一层地同步调用下去, 所有的参与方会有相同的等待时间. 这会非常消耗调用方的资源. 因为调用方需要保存现场(Context)等待远端返回, 所以对于并发比较高的场景来说, 这样的等待可能会极度消耗资源.")]),t._v(" "),a("li",[t._v("同步调用只能是"),a("strong",[t._v("一对一")]),t._v("的, 很难做到一对多.")]),t._v(" "),a("li",[t._v("**同步调用最不好的是, 如果被调用方有问题, 那么其调用方就会跟着出问题, 于是会出现多米诺骨牌效应, 故障一下就蔓延开来. **")])]),t._v(" "),a("p",[t._v("所以异步通讯相对于同步通讯来说, 除了可以增加系统的吞吐量之外, 最大的一个好处是其可以让服务间的"),a("strong",[t._v("解耦更为彻底")]),t._v(", 系统的调用方和被调用方可以按照自己的速率而不是步调一致, 从而可以更好地保护系统, 让系统更有弹力.")]),t._v(" "),a("p",[t._v("异步通讯通常来说有三种方式.")]),t._v(" "),a("h5",{attrs:{id:"_1-异步通讯的三种方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-异步通讯的三种方式"}},[t._v("#")]),t._v(" 1.异步通讯的三种方式")]),t._v(" "),a("h6",{attrs:{id:"_1-请求响应式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-请求响应式"}},[t._v("#")]),t._v(" (1)请求响应式")]),t._v(" "),a("p",[t._v("在这种情况下, "),a("strong",[t._v("发送方(sender)会直接请求接收方(receiver), 被请求方接收到请求后, 直接返回——收到请求, 正在处理")]),t._v(".")]),t._v(" "),a("p",[t._v("对于返回结果, 有两种方法, 一种是发送方时不时地去轮询一下, 问一下干没干完. 另一种方式是发送方注册一个回调方法, 也就是接收方处理完后回调请求方. 这种架构模型在以前的网上支付中比较常见, 页面先从商家跳转到支付宝或银行, 商家会把回调的 URL 传给支付页面, 支付完后, 再跳转回商家的 URL.")]),t._v(" "),a("p",[t._v("很明显, 这种情况下还是有一定耦合的. 是发送方依赖于接收方, 并且要把自己的回调发送给接收方, 处理完后回调.")]),t._v(" "),a("h6",{attrs:{id:"_2-通过订阅的方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-通过订阅的方式"}},[t._v("#")]),t._v(" (2)通过订阅的方式")]),t._v(" "),a("p",[t._v("这种情况下, 接收方(receiver)会来订阅发送方(sender)的消息, 发送方会把相关的消息或数据放到接收方所订阅的队列中, 而接收方会从队列中获取数据.")]),t._v(" "),a("p",[t._v("这种方式下, 发送方并不关心订阅方的处理结果, 它只是告诉订阅方有事要干, 收完消息后给个 ACK 就好了, 你干成啥样我不关心. 这个方式常用于像 MVC(Model-View-Control)这样的设计模式下, 如下图所示.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/bd93dcb07725d1029b0e5c0f627bd7ea-20230731162102-rsfg3go.png",alt:""}})]),t._v(" "),a("p",[t._v("这就好像下订单的时候, 一旦用户支付完成了, 就需要把这个事件通知给订单处理以及物流, 订单处理变更状态, 物流服务需要从仓库服务分配相应的库存并准备配送, 后续这些处理的结果无需告诉支付服务.")]),t._v(" "),a("p",[t._v("为什么要做成这样? 好了, 重点来了! 前面那种请求响应的方式就像函数调用一样, 这种方式有数据有状态的往来(也就是说需要有请求数据, 返回数据, 服务里面还可能需要保存调用的状态), 所以服务是"),a("strong",[t._v("有状态的")]),t._v(". 如果把服务的状态给去掉(通过第三方的状态服务来保证), 那么"),a("strong",[t._v("服务间的依赖就只有事件")]),t._v("了.")]),t._v(" "),a("p",[t._v("分布式系统的服务设计是需要"),a("strong",[t._v("向无状态服务(Stateless)努力")]),t._v("的, 这其中有太多的好处, 无状态意味着你可以非常方便地运维. 所以"),a("strong",[t._v("事件通讯成为了异步通讯中最重要的一个设计模式")]),t._v(".")]),t._v(" "),a("p",[t._v("就上面支付的那个例子, 商家这边只需要订阅一个支付完成的事件, 这个事件带一个订单号, 而不需要让支付方知道自己的回调 URL, 这样的异步是不是更干净一些?")]),t._v(" "),a("p",[t._v("但是在这种方式下, 接收方需要向发送方订阅事件, 所以是接收方依赖于发送方. 这种方式还是有一定的耦合.")]),t._v(" "),a("h6",{attrs:{id:"_3-通过broker的方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-通过broker的方式"}},[t._v("#")]),t._v(" (3)通过Broker的方式")]),t._v(" "),a("p",[t._v("所谓 Broker, 就是一个"),a("strong",[t._v("中间人")]),t._v(", 发送方(sender)和接收方(receiver)都互相看不到对方, 它们看得到的是一个 Broker, 发送方向 Broker 发送消息, 接收方向 Broker 订阅消息. 如下图所示.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/d3de406e95ec034e58f745f93091020d-20230731162102-cc7zs4v.png",alt:""}})]),t._v(" "),a("p",[t._v("这是完全的解耦. 所有的服务都不需要相互依赖, 而是依赖于一个中间件 Broker. 这个 Broker 是一个像数据总线一样的东西, 所有的服务要接收数据和发送数据都发到这个总线上, 这个总线就像协议一样, 让服务间的通讯变得标准和可控.")]),t._v(" "),a("p",[t._v("在 Broker 这种模式下, 发送方的服务和接收方的服务最大程度地解耦. 但是所有人都依赖于一个总线, 所以这个总线就需要有如下的特性:")]),t._v(" "),a("ul",[a("li",[t._v("必须是"),a("strong",[t._v("高可用")]),t._v("的, 因为它成了整个系统的关键;")]),t._v(" "),a("li",[t._v("必须是高性能而且是可以水平扩展的;")]),t._v(" "),a("li",[t._v("必须是可以持久化不丢数据的.")])]),t._v(" "),a("p",[t._v("要做到这三条还是比较难的. 当然好在现在开源软件或云平台上 Broker 的软件是非常成熟的, 所以节省了我们很多的精力.")]),t._v(" "),a("h5",{attrs:{id:"_2-事件驱动设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-事件驱动设计"}},[t._v("#")]),t._v(" 2.事件驱动设计")]),t._v(" "),a("p",[t._v("上述的第二种和第三种方式就是比较著名的"),a("strong",[t._v("事件驱动架构(EDA – Event Driven Architecture)")]),t._v(" . 正如前面所说, 事件驱动最好是使用 Broker 方式, 服务间通过交换消息来完成交流和整个流程的驱动.")]),t._v(" "),a("p",[t._v("如下图所示, 这是一个订单处理流程. 下单服务通知订单服务有订单要处理, 而订单服务生成订单后发出通知, 库存服务和支付服务得到通知后, 一边是占住库存, 另一边是让用户支付, 等待用户支付完成后通知配送服务进行商品配送.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/42c47ddbf03c6a55ee4490e4791622bb-20230731162102-353awfh.png",alt:""}})]),t._v(" "),a("p",[t._v('每个服务都是 "自包含" 的. 所谓 "自包含" 也就是没有和别人产生依赖. 而要把整个流程给串联起来, 需要一系列的 "消息通道(Channel)". 各个服务做完自己的事后, 发出相应的事件, 而又有一些服务在订阅着某些事件来联动.')]),t._v(" "),a("p",[t._v("事件驱动方式的好处至少有五个.")]),t._v(" "),a("ul",[a("li",[t._v("服务间的"),a("strong",[t._v("依赖没有")]),t._v("了, 服务间是平等的, 每个服务都是高度可重用并可被替换的.")]),t._v(" "),a("li",[t._v("服务的开发, 测试, 运维, 以及故障处理都是"),a("strong",[t._v("高度隔离")]),t._v("的.")]),t._v(" "),a("li",[t._v("服务间通过"),a("strong",[t._v("事件关联")]),t._v(", 所以服务间是不会相互 block 的.")]),t._v(" "),a("li",[t._v("在服务间增加一些 Adapter(如日志, 认证, 版本, 限流, 降级, 熔断等)相当容易.")]),t._v(" "),a("li",[t._v("服务间的吞吐也被解开了, 各个服务可以按照自己的处理速度处理.")])]),t._v(" "),a("p",[t._v("知道任何设计都有好有不好的方式. 事件驱动的架构也会有一些不好的地方.")]),t._v(" "),a("ul",[a("li",[t._v("业务流程不再那么明显和好管理. 整个"),a("strong",[t._v("架构变得比较复杂")]),t._v(". 解决这个问题需要有一些可视化的工具来呈现整体业务流程.")]),t._v(" "),a("li",[t._v("事件可能会"),a("strong",[t._v("乱序")]),t._v(". 这会带来非常 Bug 的事. 解决这个问题需要很好地管理一个状态机的控制.")]),t._v(" "),a("li",[a("strong",[t._v("事务处理变得复杂")]),t._v(". 需要使用两阶段提交来做强一致性, 或是退缩到最终一致性.")])]),t._v(" "),a("h5",{attrs:{id:"_3-异步通讯的设计重点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-异步通讯的设计重点"}},[t._v("#")]),t._v(" 3.异步通讯的设计重点")]),t._v(" "),a("p",[t._v("首先需要知道, 为什么要异步通讯.")]),t._v(" "),a("ul",[a("li",[a("mark",[a("strong",[t._v("异步通讯最重要的是解耦服务间的依赖")])]),t._v(". 最佳解耦的方式是通过 Broker 的机制.")]),t._v(" "),a("li",[a("strong",[t._v("解耦的目的是让各个服务的隔离性更好")]),t._v(', 这样不会出现 "一倒倒一片" 的故障.')]),t._v(" "),a("li",[t._v("异步通讯的架构可以获得更大的"),a("strong",[t._v("吞吐量")]),t._v(", 而且各个服务间的性能不受干扰相对独立.")]),t._v(" "),a("li",[t._v('利用 Broker 或队列的方式还可以达到把抖动的吞吐量变成均匀的吞吐量, 这就是所谓的 "削峰", 这对后端系统是个不错的保护.')]),t._v(" "),a("li",[t._v("服务相对独立, 在部署, 扩容和运维上都可以做到独立不受其他服务的干扰.")])]),t._v(" "),a("p",[t._v("但需要知道这样的方式带来的问题, 所以在设计成异步通信的时候需要"),a("strong",[t._v("注意如下事宜")]),t._v(".")]),t._v(" "),a("ul",[a("li",[t._v("用于异步通讯的中间件 Broker 成为了关键, 需要设计成高可用不丢消息的. 另外因为是分布式的, 所以可能很难保证消息的顺序, 因此你的设计最好不依赖于消息的顺序.")]),t._v(" "),a("li",[t._v("异步通讯会导致业务处理流程不那么直观, 因为像接力一样, 所以在 Broker 上需要有相关的服务消息跟踪机制, 否则出现问题后不容易调试.")]),t._v(" "),a("li",[t._v("因为服务间只通过消息交互, 所以业务状态最好由一个总控方来管理, 这个总控方维护一个业务流程的状态变迁逻辑, 以便系统发生故障后知道业务处理到了哪一步, 从而可以在故障清除后继续处理. 这样的设计常见于银行的对账程序, 银行系统会有大量的外部系统通讯, 比如跨行的交易, 跨企业的交易, 等等. 所以为了保证整体数据的一致性, 或是避免漏处理及处理错的交易, 需要有对账系统, 这其实就是那个总控, 这也是为什么银行有的交易是 T+1(隔天结算), 就是因为要对个账, 确保数据是对的.")]),t._v(" "),a("li",[t._v("消息传递中, 可能有的业务逻辑会有像 TCP 协议那样的 send 和 ACK 机制. 比如: A 服务发出一个消息之后, 开始等待处理方的 ACK, 如果等不到的话, 就需要做重传. 此时需要处理方有幂等的处理, 即同一件消息无论收到多少次都只处理一次.")])]),t._v(" "),a("h5",{attrs:{id:"_4-小结-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-小结-4"}},[t._v("#")]),t._v(" 4.小结")]),t._v(" "),a("p",[t._v("来总结一下今天分享的主要内容. 首先, 同步调用有四个问题: "),a("strong",[t._v("影响吞吐量, 消耗系统资源, 只能一对一, 以及有多米诺骨牌效应")]),t._v(". 于是, 我们想用异步调用来避免该问题.")]),t._v(" "),a("p",[t._v("异步调用有三种方式: 请求响应, 直接订阅和中间人订阅. 最后介绍了事件驱动设计的特点和异步通讯设计的重点.")]),t._v(" "),a("h4",{attrs:{id:"弹力设计篇之-幂等性设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#弹力设计篇之-幂等性设计"}},[t._v("#")]),t._v(' 弹力设计篇之"幂等性设计"')]),t._v(" "),a("p",[t._v("所谓"),a("strong",[t._v("幂等性设计, 就是一次和多次请求某一个资源应该具有同样的副作用")]),t._v(".")]),t._v(" "),a("p",[t._v("用数学的语言来表达就是: f(x) = f(f(x)). 比如求绝对值的函数, abs(x) = abs(abs(x)).")]),t._v(" "),a("p",[t._v("为什么需要这样的操作? 说白了, 就是在把系统解耦隔离后, 服务间的调用可能会有"),a("strong",[t._v("三个状态, 一个是成功(Success), 一个是失败(Failed), 一个是超时(Timeout)")]),t._v(" . 前两者都是明确的状态, 而超时则是完全不知道是什么状态.")]),t._v(" "),a("p",[t._v("比如, 超时原因是网络传输丢包的问题, 可能是请求时就没有请求到, 也有可能是请求到了, 返回结果时没有正常返回等等情况. 于是完全不知道下游系统是否收到了请求, 而收到了请求是否处理了, 成功/失败的状态在返回时是否遇到了网络问题. "),a("strong",[t._v("总之请求方完全不知道是怎么回事")]),t._v(".")]),t._v(" "),a("p",[t._v("举几个例子:")]),t._v(" "),a("ul",[a("li",[t._v("订单创建接口, 第一次调用超时了, 然后调用方重试了一次. 是否会多创建一笔订单?")]),t._v(" "),a("li",[t._v("订单创建时, 需要去扣减库存, 这时接口发生了超时, 调用方重试了一次. 是否会多扣一次库存?")]),t._v(" "),a("li",[t._v("当这笔订单开始支付, 在支付请求发出之后, 在服务端发生了扣钱操作, 接口响应超时了, 调用方重试了一次. 是否会多扣一次钱?")])]),t._v(" "),a("p",[t._v("因为系统超时, 而调用户方重试一下, 会给系统带来"),a("strong",[t._v("不一致的副作用")]),t._v(".")]),t._v(" "),a("p",[t._v("在这种情况下, 一般有两种处理方式.")]),t._v(" "),a("ul",[a("li",[t._v("一种是需要下游系统提供相应的"),a("strong",[t._v("查询接口")]),t._v(". 上游系统在 timeout 后去查询一下. 如果查到了, 就表明已经做了, 成功了就不用做了, 失败了就走失败流程.")]),t._v(" "),a("li",[t._v("另一种是通过"),a("strong",[t._v("幂等性")]),t._v("的方式. 也就是说把这个查询操作交给下游系统, 上游系统只管重试, 下游系统保证一次和多次的请求结果是一样的.")])]),t._v(" "),a("p",[a("strong",[t._v("对于第一种方式, 需要对方提供一个查询接口来做配合. 而第二种方式则需要下游的系统提供支持幂等性的交易接口.")])]),t._v(" "),a("h5",{attrs:{id:"_1-全局id"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-全局id"}},[t._v("#")]),t._v(" 1.全局ID")]),t._v(" "),a("p",[t._v("要做到幂等性的交易接口, 需要有一个"),a("strong",[t._v("唯一的标识")]),t._v(", 来标志交易是同一笔交易. 而这个交易 ID 由谁来分配是一件比较头疼的事. 因为这个标识要能做到全局唯一.")]),t._v(" "),a("p",[t._v("如果由一个中心系统来分配, 那么每一次交易都需要找那个中心系统来. 这样增加了程序的性能开销. 如果由上游系统来分配, 则可能会出现 ID 分配重复的问题. 因为上游系统可能会是一个集群, 它们同时承担相同的工作.")]),t._v(" "),a("p",[t._v("为了解决分配冲突的问题, 需要使用一个不会冲突的算法, 比如使用 UUID 这样冲突非常小的算法. 但 UUID 的问题是, 它的字符串占用的空间比较大, 索引的效率非常低, 生成的 ID 太过于随机, 完全不是人读的, 而且没有递增, 如果要按前后顺序排序的话, 基本不可能.")]),t._v(" "),a("p",[t._v("在全局唯一 ID 的算法中, 这里介绍一个 Twitter 的开源项目 "),a("strong",[t._v("Snowflake")]),t._v(". 它是一个分布式 ID 的生成算法. 其核心思想是, 产生一个 long 型的 ID, 其中:")]),t._v(" "),a("ul",[a("li",[t._v("41bits 作为"),a("strong",[t._v("毫秒数")]),t._v(". 大概可以用 69.7 年.")]),t._v(" "),a("li",[t._v("10bits 作为"),a("strong",[t._v("机器编号")]),t._v("(5bits 是数据中心, 5bits 的机器 ID), 支持 1024 个实例.")]),t._v(" "),a("li",[t._v("12bits 作为"),a("strong",[t._v("毫秒内的序列号")]),t._v(". 一毫秒可以生成 4096 个序号.")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/3d6a6e333c302129be548c47cea5e4c1-20230731162102-ft5jqnp.png",alt:""}})]),t._v(" "),a("p",[t._v("其他的像 Redis 或 MongoDB 的全局 ID 生成都和这个算法大同小异. 在这里就不多说了. 可以根据实际情况加上业务的编号.")]),t._v(" "),a("h5",{attrs:{id:"_2-处理流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-处理流程"}},[t._v("#")]),t._v(" 2.处理流程")]),t._v(" "),a("p",[a("strong",[t._v("对于幂等性的处理流程来说, 说白了就是要过滤一下已经收到的交易")]),t._v(". 要做到这个事, 需要一个"),a("strong",[t._v("存储")]),t._v("来记录收到的交易.")]),t._v(" "),a("p",[t._v("于是, 当收到交易请求的时候, 就会到这个存储中去查询. 如果查找到了, 那么就不再做查询了, 并把上次做的结果返回. 如果没有查到, 那么就记录下来.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/1cc3874a88822beb5e7437ccb13480e7-20230731162102-ck2ae9p.png",alt:""}})]),t._v(" "),a("p",[t._v("但是上面这个流程有个问题. 因为绝大多数请求应该都不会是重新发过来的, 所以让 100% 的请求都到这个存储里去查一下, 这会导致处理流程变得很慢.")]),t._v(" "),a("p",[t._v("所以最好是当这个存储出现冲突的时候会报错. 也就是说, 收到交易请求后, 直接去存储里记录这个 ID(相对于数据的 Insert 操作), 如果出现 ID 冲突了的异常, 那么就知道这个之前已经有人发过来了, 所以就不用再做了. 比如, 数据库中可以使用 "),a("code",[t._v("insert into ... values ... on DUPLICATE KEY UPDATE ...")]),t._v("​ 这样的操作.")]),t._v(" "),a("p",[t._v("对于更新的场景来说, 如果只是状态更新, 可以使用如下的方式. 如果出错, 要么是非法操作, 要么是已被更新, 要么是状态不对, 总之多次调用是不会有副作用的.")]),t._v(" "),a("p",[a("code",[t._v('update table set status = "paid" where id = xxx and status = "unpaid";')])]),t._v(" "),a("p",[t._v("当然, 网上还有 MVCC 通过使用版本号等其他方式, 我觉得这些都不标准, 我们希望有一个标准的方式来做这个事, 所以最好还是用一个 ID.")]),t._v(" "),a("p",[a("strong",[t._v("因为幂等性服务也是分布式的, 所以需要这个存储也是共享的. 这样每个服务就变成没有状态的了. 但是这个存储就成了一个非常关键的依赖, 其扩展性和可用性也成了非常关键的指标")]),t._v(". 可以使用关系型数据库, 或是 key-value 的 NoSQL(如 MongoDB)来构建这个存储系统.")]),t._v(" "),a("h5",{attrs:{id:"_3-http的幂等性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-http的幂等性"}},[t._v("#")]),t._v(" 3.HTTP的幂等性")]),t._v(" "),a("p",[a("strong",[t._v("HTTP GET 方法用于获取资源, 不应有副作用, 所以是幂等的")]),t._v(". 比如: GET "),a("code",[t._v("http://www.bank.com/account/123456")]),t._v("​, 不会改变资源的状态, 不论调用一次还是 N 次都没有副作用. 请注意, 这里强调的"),a("mark",[a("strong",[t._v("是一次和 N 次具有相同的副作用, 而不是每次 GET 的结果相同")])]),t._v(". GET "),a("code",[t._v("http://www.news.com/latest-news")]),t._v("​ 这个 HTTP 请求可能会每次得到不同的结果, 但它本身并没有产生任何副作用, 因而是满足幂等性的.")]),t._v(" "),a("p",[a("strong",[t._v("HTTP HEAD 和 GET 本质是一样的, 区别在于 HEAD 不含有呈现数据, 而仅仅是 HTTP 头信息, 不应用有副作用, 也是幂等的")]),t._v(". 有的人可能觉得这个方法没什么用, 其实不是这样的. 想象一个业务情景: 欲判断某个资源是否存在, 我们通常使用 GET, 但这里用 HEAD 则意义更加明确. 也就是说, HEAD 方法可以用来做"),a("strong",[t._v("探活使用")]),t._v(".")]),t._v(" "),a("p",[a("strong",[t._v("HTTP OPTIONS 主要用于获取当前 URL 所支持的方法, 所以也是幂等的")]),t._v('. 若请求成功, 则它会在 HTTP 头中包含一个名为"Allow"的头, 值是所支持的方法, 如"GET, POST".')]),t._v(" "),a("p",[a("strong",[t._v("HTTP DELETE 方法用于删除资源, 有副作用, 但它应该满足幂等性")]),t._v(". 比如: DELETE "),a("code",[t._v("http://www.forum.com/article/4231")]),t._v("​, 调用一次和 N 次对系统产生的"),a("strong",[t._v("副作用是相同")]),t._v("的, 即删掉 ID 为 4231 的帖子. 因此调用者可以多次调用或刷新页面而不必担心引起错误.")]),t._v(" "),a("p",[a("strong",[t._v("HTTP POST 方法用于创建资源, 所对应的 URI 并非创建的资源本身, 而是去执行创建动作的操作者, 有副作用, 不满足幂等性")]),t._v(". 比如: POST "),a("code",[t._v("http://www.forum.com/articles")]),t._v("​的语义是在 "),a("code",[t._v("http://www.forum.com/articles")]),t._v("​ 下创建一篇帖子, HTTP 响应中应包含帖子的创建状态以及帖子的 URI. 两次相同的 POST 请求会在服务器端创建两份资源, 它们具有不同的 URI; 所以 "),a("strong",[t._v("POST 方法不具备幂等性")]),t._v(".")]),t._v(" "),a("p",[a("strong",[t._v("HTTP PUT 方法用于创建或更新操作, 所对应的 URI 是要创建或更新的资源本身, 有副作用, 它应该满足幂等性")]),t._v(". 比如: PUT "),a("code",[t._v("http://www.forum/articles/4231")]),t._v("​ 的语义是创建或更新 ID 为 4231 的帖子. 对同一 URI 进行多次 PUT 的副作用和一次 PUT 是相同的; 因此 "),a("strong",[t._v("PUT 方法具有幂等性")]),t._v(".")]),t._v(" "),a("p",[t._v("所以, 对于 POST 的方式, 很可能会"),a("strong",[t._v("出现多次提交的问题")]),t._v(", 就好比在论坛中发贴时, 有时候因为网络有问题, 可能会对同一篇贴子出现多次提交的情况. 对此的一般的幂等性的设计如下.")]),t._v(" "),a("ul",[a("li",[t._v("首先, "),a("strong",[t._v("在表单中需要隐藏一个 token, 这个 token 可以是前端生成的一个唯一的 ID")]),t._v(". 用于防止用户多次点击了表单提交按钮, 而导致后端收到了多次请求, 却不能分辨是否是重复的提交. 这个 token 是表单的唯一标识. (这种情况其实是通过前端生成 ID 把 POST 变成了 PUT.)")]),t._v(" "),a("li",[t._v("然后, 当用户点击提交后, 后端会把用户提示的数据和这个 token 保存在数据库中. 如果有重复提交, 那么数据库中的 token 会做排它限制, 从而做到幂等性.")]),t._v(" "),a("li",[t._v("更为稳妥的做法是, 后端成功后向前端返回 302 跳转, 把用户的前端页跳转到 GET 请求, 把刚刚 POST 的数据给展示出来. 如果是 Web 上的最好还把之前的表单设置成过期, 这样用户不能通过浏览器后退按钮来重新提交. 这个模式又叫做 "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Post/Redirect/Get",target:"_blank",rel:"noopener noreferrer"}},[t._v("PRG 模式"),a("OutboundLink")],1),t._v("(Post/Redirect/Get).")])]),t._v(" "),a("h5",{attrs:{id:"_5-小结-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-小结-5"}},[t._v("#")]),t._v(" 5.小结")]),t._v(" "),a("p",[t._v("总结一下今天分享的主要内容. 首先, 幂等性的含义是, 一个调用被发送多次所产生的副作用和被发送一次所产生的副作用是一样的. 而服务调用有三种结果: "),a("strong",[t._v("成功, 失败和超时")]),t._v(", 其中超时是需要解决的问题.")]),t._v(" "),a("p",[a("mark",[a("strong",[t._v("解决手段可以是超时后查询调用结果, 也可以是在被调用的服务中实现幂等性")])]),t._v(". 为了在分布式系统中实现幂等性, 我们需要实现"),a("strong",[t._v("全局 ID")]),t._v(". Twitter 的 Snowflake 就是一个比较好用的全局 ID 实现. 最后给出了幂等性接口的处理流程.")]),t._v(" "),a("h4",{attrs:{id:"弹力设计篇之-服务的状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#弹力设计篇之-服务的状态"}},[t._v("#")]),t._v(' 弹力设计篇之"服务的状态"')]),t._v(" "),a("p",[t._v("之前讲的幂等设计中, 为了过滤掉已经处理过的请求, 其中"),a("strong",[t._v("需要保存处理过的状态")]),t._v(", 为了把服务做成无状态的, 我们引入了"),a("strong",[t._v("第三方的存储")]),t._v(". 而这一篇来聊聊"),a("strong",[t._v("服务的状态")]),t._v("这个话题. 我认为, 只有清楚地了解了状态这个事, 才有可能设计出更好或是更有弹力的系统架构.")]),t._v(" "),a("p",[a("mark",[a("strong",[t._v('所谓 "状态", 就是为了保留程序的一些数据或是上下文')])]),t._v(". 比如之前幂等性设计中所说的需要保留每一次请求的状态, 或是像用户登录时的 Session, 我们需要这个 Session 来判断这个请求的合法性, 还有一个业务流程中需要让多个服务组合起来形成一个业务逻辑的运行上下文 Context. 这些都是所谓的状态. 我们的代码中基本上到处都是这样的状态.")]),t._v(" "),a("h5",{attrs:{id:"_1-无状态的服务stateless"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-无状态的服务stateless"}},[t._v("#")]),t._v(" 1.无状态的服务Stateless")]),t._v(" "),a("p",[t._v("一直以来, 无状态的服务都被当作分布式服务设计的最佳实践和铁律. 因为无状态的服务对于扩展性和运维实在是太方便了. "),a("strong",[t._v("没有状态的服务, 可以随意地增加和减少结点, 同样可以随意地搬迁")]),t._v('. 而且无状态的服务可以大幅度降低代码的复杂度以及 Bug 数, 因为没有状态, 所以也没有明显的"副作用".')]),t._v(" "),a("p",[t._v('基本上来说, 无状态的服务和"函数式编程"的思维方式如出一辙. 在函数式编程中, 一个铁律是, 函数是无状态的. 换句话说, 函数是 immutable 不变的, 所有的函数只描述其逻辑和算法, 根本不保存数据, 也不会修改输入的数据, 而是把计算好的结果返回出去, 哪怕要把输入的数据重新拷贝一份并只做少量的修改.')]),t._v(" "),a("p",[t._v("但是, "),a("strong",[t._v("现实世界是一定会有状态的")]),t._v(". 这些状态可能表现在如下的几个方面.")]),t._v(" "),a("ul",[a("li",[t._v("**程序调用的结果. **")]),t._v(" "),a("li",[t._v("**服务组合下的上下文. **")]),t._v(" "),a("li",[t._v("**服务的配置. **")])]),t._v(" "),a("p",[a("mark",[a("strong",[t._v("为了做出无状态的服务, 通常需要把状态保存到其他的地方")])]),t._v(". 比如不太重要的数据可以放到 Redis 中, 重要的数据可以放到 MySQL 中, 或是像 ZooKeeper/Etcd 这样的高可用的强一致性的存储中, 或是分布式文件系统中.")]),t._v(" "),a("p",[t._v("于是, "),a("strong",[t._v("为了做成无状态的服务, 会导致这些服务需要耦合第三方有状态的存储服务. 一方面是有依赖, 另一方面也增加了网络开销, 导致服务的响应时间也会变慢")]),t._v(".")]),t._v(" "),a("p",[t._v("所以, 第三方的这些存储服务也必须要做成"),a("strong",[t._v("高可用高扩展")]),t._v("的方式. 而且为了减少网络开销, 还需要在无状态的服务中增加缓存机制. 然而下次这个用户的请求并不一定会在同一台机器, 所以这个缓存会在所有的机器上都创建, 也算是一种浪费吧.")]),t._v(" "),a("p",[t._v('这种 "转移责任" 的玩法也催生出了对'),a("strong",[t._v("分布式存储")]),t._v('的强烈需求. 正如之前在《分布式系统架构的本质》系列文章中谈到的关键技术之一的"'),a("a",{attrs:{href:"https://time.geekbang.org/column/article/1609",target:"_blank",rel:"noopener noreferrer"}},[t._v("状态 / 数据调度"),a("OutboundLink")],1),t._v('"所说的, 因为数据层的 scheme 众多, 所以很难做出一个放之四海皆准的分布式存储系统.')]),t._v(" "),a("p",[t._v("这也是为什么无状态的服务需要依赖于像 ZooKeeper/Etcd 这样的高可用的有强一致的服务, 或是依赖于底层的分布式文件系统(像开源的 Ceph 和 GlusterFS). 而现在分布式数据库也开始将服务和存储分离, 也是为了让自己的系统更有弹力.")]),t._v(" "),a("h5",{attrs:{id:"_2-有状态的服务stateful"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-有状态的服务stateful"}},[t._v("#")]),t._v(" 2.有状态的服务Stateful")]),t._v(" "),a("p",[t._v('在今天看来, 有状态的服务在今天看上去的确比较"反动", 但是也需要比较一下它和无状态服务的优劣.')]),t._v(" "),a("p",[t._v("正如上面所说的, 无状态服务在程序 Bug 上和水平扩展上有非常优秀的表现, 但是其需要把状态存放在一个第三方存储上, 增加了网络开销, 而在服务内的缓存需要在所有的服务实例上都有(因为每次请求不会都落在同一个服务实例上), 这是比较浪费资源的.")]),t._v(" "),a("p",[t._v("而有状态的服务有这些好处.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("数据本地化(Data Locality)")]),t._v(" . 一方面状态和数据是本机保存, 这方面不但有更低的延时, 而且对于数据密集型的应用来说, 这会更快.")]),t._v(" "),a("li",[a("strong",[t._v("更高的可用性和更强的一致性")]),t._v(". 也就是 CAP 原理中的 A 和 C.")])]),t._v(" "),a("p",[t._v("为什么会这样呢? 因为对于有状态的服务, 需要对于客户端传来的请求, 都必需保证其落在"),a("strong",[t._v("同一个实例")]),t._v("上, 这叫 "),a("strong",[t._v("Sticky Session")]),t._v(" 或是 Sticky Connection. 这样一来, 我们完全不需要考虑数据要被加载到不同的结点上去, 而且这样的模型更容易理解和实现.")]),t._v(" "),a("p",[t._v("可见最重要的区别就是, "),a("strong",[t._v("无状态的服务需要把数据同步到不同的结点上, 而有状态的服务通过 Sticky Session 做数据分片(当然, 同步有同步的问题, 分片也有分片的问题, 这两者没有谁比谁好, 都有 trade-off)")]),t._v(" .")]),t._v(" "),a("p",[t._v("这种 Sticky Session 是怎么实现的呢?")]),t._v(" "),a("p",[t._v("最简单的实现就是"),a("strong",[t._v("用持久化的长连接")]),t._v(". 就算是 HTTP 协议也要用长连接. 或是通过一个简单的哈希(hash)算法, 比如, 通过 uid 求模的方式, 走一致性哈希的玩法, 也可以方便地做水平扩展.")]),t._v(" "),a("p",[t._v('然而这种方式也会带来问题, 那就是结点的负载和数据并不会很均匀. 尤其是长连接的方式, 连上了就不断了. 所以, 玩长连接的玩法一般都会有一种叫"反向压力 (Back Pressure)". 也就是说, 如果服务端成为了热点, 那么就主动断连接, 这种玩法也比较危险, 需要客户端的配合, 否则容易出 Bug.')]),t._v(" "),a("p",[t._v("如果要做到负载和数据均匀的话, 需要有一个元数据索引来映射后端服务实例和请求的对应关键, 还需要一个路由结点, 这个路由结点会根据元数据索引来路由, 而这个元数据索引表会根据后端服务的压力来重新组织相关的映射.")]),t._v(" "),a("p",[t._v("当然, 可以把这个路由结点给去掉, 让有状态的服务直接路由. 要做到这点, 一般来说, 有两种方式. 一种是直接使用配置, 在节点启动时把其元数据读到内存中, 但是这样一来增加或减少结点都需要更新这个配置, 会导致其它结点也一同要重新读入.")]),t._v(" "),a("p",[t._v("另一种比较好的做法是使用"),a("strong",[t._v("到 Gossip 协议")]),t._v(", 通过这个协议在各个节点之间互相散播消息来同步元数据, 这样新增或减少结点, 集群内部可以很容易重新分配(听起来要实现好真的好复杂).")]),t._v(" "),a("p",[t._v("在有状态的服务上做自动化伸缩的是有一些相关的真实案例的. 比如 Facebook 的 Scuba, 这是一个分布式的内存数据库, 它使用了静态的方式, 也就是上面的第一种方式. Uber 的 Ringpop 是一个开源的 Node.js 的根据地理位置分片的路由请求的库(开源地址为: "),a("a",{attrs:{href:"https://github.com/uber-node/ringpop-node",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/uber-node/ringpop-node"),a("OutboundLink")],1),t._v(").")]),t._v(" "),a("p",[t._v("还有微软的 Orleans, Halo 4 就是基于其开发的, 其使用了 Gossip 协议, 一致性哈希和 DHT 技术相结合的方式. 用户通过其 ID 的一致性哈希算法映射到一个节点上, 而这个节点保存了这个用户对应的 DHT, 再通过 DHT 定位到处理用户请求的位置, 这个项目也是开源的(开源地址为: "),a("a",{attrs:{href:"https://github.com/dotnet/orleans",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/dotnet/orleans"),a("OutboundLink")],1),t._v(").")]),t._v(" "),a("h5",{attrs:{id:"_3-服务状态的容错设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-服务状态的容错设计"}},[t._v("#")]),t._v(" 3.服务状态的容错设计")]),t._v(" "),a("p",[a("strong",[t._v("在容错设计中, 服务状态是一件非常复杂的事")]),t._v(". 尤其对于运维来说, 因为要调度服务就需要调度服务的状态, 迁移服务的状态就需要迁移服务的数据. 在数据量比较大的情况下, 这一点就变得更为困难了.")]),t._v(" "),a("p",[t._v("虽然上述有状态的服务的调度通过 Sticky Session 的方式是一种方式, 但我依然觉得理论上来说虽然可以这么干, 这实际在运维的过程中, 这么干还是件挺麻烦的事儿, 不是很好的玩法.")]),t._v(" "),a("p",[t._v("很多系统的高可用的设计都会"),a("strong",[t._v("采取数据在运行时就复制的方案")]),t._v(", 比如: ZooKeeper, Kafka, Redis 或是 ElasticSearch 等等. "),a("strong",[t._v("在运行时进行数据复制就需要考虑一致性的问题, 所以强一致性的系统一般会使用两阶段提交")]),t._v(". 这要求所有的结点都需要有一致的结果, 这是 CAP 里的 "),a("strong",[t._v("CA 系统")]),t._v(". 而也有的系统采用的是大多数人一致就可以了, 比如 Paxos 算法, 这是 CP 系统.")]),t._v(" "),a("p",[t._v("但即使是这样, 当一个结点挂掉了以后, 在另外一个地方重新恢复这个结点时, 这个结点需要把数据同步过来才能提供服务. 然而如果数据量过大, 这个过程可能会很漫长, 这也会影响系统的"),a("strong",[t._v("可用性")]),t._v(".")]),t._v(" "),a("p",[t._v("所以需要使用底层的分布式文件系统, "),a("strong",[t._v("对于有状态的数据不但在运行时进行多结点间的复制, 同时为了避免挂掉, 还需要把数据持久化在硬盘上, 这个硬盘可以是挂载到本地硬盘的一个外部分布式的文件卷")]),t._v(". 这样当结点挂掉以后, 以另外一个宿主机上启动一个新的服务实例时, 这个服务可以从远程把之前的文件系统挂载过来. 然后在启动的过程中就装载好了大多数的数据, 从而可以从网络其它结点上同步少量的数据, 因而可以快速地恢复和提供服务.")]),t._v(" "),a("p",[t._v("这一点, 对于有状态的服务来说非常关键. 所以"),a("strong",[t._v("使用一个分布式文件系统是调度有状态服务的关键")]),t._v(".")]),t._v(" "),a("h5",{attrs:{id:"_4-小结-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-小结-5"}},[t._v("#")]),t._v(" 4.小结")]),t._v(" "),a("p",[t._v("总结一下今天分享的主要内容. 首先讲了无状态的服务. 无状态的服务就像一个函数一样, 对于给定的输入, 它会给出唯一确定的输出. 它的好处是很容易运维和伸缩, 但需要底层有分布式的数据库支持.")]),t._v(" "),a("p",[t._v("接着讲了有状态的服务, "),a("strong",[t._v("它们通过 Sticky Session, 一致性 Hash 和 DHT 等技术实现状态和请求的关联, 并将数据同步到分布式数据库中; 利用分布式文件系统, 还能在节点挂掉时快速启动新实例")]),t._v(".")]),t._v(" "),a("h4",{attrs:{id:"弹力设计篇之-补偿事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#弹力设计篇之-补偿事务"}},[t._v("#")]),t._v(' 弹力设计篇之"补偿事务"')]),t._v(" "),a("p",[t._v("前面说过, 分布式系统有一个比较明显的问题就是, "),a("strong",[t._v("一个业务流程需要组合一组服务")]),t._v(". 这样的事情在微服务下就更为明显了, 因为这"),a("strong",[t._v("需要业务上一致性的保证")]),t._v(". 也就是说, 如果一个步骤失败了, 那么要么回滚到以前的服务调用, 要么不断重试保证所有的步骤都成功.")]),t._v(" "),a("p",[t._v('这里如果需要强一致性, 那在业务层上就需要使用 "两阶段提交" 这样的方式. 但是好在'),a("strong",[t._v("很多情况下并不需要这么强的一致性, 而且强一致性的最佳保证基本都是在底层完成的, 或是像之前说的那样 Stateful 的 Sticky Session 那样在一台机器上完成")]),t._v(". 在我们接触到的大多数业务中, 其实只需要"),a("strong",[t._v("最终一致性")]),t._v("就够了.")]),t._v(" "),a("h5",{attrs:{id:"_1-acid和base"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-acid和base"}},[t._v("#")]),t._v(" 1.ACID和BASE")]),t._v(" "),a("p",[t._v("谈到这里, 有必要先说一下 ACID 和 BASE 的差别. 传统关系型数据库系统的事务都有 ACID 属性, 即原子性(Atomicity), 一致性(Consistency), 隔离性(Isolation, 又称独立性), 持久性(Durability). 下面逐一做下解释:")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("原子性")]),t._v(": 整个事务中的所有操作, 要么全部完成, 要么全部失败, 不可能停滞在中间某个环节. 事务在执行过程中发生错误, 会被回滚(Rollback)到事务开始前的状态, 就像这个事务从来没有执行过一样.")]),t._v(" "),a("li",[a("strong",[t._v("一致性")]),t._v(": 在事务开始之前和事务结束以后, 数据库的完整性约束没有被破坏.")]),t._v(" "),a("li",[a("strong",[t._v("隔离性")]),t._v(": 两个事务的执行是互不干扰的, 一个事务不可能看到其他事务运行时中间某一时刻的数据. 两个事务不会发生交互.")]),t._v(" "),a("li",[a("strong",[t._v("持久性")]),t._v(": 在事务完成以后, 该事务对数据库所做的更改便持久地保存在数据库之中, 并不会被回滚.")])]),t._v(" "),a("p",[t._v("事务的 ACID 属性保证了数据库的一致性, 比如银行系统中, 转账就是一个事务, 从原账户扣除金额, 以及向目标账户添加金额, 这两个数据库操作的总和构成一个完整的逻辑过程, 是不可拆分的原子操作, 从而保证了整个系统中的总金额没有变化.")]),t._v(" "),a("p",[t._v("然而, 这对于分布式系统来说, 尤其是微服务来说, 这样的方式是很难满足高性能要求的. 我们熟悉的 CAP 理论--"),a("strong",[t._v("在分布式的服务架构中, 一致性(Consistency), 可用性(Availability), 分区容忍性(Partition Tolerance), 在现实中不能都满足, 最多只能满足其中两个")]),t._v(".")]),t._v(" "),a("p",[t._v("所以为了提高性能, 出现了 ACID 的一个变种 BASE.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Basic Availability")]),t._v(": 基本可用. 这意味着, 系统可以出现暂时不可用的状态, 而后面会快速恢复.")]),t._v(" "),a("li",[a("strong",[t._v("Soft-state")]),t._v(': 软状态. 它是前面的 "有状态" 和 "无状态" 的服务的一种中间状态. 也就是说, 为了提高性能, 可以'),a("strong",[t._v("让服务暂时保存一些状态或数据, 这些状态和数据不是强一致性的")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("Eventual Consistency")]),t._v(": 最终一致性, 系统在一个短暂的时间段内是不一致的, 但最终整个系统看到的数据是一致的.")])]),t._v(" "),a("p",[t._v("可以看到, BASE 系统是允许或是容忍系统出现暂时性问题的, 这样一来系统就能更有弹力. 因为在分布式系统的世界里, 故障是不可避免的, 我们能做的就是把故障处理当成功能写入代码中, 这就是 Design for Failure.")]),t._v(" "),a("p",[t._v("**BASE 的系统倾向于设计出更加有弹力的的系统, 这种系统的设计特点是, 要保证在短时间内, 就算是有数据不同步的风险, 也应该允许新的交易可以发生, 而后面在业务上将可能出现问题的事务给处理掉, 以保证最终的一致性. **")]),t._v(" "),a("p",[t._v("举个例子, 网上卖书的场景.")]),t._v(" "),a("p",[t._v("ACID 的玩法就是, 大家在买同一本书的过程中, 每个用户的购买请求都需要"),a("strong",[t._v("把库存锁住, 等减完库存后, 把锁释放出来, 后续的人才能进行购买")]),t._v(". 于是在 ACID 的玩法下, 在同一时间不可能有多个用户下单, 这样订单流程需要有排队的情况, 这样一来就不可能做出性能比较高的系统来.")]),t._v(" "),a("p",[t._v("BASE 的玩法是, 大家都可以"),a("strong",[t._v("同时下单")]),t._v(", 这个时候不需要去真正地分配库存, 然后系统"),a("strong",[t._v("异步地处理订单")]),t._v(", 而且是批量的处理. 因为下单的时候没有真正去扣减库存, 所以"),a("strong",[t._v("有可能会有超卖")]),t._v("的情况. 而后台的系统会异步地处理订单时, 发现库存没有了, 于是才会告诉用户你没有购买成功.")]),t._v(" "),a("p",[t._v("BASE 这种玩法, 其实就是亚马逊的玩法, 因为要根据用户的地址去不同的仓库查看库存, 这个操作非常耗时, 所以不想做成异步的都不行.")]),t._v(" "),a("p",[t._v("在亚马逊上买东西, 你会收到一封邮件说, 系统收到你的订单了, 然后过一会儿你会收到你的订单被确认的邮件, 这时候才是真正地分配了库存. 所以有某些时候, 你会遇到先收到了下单的邮件, 过一会又收到了"),a("strong",[t._v("没有库存")]),t._v("的致歉的邮件.")]),t._v(" "),a("p",[t._v("有趣的是, ACID 的意思是酸, 而 BASE 却是碱的意思, 因此这是一个对立的东西. 其实从本质上来讲, "),a("mark",[a("strong",[t._v("酸(ACID)强调的是一致性(CAP 中的 C), 而碱(BASE)强调的是可用性(CAP 中的 A)")])]),t._v(" .")]),t._v(" "),a("h5",{attrs:{id:"_2-业务补偿"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-业务补偿"}},[t._v("#")]),t._v(" 2.业务补偿")]),t._v(" "),a("p",[t._v("有了上面对 ACID 和 BASE 的分析, 可以知道在很多情况下, 我们是无法做到强一致的 ACID 的. 特别是需要跨多个系统的时候, 而且这些系统还不是由一个公司所提供的. 比如在日常生活中经常会遇到这样的情况, 就是要找很多方协调很多事, 而且要保证每一件事都成功, 否则整件事就做不到.")]),t._v(" "),a("p",[t._v("比如要出门旅游, 需要干这么几件事. 第一, 向公司请假, 拿到相应的假期; 第二, 订飞机票或是火车票; 第三, 订酒店; 第四, 租车. 这四件事中, 前三件必需完全成功, 我们才能出行, 而第四件事只是一个锦上添花的事, 但第四件事一旦确定, 那么也会成为整个事务的一部分. 这些事都是要向不同的组织或系统请求. 我们可以并行地做这些事, 而如果某个事有变化, 其它的事都会跟着出现一些变化.")]),t._v(" "),a("p",[t._v("设想下面的几种情况.")]),t._v(" "),a("ol",[a("li",[t._v("我没有订到返程机票, 那么我就去不了了. 我需要把订到的去程机票, 酒店, 租到的车都给取消了, 并且把请的假也取消了.")]),t._v(" "),a("li",[t._v("如果假也请好了, 机票, 酒店也订好了, 只是车没租到, 那么并不影响我出行这个事, 整个事还是可以继续的.")]),t._v(" "),a("li",[t._v("如果我的飞机因为天气原因取消或是晚点了, 那么我"),a("strong",[t._v("被迫要去调整和修改")]),t._v("我的酒店预订和租车的预订.")])]),t._v(" "),a("p",[t._v("从人类的实际生活当中可以看出, 上述的这些情况都是天天在发生的事情. 其实分布式系统也是一样的, 也是需要处理这样的事情--"),a("mark",[a("strong",[t._v("就是当条件不满足, 或是有变化的时候, 需要从业务上做相应的整体事务的补偿")])]),t._v(".")]),t._v(" "),a("p",[t._v("一般来说, 业务的事务补偿都是需要一个工作流引擎的. 亚马逊是一个超级喜欢工作流引擎的公司, 这个工作流引擎把各式各样的服务给串联在一起, "),a("strong",[t._v("并在工作流上做相应的业务补偿, 整个过程设计成为最终一致性的")]),t._v(".")]),t._v(" "),a("p",[a("strong",[t._v("对于业务补偿来说, 首先需要将服务做成幂等性的, 如果一个事务失败了或是超时了, 需要不断地重试, 努力地达到最终想要的状态. 然后, 如果不能达到这个想要的状态, 需要把整个状态恢复到之前的状态. 另外如果有变化的请求, 需要启动整个事务的业务更新机制")]),t._v(".")]),t._v(" "),a("p",[t._v("所以, 一个好的业务补偿机制需要做到下面这几点.")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("要能清楚地描述出要达到什么样的状态")]),t._v("(比如: 请假, 机票, 酒店这三个都必须成功, 租车是可选的), 以及如果其中的条件不满足, 那么要回退到哪一个状态. 这就是所谓的"),a("strong",[t._v("整个业务的起始状态定义")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("当整条业务跑起来的时候, 可以串行或并行地做这些事")]),t._v(". 对于旅游订票是可以并行的, 但是对于网购流程(下单, 支付, 送货)是不能并行的. 总之系统需要努力地通过一系列的操作达到一个想要的状态. 如果达不到, 就需要通过补偿机制回滚到之前的状态. "),a("strong",[t._v("这就是所谓的状态拟合")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("对于已经完成的事务进行整体修改, 可以考虑成一个修改事务")]),t._v(".")])]),t._v(" "),a("p",[t._v("其实, 在纯技术的世界里也有这样的事. 比如, 线上运维系统需要发布一个新的服务或是对一个已有的服务进行水平扩展, 需要先找到相应的机器, 然后初始化环境, 再部署上应用, 再做相应的健康检查, 最后接入流量. 这一系列的动作都要完全成功, 所以, 我们的部署系统就需要"),a("strong",[t._v("管理好整个过程和相关的运行状态")]),t._v(".")]),t._v(" "),a("h5",{attrs:{id:"_3-业务补偿的设计重点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-业务补偿的设计重点"}},[t._v("#")]),t._v(" 3.业务补偿的设计重点")]),t._v(" "),a("p",[t._v("业务补偿主要做两件事.")]),t._v(" "),a("ol",[a("li",[a("mark",[a("strong",[t._v("努力地把一个业务流程执行完成.")])])]),t._v(" "),a("li",[a("mark",[a("strong",[t._v("如果执行不下去, 需要启动补偿机制, 回滚业务流程.")])])])]),t._v(" "),a("p",[t._v("所以下面是几个重点.")]),t._v(" "),a("ul",[a("li",[t._v("因为要把一个业务流程执行完成, 需要"),a("strong",[t._v("这个流程中所涉及的服务方支持幂等性. 并且在上游有重试机制")]),t._v(".")]),t._v(" "),a("li",[t._v("需要小心维护和监控"),a("strong",[t._v("整个过程的状态")]),t._v(", 所以千万不要把这些状态放到不同的组件中, 最好"),a("strong",[t._v("是一个业务流程的控制方来做这个事, 也就是一个工作流引擎")]),t._v(". 所以这个工作流引擎是需要高可用和稳定的. 这就好像旅行代理机构一样, 我们把需求告诉它, 它会搞定所有的事. 如果有问题, 也会帮我们回滚和补偿的.")]),t._v(" "),a("li",[t._v("补偿的业务逻辑和流程不一定非得是严格反向操作. 有时候可以并行, 有时候, 可能会更简单. 总之, "),a("mark",[a("strong",[t._v("设计业务正向流程的时候, 也需要设计业务的反向补偿流程")])]),t._v(".")]),t._v(" "),a("li",[t._v("要清楚地知道, "),a("strong",[t._v("业务补偿的业务逻辑是强业务相关的, 很难做成通用的")]),t._v(".")]),t._v(" "),a("li",[t._v("下层的业务方最好提供短期的资源预留机制. 就像电商中的把货品的库存预先占住等待用户在 15 分钟内支付. 如果没有收到用户的支付, 则释放库存. 然后回滚到之前的下单操作, 等待用户重新下单.")])]),t._v(" "),a("h5",{attrs:{id:"_4-小结-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-小结-6"}},[t._v("#")]),t._v(" 4.小结")]),t._v(" "),a("p",[t._v("总结一下今天分享的主要内容. 首先介绍了 ACID 和 BASE 两种不同级别的一致性. 在分布式系统中, ACID 有更强的一致性, 但可伸缩性非常差, 仅在必要时使用; BASE 的一致性较弱, 但有很好的可伸缩性, 还可以异步批量处理; "),a("strong",[t._v("大多数分布式事务适合 BASE")]),t._v(".")]),t._v(" "),a("p",[a("strong",[t._v("要实现 BASE 事务, 需要实现补偿逻辑, 因为事务可能失败, 此时需要协调各方进行撤销. 补偿的各个步骤可以根据具体业务来确定是串行还是并行. 由于补偿事务是和业务强相关的, 所以必须实现在业务逻辑里.")])]),t._v(" "),a("h4",{attrs:{id:"弹力设计篇之-重试设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#弹力设计篇之-重试设计"}},[t._v("#")]),t._v(' 弹力设计篇之"重试设计"')]),t._v(" "),a("p",[t._v("关于重试, 这个模式应该是一个很普遍的设计模式了. 当把单体应用服务化, 尤其是微服务化, 本来在一个进程内的函数调用就成了远程调用, 这样就会"),a("strong",[t._v("涉及到网络上的问题")]),t._v(". 网络上有很多的各式各样的组件, 如: DNS 服务, 网卡, 交换机, 路由器, 负载均衡等设备, 这些设备都不一定是稳定的, 在数据传输的整个过程中, 只要一个环节出了问题, 那么都会导致问题.")]),t._v(" "),a("h5",{attrs:{id:"_1-重试的场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-重试的场景"}},[t._v("#")]),t._v(" 1.重试的场景")]),t._v(" "),a("p",[t._v("所以, 我们需要一个重试的机制. 但需要明白的是,  "),a("strong",[t._v('"重试" 的语义是我们认为这个故障是暂时的, 而不是永久的, 所以才会去重试')]),t._v(".")]),t._v(" "),a("p",[t._v("我认为, 设计重试时, 我们需要定义出什么情况下需要重试, 例如, 调用超时, 被调用端返回了某种可以重试的错误(如繁忙中, 流控中, 维护中, 资源不足等).")]),t._v(" "),a("p",[t._v("而对于一些别的错误, 则最好不要重试, 比如: 业务级的错误(如没有权限, 或是非法数据等错误), 技术上的错误(如: HTTP 的 503 等, 这种原因可能是触发了代码的 bug, 重试下去没有意义).")]),t._v(" "),a("h5",{attrs:{id:"_2-重试的策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-重试的策略"}},[t._v("#")]),t._v(" 2.重试的策略")]),t._v(" "),a("p",[t._v("关于重试的设计, 一般来说, 都需要有个重试的"),a("strong",[t._v("最大值")]),t._v(", 经过一段时间不断的重试后, 就没有必要再重试了, 应该报故障了. 在重试过程中, 每一次重试失败时都应该休息一会儿再重试, 这样可以避免因为重试过快而导致网络上的负担加重.")]),t._v(" "),a("p",[t._v("在重试的设计中, 一般都会引入 Exponential Backoff 的策略, 也就是"),a("strong",[t._v('所谓的 "指数级退避". 在这种情况下, 每一次重试所需要的休息时间都会成倍增加')]),t._v(". 这种机制主要是用来让被调用方能够有更多的时间来从容处理请求. 这其实和 TCP 的拥塞控制有点像.")]),t._v(" "),a("p",[t._v("如果我们写成代码应该是下面这个样子.")]),t._v(" "),a("p",[t._v("首先定义一个调用返回的枚举类型, 其中包括了 5 种返回错误---成功 SUCCESS, 维护中 NOT_READY, 流控中 TOO_BUSY, 没有资源 NO_RESOURCE, 系统错误 SERVER_ERROR.")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Results")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SUCCESS")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NOT_READY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TOO_BUSY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NO_RESOURCE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SERVER_ERROR")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("接下来定义一个 Exponential Backoff 的函数, 其返回 2 的指数. 这样每多一次重试就需要多等一段时间. 如: 第一次等 200ms, 第二次要 400ms, 第三次要等 800ms...")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getWaitTimeExp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" retryCount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" waitTime "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Math")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pow")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" retryCount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" waitTime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("下面是真正的重试逻辑. 可以看到, 在成功的情况下, 以及不属于我们定义的错误下, 是不需要重试的, 而两次重试间需要等的时间是以指数上升的.")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doOperationAndWaitForResult")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Do some asynchronous operation.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" token "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("asyncOperation")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" retries "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" retry "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Get the result of the asynchronous operation.")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Results")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAsyncOperationResult")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("token"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Results")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SUCCESS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            retry "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Results")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NOT_READY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("mark"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("\n                      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Results")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TOO_BUSY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("mark"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("\n                      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Results")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NO_RESOURCE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("mark"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("\n                      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Results")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SERVER_ERROR")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("mark"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            retry "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            retry "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("retry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" waitTime "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Math")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("min")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getWaitTimeExp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("retries"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MAX_WAIT_INTERVAL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Wait for the next Retry.")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("waitTime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("retry "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("retries"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MAX_RETRIES")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br")])]),a("p",[t._v("上面的代码是非常基本的重试代码, 没有什么新鲜的, 来看看 Spring 中所支持的一些重试策略.")]),t._v(" "),a("h5",{attrs:{id:"_3-spring的重试策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-spring的重试策略"}},[t._v("#")]),t._v(" 3.Spring的重试策略")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/spring-projects/spring-retry",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring Retry"),a("OutboundLink")],1),t._v(" 是一个单独实现重试功能的项目, 可以通过 Annotation 的方式使用. 具体如下.")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Service")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyService")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Retryable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SQLException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n      maxAttempts "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      backoff "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Backoff")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("delay "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("retryService")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" sql"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SQLException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("p",[t._v("配置 @Retryable 注解, 只对 SQLException 的异常进行重试, 重试两次, 每次延时 5000ms. 相关的细节可以看相应的文档. 我在这里, 只想让你看一下 Spring 有哪些重试的策略.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("NeverRetryPolicy")]),t._v(": 只允许调用 RetryCallback 一次, 不允许重试.")]),t._v(" "),a("li",[a("strong",[t._v("AlwaysRetryPolicy")]),t._v(": 允许无限重试, 直到成功, 此方式逻辑不当会导致死循环.")]),t._v(" "),a("li",[a("strong",[t._v("SimpleRetryPolicy")]),t._v(": 固定次数重试策略, 默认重试最大次数为 3 次, RetryTemplate 默认使用的策略.")]),t._v(" "),a("li",[a("strong",[t._v("TimeoutRetryPolicy")]),t._v(": 超时时间重试策略, 默认超时时间为 1 秒, 在指定的超时时间内允许重试.")]),t._v(" "),a("li",[a("strong",[t._v("CircuitBreakerRetryPolicy")]),t._v(": 有熔断功能的重试策略, 需设置 3 个参数 openTimeout, resetTimeout 和 delegate; 关于熔断, 会在后面描述.")]),t._v(" "),a("li",[a("strong",[t._v("CompositeRetryPolicy")]),t._v(": 组合重试策略. 有两种组合方式, 乐观组合重试策略是指只要有一个策略允许重试即可以, 悲观组合重试策略是指只要有一个策略不允许重试即不可以. 但不管哪种组合方式, 组合中的每一个策略都会执行.")])]),t._v(" "),a("p",[t._v("关于 Backoff 的策略如下.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("NoBackOffPolicy")]),t._v(": 无退避算法策略, 即当重试时是立即重试;")]),t._v(" "),a("li",[a("strong",[t._v("FixedBackOffPolicy")]),t._v(": 固定时间的退避策略, 需设置参数 sleeper 和 backOffPeriod, sleeper 指定等待策略, 默认是 Thread.sleep, 即线程休眠, backOffPeriod 指定休眠时间, 默认 1 秒.")]),t._v(" "),a("li",[a("strong",[t._v("UniformRandomBackOffPolicy")]),t._v(": 随机时间退避策略, 需设置 sleeper, minBackOffPeriod 和 maxBackOffPeriod. 该策略在 [minBackOffPeriod, maxBackOffPeriod] 之间取一个随机休眠时间, minBackOffPeriod 默认为 500 毫秒, maxBackOffPeriod 默认为 1500 毫秒.")]),t._v(" "),a("li",[a("strong",[t._v("ExponentialBackOffPolicy")]),t._v(": 指数退避策略, 需设置参数 sleeper, initialInterval, maxInterval 和 multiplier. initialInterval 指定初始休眠时间, 默认为 100 毫秒. maxInterval 指定最大休眠时间, 默认为 30 秒. multiplier 指定乘数, 即下一次休眠时间为当前休眠时间 *multiplier.")]),t._v(" "),a("li",[a("strong",[t._v("ExponentialRandomBackOffPolicy")]),t._v(": 随机指数退避策略, 引入随机乘数, 之前说过固定乘数可能会引起很多服务同时重试导致 DDos, 使用随机休眠时间来避免这种情况.")])]),t._v(" "),a("h5",{attrs:{id:"_4-重试设计的重点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-重试设计的重点"}},[t._v("#")]),t._v(" 4.重试设计的重点")]),t._v(" "),a("p",[t._v("重试的设计重点主要如下:")]),t._v(" "),a("ul",[a("li",[t._v("要确定什么样的错误下需要重试;")]),t._v(" "),a("li",[a("strong",[t._v("重试的时间和重试的次数")]),t._v(". 这种在不同的情况下要有不同的考量. 有时候, 而对一些不是很重要的问题时, 我们应该更快失败而不是重试一段时间若干次. 比如一个前端的交互需要用到后端的服务. 这种情况下, 在面对错误的时候, 应该"),a("strong",[t._v("快速失败报错")]),t._v("(比如: 网络错误请重试). 而面对其它的一些错误, 比如流控, 那么应该使用指数退避的方式, 以避免造成更多的流量.")]),t._v(" "),a("li",[t._v("如果超过重试次数, 或是一段时间, 那么重试就没有意义了. 这个时候, 说明这个错误不是一个短暂的错误, 那么对于新来的请求, 就没有必要再进行重试了, 这个时候对新的请求直接返回错误就好了. 但是这样一来, 如果后端恢复了, 我们怎么知道呢, 此时需要使用熔断设计了. 这个在后面会说.")]),t._v(" "),a("li",[t._v("重试还需要考虑被调用方是否有"),a("strong",[t._v("幂等的设计")]),t._v(". 如果没有, 那么重试是不安全的, 可能会导致一个相同的操作被执行多次.")]),t._v(" "),a("li",[a("strong",[t._v("重试的代码比较简单也比较通用, 完全可以不用侵入到业务代码中")]),t._v(". 这里有两个模式. 一个是代码级的, 像 Java 那样可以使用 Annotation 的方式(在 Spring 中可以用到这样的注解), 如果没有注解也可以包装在底层库或是 SDK 库中不需要让上层业务感知到. 另外一种是走 "),a("strong",[t._v("Service Mesh 的方式")]),t._v("(关于 Service Mesh 的方式, 会在后面介绍).")]),t._v(" "),a("li",[t._v("对于有事务相关的操作. 我们可能会希望能重试成功, 而不至于走业务补偿那样的复杂的回退流程. 对此, 可能需要一个比较长的时间来做重试, 但是我们需要保存请求的上下文, 这可能对程序的运行有比"),a("strong",[t._v("较大的开销")]),t._v(", 因此, 有一些设计会先把这样的"),a("strong",[t._v("上下文暂存在本机或是数据库")]),t._v("中, 然后腾出资源来做别的事, 过一会再回来把之前的请求从存储中捞出来重试.")])]),t._v(" "),a("h5",{attrs:{id:"_5-小结-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-小结-6"}},[t._v("#")]),t._v(" 5.小结")]),t._v(" "),a("p",[t._v("总结一下今天分享的主要内容. 首先讲了重试的场景, 比如流控, 但并不是所有的失败场景都适合重试. 接着讲了重试的策略, 包括简单的指数退避策略, 和 Spring 实现的多种策略. 这些策略"),a("strong",[t._v("可以用 Java 的 Annotation 来实现, 或者用 Service Mesh 的方式, 从而不必写在业务逻辑里")]),t._v(". 最后总结了重试设计的重点.")]),t._v(" "),a("h4",{attrs:{id:"弹力设计篇之-熔断设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#弹力设计篇之-熔断设计"}},[t._v("#")]),t._v(' 弹力设计篇之"熔断设计"')]),t._v(" "),a("p",[t._v('熔断机制这个词对你来说肯定不陌生, 它的灵感来源于电闸上的 "保险丝", 当电压有问题时(比如短路), 自动跳闸, 此时电路就会断开, 电器就会受到保护. 不然会导致电器被烧坏, 如果人没在家或是人在熟睡中, 还会导致火灾. 所以, 在电路世界通常都会有这样的自我保护装置.')]),t._v(" "),a("p",[t._v("同样, 在分布式系统设计中, 也应该有这样的方式. 前面说过重试机制, 如果错误太多, 或是在短时间内得不到修复, 那么重试也没有意义了, 此时应该开启熔断操作, 尤其是"),a("strong",[t._v("后端太忙的时候, 使用熔断设计可以保护后端不会过载")]),t._v(".")]),t._v(" "),a("h5",{attrs:{id:"_1-熔断设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-熔断设计"}},[t._v("#")]),t._v(" 1.熔断设计")]),t._v(" "),a("p",[a("strong",[t._v("熔断器模式可以防止应用程序不断地尝试执行可能会失败的操作, 使得应用程序继续执行而不用等待修正错误, 或者浪费 CPU 时间去等待长时间的超时产生. 熔断器模式也可以使应用程序能够诊断错误是否已经修正. 如果已经修正, 应用程序会再次尝试调用操作.")])]),t._v(" "),a("p",[t._v("换句话来说, 我觉得熔断器模式就像是"),a("strong",[t._v("那些容易导致错误的操作的一种代理")]),t._v(". 这种代理能够记录最近调用发生错误的次数, 然后决定允许操作继续, 或者立即返回错误.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/2ee6418089681d6ad560e947befe12c8-20230731162102-gu66hx0.png",alt:""}}),t._v("\n(本图来自 Martin Fowler 的 Circuit Breaker)")]),t._v(" "),a("p",[t._v("熔断器可以使用"),a("strong",[t._v("状态机")]),t._v("来实现, 内部模拟以下几种状态.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("闭合(Closed)状态")]),t._v(": 需要一个"),a("strong",[t._v("调用失败的计数器")]),t._v(", 如果调用失败, 则使失败次数加 1. 如果最近失败次数超过了在给定时间内允许失败的阈值, 则切换到"),a("strong",[t._v("断开")]),t._v(" (Open) 状态. 此时开启了一个超时时钟, 当该时钟超过了该时间, 则切换到"),a("strong",[t._v("半断开(Half-Open)状态")]),t._v(". 该超时时间的设定是给了系统一次机会来修正导致调用失败的错误, 以回到正常工作的状态. 在 Closed 状态下, 错误计数器是基于时间的. 在特定的时间间隔内会自动重置. 这能够防止由于某次的偶然错误导致熔断器进入断开状态. 也可以基于连续失败的次数.")]),t._v(" "),a("li",[a("strong",[t._v("断开 (Open) 状态")]),t._v(": 在该状态下, 对应用程序的请求会"),a("strong",[t._v("立即返回错误响应")]),t._v(", 而不调用后端的服务. 这样也许比较粗暴, 有些时候可以 cache 住上次成功请求, 直接返回缓存(当然这个缓存放在本地内存就好了), 如果没有缓存再返回错误(缓存的机制最好用在全站一样的数据, 而不是用在不同的用户间不同的数据, 因为后者需要缓存的数据有可能会很多).")]),t._v(" "),a("li",[a("strong",[t._v("半开(Half-Open)状态")]),t._v(": 允许应用程序"),a("strong",[t._v("一定数量的请求去调用服务")]),t._v(". 如果这些请求对服务的调用成功, 那么可以认为之前导致调用失败的错误已经修正, "),a("strong",[t._v("此时熔断器切换到闭合状态, 同时将错误计数器重置")]),t._v(". 如果这一定数量的请求有调用失败的情况, 则认为导致之前调用失败的问题仍然存在, "),a("strong",[t._v("熔断器切回到断开状态, 然后重置计时器来给系统一定的时间来修正错误")]),t._v(". 半断开状态能够有效防止正在恢复中的服务被突然而来的大量请求再次拖垮.")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/7c23fd33b17645536a6dad80e4bf3e86-20230731162102-tlcqmog.png",alt:""}}),t._v("\n(本图来自 Martin Fowler 的 Circuit Breaker)")]),t._v(" "),a("p",[a("mark",[a("strong",[t._v("实现熔断器模式使得系统更加稳定和有弹性, 在系统从错误中恢复的时候提供稳定性, 并且减少了错误对系统性能的影响. 它快速地拒绝那些有可能导致错误的服务调用, 而不会去等待操作超时或者永远不返回结果来提高系统的响应时间.")])])]),t._v(" "),a("p",[t._v("如果熔断器设计模式在每次状态切换的时候会发出一个"),a("strong",[t._v("事件")]),t._v(", 这种信息可以用来"),a("strong",[t._v("监控服务的运行状态")]),t._v(", 能够通知管理员在熔断器切换到断开状态时进行处理.")]),t._v(" "),a("p",[t._v("下图是 Netflix 的开源项目 "),a("a",{attrs:{href:"https://github.com/Netflix/Hystrix",target:"_blank",rel:"noopener noreferrer"}},[t._v("Hystrix"),a("OutboundLink")],1),t._v(" 中的熔断的实现逻辑(其出处在这里).")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/63494dc366d68c60d35835dd6ecce14f-20230731162102-5yafgi0.png",alt:""}})]),t._v(" "),a("p",[t._v("从这个流程图中, 可以看到:")]),t._v(" "),a("ol",[a("li",[t._v("有请求来了, 首先 allowRequest() 函数判断"),a("strong",[t._v("是否在熔断中, 如果不是则放行")]),t._v(", 如果是的话, 还要看有没有到达一个熔断时间片, 如果熔断时间片到了, 也放行, 否则直接返回出错.")]),t._v(" "),a("li",[t._v("每次调用都有两个函数 "),a("strong",[t._v("markSuccess(duration)")]),t._v("  和 "),a("strong",[t._v("markFailure(duration)")]),t._v("  来统计一下在一定的 duration 内有多少调用是成功还是失败的.")]),t._v(" "),a("li",[t._v("判断是否熔断的条件 isOpen(), 是计算一下 "),a("strong",[t._v("failure/(success+failure)")]),t._v("  当前的错误率, 如果高于一个阈值, 那么打开熔断, 否则关闭.")]),t._v(" "),a("li",[t._v("Hystrix 会在内存中维护一个数组, "),a("strong",[t._v("其中记录着每一个周期的请求结果的统计")]),t._v(". 超过时长长度的元素会被删除掉.")])]),t._v(" "),a("h5",{attrs:{id:"_2-熔断设计的重点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-熔断设计的重点"}},[t._v("#")]),t._v(" 2.熔断设计的重点")]),t._v(" "),a("p",[t._v("在实现熔断器模式的时候, 以下这些因素需可能需要考虑.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("错误的类型")]),t._v(". 需要注意的是请求失败的原因会有很多种. 需要根据不同的错误情况来调整相应的策略. 所以, 熔断和重试一样, 需要"),a("strong",[t._v("对返回的错误进行识别")]),t._v(". "),a("strong",[t._v("一些错误先走重试的策略(比如限流, 或是超时), 重试几次后再打开熔断. 一些错误是远程服务挂掉, 恢复时间比较长; 这种错误不必走重试, 就可以直接打开熔断策略")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("日志监控")]),t._v(". 熔断器应该能够记录所有失败的请求, 以及一些可能会尝试成功的请求, 使得管理员能够监控使用熔断器保护服务的执行情况.")]),t._v(" "),a("li",[a("strong",[t._v("测试服务是否可用")]),t._v(". 在断开状态下, 熔断器可以采用"),a("strong",[t._v("定期地 ping 一下远程服务的健康检查接口")]),t._v(", 来判断服务是否恢复, 而不是使用计时器来自动切换到半开状态. 这样做的一个好处是, 在服务恢复的情况下, 不需要真实的用户流量就可以把状态从半开状态切回关闭状态. 否则在半开状态下, 即便服务已恢复了, 也需要用户真实的请求来恢复, 这会影响用户的真实请求.")]),t._v(" "),a("li",[a("strong",[t._v("手动重置")]),t._v(". 在系统中对于失败操作的"),a("strong",[t._v("恢复时间")]),t._v("是很难确定的, 提供一个手动重置功能能够使得管理员可以手动地强制将熔断器切换到闭合状态. 同样的, 如果受熔断器保护的服务暂时不可用的话, 管理员能够强制将熔断器设置为断开状态.")]),t._v(" "),a("li",[a("strong",[t._v("并发问题")]),t._v(". 相同的熔断器有可能被大量并发请求同时访问. "),a("strong",[t._v("熔断器的实现不应该阻塞并发的请求或者增加每次请求调用的负担")]),t._v(". 尤其是其中对调用结果的统计, 一般来说会成为一个共享的数据结构, 它会导致有锁的情况. 在这种情况下, 最好使用一些"),a("strong",[t._v("无锁的数据结构")]),t._v(", 或是 atomic 的原子操作. 这样会带来更好的性能.")]),t._v(" "),a("li",[a("strong",[t._v("资源分区")]),t._v(". 有时候会把资源分布在不同的分区上. 比如, 数据库的分库分表, 某个分区可能出现问题, 而其它分区还可用. 在这种情况下, 单一的熔断器会把所有的分区访问给混为一谈, 从而一旦开始熔断, 那么所有的分区都会受到熔断影响. 或是出现一会儿熔断一会儿又好, 来来回回的情况. 所以熔断器需要考虑这样的问题, "),a("strong",[t._v("只对有问题的分区进行熔断, 而不是整体")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("重试错误的请求")]),t._v(". 有时候, 错误和请求的数据和参数有关系, 所以记录下出错的请求, 在半开状态下重试能够准确地知道服务是否真的恢复. 当然这需要被调用端支持幂等调用, 否则会出现一个操作被执行多次的副作用.")])]),t._v(" "),a("h5",{attrs:{id:"_3-小结-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-小结-6"}},[t._v("#")]),t._v(" 3.小结")]),t._v(" "),a("p",[t._v("总结一下今天分享的主要内容. 首先, 熔断设计是受了电路设计中保险丝的启发, 其需要实现三个状态: "),a("strong",[t._v("闭合, 断开和半开, 分别对应于正常, 故障和故障后检测故障是否已被修复的场景")]),t._v(", 并介绍了 Netflix 的 Hystrix 对熔断的实现. 最后总结了熔断设计的几个重点.")]),t._v(" "),a("h4",{attrs:{id:"弹力设计篇之-限流设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#弹力设计篇之-限流设计"}},[t._v("#")]),t._v(' 弹力设计篇之"限流设计"')]),t._v(" "),a("p",[t._v("保护系统不会在过载的情况下出现问题, 就需要限流. 很多系统中都可以看到这样的设计, 比如数据库访问的连接池, 还有线程池, 还有 Nginx 下的用于限制瞬时并发连接数的 "),a("strong",[t._v("limit_conn")]),t._v(" 模块, 限制每秒平均速率的 limit_req 模块, 还有限制 MQ 的生产速, 等等.")]),t._v(" "),a("h5",{attrs:{id:"_1-限流的策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-限流的策略"}},[t._v("#")]),t._v(" 1.限流的策略")]),t._v(" "),a("p",[a("mark",[a("strong",[t._v("限流的目的是通过对并发访问进行限速, 相关的策略一般是, 一旦达到限制的速率, 那么就会触发相应的限流行为")])]),t._v(". 一般来说, 触发的限流行为如下.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("拒绝服务")]),t._v(". 把多出来的请求拒绝掉. 一般来说, 好的限流系统在受到流量暴增时, 会统计当前哪个客户端来的请求最多, 直接拒掉这个客户端, 这种行为可以把一些不正常的或者是带有恶意的高并发访问挡在门外.")]),t._v(" "),a("li",[a("strong",[t._v("服务降级")]),t._v(". 关闭或是把后端服务做"),a("strong",[t._v("降级处理")]),t._v(". 这样可以让服务有足够的资源来处理更多的请求. 降级有很多方式, 一种是把一些不重要的服务给停掉, 把 CPU, 内存或是数据的资源让给更重要的功能; "),a("strong",[t._v("一种是不再返回全量数据, 只返回部分数据")]),t._v(". 因为全量数据需要做 SQL Join 操作, 部分的数据则不需要, 所以可以让 SQL 执行更快, 还有最快的一种是"),a("strong",[t._v("直接返回预设的缓存, 以牺牲一致性的方式来获得更大的性能吞吐")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("特权请求")]),t._v(". 所谓特权请求的意思是, 资源不够了, 只能把有限的资源分给重要的用户, 比如: 分给权利更高的 VIP 用户. 在多租户系统下, 限流的时候应该保大客户的, 所以大客户有特权可以优先处理, 而其它的非特权用户就得让路了.")]),t._v(" "),a("li",[a("strong",[t._v("延时处理")]),t._v(". 在这种情况下, 一般会有一个队列来缓冲大量的请求, 这个队列如果满了, 那么就只能拒绝用户了, 如果这个队列中的任务超时了, 也要返回系统繁忙的错误了. 使用缓冲队列只是为了减缓压力, 一般用于应对短暂的峰刺请求.")]),t._v(" "),a("li",[a("strong",[t._v("弹性伸缩")]),t._v(". 动用"),a("strong",[t._v("自动化运维")]),t._v("的方式对相应的"),a("strong",[t._v("服务做自动化的伸")]),t._v("缩. 这个需要一个应用性能的监控系统, 能够感知到目前最繁忙的 TOP 5 的服务是哪几个. 然后去伸缩它们, 还需要一个自动化的发布, 部署和服务注册的运维系统, 而且还要快, 越快越好. 否则系统会被压死掉了. 当然如果是"),a("strong",[t._v("数据库的压力过大, 弹性伸缩应用是没什么用的, 这个时候还是应该限流")]),t._v(".")])]),t._v(" "),a("h5",{attrs:{id:"_2-限流的实现方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-限流的实现方式"}},[t._v("#")]),t._v(" 2.限流的实现方式")]),t._v(" "),a("h6",{attrs:{id:"_1-计数器方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-计数器方式"}},[t._v("#")]),t._v(" (1)计数器方式")]),t._v(" "),a("p",[t._v("最简单的限流算法就是维护一个"),a("strong",[t._v("计数器")]),t._v(" Counter, 当一个请求来时, 就做加一操作, 当一个请求处理完后就做减一操作. 如果这个 Counter 大于某个数了(设定的限流阈值), 那么就开始拒绝请求以保护系统的负载了.")]),t._v(" "),a("p",[t._v("这个算法足够的简单粗暴.")]),t._v(" "),a("h6",{attrs:{id:"_2-队列算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-队列算法"}},[t._v("#")]),t._v(" (2)队列算法")]),t._v(" "),a("p",[t._v("在这个算法下, 请求的"),a("strong",[t._v("速度可以是波动")]),t._v("的, 而处理的速度则是非常均速的. 这个算法其实有点像一个 FIFO 的算法.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/47f321e2a4458d9866864d41ae1310aa-20230731162102-negs0p0.png",alt:""}})]),t._v(" "),a("p",[t._v("在上面这个 FIFO 的队列上, 可以扩展出一些别的玩法. 一个是"),a("strong",[t._v("有优先级")]),t._v("的队列, 处理时先处理高优先级的队列, 然后再处理低优先级的队列. 如下图所示, 只有高优先级的队列被处理完成后, 才会处理低优先级的队列.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/2b7a92158bc563ab4ecb9868ec24b0de-20230731162102-au5urnr.png",alt:""}})]),t._v(" "),a("p",[t._v("有优先级的队列可能会导致低优先级队列长时间得不到处理. 为了避免低优先级的队列被饿死, 一般来说是分配不同比例的处理时间到不同的队列上, 于是有了带权重的队列.")]),t._v(" "),a("p",[t._v("如下图所示. 有三个队列的权重分布是 3:2:1, 这意味着需要在权重为 3 的这个队列上处理 3 个请求后, 再去权重为 2 的队列上处理 2 个请求, 最后再去权重为 1 的队列上处理 1 个请求, 如此反复.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/d64a45ebd045e7a4a7b75d91814359b7-20230731162102-gsomshd.png",alt:""}})]),t._v(" "),a("p",[t._v("队列流控是以队列的的方式来处理请求. 如果处理过慢, 那么就会导致队列满, 而开始触发限流.")]),t._v(" "),a("p",[t._v("但这样的算法需要用队列长度来控制流量, 在配置上比较难操作. 如果队列过长, 导致后端服务在队列没有满时就挂掉了. 一般来说, 这样的模型不能做 push, 而是 pull 方式会好一些.")]),t._v(" "),a("h6",{attrs:{id:"_3-漏斗算法-leaky-bucket"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-漏斗算法-leaky-bucket"}},[t._v("#")]),t._v(" (3)漏斗算法(Leaky Bucket)")]),t._v(" "),a("p",[t._v("漏斗算法可以参看 Wikipedia 的相关词条 "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Leaky_bucket",target:"_blank",rel:"noopener noreferrer"}},[t._v("Leaky Bucket"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("p",[t._v("下图是一个"),a("a",{attrs:{href:"https://www.slideshare.net/vimal25792/leaky-bucket-tocken-buckettraffic-shaping",target:"_blank",rel:"noopener noreferrer"}},[t._v("漏斗算法的示意图"),a("OutboundLink")],1),t._v(" .")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/5629b5ebac9047871fb071f11751533c-20230731162102-zmvh0oj.png",alt:""}})]),t._v(" "),a("p",[t._v("可以看到, 就像一个漏斗一样, "),a("strong",[t._v("进来的水量就好像访问流量一样, 而出去的水量就像是系统处理请求一样")]),t._v(". 当访问流量过大时这个漏斗中就会积水, 如果水太多了就会溢出.")]),t._v(" "),a("p",[t._v('一般来说, 这个"漏斗"是用一个'),a("strong",[t._v("队列")]),t._v("来实现的, 当请求过多时, 队列就会开始积压请求, 如果队列满了, 就会开拒绝请求. 很多系统都有这样的设计, 比如 TCP. 当请求的数量过多时, 就会有一个 sync backlog 的队列来缓冲请求, 或是 TCP 的滑动窗口也是用于流控的队列.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/0ed91ab469499a9a57635b3e3d1a68dc-20230731162102-luomtgr.png",alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("可以看到, 漏斗算法其实就是在队列请求中加上一个限流器, 来让 Processor 以一个均匀的速度处理请求.")])]),t._v(" "),a("h6",{attrs:{id:"_4-令牌桶算法-token-bucket"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-令牌桶算法-token-bucket"}},[t._v("#")]),t._v(" (4)令牌桶算法(Token Bucket)")]),t._v(" "),a("p",[a("mark",[a("strong",[t._v("关于令牌桶算法, 主要是有一个中间人. 在一个桶内按照一定的速率放入一些 token, 然后, 处理程序要处理请求时, 需要拿到 token, 才能处理; 如果拿不到, 则不处理")])]),t._v(".")]),t._v(" "),a("p",[t._v("下面这个图很清楚地说明了这个算法.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/5f6d63eccc545734a9483b7a18134360-20230731162102-utvspgj.png",alt:""}})]),t._v(" "),a("p",[t._v("从理论上来说, 令牌桶的算法和漏斗算法不一样的是, "),a("mark",[a("strong",[t._v('漏斗算法中, 处理请求是以一个常量和恒定的速度处理的, 而令牌桶算法则是在流量小的时候"攒钱", 流量大的时候, 可以快速处理')])]),t._v(".")]),t._v(" "),a("p",[t._v("然而, 我们可能会问, Processor 的处理速度因为有队列的存在, 所以其总是能以最大处理能力来处理请求, 这也是我们所希望的方式. 因此, "),a("strong",[t._v("令牌桶和漏斗都是受制于 Processor 的最大处理能力")]),t._v(". 无论令牌桶里有多少令牌, 也无论队列中还有多少请求. 总之 Processor 在大流量来临时总是按照自己最大的处理能力来处理的.")]),t._v(" "),a("p",[t._v("但试想一下, 如果 Processor 只是一个非常简单的任务分配器, 比如像 Nginx 这样的基本没有什么业务逻辑的网关, 那么它的处理速度一定很快, 不会有什么瓶颈, 而其用来把请求转发给后端服务, 那么在这种情况下, 这两个算法就有不一样的情况了.")]),t._v(" "),a("p",[a("mark",[a("strong",[t._v('漏斗算法会以一个稳定的速度转发, 而令牌桶算法平时流量不大时在"攒钱", 流量大时, 可以一次发出队列里有的请求, 而后就受到令牌桶的流控限制.')])])]),t._v(" "),a("p",[t._v("另外, 令牌桶还可能做成第三方的一个服务, 这样可以在分布式的系统中对"),a("strong",[t._v("全局")]),t._v("进行流控, 这也是一个很好的方式.")]),t._v(" "),a("h6",{attrs:{id:"_5-基于响应时间的动态限流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-基于响应时间的动态限流"}},[t._v("#")]),t._v(" (5)基于响应时间的动态限流")]),t._v(" "),a("p",[t._v("上面的算法有个不好的地方, 就是需要"),a("strong",[t._v("设置一个确定的限流值")]),t._v(". 这就要求每次发布服务时都做相应的性能测试, 找到系统最大的性能值.")]),t._v(" "),a("p",[t._v("当然, 性能测试并不是很容易做的. 有关性能测试的方法请参看我在 CoolShell 上的这篇文章《"),a("a",{attrs:{href:"https://coolshell.cn/articles/17381.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("性能测试应该怎么做"),a("OutboundLink")],1),t._v("》. 虽然性能测试比较不容易, 但是还是应该要做的.")]),t._v(" "),a("p",[t._v("然而在很多时候, 我们却"),a("strong",[t._v("并不知道这个限流值, 或是很难给出一个合适的值")]),t._v(". 其基本会有如下的一些因素:")]),t._v(" "),a("ul",[a("li",[t._v("实际情况下, 很多服务会依赖于数据库. 所以不同的用户请求, 会对不同的数据集进行操作. 就算是相同的请求, 可能数据集也不一样, 比如现在很多应用都会有一个时间线 Feed 流, 不同的用户关心的主题人人不一样, 数据也不一样. 而且数据库的数据是在不断变化的, 可能前两天性能还行, 因为数据量增加导致性能变差. 在这种情况下, 就很难给出一个确定的一成不变的值, 因为关系型数据库对于同一条 SQL 语句的执行时间其实是不可预测的(NoSQL 的就比 RDBMS 的可预测性要好).")]),t._v(" "),a("li",[a("strong",[t._v("不同的 API 有不同的性能")]),t._v(". 要在线上为每一个 API 配置不同的限流值, 这点太难配置, 也很难管理.")]),t._v(" "),a("li",[t._v("而且, 现在的服务都是能"),a("strong",[t._v("自动化伸缩")]),t._v("的, 不同大小的集群的性能也不一样, 所以在自动化伸缩的情况下, 需要动态地调整限流的阈值, 这点太难做到了.")])]),t._v(" "),a("p",[t._v("基于上述这些原因, "),a("strong",[t._v("限流的值是很难被静态地设置成恒定的一个值")]),t._v(".")]),t._v(" "),a("p",[a("strong",[t._v("我们想使用一种动态限流的方式. 这种方式, 不再设定一个特定的流控值, 而是能够动态地感知系统的压力来自动化地限流.")])]),t._v(" "),a("p",[t._v("这方面设计的典范是 "),a("strong",[t._v("TCP 协议的拥塞控制")]),t._v('的算法. TCP 使用 RTT - Round Trip Time 来探测网络的延时和性能, 从而设定相应的 "滑动窗口" 的大小, 以让发送的速率和网络的性能相匹配. 这个算法是非常精妙的, 我们完全可以借鉴在流控技术中.')]),t._v(" "),a("p",[a("strong",[t._v("可以记录下每次调用后端请求的响应时间, 然后在一个时间区间内(比如, 过去 10 秒)的请求计算一个响应时间的 P90 或 P99 值, 也就是把过去 10 秒内的请求的响应时间排个序, 然后看 90% 或 99% 的位置是多少.")])]),t._v(" "),a("p",[t._v("这样就知道有多少请求大于某个响应时间. 如果这个 P90 或 P99 超过设定的阈值, 那么就自动限流.")]),t._v(" "),a("p",[t._v("这个设计中有几个要点.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("需要计算的一定时间内的 P90 或 P99")]),t._v(". 在有大量请求的情况下, 这个非常地耗内存也非常地耗 CPU, 因为需要对大量的数据进行排序. 解决方案有两种, 一种是不记录所有的请求, "),a("strong",[t._v("采样")]),t._v("就好了, 另一种是使用一个叫蓄水池的近似算法. 关于这个算法这里不多说了, 《编程珠玑》里讲过这个算法, 英文叫 "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Reservoir_sampling",target:"_blank",rel:"noopener noreferrer"}},[t._v("Reservoir Sampling"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[t._v("这种动态流控需要像 TCP 那样, 需要记录一个"),a("strong",[t._v("当前的 QPS")]),t._v(". 如果发现后端的 P90/P99 响应太慢, 那么就可以把这个 QPS 减半, 然后像 TCP 一样走慢启动的方式, 直接到又开始变慢, 然后减去 1/4 的 QPS, 再慢启动, 然后再减去 1/8 的 QPS... 这个过程有点像个阻尼运行的过程, 然后整个限流的流量会在一个值上下做小幅振动. 这么做的目的是, "),a("strong",[t._v("如果后端扩容伸缩后性能变好, 系统会自动适应后端的最大性能")]),t._v(".")]),t._v(" "),a("li",[t._v("这种动态限流的方式实现起来并不容易. 大家可以看一下 TCP 的算法. TCP 相关的一些算法, 我写在了 CoolShell 上的《"),a("a",{attrs:{href:"https://coolshell.cn/articles/11609.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("TCP 的那些事(下)"),a("OutboundLink")],1),t._v("》这篇文章中. 你可以用来做参考来实现.")])]),t._v(" "),a("h5",{attrs:{id:"_3-限流的设计要点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-限流的设计要点"}},[t._v("#")]),t._v(" 3.限流的设计要点")]),t._v(" "),a("p",[t._v("限流主要是有"),a("strong",[t._v("四个目的")]),t._v(".")]),t._v(" "),a("ol",[a("li",[t._v("为了向用户承诺 SLA. 我们保证我们的系统在某个速度下的响应时间以及可用性.")]),t._v(" "),a("li",[t._v("同时也可以用来阻止在多租户的情况下, 某一用户把资源耗尽而让所有的用户都无法访问的问题.")]),t._v(" "),a("li",[t._v("为了"),a("strong",[t._v("应对突发的流量")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("节约成本")]),t._v(". 我们不会为了一个不常见的尖峰来把我系统扩容到最大的尺寸. 而是在有限的资源下能够承受比较高的流量.")])]),t._v(" "),a("p",[t._v("在设计上, 还要有以下的考量.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("限流应该是在架构的早期考虑")]),t._v(". 当架构形成后, 限流不是很容易加入.")]),t._v(" "),a("li",[a("strong",[t._v("限流模块性能必须好")]),t._v(", 而且对流量的变化也是非常灵敏的, 否则太过迟钝的限流, 系统早因为过载而挂掉了.")]),t._v(" "),a("li",[a("strong",[t._v("限流应该有个手动的开关")]),t._v(", 这样在应急的时候, 可以手动操作.")]),t._v(" "),a("li",[a("strong",[t._v("当限流发生时, 应该有个监控事件通知")]),t._v(". 让我们知道有限流事件发生, 这样运维人员可以及时跟进. 而且还可以自动化触发扩容或降级, 以缓解系统压力.")]),t._v(" "),a("li",[t._v("当限流发生时, 对于拒掉的请求, 应该"),a("strong",[t._v("返回一个特定的限流错误码")]),t._v(". 这样可以和其它错误区分开来. 而客户端看到限流, 可以调整发送速度, 或是走重试机制.")]),t._v(" "),a("li",[t._v("限流应该让后端的服务感知到. 限流发生时, 应该在协议头中塞进一个标识, 比如 HTTP Header 中, 放入一个限流的级别, 告诉后端服务目前正在限流中. 这样后端服务可以根据这个标识决定是否做降级.")])]),t._v(" "),a("h5",{attrs:{id:"_4-小结-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-小结-7"}},[t._v("#")]),t._v(" 4.小结")]),t._v(" "),a("p",[t._v("总结一下今天分享的主要内容. 首先, "),a("strong",[t._v("限流的目的是为了保护系统不在过载的情况下导致问题")]),t._v(". 接着讲了几种限流的策略. 然后讲了, 限流的算法, 包括计数器, 队列, 漏斗和令牌桶. 然后讨论了如何基于响应时间来限流. 最后总结了限流设计的要点.")]),t._v(" "),a("h4",{attrs:{id:"弹力设计篇之-降级设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#弹力设计篇之-降级设计"}},[t._v("#")]),t._v(' 弹力设计篇之"降级设计"')]),t._v(" "),a("p",[a("mark",[a("strong",[t._v("所谓的降级设计(Degradation), 本质是为了解决资源不足和访问量过大的问题. 当资源和访问量出现矛盾的时候, 在有限的资源下, 为了能够扛住大量的请求, 就需要对系统进行降级操作. 也就是说, 暂时牺牲掉一些东西, 以保障整个系统的平稳运行.")])])]),t._v(" "),a("p",[t._v("我记得我在伦敦参与诺丁山狂欢节的时候, 以及看阿森纳英超足球比赛的时候, 散场时因为人太多, 所有的公交系统(公交车, 地铁)完全免费, 就是为了让人通行得更快. 而且早在散场前, 场外就备着一堆公交车和地铁了, 这样就是为了在最短时间内把人疏散掉. 虽然亏掉了一些钱, 但是相比因为人员拥塞造成道路交通拥塞以及还可能出现的一些意外情况所造成的社会成本的损失, 公交免费策略真是很明智的做法. 与此类似, 系统在应对一些突发情况的时候也需要这样的降级流程.")]),t._v(" "),a("p",[t._v("一般来说, 降级需要牺牲掉的东西有:")]),t._v(" "),a("ul",[a("li",[a("mark",[a("strong",[t._v("降低一致性")])]),t._v("​"),a("mark",[t._v(".")]),t._v(" 从强一致性变成最终一致性.")]),t._v(" "),a("li",[a("mark",[a("strong",[t._v("停止次要功能")])]),t._v(". 停止访问不重要的功能, 从而释放出更多的资源.")]),t._v(" "),a("li",[a("mark",[a("strong",[t._v("简化功能")])]),t._v(". 把一些功能简化掉, 比如简化业务流程, 或是不再返回全量数据, 只"),a("strong",[t._v("返回部分数据")]),t._v(".")])]),t._v(" "),a("h5",{attrs:{id:"_1-降低一致性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-降低一致性"}},[t._v("#")]),t._v(" 1.降低一致性")]),t._v(" "),a("p",[t._v("要清楚地认识到, 这世界上"),a("strong",[t._v("大多数系统并不是都需要强一致性的")]),t._v(". 对于降低一致性, 把强一致性变成最终一致性的做法可以有效地释放资源, 并且让系统运行得更快, 从而可以扛住更大的流量. 一般来说, 会有两种做法, "),a("strong",[t._v("一种是简化流程的一致性, 一种是降低数据的一致性")]),t._v(".")]),t._v(" "),a("h6",{attrs:{id:"_1-使用异步简化流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-使用异步简化流程"}},[t._v("#")]),t._v(" (1)使用异步简化流程")]),t._v(" "),a("p",[t._v("举个例子, 比如电商的下单交易系统, 在强一致的情况下, 需要结算账单, 扣除库存, 扣除账户上的余额(或发起支付), 最后进行发货流程, 这一系列的操作. 如果需要是强一致性的, 那么就会非常慢. 尤其是支付环节可能会涉及银行方面的接口性能, 就像双 11 那样, 银行方面出问题会导致支付不成功, 而订单流程不能往下走.")]),t._v(" "),a("p",[a("strong",[t._v("在系统降级时, 可以把这一系列的操作做成异步的")]),t._v(", 快速结算订单, 不占库存, 然后把在线支付降级成用户到付, 这样就省去支付环节, 然后批量处理用户的订单, 向用户发货, 用户货到付款.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/e00177a6091e1a145d09199813640412-20230731162102-ctkgcwz.png",alt:""}})]),t._v(" "),a("p",[t._v("如上图所示, 一开始需要的"),a("strong",[t._v("全同步")]),t._v("的方式, 降级成了"),a("strong",[t._v("全异步")]),t._v("的方式, 库存从单笔强一致性也变成了多笔最终一致性, 如果库存不够了, 就只能根据先来后到取消订单了. 而支付也从最开始的下单请求时的强一致性, 变成了用户到付的最终一致性.")]),t._v(" "),a("p",[t._v('一般来说, 功能降级都有可能会损害用户的体验, 所以最好给出友好的用户提示. 比如, "系统当前繁忙, 您的订单已收到, 我们正努力为您处理订单中, 会尽快给您发送订单确认通知...还请见谅" 诸如此类的提示信息.')]),t._v(" "),a("h6",{attrs:{id:"_2-降低数据的一致性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-降低数据的一致性"}},[t._v("#")]),t._v(" (2)降低数据的一致性")]),t._v(" "),a("p",[t._v("降低数据的一致性一般来说会"),a("strong",[t._v("使用缓存的方式, 或是直接就去掉数据")]),t._v(". 比如在页面上不显示库存的具体数字, 只显示有还是没有库存这两种状态.")]),t._v(" "),a("p",[t._v("对于缓存来说, 可以有效地降低数据库的压力, 把数据库的资源交给更重要的业务, 这样就能让系统更快速地运行.")]),t._v(" "),a("p",[a("strong",[t._v("对于降级后的系统, 不再通过数据库获取数据, 而是通过缓存获取数据")]),t._v(". 关于缓存的设计模式, 我在 CoolShell 中有一篇叫《缓存更新的套路》的文章中讲述过缓存的几种更新模式, 你有兴趣的话可以前往一读. 在功能降级中, 一般"),a("strong",[t._v("使用 Cache Aside 模式或是 Read Through 模式")]),t._v(". 也就是下图所示的这个策略.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/f0dc44c9980ba9db6cdb2ccdee47dc66-20230731162102-86y1pm4.png",alt:""}})]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("失效")]),t._v(": 应用程序先从 cache 取数据, 如果没有得到, 则从数据库中取数据, 成功后, 放到缓存中.")]),t._v(" "),a("li",[a("strong",[t._v("命中")]),t._v(": 应用程序从 cache 中取数据, 取到后返回.")]),t._v(" "),a("li",[a("strong",[t._v("更新")]),t._v(": 先把数据存到数据库中, 成功后, 再让缓存失效.")])]),t._v(" "),a("p",[a("strong",[t._v("Read Through 模式就是在查询操作中更新缓存, 也就是说当缓存失效的时候(过期或 LRU 换出), Cache Aside 是由调用方负责把数据加载到缓存, 而 Read Through 则用缓存服务自己来加载, 从而对应用方是透明的.")])]),t._v(" "),a("h5",{attrs:{id:"_2-停止次要的功能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-停止次要的功能"}},[t._v("#")]),t._v(" 2.停止次要的功能")]),t._v(" "),a("p",[t._v("停止次要的功能也是一种非常有用的策略. "),a("strong",[t._v("把一些不重要的功能给暂时停止掉, 让系统释放出更多的资源来")]),t._v(". 比如, 电商中的搜索功能, 用户的评论功能, 等等. 等待访问的峰值过去后, 再把这些功能给恢复回来.")]),t._v(" "),a("p",[t._v("当然, 最好不要停止次要的功能, 首先"),a("strong",[t._v("可以限制次要的功能的流量, 或是把次要的功能退化成简单的功能")]),t._v(", 最后如果量太大了, 才会进入停止功能的状态. 停止功能对用户会带来一些用户体验的问题, 尤其是要停掉一些可能对于用户来说是非常重要的功能. 所以如果可能, 最好给用户一些补偿, 比如把用户切换到一个送积分卡, 或是红包抽奖的网页上, 有限地补偿一下用户.")]),t._v(" "),a("h5",{attrs:{id:"_3-简化功能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-简化功能"}},[t._v("#")]),t._v(" 3.简化功能")]),t._v(" "),a("p",[t._v("关于功能的简化上, 上面的下单流程中已经提到过相应的例子了. 而且从缓存中返回数据也是其中一个. 这里再提一个, 就是一般来说, "),a("strong",[t._v("一个 API 会有两个版本, 一个版本返回全量数据, 另一个版本只返回部分或最小的可用的数据")]),t._v(".")]),t._v(" "),a("p",[t._v("举个例子, 对于一篇文章, 一个 API 会把商品详情页或文章的内容和所有的评论都返回到前端. 那么在降级的情况下, 就只返回商品信息和文章内容, 而不返回用户评论了, 因为用户评论会涉及更多的数据库操作.")]),t._v(" "),a("p",[t._v("所以这样可以释放更多的数据资源. 而商品信息或文章信息可以放在缓存中, 这样又能释放出更多的资源给交易系统这样的需要更多数据库资源的业务使用.")]),t._v(" "),a("h5",{attrs:{id:"_4-降级设计的要点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-降级设计的要点"}},[t._v("#")]),t._v(" 4.降级设计的要点")]),t._v(" "),a("p",[t._v("对于降级, 一般来说是要牺牲业务功能或是流程, 以及一致性的. 所以, "),a("strong",[t._v("需要对业务做非常仔细的梳理和分析")]),t._v(". 我们很难通过不侵入业务的方式来做到功能降级.")]),t._v(" "),a("p",[t._v("在设计降级的时候, 需要"),a("strong",[t._v("清楚地定义好降级的关键条件")]),t._v(", 比如, 吞吐量过大, 响应时间过慢, 失败次数多过, 有网络或是服务故障, 等等, 然后做好相应的应急预案. 这些预案最好是写成代码可以快速地自动化或半自动化执行的.")]),t._v(" "),a("p",[a("strong",[t._v("功能降级需要梳理业务的功能, 哪些是 must-have 的功能, 哪些是 nice-to-have 的功能; 哪些是必须要死保的功能, 哪些是可以牺牲的功能. 而且需要在事前设计好可以简化的或是用来应急的业务流程. 当系统出问题的时候, 就需要走简化应急流程.")])]),t._v(" "),a("p",[t._v("降级的时候, 需要牺牲掉一致性, 或是一些业务流程: 对于读操作来说, 使用缓存来解决, 对于写操作来说, 需要异步调用来解决. 并且, 我们需要以流水账的方式记录下来, 这样方便对账, 以免漏掉或是和正常的流程混淆.")]),t._v(" "),a("p",[a("strong",[t._v("降级的功能的开关可以是一个系统的配置开关")]),t._v(". 做成配置时, 需要在要降级的时候推送相应的配置. 另一种方式是, 在对外服务的 API 上有所区分(方法签名或是开关参数), 这样可以由上游调用者来驱动. 比如: 一个网关在限流时, 在协议头中加入了一个限流程度的参数, 让后端服务能知道限流在发生中. 当限流程度达到某个值时, 或是限流时间超过某个值时, 就自动开始降级, 直到限流好转.")]),t._v(" "),a("p",[t._v("对于数据方面的降级, 需要前端程序的配合. 一般来说, 前端的程序可以根据后端传来的数据来决定展示哪些界面模块. 比如当前端收不到商品评论时, 就不展示. 为了区分本来就没有数据, 还是因为降级了没有数据的两种情况, 在协议头中也应该加上降级的标签.")]),t._v(" "),a("p",[t._v("因为降级的功能平时不会总是会发生, 属于应急的情况, 所以降级的这些业务流程和功能有可能长期不用而出现 bug 或问题, 对此需要在平时做一些演练.")]),t._v(" "),a("h5",{attrs:{id:"_5-小结-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-小结-7"}},[t._v("#")]),t._v(" 5.小结")]),t._v(" "),a("p",[t._v("总结一下今天分享的主要内容. 首先, "),a("strong",[t._v("降级设计本质上是为了解决资源不足和访问量过大的问题. 降级的方法有降低一致性, 停止次要功能和简化功能")]),t._v(". 最后总结了降级设计的要点.")]),t._v(" "),a("h4",{attrs:{id:"弹力设计篇之-弹力设计总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#弹力设计篇之-弹力设计总结"}},[t._v("#")]),t._v(' 弹力设计篇之"弹力设计总结"')]),t._v(" "),a("p",[t._v("前面讲了那么多的弹力设计的设计模式, 这里做个总结.")]),t._v(" "),a("h5",{attrs:{id:"_1-弹力设计总图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-弹力设计总图"}},[t._v("#")]),t._v(" 1.弹力设计总图")]),t._v(" "),a("p",[t._v("首先, 我们的服务不能是单点, 所以需要"),a("strong",[t._v("在架构中冗余服务, 也就是说有多个服务的副本")]),t._v(". 这需要使用到的具体技术有:")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("负载均衡 + 服务健康检查")]),t._v(", 可以使用像 Nginx 或 HAProxy 这样的技术;")]),t._v(" "),a("li",[a("strong",[t._v("服务发现 + 动态路由 + 服务健康检查")]),t._v(", 比如 Consul 或 ZooKeeper;")]),t._v(" "),a("li",[a("strong",[t._v("自动化运维, Kubernetes 服务调度, 伸缩和故障迁移")]),t._v(".")])]),t._v(" "),a("p",[t._v("然后, 需要隔离业务, 要隔离服务就需要"),a("strong",[t._v("对服务进行解耦和拆分")]),t._v(", 这需要使用到以前的相关技术.")]),t._v(" "),a("ul",[a("li",[t._v("bulkheads 模式: 业务分片 , 用户分片, 数据库拆分.")]),t._v(" "),a("li",[t._v("自包含系统: 所谓自包含的系统是从单体到微服务的中间状态, 其把一组密切相关的微服务给拆分出来, 只需要做到没有外部依赖就行.")]),t._v(" "),a("li",[a("strong",[t._v("异步通讯")]),t._v(": 服务发现, 事件驱动, 消息队列, 业务工作流.")]),t._v(" "),a("li",[a("strong",[t._v("自动化运维")]),t._v(": 需要一个服务调用链和性能监控的监控系统.")])]),t._v(" "),a("p",[t._v("接下来, 就要进行和能让整个架构接受失败的相关处理设计, 也就是所谓的"),a("strong",[t._v("容错设计")]),t._v(". 这会用到下面的这些技术.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("错误方面")]),t._v(": 调用"),a("strong",[t._v("重试 + 熔断 + 服务的幂等性")]),t._v("设计.")]),t._v(" "),a("li",[a("strong",[t._v("一致性方面")]),t._v(": 强一致性使用两阶段提交, 最终一致性使用异步通讯方式.")]),t._v(" "),a("li",[a("strong",[t._v("流控方面")]),t._v(": 使用"),a("strong",[t._v("限流 + 降级")]),t._v("技术.")]),t._v(" "),a("li",[a("strong",[t._v("自动化运维方面")]),t._v(": 网关流量调度, 服务监控.")])]),t._v(" "),a("p",[t._v("我不敢保证有上面这些技术可以解决所有的问题, 但只要我们设计得当, 绝大多数的问题应该是可以扛得住的了.")]),t._v(" "),a("p",[t._v("下面画一个图来表示一下.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/5d1f426b2d860970e3aa77f978187538-20230731162102-y66dw5a.png",alt:""}})]),t._v(" "),a("p",[t._v("在上面这个图上可以看到, 有三大块的东西.")]),t._v(" "),a("ul",[a("li",[a("mark",[a("strong",[t._v("冗余服务")])]),t._v(". "),a("strong",[t._v("通过冗余服务的复本数可以消除单点故障. 这需要服务发现, 负载均衡, 动态路由和健康检查四个功能或组件")]),t._v(".")]),t._v(" "),a("li",[a("mark",[a("strong",[t._v("服务解耦")])]),t._v(". "),a("strong",[t._v("通过解耦可以做到把业务隔离开来, 不让服务间受影响, 这样就可以有更好的稳定性")]),t._v(". 在水平层面上, 需要把业务或用户分片分区(业分做隔离, 用户做多租户). 在垂直层面上, 需要异步通讯机制. 因为应用被分解成了一个一个的服务, 所以在服务的编排和聚合上, 需要有工作流(像 Spring 的 Stream 或 Akka 的 flow 或是 AWS 的 Simple Workflow)来把服务给串联起来. 而一致性的问题又需要业务补偿机制来做反向交易.")]),t._v(" "),a("li",[a("mark",[a("strong",[t._v("服务容错")])]),t._v(". "),a("strong",[t._v("服务容错方面, 需要有重试机制, 重试机制会带来幂等操作, 对于服务保护来说, 熔断, 限流, 降级都是为了保护整个系统的稳定性, 并在可用性和一致性方面在出错的情况下做一部分的妥协")]),t._v(".")])]),t._v(" "),a("p",[t._v("当然, 除了这一切的架构设计外, 你还需要一个或多个"),a("strong",[t._v("自动运维的工具")]),t._v(", 否则如果是人肉运维的话, 那么在故障发生的时候, 不能及时地做出运维决定, 也就空有这些弹力设计了. 比如: 监控到服务性能不够了, 就自动或半自动地开始进行限流或降级.")]),t._v(" "),a("h5",{attrs:{id:"_2-弹力设计开发和运维"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-弹力设计开发和运维"}},[t._v("#")]),t._v(" 2.弹力设计开发和运维")]),t._v(" "),a("p",[t._v("对于运维工具来说, 你至少需要两个系统:")]),t._v(" "),a("ul",[a("li",[t._v("一个是像 APM 这样的"),a("strong",[t._v("服务监控")]),t._v(";")]),t._v(" "),a("li",[t._v("另一个是"),a("strong",[t._v("服务调度的系统")]),t._v(", 如: Docker + Kubernetes.")])]),t._v(" "),a("p",[t._v("此外, 如果你需要一个开发架构来让整个开发团队在同一个标准下开发上面的这些东西, 这里 Spring Cloud 就是不二之选了.")]),t._v(" "),a("p",[t._v("关于 Spring Cloud 和 Kubernetes, 它们都是为了微服务而生, 但它们没有什么可比性, "),a("strong",[t._v("因为前者偏开发, 后者偏运维")]),t._v(". 来看一下它们的差别.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/f0fe53ba91f51ecde14cab3719285e94-20230731162102-rxe0gb2.png",alt:""}}),t._v("\n(图片来自: Deploying Microservices: Spring Cloud vs Kubernetes)")]),t._v(" "),a("p",[t._v("从上表可以得知:")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Spring Cloud 有一套丰富且集成良好的 Java 库, 作为应用栈的一部分解决所有运行时问题")]),t._v(". 因此, 微服务本身"),a("strong",[t._v("可以通过库和运行时代理解决客户端服务发现, 负载均衡, 配置更新, 统计跟踪")]),t._v("等. 工作模式就像单实例服务集群. (译者注: 集群中 master 节点工作: 当 master 挂掉后, slave 节点被选举顶替. )并且一批工作也是在 JVM 中被管理.")]),t._v(" "),a("li",[a("strong",[t._v("Kubernetes 不是针对语言的, 而是针对容器的, 所以它是以通用的方式为所有语言解决分布式计算问题. Kubernetes 提供了配置管理, 服务发现, 负载均衡, 跟踪, 统计, 单实例, 平台级和应用栈之外的调度工作. 该应用不需要任何客户端逻辑的库或代理程序, 可以用任何语言编写")]),t._v(".")])]),t._v(" "),a("p",[t._v("下图是微服务所需的关键技术, 以及这些技术中在 Spring Cloud 和 Kubernetes 的涵盖面.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/f8c073d8df700dea2e5f17a3948d1afe-20230731162102-9yrsjsz.png",alt:""}}),t._v("\n(图片来自: Deploying Microservices: Spring Cloud vs Kubernetes)")]),t._v(" "),a("p",[t._v("两个平台依靠相似的第三方工具, 如 ELK 和 EFK stacks, tracing libraries 等. Hystrix 和 Spring Boot 等库, 在两个环境中都表现良好. "),a("strong",[t._v("很多情况下, Spring Cloud 和 Kubernetes 可以形成互补, 组建出更强大的解决方案(例如 KubeFlix 和 Spring Cloud Kubernetes)")]),t._v(" .")]),t._v(" "),a("p",[t._v("下图是在 Kubernetes 上使用 Spring Cloud 可以表现出来的整体特性. 要做出一个可运维的分布式系统, 除了在架构上的设计之外, 还需要一整套的用来支撑分布式系统的"),a("strong",[t._v("管控系统")]),t._v(", 也就是所谓的运维系统. 要做到这些, 不是靠几个人几天就可以完成的. 这需要根据自己的业务特点来规划相关的实施路径.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/f386d87040ac374aa0c5a8d173af405b-20230731162102-85t1fn0.png",alt:""}}),t._v("\n(图片来自: Deploying Microservices: Spring Cloud vs Kubernetes)")]),t._v(" "),a("p",[t._v("上面这张图中, 对于所有的特性, 都列举了一些相关的软件和一些设计的重点, "),a("strong",[t._v("其中红色的是运维层面的和 Spring Cloud 和 Kubernetes 不相关的, 绿色的 Spring Cloud 提供的开发框架, 蓝色的是 Kubernetes 相关的重要功能")]),t._v(".")]),t._v(" "),a("p",[t._v("从今天看下来, "),a("mark",[a("strong",[t._v("微服务的最佳实践在未来有可能会成为 SpringCloud 和 Kubernetes 的天下了")])]),t._v(". 这个让我们拭目以待.")]),t._v(" "),a("h4",{attrs:{id:"管理设计篇之-分布式锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#管理设计篇之-分布式锁"}},[t._v("#")]),t._v(' 管理设计篇之"分布式锁"')]),t._v(" "),a("p",[t._v("在"),a("strong",[t._v("多线程情况下访问一些共享资源需要加锁")]),t._v(", 不然就会出现数据被写乱的问题. 在分布式系统下, 这样的问题也是一样的. 只不过, 我们需要一个分布式的锁服务. 对于"),a("strong",[t._v("分布式的锁服务, 一般可以用数据库 DB, Redis 和 ZooKeeper 等实现.")]),t._v("  不管怎么样, 分布式的锁服务需要有以下几个特点.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("安全性(Safety)")]),t._v(" : 在任意时刻, 只有一个客户端可以获得锁("),a("strong",[t._v("排他性")]),t._v(").")]),t._v(" "),a("li",[a("strong",[t._v("避免死锁")]),t._v(": 客户端最终一定可以获得锁, 即使锁住某个资源的客户端在释放锁之前崩溃或者网络不可达.")]),t._v(" "),a("li",[a("strong",[t._v("容错性")]),t._v(": 只要锁服务集群中的大部分节点存活, Client 就可以进行加锁解锁操作.")])]),t._v(" "),a("h5",{attrs:{id:"_1-redis的分布式锁服务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-redis的分布式锁服务"}},[t._v("#")]),t._v(" 1.Redis的分布式锁服务")]),t._v(" "),a("p",[t._v("这里提一下, 避免死锁的问题. 下面以 Redis 的锁服务为例(参考 "),a("a",{attrs:{href:"https://redis.io/topics/distlock",target:"_blank",rel:"noopener noreferrer"}},[t._v("Redis 的官方文档"),a("OutboundLink")],1),t._v(").")]),t._v(" "),a("p",[t._v("我们通过以下命令对资源加锁.")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SET")]),t._v(" resource_name my_random_value "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NX")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PX")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30000")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("解释一下:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("SET NX")]),t._v(" 命令只会在 "),a("code",[t._v("key")]),t._v(" 不存在的时候给 "),a("code",[t._v("key")]),t._v(" 赋值, "),a("code",[t._v("PX")]),t._v(" 命令通知 Redis 保存这个 key 30000ms.")]),t._v(" "),a("li",[t._v("​"),a("code",[t._v("my_random_value")]),t._v("​ 必须是"),a("strong",[t._v("全局唯一")]),t._v("的值. 这个随机数在释放锁时保证释放锁操作的安全性.")]),t._v(" "),a("li",[t._v("PX 操作后面的参数代表的是这个 key 的存活时间, 称作锁过期时间.")]),t._v(" "),a("li",[t._v("当资源被锁定超过这个时间时, "),a("strong",[t._v("锁将自动释放")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("获得锁的客户端如果没有在这个时间窗口内完成操作, 就可能会有其他客户端获得锁")]),t._v(", 引起争用问题.")])]),t._v(" "),a("p",[t._v("这里的原理是, 只有在某个 key 不存在的情况下才能设置(set)成功该 key. 于是这就可以让多个进程并发去设置同一个 key, 只有一个进程能设置成功. 而其它的进程因为之前有人把 key 设置成功了, 而导致失败(也就是获得锁失败).")]),t._v(" "),a("p",[t._v("可以通过下面的脚本"),a("strong",[t._v("为申请成功的锁解锁")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" redis"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"get"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("KEYS")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ARGV")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" then \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" redis"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"del"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("KEYS")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" \nend\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("如果 key 对应的 value 一致, 则删除这个 key.")]),t._v(" "),a("p",[t._v("通过这个方式释放锁是为了"),a("strong",[t._v("避免 Client 释放了其他 Client 申请的锁")]),t._v(".")]),t._v(" "),a("p",[t._v("例如, 下面的例子演示了"),a("strong",[t._v("不区分 Client 会出现的一种问题")]),t._v(".")]),t._v(" "),a("ol",[a("li",[t._v("Client A 获得了一个锁.")]),t._v(" "),a("li",[t._v("当尝试释放锁的请求发送给 Redis 时被阻塞, 没有及时到达 Redis.")]),t._v(" "),a("li",[t._v("锁定时间超时, Redis 认为锁的租约到期, 释放了这个锁.")]),t._v(" "),a("li",[t._v("Client B 重新申请到了这个锁.")]),t._v(" "),a("li",[t._v("Client A 的解锁请求到达, 将 Client B 锁定的 key 解锁.")]),t._v(" "),a("li",[t._v("Client C 也获得了锁.")]),t._v(" "),a("li",[t._v("Client B 和 Client C 同时持有锁.")])]),t._v(" "),a("p",[t._v("通过执行上面脚本的方式释放锁, "),a("strong",[t._v("Client 的解锁操作只会解锁自己曾经加锁的资源, 所以是安全的")]),t._v(".")]),t._v(" "),a("p",[t._v("关于 value 的生成, 官方推荐从 /dev/urandom 中取 20 个 byte 作为随机数. 或者采用更加简单的方式, 例如使用 RC4 加密算法在 /dev/urandom 中得到一个种子(Seed), 然后生成一个伪随机流.")]),t._v(" "),a("p",[t._v('也可以采用更简单的方法, 使用时间戳 + 客户端编号的方式生成随机数. Redis 的官方文档说: "这种方式的安全性较差一些, 但对于绝大多数的场景来说已经足够安全了".')]),t._v(" "),a("h5",{attrs:{id:"_2-分布式锁服务的一个问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-分布式锁服务的一个问题"}},[t._v("#")]),t._v(" 2.分布式锁服务的一个问题")]),t._v(" "),a("p",[t._v("注意, 虽然 Redis 文档里说他们的分布式锁是没有问题的, 但其实还是很有问题的. 尤其是上面那个为了避免 Client 端把锁占住不释放, 然后 Redis 在超时后把其释放掉. 不知道你怎么想, 但我觉得这事儿听起来就有点不靠谱.")]),t._v(" "),a("p",[t._v("我们来脑补一下, 不难发现下面这个案例.")]),t._v(" "),a("ul",[a("li",[t._v("如果 Client A 先取得了锁.")]),t._v(" "),a("li",[t._v("其它 Client(比如说 Client B)在等待 Client A 的工作完成.")]),t._v(" "),a("li",[t._v("这个时候, 如果 Client A 被挂在了某些事上, 比如一个外部的阻塞调用, 或是 CPU 被别的进程吃满, 或是不巧碰上了 Full GC, 导致 Client A 花了超过平时几倍的时间.")]),t._v(" "),a("li",[t._v("然后, 我们的锁服务因为怕死锁, 就在一定时间后, 把"),a("strong",[t._v("锁给释放")]),t._v("掉了.")]),t._v(" "),a("li",[t._v("此时, Client B "),a("strong",[t._v("获得了锁并更新了资源")]),t._v(".")]),t._v(" "),a("li",[t._v("这个时候, Client A 服务缓过来了, 然后"),a("strong",[t._v("也去更新了资源")]),t._v(". 于是把 Client B 的更新给冲掉了.")]),t._v(" "),a("li",[t._v("这就造成了数据出错.")])]),t._v(" "),a("p",[t._v("这听起来挺严重的吧. 我画了个图示例一下.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/034bed10ff4d6813ff101a63bd35f2cd-20230731162102-iog7249.png",alt:""}})]),t._v(" "),a("p",[t._v("千万不要以为这是脑补出来的案例. 其实这个是真实案例. HBase 就曾经遇到过这样的问题, 你可以在他们的 PPT("),a("a",{attrs:{href:"https://www.slideshare.net/enissoz/hbase-and-hdfs-understanding-filesystem-usage",target:"_blank",rel:"noopener noreferrer"}},[t._v("HBase and HDFS: Understanding FileSystem Usage in HBase"),a("OutboundLink")],1),t._v(") 中看到相关的描述.")]),t._v(" "),a("p",[t._v("要解决这个问题, 你需要引入 "),a("strong",[t._v("fence(栅栏)技术")]),t._v(". 一般来说, 这就是"),a("strong",[t._v("乐观锁机制")]),t._v(", 需要一个版本号排它. 于是流程就变成了下图中的这个样子.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/f4eeb8529195ddddf754048d1d26155a-20230731162102-78pkitm.png",alt:""}})]),t._v(" "),a("p",[t._v("从图中可以看到:")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("锁服务需要有一个单调递增的版本号.")])]),t._v(" "),a("li",[a("strong",[t._v("写数据的时候, 也需要带上自己的版本号.")])]),t._v(" "),a("li",[a("strong",[t._v("数据库服务需要保存数据的版本号, 然后对请求做检查.")])])]),t._v(" "),a("p",[t._v("如果使用 ZooKeeper 做锁服务的话, 那么可以使用 "),a("code",[t._v("zxid")]),t._v(" 或 znode 的版本号来做这个 fence 版本号.")]),t._v(" "),a("h5",{attrs:{id:"_3-从乐观锁到cas"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-从乐观锁到cas"}},[t._v("#")]),t._v(" 3.从乐观锁到CAS")]),t._v(" "),a("p",[t._v("但是, 如果数据库中也保留着版本号, 那么完全可以用数据库来做这个锁服务, 不就更方便了吗? 下面的图展示了这个过程.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/0de2ba192dcf2fa98563e3fab2b8bf3a-20230731162102-bzq6hz9.png",alt:""}})]),t._v(" "),a("p",[t._v("使用"),a("strong",[t._v("数据版本(Version)记录机制, 即为数据增加一个版本标识")]),t._v(', 一般是通过为数据库表增加一个数字类型的 "version" 字段来实现的. 当读取数据时, 将 version 字段的值一同读出, 数据每更新一次, 对此 version 值加一.')]),t._v(" "),a("p",[t._v("当提交更新的时候, 数据库表对应记录的当前版本信息与第一次取出来的 version 值进行比对. 如果数据库表当前版本号与第一次取出来的 version 值相等, 则予以更新, 否则认为是过期数据. 更新语句写成 SQL 大概是下面这个样子:")]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),t._v(" table_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" xxx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#{xxx}, version=version+1 where version =#{version};")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("这不就是乐观锁吗? 是的, 这是乐观锁最常用的一种实现方式. "),a("mark",[a("strong",[t._v("是的, 如果使用版本号, 或是 fence token 这种方式, 就不需要使用分布式锁服务了")])]),t._v("​ **. **")]),t._v(" "),a("p",[t._v("另外多说一下. 这种 fence token 的玩法, 在数据库那边一般会用 timestamp 时间截来玩. 也是在更新提交的时候检查当前数据库中数据的时间戳和自己更新前取到的时间戳进行对比, 如果一致则 OK, 否则就是版本冲突.")]),t._v(" "),a("p",[t._v("还有, 有时候都不需要增加额外的版本字段或是 fence token. 比如如果想更新库存, 可以这样操作:")]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" stock "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" tb_product "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" product_id"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#{product_id};")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),t._v(" tb_product "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" stock"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("stock"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#{num} WHERE product_id=#{product_id} AND stock=#{stock};")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[a("strong",[t._v("先把库存数量(stock)查出来, 然后在更新的时候, 检查一下是否是上次读出来的库存")]),t._v(". 如果不是, 说明有别人更新过了, 我的 UPDATE 操作就会失败, 得重新再来.")]),t._v(" "),a("p",[t._v("细心的你一定发现了, 这不就是计算机汇编指令中的"),a("strong",[t._v("原子操作 CAS(Compare And Swap)")]),t._v(" 嘛, 大量无锁的数据结构都需要用到这个.")]),t._v(" "),a("p",[t._v("**我们一步一步地从分布式锁服务到乐观锁, 再到 CAS, 你看到了什么? 你是否得思考一个有趣的问题---我们还需要分布式锁服务吗? **")]),t._v(" "),a("h5",{attrs:{id:"_4-分布式锁设计的重点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-分布式锁设计的重点"}},[t._v("#")]),t._v(" 4.分布式锁设计的重点")]),t._v(" "),a("p",[t._v("最后来谈谈分布式锁设计的重点. 一般情况下, 我们可以"),a("strong",[t._v("使用数据库, Redis 或 ZooKeeper 来做分布式锁服务")]),t._v(", 这几种方式都可以用于实现分布式锁.")]),t._v(" "),a("p",[a("strong",[t._v("分布式锁的特点是, 保证在一个集群中, 同一个方法在同一时间只能被一台机器上的一个线程执行. 这就是所谓的分布式互斥")]),t._v(". 所以大家在做某个事的时候, 要去一个服务上请求一个标识. 如果请求到了, 就可以操作, 操作完后, 把这个标识还回去, 这样别的进程就可以请求到了.")]),t._v(" "),a("p",[t._v("首先, 需要明确一下分布式锁服务的初衷和几个概念性的问题.")]),t._v(" "),a("ul",[a("li",[t._v("如果获得锁的进程挂掉了怎么办? 锁还不回来了, 会导致"),a("strong",[t._v("死锁")]),t._v(". 一般的"),a("strong",[t._v("处理方法是在锁服务那边加上一个过期时间, 如果在这个时间内锁没有被还回来, 那么锁服务要自动解锁, 以避免全部锁住")]),t._v(".")]),t._v(" "),a("li",[t._v("如果锁服务自动解锁了, 新的进程就拿到锁了, 但之前的进程以为自己还有锁, 那么就出现了"),a("strong",[t._v("两个进程拿到了同一个锁的问题, 它们在更新数据的时候就会产生问题")]),t._v(". 对于这个问题, 我想说: 像 Redis 那样也可以使用 Check and Set 的方式来保证数据的一致性. 这就有点像计算机原子指令 CAS(Compare And Swap)一样. 就是说, 在改变一个值的时候先检查一下是不是之前读出来的值, 这样来保证其间没有人改过. 如果通过像 CAS 这样的操作的话, 那还需要分布式锁服务吗? 的确是不需要了, 不是吗? "),a("strong",[t._v("但现实生活中也有不需要更新某个数据的场景, 只是为了同步或是互斥一下不同机器上的线程, 这时候像 Redis 这样的分布式锁服务就有意义了")]),t._v(".")])]),t._v(" "),a("p",[t._v("所以需要分清楚: 我是"),a("strong",[t._v("用来修改某个共享源的, 还是用来不同进程间的同步或是互斥")]),t._v("的. 如果使用 CAS 这样的方式(无锁方式)来更新数据, 那么是不需要使用分布式锁服务的, 而后者可能是需要的. **所以, 这是在决定使用分布式锁服务前需要考虑的第一个问题---我们是否需要? **")]),t._v(" "),a("p",[t._v("如果确定要分布式锁服务, 需要考虑下面几个设计.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("需要给一个锁被释放的方式, 以避免请求者不把锁还回来, 导致死锁的问题")]),t._v(". Redis 使用超时时间, ZooKeeper 可以依靠自身的 sessionTimeout 来删除节点.")]),t._v(" "),a("li",[a("strong",[t._v("分布式锁服务应该是高可用的, 而且是需要持久化的")]),t._v(". 对此可以看一下 "),a("a",{attrs:{href:"https://redis.io/topics/distlock",target:"_blank",rel:"noopener noreferrer"}},[t._v("Redis 的文档 RedLock"),a("OutboundLink")],1),t._v(" 看看它是怎么做到高可用的.")]),t._v(" "),a("li",[t._v("要提供"),a("strong",[t._v("非阻塞方式的锁服务")]),t._v(".")]),t._v(" "),a("li",[t._v("还要"),a("strong",[t._v("考虑锁的可重入性")]),t._v(".")])]),t._v(" "),a("p",[t._v("我认为, Redis 也是不错的, ZooKeeper 在使用起来需要有一些变通的方式, 好在 Apache 有 "),a("a",{attrs:{href:"https://curator.apache.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Curator"),a("OutboundLink")],1),t._v(" 帮我们封装了各种分布式锁的玩法.")]),t._v(" "),a("h5",{attrs:{id:"_5-小结-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-小结-8"}},[t._v("#")]),t._v(" 5.小结")]),t._v(" "),a("p",[t._v("总结一下今天分享的主要内容. 首先介绍了为什么需要分布式锁. 就像单机系统上的多线程程序需要用操作系统锁或数据库锁来互斥对共享资源的访问一样, 分布式程序也需要通过分布式锁来互斥对共享资源的访问.")]),t._v(" "),a("p",[a("strong",[t._v("分布式锁服务一般可以通过 Redis 和 ZooKeeper 等实现")]),t._v(". 接着, 以 Redis 为例, 介绍了怎样用它来加锁和解锁, 由此引出了锁超时后的潜在风险. 可以看到, "),a("strong",[t._v("类似于数据库的乐观并发控制, 这种风险可以通过版本号的方式来解决")]),t._v(". 进一步, "),a("strong",[t._v("数据库如果本身利用 CAS 等手段支持这种版本控制方式, 其实也就没必要用一个独立的分布式锁服务了")]),t._v(". 最后我们发现, 分布式锁服务还能用来做同步, 这是数据库锁做不了的事情.")]),t._v(" "),a("h4",{attrs:{id:"管理设计篇之-配置中心"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#管理设计篇之-配置中心"}},[t._v("#")]),t._v(' 管理设计篇之"配置中心"')]),t._v(" "),a("p",[t._v("除了代码之外, 软件还有一些"),a("strong",[t._v("配置信息")]),t._v(", 比如数据库的用户名和密码, 还有一些不想写死在代码里的东西, 像线程池大小, 队列长度等运行参数, 以及日志级别, 算法策略等, 还有一些是软件运行环境的参数, 如 Java 的内存大小, 应用启动的参数, 包括操作系统的一些参数配置... 所有这些东西, 都叫做软件配置. 以前通常把软件配置写在一个配置文件中, 就像 Windows 下的 ini 文件, 或是 Linux 下的 conf 文件. 然而在分布式系统下, 这样的方式就变得非常不好管理, 并容易出错. 于是为了便于管理, "),a("mark",[a("strong",[t._v("需要引入了一个集中式的配置管理系统, 这就是配置中心的由来")])]),t._v(".")]),t._v(" "),a("p",[t._v("现在, 软件的配置中心是分布式系统的一个必要组件. 这个系统听起来很简单, 但其实并不是. 我见过好多公司的配置中心, 但是我觉得做得都不好, 所以想写下这篇文章给你一些借鉴.")]),t._v(" "),a("h5",{attrs:{id:"_1-配置中心的设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-配置中心的设计"}},[t._v("#")]),t._v(" 1.配置中心的设计")]),t._v(" "),a("h6",{attrs:{id:"_1-区分软件的配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-区分软件的配置"}},[t._v("#")]),t._v(" (1)区分软件的配置")]),t._v(" "),a("p",[t._v("首先, 要区分软件的配置, 软件配置的区分有多种方式.")]),t._v(" "),a("p",[t._v("有一种方式是把软件的配置分成"),a("mark",[a("strong",[t._v("静态配置和动态配置")])]),t._v(". 所谓静态配置其实就是在软件启动时的一些配置, 运行时基本不会进行修改, 也可以理解为是环境或软件初始化时需要用到的配置.")]),t._v(" "),a("p",[t._v("例如, 操作系统的网络配置, 软件运行时 Docker 进程的配置, 这些配置在软件环境初始化时就确定了, 未来基本不会修改了. 而所谓动态配置其实就是软件运行时的一些配置, 在运行时会被修改. 比如, 日志级别, 降级开关, 活动开关.")]),t._v(" "),a("p",[t._v("当然, 我们这里的内容"),a("strong",[t._v("主要针对动态配置的管理")]),t._v(".")]),t._v(" "),a("p",[t._v("对于动态配置的管理, 还要做好区分. 一般来说, 会有三个区分的维度.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("按运行环境分")]),t._v(". 一般来说, 会有开发环境, 测试环境, 预发环境, 生产环境. 这些环境上的运行配置都不完全一样, 但是理论来说, 应该是大同小异的.")]),t._v(" "),a("li",[a("strong",[t._v("按依赖区分")]),t._v(". 一种是依赖配置, 一种是不依赖的内部配置. 比如外部依赖的 MySQL 或 Redis 的连接配置. 还有一种完全是自己内部的配置.")]),t._v(" "),a("li",[a("strong",[t._v("按层次分")]),t._v(". 就像云计算一样, 配置也可以分成 IaaS, PaaS, SaaS 三层. 基础层的配置是操作系统的配置, 中间平台层的配置是中间件的配置, 如 Tomcat 的配置, 上层软件层的配置是应用自己的配置.")])]),t._v(" "),a("p",[t._v("这些分类方式其实是为了更好地管理配置项. 小公司无所谓, 而当一个公司变大了以后了, 如果这些东西没有被很好地管理起来, 那么会增加太多系统维护的复杂度.")]),t._v(" "),a("h6",{attrs:{id:"_2-配置中心的模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-配置中心的模型"}},[t._v("#")]),t._v(" (2)配置中心的模型")]),t._v(" "),a("p",[t._v("有了上面为配置项的分类, 就可以设计软件配置模型了.")]),t._v(" "),a("p",[t._v("首先, 软件配置基本上来说, "),a("mark",[a("strong",[t._v("每个配置项就是 key/value 的模型")])]),t._v(".")]),t._v(" "),a("p",[t._v("然后, 我们把"),a("strong",[t._v("软件的配置分成三层")]),t._v(". 操作系统层和平台层的配置项得由专门的运维人员或架构师来配置. 其中的 value 应该是选项, 而不是让用户可以自由输入的, 最好是有相关的模板来初始化全套的配置参数. 而应用层的配置项, 需要有相应的命名规范, 最好有像 C++ 那样的名字空间的管理, 确保不同应用的配置项不会冲突.")]),t._v(" "),a("p",[t._v("另外, "),a("strong",[t._v("配置参数中, 如果有外部服务依赖的配置, 强烈建议不要放在配置中心里, 而要放在服务发现系统中")]),t._v(". 因为一方面这在语义上更清楚一些, 另外这样会减少因为运行不同环境而导致配置不同的差异性(如测试环境和生产环境的不同).")]),t._v(" "),a("p",[t._v("对于不同运行环境中配置的差异来说, 比如在开发环境和测试环境下, 日志级别是 Debug 级, 对于生产环境则是 Warning 或 Error 级, 因为环境的不一样, 会导致需要不同的配置项的值. 这点需要考虑到.")]),t._v(" "),a("p",[t._v("还有, 配置需要有一个"),a("strong",[t._v("整体的版本管理")]),t._v(", 每次变动都能将版本差异记录下来. 当然, 如果可能, 最好能和软件的版本号做关联.")]),t._v(" "),a("p",[t._v("可以看到, 其中有些配置是通过模板来选择的, 有的配置需要在不同环境下配置不同值. 所以还需要一个配置管理的工具, 可能是命令行的, 也可以是 Web 的. 这个工具的界面在文本中(下面这个 UI 的 mockup 只是想表明一个模型).")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/764fe65451d29dd7cf307aa75338a4b4-20230731162102-9yf88j7.png",alt:""}})]),t._v(" "),a("p",[t._v("用户可以根据不同的机器型号还有不同的环境直接调出后台配置好的相关标准配置的模板. 对于一些用户需要自己调整的参数也可以在这个模板上进行调整和配置(当然为了方便运维和管理最好不要进行调整). 然后, 用户可以在下面的那个表格中填写好自己的应用要用的参数和各个环境中的值.")]),t._v(" "),a("p",[t._v("这样一来, 这个工具就可以非常方便地让开发人员来配置他们自己的软件配置. 而配置中心还需要提 API 来让应用获取配置. 这个 API 上至少需要有如下参数: "),a("strong",[t._v("服务名, 配置的版本号, 配置的环境")]),t._v(".")]),t._v(" "),a("h6",{attrs:{id:"_3-配置中心的架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-配置中心的架构"}},[t._v("#")]),t._v(" (3)配置中心的架构")]),t._v(" "),a("p",[t._v("接下来, 要来解决配置落地的问题. 我们可以看到, 和一个软件运行有关系的各种配置隶属于不同的地方, 所以要让它们落地还需要些不一样的细节要处理. 这里给了一个大概的架构图.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/dc43fe948e812edabf4a33b7915e425c-20230731162102-lqbwbz2.png",alt:""}})]),t._v(" "),a("p",[t._v("在这个图中可以看到, "),a("strong",[t._v("把配置录入后, 配置中心发出变更通知, 配置变更控制器会来读取最新的配置, 然后应用配置")]),t._v(". 这看上去很简单, 但是有很多细节问题, 下面来一一说明.")]),t._v(" "),a("ul",[a("li",[t._v("**为什么需要一个变更通知的组件, 而不是让配置中心直接推送? **  原因是, 分布式环境下, 服务器太多, 推送不太现实, 而采用一个 "),a("strong",[t._v("Pub/Sub 的通知服务")]),t._v("可以让数据交换经济一些.")]),t._v(" "),a("li",[t._v("**为什么不直接 Pub 数据过去, 还要订阅方反向拉数据? **  直接推数据当然可以, 但让程序反过来用 API 读配置的好处是, 一方面, API 可以校验请求者的权限, 另一方面, 有时候还是需要调用配置中心的基本 API, 比如下载最新的证书之类的. 还有就是, 服务启动时需要从服务中心拉一份配置下来.")]),t._v(" "),a("li",[t._v("**配置变更控制器部署在哪里? 是在每个服务器上呢, 还是在一个中心的地方? **  我觉得因为这个事是要变更配置, 变更配置又是有很多步骤的, 所以这些步骤算是一个事务. 为了执行效率更好, 事务成功率更大, 建议把这个配置变更的控制放在每一台主机上.")]),t._v(" "),a("li",[t._v("**平台层的配置变更, 有的参数是在服务启动的命令行上, 这个怎么变更呢? **  一般来说, 命令行上的参数需要通过 Shell 环境变量做成配置项, 然后通过更改系统环境变量, 并重启服务达到配置变更.")]),t._v(" "),a("li",[t._v("**操作系统的配置变更和平台层的配置变更最好模块化掉, 就像云服务中的不同尺寸的主机型号一样. ** 这样有利于维护和减少配置的复杂性.")]),t._v(" "),a("li",[t._v("**应用服务配置更新的标准化. ** 因为一个公司的应用由不同的团队完成, 所以可能其配置会因为应用的属性不同而不一样. 为了便于管理, 最好有统一的配置更新. 一般来说, 有的应用服务的配置是在配置文件中, 有的应用服务的配置是通过调用 Admin API 的方式变更, 不同的应用系统完全不一样, 你似乎完全没有方法做成统一的. 这里给几个方案.")]),t._v(" "),a("li",[t._v("可以通过一个开发框架或 SDK 的方式来解决, 也就是应用代码找你这个 SDK 来要配置, 并通过 observer 模式订阅配置修改的事件, 或是直接提供配置变更的 Admin 的 API. 这种方式的好处在于在开发期标准化, 并可以规范开发; 不好的是, 耦合语言.")]),t._v(" "),a("li",[t._v("通过一个标准应用运维脚本, 让应用方自己来提供应用变更时的脚本动作. 这种方式虽然通过运维的方式标准化掉配置变更的接口, 就可以通过一个配置控制器来统一操作各个应用变更, 但是在这个脚本中各个应用方依然使用着各种不同的方式来变更配置. 这种方式的好处是不耦合语言, 灵活, 但对于标准化的建设可能不利, 而且使用或者调用脚本是 Bug 很多的东西, 容易出问题.")]),t._v(" "),a("li",[t._v("或是结合上述两种方案, 不使用开发阶段的 SDK 方式嵌入到应用服务中, 而是为每个应用服务单独做一个 Agent. 这个 Agent 对外以 Admin API 的方式服务, 后面则适配应用的配置变更手段, 如更新配置文件, 或者调用应用的 API 等. 这种方式在落地方面是很不错的(这其中是另一种设计模式, 后面会讲到).")])]),t._v(" "),a("h5",{attrs:{id:"_2-配置中心的设计重点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-配置中心的设计重点"}},[t._v("#")]),t._v(" 2.配置中心的设计重点")]),t._v(" "),a("p",[t._v("配置中心主要的用处是统一和规范化管理所有的服务配置, 也算是一种配置上的治理活动. 所以, "),a("mark",[a("strong",[t._v("配置中心的设计重点应该放在如何统一和标准化软件的配置项, 其还会涉及到软件版本, 运行环境, 平台, 中间件等一系列的配置参数")])]),t._v(". 如果你觉得软件配置非常复杂, 那么你应该静下心来仔细梳理或治理一下现有的配置参数, 并简化相应的配置, 使用模块会是一种比较好的简化手段.")]),t._v(" "),a("p",[t._v("根据前面《编程范式游记》中所说的, 编程的本质是对 logic 和 control 的分离, 所以对于配置也一样, 其也有控制面上的配置和业务逻辑面上的配置, 控制面上的配置最好能标准统一.")]),t._v(" "),a("p",[a("strong",[t._v("配置更新的时候是一个事务处理, 需要考虑事务的问题, 如果变更不能继续, 需要回滚到上个版本的配置")]),t._v(". 配置版本最好和软件版本对应上.")]),t._v(" "),a("p",[t._v("配置更新控制器, 需要应用服务的配合, 比如, 配置的 reload, 服务的优雅重启, 服务的 Admin API, 或是通过环境变量...这些最好是由一个统一的开发框架搞定.")]),t._v(" "),a("p",[t._v("配置更新控制器还担任服务启动的责任, 由配置更新控制器来启动服务. 这样配置控制器会从配置中心拉取所有的配置, 更新操作系统, 设置好启动时用的环境变量, 并更新好服务需要的配置文件, 然后启动服务. (当然, 你也可以在服务启动的脚本中真正启动服务前放上一段让配置更新控制器更新配置的脚本. 无论怎么样, 这些都可以在运维层面实现, 不需要业务开发人员知道.)")]),t._v(" "),a("h5",{attrs:{id:"_3-小结-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-小结-7"}},[t._v("#")]),t._v(" 3.小结")]),t._v(" "),a("p",[t._v("总结一下今天分享的主要内容. 首先, 传统单机软件的配置通常保存在文件中, 但在分布式系统下, 为了管理方便, 必须有一个配置中心. 然后讲了配置的区分: "),a("strong",[t._v("按静态和动态, 运行环境, 依赖和层次来区分")]),t._v(". 进一步, 从区分出的情况出发, 层次方面, 平台, 中间件和应用三个层次由不同职责的运维人员来配置.")]),t._v(" "),a("p",[a("strong",[t._v("外部依赖的配置并不适合放在配置中心里, 而最好是由服务发现系统来提供. 开发环境和生产环境的日志级别配置也会不同. 出于这些特点, 可以用一个配置管理工具来管理这些配置")]),t._v(". 接着介绍了配置管理架构中几个关键问题的解决思路. 最后介绍了配置中心的几个设计重点.")]),t._v(" "),a("h4",{attrs:{id:"管理设计篇之-边车模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#管理设计篇之-边车模式"}},[t._v("#")]),t._v(' 管理设计篇之"边车模式"')]),t._v(" "),a("p",[t._v("所谓的边车模式, 对应于生活中熟知的边三轮摩托车. 也就是说, "),a("strong",[t._v('可以通过给一个摩托车加上一个边车的方式来扩展现有的服务和功能. 这样可以很容易地做到 "控制" 和 "逻辑" 的分离')]),t._v(". 也就是说, 我们"),a("mark",[a("strong",[t._v('不需要在服务中实现控制面上的东西, 如监视, 日志记录, 限流, 熔断, 服务注册, 协议适配转换等这些属于控制面上的东西, 而只需要专注地做好和业务逻辑相关的代码, 然后由 "边车" 来实现这些与业务逻辑没有关系的控制功能')])]),t._v(".")]),t._v(" "),a("h5",{attrs:{id:"_1-边车模式设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-边车模式设计"}},[t._v("#")]),t._v(" 1.边车模式设计")]),t._v(" "),a("p",[t._v("具体来说, 你可以理解为, "),a("mark",[a("strong",[t._v("边车就有点像一个服务的 Agent, 这个服务所有对外的进出通讯都通过这个 Agent 来完成")])]),t._v(". 这样就可以在这个 Agent 上做很多文章了. 但是"),a("mark",[a("strong",[t._v("需要保证的是, 这个 Agent 要和应用程序一起创建, 一起停用")])]),t._v(".")]),t._v(" "),a("p",[t._v("边车模式有时候也叫搭档模式, 或是伴侣模式, 或是跟班模式. 就像在《编程范式游记》中看到的那样, "),a("strong",[t._v("编程的本质就是将控制和逻辑分离和解耦, 而边车模式也是异曲同工")]),t._v(", 同样是让我们"),a("strong",[t._v("在分布式架构中做到逻辑和控制分离")]),t._v(".")]),t._v(" "),a("p",[a("strong",[t._v("对于监视, 日志, 限流, 熔断, 服务注册, 协议转换等等这些功能, 其实都是大同小异, 甚至是完全可以做成标准化的组件和模块的")]),t._v(". 一般来说, 我们有两种方式.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("一种是通过 SDK, Lib 或 Framework 软件包方式, 在开发时与真实的应用服务集成起来.")])]),t._v(" "),a("li",[a("strong",[t._v("另一种是通过像 Sidecar 这样的方式, 在运维时与真实的应用服务集成起来.")])])]),t._v(" "),a("p",[t._v("这两种方式各有优缺点.")]),t._v(" "),a("ul",[a("li",[t._v("以软件包的方式可以和应用密切集成, 有利于资源的利用和应用的性能, 但是对应用有侵入, 而且受应用的编程语言和技术限制. 同时, 当软件包升级的时候, 需要重新编译并重新发布应用.")]),t._v(" "),a("li",[t._v("以 Sidecar 的方式, 对应用服务"),a("strong",[t._v("没有侵入性")]),t._v(', 并且不用受到应用服务的语言和技术的限制, 而且可以做到控制和逻辑的分开升级和部署. 但是这样一来, 增加了每个应用服务的依赖性, 也增加了应用的延迟, 并且也会大大增加管理, 托管, 部署的复杂度. 注意, 对于一些"老的系统", 因为代码太老, 改造不过来, 我们又没有能力重写. 比如一些银行里很老的用 C 语言或是 COBAL 语言写的子系统, 我们想把它们变成分布式系统, 需要对其进行协议的改造以及进行相应的监控和管理. 这个时候, Sidecar 的方式就很有价值了. 因为没有侵入性, 所以可以很快地低风险地改造.')]),t._v(" "),a("li",[a("strong",[t._v("Sidecar 服务在逻辑上和应用服务部署在一个结点中, 其和应用服务有相同的生命周期. 对比于应用程序的每个实例, 都会有一个 Sidecar 的实例. Sidecar 可以很快也很方便地为应用服务进行扩展, 而不需要应用服务的改造")]),t._v(". 比如: Sidecar 可以帮助服务注册到相应的服务发现系统, 并对服务做相关的健康检查. 如果服务不健康, 可以从服务发现系统中把服务实例移除掉; 当应用服务要调用外部服务时, Sidecar 可以帮助从服务发现中找到相应外部服务的地址, 然后做服务路由; Sidecar 接管了进出的流量, 我们就可以做相应的日志监视, 调用链跟踪, 流控熔断... 这些都可以放在 Sidecar 里实现; 然后, 服务控制系统可以通过控制 Sidecar 来控制应用服务, 如流控, 下线等.")])]),t._v(" "),a("p",[t._v("于是, 我们的应用服务则可以完全做到专注于业务逻辑.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/7738586cfe8dfe2203aa100c47af0664-20230731162102-8zif6br.png",alt:""}})]),t._v(" "),a("p",[t._v("注意, 如果把 Sidecar 这个实例和应用服务部署在同一台机器中, 那么, "),a("strong",[t._v("其实 Sidecar 的进程在理论上来说是可以访问应用服务的进程能访问的资源的. 比如, Sidecar 是可以监控到应用服务的进程信息的")]),t._v(". 另外, 因为两个进程部署在同一台机器上, 所以两者之间的"),a("strong",[t._v("通信不存在明显的延迟")]),t._v(". 也就是说, 服务的响应延迟虽然会因为跨进程调用而增加, 但这个增加完全是可以接受的.")]),t._v(" "),a("p",[t._v("另外, 可以看到这样的部署方式, 最好是与 Docker 容器的方式一起使用的. 为什么 Docker 一定会是分布式系统或是云计算的关键技术, 相信你从我的这一系列文章中已经看到其简化架构的部署和管理的重要作用. 否则, 这么多的分布式架构模式实施起来会有很多麻烦.")]),t._v(" "),a("h5",{attrs:{id:"_2-边车设计的重点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-边车设计的重点"}},[t._v("#")]),t._v(" 2.边车设计的重点")]),t._v(" "),a("p",[t._v("首先, 要知道边车模式重点解决什么样的问题.")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("控制和逻辑的分离.")])]),t._v(" "),a("li",[a("strong",[t._v("服务调用中上下文的问题.")])])]),t._v(" "),a("p",[t._v("我们知道, "),a("strong",[t._v("熔断, 路由, 服务发现, 计量, 流控, 监视, 重试, 幂等, 鉴权等控制面上的功能, 以及其相关的配置更新, 本质来上来说, 和服务的关系并不大")]),t._v(". 但是"),a("strong",[t._v("传统的工程做法是在开发层面完成这些功能, 这就会导致各种维护上的问题, 而且还会受到特定语言和编程框架的约束和限制")]),t._v(".")]),t._v(" "),a("p",[t._v("而随着系统架构的复杂化和扩张, 需要更统一地管理和控制这些控制面上的功能, 所以传统的在开发层面上完成控制面的管理会变得非常难以管理和维护. 这使得需要通过 Sidecar 模式来架构我们的系统.")]),t._v(" "),a("p",[t._v("边车模式从概念上理解起来比较简单, 但是在工程实现上来说, 需要注意以下几点.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("进程间通讯机制是这个设计模式的重点, 千万不要使用任何对应用服务有侵入的方式")]),t._v(", 比如, 通过信号的方式, 或是通过共享内存的方式. 最好的方式就是"),a("strong",[t._v("网络远程调用的方式")]),t._v("(因为都在 127.0.0.1 上通讯, 所以开销并不明显).")]),t._v(" "),a("li",[a("strong",[t._v("服务协议方面, 也请使用标准统一的方式")]),t._v(". 这里有两层协议, 一个是 Sidecar 到 service 的内部协议, 另一个是 Sidecar 到远端 Sidecar 或 service 的外部协议. 对于内部协议, 需要尽量靠近和兼容本地 service 的协议; 对于外部协议, 需要尽量使用更为开放更为标准的协议. 但无论是哪种, "),a("strong",[t._v("都不应该使用与语言相关的协议")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("使用这样的模式, 需要在服务的整体打包, 构建, 部署, 管控, 运维上设计好")]),t._v(". 使用 Docker 容器方面的技术可以帮助你全面降低复杂度.")]),t._v(" "),a("li",[a("strong",[t._v("Sidecar 中所实现的功能应该是控制面上的东西, 而不是业务逻辑上的东西, 所以尽量不要把业务逻辑设计到 Sidecar 中.")])]),t._v(" "),a("li",[t._v("小心在 Sidecar 中包含通用功能可能带来的影响. 例如, 重试操作, 这可能不安全, 除非所有操作都是幂等的.")]),t._v(" "),a("li",[t._v("另外, 还要考虑"),a("strong",[t._v("允许应用服务和 Sidecar 的上下文传递的机制")]),t._v(". 例如, 包含 HTTP 请求标头以选择退出重试, 或指定最大重试次数等等这样的信息交互. 或是 Sidecar 告诉应用服务限流发生, 或是远程服务不可用等信息, 这样可以让应用服务和 Sidecar 配合得更好.")])]),t._v(" "),a("p",[t._v("当然, 要"),a("strong",[t._v("清楚 Sidecar 适用于什么样的场景")]),t._v(", 下面罗列几个.")]),t._v(" "),a("ul",[a("li",[t._v("一个比较明显的场景是对老应用系统的改造和扩展.")]),t._v(" "),a("li",[t._v("另一个是对由"),a("strong",[t._v("多种语言混合出来的分布式服务系统进行管理和扩展")]),t._v(".")]),t._v(" "),a("li",[t._v("其中的应用服务由不同的供应商提供.")]),t._v(" "),a("li",[a("strong",[t._v("把控制和逻辑分离, 标准化控制面上的动作和技术, 从而提高系统整体的稳定性和可用性")]),t._v(". 也有利于分工---并不是所有的程序员都可以做好控制面上的开发的.")])]),t._v(" "),a("p",[t._v("同时, 还要"),a("strong",[t._v("清楚 Sidecar 不适用于什么样的场景")]),t._v(", 下面罗列几个.")]),t._v(" "),a("ul",[a("li",[t._v("架构并不复杂的时候, 不需要使用这个模式, 直接使用 API Gateway 或者 Nginx 和 HAProxy 等即可.")]),t._v(" "),a("li",[a("strong",[t._v("服务间的协议不标准且无法转换")]),t._v(".")]),t._v(" "),a("li",[t._v("不需要分布式的架构.")])]),t._v(" "),a("h5",{attrs:{id:"_3-小结-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-小结-8"}},[t._v("#")]),t._v(" 3.小结")]),t._v(" "),a("p",[t._v("总结一下今天分享的主要内容. 首先介绍了什么是边车模式. "),a("strong",[t._v("为了把诸如监视, 日志, 限流等控制逻辑与业务逻辑分离解耦, 我们可以采用边车模式")]),t._v(". 与之对应的另一种实现控制逻辑的方式是库或框架. 虽然相对来说边车模式资源消耗较大, 但控制逻辑不会侵入业务逻辑, 还能适应遗留老系统的低风险改造.")]),t._v(" "),a("p",[t._v("边车作为另一个进程, 和服务进程部署在同一个结点中, 通过一个标准的网络协议, 如 HTTP 来进行通信. 这样可以做到低延迟和标准化. 同时用 Docker 来打包边车和服务两者, 可以非常方便部署. 最后指出了边车模式适用和不适用的场景.")]),t._v(" "),a("h4",{attrs:{id:"管理设计篇之-服务网格"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#管理设计篇之-服务网格"}},[t._v("#")]),t._v(' 管理设计篇之"服务网格"')]),t._v(" "),a("p",[t._v("前面讨论了 Sidecar 边车模式, 这是一个非常不错的分布式架构的设计模式. 因为这个模式可以有效地分离系统控制和业务逻辑, 并且可以让整个系统架构在控制面上可以集中管理, 可以显著地提高分布式系统的整体控制和管理效率, 并且可以让业务开发更快速.")]),t._v(" "),a("p",[t._v("那么, 不妨在上面这个模式下 think big 一下. 假如在一个分布式系统中, 已经把一些标准的 Sidecar 给部署好了. 比如前面文章说过的熔断, 限流, 重试, 幂等, 路由, 监视等这些东西. 在每个计算结点上都部署好了这些东西, 那么真实的业务服务只需要往这个集群中放, 就可以和本地的 Sidecar 通信, 然后由 Sidecar 委托代理与其它系统的交互和控制. 这样一来, 业务开发和运维岂不是简单之极了?")]),t._v(" "),a("p",[t._v("是啊, 试想一下, "),a("strong",[t._v("如果某云服务提供商, 提供了一个带着前面说过的那些各式各样的分布式设计模式的 Sidecar 集群, 那么用户真的就只用写业务逻辑相关的 service 了. 写好一个就往这个集群中部署, 开发和运维工作量都会得到巨大的降低和减少")]),t._v(".")]),t._v(" "),a("h5",{attrs:{id:"_1-什么是service-mesh"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是service-mesh"}},[t._v("#")]),t._v(" 1.什么是Service Mesh")]),t._v(" "),a("p",[t._v("这就是 CNCF(Cloud Native Computing Foundation, 云原生计算基金会)目前主力推动的新一代的微服务架构---"),a("strong",[t._v("Service Mesh 服务网格")]),t._v(".")]),t._v(" "),a("p",[t._v("在 "),a("a",{attrs:{href:"https://buoyant.io/2017/04/25/whats-a-service-mesh-and-why-do-i-need-one/",target:"_blank",rel:"noopener noreferrer"}},[t._v("What’s a service mesh? And why do I need one?"),a("OutboundLink")],1),t._v(" 中, 解释了什么是 Service Mesh.")]),t._v(" "),a("blockquote",[a("p",[t._v("A service mesh is a dedicated infrastructure layer for handling service-to-service communication. It’s responsible for the reliable delivery of requests through the complex topology of services that comprise a modern, cloud native application. In practice, the service mesh is typically implemented as an array of lightweight network proxies that are deployed alongside application code, without the application needing to be aware.")])]),t._v(" "),a("p",[a("strong",[t._v("Service Mesh 这个服务网络专注于处理服务和服务间的通讯. 其主要负责构造一个稳定可靠的服务通讯的基础设施, 并让整个架构更为的先进和 Cloud Native. 在工程中, Service Mesh 基本来说是一组轻量级的服务代理和应用逻辑的服务在一起, 并且对于应用服务是透明的.")])]),t._v(" "),a("p",[t._v("说白了, 就是下面几个特点.")]),t._v(" "),a("ul",[a("li",[t._v("Service Mesh 是一个"),a("strong",[t._v("基础设施")]),t._v(".")]),t._v(" "),a("li",[t._v("Service Mesh 是一个"),a("strong",[t._v("轻量的服务通讯的网络代理")]),t._v(".")]),t._v(" "),a("li",[t._v("Service Mesh "),a("strong",[t._v("对于应用服务来说是透明无侵入的")]),t._v(".")]),t._v(" "),a("li",[t._v("Service Mesh "),a("strong",[t._v("用于解耦和分离分布式系统架构中控制层面上的东西")]),t._v(".")])]),t._v(" "),a("p",[t._v("说起来, Service Mesh 就像是网络七层模型中的第四层 TCP 协议. 其把底层的那些非常难控制的网络通讯方面的控制面的东西都管了(比如: 丢包重传, 拥塞控制, 流量控制), 而更为上面的应用层的协议, 只需要关心自己业务应用层上的事了. 如 HTTP 的 HTML 协议.")]),t._v(" "),a("p",[a("a",{attrs:{href:"http://philcalcado.com/2017/08/03/pattern_service_mesh.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Pattern: Service Mesh"),a("OutboundLink")],1),t._v(" 这篇文章里也详细解释了 Service Mesh 的出现并不是一个偶然, 而是一个必然, 其中的演化路径如下.")]),t._v(" "),a("ul",[a("li",[t._v("一开始是最原始的两台主机间的进程直接通信.")]),t._v(" "),a("li",[t._v("然后分离出网络层来, 服务间的远程通信, 通过底层的网络模型完成.")]),t._v(" "),a("li",[t._v("再后来, 因为两边的服务在接收的速度上不一致, 所以需要"),a("strong",[t._v("应用层")]),t._v("中实现流控.")]),t._v(" "),a("li",[t._v("后来发现, "),a("strong",[t._v("流控模块基本可以交给网络层实现")]),t._v(", 于是 TCP/IP 就成了世界上最成功的网络协议.")]),t._v(" "),a("li",[t._v("再往后面, 我们知道了分布式系统中的 8 个谬论 "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing",target:"_blank",rel:"noopener noreferrer"}},[t._v("The 8 Fallacies of Distributed Computing"),a("OutboundLink")],1),t._v(', 意识到需要在分布式系统中有 "弹力设计". 于是, 我们在更上层中加入了像限流, 熔断, 服务发现, 监控等功能.')]),t._v(" "),a("li",[t._v("然后, 我们发现"),a("strong",[t._v("这些弹力设计的模式都是可以标准化的")]),t._v(". 将这些模式写成 SDK/Lib/Framework, 这样就可以在开发层面上很容易地集成到应用服务中.")]),t._v(" "),a("li",[t._v("接下来, 我们发现, SDK, Lib, Framework 不能跨编程语言. 有什么改动后, 要重新编译重新发布服务, 太不方便了. "),a("strong",[t._v("应该有一个专门的层来干这事, 于是出现了 Sidecar")]),t._v(".")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/56b86e822734dfaa7a4dca58f35cecf5-20230731162102-zn5gvbq.png",alt:""}}),t._v("\n图片来自"),a("a",{attrs:{href:"http://philcalcado.com/2017/08/03/pattern_service_mesh.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Pattern: Service Mesh"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("然后呢, "),a("mark",[a("strong",[t._v("Sidecar 集群就成了 Service Mesh")])]),t._v(". "),a("strong",[t._v("图中的绿色模块是真实的业务应用服务, 蓝色模块则是 Sidecar, 其组成了一个网格. 而应用服务完全独立自包含, 只需要和本机的 Sidecar 依赖, 剩下的事全交给了 Sidecar")]),t._v(".")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/847bdfba29178c9c0d5aa20777141cab-20230731162102-7cj6akl.png",alt:""}}),t._v("\n图片来自 "),a("a",{attrs:{href:"http://philcalcado.com/2017/08/03/pattern_service_mesh.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Pattern: Service Mesh"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("于是 Sidecar 组成了一个平台, 一个 Cloud Native 的服务流量调度的平台(你是否还记得我在《分布式系统的本质》那一系列文章中所说的关键技术中的"),a("strong",[t._v("流量调度和应用监控")]),t._v(", 其都可以通过 Service Mesh 这个平台来完成).")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/cd0756466caf64d4a2ce25633b4aee6f-20230731162102-0hpizvs.png",alt:""}}),t._v("\n图片来自"),a("a",{attrs:{href:"http://philcalcado.com/2017/08/03/pattern_service_mesh.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Pattern: Service Mesh"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("加上"),a("strong",[t._v("对整个集群的管理控制面板")]),t._v(", 就成了整个的 Service Mesh 架构.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/f0ab50b3a35bae1a32b7dec63dffc199-20230731162102-c22xl9x.png",alt:""}}),t._v("\n图片来自 "),a("a",{attrs:{href:"http://philcalcado.com/2017/08/03/pattern_service_mesh.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Pattern: Service Mesh"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/072143ce4507d083609c1b930a5d8348-20230731162102-w4xzjrj.png",alt:""}}),t._v("\n图片来自 "),a("a",{attrs:{href:"http://philcalcado.com/2017/08/03/pattern_service_mesh.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Pattern: Service Mesh"),a("OutboundLink")],1)]),t._v(" "),a("h5",{attrs:{id:"_2-service-mesh相关的开源软件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-service-mesh相关的开源软件"}},[t._v("#")]),t._v(" 2.Service Mesh相关的开源软件")]),t._v(" "),a("p",[t._v("目前比较流行的 Service Mesh 开源软件是 "),a("a",{attrs:{href:"https://istio.io",target:"_blank",rel:"noopener noreferrer"}},[t._v("Istio"),a("OutboundLink")],1),t._v(" 和 "),a("a",{attrs:{href:"https://linkerd.io",target:"_blank",rel:"noopener noreferrer"}},[t._v("Linkerd"),a("OutboundLink")],1),t._v(", 它们都可以在 Kubernetes 中集成. 当然, 还有一个新成员 "),a("a",{attrs:{href:"https://conduit.io",target:"_blank",rel:"noopener noreferrer"}},[t._v("Conduit"),a("OutboundLink")],1),t._v(", 它是由 Linkerd 的作者出来自己搞的, 由 Rust 和 Go 写成的. Rust 负责数据层面, Go 负责控制面. 号称吸取了很多 Linkerd 的 Scala 的教训, 比 Linkerd 更快, 还轻, 更简单.")]),t._v(" "),a("p",[t._v("我虽然不是语言的偏好者, 但不可否认 Rust/Go 的性能方面比 Scala 要好得多得多, 尤其是要做成一个和网络通讯相关的基础设施, 性能是比较重要的.")]),t._v(" "),a("p",[t._v("对此还是推荐大家"),a("strong",[t._v("使用 Rust/Go 语言实现的 Istio 和 Conduit")]),t._v(", 后者比前者要轻很多. 你可以根据具体需求挑选, 或是自己实现.")]),t._v(" "),a("p",[a("mark",[a("strong",[t._v("Istio 是目前最主流的解决方案, 其架构并不复杂, 其核心的 Sidecar 被叫做 Envoy(使者), 用来协调服务网格中所有服务的出入站流量, 并提供服务发现, 负载均衡, 限流熔断等能力, 还可以收集大量与流量相关的性能指标.")])])]),t._v(" "),a("p",[t._v("在 Service Mesh 控制面上, 有一个叫 "),a("strong",[t._v("Mixer 的收集器")]),t._v(", 用来从 Envoy 收集相关的被监控到的流量特征和性能指标. 然后通过 Pilot 的控制器将相关的规则发送到 Envoy 中, 让 Envoy 应用新的规则.")]),t._v(" "),a("p",[t._v("最后, 还有一个为安全设计的 Istio-Auth 身份认证组件, 用来做服务间的"),a("strong",[t._v("访问安全控制")]),t._v(".")]),t._v(" "),a("p",[t._v("整个 Istio 的架构图如下.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/a94ce1a070568721b70cfb58e492904e-20230731162102-vcn6mnp.png",alt:""}})]),t._v(" "),a("h5",{attrs:{id:"_3-service-mesh的设计重点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-service-mesh的设计重点"}},[t._v("#")]),t._v(" 3.Service Mesh的设计重点")]),t._v(" "),a("p",[t._v("Service Mesh 作为 Sidecar 一个集群应用, Sidecar 需要的微观层面上的那些设计要点在这里就不再复述了, 欢迎大家看我之前的文章. 这里更多地说一下 Service Mesh 在整体架构上的一些设计要点.")]),t._v(" "),a("p",[t._v("我们知道, 像 Kubernetes 和 Docker 也是分布式系统管理面上的技术解决方案, 它们一样对于应用程序是透明的. 最重要的是, Kubernetes 和 Docker 对于应用服务的干扰是比较少的. 也就是说, Kubernetes 和 Docker 的服务进程的失败不会导致应用服务的异常运行. 然后, "),a("mark",[a("strong",[t._v("Service Mesh 则不是, 因为其调度了流量, 所以如果 Service Mesh 有 bug, 或是 Sidecar 的组件不可用, 就会导致整个架构出现致命的问题")])]),t._v(".")]),t._v(" "),a("p",[t._v("所以, 在设计 Service Mesh 的时候, 需要小心考虑, 如果 Service Mesh 所管理的 Sidecar 出了问题, 那应该怎么办? 所以, Service Mesh 这个网格一定要是高可靠的, 或者是出现了故障有 workaround 的方式. 一种比较好的方式是, 除了在本机有 Sidecar, 还可以部署一下稍微集中一点的 Sidecar -- "),a("strong",[t._v("比如为某个服务集群部署一个集中式的 Sidecar")]),t._v(". 一旦本机的有问题, 可以走集中的.")]),t._v(" "),a("p",[t._v("这样一来, Sidecar 本来就是用来调度流量的, 而且其粒度可以细到每个服务的实例, 可以粗到一组服务, 还可以粗到整体接入. 这看来看去都像是一个 Gateway 的事. 所以, 我相信, 使用 Gateway 来干这个事应该是最合适不过的了. 这样, 我们的 Service Mesh 的想像空间一下子就大多了.")]),t._v(" "),a("p",[a("strong",[t._v("Service Mesh 不像 Sidecar 需要和 Service 一起打包一起部署, Service Mesh 完全独立部署. 这样一来, Service Mesh 就成了一个基础设施, 就像一个 PaaS 平台. 所以, Service Mesh 能不能和 Kubernetes 密切结合就成为了非常关键的因素")]),t._v(".")]),t._v(" "),a("h5",{attrs:{id:"_4-小结-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-小结-8"}},[t._v("#")]),t._v(" 4.小结")]),t._v(" "),a("p",[t._v("总结一下今天分享的主要内容. "),a("mark",[a("strong",[t._v("首先, 边车模式进化的下一阶段, 就是把它的功能标准化成一个集群, 其结果就是服务网格")])]),t._v(". 它在分布式系统中的地位, 类似于七层网络模型中的传输层协议, 而服务本身则只需要关心业务逻辑, 因此类似于应用层协议. 然后介绍了几个实现了服务网格的开源软件. 最后介绍了服务网格的几个设计重点.")]),t._v(" "),a("h4",{attrs:{id:"管理设计篇之-网关模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#管理设计篇之-网关模式"}},[t._v("#")]),t._v(' 管理设计篇之"网关模式"')]),t._v(" "),a("p",[t._v("前面讲了 "),a("strong",[t._v("Sidecar 和 Service Mesh 这两种设计模式, 它们都是在不侵入业务逻辑的情况下, 把控制面(control plane)和数据面(data plane)的处理解耦分离")]),t._v(". 但是这两种模式都让运维成本变得特别大, 因为每个服务都需要一个 Sidecar, 这让本来就复杂的分布式系统的架构就更为复杂和难以管理了.")]),t._v(" "),a("p",[t._v("在谈 Service Mesh 的时候, 提到了 Gateway. 个人觉得并不需要为每个服务的实例都配置上一个 Sidecar. 其实"),a("strong",[t._v("一个服务集群配上一个 Gateway 就可以了, 或是一组类似的服务配置上一个 Gateway")]),t._v(".")]),t._v(" "),a("p",[t._v("这样一来, Gateway 方式下的架构, 可以细到为每一个服务的实例配置一个自己的 Gateway, 也可以粗到为一组服务配置一个, 甚至可以粗到为整个架构配置一个接入的 Gateway. 于是, 整个系统架构的复杂度就会变得简单可控起来.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/ecbe8e04524d7a0979e6c36a05f9f691-20230731162102-6z2ii8o.png",alt:""}})]),t._v(" "),a("p",[t._v("这张图展示了一个"),a("strong",[t._v("多层 Gateway 架构")]),t._v(", 其中有一个总的 Gateway 接入所有的流量, 并分发给不同的子系统, 还有第二级 Gateway 用于做各个子系统的接入 Gateway. 可以看到, 网关所管理的服务粒度可粗可细. "),a("strong",[t._v("通过网关, 可以把分布式架构组织成一个星型架构, 由网络对服务的请求进行路由和分发, 也可以架构成像 Servcie Mesh 那样的网格架构, 或者只是为了适配某些服务的 Sidecar")]),t._v("...")]),t._v(" "),a("p",[t._v("但是也可以看到, 这样一来, Sidecar 就不再那么轻量了, 而且很有可能会变得比较重了.")]),t._v(" "),a("p",[t._v("总的来说, Gateway 是一个服务器, 也可以说是进入系统的唯一节点. 这跟面向对象设计模式中的 Facade 模式很像. Gateway 封装内部系统的架构, 并且提供 API 给各个客户端. 它还可能有其他功能, 如授权, 监控, 负载均衡, 缓存, 熔断, 降级, 限流, 请求分片和管理, 静态响应处理, 等等.")]),t._v(" "),a("p",[t._v("下面来谈谈一个好的网关应该有哪些设计功能.")]),t._v(" "),a("h5",{attrs:{id:"_1-网关模式设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-网关模式设计"}},[t._v("#")]),t._v(" 1.网关模式设计")]),t._v(" "),a("p",[t._v("一个网关需要有以下的功能.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("请求路由")]),t._v(". 因为不再是 Sidecar 了, 所以网关一定要有请求路由的功能. 这样一来, 对于调用端来说, 也是一件非常方便的事情. 因为调用端不需要知道自己需要用到的其它服务的地址, 全部统一地交给 Gateway 来处理.")]),t._v(" "),a("li",[a("strong",[t._v("服务注册")]),t._v(". 为了能够代理后面的服务, 并把请求路由到正确的位置上, 网关应该有"),a("strong",[t._v("服务注册功能")]),t._v(", 也就是"),a("strong",[t._v("后端的服务实例可以把其提供服务的地址注册, 取消注册")]),t._v(". 一般来说, 注册也就是注册一些 API 接口. 比如 HTTP 的 Restful 请求, 可以注册相应 API 的 URI, 方法, HTTP 头. 这样, "),a("strong",[t._v("Gateway 就可以根据接收到的请求中的信息来决定路由到哪一个后端的服务上")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("负载均衡")]),t._v(". 因为一个网关可以接收多个服务实例, 所以网关还需要在各个对等的服务实例上做负载均衡策略. 简单点就是直接 Round-Robin 轮询, 复杂点的可以设置上权重进行分发, 再复杂一点还可以做到 session 粘连.")]),t._v(" "),a("li",[a("strong",[t._v("弹力设计")]),t._v(". 网关还可以把"),a("strong",[t._v("弹力设计中的那些异步, 重试, 幂等, 流控, 熔断, 监视等都可以实现")]),t._v("进去. 这样, 同样可以像 Service Mesh 那样, 让应用服务只关心自己的业务逻辑(或是说数据面上的事)而不是控制逻辑(控制面).")]),t._v(" "),a("li",[a("strong",[t._v("安全方面")]),t._v(". SSL 加密及证书管理, Session 验证, 授权, 数据校验, 以及对请求源进行恶意攻击的防范. 错误处理越靠前的位置就是越好, 所以网关可以做到一个全站的接入组件来对后端的服务进行保护.")])]),t._v(" "),a("p",[t._v("当然, 网关还可以做更多更有趣的事情, 比如:")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("灰度发布")]),t._v(". 网关完全可以做到对相同服务不同版本的实例进行导流, 还可以收集相关的数据. 这样对于软件质量的提升, 甚至产品试错都有非常积极的意义.")]),t._v(" "),a("li",[a("strong",[t._v("API 聚合")]),t._v(". 使用网关可以将多个单独请求聚合成一个请求. 在微服务体系的架构中, 因为服务变小了, 所以一个明显的问题是, 客户端可能需要多次请求才能得到所有的数据. 这样一来, 客户端与后端之间的频繁通信会对应用程序的性能和规模产生非常不利的影响. 于是可以让网关来帮客户端请求多个后端的服务(有些场景下完全可以并发请求), 然后把后端服务的响应结果拼装起来, 回传给客户端(当然这个过程也可以做成异步的, 但这需要客户端的配合).")]),t._v(" "),a("li",[a("strong",[t._v("API 编排")]),t._v(". 同样在微服务的架构下, 要走完一个完整的业务流程, 需要调用一系列 API, 就像一种工作流一样, 这个事完全可以通过网页来编排这个业务流程. 可能通过一个 DSL 来定义和编排不同的 API, 也可以通过像 AWS Lambda 服务那样的方式来串联不同的 API.")])]),t._v(" "),a("h5",{attrs:{id:"_2-gateway-sidecar和service-mesh"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-gateway-sidecar和service-mesh"}},[t._v("#")]),t._v(" 2.Gateway,Sidecar和Service Mesh")]),t._v(" "),a("p",[t._v("通过上面的描述可以看到, "),a("strong",[t._v("网关, 边车和 Service Mesh 是非常像的三种设计模式")]),t._v(", 很容易混淆. 因此, 在这里想明确一下这三种设计模式的特点, 场景和区别.")]),t._v(" "),a("p",[t._v("首先, "),a("mark",[a("strong",[t._v("Sidecar 的方式主要是用来改造已有服务")])]),t._v('. 我们知道, 要在一个架构中实施一些架构变更时, 需要业务方一起过来进行一些改造. 然而业务方的事情比较多, 像架构上的变更会低优先级处理, 这就导致架构变更的"政治复杂度"太高. 而通过 Sidecar 的方式, 就可以适配应用服务, 成为应用服务进出请求的代理. 这样就可以干很多对于业务方完全透明的事情了.')]),t._v(" "),a("p",[a("mark",[a("strong",[t._v("当 Sidecar 在架构中越来越多时, 需要对 Sidecar 进行统一的管理. 于是, 我们为 Sidecar 增加了一个全局的中心控制器, 就出现了我们的 Service Mesh")])]),t._v(". 在中心控制器出现以后, 我们发现, 可以把非业务功能的东西全部实现在 Sidecar 和 Controller 中, 于是就成了一个"),a("strong",[t._v("网格")]),t._v(". 业务方只需要把服务往这个网格中一放就好了, 与其它服务的通讯, 服务的弹力等都不用管了, 像一个服务的 PaaS 平台.")]),t._v(" "),a("p",[t._v("然而, Service Mesh 的架构和部署太过于复杂, 会让运维层面上的复杂度变大. 为了简化这个架构的复杂度, 我认为 Sidecar 的粒度应该是可粗可细的, 这样更为方便. 但我认为, Gateway 更为适合, 而且 Gateway 只负责进入的请求, 不像 Sidecar 还需要负责对外的请求. 因为 Gateway 可以把一组服务给聚合起来, 所以服务对外的请求可以交给对方服务的 Gateway. "),a("strong",[t._v("于是, 我们只需要用一个负责进入请求的 Gateway 来简化需要同时负责进出请求的 Sidecar 的复杂度")]),t._v(".")]),t._v(" "),a("p",[t._v("总而言之, 我觉得 Gateway 的方式比 Sidecar 和 Service Mesh 更好. 当然, 具体问题还要具体分析.")]),t._v(" "),a("h5",{attrs:{id:"_3-网关的设计重点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-网关的设计重点"}},[t._v("#")]),t._v(" 3.网关的设计重点")]),t._v(" "),a("p",[t._v("第一点是"),a("strong",[t._v("高性能")]),t._v(". 在技术设计上, 网关不应该也不能成为性能的瓶颈. 对于高性能, 最好使用高性能的编程语言来实现, 如 C, C++, Go 和 Java. 网关对后端的请求, 以及对前端的请求的服务一定要使用异步非阻塞的 I/O 来确保后端延迟不会导致应用程序中出现性能问题. C 和 C++ 可以参看 Linux 下的 epoll 和 Windows 的 I/O Completion Port 的异步 IO 模型, Java 下如 Netty, Vert.x, Spring Reactor 的 NIO 框架. 当然, 我还是更喜欢 Go 语言的 goroutine 加 channel 玩法.")]),t._v(" "),a("p",[t._v("第二点是"),a("strong",[t._v("高可用")]),t._v(". 因为所有的流量或调用经过网关, 所以网关必须成为一个"),a("strong",[t._v("高可用的技术组件")]),t._v(", 它的稳定直接关系到了所有服务的稳定. 网关如果没有设计, 就会成变一个单点故障. 因此一个好的网关至少要做到以下几点.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("集群化")]),t._v(". 网关要成为一个集群, 其最好可以自己组成一个集群, 并可以"),a("strong",[t._v("自己同步集群数据")]),t._v(", 而不需要依赖于一个第三方系统来同步数据.")]),t._v(" "),a("li",[a("strong",[t._v("服务化")]),t._v(". 网关还需要做到在不间断的情况下修改配置, 一种是像 Nginx reload 配置那样, 可以做到不停服务, 另一种是最好做到服务化. 也就是说, 得要有自己的 Admin API 来在运行时修改自己的配置.")]),t._v(" "),a("li",[a("strong",[t._v("持续化")]),t._v(". 比如重启, 就是像 Nginx 那样优雅地重启. 有一个主管请求分发的主进程. 当需要重启时, 新的请求被分配到新的进程中, 而老的进程处理完正在处理的请求后就退出.")])]),t._v(" "),a("p",[t._v("第三点是"),a("strong",[t._v("高扩展")]),t._v(". 因为网关需要承接所有的业务流量和请求, 所以一定会有或多或少的业务逻辑. 而业务逻辑是多变和不确定的. 比如, 需要在网关上加入一些和业务相关的东西. 因此, 一个好的 Gateway 还需要是可以扩展的, 并能进行"),a("strong",[t._v("二次开发")]),t._v("的. 当然, 像 Nginx 那样通过 Module 进行二次开发的固然可以. 但我还是觉得应该做成像 AWS Lambda 那样的方式, 也就是所谓的 "),a("strong",[t._v("Serverless")]),t._v(" 或 FaaS(Function as a Service)那样的方式.")]),t._v(" "),a("p",[t._v("另外, 在"),a("strong",[t._v("运维方面")]),t._v(", 网关应该有以下几个设计原则.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("业务松耦合, 协议紧耦合")]),t._v(". 在业务设计上, 网关不应与后面的服务之间形成服务耦合, 也不应该有业务逻辑. 网关应该是在网络应用层上的组件, 不应该处理通讯协议体, 只应该解析和处理通讯协议头. 另外, 除了服务发现外, 网关不应该有第三方服务的依赖.")]),t._v(" "),a("li",[a("strong",[t._v("应用监视, 提供分析数据")]),t._v(". 网关上需要考虑应用性能的监控, 除了有相应后端服务的高可用的统计之外, 还需要使用 Tracing ID 实施分布式链路跟踪, 并统计好一定时间内每个 API 的吞吐量, 响应时间和返回码, 以便启动弹力设计中的相应策略.")]),t._v(" "),a("li",[a("strong",[t._v("用弹力设计保护后端服务")]),t._v(". 网关上一定要实现熔断, 限流, 重试和超时等"),a("strong",[t._v("弹力设计")]),t._v(". 如果一个或多个服务调用花费的时间过长, 那么可接受超时并返回一部分数据, 或是返回一个网关里的缓存的上一次成功请求的数据. 你可以考虑一下这样的设计.")]),t._v(" "),a("li",[a("strong",[t._v("DevOps")]),t._v(". 因为网关这个组件太关键了, 所以需要 DevOps 这样的东西, 将其发生故障的概率降到最低. 这个软件需要经过精良的测试, 包括功能和性能的测试, 还有浸泡测试. 还需要有一系列自动化运维的管控工具.")])]),t._v(" "),a("p",[t._v("在整体的"),a("strong",[t._v("架构方面")]),t._v(", 有如下一些注意事项.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("不要在网关中的代码里内置聚合后端服务的功能, 而应考虑将聚合服务放在网关核心代码之外")]),t._v(". 可以使用 Plugin 的方式, 也可以放在网关后面形成一个 Serverless 服务.")]),t._v(" "),a("li",[a("strong",[t._v("网关应该靠近后端服务, 并和后端服务使用同一个内网, 这样可以保证网关和后端服务调用的低延迟, 并可以减少很多网络上的问题")]),t._v(". 这里多说一句, 网关处理的静态内容应该靠近用户(应该放到 CDN 上), 而网关和此时的动态服务应该靠近后端服务.")]),t._v(" "),a("li",[a("strong",[t._v("网关也需要做容量扩展, 所以需要成为一个集群来分担前端带来的流量")]),t._v(". 这一点, 要么通过 DNS 轮询的方式实现, 要么通过 CDN 来做流量调度, 或者通过更为底层的性能更高的负载均衡设备.")]),t._v(" "),a("li",[t._v("对于服务发现, 可以做一个时间不长的缓存, 这样不需要每次请求都去查一下相关的服务所在的地方. 当然, 如果你的系统不复杂, 可以考虑把服务发现的功能直接集成进网关中.")]),t._v(" "),a("li",[t._v("为网关考虑 bulkhead 设计方式. 用不同的网关服务不同的后端服务, 或是用不同的网关服务前端不同的客户.")])]),t._v(" "),a("p",[t._v("另外, 因为网关是为用户请求和后端服务的桥接装置, 所以需要考虑一些"),a("strong",[t._v("安全方面的事宜")]),t._v(". 具体如下:")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("加密数据")]),t._v(". 可以"),a("strong",[t._v("把 SSL 相关的证书放到网关上, 由网关做统一的 SSL 传输管理")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("校验用户的请求")]),t._v(". 一些基本的用户验证可以放在网关上来做, 比如用户是否已登录, 用户请求中的 token 是否合法等. 但是需要权衡一下, 网关是否需要校验用户的输入. 因为这样一来, 网关就需要从只关心协议头, 到需要关心协议体. 而协议体中的东西一方面不像协议头是标准的, 另一方面解析协议体还要耗费大量的运行时间, 从而降低网关的性能. 对此, 我想说的是, 看具体需求, 一方面如果协议体是标准的, 那么可以干; 另一方面, 对于解析协议所带来的性能问题, 需要做相应的隔离.")]),t._v(" "),a("li",[a("strong",[t._v("检测异常访问")]),t._v(". 网关需要检测一些异常访问, 比如在一段比较短的时间内请求次数超过一定数值; 还比如, 同一客户端的 4xx 请求出错率太高...对于这样的一些请求访问, 网关一方面要把这样的请求屏蔽掉, 另一方面需要发出警告, 有可能会是一些比较重大的安全问题, 如被黑客攻击.")])]),t._v(" "),a("h5",{attrs:{id:"_4-小结-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-小结-9"}},[t._v("#")]),t._v(" 4.小结")]),t._v(" "),a("p",[t._v("总结一下今天分享的主要内容. 首先, "),a("strong",[t._v("网关模式能代替边车模式, 区别是它将分布在各个服务边上的边车换成了集中式的网关. 网关不必管理所有服务节点, 而是可以根据需要, 为指定的服务集群配上网关, 也可以在网关前面加上更高层的网关, 从而构造出一个星型的结构")]),t._v(".")]),t._v(" "),a("p",[t._v("接着列举了网关模式的功能特性. 然后介绍了网关模式的设计重点. 由于网关的功能比较多, 因此在设计上要考虑的点也比较多, 需要仔细思考和斟酌.")]),t._v(" "),a("h4",{attrs:{id:"管理设计篇之-部署升级策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#管理设计篇之-部署升级策略"}},[t._v("#")]),t._v(' 管理设计篇之"部署升级策略"')]),t._v(" "),a("p",[t._v("在分布式系统的世界里, 一个服务有多个实例, 所以部署或是升级一个服务也会变得比较麻烦. 今天讨论"),a("strong",[t._v("服务部署的模式")]),t._v(". 一般来说, 有如下几种:")]),t._v(" "),a("ul",[a("li",[t._v("停机部署(Big Bang/Recreate):  把现有版本的服务停机, 然后部署新的版本.")]),t._v(" "),a("li",[a("strong",[t._v("蓝绿部署")]),t._v("(Blue/Green/Stage): 部署好新版本后, 把流量从老服务那边切过来.")]),t._v(" "),a("li",[a("strong",[t._v("滚动部署")]),t._v("(Rolling Update/Ramped):  一点一点地升级现有的服务.")]),t._v(" "),a("li",[a("strong",[t._v("灰度部署")]),t._v("(Canary): 把一部分用户切到新版本上来, 然后看一下有没有问题. 如果没有问题就继续扩大升级, 直到全部升级完成.")]),t._v(" "),a("li",[a("strong",[t._v("AB 测试")]),t._v("(A/B Testing): 同时上线两个版本, 然后做相关的比较.")])]),t._v(" "),a("p",[t._v("下面来看一下每种方式的使用场景和优缺点.")]),t._v(" "),a("h5",{attrs:{id:"_1-停机部署"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-停机部署"}},[t._v("#")]),t._v(" 1.停机部署")]),t._v(" "),a("p",[t._v("停机部署其实是最简单粗暴的方式, 就是简单地把现有版本的服务停机, 然后部署新的版本. 有时候不得不使用这样的方式来部署或升级多个服务. 比如, 新版本中的服务使用到了和老版本完全不兼容的数据表设计. 这个时候, 我们对生产有两个变更, 一个是数据库, 另一个是服务, 而且新老版本互不兼容, 所以只能使用停机部署的方式.")]),t._v(" "),a("p",[t._v("这种方式的优势是, 在部署过程中不会出现新老版本同时在线的情况, 所有状态完全一致. 停机部署主要是为了新版本的一致性问题. 这种方式的问题是会停机, 对用户的影响很大. 所以一般来说, 这种部署方式需要事前挂公告, 选择一个用户访问少的时间段来做.")]),t._v(" "),a("h5",{attrs:{id:"_2-蓝绿部署"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-蓝绿部署"}},[t._v("#")]),t._v(" 2.蓝绿部署")]),t._v(" "),a("p",[t._v("蓝绿部署与停机部署最大的不同是, 其在生产线上"),a("strong",[t._v("部署相同数量的新服务, 然后当新的服务测试确认 OK 后, 把流量切到新的服务这边来")]),t._v(". 蓝绿部署比停机部署好的地方是, 它无需停机.")]),t._v(" "),a("p",[t._v("我们可以看到这种部署方式, 就是我们说的"),a("strong",[t._v("预发环境")]),t._v(". 在我以前的金融公司里, 也经常用这种方式, 生产线上有两套相同的集群, 一套是 Prod 是真实服务的, 另一套是 Stage 是预发环境, 发布发 Stage, 然后把流量切到 Stage 这边, 于是 Stage 就成了 Prod, 而之前的 Prod 则成了 Stage. 有点像换页似的.")]),t._v(" "),a("p",[t._v("这种方式的优点是没有停机, 实时发布和升级, 也避免有新旧版本同时在线的问题. 但这种部署的问题就是有点浪费, 因为需要使用双倍的资源(不过这只是在物理机时代, 在云计算时代没事, 因为虚拟机部署完就可以释放了).")]),t._v(" "),a("p",[t._v("另外, 如果服务中有状态, 比如一些缓存什么的, 停机部署和蓝绿部署都会有问题.")]),t._v(" "),a("h5",{attrs:{id:"_3-滚动部署"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-滚动部署"}},[t._v("#")]),t._v(" 3.滚动部署")]),t._v(" "),a("p",[t._v("滚动部署策略是指通过逐个替换应用的所有实例, 来缓慢发布应用的一个新版本. 通常过程如下: 在负载调度后有个版本 A 的应用实例池, 一个版本 B 的实例部署成功, 可以响应请求时, 该实例被加入到池中. 然后版本 A 的一个实例从池中删除并下线.")]),t._v(" "),a("p",[t._v("这种部署方式直接对现有的服务进行升级, 虽然便于操作, 而且在缓慢地更新的过程中, 对于有状态的服务也是比较友好的, 状态可以在更新中慢慢重建起来. 但这种部署的问题也是比较多的.")]),t._v(" "),a("ul",[a("li",[t._v("在发布过程中, 会出现"),a("strong",[t._v("新老两个版本同时在线")]),t._v("的情况, 同一用户的请求可能在新老版中切换而导致问题.")]),t._v(" "),a("li",[t._v("新版程序没有在生产线上经过验证就上线了.")]),t._v(" "),a("li",[t._v("在整个过程中, 生产环境处于一个新老更替的中间状态, 如果有问题要回滚就有点麻烦了.")]),t._v(" "),a("li",[t._v("如果在升级过程中, 需要做别的一些运维工作, 还要判断哪些结点是老版本的, 哪些结点是新版本的. 这太痛苦了.")]),t._v(" "),a("li",[t._v("因为新老版本的代码同时在线, 所以其依赖的服务需要同时处理两个版本的请求, 这可能会带来兼容性问题.")]),t._v(" "),a("li",[t._v("而且, 无法让流量在新老版本中切换.")])]),t._v(" "),a("h5",{attrs:{id:"_4-灰度部署-金丝雀"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-灰度部署-金丝雀"}},[t._v("#")]),t._v(" 4.灰度部署(金丝雀)")]),t._v(" "),a("p",[a("strong",[t._v("灰度部署又叫金丝雀部署")]),t._v('. 其得名来源于矿井中的金丝雀. 17 世纪, 英国矿井工人发现, 金丝雀对瓦斯这种气体十分敏感. 空气中哪怕有极其微量的瓦斯, 金丝雀也会停止歌唱. 而当瓦斯含量超过一定限度时, 虽然鲁钝的人类毫无察觉, 金丝雀却早已毒发身亡. 当时在采矿设备相对简陋的条件下, 工人们每次下井都会带上一只金丝雀作为 "瓦斯检测指标", 以便在危险状况下紧急撤离.')]),t._v(" "),a("p",[a("strong",[t._v("灰度部署是指逐渐将生产环境流量从老版本切换到新版本")]),t._v(". 通常流量是按"),a("strong",[t._v("比例分配")]),t._v("的. 例如 90% 的请求流向老版本, 10% 的请求流向新版本. 然后没有发现问题, 就逐步扩大新版本上的流量, 减少老版本上的流量.")]),t._v(" "),a("p",[t._v("除了切流量外, 对于多租户的平台, 例如云计算平台, 灰度部署也可以将一些新的版本先部署到一些用户上, 如果没有问题, 扩大部署, 直到全部用户. 一般的策略是, 从内部用户开始, 然后是一般用户, 最后是大客户.")]),t._v(" "),a("p",[t._v("这个技术大多数用于缺少足够测试, 或者缺少可靠测试, 或者对新版本的稳定性缺乏信心的情况下. 把一部分用户切到新版上来, 然后看一下有没有问题. 如果没有问题就继续扩大升级, 直到全部升级完成.")]),t._v(" "),a("h5",{attrs:{id:"_5-ab测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-ab测试"}},[t._v("#")]),t._v(" 5.AB测试")]),t._v(" "),a("p",[t._v("AB 测试和蓝绿部署或是金丝雀灰度部署完全是不一样的.")]),t._v(" "),a("p",[t._v("AB 测试是"),a("strong",[t._v("同时上线两个版本, 然后做相关的比较")]),t._v(". 它是用来测试应用功能表现的方法, 例如可用性, 受欢迎程度, 可见性等.")]),t._v(" "),a("p",[a("mark",[a("strong",[t._v("蓝绿部署是为了不停机, 灰度部署是对新版本的质量没信心. 而 AB 测试是对新版的功能没信心. 注意, 一个是质量, 一个是功能.")])])]),t._v(" "),a("p",[t._v("比如, 网站 UI 大改版, 推荐算法的更新, 流程的改变, 我们不知道新的版本否会得到用户青睐或是能得到更好的用户体验, 因此需要收集一定的用户数据才能知道.")]),t._v(" "),a("p",[t._v("于是需要在生产线上发布两个版本, 拉一部分用户过来当小白鼠, 然后通过科学的观测得出来相关的结论. AB 测试旨在通过科学的实验设计, 采样样本代表性, 流量分割与小流量测试等方式来获得具有代表性的实验结论, 并确信该结论在推广到全部流量时可信.")]),t._v(" "),a("p",[t._v("可以看到 AB 测试, 其包含了灰度发布的功能. 也就是说, 如果观测如果只是观测有没有 bug, 那就是灰度发布了. 当然, 如果复杂一点, 要观测用户的一些数据指标, 这完全也可能做成自动化的, 如果新版本数据好, 就自动化地切一点流量过来, 如果不行, 就换一批用户(样本)再试试.")]),t._v(" "),a("p",[t._v("对于灰度发布或是 AB 测试可以使用下面的技术来选择用户.")]),t._v(" "),a("ul",[a("li",[t._v("浏览器 cookie.")]),t._v(" "),a("li",[t._v("查询参数.")]),t._v(" "),a("li",[t._v("地理位置.")]),t._v(" "),a("li",[t._v("技术支持, 如浏览器版本, 屏幕尺寸, 操作系统等.")]),t._v(" "),a("li",[t._v("客户端语言.")])]),t._v(" "),a("h5",{attrs:{id:"_6-小结-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-小结-3"}},[t._v("#")]),t._v(" 6.小结")]),t._v(" "),a("p",[t._v("部署应用有很多种方法, 实际采用哪种方式取决于需求和预算. 当发布到开发或者模拟环境时, 停机或者滚动部署是一个好选择, 因为干净和快速. 当发布到生产环境时, "),a("strong",[t._v("滚动部署或者蓝绿部署")]),t._v("通常是一个好选择, 但新平台的主流程测试是必须的.")]),t._v(" "),a("p",[t._v("蓝绿部署也不错, 但需要额外的资源. 如果应用缺乏测试或者对软件的功能和稳定性影响缺乏信心, 那么可以使用金丝雀部署或者 AB 测试发布. 如果业务需要根据地理位置, 语言, 操作系统或者浏览器特征等参数来给一些特定的用户测试, 那么可以采用 AB 测试技术.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/c086168d8e8f5203623432dbb5e5db78-20230731162102-4pcxhw3.png",alt:""}})]),t._v(" "),a("p",[t._v("总结一下今天分享的主要内容. 首先, 常见的部署升级策略有停机, 蓝绿, 滚动, 灰度和 AB 测试这几种. 然后讲述了每一种部署策略的含义和优缺点. 最后将它们放在一起做了一个比较.")]),t._v(" "),a("h4",{attrs:{id:"性能设计篇之-缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#性能设计篇之-缓存"}},[t._v("#")]),t._v(' 性能设计篇之"缓存"')]),t._v(" "),a("p",[t._v('前面分享了《分布式系统设计模式》系列文章的前两部分--弹力设计篇和管理设计篇. 今天开始这一系列的最后一部分内容--性能设计篇, 主题为《性能设计篇之"缓存"》.')]),t._v(" "),a("p",[t._v("基本上来说, 在分布式系统中最耗性能的地方就是最后端的"),a("strong",[t._v("数据库")]),t._v("了. 一般来说, 只要小心维护好, 数据库四种操作(select, update, insert 和 delete)中的三个写操作 insert, update 和 delete 不太会出现性能问题(insert 一般不会有性能问题, update 和 delete 一般会有主键, 所以也不会太慢). 除非索引建得太多, 而数据库里的数据又太多, 这三个操作才会变慢. 绝大多数情况下, "),a("strong",[t._v("select 是出现性能问题最大的地方")]),t._v(". 一方面, select 会有很多像 join, group, order, like 等这样丰富的语义, 而这些语义是非常耗性能的; 另一方面, 大多数应用都是读多写少, 所以加剧了慢查询的问题.")]),t._v(" "),a("p",[t._v("分布式系统中远程调用也会消耗很多资源, 因为网络开销会导致整体的响应时间下降. 为了挽救这样的性能开销, 在业务允许的情况(不需要太实时的数据)下, "),a("strong",[t._v("使用缓存是非常必要的事情")]),t._v(".")]),t._v(" "),a("p",[t._v("从另一个方面说, 缓存在今天的移动互联网中是必不可少的一部分, 因为网络质量不一定永远是最好的, 所以前端也会为所有的 API 加上缓存. 不然, 网络不通畅的时候, 没有数据, 前端都不知道怎么展示 UI 了. 既然因为移动互联网的网络质量而导致我们必须容忍数据的不实时性, 那么从业务上来说, 在大多数情况下是可以使用缓存的.")]),t._v(" "),a("p",[a("strong",[t._v("缓存是提高性能最好的方式")]),t._v(", 一般来说, 缓存有以下三种模式.")]),t._v(" "),a("h5",{attrs:{id:"_1-cache-aside更新模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-cache-aside更新模式"}},[t._v("#")]),t._v(" 1.Cache Aside更新模式")]),t._v(" "),a("p",[t._v("这是"),a("strong",[t._v("最常用")]),t._v("的设计模式了, 其具体逻辑如下.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("失效")]),t._v(": 应用程序先从 Cache 取数据, 如果没有得到, 则从数据库中取数据, 成功后, 放到缓存中.")]),t._v(" "),a("li",[a("strong",[t._v("命中")]),t._v(": 应用程序从 Cache 中取数据, 取到后返回.")]),t._v(" "),a("li",[a("strong",[t._v("更新")]),t._v(": 先把"),a("strong",[t._v("数据存到数据库中, 成功后, 再让缓存失效")]),t._v(".")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/55f708853dddc97e399968292bc59e89-20230731162102-3h1buqe.png",alt:""}})]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/62467ef4f5b7e7740aad46a043f6f77f-20230731162102-7ej1n6d.png",alt:""}})]),t._v(" "),a("p",[t._v("这是标准的设计模式, 包括 Facebook 的论文《"),a("a",{attrs:{href:"https://www.usenix.org/system/files/conference/nsdi13/nsdi13-final170_update.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Scaling Memcache at Facebook"),a("OutboundLink")],1),t._v("》中也使用了这个策略. 为什么不是写完数据库后更新缓存? 你可以看一下 Quora 上的这个问答《"),a("a",{attrs:{href:"https://www.quora.com/Why-does-Facebook-use-delete-to-remove-the-key-value-pair-in-Memcached-instead-of-updating-the-Memcached-during-write-request-to-the-backend",target:"_blank",rel:"noopener noreferrer"}},[t._v("Why does Facebook use delete to remove the key-value pair in Memcached instead of updating the Memcached during write request to the backend?"),a("OutboundLink")],1),t._v("》, 主要是"),a("strong",[t._v("怕两个并发的写操作导致脏数据")]),t._v(".")]),t._v(" "),a("p",[t._v("那么, 是不是这个 Cache Aside 就不会有并发问题了? 不是的. 比如, 一个是读操作, 但是没有命中缓存, 就会到数据库中取数据. 而此时来了一个写操作, 写完数据库后, 让缓存失效, 然后之前的那个读操作再把老的数据放进去, 所以会造成脏数据.")]),t._v(" "),a("p",[t._v("这个案例理论上会出现, 但实际上出现的概率可能非常低, "),a("strong",[t._v("因为这个条件需要发生在读缓存时缓存失效, 而且有一个并发的写操作. 实际上数据库的写操作会比读操作慢得多, 而且还要锁表, 读操作必须在写操作前进入数据库操作, 又要晚于写操作更新缓存, 所有这些条件都具备的概率并不大")]),t._v(".")]),t._v(" "),a("p",[t._v("**所以, 这也就是 Quora 上的那个答案里说的, 要么通过 2PC 或是 Paxos 协议保证一致性, 要么就是拼命地降低并发时脏数据的概率. 而 Facebook 使用了这个降低概率的玩法, 因为 2PC 太慢, 而 Paxos 太复杂. 当然最好还是为缓存设置好过期时间. **")]),t._v(" "),a("h5",{attrs:{id:"_2-read-write-through更新模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-read-write-through更新模式"}},[t._v("#")]),t._v(" 2.Read/Write Through更新模式")]),t._v(" "),a("p",[t._v("可以看到, 在上面的 Cache Aside 套路中, 应用代码需要维护两个数据存储, 一个是"),a("strong",[t._v("缓存")]),t._v("(cache), 一个是"),a("strong",[t._v("数据库")]),t._v("(repository). 所以, 应用程序比较啰嗦. 而 Read/Write Through 套路是把更新数据库(repository)的操作由缓存自己代理了, 所以, 对于应用层来说, 就简单很多了. 可以理解为, "),a("strong",[t._v("应用认为后端就是一个单一的存储, 而存储自己维护自己的 Cache")]),t._v(".")]),t._v(" "),a("h6",{attrs:{id:"_1-read-through"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-read-through"}},[t._v("#")]),t._v(" (1)Read Through")]),t._v(" "),a("p",[t._v("Read Through 套路就是"),a("strong",[t._v("在查询操作中更新缓存")]),t._v(", 也就是说, 当缓存失效的时候(过期或 LRU 换出), Cache Aside 是由调用方负责把数据加载入缓存, 而 Read Through 则用缓存服务自己来加载, 从而对应用方是透明的.")]),t._v(" "),a("h6",{attrs:{id:"_2-write-through"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-write-through"}},[t._v("#")]),t._v(" (2)Write Through")]),t._v(" "),a("p",[t._v("Write Through 套路和 Read Through 相仿, 不过是在更新数据时发生. 当有数据更新的时候, 如果没有命中缓存, 直接更新数据库, 然后返回. 如果命中了缓存, 则更新缓存, 然后由 Cache 自己更新数据库(这是一个同步操作).")]),t._v(" "),a("p",[t._v("下图自来 Wikipedia 的 "),a("a",{attrs:{href:"%3Ca%20href="}},[t._v("Cache 词条")]),t._v(". 其中的 Memory, 你可以理解为就是我们例子里的数据库.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/411513c60e346c2132fae916ded5579e-20230731162102-98r2l8o.png",alt:""}})]),t._v(" "),a("h5",{attrs:{id:"_3-write-behind-caching更新模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-write-behind-caching更新模式"}},[t._v("#")]),t._v(" 3.Write Behind Caching更新模式")]),t._v(" "),a("p",[t._v("Write Behind 又叫 Write Back. 一些了解 Linux 操作系统内核的同学对 write back 应该非常熟悉, 这不就是 Linux 文件系统的 page cache 算法吗? 是的, 你看基础知识全都是相通的.")]),t._v(" "),a("p",[a("strong",[t._v("Write Back 套路就是, 在更新数据的时候, 只更新缓存, 不更新数据库, 而缓存会异步地批量更新数据库")]),t._v(". 这个设计的好处就是让数据的 I/O 操作飞快无比(因为直接操作内存嘛). 因为异步, Write Back 还可以"),a("strong",[t._v("合并对同一个数据的多次操作")]),t._v(", 所以性能的提高是相当可观的.")]),t._v(" "),a("p",[t._v("但其带来的问题是, "),a("strong",[t._v("数据不是强一致性的, 而且可能会丢失")]),t._v("(我们知道 Unix/Linux 非正常关机会导致数据丢失, 就是因为这个事). 在软件设计上, 我们基本上不可能做出一个没有缺陷的设计, 就像算法设计中的时间换空间, 空间换时间一个道理. "),a("strong",[t._v("有时候, 强一致性和高性能, 高可用和高性能是有冲突的. 软件设计从来都是 trade-off(取舍)")]),t._v(" .")]),t._v(" "),a("p",[t._v("另外, Write Back 实现逻辑比较复杂, 因为它需要 track 有哪些数据是被更新了的, 需要刷到持久层上. 操作系统的 Write Back 会在仅当这个 Cache 需要失效的时候, 才会把它真正持久起来. 比如, 内存不够了, 或是进程退出了等情况, 这又叫 lazy write.")]),t._v(" "),a("p",[t._v("在 Wikipedia 上有一张 Write Back 的流程图, 基本逻辑可以在下图中看到.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/1c6d8760647554162e756bc2e9d8aea9-20230731162102-l7n8qf0.png",alt:""}})]),t._v(" "),a("h5",{attrs:{id:"_4-缓存设计的重点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-缓存设计的重点"}},[t._v("#")]),t._v(" 4.缓存设计的重点")]),t._v(" "),a("p",[t._v("缓存更新的模式基本如前面所说, 不过这还没完, 缓存已经成为高并发高性能架构的一个关键组件了. 现在, 很多公司都在用 Redis 来搭建他们的缓存系统. 一方面是因为 Redis 的数据结构比较丰富. 另一方面, 我们不能在 Service 内放 Local Cache, 一是每台机器的内存不够大, 二是 Service 有多个实例, 负载均衡器会把请求随机分布到不同的实例. 缓存需要在所有的 Service 实例上都建好, 这让我们的 Service 有了状态, 更难管理了.")]),t._v(" "),a("p",[t._v("所以在分布式架构下, "),a("strong",[t._v("一般都需要一个外部的缓存集群")]),t._v(". 关于这个缓存集群, 需要保证的是内存要足够大, 网络带宽也要好, 因为"),a("strong",[t._v("缓存本质上是个内存和 IO 密集型的应用")]),t._v(".")]),t._v(" "),a("p",[t._v("另外, 如果需要内存很大, 那么还要动用数据分片技术来把不同的缓存分布到不同的机器上. 这样可以保证缓存集群可以不断地 scale 下去. 关于数据分片的事, 会在后面讲述.")]),t._v(" "),a("p",[a("strong",[t._v("缓存的好坏要看命中率")]),t._v(". 缓存的命中率高说明缓存有效, 一般来说命中率到 80% 以上就算很高了. 当然, 有的网络为了追求更高的性能, 要做到 95% 以上, 甚至可能会把数据库里的数据几乎全部装进缓存中. 这当然是不必要的, 也是没有效率的, 因为通常来说, 热点数据只会是少数.")]),t._v(" "),a("p",[a("strong",[t._v("另外, 缓存是通过牺牲强一致性来提高性能的, 这世上任何事情都不是免费的, 所以并不是所有的业务都适合用缓存, 这需要在设计的时候仔细调研好需求. 使用缓存提高性能, 就是会有数据更新的延迟.")])]),t._v(" "),a("p",[t._v("缓存数据的时间周期也需要好好设计, 太长太短都不好, 过期期限不宜太短, 因为可能导致应用程序不断从数据存储检索数据并将其添加到缓存. 同样, 过期期限不宜太长, 因为这会导致一些没人访问的数据还在内存中不过期, 而浪费内存.")]),t._v(" "),a("p",[t._v("使用缓存的时候, 一般会"),a("strong",[t._v("使用 LRU 策略")]),t._v(". 也就是说, 当内存不够需要有数据被清出内存时, 会找最不活跃的数据清除. 所谓最不活跃的意思是最长时间没有被访问过了. 所以开启 LRU 策略会让缓存在每个数据访问的时候把其调到前面, 而要淘汰数据时, 就从最后面开始淘汰.")]),t._v(" "),a("p",[t._v("于是, 对于 LRU 的缓存系统来说, 其需要在 key-value 这样的非顺序的数据结构中维护一个顺序的数据结构, 并在读缓存时, 需要改变被访问数据在顺序结构中的排位. 于是, 我们的 LRU 在读写时都需要加锁(除非是单线程无并发), 因此 LRU 可能会导致更慢的缓存存取的时间. 这点要小心.")]),t._v(" "),a("p",[t._v("最后, 我们的世界是复杂的, 很多网站都会被爬虫爬, 要小心这些爬虫. 因为这些爬虫可能会爬到一些很古老的数据, 而程序会把这些数据加入到缓存中去, 而导致缓存中那些真实的热点数据被挤出去(因为机器的速度足够快). 对此, 一般来说, 需要有一个爬虫保护机制, 或是引导这些人去使用提供的外部 API. 在那边, 可以有针对性地做多租户的缓存系统(也就是说, 把用户和第三方开发者的缓存系统分离开来).")]),t._v(" "),a("h5",{attrs:{id:"_5-小结-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-小结-9"}},[t._v("#")]),t._v(" 5.小结")]),t._v(" "),a("p",[t._v("总结一下今天分享的主要内容. 首先缓存是为了加速数据访问, 在数据库之上添加的一层机制. 然后讲了几种典型的缓存模式, 包括 Cache Aside, Read/Write Through 和 Write Behind Caching 以及它们各自的优缺点.")]),t._v(" "),a("p",[t._v("最后介绍了缓存设计的重点, 除了性能之外, 在分布式架构下和公网环境下, 对缓存集群, 一致性, LRU 的锁竞争, 爬虫等多方面都需要考虑.")]),t._v(" "),a("h4",{attrs:{id:"性能设计篇之-异步处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#性能设计篇之-异步处理"}},[t._v("#")]),t._v(' 性能设计篇之"异步处理"')]),t._v(" "),a("p",[t._v("在弹力设计篇中讲过, "),a("strong",[t._v("异步通讯的设计模式有助于提高系统的稳定性和容错能力")]),t._v(". 其实, 异步通讯在分布式系统中还可以增加整个系统的吞吐量, 从而可以面对更高的并发, 并可以从容地利用好现有的系统资源. 为什么这么说呢?")]),t._v(" "),a("p",[t._v("试想一下, 在你的工作中, 有很多人会来找你, 让你帮着做事. 如果你是这种请求响应式的工作方式, 那么本质上来说, 你是在被动工作, 也就是被别人驱动的工作方式. 当你在做一件事的时候, 如果有别人来找你做其它事, 你就会被打断而要去干别的事. 另外, 没办法把这些事统筹安排. 如果可以统筹安排, 本来五件事只需要 2 个小时, 如果不能, 你可能要做出 5 个小时来. 异步处理任务可以让你更好地利用好时间和资源. 利用好了时间和资源, 性能自然就会提升上来. 这就好像邮递业务一样, 你寄东西的时候, 邮递公司会把大量的去往同一个方向的订单合并处理, 并统一地调配物流交通工具, 从而在整体上更为节省资源和时间.")]),t._v(" "),a("p",[t._v("在分布式架构中, 系统被拆成了很多的子系统. 如果想把这堆系统合理地用好, 并更快地处理大量的任务, 就需要统一地规划和统筹整体, 这样可以达到整体的最优. 本质上, 这和邮递公司处理邮件一样, 是相同的道理.")]),t._v(" "),a("p",[t._v("在计算机的世界里, 到处都是"),a("strong",[t._v("异步处理")]),t._v(". 比如: 当程序读写文件时, 操作系统并不会真正同步地去操作硬盘, 而是把硬盘读写请求先在内存中 hold 上一小会儿(几十毫秒), 然后对这些读写请求做 merge 和 sort. 也就是说, merge 是把相同的操作合并, 相同的读操作只读一次, 相同的写操作, 只写最后一次, 而 sort 是把不同的操作排个序, 这样可以让硬盘向一个方向转一次就可以把所有的数据读出来, 而不是来来回回地转. 这样可以极大地提高硬盘的吞吐率.")]),t._v(" "),a("p",[t._v("再如, TCP 协议向网络发包的时候, 会把要发的数据先在缓冲区中进行囤积, "),a("strong",[t._v("当囤积到一定尺寸时(MTU)")]),t._v(" , 才向网络发送, 这样可以最大化利用网络带宽. 而传输速度和性能也会变得很快.")]),t._v(" "),a("p",[t._v("**这就是异步系统所带来的好处--让系统可以统一调度. **")]),t._v(" "),a("p",[t._v("另外, 举上面这两个例子是想告诉你, 我们可能会觉得异步通讯慢, 其实并不然, 我们同样也可以把异步做得比较实时.")]),t._v(" "),a("p",[t._v("多说一句, 就算是有延时, 异步处理在用户体验上也可以给用户带来一个不错的用户体验, 那就是用户可以有机会反悔之前的操作.")]),t._v(" "),a("h5",{attrs:{id:"_1-异步处理的设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-异步处理的设计"}},[t._v("#")]),t._v(" 1.异步处理的设计")]),t._v(" "),a("p",[t._v("之前在弹力设计中讲的是异步通讯, 这里想讲的是"),a("strong",[t._v("异步任务处理")]),t._v(". 当然这里面没有什么冲突的, 只不过是, 异步通讯讲的是怎么把系统连接起来, 而这里想讲的是怎么处理任务.")]),t._v(" "),a("p",[t._v('首先, 需要一个前台系统, 把用户发来的请求一一记录下来, 有点像请求日志. 这样, 操作在数据库或是存储上只会有追加的操作, 性能会很高. 收到请求后, 给客户端返回 "收到请求, 正在处理中".')]),t._v(" "),a("p",[t._v("然后, 有个任务处理系统来真正地处理收到的这些请求. 为了解耦, 需要一个任务派发器, 这里就会出来两个事, "),a("strong",[t._v("一个是推模型 Push, 一个是拉模型 Pull")]),t._v(".")]),t._v(" "),a("p",[t._v("所谓 Push 推模型, 就是把任务派发给相应的人去处理, 有点像是一个工头的调度者的角色. 而 Pull 拉模型, 则是由处理的人来拉取任务处理. 这两种模型各有各的好坏. 一般来说, Push 模型可以做调度, 但是它需要知道下游工作结点的情况.")]),t._v(" "),a("p",[t._v("除了要知道哪些是活着的, 还要知道它们的忙闲程度. 这样一来, 当下游工作结点扩容缩容或是有故障需要维护等一些情况发生时, Push 结点都需要知道, 这会增加一定的系统复杂度. 而 Pull 的好处则是可以让上游结点不用关心下游结点的状态, 只要自己忙得过来, 就会来拿任务处理, 这样可以减少一定的复杂度, 但是少了整体任务调度.")]),t._v(" "),a("p",[t._v("一般来说, 构建的都是"),a("strong",[t._v("推拉结合的系统")]),t._v(", Push 端会做一定的任务调度, 比如它可以像物流那样把相同商品的订单都合并起来, 打成一个包, 交给下游系统让其一次处理掉; 也可以把同一个用户的订单中的不同商品给拆成多个订单. 然后 Pull 端来订阅 Push 端发出来的异步消息, 处理相应的任务.")]),t._v(" "),a("h5",{attrs:{id:"_2-事件溯源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-事件溯源"}},[t._v("#")]),t._v(" 2.事件溯源")]),t._v(" "),a("p",[t._v("在这里, 需要提一下 "),a("strong",[t._v("Event Sourcing(事件溯源)")]),t._v(" 这个设计模式.")]),t._v(" "),a("p",[t._v("所谓 Event Sourcing, 其主要想解决的问题是, "),a("strong",[t._v("可以看到数据库中的一个数据的值(状态), 但完全不知道这个值是怎么得出来的")]),t._v(". 就像银行的存折一样, 可以在银行的存折看到收支的所有记录, 也能看得到每一笔记录后的余额.")]),t._v(" "),a("p",[t._v("当然, 如果有了所有的收支流水账的记录, 就完全不需要保存余额, 因为只需要回放一下所有的收支事件, 就可以得到最终的数据状态. 这样一来, 系统就会变得非常简单, 只需要追加不可修改的数据操作事件, 而不是保存最终状态. 除了可以提高性能和响应时间之外, 还可以提供"),a("strong",[t._v("事务数据一致性")]),t._v(", 并保留了可以启用补偿操作的完整记录和历史记录. 还有一个好处, 就是如果代码里有了 bug, 在记录状态的系统里, 我们修改 bug 后还需要做数据修正. 然而, 在 Event Sourcing 的系统里, 只需要把所有事件重新播放一遍就好了, "),a("strong",[t._v("因为整个系统没有状态了")]),t._v(".")]),t._v(" "),a("p",[t._v("事件不可变, 并且可使用只追加操作进行存储. 用户界面, 工作流或启动事件的进程可继续, 处理事件的任务可在后台异步运行. 此外, 处理事务期间不存在争用, 这两点可极大提高应用程序的性能和可伸缩性.")]),t._v(" "),a("p",[t._v("事件是描述已发生操作的简单对象以及描述事件代表的操作所需的相关数据. 事件不会直接更新数据存储, 只会对事件进行记录, 以便在合适的时间进行处理. 这可简化实施和管理.")]),t._v(" "),a("p",[t._v("事件溯源不需要直接更新数据存储中的对象, 因而有助于防止并发更新造成冲突.")]),t._v(" "),a("p",[t._v("最重要的是, 异步处理 + 事件溯源的方式, 可以很好地让整个系统进行任务的统筹安排, 批量处理, 可以让整体处理过程达到性能和资源的最大化利用.")]),t._v(" "),a("p",[t._v("关于 Event Sourcing 一般会和 CQRS 一起提. 另外可以去 GitHub 上看看"),a("a",{attrs:{href:"https://github.com/cer/event-sourcing-examples",target:"_blank",rel:"noopener noreferrer"}},[t._v("这个项目的示例"),a("OutboundLink")],1),t._v("以得到更多的信息.")]),t._v(" "),a("h5",{attrs:{id:"_3-异步处理的分布式事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-异步处理的分布式事务"}},[t._v("#")]),t._v(" 3.异步处理的分布式事务")]),t._v(" "),a("p",[t._v("在前面的《分布式系统的本质》一文中说过, 对于分布式事务, 在强一致性下, "),a("strong",[t._v("在业务层上只能做两阶段提交, 而在数据层面上需要使用 Raft/Paxos 的算法")]),t._v(". 但是, 我想说在现实生活中, 需要用到强一致性的场景实在不多, 不是所有的场景都必须要强一致性的事务的.")]),t._v(" "),a("p",[t._v("仔细想想现实生活当中的很多例子. 比如, 我们去餐馆吃饭, 先付钱, 然后拿个小票去领餐. 这种情况下, 把交钱和取货这两个动作分开, 可以让餐馆有更高的并发和接客能力. 如果要做成两阶段提交, 顾客锁定好钱, 餐馆锁定好食材, 最后一手交钱一手交餐, 那么这是一件非常恐怖的事.")]),t._v(" "),a("p",[t._v("是的, 你可以看到现实世界中有很多这样先付钱, 拿小票去领货的场景, 也有先消费, 然后拿一个账单去付钱的场景. 总之完全不需要两阶段提交这种方式. "),a("strong",[t._v("完全可以使用异步的方式来达到一致性, 当然是最终一致性")]),t._v(".")]),t._v(" "),a("p",[t._v("要达到最终一致性, 需要有个交易凭证. 也就是说, 如果一个事务需要做 A 和 B 两件事, 比如, 把我的钱转给我的朋友, 首先先做扣钱交易, 然后记录下扣钱的凭证, 拿这个凭证去给我朋友的账号上加钱.")]),t._v(" "),a("p",[t._v("在达成这个事务的过程中, 有几点需要注意.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("凭证需要非常好地保存起来")]),t._v(", 不然会导致事务做不下去.")]),t._v(" "),a("li",[a("strong",[t._v("凭证处理的幂等性问题")]),t._v(", 不然在重试时就会出现多次交易的情况.")]),t._v(" "),a("li",[t._v("如果事务完成不了, 需要做"),a("strong",[t._v("补偿事务处理")]),t._v(".")])]),t._v(" "),a("h5",{attrs:{id:"_4-异步处理的设计要点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-异步处理的设计要点"}},[t._v("#")]),t._v(" 4.异步处理的设计要点")]),t._v(" "),a("p",[t._v("异步处理中的"),a("strong",[t._v("事件驱动和事件溯源")]),t._v("是两个比较关键的技术.")]),t._v(" "),a("p",[t._v("异步处理可能会因为一些故障导致一些任务没有被处理, 比如消息丢失, 没有通知到, 或通知到了, 没有处理. 有这一系列的问题, 异步通知的方式需要任务处理方处理完成后, 给任务发起方回传状态, 这样确保不会有漏掉的.")]),t._v(" "),a("p",[t._v('另外, 发起方也需要有个定时任务, 把一些超时没有回传状态的任务再重新做一遍, 你可以认为这是异步系统中的 "对账" 功能. 当然, 如果要重做的话, 就需要处理方支持幂等性处理.')]),t._v(" "),a("p",[t._v("异步处理的整体业务事务问题, 也就是说, 异步处理在处理任务的时候, 并不知道能否处理成功, 于是就会一步一步地处理, 如果到最后一步不能成功, 那么就需要回滚. 这个时候, 需要走在弹力设计中说的补偿事务的流程.")]),t._v(" "),a("p",[a("strong",[t._v("并不是所有的业务都可以用异步的方式, 比如一些需要强一致性的业务, 使用异步的方式可能就不适合, 这里需要小心地分析业务")]),t._v(". 我相信绝大多数的业务场景都用不到强一致性, 包括银行业务. 另外, "),a("strong",[t._v("在需要性能的时候, 需要牺牲强一致性, 变为最终一致性")]),t._v(".")]),t._v(" "),a("p",[t._v("在运维时, 要监控任务队列里的任务积压情况. 如果有任务积压了, 要能做到快速地扩容. 如果不能扩容, 而且任务积压太多, 可能会导致整个系统挂掉, 那么就要开始对前端流量进行限流.")]),t._v(" "),a("p",[t._v("最后, 还想强调一下, "),a("strong",[t._v("异步处理系统的本质是把被动的任务处理变成主动的任务处理, 其本质是在对任务进行调度和统筹管理")]),t._v(".")]),t._v(" "),a("h5",{attrs:{id:"_5-小结-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-小结-10"}},[t._v("#")]),t._v(" 5.小结")]),t._v(" "),a("p",[t._v("总结一下今天分享的主要内容. 首先介绍了异步通讯, 它在弹力设计中的作用是提高系统的稳定性和容错能力, 而其实还可以在异步通讯的基础上统筹任务来提高系统的吞吐量. 接着讲了异步通讯的设计, 包括推拉结合的模型. 异步处理配合事件溯源一起使用, 将大大简化 bug 修复后的数据恢复, 也能用于实现存储的事务一致性.")]),t._v(" "),a("p",[t._v("我将餐馆吃饭作为比喻, 介绍了异步处理的事务一致性一般不是强一致性, 而是最终一致性, 这样才能取得高的吞吐量. 最后指出了异步处理的设计要点.")]),t._v(" "),a("h4",{attrs:{id:"性能设计篇之-数据库扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#性能设计篇之-数据库扩展"}},[t._v("#")]),t._v(' 性能设计篇之"数据库扩展"')]),t._v(" "),a("h5",{attrs:{id:"_1-读写分离cqrs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-读写分离cqrs"}},[t._v("#")]),t._v(" 1.读写分离CQRS")]),t._v(" "),a("p",[t._v("读写分离是数据库扩展最简单实用的玩法了, 这种方法针对"),a("strong",[t._v("读多写少")]),t._v("的业务场景还是很管用的, 而且还可以有效地把业务做相应的隔离.")]),t._v(" "),a("p",[t._v("如下图所示, 数据库只有一个写库, 有两个读库, 所有的服务都写一个数据库. 对于读操作来说, 服务 A 和服务 B 走从库 A, 服务 D 和服务 E 走从库 B, 服务 C 在从库 A 和从库 B 间做轮询.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/17a54ee31b715e96b5347135d3755e44-20230731162102-eld6j9j.png",alt:""}})]),t._v(" "),a("p",[t._v("这样的方法好处是:")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("比较容易实现")]),t._v(". 数据库的 master-slave 的配置和服务框架里的读写分离都比较成熟, 应用起来也很快.")]),t._v(" "),a("li",[t._v("可以很好地把各个"),a("strong",[t._v("业务隔离")]),t._v("开来. 不会因为一个业务把数据库拖死而导致所有的业务都死掉.")]),t._v(" "),a("li",[t._v("可以很好地"),a("strong",[t._v("分担数据库的读负载")]),t._v(", 毕竟读操作是最耗数据库 CPU 的操作.")])]),t._v(" "),a("p",[t._v("这样的方法不好的地方是:")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("写库有单点故障问题")]),t._v(". 如果是写库出了性能问题, 那么所有的业务一样不可用. 对于交易型的业务, 要得到高的写操作速度, 这样的方式不行.")]),t._v(" "),a("li",[a("strong",[t._v("数据库同步不实时, 需要强一致性的读写操作还是需要落在写库上.")])])]),t._v(" "),a("p",[t._v("综上所述, 一般来说, 这样的玩法主要是为了减少读操作的压力.")]),t._v(" "),a("p",[t._v("当然, 这样的读写分离看上去有点差强人意, 那么, 我们还是为之找一个更靠谱的设计--CQRS. 关于 CQRS, 在这里只做一个简单的介绍, 更多的细节你可以自行 Google.")]),t._v(" "),a("p",[t._v("CQRS 全称 Command and Query Responsibility Segregation, 也就是"),a("strong",[t._v("命令与查询职责分离")]),t._v(". 其原理是, 用户对于一个应用的操作可以分成两种, "),a("strong",[t._v("一种是 Command 也就是写操作(增, 删, 改), 另一种是 Query 操作(查), 也就是读操作")]),t._v(". Query 操作基本上是在做数据整合显现, 而 Command 操作这边会有更重的业务逻辑. 分离开这两种操作可以在语义上做好区分.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("命令 Command 不会返回结果数据, 只会返回执行状态, 但会改变数据.")])]),t._v(" "),a("li",[a("strong",[t._v("查询 Query 会返回结果数据, 但是不会改变数据, 对系统没有副作用.")])])]),t._v(" "),a("p",[t._v("这样一来, 可以带来一些好处.")]),t._v(" "),a("ul",[a("li",[t._v("分工明确, 可以负责不同的部分.")]),t._v(" "),a("li",[t._v("将业务上的命令和查询的职责分离, 能够提高系统的性能, 可扩展性和安全性. 并且在系统的演化中能够保持高度的灵活性, 能够防止出现 CRUD 模式中, 对查询或者修改中的某一方进行改动, 导致另一方出现问题的情况.")]),t._v(" "),a("li",[t._v("逻辑清晰, 能够看到系统中的哪些行为或者操作导致了系统的状态变化.")]),t._v(" "),a("li",[t._v("可以从数据驱动(Data-Driven)转到任务驱动(Task-Driven)以及事件驱动.")])]),t._v(" "),a("p",[t._v("如果把 Command 操作变成 Event Sourcing, 那么只需要记录不可修改的事件, 并通过回溯事件得到数据的状态. 于是可以把写操作给完全简化掉, 也变成"),a("strong",[t._v("无状态")]),t._v("的, 这样可以大幅度降低整个系统的副作用, 并可以得到更大的并发和性能.")]),t._v(" "),a("p",[t._v("文本中有 Event Sourcing 和 CQRS 的架构示意图.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/f54a0172a9e679f9f1143f9a451cd611-20230731162102-k2d7d3r.png",alt:""}})]),t._v(" "),a("p",[t._v("图片来源 - "),a("a",{attrs:{href:"https://www.slideshare.net/planetcassandra/codecentric-ag-cqrs-and-event-sourcing-applications-with-cassandra",target:"_blank",rel:"noopener noreferrer"}},[t._v("CQRS and Event Sourcing Application with Cassandra"),a("OutboundLink")],1)]),t._v(" "),a("h5",{attrs:{id:"_2-分库分表sharding"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-分库分表sharding"}},[t._v("#")]),t._v(" 2.分库分表Sharding")]),t._v(" "),a("p",[t._v("一般来说, 影响数据库最大的性能问题有两个, "),a("strong",[t._v("一个是对数据库的操作, 一个是数据库中数据的大小")]),t._v(".")]),t._v(" "),a("p",[t._v("对于前者, 需要从业务上来优化. 一方面, 简化业务, 不要在数据库上做太多的关联查询, 而对于一些更为复杂的用于做报表或是搜索的数据库操作, 应该把其移到更适合的地方. 比如, 用 ElasticSearch 来做查询, 用 Hadoop 或别的数据分析软件来做报表分析.")]),t._v(" "),a("p",[t._v("对于后者, 如果数据库里的数据越来越多, 那么也会影响数据操作. 而且, 对于分布式系统来说, 后端服务都可以做成分布式的, "),a("strong",[t._v("而数据库最好也是可以拆开成分布式的")]),t._v(". 读写分离也因为数据库里的数据太多而变慢, 于是, 分库分表就成了必须用的手段.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/a2dd3cefd23450394788c6077672b838-20230731162102-eenzd2d.png",alt:""}})]),t._v(" "),a("p",[t._v("上面的图片是一个分库的示例. 其中有两个事, 这里需要提一下, 一个是关于"),a("strong",[t._v("分库的策略")]),t._v(", 一个是关于数据访问层的中间件.")]),t._v(" "),a("p",[a("strong",[t._v("关于分库的策略")]),t._v(". 我们把数据库按某种规则分成了三个库. 比如, 或是按地理位置, 或是按日期, 或是按某个范围分, 或是按一种哈希散列算法. 总之把数据分到了三个库中.")]),t._v(" "),a("p",[a("strong",[t._v("关于数据访问层")]),t._v(". 为了不让前面的服务感知到数据库的变化, 需要引入一个"),a("strong",[t._v('叫 "数据访问层" 的中间件, 用来做数据路由')]),t._v(". 但老实说, 这个数据访问层的中间件很不好写, 其中要有解析 SQL 语句的能力, 还要根据解析好的 SQL 语句来做路由. 但即便是这样, 也有很多麻烦事. 比如, 要做一个分页功能, 需要读一组顺序的数据, 或是需要做 Max/Min/Count 这样的操作. 于是, 需要到三个库中分别求值, 然后在数据访问层这里再合计处理返回. 但即使是这样, 你也会遇到各种令人烦恼的事, 比如一个跨库的事务, 你需要走 XA 这样的两阶段提交的操作, 这样会把数据库的性能降到最低的.")]),t._v(" "),a("p",[t._v("为了避免数据访问层的麻烦, "),a("strong",[t._v("分片策略一般如下")]),t._v(".")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("按多租户的方式")]),t._v(". 用租户 ID 来分, 这样可以把租户隔离开来. 比如: 一个电商平台的商家中心可以按商家的 ID 来分.")]),t._v(" "),a("li",[a("strong",[t._v("按数据的种类来分")]),t._v(". 比如, 一个电商平台的商品库可以按类目来分, 或是商家按地域来分.")]),t._v(" "),a("li",[a("strong",[t._v("通过范围来分")]),t._v(". 这样分片, 可以保证在同一分片中的数据是连续的, 于是数据库操作, 比如分页查询会更高效一些. 一般来说, 大多数情况是用时间来分片的, 比如一个电商平台的订单中心是按月份来分表的, 这样可以快速检索和统计一段连续的数据.")]),t._v(" "),a("li",[a("strong",[t._v("通过哈希散列算法来分")]),t._v("(比如: 主键 id % 3 之类的算法.) 此策略的目的是降低形成热点的可能性(接收不成比例的负载的分片). 但是这会带来两个问题, 一个就是前面所说的跨库跨表的查询和事务问题, 另一个就是如果要扩容需要重新哈希部分或全部数据.")])]),t._v(" "),a("p",[t._v("上面是最常见的分片模式, 但是还应考虑应用程序的业务要求及其数据使用模式. 这里请注意几个非常关键的事宜.")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("数据库分片必须考虑业务")]),t._v(", 从业务的角度入手, 而不是从技术的角度入手, 如果你不清楚业务, 那么无法做出好的分片策略.")]),t._v(" "),a("li",[a("strong",[t._v("请只考虑业务分片")]),t._v(". 请不要走哈希散列的分片方式, 除非有个人拿着刀把你逼到墙角, 你马上就有生命危险, 你才能走哈希散列的分片方式.")])]),t._v(" "),a("h5",{attrs:{id:"_3-数据库扩展的设计重点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-数据库扩展的设计重点"}},[t._v("#")]),t._v(" 3.数据库扩展的设计重点")]),t._v(" "),a("p",[t._v("先说明一下, 这里没有讲真正数据库引擎的水平扩展的方法, 我们只是在业务层上谈了一下数据扩展的两种方法.")]),t._v(" "),a("p",[t._v("接下来说一下"),a("strong",[t._v("从业务层上把单体的数据库给拆解掉")]),t._v("的相关重点.")]),t._v(" "),a("p",[t._v("首先, 你需要把数据库和应用服务一同拆开. 也就是说, "),a("strong",[t._v("一个服务一个库")]),t._v(', 这就是微服务的玩法, 也是 Amazon 的服务化的玩法---服务之间只能通过服务接口通讯, 不能通过访问对方的数据库. 在 Amazon 内, 每个服务都会有一个自己的数据库, 比如地址库, 银行卡库等. 这样一来, 你的数据库就会被 "天生地" 给拆成服务化的, 而不是一个单体的库.')]),t._v(" "),a("p",[t._v("要知道, 在一个单体的库上做读写分离或是做分片都是一件治标不治本的事, 真正治本的方法就是要和服务一起拆解. "),a("strong",[t._v("当数据库也服务化后, 我们才会在这个小的服务数据库上进行读写分离或分片的方式来获得更多的性能和吞吐量. 这是整个设计模式的原则--先做服务化拆分, 再做分片")]),t._v(".")]),t._v(" "),a("p",[t._v("对于分片来说, 有两种分片模式, "),a("strong",[t._v("一种是水平分片, 一种是垂直分片")]),t._v(". 水平分片就是之前说的那种分片. 而垂直分片是把一张表中的一些字段放到一张表中, 另一些字段放到另一张表中. 垂直分片主要是把一些经常修改的数据和不经常修改的数据给分离开来, 这样在修改某个字段的数据时, 不会导致其它字段的数据被锁而影响性能. 比如, 对于电商系统来说, 商品的描述信息不常改, 但是商品的库存和价格经常改, 所以可以把描述信息和库存价格分成两张表, 这样可以让商品的描述信息的查询更快.")]),t._v(" "),a("p",[t._v("我们所说的 "),a("strong",[t._v("sharding 更多的是说水平分片")]),t._v(". 水平分片需要有以下一些注意事项.")]),t._v(" "),a("ul",[a("li",[t._v("随着数据库中数据的变化, 有可能需要定期重新平衡分片, 以保证均匀分布并降低形成热点的可能性. 但是, 重新平衡是一项昂贵的操作. 若要减少重新平衡的频率, 需要通过确保每个分片包含足够的可用空间来处理未来一段时间的变化. 另外, 还需要开发用于快速重新平衡分片的工具和脚本.")]),t._v(" "),a("li",[t._v("分片是静态的, 而数据的访问则是不可预期的, 可能需要经常性地调整分片, 这样一来成本太高. 所以最好"),a("strong",[t._v("使用一个索引表的方式来进行分片")]),t._v(". 也就是说, 把数据的索引动态地记录在一个索引表中. 这样一来, 就可以非常灵活地调度数据了. 当数据调度到另一台结点上时, 只需要去索引表里改一下这个数据的位置就好了.")]),t._v(" "),a("li",[t._v("如果程序必须要从多个分片检索数据的查询, 则可以使用并行任务从各个分片上提取此数据, 然后聚合到单个结果中. 但是, 此方法不可避免地会在一定程度上增加解决方案数据访问逻辑的复杂性.")]),t._v(" "),a("li",[t._v("数据分片后, 很难在分片之间保持引用完整性和一致性, 也就是所谓的"),a("strong",[t._v("跨分片的事务")]),t._v(", 因此应尽量减少会影响多个分片中的数据的操作. 如果应用程序必须跨分片修改数据, 那么需要评估一致性以及评估是否采用两阶段提交的方式.")]),t._v(" "),a("li",[t._v("配置和管理大量分片可能是一个挑战. 在做相应的变更时, 一定要先从生产线上拉出数据, 然后根据数据计划好新的分片方式, 并做好相当的测试工作. 否则这个事出了问题会是一个灾难性的问题.")])]),t._v(" "),a("h5",{attrs:{id:"_4-小结-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-小结-10"}},[t._v("#")]),t._v(" 4.小结")]),t._v(" "),a("p",[t._v("总结一下今天分享的主要内容. 首先介绍了单主库多从库的读写分离, 并进一步用 CQRS 把语义区分成命令和查询. 命令的执行可以变成事件溯源方式, 从而得到更大的并发和性能. 随后讲了分库分表的策略及其数据访问层所做的抽象. 最后指出了数据库扩展的设计重点.")]),t._v(" "),a("h4",{attrs:{id:"性能设计篇之-秒杀"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#性能设计篇之-秒杀"}},[t._v("#")]),t._v(' 性能设计篇之"秒杀"')]),t._v(" "),a("p",[t._v("一说起秒杀, 大家都觉得这事很有技术含量. 实际上, 并不是这个样子的, 秒杀这种互联网的交易方式其实并没有我们想象中的那么复杂. 下面先来简单地看一下, 秒杀是怎么做的.")]),t._v(" "),a("h5",{attrs:{id:"_1-秒杀的流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-秒杀的流程"}},[t._v("#")]),t._v(" 1.秒杀的流程")]),t._v(" "),a("p",[t._v('"秒杀" 其实是商家为了促销, 使用非常低的价格销售商品, 比如, 1 元卖 iPhone, 100 台, 于是来了一百万人抢购.')]),t._v(" "),a("p",[t._v("把技术挑战放在一边, 先从用户或是产品的角度来看一下, 秒杀的流程是什么样的.")]),t._v(" "),a("ul",[a("li",[t._v("首先, 你需要一个秒杀的 landing page, 在这个秒杀页上有一个倒计时的按钮.")]),t._v(" "),a("li",[t._v("一旦这个倒计时的时间到了, 按钮就被点亮, 让你可以点击按钮下单.")]),t._v(" "),a("li",[t._v("一般来说下单时需要你填写一个校验码, 以防止是机器来抢.")])]),t._v(" "),a("p",[t._v("从技术上来说, 这个倒计时按钮上的时间和按钮可以被点击的时间是"),a("strong",[t._v("需要后台服务器来校准")]),t._v("的, 这意味着:")]),t._v(" "),a("ul",[a("li",[t._v("前端页面要不断地向后端来请求, 开没开始, 开没开始...")]),t._v(" "),a("li",[t._v("每次询问的时候, 后端都会给前端一个时间, 以校准前端的时间.")]),t._v(" "),a("li",[t._v("一旦后端服务器表示 OK 可以开始, 后端服务会返回一个 URL.")]),t._v(" "),a("li",[t._v("这个 URL 会被安置在那个按钮上, 就可以点击了.")]),t._v(" "),a("li",[t._v("点击后, 如果抢到了库存, 就进入支付页面, 如果没有则返回秒杀已结束.")])]),t._v(" "),a("p",[t._v("这个不断轮询的过程, 就好像大家等着抢. 你想想, 有 100 万人来不停地询问有没有开始了这个事, 估计后端也扛不住.")]),t._v(" "),a("h5",{attrs:{id:"_2-秒杀的技术挑战"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-秒杀的技术挑战"}},[t._v("#")]),t._v(" 2.秒杀的技术挑战")]),t._v(" "),a("p",[t._v('接下来看一下 "秒杀" 的技术挑战.')]),t._v(" "),a("p",[t._v("面对上面要解决的技术问题, 挑战就是怎么应对这 100 万人同时下单请求? 100 万的同时并发会导致网站瞬间就崩溃了, 一方面是 100 万人同时请求, 网络带宽不够, 另一方面是理论上来说要扛 100 万的 TPS, 需要非常多的机器.")]),t._v(" "),a("p",[t._v("但是最恐怖的是, 所有的请求都会集中在"),a("strong",[t._v("同一条数据库记录")]),t._v("上, 无论是怎么分库分表, 还是使用了分布式数据库都无济于事, 因为你面对的是单条的热点数据.")]),t._v(" "),a("p",[t._v("这几乎是一件无法解决的技术问题.")]),t._v(" "),a("h5",{attrs:{id:"_3-秒杀的解决方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-秒杀的解决方案"}},[t._v("#")]),t._v(" 3.秒杀的解决方案")]),t._v(" "),a("p",[t._v("很明显, 要让 100 万用户能够在"),a("strong",[t._v("同一时间打开一个页面")]),t._v(", 这个时候, 就需要用到 CDN 了. 数据中心肯定是扛不住的, 所以要引入 CDN.")]),t._v(" "),a("p",[t._v("在 CDN 上, 这 100 万个用户就会被几十个甚至上百个 CDN 的边缘结点给分担了, 于是就能够扛得住. 然后还需要在这些 CDN 结点上做点小文章.")]),t._v(" "),a("p",[t._v("一方面, 需要把小服务部署到 CDN 结点上去, 这样当前端页面来问开没开始时, 这个小服务除了告诉前端开没开始外, 它还可以统计下有多少人在线. 每个小服务会把当前在线等待秒杀的人数每隔一段时间就回传给数据中心, 于是就知道全网总共在线的人数有多少.")]),t._v(" "),a("p",[t._v("假设, 我们知道有大约 100 万的人在线等着抢, 那么在快要开始的时候, 由数据中心向各个部署在 CDN 结点上的小服务上传递一个概率值, 比如说是 0.02%.")]),t._v(" "),a("p",[t._v("于是, 当秒杀开始的时候, 这 100 万用户都在点下单按钮, 首先他们请求到的是 CDN 上的这些服务, 这些小服务"),a("strong",[t._v("按照 0.02% 的量把用户放到后面的数据中心")]),t._v(", 也就是 1 万个人放过去两个, 剩下的 9998 个都直接返回秒杀已结束.")]),t._v(" "),a("p",[t._v("于是, "),a("strong",[t._v("100 万用户被放过了 0.02% 的用户")]),t._v(", 也就是 200 个左右, 而这 200 个人在数据中心抢那 100 个 iPhone, 也就是 200 TPS, 这个并发量怎么都应该能扛住了.")]),t._v(" "),a("p",[t._v('这就是整个 "秒杀" 的技术细节, 是不是有点不敢相信?')]),t._v(" "),a("p",[t._v("说到这里, 我相信你一定会问我 12306 和奥运会抢票的问题. 我觉得 2008 年奥运会抢票把服务器抢挂了是可以使用秒杀这个解决方案的. 而 12306 则不行, 因为他们完全不知道用户来是要买哪张火车票的. "),a("strong",[t._v("不知道这个信息, 很不好过滤用户, 而且用户在买票前需要有很多查询操作, 然后在查询中选择自己的车票")]),t._v(".")]),t._v(" "),a("p",[t._v("对此, 12306 最好的应对方式, 除了不要一次把所有的票放出来, 而是"),a("strong",[t._v("分批在不同的时间段把票放出来")]),t._v(", 这样可以让人们不要集中在一个时间点来抢票, 做到人肉分流, 可以降低一些并发度.")]),t._v(" "),a("p",[t._v("另外, 我一直觉得, 12306 最好是用"),a("strong",[t._v("预售的方式")]),t._v(", 让大家把自己的购票先输入到系统中. 系统并不真正放票, 而是把大家的需求都收集好, 然后做整体统筹安排, 该增加车次的增加车次, 该加车厢的加车厢, 这样可以确保大家都能走. 实在不行, 那就抽签了.")]),t._v(" "),a("h5",{attrs:{id:"_4-更多的思考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-更多的思考"}},[t._v("#")]),t._v(" 4.更多的思考")]),t._v(" "),a("p",[t._v("可以看到, "),a("strong",[t._v("解决秒杀这种特定业务场景, 可以使用 CDN 的边缘结点来扛流量, 然后过滤用户请求(限流用户请求), 来保护数据中心的系统, 这样才让整个秒杀得以顺利进行")]),t._v(".")]),t._v(" "),a("p",[t._v("那么, 如果像双 11 那样, 想尽可能多地卖出商品, 那么就不像秒杀了. 这是要尽可能多地收订单, 但又不能超过库存, 其中还有大量的银行支付, 各大仓库的库存查询和分配, 这些都是非常慢的操作. 为了保证一致性, 还要能够扛得住像双 11 这样的大规模并发访问, 那么, 应该怎么做呢?")]),t._v(" "),a("p",[t._v("使用秒杀这样的解决方案基本上不太科学了. 这个时候就需要认认真真地做高并发的架构和测试了, "),a("strong",[t._v("需要各个系统把自己的性能调整上去, 还要小心地做性能规划, 更要把分布式的弹力设计做好, 最后是要不停地做性能测试, 找到整个架构的系统瓶颈, 然后不断地做水平扩展, 以解决大规模的并发")]),t._v(".")]),t._v(" "),a("p",[t._v("但是, 从另一方面来说, 像用边缘结点来解决秒杀这样的场景的玩法, 是否也有一定的普适性? 这里我想说, 一定是有的.")]),t._v(" "),a("p",[t._v("有些时候, 我们总是在想数据中心的解决方案. 其实有时候也需要换一换思路, 也许"),a("mark",[a("strong",[t._v("在数据中心解决并不一定是最好的方式, 放在边缘来解决可能会更好一些")])]),t._v(". 尤其是针对一些有地域特征的业务, 比如像外卖, 共享单车, 打车这样的业务. 其实把一些简单的业务逻辑放在边缘, 比放在数据中心不但能够有更好的性能, 还有更便宜的成本.")]),t._v(" "),a("p",[t._v("我觉得, 随着请求量越来越大, 数据也越来越多, 数据中心是有点到瓶颈了, 而需要边缘结点来帮忙了. 而且, 这个边缘化解决方案的趋势也会越来越有优势.")]),t._v(" "),a("h5",{attrs:{id:"_5-小结-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-小结-11"}},[t._v("#")]),t._v(" 5.小结")]),t._v(" "),a("p",[t._v("总结一下今天分享的主要内容. 首先介绍了秒杀. 先是分析了其业务流程, 并列举了其所面临的技术挑战, 随后介绍了其解决方案. 接着分析了相关的奥运会和 12306 抢票问题, 以及双十一购物节问题.")]),t._v(" "),a("p",[t._v("它们各自有不同的解决思路, 其中双十一必须认认真真地用高并发架构来应对. 最后, 从秒杀解决方案中的 CDN 边缘节点计算, 我引出了普适的边缘节点计算.")]),t._v(" "),a("h4",{attrs:{id:"性能设计篇之-边缘计算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#性能设计篇之-边缘计算"}},[t._v("#")]),t._v(' 性能设计篇之"边缘计算"')]),t._v(" "),a("p",[t._v("前面通过一个秒杀的示例, 展示了如何在 CDN 结点上简单地部署小服务, 然后就可以完成在数据中心很难完成的事, 我想你应该能看到边缘结点的一些威力. 今天聊聊我所认识的边缘计算.")]),t._v(" "),a("p",[t._v("首先, 一说起边缘计算, 网上大多数文章都会说这是和 IoT 相关的一个技术. 其实, 我觉得这个说法只说对了边缘计算的一部分, 边缘计算可以做的事情还有很多很多.")]),t._v(" "),a("p",[a("strong",[t._v("所谓边缘计算, 它是相对于数据中心而言")]),t._v(". 数据中心喜欢把所有的服务放在一个机房里集中处理用户的数据和请求, 集中式部署一方面便于管理和运维, 另一方面也便于服务间的通讯有一个比较好的网络保障. 的确没错. 不过, 我们依然需要像 CDN 这样的边缘式的内容发布网络, 把静态内容推到离用户最近的地方, 然后获得更好的性能.")]),t._v(" "),a("p",[t._v("如果让 CDN 的这些边缘结点拥有可定制的计算能力, 那么就可以像秒杀那样, 可以在边缘结点上处理很多事情, 从而为数据中心带来更好的性能, 更好的扩展性, 还有更好的稳定性. 而用户也会觉得响应飞快, 从而有了更好的用户体验.")]),t._v(" "),a("p",[t._v("下面来看看为什么边缘计算会变成一个必然的产物. 这里有两个例子.")]),t._v(" "),a("h5",{attrs:{id:"_1-为什么要有边缘计算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-为什么要有边缘计算"}},[t._v("#")]),t._v(" 1.为什么要有边缘计算")]),t._v(" "),a("h6",{attrs:{id:"_1-从趋势上来说"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-从趋势上来说"}},[t._v("#")]),t._v(" (1)从趋势上来说")]),t._v(" "),a("p",[t._v("首先, 得看一下整个时代是怎么发展的. 我们处在信息化革命时代, 也有人叫数字化革命, 总之就是电脑时代. 这个时代, 把各式各样的信息都给数字化掉, 然后交给计算机来处理. 所以, 我们要清楚地知道, "),a("strong",[t._v("整个计算机发展的本质就是人类生活信息化建设的过程")]),t._v(".")]),t._v(" "),a("p",[t._v("这个过程中, 计算机硬件的发展也是非常迅猛的. CPU 的处理速度, 硬盘的大小和速度, 网络的带宽和速度都在拼命地升级和降价. 我们用越来越低的成本, 获得越来越快的速度, 越来越大的带宽, 越来越快的存储...")]),t._v(" "),a("p",[t._v("所有的这一切, 其实都是和信息还有数据有关. 信息和数据越来越多, 越来越大, 所以需要更好, 更快, 更便宜的硬件和基础设施. 这个演化过程就没有停止过, 而且我也不认为未来会停下来, 这个过程只会越来越快.")]),t._v(" "),a("p",[t._v("下面是我画的一个时代的变更图(不用太纠结其中的时间点, 我只是想表示信息演进的过程)")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/1b9f6a203b09e38414b390e89eb65a14-20230731162102-zcustit.png",alt:""}})]),t._v(" "),a("p",[t._v("从一开始, 我们处在 MB 时代, 那个时候, 电脑也是几百兆的硬盘就够了. 因为那个时候的信息量不够大, 只有内容服务提供商在提供内容, 他们主要以新闻资讯为主, 所以数据还不多.")]),t._v(" "),a("p",[t._v("然后, 开始进入 UGC 时代, 用户开始产生数据, 他们写博客, 发贴子, 拍照片, 拍视频...信息越来越多, 于是数据进入了 GB 时代, 于是计算机的硬件, 网络的基础设施都在升级.")]),t._v(" "),a("p",[t._v("再然后, 进入了大数据时代, 这个时代也是移动互联网的时代. 以前你要打开电脑才能上网, 现在你只要手机有电, 你就是在线的, 而且这个时代, 大量的线下服务走到线上, 比如外卖, 叫车...于是有各种各样的 App 在收集你的行为和数据. 这个时候, 是计算机在记录每个人的上网行为的时候, 所以数据量也不是一般的大.")]),t._v(" "),a("p",[t._v("然后, 这个趋势只会越来越大, 下一个时间, 数据和信息只会越来越大, 因为计算机正在吞噬可以被数字化的一切事情. 除了继续吞噬线上的业务, 一定会开始吞噬线下的信息和数据. 比如, 通过摄像头识别线下的各种活动, 如车牌; 通过一些传感器来收集线下的各种数据, 如农业, 水利...于是, 数据只会变得越来越大.")]),t._v(" "),a("p",[t._v("这个时候, 如果把这么大量的数据都拿到数据中心来做分析和计算, 一个数据中心顶得住吗? 我现在已经接到好几个用户和我说, 数据量太大了, 不知道怎么架构数据中心了, 各种慢, 各种贵, 各种痛苦...")]),t._v(" "),a("p",[t._v("而且, 还有另外一个需求就是要"),a("strong",[t._v("实时")]),t._v(", 对于大数据处理的实时需求越来越成为刚需了, 因为, 如果不能实时处理, 实时响应, 那么怎么能跟得上这个快速的时代呢. 这就好像一个人脸识别的功能. 如果苹果手机的人脸识别需要到服务器上算, 然后把结果返回, 那么用户的体验就很糟糕了. 这就是为什么苹果在手机里直接植入了神经网络的芯片.")]),t._v(" "),a("p",[t._v("**可以看到, 数量越来越大, 分析结果的速度需要越来越快, 这两个需求, 只会把我们逼到边缘计算上去. ** 如果还是在数据中心处理, 你会发现成本只会越来越高.")]),t._v(" "),a("h6",{attrs:{id:"_2-从成本上来说"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-从成本上来说"}},[t._v("#")]),t._v(" (2)从成本上来说")]),t._v(" "),a("p",[t._v("上面这个是第一个示例, 再来看看数据中心的成本, 当一个公司需要支持几十万用户的时候, 并没有什么感觉. 当他们要支撑上千万乃至上亿用户的时候, 就会发现, 一个几十万用户的系统架构和一个支撑上千万用户的架构, 在成本上来说, 完全不是一个数量级的. 就像文本中的图片所描述的那样(只是一个草图, 用于说明问题).")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/b965f6cf327128850b3a495c828a5169-20230731162102-1dzfgu0.png",alt:""}})]),t._v(" "),a("p",[t._v("在这个图中, 可以看到, 当需要处理的数据或是用户请求的规模越来越大时, 成本是呈现快速上升的曲线, 而不是一个线性上升的成本关系.")]),t._v(" "),a("p",[t._v("可以来算一下, 根据我过去服务过的 40 多家公司的经验, 可以看到如下的投入:")]),t._v(" "),a("ul",[a("li",[t._v("几十万用户的公司, 只需要处理百级 QPS 的量, 只需要 10 台左右的服务器;")]),t._v(" "),a("li",[t._v("上百万用户的公司, 只需要处理千级 QPS 的量, 需要有 50 台左右的服务器;")]),t._v(" "),a("li",[t._v("上千万用户的公司, 需要处理万级到十万级 QPS 的量, 需要 700 台左右的服务器;")]),t._v(" "),a("li",[t._v("上亿用户的公司, 其需要处理百万级 QPS 的量, 需要上万台的服务器.")])]),t._v(" "),a("p",[t._v("可以看到, 十万用户到上亿用户, 也就多了 100 倍, 为什么服务器需要 1000 倍? 完全不是呈线性的关系. 这是因为当架构变复杂了后, 就要做很多非功能的东西了, 比如, 缓存, 队列, 服务发现, 网关, 自动化运维, 监控等.")]),t._v(" "),a("p",[t._v("不妨开个脑洞. 如果能够把那上亿的用户拆成 100 个百万级的用户, 那么只需要 5000 多台机器(100 个 50 台服务器的数据中心). 还是同样服务了这么多的用户, 但成本下降得很快. 只不过需要运维 100 个小数据中心. 不过相信我, 运维 100 个 50 台服务器的小数据中心的难度应该远远低于运维一个 10000 台服务器的数据中心.")]),t._v(" "),a("p",[t._v("问题来了, 什么样的业务可以这么做? 我觉得有"),a("strong",[t._v("地域性的业务")]),t._v("是可以这么做的, 比如: 外卖, 叫车, 共享单车之类的.")]),t._v(" "),a("p",[t._v("然而, 100 个 50 台服务器的小数据中心也会带来一些复杂的问题, 因为当你的公司有 100 万用户的时候的业务形态和有 1 亿用户的业务形态是完全不一样的, 1 亿用户的业务形态可能会复杂得多得多. 也就是说, 不可能在一个小数据中心只有 50 台服务器, 因为那是百万用户的业务形态, 只有几十个服务. 当公司成长到上亿用户的规模时, 可能会有上百个服务, 50 台服务器是不够部署的.")]),t._v(" "),a("p",[t._v("所以上面那种多个数据中心的理想只存在于理论上, 而实际上不会发生.")]),t._v(" "),a("p",[t._v("但是, 我们依然可以沿着这条路思考下去. 不难发现, 我们完全"),a("strong",[t._v("可以用边缘结点处理高峰流量, 这样数据中心就不需要花那么大的成本来建设")]),t._v("了.")]),t._v(" "),a("p",[t._v("于是, 还是到了边缘计算.")]),t._v(" "),a("h5",{attrs:{id:"_2-边缘计算的业务场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-边缘计算的业务场景"}},[t._v("#")]),t._v(" 2.边缘计算的业务场景")]),t._v(" "),a("p",[t._v("通过上面的两个案例分析, 我觉得边缘计算一定会成为一个必然产物, "),a("strong",[t._v("其会作为以数据中心为主的云计算的一个非常好的补充")]),t._v(". 这个补充在我看来, 其主要是做下面一些事情.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("处理一些实时响应的业务")]),t._v(". 它和用户靠得很近, 所以可以实时响应用户的一些本地请求, 比如某公司的人脸门禁系统, 共享单车的开锁.")]),t._v(" "),a("li",[a("strong",[t._v("处理一些简单的业务逻辑")]),t._v(". 比如像秒杀, 抢红包这样的业务场景.")]),t._v(" "),a("li",[a("strong",[t._v("收集并结构化数据")]),t._v(". 比如, 把视频中的车牌信息抠出来, 转成文字, 传回数据中心.")]),t._v(" "),a("li",[a("strong",[t._v("实时设备监控")]),t._v(". 主要是线下设备的数据采集和监控.")]),t._v(" "),a("li",[a("strong",[t._v("P2P 的一些去中心化的应用")]),t._v(". 比如: 边缘结点作为一个服务发现的服务器, 可以让本地设备之间进行 P2P 通讯.")]),t._v(" "),a("li",[a("strong",[t._v("云资源调度")]),t._v(". 边缘结点非常适合用来做云端服务的调度. 比如, 允许用户使用不同生产商的云存储服务, 使用不同生产商但是功能相同的 API 服务(比如支付 API 相关). 因为是流量接入方, 所以可以调度流量.")]),t._v(" "),a("li",[a("strong",[t._v("云资源聚合")]),t._v(". 比如, 可以把语音转文字的 API 和语义识别的 API 相结合, 聚合出来一个识别语音语义的 API, 从而简化开发人员的开发成本.")]),t._v(" "),a("li",[t._v("...")])]),t._v(" "),a("p",[t._v("其实还有很多, 我觉得边缘计算带来的想象力还是很令人激动的.")]),t._v(" "),a("p",[t._v("关于现实当中的一些案例, 可以看看 "),a("a",{attrs:{href:"https://www.slideshare.net/MikeyCohen1/edge-architecture-ieee-international-conference-on-cloud-engineering-32240146",target:"_blank",rel:"noopener noreferrer"}},[t._v("Netflix 的全球边缘架构的 PPT"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("h5",{attrs:{id:"_3-边缘计算的关键技术"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-边缘计算的关键技术"}},[t._v("#")]),t._v(" 3.边缘计算的关键技术")]),t._v(" "),a("p",[t._v("在我看来, 边缘计算的关键技术如下.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("API Gateway")]),t._v(". 关于网关, 这个就不说了, 我们在管理设计篇中有一篇就是专门讨论这个东西的.")]),t._v(" "),a("li",[a("strong",[t._v("Serverless/FaaS")]),t._v(". 就是服务函数化, 这个技术就像是 AWS Lambda 服务一样, 你写好一个函数, 然后不用关心这个函数运行在哪里, 直接发布就好了. 然后就可以用了.")])]),t._v(" "),a("p",[t._v("Serverless 这个词第一次被使用大约是 2012 年由 Ken Form 所写的一篇名为《Why The Future of Software and Apps is Serverless》的文章. 这篇文章谈到的内容是关于持续集成及源代码控制等, 并不是今天所特指的这一种架构模式.")]),t._v(" "),a("p",[t._v('但 Amazon 在 2014 年发布的 AWS Lambda 让 "Serverless" 这一范式提高到一个全新的层面, 为云中运行的应用程序提供了一种全新的系统体系结构. 至此再也不需要在服务器上持续运行进程以等待 HTTP 请求或 API 调用, 而是可以通过某种事件机制触发代码的执行.')]),t._v(" "),a("p",[t._v('通常, 这只需要在 AWS 的某台服务器上配置一个简单的功能. 此后 Ant Stanley 在 2015 年 7 月的名为《Server are Dead...》的文章中更是围绕着 AWS Lambda 及刚刚发布的 AWS API Gateway 这两个服务解释了他心目中的 Serverless, "Server are dead…they just don’t know it yet".')]),t._v(" "),a("p",[t._v('如果说微服务是以专注于单一责任与功能的小型功能块为基础, 利用模块化的方式组合出复杂的大型应用程序, 那么还可以进一步认为 Serverless 架构可以提供一种更加 "代码碎片化" 的软件架构范式, 称之为 Function as a Services(FaaS). 所谓的"函数"(Function)提供的是相比微服务更加细小的程序单元.')]),t._v(" "),a("p",[t._v("目前比较流行的几个开源项目是:")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/serverless/serverless",target:"_blank",rel:"noopener noreferrer"}},[t._v("Serverless Framework"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/fission/fission",target:"_blank",rel:"noopener noreferrer"}},[t._v("Fission: Serverless Functions for Kubernetes"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/open-lambda/open-lambda",target:"_blank",rel:"noopener noreferrer"}},[t._v("Open Lambda"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/openfaas/faas",target:"_blank",rel:"noopener noreferrer"}},[t._v("Open FaaS"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/iron-io/functions",target:"_blank",rel:"noopener noreferrer"}},[t._v("IronFunction"),a("OutboundLink")],1)])]),t._v(" "),a("h5",{attrs:{id:"_4-小结-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-小结-11"}},[t._v("#")]),t._v(" 4.小结")]),t._v(" "),a("p",[t._v("总结一下今天分享的主要内容. 首先, 我描绘了边缘计算的初始模样. 接着讲了从计算的发展趋势上来看, 数据量的不断增大迫使边缘计算成为一个必然. 大数据中心的成本问题, 也需要通过边缘计算来降低. 然后列举了边缘计算的业务场景. 最后介绍了实现边缘计算所需的关键技术.")]),t._v(" "),a("p",[t._v("‍")]),t._v(" "),a("h3",{attrs:{id:"程序员练级攻略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#程序员练级攻略"}},[t._v("#")]),t._v(" 程序员练级攻略")]),t._v(" "),a("p",[t._v("下面是《程序员练级攻略》系列文章的目录.")]),t._v(" "),a("ul",[a("li",[a("p",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/8136",target:"_blank",rel:"noopener noreferrer"}},[t._v("开篇词"),a("OutboundLink")],1)])]),t._v(" "),a("li",[a("p",[t._v("入门篇")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/8216",target:"_blank",rel:"noopener noreferrer"}},[t._v("零基础启蒙"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/8217",target:"_blank",rel:"noopener noreferrer"}},[t._v("正式入门"),a("OutboundLink")],1)])])]),t._v(" "),a("li",[a("p",[t._v("修养篇")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/8700",target:"_blank",rel:"noopener noreferrer"}},[t._v("程序员修养"),a("OutboundLink")],1)])])]),t._v(" "),a("li",[a("p",[t._v("专业基础篇")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/8701",target:"_blank",rel:"noopener noreferrer"}},[t._v("编程语言"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/8887",target:"_blank",rel:"noopener noreferrer"}},[t._v("理论学科"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/8888",target:"_blank",rel:"noopener noreferrer"}},[t._v("系统知识"),a("OutboundLink")],1)])])]),t._v(" "),a("li",[a("p",[t._v("软件设计篇")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/9369",target:"_blank",rel:"noopener noreferrer"}},[t._v("软件设计"),a("OutboundLink")],1)])])]),t._v(" "),a("li",[a("p",[t._v("高手成长篇")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/9759",target:"_blank",rel:"noopener noreferrer"}},[t._v("Linux 系统, 内存和网络(系统底层知识)"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/9851",target:"_blank",rel:"noopener noreferrer"}},[t._v("异步 I/O 模型和 Lock-Free 编程(系统底层知识)"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/10216",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java 底层知识"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/10301",target:"_blank",rel:"noopener noreferrer"}},[t._v("数据库"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/10603",target:"_blank",rel:"noopener noreferrer"}},[t._v("分布式架构入门(分布式架构)"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/10604",target:"_blank",rel:"noopener noreferrer"}},[t._v("分布式架构经典图书和论文(分布式架构)"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/11232",target:"_blank",rel:"noopener noreferrer"}},[t._v("分布式架构工程设计 (分布式架构)"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/11116",target:"_blank",rel:"noopener noreferrer"}},[t._v("微服务"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/11665",target:"_blank",rel:"noopener noreferrer"}},[t._v("容器化和自动化运维"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/11669",target:"_blank",rel:"noopener noreferrer"}},[t._v("机器学习和人工智能"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/12271",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端基础和底层原理(前端方向)"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/12389",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端性能优化和框架(前端方向)"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/12486",target:"_blank",rel:"noopener noreferrer"}},[t._v("UI/UX 设计(前端方向)"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/12561",target:"_blank",rel:"noopener noreferrer"}},[t._v("技术资源集散地"),a("OutboundLink")],1)])])])]),t._v(" "),a("h4",{attrs:{id:"程序员练级攻略-开篇词"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#程序员练级攻略-开篇词"}},[t._v("#")]),t._v(" 程序员练级攻略:开篇词")]),t._v(" "),a("p",[t._v("2011 年, 我在 "),a("a",{attrs:{href:"https://coolshell.cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("CoolShell"),a("OutboundLink")],1),t._v(" 上发表了《"),a("a",{attrs:{href:"https://coolshell.cn/articles/4990.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("程序员技术练级攻略"),a("OutboundLink")],1),t._v("》一文, 收到了很多读读者的追捧, 同时这几年时间里, 我还陆续收到了一些人的反馈, 说跟着这篇文章找到了不错的工作, 他们希望我把这篇文章更新一下, 因为毕竟行业的变化很快. 老实说, 抛开这几年技术的更新迭代不说, 那篇文章写得也不算特别系统, 同时标准也有点低, 当时是给一个想要入门的朋友写的. 所以非常有必要从头更新一下《程序员练级攻略》这一主题.")]),t._v(" "),a("h5",{attrs:{id:"_1-前言导读"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-前言导读"}},[t._v("#")]),t._v(" 1.前言导读")]),t._v(" "),a("p",[t._v("升级版的《程序员练级攻略》会比 Coolshell 上的内容更多, 也更专业. 这篇文章有【入门篇】, 【修养篇】, 【专业基础篇】, 【软件设计篇】, 【高手成长篇】五大篇章. 它们会帮助你从零开始, 一步步地, 系统地, 完成从陌生到熟悉, 到理解掌握, 从编码到设计再到架构, 从码农到程序员再到工程师再到架构师的进阶, 实现从普通到精通到卓越的完美转身...")]),t._v(" "),a("p",[t._v("在"),a("strong",[t._v("入门篇")]),t._v("中, 先推荐的是把 Python 和 JavaScript 作为入门语言, 并给出了相应的学习资源和方法. Python 语法比较简单, 有大量的库和语法糖, 是零基础的人学习编程的不二之选. 而 JavaScript 是前端语言, 更容易让你获得编程的成就感.")]),t._v(" "),a("p",[t._v("随后需要学习使用操作系统 Linux, 编程工具 Visual Studio Code 等入门必学内容. Web 互联网作为第三次工业革命信息化浪潮中最大的发明, 也是每个程序员都不能错过的. 而学习编程还是要多多动手, 因此我给出了 Web 编程入门的学习要点, 并给出了一个实践项目, 帮助你理解和巩固所学的内容.")]),t._v(" "),a("p",[t._v("如果你跟着我的这个教程走过来, 并能自己去解决遇到的问题, 那么, 我相信你能够做一点东西了, 而且你还可能会对编程非常感兴趣了. 但是你千万不要以为自己已经入门了. 我只是用这些内容给你一些成就感, 并激发你持续学习的兴趣.")]),t._v(" "),a("p",[t._v("正式入门, 我推荐的语言是 Java, 因为我认为, 它是所有语言里综合实力最强的. 随后推荐了更为专业实用的编程工具, 如编程的 IDE, 版本管理工具 Git, 调试前端程序和数据库设计工具等, 并且给出了一个实践项目. 我同时设置了业务和技术两方面的需求, 跟着做一遍, 相信你对学习编程会有更多的理解和感悟.")]),t._v(" "),a("p",[t._v("接下来, 我要带你进入更为专业更为复杂的编程世界中. 进入之前, 需要树立正确的三观和心态, 这对于程序员来说至关重要. 这就好像民工建筑队和专业的工程队的区别, 就好像小作坊和工厂的差别, 他们并不仅仅是差别在技能和技术上, 更是差别在做事的心态和三观上.")]),t._v(" "),a("p",[t._v("因此, 在学习专业的软件开发知识之前, 来谈谈"),a("strong",[t._v("程序员修养")]),t._v(". 它看似与程序员练级关系不大, 实际上却能反映出程序员的工程师特质和价值观, 决定了这条路你到底能走多远, 是精髓所在. **有修养的程序员才可能成长为真正的工程师和架构师, 而没有修养的程序员只能沦为码农, 这是码农和工程师的关键区分点. **")]),t._v(" "),a("p",[t._v('在"修养篇", 我给出了一些相关的学习资料, 并指出了我认为比较重要的几个方面: '),a("strong",[t._v("英文能力, 提问的能力, 写代码的修养, 安全防范意识, 软件工程和上线规范, 编程规范")]),t._v("等. 这些能力的训练和培养将为后续的学习和发展夯实基础.")]),t._v(" "),a("p",[t._v("此时, 相信你已经迫不及待地想进入"),a("strong",[t._v("专业基础篇")]),t._v("了. 这部分内容主要涵盖编程语言, 理论学科和系统知识三方面知识. 在编程语言方面, 推荐学习 C, C++ 和 Java 这三个工业级的编程语言. 理论学科方面, 需要学习算法, 数据结构, 网络模型, 计算机原理等内容. 系统知识方面会讲述 Unix/Linux, TCP/IP, C10K 挑战等专业的系统知识. 最后给出了你可以选择的几大从业方向.")]),t._v(" "),a("ul",[a("li",[t._v("如果你对操作系统, 文件系统, 数据库, 网络等比较感兴趣, 那么可以考虑从事底层方面的工作.")]),t._v(" "),a("li",[t._v("如果对分布式系统架构, 微服务, DevOps, Cloud Native 等有热情, 那么可以从事架构方面的工作.")]),t._v(" "),a("li",[t._v("如果是对大数据, 机器学习, 人工智能等比较关注, 那么数据领域可以成为你一展身手的地方.")]),t._v(" "),a("li",[t._v("如果你对用户体验或者交互等更感兴趣, 那么前端工程师也是个不错的选择.")]),t._v(" "),a("li",[t._v("此外, 安全开发, 运维开发, 嵌入式开发等几大方向中, 也为你提供了丰富多彩的发展空间.")])]),t._v(" "),a("p",[t._v("以我之见, 该如何选择应该完全遵从于你的本心, 你更愿意在哪个领域里持续奋斗和学习. 这个答案, 在你的手中, 在你的心中. **这里我只想和你说两个观点: **​"),a("mark",[a("strong",[t._v("各种技术方向不是鱼和熊掌, 是可以兼得的; 很多技术是相通的, 关键是你是学在表面还是深入本质")])]),t._v("​ **. **")]),t._v(" "),a("p",[a("strong",[t._v("软件设计")]),t._v('能力是每个程序员都需要具备的基本素质. 我结合各主流语言讲述了泛型编程, 函数式编程, 面向对象编程等多种编程范式, 分享了 DRY-避免重复原则, KISS-简单原则, 迪米特法则(又称"最少知识原则"), 面向对象的 S.O.L.I.D 原则等等多个经典的软件设计原则. 同时给出了软件设计领域的一些重要的学习资料. **软件设计是工程师非常重要的能力, 这里描述了软件工程自发展以来的各种设计方法, 这是从工程师通往架构师的必备技能. **')]),t._v(" "),a("p",[t._v("登峰造极, 是每个武林高手都渴望达到的境界, 对于每个有理想有追求的程序员也是如此. 因此, 我特意在《程序员练级攻略(2018)》这一系列内容的最后设置了"),a("strong",[t._v("高手成长篇")]),t._v(".")]),t._v(" "),a("p",[t._v("相较前面的内容, 这部分内容相当全面和丰富, 涵盖系统, 数据库, 分布式架构, 微服务, 容器化和自动化运维, 机器学习, 前端方向和技术论文等几方面内容, 而且深度一下子拔高了好几个数量级.")]),t._v(" "),a("p",[t._v("同时, 这也是我留给你的再一次做选择的机会, 平凡还是卓越? 自在悠闲, 还是猛啃书本, 不破楼兰终不还? 还是遵循你内心的选择吧. 偷偷地告诉你, 我选择的是后者.")]),t._v(" "),a("p",[t._v("通过这一系列文章, 我主要想回答以下几个问题.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("理论和现实的差距")]),t._v(". 你是否觉得自己从学校毕业的时候只做过小玩具一样的程序? 走入职场后哪怕没有什么经验也可以把文中提到的这些课外练习走一遍. 学校课程总是从理论出发, 作业项目都看不出有什么实际作用, 到了工作上发现自己什么也不会干.")]),t._v(" "),a("li",[a("strong",[t._v("技术能力的瓶颈")]),t._v(". 你又是否觉得, 在工作当中需要的技术只不过是不断地堆业务功能, 完全没有什么技术含量. 而你工作一段时间后, 自己都感觉得非常地迷茫和彷徨, 感觉到达了提高的瓶颈, 完全不知道怎么提升了.")]),t._v(" "),a("li",[a("strong",[t._v("技术太多学不过来")]),t._v(". 你是否又觉得, 要学的技术多得都不行了, 完全不知道怎么学? 感觉完全跟不上. 有没有什么速成的方法?")])]),t._v(" "),a("p",[t._v("对此, 我有如下的一些解释, 以端正一下你的态度.")]),t._v(" "),a("ul",[a("li",[t._v("并不是理论和现实的差距大, 而是你还没有找到相关的场景, 来感受到那些学院派知识的强大威力. 算法与数据结构, 操作系统原理, 编译原理, 数据库原理, 计算机原理...这些原理上的东西, 是你想要成为一个专家必须要学的东西. "),a("strong",[t._v('这就是"工人"和"工程师"的差别, 是"建筑工人"和"建筑架构师"的差别')]),t._v(". 如果你觉得这些理论上的东西无用, 那么只能说明, 你只不过在从事工人的工作, 而不是工程师的工作.")]),t._v(" "),a("li",[a("strong",[t._v("技术能力的瓶颈, 以及技术太多学不过来, 只不过是你为自己的能力不足或是懒惰找的借口罢了")]),t._v(". 技术的东西都是死的, 这些死的知识只要努力就是可以学会的. 只不过聪明的人花得时间少, 笨点的人花得时间多点罢了. 这其中的时间差距主要是由学习方法的不同, 基础知识储备的不同决定的. 只要你方法得当, "),a("strong",[t._v("多花点时间在基础知识")]),t._v("上, 会让你未来学习应用知识的时间大大缩短. "),a("strong",[t._v("以绝大多数人努力的程度, 和为自己不努力找借口的程度为参考, 只要你坚持正常的学习就可以超过大多数人了")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("这里没有学习技术的速成的方法, 真正的牛人不是能够培训出来的, 一切都是要靠你自己去努力和持续地付出")]),t._v(". 如果你觉得自己不是一个能坚持的人, 也不是一个想努力的人, 而是一个想找捷径的人, 那么这篇文章并不适合你. **这篇文章中的成长路径是需要思考, 精力和相关的经验的, 这都需要时间, 而且是不短的时间. 你先问问自己有没有花十年磨一剑的决心, 如果没有, 那这篇文章对你没有任何作用. **")])]),t._v(" "),a("p",[t._v("这里有一篇传世之文《"),a("a",{attrs:{href:"http://norvig.com/21-days.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Teach Yourself Programming in Ten Years"),a("OutboundLink")],1),t._v("》("),a("a",{attrs:{href:"https://liuyandong.com/2017/10/25/122/",target:"_blank",rel:"noopener noreferrer"}},[t._v("中英对照版"),a("OutboundLink")],1),t._v("). 还有在我 Cooslhell 上的这篇《"),a("a",{attrs:{href:"https://coolshell.cn/articles/4235.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("程序员的荒谬之言还是至理名言? "),a("OutboundLink")],1),t._v("》.")]),t._v(" "),a("p",[t._v("我希望你在学习编程之前先读一读这两篇文章. 如果你觉得可以坚持的话, 那么这一系列文章会对你很有帮助. 否则, 我相信你只要大致浏览一下目录及其中的某些章节, 就会选择放弃走这条路的. 是的, 这个系列的文内容也会让一些想入行但又不愿意付出努力的同学早点放弃.")]),t._v(" "),a("p",[t._v("最后给几点"),a("strong",[t._v("学习建议")]),t._v(".")]),t._v(" "),a("ul",[a("li",[t._v("一定要坚持, 要保持长时间学习, 甚至终生学习的态度.")]),t._v(" "),a("li",[t._v("一定要动手, 不管例子多么简单, 建议至少自己动手敲一遍看看是否理解了里头的细枝末节.")]),t._v(" "),a("li",[t._v("一定要学会思考, 思考为什么要这样, 而不是那样. 还要举一反三地思考.")]),t._v(" "),a("li",[t._v("不要乱买书, 不要乱追新技术新名词, 基础的东西经过很长时间积累, 会在未来至少 10 年通用.")]),t._v(" "),a("li",[t._v("回顾一下历史, 看看历史时间线上技术的发展, 你才能明白明天会是什么样的.")])]),t._v(" "),a("p",[t._v('另外, 这篇文章的标准会非常高. 希望不会把你吓坏了. 《易经》有云: "'),a("strong",[t._v("取法其上, 得乎其中, 取法其中, 得乎其下, 取法其下, 法不得也")]),t._v('". 所以, 我这里会给你立个比较高标准, 你要努力达到. 相信我, 就算是达不到, 也会比你一开始期望的要高很多...')]),t._v(" "),a("h4",{attrs:{id:"程序员练级攻略-零基础启蒙"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#程序员练级攻略-零基础启蒙"}},[t._v("#")]),t._v(" 程序员练级攻略:零基础启蒙")]),t._v(" "),a("p",[t._v("如果你从来没有接触过程序语言, 这里给你两个方面的教程, 一个偏后端, 一个偏前端. 对从零基础开始的人来说, 最重要的是能够对编程有兴趣, 而要对编程有兴趣, 就要有成就感. 而成就感又来自于用程序打造东西, 所以, 我推荐下面这份不错的入门教程.")]),t._v(" "),a("p",[t._v("第一份入门教程, 主要是让你体会到编程是什么.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://book.douban.com/subject/5338024/",target:"_blank",rel:"noopener noreferrer"}},[t._v("《与孩子一起学编程》"),a("OutboundLink")],1),t._v(", 这本书以 Python 语言教你如何写程序, 是一本老少咸宜的编程书. 其中会教你编一些小游戏, 还会和你讲基本的编程知识, 相当不错.")]),t._v(" "),a("li",[t._v("两个在线编程入门的网站: "),a("a",{attrs:{href:"https://www.codecademy.com/learn",target:"_blank",rel:"noopener noreferrer"}},[t._v("Codecademy: Learn Python"),a("OutboundLink")],1),t._v(" 和 "),a("a",{attrs:{href:"https://www.peoplecanprogram.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("People Can Program"),a("OutboundLink")],1),t._v(" , 你也可以在这两个网站上学习 Python, 只不过是英文的.")])]),t._v(" "),a("p",[t._v("然后, 你可以到 "),a("a",{attrs:{href:"http://www.codeabbey.com/index/task_list",target:"_blank",rel:"noopener noreferrer"}},[t._v("CodeAbbey"),a("OutboundLink")],1),t._v(" 上去做一些在线编程的小练习.")]),t._v(" "),a("p",[t._v("第二份入门教程, 主要是让你做点实际有用的东西. 嗯, 做个网页吧.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Learn/Getting_started_with_the_web",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN 的 Web 开发入门"),a("OutboundLink")],1),t._v(", MDN 全称是 Mozilla Developer Network, 你可以认为是 Web 方面的官方技术网站. 这个教程会带着你建立一个网站. 然后, 你可以把你的网页发布在 GitHub 上.")])]),t._v(" "),a("p",[t._v("这两份教程都很不错, 都是从零开始, 带着你从环境准备开始, 一点一点地从一些简单又有意思的东西入手, 让你感觉一下编程世界是什么样的, 相信这两个教程可以让零基础的你喜欢上编程.")]),t._v(" "),a("h5",{attrs:{id:"_1-编程入门"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-编程入门"}},[t._v("#")]),t._v(" 1.编程入门")]),t._v(" "),a("p",[t._v("在这时, 我们使用 Python 和 JavaScript 作为入门语言. Python 就不用多说了, 语法比较简单, 有大量的库和语法糖, 是零基础的人学习编程的不二之选. 而 JavaScript 则是前端的语言, 为了让你更有编程的成就感, 所以, 这也成了一门要学习的语言.")]),t._v(" "),a("h6",{attrs:{id:"_1-入门语言python"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-入门语言python"}},[t._v("#")]),t._v(" (1)入门语言Python")]),t._v(" "),a("p",[t._v("如果你想更为系统地学习一下 Python 编程, 我强烈推荐你阅读下面这两本书. 它们是零基础入门非常不错的图书, 里面有大量的更为实用的示例和项目, 可以快速给你正反馈.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://book.douban.com/subject/26836700/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Python 编程快速上手"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://book.douban.com/subject/26829016/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Python 编程: 从入门到实践"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("这两本书除了编程语法方面的讲述有所不同之外, 其他都差不多, 主要是通过书中的示例来强化你对编程的学习. 第一本偏文本处理, 包括处理 Word, Excel 和 PDF, 第二本中有一些 Web 项目和代码部署方面的内容. 如果可能的话, 你可以把两本书中的示例都跑一遍. 如果你时间有限的话, 我推荐你看第二本.")]),t._v(" "),a("h6",{attrs:{id:"_2-入门语言javascript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-入门语言javascript"}},[t._v("#")]),t._v(" (2)入门语言JavaScript")]),t._v(" "),a("p",[t._v("如果想入门学习 JavaScript, 主要推荐以下在线教程.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN JavaScript 教程"),a("OutboundLink")],1),t._v(", 你可以认为这是最权威的 JavaScript 官方教程了, 从初级到中级再到高级.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.w3school.com.cn/js/",target:"_blank",rel:"noopener noreferrer"}},[t._v("W3School JavaScript 教程"),a("OutboundLink")],1),t._v(", 这个教程比较偏 Web 方面的编程.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript 全栈教程(廖雪峰)"),a("OutboundLink")],1),t._v(", 这是廖雪峰的一个比较偏应用的教程, 也是偏 Web 方面的编程, 同时包括涉及后端的 Node.js 方面的教程.")])]),t._v(" "),a("h6",{attrs:{id:"_3-操作系统入门linux"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-操作系统入门linux"}},[t._v("#")]),t._v(" (3)操作系统入门Linux")]),t._v(" "),a("p",[t._v("学习编程你还需要会玩 Linux, 虽然 Windows 占据着更多的桌面市场, 但是你还是要了解 Linux. 这里可以看一下, W3CSchool 上的在线教程 "),a("a",{attrs:{href:"https://www.w3cschool.cn/linux/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Linux 教程"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("h6",{attrs:{id:"_4-编程工具visual-studio-code"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-编程工具visual-studio-code"}},[t._v("#")]),t._v(" (4)编程工具Visual Studio Code")]),t._v(" "),a("p",[t._v("这里主要推荐时下最流行也是最好用的 Visual Studio Code, 这个工具潜力十足, 用它开发 Python, JavaScript, Java, Go, C/C++ 都能得心应手.")]),t._v(" "),a("h6",{attrs:{id:"_5-web编程入门"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-web编程入门"}},[t._v("#")]),t._v(" (5)Web编程入门")]),t._v(" "),a("p",[t._v("如果玩到这里, 你觉得有趣的话, 可以学习一下 Web 方面的入门知识. "),a("strong",[t._v("为什么是 Web 而不是别的其他技术呢? 因为你正身处于第三次工业革命的信息化浪潮中, 在这个浪潮中, Web 互联网是其中最大的发明, 所以这是任何一个程序员都不能错过的")]),t._v(".")]),t._v(" "),a("p",[t._v("关于 Web 编程, 有下面几个方向你要学习一下.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("前端基础")]),t._v(". 要系统地学习一下前端的知识, 也就是 CSS, HTML 和 JavaScript 这三个东西. 这里还是给出 MDN 的相关的技术文档页面 "),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS",target:"_blank",rel:"noopener noreferrer"}},[t._v("CSS 文档"),a("OutboundLink")],1),t._v(" 和 "),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTML",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTML 文档"),a("OutboundLink")],1),t._v(" . **文档很大, 你要学习的并不是所有的东西, 而是了解 CSS 和 HTML 是怎么相互作用来展示数据的, 然后, 不用记忆文档中的内容, 这两个文档是用来查找知识的. **  另外, 你可以简单地学习使用 JavaScript 操纵 HTML. 理解 DOM 和动态网页(可以参看 "),a("a",{attrs:{href:"https://www.w3schools.com/js/js_htmldom.asp",target:"_blank",rel:"noopener noreferrer"}},[t._v("W3Schools 的 JavaScript HTML DOM 的教程"),a("OutboundLink")],1),t._v(").")]),t._v(" "),a("li",[a("strong",[t._v("后端基础")]),t._v(". 如果你想省点事, 不想再学一门新的语言了, 那么你可以直接用 Python 或者 Node.js, 这两个技术在前面提到的廖雪峰的那个教程里提到过. 当然, 如果你想试试另外一种脚本型的也是比较主流的编程语言, 那么可以搞搞 PHP, 它也是很快就可以上手的语言. 学习 PHP 语言, 你可以先跟着 "),a("a",{attrs:{href:"http://www.w3school.com.cn/php/index.asp",target:"_blank",rel:"noopener noreferrer"}},[t._v("W3School 的 PHP 教程"),a("OutboundLink")],1),t._v(" 玩玩(其中有连接数据库的 MySQL 的教程). 然后, 以 "),a("a",{attrs:{href:"http://php.net/manual/zh/",target:"_blank",rel:"noopener noreferrer"}},[t._v("PHP 的官网文档"),a("OutboundLink")],1),t._v(" 作为更全的文档来学习或查找相关的技术细节.")])]),t._v(" "),a("p",[t._v("下面是一些学习要点:")]),t._v(" "),a("ul",[a("li",[t._v("学习 HTML 基本语法.")]),t._v(" "),a("li",[t._v("学习 CSS 如何选中 HTML 元素并应用一些基本样式.")]),t._v(" "),a("li",[t._v("学会用 Firefox + Firebug 或 Chrome 查看你觉得很炫的网页结构, 并动态修改.")]),t._v(" "),a("li",[t._v("在一台 Linux 机器上配置 LEMP - Ubuntu/Nginx/PHP/MySQL 这个环境.")]),t._v(" "),a("li",[t._v("学习 PHP, 让后台 PHP 和前台 HTML 进行数据交互, 对服务器相应浏览器请求形成初步认识. 实现一个表单提交和反显的功能.")]),t._v(" "),a("li",[t._v("把 PHP 连接本地或者远程数据库 MySQL(MySQL 和 SQL 现学现用够了).")])]),t._v(" "),a("p",[t._v("这里, 你可能会问我, 入门时有三个后端语言, 一个是 Python, 一个是 Node.js, 一个是 PHP, 你对这三门语言怎么看? 老实说, Python 我还看好一些, PHP 次之, Node.js 最后. 原因是:")]),t._v(" "),a("ul",[a("li",[t._v("Python 语言的应用面还是很广的. (当然, 性能可能会有一些问题, 但是用于一些性能不敏感的和运维或是一些小工具相关的, 还是非常好用的. 另外, Python 的应用场景其实还是很多的, 包括机器学习和 AI 也有 Python 的身影. 用 Python 来做一些爬虫, 简单的中间件, 应用或是业务服务也是很不错的. )")]),t._v(" "),a("li",[t._v("PHP 也是一个比较主流的简单的语言.")]),t._v(" "),a("li",[t._v("Node.js 号称 JavaScript 的后端版, 但从目前发展来说, 在后端的世界里, 并不能承担大任, 而且问题很多. 一些前端程序员用它来做后端的粘合层, 我个人觉得这样做法只是掩盖前后端配合有问题, 或是接口设计思维上的懒惰, 我还是希望前端程序员应该认真学习一门真正的后端语言.")])]),t._v(" "),a("p",[t._v("当然, 这里只是让你感觉一下, "),a("strong",[t._v("Web 前端编程的感觉, 只是为了入门而已. 所以对于这些语言你也不用学得特别精通, 感觉一下这几个不同的语言就可以了, 然后知道相关的文档和知识在哪里, 这样有助于你查阅相应的知识点")]),t._v(".")]),t._v(" "),a("h5",{attrs:{id:"_2-实践项目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-实践项目"}},[t._v("#")]),t._v(" 2.实践项目")]),t._v(" "),a("p",[t._v("无论你用 Python, 还是 Node.js, 还是 PHP, 我希望你能做一个非常简单的 Blog 系统, 或是 BBS 系统, 需要支持如下功能:")]),t._v(" "),a("ul",[a("li",[t._v("用户登录和注册(不需密码找回).")]),t._v(" "),a("li",[t._v("用户发贴(不需要支持富文本, 只需要支持纯文本).")]),t._v(" "),a("li",[t._v("用户评论(不需要支持富文本, 只需要支持纯文本).")])]),t._v(" "),a("p",[t._v("你需要从前端一直做到后端, 也就是说, 从 HTML/CSS/JavaScript, 到后面的 PHP(Python/Node.js), 再到数据库. 这其中需要你查阅很多的知识.")]),t._v(" "),a("p",[t._v("这里有几个技术点你需要关注一下.")]),t._v(" "),a("ol",[a("li",[t._v("用户登录时的密码不应该保存为明文, 应该用 MD5+Salt 来保存.")]),t._v(" "),a("li",[t._v('用户登录后, 对于用户自己的贴子可以有 "重新编辑" 或 "删除" 的功能, 但是无权编辑或删除其它用户的贴子.')]),t._v(" "),a("li",[t._v("数据库的设计, 你需要三张表: 用户表, 文章表和评论表, 它们之间是怎么关联的, 你需要学习一下.")])]),t._v(" "),a("p",[t._v("如果你有兴趣, 你可以顺着这个小项目, 研究一下下面这几个事.")]),t._v(" "),a("ul",[a("li",[t._v("图片验证码.")]),t._v(" "),a("li",[t._v("上传图片.")]),t._v(" "),a("li",[t._v("阻止用户在发文章或评论时输入带 HTML 或 JavaScript 的内容.")]),t._v(" "),a("li",[t._v("防范 SQL 注入. 参看"),a("a",{attrs:{href:"http://php.net/manual/zh/security.database.sql-injection.php",target:"_blank",rel:"noopener noreferrer"}},[t._v("PHP 官方文档"),a("OutboundLink")],1),t._v(" 或 "),a("a",{attrs:{href:"https://technet.microsoft.com/zh-cn/library/ms161953%28v=sql.105%29.aspx?f=255&MSPPError=-2147217396",target:"_blank",rel:"noopener noreferrer"}},[t._v("微软官方文档"),a("OutboundLink")],1),t._v(", 或者你自己 Google 一下.")])]),t._v(" "),a("p",[t._v("上面这些东西, 不是什么高深的东西, 但是可以让你从中学到很多. 相信你只需要自己 Google 一下就能搞定.")]),t._v(" "),a("h4",{attrs:{id:"程序员练级攻略-正式入门"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#程序员练级攻略-正式入门"}},[t._v("#")]),t._v(" 程序员练级攻略:正式入门")]),t._v(" "),a("p",[t._v("这篇文章, 我主要是让你成为更为专业的入门程序员. 请注意, 此时你可能需要读一些比较枯燥的书, 但我想说, 这些是非常非常重要的. 一定要坚持住.")]),t._v(" "),a("h5",{attrs:{id:"_1-编程技能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-编程技能"}},[t._v("#")]),t._v(" 1.编程技能")]),t._v(" "),a("p",[t._v('在系统地学习编程技能之前, 希望你能先看一下 "'),a("a",{attrs:{href:"http://blog.thefirehoseproject.com/posts/learn-to-code-and-be-self-reliant/",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Key To Accelerating Your Coding Skills"),a("OutboundLink")],1),t._v('", 这篇文章会告诉你如何有效地快速提高自己的编程能力.')]),t._v(" "),a("p",[t._v("然后接下来是下面几大块内容, 但还只是入门级的.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("编程技巧方面")]),t._v(" - 你可以开始看怎么把程序写好的书了, 这里推荐的是《"),a("a",{attrs:{href:"https://book.douban.com/subject/1477390/",target:"_blank",rel:"noopener noreferrer"}},[t._v("代码大全"),a("OutboundLink")],1),t._v("》. 这本书好多年没有更新了, 其中有一些内容可能有点过时, 但还是一本非常好的书, 有点厚, 你不需要马上就看完. 在你的编程路上, 这本书可以陪你走很久, 因为当你有更多的编程经验时, 踩过更多的坑后, 再把这本书拿出来看看, 你会有更多的体会. "),a("mark",[a("strong",[t._v("好的书和不好的书最大的区别就是, 好的书在你不同的阶段来读, 你会有不同的收获, 而且还会产生更多的深层次的思考!")])]),t._v("​ ** ** 《代码大全》就是这样的一本书.")]),t._v(" "),a("li",[a("strong",[t._v("编程语言方面")]),t._v(" - 这个阶段, 你可以开始了解一下 Java 语言了, 我个人觉得 Java 是世界上目前为止综合排名最好的语言. 你一定要学好这门语言. 推荐《"),a("a",{attrs:{href:"https://book.douban.com/subject/26880667/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java 核心技术(卷 1)"),a("OutboundLink")],1),t._v("》, 除了让你了解 Java 的语法, 它还会让你了解面向对象编程是个什么概念. 然后, 既然开始学习 Java 了, 那就一定要学 Spring, 推荐看看《"),a("a",{attrs:{href:"https://book.douban.com/subject/26767354/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring in Action"),a("OutboundLink")],1),t._v("》或是直接从最新的 Spring Boot 开始, 推荐看看《"),a("a",{attrs:{href:"https://book.douban.com/subject/26857423/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring Boot 实战"),a("OutboundLink")],1),t._v("》. 关于 Spring 的这两本书, 里面可能会有很多你从来没有听说过的东西, 比如, IoC 和 AOP 之类的东西, 能看懂多少就看懂多少, 没事儿.")]),t._v(" "),a("li",[a("strong",[t._v("操作系统")]),t._v(" - 这里你可以看看《"),a("a",{attrs:{href:"https://book.douban.com/subject/4889838/",target:"_blank",rel:"noopener noreferrer"}},[t._v("鸟哥的 Linux 私房菜"),a("OutboundLink")],1),t._v("》, 这本书会让你对计算机和操作系统, 以及 Linux 有一个非常全面的了解, 并能够管理或是操作好一个 Linux 系统. 当然这本书有很多比较专业的知识, 你可能会看不懂, 没关系, 就暂时略过就好了.")]),t._v(" "),a("li",[a("strong",[t._v("网络协议")]),t._v(" - 你需要系统地了解一下 HTTP 协议, 请到 MDN 阅读一下其官方的 "),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP 的文档"),a("OutboundLink")],1),t._v(". 你需要知道 HTTP 协议的几个关键点: 1)HTTP 头, 2)HTTP 的请求方法, 3)HTTP 的返回码. 还有, HTTP 的 Cookie, 缓存, 会话, 以及链接管理, 等等, 在 MDN 的这个文档中都有了. 对于 HTTP 协议, 你不需要知道所有的东西, 你只需要了解这个协议的最关键的那些东西就好了.")]),t._v(" "),a("li",[a("strong",[t._v("数据库设计")]),t._v(" - 你需要系统地了解一下数据库设计中的那些东西, 这里推荐慕课网的一个在线课程: 数据库设计的那些事. 每个小课程不过 5-6 分钟, 全部不到 2 个小时, 我相信你一定能跟下来. 你需要搞清楚数据的那几个范式, 还有 SQL 语句的一些用法. 当然, 你还要学习和使用一下数据库, 这里推荐学习开源的 MySQL. 你可以看官方文档, 也可以看一下这本书《"),a("a",{attrs:{href:"https://book.douban.com/subject/3354490/",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL 必知必会"),a("OutboundLink")],1),t._v("》.")]),t._v(" "),a("li",[a("strong",[t._v("前端方面")]),t._v(" - 前端需要学习几个东西. 一个是和 JavaScript 相关的 "),a("a",{attrs:{href:"https://jquery.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("jQuery"),a("OutboundLink")],1),t._v(", 另一个是和 CSS 相关的 "),a("a",{attrs:{href:"https://getbootstrap.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Bootstrap"),a("OutboundLink")],1),t._v(", 学习这两个东西都不复杂, 直接上其官网看文档就好了. 最重要的是, 你要学习一下如何使用 JavaScript Ajax 请求后端的 API 接口, 而不是再像前面那样用后端来向前端返回 HTML 页面的形式了. 这里需要学习一下, JavaScript 的 Promise 模式.")]),t._v(" "),a("li",[a("strong",[t._v("字符编码方面")]),t._v(' - 在你处理中文时有时会发现有乱码出现, 此时需要了解 ASCII 和 Unicode 这样的字符编码. 这里推荐一篇文章 - "'),a("a",{attrs:{href:"http://www.imkevinyang.com/2010/06/%E5%85%B3%E4%BA%8E%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%EF%BC%8C%E4%BD%A0%E6%89%80%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("关于字符编码, 你所需要知道的(ASCII,Unicode,Utf-8,GB2312…)"),a("OutboundLink")],1),t._v('" 或是英文文章 "'),a("a",{attrs:{href:"http://www.developerknowhow.com/1091/the-history-of-character-encoding",target:"_blank",rel:"noopener noreferrer"}},[t._v("The history of Character Encoding"),a("OutboundLink")],1),t._v('" 以及 '),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Character_encoding",target:"_blank",rel:"noopener noreferrer"}},[t._v("Wikipedia - Character encoding"),a("OutboundLink")],1),t._v(". 还有 GitHub 上的这两个 Awesome 仓库: "),a("a",{attrs:{href:"https://github.com/jagracey/Awesome-Unicode",target:"_blank",rel:"noopener noreferrer"}},[t._v("Awesome Unicode"),a("OutboundLink")],1),t._v(" 和 "),a("a",{attrs:{href:"https://github.com/Codepoints/awesome-codepoints",target:"_blank",rel:"noopener noreferrer"}},[t._v("Awesome Code Points"),a("OutboundLink")],1),t._v(".")])]),t._v(" "),a("h5",{attrs:{id:"_2-为什么转成java语言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-为什么转成java语言"}},[t._v("#")]),t._v(" 2.为什么转成Java语言?")]),t._v(" "),a("p",[t._v("相信你可能会问, 为什么之前学习的 Python 和 JavaScript 不接着学, 而是直接切到 Java 语言上来, 这样会不会切得太快了. 这是一个好问题, 这里需要说明一下, 为什么我会切到 Java 这个语言上来, 主要是有以下几方面考虑.")]),t._v(" "),a("ol",[a("li",[t._v("Java 是所有语言里面综合实力最强的, 这也是为什么几乎所有大型的互联网或是分布式架构基本上都是 Java 技术栈. 所以, 这是一个工业级的编程语言(Python 和 JavaScript 还达不到这样的水准).")]),t._v(" "),a("li",[t._v("之所以没有用 Java 来做入门语言而是用了 Python, 这是因为编程是一件比较费脑子的事, 一开始学习时, 兴趣的培养很重要. Python 比较简单, 容易上手, 能够比较容易地提起兴趣, 而用 Java 则可能比较难.")]),t._v(" "),a("li",[t._v("在你有了一些编程语言的基础后, 有了一些代码的逻辑后, 切到工业级的编程语言上来, 更为专业地学习编程, 是非常有帮助的. 像 Python 和 JavaScript 这样的动态语言用着是很爽, 但是, 只有像 C, C++ 和 Java 这样的静态语言才可以让你真正地进阶.")]),t._v(" "),a("li",[t._v("对于一个合格的程序员, 掌握几门语言是非常正常的事情. 一方面, 这会让你对不同的语言进行比较, 让你有更多的思考. 另一方面, 这也是一种学习能力的培养. 很多时候, 一些程序员只在自己熟悉的技术而不是合适的技术上工作, 这其实并不好, 这会让你的视野受限, 而视野会决定你的高度. 综上所述, 这就是在入门的时候我故意让你多学几门语言的原因.")])]),t._v(" "),a("h5",{attrs:{id:"_3-编程工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-编程工具"}},[t._v("#")]),t._v(" 3.编程工具")]),t._v(" "),a("p",[t._v("编程工具方面, 你需要开始学习使用下面这些工具了.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("编程的 IDE")]),t._v(". 传统一点的, 你可以使用 Eclipse("),a("a",{attrs:{href:"http://www.runoob.com/eclipse/eclipse-tutorial.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("教程"),a("OutboundLink")],1),t._v("). 当然, 我推荐你使用 Intellij IDEA("),a("a",{attrs:{href:"https://www.gitbook.com/book/dancon/intellij-idea/details",target:"_blank",rel:"noopener noreferrer"}},[t._v("教程"),a("OutboundLink")],1),t._v("). 这两个工具都可以开发各种语言, 但是主要用在 Java. "),a("strong",[t._v("如果你想玩得更时髦一些的话, 使用 Visual Studio Code 也不错, 这个工具潜力十足")]),t._v(", 用其开发 Python, JavaScript, Java, Go, C 和 C++ 都能得心应手("),a("a",{attrs:{href:"https://www.gitbook.com/book/jeasonstudio/vscode-cn-doc/details",target:"_blank",rel:"noopener noreferrer"}},[t._v("教程"),a("OutboundLink")],1),t._v(").")]),t._v(" "),a("li",[a("strong",[t._v("版本管理工具")]),t._v(". 版本管理工具是非常重要的编程工具. 传统的有 P4,  SVN, CVS 等, 但都会被 Git 取代, 所以, 你就只用学习 Git 就好了. 学习 Git 的教程网上有很多, 这里我推荐非常系统的 "),a("a",{attrs:{href:"https://git-scm.com/book/zh/v2/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Pro Git 第二版"),a("OutboundLink")],1),t._v(" (如果你觉得 Pro Git 比较枯燥的话, 备选"),a("a",{attrs:{href:"https://backlog.com/git-tutorial/cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("猴子都能懂的 Git 入门"),a("OutboundLink")],1),t._v("), 然后你要学会使用 GitHub. 关于一些 Git 环境安装和准备以及 GitHub 使用, 你可以自行 Google(比如: 这篇"),a("a",{attrs:{href:"https://github.com/JiapengLi/GitTutorial",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub and Git 图文教程"),a("OutboundLink")],1),t._v(" 或是这篇"),a("a",{attrs:{href:"https://www.jianshu.com/p/1b65ed31da97",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git 图文教程及详解"),a("OutboundLink")],1),t._v(").")]),t._v(" "),a("li",[a("strong",[t._v("调试前端程序")]),t._v(". 你需要学会使用 Chrome 调试前端程序, Google 一下会有很多文章, 你可以看看 "),a("a",{attrs:{href:"http://www.igeekbar.com/igeekbar/post/156.htm",target:"_blank",rel:"noopener noreferrer"}},[t._v("超完整的 Chrome 浏览器客户端调试大全"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("数据库设计工具")]),t._v(". 你需要学会使用 MySQL WorkBench, 这个工具很容易使用. 相关的手册, 你可以看一下"),a("a",{attrs:{href:"https://dev.mysql.com/doc/refman/5.7/en/",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方文档"),a("OutboundLink")],1),t._v(".")])]),t._v(" "),a("h5",{attrs:{id:"_4-实践项目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-实践项目"}},[t._v("#")]),t._v(" 4.实践项目")]),t._v(" "),a("p",[t._v("这回我们需要设计一个投票系统的项目.")]),t._v(" "),a("p",[t._v("业务上的需求如下:")]),t._v(" "),a("ul",[a("li",[t._v("用户只有在登录后, 才可以生成投票表单.")]),t._v(" "),a("li",[t._v("投票项可以单选, 可以多选.")]),t._v(" "),a("li",[t._v("其它用户投票后显示当前投票结果(但是不能刷票).")]),t._v(" "),a("li",[t._v("投票有相应的时间, 页面上需要出现倒计时.")]),t._v(" "),a("li",[t._v("投票结果需要用不同颜色不同长度的横条, 并显示百分比和人数.")])]),t._v(" "),a("p",[t._v("技术上的需求如下:")]),t._v(" "),a("ul",[a("li",[t._v("这回要用 Java Spring Boot 来实现了, 然后, 后端不返回任何的 HTML, 只返回 JSON 数据给前端.")]),t._v(" "),a("li",[t._v("由前端的 JQuery 来处理并操作相关的 HTML 动态生成在前端展示的页面.")]),t._v(" "),a("li",[t._v("前端的页面还要是响应式的, 也就是可以在手机端和电脑端有不同的呈现.  这个可以用 Bootstrap 来完成.")])]),t._v(" "),a("p",[t._v("如果你有兴趣, 还可以挑战以下这些功能.")]),t._v(" "),a("ul",[a("li",[t._v("在微信中, 通过微信授权后记录用户信息, 以防止刷票.")]),t._v(" "),a("li",[t._v("可以不用刷页面, 就可以动态地看到投票结果的变化.")]),t._v(" "),a("li",[t._v("Google 一些画图表的 JavaScript 库, 然后把图表画得漂亮一些.")])]),t._v(" "),a("h4",{attrs:{id:"程序员练级攻略-程序员修养"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#程序员练级攻略-程序员修养"}},[t._v("#")]),t._v(" 程序员练级攻略:程序员修养")]),t._v(" "),a("p",[t._v("在完成上述的入门知识学习之后, 我们要向专业的计算机软件开发进军了. 但是在学习那些专业的知识前, 先要抽一部分的篇幅来说一下程序员的修养. 这是程序员的工程师文化, 也就是程序员的价值观, 因为我觉得如果技术修养不够的话, 学再多的知识也是没有用的.")]),t._v(" "),a("p",[t._v('要了解程序员的修养, 可以先从 Quora 上的这个贴子开始 "'),a("a",{attrs:{href:"https://www.quora.com/What-are-some-of-the-most-basic-things-every-programmer-should-know",target:"_blank",rel:"noopener noreferrer"}},[t._v("What are some of the most basic things every programmer should know?"),a("OutboundLink")],1),t._v('", 我摘录一些在这里供你参考.')]),t._v(" "),a("ul",[a("li",[t._v("Bad architecture causes more problems than bad code.")]),t._v(" "),a("li",[t._v("You will spend more time thinking than coding.")]),t._v(" "),a("li",[t._v("The best programmers are always building things.")]),t._v(" "),a("li",[t._v("There’s always a better way.")]),t._v(" "),a("li",[t._v("Code reviews by your peers will make all of you better.")]),t._v(" "),a("li",[t._v("Fewer features for better code is always the right answer in the end.")]),t._v(" "),a("li",[t._v("If it’s not tested, it doesn’t work.")]),t._v(" "),a("li",[t._v("Don’t reinvent the wheel, library code is there to help.")]),t._v(" "),a("li",[t._v("Code that’s hard to understand is hard to maintain.")]),t._v(" "),a("li",[t._v("Code that’s hard to maintain is next to useless.")]),t._v(" "),a("li",[t._v("Always know how your business makes money, that determines who gets paid what.")]),t._v(" "),a("li",[t._v("If you want to feel important as a software developer, work at a tech company.")])]),t._v(" "),a("p",[t._v("然后是《"),a("a",{attrs:{href:"https://97-things-every-x-should-know.gitbooks.io/97-things-every-programmer-should-know/content/en/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("97 Things Every Programmer Should Know"),a("OutboundLink")],1),t._v('》, 其中有 97 个非常不错的编程方面的建议. 这篇文章是比较经典的, 别被"97"这个数字吓住, 你可以快速浏览一下, 会让你有不同的感觉的. 另外, 在工作一段时间后再来读, 你会更有感觉.')]),t._v(" "),a("h5",{attrs:{id:"_1-英文能力"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-英文能力"}},[t._v("#")]),t._v(" 1.英文能力")]),t._v(" "),a("p",[t._v("必须指出, 再往下走, 有一个技能非常重要, 那就是英文. 如果对这个技能发怵的话, 那么你可能无缘成为一个程序员高手了. 因为计算机技术全部来自于西方国家, 所以如果你要想成为一个高手的话, 那么必须到信息的源头去. 英文的世界真是有价值的信息的集散地. 你可以在那里, 到官网上直接阅读手册, 到 StackOverflow 上问问题, 到 YouTube 上看很多演讲和教学, 到 GitHub 上参与社区, 用 Google 查询相关的知识, 到国际名校上参加公开课...")]),t._v(" "),a("p",[t._v("如果你的英文能力有问题的话, 那么基本上来说, 你无法成为一个高手. 因此学好英文是非常有必要的, 我说的不只是读写, 还有听和说. 相信你在学校里学过英文, 有一定的基础. 所以我给你下面的这些建议.")]),t._v(" "),a("ol",[a("li",[t._v("坚持 Google 英文关键词, 而不是在 Google 里搜中文.")]),t._v(" "),a("li",[t._v("在 GitHub 上只用英文. 用英文写代码注释, 写 Code Commit 信息, 用英文写 Issue 和 Pull Request, 以及用英文写 Wiki.")]),t._v(" "),a("li",[t._v("坚持到 YouTube 上每天看 5 分钟的视频. YouTube 上有相关的机器字幕, 实在不行就打开字幕.")]),t._v(" "),a("li",[t._v("坚持用英文词典而不是中文的. 比如: "),a("a",{attrs:{href:"https://dictionary.cambridge.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("剑桥英语词典"),a("OutboundLink")],1),t._v(" 或是 "),a("a",{attrs:{href:"http://www.dictionary.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Dictionary.com"),a("OutboundLink")],1),t._v(" . 你可以安装一个 Chrome 插件 "),a("a",{attrs:{href:"https://chrome.google.com/webstore/detail/google-dictionary-by-goog/mgijmajocgfcbeboacabfgobmjgjcoja",target:"_blank",rel:"noopener noreferrer"}},[t._v("Google Dictionary"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[t._v("坚持用英文的教材而不是中文的. 比如: "),a("a",{attrs:{href:"http://www.bbc.co.uk/learningenglish/",target:"_blank",rel:"noopener noreferrer"}},[t._v("BBC 的 Learning English"),a("OutboundLink")],1),t._v(" , 或是到一些 ESL 网站上看看, 如 "),a("a",{attrs:{href:"https://www.rong-chang.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("ESL: English as a Second Language"),a("OutboundLink")],1),t._v(" 上有一些课程.")])]),t._v(" "),a("h5",{attrs:{id:"_2-问问题的能力"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-问问题的能力"}},[t._v("#")]),t._v(" 2.问问题的能力")]),t._v(" "),a("p",[t._v("提问的智慧("),a("a",{attrs:{href:"http://www.catb.org/~esr/faqs/smart-questions.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("How To Ask Questions The Smart Way"),a("OutboundLink")],1),t._v(")一文最早是由 Eric Steven Raymond 所撰写的, 详细描述了发问者事前应该做好什么, 而什么又是不该做的. 作者认为这样能让问题容易令人理解, 而且发问者自己也能学到较多东西.")]),t._v(" "),a("p",[t._v("此文一经发出, 就广受好评, 被广泛转载并奉为经典. 该文也有 "),a("a",{attrs:{href:"http://doc.zengrong.net/smart-questions/cn.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("简体中文翻译版"),a("OutboundLink")],1),t._v(" 被流传着, 所以在华人界也是篇很有名的文章. 有两个著名的缩写 STFW(Search the fxxking web)以及 RTFM(Read the fxxking manual)就是出自本文.")]),t._v(" "),a("p",[t._v("另外, 还有一个经典的问题叫 "),a("a",{attrs:{href:"http://xyproblem.info/",target:"_blank",rel:"noopener noreferrer"}},[t._v("X-Y Problem"),a("OutboundLink")],1),t._v(". 对我来说, 这是一个很容易犯的错误, 所以, 你也要小心避免(我曾经在我的 Coolshell 上写过这个事《"),a("a",{attrs:{href:"https://coolshell.cn/articles/10804.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("X-Y 问题"),a("OutboundLink")],1),t._v("》).")]),t._v(" "),a("p",[t._v('然后, 你可以到 StackOverflow 上看看如何问问题的一些提示 -- "'),a("a",{attrs:{href:"https://meta.stackexchange.com/questions/7931/faq-for-stack-exchange-sites",target:"_blank",rel:"noopener noreferrer"}},[t._v("FAQ for StackExchange Site"),a("OutboundLink")],1),t._v('".')]),t._v(" "),a("p",[t._v("作为一个程序员, 不做伸手党, 你必须要读一读这几篇文章, 并努力践行.")]),t._v(" "),a("h5",{attrs:{id:"_3-写代码的修养"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-写代码的修养"}},[t._v("#")]),t._v(" 3.写代码的修养")]),t._v(" "),a("p",[t._v("除了《代码大全》外, 你还需要补充一些如何写好代码的知识, 有以下几本书推荐.")]),t._v(" "),a("ul",[a("li",[t._v("《"),a("a",{attrs:{href:"https://book.douban.com/subject/4262627/",target:"_blank",rel:"noopener noreferrer"}},[t._v("重构: 改善既有代码的设计"),a("OutboundLink")],1),t._v('》, 这本书是 Martin Fowler 的经典之作. 这本书的意义不仅仅在于 "改善既有代码的设计", 也指导了我们如何从零开始构建代码的时候避免不良的代码风格. 这是一本程序员必读的书.')]),t._v(" "),a("li",[t._v("《"),a("a",{attrs:{href:"https://book.douban.com/subject/2248759/",target:"_blank",rel:"noopener noreferrer"}},[t._v("修改代码的艺术"),a("OutboundLink")],1),t._v("》, 这本书是继《重构》之后探讨修改代码技术的又一里程碑式的著作, 而且从涵盖面和深度上都超过了前两部经典(《代码大全》和《重构》). 作者将理解, 测试和修改代码的原理, 技术和最新工具(自动化重构工具, 单元测试框架, 仿对象, 集成测试框架等), 与解依赖技术和大量开发和设计优秀代码的原则, 最佳实践相结合, 许多内容非常深入. 这本书不仅可以帮你掌握最顶尖的修改代码技术, 还可以大大提高你对代码和软件开发的领悟力.")]),t._v(" "),a("li",[t._v("《"),a("a",{attrs:{href:"https://book.douban.com/subject/4199741/",target:"_blank",rel:"noopener noreferrer"}},[t._v("代码整洁之道"),a("OutboundLink")],1),t._v("》, 这本书提出一种观念: "),a("strong",[t._v("代码质量与其整洁度成正比")]),t._v(". 干净的代码, 既在质量上较为可靠, 也为后期维护和升级奠定了良好基础. 本书作者给出了一系列行之有效的整洁代码操作实践. 这些实践在本书中体现为一条条规则, 并辅以来自现实项目正反两面的范例.")]),t._v(" "),a("li",[t._v("《"),a("a",{attrs:{href:"https://book.douban.com/subject/11614538/",target:"_blank",rel:"noopener noreferrer"}},[t._v("程序员的职业素养"),a("OutboundLink")],1),t._v("》, 这本书是编程大师 Bob 大叔 40 余年编程生涯的心得体会, 讲解成为真正专业的程序员需要什么样的态度, 原则, 需要采取什么样的行动. 作者以自己以及身边的同事走过的弯路, 犯过的错误为例, 意在为后来人引路, 助其职业生涯迈上更高台阶.")])]),t._v(" "),a("p",[t._v("另外, 作为一个程序员, Code Review 是非常重要的程序员修养. Code Review 对我的成长非常有帮助, 我认为没有 Code Review 的公司都没有必要呆(因为不做 Code Review 的公司一定是不尊重技术的). 下面有几篇我觉得还不错的 Code Review 的文章, 供你参考.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://medium.com/@palantir/code-review-best-practices-19e02780015f",target:"_blank",rel:"noopener noreferrer"}},[t._v("Code Review Best Practices"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://dzone.com/articles/how-google-does-code-review",target:"_blank",rel:"noopener noreferrer"}},[t._v("How Google Does Code Review"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://thenewstack.io/linkedin-code-review/",target:"_blank",rel:"noopener noreferrer"}},[t._v("LinkedIn’s Tips for Highly Effective Code Review"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("除了 Code Review 之外, Unit Test 也是程序员的一个很重要的修养. 写 Unit Test 的框架一般来说都是从 JUnit 衍生出来的, 比如 CppUnit 之类的. 学习 JUnit 使用的最好方式就是到其官网上看 "),a("a",{attrs:{href:"https://junit.org/junit5/docs/current/user-guide/",target:"_blank",rel:"noopener noreferrer"}},[t._v("JUnit User Guide"),a("OutboundLink")],1),t._v("("),a("a",{attrs:{href:"http://sjyuan.cc/junit5/user-guide-cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("中文版"),a("OutboundLink")],1),t._v("). 然后, 有几篇文章你可以看看(也可以自行 Google):")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://stackify.com/unit-testing-basics-best-practices/",target:"_blank",rel:"noopener noreferrer"}},[t._v("You Still Don’t Know How to Do Unit Testing"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://dzone.com/articles/unit-testing-best-practices",target:"_blank",rel:"noopener noreferrer"}},[t._v("Unit Testing Best Practices: JUnit Reference Guide"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.kyleblaney.com/junit-best-practices/",target:"_blank",rel:"noopener noreferrer"}},[t._v("JUnit Best Practices"),a("OutboundLink")],1)])]),t._v(" "),a("h5",{attrs:{id:"_4-安全防范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-安全防范"}},[t._v("#")]),t._v(" 4.安全防范")]),t._v(" "),a("p",[t._v("在代码中没有最基本的安全漏洞问题, 也是程序员必须要保证的重要大事, 尤其是对外暴露 Web 服务的软件, 其安全性就更为重要了. 对于在 Web 上经常出现的安全问题, 有必要介绍一下 "),a("a",{attrs:{href:"https://www.owasp.org/index.php/Main_Page",target:"_blank",rel:"noopener noreferrer"}},[t._v("OWASP - Open Web Application Security Project"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("p",[t._v("OWASP 是一个开源的, 非盈利的全球性安全组织, 致力于应用软件的安全研究. 其被视为 Web 应用安全领域的权威参考. 2009 年, 国际信用卡数据安全技术 PCI 标准将其列为必要组件, 美国国防信息系统局, 欧洲网络与信息安全局, 美国国家安全局等政府机构所发布的美国国家和国际立法, 标准, 准则和行业实务守则参考引用了 OWASP.")]),t._v(" "),a("p",[t._v("美国联邦贸易委员会(FTC)强烈建议所有企业需遵循 OWASP 十大 Web 弱点防护守则. 所以, 对于"),a("a",{attrs:{href:"%3Ca%20href="}},[t._v("https://www.owasp.org/index.php/Category:OWASP_T")]),t._v(' op_Ten_Project">OWASP Top 10 项目 是程序员非常需要关注的最基本的也是最严重的安全问题, 现在其已经成了一种标准, 这里是其中文版《'),a("a",{attrs:{href:"https://www.owasp.org/images/d/dc/OWASP_Top_10_2017_%E4%B8%AD%E6%96%87%E7%89%88v1.3.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("OWASP Top 10 2017 PDF 中文版"),a("OutboundLink")],1),t._v("》.")]),t._v(" "),a("p",[t._v("下面是安全编程方面的一些 Guideline.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://security.berkeley.edu/secure-coding-practice-guidelines",target:"_blank",rel:"noopener noreferrer"}},[t._v("伯克立大学的 Secure Coding Practice Guidelines"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://wiki.sei.cmu.edu/confluence/display/seccode/SEI+CERT+Coding+Standards",target:"_blank",rel:"noopener noreferrer"}},[t._v("卡内基梅隆大学的 SEI CERT Coding Standards"),a("OutboundLink")],1),t._v(".")])]),t._v(" "),a("p",[t._v("此外, 有一篇和 HTTP 相关的安全文章也是每个程序员必须要读的——《"),a("a",{attrs:{href:"https://www.keycdn.com/blog/http-security-headers/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Hardening Your HTTP Security Headers"),a("OutboundLink")],1),t._v("》.")]),t._v(" "),a("p",[t._v('最后想说的是 "'),a("strong",[t._v("防御性编程")]),t._v('", 英文叫 '),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Defensive_programming",target:"_blank",rel:"noopener noreferrer"}},[t._v("Defensive Programming"),a("OutboundLink")],1),t._v(", 它是为了保证对程序的不可预见的使用, 不会造成程序功能上的损坏. 它可以被看作是为了减少或消除墨菲定律效力的想法. 防御式编程主要用于可能被滥用, 恶作剧或无意地造成灾难性影响的程序上. 下面是一些文章.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://medium.com/web-engineering-vox/the-art-of-defensive-programming-6789a9743ed4",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Art of Defensive Programming"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[t._v("当然, 也别太过渡了, 这篇文章可以看看, "),a("a",{attrs:{href:"https://medium.com/@cvitullo/overly-defensive-programming-e7a1b3d234c2",target:"_blank",rel:"noopener noreferrer"}},[t._v("Overly defensive programming"),a("OutboundLink")],1),t._v(".")])]),t._v(" "),a("h5",{attrs:{id:"_5-软件工程和上线"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-软件工程和上线"}},[t._v("#")]),t._v(" 5.软件工程和上线")]),t._v(" "),a("p",[t._v("系统上线是一件比较严肃的事, 这表明你写的软件不是跑在自己的机器上的玩具, 或是实验室里的实验品, 而是交付给用户使用的, 甚至是用户付费的软件. 对于这样的软件或系统, 需要遵守一些上线规范, 比如需要认真测试, 并做上线前检查, 以及上线后监控. 下面是几个简单的规范, 供你参考.")]),t._v(" "),a("p",[t._v("关于测试, 推荐两本书.")]),t._v(" "),a("ul",[a("li",[t._v("《"),a("a",{attrs:{href:"https://book.douban.com/subject/4187479/",target:"_blank",rel:"noopener noreferrer"}},[t._v("完美软件: 对软件测试的各种幻想"),a("OutboundLink")],1),t._v("》, 这本书重点讨论了与软件测试有关的各种心理问题及其表现与应对方法. 作者首先阐述软件测试之所以如此困难的原因---人的思维不是完美的, 而软件测试的最终目的就是发现对改善软件产品和软件开发过程有益的信息, 故软件测试是一个信息获取的过程.")]),t._v(" "),a("li",[t._v("《"),a("a",{attrs:{href:"https://book.douban.com/subject/25742200/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Google 软件测试之道"),a("OutboundLink")],1),t._v("》, 描述了测试解决方案, 揭示了测试架构是如何设计, 实现和运行的, 介绍了软件测试工程师的角色; 讲解了技术测试人员应该具有的技术技能; 阐述了测试工程师在产品生命周期中的职责; 讲述了测试管理, 并对在 Google 的测试历史上或者主要产品上发挥了重要作用的工程师的访谈, 这令那些试图建立类似 Google 的测试流程或团队的人受益很大.")])]),t._v(" "),a("p",[t._v("当你的系统要上线时, 你是不是已经做好上线的准备了? 这里有两个 Checklist 供你做上线前的一些检查.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/mtdvio/going-to-production/blob/master/serverside-checklist.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("Server Side checklist"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/mtdvio/going-to-production/blob/master/spa-checklist.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("Single Page App Checklist"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("《"),a("a",{attrs:{href:"https://www.datadoghq.com/blog/monitoring-101-collecting-data/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Monitoring 101"),a("OutboundLink")],1),t._v("》这是一篇运维方面的入门文章, 告诉你最基本的监控线上运行软件的方法和实践.")]),t._v(" "),a("h5",{attrs:{id:"_6-小结-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-小结-4"}},[t._v("#")]),t._v(" 6.小结")]),t._v(" "),a("p",[t._v("好了, 总结一下今天分享的主要内容. 程序员修养看似与程序员练级关系不大, 实际上却能反映出程序员的工程师特质和价值观, 决定了这条路你到底能走多远. "),a("strong",[t._v("有修养的程序员才可能成长为真正的工程师和架构师, 而没有修养的程序员只能沦为码农")]),t._v(".")]),t._v(" "),a("p",[t._v("在这篇文章中, 我指出了我认为比较重要的几个方面: 英文能力, 问问题的能力, 写代码的修养, 安全防范意识, 软件工程和上线规范等. 这些能力的训练和培养将为后续的学习和发展夯实基础.")]),t._v(" "),a("h5",{attrs:{id:"_7-编程语言相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-编程语言相关"}},[t._v("#")]),t._v(" 7.编程语言相关")]),t._v(" "),a("p",[a("strong",[t._v("C 语言")])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://homepages.inf.ed.ac.uk/dts/pm/Papers/nasa-c-style.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("NASA C Style"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://users.ece.cmu.edu/~eno/coding/CCodingStandard.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("C Coding Standard"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://en.wikibooks.org/wiki/C_Programming/Structure_and_style",target:"_blank",rel:"noopener noreferrer"}},[t._v("C Programming/Structure and style"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.kernel.org/doc/html/latest/process/coding-style.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Linux kernel coding style"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.gnu.org/prep/standards/html_node/Writing-C.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("GNU Coding Standard"),a("OutboundLink")],1),t._v(", GNU 的编码规范.")])]),t._v(" "),a("p",[a("strong",[t._v("C++ 语言")])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines",target:"_blank",rel:"noopener noreferrer"}},[t._v("C++ Core Guidelines"),a("OutboundLink")],1),t._v(", 这个文档是各种 C++ 的大拿包括原作者在内在持续讨论更新的和 C++ 语言相关的各种最佳实践.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://google.github.io/styleguide/cppguide.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Google C++ Style Guide"),a("OutboundLink")],1),t._v(".")])]),t._v(" "),a("p",[a("strong",[t._v("Go 语言")])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://golang.org/doc/effective_go.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Effective Go"),a("OutboundLink")],1),t._v(" , Go 的语法不复杂, 所以 Go 语言的最佳实践只需要看这篇官方文档就够了.")])]),t._v(" "),a("p",[a("strong",[t._v("Java 语言")])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://www.oracle.com/technetwork/java/codeconvtoc-136057.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Code Conventions for the Java™ Programming Language"),a("OutboundLink")],1),t._v(" , Java 官方的编程规范.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://google.github.io/styleguide/javaguide.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Google Java Style Guide"),a("OutboundLink")],1),t._v(", Google 的 Java 编码规范.")])]),t._v(" "),a("p",[a("strong",[t._v("JavaScript 语言")])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://jstherightway.org",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript The Right Way"),a("OutboundLink")],1),t._v(" , 一个相对比较容读的 JavaScript 编程规范, 其中不但有代码规范, 还有设计模式, 测试工具, 编程框架, 游戏引擎. . .")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://google.github.io/styleguide/jsguide.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Google JavaScript Style Guide"),a("OutboundLink")],1),t._v(", Google 公司的 JavaScript 的编码规范, 一个非常大而全的编程规范.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/airbnb/javascript",target:"_blank",rel:"noopener noreferrer"}},[t._v("Airbnb JavaScript Style Guide"),a("OutboundLink")],1),t._v(", Airbnb 的 JavaScript 编程规范. 没 Google 的这么大而全, 但是也很丰富了.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://contribute.jquery.org/style-guide/js/",target:"_blank",rel:"noopener noreferrer"}},[t._v("jQuery Core Style Guide"),a("OutboundLink")],1),t._v(", jQuery 的代码规范.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/ryanmcdermott/clean-code-javascript",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript Clean Code"),a("OutboundLink")],1),t._v(", 前面推荐过的《代码整洁之道》一书中的 JavaScript 的实践 .")])]),t._v(" "),a("p",[t._v("还有一些其它相对比较简单的 JavaScript 编程规范.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://addyosmani.com/blog/javascript-style-guides-and-beautifiers/",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript Style Guides And Beautifiers"),a("OutboundLink")],1),t._v(" , 这是一篇推荐 JavaScript 编程规范的文章, 你可以看看.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.w3schools.com/js/js_conventions.asp",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript Style Guide and Coding Conventions"),a("OutboundLink")],1),t._v(", 这是 W3Schools 的 JavaScript.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://crockford.com/javascript/code.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Code Conventions for the JavaScript"),a("OutboundLink")],1),t._v(".")])]),t._v(" "),a("p",[a("strong",[t._v("PHP 语言")])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://www.php-fig.org/psr/",target:"_blank",rel:"noopener noreferrer"}},[t._v("PHP FIG"),a("OutboundLink")],1),t._v(", PHP 编码规范及标准推荐.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.phptherightway.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("PHP The Right Way"),a("OutboundLink")],1),t._v(", 除了编码规范之外的各种 PHP 的最佳实践, 还包括一些设计模式, 安全问题, 以及服务部署, Docker 虚拟化以及各种资源.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/jupeter/clean-code-php",target:"_blank",rel:"noopener noreferrer"}},[t._v("Clean Code PHP"),a("OutboundLink")],1),t._v(", 《代码整洁之道》的 PHP 实践.")])]),t._v(" "),a("p",[a("strong",[t._v("Python 语言")])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.python.org/dev/peps/pep-0008/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Style Guide for Python Code"),a("OutboundLink")],1),t._v(", Python 官方的编程码规范.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://google.github.io/styleguide/pyguide.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Google Python Style Guide"),a("OutboundLink")],1),t._v(", Google 公司的 Python 编码规范.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://docs.python-guide.org/en/latest/",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Hitchhiker’s Guide to Python"),a("OutboundLink")],1),t._v(", 这不只是 Python 的编程规范, 还是 Python 资源的集散地, 强烈推荐.")])]),t._v(" "),a("p",[a("strong",[t._v("Ruby 语言")])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/airbnb/ruby",target:"_blank",rel:"noopener noreferrer"}},[t._v("Ruby Style Guide"),a("OutboundLink")],1),t._v(", Airbnb 公司的 Ruby 编程规范.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/bbatsov/ruby-style-guide",target:"_blank",rel:"noopener noreferrer"}},[t._v("Ruby Style Guide"),a("OutboundLink")],1),t._v(" .")])]),t._v(" "),a("p",[a("strong",[t._v("Rust 语言")])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/rust-lang-nursery/fmt-rfcs/blob/master/guide/guide.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("Rust Style Guide"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://aturon.github.io",target:"_blank",rel:"noopener noreferrer"}},[t._v("Rust Guidelines"),a("OutboundLink")],1),t._v(" 开源社区里最好的 Rust 编程规范.")])]),t._v(" "),a("p",[a("strong",[t._v("Scala 语言")])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://docs.scala-lang.org/style/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Scala Style Guide"),a("OutboundLink")],1),t._v(", Scala 官方的编程规范.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/databricks/scala-style-guide",target:"_blank",rel:"noopener noreferrer"}},[t._v("Databricks Scala Guide"),a("OutboundLink")],1),t._v(" - Databricks 的 Scala 编程规范.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/alexandru/scala-best-practices",target:"_blank",rel:"noopener noreferrer"}},[t._v("Scala Best Practices"),a("OutboundLink")],1),t._v(".")])]),t._v(" "),a("p",[a("strong",[t._v("Shell 语言")])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://google.github.io/styleguide/shell.xml",target:"_blank",rel:"noopener noreferrer"}},[t._v("Google Shell Style Guide"),a("OutboundLink")],1),t._v(", Google 的 Shell 脚本编程规范.")])]),t._v(" "),a("p",[a("strong",[t._v("Node.js 相关")])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://docs.npmjs.com/misc/coding-style",target:"_blank",rel:"noopener noreferrer"}},[t._v("npm-coding-style"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/Microsoft/nodejs-guidelines",target:"_blank",rel:"noopener noreferrer"}},[t._v("Microsoft + Node.js Guidelines"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/felixge/node-style-guide",target:"_blank",rel:"noopener noreferrer"}},[t._v("Node.js Style Guide"),a("OutboundLink")],1),t._v(".")])]),t._v(" "),a("p",[a("strong",[t._v("Mozilla 的编程规范")])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Coding_Style",target:"_blank",rel:"noopener noreferrer"}},[t._v("Mozilla Coding Style Guide"),a("OutboundLink")],1),t._v(", 其中包括 C, C++, Java, Python, JavaScript, Makefile 和 SVG 等编程规范.")])]),t._v(" "),a("h5",{attrs:{id:"_8-前端开发相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-前端开发相关"}},[t._v("#")]),t._v(" 8.前端开发相关")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://cssguidelin.es",target:"_blank",rel:"noopener noreferrer"}},[t._v("CSS Guidelines"),a("OutboundLink")],1),t._v(", CSS 容易学, 但是不好写, 这篇规范会教你如何写出一个健全的, 可管理的, 并可以扩展的 CSS.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://smacss.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Scalable and Modular Architecture for CSS"),a("OutboundLink")],1),t._v(", 这是一本教你如何写出可扩展和模块化的 CSS 的电子书, 非常不错.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/bendc/frontend-guidelines",target:"_blank",rel:"noopener noreferrer"}},[t._v("Frontend Guidelines"),a("OutboundLink")],1),t._v(", 一些和 HTML, CSS, JavaScript 相关的最佳实践.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://sass-guidelin.es",target:"_blank",rel:"noopener noreferrer"}},[t._v("Sass Guidelines"),a("OutboundLink")],1),t._v(', Sass 作为 CSS 的补充, 其要让 CSS 变得更容易扩展. 然而, 也变得更灵活, 这意味着可以被更容易滥用. 这里这篇 " 富有主见 " 的规范值得你一读.')]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/airbnb/css",target:"_blank",rel:"noopener noreferrer"}},[t._v("Airbnb CSS / Sass Styleguide"),a("OutboundLink")],1),t._v(",  Airbnb 的 CSS/Sass 规范.")]),t._v(" "),a("li",[t._v("说了 Sass 就不得不说 LESS, 这里有几篇和 LESS 相关的: "),a("a",{attrs:{href:"https://gist.github.com/radermacher/f84b24af816111faf0ef",target:"_blank",rel:"noopener noreferrer"}},[t._v("LESS Coding Guidelines"),a("OutboundLink")],1),t._v(", "),a("a",{attrs:{href:"https://github.com/odoo/odoo/wiki/LESS-coding-guidelines",target:"_blank",rel:"noopener noreferrer"}},[t._v("LESS Coding Guidelines"),a("OutboundLink")],1),t._v(", "),a("a",{attrs:{href:"http://devdocs.magento.com/guides/v2.0/coding-standards/code-standard-less.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("LESS coding standard"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/marcobiedermann/html-style-guide",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTML Style Guide"),a("OutboundLink")],1),t._v(", 一个教你如何写出性能更高, 结构更好, 容易编程和扩展的 HTML 的规范.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://codeguide.co",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTML + CSS Code Guide"),a("OutboundLink")],1),t._v(", 如何写出比较灵活, 耐用, 可持续改进的 HTML 和 CSS 的规范.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/polarmobile/coffeescript-style-guide",target:"_blank",rel:"noopener noreferrer"}},[t._v("CoffeeScript Style Guide"),a("OutboundLink")],1),t._v(", CoffeeScript 的最佳实践和编程规范.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://google.github.io/styleguide/htmlcssguide.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Google HTML/CSS Style Guide"),a("OutboundLink")],1),t._v(", Google 的 HTML/CSS 的编程规范.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.smashingmagazine.com/2011/01/guidelines-for-responsive-web-design/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Guidelines for Responsive Web Design"),a("OutboundLink")],1),t._v(" , 响应式 Web 设计的规范和最佳实践.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://standards.usa.gov",target:"_blank",rel:"noopener noreferrer"}},[t._v("U.S. Web Design Standards"),a("OutboundLink")],1),t._v(", 这是美国政府网端要求的一些 UI 交互可视化的一些规范.")])]),t._v(" "),a("p",[t._v("最后是一个前端开发的各种注意事项列表, 非常有用.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/thedaviddias/Front-End-Checklist",target:"_blank",rel:"noopener noreferrer"}},[t._v("Front-End Checklist"),a("OutboundLink")],1),t._v(" , 一个前端开发的 Checklist, 其中包括 HTML, CSS 和 JavaScript, 还和图片, 字体, SEO, 性能相关, 还包括关一些和安全相关的事项, 这个列表真的是太好了.")])]),t._v(" "),a("h5",{attrs:{id:"_9-移动端相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-移动端相关"}},[t._v("#")]),t._v(" 9.移动端相关")]),t._v(" "),a("p",[a("strong",[t._v("Kotlin")])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://kotlinlang.org/docs/reference/coding-conventions.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Coding Conventions"),a("OutboundLink")],1),t._v(".")])]),t._v(" "),a("p",[a("strong",[t._v("Objective-C 语言")])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/github/objective-c-style-guide",target:"_blank",rel:"noopener noreferrer"}},[t._v("Objective-C Style guide"),a("OutboundLink")],1),t._v(", Style guide & coding conventions for Objective-C projects.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://google.github.io/styleguide/objcguide.xml",target:"_blank",rel:"noopener noreferrer"}},[t._v("Google Objective-C Style Guide"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/NYTimes/objective-c-style-guide",target:"_blank",rel:"noopener noreferrer"}},[t._v("NYTimes Objective-C Style Guide"),a("OutboundLink")],1),t._v(" , The Objective-C Style Guide used by The New York Times.")])]),t._v(" "),a("p",[a("strong",[t._v("Swift 语言")])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://swift.org/documentation/api-design-guidelines/",target:"_blank",rel:"noopener noreferrer"}},[t._v("API Design Guidelines"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/github/swift-style-guide",target:"_blank",rel:"noopener noreferrer"}},[t._v("Swift"),a("OutboundLink")],1),t._v(" - 一个 Swift 的相关编程规范的教程.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/raywenderlich/swift-style-guide",target:"_blank",rel:"noopener noreferrer"}},[t._v("Swift style guide"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/linkedin/swift-style-guide",target:"_blank",rel:"noopener noreferrer"}},[t._v("Swift Style Guide"),a("OutboundLink")],1),t._v(" - LinkedIn 的官方 Swift 编程规范.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/metova/swift-style-guide",target:"_blank",rel:"noopener noreferrer"}},[t._v("Metova’s Swift style guide"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/xmartlabs/Swift-Style-Guide",target:"_blank",rel:"noopener noreferrer"}},[t._v("Xmartlabs Swift Style Guide"),a("OutboundLink")],1),t._v(", Xmartlabs 的 Swift 编程规范.")])]),t._v(" "),a("h5",{attrs:{id:"_10-api相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-api相关"}},[t._v("#")]),t._v(" 10.API相关")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://stateless.co/hal_specification.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("HAL"),a("OutboundLink")],1),t._v(", 一个简单的 API 规范教程.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/Microsoft/api-guidelines",target:"_blank",rel:"noopener noreferrer"}},[t._v("Microsoft REST API Guidelines"),a("OutboundLink")],1),t._v(", 微软软的 Rest API 规范.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://apiguide.readthedocs.io/en/latest/",target:"_blank",rel:"noopener noreferrer"}},[t._v("API Design Guide"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://hackernoon.com/restful-api-designing-guidelines-the-best-practices-60e1d954e7c9",target:"_blank",rel:"noopener noreferrer"}},[t._v("RESTful API Designing guidelines - The best practices"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://jsonapi.org/recommendations",target:"_blank",rel:"noopener noreferrer"}},[t._v("JSON API - Recommendations"),a("OutboundLink")],1),t._v(", JSON 相关的 API 的一些推荐实践.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/shieldfy/API-Security-Checklist",target:"_blank",rel:"noopener noreferrer"}},[t._v("API Security Checklist"),a("OutboundLink")],1),t._v(" , API 的安全问题的检查列表.")])]),t._v(" "),a("h5",{attrs:{id:"_11-开发工具相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-开发工具相关"}},[t._v("#")]),t._v(" 11.开发工具相关")]),t._v(" "),a("p",[a("strong",[t._v("Markdown相关")])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/google/styleguide/blob/gh-pages/docguide/style.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("Google Markdown Style Guide"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.cirosantilli.com/markdown-style-guide/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Markdown Style Guide"),a("OutboundLink")],1),t._v(".")])]),t._v(" "),a("p",[a("strong",[t._v("JSON")])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://google.github.io/styleguide/jsoncstyleguide.xml",target:"_blank",rel:"noopener noreferrer"}},[t._v("Google JSON Style Guide"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.w3resource.com/slides/json-style-guide.php",target:"_blank",rel:"noopener noreferrer"}},[t._v("JSON Style Guide"),a("OutboundLink")],1),t._v(".")])]),t._v(" "),a("p",[a("strong",[t._v("Git相关")])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/agis/git-style-guide",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git Style Guide"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/git/git/blob/master/Documentation/CodingGuidelines",target:"_blank",rel:"noopener noreferrer"}},[t._v("Few Rules from Git Documentation"),a("OutboundLink")],1),t._v(".")])]),t._v(" "),a("p",[a("strong",[t._v("正则表达式相关")])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/regexhq",target:"_blank",rel:"noopener noreferrer"}},[t._v("RegexHQ"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/zeeshanu/learn-regex",target:"_blank",rel:"noopener noreferrer"}},[t._v("Learn regex the easy way"),a("OutboundLink")],1),t._v(".")])]),t._v(" "),a("h4",{attrs:{id:"程序员练级攻略-编程语言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#程序员练级攻略-编程语言"}},[t._v("#")]),t._v(" 程序员练级攻略:编程语言")]),t._v(" "),a("p",[t._v("为了进入专业的编程领域, 需要认真学习以下三方面的知识.")]),t._v(" "),a("p",[a("strong",[t._v("编程语言")]),t._v(". 你需要学习 C, C++ 和 Java 这三个工业级的编程语言. 为什么说它们是工业级的呢? 主要是, C 和 C++ 语言规范都由 ISO 标准化过, 而且都有工业界厂商组成的标准化委员会来制定工业标准. 次要原因是, 它们已经在业界应用于许多重要的生产环境中.")]),t._v(" "),a("ul",[a("li",[t._v("C 语言不用多说, 现今这个世界上几乎所有重要的软件都跟 C 有直接和间接的关系, 操作系统, 网络, 硬件驱动等等. 说得霸气一点儿, 这个世界就是在 C 语言之上运行的.")]),t._v(" "),a("li",[t._v("而对于 C++ 来说, 现在主流的浏览器, 数据库, Microsoft Office, 主流的图形界面, 著名的游戏引擎等都是用 C++ 编写的. 而且, 很多公司都用 C++ 开发核心架构, 如 Google, 腾讯, 百度, 阿里云等.")]),t._v(" "),a("li",[t._v("而金融电商公司则广泛地使用 Java 语言, 因为 Java 的好处太多了, 代码稳定性超过 C 和 C++, 生产力远超 C 和 C++. 有 JVM 在, 可以轻松地跨平台, 做代码优化, 做 AOP 和 IoC 这样的高级技术. 以 Spring 为首的由庞大的社区开发的高质量的各种轮子让你只需关注业务, 是能够快速搭建企业级应用的不二之选.")])]),t._v(" "),a("p",[t._v("此外, 我推荐学习 Go 语言. 一方面, Go 语言现在很受关注, 它是取代 C 和 C++ 的另一门有潜力的语言. C 语言太原始了, C++ 太复杂了, Java 太高级了, 所以 Go 语言就在这个夹缝中出现了. 这门语言已经 10 多年了, 其已成为云计算领域事实上的标准语言, 尤其是在 "),a("strong",[t._v("Docker/Kubernetes")]),t._v(" 等项目中. Go 语言社区正在不断地从 Java 社区移植各种 Java 的轮子过来, Go 社区现在也很不错.")]),t._v(" "),a("p",[t._v("如果你要写一些 PaaS 层的应用, Go 语言会比 C 和 C++ 更好, 目前和 Java 有一拼. 而且, Go 语言在国内外一些知名公司中有了一定的应用和实践, 所以是可以学习的(参看:《"),a("a",{attrs:{href:"https://coolshell.cn/articles/18190.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Go 语言, Docker 和新技术"),a("OutboundLink")],1),t._v("》一文). 此外, Go 语言语法特别简单, 你有了 C 和 C++ 的基础, 学习 Go 的学习成本基本为零.")]),t._v(" "),a("p",[a("strong",[t._v("理论学科")]),t._v(". 你需要学习像算法, 数据结构, 网络模型, 计算机原理等计算机科学专业需要学习的知识. 为什么要学好这些理论上的知识呢?")]),t._v(" "),a("ul",[a("li",[t._v("其一, 这些理论知识可以说是计算机科学这门学科最精华的知识了. 说得大一点, 这些是人类智慧的精华. 你只要想成为高手, 这些东西是你必需要掌握和学习的.")]),t._v(" "),a("li",[t._v("其二, 当你在解决一些很复杂或是很难的问题时, 这些基础理论知识可以帮到你很多. 我过去这 20 年从这些基础理论知识中受益匪浅.")]),t._v(" "),a("li",[t._v("其三, 这些理论知识的思维方式可以让你有触类旁通, 一通百通的感觉. 虽然知识比较难啃, 但啃过以后, 你将获益终生.")])]),t._v(" "),a("p",[t._v("另外, 你千万不要觉得在你的日常工作或是生活当中根本用不上, 学了也白学, 这样的思维方式千万不要有, 因为这是平庸的思维方式. 如果你想等我用到了再学也不晚, 那么你有必要看一下这篇文章《"),a("a",{attrs:{href:"https://coolshell.cn/articles/4235.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("程序员的荒谬之言还是至理名言? "),a("OutboundLink")],1),t._v("》.")]),t._v(" "),a("p",[a("strong",[t._v("系统知识")]),t._v(". 系统知识是理论知识的工程实践, 这里面有很多很多的细节. 比如像 Unix/Linux, TCP/IP, C10K 挑战等这样专业的系统知识. 这些知识是你能不能把理论应用到实际项目当中, 能不能搞定实际问题的重要知识.")]),t._v(" "),a("p",[t._v("当你在编程的时候, 如何和系统进行交互或是获取操作系统的资源, 如何进行通讯, 当系统出了性能问题, 当系统出了故障等, 你有大量需要落地的事需要处理和解决. 这个时候, 这些系统知识就会变得尤为关键和重要了.")]),t._v(" "),a("p",[t._v("这些东西, 你可以认为是计算机世界的物理世界, 上层无论怎么玩, 无论是 Java NIO, 还是 Nginx, 还是 Node.js, 它们都逃脱不掉最下层的限制. 所以, 你要好好学习这方面的知识.")]),t._v(" "),a("h5",{attrs:{id:"_1-编程语言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-编程语言"}},[t._v("#")]),t._v(" 1.编程语言")]),t._v(" "),a("h6",{attrs:{id:"_1-java语言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-java语言"}},[t._v("#")]),t._v(" (1)Java语言")]),t._v(" "),a("p",[t._v("学习 Java 语言有以下"),a("strong",[t._v("入门级的书")]),t._v("(注意: 下面一些书在入门篇中有所提及, 但为了完整性, 还是要在这里提一下, 因为可能有朋友是跳着看的).")]),t._v(" "),a("ul",[a("li",[t._v("《"),a("a",{attrs:{href:"https://book.douban.com/subject/26880667/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java 核心技术: 卷 1 基础知识"),a("OutboundLink")],1),t._v('》, 这本书本来是 Sun 公司的官方用书, 是一本 Java 的入门参考书. 对于 Java 初学者来说, 是一本非常不错的值得时常翻阅的技术手册. 书中有较多地方进行 Java 与 C++ 的比较, 因为当时 Java 面世的时候, 又被叫作 "C++ Killer". 而我在看这本书的时候, 发现书中有很多 C++ 的东西, 于是又去学习了 C++. 学习 C++ 的时候, 发现有很多 C 的东西不懂, 又顺着去学习了 C. 然后, C -> C++ -> Java 整条线融汇贯通, 这对我未来的技术成长有非常大的帮助.')]),t._v(" "),a("li",[t._v("有了上述的入门后, Java 的 Spring 框架是你玩 Java 所无法回避的东西, 所以接下来是两本 Spring 相关的书, 《"),a("a",{attrs:{href:"https://book.douban.com/subject/26767354/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring 实战"),a("OutboundLink")],1),t._v("》和《"),a("a",{attrs:{href:"https://book.douban.com/subject/26857423/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring Boot 实战"),a("OutboundLink")],1),t._v("》. 前者是传统的 Spring, 后者是新式的微服务的 Spring. 如果你只想看一本的话, 那么就看后者吧.")])]),t._v(" "),a("p",[t._v("前面推荐的几本书可以帮你成功入门 Java, 但想要进一步成长, 就要看下面我推荐的几本进阶级别的书了.")]),t._v(" "),a("ul",[a("li",[t._v("接下来, 你需要了解了一下如何"),a("strong",[t._v("编写高效的代码")]),t._v(", 于是必需看一下《"),a("a",{attrs:{href:"https://book.douban.com/subject/27047716/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Effective Java"),a("OutboundLink")],1),t._v("》(注意, 这里我给的引用是第三版的, 也是 2017 年末出版的书), 这本书是模仿 Scott Meyers 的经典图书《Effective C++》的. Effective 这种书基本上都是各种经验之谈, 所以这是一本非常不错的书, 你一定要读. 这里需要推荐一下 "),a("a",{attrs:{href:"https://github.com/google/guava",target:"_blank",rel:"noopener noreferrer"}},[t._v("Google Guava 库"),a("OutboundLink")],1),t._v(" , 这个库不但是 JDK 的升级库, 其中有如: 集合(collections), 缓存(caching), 原生类型支持(primitives support), 并发库(concurrency libraries), 通用注解(common annotations), 字符串处理(string processing), I/O 等库, 其还是 Effective Java 这本书中的那些经验的实践代表.")]),t._v(" "),a("li",[t._v("《"),a("a",{attrs:{href:"https://book.douban.com/subject/10484692/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java 并发编程实战"),a("OutboundLink")],1),t._v("》, 是一本完美的 Java 并发参考手册. 书中从并发性和线程安全性的基本概念出发, 介绍了如何使用类库提供的基本并发构建块, 用于避免并发危险, 构造线程安全的类及验证线程安全的规则, 如何将小的线程安全类组合成更大的线程安全类, 如何利用线程来提高并发应用程序的吞吐量, 如何识别可并行执行的任务, 如何提高单线程子系统的响应性, 如何确保并发程序执行预期任务, 如何提高并发代码的性能和可伸缩性等内容. 最后介绍了一些高级主题, 如显式锁, 原子变量, 非阻塞算法以及如何开发自定义的同步工具类.")]),t._v(" "),a("li",[t._v("了解如何编写出并发的程序, 你还需要了解一下如何优化 Java 的性能. 我推荐《"),a("a",{attrs:{href:"https://book.douban.com/subject/26740520/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java 性能权威指南"),a("OutboundLink")],1),t._v("》. 通过学习这本书, 你可以比较大程度地提升性能测试的效果. 其中包括: 使用 JDK 中自带的工具收集 Java 应用的性能数据, 理解 JIT 编译器的优缺点, 调优 JVM 垃圾收集器以减少对程序的影响, 学习管理堆内存和 JVM 原生内存的方法, 了解如何最大程度地优化 Java 线程及同步的性能, 等等. 看完这本书后, 如果你还有余力, 想了解更多的底层细节, 那么你有必要去读一下《"),a("a",{attrs:{href:"https://book.douban.com/subject/24722612/",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入理解 Java 虚拟机"),a("OutboundLink")],1),t._v("》.")]),t._v(" "),a("li",[t._v("《"),a("a",{attrs:{href:"https://book.douban.com/subject/2130190/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java 编程思想"),a("OutboundLink")],1),t._v("》, 真是一本透着"),a("strong",[t._v("编程思想")]),t._v("的书. 上面的书让你从微观角度了解 Java, 而这本书则可以让你从一个宏观角度了解 Java. 这本书和 Java 核心技术的厚度差不多, 但这本书的信息密度比较大. 所以读起来是非常耗大脑的, 因为它会让你不断地思考. 对于想学好 Java 的程序员来说, 这是一本必读的书.")]),t._v(" "),a("li",[t._v("《"),a("a",{attrs:{href:"https://book.douban.com/subject/26952826/",target:"_blank",rel:"noopener noreferrer"}},[t._v("精通 Spring 4.x"),a("OutboundLink")],1),t._v("》, 也是一本很不错的书, 就是有点厚, 一共有 800 多页, 都是干货. 我认为其中最不错的是在分析原理, 尤其是针对前面提到的 Spring 技术, 应用与原理都讲得很透彻, IOC 和 AOP 也分析得很棒, 娓娓道来. 其对任何一个技术都分析得很细致和全面, 不足之处就是内容太多了, 所以导致很厚, 但这并不影响它是一本不错的工具书.")])]),t._v(" "),a("p",[t._v("当然, 学 Java 你一定要学面向对象的设计模式, 这里就只有一本经典的书《"),a("a",{attrs:{href:"https://book.douban.com/subject/1052241/",target:"_blank",rel:"noopener noreferrer"}},[t._v("设计模式"),a("OutboundLink")],1),t._v("》. 如果你觉得有点儿难度了, 那么可以看一下《"),a("a",{attrs:{href:"https://book.douban.com/subject/2243615/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Head First 设计模式"),a("OutboundLink")],1),t._v("》. 学习面向对象的设计模式时, 你不要迷失在那 23 个设计模式中, 你一定要明白这两个原则:")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v('Program to an "interface", not an "implementation"')])]),t._v(" "),a("ul",[a("li",[t._v("使用者不需要知道数据类型, 结构, 算法的细节.")]),t._v(" "),a("li",[t._v("使用者不需要知道实现细节, 只需要知道提供的接口.")]),t._v(" "),a("li",[t._v("利于抽象, 封装, 动态绑定, 多态. 符合面向对象的特质和理念.")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v('Favor "object composition" over "class inheritance"')])]),t._v(" "),a("ul",[a("li",[t._v("继承需要给子类暴露一些父类的设计和实现细节.")]),t._v(" "),a("li",[t._v("父类实现的改变会造成子类也需要改变.")]),t._v(" "),a("li",[t._v("我们以为继承主要是为了代码重用, 但实际上在子类中需要重新实现很多父类的方法.")]),t._v(" "),a("li",[t._v("继承更多的应该是为了多态.")])])])]),t._v(" "),a("p",[t._v("至此, 如果你把上面的这些知识都融汇贯通的话, 那么你已是一个高级的 Java 程序员了, 我保证你已经超过了绝大多数程序员了. 基本上来说, 你在技术方面是可以进入到一线公司的, 而且还不是一般的岗位, 至少是高级程序员或是初级架构师的级别了.")]),t._v(" "),a("h6",{attrs:{id:"_2-c-c-语言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-c-c-语言"}},[t._v("#")]),t._v(" (2)C/C++语言")]),t._v(" "),a("p",[t._v("不像我出道那个时候, 几乎所有的软件都要用 C 语言来写. 现在, 可能不会有多少人学习 C 语言了, 因为一方面有 Java, Python 这样的高级语言为你屏蔽了很多的底层细节, 另一方面也有像 Go 语言这样的新兴语言可以让你更容易地写出来也是高性能的软件. 但是, 我还是想说, C 语言是你必须学习的语言, 因为这个世界上绝大多数编程语言都是 C-like 的语言, 也是在不同的方面来解决 C 语言的各种问题. **这里, 我想放个比较武断话——如果你不学 C 语言, 你根本没有资格说你是一个合格的程序员! **")]),t._v(" "),a("ul",[a("li",[t._v("这里尤其推荐, 已故的 C 语言之父 Dennis M. Ritchie 和著名科学家 Brian W. Kernighan 合作的圣经级的教科书《"),a("a",{attrs:{href:"https://book.douban.com/subject/1139336/",target:"_blank",rel:"noopener noreferrer"}},[t._v("C 程序设计语言"),a("OutboundLink")],1),t._v("》. 注意, 这本书是 C 语言原作者写的, 其 C 语言的标准不是我们平时常说的 ANSI 标准, 而是原作者的标准, 又被叫作 K&R C. 但是这本书很轻薄, 也简洁, 不枯燥, 是一本你可以拿着躺在床上看还不会看着看着睡着的书.")]),t._v(" "),a("li",[t._v("然后, 还有一本非常经典的 C 语言的书《"),a("a",{attrs:{href:"https://book.douban.com/subject/2280547/",target:"_blank",rel:"noopener noreferrer"}},[t._v("C 语言程序设计现代方法"),a("OutboundLink")],1),t._v("》. 有人说, 这本书配合之前的 "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/The_C_Programming_Language",target:"_blank",rel:"noopener noreferrer"}},[t._v("The C Programming Language"),a("OutboundLink")],1),t._v(" 那本书简真是无敌. 我想说, 这本书更实用, 也够厚, 完整覆盖了 C99 标准, 习题的质量和水准也比较高. 更好的是, 探讨了现代编译器的实现, 以及和 C++ 的兼容, 还揭穿了各种古老的 C 语言的神话和信条……是相当相当干的一本学习 C 语言的书.")])]),t._v(" "),a("p",[a("strong",[t._v("对了, 千万不要看谭浩强的 C 语言的书. 各种误导, 我大学时就是用这本书学的 C, 后来工作时被坑得不行")]),t._v(".")]),t._v(" "),a("p",[t._v("在学习 C 语言的过程中, 你一定会感到, C 语言这么底层, 而且代码经常性地崩溃, 经过一段时间的挣扎, 你才开始觉得你从这个烂泥坑里快要爬出来了. 但你还需要看看《"),a("a",{attrs:{href:"https://book.douban.com/subject/2778632/",target:"_blank",rel:"noopener noreferrer"}},[t._v("C 陷阱与缺陷"),a("OutboundLink")],1),t._v("》这本书, 你会发现, 这里面的坑不是一般大.")]),t._v(" "),a("p",[t._v("此时, 如果你看过我的《编程范式游记》那个系列文章, 你可能会发现 C 语言在泛型编程上的各种问题, 这个时候我推荐你学习一下 C++ 语言. 可能会有很多人觉得我说的 C++ 是个大坑. 是的, 这是世界目前来说最复杂也是最难的编程语言了. 但是, "),a("strong",[t._v('C++ 是目前世界上范式最多的语言了, 其做得最好的范式就是 " 泛型编程 ", 这在静态语言中, 是绝对地划时代的一个事')]),t._v(".")]),t._v(" "),a("p",[t._v('所以, 你有必要学习一下 C++, 看看 C++ 是如何解决 C 语言中的各种问题的. 你可以先看看我的这篇文章 "'),a("a",{attrs:{href:"https://coolshell.cn/articles/7992.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("C++ 的坑真的多吗?"),a("OutboundLink")],1),t._v('", 有个基本认识. 下面推荐几本 C++ 的书.')]),t._v(" "),a("ul",[a("li",[t._v("《"),a("a",{attrs:{href:"https://book.douban.com/subject/25708312/",target:"_blank",rel:"noopener noreferrer"}},[t._v("C++ Primer 中文版"),a("OutboundLink")],1),t._v("》, 这本书是久负盛名的 C++ 经典教程. 书是有点厚, 前面 1/3 讲 C 语言, 后面讲 C++. C++ 的知识点实在是太多了, 而且又有点晦涩. 但是你主要就看几个点, 一个是面向对象的多态, 一个是模板和重载操作符, 以及一些 STL 的东西. 看看 C++ 是怎么玩泛型和函数式编程的.")]),t._v(" "),a("li",[t._v("如果你想继续研究, 你需要看另外两本更为经典的书《"),a("a",{attrs:{href:"https://book.douban.com/subject/5387403/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Effective C++"),a("OutboundLink")],1),t._v("》和《"),a("a",{attrs:{href:"https://book.douban.com/subject/5908727/",target:"_blank",rel:"noopener noreferrer"}},[t._v("More Effective C++"),a("OutboundLink")],1),t._v("》.  这两本书不厚, 但是我读了 10 多年, 每过一段时间再读一下, 就会发现有更多的收获. 这两本书的内容会随着你经历的丰富而变得丰富, 这也是对我影响最大的两本书, 其中影响最大的不是书中的那些 C++ 的东西, 而是作者的思维方式和不断求真的精神, 这真是太赞了.")]),t._v(" "),a("li",[t._v("学习 C/C++ 都是需要好好了解一下编译器到底干了什么事的. 就像 Java 需要了解 JVM 一样, 所以, 这里还有一本非常非常难啃的书你可以挑战一下《"),a("a",{attrs:{href:"https://book.douban.com/subject/10427315/",target:"_blank",rel:"noopener noreferrer"}},[t._v("深度探索 C++ 对象模型"),a("OutboundLink")],1),t._v("》. 这本书是非常之经典的, 看完后, C++ 对你来说就再也没有什么秘密可言. 我以前写过的《"),a("a",{attrs:{href:"https://coolshell.cn/articles/12165.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("C++ 虚函数表解析"),a("OutboundLink")],1),t._v("》, 还有《"),a("a",{attrs:{href:"https://coolshell.cn/articles/12176.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("C++ 对象内存布局"),a("OutboundLink")],1),t._v("》属于这个范畴.")]),t._v(" "),a("li",[t._v("还有 C++ 的作者 Bjarne Stroustrup 写的 "),a("a",{attrs:{href:"http://www.stroustrup.com/bs_faq.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("C++ FAQ"),a("OutboundLink")],1),t._v(" ("),a("a",{attrs:{href:"http://www.stroustrup.com/bsfaqcn.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("中文版"),a("OutboundLink")],1),t._v("), 也是非常值得一读的.")])]),t._v(" "),a("h6",{attrs:{id:"_3-学习go语言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-学习go语言"}},[t._v("#")]),t._v(" (3)学习Go语言")]),t._v(" "),a("p",[t._v("C 语言太原始了, C++ 太复杂了, Go 语言是不二之选. 有了 C/C++ 的功底, 学习 Go 语言非常简单.")]),t._v(" "),a("p",[t._v("首推 "),a("a",{attrs:{href:"https://gobyexample.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Go by Example"),a("OutboundLink")],1),t._v(" 作为你的入门教程. 然后, "),a("a",{attrs:{href:"https://go101.org/article/101.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Go 101"),a("OutboundLink")],1),t._v(" 也是一个很不错的在线电子书. 如果你想看纸书的话, "),a("a",{attrs:{href:"https://book.douban.com/subject/26337545/",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Go Programming Language"),a("OutboundLink")],1),t._v(' 一书在豆瓣上有 9.2 分, 但是国内没有卖的. (当然, 我以前也写过两篇入门的供你参考 "'),a("a",{attrs:{href:"https://coolshell.cn/articles/8460.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("GO 语言简介(上)- 语法"),a("OutboundLink")],1),t._v('" 和 "'),a("a",{attrs:{href:"https://coolshell.cn/articles/8489.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("GO 语言简介(下)- 特性"),a("OutboundLink")],1),t._v('").')]),t._v(" "),a("p",[t._v("另外, Go 语言官方的 "),a("a",{attrs:{href:"https://golang.org/doc/effective_go.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Effective Go"),a("OutboundLink")],1),t._v(" 是必读的, 这篇文章告诉你如何更好地使用 Go 语言, 以及 Go 语言中的一些原理.")]),t._v(" "),a("p",[t._v("Go 语言最突出之处是并发编程, Unix 老牌黑客罗勃·派克(Rob Pike)在 Google I/O 上的两个分享, 可以让你学习到一些并发编程的模式.")]),t._v(" "),a("ul",[a("li",[t._v("Go Concurrency Patterns( "),a("a",{attrs:{href:"https://talks.golang.org/2012/concurrency.slide",target:"_blank",rel:"noopener noreferrer"}},[t._v("幻灯片"),a("OutboundLink")],1),t._v("和"),a("a",{attrs:{href:"https://www.youtube.com/watch?v=f6kdp27TYZs",target:"_blank",rel:"noopener noreferrer"}},[t._v("演讲视频"),a("OutboundLink")],1),t._v(").")]),t._v(" "),a("li",[t._v("Advanced Go Concurrency Patterns("),a("a",{attrs:{href:"https://talks.golang.org/2013/advconc.slide",target:"_blank",rel:"noopener noreferrer"}},[t._v("幻灯片"),a("OutboundLink")],1),t._v(", "),a("a",{attrs:{href:"https://youtu.be/QDDwwePbDtw",target:"_blank",rel:"noopener noreferrer"}},[t._v("演讲视频"),a("OutboundLink")],1),t._v(").")])]),t._v(" "),a("p",[t._v("然后, Go 在 GitHub 的 wiki 上有好多不错的学习资源, 你可以从中学习到多. 比如:")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/golang/go/wiki/Articles",target:"_blank",rel:"noopener noreferrer"}},[t._v("Go 精华文章列表"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/golang/go/wiki/Blogs",target:"_blank",rel:"noopener noreferrer"}},[t._v("Go 相关博客列表"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/golang/go/wiki/GoTalks",target:"_blank",rel:"noopener noreferrer"}},[t._v("Go Talks"),a("OutboundLink")],1),t._v(".")])]),t._v(" "),a("p",[t._v("此外, 还有个内容丰富的 Go 资源列表 "),a("a",{attrs:{href:"https://github.com/avelino/awesome-go",target:"_blank",rel:"noopener noreferrer"}},[t._v("Awesome Go"),a("OutboundLink")],1),t._v(", 推荐看看.")]),t._v(" "),a("h4",{attrs:{id:"程序员练级攻略-理论学科"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#程序员练级攻略-理论学科"}},[t._v("#")]),t._v(" 程序员练级攻略:理论学科")]),t._v(" "),a("p",[t._v("进入专业的编程领域, 算法, 数据结构, 网络模型, 计算机原理等这样的计算机科学专业需要学习的理论知识是必须要学习的. 下面先来看看数据结构和算法.")]),t._v(" "),a("h5",{attrs:{id:"_1-数据结构和算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-数据结构和算法"}},[t._v("#")]),t._v(" 1.数据结构和算法")]),t._v(" "),a("p",[t._v('在很多时候, 我们在工作中却发现根本用不到算法, 或是一些基本的算法也没有必要实现, 只需要使用一下第三方的库就好了. 于是导致社会上出现很多"算法无用论"的声音.')]),t._v(" "),a("p",[t._v('对此我想说, 算法真的很重要. 我这 20 年的经历告诉我, 无论是做业务还是做底层系统, 经常需要使用算法处理各种各样的问题. 比如业务上我需要用算法比较两个数组中差异的布隆过滤器, 或是在做监控系统时实时计算过去一分钟的 P99 统计时的蓄水池算法, 或是数据库的 B+ 树索引, 还有 Linux 内核中的 epoll 的红黑树, 还有在做服务调度里的 "背包问题" 等都会用算法, 真的是会本质上帮助到你, 也是会让你瞬间会产生成就感的事情.')]),t._v(" "),a("p",[t._v("虽然算法很难, 需要智商, 但我还是想鼓励你, 这其中是有很多的套路是可以学习的, 一旦学会这些套路, 你会受益无穷的.")]),t._v(" "),a("p",[t._v("这里有几本书着重推荐一下.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("基础知识")]),t._v(".《"),a("a",{attrs:{href:"https://book.douban.com/subject/10432347/",target:"_blank",rel:"noopener noreferrer"}},[t._v("算法"),a("OutboundLink")],1),t._v("》, 是算法领域经典的参考书, 不但全面介绍了关于算法和数据结构的必备知识, 还给出了每位程序员应知应会的 50 个算法, 并提供了实际代码. 最不错的是, 其深入浅出的算法介绍, 让一些比较难的算法也变得容易理解, 尤其是书中对红黑树的讲解非常精彩. 其中还有大量的图解, 详尽的代码和讲解, 也许是最好的数据结构入门图书.")]),t._v(" "),a("li",[a("strong",[t._v("理论加持")]),t._v(". 如果说上面这本书偏于实践和工程, 而你看完后, 对算法和数据结构的兴趣更浓了, 那么你可以再看看另一本也是很经典的偏于理论方面的书《"),a("a",{attrs:{href:"https://book.douban.com/subject/20432061/",target:"_blank",rel:"noopener noreferrer"}},[t._v("算法导论"),a("OutboundLink")],1),t._v("》. 虽然其中的一些理论知识在《算法》那本书中也有提过, 但《算法导论》这本书更为专业一些.")]),t._v(" "),a("li",[a("strong",[t._v("思维改善")]),t._v(". 还有一本叫《"),a("a",{attrs:{href:"https://book.douban.com/subject/3227098/",target:"_blank",rel:"noopener noreferrer"}},[t._v("编程珠玑"),a("OutboundLink")],1),t._v("》的书, 写这本书的人是世界著名计算机科学家乔恩·本特利(Jon Bentley), 被誉为影响算法发展的十位大师之一. 你可能不认识这个人, 但是你知道他的学生有多厉害吗? 我例举几个, 一个是 Java 语言设计者詹姆斯·高斯林(James Gosling), 还有一个是《算法导论》作者之一查尔斯·雷斯尔森(Charles Leiserson), 还有好多好多. 这本书也是很经典的算法书, 其中都是一些非常实际的问题, 并以其独有的洞察力和创造力, 来引导读者理解并学会解决这些问题的方法, 也是一本可以改善你思维方式的书.")])]),t._v(" "),a("p",[t._v("然后, 你需要去做一些题来训练一下自己的算法能力, 这里就要推荐 "),a("a",{attrs:{href:"https://leetcode.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("LeetCode"),a("OutboundLink")],1),t._v(" 这个网站了. 它是一个很不错的做算法训练的地方. 现在也越做越好了. 基本上来说, 这里会有两类题.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("基础算法题")]),t._v(". 其中有大量的算法题, 解这些题都是有套路的, 不是用递归(深度优先 DFS, 广度优先 BFS), 就是要用动态规划(Dynamic Programming), 或是折半查找(Binary Search), 或是回溯(Back tracing), 或是分治法(Divide and Conquer), 还有大量的对树, 数组, 链表, 字符串和 hash 表的操作. 通过做这些题能让你对这些最基础的算法的思路有非常扎实的了解和训练. 对我而言, Dynamic Programming 是我的短板, 尤其是一些比较复杂的问题, 在推导递推公式上总是有思维的缺陷(数学是我的硬伤). 做了这些题后, 我能感到我在动态编程的思路上受到了很大的启发.")]),t._v(" "),a("li",[a("strong",[t._v("编程题")]),t._v(". 比如: atoi, strstr, add two nums, 括号匹配, 字符串乘法, 通配符匹配, 文件路径简化, Text Justification, 反转单词等, 这些题的 Edge Case 和 Corner Case 有很多. 通过做这些题, 可以非常好地训练你对各种情况的考虑, 以及你对程序代码组织的掌控(其实就是其中的状态变量).")])]),t._v(" "),a("p",[t._v("我觉得每个程序员都应该花时间和精力做这些题, 因为你会从这些题中得到很大的收益. 我在 Leetcode 上做的一些题的代码在我的 "),a("a",{attrs:{href:"https://github.com/haoel/leetcode",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub"),a("OutboundLink")],1),t._v(" 上, 可以给你一些参考.")]),t._v(" "),a("p",[t._v("如果能够把这些算法能力都掌握了, 那么你就有很大的概率可以很容易地通过这世界上最优的公司的面试, 比如: Google, Amazon, Facebook 之类的公司. 对你来说, 如果能够进入到这些公司里工作, 那么你未来的想像空间也会大很多.")]),t._v(" "),a("p",[t._v("最后, 要知道这个世界上的数据结构和算法有很多, 下面给出了两个网站.")]),t._v(" "),a("ul",[a("li",[a("strong",[a("a",{attrs:{href:"https://www.wikiwand.com/en/List_of_algorithms",target:"_blank",rel:"noopener noreferrer"}},[t._v("List of Algorithms"),a("OutboundLink")],1)]),t._v(", 这个网站罗列了非常多的算法, 完全可以当成一个算法字典, 或是用来开阔眼界.")]),t._v(" "),a("li",[t._v("还有一个数据结构动画图的网站 "),a("a",{attrs:{href:"https://www.cs.usfca.edu/~galles/visualization/Algorithms.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Data Structure Visualizations"),a("OutboundLink")],1),t._v(".")])]),t._v(" "),a("h5",{attrs:{id:"_2-其它理论基础知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-其它理论基础知识"}},[t._v("#")]),t._v(" 2.其它理论基础知识")]),t._v(" "),a("p",[t._v("下面这些书, 基本上是计算机科学系的大学教材. 如果你想有科班出身的理论基础, 那么这些书是必读的. 当然这些理论基础知识比较枯燥, 但我觉得如果你想成为专业的程序员, 那么应该要找时间读一下.")]),t._v(" "),a("ul",[a("li",[t._v("《"),a("a",{attrs:{href:"https://book.douban.com/subject/1139426/",target:"_blank",rel:"noopener noreferrer"}},[t._v("数据结构与算法分析"),a("OutboundLink")],1),t._v("》, 这本书曾被评为 20 世纪顶尖的 30 部计算机著作之一, 作者 Mark Allen Weiss 在数据结构和算法分析方面卓有建树, 他在数据结构和算法分析等方面的著作尤其畅销, 并广受好评, 已被世界 500 余所大学用作教材.")]),t._v(" "),a("li",[t._v("《"),a("a",{attrs:{href:"https://book.douban.com/subject/1929984/",target:"_blank",rel:"noopener noreferrer"}},[t._v("数据库系统概念"),a("OutboundLink")],1),t._v("》, 它是数据库系统方面的经典教材之一. 这本书全面介绍了数据库系统的各种知识, 透彻阐释数据库管理的基本概念. 不仅讨论了数据库查询语言, 模式设计, 数据仓库, 数据库应用开发, 基于对象的数据库和 XML, 数据存储和查询, 事务管理, 数据挖掘与信息检索以及数据库系统体系结构等方面的内容, 而且对性能评测标准, 性能调整, 标准化以及空间与地理数据, 事务处理监控等高级应用主题进行了广泛讨论.")]),t._v(" "),a("li",[t._v("《"),a("a",{attrs:{href:"https://book.douban.com/subject/3852290/",target:"_blank",rel:"noopener noreferrer"}},[t._v("现代操作系统"),a("OutboundLink")],1),t._v("》, 这本书是操作系统领域的经典之作, 书中集中讨论了操作系统的基本原理, 包括进程, 线程, 存储管理, 文件系统, 输入/输出, 死锁等, 同时还包含了有关计算机安全, 多媒体操作系统, 掌上计算机操作系统, 微内核, 多核处理机上的虚拟机以及操作系统设计等方面的内容.")]),t._v(" "),a("li",[t._v("《"),a("a",{attrs:{href:"https://book.douban.com/subject/1391207/",target:"_blank",rel:"noopener noreferrer"}},[t._v("计算机网络"),a("OutboundLink")],1),t._v("》, 这本书采用了独创的自顶向下方法, 即从应用层开始沿协议栈向下讲解计算机网络的基本原理, 强调应用层范例和应用编程接口, 内容深入浅出, 注重教学方法, 理论与实践相结合. 新版中还增加了无线和移动网络一章, 并扩充了对等网络, BGP, MPLS, 网络安全, 广播选路和因特网编址及转发方面的材料.")]),t._v(" "),a("li",[t._v("《"),a("a",{attrs:{href:"https://book.douban.com/subject/1148282/",target:"_blank",rel:"noopener noreferrer"}},[t._v("计算机程序的构造和解释"),a("OutboundLink")],1),t._v("》, 这本书也很经典, 是 MIT 的计算机科学系的教材. 这本书中主要证实了很多程序是怎么构造出来的, 以及程序的本质是什么. 整本书主要是使用 Scheme/Lisp 语言, 从数据抽象, 过程抽象, 迭代, 高阶函数等编程和控制系统复杂性的思想, 到数据结构和算法, 到编译器/解释器, 编程语言设计.")]),t._v(" "),a("li",[t._v("《"),a("a",{attrs:{href:"https://book.douban.com/subject/3296317/",target:"_blank",rel:"noopener noreferrer"}},[t._v("编译原理"),a("OutboundLink")],1),t._v('》, 这本书又叫 "龙书", 其全面, 深入地探讨了编译器设计方面的重要主题, 包括词法分析, 语法分析, 语法制导定义和语法制导翻译, 运行时刻环境, 目标代码生成, 代码优化技术, 并行性检测以及过程间分析技术, 并在相关章节中给出大量的实例.')])]),t._v(" "),a("h4",{attrs:{id:"程序员练级攻略-系统知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#程序员练级攻略-系统知识"}},[t._v("#")]),t._v(" 程序员练级攻略:系统知识")]),t._v(" "),a("p",[t._v("进入专业的编程领域, 学习系统知识是非常关键的一部分.")]),t._v(" "),a("p",[a("strong",[t._v("首先推荐")]),t._v("的是翻译版图书《"),a("a",{attrs:{href:"https://book.douban.com/subject/5333562/",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入理解计算机系统"),a("OutboundLink")],1),t._v("》, 原书名为《Computer Systems A Programmer’s Perspective》. 不过, 这本书叫做《程序员所需要了解的计算机知识》更为合适. 本书的最大优点是为程序员描述计算机系统的实现细节, 帮助其在大脑中构造一个层次型的计算机系统. 从最底层的数据在内存中的表示到流水线指令的构成, 到虚拟存储器, 到编译系统, 到动态加载库, 到最后的用户态应用. 通过掌握程序是如何映射到系统上, 以及程序是如何执行的, 你能够更好地理解程序的行为为什么是这样的, 以及效率低下是如何造成的.")]),t._v(" "),a("p",[a("mark",[t._v("**再强调一下, 这本书是程序员必读的一本书! **")])]),t._v(" "),a("p",[t._v("然后就是美国计算机科学家 "),a("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E7%90%86%E6%9F%A5%E5%BE%B7%C2%B7%E5%8F%B2%E8%92%82%E6%96%87%E6%96%AF",target:"_blank",rel:"noopener noreferrer"}},[t._v("理查德·史蒂文斯(Richard Stevens)"),a("OutboundLink")],1),t._v(" 的三套巨经典无比的书.")]),t._v(" "),a("ul",[a("li",[t._v("《"),a("a",{attrs:{href:"https://book.douban.com/subject/1788421/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Unix 高级环境编程"),a("OutboundLink")],1),t._v("》.")]),t._v(" "),a("li",[t._v("《Unix 网络编程》 "),a("a",{attrs:{href:"https://book.douban.com/subject/1500149/",target:"_blank",rel:"noopener noreferrer"}},[t._v("第 1 卷 套接口 API"),a("OutboundLink")],1),t._v(", "),a("a",{attrs:{href:"https://book.douban.com/subject/4118577/",target:"_blank",rel:"noopener noreferrer"}},[t._v("第 2 卷 进程间通信"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[t._v("《"),a("a",{attrs:{href:"https://book.douban.com/subject/1088054/",target:"_blank",rel:"noopener noreferrer"}},[t._v("TCP/IP 详解 卷 I 协议"),a("OutboundLink")],1),t._v("》.")])]),t._v(" "),a("p",[t._v("这几本书的地位就不多说了. 但是这三本书可能都不容易读, 一方面是比较厚, 另一方面是知识的密度太大了, 所以读起来有点枯燥和乏味. 但是这没办法, 你得忍住.")]),t._v(" "),a("p",[t._v("这里要重点说一下《TCP/IP 详解》这本书, 是一本很奇怪的书. 这本书迄今至少被近五百篇学术论文引用过. 这本写给工程师看的书居然被各种学院派的论文来引用, 也是很神奇的一件事了. 而且, 虽然理查德·史蒂文斯不是 TCP 的发明人, 但是这本书中把这个协议深入浅出地讲出来, 还画了几百张时序图, 也是令人叹为观止了.")]),t._v(" "),a("p",[t._v("如果你觉得上面这几本经典书比较难啃, 你可以试试下面这些"),a("strong",[t._v("通俗易懂")]),t._v("的(当然如果读得懂上面那三本的, 下面的这些也就不需要读了).")]),t._v(" "),a("ul",[a("li",[t._v("《"),a("a",{attrs:{href:"https://book.douban.com/subject/4141733/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Linux C 编程一站式学习"),a("OutboundLink")],1),t._v("》.")]),t._v(" "),a("li",[t._v("《"),a("a",{attrs:{href:"https://book.douban.com/subject/25911735/",target:"_blank",rel:"noopener noreferrer"}},[t._v("TCP/IP 网络编程"),a("OutboundLink")],1),t._v("》.")]),t._v(" "),a("li",[t._v("《"),a("a",{attrs:{href:"https://book.douban.com/subject/24737674/",target:"_blank",rel:"noopener noreferrer"}},[t._v("图解 TCP/IP"),a("OutboundLink")],1),t._v("》, 这本书其实并不是只讲了 TCP/IP, 应该是叫《计算机网络》才对, 主要是给想快速入门的人看的.")])]),t._v(" "),a("p",[t._v("另外, 学习网络协议不单只是看书, 你最好用个抓包工具看看这些网络包是什么样的. 所以, 这里推荐一本书《"),a("a",{attrs:{href:"https://book.douban.com/subject/21691692/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Wireshark 数据包分析实战"),a("OutboundLink")],1),t._v("》. 在这本书中, 作者结合一些简单易懂的实际网络案例, 图文并茂地演示使用 Wireshark 进行数据包分析的技术方法, 可以让我们更好地了解和学习网络协议. 当然也拥有了一定的黑客的技能.")]),t._v(" "),a("p",[t._v("看完《Unix 高级环境编程》后, 你可以趁热打铁看看《"),a("a",{attrs:{href:"https://book.douban.com/subject/25809330/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Linux/Unix 系统编程手册"),a("OutboundLink")],1),t._v("》或是罗伯特·拉姆(Robert Love)的 "),a("a",{attrs:{href:"http://igm.univ-mlv.fr/~yahya/progsys/linux.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Linux System Programming 英文电子版"),a("OutboundLink")],1),t._v(". 其中文翻译版 "),a("a",{attrs:{href:"https://book.douban.com/subject/25828773/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Linux 系统编程"),a("OutboundLink")],1),t._v(" 也值得一读, 虽然和《Unix 高级环境编程》很像, 不过其主要突出的是 Linux 的一些关键技术和相关的系统调用.")]),t._v(" "),a("p",[t._v("关于 TCP 的东西, 还可以看看下面这一系列的文章.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://www.saminiir.com/lets-code-tcp-ip-stack-1-ethernet-arp/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Let’s code a TCP/IP stack, 1: Ethernet & ARP"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.saminiir.com/lets-code-tcp-ip-stack-2-ipv4-icmpv4/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Let’s code a TCP/IP stack, 2: IPv4 & ICMPv4"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.saminiir.com/lets-code-tcp-ip-stack-3-tcp-handshake/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Let’s code a TCP/IP stack, 3: TCP Basics & Handshake"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.saminiir.com/lets-code-tcp-ip-stack-4-tcp-data-flow-socket-api/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Let’s code a TCP/IP stack, 4: TCP Data Flow & Socket API"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.saminiir.com/lets-code-tcp-ip-stack-5-tcp-retransmission/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Let’s code a TCP/IP stack, 5: TCP Retransmission"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("**对于系统知识, 我认为主要有以下一些学习要点. **")]),t._v(" "),a("ul",[a("li",[t._v("用这些系统知识操作一下文件系统, 实现一个可以拷贝目录树的小程序.")]),t._v(" "),a("li",[t._v("用 fork/wait/waitpid 写一个多进程的程序, 用 pthread 写一个多线程带同步或互斥的程序. 比如, 多进程购票的程序.")]),t._v(" "),a("li",[t._v("用 signal/kill/raise/alarm/pause/sigprocmask 实现一个多进程间的信号量通信的程序.")]),t._v(" "),a("li",[t._v("学会使用 gcc 和 gdb 来编程和调试程序.")]),t._v(" "),a("li",[t._v("学会使用 makefile 来编译程序.")]),t._v(" "),a("li",[t._v("Socket 的进程间通信. 用 C 语言写一个 1 对 1 的聊天小程序, 或是一个简单的 HTTP 服务器.")])]),t._v(" "),a("h5",{attrs:{id:"_1-c10k问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-c10k问题"}},[t._v("#")]),t._v(" 1.C10K问题")]),t._v(" "),a("p",[t._v('然后, 当你读完《Unix 网络编程》后, 千万要去读一下 "'),a("a",{attrs:{href:"http://www.kegel.com/c10k.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("C10K Problem"),a("OutboundLink")],1),t._v(" ("),a("a",{attrs:{href:"https://www.oschina.net/translate/c10k",target:"_blank",rel:"noopener noreferrer"}},[t._v("中文翻译版"),a("OutboundLink")],1),t._v(')". 提出这个问题的人叫丹·凯格尔(Dan Kegel), 目前在 Google 任职. 他从 1978 年起开始接触计算机编程, 是 Winetricks 的作者, 也是 Wine 1.0 的管理员, 同时也是 Crosstool( 一个让 gcc/glibc 编译器更易用的工具套件)的作者. 还是 Java JSR 51 规范的提交者并参与编写了 Java 平台的 NIO 和文件锁, 同时参与了 RFC 5128 标准中有关 NAT 穿越(P2P 打洞)技术的描述和定义.')]),t._v(" "),a("p",[t._v("C10K 问题本质上是"),a("strong",[t._v("操作系统处理大并发请求的问题")]),t._v(". 对于 Web 时代的操作系统而言, 对于客户端过来的大量的并发请求, 需要创建相应的服务进程或线程. 这些进程或线程多了, 导致数据拷贝频繁(缓存 I/O, 内核将数据拷贝到用户进程空间, 阻塞),  进程/线程上下文切换消耗大, 从而导致资源被耗尽而崩溃. 这就是 C10K 问题的本质.")]),t._v(" "),a("p",[t._v("了解这个问题, 并了解操作系统是如何通过多路复用的技术来解决这个问题的, 有助于你了解各种 I/O 和异步模型, 这对于你未来的编程和架构能力是相当重要的.")]),t._v(" "),a("p",[t._v("另外, 现在, 整个世界都在解决 C10M 问题, 推荐看看 "),a("a",{attrs:{href:"http://highscalability.com/blog/2013/5/13/the-secret-to-10-million-concurrent-connections-the-kernel-i.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Secret To 10 Million Concurrent Connections -The Kernel Is The Problem, Not The Solution"),a("OutboundLink")],1),t._v(" 一文.")]),t._v(" "),a("h5",{attrs:{id:"_2-实践项目-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-实践项目-2"}},[t._v("#")]),t._v(" 2.实践项目")]),t._v(" "),a("p",[t._v("我们已经学习完了编程语言, 理论学科和系统知识三部分内容, 下面就来做几个实践项目, 小试牛刀一下. 实现语言可以用 C, C++ 或 Java.")]),t._v(" "),a("p",[t._v("实现一个 telnet 版本的聊天服务器, 主要有以下需求.")]),t._v(" "),a("ul",[a("li",[t._v("每个客户端可以用使用 "),a("code",[t._v("telnet ip:port")]),t._v("​ 的方式连接到服务器上.")]),t._v(" "),a("li",[t._v("新连接需要用用户名和密码登录, 如果没有, 则需要注册一个.")]),t._v(" "),a("li",[t._v("然后可以选择一个聊天室加入聊天.")]),t._v(" "),a("li",[t._v("管理员有权创建或删除聊天室, 普通人员只有加入, 退出, 查询聊天室的权力.")]),t._v(" "),a("li",[t._v("聊天室需要有人数限制, 每个人发出来的话, 其它所有的人都要能看得到.")])]),t._v(" "),a("p",[t._v("实现一个简单的 HTTP 服务器, 主要有以下需求.")]),t._v(" "),a("ul",[a("li",[t._v("解释浏览器传来的 HTTP 协议, 只需要处理 URL path.")]),t._v(" "),a("li",[t._v("然后把所代理的目录列出来.")]),t._v(" "),a("li",[t._v("在浏览器上可以浏览目录里的文件和下级目录.")]),t._v(" "),a("li",[t._v("如果点击文件, 则把文件打开传给浏览器(浏览器能够自动显示图片, PDF, 或 HTML, CSS, JavaScript 以及文本文件).")]),t._v(" "),a("li",[t._v("如果点击子目录, 则进入到子目录中, 并把子目录中的文件列出来.")])]),t._v(" "),a("p",[t._v("实现一个生产者 / 消费者消息队列服务, 主要有以下需求.")]),t._v(" "),a("ul",[a("li",[t._v("消息队列采用一个 Ring-buffer 的数据结构.")]),t._v(" "),a("li",[t._v("可以有多个 topic 供生产者写入消息及消费者取出消息.")]),t._v(" "),a("li",[t._v("需要支持多个生产者并发写.")]),t._v(" "),a("li",[t._v("需要支持多个消费者消费消息(只要有一个消费者成功处理消息就可以删除消息).")]),t._v(" "),a("li",[t._v("消息队列要做到不丢数据(要把消息持久化下来).")]),t._v(" "),a("li",[t._v("能做到性能很高.")])]),t._v(" "),a("h5",{attrs:{id:"_3-小结-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-小结-9"}},[t._v("#")]),t._v(" 3.小结")]),t._v(" "),a("p",[t._v("到今天, 我们已经学习完了专业编程方面最为重要的三部分内容: 编程语言, 理论学科和系统知识, 我们针对这些内容做个小结. 如果想看完我推荐的那些书和知识, 并能理解和掌握, 我估计怎么也得需要 4-5 年的时间. 嗯, 是的, 就是一个计算机科学系科班出身的程序员需要学习的一些东西. 这其中, 最重要的是下面这几点.")]),t._v(" "),a("p",[a("strong",[t._v("编程语言")]),t._v(". 以工业级的 C, C++, Java 这三门语言为主, 这三门语言才是真正算得上工业级的编程语言, 因为有工业级的标准化组织在控制着这几门语言, 而且也有工业级的企业应用. 尤其是 Java, 还衍生出了大量的企业级架构上的开源生态. 你至少需要掌握 C 语言和 Java 语言, 这对你以后面对各式各样的编程语言是非常重要的.")]),t._v(" "),a("p",[t._v("此外, 还推荐学习 Go 语言, 它已成为云计算领域事实上的标准语言, 尤其是在 Docker, Kubernetes 等项目中. 而且, Go 语言在国内外一些知名公司中有了一定的应用和实践, 并且其生态圈也越来越好.")]),t._v(" "),a("p",[a("strong",[t._v("算法和数据结构")]),t._v(". 这个太重要了, 尤其是最基础的算法和数据结构, 这是任何一个称职的程序员都需要学习和掌握的. 你必需要掌握.")]),t._v(" "),a("p",[a("strong",[t._v("计算机的相关系统")]),t._v(". 你至少要掌握三个系统的基础知识, 一个是操作系统, 一个是网络系统, 还有一个是数据库系统. 它们分别代表着计算机基础构架的三大件——计算, 存储, 网络.")]),t._v(" "),a("p",[t._v("如果你能够走到这里, 把前面的那些知识都了解了(不用精通, 因为精通是需要时间和实践来慢慢锤炼出来的, 所以, 你也不用着急), 那么你已经是一个合格的程序员了, 而且你的潜力和可能性是非常非常高的.")]),t._v(" "),a("p",[t._v("如果经历过这些比较枯燥的理论知识, 而且你还能有热情和成就感, 那么我要恭喜你了. 因为你已经超过了绝大多数人, 而且还是排在上游的比较抢手的程序员了. 我相信你至少可以找到年薪 50 万以上的工作了.")]),t._v(" "),a("p",[t._v("但是, 你还需要很多的经验或是一些实践, 以及一些大系统大项目的实际动手的经验. 没关系, 我们后面会有教你怎么实操的方法和攻略.")]),t._v(" "),a("p",[t._v("但是, 往后面走, 你需要开始需要术业有专攻了. 下面给一些建议的方向.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("底层方向")]),t._v(": 操作系统, 文件系统, 数据库, 网络...")]),t._v(" "),a("li",[a("strong",[t._v("架构方向")]),t._v(": 分布式系统架构, 微服务, DevOps, Cloud Native...")]),t._v(" "),a("li",[a("strong",[t._v("数据方向")]),t._v(": 大数据, 机器学习, 人工智能...")]),t._v(" "),a("li",[a("strong",[t._v("前端方向")]),t._v(": 你对用户体验或是交互更感兴趣, 那么你走前端的路吧.")]),t._v(" "),a("li",[a("strong",[t._v("其它方向")]),t._v(": 比如, 安全开发, 运维开发, 嵌入式开发...")])]),t._v(" "),a("p",[t._v("这些方向你要仔细选择, 因为一旦选好, 就要勇往直前地走下去, 当然你要回头转别的方向也没什么问题, 因为你有前面的这些基础知识在身, 所以, 不用害怕. 只是不同的方向上会有不同的经验积累, 经验积累是看书看不来的, 这个是转方向的成本.")]),t._v(" "),a("h4",{attrs:{id:"程序员练级攻略-软件设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#程序员练级攻略-软件设计"}},[t._v("#")]),t._v(" 程序员练级攻略:软件设计")]),t._v(" "),a("p",[t._v("学习软件设计的方法, 理念, 范式和模式, 是让你从一个程序员通向工程师的必备技能. 如果你不懂这些设计方法, 那么你将无法做出优质的软件. 这就好像写作文一样, 文章人人都能写, 但是能写得有条理, 有章法, 有血有肉, 就不简单了. 软件开发也一样, 实现功能, 做出来并不难, 但是要做漂亮, 做优雅, 就非常不容易了.")]),t._v(" "),a("p",[t._v('Linus 说过, 这世界程序员之所有高下之分, 最大的区别就是程序员的"品味"不一样. 有品位的程序员和没有品位的程序员写出来的代码, 做出来的软件, 差距非常大. '),a("strong",[t._v("所以, 如果你想成为一名优秀的程序员, 软件设计定是你的必修课")]),t._v(".")]),t._v(" "),a("p",[t._v("然而软件设计这个事, 并不是一朝一夕就能学会的, 也不是别人能把你教会的, 很多东西需要你自己用实践, 用时间, 用错误, 用教训, 用痛苦才能真正体会其中的精髓. 所以, 除了学习理论知识外, 你还需要大量的工程实践, 然后每过一段时间就把这些设计的东西重新回炉一下. 你会发现这些软件设计的东西, 就像饮茶一样, 一开始是苦的, 然后慢慢回甘, 最终你会喝出真正的滋味.")]),t._v(" "),a("p",[t._v("**要学好这些软件开发和设计的方法, 你真的需要磨练和苦行, 反复咀嚼, 反复推敲, 在实践和理论中螺旋式地学习, 才能真正掌握. ** 所以, 你需要有足够的耐心和恒心.")]),t._v(" "),a("h5",{attrs:{id:"_1-编程范式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-编程范式"}},[t._v("#")]),t._v(" 1.编程范式")]),t._v(" "),a("p",[t._v("学习编程范式可以让你明白编程的本质和各种语言的编程方式. 因此, 我推荐以下一些资料, 以帮助你系统化地学习和理解.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Programming_paradigm",target:"_blank",rel:"noopener noreferrer"}},[t._v("Wikipedia: Programming paradigm"),a("OutboundLink")],1),t._v(", 维基百科上有一个编程范式的页面, 顺着这个页面看下去, 你可以看到很多很多有用的和编程相关的知识. 这些东西对你的编程技能的提高会非常非常有帮助.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.ybrikman.com/writing/2014/04/09/six-programming-paradigms-that-will/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Six programming paradigms that will change how you think about coding"),a("OutboundLink")],1),t._v(", 中文翻译版为 "),a("a",{attrs:{href:"https://my.oschina.net/editorial-story/blog/890965",target:"_blank",rel:"noopener noreferrer"}},[t._v("六个编程范型将改变你对编程的看法"),a("OutboundLink")],1),t._v(". 这篇文章讲了默认支持并发(Concurrent by default), 依赖类型(Dependent types), 连接性语言(Concatenative languages), 声明式编程(Declarative programming), 符号式编程(Symbolic programming), 基于知识的编程(Knowledge-based programming)等六种不太常见的编程范式, 并结合了一些你没怎么听说过的语言来分别进行讲述. 比如在讲 Concatenative languages 时, 以 Forth, cat 和 joy 三种语言为例讲述这一编程范式背后的思想——语言中的所有内容都是一个函数, 用于将数据推送到堆栈或从堆栈弹出数据; 程序几乎完全通过功能组合来构建(concatenation is composition). 作者认为, 这些编程范式背后的思想十分有魅力, 能够改变对编程的思考. 我看完此文, 对此也深信不疑. 虽然这些语言和编程范式不常用到, 但确实能在思想层面给予人很大的启发. 这也是我推荐此文的目的.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://open.163.com/special/opencourse/paradigms.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("斯坦福大学公开课: 编程范式"),a("OutboundLink")],1),t._v(", 这是一门比较基础且很详细的课程, 适合学习编程语言的初学者. 它通过讲述 C, C++, 并发编程, Scheme, Python 这 5 门语言, 介绍了它们各自不同的编程范式. 以 C 语言为例, 它解释了 C 语言的基本要素, 如指针, 内存分配, 堆, C 风格的字符串等, 并解释了为什么 C 语言会在泛型编程, 多态等方面有局限性. 通过学习这门课程, 你会对一些常用的编程范式有所了解.")])]),t._v(" "),a("h5",{attrs:{id:"_2-一些软件设计的相关原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-一些软件设计的相关原则"}},[t._v("#")]),t._v(" 2.一些软件设计的相关原则")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[a("a",{attrs:{href:"http://en.wikipedia.org/wiki/Don%27t_repeat_yourself",target:"_blank",rel:"noopener noreferrer"}},[t._v("Don’t Repeat Yourself (DRY)"),a("OutboundLink")],1)]),t._v("  , DRY 是一个最简单的法则, 也是最容易被理解的. 但它也可能是最难被应用的(因为要做到这样, 我们需要在泛型设计上做相当的努力, 这并不是一件容易的事). 它意味着, 当在两个或多个地方发现一些相似代码的时候, 我们需要把它们的共性抽象出来形成一个唯一的新方法, 并且改变现有地方的代码让它们以一些合适的参数调用这个新的方法.")])]),t._v(" "),a("li",[a("p",[a("strong",[a("a",{attrs:{href:"http://en.wikipedia.org/wiki/KISS_principle",target:"_blank",rel:"noopener noreferrer"}},[t._v("Keep It Simple, Stupid(KISS)"),a("OutboundLink")],1)]),t._v('  , KISS 原则在设计上可能最被推崇, 在家装设计, 界面设计和操作设计上, 复杂的东西越来越被众人所鄙视了, 而简单的东西越来越被人所认可. 宜家(IKEA)简约, 高效的家居设计和生产思路; 微软(Microsoft)"所见即所得"的理念; 谷歌(Google)简约, 直接的商业风格, 无一例外地遵循了 "KISS" 原则. 也正是 "KISS" 原则, 成就了这些看似神奇的商业经典. 而苹果公司的 iPhone 和 iPad 将这个原则实践到了极至.')])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("Program to an interface, not an implementation")]),t._v(", 这是设计模式中最根本的哲学, 注重接口, 而不是实现, 依赖接口, 而不是实现. 接口是抽象是稳定的, 实现则是多种多样的. 在面向对象的 S.O.L.I.D 原则中会提到依赖倒置原则, 就是这个原则的另一种样子. 还有一条原则叫 Composition over inheritance(喜欢组合而不是继承), 这两条是那 23 个经典设计模式中的设计原则.")])]),t._v(" "),a("li",[a("p",[a("strong",[a("a",{attrs:{href:"http://en.wikipedia.org/wiki/You_Ain%27t_Gonna_Need_It",target:"_blank",rel:"noopener noreferrer"}},[t._v("You Ain’t Gonna Need It (YAGNI)"),a("OutboundLink")],1)]),t._v("  , 这个原则简而言之为只考虑和设计必须的功能, 避免过度设计. 只实现目前需要的功能, 在以后你需要更多功能时, 可以再进行添加. "),a("strong",[t._v("如无必要, 勿增复杂性")]),t._v(". 软件开发是一场 trade-off 的博弈.")])]),t._v(" "),a("li",[a("p",[a("strong",[a("a",{attrs:{href:"http://en.wikipedia.org/wiki/Principle_of_Least_Knowledge",target:"_blank",rel:"noopener noreferrer"}},[t._v("Law of Demeter"),a("OutboundLink")],1)]),t._v(', 迪米特法则 (Law of Demeter), 又称"最少知识原则"(Principle of Least Knowledge), 其来源于 1987 年荷兰大学的一个叫做 Demeter 的项目. 克雷格·拉尔曼(Craig Larman)把 Law of Demeter 又称作"不要和陌生人说话". 在《程序员修炼之道》中讲 LoD 的那一章将其叫作"解耦合与迪米特法则". 关于迪米特法则有一些很形象的比喻: 1) 如果你想让你的狗跑的话, 你会对狗狗说还是对四条狗腿说? 2) 如果你去店里买东西, 你会把钱交给店员, 还是会把钱包交给店员让他自己拿? 和狗的四肢说话? 让店员自己从钱包里拿钱? 这听起来有点儿荒唐, 不过在我们的代码里这几乎是见怪不怪的事情了. 对于 LoD, 正式的表述如下:')]),t._v(" "),a("p",[t._v("对于对象 ‘O’ 中一个方法’M’, M 应该只能够访问以下对象中的方法:")]),t._v(" "),a("ol",[a("li",[t._v("对象 O;")]),t._v(" "),a("li",[t._v("与 O 直接相关的 Component Object;")]),t._v(" "),a("li",[t._v("由方法 M 创建或者实例化的对象;")]),t._v(" "),a("li",[t._v("作为方法 M 的参数的对象.")])])]),t._v(" "),a("li",[a("p",[a("strong",[a("a",{attrs:{href:"%3Ca%20href="}},[t._v("面向对象的 S.O.L.I.D 原则")])]),t._v(":")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("SRP(Single Responsibility Principle)- 职责单一原则")]),t._v(". 关于单一职责原则, 其核心的思想是: 一个类, 只做一件事, 并把这件事做好, 其只有一个引起它变化的原因. 单一职责原则可以看作是低耦合, 高内聚在面向对象原则上的引申, 将职责定义为引起变化的原因, 以提高内聚性来减少引起变化的原因. 职责过多, 可能引起它变化的原因就越多, 这将导致职责依赖, 相互之间就产生影响, 从而极大地损伤其内聚性和耦合度. 单一职责, 通常意味着单一的功能, 因此不要为一个模块实现过多的功能点, 以保证实体只有一个引起它变化的原因.")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("OCP(Open/Closed Principle)- 开闭原则")]),t._v(". 关于开发封闭原则, 其核心的思想是: "),a("strong",[t._v("模块是可扩展的, 而不可修改的")]),t._v(". 也就是说, 对扩展是开放的, 而对修改是封闭的. 对扩展开放, 意味着有新的需求或变化时, 可以对现有代码进行扩展, 以适应新的情况. 对修改封闭, 意味着类一旦设计完成, 就可以独立完成其工作, 而不要对类进行任何修改.")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("LSP(Liskov substitution principle)- 里氏代换原则")]),t._v('. 软件工程大师罗伯特·马丁(Robert C. Martin)把里氏代换原则最终简化为一句话: "Subtypes must be substitutable for their base types". 也就是, 子类必须能够替换成它们的基类. 即子类应该可以替换任何基类能够出现的地方, 并且经过替换以后, 代码还能正常工作. 另外, 不应该在代码中出现 if/else 之类对子类类型进行判断的条件. 里氏替换原则 LSP 是使代码符合开闭原则的一个重要保证. 正是由于子类型的可替换性才使得父类型的模块在无需修改的情况下就可以扩展.')])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("ISP(Interface Segregation Principle )- 接口隔离原则")]),t._v(". 接口隔离原则的意思是把功能实现在接口中, 而不是类中, 使用多个专门的接口比使用单一的总接口要好. 举个例子, 我们对电脑有不同的使用方式, 比如: 写作, 通讯, 看电影, 打游戏, 上网, 编程, 计算和数据存储等. 如果我们把这些功能都声明在电脑的抽象类里面, 那么, 我们的上网本, PC 机, 服务器和笔记本的实现类都要实现所有的这些接口, 这就显得太复杂了. 所以可以把这些功能接口隔离开来, 如工作学习接口, 编程开发接口, 上网娱乐接口, 计算和数据服务接口, 这样不同功能的电脑就可以有所选择地继承这些接口.")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("DIP(Dependency Inversion Principle)- 依赖倒置原则")]),t._v(". "),a("strong",[t._v("高层模块不应该依赖于低层模块的实现, 而是依赖于高层抽象")]),t._v(". 举个例子, 墙面的开关不应该依赖于电灯的开关实现, 而是应该依赖于一个抽象的开关的标准接口. 这样, 当扩展程序的时候, 开关同样可以控制其它不同的灯, 甚至不同的电器. 也就是说, 电灯和其它电器继承并实现我们的标准开关接口, 而开关厂商就可以不需要关于其要控制什么样的设备, 只需要关心那个标准的开关标准. 这就是依赖倒置原则.")])])])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"http://c2.com/cgi/wiki?CommonClosurePrinciple",target:"_blank",rel:"noopener noreferrer"}},[t._v("CCP(Common Closure Principle) - 共同封闭原则"),a("OutboundLink")],1),t._v(', 一个包中所有的类应该对同一种类型的变化关闭. 一个变化影响一个包, 便影响了包中所有的类. 一个更简短的说法是: 一起修改的类, 应该组合在一起(同一个包里). 如果必须修改应用程序里的代码, 那么我们希望所有的修改都发生在一个包里(修改关闭), 而不是遍布在很多包里.  CCP 原则就是把因为某个同样的原因而需要修改的所有类组合进一个包里. 如果两个类从物理上或者从概念上联系得非常紧密, 它们通常一起发生改变, 那么它们应该属于同一个包. CCP 延伸了开闭原则(OCP)的"关闭"概念, 当因为某个原因需要修改时, 把需要修改的范围限制在一个最小范围内的包里.')])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"http://c2.com/cgi/wiki?CommonReusePrinciple",target:"_blank",rel:"noopener noreferrer"}},[t._v("CRP(Common Reuse Principle)- 共同重用原则"),a("OutboundLink")],1),t._v(", 包的所有类被一起重用. 如果你重用了其中的一个类, 就重用全部. 换个说法是, 没有被一起重用的类不应该组合在一起. CRP 原则帮助我们决定哪些类应该被放到同一个包里. 依赖一个包就是依赖这个包所包含的一切. 当一个包发生了改变, 并发布新的版本, 使用这个包的所有用户都必须在新的包环境下验证他们的工作, 即使被他们使用的部分没有发生任何改变. 因为如果包中包含未被使用的类, 即使用户不关心该类是否改变, 但用户还是不得不升级该包并对原来的功能加以重新测试. CCP 则让系统的维护者受益. CCP 让包尽可能大(CCP 原则加入功能相关的类), CRP 则让包尽可能小(CRP 原则剔除不使用的类). 它们的出发点不一样, 但不相互冲突.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"http://en.wikipedia.org/wiki/Hollywood_Principle",target:"_blank",rel:"noopener noreferrer"}},[t._v("好莱坞原则 - Hollywood Principle"),a("OutboundLink")],1),t._v(', 好莱坞原则就是一句话--"don’t call us, we’ll call you.". 意思是, 好莱坞的经纪人不希望你去联系他们, 而是他们会在需要的时候来联系你. 也就是说, 所有的组件都是被动的, 所有的组件初始化和调用都由容器负责. 简单来讲, 就是由容器控制程序之间的关系, 而非传统实现中, 由程序代码直接操控. 这也就是所谓"控制反转"的概念所在: 1) 不创建对象, 而是描述创建对象的方式. 2)在代码中, 对象与服务没有直接联系, 而是容器负责将这些联系在一起. 控制权由应用代码中转到了外部容器, 控制权的转移, 是所谓反转. 好莱坞原则就是 '),a("a",{attrs:{href:"http://en.wikipedia.org/wiki/Inversion_of_Control",target:"_blank",rel:"noopener noreferrer"}},[t._v("IoC(Inversion of Control)"),a("OutboundLink")],1),t._v(" 或 "),a("a",{attrs:{href:"https://martinfowler.com/articles/injection.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("DI(Dependency Injection)"),a("OutboundLink")],1),t._v(" 的基础原则.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"http://en.wikipedia.org/wiki/Coupling_(computer_science)",target:"_blank",rel:"noopener noreferrer"}},[t._v("高内聚,  低耦合 & - High Cohesion & Low/Loose coupling"),a("OutboundLink")],1),t._v(", 这个原则是 UNIX 操作系统设计的经典原则, 把模块间的耦合降到最低, 而努力让一个模块做到精益求精. 内聚, 指一个模块内各个元素彼此结合的紧密程度; 耦合指一个软件结构内不同模块之间互连程度的度量. "),a("strong",[t._v("内聚意味着重用和独立, 耦合意味着多米诺效应牵一发动全身")]),t._v(". 对于面向对象来说, 你也可以看看马萨诸塞州戈登学院的面向对象课中的这一节讲义"),a("a",{attrs:{href:"http://www.math-cs.gordon.edu/courses/cs211/lectures-2009/Cohesion,Coupling,MVC.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("High Cohesion and Low Coupling"),a("OutboundLink")],1),t._v(".")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"http://en.wikipedia.org/wiki/Convention_over_Configuration",target:"_blank",rel:"noopener noreferrer"}},[t._v("CoC(Convention over Configuration)- 惯例优于配置原则"),a("OutboundLink")],1),t._v(", 简单点说, 就是将一些公认的配置方式和信息作为内部缺省的规则来使用. 例如, Hibernate 的映射文件, 如果约定字段名和类属性一致的话, 基本上就可以不要这个配置文件了. 你的应用只需要指定不 convention 的信息即可, 从而减少了大量 convention 而又不得不花时间和精力啰里啰嗦的东东. 配置文件在很多时候相当影响开发效率. Rails 中很少有配置文件(但不是没有, 数据库连接就是一个配置文件). Rails 的 fans 号称其开发效率是 Java 开发的 10 倍, 估计就是这个原因. Maven 也使用了 CoC 原则, 当你执行 "),a("code",[t._v("mvn -compile")]),t._v("​ 命令的时候, 不需要指定源文件放在什么地方, 而编译以后的 class 文件放置在什么地方也没有指定, 这就是 CoC 原则.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"http://sulong.me/archives/99",target:"_blank",rel:"noopener noreferrer"}},[t._v("SoC (Separation of Concerns) - 关注点分离"),a("OutboundLink")],1),t._v(", SoC 是计算机科学中最重要的努力目标之一. 这个原则, 就是在软件开发中, 通过各种手段, 将问题的各个关注点分开. 如果一个问题能分解为独立且较小的问题, 就是相对较易解决的. 问题太过于复杂, 要解决问题需要关注的点太多, 而程序员的能力是有限的, 不能同时关注于问题的各个方面. 正如程序员的记忆力相对于计算机知识来说那么有限一样, 程序员解决问题的能力相对于要解决的问题的复杂性也是一样的非常有限. 在分析问题的时候, 如果把所有的东西混在一起讨论, 那么就只会有一个结果--乱. 实现关注点分离的方法主要有两种, 一种是标准化, 另一种是抽象与包装. 标准化就是制定一套标准, 让使用者都遵守它, 将人们的行为统一起来, 这样使用标准的人就不用担心别人会有很多种不同的实现, 使自己的程序不能和别人的配合. 就像是开发镙丝钉的人只专注于开发镙丝钉就行了, 而不用关注镙帽是怎么生产的, 反正镙帽和镙丝钉按照标准来就一定能合得上. 不断地把程序的某些部分抽象并包装起来, 也是实现关注点分离的好方法. 一旦一个函数被抽象出来并实现了, 那么使用函数的人就不用关心这个函数是如何实现的. 同样的, 一旦一个类被抽象并实现了, 类的使用者也不用再关注于这个类的内部是如何实现的. 诸如组件, 分层, 面向服务等这些概念都是在不同的层次上做抽象和包装, 以使得使用者不用关心它的内部实现细节.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"http://en.wikipedia.org/wiki/Design_by_contract",target:"_blank",rel:"noopener noreferrer"}},[t._v("DbC(Design by Contract)- 契约式设计"),a("OutboundLink")],1),t._v(', DbC 的核心思想是对软件系统中的元素之间相互合作以及"责任"与"义务"的比喻. 这种比喻从商业活动中"客户"与"供应商"达成"契约"而得来. 如果在程序设计中一个模块提供了某种功能, 那么它要:')]),t._v(" "),a("ul",[a("li",[t._v("期望所有调用它的客户模块都保证一定的进入条件: 这就是模块的先验条件(客户的义务和供应商的权利, 这样它就不用去处理不满足先验条件的情况).")]),t._v(" "),a("li",[t._v("保证退出时给出特定的属性: 这就是模块的后验条件(供应商的义务, 显然也是客户的权利).")]),t._v(" "),a("li",[t._v("在进入时假定, 并在退出时保持一些特定的属性: 不变式.")])])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"http://c2.com/cgi/wiki?AcyclicDependenciesPrinciple",target:"_blank",rel:"noopener noreferrer"}},[t._v("ADP(Acyclic Dependencies Principle)- 无环依赖原则"),a("OutboundLink")],1),t._v(", 包(或服务)之间的依赖结构必须是一个直接的无环图形, 也就是说, 在依赖结构中不允许出现环(循环依赖). 如果包的依赖形成了环状结构, 怎么样打破这种循环依赖呢? 有两种方法可以打破这种循环依赖关系: 第一种方法是创建新的包, 如果 A, B, C 形成环路依赖, 那么把这些共同类抽出来放在一个新的包 D 里. 这样就把 C 依赖 A 变成了 C 依赖 D 以及 A 依赖 D, 从而打破了循环依赖关系. 第二种方法是使用 DIP(依赖倒置原则)和 ISP(接口分隔原则)设计原则. 无环依赖原则(ADP)为我们解决包之间的关系耦合问题. 在设计模块时, 不能有循环依赖.")])])]),t._v(" "),a("h5",{attrs:{id:"_3-一些软件设计的读物"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-一些软件设计的读物"}},[t._v("#")]),t._v(" 3.一些软件设计的读物")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("《"),a("a",{attrs:{href:"https://book.douban.com/subject/26819666/",target:"_blank",rel:"noopener noreferrer"}},[t._v("领域驱动设计"),a("OutboundLink")],1),t._v("》, 本书是领域驱动设计方面的经典之作. 全书围绕着设计和开发实践, 结合若干真实的项目案例, 向读者阐述如何在真实的软件开发中应用领域驱动设计. 书中给出了领域驱动设计的系统化方法, 并将人们普遍接受的一些实践综合到一起, 融入了作者的见解和经验, 展现了一些可扩展的设计新实践, 已验证过的技术以及便于应对复杂领域的软件项目开发的基本原则.")])]),t._v(" "),a("li",[a("p",[t._v("《"),a("a",{attrs:{href:"https://book.douban.com/subject/1467587/",target:"_blank",rel:"noopener noreferrer"}},[t._v("UNIX 编程艺术"),a("OutboundLink")],1),t._v("》, 这本书主要介绍了 Unix 系统领域中的设计和开发哲学, 思想文化体系, 原则与经验, 由公认的 Unix 编程大师, 开源运动领袖人物之一埃里克·雷蒙德(Eric S. Raymond)倾力多年写作而成. 包括 Unix 设计者在内的多位领域专家也为本书贡献了宝贵的内容. 本书内容涉及社群文化, 软件开发设计与实现, 覆盖面广, 内容深邃, 完全展现了作者极其深厚的经验积累和领域智慧.")])]),t._v(" "),a("li",[a("p",[t._v("《"),a("a",{attrs:{href:"https://8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Clean Architecture"),a("OutboundLink")],1),t._v("》, 如果你读过 《"),a("a",{attrs:{href:"https://book.douban.com/subject/5442024/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Clean Code"),a("OutboundLink")],1),t._v("》 和 《"),a("a",{attrs:{href:"https://book.douban.com/subject/11614538/",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Clean Coder"),a("OutboundLink")],1),t._v('》这两本书. 你就能猜得到这种 Clean 系列一定也是出自"Bob 大叔"之手. 没错, 就是 Bob 大叔的心血之作. 除了这个网站, 《'),a("a",{attrs:{href:"https://book.douban.com/subject/26915970/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Clean Architecture"),a("OutboundLink")],1),t._v("》也是一本书, 这是一本很不错的架构类图书. 对软件架构的元素, 方法等讲得很清楚. 示例都比较简单, 并带一些软件变化历史的讲述, 很开阔视野.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://12factor.net/",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Twelve-Factor App"),a("OutboundLink")],1),t._v(", 如今, 软件通常会作为一种服务来交付, 它们被称为网络应用程序, 或软件即服务(SaaS). 12-Factor 为构建 SaaS 应用提供了方法论, 这也是架构师必读的文章. ("),a("a",{attrs:{href:"https://12factor.net/zh_cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("中译版"),a("OutboundLink")],1),t._v(") 这篇文章在业内的影响力很大, 必读!")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://medium.com/@rdsubhas/10-modern-software-engineering-mistakes-bc67fbef4fc8",target:"_blank",rel:"noopener noreferrer"}},[t._v("Avoid Over Engineering"),a("OutboundLink")],1),t._v(", 有时候, 我们会过渡设计我们的系统, 过度设计会把我们带到另外一个复杂度上, 所以需要一些工程上的平衡. 这篇文章是一篇非常不错地告诉你什么是过度设计的文章.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://medium.com/@DataStax/instagram-engineerings-3-rules-to-a-scalable-cloud-application-architecture-c44afed31406",target:"_blank",rel:"noopener noreferrer"}},[t._v("Instagram Engineering’s 3 rules to a scalable cloud application architecture"),a("OutboundLink")],1),t._v(" , Instagram 工程的三个黄金法则: 1)使用稳定可靠的技术(迎接新的技术); 2)不要重新发明轮子; 3)Keep it very simple. 我觉得这三条很不错. 其实, Amazon 也有两条工程法则, 一个是自动化, 一个是简化.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://www.infoq.com/presentations/effective-api-design",target:"_blank",rel:"noopener noreferrer"}},[t._v("How To Design A Good API and Why it Matters - Joshua Bloch"),a("OutboundLink")],1),t._v(" , Google 的一个分享, 关于如何设计好一个 API.")])]),t._v(" "),a("li",[a("p",[t._v("关于 Restful API 的设计, 你可以学习并借鉴一下下面这些文章.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api",target:"_blank",rel:"noopener noreferrer"}},[t._v("Best Practices for Designing a Pragmatic RESTful API"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://betimdrenica.wordpress.com/2015/03/09/ideal-rest-api-design/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Ideal REST API design"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/interagent/http-api-design",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP API Design Guide"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("Microsoft REST API Guidelines"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/watson-developer-cloud/api-guidelines",target:"_blank",rel:"noopener noreferrer"}},[t._v("IBM Watson REST API Guidelines"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://opensource.zalando.com/restful-api-guidelines/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Zalando RESTful API and Event Scheme Guidelines"),a("OutboundLink")],1)])])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://blog.codinghorror.com/the-problem-with-logging/",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Problem With Logging"),a("OutboundLink")],1),t._v(", 一篇关于程序打日志的短文, 可以让你知道一些可能以往不知道的打日志需要注意的问题.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"http://berb.github.io/diploma-thesis/community/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Concurrent Programming for Scalable Web Architectures"),a("OutboundLink")],1),t._v(", 这是一本在线的免费书, 教你如何架构一个可扩展的高性能的网站. 其中谈到了一些不错的设计方法和知识.")])])]),t._v(" "),a("h5",{attrs:{id:"_4-小结-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-小结-12"}},[t._v("#")]),t._v(" 4.小结")]),t._v(" "),a("p",[t._v('总结一下今天分享的内容. 我认为, "品位"不同, 是各层次程序员之间最大的区别, 这也决定了他们所做出来的软件的质量和价值. 因此, 我特意撰写了软件设计这一篇章, 帮助那些想成长为软件工程师, 设计师或架构师的程序员, 提高软件设计的品位, 进而实现自己的目标.')]),t._v(" "),a("p",[t._v('虽然很多程序员都忽略了对编程范式的学习, 但我觉得学习编程范式其实是非常非常重要的事, 能够明白编程的本质和各种语言的编程方式. 为此, 我推荐了好几份学习资料, 帮助你系统化地学习和理解. 随后我介绍了 DRY- 避免重复原则, KISS- 简单原则, 迪米特法则(又称"最少知识原则"),  面向对象的 S.O.L.I.D 原则等多个经典的软件设计原则.')]),t._v(" "),a("p",[t._v("最后, 我精选并推荐了软件设计方面的学习资料, 如《领域驱动设计》, 《UNIX 编程艺术》和《Clean Architecture》等必读好书, 以及如何构建 SaaS, 如何避免过度设计, 如何设计 API, 如何用程序打日志等方面的资料.")]),t._v(" "),a("h4",{attrs:{id:"程序员练级攻略-linux系统-内存和网络"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#程序员练级攻略-linux系统-内存和网络"}},[t._v("#")]),t._v(" 程序员练级攻略:Linux系统,内存和网络")]),t._v(" "),a("p",[t._v("这一篇章, 是本系列中最长的一篇, 其中包括了如下的内容.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("系统底层相关")]),t._v(". 主要是以 Linux 系统为主, 其中有大量的文章可以让你学习到 Linux 内核, 以及内存, 网络, 异步 I/O 模型, Lock-free 的无锁编程, 还有其它和系统底层相关的东西. 注意, 系统底层要是深下去是可以完全不见底的. 而且内存方面的知识也是比较多的, 所以这里还是主要给出一些非常有价值的基础性的知识和技术. 学好这些东西, 你会对系统有很深的理解, 而且可以把这些知识反哺到架构设计上来.")]),t._v(" "),a("li",[a("strong",[t._v("数据库相关")]),t._v(". 数据库方面主要是 MySQL 和各种开源 NoSQL 的一些相关的有价值的文章和导读, 主要是让你对这些数据库的内在有一定的了解, 但又不会太深. 真正的深入是需要扎入到源代码中的. 需要说明的是, 这块技术不是我的长项, 但又是每个架构师需要知道的, 所以这里给的学习资源可能会比较浅.")]),t._v(" "),a("li",[a("strong",[t._v("分布式架构")]),t._v(". 这一部分是最长最多的. 其中有架构入门, 分布式理论中各种非常有价值的经典论文, 然后是一些分布式工程设计方面的文章, 其中包括设计模式和工程应用, 最后还有各大公司的架构供参考.")]),t._v(" "),a("li",[a("strong",[t._v("微服务")]),t._v(". 有了分布式架构理论和工程的基础, 接下来是对微服务的学习. 在这部分内容中, 我会罗列几个介绍微服务架构非常系统的文章, 然后比较一下微服务和 SOA 的差别, 最后则是一些工程实践和最佳实践.")]),t._v(" "),a("li",[a("strong",[t._v("容器化和自动化运维")]),t._v(". 在容器化和自动化运维中, 主要是学习 Docker 和 Kubernetes 这两个自动化运维的杀手型技术.")]),t._v(" "),a("li",[a("strong",[t._v("机器学习和人工智能")]),t._v(". 机器学习和人工智能, 也不是我的长项, 我也只是一个入门者. 这里主要给了一些基础性的知识, 其中包括基本原理, 图书, 课程, 文章和相关的算法. 你顺着我画的这路走, 不能说能成为一个人工智能专家, 但成为一个机器学习的高级工程师甚至准专家还是可能的.")]),t._v(" "),a("li",[a("strong",[t._v("前端开发")]),t._v(". 这里的前端主要是 HTML 5 的前端了, 这一节会带你学习一下前端开发所需要知道的基础知识, 尤其是对前端开发语言 JavaScript 的学习, 我花费了相当的篇幅列出了很多很经典的学习资料, 必定会让你成为一个 JavaScript 高手. 然后你还需要了解浏览器是怎样工作的, 还有相关的网络协议和一些性能优化的技巧. 最后则是 JavaScript 框架的学习, 这里我只给了 React.js 和 Vue.js, 并通过 React.js 带出来函数式编程的学习. 我虽然不是一个前端程序员, 但是相信我这个后端程序员给出来的这组前端开发的学习资料和路径会比前端程序员更靠谱一些.")]),t._v(" "),a("li",[a("strong",[t._v("信息源")]),t._v(". 最后, 则是一些信息源, 其中包括各大公司的技术 Blog, 还有相关的论文集散地.")])]),t._v(" "),a("p",[t._v("另外, 这里需要说明几点.")]),t._v(" "),a("ul",[a("li",[t._v("我假设你在前面已经打下了非常扎实的基础, 但是要成为一个高手, 基础知识只是一个地基, 你还需要很多更为具体的技术. 对我来说, 就是看各种各样的文章, 手册, 论文, 分享... 其实, 学习到一定程度, 就是要从书本中走出去, 到社区里和大家一起学习, 而且还需要自己找食吃了. 所以对于这里面的文章, 有很多都是在罗列各种文章和资源, 只是为你梳理信息源, 而不是喂你吃饭.")]),t._v(" "),a("li",[a("strong",[t._v("老实说, 我已经为你梳理并过滤掉了很多的信息, 这里只留下了 30% 我觉得最经济也最有价值的信息")]),t._v(". 虽然对于不同定位和不同需求的人还可以再对这些信息进行删减, 但是觉得我这么一做就会对其它人不公平了. 所以这也是我觉得最小数量集的信息和资源吧. "),a("strong",[t._v("你也可以把我这里的东西当成一个索引来对待")]),t._v(".")]),t._v(" "),a("li",[t._v("这些内容, 不能说是隔离开来的, 应该说是相辅相成的. 也没什么顺序, 可以各取所需. 虽然看上去内容很多, 但你也别害怕, 真的不用害怕, 你会越学越快, 越实践越有感觉, 也越有效率. 在一开始可能会很慢, 但是坚持住, 积累一段时间后就会越来越快的. 而且绝大多数人是坚持不下来的. 只要你能坚持下来, 我保证, 你一定会成为各个大公司的抢手货, 这点你一定要相信我. **你不需要特别努力, 只需要日进一步, 3-5 年后, 你就会发现, 绝大多数人都在你身后很远的地方了. **")])]),t._v(" "),a("p",[t._v("今天分享的内容为系统底层知识中的 Linux 系统, 内存和网络等方面的相关知识及推荐的学习资料.")]),t._v(" "),a("h5",{attrs:{id:"_1-linux系统相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-linux系统相关"}},[t._v("#")]),t._v(" 1.Linux系统相关")]),t._v(" "),a("p",[t._v("学习 Linux 操作系统的原理是通向系统工程师的必经之路. 我觉得, Unix/Linux 操作系统里的东西并不难学. 千万不要一下子扎到源代码里去, 那样没用--还是要在上层先通过读一些不错的文档来学习. 下面我罗列了一些很不错的站点, 其中有很多内容供你去钻研和探索.")]),t._v(" "),a("p",[t._v("我在这里默认你前面已经读过并读懂了我推荐的那些和 Unix/Linux 相关的图书了. 所以, 我相信你对 Unix/Linux 下的编程已经是有一些基础了, 因此, 你继续深挖 Linux 下的这些知识应该也不是很难的事了.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/?version=7",target:"_blank",rel:"noopener noreferrer"}},[t._v("Red Hat Enterprise Linux 文档"),a("OutboundLink")],1),t._v(". Red Hat Enterprise Linux(RHEL)是老牌 Linux 厂商 Red Hat 出品的面向商业的 Linux 发行版. Red Hat 网站上的这个文档中有很多很有价值的内容, 值得一看.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/0xAX/linux-insides",target:"_blank",rel:"noopener noreferrer"}},[t._v("Linux Insides"),a("OutboundLink")],1),t._v(", GitHub 上的一个开源电子书, 其中讲述了 Linux 内核是怎样启动, 初始化以及进行管理的.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://lwn.net/Kernel/Index/",target:"_blank",rel:"noopener noreferrer"}},[t._v("LWN’s kernel page"),a("OutboundLink")],1),t._v(", 上面有很多非常不错的文章来解释 Linux 内核的一些东西.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://learnlinuxconcepts.blogspot.com/2014/10/this-blog-is-to-help-those-students-and.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Learn Linux Kernel from Android Perspective"),a("OutboundLink")],1),t._v(", 从 Android 的角度来学习 Linux 内核, 这个站点上的 Blog 相对于前面的比较简单易读一些.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.kernel.org/doc/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Linux Kernel Doc"),a("OutboundLink")],1),t._v(", Linux 的内核文档也可以浏览一下.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://planet.kernel.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Kernel Planet"),a("OutboundLink")],1),t._v(", Linux 内核开发者的 Blog, 有很多很不错的文章和想法.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://lenovopress.com/redp4285.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Linux Performance and Tuning Guidelines"),a("OutboundLink")],1),t._v(", 这是 IBM 出的红皮书, 虽然有点老了, 但还是非常值得一读的.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://tldp.org/LDP/tlk/tlk.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("TLK: The Linux Kernel"),a("OutboundLink")],1),t._v(", 这是一本相对比较老的书了, Linux 内核版本为 2.0.33, 但了解一下前人的思路, 也是很有帮助的.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.brendangregg.com/linuxperf.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Linux Performance"),a("OutboundLink")],1),t._v(", 这个网站上提供了和 Linux 系统性能相关的各种工具和文章收集, 非常不错.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blogs.dropbox.com/tech/2017/09/optimizing-web-servers-for-high-throughput-and-low-latency/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Optimizing web servers for high throughput and low latency"),a("OutboundLink")],1),t._v(", 这是一篇非常底层的系统调优的文章, 来自 DropBox, 从中你可以学到很多底层的性能调优的经验和知识.")])]),t._v(" "),a("h5",{attrs:{id:"_2-内存相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-内存相关"}},[t._v("#")]),t._v(" 2.内存相关")]),t._v(" "),a("p",[t._v("计算机内存管理是每一个底层程序员需要了解的非常重要的事儿. 当然这里重点还是 Linux 操作系统相关的内存管理上的知识.")]),t._v(" "),a("p",[t._v('首先, LWN.net 上有一系列的 "'),a("strong",[t._v("What every programmer should know about memory")]),t._v('" 文章你需要读一下. 你可以直接访问一个完整的 '),a("a",{attrs:{href:"http://futuretech.blinkenlights.nl/misc/cpumemory.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("PDF 文档"),a("OutboundLink")],1),t._v(". 下面是这个系列文章的网页版列表. 读完这个列表的内容, 你基本上就对内存有了一个比较好的知识体系了.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://lwn.net/Articles/250967/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Part 1: Introduction"),a("OutboundLink")],1),t._v(', 中译版为 "'),a("a",{attrs:{href:"https://www.oschina.net/translate/what-every-programmer-should-know-about-memory-part1",target:"_blank",rel:"noopener noreferrer"}},[t._v("每个程序员都应该了解的内存知识【第一部分】"),a("OutboundLink")],1),t._v('"')]),t._v(" "),a("li",[a("a",{attrs:{href:"https://lwn.net/Articles/252125/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Part 2: CPU caches"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://lwn.net/Articles/253361/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Part 3 (Virtual memory)"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://lwn.net/Articles/254445/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Part 4 (NUMA systems)"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://lwn.net/Articles/255364/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Part 5 (What programmers can do - cache optimization)"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://lwn.net/Articles/256433/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Part 6 (What programmers can do - multi-threaded optimizations)"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://lwn.net/Articles/257209/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Part 7 (Memory performance tools)"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://lwn.net/Articles/258154/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Part 8 (Future technologies)"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://lwn.net/Articles/258188/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Part 9 (Appendices and bibliography)"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("然后是几篇和内存相关的论文. 下面这三篇论文是我个人觉得能对你非常有帮助的文章, 尤其是你要做一些程序的性能优化方面.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://irl.cs.ucla.edu/~yingdi/web/paperreading/whymb.2010.06.07c.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Memory Barriers: a Hardware View for Software Hackers"),a("OutboundLink")],1),t._v(". 内存的读写屏障是线程并发访问共享的内存数据时, 从程序本身, 编译器到 CPU 都必须遵循的一个规范. 有了这个规范, 才能保证访问共享的内存数据时, 一个线程对该数据的更新能被另一个线程以正确的顺序感知到. 在 SMP(对称多处理)这种类型的多处理器系统(包括多核系统)上, 这种读写屏障还包含了复杂的缓存一致性策略. 这篇文章做了详细解释.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.cl.cam.ac.uk/~pes20/ppc-supplemental/test7.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("A Tutorial Introduction to the ARM and POWER Relaxed Memory Models"),a("OutboundLink")],1),t._v(", 对 ARM 和 POWER 的宽松内存模型的一个教程式的简介. 本篇文章的焦点是 ARM 和 POWER 体系结构下多处理器系统内存并发访问一致性的设计思路和使用方法. 与支持较强的 TSO 模型的 x86 体系结构不同, ARM 和 POWER 这两种体系结构出于对功耗和性能的考虑, 使用了一种更为宽松的内存模型. 本文详细讨论了 ARM 和 POWER 的模型.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.cl.cam.ac.uk/~pes20/weakmemory/cacm.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("x86-TSO: A Rigorous and Usable Programmer’s Model for x86 Multiprocessors"),a("OutboundLink")],1),t._v(", 介绍 x86 的多处理器内存并发访问的一致性模型 TSO.")])]),t._v(" "),a("p",[t._v("接下来是开发者最关心的内存管理方面的 lib 库. 通常来说, 有三种内存分配管理模块. 就目前而言, BSD 的 jemalloc 有很大的影响力. 后面可以看到不同公司的实践性文章.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://www.malloc.de/en/",target:"_blank",rel:"noopener noreferrer"}},[t._v("ptmalloc"),a("OutboundLink")],1),t._v(" 是 glibc 的内存分配管理.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/gperftools/gperftools",target:"_blank",rel:"noopener noreferrer"}},[t._v("tcmalloc"),a("OutboundLink")],1),t._v(" 是 Google 的内存分配管理模块, 全称是 Thread-Caching malloc, 基本上来说比 glibc 的 ptmalloc 快两倍以上.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://jemalloc.net/",target:"_blank",rel:"noopener noreferrer"}},[t._v("jemalloc"),a("OutboundLink")],1),t._v(" 是 BSD 提供的内存分配管理. 其论文为 "),a("a",{attrs:{href:"https://people.freebsd.org/~jasone/jemalloc/bsdcan2006/jemalloc.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("A Scalable Concurrent malloc(3) Implementation for FreeBSD"),a("OutboundLink")],1),t._v(", 这是一个可以并行处理的内存分配管理器.")])]),t._v(" "),a("p",[t._v('关于 C 的这些内存分配器, 你可以参看 Wikipedia 的 "C Dynamic Memory Allocation)"这个词条.')]),t._v(" "),a("p",[t._v("下面是几篇不错的文章, 让你感觉一下上面那三种内存分配器的一些比较和工程实践.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://owent.net/2013/867.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("ptmalloc, tcmalloc 和 jemalloc 内存分配策略研究"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.cnhalo.net/2016/06/13/memory-optimize/",target:"_blank",rel:"noopener noreferrer"}},[t._v("内存优化总结: ptmalloc, tcmalloc 和 jemalloc"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.facebook.com/notes/facebook-engineering/scalable-memory-allocation-using-jemalloc/480222803919",target:"_blank",rel:"noopener noreferrer"}},[t._v("Scalable memory allocation using jemalloc"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://zapier.com/engineering/celery-python-jemalloc/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Decreasing RAM Usage by 40% Using jemalloc with Python & Celery"),a("OutboundLink")],1)])]),t._v(" "),a("h5",{attrs:{id:"_3-计算机网络"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-计算机网络"}},[t._v("#")]),t._v(" 3.计算机网络")]),t._v(" "),a("h6",{attrs:{id:"_1-网络学习"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-网络学习"}},[t._v("#")]),t._v(" (1)网络学习")]),t._v(" "),a("p",[t._v("首先推荐一本书--《"),a("a",{attrs:{href:"https://book.douban.com/subject/10510747/",target:"_blank",rel:"noopener noreferrer"}},[t._v("计算机网络(第五版)"),a("OutboundLink")],1),t._v('》, 这本"计算机网络"和前面推荐的那本计算机网络不一样, 前面那本偏扫盲, 这本中有很多细节. 这本书是国内外使用最广泛, 最权威的计算机网络经典教材. 全书按照网络协议模型自下而上(物理层, 数据链路层, 介质访问控制层, 网络层, 传输层和应用层)有系统地介绍了计算机网络的基本原理, 并结合 Internet 给出了大量的协议实例.')]),t._v(" "),a("p",[t._v("然后, 有两个网上的教程和讲义也可以让人入门.")]),t._v(" "),a("ul",[a("li",[t._v("渥汰华大学的一个课程讲义你也可以一看 "),a("a",{attrs:{href:"http://www.site.uottawa.ca/~shervin/courses/ceg4185/lectures/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Computer Network Design"),a("OutboundLink")],1),t._v(" .")]),t._v(" "),a("li",[t._v("GeeksforGeeks 上也有一个简单的 "),a("a",{attrs:{href:"https://www.geeksforgeeks.org/computer-network-tutorials/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Computer Network Tutorials"),a("OutboundLink")],1),t._v(" .")])]),t._v(" "),a("h6",{attrs:{id:"_2-网络调优"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-网络调优"}},[t._v("#")]),t._v(" (2)网络调优")]),t._v(" "),a("p",[t._v("接下来, 你可能需要一些非常实用的可以操作的技术, 下面的几篇文章相信可以帮助到你.")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("《Linux 的高级路由和流量控制 HowTo》("),a("a",{attrs:{href:"http://lartc.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Linux Advanced Routing & Traffic Control HOWTO"),a("OutboundLink")],1),t._v(" ), 这是一个非常容易上手的关于 iproute2, 流量整形和一点 netfilter 的指南.")])]),t._v(" "),a("li",[a("p",[t._v("关于网络调优, 你可以看一下这个文档 "),a("a",{attrs:{href:"https://access.redhat.com/sites/default/files/attachments/20150325_network_performance_tuning.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Red Hat Enterprise Linux Network Performance Tuning Guide"),a("OutboundLink")],1),t._v(".")])]),t._v(" "),a("li",[a("p",[t._v("还有一些网络工具能够帮上你的大忙, 这里有一个网络工具的 Awesome 列表 "),a("a",{attrs:{href:"https://github.com/caesar0301/awesome-pcaptools",target:"_blank",rel:"noopener noreferrer"}},[t._v("Awesome Pcap Tools"),a("OutboundLink")],1),t._v(" , 其中罗列了各种网络工具, 能够让你更从容地调试网络相关的程序.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://netdevconf.org/1.2/papers/bbr-netdev-1.2.new.new.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Making Linux TCP Fast"),a("OutboundLink")],1),t._v(" , 一篇非常不错的 TCP 调优的论文.")])]),t._v(" "),a("li",[a("p",[t._v("下面是在 PackageCloud 上的两篇关于 Linux 网络栈相关的底层文章, 非常值得一读.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://blog.packagecloud.io/eng/2016/06/22/monitoring-tuning-linux-networking-stack-receiving-data/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Monitoring and Tuning the Linux Networking Stack: Receiving Data"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.packagecloud.io/eng/2017/02/06/monitoring-tuning-linux-networking-stack-sending-data/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Monitoring and Tuning the Linux Networking Stack: Sending Data"),a("OutboundLink")],1)])])])]),t._v(" "),a("h6",{attrs:{id:"_3-网络协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-网络协议"}},[t._v("#")]),t._v(" (3)网络协议")]),t._v(" "),a("p",[t._v("接下来, 想要学习网络协议最好的方式就是学习通讯相关的 RFC. 所以, 在这里我会推荐一系列值得读的 RFC 给你. 读 RFC 有几个好处, 一方面可以学习技术, 另一方面, 你可以通过 RFC 学习到一个好的技术文档是怎么写的, 还能看到各种解决问题的方案和思路.")]),t._v(" "),a("p",[t._v("对于第 2 层链路层, 你可能需要了解一下 ARP:")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://tools.ietf.org/html/rfc826",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 826 - An Ethernet Address Resolution Protocol"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("以及 Tunnel 相关的协议:")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://tools.ietf.org/html/rfc1853",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 1853 - IP in IP Tunneling"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://tools.ietf.org/html/rfc2784",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 2784 - Generic Routing Encapsulation (GRE)"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://tools.ietf.org/html/rfc2661",target:"_blank",rel:"noopener noreferrer"}},[t._v('RFC 2661 - Layer Two Tunneling Protocol "L2TP"'),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://tools.ietf.org/html/rfc2637",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 2637 - Point-to-Point Tunneling Protocol (PPTP)"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("对于第 4 层, 你最需要了解的是 TCP/IP 了. 和 TCP 相关的 RFC 相当多, 这里给一系列经典的 RFC. 这些 RFC 我都引用在了我在 CoolShell 上的《"),a("a",{attrs:{href:"https://coolshell.cn/articles/11564.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("TCP 的那些事儿(上)"),a("OutboundLink")],1),t._v("》和《"),a("a",{attrs:{href:"https://coolshell.cn/articles/11609.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("TCP 的那些事儿(下)"),a("OutboundLink")],1),t._v("》两篇文章中. 如果你看不懂 RFC, 你也可以去看我上述的文章.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://tools.ietf.org/html/rfc793",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 793 - Transmission Control Protocol"),a("OutboundLink")],1),t._v(" - 最初的 TCP 标准定义, 但不包括 TCP 相关细节.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://tools.ietf.org/html/rfc813",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 813 - Window and Acknowledgement Strategy in TCP"),a("OutboundLink")],1),t._v(" - TCP 窗口与确认策略, 并讨论了在使用该机制时可能遇到的问题及解决方法.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://tools.ietf.org/html/rfc879",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 879 - The TCP Maximum Segment Size and Related Topics"),a("OutboundLink")],1),t._v(" - 讨论 MSS 参数对控制 TCP 分组大小的重要性, 以及该参数与 IP 分段大小的关系等.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://tools.ietf.org/html/rfc896",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 896 - Congestion Control in IP/TCP Internetworks"),a("OutboundLink")],1),t._v(" - 讨论拥塞问题和 TCP 如何控制拥塞.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://tools.ietf.org/html/rfc2581",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 2581 - TCP Congestion Control"),a("OutboundLink")],1),t._v(" - 描述用于拥塞控制的四种机制: 慢启动, 拥塞防御, 快重传和快恢复. 后面这个 RFC 被 "),a("a",{attrs:{href:"https://tools.ietf.org/html/rfc5681",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 5681"),a("OutboundLink")],1),t._v(" 所更新. 还有 "),a("a",{attrs:{href:"https://tools.ietf.org/html/rfc6582",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 6582 - The NewReno Modification to TCP’s Fast Recovery Algorithm"),a("OutboundLink")],1),t._v(" 中一个改进的快速恢复算法.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://tools.ietf.org/html/rfc2018",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 2018 - TCP Selective Acknowledgment Options"),a("OutboundLink")],1),t._v(" - TCP 的选择确认.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://tools.ietf.org/html/rfc2883",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 2883 - An Extension to the Selective Acknowledgement (SACK) Option for TCP"),a("OutboundLink")],1),t._v(" - 对于 RFC 2018 的改进.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://tools.ietf.org/html/rfc2988",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 2988 - Computing TCP’s Retransmission Timer"),a("OutboundLink")],1),t._v(" - 讨论与 TCP 重传计时器设置相关的话题, 重传计时器控制报文在重传前应等待多长时间. 也就是经典的 TCP Karn/Partridge 重传算法.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://tools.ietf.org/html/rfc6298",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 6298 - Computing TCP’s Retransmission Timer"),a("OutboundLink")],1),t._v(" - TCP Jacobson/Karels Algorithm 重传算法.")])]),t._v(" "),a("p",[t._v("我个人觉得 TCP 最牛的不是不丢包, 而是"),a("strong",[t._v("拥塞控制")]),t._v(". 对此, 如果你感兴趣, 可以读一下经典论文《"),a("a",{attrs:{href:"http://ee.lbl.gov/papers/congavoid.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Congestion Avoidance and Control"),a("OutboundLink")],1),t._v("》.")]),t._v(" "),a("p",[t._v("关于 Linux 下的 TCP 参数, 你需要仔仔细细地读一下"),a("a",{attrs:{href:"http://man7.org/linux/man-pages/man7/tcp.7.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("TCP 的 man page"),a("OutboundLink")],1),t._v(" .")]),t._v(" "),a("p",[t._v("对于第 7 层协议, HTTP 协议是重点要学习的.")]),t._v(" "),a("p",[t._v("首先推荐的是《"),a("a",{attrs:{href:"https://book.douban.com/subject/10746113/",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP 权威指南"),a("OutboundLink")],1),t._v("》, 这本书有点厚, 可以当参考书来看. 这本书中没有提到 HTTP/2 的事, 但是可以让你了解到 HTTP 协议的绝大多数特性.")]),t._v(" "),a("p",[t._v("HTTP 1.1 的原始 RFC 是 1999 年 6 月的 "),a("a",{attrs:{href:"https://tools.ietf.org/html/rfc2616",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 2616"),a("OutboundLink")],1),t._v(", 但其在 2014 后很快被下面这些 RFC 给取代了.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://tools.ietf.org/html/rfc7230",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 7230 - Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://tools.ietf.org/html/rfc7231",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 7231 - Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://tools.ietf.org/html/rfc7232",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 7232 - Hypertext Transfer Protocol (HTTP/1.1): Conditional Requests"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://tools.ietf.org/html/rfc7233",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 7233 - Hypertext Transfer Protocol (HTTP/1.1): Range Requests"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://tools.ietf.org/html/rfc7234",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 7234 - Hypertext Transfer Protocol (HTTP/1.1): Caching"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://tools.ietf.org/html/rfc7235",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 7235 - Hypertext Transfer Protocol (HTTP/1.1): Authentication"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("关于 "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/HTTP/2",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP/2"),a("OutboundLink")],1),t._v(", 这是 HTTP 的一个比较新的协议, 它于 2015 年被批准通过, 现在基本上所有的主流浏览器都默认启用这个协议. 所以有必要学习一下这个协议. 下面是相关的学习资源.")]),t._v(" "),a("ul",[a("li",[a("p",[a("a",{attrs:{href:"https://legacy.gitbook.com/book/ye11ow/http2-explained/details",target:"_blank",rel:"noopener noreferrer"}},[t._v("Gitbook - HTTP/2 详解"),a("OutboundLink")],1)])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"http://daniel.haxx.se/http2/",target:"_blank",rel:"noopener noreferrer"}},[t._v("http2 explained"),a("OutboundLink")],1),t._v("("),a("a",{attrs:{href:"https://www.gitbook.com/book/ye11ow/http2-explained/details",target:"_blank",rel:"noopener noreferrer"}},[t._v("中译版"),a("OutboundLink")],1),t._v(")")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://cascadingmedia.com/insites/2015/03/http-2.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP/2 for a Faster Web"),a("OutboundLink")],1)])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://www.nginx.com/wp-content/uploads/2015/09/NGINX_HTTP2_White_Paper_v4.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Nginx HTTP/2 白皮书"),a("OutboundLink")],1)])]),t._v(" "),a("li",[a("p",[t._v("HTTP/2 的两个 RFC:")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://httpwg.org/specs/rfc7540.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 7540 - Hypertext Transfer Protocol Version 2 (HTTP/2)"),a("OutboundLink")],1),t._v(" , HTTP/2 的协议本身")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://httpwg.org/specs/rfc7541.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 7541 - HPACK: Header Compression for HTTP/2"),a("OutboundLink")],1),t._v(" , HTTP/2 的压缩算法")])])])]),t._v(" "),a("p",[t._v("最后, 你可以上 Wikipedia 的 "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Internet_protocol_suite",target:"_blank",rel:"noopener noreferrer"}},[t._v("Internet Protocol Suite"),a("OutboundLink")],1),t._v(" 上看看, 这是一个很不错的网络协议的词条汇集地. 顺着这些协议, 你可以找到很多有用的东西.")]),t._v(" "),a("h5",{attrs:{id:"_4-小结-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-小结-13"}},[t._v("#")]),t._v(" 4.小结")]),t._v(" "),a("p",[t._v("总结一下今天的内容. 这是程序员练级攻略 2018 版第五篇章——高手成长篇的第一篇文章. 前面的内容先介绍了一些这一系列内容的总体构成, 及每一部分的学习重点. 后面是这一篇章第一个主题系统底层知识中的部分内容, 即 Linux 系统, 内存和计算机网络, 并给出了相应的学习资料.")]),t._v(" "),a("p",[t._v("我认为, 学习到一定程度, 就是要从书本中走出去, 到社区里和大家一起学习, 而且还需要自己找食吃了. 所以, 这篇文章中, 我罗列了各种文章和资源, 并给出了简短的推荐语言, 就是在为你梳理信息源, 而不是喂你吃饭. 我更希望看到你自趋势地成长.")]),t._v(" "),a("h4",{attrs:{id:"程序员练级攻略-异步i-o模型和lock-free编程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#程序员练级攻略-异步i-o模型和lock-free编程"}},[t._v("#")]),t._v(" 程序员练级攻略:异步I/O模型和Lock-Free编程")]),t._v(" "),a("h5",{attrs:{id:"_1-异步i-o模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-异步i-o模型"}},[t._v("#")]),t._v(" 1.异步I/O模型")]),t._v(" "),a("p",[a("strong",[t._v("异步 I/O 模型")]),t._v("是我个人觉得所有程序员都必需要学习的一门技术或是编程方法, 这其中的设计模式或是解决方法可以借鉴到分布式架构上来. 再说一遍, 学习这些模型, 是非常非常重要的, 你千万要认真学习.")]),t._v(" "),a("p",[t._v("史蒂文斯(Stevens)在《"),a("a",{attrs:{href:"https://book.douban.com/subject/4859464/",target:"_blank",rel:"noopener noreferrer"}},[t._v("UNIX 网络编程"),a("OutboundLink")],1),t._v("》一书 6.2 I/O Models 中介绍了五种 I/O 模型.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("阻塞 I/O")])]),t._v(" "),a("li",[a("strong",[t._v("非阻塞 I/O")])]),t._v(" "),a("li",[a("strong",[t._v("I/O 的多路复用(select 和 poll)")])]),t._v(" "),a("li",[a("strong",[t._v("信号驱动的 I/O(SIGIO)")])]),t._v(" "),a("li",[a("strong",[t._v("异步 I/O(POSIX 的 aio_functions)")])])]),t._v(" "),a("p",[t._v("然后, 在前面也阅读过了 - "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/C10k_problem",target:"_blank",rel:"noopener noreferrer"}},[t._v("C10K Problem"),a("OutboundLink")],1),t._v(" . 相信你对 I/O 模型也有了一定的了解.  这里需要更为深入地学习 I/O 模型, 尤其是其中的异步 I/O 模型.")]),t._v(" "),a("p",[t._v("首先看一篇和 Java 相关的 I/O 模型的文章来复习一下之前的内容. "),a("a",{attrs:{href:"https://www.slideshare.net/e456/tyma-paulmultithreaded1",target:"_blank",rel:"noopener noreferrer"}},[t._v("Thousands of Threads and Blocking I/O: The Old Way to Write Java Servers Is New Again (and Way Better)"),a("OutboundLink")],1),t._v(" , 这个 PPT 中不仅回顾和比较了各种 I/O 模型, 而且还有各种比较细节的方案和说明, 是一篇非常不错的文章.")]),t._v(" "),a("p",[t._v("然后, 可以看一篇 Java 相关的 PPT - 道格·莱亚(Doug Lea)的 "),a("a",{attrs:{href:"http://gee.cs.oswego.edu/dl/cpjslides/nio.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Scalable IO in Java"),a("OutboundLink")],1),t._v(", 这样你会对一些概念有个了解.")]),t._v(" "),a("p",[t._v("接下来, 需要了解一下各种异步 I/O 的实现和设计方式.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.ibm.com/developerworks/library/l-async/",target:"_blank",rel:"noopener noreferrer"}},[t._v("IBM - Boost application performance using asynchronous I/O"),a("OutboundLink")],1),t._v(" , 这是一篇关于 AIO 的文章.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.usenix.org/legacy/event/usenix04/tech/general/full_papers/elmeleegy/elmeleegy_html/html.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Lazy Asynchronous I/O For Event-Driven Servers"),a("OutboundLink")],1),t._v(" , 这篇文章也很不错.")]),t._v(" "),a("li",[t._v("另外, 异步 I/O 模型中的 "),a("a",{attrs:{href:"https://docs.microsoft.com/en-us/windows/desktop/FileIO/i-o-completion-ports",target:"_blank",rel:"noopener noreferrer"}},[t._v("Windows I/O Completion Ports"),a("OutboundLink")],1),t._v(" , 你也需要了解一下. 如果 MSDN 上的这个手册不容易读, 你可以看看这篇文章 "),a("a",{attrs:{href:"http://sysinternals.d4rk4.ru/Information/IoCompletionPorts.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Inside I/O Completion Ports"),a("OutboundLink")],1),t._v(". 另外, 关于 Windows, "),a("a",{attrs:{href:"https://book.douban.com/subject/6935552/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Windows Internals"),a("OutboundLink")],1),t._v(" 这本书你可以仔细读一下, 非常不错的. 其中有一节 I/O Processing 也是很不错的, 这里我给一个网上免费的链接"),a("a",{attrs:{href:"https://flylib.com/books/en/4.491.1.85/1/",target:"_blank",rel:"noopener noreferrer"}},[t._v("I/O Processing"),a("OutboundLink")],1),t._v(" 你可以看看 Windows 是怎么玩的.")]),t._v(" "),a("li",[t._v("接下来是 Libevent. 你可以看一下其主要维护人员尼克·马修森(Nick Mathewson)写的 "),a("a",{attrs:{href:"http://www.wangafu.net/~nickm/libevent-book/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Libevent 2.0 book"),a("OutboundLink")],1),t._v(". 还有一本国人写的电子书 《"),a("a",{attrs:{href:"https://aceld.gitbooks.io/libevent/content/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Libevent 深入浅出"),a("OutboundLink")],1),t._v("》.")]),t._v(" "),a("li",[t._v("再接下来是 Libuv. 你可以看一下其官网的 "),a("a",{attrs:{href:"http://docs.libuv.org/en/v1.x/design.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Libuv Design Overview"),a("OutboundLink")],1),t._v(" 了解一下.")])]),t._v(" "),a("p",[t._v("我简单总结一下, 基本上来说, 异步 I/O 模型的发展技术是: "),a("strong",[t._v("select -> poll -> epoll -> aio -> libevent -> libuv")]),t._v(". Unix/Linux 用了好几十年走过这些技术的变迁, 然而, 都不如 Windows I/O Completion Port 设计得好(免责声明: 这个观点纯属个人观点. 相信你仔细研究这些 I/O 模型后, 你会有自己的判断).")]),t._v(" "),a("p",[t._v("看过这些各种异步 I/O 模式的实现以后, 相信你会看到一个编程模式---Reactor 模式. 下面是这个模式的相关文章(读这三篇就够了).")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://dzone.com/articles/understanding-reactor-pattern-thread-based-and-eve",target:"_blank",rel:"noopener noreferrer"}},[t._v("Understanding Reactor Pattern: Thread-Based and Event-Driven"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.dre.vanderbilt.edu/~schmidt/PDF/Reactor2-93.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Reactor Pattern"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.celum.com/en/blog/technology/the-reactor-pattern-and-non-blocking-io",target:"_blank",rel:"noopener noreferrer"}},[t._v("The reactor pattern and non-blocking IO"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("然后是几篇有意思的延伸阅读文章.")]),t._v(" "),a("ul",[a("li",[a("p",[a("a",{attrs:{href:"http://highscalability.com/blog/2013/5/13/the-secret-to-10-million-concurrent-connections-the-kernel-i.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Secret To 10 Million Concurrent Connections -The Kernel Is The Problem, Not The Solution"),a("OutboundLink")],1),t._v(" - C10M 问题来了……")])]),t._v(" "),a("li",[a("p",[t._v("还有几篇可能有争议的文章, 让你从不同的角度思考.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://idea.popcount.org/2017-01-06-select-is-fundamentally-broken/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Select is fundamentally broken"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://idea.popcount.org/2017-02-20-epoll-is-fundamentally-broken-12/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Epoll is fundamentally broken 1/2"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://idea.popcount.org/2017-03-20-epoll-is-fundamentally-broken-22/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Epoll is fundamentally broken 2/2"),a("OutboundLink")],1)])])])]),t._v(" "),a("h5",{attrs:{id:"_2-lock-free编程相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-lock-free编程相关"}},[t._v("#")]),t._v(" 2.Lock-Free编程相关")]),t._v(" "),a("p",[t._v("Lock-Free 无锁技术越来越被开发人员重视, 因为锁对于性能的影响实在是太大了, 所以如果想开发出一个高性能的程序, 就非常有必要学习 Lock-Free 的编程方式.")]),t._v(" "),a("p",[t._v("关于无锁的数据结构, 有几篇教程你可以看一下.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://www.drdobbs.com/lock-free-data-structures/184401865",target:"_blank",rel:"noopener noreferrer"}},[t._v("Dr.Dobb’s: Lock-Free Data Structures"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://erdani.com/publications/cuj-2004-10.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Andrei Alexandrescu: Lock-Free Data Structures"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("然后强烈推荐一本免费的电子书: "),a("a",{attrs:{href:"https://www.kernel.org/pub/linux/kernel/people/paulmck/perfbook/perfbook.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Is Parallel Programming Hard, And, If So, What Can You Do About It?"),a("OutboundLink")],1),t._v(" , 这是大牛 "),a("a",{attrs:{href:"https://www.linkedin.com/in/paulmckenney/",target:"_blank",rel:"noopener noreferrer"}},[t._v("保罗·麦肯尼(Paul E. McKenney)"),a("OutboundLink")],1),t._v(" 写的书. 这本书堪称并行编程的经典书, 必看.")]),t._v(" "),a("p",[t._v("此时, Wikipedia 上有三个词条你要看一下, 以此了解并发编程中的一些概念: "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Non-blocking_algorithm",target:"_blank",rel:"noopener noreferrer"}},[t._v("Non-blocking algorithm"),a("OutboundLink")],1),t._v(" , "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Read-copy-update",target:"_blank",rel:"noopener noreferrer"}},[t._v("Read-copy-update"),a("OutboundLink")],1),t._v(" 和 "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Seqlock",target:"_blank",rel:"noopener noreferrer"}},[t._v("Seqlock"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("p",[t._v("接下来, 读一下以下两篇论文.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.53.8674&rep=rep1&type=pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Implementing Lock-Free Queues"),a("OutboundLink")],1),t._v(', 这也是一篇很不错的论文, 我把它介绍在了我的网站上, 文章为"'),a("a",{attrs:{href:"https://coolshell.cn/articles/8239.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("无锁队列的实现"),a("OutboundLink")],1),t._v('".')]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.cs.rochester.edu/~scott/papers/1996_PODC_queues.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Simple, Fast, and Practical Non-Blocking and Blocking Concurrent Queue Algorithms"),a("OutboundLink")],1),t._v(" , 这篇论文给出了一个无阻塞和阻塞的并发队列算法.")])]),t._v(" "),a("p",[t._v("最后, 有几个博客你要订阅一下.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://www.1024cores.net/",target:"_blank",rel:"noopener noreferrer"}},[t._v("1024cores"),a("OutboundLink")],1),t._v(" - 德米特里·伐由科夫(Dmitry Vyukov)的和 lock-free 编程相关的网站.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://paulmck.livejournal.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Paul E. McKenney"),a("OutboundLink")],1),t._v(" - 保罗(Paul)的个人网站.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://concurrencyfreaks.blogspot.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Concurrency Freaks"),a("OutboundLink")],1),t._v(" - 关于并发算法和相关模式的网站.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://preshing.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Preshing on Programming"),a("OutboundLink")],1),t._v(" - 加拿大程序员杰夫·普莱辛(Jeff Preshing)的技术博客, 主要关注 C++ 和 Python 两门编程语言. 他用 C++11 实现了类的反射机制, 用 C++ 编写了 3D 小游戏 Hop Out, 还为该游戏编写了一个游戏引擎. 他还讨论了很多 C++ 的用法, 比如 C++14 推荐的代码写法, 新增的某些语言构造等, 和 Python 很相似. 阅读这个技术博客上的内容能够深深感受到博主对编程世界的崇敬和痴迷.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://herbsutter.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Sutter’s Mill"),a("OutboundLink")],1),t._v(" - 赫布·萨特(Herb Sutter)是一位杰出的 C++ 专家, 曾担任 ISO C++ 标准委员会秘书和召集人超过 10 年. 他的博客有关于 C++ 语言标准最新进展的信息, 其中也有他的演讲视频. 博客中还讨论了其他技术和 C++ 的差异, 如 C# 和 JavaScript, 它们的性能特点, 怎样避免引入性能方面的缺陷等.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://mechanical-sympathy.blogspot.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Mechanical Sympathy"),a("OutboundLink")],1),t._v(" - 博主是马丁·汤普森(Martin Thompson), 他是一名英国的技术极客, 探索现代硬件的功能, 并提供开发, 培训, 性能调优和咨询服务. 他的博客主题是 Hardware and software working together in harmony, 里面探讨了如何设计和编写软件使得它在硬件上能高性能地运行. 非常值得一看.")])]),t._v(" "),a("p",[t._v("接下来, 是一些编程相关的一些 C/C++ 的类库, 这样你就不用从头再造轮子了(对于 Java 的, 请参看 JDK 里的 Concurrent 开头的一系列的类).")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://www.boost.org/doc/libs/1_60_0/doc/html/lockfree.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Boost.Lockfree"),a("OutboundLink")],1),t._v(" - Boost 库中的无锁数据结构.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/concurrencykit/ck",target:"_blank",rel:"noopener noreferrer"}},[t._v("ConcurrencyKit"),a("OutboundLink")],1),t._v(" - 并发性编程的原语.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/facebook/folly",target:"_blank",rel:"noopener noreferrer"}},[t._v("Folly"),a("OutboundLink")],1),t._v(" - Facebook 的开源库(它对 MPMC 队列做了一个很好的实现).")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/preshing/junction",target:"_blank",rel:"noopener noreferrer"}},[t._v("Junction"),a("OutboundLink")],1),t._v(" - C++ 中的并发数据结构.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/rigtorp/MPMCQueue",target:"_blank",rel:"noopener noreferrer"}},[t._v("MPMCQueue"),a("OutboundLink")],1),t._v(' - 一个用 C++11 编写的有边界的"多生产者 - 多消费者"无锁队列.')]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/rigtorp/SPSCQueue",target:"_blank",rel:"noopener noreferrer"}},[t._v("SPSCQueue"),a("OutboundLink")],1),t._v(' - 一个有边界的"单生产者 - 单消费者"的无等待, 无锁的队列.')]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/rigtorp/Seqlock",target:"_blank",rel:"noopener noreferrer"}},[t._v("Seqlock"),a("OutboundLink")],1),t._v(" - 用 C++ 实现的 Seqlock.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://liburcu.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Userspace RCU"),a("OutboundLink")],1),t._v(" - liburcu 是一个用户空间的 RCU(Read-copy-update, 读 - 拷贝 - 更新)库.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/khizmax/libcds",target:"_blank",rel:"noopener noreferrer"}},[t._v("libcds"),a("OutboundLink")],1),t._v(" - 一个并发数据结构的 C++ 库.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://liblfds.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("liblfds"),a("OutboundLink")],1),t._v(" - 一个用 C 语言编写的可移植, 无许可证, 无锁的数据结构库.")])]),t._v(" "),a("h5",{attrs:{id:"_3-其它"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-其它"}},[t._v("#")]),t._v(" 3.其它")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("关于 64 位系统编程, 只要去一个地方就行了:  "),a("a",{attrs:{href:"https://software.intel.com/en-us/blogs/2011/07/07/all-about-64-bit-programming-in-one-place/",target:"_blank",rel:"noopener noreferrer"}},[t._v("All about 64-bit programming in one place"),a("OutboundLink")],1),t._v(", 这是一个关于 64 位编程相关的收集页面, 其中包括相关的文章, 28 节课程, 还有知识库和相关的 blog.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://dl.acm.org/citation.cfm?id=3037750",target:"_blank",rel:"noopener noreferrer"}},[t._v("What Scalable Programs Need from Transactional Memory"),a("OutboundLink")],1),t._v(" , 事务性内存(TM)一直是许多研究的重点, 它在诸如 IBM Blue Gene/Q 和 Intel Haswell 等处理器中得到了支持. 许多研究都使用 STAMP 基准测试套件来评估其设计. 然而, 我们所知的所有 TM 系统上的 STAMP 基准测试所获得的加速比较有限. 例如, 在 IBM Blue Gene/Q 上有 64 个线程, 我们观察到使用 Blue Gene/Q 硬件事务内存(HTM)的中值加速比为 1.4 倍, 使用软件事务内存(STM)的中值加速比为 4.1 倍. 什么限制了这些 TM 基准的性能? 在本论文中, 作者认为问题在于用于编写它们的编程模型和数据结构上, 只要使用合适的模型和数据结构, 程序的性能可以有 10 多倍的提升.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://software.intel.com/en-us/articles/improving-openssl-performance",target:"_blank",rel:"noopener noreferrer"}},[t._v("Improving OpenSSL Performance"),a("OutboundLink")],1),t._v(" , 这篇文章除了教你如何提高 OpenSSL 的执行性能, 还讲了一些底层的性能调优知识.")])]),t._v(" "),a("li",[a("p",[t._v("关于压缩的内容. 为了避免枯燥, 主要推荐下面这两篇实践性很强的文章.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.ebayinc.com/stories/blogs/tech/how-ebays-shopping-cart-used-compression-techniques-to-solve-network-io-bottlenecks/",target:"_blank",rel:"noopener noreferrer"}},[t._v("How eBay’s Shopping Cart used compression techniques to solve network I/O bottlenecks"),a("OutboundLink")],1),t._v(" , 这是一篇很好的文章, 讲述了 eBay 是如何通过压缩数据来提高整体服务性能的, 其中有几个比较好的压缩算法. 除了可以让你学到相关的技术知识, 还可以让你看到一种比较严谨的工程师文化.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://engineering.linkedin.com/blog/2017/05/boosting-site-speed-using-brotli-compression",target:"_blank",rel:"noopener noreferrer"}},[t._v("Linkedin: Boosting Site Speed Using Brotli Compression"),a("OutboundLink")],1),t._v(" , LinkedIn 在 2017 年早些时候开始使用 "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Brotli",target:"_blank",rel:"noopener noreferrer"}},[t._v("Brotli"),a("OutboundLink")],1),t._v(" 来替换 gzip, 以此带来更快的访问, 这篇文章讲述了什么是 Brotli 以及与其它压缩程序的比较和所带来的性能提升.")])])]),t._v(" "),a("li",[a("p",[t._v("这里有两篇关于 SSD 硬盘性能测试的文章. "),a("a",{attrs:{href:"https://devs.mailchimp.com/blog/performance-testing-with-ssds-part-1/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Performance Testing with SSDs, Part 1"),a("OutboundLink")],1),t._v(" 和 "),a("a",{attrs:{href:"https://devs.mailchimp.com/blog/performance-testing-with-ssds-pt-2/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Performance Testing with SSDs Part 2"),a("OutboundLink")],1),t._v(" , 这两篇文章介绍了测试 SSD 硬盘性能以及相关的操作系统调优方法.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://www.dwheeler.com/secure-programs/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Secure Programming HOWTO - Creating Secure Software"),a("OutboundLink")],1),t._v(" , 这是一本电子书, 其中有繁体中文的翻译, 这本电子书讲了 Linux/Unix 下的一些安全编程方面的知识.")])])]),t._v(" "),a("h5",{attrs:{id:"_4-相关论文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-相关论文"}},[t._v("#")]),t._v(" 4.相关论文")]),t._v(" "),a("ul",[a("li",[a("p",[a("a",{attrs:{href:"https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/acrobat-17.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Hints for Computer System Design"),a("OutboundLink")],1),t._v(" , 计算机设计的忠告, 这是 ACM 图灵奖得主 "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Butler_Lampson",target:"_blank",rel:"noopener noreferrer"}},[t._v("Butler Lampson"),a("OutboundLink")],1),t._v(' 在 Xerox PARC 工作时的一篇论文. 这篇论文简明扼要地总结了他在做系统设计时的一些想法, 非常值得一读. (用他的话来说, "Studying the design and implementation of a number of computer has led to some general hints for system design. They are described here and illustrated by many examples, ranging from hardware such as the Alto and the Dorado to application programs such as Bravo and Star". )')])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"http://www.hpl.hp.com/techreports/tandem/TR-86.1.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("The 5 minute rule for trading memory for disc accesses and the 5 byte rule for trading memory for CPU time"),a("OutboundLink")],1),t._v(" , 根据文章名称也可以看出, 5 分钟法则是用来衡量内存与磁盘的, 而 5 字节法则则是在内存和 CPU 之间的权衡. 这两个法则是 Jim Gray 和 Franco Putzolu 在 1986 年的文章.")]),t._v(" "),a("p",[t._v("在该论文发表 10 年后的 1997 年, Jim Gray 和 Goetz Graefe 又在 "),a("a",{attrs:{href:"http://research.microsoft.com/en-us/um/people/gray/5_min_rule_SIGMOD.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Five-Minute Rule Ten Years Later and Other Computer Storage Rules of Thumb"),a("OutboundLink")],1),t._v(" 中对该法则进行了重新审视. 2007 年, 也就是该论文发表 20 年后, 这年的 1 月 28 日, Jim Gray 驾驶一艘 40 英尺长的船从旧金山港出海, 目的是航行到附近的费拉隆岛, 在那里撒下母亲的骨灰. 出海之后, 他就同朋友和亲属失去了联系. 为了纪念和向大师致敬, 时隔 10 多年后的 2009 年 Goetz Graefe 又发表了 "),a("a",{attrs:{href:"http://cacm.acm.org/magazines/2009/7/32091-the-five-minute-rule-20-years-later/fulltext",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Five-Minute Rule 20 Years Later (and How Falsh Memory Changes the Rules)"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("p",[t._v("注明一下, Jim Gray 是关系型数据库领域的大师. 因在数据库和事务处理研究和实现方面的开创性贡献而获得 1998 年图灵奖. 美国科学院, 工程院两院院士, ACM 和 IEEE 两会会士. 他 25 岁成为加州大学伯克利分校计算机科学学院第一位博士. 在 IBM 工作期间参与和主持了 IMS, System R, SQL／DS, DB2 等项目的开发. 后任职于微软研究院, 主要关注应用数据库技术来处理各学科的海量信息.")])])]),t._v(" "),a("h5",{attrs:{id:"_5-小结-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-小结-12"}},[t._v("#")]),t._v(" 5.小结")]),t._v(" "),a("p",[t._v("总结一下今天的内容. 异步 I/O 模型是我个人觉得所有程序员都必需要学习的一门技术或是编程方法, 这其中的设计模式或是解决方法可以借鉴到分布式架构上来. 而且我认为, 学习这些模型非常重要, 你千万要认真学习.")]),t._v(" "),a("p",[t._v("接下来是 Lock-Free 方面的内容, 由于锁对于性能的影响实在是太大了, 所以它越来越被开发人员所重视. 如果想开发出一个高性能的程序, 你非常有必要学习 Lock-Free 的编程方式. 随后, 我给出系统底层方面的其它一些重要知识, 如 64 位编程, 提高 OpenSSL 的执行性能, 压缩, SSD 硬盘性能测试等. 最后介绍了几篇我认为对学习和巩固这些知识非常有帮助的论文, 都很经典, 推荐你务必看看.")]),t._v(" "),a("h4",{attrs:{id:"程序员练级攻略-java底层知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#程序员练级攻略-java底层知识"}},[t._v("#")]),t._v(" 程序员练级攻略:Java底层知识")]),t._v(" "),a("p",[t._v("前两篇文章分享的是系统底层方面的内容, 今天进入高手成长篇的第二部分--Java 底层知识.")]),t._v(" "),a("h5",{attrs:{id:"_1-java字节码相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-java字节码相关"}},[t._v("#")]),t._v(" 1.Java字节码相关")]),t._v(" "),a("p",[t._v("首先, Java 最黑科技的玩法就是"),a("strong",[t._v("字节码编程")]),t._v(", 也就是"),a("strong",[t._v("动态修改或是动态生成 Java 字节码")]),t._v(". Java 的字节码相当于汇编, 其中的一些细节你可以从下面的这几个教程中学习.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://dzone.com/articles/introduction-to-java-bytecode",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java Zone: Introduction to Java Bytecode"),a("OutboundLink")],1),t._v(" , 这篇文章图文并茂地向你讲述了 Java 字节码的一些细节, 是一篇很不错的入门文章.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.ibm.com/developerworks/library/it-haggar_bytecode/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("IBM DeveloperWorks: Java bytecode"),a("OutboundLink")],1),t._v(" , 虽然这篇文章很老了, 但是这篇文章是一篇非常好的讲 Java 字节码的文章.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/jon-bell/bytecode-examples",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java Bytecode and JVMTI Examples"),a("OutboundLink")],1),t._v(", 这是一些使用 "),a("a",{attrs:{href:"http://docs.oracle.com/javase/7/docs/platform/jvmti/jvmti.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("JVM Tool Interface"),a("OutboundLink")],1),t._v(" 操作字节码的比较实用的例子. 包括方法调用统计, 静态字节码修改, Heap Taggin 和 Heap Walking.")])]),t._v(" "),a("p",[t._v("当然一般来说, 我们不使用 JVMTI 操作字节码, 而是用一些更好用的库. 这里有三个库可以帮你比较容易地做这个事.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://wiki.openjdk.java.net/display/CodeTools/asmtools",target:"_blank",rel:"noopener noreferrer"}},[t._v("asmtools"),a("OutboundLink")],1),t._v(" - 用于生产环境的 Java .class 文件开发工具.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://bytebuddy.net/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Byte Buddy"),a("OutboundLink")],1),t._v(" - 代码生成库: 运行时创建 Class 文件而不需要编译器帮助.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/qmx/jitescript",target:"_blank",rel:"noopener noreferrer"}},[t._v("Jitescript"),a("OutboundLink")],1),t._v(" - 和 "),a("a",{attrs:{href:"https://github.com/headius/bitescript",target:"_blank",rel:"noopener noreferrer"}},[t._v("BiteScript"),a("OutboundLink")],1),t._v(" 类似的字节码生成库.")])]),t._v(" "),a("p",[t._v('就我而言, 我更喜欢 Byte Buddy, 它在 2015 年还获了 Oracle 的 "'),a("a",{attrs:{href:"https://www.oracle.com/corporate/pressrelease/dukes-award-102815.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Duke’s Choice"),a("OutboundLink")],1),t._v('" 大奖, 其中说 Byte Buddy 极大地发展了 Java 的技术.')]),t._v(" "),a("p",[t._v("使用字节码编程可以玩出很多高级玩法, 最高级的还是"),a("strong",[t._v("在 Java 程序运行时进行字节码修改和代码注入")]),t._v(". 听起来是不是一些很黑客, 也很黑科技的事? 是的, 这个方式使用 Java 这门静态语言"),a("strong",[t._v("在运行时可以进行各种动态的代码修改, 而且可以进行无侵入的编程")]),t._v(".")]),t._v(" "),a("p",[t._v("比如, "),a("strong",[t._v("不需要在代码中埋点做统计或监控, 可以使用这种技术把监控代码直接以字节码的方式注入到别人的代码中, 从而实现对实际程序运行情况进行统计和监控")]),t._v(". 如果你看过我的《编程范式游记》, 你就知道这种技术的威力了, 其可以很魔法地把业务逻辑和代码控制分离开来.")]),t._v(" "),a("p",[t._v("要做到这个事, 你还需要学习一个叫 "),a("strong",[t._v("Java Agent")]),t._v(' 的技术. Java Agent 使用的是 "'),a("a",{attrs:{href:"https://stackoverflow.com/questions/11898566/tutorials-about-javaagents",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java Instrumentation API"),a("OutboundLink")],1),t._v('", 其主要方法是实现一个叫 '),a("code",[t._v("premain()")]),t._v("​ 的方法(嗯, 一个比 "),a("code",[t._v("main()")]),t._v("​ 函数还要超前执行的 main 函数), 然后把你的代码编译成一个 jar 文件.")]),t._v(" "),a("p",[t._v("在 JVM 启动时, 使用这样的命令行来引入你的 jar 文件: "),a("code",[t._v("java -javaagent:yourAwesomeAgent.jar -jar App.jar")]),t._v('. 更为详细的文章你可以参看: "'),a("a",{attrs:{href:"https://www.javacodegeeks.com/2015/09/java-agents.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java Code Geeks: Java Agents"),a("OutboundLink")],1),t._v('", 你还可以看一下这个示例项目: '),a("a",{attrs:{href:"https://github.com/toptal/jvm-monitoring-agent",target:"_blank",rel:"noopener noreferrer"}},[t._v("jvm-monitoring-agent"),a("OutboundLink")],1),t._v(" 或是 "),a("a",{attrs:{href:"https://gist.github.com/EntryPointKR/152f089f6f3884047abcd19d39297c9e",target:"_blank",rel:"noopener noreferrer"}},[t._v("EntryPointKR/Agent.java"),a("OutboundLink")],1),t._v('. 如果想用 ByteBuddy 来玩, 你可以看看这篇文章 "'),a("a",{attrs:{href:"http://www.infoq.com/cn/articles/Easily-Create-Java-Agents-with-ByteBuddy",target:"_blank",rel:"noopener noreferrer"}},[t._v("通过使用 Byte Buddy, 便捷地创建 Java Agent"),a("OutboundLink")],1),t._v('". 如果你想学习如何用 Java Agent 做监控, 你可以看一下这个项目 '),a("a",{attrs:{href:"http://www.stagemonitor.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Stage Monitor"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("h5",{attrs:{id:"_2-jvm相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-jvm相关"}},[t._v("#")]),t._v(" 2.JVM相关")]),t._v(" "),a("p",[t._v("接下来讲讲 Java 底层知识中另一个非常重要的内容--JVM.")]),t._v(" "),a("p",[t._v("说起 JVM, 有必要读一下 JVM 的规格说明书, 我在这里放一个 Java 8 的, "),a("a",{attrs:{href:"https://docs.oracle.com/javase/specs/jvms/se8/jvms8.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Java Virtual Machine Specification Java SE 8 Edition"),a("OutboundLink")],1),t._v(' . 对于规格说明书的阅读, 我认为是系统了解 JVM 规范的最佳文档, 这个文档可以让你对于搞不清楚或是诡异的问题恍然大悟. 关于中文翻译, 有人在 GitHub 上开了个 Repo - "'),a("a",{attrs:{href:"https://github.com/waylau/java-virtual-machine-specification",target:"_blank",rel:"noopener noreferrer"}},[t._v("java-virtual-machine-specification"),a("OutboundLink")],1),t._v('".')]),t._v(" "),a("p",[t._v("另外也推荐一下 "),a("a",{attrs:{href:"https://shipilev.net/jvm-anatomy-park/",target:"_blank",rel:"noopener noreferrer"}},[t._v("JVM Anatomy Park"),a("OutboundLink")],1),t._v(" JVM 解剖公园, 这是一个系列的文章, 每篇文章都不长, 但是都很精彩, 带你一点一点地把 JVM 中的一些技术解开.")]),t._v(" "),a("p",[t._v("学习 Java 底层原理还有 Java 的内存模型, 官方文章是 "),a("a",{attrs:{href:"http://www.jcp.org/en/jsr/detail?id=133",target:"_blank",rel:"noopener noreferrer"}},[t._v("JSR 133"),a("OutboundLink")],1),t._v(". 还有马里兰大学的威廉·皮尤(William Pugh)教授收集的和 Java 内存模型相关的文献 - "),a("a",{attrs:{href:"http://www.cs.umd.edu/~pugh/java/memoryModel/",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Java Memory Model"),a("OutboundLink")],1),t._v(" , 你可以前往浏览.")]),t._v(" "),a("p",[t._v("对于内存方面, 道格·利(Doug Lea)有两篇文章也是很有价值的.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://gee.cs.oswego.edu/dl/jmm/cookbook.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("The JSR-133 Cookbook for Compiler Writers"),a("OutboundLink")],1),t._v(", 解释了怎样实现 Java 内存模型, 特别是在考虑到多处理器(或多核)系统的情况下, 多线程和读写屏障的实现.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://gee.cs.oswego.edu/dl/html/j9mm.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Using JDK 9 Memory Order Modes"),a("OutboundLink")],1),t._v(", 讲了怎样通过 VarHandle 来使用 plain, opaque, release/acquire 和 volatile 四种共享内存的访问模式, 并剖析了底层的原理.")])]),t._v(" "),a("p",[t._v("垃圾回收机制也是需要好好学习的, 在这里推荐一本书 《"),a("a",{attrs:{href:"https://book.douban.com/subject/6809987/",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Garbage Collection Handbook"),a("OutboundLink")],1),t._v("》. 这本书非常全面地介绍了垃圾收集的原理, 设计和算法. 但是这本书也是相当难啃的. 中文翻译《"),a("a",{attrs:{href:"https://book.douban.com/subject/26740958/",target:"_blank",rel:"noopener noreferrer"}},[t._v("垃圾回收算法手册"),a("OutboundLink")],1),t._v("》翻译得很一般, 有人说翻译得很烂. 所以, 如果可能, 还是读英文版的. 如果你对从事垃圾回收相关的工作有兴趣, 那么你需要好好看一下这本书.")]),t._v(" "),a("p",[t._v("当然, 更多的人可能只需要知道怎么调优垃圾回收, 那么推荐读读 "),a("a",{attrs:{href:"http://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Garbage Collection Tuning Guide"),a("OutboundLink")],1),t._v(" , 它是 Hotspot Java 虚拟机的垃圾回收调优指南, 对你很有帮助.")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://gist.github.com/djspiewak/464c11307cabc80171c90397d4ec34ef",target:"_blank",rel:"noopener noreferrer"}},[t._v("Quick Tips for Fast Code on the JVM"),a("OutboundLink")],1),t._v(" 也是一篇很不错的文章, 里面有写出更快的 Java 代码的几个小提示, 值得一读.")]),t._v(" "),a("h5",{attrs:{id:"_3-小结-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-小结-10"}},[t._v("#")]),t._v(" 3.小结")]),t._v(" "),a("p",[t._v("总结一下今天学到的内容. Java 最黑科技的玩法就是字节码编程, 也就是动态修改或是动态生成 Java 字节码. Java 的字节码相当于汇编, 学习其中的细节很有意思, 为此我精心挑选了 3 篇文章, 供你学习. 我们一般不使用 JVMTI 操作字节码, 而是用一些更好用的库, 如 asmtools, Byte Buddy 和 BiteScript 等. 使用字节码编程可以玩出很多高级玩法, 其中最高级的玩法是在 Java 程序运行时进行字节码修改和代码注入. 同时, 我介绍了 Java Agent 技术, 帮助你更好地实现这种高级玩法.")]),t._v(" "),a("p",[t._v("JVM 也是学习 Java 过程中非常重要的一部分内容. 我推荐阅读一下 JVM 的规格说明书, 我认为, 它是系统了解 JVM 规范的最佳文档, 可以让你对于搞不清楚或是诡异的问题恍然大悟. 同时推荐了 "),a("a",{attrs:{href:"https://shipilev.net/jvm-anatomy-park/",target:"_blank",rel:"noopener noreferrer"}},[t._v("JVM Anatomy Park"),a("OutboundLink")],1),t._v(" 系列文章, 也非常值得一读.")]),t._v(" "),a("p",[t._v("随后介绍的是 Java 的内存模型和垃圾回收机制, 尤其给出了如何调优垃圾回收方面的资料. 这些内容都很底层, 但也都很重要. 对于想成为高手的你来说, 还是有必要花时间来啃一啃的.")]),t._v(" "),a("h4",{attrs:{id:"程序员练级攻略-数据库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#程序员练级攻略-数据库"}},[t._v("#")]),t._v(" 程序员练级攻略:数据库")]),t._v(" "),a("p",[t._v("对于数据库方向, 重点就是两种数据库, 一种是以 SQL 为代表的关系型数据库, 另一种是以非 SQL 为代表的 NoSQL 数据库. 关系型数据库主要有三个: Oracle, MySQL 和 Postgres.")]),t._v(" "),a("p",[t._v("在这里只讨论越来越主流的 MySQL 数据库. 首先要了解数据库的一些实现原理和内存的一些细节, 然后要知道数据的高可用和数据复制这些比较重要的话题, 了解一下关系型数据库的一些实践和难点. 然后会进入到 NoSQL 数据库的学习.")]),t._v(" "),a("p",[t._v("NoSQL 数据库千奇百怪, 其主要是解决了关系型数据库中的各种问题. 第一个大问题就是数据的 Schema 非常多, 用关系型数据库来表示不同的 Data Schema 是非常笨拙的, 所以要有不同的数据库(如时序型, 键值对型, 搜索型, 文档型, 图结构型等). 另一个大问题是, 关系型数据库的 ACID 是一件很讨厌的事, 这极大地影响了数据库的性能和扩展性, 所以 NoSQL 在这上面做了相应的妥协以解决大规模伸缩的问题.")]),t._v(" "),a("p",[t._v("对于一个程序员, 你可能觉得数据库的事都是 DBA 的事, 然而我想告诉你你错了, 这些事才真正是程序员的事. 因为程序是需要和数据打交道的, 所以程序员或架构师不仅需要设计数据模型, 还要保证整体系统的稳定性和可用性, 数据是整个系统中关键中的关键. 所以作为一个架构师或程序员, 你必须了解最重要的数据存储--数据库.")]),t._v(" "),a("h5",{attrs:{id:"_1-关系型数据库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-关系型数据库"}},[t._v("#")]),t._v(" 1.关系型数据库")]),t._v(" "),a("p",[t._v("今天, 关系型数据库最主要的两个代表是闭源的 Oracle 和开源的 MySQL. 当然, 还有很多了, 比如微软的 SQL Server, IBM 的 DB2 等, 还有开源的 PostgreSQL. 关系型数据库的世界中有好多好多产品. 当然, 还是 Oracle 和 MySQL 是比较主流的. 所以, 这里主要介绍更为开放和主流的 MySQL.")]),t._v(" "),a("p",[t._v("如果你要玩 Oracle, 我这里只推荐一本书《"),a("a",{attrs:{href:"https://book.douban.com/subject/5402711/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Oracle Database 9i/10g/11g 编程艺术"),a("OutboundLink")],1),t._v("》, 无论是开发人员还是 DBA, 它都是必读的书. 这本书的作者是 Oracle 公司的技术副总裁托马斯·凯特(Thomas Kyte), 他也是世界顶级的 Oracle 专家.")]),t._v(" "),a("p",[t._v("这本书中深入分析了 Oracle 数据库体系结构, 包括文件, 内存结构以及构成 Oracle 数据库和实例的底层进程, 利用具体示例讨论了一些重要的数据库主题, 如锁定, 并发控制, 事务等. 同时分析了数据库中的物理结构, 如表, 索引和数据类型, 并介绍采用哪些技术能最优地使用这些物理结构.")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("学习 MySQL, 首先一定是要 "),a("a",{attrs:{href:"https://dev.mysql.com/doc/",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL 官方手册"),a("OutboundLink")],1),t._v(".")])]),t._v(" "),a("li",[a("p",[t._v("然后, 官方还有几个 PPT 也要学习一下.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.mysql.com/cn/why-mysql/presentations/tune-mysql-queries-performance/",target:"_blank",rel:"noopener noreferrer"}},[t._v("How to Analyze and Tune MySQL Queries for Better Performance"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.mysql.com/cn/why-mysql/presentations/mysql-performance-tuning101/",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL Performance Tuning 101"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.mysql.com/cn/why-mysql/presentations/mysql-performance-sys-schema/",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL Performance Schema & Sys Schema"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.mysql.com/cn/why-mysql/presentations/mysql-performance-tuning-best-practices/",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL Performance: Demystified Tuning & Best Practices"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.mysql.com/cn/why-mysql/presentations/mysql-security-best-practices/",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL Security Best Practices"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.mysql.com/cn/why-mysql/presentations/mysql-cluster-deployment-best-practices/",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL Cluster Deployment Best Practices"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.mysql.com/cn/why-mysql/presentations/mysql-high-availability-innodb-cluster/",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL High Availability with InnoDB Cluster"),a("OutboundLink")],1)])])]),t._v(" "),a("li",[a("p",[t._v("然后推荐《"),a("a",{attrs:{href:"https://book.douban.com/subject/23008813/",target:"_blank",rel:"noopener noreferrer"}},[t._v("高性能 MySQL"),a("OutboundLink")],1),t._v("》, 这本书是 MySQL 领域的经典之作, 拥有广泛的影响力. 不但适合数据库管理员(DBA)阅读, 也适合开发人员参考学习. 不管是数据库新手还是专家, 都能从本书中有所收获.")])]),t._v(" "),a("li",[a("p",[t._v("如果你对 MySQL 的内部原理有兴趣的话, 可以看一下这本书《"),a("a",{attrs:{href:"https://book.douban.com/subject/24708143/",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL 技术内幕: InnoDB 存储引擎"),a("OutboundLink")],1),t._v("》. 当然, 还有官网的"),a("a",{attrs:{href:"https://dev.mysql.com/doc/internals/en/",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL Internals Manual"),a("OutboundLink")],1),t._v(" .")])]),t._v(" "),a("li",[a("p",[t._v("数据库的索引设计和优化也是非常关键的, 这里还有一本书《"),a("a",{attrs:{href:"https://book.douban.com/subject/26419771/",target:"_blank",rel:"noopener noreferrer"}},[t._v("数据库的索引设计与优化"),a("OutboundLink")],1),t._v("》也是很不错的. 虽然不是讲 MySQL 的, 但是原理都是相通的. 这也是上面推荐过的《高性能 MySQL》在其索引部分推荐的一本好书.")]),t._v(" "),a("p",[t._v("你千万不要觉得只有做数据库你才需要学习这种索引技术. 不是的! 在系统架构上, 在分布式架构中, 索引技术也是非常重要的. 这本书对于索引性能进行了非常清楚的估算, 不像其它书中只是模糊的描述, 你一定会收获很多.")])])]),t._v(" "),a("p",[t._v("下面还有一些不错的和 MySQL 相关的文章.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://blog.codinglabs.org/articles/theory-of-mysql-index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL 索引背后的数据结构及算法原理"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://medium.com/@kousiknath/data-structures-database-storage-internals-1f5ed3619d43",target:"_blank",rel:"noopener noreferrer"}},[t._v("Some study on database storage internals"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://medium.com/@Pinterest_Engineering/sharding-pinterest-how-we-scaled-our-mysql-fleet-3f341e96ca6f",target:"_blank",rel:"noopener noreferrer"}},[t._v("Sharding Pinterest: How we scaled our MySQL fleet"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.mysql.com/cn/why-mysql/white-papers/mysql-guide-to-high-availability-solutions/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Guide to MySQL High Availability"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://dzone.com/articles/choosing-mysql-high-availability-solutions",target:"_blank",rel:"noopener noreferrer"}},[t._v("Choosing MySQL High Availability Solutions"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://mariadb.com/sites/default/files/content/Whitepaper_High_availability_with_MariaDB-TX.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("High availability with MariaDB TX: The definitive guide"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("最后, 还有一个 MySQL 的资源列表 "),a("a",{attrs:{href:"https://shlomi-noach.github.io/awesome-mysql/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Awesome MySQL"),a("OutboundLink")],1),t._v(", 这个列表中有很多的工具和开发资源, 可以帮助你做很多事.")]),t._v(" "),a("p",[t._v("MySQL 有两个比较有名的分支, 一个是 Percona, 另一个是 MariaDB, 其官网上的 Resources 页面中有很多不错的资源和文档, 可以经常看看.  "),a("a",{attrs:{href:"https://www.percona.com/resources",target:"_blank",rel:"noopener noreferrer"}},[t._v("Percona Resources"),a("OutboundLink")],1),t._v(", "),a("a",{attrs:{href:"https://mariadb.com/resources",target:"_blank",rel:"noopener noreferrer"}},[t._v("MariaDB Resources"),a("OutboundLink")],1),t._v(" , 以及它们的开发博客中也有很多不错的文章, 分别为 "),a("a",{attrs:{href:"https://www.percona.com/blog/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Percona Blog"),a("OutboundLink")],1),t._v(" 和 "),a("a",{attrs:{href:"https://mariadb.com/resources/blog",target:"_blank",rel:"noopener noreferrer"}},[t._v("MariaDB Blog"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("p",[t._v("然后是关于 MySQL 的一些相关经验型的文章.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.percona.com/live/mysql-conference-2015/sessions/bookingcom-evolution-mysql-system-design",target:"_blank",rel:"noopener noreferrer"}},[t._v("Booking.com: Evolution of MySQL System Design"),a("OutboundLink")],1),t._v(" , Booking.com 的 MySQL 数据库使用的演化, 其中有很多不错的经验分享, 我相信也是很多公司会遇到的的问题.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://medium.com/airbnb-engineering/tracking-the-money-scaling-financial-reporting-at-airbnb-6d742b80f040",target:"_blank",rel:"noopener noreferrer"}},[t._v("Tracking the Money - Scaling Financial Reporting at Airbnb"),a("OutboundLink")],1),t._v(" , Airbnb 的数据库扩展的经验分享.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://eng.uber.com/mysql-migration/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Why Uber Engineering Switched from Postgres to MySQL"),a("OutboundLink")],1),t._v(" , 无意比较两个数据库谁好谁不好, 推荐这篇 Uber 的长文, 主要是想让你从中学习到一些经验和技术细节, 这是一篇很不错的文章.")])]),t._v(" "),a("p",[t._v("关于 MySQL 的集群复制, 下面有这些文章供你学习一下, 都是很不错的实践性比较强的文章.")]),t._v(" "),a("ul",[a("li",[a("p",[a("a",{attrs:{href:"https://engineering.imvu.com/2013/01/09/monitoring-delayed-replication-with-a-focus-on-mysql/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Monitoring Delayed Replication, With A Focus On MySQL"),a("OutboundLink")],1)])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://githubengineering.com/mitigating-replication-lag-and-reducing-read-load-with-freno/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Mitigating replication lag and reducing read load with freno"),a("OutboundLink")],1)])]),t._v(" "),a("li",[a("p",[t._v("另外, Booking.com 给了一系列的文章, 你可以看看:")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://medium.com/booking-com-infrastructure/better-parallel-replication-for-mysql-14e2d7857813",target:"_blank",rel:"noopener noreferrer"}},[t._v("Better Parallel Replication for MySQL"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://medium.com/booking-com-infrastructure/evaluating-mysql-parallel-replication-part-2-slave-group-commit-459026a141d2",target:"_blank",rel:"noopener noreferrer"}},[t._v("Evaluating MySQL Parallel Replication Part 2: Slave Group Commit"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://medium.com/booking-com-infrastructure/evaluating-mysql-parallel-replication-part-3-benchmarks-in-production-db5811058d74",target:"_blank",rel:"noopener noreferrer"}},[t._v("Evaluating MySQL Parallel Replication Part 3: Benchmarks in Production"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://medium.com/booking-com-infrastructure/evaluating-mysql-parallel-replication-part-4-more-benchmarks-in-production-49ee255043ab",target:"_blank",rel:"noopener noreferrer"}},[t._v("Evaluating MySQL Parallel Replication Part 4: More Benchmarks in Production"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://medium.com/booking-com-infrastructure/evaluating-mysql-parallel-replication-part-4-annex-under-the-hood-eb456cf8b2fb",target:"_blank",rel:"noopener noreferrer"}},[t._v("Evaluating MySQL Parallel Replication Part 4, Annex: Under the Hood"),a("OutboundLink")],1)])])])]),t._v(" "),a("p",[t._v("对于 MySQL 的数据分区来说, 还有下面几篇文章你可以看看.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://stackoverflow.com/questions/5541421/mysql-sharding-approaches",target:"_blank",rel:"noopener noreferrer"}},[t._v("StackOverflow: MySQL sharding approaches?"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.percona.com/blog/2009/08/06/why-you-dont-want-to-shard/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Why you don’t want to shard"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.percona.com/sites/default/files/presentations/How%20to%20Scale%20Big%20Data%20Applications.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("How to Scale Big Data Applications"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.percona.com/blog/2016/08/30/mysql-sharding-with-proxysql/",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL Sharding with ProxySQL"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("然后, 再看看各个公司做 MySQL Sharding 的一些经验分享.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://devs.mailchimp.com/blog/using-shards-to-accommodate-millions-of-users/",target:"_blank",rel:"noopener noreferrer"}},[t._v("MailChimp: Using Shards to Accommodate Millions of Users"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://eng.uber.com/schemaless-rewrite/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Uber: Code Migration in Production: Rewriting the Sharding Layer of Uber’s Schemaless Datastore"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://instagram-engineering.com/sharding-ids-at-instagram-1cf5a71e5a5c",target:"_blank",rel:"noopener noreferrer"}},[t._v("Sharding & IDs at Instagram"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://medium.com/airbnb-engineering/how-we-partitioned-airbnb-s-main-database-in-two-weeks-55f7e006ff21",target:"_blank",rel:"noopener noreferrer"}},[t._v("Airbnb: How We Partitioned Airbnb’s Main Database in Two Weeks"),a("OutboundLink")],1)])]),t._v(" "),a("h5",{attrs:{id:"_2-nosql数据库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-nosql数据库"}},[t._v("#")]),t._v(" 2.NoSQL数据库")]),t._v(" "),a("p",[t._v("关于 NoSQL 数据库, 其最初目的就是解决大数据的问题. 然而, 也有人把其直接用来替换掉关系型数据库. 所以在学习这个技术之前, 我们需要对这个技术的一些概念和初衷有一定的了解. 下面是一些推荐资料.")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Martin Fowler 在 YouTube 上分享的 NoSQL 介绍 "),a("a",{attrs:{href:"https://youtu.be/qI_g07C_Q5I",target:"_blank",rel:"noopener noreferrer"}},[t._v("Introduction To NoSQL"),a("OutboundLink")],1),t._v(",  以及他参与编写的 "),a("a",{attrs:{href:"https://book.douban.com/subject/25662138/",target:"_blank",rel:"noopener noreferrer"}},[t._v("NoSQL Distilled - NoSQL 精粹"),a("OutboundLink")],1),t._v(", 这本书才 100 多页, 是本难得的关于 NoSQL 的书, 很不错, 非常易读.")])]),t._v(" "),a("li",[a("p",[t._v("NoSQL Databases: a Survey and Decision Guidance, 这篇文章可以带你自上而下地从 CAP 原理到开始了解 NoSQL 的种种技术, 是一篇非常不错的文章.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://resources.sei.cmu.edu/asset_files/WhitePaper/2014_019_001_90915.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Distribution, Data, Deployment: Software Architecture Convergence in Big Data Systems"),a("OutboundLink")],1),t._v(", 这是卡内基·梅隆大学的一篇讲分布式大数据系统的论文. 其中主要讨论了在大数据时代下的软件工程中的一些关键点, 也说到了 NoSQL 数据库.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"http://ianvarley.com/UT/MR/Varley_MastersReport_Full_2009-08-07.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("No Relation: The Mixed Blessings of Non-Relational Databases"),a("OutboundLink")],1),t._v(", 这篇论文虽然有点年代久远. 但这篇论文是 HBase 的基础, 你花上一点时间来读读, 就可以了解到, 对各种非关系型数据存储优缺点的一个很好的比较.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://highlyscalable.wordpress.com/2012/03/01/nosql-data-modeling-techniques/",target:"_blank",rel:"noopener noreferrer"}},[t._v("NoSQL Data Modeling Techniques"),a("OutboundLink")],1),t._v(" , NoSQL 建模技术. 这篇文章我曾经翻译在了 CoolShell 上, 标题为 "),a("a",{attrs:{href:"https://coolshell.cn/articles/7270.htm",target:"_blank",rel:"noopener noreferrer"}},[t._v("NoSQL 数据建模技术"),a("OutboundLink")],1),t._v(", 供你参考.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://docs.mongodb.com/manual/core/data-modeling-introduction/",target:"_blank",rel:"noopener noreferrer"}},[t._v("MongoDB - Data Modeling Introduction"),a("OutboundLink")],1),t._v(" , 虽然这是 MongoDB 的数据建模介绍, 但是其很多观点可以用于其它的 NoSQL 数据库.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://firebase.google.com/docs/database/android/structure-data",target:"_blank",rel:"noopener noreferrer"}},[t._v("Firebase - Structure Your Database"),a("OutboundLink")],1),t._v(" , Google 的 Firebase 数据库使用 JSON 建模的一些最佳实践.")])])]),t._v(" "),a("li",[a("p",[t._v("因为 CAP 原理, 所以当你需要选择一个 NoSQL 数据库的时候, 你应该看看这篇文档 "),a("a",{attrs:{href:"http://blog.nahurst.com/visual-guide-to-nosql-systems",target:"_blank",rel:"noopener noreferrer"}},[t._v("Visual Guide to NoSQL Systems"),a("OutboundLink")],1),t._v(".")])])]),t._v(" "),a("p",[t._v("选 SQL 还是 NoSQL, 这里有两篇文章, 值得你看看.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.upwork.com/hiring/data/sql-vs-nosql-databases-whats-the-difference/",target:"_blank",rel:"noopener noreferrer"}},[t._v("SQL vs. NoSQL Databases: What’s the Difference?"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://engineering.salesforce.com/sql-or-nosql-9eaf1d92545b",target:"_blank",rel:"noopener noreferrer"}},[t._v("Salesforce: SQL or NoSQL"),a("OutboundLink")],1)])]),t._v(" "),a("h5",{attrs:{id:"_3-各种nosql数据库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-各种nosql数据库"}},[t._v("#")]),t._v(" 3.各种NoSQL数据库")]),t._v(" "),a("p",[t._v("学习使用 NoSQL 数据库其实并不是一件很难的事, 只要你把官方的文档仔细地读一下, 是很容易上手的, 而且大多数 NoSQL 数据库都是开源的, 所以, 也可以通过代码自己解决问题. 下面我主要给出一些典型的 NoSQL 数据库的一些经验型的文章, 供你参考.")]),t._v(" "),a("p",[a("strong",[t._v("列数据库 Column Database")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Cassandra 相关")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("沃尔玛实验室有两篇文章值得一读.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://medium.com/walmartlabs/avoid-pitfalls-in-scaling-your-cassandra-cluster-lessons-and-remedies-a71ca01f8c04",target:"_blank",rel:"noopener noreferrer"}},[t._v("Avoid Pitfalls in Scaling Cassandra Cluster at Walmart"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://medium.com/walmartlabs/building-object-store-storing-images-in-cassandra-walmart-scale-a6b9c02af593",target:"_blank",rel:"noopener noreferrer"}},[t._v("Storing Images in Cassandra at Walmart"),a("OutboundLink")],1)])])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://engineeringblog.yelp.com/2016/08/how-we-scaled-our-ad-analytics-with-cassandra.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Yelp: How We Scaled Our Ad Analytics with Apache Cassandra"),a("OutboundLink")],1),t._v(" , Yelp 的这篇博客也有一些相关的经验和教训.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://blog.discordapp.com/how-discord-stores-billions-of-messages-7fa6ec7ee4c7",target:"_blank",rel:"noopener noreferrer"}},[t._v("Discord: How Discord Stores Billions of Messages"),a("OutboundLink")],1),t._v(" , Discord 公司分享的一个如何存储十亿级消息的技术文章.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://www.slideshare.net/DataStax/cassandra-at-instagram-2016",target:"_blank",rel:"noopener noreferrer"}},[t._v("Cassandra at Instagram"),a("OutboundLink")],1),t._v(" , Instagram 的一个 PPT, 其中介绍了 Instagram 中是怎么使用 Cassandra 的.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://medium.com/netflix-techblog/benchmarking-cassandra-scalability-on-aws-over-a-million-writes-per-second-39f45f066c9e",target:"_blank",rel:"noopener noreferrer"}},[t._v("Netflix: Benchmarking Cassandra Scalability on AWS - Over a million writes per second"),a("OutboundLink")],1),t._v(" , Netflix 公司在 AWS 上给 Cassandra 做的一个 Benchmark.")])])])]),t._v(" "),a("li",[a("p",[t._v("HBase 相关")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://medium.com/imgur-engineering/imgur-notifications-from-mysql-to-hbase-9dba6fc44183",target:"_blank",rel:"noopener noreferrer"}},[t._v("Imgur Notification: From MySQL to HBASE"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://medium.com/@Pinterest_Engineering/improving-hbase-backup-efficiency-at-pinterest-86159da4b954",target:"_blank",rel:"noopener noreferrer"}},[t._v("Pinterest: Improving HBase Backup Efficiency"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.ibm.com/support/knowledgecenter/en/SSPT3X_2.1.2/com.ibm.swg.im.infosphere.biginsights.analyze.doc/doc/bigsql_TuneHbase.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("IBM : Tuning HBase performance"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.larsgeorge.com/2010/05/hbase-file-locality-in-hdfs.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("HBase File Locality in HDFS"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://borthakur.com/ftp/RealtimeHadoopSigmod2011.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Apache Hadoop Goes Realtime at Facebook"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.294.8459&rep=rep1&type=pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Storage Infrastructure Behind Facebook Messages: Using HBase at Scale"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/rayokota/awesome-hbase",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub: Awesome HBase"),a("OutboundLink")],1)])])])]),t._v(" "),a("p",[t._v("针对于 HBase 有两本书你可以考虑一下.")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("首先, 先推荐两本书, 一本是偏实践的《"),a("a",{attrs:{href:"https://book.douban.com/subject/25706541/",target:"_blank",rel:"noopener noreferrer"}},[t._v("HBase 实战"),a("OutboundLink")],1),t._v("》, 另一本是偏大而全的手册型的《"),a("a",{attrs:{href:"https://book.douban.com/subject/10748460/",target:"_blank",rel:"noopener noreferrer"}},[t._v("HBase 权威指南"),a("OutboundLink")],1),t._v("》.")])]),t._v(" "),a("li",[a("p",[t._v("当然, 你也可以看看官方的 "),a("a",{attrs:{href:"http://hbase.apache.org/0.94/book/book.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Apache HBase™ Reference Guide"),a("OutboundLink")],1)])]),t._v(" "),a("li",[a("p",[t._v("另外两个列数据库:")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://clickhouse.yandex/",target:"_blank",rel:"noopener noreferrer"}},[t._v("ClickHouse - Open Source Distributed Column Database at Yandex"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://engineering.giphy.com/scaling-redshift-without-scaling-costs/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Scaling Redshift without Scaling Costs at GIPHY"),a("OutboundLink")],1)])])])]),t._v(" "),a("p",[a("strong",[t._v("文档数据库 Document Database - MongoDB, SimpleDB, CouchDB")])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://msdn.microsoft.com/en-us/magazine/hh547103.aspx",target:"_blank",rel:"noopener noreferrer"}},[t._v("Data Points - What the Heck Are Document Databases?"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.mongodb.com/blog/post/ebay-building-mission-critical-multi-data-center-applications-with-mongodb",target:"_blank",rel:"noopener noreferrer"}},[t._v("eBay: Building Mission-Critical Multi-Data Center Applications with MongoDB"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://medium.baqend.com/parse-is-gone-a-few-secrets-about-their-infrastructure-91b3ab2fcf71",target:"_blank",rel:"noopener noreferrer"}},[t._v("The AWS and MongoDB Infrastructure of Parse: Lessons Learned"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://medium.com/build-addepar/migrating-mountains-of-mongo-data-63e530539952",target:"_blank",rel:"noopener noreferrer"}},[t._v("Migrating Mountains of Mongo Data"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://engineering.linkedin.com/blog/2017/12/couchbase-ecosystem-at-linkedin",target:"_blank",rel:"noopener noreferrer"}},[t._v("Couchbase Ecosystem at LinkedIn"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://medium.com/zendesk-engineering/resurrecting-amazon-simpledb-9404034ec506",target:"_blank",rel:"noopener noreferrer"}},[t._v("SimpleDB at Zendesk"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/ramnes/awesome-mongodb",target:"_blank",rel:"noopener noreferrer"}},[t._v("Github: Awesome MongoDB"),a("OutboundLink")],1)])]),t._v(" "),a("p",[a("strong",[t._v("数据结构数据库 Data structure Database - Redis")])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://tech.trivago.com/2017/01/25/learn-redis-the-hard-way-in-production/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Learn Redis the hard way (in production) at Trivago"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://highscalability.com/blog/2014/9/8/how-twitter-uses-redis-to-scale-105tb-ram-39mm-qps-10000-ins.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Twitter: How Twitter Uses Redis To Scale - 105TB RAM, 39MM QPS, 10,000+ Instances"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://slack.engineering/scaling-slacks-job-queue-687222e9d100",target:"_blank",rel:"noopener noreferrer"}},[t._v("Slack: Scaling Slack’s Job Queue - Robustly Handling Billions of Tasks in Milliseconds Using Kafka and Redis"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://githubengineering.com/moving-persistent-data-out-of-redis/",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub: Moving persistent data out of Redis at GitHub"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://engineering.instagram.com/storing-hundreds-of-millions-of-simple-key-value-pairs-in-redis-1091ae80f74c",target:"_blank",rel:"noopener noreferrer"}},[t._v("Instagram: Storing Hundreds of Millions of Simple Key-Value Pairs in Redis"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.infoq.com/presentations/twitch-pokemon",target:"_blank",rel:"noopener noreferrer"}},[t._v("Redis in Chat Architecture of Twitch (from 27:22)"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://deliveroo.engineering/2016/10/07/optimising-session-key-storage.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Deliveroo: Optimizing Session Key Storage in Redis"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://deliveroo.engineering/2017/01/19/optimising-membership-queries.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Deliveroo: Optimizing Redis Storage"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/JamzyWang/awesome-redis",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub: Awesome Redis"),a("OutboundLink")],1)])]),t._v(" "),a("p",[a("strong",[t._v("时序数据库 Time-Series Database")])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://blog.timescale.com/what-the-heck-is-time-series-data-and-why-do-i-need-a-time-series-database-dcf3b1b18563",target:"_blank",rel:"noopener noreferrer"}},[t._v("What is Time-Series Data & Why We Need a Time-Series Database"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.timescale.com/time-series-data-why-and-how-to-use-a-relational-database-instead-of-nosql-d0cd6975e87c",target:"_blank",rel:"noopener noreferrer"}},[t._v("Time Series Data: Why and How to Use a Relational Database instead of NoSQL"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://code.facebook.com/posts/952820474848503/beringei-a-high-performance-time-series-storage-engine/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Beringei: High-performance Time Series Storage Engine @Facebook"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://medium.com/netflix-techblog/introducing-atlas-netflixs-primary-telemetry-platform-bd31f4d8ed9a",target:"_blank",rel:"noopener noreferrer"}},[t._v("Introducing Atlas: Netflix’s Primary Telemetry Platform @Netflix"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.timescale.com/when-boring-is-awesome-building-a-scalable-time-series-database-on-postgresql-2900ea453ee2",target:"_blank",rel:"noopener noreferrer"}},[t._v("Building a Scalable Time Series Database on PostgreSQL"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://medium.com/netflix-techblog/scaling-time-series-data-storage-part-i-ec2b6d44ba39",target:"_blank",rel:"noopener noreferrer"}},[t._v("Scaling Time Series Data Storage - Part I @Netflix"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://medium.com/@leventov/design-of-a-cost-efficient-time-series-store-for-big-data-88c5dc41af8e",target:"_blank",rel:"noopener noreferrer"}},[t._v("Design of a Cost Efficient Time Series Store for Big Data"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/xephonhq/awesome-time-series-database",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub: Awesome Time-Series Database"),a("OutboundLink")],1)])]),t._v(" "),a("p",[a("strong",[t._v("图数据库 - Graph Platform")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("首先是 IBM Devloperworks 上的两个简介性的 PPT.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.ibm.com/developerworks/library/cl-graph-database-1/cl-graph-database-1-pdf.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Intro to graph databases, Part 1, Graph databases and the CRUD operations"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.ibm.com/developerworks/library/cl-graph-database-2/cl-graph-database-2-pdf.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Intro to graph databases, Part 2, Building a recommendation engine with a graph database"),a("OutboundLink")],1)])])]),t._v(" "),a("li",[a("p",[t._v("然后是一本免费的电子书《"),a("a",{attrs:{href:"http://graphdatabases.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("Graph Database"),a("OutboundLink")],1),t._v("》.")])]),t._v(" "),a("li",[a("p",[t._v("接下来是一些图数据库的介绍文章.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.infoq.com/presentations/graph-database-scalability",target:"_blank",rel:"noopener noreferrer"}},[t._v("Handling Billions of Edges in a Graph Database"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://neo4j.com/customers/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Neo4j case studies with Walmart, eBay, AirBnB, NASA, etc"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.twitter.com/engineering/en_us/a/2010/introducing-flockdb.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("FlockDB: Distributed Graph Database for Storing Adjacency Lists at Twitter"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://architecht.io/google-ibm-back-new-open-source-graph-database-project-janusgraph-1d74fb78db6b",target:"_blank",rel:"noopener noreferrer"}},[t._v("JanusGraph: Scalable Graph Database backed by Google, IBM and Hortonworks"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://aws.amazon.com/neptune/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Amazon Neptune"),a("OutboundLink")],1)])])])]),t._v(" "),a("p",[a("strong",[t._v("搜索数据库 - ElasticSearch")])]),t._v(" "),a("ul",[a("li",[a("p",[a("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/guide/master/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Elasticsearch: The Definitive Guide"),a("OutboundLink")],1),t._v(" 这是官网方的 ElasticSearch 的学习资料, 基本上来说, 看这个就够了.")])]),t._v(" "),a("li",[a("p",[t._v("接下来是 4 篇和性能调优相关的工程实践.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.ebayinc.com/stories/blogs/tech/elasticsearch-performance-tuning-practice-at-ebay/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Elasticsearch Performance Tuning Practice at eBay"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://kickstarter.engineering/elasticsearch-at-kickstarter-db3c487887fc",target:"_blank",rel:"noopener noreferrer"}},[t._v("Elasticsearch at Kickstarter"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.loggly.com/blog/nine-tips-configuring-elasticsearch-for-high-performance/",target:"_blank",rel:"noopener noreferrer"}},[t._v("9 tips on ElasticSearch configuration for high performance"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://medium.com/@abhidrona/elasticsearch-deployment-best-practices-d6c1323b25d7",target:"_blank",rel:"noopener noreferrer"}},[t._v("Elasticsearch In Production - Deployment Best Practices"),a("OutboundLink")],1)])])]),t._v(" "),a("li",[a("p",[t._v("最后是 GitHub 上的资源列表 "),a("a",{attrs:{href:"https://github.com/dzharii/awesome-elasticsearch",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub: Awesome ElasticSearch"),a("OutboundLink")],1),t._v(" .")])])]),t._v(" "),a("h5",{attrs:{id:"_4-小结-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-小结-14"}},[t._v("#")]),t._v(" 4.小结")]),t._v(" "),a("p",[t._v("总结一下今天分享的内容. 虽然有人会认为数据库与程序员无关, 是 DBA 的事儿. 但我坚信, 数据库才真正是程序员的事儿. 因为程序是需要和数据打交道的, 所以程序员或架构师不仅需要设计数据模型, 还要保证整体系统的稳定性和可用性, 数据是整个系统中关键中的关键.")]),t._v(" "),a("p",[t._v("对于数据库方向, 重点就是两种数据库, 一种是以 SQL 为代表的关系型数据库, 另一种是以非 SQL 为代表的 NoSQL 数据库. 因而, 在这篇文章中, 我给出了 MySQL 和各种开源 NoSQL 的一些相关的有价值的文章和导读, 主要是让你对这些数据库的内在有一定的了解, 但又不会太深. 同时给出了一些知名企业使用数据库的工程实践, 这对于了解各种数据库的优劣非常有帮助, 值得认真读读.")]),t._v(" "),a("p",[t._v("从下篇文章开始, 我们将进入分布式系统架构方面的内容, 里面不仅涵盖了大量的理论知识, 更有丰富的入门指导和大量的工程实践. 敬请期待.")]),t._v(" "),a("h4",{attrs:{id:"程序员练级攻略-分布式架构入门"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#程序员练级攻略-分布式架构入门"}},[t._v("#")]),t._v(" 程序员练级攻略:分布式架构入门")]),t._v(" "),a("p",[t._v("学习分布式系统跟学习其它技术非常不一样, "),a("strong",[t._v("分布式系统")]),t._v("涵盖的面非常广, 具体来说涵盖如下几方面:")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("服务调度")]),t._v(", 涉及服务发现, 配置管理, 弹性伸缩, 故障恢复等.")]),t._v(" "),a("li",[a("strong",[t._v("资源调度")]),t._v(", 涉及对底层资源的调度使用, 如计算资源, 网络资源和存储资源等.")]),t._v(" "),a("li",[a("strong",[t._v("流量调度")]),t._v(", 涉及路由, 负载均衡, 流控, 熔断等.")]),t._v(" "),a("li",[a("strong",[t._v("数据调度")]),t._v(", 涉及数据复本, 数据一致性, 分布式事务, 分库, 分表等.")]),t._v(" "),a("li",[a("strong",[t._v("容错处理")]),t._v(", 涉及隔离, 幂等, 重试, 业务补偿, 异步, 降级等.")]),t._v(" "),a("li",[a("strong",[t._v("自动化运维")]),t._v(", 涉及持续集成, 持续部署, 全栈监控, 调用链跟踪等.")])]),t._v(" "),a("p",[t._v("所有这些形成了分布式架构的整体复杂度, 也造就了分布式系统中的很多很多论文, 图书以及很多很多的项目. 要学好分布式系统及其架构, 需要大量的时间和实践才能真正掌握这些技术.")]),t._v(" "),a("p",[t._v("这里有几点需要你注意一下.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("分布式系统之所以复杂, 就是因为它太容易出错了")]),t._v(". 这意味着, "),a("strong",[t._v("要把处理错误的代码当成正常功能的代码来处理")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("开发一个健壮的分布式系统的成本是单体系统的几百倍甚至几万倍")]),t._v(". 这意味着"),a("strong",[t._v("要自己开发一个, 需要能力很强的开发人员")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("非常健壮的开源的分布式系统并不多, 或者说基本没有")]),t._v(". 这意味着, "),a("strong",[t._v("如果你要用开源的, 那么你需要 hold 得住其源码")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("管理或是协调多个服务或机器是非常难的")]),t._v(". 这意味着, "),a("strong",[t._v("我们要去读很多很多的分布式系统的论文")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("在分布式环境下, 出了问题是很难 debug 的")]),t._v(". 这意味着, "),a("strong",[t._v("我们需要非常好的监控和跟踪系统, 还需要经常做演练和测试")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("在分布式环境下, 你需要更科学地分析和统计")]),t._v(". 这意味着, "),a("strong",[t._v("我们要用 P90 这样的统计指标, 而不是平均值, 还需要做容量计划和评估")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("在分布式环境下, 需要应用服务化")]),t._v(". 这意味着"),a("strong",[t._v("需要一个服务开发框架, 比如 SOA 或微服务")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("在分布式环境下, 故障不可怕, 可怕的是影响面过大, 时间过长")]),t._v(". 这意味着"),a("strong",[t._v("需要花时间来开发我们的自动化运维平台")]),t._v(".")])]),t._v(" "),a("p",[t._v("总之, 在分布式环境下, 一切都变得非常复杂. 要进入这个领域, 需要有足够多的耐性和足够强的心态来接受各式各样的失败. 当拥有丰富的实践和经验后, 你才会有所建树. 这并不是一日之功, 你可能要在这个领域花费数年甚至数十年的时间.")]),t._v(" "),a("h5",{attrs:{id:"_1-分布式架构入门"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-分布式架构入门"}},[t._v("#")]),t._v(" 1.分布式架构入门")]),t._v(" "),a("p",[t._v("学习如何设计可扩展的架构将会有助于你成为一个更好的工程师. 系统设计是一个很宽泛的话题. 在互联网上, 关于架构设计原则的资源也是多如牛毛. 所以, 你需要知道一些基本概念, 对此, 这里你先阅读下面两篇文章.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://www.aosabook.org/en/distsys.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Scalable Web Architecture and Distributed Systems"),a("OutboundLink")],1),t._v(" , 这篇文章会给你一个大概的分布式架构是怎么来解决系统扩展性问题的粗略方法.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.slideshare.net/jboner/scalability-availability-stability-patterns",target:"_blank",rel:"noopener noreferrer"}},[t._v("Scalability, Availability & Stability Patterns"),a("OutboundLink")],1),t._v(" , 这个 PPT 能在扩展性, 可用性, 稳定性等方面给你一个非常大的架构设计视野和思想, 可以让你感受一下大概的全景图.")])]),t._v(" "),a("p",[t._v("然后, 我更强烈推荐 GitHub 上的一篇文档 - "),a("a",{attrs:{href:"https://github.com/donnemartin/system-design-primer",target:"_blank",rel:"noopener noreferrer"}},[t._v("System Design Primer"),a("OutboundLink")],1),t._v(", 这个仓库主要组织收集分布式系统的一些与扩展性相关的资源, 它可以帮助你学习如何构建可扩展的架构. 目前这个仓库收集到了好些系统架构和设计的基本方法. 其中包括: CAP 理论, 一致性模型, 可用性模式, DNS, CDN, 负载均衡, 反向代理, 应用层的微服务和服务发现, 关系型数据库和 NoSQL, 缓存, 异步通讯, 安全等.")]),t._v(" "),a("p",[t._v("我认为, 上面这几篇文章基本足够可以让你入门了, 因为其中基本涵盖了所有与系统架构相关的技术. 这些技术, 足够这世上 90% 以上的公司用了, 只有超级巨型的公司才有可能使用更高层次的技术.")]),t._v(" "),a("h5",{attrs:{id:"_2-分布式理论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-分布式理论"}},[t._v("#")]),t._v(" 2.分布式理论")]),t._v(" "),a("p",[t._v("下面来学习一下分布式方面的理论知识.")]),t._v(" "),a("p",[t._v("首先, 你需要看一下 "),a("a",{attrs:{href:"https://github.com/aphyr/distsys-class",target:"_blank",rel:"noopener noreferrer"}},[t._v("An introduction to distributed systems"),a("OutboundLink")],1),t._v(". 这只是某个教学课程的提纲, 我觉得还是很不错的, 几乎涵盖了分布式系统方面的所有知识点, 而且辅以简洁并切中要害的说明文字, 非常适合初学者提纲挈领地了解知识全貌, 快速与现有知识结合, 形成知识体系. 这也是一个分布式系统的知识图谱, 可以让你看到分布式系统的整体全貌. 你可以根据这个知识图 Google 下去, 然后你会学会所有的东西.")]),t._v(" "),a("p",[t._v("然后, 你需要了解一下拜占庭将军问题("),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Byzantine_fault_tolerance",target:"_blank",rel:"noopener noreferrer"}},[t._v("Byzantine Generals Problem"),a("OutboundLink")],1),t._v("). 这个问题是莱斯利·兰波特(Leslie Lamport)于 1982 年提出用来解释一致性问题的一个虚构模型("),a("a",{attrs:{href:"https://www.microsoft.com/en-us/research/uploads/prod/2016/12/The-Byzantine-Generals-Problem.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("论文地址"),a("OutboundLink")],1),t._v("). 拜占庭是古代东罗马帝国的首都, 由于地域宽广, 守卫边境的多个将军(系统中的多个节点)需要通过信使来传递消息, 达成某些一致的决定. 但由于将军中可能存在叛徒(系统中节点出错), 这些叛徒将努力向不同的将军发送不同的消息, 试图会干扰一致性的达成. 拜占庭问题即为在此情况下, 如何让忠诚的将军们能达成行动的一致.")]),t._v(" "),a("p",[t._v("对于拜占庭问题来说, 假如节点总数为 "),a("code",[t._v("N")]),t._v(", 叛变将军数为 "),a("code",[t._v("F")]),t._v(", 则当 "),a("code",[t._v("N >= 3F + 1")]),t._v(" 时, 问题才有解, 即拜占庭容错(Byzantine Fault Tolerant, BFT)算法. 拜占庭容错算法解决的是, 网络通信可靠但节点可能故障情况下一致性该如何达成的问题.")]),t._v(" "),a("p",[t._v("最早由卡斯特罗(Castro)和利斯科夫(Liskov)在 1999 年提出的实用拜占庭容错(Practical Byzantine Fault Tolerant, PBFT)算法, 是第一个得到广泛应用的 BFT 算法. 只要系统中有 2/3 的节点是正常工作的, 则可以保证一致性. PBFT 算法包括三个阶段来达成共识: "),a("strong",[t._v("预准备(Pre-Prepare), 准备(Prepare)和提交(Commit)")]),t._v(" .")]),t._v(" "),a("p",[t._v("这里有几篇和这个问题相关的文章, 推荐阅读.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://www.drdobbs.com/cpp/the-byzantine-generals-problem/206904396",target:"_blank",rel:"noopener noreferrer"}},[t._v("Dr.Dobb’s - The Byzantine Generals Problem"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://blog.jameslarisch.com/the-byzantine-generals-problem",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Byzantine Generals Problem"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://pmg.csail.mit.edu/papers/osdi99.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Practicle Byzantine Fault Tolerance"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("拜占庭容错系统研究中有三个重要理论: "),a("strong",[t._v("CAP, FLP 和 DLS")]),t._v(".")]),t._v(" "),a("ul",[a("li",[a("p",[a("a",{attrs:{href:"https://en.wikipedia.org/wiki/CAP_theorem",target:"_blank",rel:"noopener noreferrer"}},[t._v("CAP 定理"),a("OutboundLink")],1),t._v(', CAP 理论相信你应该听说过不下 N 次了. CAP 定理是分布式系统设计中最基础也是最为关键的理论. CAP 定理指出, 分布式数据存储不可能同时满足以下三个条件: 一致性(Consistency), 可用性(Availability)和 分区容忍(Partition tolerance). "'),a("mark",[a("strong",[t._v("在网络发生阻断(partition)时, 你只能选择数据的一致性(consistency)或可用性(availability), 无法两者兼得")])]),t._v('". 论点比较直观: 如果网络因阻断而分隔为二, 在其中一边我送出一笔交易: "将我的十元给 A"; 在另一半我送出另一笔交易: "将我的十元给 B". 此时系统要不是, a)无可用性, 即这两笔交易至少会有一笔交易不会被接受; 要不就是, b)无一致性, 一半看到的是 A 多了十元而另一半则看到 B 多了十元. 要注意的是, CAP 理论和扩展性(scalability)是无关的, 在分片(sharded)或非分片的系统皆适用.')])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"http://the-paper-trail.org/blog/a-brief-tour-of-flp-impossibility/",target:"_blank",rel:"noopener noreferrer"}},[t._v("FLP impossibility"),a("OutboundLink")],1),t._v(", 在异步环境中, 如果节点间的网络延迟没有上限, 只要有一个恶意的节点存在, 就没有算法能在有限的时间内达成共识. 但值得注意的是, "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Las_Vegas_algorithm",target:"_blank",rel:"noopener noreferrer"}},[t._v('"Las Vegas" algorithms'),a("OutboundLink")],1),t._v("(这个算法又叫撞大运算法, 其保证结果正确, 只是在运算时所用资源上进行赌博, 一个简单的例子是随机快速排序, 它的 pivot 是随机选的, 但排序结果永远一致)在每一轮皆有一定机率达成共识, 随着时间增加, 机率会越趋近于 1. 而这也是许多成功的共识算法会采用的解决问题的办法.")])]),t._v(" "),a("li",[a("p",[t._v("容错的上限, 从 "),a("a",{attrs:{href:"http://groups.csail.mit.edu/tds/papers/Lynch/jacm88.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("DLS 论文"),a("OutboundLink")],1),t._v(" 中可以得到以下结论:")]),t._v(" "),a("ul",[a("li",[t._v("在部分同步(partially synchronous)的网络环境中(即网络延迟有一定的上限, 但我们无法事先知道上限是多少), 协议可以容忍最多 1/3 的拜占庭故障(Byzantine fault).")]),t._v(" "),a("li",[t._v("在异步(asynchronous)的网络环境中, 具有确定性质的协议无法容忍任何错误, 但这篇论文并没有提及 "),a("a",{attrs:{href:"http://link.springer.com/chapter/10.1007%2F978-3-540-77444-0_7",target:"_blank",rel:"noopener noreferrer"}},[t._v("randomized algorithms"),a("OutboundLink")],1),t._v(", 在这种情况下可以容忍最多 1/3 的拜占庭故障.")]),t._v(" "),a("li",[t._v('在同步(synchronous)网络环境中(即网络延迟有上限且上限是已知的), 协议可以容忍 100% 的拜占庭故障, 但当超过 1/2 的节点为恶意节点时, 会有一些限制条件. 要注意的是, 我们考虑的是"具有认证特性的拜占庭模型(authenticated Byzantine)", 而不是"一般的拜占庭模型"; 具有认证特性指的是将如今已经过大量研究且成本低廉的公私钥加密机制应用在我们的算法中.')])])])]),t._v(" "),a("p",[t._v('当然, 还有一个著名的 "8 条荒谬的分布式假设('),a("a",{attrs:{href:"http://en.wikipedia.org/wiki/Fallacies_of_distributed_computing",target:"_blank",rel:"noopener noreferrer"}},[t._v("Fallacies of Distributed Computing"),a("OutboundLink")],1),t._v(')".')]),t._v(" "),a("ol",[a("li",[t._v("网络是稳定的.")]),t._v(" "),a("li",[t._v("网络传输的延迟是零.")]),t._v(" "),a("li",[t._v("网络的带宽是无穷大.")]),t._v(" "),a("li",[t._v("网络是安全的.")]),t._v(" "),a("li",[t._v("网络的拓扑不会改变.")]),t._v(" "),a("li",[t._v("只有一个系统管理员.")]),t._v(" "),a("li",[t._v("传输数据的成本为零.")]),t._v(" "),a("li",[t._v("整个网络是同构的.")])]),t._v(" "),a("p",[t._v("阿尔农·罗特姆-盖尔-奥兹(Arnon Rotem-Gal-Oz)写了一篇长文 "),a("a",{attrs:{href:"http://www.rgoarchitects.com/Files/fallacies.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Fallacies of Distributed Computing Explained"),a("OutboundLink")],1),t._v(" 来解释为什么这些观点是错误的. 另外, "),a("a",{attrs:{href:"https://www.computing.dcu.ie/~ray/teaching/CA485/notes/fallacies.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("加勒思·威尔逊(Gareth Wilson)的文章"),a("OutboundLink")],1),t._v(" 则用日常生活中的例子, 对这些点做了通俗的解释. 为什么我们深刻地认识到这 8 个错误? 是因为, 这要我们清楚地认识到在分布式系统中错误是不可能避免的, "),a("mark",[a("strong",[t._v("在分布式系统中, 能做的不是避免错误, 而是要把错误的处理当成功能写在代码中")])]),t._v(".")]),t._v(" "),a("p",[t._v("下面分享几篇一致性方面的论文.")]),t._v(" "),a("ul",[a("li",[t._v("当然关于经典的 CAP 理论, 也存在一些误导的地方, 这个问题在 2012 年有一篇论文 "),a("a",{attrs:{href:"https://www.infoq.com/articles/cap-twelve-years-later-how-the-rules-have-changed",target:"_blank",rel:"noopener noreferrer"}},[t._v("CAP Twelve Years Later: How the Rules Have Changed"),a("OutboundLink")],1),t._v(" ("),a("a",{attrs:{href:"http://www.infoq.com/cn/articles/cap-twelve-years-later-how-the-rules-have-changed",target:"_blank",rel:"noopener noreferrer"}},[t._v("中译版"),a("OutboundLink")],1),t._v(')中做了一些讨论, 主要是说, 在 CAP 中最大的问题就是分区, 也就是 P, 在 P 发生的情况下, 非常难以保证 C 和 A. 然而, 这是强一致性的情况. 其实, 在很多时候并不需要强一致性的系统, 所以后来, 人们争论关于数据一致性和可用性时, 主要是集中在强一致性的 ACID 或最终一致性的 BASE. 当时, BASE 还不怎么为世人所接受, 主要是大家都觉得 ACID 是最完美的模型, 大家很难接受不完美的 BASE. 在 CAP 理论中, 大家总是觉得需要"三选二", 也就是说, P 是必选项, 那"三选二"的选择题不就变成数据一致性 (consistency), 服务可用性 (availability) 间的"二选一"? 然而现实却是, P 很少遇到, 而 C 和 A 这两个事, 工程实践中一致性有不同程度, 可用性也有不同等级, 在保证分区容错性的前提下, 放宽约束后可以兼顾一致性和可用性, 两者不是非此即彼. 其实, 在一个时间可能允许的范围内是可以取舍并交替选择的.')]),t._v(" "),a("li",[a("a",{attrs:{href:"https://pdfs.semanticscholar.org/5015/8bc1a8a67295ab7bce0550886a9859000dc2.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Harvest, Yield, and Scalable Tolerant Systems"),a("OutboundLink")],1),t._v(' , 这篇论文是基于上面那篇"CAP 12 年后"的论文写的, 它主要提出了 Harvest 和 Yield 概念, 并把上面那篇论文中所讨论的东西讲得更为仔细了一些.')]),t._v(" "),a("li",[a("a",{attrs:{href:"https://queue.acm.org/detail.cfm?id=1394128",target:"_blank",rel:"noopener noreferrer"}},[t._v("Base: An Acid Alternative"),a("OutboundLink")],1),t._v(" ("),a("a",{attrs:{href:"http://www.cnblogs.com/savorboard/p/base-an-acid-alternative.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("中译版"),a("OutboundLink")],1),t._v('), 本文是 eBay 的架构师在 2008 年发表给 ACM 的文章, 是一篇解释 BASE 原则, 或者说最终一致性的经典文章. 文中讨论了 BASE 与 ACID 原则的基本差异, 以及如何设计大型网站以满足不断增长的可伸缩性需求, 其中有如何对业务做调整和折中, 以及一些具体的折中技术的介绍. 一个比较经典的话是——"在对数据库进行分区后, 为了可用性(Availability)牺牲部分一致性(Consistency)可以显著地提升系统的可伸缩性 (Scalability)".')]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.allthingsdistributed.com/2008/12/eventually_consistent.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Eventually Consistent"),a("OutboundLink")],1),t._v(" , 这篇文章是 AWS 的 CTO 维尔纳·沃格尔(Werner Vogels)在 2008 年发布在 ACM Queue 上的一篇数据库方面的重要文章, 阐述了 NoSQL 数据库的理论基石——最终一致性, 对传统的关系型数据库(ACID, Transaction)做了较好的补充.")])]),t._v(" "),a("h5",{attrs:{id:"_3-小结-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-小结-11"}},[t._v("#")]),t._v(" 3.小结")]),t._v(" "),a("p",[t._v("总结一下今天分享的内容. 文章的开头给出了学习分布式架构需要注意的几个关键点, 然后列出了入门学习的资源, 基本涵盖了所有与系统架构相关的技术. 随后讲述了拜占庭容错系统研究中有三个重要理论: CAP, FLP 和 DLS, 以及 8 条荒谬的分布式假设, 从理论和认知等角度让你更为清楚地理解分布式系统. 最后分享了几篇一致性相关的论文, 很实用很经典, 推荐阅读.")]),t._v(" "),a("h4",{attrs:{id:"程序员练级攻略-分布式架构经典图书和论文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#程序员练级攻略-分布式架构经典图书和论文"}},[t._v("#")]),t._v(" 程序员练级攻略:分布式架构经典图书和论文")]),t._v(" "),a("h5",{attrs:{id:"_1-经典图书"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-经典图书"}},[t._v("#")]),t._v(" 1.经典图书")]),t._v(" "),a("p",[t._v("首先, 我推荐几本分布式架构方面的经典图书.")]),t._v(" "),a("ul",[a("li",[a("strong",[a("a",{attrs:{href:"http://book.mixu.net/distsys/single-page.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Distributed Systems for fun and profit"),a("OutboundLink")],1)]),t._v(", 这是一本免费的电子书. 作者撰写此书的目的是希望以一种更易于理解的方式, 讲述以亚马逊的 Dynamo, 谷歌的 Bigtable 和 MapReduce 等为代表的分布式系统背后的核心思想.")]),t._v(" "),a("li",[a("strong",[a("a",{attrs:{href:"https://book.douban.com/subject/27154352/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Designing Data Intensive Applications"),a("OutboundLink")],1)]),t._v(', 这本书是一本非常好的书, 我们知道, 在分布式的世界里, 数据结点的扩展是一件非常麻烦的事. 这本书深入浅出地用很多的工程案例讲解了如何让数据结点做扩展. 作者马丁·科勒普曼(Martin Kleppmann)在分布式数据系统领域有着很深的功底, 并在这本书中完整地梳理各类纷繁复杂设计背后的技术逻辑, 不同架构之间的妥协与超越, 很值得开发人员与架构设计者阅读. 这本书深入到 B-Tree, SSTables, LSM 这类数据存储结构中, 并且从外部的视角来审视这些数据结构对 NoSQL 和关系型数据库的影响. 这本书可以让你很清楚地了解到真正世界的大数据架构中的数据分区, 数据复制的一些坑, 并提供了很好的解决方案. 最赞的是, 作者将各种各样技术的本质非常好地关联在一起, 令你触类旁通. 而且, 这本书完全就是抽丝剥茧, 循循善诱, 从"提出问题"到"解决问题", "解决方案", "优化方案"和"对比不同的方案", 一点一点地把非常晦涩的技术和知识展开. 本书的引用相当多, 每章后面都有几百个 Reference, 通过这些 Reference 你可以看到更为广阔, 更为精彩的世界.')]),t._v(" "),a("li",[a("a",{attrs:{href:"http://barbie.uta.edu/~jli/Resources/MapReduce&Hadoop/Distributed%20Systems%20Principles%20and%20Paradigms.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Distributed Systems: Principles and Paradigms"),a("OutboundLink")],1),t._v(' , 本书是由计算机科学家安德鲁·斯图尔特·塔能鲍姆(Andrew S. Tanenbaum)和其同事马丁·范·斯蒂恩(Martin van Steen)合力撰写的, 是分布式系统方面的经典教材. 语言简洁, 内容通俗易懂, 介绍了分布式系统的七大核心原理, 并给出了大量的例子; 系统讲述了分布式系统的概念和技术, 包括通信, 进程, 命名, 同步化, 一致性和复制, 容错以及安全等; 讨论了分布式应用的开发方法(即范型). 但本书不是一本指导"如何做"的手册, 仅适合系统性地学习基础知识, 了解编写分布式系统的基本原则和逻辑. 中文翻译版为'),a("a",{attrs:{href:"https://item.jd.com/10079452.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("《分布式系统原理与范型》(第二版)"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.aosabook.org/en/distsys.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Scalable Web Architecture and Distributed Systems"),a("OutboundLink")],1),t._v(",\n这是一本免费的在线小册子, 其中文翻译版 "),a("a",{attrs:{href:"http://nettee.github.io/posts/2016/Scalable-Web-Architecture-and-Distributed-Systems/",target:"_blank",rel:"noopener noreferrer"}},[t._v("可扩展的 Web 架构和分布式系统"),a("OutboundLink")],1),t._v(". 本书主要针对面向互联网(公网)的分布式系统, 但其中的原理或许也可以应用于其他分布式系统的设计中. 作者的观点是, 通过了解大型网站的分布式架构原理, 小型网站的构建也能从中受益. 本书从大型互联网系统的常见特性, 如高可用, 高性能, 高可靠, 易管理等出发, 引出了一个类似于 Flickr 的典型的大型图片网站的例子.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://dcg.ethz.ch/lectures/podc_allstars/lecture/podc.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Principles of Distributed Systems"),a("OutboundLink")],1),t._v(" , 本书是苏黎世联邦理工学院的教材. 它讲述了多种分布式系统中会用到的算法. 虽然分布式系统的不同场景会用到不同算法, 但并不表示这些算法都会被用到. 不过作为学生来说, 掌握了算法设计的精髓也就能举一反三地设计出解决其他问题的算法, 从而得到分布式系统架构设计中所需的算法.")])]),t._v(" "),a("h5",{attrs:{id:"_2-经典论文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-经典论文"}},[t._v("#")]),t._v(" 2.经典论文")]),t._v(" "),a("h6",{attrs:{id:"_1-分布式事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-分布式事务"}},[t._v("#")]),t._v(" (1)分布式事务")]),t._v(" "),a("p",[t._v('想了解分布式模型中最难的"分布式事务", 你需要看看 Google App Engine 联合创始人瑞恩·巴雷特(Ryan Barrett)在 2009 年的 Google I/O 大会上的演讲《'),a("a",{attrs:{href:"http://snarfed.org/transactions_across_datacenters_io.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Transaction Across DataCenter"),a("OutboundLink")],1),t._v("》("),a("a",{attrs:{href:"http://www.youtube.com/watch?v=srOgpXECblk",target:"_blank",rel:"noopener noreferrer"}},[t._v("YouTube 视频"),a("OutboundLink")],1),t._v(").")]),t._v(" "),a("p",[t._v("在这个演讲中, 巴雷特讲述了各种经典的解决方案如何在一致性, 事务, 性能和错误上做平衡. 而最后得到为什么分布式系统的事务只有 Paxos 算法是最好的.")]),t._v(" "),a("p",[t._v("下面这个图是这个算法中的结论.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/1678009e220ffe2d28ecbc0096fd1911-20230731162102-m3ftdfi.png",alt:""}})]),t._v(" "),a("p",[t._v("你也可以移步看一下我在 Coolshell 上写的这篇文章《"),a("a",{attrs:{href:"https://coolshell.cn/articles/10910.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("分布式系统的事务处理"),a("OutboundLink")],1),t._v("》.")]),t._v(" "),a("h6",{attrs:{id:"_2-paxos一致性算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-paxos一致性算法"}},[t._v("#")]),t._v(" (2)Paxos一致性算法")]),t._v(" "),a("p",[t._v("Paxos 算法, 是莱斯利·兰伯特(Lesile Lamport)于 1990 年提出来的一种基于消息传递且具有高度容错特性的一致性算法. 但是这个算法太过于晦涩, 所以一直以来都属于理论上的论文性质的东西. 其真正进入工程圈, 主要是来源于 Google 的 Chubby lock——一个分布式的锁服务, 用在了 Bigtable 中. 直到 Google 发布了下面这两篇论文, Paxos 才进入到工程界的视野中来.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://static.googleusercontent.com/media/research.google.com/en//archive/bigtable-osdi06.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Bigtable: A Distributed Storage System for Structured Data"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://static.googleusercontent.com/media/research.google.com/en//archive/chubby-osdi06.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Chubby lock service for loosely-coupled distributed systems"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("Google 与 Bigtable 相齐名的还有另外两篇论文.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://static.googleusercontent.com/media/research.google.com/en//archive/gfs-sosp2003.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Google File System"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://static.googleusercontent.com/media/research.google.com/en//archive/mapreduce-osdi04.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("MapReduce: Simplified Data Processing on Large Clusters"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("不过, 这几篇文章中并没有讲太多的 Paxos 算法上的细节, 反而是在"),a("a",{attrs:{href:"https://static.googleusercontent.com/media/research.google.com/en//archive/paxos_made_live.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Paxos Made Live - An Engineering Perspective"),a("OutboundLink")],1),t._v(" 这篇论文中提到了很多工程实现的细节. 这篇论文详细解释了 Google 实现 Paxos 时遇到的各种问题和解决方案, 讲述了从理论到实际应用二者之间巨大的鸿沟.")]),t._v(" "),a("p",[t._v("Paxos 算法的原版论文比较晦涩, 也不易懂. 这里推荐一篇比较容易读的—— "),a("a",{attrs:{href:"http://harry.me/blog/2014/12/27/neat-algorithms-paxos/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Neat Algorithms - Paxos"),a("OutboundLink")],1),t._v(" . 这篇文章中还有一些小动画帮助你读懂. 还有一篇可以帮你理解的文章是 "),a("a",{attrs:{href:"https://angus.nyc/2012/paxos-by-example/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Paxos by Examples"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("h6",{attrs:{id:"_3-raft一致性算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-raft一致性算法"}},[t._v("#")]),t._v(" (3)Raft一致性算法")]),t._v(" "),a("p",[t._v("因为 Paxos 算法太过于晦涩, 而且在实际的实现上有太多的坑, 并不太容易写对. 所以有人搞出了另外一个一致性的算法, 叫 Raft. 其原始论文是 "),a("a",{attrs:{href:"https://raft.github.io/raft.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("In search of an Understandable Consensus Algorithm (Extended Version)"),a("OutboundLink")],1),t._v(" , 寻找一种易于理解的 Raft 算法. 这篇论文的译文在 InfoQ 上, 题为《"),a("a",{attrs:{href:"%5Bhttps://infoq.cn/article/raft-paper%5D(https://infoq.cn/article/raft-paper)"}},[t._v("Raft 一致性算法论文译文")]),t._v("》, 推荐你读一读.")]),t._v(" "),a("p",[t._v("这里推荐几个不错的 Raft 算法的动画演示.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://thesecretlivesofdata.com/raft/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Raft - The Secret Lives of Data"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://raft.github.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Raft Consensus Algorithm"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://kanaka.github.io/raft.js/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Raft Distributed Consensus Algorithm Visualization"),a("OutboundLink")],1)])]),t._v(" "),a("h6",{attrs:{id:"_4-gossip一致性算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-gossip一致性算法"}},[t._v("#")]),t._v(" (4)Gossip一致性算法")]),t._v(" "),a("p",[t._v("后面, 业内又搞出来一些工程上的东西, 比如 Amazon 的 DynamoDB, 其论文"),a("a",{attrs:{href:"http://bnrg.eecs.berkeley.edu/~randy/Courses/CS294.F07/Dynamo.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Dynamo: Amazon’s Highly Available Key Value Store"),a("OutboundLink")],1),t._v(" 的影响力非常大. 这篇论文中讲述了 Amazon 的 DynamoDB 是如何满足系统的高可用, 高扩展和高可靠的. 其中展示了系统架构是如何做到数据分布以及数据一致性的. GFS 采用的是查表式的数据分布, 而 DynamoDB 采用的是计算式的, 也是一个改进版的通过虚拟结点减少增加结点带来数据迁移的一致性哈希.")]),t._v(" "),a("p",[t._v("这篇文章中有几个关键的概念, 一个是 Vector Clock, 另一个是 Gossip 协议.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.microsoft.com/en-us/research/publication/time-clocks-ordering-events-distributed-system/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Time, Clocks and the Ordering of Events in a Distributed System"),a("OutboundLink")],1),t._v(' , 这篇文章是莱斯利·兰伯特(Leslie Lamport)于 1978 年发表的, 并在 2007 年被选入 SOSP 的名人堂, 被誉为第一篇真正的"分布式系统"论文, 该论文曾一度成为计算机科学史上被引用最多的文章. 分布式系统中的时钟同步是一个非常难的问题, 因为分布式系统中是使用消息进行通信的, 若使用物理时钟来进行同步, 一方面是不同的 process 的时钟有差异, 另一方面是时间的计算也有一定的误差, 这样若有两个时间相同的事件, 则无法区分它们谁前谁后了. 这篇文章主要解决分布式系统中的时钟同步问题.')]),t._v(" "),a("li",[a("a",{attrs:{href:"http://lass.cs.umass.edu/~shenoy/courses/spring05/lectures.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("马萨诸塞大学课程 Distributed Operating System"),a("OutboundLink")],1),t._v(" 中第 10 节 "),a("a",{attrs:{href:"http://lass.cs.umass.edu/~shenoy/courses/spring05/lectures/Lec10.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Clock Synchronization"),a("OutboundLink")],1),t._v(", 这篇讲义讲述了时钟同步的问题.")]),t._v(" "),a("li",[t._v("关于 Vector Clock, 你可以看一下 "),a("a",{attrs:{href:"http://basho.com/posts/technical/why-vector-clocks-are-easy/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Why Vector Clocks are Easy"),a("OutboundLink")],1),t._v(" 和 "),a("a",{attrs:{href:"http://basho.com/posts/technical/why-vector-clocks-are-hard/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Why Vector Clocks are Hard"),a("OutboundLink")],1),t._v(" 这两篇文章.")])]),t._v(" "),a("p",[t._v("用来做数据同步的 Gossip 协议的原始论文是 "),a("a",{attrs:{href:"https://www.cs.cornell.edu/home/rvr/papers/flowgossip.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Efficient Reconciliation and Flow Control for Anti-Entropy Protocols"),a("OutboundLink")],1),t._v('. Gossip 算法也是 Cassandra 使用的数据复制协议. 这个协议就像八卦和谣言传播一样, 可以"一传十, 十传百"传播开来. 但是这个协议看似简单, 细节上却非常麻烦.')]),t._v(" "),a("p",[t._v("Gossip 协议也是 NoSQL 数据库 Cassandra 中使用到的数据协议, 你可以上 YouTube 上看一下这个视频介绍:  "),a("a",{attrs:{href:"https://www.youtube.com/watch?v=FuP1Fvrv6ZQ",target:"_blank",rel:"noopener noreferrer"}},[t._v("Understanding Gossip (Cassandra Internals)"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("p",[t._v("关于 Gossip 的一些图示化的东西, 你可以看一下动画 "),a("a",{attrs:{href:"https://rrmoelker.github.io/gossip-visualization/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Gossip Visualization"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("h5",{attrs:{id:"_2-分布式存储和数据库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-分布式存储和数据库"}},[t._v("#")]),t._v(" 2.分布式存储和数据库")]),t._v(" "),a("p",[t._v("除了前面的 Google 的 BigTable 和 Google File System 那两篇论文, 还有 Amazon 的 DynamoDB 的论文, 下面也有几篇也是要读一下的.")]),t._v(" "),a("ul",[a("li",[t._v("一篇是 AWS Aurora 的论文 "),a("a",{attrs:{href:"http://www.allthingsdistributed.com/files/p1041-verbitski.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Amazon Aurora: Design Considerations for High Throughput Cloud -Native Relation Databases"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[t._v("另一篇是比较有代表的论文是 Google 的 "),a("a",{attrs:{href:"http://static.googleusercontent.com/media/research.google.com/zh-CN//archive/spanner-osdi2012.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spanner: Google’s Globally-Distributed Database"),a("OutboundLink")],1),t._v(".  其 2017 年的新版论文: "),a("a",{attrs:{href:"https://static.googleusercontent.com/media/research.google.com/zh-CN//pubs/archive/45855.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spanner, TrueTime & The CAP Theorem"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://research.google.com/pubs/archive/38125.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("F1 - The Fault-Tolerant Distributed RDBMS Supporting Google’s Ad Business"),a("OutboundLink")],1),t._v(" .")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.161.6751&rep=rep1&type=pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Cassandra: A Decentralized Structured Storage System"),a("OutboundLink")],1),t._v(" .")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.ssrc.ucsc.edu/Papers/weil-sc06.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("CRUSH: Controlled, Scalable, Decentralized Placement of Replicated Data"),a("OutboundLink")],1),t._v(", 这里提到的算法被应用在了 Ceph 分布式文件系统中, 其架构可以读一下 "),a("a",{attrs:{href:"https://ceph.com/wp-content/uploads/2016/08/weil-rados-pdsw07.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("RADOS - A Scalable, Reliable Storage Service for Petabyte-scale"),a("OutboundLink")],1),t._v("​"),a("a",{attrs:{href:"https://ceph.com/wp-content/uploads/2016/08/weil-rados-pdsw07.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Storage Clusters"),a("OutboundLink")],1),t._v(" 以及 "),a("a",{attrs:{href:"http://docs.ceph.com/docs/jewel/architecture/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Ceph 的架构文档"),a("OutboundLink")],1),t._v(".")])]),t._v(" "),a("h5",{attrs:{id:"_3-分布式消息系统"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-分布式消息系统"}},[t._v("#")]),t._v(" 3.分布式消息系统")]),t._v(" "),a("ul",[a("li",[t._v("分布式消息系统, 你一定要读一下 Kafka 的这篇论文 "),a("a",{attrs:{href:"http://research.microsoft.com/en-us/UM/people/srikanth/netdb11/netdb11papers/netdb11-final12.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Kafka: a Distributed Messaging System for Log Processing"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.usenix.org/system/files/conference/nsdi15/nsdi15-paper-sharma.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Wormhole: Reliable Pub-Sub to Support Geo-replicated Internet Services"),a("OutboundLink")],1),t._v(" , Wormhole 是 Facebook 内部使用的一个 Pub-Sub 系统, 目前还没有开源. 它和 Kafka 之类的消息中间件很类似. 但是它又不像其它的 Pub-Sub 系统, Wormhole 没有自己的存储来保存消息, 它也不需要数据源在原有的更新路径上去插入一个操作来发送消息, 是非侵入式的. 其直接部署在数据源的机器上并直接扫描数据源的 transaction logs, 这样还带来一个好处, Wormhole 本身不需要做任何地域复制(geo-replication)策略, 只需要依赖于数据源的 geo-replication 策略即可.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://engineering.linkedin.com/research/2012/all-aboard-the-databus-linkedlns-scalable-consistent-change-data-capture-platform",target:"_blank",rel:"noopener noreferrer"}},[t._v("All Aboard the Databus! LinkedIn’s Scalable Consistent Change Data Capture Platform"),a("OutboundLink")],1),t._v(" ,  在 LinkedIn 投稿 SOCC 2012 的这篇论文中, 指出支持对不同数据源的抽取, 允许不同数据源抽取器的开发和接入, 只需该抽取器遵循设计规范即可. 该规范的一个重要方面就是每个数据变化都必须被一个单调递增的数字标注(SCN), 用于同步. 这其中的一些方法完全可以用做异地双活的系统架构中. (和这篇论文相关的几个链接如下: "),a("a",{attrs:{href:"https://915bbc94-a-62cb3a1a-s-sites.googlegroups.com/site/acm2012socc/s18-das.pdf?attachauth=ANoY7cpF7igQlU-DGe3gMeW4PZr0cnRDm6cFsuJnv8n5LtJqYrEE9TMMzctK8P9OUTzPD-M2efmpes3zsc10VXN0g6RmdqTpSv3YwgUIW08RBmUvv3XMpUhEAiHkLdrzqC5thiAu5kyskHhkflK3wPYPvA6PeH4uM_XD3u4Quo0MR87BXnE_TcmnRnPzUzNAAYLng2K5t5elUuTj9NaU4o8QSfFX8edgwA%3D%3D&attredirects=0",target:"_blank",rel:"noopener noreferrer"}},[t._v("PDF 论文"),a("OutboundLink")],1),t._v(" ,  "),a("a",{attrs:{href:"https://www.slideshare.net/amywtang/databus-socc-v3",target:"_blank",rel:"noopener noreferrer"}},[t._v("PPT 分享"),a("OutboundLink")],1),t._v(". )")])]),t._v(" "),a("h5",{attrs:{id:"_4-日志和数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-日志和数据"}},[t._v("#")]),t._v(" 4.日志和数据")]),t._v(" "),a("ul",[a("li",[a("p",[a("a",{attrs:{href:"https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Log: What every software engineer should know about real-time data’s unifying abstraction"),a("OutboundLink")],1),t._v(" , 这篇文章好长, 不过这是一篇非常好非常好的文章, 这是每个工程师都应用知道的事, 必看啊. 你可以看中译版《"),a("a",{attrs:{href:"https://github.com/oldratlee/translations/blob/master/log-what-every-software-engineer-should-know-about-real-time-datas-unifying/README.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("日志: 每个软件工程师都应该知道的有关实时数据的统一概念"),a("OutboundLink")],1),t._v("》.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://www.cs.umb.edu/~poneil/lsmtree.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Log-Structured Merge-Tree (LSM-Tree)"),a("OutboundLink")],1),t._v(" , N 多年前, 谷歌发表了 Bigtable 的论文, 论文中很多很酷的方面, 其一就是它所使用的文件组织方式, 这个方法更一般的名字叫 Log Structured-Merge Tree. LSM 是当前被用在许多产品的文件结构策略: HBase, Cassandra, LevelDB, SQLite, 甚至在 MongoDB 3.0 中也带了一个可选的 LSM 引擎(Wired Tiger 实现的). LSM 有趣的地方是它抛弃了大多数数据库所使用的传统文件组织方法. 实际上, 当你第一次看它时是违反直觉的. 这篇论文可以让你明白这个技术. (如果读起来有些费解的话, 你可以看看中文社区里的这几篇文章: "),a("a",{attrs:{href:"http://www.cnblogs.com/siegfang/archive/2013/01/12/lsm-tree.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("文章一"),a("OutboundLink")],1),t._v(", "),a("a",{attrs:{href:"https://kernelmaker.github.io/lsm-tree",target:"_blank",rel:"noopener noreferrer"}},[t._v("文章二"),a("OutboundLink")],1),t._v(". )")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"http://cidrdb.org/cidr2015/Papers/CIDR15_Paper16.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Immutability Changes Everything"),a("OutboundLink")],1),t._v(" , 这篇论文是现任 Salesforce 软件架构师帕特·赫兰德(Pat Helland)在 CIDR 2015 大会上发表的("),a("a",{attrs:{href:"https://vimeo.com/52831373",target:"_blank",rel:"noopener noreferrer"}},[t._v("相关视频演讲"),a("OutboundLink")],1),t._v(").")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://www.microsoft.com/en-us/research/wp-content/uploads/2013/11/Tango.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Tango: Distributed Data Structures over a Shared Log"),a("OutboundLink")],1),t._v("). 这个论文非常经典, 其中说明了不可变性(immutability)架构设计的优点. 随着为海量数据集存储和计算而设计的以数据为中心的新型抽象技术的出现, 分布式系统比以往任何时候都更容易构建. 但是, 对于元数据的存储和访问不存在类似的抽象.")]),t._v(" "),a("p",[t._v("为了填补这一空白, Tango 为开发人员提供了一个由共享日志支持的内存复制数据结构(例如地图或树)的抽象. Tango 对象易于构建和使用, 通过共享日志上简单的追加和读取操作来复制状态, 而不是复杂的分布式协议. 在这个过程中, 它们从共享日志中获得诸如线性化, 持久性和高可用性等属性. Tango 还利用共享日志支持跨不同对象的快速事务处理, 允许应用程序跨机器进行状态划分, 并在不牺牲一致性的情况下扩展到底层日志的上限.")])])]),t._v(" "),a("h5",{attrs:{id:"_5-分布式监控和跟踪"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-分布式监控和跟踪"}},[t._v("#")]),t._v(" 5.分布式监控和跟踪")]),t._v(" "),a("ul",[a("li",[t._v("Google 的分布式跟踪监控论文 - "),a("a",{attrs:{href:"http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/36356.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Dapper, a Large-Scale Distributed Systems Tracing Infrastructure"),a("OutboundLink")],1),t._v(",  其开源实现有三个 "),a("a",{attrs:{href:"http://zipkin.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Zipkin"),a("OutboundLink")],1),t._v(", "),a("a",{attrs:{href:"https://github.com/naver/pinpoint",target:"_blank",rel:"noopener noreferrer"}},[t._v("Pinpoint"),a("OutboundLink")],1),t._v(" 和 "),a("a",{attrs:{href:"http://htrace.incubator.apache.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTrace"),a("OutboundLink")],1),t._v(". 我个人更喜欢 Zipkin.")])]),t._v(" "),a("h5",{attrs:{id:"_6-数据分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-数据分析"}},[t._v("#")]),t._v(" 6.数据分析")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://vldb.org/pvldb/vol5/p1771_georgelee_vldb2012.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Unified Logging Infrastructure for Data Analytics at Twitter"),a("OutboundLink")],1),t._v(" , Twitter 公司的一篇关于日志架构和数据分析的论文.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.datascienceassn.org/sites/default/files/Scaling%20Big%20Data%20Mining%20Infrastructure%20-%20The%20Twitter%20Experience.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Scaling Big Data Mining Infrastructure: The Twitter Experience"),a("OutboundLink")],1),t._v(" , 讲 Twitter 公司的数据分析平台在数据量越来越大, 架构越来越复杂, 业务需求越来越多的情况下, 数据分析从头到底是怎么做的.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://static.googleusercontent.com/external_content/untrusted_dlcp/research.google.com/en/us/pubs/archive/36632.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Dremel: Interactive Analysis of Web-Scale Datasets"),a("OutboundLink")],1),t._v(", Google 公司的 Dremel, 是一个针对临时查询提供服务的系统, 它处理的是只读的多层数据. 本篇文章介绍了它的架构与实现, 以及它与 MapReduce 是如何互补的.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.usenix.org/system/files/conference/nsdi12/nsdi12-final138.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Resident Distributed Datasets: a Fault-Tolerant Abstraction for In-Memory Cluster Computing"),a("OutboundLink")],1),t._v(", 这篇论文提出了弹性分布式数据集(Resilient Distributed Dataset, RDD)的概念, 它是一个分布式存储抽象, 使得程序员可以在大型集群上以容错的方式执行内存计算; 解释了其出现原因: 解决之前计算框架在迭代算法和交互式数据挖掘工具两种应用场景下处理效率低下的问题, 并指出将数据保存在内存中, 可以将性能提高一个数量级; 同时阐述了其实现原理及应用场景等多方面内容. 很有趣儿, 推荐阅读.")])]),t._v(" "),a("h5",{attrs:{id:"_7-与编程相关的论文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-与编程相关的论文"}},[t._v("#")]),t._v(" 7.与编程相关的论文")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://web.cs.ucdavis.edu/~pandey/Research/Papers/icdcs01.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Distributed Programming Model"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.di.ens.fr/~cezarad/popl16.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("PSync: a partially synchronous language for fault-tolerant distributed algorithms"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://heather.miller.am/teaching/cs7680/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Programming Models for Distributed Computing"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://db.cs.berkeley.edu/papers/UCB-lattice-tr.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Logic and Lattices for Distributed Programming"),a("OutboundLink")],1)])]),t._v(" "),a("h5",{attrs:{id:"_8-其它的分布式论文阅读列表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-其它的分布式论文阅读列表"}},[t._v("#")]),t._v(" 8.其它的分布式论文阅读列表")]),t._v(" "),a("p",[t._v("除了上面上的那些我觉得不错的论文, 下面还有三个我觉得不错的分布式系统论文的阅读列表, 你可以浏览一下.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/mmcgrana/services-engineering",target:"_blank",rel:"noopener noreferrer"}},[t._v("Services Engineering Reading List"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://christophermeiklejohn.com/distributed/systems/2013/07/12/readings-in-distributed-systems.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Readings in Distributed Systems"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://ai.google/research/pubs/?area=DistributedSystemsandParallelComputing",target:"_blank",rel:"noopener noreferrer"}},[t._v("Google Research - Distributed Systems and Parallel Computing"),a("OutboundLink")],1)])]),t._v(" "),a("h5",{attrs:{id:"_9-小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-小结"}},[t._v("#")]),t._v(" 9.小结")]),t._v(" "),a("p",[t._v("今天分享的内容是分布式架构方面的经典图书和论文, 并给出了导读文字, 几乎涵盖了分布式系统架构方面的所有关键的理论知识. 这些内容非常重要, 是学好分布式架构的基石, 请一定要认真学习.")]),t._v(" "),a("h4",{attrs:{id:"程序员练级攻略-分布式架构工程设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#程序员练级攻略-分布式架构工程设计"}},[t._v("#")]),t._v(" 程序员练级攻略:分布式架构工程设计")]),t._v(" "),a("p",[t._v("要学好分布式架构, 你首先需要学习一些架构指导性的文章和方法论, 即分布式架构设计原则. 下面是几篇很不错的文章, 值得一读.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.cs.cornell.edu/projects/ladis2009/talks/dean-keynote-ladis2009.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Designs, Lessons and Advice from Building Large Distributed Systems"),a("OutboundLink")],1),t._v(", Google 杰夫·迪恩(Jeff Dean)2009 年一次演讲的 PPT. 2010 年, 斯坦福大学请杰夫·迪恩到大学里给他们讲了一节课, 你可以在 YouTube 上看一下, "),a("a",{attrs:{href:"https://www.youtube.com/watch?v=modXC5IWTJI",target:"_blank",rel:"noopener noreferrer"}},[t._v("Building Software Systems At Google and Lessons Learned"),a("OutboundLink")],1),t._v(" , 其回顾了 Google 发展的历史.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://12factor.net/",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Twelve-Factor App"),a("OutboundLink")],1),t._v(" , 如今, 软件通常会作为一种服务来交付, 它们被称为网络应用程序, 或软件即服务(SaaS). 12-Factor 为构建 SaaS 应用提供了方法论, 是架构师必读的文章. ("),a("a",{attrs:{href:"https://12factor.net/zh_cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("中译版"),a("OutboundLink")],1),t._v(")这篇文章在业内的影响力很大, 必读!")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.somethingsimilar.com/2013/01/14/notes-on-distributed-systems-for-young-bloods/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Notes on Distributed Systems for Young Bloods"),a("OutboundLink")],1),t._v(" , 给准备进入分布式系统领域的人的一些忠告.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.usenix.org/legacy/event/lisa07/tech/full_papers/hamilton/hamilton_html/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("On Designing and Deploying Internet-Scale Services"),a("OutboundLink")],1),t._v("("),a("a",{attrs:{href:"http://darktea.github.io/notes/2014/07/23/On-Designing-and-Deploying-Internet-Scale-Services.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("中译版"),a("OutboundLink")],1),t._v("), 微软 Windows Live 服务平台的一些经验性的总结文章, 很值得一读.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.box.com/blog/4-things-to-keep-in-mind-when-building-a-platform-for-the-enterprise/",target:"_blank",rel:"noopener noreferrer"}},[t._v("4 Things to Keep in Mind When Building a Platform for the Enterprise"),a("OutboundLink")],1),t._v(" , Box 平台 VP 海蒂·威廉姆斯(Heidi Williams)撰写的一篇文章, 阐述了为企业构建平台时需要牢记的四件关于软件设计方面的事: 1. Design Broadly, Build Narrowly;  2. Platforms Are Powerful and Flexible. Choose wisely what to expose when!; 3. Build Incrementally, Get Feedback, and Iterate; 4. Create a Platform-first Mentality. 文章中有详细的解读, 推荐看看.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.usenix.org/conference/srecon17americas/program/presentation/rosenthal",target:"_blank",rel:"noopener noreferrer"}},[t._v("Principles of Chaos Engineering"),a("OutboundLink")],1),t._v(' , 我们知道, Netflix 公司有一个叫 Chaos Monkey 的东西, 这个东西会到分布式系统里"瞎搞", 以此来测试系统的健壮和稳定性. 这个视频中, Netflix 分享了一些软件架构的经验和原则, 值得一看.')]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.igvita.com/2016/05/20/building-fast-and-resilient-web-applications/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Building Fast & Resilient Web Applications"),a("OutboundLink")],1),t._v(" , 伊利亚·格里高利克(Ilya Grigorik)在 Google I/O 2016 上的一次关于如何通过弹力设计来实现快速和可容错的网站架构的演讲, 其中有好些经验分享.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://highscalability.com/blog/2012/12/31/designing-for-resiliency-will-be-so-2013.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Design for Resiliency"),a("OutboundLink")],1),t._v(' , 这篇文章带我们全面认识"弹力(Resiliency)", 以及弹力对于系统的重要性, 并详细阐述了如何设计和实现系统的弹力.')]),t._v(" "),a("li",[t._v("微软的 Azure 网站上有一系列的 "),a("a",{attrs:{href:"https://docs.microsoft.com/en-us/azure/architecture/guide/design-principles/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Design Principle"),a("OutboundLink")],1),t._v(" 的文章, 你可以看看这几篇:  "),a("a",{attrs:{href:"https://docs.microsoft.com/en-us/azure/architecture/guide/design-principles/self-healing",target:"_blank",rel:"noopener noreferrer"}},[t._v("Design for Self-healing"),a("OutboundLink")],1),t._v(" , "),a("a",{attrs:{href:"https://docs.microsoft.com/en-us/azure/architecture/guide/design-principles/scale-out",target:"_blank",rel:"noopener noreferrer"}},[t._v("Design for Scaling Out"),a("OutboundLink")],1),t._v(" 和 "),a("a",{attrs:{href:"https://docs.microsoft.com/en-us/azure/architecture/guide/design-principles/design-for-evolution",target:"_blank",rel:"noopener noreferrer"}},[t._v("Design for Evolution"),a("OutboundLink")],1),t._v(" .")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.allthingsdistributed.com/2008/12/eventually_consistent.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Eventually Consistent"),a("OutboundLink")],1),t._v(" , AWS CTO 维尔纳·沃格尔斯(Werner Vogels)发布在自己 Blog 上的一篇关于最终一致性的好文.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.rackspace.com/writing-code-that-scales",target:"_blank",rel:"noopener noreferrer"}},[t._v("Writing Code that Scales"),a("OutboundLink")],1),t._v(" , Rackspace 的一篇很不错的博文, 告诉我们一些很不错的写出高扩展和高性能代码的工程原则.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://architecht.io/lessons-from-facebook-on-engineering-for-scale-f5716f0afc7a",target:"_blank",rel:"noopener noreferrer"}},[t._v("Automate and Abstract: Lessons from Facebook on Engineering for Scale"),a("OutboundLink")],1),t._v(" , 软件自动化和软件抽象, 这是软件工程中最重要的两件事了. 通过这篇文章, 我们可以看到 Facebook 的关于这方面的一些经验教训.")])]),t._v(" "),a("h5",{attrs:{id:"_1-设计模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-设计模式"}},[t._v("#")]),t._v(" 1.设计模式")]),t._v(" "),a("p",[t._v("有了方法论后, 你还需要学习一些比较细节的落地的技术. 最好的方式就是学习被前人总结出来的设计模式, 虽然设计模式也要分场景, 但是设计模式可以让你知道一些套路, 这些套路对于我们设计的分布式系统有非常大的帮助, 不但可以让我们少走一些弯路, 而且还能让我们更为系统和健壮地设计我们的架构.")]),t._v(" "),a("p",[t._v("下面是一些分布式架构设计模式的网站.")]),t._v(" "),a("p",[t._v("首先需要重点推荐的是微软云平台 Azure 上的设计模式. "),a("a",{attrs:{href:"https://docs.microsoft.com/en-us/azure/architecture/patterns/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Cloud Design Patterns"),a("OutboundLink")],1),t._v(" , 这个网站上罗列了分布式设计的各种设计模式, 可以说是非常全面和完整. 对于每一个模式都有详细的说明, 并有对其优缺点的讨论, 以及适用场景和不适用场景的说明, 实在是一个非常不错的学习分布式设计模式的地方. 其中有如下分类.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://docs.microsoft.com/en-us/azure/architecture/patterns/category/availability",target:"_blank",rel:"noopener noreferrer"}},[t._v("设计模式: 可用性"),a("OutboundLink")],1),t._v(";")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://docs.microsoft.com/en-us/azure/architecture/patterns/category/data-management",target:"_blank",rel:"noopener noreferrer"}},[t._v("设计模式: 数据管理"),a("OutboundLink")],1),t._v(";")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://docs.microsoft.com/en-us/azure/architecture/patterns/category/design-implementation",target:"_blank",rel:"noopener noreferrer"}},[t._v("设计模式: 设计和实现"),a("OutboundLink")],1),t._v(";")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://docs.microsoft.com/en-us/azure/architecture/patterns/category/messaging",target:"_blank",rel:"noopener noreferrer"}},[t._v("设计模式: 消息"),a("OutboundLink")],1),t._v(";")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://docs.microsoft.com/en-us/azure/architecture/patterns/category/management-monitoring",target:"_blank",rel:"noopener noreferrer"}},[t._v("设计模式: 管理和监控"),a("OutboundLink")],1),t._v(";")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://docs.microsoft.com/en-us/azure/architecture/patterns/category/performance-scalability",target:"_blank",rel:"noopener noreferrer"}},[t._v("设计模式: 性能和扩展"),a("OutboundLink")],1),t._v(";")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://docs.microsoft.com/en-us/azure/architecture/patterns/category/resiliency",target:"_blank",rel:"noopener noreferrer"}},[t._v("设计模式: 系统弹力"),a("OutboundLink")],1),t._v(";")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://docs.microsoft.com/en-us/azure/architecture/patterns/category/security",target:"_blank",rel:"noopener noreferrer"}},[t._v("设计模式: 安全"),a("OutboundLink")],1),t._v(".")])]),t._v(" "),a("p",[t._v("除此之外, 还有其它的一些关于分布式系统设计模式的网站和相关资料.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://en.clouddesignpattern.org/index.php/Main_Page",target:"_blank",rel:"noopener noreferrer"}},[t._v("AWS Cloud Pattern"),a("OutboundLink")],1),t._v(" , 这里收集了 AWS 云平台的一些设计模式.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://research.google.com/pubs/archive/45406.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Design patterns for container-based distributed systems"),a("OutboundLink")],1),t._v(" , 这是 Google 给的一篇论文, 其中描述了容器化下的分布式架构的设计模式.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.slideshare.net/pagsousa/patterns-fro-distributed-systems",target:"_blank",rel:"noopener noreferrer"}},[t._v("Patterns for distributed systems"),a("OutboundLink")],1),t._v(" , 这是一个 PPT, 其中讲了一些分布式系统的架构模式, 你可以顺着到 Google 里去搜索.")])]),t._v(" "),a("p",[t._v("我个人觉得微服务也好, SOA 也好, 都是分布式系统的一部分, 这里有两个网站罗列了各种各样的服务架构模式.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://microservices.io/patterns/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("A Pattern Language for Micro-Services"),a("OutboundLink")],1),t._v(" ;")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://soapatterns.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("SOA Patterns"),a("OutboundLink")],1),t._v(".")])]),t._v(" "),a("p",[t._v("当然, 还有我在极客时间上写的那些分布式的设计模式的总结.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("弹力设计篇")]),t._v(", 内容包括: 认识故障和弹力设计, 隔离设计, 异步通讯设计, 幂等性设计, 服务的状态, 补偿事务, 重试设计, 熔断设计, 限流设计, 降级设计, 弹力设计总结.")]),t._v(" "),a("li",[a("strong",[t._v("管理设计篇")]),t._v(", 内容包括: 分布式锁, 配置中心, 边车模式, 服务网格, 网关模式, 部署升级策略等.")]),t._v(" "),a("li",[a("strong",[t._v("性能设计篇")]),t._v(", 内容包括: 缓存, 异步处理, 数据库扩展, 秒杀, 边缘计算等.")])]),t._v(" "),a("h5",{attrs:{id:"_2-设计与工程实践"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-设计与工程实践"}},[t._v("#")]),t._v(" 2.设计与工程实践")]),t._v(" "),a("h6",{attrs:{id:"_1-分布式系统的故障测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-分布式系统的故障测试"}},[t._v("#")]),t._v(" (1)分布式系统的故障测试")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://medium.com/netflix-techblog/fit-failure-injection-testing-35d8e2a9bb2",target:"_blank",rel:"noopener noreferrer"}},[t._v("FIT: Failure Injection Testing"),a("OutboundLink")],1),t._v(" , Netflix 公司的一篇关于做故障注入测试的文章.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://medium.com/netflix-techblog/automated-failure-testing-86c1b8bc841f",target:"_blank",rel:"noopener noreferrer"}},[t._v("Automated Failure Testing"),a("OutboundLink")],1),t._v(" , 同样来自 Netflix 公司的自动化故障测试的一篇博文.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://people.ucsc.edu/~palvaro/socc16.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Automating Failure Testing Research at Internet Scale"),a("OutboundLink")],1),t._v(" , Netflix 公司伙同圣克鲁斯加利福尼亚大学和 Gremlin 游戏公司一同撰写的一篇论文.")])]),t._v(" "),a("h6",{attrs:{id:"_2-弹性伸缩"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-弹性伸缩"}},[t._v("#")]),t._v(" (2)弹性伸缩")]),t._v(" "),a("ul",[a("li",[a("p",[a("a",{attrs:{href:"http://highscalability.com/blog/2014/5/12/4-architecture-issues-when-scaling-web-applications-bottlene.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("4 Architecture Issues When Scaling Web Applications: Bottlenecks, Database, CPU, IO"),a("OutboundLink")],1),t._v(" , 本文讲解了后端程序的主要性能指标, 即响应时间和可伸缩性这两者如何能提高的解决方案, 讨论了包括纵向和横向扩展, 可伸缩架构, 负载均衡, 数据库的伸缩, CPU 密集型和 I/O 密集型程序的考量等.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"http://ithare.com/scaling-stateful-objects/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Scaling Stateful Objects"),a("OutboundLink")],1),t._v(" , 这是一本叫《Development&Deployment of Multiplayer Online Games》书中一章内容的节选, 讨论了有状态和无状态的节点如何伸缩的问题. 虽然还没有写完, 但是可以给你一些很不错的基本概念和想法.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://blog.codinghorror.com/scaling-up-vs-scaling-out-hidden-costs/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Scale Up vs Scale Out: Hidden Costs"),a("OutboundLink")],1),t._v(" , Coding Horror 上的一篇有趣的文章, 详细分析了可伸缩性架构的不同扩展方案(横向扩展或纵向扩展)所带来的成本差异, 帮助你更好地选择合理的扩展方案, 可以看看.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://blog.openshift.com/best-practices-for-horizontal-application-scaling/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Best Practices for Scaling Out"),a("OutboundLink")],1),t._v(" , OpenShift 的一篇讨论 Scale out 最佳实践的文章.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://www.infoq.com/articles/scalability-worst-practices",target:"_blank",rel:"noopener noreferrer"}},[t._v("Scalability Worst Practices"),a("OutboundLink")],1),t._v(" , 这篇文章讨论了一些最差实践, 你需要小心避免.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"http://highscalability.com/blog/2013/8/26/reddit-lessons-learned-from-mistakes-made-scaling-to-1-billi.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Reddit: Lessons Learned From Mistakes Made Scaling To 1 Billion Pageviews A Month"),a("OutboundLink")],1),t._v(" , Reddit 分享的一些关于系统扩展的经验教训.")])]),t._v(" "),a("li",[a("p",[t._v("下面是几篇关于自动化弹性伸缩的文章.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://medium.com/@Pinterest_Engineering/auto-scaling-pinterest-df1d2beb4d64",target:"_blank",rel:"noopener noreferrer"}},[t._v("Autoscaling Pinterest"),a("OutboundLink")],1),t._v(";")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://medium.com/square-corner-blog/autoscaling-based-on-request-queuing-c4c0f57f860f",target:"_blank",rel:"noopener noreferrer"}},[t._v("Square: Autoscaling Based on Request Queuing"),a("OutboundLink")],1),t._v(";")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.paypal-engineering.com/2017/08/16/autoscaling-applications-paypal/",target:"_blank",rel:"noopener noreferrer"}},[t._v("PayPal: Autoscaling Applications"),a("OutboundLink")],1),t._v(";")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://tech.trivago.com/2017/02/17/your-definite-guide-for-autoscaling-jenkins/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Trivago: Your Definite Guide For Autoscaling Jenkins"),a("OutboundLink")],1),t._v(";")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://medium.com/netflix-techblog/scryer-netflixs-predictive-auto-scaling-engine-a3f8fc922270",target:"_blank",rel:"noopener noreferrer"}},[t._v("Scryer: Netflix’s Predictive Auto Scaling Engine"),a("OutboundLink")],1),t._v(".")])])])]),t._v(" "),a("h6",{attrs:{id:"_3-一致性哈希"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-一致性哈希"}},[t._v("#")]),t._v(" (3)一致性哈希")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://www.tom-e-white.com/2007/11/consistent-hashing.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Consistent Hashing"),a("OutboundLink")],1),t._v(" , 这是一个一致性哈希的简单教程, 其中还有代码示例.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://medium.com/@dgryski/consistent-hashing-algorithmic-tradeoffs-ef6b8e2fcae8",target:"_blank",rel:"noopener noreferrer"}},[t._v("Consistent Hashing: Algorithmic Tradeoffs"),a("OutboundLink")],1),t._v(" , 这篇文章讲述了一致性哈希的一些缺陷和坑, 以及各种哈希算法的性能比较, 最后还给了一组代码仓库, 其中有各种哈希算法的实现.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://medium.com/netflix-techblog/distributing-content-to-open-connect-3e3e391d4dc9",target:"_blank",rel:"noopener noreferrer"}},[t._v("Distributing Content to Open Connect"),a("OutboundLink")],1),t._v(" , Netflix 的一个对一致性哈希的实践, 提出了 Uniform Consistent Hashing, 是挺有意思的一篇文章.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.imaginea.com/consistent-hashing-in-cassandra/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Consistent Hashing in Cassandra"),a("OutboundLink")],1),t._v(" , 这是 Cassandra 中使用到的一致性哈希的相关设计.")])]),t._v(" "),a("h6",{attrs:{id:"_4-数据库分布式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-数据库分布式"}},[t._v("#")]),t._v(" (4)数据库分布式")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://queue.acm.org/detail.cfm?id=3025012",target:"_blank",rel:"noopener noreferrer"}},[t._v("Life Beyond Distributed Transactions"),a("OutboundLink")],1),t._v(' , 该文是 Salesforce 的软件架构师帕特·赫兰德(Pat Helland)于 2016 年 12 月发表的针对其在 2007 年 CIDR(创新数据库研究会议)上首次发表的同名文章的更新和缩写版本. 业界谈到分布式事务通常指两段提交 2PC 事务(Spring/JEE 中 JTA 等) 或者 Paxos 与 Raft, 这些事务都有明显缺点和局限性. 而赫兰德在本文讨论的是另外一种基于本地事务情况下的事务机制, 它是基于实体和活动(Activity)的概念, 其实类似 DDD 聚合根和领域事件的概念, 这种工作流类型事务虽然需要程序员介入, 依靠消息系统实现, 但可以实现接近无限扩展的大型系统. 赫兰德文中提出了重要的观点: "如果你不能使用分布式事务, 那么你就只能使用工作流."')]),t._v(" "),a("li",[a("a",{attrs:{href:"https://medium.com/@jeeyoungk/how-sharding-works-b4dec46b3f6",target:"_blank",rel:"noopener noreferrer"}},[t._v("How Sharding Works"),a("OutboundLink")],1),t._v(" , 这是一篇很不错的探讨数据 Sharding 的文章. 基本上来说, 数据 Sharding 可能的问题都在这篇文章里谈到了.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.percona.com/blog/2009/08/06/why-you-dont-want-to-shard/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Why you don’t want to shard"),a("OutboundLink")],1),t._v(" , 这是 Percona 的一篇文章, 其中表达了, 不到万不得已不要做数据库分片. 是的, 最好还是先按业务来拆分, 先把做成微服务的架构, 然后把数据集变简单, 然后再做 Sharding 会更好.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.percona.com/sites/default/files/presentations/How%20to%20Scale%20Big%20Data%20Applications.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("How to Scale Big Data Applications"),a("OutboundLink")],1),t._v(" , 这也是 Percona 给出的一篇关于怎样给大数据应用做架构扩展的文章. 值得一读.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.percona.com/blog/2016/08/30/mysql-sharding-with-proxysql/",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL Sharding with ProxySQL"),a("OutboundLink")],1),t._v(" , 用 ProxySQL 来支撑 MySQL 数据分片的一篇实践文章.")])]),t._v(" "),a("h6",{attrs:{id:"_5-缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-缓存"}},[t._v("#")]),t._v(" (5)缓存")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://coolshell.cn/articles/17416.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("缓存更新的套路"),a("OutboundLink")],1),t._v(", 这是我在 CoolShell 上写的缓存更新的几个设计模式, 包括 Cache Aside, Read/Write Through, Write Behind Caching.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://highscalability.com/blog/2016/1/25/design-of-a-modern-cache.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Design Of A Modern Cache"),a("OutboundLink")],1),t._v(" , 设计一个现代化的缓存系统需要注意到的东西.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://medium.com/netflix-techblog/caching-for-a-global-netflix-7bcc457012f1",target:"_blank",rel:"noopener noreferrer"}},[t._v("Netflix: Caching for a Global Netflix"),a("OutboundLink")],1),t._v(" , Netflix 公司的全局缓存架构实践.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://code.facebook.com/posts/220956754772273/an-analysis-of-facebook-photo-caching/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Facebook: An analysis of Facebook photo caching"),a("OutboundLink")],1),t._v(" , Facebook 公司的图片缓存使用分析, 这篇文章挺有意思的, 用数据来调优不同的缓存大小和算法.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://tech.trivago.com/2017/12/19/how-trivago-reduced-memcached-memory-usage-by-50/",target:"_blank",rel:"noopener noreferrer"}},[t._v("How trivago Reduced Memcached Memory Usage by 50%"),a("OutboundLink")],1),t._v(" , Trivago 公司一篇分享自己是如何把 Memcached 的内存使用率降了一半的实践性文章. 很有意思, 可以让你学到很多东西.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://engineeringblog.yelp.com/2018/03/caching-internal-service-calls-at-yelp.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Caching Internal Service Calls at Yelp"),a("OutboundLink")],1),t._v(" , Yelp 公司的缓存系统架构.")])]),t._v(" "),a("h6",{attrs:{id:"_6-消息队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-消息队列"}},[t._v("#")]),t._v(" (6)消息队列")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://content.pivotal.io/blog/understanding-when-to-use-rabbitmq-or-apache-kafka",target:"_blank",rel:"noopener noreferrer"}},[t._v("Understanding When to use RabbitMQ or Apache Kafka"),a("OutboundLink")],1),t._v(" , 什么时候使用 RabbitMQ, 什么时候使用 Kafka, 通过这篇文章可以让你明白如何做技术决策.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://tech.trello.com/why-we-chose-kafka/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Trello: Why We Chose Kafka For The Trello Socket Architecture"),a("OutboundLink")],1),t._v(" , Trello 的 Kafka 架构分享.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://engineering.linkedin.com/kafka/running-kafka-scale",target:"_blank",rel:"noopener noreferrer"}},[t._v("LinkedIn: Running Kafka At Scale"),a("OutboundLink")],1),t._v(" , LinkedIn 公司的 Kafka 架构扩展实践.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.confluent.io/blog/put-several-event-types-kafka-topic/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Should You Put Several Event Types in the Same Kafka Topic?"),a("OutboundLink")],1),t._v(" , 这个问题可能经常困扰你, 这篇文章可以为你找到答案.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://engineeringblog.yelp.com/2016/07/billions-of-messages-a-day-yelps-real-time-data-pipeline.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Billions of Messages a Day - Yelp’s Real-time Data Pipeline"),a("OutboundLink")],1),t._v(" , Yelp 公司每天十亿级实时消息的架构.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://eng.uber.com/reliable-reprocessing/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Uber: Building Reliable Reprocessing and Dead Letter Queues with Kafka"),a("OutboundLink")],1),t._v(" , Uber 公司的 Kafka 应用.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://eng.uber.com/chaperone/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Uber: Introducing Chaperone: How Uber Engineering Audits Kafka End-to-End"),a("OutboundLink")],1),t._v(" , Uber 公司对 Kafka 消息的端到端审计.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://open.nytimes.com/publishing-with-apache-kafka-at-the-new-york-times-7f0e3b7d2077",target:"_blank",rel:"noopener noreferrer"}},[t._v("Publishing with Apache Kafka at The New York Times"),a("OutboundLink")],1),t._v(" , 纽约时报的 Kafka 工程实践.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.heroku.com/kafka-streams-on-heroku",target:"_blank",rel:"noopener noreferrer"}},[t._v("Kafka Streams on Heroku"),a("OutboundLink")],1),t._v(" , Heroku 公司的 Kafka Streams 实践.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://engineering.salesforce.com/how-apache-kafka-inspired-our-platform-events-architecture-2f351fe4cf63",target:"_blank",rel:"noopener noreferrer"}},[t._v("Salesforce: How Apache Kafka Inspired Our Platform Events Architecture"),a("OutboundLink")],1),t._v(" , Salesforce 的 Kafka 工程实践.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.confluent.io/blog/exactly-once-semantics-are-possible-heres-how-apache-kafka-does-it/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Exactly-once Semantics are Possible: Here’s How Kafka Does it"),a("OutboundLink")],1),t._v(" , 怎样用 Kafka 让只发送一次的语义变为可能. 这是业界中一个很难的工程问题.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://segment.com/blog/exactly-once-delivery/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Delivering billions of messages exactly once"),a("OutboundLink")],1),t._v(" 同上, 这也是一篇挑战消息只发送一次这个技术难题的文章.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://yahooeng.tumblr.com/post/135321837876/benchmarking-streaming-computation-engines-at",target:"_blank",rel:"noopener noreferrer"}},[t._v("Benchmarking Streaming Computation Engines at Yahoo!"),a("OutboundLink")],1),t._v(". Yahoo! 的 Storm 团队在为他们的流式计算做技术选型时, 发现市面上缺乏针对不同计算平台的性能基准测试. 于是, 他们研究并设计了一种方案来做基准测试, 测试了 Apache Flink, Apache Storm 和 Apache Spark 这三种平台. 文中给出了结论和具体的测试方案. (如果原文链接不可用, 请尝试搜索引擎对该网页的快照. )")])]),t._v(" "),a("h6",{attrs:{id:"_7-关于日志方面"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-关于日志方面"}},[t._v("#")]),t._v(" (7)关于日志方面")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.confluent.io/blog/using-logs-to-build-a-solid-data-infrastructure-or-why-dual-writes-are-a-bad-idea/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Using Logs to Build a Solid Data Infrastructure - Martin Kleppmann"),a("OutboundLink")],1),t._v(" , 设计基于 log 结构应用架构的一篇不错的文章.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.twitter.com/engineering/en_us/topics/infrastructure/2015/building-distributedlog-twitter-s-high-performance-replicated-log-servic.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Building DistributedLog: High-performance replicated log service"),a("OutboundLink")],1),t._v(" , Distributed 是 Twitter 2016 年 5 月份开源的一个分布式日志系统. 在 Twitter 内部已经使用 2 年多. 其主页在 "),a("a",{attrs:{href:"http://distributedlog.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("distributedlog.io"),a("OutboundLink")],1),t._v(". 这篇文章讲述了这个高性能日志系统的一些技术细节. 另外, 其技术负责人是个中国人, 其在微信公众号中也分享过这个系统 "),a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzAwMDU1MTE1OQ==&mid=403051208&idx=1&sn=1694ac05acbcb5ca53c88bfac8a68856&scene=2&srcid=1224xZuQ9QQ4sRmiPVdHTppL",target:"_blank",rel:"noopener noreferrer"}},[t._v("Twitter 高性能分布式日志系统架构解析"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://code.facebook.com/posts/357056558062811/logdevice-a-distributed-data-store-for-logs/",target:"_blank",rel:"noopener noreferrer"}},[t._v("LogDevice: a distributed data store for logs"),a("OutboundLink")],1),t._v(" , Facebook 分布式日志系统方面的一些工程分享.")])]),t._v(" "),a("h6",{attrs:{id:"_8-关于性能方面"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-关于性能方面"}},[t._v("#")]),t._v(" (8)关于性能方面")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://highscalability.com/latency-everywhere-and-it-costs-you-sales-how-crush-it",target:"_blank",rel:"noopener noreferrer"}},[t._v("Understand Latency"),a("OutboundLink")],1),t._v(" , 这篇文章收集并整理了一些和系统响应时间相关的文章, 可以让你全面了解和 Latency 有关的系统架构和设计经验方面的知识.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://highscalability.com/blog/2012/5/16/big-list-of-20-common-bottlenecks.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Common Bottlenecks"),a("OutboundLink")],1),t._v(" , 文中讲述了 20 个常见的系统瓶颈.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.codinghorror.com/performance-is-a-feature/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Performance is a Feature"),a("OutboundLink")],1),t._v(" , Coding Horror 上的一篇让你关注性能的文章.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://codeascraft.com/2014/12/11/make-performance-part-of-your-workflow/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Make Performance Part of Your Workflow"),a("OutboundLink")],1),t._v(" , 这篇文章是图书《"),a("a",{attrs:{href:"http://shop.oreilly.com/product/0636920033578.do",target:"_blank",rel:"noopener noreferrer"}},[t._v("Designing for Performance"),a("OutboundLink")],1),t._v("》中的节选(国内没有卖的), 其中给出来了一些和性能有关的设计上的平衡和美学.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.cloudflare.com/counting-things-a-lot-of-different-things/",target:"_blank",rel:"noopener noreferrer"}},[t._v("CloudFlare: How we built rate limiting capable of scaling to millions of domains"),a("OutboundLink")],1),t._v(", 讲述了 CloudFlare 公司是怎样实现他们的限流功能的. 从最简单的每客户 IP 限流开始分析, 进一步讲到 anycast, 在这种情况下 PoP 的分布式限流是怎样实现的, 并详细解释了具体的算法.")])]),t._v(" "),a("h6",{attrs:{id:"_9-关于搜索方面"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-关于搜索方面"}},[t._v("#")]),t._v(" (9)关于搜索方面")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://instagram-engineering.com/search-architecture-eeb34a936d3a",target:"_blank",rel:"noopener noreferrer"}},[t._v("Instagram: Search Architecture"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.cs.otago.ac.nz/homepages/andrew/papers/2017-8.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("eBay: The Architecture of eBay Search"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.ebayinc.com/stories/blogs/tech/making-e-commerce-search-faster/",target:"_blank",rel:"noopener noreferrer"}},[t._v("eBay: Improving Search Engine Efficiency by over 25%"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://engineering.linkedin.com/search/did-you-mean-galene",target:"_blank",rel:"noopener noreferrer"}},[t._v("LinkedIn: Introducing LinkedIn’s new search architecture"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://engineering.linkedin.com/blog/2018/03/search-federation-architecture-at-linkedin",target:"_blank",rel:"noopener noreferrer"}},[t._v("LinkedIn: Search Federation Architecture at LinkedIn"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://slack.engineering/search-at-slack-431f8c80619e",target:"_blank",rel:"noopener noreferrer"}},[t._v("Slack: Search at Slack"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.doordash.com/powering-search-recommendations-at-doordash-8310c5cfd88c",target:"_blank",rel:"noopener noreferrer"}},[t._v("DoorDash: Search and Recommendations at DoorDash"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.twitter.com/engineering/en_us/a/2014/building-a-complete-tweet-index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Twitter: Search Service at Twitter (2014)"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://medium.com/@Pinterest_Engineering/manas-a-high-performing-customized-search-system-cf189f6ca40f",target:"_blank",rel:"noopener noreferrer"}},[t._v("Pinterest: Manas: High Performing Customized Search System"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://tech.flipkart.com/sherlock-near-real-time-search-indexing-95519783859d",target:"_blank",rel:"noopener noreferrer"}},[t._v("Sherlock: Near Real Time Search Indexing at Flipkart"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://medium.com/airbnb-engineering/nebula-as-a-storage-platform-to-build-airbnbs-search-backends-ecc577b05f06",target:"_blank",rel:"noopener noreferrer"}},[t._v("Airbnb: Nebula: Storage Platform to Build Search Backends"),a("OutboundLink")],1)])]),t._v(" "),a("h6",{attrs:{id:"_10-各公司的架构实践"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-各公司的架构实践"}},[t._v("#")]),t._v(" (10)各公司的架构实践")]),t._v(" "),a("p",[a("a",{attrs:{href:"http://highscalability.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("High Scalability"),a("OutboundLink")],1),t._v(" , 这个网站会定期分享一些大规模系统架构是怎样构建的, 下面是迄今为止各个公司的架构说明.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://highscalability.com/youtube-architecture",target:"_blank",rel:"noopener noreferrer"}},[t._v("YouTube Architecture"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://highscalability.com/blog/2013/4/15/scaling-pinterest-from-0-to-10s-of-billions-of-page-views-a.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Scaling Pinterest"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://highscalability.com/google-architecture",target:"_blank",rel:"noopener noreferrer"}},[t._v("Google Architecture"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://highscalability.com/scaling-twitter-making-twitter-10000-percent-faster",target:"_blank",rel:"noopener noreferrer"}},[t._v("Scaling Twitter"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://highscalability.com/blog/2014/2/26/the-whatsapp-architecture-facebook-bought-for-19-billion.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("The WhatsApp Architecture"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://highscalability.com/flickr-architecture",target:"_blank",rel:"noopener noreferrer"}},[t._v("Flickr Architecture"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://highscalability.com/amazon-architecture",target:"_blank",rel:"noopener noreferrer"}},[t._v("Amazon Architecture"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://highscalability.com/blog/2009/8/5/stack-overflow-architecture.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Stack Overflow Architecture"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://highscalability.com/blog/2012/5/21/pinterest-architecture-update-18-million-visitors-10x-growth.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Pinterest Architecture"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://highscalability.com/blog/2012/2/13/tumblr-architecture-15-billion-page-views-a-month-and-harder.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Tumblr Architecture"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://highscalability.com/blog/2011/12/6/instagram-architecture-14-million-users-terabytes-of-photos.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Instagram Architecture"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://highscalability.com/blog/2011/6/27/tripadvisor-architecture-40m-visitors-200m-dynamic-page-view.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("TripAdvisor Architecture"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://highscalability.com/blog/2013/6/18/scaling-mailbox-from-0-to-one-million-users-in-6-weeks-and-1.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Scaling Mailbox"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://highscalability.com/blog/2013/9/23/salesforce-architecture-how-they-handle-13-billion-transacti.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Salesforce Architecture"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://highscalability.com/blog/2013/11/4/espns-architecture-at-scale-operating-at-100000-duh-nuh-nuhs.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("ESPN Architecture"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://highscalability.com/blog/2015/9/14/how-uber-scales-their-real-time-market-platform.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Uber Architecture"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.youtube.com/watch?v=PE4gwstWhmc",target:"_blank",rel:"noopener noreferrer"}},[t._v("DropBox Design"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.splunk.com/view/SP-CAAABF9",target:"_blank",rel:"noopener noreferrer"}},[t._v("Splunk Architecture"),a("OutboundLink")],1)])]),t._v(" "),a("h5",{attrs:{id:"_3-小结-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-小结-12"}},[t._v("#")]),t._v(" 3.小结")]),t._v(" "),a("p",[t._v("今天的内容是高手成长篇分布式架构部分的最后一篇——分布式架构工程设计, 讲述了设计原则, 设计模式等方面的内容, 尤其整理和推荐了国内外知名企业的设计思路和工程实践, 十分具有借鉴意义.")]),t._v(" "),a("h4",{attrs:{id:"程序员练级攻略-微服务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#程序员练级攻略-微服务"}},[t._v("#")]),t._v(" 程序员练级攻略:微服务")]),t._v(" "),a("p",[t._v("微服务是分布式系统中最近比较流行的架构模型, 也是 SOA 架构的一个进化. 微服务架构并不是银弹, 所以也不要寄希望于微服务架构能够解决所有的问题. 微服务架构主要解决的是如何快速地开发和部署服务, 这对于一个能够适应快速开发和成长的公司是非常必要的. 同时我也觉得, 微服务中有很多很不错的想法和理念, 所以学习微服务是每一个技术人员迈向卓越的架构师的必经之路.")]),t._v(" "),a("p",[t._v("首先, 你需要看一下, Martin Fowler 的这篇关于微服务架构的文档 - "),a("a",{attrs:{href:"http://martinfowler.com/articles/microservices.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Microservice Architecture"),a("OutboundLink")],1),t._v(" ("),a("a",{attrs:{href:"https://blog.csdn.net/wurenhai/article/details/37659335",target:"_blank",rel:"noopener noreferrer"}},[t._v("中译版"),a("OutboundLink")],1),t._v("), 这篇文章说明了微服务的架构与传统架构的不同之处在于, 微服务的每个服务与其数据库都是独立的, 可以无依赖地进行部署. 你也可以看看 Martin Fowler 老人家现身说法的"),a("a",{attrs:{href:"https://www.youtube.com/watch?v=wgdBVIX9ifA",target:"_blank",rel:"noopener noreferrer"}},[t._v("视频"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("p",[t._v("另外, 你还可以简单地浏览一下, 各家对微服务的理解.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://aws.amazon.com/microservices/",target:"_blank",rel:"noopener noreferrer"}},[t._v("AWS 的理解 - What are Microservices?"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://docs.microsoft.com/en-us/azure/architecture/guide/architecture-styles/microservices",target:"_blank",rel:"noopener noreferrer"}},[t._v("Microsoft 的理解 - Microservices architecture style"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://pivotal.io/microservices",target:"_blank",rel:"noopener noreferrer"}},[t._v("Pivotal 的理解 - Microservices"),a("OutboundLink")],1),t._v(".")])]),t._v(" "),a("h5",{attrs:{id:"_1-微服务架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-微服务架构"}},[t._v("#")]),t._v(" 1.微服务架构")]),t._v(" "),a("p",[t._v("接下来可以看一下 "),a("a",{attrs:{href:"https://www.redbooks.ibm.com/redbooks/pdfs/sg248357.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("IBM 红皮书: Microservices Best Practices for Java"),a("OutboundLink")],1),t._v(" , 这本书非常好, 不但有通过把 Spring Boot 和 Dropwizard 来架建 Java 的微服务, 而且还谈到了一些标准的架构模型, 如服务注册, 服务发现, API 网关, 服务通讯, 数据处理, 应用安全, 测试, 部署, 运维等, 是相当不错的一本书.")]),t._v(" "),a("p",[t._v("当然, 有一本书你也可以读一下--- "),a("a",{attrs:{href:"https://book.douban.com/subject/26772677/",target:"_blank",rel:"noopener noreferrer"}},[t._v("微服务设计"),a("OutboundLink")],1),t._v(". 这本书全面介绍了微服务的建模, 集成, 测试, 部署和监控, 通过一个虚构的公司讲解了如何建立微服务架构. 主要内容包括认识微服务在保证系统设计与组织目标统一上的重要性, 学会把服务集成到已有系统中, 采用递增手段拆分单块大型应用, 通过持续集成部署微服务, 等等.")]),t._v(" "),a("p",[t._v("与此相似的, 也有其它的一系列文章, 值得一读.")]),t._v(" "),a("p",[t._v("下面是 Nginx 上的一组微服务架构的系列文章.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.nginx.com/blog/introduction-to-microservices/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Introduction to Microservices"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.nginx.com/blog/building-microservices-using-an-api-gateway/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Building Microservices: Using an API Gateway"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.nginx.com/blog/building-microservices-inter-process-communication/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Building Microservices: Inter-Process Communication in a Microservices Architecture"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.nginx.com/blog/service-discovery-in-a-microservices-architecture/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Service Discovery in a Microservices Architecture"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.nginx.com/blog/event-driven-data-management-microservices/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Event-Driven Data Management for Microservices"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.nginx.com/blog/deploying-microservices/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Choosing a Microservices Deployment Strategy"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.nginx.com/blog/refactoring-a-monolith-into-microservices/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Refactoring a Monolith into Microservices"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("下面这是 "),a("a",{attrs:{href:"https://auth0.com/blog/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Auto0 Blog"),a("OutboundLink")],1),t._v(" 上一系列的微服务的介绍, 有代码演示.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://auth0.com/blog/an-introduction-to-microservices-part-1/",target:"_blank",rel:"noopener noreferrer"}},[t._v("An Introduction to Microservices, Part 1"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://auth0.com/blog/an-introduction-to-microservices-part-2-API-gateway/",target:"_blank",rel:"noopener noreferrer"}},[t._v("API Gateway. An Introduction to Microservices, Part 2"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://auth0.com/blog/an-introduction-to-microservices-part-3-the-service-registry/",target:"_blank",rel:"noopener noreferrer"}},[t._v("An Introduction to Microservices, Part 3: The Service Registry"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://auth0.com/blog/introduction-to-microservices-part-4-dependencies/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Intro to Microservices, Part 4: Dependencies and Data Sharing"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://auth0.com/blog/apigateway-microservices-superglue/",target:"_blank",rel:"noopener noreferrer"}},[t._v("API Gateway: the Microservices Superglue"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("还有 Dzone 的这个 Spring Boot 的教程.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://dzone.com/articles/microservices-with-spring-boot-part-1-getting-star",target:"_blank",rel:"noopener noreferrer"}},[t._v("Microservices With Spring Boot - Part 1 - Getting Started"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://dzone.com/articles/microservices-with-spring-boot-part-2-creating-a-f",target:"_blank",rel:"noopener noreferrer"}},[t._v("Microservices With Spring Boot - Part 2 - Creating a Forex Microservice"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://dzone.com/articles/microservices-with-spring-boot-part-3-creating-cur",target:"_blank",rel:"noopener noreferrer"}},[t._v("Microservices With Spring Boot - Part 3 - Creating Currency Conversion Microservice"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://dzone.com/articles/microservices-with-spring-boot-part-4-using-ribbon",target:"_blank",rel:"noopener noreferrer"}},[t._v("Microservices With Spring Boot - Part 4 - Using Ribbon for Load Balancing"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://dzone.com/articles/microservices-with-spring-boot-part-5-using-eureka",target:"_blank",rel:"noopener noreferrer"}},[t._v("Microservices With Spring Boot - Part 5 - Using Eureka Naming Server"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("当然, 如果你要玩得时髦一些的话, 我推荐你使用下面的这套架构.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("前端")]),t._v(": "),a("a",{attrs:{href:"https://reactjs.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("React.js"),a("OutboundLink")],1),t._v(" 或 "),a("a",{attrs:{href:"https://vuejs.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vue.js"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("后端")]),t._v(": "),a("a",{attrs:{href:"https://golang.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Go 语言"),a("OutboundLink")],1),t._v(" + 微服务工具集 "),a("a",{attrs:{href:"https://gokit.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Go kit"),a("OutboundLink")],1),t._v(" , 因为是微服务了, 所以, 每个服务的代码就简单了. 既然简单了, 也就可以用任何语言了, 所以, 我推荐 Go 语言.")]),t._v(" "),a("li",[a("strong",[t._v("通讯")]),t._v(": "),a("a",{attrs:{href:"https://grpc.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("gRPC"),a("OutboundLink")],1),t._v(", 这是 Google 远程调用的一个框架, 它比 Restful 的调用要快 20 倍到 50 倍的样子.")]),t._v(" "),a("li",[a("strong",[t._v("API")]),t._v(": "),a("a",{attrs:{href:"https://swagger.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Swagger"),a("OutboundLink")],1),t._v(", Swagger 是一种 Restful API 的简单但强大的表示方式, 标准的, 语言无关, 这种表示方式不但人可读, 而且机器可读. 可以作为 Restful API 的交互式文档, 也可以作为 Restful API 形式化的接口描述, 生成客户端和服务端的代码. 今天, 所有的 API 应该都通过 Swagger 来完成.")]),t._v(" "),a("li",[a("strong",[t._v("网关")]),t._v(": "),a("a",{attrs:{href:"https://envoyproxy.github.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Envoy"),a("OutboundLink")],1),t._v(" 其包含了服务发现, 负载均衡和熔断等这些特性, 也是一个很有潜力的网关. 当然, Kubernetes 也是很好的, 而且它也是高扩展的, 所以, 完全可以把 Envoy 通过 Ingress 集成进 Kubernetes. 这里有一个开源项目就是干这个事的 - "),a("a",{attrs:{href:"https://github.com/heptio/contour",target:"_blank",rel:"noopener noreferrer"}},[t._v("contour"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("日志监控")]),t._v(": "),a("a",{attrs:{href:"https://www.fluentd.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("fluentd"),a("OutboundLink")],1),t._v(" + "),a("a",{attrs:{href:"https://www.elastic.co/webinars/introduction-elk-stack",target:"_blank",rel:"noopener noreferrer"}},[t._v("ELK"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("指标监控")]),t._v(": "),a("a",{attrs:{href:"https://prometheus.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Prometheus"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("调用跟踪")]),t._v(": "),a("a",{attrs:{href:"http://jaeger.readthedocs.io/en/latest/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Jaeger"),a("OutboundLink")],1),t._v(" 或是 "),a("a",{attrs:{href:"http://zipkin.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Zipkin"),a("OutboundLink")],1),t._v(", 当然, 后者比较传统一些, 前者比较时髦, 最重要的是, 其可以和 Prometheus 和 Envory 集成.")]),t._v(" "),a("li",[a("strong",[t._v("自动化运维")]),t._v(": "),a("a",{attrs:{href:"https://docker.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Docker"),a("OutboundLink")],1),t._v(" + "),a("a",{attrs:{href:"https://kubernetes.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Kubernetes"),a("OutboundLink")],1),t._v(".")])]),t._v(" "),a("h5",{attrs:{id:"_2-微服务和soa"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-微服务和soa"}},[t._v("#")]),t._v(" 2.微服务和SOA")]),t._v(" "),a("p",[t._v("在对微服务有了一定的认识以后, 一定有很多同学分不清楚微服务和 SOA 架构, 对此, 你可以看一下这本电子书 - 《"),a("a",{attrs:{href:"https://www.nginx.com/resources/library/microservices-vs-soa/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Microservices vs. Service-Oriented Architecture"),a("OutboundLink")],1),t._v("》. 通过这本书, 你可以学到, 服务化架构的一些事实, 还有基础的 SOA 和微服务的架构知识, 以及两种架构的不同. 这本书的作者马克·理查兹(Mark Richards)同学拥有十年以上的 SOA 和微服务架构的设计和实现的经验.")]),t._v(" "),a("p",[t._v("另外, 还有几篇其它对比 SOA 和微服务的文章你也可以看看.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://dzone.com/articles/microservices-vs-soa-2",target:"_blank",rel:"noopener noreferrer"}},[t._v("DZone: Microservices vs. SOA"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://dzone.com/articles/microservices-vs-soa-is-there-any-difference-at-al",target:"_blank",rel:"noopener noreferrer"}},[t._v("DZone: Microservices vs. SOA - Is There Any Difference at All?"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.ibm.com/developerworks/websphere/library/techarticles/1601_clark-trs/1601_clark.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Microservices, SOA, and APIs: Friends or enemies?"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("除此之外, 还需要知道微服务和其它架构的一些不同和比较, 这样就可以了解微服务架构的优缺点. 下面几篇文章将帮助获得这些知识.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://blog.altoros.com/microservices-architectures-paas-vs-iaas-top-6-differences.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("PaaS vs. IaaS for Microservices Architectures: Top 6 Differences"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.slideshare.net/altoros/microservices-vs-monolithic-architectures-pros-and-cons",target:"_blank",rel:"noopener noreferrer"}},[t._v("Microservices vs. Monolithic Architectures: Pros, Cons, and How Cloud Foundry (PaaS) Can Help"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://highscalability.com/blog/2014/4/8/microservices-not-a-free-lunch.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Microservices - Not A Free Lunch!"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.stackbuilders.com/news/the-hidden-costs-of-microservices",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Hidden Costs Of Microservices"),a("OutboundLink")],1)])]),t._v(" "),a("h5",{attrs:{id:"_3-设计模式和最佳实践"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-设计模式和最佳实践"}},[t._v("#")]),t._v(" 3.设计模式和最佳实践")]),t._v(" "),a("p",[t._v("然后, 你可以看一下微服务的一些设计模式.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://microservices.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Microservice Patterns"),a("OutboundLink")],1),t._v(", 微服务架构的设计模式和最佳实践.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.oreilly.com/ideas/microservices-antipatterns-and-pitfalls",target:"_blank",rel:"noopener noreferrer"}},[t._v("Microservice Antipatterns and Pitfalls"),a("OutboundLink")],1),t._v(", 微服务架构的一些已知的反模式和陷阱.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://codingsans.com/blog/microservice-architecture-best-practices",target:"_blank",rel:"noopener noreferrer"}},[t._v("Microservice Architecture: All The Best Practices You Need To Know"),a("OutboundLink")],1),t._v(", 这是一篇长文, 里面讲述了什么是微服务, 微服务架构的优缺点, 微服务最大的挑战和解决方案是什么, 如何避免出错, 以及构建微服务架构的最佳实践等多方面的内容. 推荐阅读.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.vinaysahni.com/best-practices-for-building-a-microservice-architecture",target:"_blank",rel:"noopener noreferrer"}},[t._v("Best Practices for Building a Microservice Architecture"),a("OutboundLink")],1),t._v(" , 这篇文章分享了构建微服务架构的最佳实践.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://jobs.zalando.com/tech/blog/simplicity-by-distributing-complexity/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Simplicity by Distributing Complexity"),a("OutboundLink")],1),t._v(", 这是一篇讲如何使用事件驱动构建微服务架构的文章, 其中有很多不错的设计上的基本原则.")])]),t._v(" "),a("h5",{attrs:{id:"_4-相关资源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-相关资源"}},[t._v("#")]),t._v(" 4.相关资源")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://martinfowler.com/microservices/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Microservices Resource Guide"),a("OutboundLink")],1),t._v(" , 这个网页上是 Martin Fowler 为我们挑选的和微服务相关的文章, 视频, 书或是 podcast.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/mfornos/awesome-microservices/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Awesome Microservices"),a("OutboundLink")],1),t._v(" , 一个各种微服务资源和相关项目的集中地.")])]),t._v(" "),a("h5",{attrs:{id:"_5-小结-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-小结-13"}},[t._v("#")]),t._v(" 5.小结")]),t._v(" "),a("p",[t._v("总结一下今天的内容. 微服务中有很多很不错的想法和理念, 所以学习微服务是每一个技术人员迈向卓越的架构师的必经之路. 在这篇文章中, 我先给出了 AWS, Microsoft 和 Pivotal 对微服务的理解; 然后给出了好几个系列的教程, 帮你全面学习和理解微服务架构; 然后通过一系列文章帮你来区分何为微服务, 何为 SOA; 最后给出了微服务架构的设计模式和最佳实践, 以及相关资源. 相信通过这一系列内容的学习, 你一定会对微服务有全面, 透彻的理解.")]),t._v(" "),a("h4",{attrs:{id:"程序员练级攻略-容器化和自动化运维"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#程序员练级攻略-容器化和自动化运维"}},[t._v("#")]),t._v(" 程序员练级攻略:容器化和自动化运维")]),t._v(" "),a("p",[t._v("这篇文章重点学习 Docker 和 Kubernetes, 它们已经是分布式架构和自动化运维的必备工具了. 对于这两个东西, 你千万不要害怕, 因为技术方面都不算复杂, 只是它们的玩法和传统运维不一样, 所以你不用担心, 只要你花上一点时间, 一定可以学好的.")]),t._v(" "),a("h5",{attrs:{id:"_1-docker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-docker"}},[t._v("#")]),t._v(" 1.Docker")]),t._v(" "),a("ul",[a("li",[t._v("你可以先看一下 Docker 的官方介绍 "),a("a",{attrs:{href:"https://docs.docker.com/engine/docker-overview/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Docker Overview"),a("OutboundLink")],1),t._v(" .")]),t._v(" "),a("li",[t._v("然后再去一个 Web 在线的 Playground 上体验一下, "),a("a",{attrs:{href:"https://www.katacoda.com/courses/docker/playground",target:"_blank",rel:"noopener noreferrer"}},[t._v("Katacoda Docker Playground"),a("OutboundLink")],1),t._v(" 或者是 "),a("a",{attrs:{href:"https://training.play-with-docker.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Play With Docker"),a("OutboundLink")],1),t._v(" .")]),t._v(" "),a("li",[t._v("接下来, 跟着 "),a("a",{attrs:{href:"https://github.com/dwyl/learn-docker",target:"_blank",rel:"noopener noreferrer"}},[t._v("Learn Docker"),a("OutboundLink")],1),t._v(" 这个文档中的教程自己安装一个 Docker 的环境, 实操一把.")]),t._v(" "),a("li",[t._v("然后跟着 "),a("a",{attrs:{href:"https://docker-curriculum.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Docker Curriculum"),a("OutboundLink")],1),t._v(" 这个超详细的教程玩一下 Docker.")])]),t._v(" "),a("p",[t._v("有了上述的一些感性体会之后, 你就可以阅读 Docker 官方文档 "),a("a",{attrs:{href:"https://docs.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Docker Documentation"),a("OutboundLink")],1),t._v(" 了, 这是学习 Docker 最好的方式.")]),t._v(" "),a("p",[t._v("如果你想了解一下 Docker 的底层技术细节, 你可以参看我的文章.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://coolshell.cn/articles/17010.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Docker 基础技术: Linux Namespace(上)"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://coolshell.cn/articles/17029.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Docker 基础技术: Linux Namespace(下)"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://coolshell.cn/articles/17049.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Docker 基础技术: Cgroup"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://coolshell.cn/articles/17061.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Docker 基础技术: AUFS"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://coolshell.cn/articles/17200.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Docker 基础技术: DeviceMapper"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("还有一些不错的与 Docker 网络有关的文章你需要阅读及实践一下.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://jvns.ca/blog/2016/12/22/container-networking/",target:"_blank",rel:"noopener noreferrer"}},[t._v("A container networking overview"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.dasblinkenlichten.com/docker-networking-101-user-defined-networks/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Docker networking 101 - User defined networks"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.dasblinkenlichten.com/understanding-cni-container-networking-interface/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Understanding CNI (Container Networking Interface)"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.dasblinkenlichten.com/using-cni-docker/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Using CNI with Docker"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("Docker 有下面几种网络解决方案: "),a("a",{attrs:{href:"https://www.projectcalico.org/getting-started/docker/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Calico"),a("OutboundLink")],1),t._v(" , "),a("a",{attrs:{href:"https://github.com/coreos/flannel/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Flannel"),a("OutboundLink")],1),t._v(" 和 "),a("a",{attrs:{href:"https://github.com/weaveworks/weave",target:"_blank",rel:"noopener noreferrer"}},[t._v("Weave"),a("OutboundLink")],1),t._v(", 你需要学习一下. 另外, 还需要学习一下 "),a("a",{attrs:{href:"https://github.com/nicolaka/netshoot",target:"_blank",rel:"noopener noreferrer"}},[t._v("netshoot"),a("OutboundLink")],1),t._v(", 这是一个很不错的用来诊断 Docker 网络问题的工具集.")]),t._v(" "),a("p",[t._v("关于这几个容器网络解决方案的性能对比, 你可以看一下下面这几篇文章或报告.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://chunqi.li/2015/11/15/Battlefield-Calico-Flannel-Weave-and-Docker-Overlay-Network/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Battlefield: Calico, Flannel, Weave and Docker Overlay Network"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://machinezone.github.io/research/networking-solutions-for-kubernetes/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Comparison of Networking Solutions for Kubernetes"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.delaat.net/rp/2015-2016/p50/report.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Docker Overlay Networks: Performance analysis in high-latency enviroments"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("如果你对 Docker 的性能有什么问题的话, 你可以看一下下面这些文章.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://domino.research.ibm.com/library/cyberdig.nsf/papers/0929052195DD819C85257D2300681E7B/%3Czeuschar%3EMY_ZUES_CHAR%3C/zeuschar%3EFile/rc25482.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("IBM Research Report: An Updated Performance Comparison of Virtual Machines and Linux Containers"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://paper.ijcsns.org/07_book/201703/20170327.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("An Introduction to Docker and Analysis of its Performance"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("下面是一些和存储相关的文章.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://cloud-mechanic.blogspot.de/2014/10/storage-concepts-in-docker-network-and.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Storage Concepts in Docker: Network and Cloud Storage"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://cloud-mechanic.blogspot.de/2014/10/storage-concepts-in-docker-persistent.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Storage Concepts in Docker: Persistent Storage"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://cloud-mechanic.blogspot.de/2014/10/storage-concepts-in-docker.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Storage Concepts in Docker: Shared Storage and the VOLUME directive"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("然后是跟运维相关的文章.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://logz.io/learn/docker-monitoring-elk-stack/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Docker Monitoring with the ELK Stack: A Step-by-Step Guide"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("最后推荐看看 "),a("a",{attrs:{href:"http://www.nkode.io/2014/08/24/valuable-docker-links.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Valuable Docker Links"),a("OutboundLink")],1),t._v(" , 其中收集并罗列了一系列非常不错的 Docker 文章.")]),t._v(" "),a("p",[a("strong",[t._v("最佳实践")])]),t._v(" "),a("p",[t._v("下面分享一些与 Docker 相关的最佳实践.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://docs.docker.com/develop/develop-images/dockerfile_best-practices/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Best Practices for Dockerfile"),a("OutboundLink")],1),t._v(" , Docker 官方文档里的 Dockerfile 的最佳实践.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/FuriKuri/docker-best-practices",target:"_blank",rel:"noopener noreferrer"}},[t._v("Docker Best Practices"),a("OutboundLink")],1),t._v(", 这里收集汇总了存在于各个地方的使用 Docker 的建议和实践.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://docs.projectatomic.io/container-best-practices/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Container Best Practices"),a("OutboundLink")],1),t._v(" , 来自 Atomic 项目, 是一个介绍容器化应用程序的架构, 创建和管理的协作型文档项目.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://hokstad.com/docker/patterns",target:"_blank",rel:"noopener noreferrer"}},[t._v("Eight Docker Development Patterns"),a("OutboundLink")],1),t._v(" , 八个 Docker 的开发模式: 共享基础容器, 共享同一个卷的多个开发容器, 开发工具专用容器, 测试环境容器, 编译构建容器, 防手误的安装容器, 默认服务容器, 胶黏容器.")])]),t._v(" "),a("h5",{attrs:{id:"_2-kubernetes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-kubernetes"}},[t._v("#")]),t._v(" 2.Kubernetes")]),t._v(" "),a("p",[a("strong",[t._v("Kubernetes 是 Google 开源的容器集群管理系统")]),t._v(", 是 Google 多年大规模容器管理技术 Borg 的开源版本, 也是 CNCF 最重要的项目之一, 主要功能包括:")]),t._v(" "),a("ul",[a("li",[t._v("基于容器的应用部署, 维护和滚动升级;")]),t._v(" "),a("li",[t._v("负载均衡和服务发现;")]),t._v(" "),a("li",[t._v("跨机器和跨地区的集群调度;")]),t._v(" "),a("li",[t._v("自动伸缩;")]),t._v(" "),a("li",[t._v("无状态服务和有状态服务;")]),t._v(" "),a("li",[t._v("广泛的 Volume 支持;")]),t._v(" "),a("li",[t._v("插件机制保证扩展性.")])]),t._v(" "),a("p",[t._v("Kubernetes 发展非常迅速, 已经成为"),a("strong",[t._v("容器编排领域的领导者")]),t._v(".")]),t._v(" "),a("p",[t._v("首先, 我推荐你阅读 Kubernetes 前世今生的一篇论文.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://static.googleusercontent.com/media/research.google.com/zh-CN//pubs/archive/44843.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Borg, Omega, and Kubernetes"),a("OutboundLink")],1),t._v(" , 看看 Google 这十几年来从这三个容器管理系统中得到的经验教训.")])]),t._v(" "),a("p",[t._v("学习 Kubernetes, 有两个免费的开源电子书.")]),t._v(" "),a("ul",[a("li",[t._v("《"),a("a",{attrs:{href:"https://jimmysong.io/kubernetes-handbook/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Kubernetes Handbook"),a("OutboundLink")],1),t._v("》, 这本书记录了作者从零开始学习和使用 Kubernetes 的心路历程, 着重于经验分享和总结, 同时也会有相关的概念解析. 希望能够帮助你少踩坑, 少走弯路, 还会指引你关注 kubernetes 生态周边, 如微服务构建, DevOps, 大数据应用, Service Mesh, Cloud Native 等领域.")]),t._v(" "),a("li",[t._v("《"),a("a",{attrs:{href:"https://kubernetes.feisky.xyz/zh/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Kubernetes 指南"),a("OutboundLink")],1),t._v("》, 这本书旨在整理平时在开发和使用 Kubernetes 时的参考指南和实践总结, 形成一个系统化的参考指南以方便查阅.")])]),t._v(" "),a("p",[t._v("这两本电子书都不错, 前者更像是一本学习教程, 而且面明显广一些, 还包括 Cloud Natvie, Service Mesh 以及微服务相关的东西. 而后者聚焦于 Kubernetes 本身, 更像一本参考书.")]),t._v(" "),a("p",[t._v("**另外, 我这两天也读完了《Kubernetes in Action》一书, 感觉写的非常好, 一本很完美的教科书, 抽丝剥茧, 图文并茂. 如果你只想读一本有关 Kubernetes 的书来学习 Kubernetes, 那么我推荐你就选这本. **")]),t._v(" "),a("p",[t._v("但是也别忘了 Kubernetes 的官方网站: "),a("a",{attrs:{href:"https://kubernetes.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Kubernetes.io"),a("OutboundLink")],1),t._v(", 上面不但有"),a("a",{attrs:{href:"https://kubernetes.io/docs/home/",target:"_blank",rel:"noopener noreferrer"}},[t._v("全面的文档"),a("OutboundLink")],1),t._v(" , 也包括一个很不错的 "),a("a",{attrs:{href:"https://kubernetes.io/docs/tutorials/kubernetes-basics/",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方教程"),a("OutboundLink")],1),t._v(" .")]),t._v(" "),a("p",[t._v("此外, 还有一些交互式教程, 帮助你理解掌握, 以及一些很不错的文章推荐你阅读.")]),t._v(" "),a("p",[a("strong",[t._v("一些交互式教程")])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.katacoda.com/courses/kubernetes",target:"_blank",rel:"noopener noreferrer"}},[t._v("Katacoda"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://kubernetesbootcamp.github.io/kubernetes-bootcamp/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Kubernetes Bootcamp"),a("OutboundLink")],1)])]),t._v(" "),a("p",[a("strong",[t._v("一些文章")])]),t._v(" "),a("p",[t._v("这里还有一些不错的文档, 你应该去读一下.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://opsnotice.xyz/kubernetes-tips-tricks/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Kubernetes tips & tricks"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://theremotelab.com/blog/achieving-ci-cd-with-k8s/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Achieving CI/CD with Kubernetes"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://dzone.com/articles/how-to-setup-scalable-jenkins-on-top-of-a-kubernet",target:"_blank",rel:"noopener noreferrer"}},[t._v("How to Set Up Scalable Jenkins on Top of a Kubernetes Cluster"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("10 Most Common Reasons Kubernetes Deployments Fail "),a("a",{attrs:{href:"https://kukulinski.com/10-most-common-reasons-kubernetes-deployments-fail-part-1/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Part I"),a("OutboundLink")],1),t._v(" 和 "),a("a",{attrs:{href:"https://kukulinski.com/10-most-common-reasons-kubernetes-deployments-fail-part-2/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Part II"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://sysdig.com/blog/monitoring-kubernetes-with-sysdig-cloud/",target:"_blank",rel:"noopener noreferrer"}},[t._v("How to Monitor Kubernetes"),a("OutboundLink")],1),t._v(" , 一共有 4 个篇章")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.dasblinkenlichten.com/logging-in-kubernetes-with-fluentd-and-elasticsearch/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Logging in Kubernetes with Fluentd and Elasticsearch"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://dzone.com/articles/kubernetes-monitoring-best-practices-methods-and-e",target:"_blank",rel:"noopener noreferrer"}},[t._v("Kubernetes Monitoring: Best Practices, Methods, and Existing Solutions"),a("OutboundLink")],1)])]),t._v(" "),a("p",[a("strong",[t._v("网络相关的文章")])]),t._v(" "),a("p",[t._v("要学习 Kubernetes, 你只需要读一下, 下面这个 Kubernetes 101 系列的文章.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://www.dasblinkenlichten.com/kubernetes-101-networking/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Kubernetes 101 - Networking"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.dasblinkenlichten.com/kubernetes-networking-101-pods/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Kubernetes networking 101 - Pods"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.dasblinkenlichten.com/kubernetes-networking-101-services/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Kubernetes networking 101 - Services"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.dasblinkenlichten.com/kubernetes-networking-101-basic-external-access-into-the-cluster/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Kubernetes networking 101 - (Basic) External access into the cluster"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.dasblinkenlichten.com/kubernetes-networking-101-ingress-resources/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Kubernetes Networking 101 - Ingress resources"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.dasblinkenlichten.com/getting-started-with-calico-on-kubernetes/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Getting started with Calico on Kubernetes"),a("OutboundLink")],1)])]),t._v(" "),a("p",[a("strong",[t._v("CI/CD 相关的文章")])]),t._v(" "),a("ul",[a("li",[t._v("Automated Image Builds with Jenkins, Packer, and Kubernetes")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://iocanel.blogspot.in/2015/09/jenkins-setups-for-kubernetes-and.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Jenkins setups for Kubernetes and Docker Workflow"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/GoogleCloudPlatform/continuous-deployment-on-kubernetes",target:"_blank",rel:"noopener noreferrer"}},[t._v("Lab: Build a Continuous Deployment Pipeline with Jenkins and Kubernetes"),a("OutboundLink")],1)])]),t._v(" "),a("p",[a("strong",[t._v("最佳实践")])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://medium.com/@sachin.arote1/kubernetes-best-practices-9b1435a4cb53",target:"_blank",rel:"noopener noreferrer"}},[t._v("Kubernetes Best Practices"),a("OutboundLink")],1),t._v(" by "),a("a",{attrs:{href:"https://medium.com/@sachin.arote1?source=post_header_lockup",target:"_blank",rel:"noopener noreferrer"}},[t._v("Sachin Arote"),a("OutboundLink")],1),t._v(" , AWS 工程师总结的最佳实践.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://speakerdeck.com/thesandlord/kubernetes-best-practices",target:"_blank",rel:"noopener noreferrer"}},[t._v("Kubernetes Best Practices"),a("OutboundLink")],1),t._v(" by "),a("a",{attrs:{href:"https://github.com/thesandlord",target:"_blank",rel:"noopener noreferrer"}},[t._v("Sandeep Dinesh"),a("OutboundLink")],1),t._v(" , Google 云平台工程师总结的最佳实践.")])]),t._v(" "),a("p",[a("strong",[t._v("Docker 和 Kubernetes 资源汇总")])]),t._v(" "),a("p",[t._v("下面是 GitHub 上和 Docker & Kubernetes 相关的 Awesome 系列.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/veggiemonk/awesome-docker",target:"_blank",rel:"noopener noreferrer"}},[t._v("Awesome Docker"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/ramitsurana/awesome-kubernetes",target:"_blank",rel:"noopener noreferrer"}},[t._v("Awesome Kubernetes"),a("OutboundLink")],1),t._v(".")])]),t._v(" "),a("p",[t._v("虽然上面的这些系列非常全的罗列了很多资源, 但是我觉得很不系统. 对于系统的说明 Docker 和 Kubernetes 生态圈, 我非常推荐大家看一下 The New Stack 为 Kubernetes 出的一系列的电子书或报告.")]),t._v(" "),a("ul",[a("li",[a("p",[a("a",{attrs:{href:"http://thenewstack.io/ebookseries/",target:"_blank",rel:"noopener noreferrer"}},[t._v("The New Stack eBook Series"),a("OutboundLink")],1),t._v(" , 非常完整和详实的 Docker 和 Kubernetes 生态圈的所有东西.")]),t._v(" "),a("ul",[a("li",[t._v("Book 01: "),a("a",{attrs:{href:"https://thenewstack.io/ebooks/docker-and-containers/the-docker-container-ecosystem/",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Docker Container Ecosystem"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("Book 02: "),a("a",{attrs:{href:"https://thenewstack.io/ebooks/docker-and-containers/applications-microservices-docker-containers/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Applications & Microservices with Docker & Containers"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("Book 03: "),a("a",{attrs:{href:"https://thenewstack.io/ebooks/docker-and-containers/automation-orchestration-docker-containers/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Automation & Orchestration with Docker & Containers"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("Book 04: "),a("a",{attrs:{href:"https://thenewstack.io/ebooks/docker-and-containers/networking-security-storage-docker-containers/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Network, Security & Storage with Docker & Containers"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("Book 05: "),a("a",{attrs:{href:"https://thenewstack.io/ebooks/docker-and-containers/monitoring-management-docker-containers/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Monitoring & Management with Docker & Containers"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("Book 06: "),a("a",{attrs:{href:"https://thenewstack.io/ebooks/use-cases/use-cases-for-kubernetes/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Use Cases for Kubernetes"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("Book 07: "),a("a",{attrs:{href:"https://thenewstack.io/ebooks/kubernetes/state-of-kubernetes-ecosystem/",target:"_blank",rel:"noopener noreferrer"}},[t._v("State of the Kubernetes Ecosystem"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("Book 08: "),a("a",{attrs:{href:"https://thenewstack.io/ebooks/kubernetes/kubernetes-deployment-and-security-patterns/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Kubernetes Deployment & Security Patterns"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("Book 09: "),a("a",{attrs:{href:"https://thenewstack.io/ebooks/kubernetes/ci-cd-with-kubernetes/",target:"_blank",rel:"noopener noreferrer"}},[t._v("CI/CD with Kubernetes"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("Book 10: "),a("a",{attrs:{href:"https://thenewstack.io/ebooks/kubernetes/kubernetes-solutions-directory/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Kubernetes solutions Directory"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("Book 11: "),a("a",{attrs:{href:"https://thenewstack.io/ebooks/microservices/cloud-native-microservices-2018/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Guid to Cloud-Native Microservices"),a("OutboundLink")],1)])])])]),t._v(" "),a("h5",{attrs:{id:"_3-小结-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-小结-13"}},[t._v("#")]),t._v(" 3.小结")]),t._v(" "),a("p",[t._v("总结一下今天的内容. Docker 和 Kubernetes 已经成为分布式架构和自动化运维方面的不可或缺的两大基本构成, 是你必需要学习的. 虽然它们的玩法跟传统运维不一样, 但技术方面并不算复杂, 只要你花上一点时间, 一定会学好的.")]),t._v(" "),a("p",[t._v("在这篇文章中, 我推荐了 Docker 和 Kubernetes 基础技术方面的学习资料, 并给出了存储, 运维, 网络, CI/CD 等多方面的资料, 同时列出了与之相关的最佳实践. 相信认真学习和消化这些知识, 你一定可以掌握 Docker 和 Kubernetes 两大利器.")]),t._v(" "),a("h4",{attrs:{id:"程序员练级攻略-机器学习和人工智能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#程序员练级攻略-机器学习和人工智能"}},[t._v("#")]),t._v(" 程序员练级攻略:机器学习和人工智能")]),t._v(" "),a("p",[t._v("我之前写过一篇机器学习的入门文章, 因为我也是在入门和在学习的人, 所以那篇文章和这篇机器学习和人工智能方向的文章可能都会有点太肤浅. 如果你有更好的学习方式或资料, 欢迎补充.")]),t._v(" "),a("h5",{attrs:{id:"_1-基本原理简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-基本原理简介"}},[t._v("#")]),t._v(" 1.基本原理简介")]),t._v(" "),a("p",[t._v("先来介绍一下机器学习的基本原理.")]),t._v(" "),a("p",[t._v("机器学习主要有两种方式, 一种是监督式学习(Supervised Learning), 另一种是非监督式学习(Unsupervised Learning). 下面简单地说一下这两者的不同.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("监督式学习(Supervised Learning)")]),t._v(" . 所谓监督式学习, 也就是说需要提供一组学习样本, 包括相关的特征数据和相应的标签. 程序可以通过这组样本来学习相关的规律或是模式, 然后通过得到的规律或模式来判断没有被打过标签的数据是什么样的数据. 举个例子, 假设需要识别一些手写的数字, 我们要找到尽可能多的手写体数字的图像样本, 然后人工或是通过某种算法来明确地标注上什么是这些手写体的图片, 谁是 1, 谁是 2, 谁是 3... 这组数据叫样本数据, 又叫训练数据(training data). 然后通过机器学习的算法, 找到每个数字在不同手写体下的特征, 找到规律和模式. 通过得到的规律或模式来识别那些没有被打过标签的手写数据, 以此完成识别手写体数字的目的.")]),t._v(" "),a("li",[a("strong",[t._v("非监督式学习(Unsupervised Learning)")]),t._v(' . 对于非监督式学习, 也就是说, 数据是没有被标注过的, 所以相关的机器学习算法需要找到这些数据中的共性. 因为大量的数据是没被被标识过的, 所以这种学习方式可以让大量的未标识的数据能够更有价值. 而且, 非监督式学习, 可以为我们找到人类很难发现的数据里的规律或模型, 所以也有人称这种学习为"特征点学习", 其可以让我们自动地为数据进行分类, 并找到分类的模型. 一般来说, 非监督式学习会应用在一些交易型的数据中. 比如, 你有一堆堆的用户购买数据, 但是对于人类来说, 我们很难找到用户属性和购买商品类型之间的关系. 所以, 非监督式学习算法可以帮助我们找到它们之间的关系. 比如, 一个在某年龄段的女性购买了某种肥皂, 有可能说明这个女性在怀孕期, 或是某人购买儿童用品, 有可能说明这个人的关系链中有孩子, 等等. 于是, 这些信息会被用作一些所谓的精准市场营销活动, 从而可以增加商品销量.')])]),t._v(" "),a("p",[t._v("这么来说吧, "),a("strong",[t._v("监督式学习是在被告诉过了正确的答案后的学习, 而非监督式学习是在没有被告诉正确答案时的学习")]),t._v(". 所以, 非监督式学习是在大量的非常乱的数据中找寻一些潜在的关系, 这个成本也比较高. 非监督式学习经常被用来检测一些不正常的事情发生, 比如信用卡的诈骗或是盗刷. 也被用在推荐系统, 比如买了这个商品的人又买了别的什么商品, 或是如果某个人喜欢某篇文章, 某个音乐, 某个餐馆, 那么他可能会喜欢某个车, 某个明星或某个地方.")]),t._v(" "),a("p",[t._v('在监督式学习算法下, 可以用一组"狗"的照片来确定某个照片中的物体是不是狗. 而在非监督式学习算法下, 可以通过一个照片来找到其中有与其相似的事物的照片. 这两种学习方式都有些有用的场景.')]),t._v(" "),a("p",[t._v("关于机器学习, 你可以读一读 "),a("a",{attrs:{href:"https://medium.com/@ageitgey/machine-learning-is-fun-80ea3ec3c471",target:"_blank",rel:"noopener noreferrer"}},[t._v("Machine Learning is Fun!"),a("OutboundLink")],1),t._v(" , 这篇文章("),a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/24339995",target:"_blank",rel:"noopener noreferrer"}},[t._v("中文翻译版"),a("OutboundLink")],1),t._v(")恐怕是全世界最简单的入门资料了.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://becominghuman.ai/data-science-simplified-principles-and-process-b06304d63308",target:"_blank",rel:"noopener noreferrer"}},[t._v("Data Science Simplified Part 1: Principles and Process"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://towardsdatascience.com/data-science-simplified-key-concepts-of-statistical-learning-45648049709e",target:"_blank",rel:"noopener noreferrer"}},[t._v("Data Science Simplified Part 2: Key Concepts of Statistical Learning"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://towardsdatascience.com/data-science-simplified-hypothesis-testing-56e180ef2f71",target:"_blank",rel:"noopener noreferrer"}},[t._v("Data Science Simplified Part 3: Hypothesis Testing"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://towardsdatascience.com/data-science-simplified-simple-linear-regression-models-3a97811a6a3d",target:"_blank",rel:"noopener noreferrer"}},[t._v("Data Science Simplified Part 4: Simple Linear Regression Models"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://towardsdatascience.com/data-science-simplified-part-5-multivariate-regression-models-7684b0489015",target:"_blank",rel:"noopener noreferrer"}},[t._v("Data Science Simplified Part 5: Multivariate Regression Models"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://towardsdatascience.com/data-science-simplified-part-6-model-selection-methods-2511cbdf7cb0",target:"_blank",rel:"noopener noreferrer"}},[t._v("Data Science Simplified Part 6: Model Selection Methods"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://towardsdatascience.com/data-science-simplified-part-7-log-log-regression-models-499ecd1495f0",target:"_blank",rel:"noopener noreferrer"}},[t._v("Data Science Simplified Part 7: Log-Log Regression Models"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://towardsdatascience.com/data-science-simplified-part-8-qualitative-variables-in-regression-models-d1817d56245c",target:"_blank",rel:"noopener noreferrer"}},[t._v("Data Science Simplified Part 8: Qualitative Variables in Regression Models"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://towardsdatascience.com/data-science-simplified-part-9-interactions-and-limitations-of-regression-models-4702dff03820",target:"_blank",rel:"noopener noreferrer"}},[t._v("Data Science Simplified Part 9: Interactions and Limitations of Regression Models"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://towardsdatascience.com/data-science-simplified-part-10-an-introduction-to-classification-models-82490f6c171f",target:"_blank",rel:"noopener noreferrer"}},[t._v("Data Science Simplified Part 10: An Introduction to Classification Models"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://towardsdatascience.com/data-science-simplified-part-11-logistic-regression-5ae8d994bf0e",target:"_blank",rel:"noopener noreferrer"}},[t._v("Data Science Simplified Part 11: Logistic Regression"),a("OutboundLink")],1)])]),t._v(" "),a("h5",{attrs:{id:"_2-相关课程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-相关课程"}},[t._v("#")]),t._v(" 2.相关课程")]),t._v(" "),a("p",[t._v("接下来需要比较专业地学习一下机器学习了.")]),t._v(" "),a("p",[t._v("在学习机器学习之前, 需要学习数据分析, 所以得先学一些大数据相关的东西, 也就是 Data Science 相关的内容. 下面是两个不错的和数据科学相关的教程以及一个资源列表.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://data8.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("UC Berkeley’s Data 8: The Foundations of Data Science"),a("OutboundLink")],1),t._v(" 和电子书 "),a("a",{attrs:{href:"https://www.inferentialthinking.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Computational and Inferential Thinking"),a("OutboundLink")],1),t._v(" 会讲述数据科学方面非常关键的概念, 会教你在数据中找到数据的关联, 预测和相关的推断.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/nborwankar/LearnDataScience",target:"_blank",rel:"noopener noreferrer"}},[t._v("Learn Data Science"),a("OutboundLink")],1),t._v(" , 这是 GitHub 上的一本电子书, 主要是一些数据挖掘的算法, 比如线性回归, 逻辑回归, 随机森林, K-Means 聚类的数据分析. 然后, donnemartin/data-science-ipython-notebooks 这个代码仓库中用 TensorFlow, scikit-learn, Pandas, NumPy, Spark 等把这些经典的例子实现了个遍.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.datascienceweekly.org/data-science-resources/the-big-list-of-data-science-resources",target:"_blank",rel:"noopener noreferrer"}},[t._v("Data Science Resources List"),a("OutboundLink")],1),t._v(" , 这个网站上有一个非常长的和数据科学相关的资源列表, 你可以从中得到很多你想要的东西.")])]),t._v(" "),a("p",[t._v("之后, 有下面几门不错的在线机器学习的课程供你入门, 也是非常不错.")]),t._v(" "),a("ul",[a("li",[t._v("吴恩达教授(Andrew Ng)在 "),a("a",{attrs:{href:"https://www.coursera.org/learn/machine-learning",target:"_blank",rel:"noopener noreferrer"}},[t._v("Coursera 上的免费机器学习课程"),a("OutboundLink")],1),t._v(" 非常棒. 我强烈建议从此入手. 对于任何拥有计算机或科学学位的人, 或是还能记住一点点数学知识的人来说, 都应该非常容易入门. 这个斯坦福大学的课程请尽量拿满分. 可以在 "),a("a",{attrs:{href:"http://open.163.com/special/opencourse/machinelearning.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("网易公开课"),a("OutboundLink")],1),t._v(" 中找到这一课程. 除此之外, 吴恩达教授还有一组新的和深度学习相关的课程, 现在可以在网易公开课上免费学习——"),a("a",{attrs:{href:"https://mooc.study.163.com/smartSpec/detail/1001319001.htm",target:"_blank",rel:"noopener noreferrer"}},[t._v("Deep Learning Specialization"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.udacity.com/course/deep-learning--ud730",target:"_blank",rel:"noopener noreferrer"}},[t._v("Deep Learning by Google"),a("OutboundLink")],1),t._v(" , Google 的一个关于深度学习的在线免费课程, 其支持中英文. 这门课会教授你如何训练和优化基本神经网络, 卷积神经网络和长短期记忆网络. 你将通过项目和任务接触完整的机器学习系统 TensorFlow.")]),t._v(" "),a("li",[t._v("卡内基梅隆大学汤姆·米切尔(Tom Mitchell)的机器学习 "),a("a",{attrs:{href:"http://www.cs.cmu.edu/%7Etom/10701_sp11/lectures.shtml",target:"_blank",rel:"noopener noreferrer"}},[t._v("英文原版视频与课件 PDF"),a("OutboundLink")],1),t._v(" .")]),t._v(" "),a("li",[t._v("2013 年加利福尼亚理工学院亚瑟·阿布 - 穆斯塔法(Yaser Abu-Mostafa)的 Learning from Data "),a("a",{attrs:{href:"http://work.caltech.edu/lectures.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("课程视频及课件 PDF"),a("OutboundLink")],1),t._v(", 内容更适合进阶.")]),t._v(" "),a("li",[t._v("关于神经网络方面, YouTube 上有一个非常火的课程视频, 由宾夕法尼亚大学的雨果·拉罗歇尔(Hugo Larochelle)出品的教学课程 - "),a("a",{attrs:{href:"https://www.youtube.com/playlist?list=PL6Xpj9I5qXYEcOhn7TqghAJ6NAPrNmUBH",target:"_blank",rel:"noopener noreferrer"}},[t._v("Neural networks class - Université de Sherbrooke"),a("OutboundLink")],1),t._v(" .")])]),t._v(" "),a("p",[t._v("除此之外, 还有很多的在线大学课程可以供你学习. 比如:")]),t._v(" "),a("ul",[a("li",[t._v("斯坦福大学的《"),a("a",{attrs:{href:"https://lagunita.stanford.edu/courses/HumanitiesandScience/StatLearning/Winter2015/about",target:"_blank",rel:"noopener noreferrer"}},[t._v("统计学学习"),a("OutboundLink")],1),t._v("》, 《"),a("a",{attrs:{href:"http://cs229.stanford.edu/",target:"_blank",rel:"noopener noreferrer"}},[t._v("机器学习"),a("OutboundLink")],1),t._v("》, 《"),a("a",{attrs:{href:"http://cs231n.stanford.edu/",target:"_blank",rel:"noopener noreferrer"}},[t._v("卷积神经网络"),a("OutboundLink")],1),t._v("》, 《"),a("a",{attrs:{href:"http://cs224d.stanford.edu/",target:"_blank",rel:"noopener noreferrer"}},[t._v("深度学习之自然语言处理"),a("OutboundLink")],1),t._v("》等.")]),t._v(" "),a("li",[t._v("麻省理工大学的《"),a("a",{attrs:{href:"http://ocw.mit.edu/courses/brain-and-cognitive-sciences/9-641j-introduction-to-neural-networks-spring-2005/index.htm",target:"_blank",rel:"noopener noreferrer"}},[t._v("神经网络介绍"),a("OutboundLink")],1),t._v(" 》, 《"),a("a",{attrs:{href:"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-867-machine-learning-fall-2006/",target:"_blank",rel:"noopener noreferrer"}},[t._v("机器学习"),a("OutboundLink")],1),t._v("》, 《"),a("a",{attrs:{href:"http://ocw.mit.edu/courses/sloan-school-of-management/15-097-prediction-machine-learning-and-statistics-spring-2012/index.htm",target:"_blank",rel:"noopener noreferrer"}},[t._v("预测"),a("OutboundLink")],1),t._v("》等.")])]),t._v(" "),a("p",[t._v("更多的列表, 请参看——"),a("a",{attrs:{href:"https://github.com/RatulGhosh/awesome-machine-learning",target:"_blank",rel:"noopener noreferrer"}},[t._v("Awesome Machine Learning Courses"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("h5",{attrs:{id:"_3-相关图书"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-相关图书"}},[t._v("#")]),t._v(" 3.相关图书")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("《"),a("a",{attrs:{href:"https://book.douban.com/subject/2061116/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Pattern Recognition and Machine Learning"),a("OutboundLink")],1),t._v("》, 这本书是机器学习领域的圣经之作. 该书也是众多高校机器学习研究生课程的教科书, Google 上有"),a("a",{attrs:{href:"http://users.isr.ist.utl.pt/~wurmd/Livros/school/Bishop%20-%20Pattern%20Recognition%20And%20Machine%20Learning%20-%20Springer%20%202006.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("PDF 版的下载"),a("OutboundLink")],1),t._v(". 这本书很经典, 但并不适合入门来看. GitHub 上有这本中的 "),a("a",{attrs:{href:"https://github.com/PRML/PRMLT",target:"_blank",rel:"noopener noreferrer"}},[t._v("Matlab 实现"),a("OutboundLink")],1),t._v(".")])]),t._v(" "),a("li",[a("p",[t._v("下面这两本电子书也是比较经典的, 其中讲了很多机器学习的知识, 可以当做手册或字典.")]),t._v(" "),a("ul",[a("li",[t._v("《"),a("a",{attrs:{href:"https://www.cs.huji.ac.il/~shais/UnderstandingMachineLearning/understanding-machine-learning-theory-algorithms.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Understanding Machine Learning: From Theory to Algorithms"),a("OutboundLink")],1),t._v("》.")]),t._v(" "),a("li",[t._v("《"),a("a",{attrs:{href:"https://web.stanford.edu/~hastie/Papers/ESLII.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Elements of Statistical Learning - Second Edition"),a("OutboundLink")],1),t._v("》.")])])]),t._v(" "),a("li",[a("p",[t._v("《"),a("a",{attrs:{href:"https://book.douban.com/subject/27087503/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Deep Learning: Adaptive Computation and Machine Learning series"),a("OutboundLink")],1),t._v("》 中文翻译为《深度学习》. 这本书由全球知名的三位专家伊恩·古德费洛(Ian Goodfellow), 友华·本吉奥(Yoshua Bengio)和亚伦·考维尔(Aaron Courville)撰写, 是深度学习领域奠基性的经典教材.")]),t._v(" "),a("p",[t._v('全书内容包括 3 部分: 第 1 部分介绍基本的数学工具和机器学习的概念, 它们是深度学习的预备知识; 第 2 部分系统深入地讲解现今已成熟的深度学习方法和技术; 第 3 部分讨论某些具有前瞻性的方向和想法, 它们被公认为是深度学习未来的研究重点. 这本书的官网为 "'),a("a",{attrs:{href:"http://www.deeplearningbook.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("deeplearningbook.org"),a("OutboundLink")],1),t._v('", 在 GitHub 上也有中文翻译 - 《'),a("a",{attrs:{href:"https://github.com/exacity/deeplearningbook-chinese",target:"_blank",rel:"noopener noreferrer"}},[t._v("Deep Learning 中文翻译"),a("OutboundLink")],1),t._v("》.")])]),t._v(" "),a("li",[a("p",[t._v("《"),a("a",{attrs:{href:"http://neuralnetworksanddeeplearning.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Neural Networks and Deep Learning"),a("OutboundLink")],1),t._v("》("),a("a",{attrs:{href:"https://tigerneil.gitbooks.io/neural-networks-and-deep-learning-zh/content/",target:"_blank",rel:"noopener noreferrer"}},[t._v("中文翻译版"),a("OutboundLink")],1),t._v("), 这是一本非常不错的神经网络的入门书, 在"),a("a",{attrs:{href:"https://book.douban.com/subject/26727997/",target:"_blank",rel:"noopener noreferrer"}},[t._v("豆瓣上评分 9.5 分"),a("OutboundLink")],1),t._v(", 从理论讲到了代码. 虽然有很多数学公式, 但是有代码相助, 就不难理解了. 其中讲了很多如激活函数, 代价函数, 随机梯度下降, 反向传播, 过度拟合和规范化, 权重初始化, 超参数优化, 卷积网络的局部感受野, 混合层, 特征映射的东西.")])]),t._v(" "),a("li",[a("p",[t._v("《"),a("a",{attrs:{href:"https://book.douban.com/subject/26279609/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Introduction to Machine Learning with Python"),a("OutboundLink")],1),t._v("》, 算是本不错的入门书, 也是本比较易读的英文书. 其是以 Scikit-Learn 框架来讲述的. 如果你用过 Scikit 这个框架, 那么你学这本书还是很不错的.")])]),t._v(" "),a("li",[a("p",[t._v("《"),a("a",{attrs:{href:"https://book.douban.com/subject/26840215/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Hands-On Machine Learning with Scikit-Learn and TensorFlow"),a("OutboundLink")],1),t._v(" 》, 这是一门以 TensorFlow 为工具的入门书, 其用丰富的例子从实站的角度来让你学习. 这本书对于无基础的人也是适合的, 对于小白来说虽然略难但是受益匪浅.")])])]),t._v(" "),a("h5",{attrs:{id:"_4-相关文章"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-相关文章"}},[t._v("#")]),t._v(" 4.相关文章")]),t._v(" "),a("p",[t._v("除了上述的那些课程和图书外, 下面这些文章也很不错.")]),t._v(" "),a("ul",[a("li",[t._v("YouTube 上的 Google Developers 的 "),a("a",{attrs:{href:"https://www.youtube.com/playlist?list=PLOU2XLYxmsIIuiBfYad6rFYQU_jL2ryal",target:"_blank",rel:"noopener noreferrer"}},[t._v("Machine Learning Recipes with Josh Gordon"),a("OutboundLink")],1),t._v(" , 这 9 集视频, 每集不到 10 分钟, 从 Hello World 讲到如何使用 TensorFlow, 非常值得一看.")]),t._v(" "),a("li",[t._v("还有 "),a("a",{attrs:{href:"https://pythonprogramming.net/machine-learning-tutorial-python-introduction/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Practical Machine Learning Tutorial with Python Introduction"),a("OutboundLink")],1),t._v(" 上面一系列的用 Python 带着你玩 Machine Learning 的教程.")]),t._v(" "),a("li",[t._v("Medium 上的 "),a("a",{attrs:{href:"https://medium.com/machine-learning-101",target:"_blank",rel:"noopener noreferrer"}},[t._v("Machine Learning - 101"),a("OutboundLink")],1),t._v(" , 讲述了好些我们上面提到过的经典算法.")]),t._v(" "),a("li",[t._v("Medium 上的 "),a("a",{attrs:{href:"https://medium.com/machine-learning-for-humans",target:"_blank",rel:"noopener noreferrer"}},[t._v("Marchine Learning for Humans"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://machinelearningmastery.com/blog/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Dr. Jason Brownlee 的博客"),a("OutboundLink")],1),t._v(' , 也非常值得一读, 其中好多的 "How-To", 会让你有很多的收获.')]),t._v(" "),a("li",[a("a",{attrs:{href:"http://martin.zinkevich.org/rules_of_ml/rules_of_ml.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Rules of Machine Learning: Best Practices for ML Engineering"),a("OutboundLink")],1),t._v(" , 一些机器学习相关的最佳实践.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://iamtrask.github.io",target:"_blank",rel:"noopener noreferrer"}},[t._v("i am trask"),a("OutboundLink")],1),t._v(" , 也是一个很不错的博客.")]),t._v(" "),a("li",[t._v("关于 Deep Learning 中的神经网络, YouTube 上有介绍视频 "),a("a",{attrs:{href:"https://www.youtube.com/playlist?list=PLZHQObOWTQDNU6R1_67000Dx_ZCJB-3pi",target:"_blank",rel:"noopener noreferrer"}},[t._v("Neural Networks"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[t._v("麻省理工学院的电子书 "),a("a",{attrs:{href:"http://www.deeplearningbook.org",target:"_blank",rel:"noopener noreferrer"}},[t._v("Deep Learning"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[t._v("用 Python 做自然语言处理"),a("a",{attrs:{href:"http://www.nltk.org/book/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Natural Language Processing with Python"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[t._v("最后一个是 Machine Learning 和 Deep Learning 的相关教程列表, "),a("a",{attrs:{href:"https://github.com/ujjwalkarn/Machine-Learning-Tutorials",target:"_blank",rel:"noopener noreferrer"}},[t._v("Machine Learning & Deep Learning Tutorials"),a("OutboundLink")],1),t._v(".")])]),t._v(" "),a("p",[t._v("下面是一些和神经网络相关的不错的文章.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://karpathy.github.io/2015/05/21/rnn-effectiveness/",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Unreasonable Effectiveness of Recurrent Neural Networks"),a("OutboundLink")],1),t._v(" , 这是一篇必读的文章 , 告诉你为什么要学 RNN, 以及展示了最简单的 NLP 形式.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://colah.github.io/posts/2014-03-NN-Manifolds-Topology/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Neural Networks, Manifolds, and Topology"),a("OutboundLink")],1),t._v(" , 这篇文章可以帮助你理解神经网络的一些概念.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://colah.github.io/posts/2015-08-Understanding-LSTMs/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Understanding LSTM Networks"),a("OutboundLink")],1),t._v(" , 解释了什么是 LSTM 的内在工作原理.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://distill.pub/2016/augmented-rnns/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Attention and Augmented Recurrent Neural Networks"),a("OutboundLink")],1),t._v(" , 用了好多图来说明了 RNN 的 attention 机制.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://benanne.github.io/2014/08/05/spotify-cnns.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Recommending music on Spotify with deep learning"),a("OutboundLink")],1),t._v(" , 一个在 Spotify 的实习生分享的音乐聚类的文章.")])]),t._v(" "),a("h5",{attrs:{id:"_5-相关算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-相关算法"}},[t._v("#")]),t._v(" 5.相关算法")]),t._v(" "),a("p",[t._v("下面是 10 个非常经典的机器学习的算法.")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("对于监督式学习, 有如下经典算法.")]),t._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Decision_tree",target:"_blank",rel:"noopener noreferrer"}},[t._v("决策树(Decision Tree)"),a("OutboundLink")],1),t._v(", 比如自动化放贷, 风控.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Naive_Bayes_classifier",target:"_blank",rel:"noopener noreferrer"}},[t._v("朴素贝叶斯分类器(Naive Bayesian classifier)"),a("OutboundLink")],1),t._v(", 可以用于判断垃圾邮件, 对新闻的类别进行分类, 比如科技, 政治, 运动, 判断文本表达的感情是积极的还是消极的, 人脸识别等.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Ordinary_least_squares",target:"_blank",rel:"noopener noreferrer"}},[t._v("最小二乘法(Ordinary Least Squares Regression)"),a("OutboundLink")],1),t._v(", 是一种线性回归.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Logistic_regression",target:"_blank",rel:"noopener noreferrer"}},[t._v("逻辑回归(Logisitic Regression)"),a("OutboundLink")],1),t._v(", 一种强大的统计学方法, 可以用一个或多个变量来表示一个二项式结果. 可以用于信用评分, 计算营销活动的成功率, 预测某个产品的收入.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Support_vector_machine",target:"_blank",rel:"noopener noreferrer"}},[t._v("支持向量机(Support Vector Machine, SVM)"),a("OutboundLink")],1),t._v(", 可以用于基于图像的性别检测, 图像分类等.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Ensemble_learning",target:"_blank",rel:"noopener noreferrer"}},[t._v("集成方法(Ensemble methods)"),a("OutboundLink")],1),t._v(", 通过构建一组分类器, 然后通过它们的预测结果进行加权投票来对新的数据点进行分类. 原始的集成方法是贝叶斯平均, 但最近的算法包括纠错输出编码, Bagging 和 Boosting.")])])]),t._v(" "),a("li",[a("p",[t._v("对于无监督式的学习, 有如下经典算法.")]),t._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Cluster_analysis",target:"_blank",rel:"noopener noreferrer"}},[t._v("聚类算法(Clustering Algorithms)"),a("OutboundLink")],1),t._v(". 聚类算法有很多, 目标是给数据分类. 有 5 个比较著名的聚类算法你必需要知道: "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/K-means_clustering",target:"_blank",rel:"noopener noreferrer"}},[t._v("K-Means"),a("OutboundLink")],1),t._v(", "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Mean_shift",target:"_blank",rel:"noopener noreferrer"}},[t._v("Mean-Shift"),a("OutboundLink")],1),t._v(", "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/DBSCAN",target:"_blank",rel:"noopener noreferrer"}},[t._v("DBSCAN"),a("OutboundLink")],1),t._v(", "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Expectation%E2%80%93maximization_algorithm",target:"_blank",rel:"noopener noreferrer"}},[t._v("EM/GMM"),a("OutboundLink")],1),t._v(", 和 "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Hierarchical_clustering",target:"_blank",rel:"noopener noreferrer"}},[t._v("Agglomerative Hierarchical"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Principal_component_analysis",target:"_blank",rel:"noopener noreferrer"}},[t._v("主成分分析(Principal Component Analysis, PCA)"),a("OutboundLink")],1),t._v(". PCA 的一些应用包括压缩, 简化数据便于学习, 可视化等.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Singular-value_decomposition",target:"_blank",rel:"noopener noreferrer"}},[t._v("奇异值分解(Singular Value Decomposition, SVD)"),a("OutboundLink")],1),t._v('. 实际上, PCA 是 SVD 的一个简单应用. 在计算机视觉中, 第一个人脸识别算法使用 PCA 和 SVD 来将面部表示为"特征面"的线性组合, 进行降维, 然后通过简单的方法将面部匹配到身份. 虽然现代方法更复杂, 但很多方面仍然依赖于类似的技术.')]),t._v(" "),a("li",[a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Independent_component_analysis",target:"_blank",rel:"noopener noreferrer"}},[t._v("独立成分分析(Independent Component Analysis, ICA)"),a("OutboundLink")],1),t._v(". ICA 是一种统计技术, 主要用于揭示随机变量, 测量值或信号集中的隐藏因素.")])])])]),t._v(" "),a("p",[t._v("如果你想了解更全的机器学习的算法列表, 你可以看一下 Wikipedia 上的 List of Machine Learning Algorithms.")]),t._v(" "),a("p",[t._v("在 "),a("a",{attrs:{href:"https://machinelearningmastery.com/a-tour-of-machine-learning-algorithms/",target:"_blank",rel:"noopener noreferrer"}},[t._v("A Tour of Machine Learning Algorithms"),a("OutboundLink")],1),t._v(' , 这篇文章带你概览了一些机器学习算法, 其中还有一个"脑图"可以下载, 并还有一些 How-To 的文章供你参考.')]),t._v(" "),a("p",[t._v("对于这些算法, "),a("a",{attrs:{href:"http://scikit-learn.org/stable/",target:"_blank",rel:"noopener noreferrer"}},[t._v("SciKit-Learn"),a("OutboundLink")],1),t._v("有一些文档供你学习.")]),t._v(" "),a("ul",[a("li",[a("ol",[a("li",[t._v("Supervised learning")])])]),t._v(" "),a("li",[t._v("2.3 Clustering")]),t._v(" "),a("li",[t._v("2.5. Decomposing signals in components (matrix factorization problems)")]),t._v(" "),a("li",[a("ol",{attrs:{start:"3"}},[a("li",[t._v("Model selection and evaluation")])])]),t._v(" "),a("li",[t._v("4.3. Preprocessing data")])]),t._v(" "),a("h5",{attrs:{id:"_6-相关资源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-相关资源"}},[t._v("#")]),t._v(" 6.相关资源")]),t._v(" "),a("ul",[a("li",[a("p",[t._v('对于初学者来说, 动手是非常非常重要的, 不然, 你会在理论的知识里迷失掉自己, 这里有篇文章"'),a("a",{attrs:{href:"https://elitedatascience.com/machine-learning-projects-for-beginners",target:"_blank",rel:"noopener noreferrer"}},[t._v("8 Fun Machine Learning Projects for Beginners"),a("OutboundLink")],1),t._v('", 其中为初学者准备了 8 个很有趣的项目, 你可以跟着练练.')])]),t._v(" "),a("li",[a("p",[t._v("学习机器学习或是人工智能你需要数据, 这里有一个非常足的列表给你足够多的公共数据 – 《"),a("a",{attrs:{href:"https://github.com/awesomedata/awesome-public-datasets",target:"_blank",rel:"noopener noreferrer"}},[t._v("Awesome Public Datasets"),a("OutboundLink")],1),t._v("》, 其中包括农业, 生物, 天气, 计算机网络, 地球科学, 经济, 教育, 金融, 能源, 政府, 健康, 自然语言, 体育等.")])]),t._v(" "),a("li",[a("p",[t._v("GitHub 上的一些 Awesome 资源列表.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/ChristosChristofidis/awesome-deep-learning",target:"_blank",rel:"noopener noreferrer"}},[t._v("Awesome Deep Learning"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/terryum/awesome-deep-learning-papers",target:"_blank",rel:"noopener noreferrer"}},[t._v("Awesome - Most Cited Deep Learning Papers"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/endymecy/awesome-deeplearning-resources",target:"_blank",rel:"noopener noreferrer"}},[t._v("Awesome Deep learning papers and other resources"),a("OutboundLink")],1)])])])]),t._v(" "),a("h5",{attrs:{id:"_7-小结-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-小结-2"}},[t._v("#")]),t._v(" 7.小结")]),t._v(" "),a("p",[t._v("总结一下今天的内容. 我首先介绍了机器学习的基本原理: 监督式学习和非监督式学习, 然后给出了全世界最简单的入门资料 "),a("a",{attrs:{href:"https://medium.com/@ageitgey/machine-learning-is-fun-80ea3ec3c471",target:"_blank",rel:"noopener noreferrer"}},[t._v("Machine Learning is Fun!"),a("OutboundLink")],1),t._v(". 随后给出了与机器学习密切相关的数据分析方面的内容和资料, 然后推荐了深入学习机器学习知识的在线课程, 图书和文章等, 尤其列举了神经网络方面的学习资料. 最后描述了机器学习的十大经典算法及相关的学习资料.")]),t._v(" "),a("p",[t._v("在机器学习和人工智能领域, 我也在学习, 也处于入门阶段, 所以本文中推荐的内容, 可能在你看来会有些浅. 如果你有更好的信息和资料, 欢迎补充. 目前文章中给出来的是, 我在学习过程中认为很不错的内容, 我从中受益良多, 所以希望它们也能为你的学习提供帮助.")]),t._v(" "),a("h4",{attrs:{id:"程序员练级攻略-前端基础和底层原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#程序员练级攻略-前端基础和底层原理"}},[t._v("#")]),t._v(" 程序员练级攻略:前端基础和底层原理")]),t._v(" "),a("p",[t._v("对于前端的学习和提高, 我的基本思路是这样的. 首先, 前端的三个最基本的东西 HTML 5, CSS 3 和 JavaScript(ES6)是必须要学好的. 这其中有很多很多的技术, 比如, CSS 3 引申出来的 Canvas(位图), SVG(矢量图) 和 WebGL(3D 图), 以及 CSS 的各种图形变换可以让你做出非常丰富的渲染效果和动画效果.")]),t._v(" "),a("p",[t._v("ES6 简直就是把 JavaScript 带到了一个新的台阶, JavaScript 语言的强大, 大大释放了前端开发人员的生产力, 让前端得以开发更为复杂的代码和程序, 于是像 React 和 Vue 这样的框架开始成为前端编程的不二之选.")]),t._v(" "),a("p",[t._v("我一直认为学习任何知识都要从基础出发, 所以这篇文章我会着重介绍基础知识和基本原理, 尤其是如下的这些知识, 都是前端程序员需要花力气啃下来的硬骨头.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("JavaScript 的核心原理")]),t._v(". 这里我会给出好些网上很不错的讲 JavaScript 的原理的文章或图书, 你一定要学好语言的特性, 并且详细了解其中的各种坑.")]),t._v(" "),a("li",[a("strong",[t._v("浏览器的工作原理")]),t._v(". 这也是一块硬骨头, 我觉得这是前端程序员需要了解和明白的关键知识点, 不然, 你将无法深入下去.")]),t._v(" "),a("li",[a("strong",[t._v("网络协议 HTTP")]),t._v(". 也是要着重了解的, 尤其是 HTTP/2, 还有 HTTP 的几种请求方式: 短连接, 长连接, Stream 连接, WebSocket 连接.")]),t._v(" "),a("li",[a("strong",[t._v("前端性能调优")]),t._v(". 有了以上的这些基础后, 你就可以进入前端性能调优的主题了, 我相信你可以很容易上手各种性能调优技术的.")]),t._v(" "),a("li",[a("strong",[t._v("框架学习")]),t._v(". 我只给了 React 和 Vue 两个框架. 就这两个框架来说, Virtual DOM 技术是其底层技术, 组件化是其思想, 管理组件的状态是其重点. 而对于 React 来说, 函数式编程又是其编程思想, 所以, 这些基础技术都是你需要好好研究和学习的.")]),t._v(" "),a("li",[a("strong",[t._v("UI 设计")]),t._v(". 设计也是前端需要做的一个事, 比如像 Google 的 Material UI, 或是比较流行的 Atomic Design 等应该是前端工程师需要学习的.")])]),t._v(" "),a("p",[t._v("而对于工具类的东西, 这里我基本没怎么涉及, 因为本文主要还是从原理和基础入手. 那些工具我觉得都很简单, 就像学习 Java 我没有让你去学习 Maven 一样, 因为只要你去动手了, 这种知识你自然就会获得, 我们还是把精力重点放在更重要的地方.")]),t._v(" "),a("p",[t._v("下面我们从前端基础和底层原理开始讲起. 先来讲讲 HTML5 相关的内容.")]),t._v(" "),a("h5",{attrs:{id:"_1-html5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-html5"}},[t._v("#")]),t._v(" 1.HTML5")]),t._v(" "),a("p",[t._v("HTML 5 主要有以下几本书推荐.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://book.douban.com/subject/25786074/",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTML 5 权威指南"),a("OutboundLink")],1),t._v(" , 本书面向初学者和中等水平 Web 开发人员, 是牢固掌握 HTML 5, CSS 3 和 JavaScript 的必读之作. 书看起来比较厚, 是因为里面的代码很多.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://book.douban.com/subject/24533314/",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTML 5 Canvas 核心技术"),a("OutboundLink")],1),t._v(" , 如果你要做 HTML 5 游戏的话, 这本书必读.")])]),t._v(" "),a("p",[t._v("对于 SVG, Canvas 和 WebGL 这三个对应于矢量图, 位图和 3D 图的渲染来说, 给前端开发带来了重武器, 很多 HTML5 小游戏也因此蓬勃发展. 所以, 你可以学习一下.")]),t._v(" "),a("p",[t._v("学习这三个技术, 我个人觉得最好的地方是 MDN.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/SVG",target:"_blank",rel:"noopener noreferrer"}},[t._v("SVG: Scalable Vector Graphics"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://developer.mozilla.org/kab/docs/Web/API/Canvas_API",target:"_blank",rel:"noopener noreferrer"}},[t._v("Canvas API"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API",target:"_blank",rel:"noopener noreferrer"}},[t._v("The WebGL API: 2D and 3D graphics for the web"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("最后是几个资源列表.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/diegocard/awesome-html5",target:"_blank",rel:"noopener noreferrer"}},[t._v("Awesome HTML5"),a("OutboundLink")],1),t._v(" . GitHub 上的 Awesome HTML5, 其中有大量的资源和技术文章.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/willianjusten/awesome-svg",target:"_blank",rel:"noopener noreferrer"}},[t._v("Awesome SVG"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/raphamorim/awesome-canvas",target:"_blank",rel:"noopener noreferrer"}},[t._v("Awesome Canvas"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/sjfricke/awesome-webgl",target:"_blank",rel:"noopener noreferrer"}},[t._v("Awesome WebGL"),a("OutboundLink")],1)])]),t._v(" "),a("h5",{attrs:{id:"_2-css"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-css"}},[t._v("#")]),t._v(" 2.CSS")]),t._v(" "),a("p",[t._v("在《程序员练级攻略》系列文章最开始, 我们就推荐过 CSS 的在线学习文档, 这里再推荐一下 "),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN Web Doc - CSS"),a("OutboundLink")],1),t._v(" . 我个人觉得只要你仔细读一下文档, CSS 并不难学. 绝大多数觉得难的, 一方面是文档没读透, 另一方面是浏览器支持的标准不一致. 所以, 学好 CSS 最关键的还是要仔细地读文档.")]),t._v(" "),a("p",[t._v("之后, 在写 CSS 的时候, 你会发现, 你的 CSS 中有很多看起来相似的东西. 你的 DRY - Don’t Repeat Yourself 洁癖告诉你, 这是不对的. 所以, 你需要学会使用 "),a("a",{attrs:{href:"http://lesscss.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("LESS"),a("OutboundLink")],1),t._v(" 和 "),a("a",{attrs:{href:"http://sass-lang.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("SaSS"),a("OutboundLink")],1),t._v(" 这两个 CSS 预处理工具, 其可以帮你提高很多效率.")]),t._v(" "),a("p",[t._v("然后, 你需要学习一下 CSS 的书写规范, 前面的《程序员修养》一文中提到过一些, 这里再补充几个.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/necolas/idiomatic-css",target:"_blank",rel:"noopener noreferrer"}},[t._v("Principles of writing consistent, idiomatic CSS"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/grvcoelho/css-styleguide",target:"_blank",rel:"noopener noreferrer"}},[t._v("Opinionated CSS styleguide for scalable applications"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://google.github.io/styleguide/htmlcssguide.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Google HTML/CSS Style Guide"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("如果你需要更有效率, 那么你还需要使用一些 CSS Framework, 其中最著名的就是 Twitter 公司的 "),a("a",{attrs:{href:"http://getbootstrap.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Bootstrap"),a("OutboundLink")],1),t._v(", 其有很多不错的 UI 组件, 页面布局方案, 可以让你非常方便也非常快速地开发页面. 除此之外, 还有, 主打清新 UI 的 "),a("a",{attrs:{href:"https://semantic-ui.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Semantic UI"),a("OutboundLink")],1),t._v(" , 主打响应式界面的 "),a("a",{attrs:{href:"http://foundation.zurb.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Foundation"),a("OutboundLink")],1),t._v(" 和基于 Flexbox 的 "),a("a",{attrs:{href:"http://bulma.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Bulma"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("p",[t._v("当然, 在使用 CSS 之前, 你需要把你浏览器中的一些 HTML 标签给标准化掉. 所以, 推荐几个 Reset 或标准化的 CSS 库: "),a("a",{attrs:{href:"https://github.com/necolas/normalize.css",target:"_blank",rel:"noopener noreferrer"}},[t._v("Normalize"),a("OutboundLink")],1),t._v(", "),a("a",{attrs:{href:"https://github.com/jgthms/minireset.css",target:"_blank",rel:"noopener noreferrer"}},[t._v("MiniRest.css"),a("OutboundLink")],1),t._v(", "),a("a",{attrs:{href:"https://github.com/jonathantneal/sanitize.css/",target:"_blank",rel:"noopener noreferrer"}},[t._v("sanitize.css"),a("OutboundLink")],1),t._v(" 和 "),a("a",{attrs:{href:"https://github.com/Martin-Pitt/css-unstyle",target:"_blank",rel:"noopener noreferrer"}},[t._v("unstyle.css"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("p",[t._v("关于更多的 CSS 框架, 你可以参看"),a("a",{attrs:{href:"https://github.com/troxler/awesome-css-frameworks",target:"_blank",rel:"noopener noreferrer"}},[t._v("Awesome CSS Frameworks"),a("OutboundLink")],1),t._v(" 上的列表.")]),t._v(" "),a("p",[t._v("接下来, 是几个公司的 CSS 相关实践, 供你参考.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://codepen.io/chriscoyier/post/codepens-css",target:"_blank",rel:"noopener noreferrer"}},[t._v("CodePen’s CSS"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://markdotto.com/2014/07/23/githubs-css/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Github 的 CSS"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://medium.com/@fat/mediums-css-is-actually-pretty-fucking-good-b8e2a6c78b06",target:"_blank",rel:"noopener noreferrer"}},[t._v("Medium’s CSS is actually pretty f"),a("OutboundLink")],1),t._v("​"),a("a",{attrs:{href:"https://medium.com/@fat/mediums-css-is-actually-pretty-fucking-good-b8e2a6c78b06",target:"_blank",rel:"noopener noreferrer"}},[t._v("ing good"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://medium.com/bbc-design-engineering/css-at-bbc-sport-part-1-bab546184e66",target:"_blank",rel:"noopener noreferrer"}},[t._v("CSS at BBC Sport"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.trello.com/refining-the-way-we-structure-our-css-at-trello",target:"_blank",rel:"noopener noreferrer"}},[t._v("Refining The Way We Structure Our CSS At Trello"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("最后是一个可以写出可扩展的 CSS 的阅读列表 "),a("a",{attrs:{href:"https://github.com/davidtheclark/scalable-css-reading-list",target:"_blank",rel:"noopener noreferrer"}},[t._v("A Scalable CSS Reading List"),a("OutboundLink")],1),t._v(" .")]),t._v(" "),a("h5",{attrs:{id:"_3-javascript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-javascript"}},[t._v("#")]),t._v(" 3.JavaScript")]),t._v(" "),a("p",[t._v("下面是学习 JavaScript 的一些图书和文章.")]),t._v(" "),a("ul",[a("li",[a("p",[a("a",{attrs:{href:"https://book.douban.com/subject/11874748/",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript: The Good Parts"),a("OutboundLink")],1),t._v(" , 中文翻译版为《JavaScript 语言精粹》. 这是一本介绍 JavaScript 语言本质的权威图书, 值得任何正在或准备从事 JavaScript 开发的人阅读, 并且需要反复阅读. 学习, 理解, 实践大师的思想, 我们才可能站在巨人的肩上, 才有机会超越大师, 这本书就是开始.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://book.douban.com/subject/26638316/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Secrets of the JavaScript Ninja"),a("OutboundLink")],1),t._v(" , 中文翻译版为《JavaScript 忍者秘籍》, 本书是 jQuery 库创始人编写的一本深入剖析 JavaScript 语言的书. 适合具备一定 JavaScript 基础知识的读者阅读, 也适合从事程序设计工作并想要深入探索 JavaScript 语言的读者阅读. 这本书有很多晦涩难懂的地方, 需要仔细阅读, 反复琢磨.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://book.douban.com/subject/25786138/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Effective JavaScript"),a("OutboundLink")],1),t._v(" , Ecma 的 JavaScript 标准化委员会著名专家撰写, 作者凭借多年标准化委员会工作和实践经验, 深刻辨析 JavaScript 的内部运作机制, 特性, 陷阱和编程最佳实践, 将它们高度浓缩为极具实践指导意义的 68 条精华建议.")])]),t._v(" "),a("li",[a("p",[t._v("接下来是 ES6 的学习, 这里给三个学习手册源.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://hacks.mozilla.org/category/es6-in-depth/",target:"_blank",rel:"noopener noreferrer"}},[t._v("ES6 in Depth"),a("OutboundLink")],1),t._v(", InfoQ 上有相关的中文版 - "),a("a",{attrs:{href:"http://www.infoq.com/cn/es6-in-depth/",target:"_blank",rel:"noopener noreferrer"}},[t._v("ES6 深入浅出"),a("OutboundLink")],1),t._v(". 还可以看看 "),a("a",{attrs:{href:"https://codetower.github.io/es6-features?utm_source=mybridge&utm_medium=email&utm_campaign=read_more",target:"_blank",rel:"noopener noreferrer"}},[t._v("A simple interactive ES6 Feature list"),a("OutboundLink")],1),t._v(" , 或是看一下 "),a("a",{attrs:{href:"http://es6.ruanyifeng.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("阮一峰翻译的 ES6 的教程"),a("OutboundLink")],1),t._v(" .")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/addyosmani/es6-tools",target:"_blank",rel:"noopener noreferrer"}},[t._v("ECMAScript 6 Tools"),a("OutboundLink")],1),t._v(" , 这是一堆 ES6 工具的列表, 可以帮助你提高开发效率.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://mbeaudru.github.io/modern-js-cheatsheet/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Modern JS Cheatsheet"),a("OutboundLink")],1),t._v(" , 这个 Cheatsheet 在 GitHub 上有 1 万 6 千颗星, 你就可见其影响力了.")])])]),t._v(" "),a("li",[a("p",[t._v("然后, 还有一组很不错的《"),a("a",{attrs:{href:"https://github.com/getify/You-Dont-Know-JS",target:"_blank",rel:"noopener noreferrer"}},[t._v("You Don’t Know JS 系列"),a("OutboundLink")],1),t._v("》 的书.")]),t._v(" "),a("ul",[a("li",[t._v('You Don’t Know JS: "Up & Going"')]),t._v(" "),a("li",[t._v('You Don’t Know JS: "Scope & Closures"')]),t._v(" "),a("li",[t._v('You Don’t Know JS: "this & Object Prototypes"')]),t._v(" "),a("li",[t._v('You Don’t Know JS: "Types & Grammar"')]),t._v(" "),a("li",[t._v('You Don’t Know JS: "Async & Performance"')]),t._v(" "),a("li",[t._v('You Don’t Know JS: "ES6 & Beyond"')])])]),t._v(" "),a("li",[a("p",[t._v("接下来是一些和编程范式相关的文章.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://auth0.com/blog/glossary-of-modern-javascript-concepts/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Glossary of Modern JavaScript Concepts: Part 1"),a("OutboundLink")],1),t._v(" , 首先推荐这篇文章, 其中收集了一些编程范式方面的内容, 比如纯函数, 状态, 可变性和不可变性, 指令型语言和声明式语言, 函数式编程, 响应式编程, 函数式响应编程.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://auth0.com/blog/glossary-of-modern-javascript-concepts-part-2/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Glossary of Modern JavaScript Concepts: Part 2"),a("OutboundLink")],1),t._v(" , 在第二部分中主要讨论了作用域和闭包, 数据流, 变更检测, 组件化……")])])]),t._v(" "),a("li",[a("p",[t._v("下面三篇文章是德米特里·索什尼科夫(Dmitry Soshnikov)个人网站上三篇讲 JavaScript 内在的文章.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://dmitrysoshnikov.com/ecmascript/javascript-the-core-2nd-edition/",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript. The Core: 2nd Edition"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://dmitrysoshnikov.com/ecmascript/javascript-the-core/",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript. The Core (older ES3 version)"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://medium.com/@DmitrySoshnikov/js-scope-static-dynamic-and-runtime-augmented-5abfee6223fe",target:"_blank",rel:"noopener noreferrer"}},[t._v("JS scope: static, dynamic, and runtime-augmented"),a("OutboundLink")],1)])])]),t._v(" "),a("li",[a("p",[t._v('"'),a("strong",[t._v("How JavaScript Works")]),t._v('" 是一组非常不错的文章(可能还没有写完), 强烈推荐. 这一系列的文章是 SessionStake 的 CEO 写的, 现在有 13 篇, 我感觉可能还没有写完. 这个叫 '),a("a",{attrs:{href:"https://blog.sessionstack.com/@zlatkov",target:"_blank",rel:"noopener noreferrer"}},[t._v("亚历山大·兹拉特科夫(Alexander Zlatkov)"),a("OutboundLink")],1),t._v(" 的 CEO 太猛了.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://blog.sessionstack.com/how-does-javascript-actually-work-part-1-b0bacc073cf",target:"_blank",rel:"noopener noreferrer"}},[t._v("An overview of the engine, the runtime, and the call stack"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.sessionstack.com/how-javascript-works-inside-the-v8-engine-5-tips-on-how-to-write-optimized-code-ac089e62b12e",target:"_blank",rel:"noopener noreferrer"}},[t._v("Inside the V8 engine + 5 tips on how to write optimized code"),a("OutboundLink")],1),t._v(" , 了解 V8 引擎. 这里, 也推荐 "),a("a",{attrs:{href:"https://medium.com/dailyjs/understanding-v8s-bytecode-317d46c94775",target:"_blank",rel:"noopener noreferrer"}},[t._v("Understanding V8’s Bytecode"),a("OutboundLink")],1),t._v(" 这篇文章可以让你了解 V8 引擎的底层字节码.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.sessionstack.com/how-javascript-works-memory-management-how-to-handle-4-common-memory-leaks-3f28b94cfbec",target:"_blank",rel:"noopener noreferrer"}},[t._v("Memory management + how to handle 4 common memory leaks"),a("OutboundLink")],1),t._v(" , 内存管理和 4 种常见的内存泄露问题.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.sessionstack.com/how-javascript-works-event-loop-and-the-rise-of-async-programming-5-ways-to-better-coding-with-2f077c4438b5",target:"_blank",rel:"noopener noreferrer"}},[t._v("Event loop and the rise of Async programming + 5 ways to better coding with async/await"),a("OutboundLink")],1),t._v(" , Event Loop 和异步编程.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.sessionstack.com/how-javascript-works-deep-dive-into-websockets-and-http-2-with-sse-how-to-pick-the-right-path-584e6b8e3bf7",target:"_blank",rel:"noopener noreferrer"}},[t._v("Deep dive into WebSockets and HTTP/2 with SSE + how to pick the right path"),a("OutboundLink")],1),t._v(" , WebSocket 和 HTTP/2.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.sessionstack.com/how-javascript-works-a-comparison-with-webassembly-why-in-certain-cases-its-better-to-use-it-d80945172d79",target:"_blank",rel:"noopener noreferrer"}},[t._v("A comparison with WebAssembly + why in certain cases it’s better to use it over JavaScript"),a("OutboundLink")],1),t._v(" , JavaScript 内在原理.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.sessionstack.com/how-javascript-works-the-building-blocks-of-web-workers-5-cases-when-you-should-use-them-a547c0757f6a",target:"_blank",rel:"noopener noreferrer"}},[t._v("The building blocks of Web Workers + 5 cases when you should use them"),a("OutboundLink")],1),t._v(" , Web Workers 技术.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.sessionstack.com/how-javascript-works-service-workers-their-life-cycle-and-use-cases-52b19ad98b58",target:"_blank",rel:"noopener noreferrer"}},[t._v("Service Workers, their lifecycle and use cases"),a("OutboundLink")],1),t._v(" , Service Worker 技术.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.sessionstack.com/how-javascript-works-the-mechanics-of-web-push-notifications-290176c5c55d",target:"_blank",rel:"noopener noreferrer"}},[t._v("The mechanics of Web Push Notifications"),a("OutboundLink")],1),t._v(" , Web 端 Push 通知技术.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.sessionstack.com/how-javascript-works-tracking-changes-in-the-dom-using-mutationobserver-86adc7446401",target:"_blank",rel:"noopener noreferrer"}},[t._v("Tracking changes in the DOM using MutationObserver"),a("OutboundLink")],1),t._v(" , Mutation Observer 技术.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.sessionstack.com/how-javascript-works-the-rendering-engine-and-tips-to-optimize-its-performance-7b95553baeda",target:"_blank",rel:"noopener noreferrer"}},[t._v("The rendering engine and tips to optimize its performance"),a("OutboundLink")],1),t._v(" , 渲染引擎和性能优化.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.sessionstack.com/how-javascript-works-inside-the-networking-layer-how-to-optimize-its-performance-and-security-f71b7414d34c",target:"_blank",rel:"noopener noreferrer"}},[t._v("Inside the Networking Layer + How to Optimize Its Performance and Security"),a("OutboundLink")],1),t._v(" , 网络性能和安全相关.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.sessionstack.com/how-javascript-works-under-the-hood-of-css-and-js-animations-how-to-optimize-their-performance-db0e79586216",target:"_blank",rel:"noopener noreferrer"}},[t._v("Under the hood of CSS and JS animations + how to optimize their performance"),a("OutboundLink")],1),t._v(" , CSS 和 JavaScript 动画性能优化.")])])]),t._v(" "),a("li",[a("p",[t._v("接下来是 Google Chrome 工程经理 "),a("a",{attrs:{href:"https://medium.com/@addyosmani",target:"_blank",rel:"noopener noreferrer"}},[t._v("阿迪·奥斯马尼(Addy Osmani)"),a("OutboundLink")],1),t._v(" 的几篇 JavaScript 性能相关的文章, 也是非常好的.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://medium.com/dev-channel/the-cost-of-javascript-84009f51e99e",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Cost Of JavaScript"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://medium.com/reloading/javascript-start-up-performance-69200f43b201",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript Start-up Performance"),a("OutboundLink")],1)])])]),t._v(" "),a("li",[a("p",[t._v("其它与 JavaScript 相关的资源.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://mathiasbynens.be/notes/javascript-unicode",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavScript has Unicode Problem"),a("OutboundLink")],1),t._v(" , 这是一篇很有价值的 JavaScript 处理 Unicode 的文章.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://mgechev.github.io/javascript-algorithms/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript Algorithms"),a("OutboundLink")],1),t._v(" , 用 JavaScript 实现的各种基础算法库.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/Chalarangelo/30-seconds-of-code",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript 30 秒代码"),a("OutboundLink")],1),t._v(" , 一堆你可以在 30 秒内看懂各种有用的 JavaScript 的代码, 在 GitHub 上有 2 万颗星了.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/denysdovhan/wtfjs",target:"_blank",rel:"noopener noreferrer"}},[t._v("What the f"),a("OutboundLink")],1),t._v("​"),a("a",{attrs:{href:"https://github.com/denysdovhan/wtfjs",target:"_blank",rel:"noopener noreferrer"}},[t._v("ck JavaScript"),a("OutboundLink")],1),t._v(" , 一堆 JavaScript 搞笑和比较 tricky 的样例.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/airbnb/javascript",target:"_blank",rel:"noopener noreferrer"}},[t._v("Airbnb JavaScript Style Guide"),a("OutboundLink")],1),t._v(" , Airbnb 的 JavaScript 的代码规范, GitHub 上有 7 万多颗星.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.youtube.com/watch?v=hO7mzO83N1Q",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript Patterns for 2017"),a("OutboundLink")],1),t._v(" , YouTube 上的一个 JavaScript 模式分享, 值得一看.")])])])]),t._v(" "),a("h5",{attrs:{id:"_4-浏览器原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-浏览器原理"}},[t._v("#")]),t._v(" 4.浏览器原理")]),t._v(" "),a("p",[t._v("你需要了解一下浏览器是怎么工作的, 所以, 你必需要看《"),a("a",{attrs:{href:"http://taligarsiel.com/Projects/howbrowserswork1.htm",target:"_blank",rel:"noopener noreferrer"}},[t._v("How browsers work"),a("OutboundLink")],1),t._v("》. 这篇文章受众之大, 后来被人重新整理并发布为《"),a("a",{attrs:{href:"https://www.html5rocks.com/en/tutorials/internals/howbrowserswork/",target:"_blank",rel:"noopener noreferrer"}},[t._v("How Browsers Work: Behind the scenes of modern web browsers"),a("OutboundLink")],1),t._v("》, 其中还包括中文版. 这篇文章非常非常长, 所以, 你要有耐心看完. 如果你想看个精简版的, 可以看我在 Coolshell 上发的《"),a("a",{attrs:{href:"https://coolshell.cn/articles/9666.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("浏览器的渲染原理简介"),a("OutboundLink")],1),t._v("》或是看一下"),a("a",{attrs:{href:"http://arvindr21.github.io/howBrowserWorks",target:"_blank",rel:"noopener noreferrer"}},[t._v("这个幻灯片"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("p",[t._v("然后, 是对 Virtual DOM 的学习. Virtual DOM 是 React 的一个非常核心的技术细节, 它也是前端渲染和性能的关键技术. 所以, 你有必要要好好学习一下这个技术的实现原理和算法. 当然, 前提条件是你需要学习过前面我所推荐过的浏览器的工作原理. 下面是一些不错的文章可以帮你学习这一技术.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://medium.com/@deathmood/how-to-write-your-own-virtual-dom-ee74acc13060",target:"_blank",rel:"noopener noreferrer"}},[t._v("How to write your own Virtual DOM"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://medium.com/@deathmood/write-your-virtual-dom-2-props-events-a957608f5c76",target:"_blank",rel:"noopener noreferrer"}},[t._v("Write your Virtual DOM 2: Props & Events"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://medium.com/@gethylgeorge/how-virtual-dom-and-diffing-works-in-react-6fc805f9f84e",target:"_blank",rel:"noopener noreferrer"}},[t._v("How Virtual-DOM and diffing works in React"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://medium.com/@rajaraodv/the-inner-workings-of-virtual-dom-666ee7ad47cf",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Inner Workings Of Virtual DOM"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/livoras/blog/issues/13",target:"_blank",rel:"noopener noreferrer"}},[t._v("深度剖析: 如何实现一个 Virtual DOM 算法"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("以及两个 Vitual-DOM 实现供你参考:\n"),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/Matt-Esch/virtual-dom",target:"_blank",rel:"noopener noreferrer"}},[t._v("Matt-Esch/Virtual-DOM"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://maquettejs.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Maquette"),a("OutboundLink")],1)])])])]),t._v(" "),a("h5",{attrs:{id:"_5-网络协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-网络协议"}},[t._v("#")]),t._v(" 5.网络协议")]),t._v(" "),a("ul",[a("li",[a("p",[a("a",{attrs:{href:"https://book.douban.com/subject/25856314/",target:"_blank",rel:"noopener noreferrer"}},[t._v("High Performance Browser Networking"),a("OutboundLink")],1),t._v(" , 本书是谷歌公司高性能团队核心成员的权威之作, 堪称实战经验与规范解读完美结合的产物. 本书目标是涵盖 Web 开发者技术体系中应该掌握的所有网络及性能优化知识.")]),t._v(" "),a("p",[t._v("全书以性能优化为主线, 从 TCP, UDP 和 TLS 协议讲起, 解释了如何针对这几种协议和基础设施来优化应用. 然后深入探讨了无线和移动网络的工作机制. 最后, 揭示了 HTTP 协议的底层细节, 同时详细介绍了 HTTP 2.0,  XHR, SSE, WebSocket, WebRTC 和 DataChannel 等现代浏览器新增的能力.")])]),t._v(" "),a("li",[a("p",[t._v("另外, "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/HTTP/2",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP/2"),a("OutboundLink")],1),t._v("也是 HTTP 的一个新的协议, 于 2015 年被批准通过, 现在基本上所有的主流浏览器都默认启用这个协议. 所以, 你有必要学习一下这个协议. 下面相关的学习资源.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://legacy.gitbook.com/book/ye11ow/http2-explained/details",target:"_blank",rel:"noopener noreferrer"}},[t._v("Gitbook - HTTP/2 详解"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://daniel.haxx.se/http2/",target:"_blank",rel:"noopener noreferrer"}},[t._v("http2 explained"),a("OutboundLink")],1),t._v("("),a("a",{attrs:{href:"https://www.gitbook.com/book/ye11ow/http2-explained/details",target:"_blank",rel:"noopener noreferrer"}},[t._v("中译版"),a("OutboundLink")],1),t._v(")")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://cascadingmedia.com/insites/2015/03/http-2.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP/2 for a Faster Web"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.nginx.com/wp-content/uploads/2015/09/NGINX_HTTP2_White_Paper_v4.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Nginx HTTP/2 白皮书"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("HTTP/2 的两个 RFC:\n"),a("ul",[a("li",[a("a",{attrs:{href:"https://httpwg.org/specs/rfc7540.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 7540 - Hypertext Transfer Protocol Version 2 (HTTP/2)"),a("OutboundLink")],1),t._v(" , HTTP/2 的协议本身.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://httpwg.org/specs/rfc7541.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 7541 - HPACK: Header Compression for HTTP/2"),a("OutboundLink")],1),t._v(" , HTTP/2 的压缩算法.")])])])])]),t._v(" "),a("li",[a("p",[t._v("新的 HTML5 支持 "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/WebSocket",target:"_blank",rel:"noopener noreferrer"}},[t._v("WebSocket"),a("OutboundLink")],1),t._v(", 所以, 这也是你要学的一个重要协议.")]),t._v(" "),a("ul",[a("li",[a("p",[a("a",{attrs:{href:"http://www.websocket.org/quantum.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTML5 WebSocket: A Quantum Leap in Scalability for the Web"),a("OutboundLink")],1),t._v(" , 这篇文章比较了 HTTP 的几种链接方式, Polling, Long Polling 和 Streaming, 并引入了终级解决方案 WebSocket. 你知道的, 了解一个技术的缘由是非常重要的.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://stackoverflow.com/questions/12555043/my-understanding-of-http-polling-long-polling-http-streaming-and-websockets",target:"_blank",rel:"noopener noreferrer"}},[t._v("StackOverflow: My Understanding of HTTP Polling, Long Polling, HTTP Streaming and WebSockets"),a("OutboundLink")],1),t._v(" , 这是 StackOverflow 上的一个 HTTP 各种链接方式的比较, 也可以让你有所认识.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"http://blog.teamtreehouse.com/an-introduction-to-websockets",target:"_blank",rel:"noopener noreferrer"}},[t._v("An introduction to Websockets"),a("OutboundLink")],1),t._v(" , 一个 WebSocket 的简单教程.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://github.com/facundofarias/awesome-websockets",target:"_blank",rel:"noopener noreferrer"}},[t._v("Awesome Websockets"),a("OutboundLink")],1),t._v(" , GitHub 的 Awesome 资源列表.")])]),t._v(" "),a("li",[a("p",[t._v("一些和 WebSocket 相关的想法, 可以开阔你的思路:")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.html5rocks.com/en/tutorials/websockets/basics/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Introducing WebSockets: Bringing Sockets to the Web"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://lucumr.pocoo.org/2012/9/24/websockets-101/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Websockets 101"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://banksco.de/p/state-of-realtime-web-2016.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Real-Time Web by Paul Banks"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://samsaffron.com/archive/2015/12/29/websockets-caution-required",target:"_blank",rel:"noopener noreferrer"}},[t._v("Are WebSockets the future?"),a("OutboundLink")],1)])])])])])]),t._v(" "),a("h5",{attrs:{id:"_6-小结-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-小结-5"}},[t._v("#")]),t._v(" 6.小结")]),t._v(" "),a("p",[t._v("总结一下今天的内容. 我一直认为学习任何知识都要从基础出发, 所以今天我主要讲述了 HTML 5, CSS 3 和 JavaScript(ES6)这三大基础核心, 给出了大量的图书, 文章以及其他一些相关的学习资源. 之后, 我建议你学习浏览器的工作原理和网络协议相关的内容. 我认为, 掌握这些原理也是学好前端知识的前提和基础. 值得花时间, 好好学习消化.")]),t._v(" "),a("p",[t._v("下篇文章中, 我们将讲讲如何做前端性能优化, 并推荐一些好用的前端框架. 敬请期待.")]),t._v(" "),a("h4",{attrs:{id:"程序员练级攻略-技术资源集散地"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#程序员练级攻略-技术资源集散地"}},[t._v("#")]),t._v(" 程序员练级攻略:技术资源集散地")]),t._v(" "),a("h5",{attrs:{id:"_1-个人技术博客"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-个人技术博客"}},[t._v("#")]),t._v(" 1.个人技术博客")]),t._v(" "),a("p",[t._v("首先, 我先推荐一些不错的个人技术博客.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://blog.codinghorror.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Coding Horror"),a("OutboundLink")],1),t._v(" , 这是杰夫·阿特伍德(Jeff Atwood)于 2004 年创办的博客, 记录其在软件开发经历中的所思所想, 点点滴滴. 时至今日, 该博客每天都有近 10 万人次的访问量, 读者纷纷参与评论, 各种观点与智慧在这里不断地激情碰撞. 其博文选集在中国被翻译成《"),a("a",{attrs:{href:"https://book.douban.com/subject/24868904/",target:"_blank",rel:"noopener noreferrer"}},[t._v("高效能程序员的修练"),a("OutboundLink")],1),t._v("》, 在豆瓣上有 8.3 的高分. 2008 年, 他和 Joel Spolsky 联合创办了 "),a("a",{attrs:{href:"https://stackoverflow.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("StackOverflow"),a("OutboundLink")],1),t._v(' 问答网站, 为程序员在开发软件时节省了非常多的时间, 并开启了"StackOverflow Copy + Paste 式编程".')]),t._v(" "),a("li",[a("a",{attrs:{href:"https://joelonsoftware.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Joel on Software"),a("OutboundLink")],1),t._v(" , Joel Spolsky 的这个博客在全世界都有很多的读者和粉丝, 其博文选集在中国被翻译成《"),a("a",{attrs:{href:"https://book.douban.com/subject/4163938/",target:"_blank",rel:"noopener noreferrer"}},[t._v("软件随想录"),a("OutboundLink")],1),t._v("》在豆瓣上有 8.7 的高分. 这是一本关于软件技术, 人才, 创业和企业管理的随想文集, 作者以诙谐幽默的笔触将自己在软件行业的亲身感悟娓娓道来, 观点新颖独特, 简洁实用.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://blog.cleancoder.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Clean Coder Blog"),a("OutboundLink")],1),t._v(' , 这是编程大师"Bob 大叔"的博客, 其真名叫 Robert C. Martin, 世界级软件开发大师, 设计模式和敏捷开发先驱, 敏捷联盟首任主席, C++ Report 前主编, 被后辈程序员尊称为"Bob 大叔". 其博文选集在中国被翻译成《'),a("a",{attrs:{href:"https://book.douban.com/subject/11614538/",target:"_blank",rel:"noopener noreferrer"}},[t._v("程序员的职业素养"),a("OutboundLink")],1),t._v("》, 在豆瓣上有 8.8 的高分.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://martinfowler.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Martin Fowler"),a("OutboundLink")],1),t._v(" , 这是另外一个程序员大师, Martin 主要专注于面向对象分析与设计, 统一建模语言, 领域建模, 以及敏捷软件开发方法, 包括极限编程. 他的《"),a("a",{attrs:{href:"https://book.douban.com/subject/1229923/",target:"_blank",rel:"noopener noreferrer"}},[t._v("重构"),a("OutboundLink")],1),t._v("》, 《"),a("a",{attrs:{href:"https://book.douban.com/subject/4832380/",target:"_blank",rel:"noopener noreferrer"}},[t._v("分析模式"),a("OutboundLink")],1),t._v("》, 《"),a("a",{attrs:{href:"https://book.douban.com/subject/1230559/",target:"_blank",rel:"noopener noreferrer"}},[t._v("企业应用架构模式"),a("OutboundLink")],1),t._v("》, 《"),a("a",{attrs:{href:"https://book.douban.com/subject/21964984/",target:"_blank",rel:"noopener noreferrer"}},[t._v("领域特定语言"),a("OutboundLink")],1),t._v("》和《"),a("a",{attrs:{href:"https://book.douban.com/subject/25662138/",target:"_blank",rel:"noopener noreferrer"}},[t._v("NoSQL 精粹"),a("OutboundLink")],1),t._v("》都是非常不错的书. 在他的博客上有很多很多的编程和架构模式方法可以学习.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.paulgraham.com/articles.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Paul Graham Essays"),a("OutboundLink")],1),t._v(" , 美国著名程序员, 风险投资家, 博客和技术作家. 《"),a("a",{attrs:{href:"https://book.douban.com/subject/6021440/",target:"_blank",rel:"noopener noreferrer"}},[t._v("黑客与画家"),a("OutboundLink")],1),t._v("》是他的著作之一. 2005 年他与人共同创建了科技创业孵化器 Y Combinator, 孵化了 Airbnb, Dropbox, Stripe 等知名互联网公司. 他有几篇创业方面的文章都很经典, 如果你想创业, 可以读一读这几篇: 《"),a("a",{attrs:{href:"http://paulgraham.com/startupideas.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("How to Get Startup Ideas"),a("OutboundLink")],1),t._v("》, 《"),a("a",{attrs:{href:"http://paulgraham.com/ds.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Do Things that Don’t Scale"),a("OutboundLink")],1),t._v("》, 《"),a("a",{attrs:{href:"http://www.paulgraham.com/growth.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Startup = Growth"),a("OutboundLink")],1),t._v("》. Paul Graham 的文章以清新自然, 思想深刻见长. 不仅可以跟 Paul Graham 学创业, 学思考, 学技术, 更可以学习写作.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://medium.com/@steve.yegge",target:"_blank",rel:"noopener noreferrer"}},[t._v("Steve Yegge"),a("OutboundLink")],1),t._v(" , Steve Yegge 这个人算是一个知名的程序员了, 在 Amazon 呆过, 现在在 Google, 他的文章都是长篇大论, 最知名的文章就是"),a("a",{attrs:{href:"https://coolshell.cn/articles/5701.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("对 Amazon 和 Google 平台的吐槽"),a("OutboundLink")],1),t._v(", 这篇文章引发了大家的讨论和议论.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://bruceeckel.github.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Bruce Eckel’s Programming Blog"),a("OutboundLink")],1),t._v(" , 《Thinking in Java》作者的博客, 他之前的博客在 artima - "),a("a",{attrs:{href:"https://www.artima.com/weblogs/index.jsp?blogger=beckel",target:"_blank",rel:"noopener noreferrer"}},[t._v("Computing Thoughts"),a("OutboundLink")],1),t._v(" .")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://herbsutter.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Herb Sutter"),a("OutboundLink")],1),t._v(" , C++ 大拿, C++ 标准委员会专家, 微软软件架构师. 《Exceptional C++ 》, 《More Exceptional C++》, 《Exceptional C++ Style》作者.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://eli.thegreenplace.net/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Eli Bendersky’s website"),a("OutboundLink")],1),t._v(" , 这位老哥从 2003 年就一直写博客到今天, 其中的文章都非常不错, 原理型的, 主要是 C, C++ 和 Python 相关的. 里面有很多干货.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.catonmat.net/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Peter Krumins’ blog"),a("OutboundLink")],1),t._v(" , 这位老哥从 2007 年开始写博客, 他博客里好玩的东西太多了.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.brendangregg.com/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Brendan D. Gregg"),a("OutboundLink")],1),t._v(" , Brendan 是 Netflix 的工程师, 他的博客里有大量的非常不错的文章, 基本上都是和 Linux 性能分析相关的, 这是一个如果你要玩底层性能分析一定不能错过的博客.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://eklitzke.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Evan Klitzke"),a("OutboundLink")],1),t._v(" , 主要讨论 Linux 和 C++ 相关的内容.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://jvns.ca/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Julia Evans"),a("OutboundLink")],1),t._v(" , 主要讨论 Linux debug 工具和网络相关的内容.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://nullprogram.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("null program"),a("OutboundLink")],1),t._v(" , 和 C/C++ 相关的一个博客. 其中关于 Linux 系统调用, GPU, 无锁编程, JIT 编译的一些文章非常不错.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.fluentcpp.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Fluent {C++}"),a("OutboundLink")],1),t._v(" , 博主是 Murex 的首席工程师, 主要玩 C++, 在这个博客里有很多很不错的 C++ 相关的文章.")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://preshing.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Preshing on Programming"),a("OutboundLink")],1),t._v(" , 这也是一个和 C/C++ 相关的博客, 其中有很多的干货.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://programmingisterrible.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Programming is Terrible"),a("OutboundLink")],1),t._v(" , 这个博客有很多强观点的文章, 主要是软件开发中的一些教训.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://accidentallyquadratic.tumblr.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Accidentally Quadratic"),a("OutboundLink")],1),t._v(" , 姑且翻译成事故二次方, 这里有好些非常有趣的文章.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://hackernoon.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Hacker Noon"),a("OutboundLink")],1),t._v(" , 这是一个一堆人在写的博客, 里面有很多质量很高的文章.")])]),t._v(" "),a("p",[t._v("其实还有很多不错的博客, 不过, 现在国外不错的博客都在一个叫 "),a("a",{attrs:{href:"https://medium.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Medium"),a("OutboundLink")],1),t._v(" 的网站, 我也发现我 Google 很多东西时都会到这个网站上. 这个网站上的内容不只有技术的, 还有很多很多其他方面的内容, 比如文化, 艺术, 科学等等. 这个网站就是一个博客发布系统, 其是由 Twitter 联合创始人埃文·克拉克·威廉姆斯(Evan Clark Williams)和克里斯多福·艾萨克·比兹·斯通(Christopher Isaac Biz Stone)创办的, 这两个人觉得 Twitter 上全是垃圾没有营养的信息. 所以, 创办了 Medium, 这个平台上有专业和非专业的贡献者, 亦有受雇的编者.")]),t._v(" "),a("p",[t._v("我已经感觉到, 未来高质量的文章都会在 Medium 这个平台上出现, 因为有一些公司的技术博客也在这个平台上发布了, 比如 Netflix 的. 所以, 你有必要上到这个平台上 follow 一些作者, 专栏和主题.")]),t._v(" "),a("h5",{attrs:{id:"_2-youtube技术频道"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-youtube技术频道"}},[t._v("#")]),t._v(" 2.YouTube技术频道")]),t._v(" "),a("p",[t._v("下面是我订阅的一些我认为还不错的和编程相关的频道, 推荐给你.")]),t._v(" "),a("ul",[a("li",[a("p",[a("a",{attrs:{href:"https://www.youtube.com/channel/UCCBVCTuk6uJrN3iFV_3vurg",target:"_blank",rel:"noopener noreferrer"}},[t._v("Devoxx"),a("OutboundLink")],1),t._v(" , Devoxx 的频道, 其中有各种很不错的技术分享.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://www.youtube.com/channel/UCtxCXg-UvSnTKPOzLH4wJaQ",target:"_blank",rel:"noopener noreferrer"}},[t._v("Coding Tech"),a("OutboundLink")],1),t._v(" , 也是个非常不错的编程频道, 涵盖各种技术.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://www.youtube.com/channel/UCd6MoB9NC6uYN2grvUNT-Zg",target:"_blank",rel:"noopener noreferrer"}},[t._v("Amazon Web Services"),a("OutboundLink")],1)])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://www.youtube.com/user/FacebookDevelopers/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Facebook Developers"),a("OutboundLink")],1)])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://www.youtube.com/user/GoogleDevelopers",target:"_blank",rel:"noopener noreferrer"}},[t._v("Google Developer"),a("OutboundLink")],1),t._v(" , Google 公司的官方频道, 其中包括 Google I/O 大会, 教程, 新闻, 最佳实践, 技巧分享……")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://www.youtube.com/user/SpringSourceDev",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring Developer"),a("OutboundLink")],1),t._v(" , Spring 的官方频道.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://www.youtube.com/user/MicrosoftResearch",target:"_blank",rel:"noopener noreferrer"}},[t._v("Microsoft Research"),a("OutboundLink")],1)])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://www.youtube.com/user/MIT",target:"_blank",rel:"noopener noreferrer"}},[t._v("MIT 公开课"),a("OutboundLink")],1)])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://www.youtube.com/user/stanfordonline",target:"_blank",rel:"noopener noreferrer"}},[t._v("Stanford Online"),a("OutboundLink")],1)])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://www.youtube.com/user/jensdit",target:"_blank",rel:"noopener noreferrer"}},[t._v("Prof. Dr. Jens Dittrich"),a("OutboundLink")],1),t._v(" , 一个德国教授开的一个关于数据库相关的频道, 里面有很不错的数据库内在原理的内容.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://www.youtube.com/user/redhatsummit",target:"_blank",rel:"noopener noreferrer"}},[t._v("Red Hat Summit"),a("OutboundLink")],1),t._v(" , RedHat 峰会频道, 其中有很多和 Linux 相关的技术新闻和分享.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://www.youtube.com/user/OpenNetSummit",target:"_blank",rel:"noopener noreferrer"}},[t._v("Open Networking Summit"),a("OutboundLink")],1),t._v(" , 这是一个网络相关的频道.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://www.youtube.com/user/dvbuntu/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Dan Van Boxel"),a("OutboundLink")],1),t._v(" , 这是一个机器学习工程师折腾各种事的视频, 挺有意思的.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://www.youtube.com/user/thenewboston/",target:"_blank",rel:"noopener noreferrer"}},[t._v("The New Boston"),a("OutboundLink")],1),t._v(" , 这个频道应该是前端开发工程师必去的地方, 可能也是我所知道的最好的关于前端技术的 YouTube 频道.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://www.youtube.com/user/derekbanas",target:"_blank",rel:"noopener noreferrer"}},[t._v("Derek Banas"),a("OutboundLink")],1),t._v(" 是一个教程型的频道, 其中包括编程语言, 游戏开发, Web 开发……我个人觉得是一个可以用来练英文听力的频道.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://www.youtube.com/user/java/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java"),a("OutboundLink")],1),t._v(" , Java 相关的各种分享.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://www.youtube.com/user/CppCon",target:"_blank",rel:"noopener noreferrer"}},[t._v("CppCon"),a("OutboundLink")],1),t._v(" , C++ 大会的一些视频, 可以让你了解很多 C++ 最新功能和相关的动态.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://www.youtube.com/user/Computerphile",target:"_blank",rel:"noopener noreferrer"}},[t._v("Computerphile"),a("OutboundLink")],1),t._v(" , 这个频道是布雷迪·哈伦(Brady Haran)运作的几个频道中的一个, 在这个频道里你可以看到很多很有趣的技术方面的科普教程, 资讯, 见闻等, 说得都非常地简单易懂, 所以有大量的订阅用户. 布雷迪是个对任何技术都很有热情的人, 这个频道是关于计算机技术的. 除此之外, 他还运作 "),a("a",{attrs:{href:"https://www.youtube.com/user/Numberphile",target:"_blank",rel:"noopener noreferrer"}},[t._v("Numberphile"),a("OutboundLink")],1),t._v("(数学), "),a("a",{attrs:{href:"https://www.youtube.com/user/periodicvideos",target:"_blank",rel:"noopener noreferrer"}},[t._v("Periodic Videos"),a("OutboundLink")],1),t._v("(化学), "),a("a",{attrs:{href:"https://www.youtube.com/user/sixtysymbols",target:"_blank",rel:"noopener noreferrer"}},[t._v("Sixty Symbols"),a("OutboundLink")],1),t._v("(物理), "),a("a",{attrs:{href:"https://www.youtube.com/user/DeepSkyVideos",target:"_blank",rel:"noopener noreferrer"}},[t._v("Deep Sky Videos"),a("OutboundLink")],1),t._v("(天文)等有众多阅人数的频道. 如果你喜欢, 你都可以一一订阅, 感觉就是一个个人版的 Discovery.")])]),t._v(" "),a("li",[a("p",[t._v("关于安全, 有如下四个频道你可以订阅一下:")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.youtube.com/user/DEFCONConference",target:"_blank",rel:"noopener noreferrer"}},[t._v("DEFCONConference"),a("OutboundLink")],1),t._v(" , defcon.org 的官方频道.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.youtube.com/user/mediacccde/",target:"_blank",rel:"noopener noreferrer"}},[t._v("CCCen"),a("OutboundLink")],1),t._v(" , Chaos Computer Club.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.youtube.com/user/RSAConference",target:"_blank",rel:"noopener noreferrer"}},[t._v("RSA Conference"),a("OutboundLink")],1),t._v(" , RSA Conference.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.youtube.com/user/BlackHatOfficialYT",target:"_blank",rel:"noopener noreferrer"}},[t._v("Black Hat"),a("OutboundLink")],1),t._v(" - Black Hat Conference.")])])])]),t._v(" "),a("h5",{attrs:{id:"_3-各大公司技术博客"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-各大公司技术博客"}},[t._v("#")]),t._v(" 3.各大公司技术博客")]),t._v(" "),a("p",[t._v("细心的你一定会发现这份攻略中的很多推荐文章都来自于各个公司的技术团队的博客. 是的, 跟随这些公司的博客, 你不但可以看到这些公司的工程技术, 还能掌握到一些技术方向和趋势.")]),t._v(" "),a("p",[t._v("下面是 Airbnb, AWS, Cloudera, Dropbox, Facebook, Google 等各个公司的技术博客列表.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://nerds.airbnb.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Airbnb Engineering"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("AWS 相关\n"),a("ul",[a("li",[a("a",{attrs:{href:"https://www.allthingsdistributed.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("All Things Distributed"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://aws.amazon.com/cn/blogs/architecture/",target:"_blank",rel:"noopener noreferrer"}},[t._v("AWS Architecture Blog"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://mvdirona.com/jrh/work/",target:"_blank",rel:"noopener noreferrer"}},[t._v("On Efficiency, Reliability, Scaling - James Hamilton, VP at AWS"),a("OutboundLink")],1)])])]),t._v(" "),a("li",[a("a",{attrs:{href:"http://bandcamptech.wordpress.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Bandcamp Tech"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.simple.com/engineering/",target:"_blank",rel:"noopener noreferrer"}},[t._v("BankSimple Simple Blog"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://word.bitly.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Bitly Engineering Blog"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://blog.cloudera.com/blog/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Cloudera Developer Blog"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://tech.dropbox.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Dropbox Tech Blog"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://codeascraft.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Etsy Code as Craft"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.facebook.com/Engineering",target:"_blank",rel:"noopener noreferrer"}},[t._v("Facebook Engineering"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://code.flickr.net/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Flickr Code"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://engineering.foursquare.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Foursquare Engineering Blog"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://googleresearch.blogspot.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Google Research Blog"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://engineering.groupon.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Groupn Engineering Blog"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://highscalability.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("High Scalability"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://instagram-engineering.tumblr.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Instagram Engineering"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://engineering.linkedin.com/blog",target:"_blank",rel:"noopener noreferrer"}},[t._v("LinkedIn Engineering"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://tech.oyster.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Oyster Tech Blog"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://engineering.pinterest.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Pinterest Engineering Blog"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://engineering.quora.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Quora Engineering"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://devblog.songkick.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Songkick Technology Blog"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://developers.soundcloud.com/blog/",target:"_blank",rel:"noopener noreferrer"}},[t._v("SoundCloud Backstage Blog"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://corner.squareup.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Square The Corner"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.redditblog.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Reddit Blog"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/blog/category/engineering",target:"_blank",rel:"noopener noreferrer"}},[t._v("The GitHub Blog"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://techblog.netflix.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Netflix Tech Blog"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.twilio.com/engineering",target:"_blank",rel:"noopener noreferrer"}},[t._v("Twilio Engineering Blog"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://engineering.twitter.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Twitter Engineering"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://engineering.webengage.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("WebEngage Engineering Blog"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://eng.yammer.com/blog/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Yammer Engineering"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://engineeringblog.yelp.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Yelp Engineering Blog"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://smarketshq.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Smarkets Blog"),a("OutboundLink")],1)])]),t._v(" "),a("h5",{attrs:{id:"_4-论文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-论文"}},[t._v("#")]),t._v(" 4.论文")]),t._v(" "),a("p",[t._v("要想将技术研究得精深, 论文是必不可少的. 那要如何读论文呢?")]),t._v(" "),a("h6",{attrs:{id:"_1-如何读论文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-如何读论文"}},[t._v("#")]),t._v(" (1)如何读论文")]),t._v(" "),a("p",[t._v("下面有几篇文章, 教你一些读论文的方法, 非常不错.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://organizationsandmarkets.com/2010/08/31/how-to-read-an-academic-article/",target:"_blank",rel:"noopener noreferrer"}},[t._v("How to read an academic article"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.cc.gatech.edu/~akmassey/posts/2012-02-15-advice-on-reading-academic-papers.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Advice on reading academic papers"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://violentmetaphors.com/2013/08/25/how-to-read-and-understand-a-scientific-paper-2/",target:"_blank",rel:"noopener noreferrer"}},[t._v("How to read and understand a scientific paper"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://michaelrbernste.in/2014/10/21/should-i-read-papers.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Should I Read Papers?"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.youtube.com/watch?v=8eRx5Wo3xYA",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Refreshingly Rewarding Realm of Research Papers"),a("OutboundLink")],1)])]),t._v(" "),a("h6",{attrs:{id:"_2-论文集散地"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-论文集散地"}},[t._v("#")]),t._v(" (2)论文集散地")]),t._v(" "),a("p",[t._v("要成长为一个高手, 论文是你一定要读的. 下面是一些非常不错的计算机方面的论文集散地.")]),t._v(" "),a("ul",[a("li",[a("p",[a("a",{attrs:{href:"https://www.youtube.com/user/keeroyz",target:"_blank",rel:"noopener noreferrer"}},[t._v("2 Minute Papers"),a("OutboundLink")],1),t._v(" , 这是一个 YouTube 的频道, 其会给出一些非常不错的和计算机相关的论文介绍, 让你了解目前最有意思的一些科学突破, 每次两分钟左右.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"http://jeffhuang.com/best_paper_awards.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Best Paper Awards in Computer Science"),a("OutboundLink")],1),t._v(" , 从 1996 年以来, 获奖的计算机科学方面的论文收集.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"http://scholar.google.com/citations?view_op=top_venues&hl=en&vq=eng",target:"_blank",rel:"noopener noreferrer"}},[t._v("Google Scholar"),a("OutboundLink")],1),t._v(" , Google 学术搜索(英语: Google Scholar)是一个可以免费搜索学术文章的网络搜索引擎, 由计算机专家阿努拉格·阿查里雅(Anurag Acharya)开发. 2004 年 11 月, Google 第一次发布了 Google 学术搜索的试用版. 该项索引包括了世界上绝大部分出版的学术期刊.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://research.fb.com/publications/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Facebook"),a("OutboundLink")],1),t._v(" , Facebook 公司的论文.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://research.google.com/pubs/papers.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Research at Google"),a("OutboundLink")],1),t._v(" , Google 发布一些论文.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"http://research.microsoft.com/apps/catalog/default.aspx?t=publications",target:"_blank",rel:"noopener noreferrer"}},[t._v("Microsoft Research"),a("OutboundLink")],1),t._v(" , 微软发布的论文.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"http://dspace.mit.edu/handle/1721.1/39813",target:"_blank",rel:"noopener noreferrer"}},[t._v("MIT’s Artificial Intelligence Lab Publications"),a("OutboundLink")],1),t._v(" , MIT 和人工智能相关的论文.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"http://dsrg.pdos.csail.mit.edu/",target:"_blank",rel:"noopener noreferrer"}},[t._v("MIT’s Distributed System’s Reading Group"),a("OutboundLink")],1),t._v(" , MIT 和分布式系统相关的论文.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"http://arxiv.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("arXiv Paper Repository"),a("OutboundLink")],1),t._v(" , arXiv 是一个收集物理学, 数学, 计算机科学与生物学的论文预印本的网站, 始于 1991 年 8 月 14 日. 截至 2008 年 10 月, arXiv.org 已收集超过 50 万篇预印本. 至 2014 年底, 藏量达到 1 百万篇.")]),t._v(" "),a("p",[t._v("在 2014 年时, 约以每月 8000 篇的速度增加. arXiv 的存在是造就科学出版业中所谓开放获取运动的因素之一. 现今的一些数学家及科学家习惯先将其论文上传至 arXiv.org, 再提交予专业的学术期刊. 这个趋势对传统学术期刊的经营模式造成了可观的冲击.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://scirate.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("SciRate"),a("OutboundLink")],1),t._v(" , arXiv 上的论文太多, 所以, SciRate 索引了 arXiv 上的一些好评的论文, 并供大家评论和打分. ("),a("a",{attrs:{href:"https://github.com/scirate/scirate",target:"_blank",rel:"noopener noreferrer"}},[t._v("开源代码"),a("OutboundLink")],1),t._v(". )")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"http://doc.cat-v.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("cat-v.org"),a("OutboundLink")],1),t._v(" , 这个网站, 不只有论文, 还有技术手册或是一些有意思的文章, 包括一些历史资料什么的.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://www.usenix.org/conferences/best-papers",target:"_blank",rel:"noopener noreferrer"}},[t._v("Usenix: Best Papers"),a("OutboundLink")],1),t._v(" , Usenix 上推荐的最佳论文.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://blog.acolyer.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Morning Paper"),a("OutboundLink")],1),t._v(" , 该博客会每天推送一篇论文, 特别棒.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://lobste.rs/t/pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Lobste.rs tagged as PDF"),a("OutboundLink")],1),t._v(" , Lobsters 是一个聚焦于技术的社区, 主要是链接聚合和对话题进行讨论. 其中的 PDF 分类可以认为也是一个论文的集散地.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://github.com/papers-we-love/papers-we-love",target:"_blank",rel:"noopener noreferrer"}},[t._v("Papers We Love"),a("OutboundLink")],1),t._v(" , GitHub 上的一个近 3 万颗星的计算机科学方面的论文社区.")])])]),t._v(" "),a("h5",{attrs:{id:"_5-小结-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-小结-14"}},[t._v("#")]),t._v(" 5.小结")]),t._v(" "),a("p",[t._v("总结一下今天的内容. 这篇文章我主要跟你分享了一些好的学习资源, 帮你开拓眼界, 为后续学习夯实基础.")]),t._v(" "),a("p",[t._v("首先推荐了 Coding Horror, Joel on Software, Clean Coder Blog, Martin Fowler, Paul Graham Essays 等多个知名的个人技术博客. 然后分享了一些我认为还不错的和编程相关的 YouTube 频道, 比如 Coding Tech, Amazon Web Services, Facebook Developers, Google Developer 等.")]),t._v(" "),a("p",[t._v("随后是 Airbnb, AWS, Cloudera, Dropbox, Facebook, Google 等各个公司的技术博客, 跟随这些公司的博客, 你不但可以看到这些公司的工程技术, 还能掌握到一些技术方向和趋势. 最后, 想成长为一个高手, 论文是一定要读的. 所以, 我给出了一个非常不错的计算机方面的论文集散地, 并推荐了一些学习资源来教你如何读这些论文.")]),t._v(" "),a("p",[t._v('我一直认为, 学习需要自我驱动, 要学会自己"找食物", 而不是"等着喂". 程序员练级攻略 2018 版到今天就全部更新完成了, 但我认为, 这其实只是技术练级的起点, 还有很多知识和技术, 需要我们不断地去探索和发现. 加油, 我能做到的, 你一定也可以做到.')]),t._v(" "),a("h3",{attrs:{id:"程序员面试攻略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#程序员面试攻略"}},[t._v("#")]),t._v(" 程序员面试攻略")]),t._v(" "),a("p",[t._v("下面是《程序员面试攻略》系列文章的目录.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/13067",target:"_blank",rel:"noopener noreferrer"}},[t._v("面试前的准备"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/13069",target:"_blank",rel:"noopener noreferrer"}},[t._v("面试中的技巧"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/13191",target:"_blank",rel:"noopener noreferrer"}},[t._v("面试风格"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/13192",target:"_blank",rel:"noopener noreferrer"}},[t._v("实力才是王中王"),a("OutboundLink")],1)])]),t._v(" "),a("h4",{attrs:{id:"程序员面试攻略-面试前的准备"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#程序员面试攻略-面试前的准备"}},[t._v("#")]),t._v(" 程序员面试攻略:面试前的准备")]),t._v(" "),a("p",[t._v('学习了《程序员练级攻略》以后, 我觉得你应该来学习一下"如何面试"了. 在我的职业生涯中, 我应聘过很多公司, 小公司, 中型公司, 大公司, 国内的公司, 国外的公司都有. 我有成功获得 offer 的经历, 也有过不少失败的经历.')]),t._v(" "),a("p",[t._v("我从 2007 年做管理以来, 面试过至少 1000 多人次的工程师. 这十多年来, 我发现有一些事情没什么变化, 我们一代又一代的年轻人在应聘时的表现和我 20 年前没什么两样, 连简历都没什么改进, 更不要说程序员在表达能力方面的长进了. 如果只看面试表现的话, 感觉世界停止了 20 年似的.")]),t._v(" "),a("p",[t._v("我一直在想, 为什么应聘, 与人沟通, 赚钱等这些重要的软技能, 学校里不教呢? 这么重要的技能居然要你自己去学, 不得不说是教育上的一种失败. 另外, 关于如何应聘的事, 估计你也看过一些文章了, 我这里只分享一些我的实实在在的经验和相关的技巧. 一定你和看过的不太一样. 相信一定能帮得到你!")]),t._v(" "),a("p",[t._v("应聘是需要准备的, 下面这些点你需要好好地准备一下. 如果你没有准备的话, 那么被 pass 掉的概率会非常大.")]),t._v(" "),a("h5",{attrs:{id:"_1-怎样写简历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-怎样写简历"}},[t._v("#")]),t._v(" 1.怎样写简历")]),t._v(" "),a("p",[t._v("首先你要准备的是简历. 简历很重要, 这是别人了解你的第一个地方, 所以简历要好好写. 当然, "),a("strong",[t._v("我们知道真正的好简历是要用自己的经历去写的")]),t._v(", 比如, 有人的简历就是一句话: 我发明了 Unix.")]),t._v(" "),a("p",[t._v("当然并不是所有的人都有这样的经历, 但这依然告诉我们, "),a("strong",[t._v("自己的经历才是简历最大的亮点")]),t._v(". 所以你要去那些能让你的简历有更多含金量的公司工作, 要做那些能让你的简历更闪亮的工作. 这是写简历的最佳实践--用自己的经历聊, 而不是用文字写.")]),t._v(" "),a("p",[t._v("但从另一方面来说, 简历这个文本也是要好好写的, 况且不是每个人都会有很耀眼的经历, 所以, 还是要好好写简历. 基本上来说, 简历上的信息不要写太多, 信息太多相当于没有信息, 不要单纯地罗列, 要突出自己的长处和技能. 一般来说, 简历需要包括以下几项内容.")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("自我简介")]),t._v(". 这个自我简介是用最简单的话来说明自己的情况, 不超过 200 字. 比如: 10+ 年的软件开发经验(说明你的主业), 4+ 年的团队 leader 经验(说明你的领导力), 擅长高可用高性能的分布式架构(说明你的专业和专攻), 多年互联网和金融行业背景(说明你的行业背景), 任职于 XXX 公司的 XX 职位(说明你的职业), 负责 XXX 平台或系统(说明你的业务场景)...")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("个人信息")]),t._v(". 这里有几点需要注意.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("基本信息")]),t._v(". 电子邮箱建议用 Gmail, 千万不要用 QQ 邮箱, 要让人感觉职业化一些.")]),t._v(" "),a("li",[a("strong",[t._v("个人网站")]),t._v(". 如果你有个人主页, 博客, GitHub 或是 Stack Overflow, 请一定附上, 这是加分项. 如果个人主页或博客有独立域名, 那更好, 这会给人一种你爱动手做事的感觉. 页面也要干净有美感, 这样会让人感觉你有品味.")]),t._v(" "),a("li",[a("strong",[t._v("网站内容")]),t._v(". 一般来说这些项都会被面试官点看浏览, 所以里面的内容需要小心组织和呈现, 千万不要造假. 另外, 除了技术上的一些知识总结(不要太初级, 要有深度的, 原理型的, 刨根问底型的文章), 你也可以秀一秀自己的技术价值观(比如, 对代码整洁的追求, 对一些技术热点事件的看法), 这会让你更容易获得面试官的好感. 面试官的好感很重要.")]),t._v(" "),a("li",[a("strong",[t._v("作品展")]),t._v(". 如果你有一些作品展现, 会更好. 当然对于前端程序员来说, 这是比较容易的. 而对于后端程序员来说, 这会比较难一些, 只能展示一下自己的 GitHub 了. 如果你有一些比较不错的证书或奖项(如微软的认证, Oracle 的认证), 也可以展示一下.")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("个人技能")]),t._v(". 个人信息下面你应该罗列几条个人的技能. 这些内容要能很明显地让对方了解你掌握的技术和熟悉的领域.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("技术技能栈")]),t._v(". 其中包括你擅长和会用的编程语言(如 Java, Go, Python 等), 编程框架或一些重要的库(如 Spring Boot, Netty, React.js, gRPC 等), 熟悉的一些技术软件(如 Redis, Kafka, Docker 等), 设计或架构(如面向对象设计, 分布式系统架构, 异步编程, 高性能调优等).")]),t._v(" "),a("li",[a("strong",[t._v("技术领域")]),t._v(". 前端, 算法, 机器学习, 分布式, 底层, 数据库等.")]),t._v(" "),a("li",[a("strong",[t._v("业务领域")]),t._v(". 一方面是行业领域, 如金融, 电商, 电信等, 另一方面是业务领域, 如 CRM, 支付, 物流, 商品等.")]),t._v(" "),a("li",[a("strong",[t._v("经验和软技能")]),t._v(". 带过多少人的团队, 有多少年的项目管理经验, 学习能力如何, 执行力怎么样, 设计过什么样的系统. (不要太多, 几句话就好)")])])])]),t._v(" "),a("p",[t._v("其实和用人单位发布的招聘信息中的职位技能需求很相似. 有时候我都在想, 明明用人单位的职位需求里写成那样, 为什么应聘人还不依葫芦画瓢呢? 所以, "),a("strong",[t._v("对应于你的简历, 如果能和职位需求看齐有相类似的描述, 这样可以快速地让人觉得你和要应聘的职位很匹配")]),t._v(".")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("工作经历和教育经历")])]),t._v(" "),a("ul",[a("li",[t._v("列一下你的工作经历. 每份工作完成的主要项目(不要列一大堆项目, 挑重要的), 主要突出项目的难度, 规模, 挑战, 职责, 以及获得的认可和荣誉.")]),t._v(" "),a("li",[t._v("工作经历和教育经历, 主要是对上述的个人技能的印证. 不要东拉西扯, 要紧紧地围绕着你的技能, 特长和亮点来展开.")])])])]),t._v(" "),a("p",[t._v("一般来说, 你简历中的内容最好控制在两页 A4 纸以内, 最好有中英文版, 简历不要是 Word 版的, 最好是 PDF 版, 然后"),a("strong",[t._v("简历的格式和风格请参考 LinkedIn 上的")]),t._v("(在 "),a("a",{attrs:{href:"https://templates.office.com/en-us/Resumes-and-Cover-Letters",target:"_blank",rel:"noopener noreferrer"}},[t._v("微软的 Office 模板网站"),a("OutboundLink")],1),t._v(" 上也能找到一些不错的简历模板). 简历的内容不要太多, 内容太多, 重点就不明显了. 写简历的目的是呈现自己的特长, 亮点和特点. 只要你能呈现出 2-3 个亮点和特长, 就可以吸引到人了.")]),t._v(" "),a("p",[t._v("简历只是一块敲门砖. 一些热门的公司和项目能够吸引到很多很多人的简历, 所以你要在众多的简历中脱颖而出. 除了自己的经历和能力有亮点外, 你还需要有吸引用人单位的方法.")]),t._v(" "),a("p",[t._v('有很多公司都是 HR 先来筛一遍简历, HR 其实并不懂技术, 她们只会看你的过往经历, 能力是否和职位描述上的匹配. 如果简历上的经历和技术亮点不足的话, 那么你可以在简历的版式和形式的制作上花些心思, 以及在简历的自我描述中加上一些"虚"的东西.')]),t._v(" "),a("p",[t._v('比如 "工作态度积极, 不分份内和份外的事, 只要对公司和个人有利, 都会努力做好; 勤奋踏实, 热爱学习, 喜欢做一个全栈工程师; 善于发现问题, 并解决问题..." 表示我虽然现在的经历和技能不足以打动你, 但是我的态度端正, 潜力巨大, 你不能错过...')]),t._v(" "),a("h5",{attrs:{id:"_2-技术知识准备"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-技术知识准备"}},[t._v("#")]),t._v(" 2.技术知识准备")]),t._v(" "),a("p",[t._v("一般来说, 你的简历上写什么, 面试官就会问什么, 所以不要打自己的脸, 精通就是精通, 熟悉就是熟悉, 了解就是了解. 然后对于你列出来的这些技术, 你一定要把其最基本的技术细节给掌握了. 面试官一般也会逐步加大问题的难度和深度, 看看你到底在哪个层次上. 所以还是需要系统地看看书, 才能应对面试官的问题. 比如:")]),t._v(" "),a("ul",[a("li",[t._v("你写上了 Java, 那么 Java 的基本语法都要了解, 并发编程, NIO, JVM 等, 你多少要有点儿了解, Spring, Netty 这些框架也要了解.")]),t._v(" "),a("li",[t._v("你写上了 Go, 那么至少得把官网上的 Effective Go 给看了.")]),t._v(" "),a("li",[t._v("你写上了 Redis, 那么除了 Redis 的数据结构, Redis 的性能优化, 高可用配置, 分布式锁什么的, 你多少也要把官网上的那几篇文章读一读.")]),t._v(" "),a("li",[t._v("你写上了面向对象, 那么怎么着也得把《设计模式》中的 23 个模式了解一下.")]),t._v(" "),a("li",[t._v("你写上了分布式架构, 那么 CAP 理论, 微服务架构, 弹力设计, Spring Cloud, Cloud Native 这些架构就要做到心里有数.")]),t._v(" "),a("li",[t._v("你写上网络编程, 那么 TCP/IP 的三次握手, 四次挥手, 两端的状态变化你得知道吧, Socket 编程的那几个系统调用, 还有 select, poll, epoll 这些异步 IO 多路复用的东西, 你得知道.")])]),t._v(" "),a("p",[t._v("总之, 无论你在简历里写什么技术, 这些技术的基础知识你都得学一下. 本质上来说, 这跟考试一样啊. 你想想你是怎样准备期末考试的, 是不是得把教科书上所有章节中的关键知识点都过一下? 你不见得要记住所有的知识点, 但是 80% 以上的关键知识点, 你多少得知道吧.")]),t._v(" "),a("h5",{attrs:{id:"_3-算法题准备"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-算法题准备"}},[t._v("#")]),t._v(" 3.算法题准备")]),t._v(" "),a("p",[t._v("国外的公司一般还会面算法题, 他们用算法题来过滤掉那些非计算机专业出身的人. 国内的一些公司也一样, 尤其是一些校招面试, 也有很多算法题. 所以算法是很重要的, 是你需要努力学习和准备的.")]),t._v(" "),a("p",[t._v("LeetCode 是一个不错的地方. 如果你能完成其中 50% 的题, 那么你基本上可以想面哪里就面哪里了. 这里, 你要知道, 一些面试官也是新手, 他们也是从网上找一些算法题来考你. 所以不用太害怕算法题, 都是有套路的. 比如:")]),t._v(" "),a("ol",[a("li",[t._v("如果是数据排序方面的题, 那基本上是和二分查找有关系的.")]),t._v(" "),a("li",[t._v("如果是在一个无序数组上的搜索或者统计, 基本上来说需要动用 O(1) 时间复杂度的 hash 数据结构.")]),t._v(" "),a("li",[t._v("在一堆无序的数据中找 top n 的算法, 基本上来说, 就是使用最大堆或是最小堆的数据结构.")]),t._v(" "),a("li",[t._v("如果是穷举答案相关的题(如八皇后, 二叉树等), 基本上来说, 需要使用深度优先, 广度优先或是回溯等递归的思路.")]),t._v(" "),a("li",[t._v("动态规划要重点准备一下, 这样的题很多, 如最大和子数组, 买卖股票, 背包问题, 爬楼梯, 改字符...这里有一个 "),a("a",{attrs:{href:"https://www.geeksforgeeks.org/top-20-dynamic-programming-interview-questions/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Top 20 的动态规划题的列表"),a("OutboundLink")],1),t._v(" .")]),t._v(" "),a("li",[t._v("一些经典的数据结构算法也要看一下, 比如二叉树, 链表和数组上的经典算法, LRU 算法, Trie 树, 字符串子串匹配, 回文等, 这些常见的题都是经常会被考到的.")])]),t._v(" "),a("p",[t._v("基本上来说, 算法题主要是考察应聘者是否是计算机专业出身的, 对于基本的数据结构和算法有没有相应的认识. 你做得多了, 就是能感觉得到其中的套路和方法的. 所以本质来说, 还是要多练多做.")]),t._v(" "),a("h5",{attrs:{id:"_4-工作项目准备"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-工作项目准备"}},[t._v("#")]),t._v(" 4.工作项目准备")]),t._v(" "),a("p",[t._v("无论什么公司的面试, 都会让你说一个你做过的项目, 或是你过去"),a("strong",[t._v("解决过的一个难题")]),t._v(". 但我很好奇怪, 这种必问的题, 为什么很多应聘者都没有好好准备一下.")]),t._v(" "),a("p",[t._v("一般来说, 会有下面这样的几个经典的面试问题.")]),t._v(" "),a("ol",[a("li",[t._v("**说一个你做过的最自豪的项目, 或是最近做过的一个项目. **")]),t._v(" "),a("li",[t._v("**说一个你解决过的最难的技术问题, 或是最有技术含量的问题. **")]),t._v(" "),a("li",[t._v("**说一个你最痛苦的项目, 或最艰难的项目. **")]),t._v(" "),a("li",[t._v("**说一个犯过的最大的技术错误, 或是引发的技术故障. **")])]),t._v(" "),a("p",[t._v("对于上面这四个问题: 第一个问题, 主要是想看看你过去工作中做过的最高级的事是什么, 还有你的兴趣点和兴奋点是什么; 第二和第三个问题, 主要是想看看你解决难题的能力, 以及面对压力和困难时的心态; 第四个问题, 主要是想了解一下你面对错误时的态度, 还要了解你是否会对错误有所总结和改进.")]),t._v(" "),a("p",[t._v("这些问题都会伴随着对各种细节的不停追问, 因为这样的问题太容易造假了. 所以, 面试官会不停地追问细节, 就像审问一样. 因为一个谎言需要用更多的谎言来掩盖, 如果没有经过高强度和专业的训练的话, 最好不要撒谎. 因此对于业余的不是做特工或是间谍的人来说, 谎言是经不起追问的.")]),t._v(" "),a("p",[t._v("怎样准备这样的题, 我这里有几个提示.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("要有框架")]),t._v(". 讲故事要学会使用 STAR. "),a("strong",[t._v("Situation")]),t._v(" - 在什么样的环境和背景下, "),a("strong",[t._v("Task")]),t._v(" - 你要干什么样的事, "),a("strong",[t._v("Action")]),t._v(" - 你采取了什么样的行动和努力, "),a("strong",[t._v("Result")]),t._v(" - 最终得到了什么样的效果. 这是整个语言组织的框架, 不要冗长啰嗦.")]),t._v(" "),a("li",[a("strong",[t._v("要有细节")]),t._v(". 没有细节的故事听起来就很假, 所以其中要有很多细节. 因为是技术方面的, 所以一定要有很多技术细节.")]),t._v(" "),a("li",[a("strong",[t._v("要有感情")]),t._v(". 讲这些故事一定要带感情. 要让面试官感受到你的热情, 骄傲, 坚韧和顽强. 一定要是真实的, 只有真实的事才会有真实的感情.")]),t._v(" "),a("li",[a("strong",[t._v("要有思考")]),t._v(". 只有细节和故事还不够, 还要有自己的思考和得失总结, 以及后续的改进.")])]),t._v(" "),a("p",[t._v('要做到上述, 是不容易的. 一般来说, 你也是需要训练的. 首先要形成及时总结的习惯, 对自己的日常工作和经历做总结, 否则难免会有"书到用时方恨少"的感觉. 另外还需要训练自己的语言组织能力. 最后, 你还要有对这些事件的思考, 这需要和其他人进行讨论和总结.')]),t._v(" "),a("p",[t._v("对此, 如果你想有一个比较好的面试回答效果, "),a("strong",[t._v("这不是你能临时准备出来的, 工夫都是花在平时的. 而训练这方面能力的最好方式就是在工作中写文档, 在工作之余写博客")]),t._v(". 只有写得多了, 写得好了, 你这样的能力才能训练出来.")]),t._v(" "),a("h5",{attrs:{id:"_5-小结-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-小结-15"}},[t._v("#")]),t._v(" 5.小结")]),t._v(" "),a("p",[t._v("总结一下今天的内容. 面试前的准备该怎样做, 对面试成功与否至关重要. 在这篇文章中, 我分享了自己总结一些经验和相关技巧. 首先是怎样写简历, 我认为, 简历上的信息不要写太多, 信息太多相当于没有信息, 不要单纯地罗列, 要突出自己的长处和技能.")]),t._v(" "),a("p",[t._v("然后是技术知识的准备, 我强调, 无论你在简历里写什么技术, 这些技术的基础知识你都得学一下. 即便不能记住所有的知识点, 但是 80% 以上的关键知识点, 你多少得知道吧. 随后是算法题的准备, 我推荐了 LeetCode, 并给出了好几种经典算法题的解题套路.")]),t._v(" "),a("p",[t._v("最后是工作项目的准备, 给出了几种经典的面试问题及应答思路, 并分享了该如何做准备. 我认为, 想有一个比较好的面试回答效果, 是临时准备不出来的, 要将工夫花在平时.")]),t._v(" "),a("p",[t._v("下篇文章中, 介绍的是面试中的技巧, 比如, 答不出来时该怎么办, 如何回答尖锐问题, 如何抓住最后提问的机会等, 很有实践指导意义. 敬请期待.")]),t._v(" "),a("h4",{attrs:{id:"程序员面试攻略-面试中的技巧"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#程序员面试攻略-面试中的技巧"}},[t._v("#")]),t._v(" 程序员面试攻略:面试中的技巧")]),t._v(" "),a("p",[t._v("前面一篇文章讲的是面试前的准备, 我从"),a("strong",[t._v("简历, 技术知识, 算法题和工作项目")]),t._v("四个方面一一分享了该如何做准备, 以及其中的经验和技巧. 今天就来聊聊面试中的技巧.")]),t._v(" "),a("h5",{attrs:{id:"_1-形象和谈吐"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-形象和谈吐"}},[t._v("#")]),t._v(" 1.形象和谈吐")]),t._v(" "),a("p",[t._v("面试过程很短, 对一个人的认识和了解也是很有限的. 如果你的技能一般的话, 那么就需要加强你的形象和谈吐了. 总之, 你不能内在和外在都不要吧, 最好是内在和外在都很好.")]),t._v(" "),a("p",[t._v("形象方面, 最好还是穿工作便装, 休闲的也没事, 但是要让人感到干净, 整洁. 不要有异味, 不要邋遢——头不梳, 胡子不刮, 衣服也皱巴巴的, 还是要修修边幅的. 因为有 HR 的人会来面你的, HR 一般都是女孩子, 所以不要吓到她们.")]),t._v(" "),a("p",[t._v("另外, 保持微笑, 表现得热情, 开朗和幽默是非常重要的. 每个人都喜欢和开朗风趣积极向上的人相处. 经常微笑, 表现出自己的热情, 适当开开玩笑, 自嘲一下, 会让人觉得你很容易亲近. 交谈时千万不要像挤牙膏一样, 别人问你一句, 你答一句, 要把完整的前因后果讲完. 别人问你个事, 你就多分享一些这个事中的酸甜苦辣, 把故事讲得生动有趣点儿, 能逗笑 HR 妹子最好(但不要撩).")]),t._v(" "),a("p",[a("strong",[t._v("说话的时候, 要看着对方")]),t._v(", 一方面这是对对方的尊重和礼貌, 另一方面, 这也是一种自信. 就算没有面好, 也不要低着头, 又不是做错了什么事. 有什么事说不清楚的, 不要犹豫, 该画图画图. 对于比较复杂的面试官听不懂的问题, 要变换不同的方式来描述.")]),t._v(" "),a("p",[a("strong",[t._v("面试官问的问题, 你要给出充足的细节, 千万不要让面试官不断地追问")]),t._v(", 那样就被动了. 你问我解决过的最难的问题是什么, 我就把这个问题的来龙去脉和其中的各种细节给你滔滔不绝地讲个遍. 当然, 也要讲得清楚干净有条理, 不要东拉西扯的, 也不要云山雾罩的. 这些表达和谈吐还是要多练!")]),t._v(" "),a("p",[t._v("最好的训练就写作, 你写得多了, 能把复杂的问题描述清楚了, 自然也会体现在语言组织能力上了.")]),t._v(" "),a("h5",{attrs:{id:"_2-答不出来"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-答不出来"}},[t._v("#")]),t._v(" 2.答不出来")]),t._v(" "),a("p",[t._v("面试中有"),a("strong",[t._v("一些问题很难, 但是不要放弃, 要不断尝试")]),t._v(". 很多时候, 面试官并不期待你能在很短的时候内解出一道难题, 他只是想看一下你遇到难题时的态度和思维方式. 如果你能证明给面试官看, 你解决问题的方向和方法是正确的, 就算是没有找到答案, 也是很不错的. 因为只要方向走对了, 剩下的就是时间问题了.")]),t._v(" "),a("p",[a("strong",[t._v("如果实在解不出来, 或是被问了不懂的知识性问题, 那么就直接说不懂就好了")]),t._v(". 记下来, 回去多看多练, 下次记住了就好.")]),t._v(" "),a("p",[t._v('另外, 对于没有答上来的问题, 有的人会在面试后请教一下面试官. 但是我觉得更好的方式是, 问面试官要个他的邮箱或微信, 回去后, 努力搞懂, 举一反三, 然后写个东西再发回去. 这样做是有可能让你起死回生的. 多少可以暗示对方: "你看, 我有不懂的, 但是我能下工夫很快就搞懂了, 你看我的学习能力还不错哦. 你就不再考虑一下了吗? "')]),t._v(" "),a("h5",{attrs:{id:"_3-尖锐问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-尖锐问题"}},[t._v("#")]),t._v(" 3.尖锐问题")]),t._v(" "),a("p",[t._v("应聘的时候, 你有可能会被问到几个尖锐的问题, 这时你要小心做答. 一般来说, 你会遇到这几个常见的比较尖锐的问题.")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("你为什么要离开现在的公司")]),t._v('? 这种问题一般都是来问你的离职动机的, 招聘方有理由相信, 你是怎样离开前东家的, 就会怎样离开我. 另外, 从这个问题上, 招聘方想了解你真实的动机, 对工作的想法和个人的喜好. 一般来说, 永远不要说之前公司的坏话, 最标准的外交词令是: "我离开现有公司的原因是我太喜欢你们公司了". 这样的回答, 对于招聘方来说毫无破绽可言, 而如果你开始抱怨你现在的公司了, 很可能会引出很多问题把你问到最后都抬不起头来. 当然, 你也可以说前公司的问题, 比如: 自己心爱的项目被公司废弃了, 公司转型了, 公司业绩下滑了, 在现有的公司没有成长空间了... 这些都还是可以说的.')])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("说一下你的缺点")]),t._v("? 并给出几个例子. 这个问题也是很难很难回答的. 但是我想说, 人无完人, 是个人总是会有缺点的, 但是有的缺点也有点不好意思说. 所以这个问题是比较难的. 这个问题不能说套话, 说套话会显得特别假. 这个问题还是要说实话, 也不能说一些不痛不痒的小毛病, 这样会让他觉得你避重就轻. 只要你认识到"),a("strong",[t._v("任何性格的人都有问题")]),t._v(", 那么这个问题你就好回答了. 比如, 对我来说, 我个是比较着急的人, 急性子, 而且是个做事的人. 所以我最大的问题就是在推进一些事的时候, 会忽略别人的感受. 当压力变大的时候, 我甚至会说出一些别人难以接受的话(俗话说的情商为零). 这个没什么不好意思承认的, 我这么多年来也在改进自己. 总之, 我想说的是, 每个人都应审视一下自己, 思考一下自己光明面的后面. 而回答这个问题的最佳方法, 就是想想"),a("strong",[t._v("附着在正面事件上的阴暗面")]),t._v(", 那就是你的答案. 比如, 我对事情的要求太高了, 跟我在一起工作人的压力太大. 我太内向了, 所以别人和我沟通起来有点费劲. 我太过关心团队了, 所以有时候会忽略了项目成本和时间进度... "),a("strong",[t._v("最后还要补一句, 我知道我的缺点, 我也在努力改正, 我正在通过什么样的方式改正. 这非常关键, 因为这基本上是面试官最喜欢看到的答案了, 就是你不仅能正视自己的缺点, 而且还能不断地改正")]),t._v(".")]),t._v(" "),a("p",[t._v("另外, 与这个问题相对应的是, 说一下你的优点. 这个问题是比较坑的, 你的优点是需要用证据来说明的. 比如, 我通常的回答是, 我的优点就是"),a("strong",[t._v("学习能力强")]),t._v(", 因为我掌握的技术面很广, 而且我什么样的技术都学, 比如最新的 Cloud Native 技术. 作为后端人员我还学前端方面的技术如 React.js 和 Vue.js, 这一切都来源于我扎实的基础知识... 回答这个问题的时候, 一般都会反衬出你的"),a("strong",[t._v("价值观")]),t._v(", HR 就是想了解你的价值观. 比如, "),a("strong",[t._v("我比较踏实")]),t._v(", 我想把技术一直做到老. 再比如, 我有韧性, 我受过哪些挫折, 失败, 不公, 无奈和无助, 我没有当逃兵...")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("你为什么换工作换得这么勤")]),t._v("? 很多公司的 HR 都会对应聘者频繁换工作持比较负面的评价. 频繁换工作在职业生涯中真不是一件好事, 因为用人方会觉得要么是你太不踏实了, 要么是你太不行了. 所以, 工作不要换得太频繁. 但是如果换得太频繁了, 我给你一个建议, 在简历里面写上离职原因. 另外, 在面试时被问到这个问题时, 你需要给出合理的解释, 以消除用人方的疑惑. 怎么给出合理的解释呢? 一方面, 你还是需要诚恳一点儿, 另一方面, 你在解释时需要承认频繁换工作也不是自己想的, 自己何尝不想在一份工作上干得时间长一点儿. 无奈, 要么是公司有变化, 要么就是自己没选好. 一方面表达自己也厌倦了频繁换工作这种事, 另一方面, 你要把这个话题引到另外一个方向上——什么样的工作自己可以干很久? 自己所期望的工作内容和工作环境是什么样的? 这样就转而去谈你所向往的工作内容和环境了, 并再表达一下在这样的工作环境下, 是可以很长时间做下去的, 并愿意和公司一起发展. 但是, 先不要说得太理想了, 不然, 用人方也会觉得自己是做不到的. 正确的说法是, 自己并不担心公司有各种各样的问题, 只要有一起扛事的队友一起拼搏, 这才是最关键的.")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("你在一家公司呆了接近 10 年为什么没有做到管理层? 你又是怎么保持竞争力的")]),t._v("? 一般来说, 不想做管理的程序员也挺多的, 在技术的方向上勤勤恳恳深耕细作, 会是一个非常难得的优秀工程师. 专注于技术, 不分心, 不断地在技术上的深度和广度上钻研, 这就是保持竞争力最好的方式. 所以, 其实这个问题挺好回答的. 但另一个更难的问题是: 你工作满 5 年了, 为什么还不是一个高级程序员? 对于国外的顶尖公司来说, 如果你有 5 年的工作经验, 但还不能胜任高级程序员(Amazon 的 SDE2)的职位, 那么你这个人就基本会被 pass 掉了, 包括在职的员工也是一样的. 于是, 对于工作年限超过 5 年的程序员, 如果你还不能证明你可以独当一面, 你的能力能够驾驭复杂难题, 那么国外的顶尖公司都不会问你这个问题的.")]),t._v(" "),a("p",[t._v("国内的公司可能会问你这个问题, 对此, 我个人认为比较好的回答是要分几方面来谈. 一方面, 过去因为什么原因耽误了些时间(环境因素, 客观条件因素), 另一方面, 要表示同样也有主观因素, 不然显得有点找借口的感觉, 不诚恳.")]),t._v(" "),a("p",[t._v("接下来, 要表明自己心里面也比较慌(表明自己不用别人提醒可以自己意识到自己的问题), 所以近一年来一直在学习, 罗列一下学过哪些东西, 最好还有学习目标和学习计划(表明自己除了有意识外, 还有行动). 当然, 厉害的面试官会不断地追问你一些细节, 以此来确定你没有说假话, 对此你要有充足的准备.")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("你为什么换了一个方向? 你觉得你有什么优势")]),t._v('? 这个问题其实并不难回答, 实话实说就好了. 但是不要让招聘方感受到你浮燥的内心, 或是朝三暮四的性格, 更不要让人感觉到你像"小猫钓鱼"那样一边不行又来搞另一边.')]),t._v(" "),a("p",[t._v('我觉得回答这个问题有两种方式: 一种是非常自信的回答---"我从来没有改变我的方向, 因为种种原因, 我没能得到我想要的方向, 虽然现在很残酷, 但是我一直都没有放弃我的方向, 我一直都在努力学习……"如果你要这么回答了, 你就要真的是这样的, 在新的方向有所研究和建树, 不然会被识破的.')]),t._v(" "),a("p",[t._v("另一种回答则常规一点, 首先说明一下, 自己的兴趣爱好, 为什么这个方向要比之前的那个方向更适合自己. 可以用几个例子来说明, 但其中要有一些细节, 比如, 自己试过这个新方向 , 发现干得比原来那边更好, 更容易出成绩, 自己的兴奋点更大, 所以觉得新方向更适合自己. 然后, 承认换一个方向短期内并没有优势. 但是, 因为自己的某某特质, 比如, 学习能力强, 勤奋, 聪明等特质, 未来一定是可以胜任的.")]),t._v(" "),a("p",[t._v("但是, 你要用证据证明你的学习能力强, 你比一般人勤奋, 比一般人聪明. 不然如果对方追问下去, 会让你破绽百出的. 总之, 回答这样的问题, 需要一定的证据作为补充, 而且还要伴随着以降职降薪为代价. 所以, 一般来说, 选定方向最好不要再变了, 如果一定要变的话, 你也要有必胜的信心和先下后上的心态, 而且这些信心和心态要让招聘方看到.")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("对于技术的热情或初心体现在你生活和工作中的哪里")]),t._v("? 这个问题其实是想了解一下你的性格, 以及对生活和工作的态度. 这个问题会伴随着很多细节上的追问. 所以, 你要小心回答, 而且是要带感情的, 但一定要是真实的.")]),t._v(" "),a("p",[t._v("一般来说, 热情和初心不是停留在嘴上的, 而是要表现在行动上的, 你需要给出几个曾经发生过的示例. 这些示例可以是: 你死磕某个事解决某个难题不认输的精神; 你坚持做某件事, 无论风吹雨打, 无论有没有激励; 你在某个逆境中依然没有放弃依然努力的态度; 在面对压力时, 你勇于承担责任的精神; 你严谨细心, 精益求精的做事风格; 面对诱惑能沉得住气, 不浮躁...")]),t._v(" "),a("p",[t._v("**总结一下, 对技术的热情或初心, 需要表现在这么几个特质上: 执着, 坚持, 坚韧, 不服输, 担当, 不妥协, 不浮燥... 我说一句, 我相信每个人或多或少都会有这些特质, 这是你的亮点, 要小心呵护. 不然你跟一条咸鱼就没什么两样了. **")])])]),t._v(" "),a("p",[t._v("最后我想说一下, 回答尖锐问题你会有两种方法, 一般是比较官方的, 像外交或是政治词令, 另一种是比较诚恳的, 真实的. 虽然两者都可以, 但是我觉得后者更好一些. 因为那是能打动人的. 对于一些不礼貌的问题, 我觉得你要站在更高的维度教育他们, 这样才会显得他们的 low.")]),t._v(" "),a("h5",{attrs:{id:"_4-结尾问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-结尾问题"}},[t._v("#")]),t._v(" 4.结尾问题")]),t._v(" "),a("p",[t._v("一般来说, 面试结束的时候, 都会问你有没有什么问题. 不要放弃这个机会.")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("如果你面得比较好")]),t._v(", 这个时候可以问几个尖锐的问题, 这样有利于后面谈 offer 和岗位(抓住机会反转被动为主动). 比如, 我就问过国外某一线公司的面试官下面两组问题:")]),t._v(" "),a("ul",[a("li",[t._v("你们公司有多少一线开发经理还在写代码? 你们的一线经理都没有时间来写代码了, 不知道细节怎么做好管理? 另外是不是说明你们公司有大量的内耗?")]),t._v(" "),a("li",[t._v("任何公司都有好的有不好的, 你能不能分享一下你最喜欢这个公司的地方和最不喜欢的地方?")])]),t._v(" "),a("p",[t._v("基本上来说, 面试官都会被我问住, 然后开始语塞. 能让说英语母语的老外在我这个英文一般的人面前说不清话, 我还是很满足的. 哈哈哈. 当然, 也不一定是非要像我这么尖锐地问问题, 你也可以设计几个柔和一点儿的问题. 总之问这样问题的目的是, 暗示一下对方, 我来不来还不一定呢, 也别想压低我的 offer, 你们公司也不是什么都好, 要想让我来, 得再加点...")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("如果你面得一般")]),t._v(', 这个时候你也可以问些加分的问题. 比如: 目前贵公司或是贵团队最需要解决什么样的问题? 我能帮贵公司做些什么? 能不能给我一些资料我先了解一下, 这样我后面如果能进来, 就能上手更快一些了. 因为你面得一般的话, 面试官会比较犹豫和纠结, 此时你需要让面试官不要犹豫, 所以, 你可以表现得更加热情和主动一点. 你看, 竟然一副通过面试明天就要上班的"无耻嘴脸"也会为你加点分的...')])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("如果你面得很不行, 基本挂掉了")]),t._v(". 这个时候, 也要问问题. 但最好问一下面试官对你的评价, 并且让他指出你的不足和需要改进的地方. 面试本来就是一次经历和一次学习, 你也可以把其当作是一种受教育的过程. 所以, 不要放过自己可以成长的机会. 通过面试官给你的评价, 你日后就知道自己需要努力的地方和方向了. 这是多好的一件事儿啊.")])])]),t._v(" "),a("h5",{attrs:{id:"_5-小结-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-小结-16"}},[t._v("#")]),t._v(" 5.小结")]),t._v(" "),a("p",[t._v("总结一下今天的内容. 我认为, 形象和谈吐对于面试成功与否非常重要. 着装方面一定要大方得体, 干净整洁; 谈吐方面一定要自信从容, 能够清楚准确地表达自己的观点和想法. 随后是如何面对一些答不上来的问题, 如何回答尖锐问题, 以及在面试结束之后, 如何提问, 为自己争取福利或者机会.")]),t._v(" "),a("h4",{attrs:{id:"程序员面试攻略-面试风格"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#程序员面试攻略-面试风格"}},[t._v("#")]),t._v(" 程序员面试攻略:面试风格")]),t._v(" "),a("p",[t._v("国内公司和国外公司在面试风格上完全不一样, 所以, 也需要了解一下不同风格的面试方法, 这样有利于你准备.")]),t._v(" "),a("p",[t._v("说句实话, 国内的公司是比较好面的, 国外的公司是比较难面的. 从职位招聘信息上你就可以看出来, 国内的公司包括知名公司更多的是面试在表面上. 因为国内公司招的基本上都是马上能来干活的, 所以问的更多的是一些技术知识上的东西.")]),t._v(" "),a("p",[t._v("准备这些知识性的东西, 本质上来说跟准备考试没什么两样, 恶补一下相关知识就好了. 然后讲一个项目, 项目中他们也不怎么追问细节, 面试的过程中, 也不需要写代码, 也不需要解决一个难题, 所以容易蒙混过关.")]),t._v(" "),a("p",[t._v("国外的知名公司就没有那么容易了, 真是全方位的考察, 你的表达能力, 沟通能力, 思维方式, 解题思路, 代码风格, 算法和数据结构, 设计和架构能力, 解决难题的能力...这是很难靠恶补就可以过关的, 没有踏踏实实的沉淀, 钻研和思考, 你是很难过关的.")]),t._v(" "),a("h5",{attrs:{id:"_1-国内公司"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-国内公司"}},[t._v("#")]),t._v(" 1.国内公司")]),t._v(" "),a("p",[t._v("对于在基层干活的程序员来说, 国内的公司, 小公司不说了, 诸如 BAT 这样的公司, 基本上来说, 都是比较好面的. 一般来说, 都会问你一些技术知识, 比如: Java 语言的一些特性啊, 会不会用 Spring 和 Netty 啊, JVM 怎么配置怎么调试啊, 并发编程是怎么玩的...")]),t._v(" "),a("p",[t._v("这些问题基本上来说都是知识性的问题, 都是可以 Google 的, 通过查手册查文档就可以知道的. 所以这些问题是很容易准备的, 只要你老老实实地看几本我在《程序员练级攻略》里推荐的书就好了. 当然还是有很多人连这些基本的问题都回答不上来, 这只能怪自己了.")]),t._v(" "),a("p",[t._v("回答完这些知识性的问题, 就是项目经历描述了. 你可以随便讲你做过的项目, 把这个项目用到的一些技术架构都说清楚就好了, 还有怎么上线的, 怎么运维的, 怎么加班的, 怎么苦逼的, 怎么带人的, 怎么管理项目的. 面试官也很少追问技术细节, 因为可能面试官自己都不懂(哈哈).")]),t._v(" "),a("p",[t._v("只要你按照我前面说的那个讲项目的方式来, 面试官一看你用到的技术栈和我这边的很类似, 他就开始想要你了. 当然, 国内的公司更多的是缺劳动力, 所以只要你能让他们感到你很能吃苦耐劳, 任劳任怨, 而且能很快上手干活就好了.")]),t._v(" "),a("p",[t._v('然后就是 HR 和老板的面试了, HR 和老板不懂技术, 也不会问你技术问题, 他们主要是看看你的性格和态度等. 只要你表现能吃苦耐劳, 踏实肯干, 如果还有一点"灵性"(脑子转得快, 与人好沟通, 一来一回有问有答, 性格外向点儿), 在国内的面试你是很容易通过的.')]),t._v(" "),a("p",[t._v("基本上来说, 国内公司喜欢快进快出, 也就是说, 不在面试上花太多的精力, 进来就干活, 不行就开掉, 基本上是找工人找劳动力的玩法, 也不关心员工的成长. 所以, 面试过程基本上来说, 都是围绕你干什么, 我这边这些事你会不会干, 你会不会加班, 能不能吃苦耐劳, 听不听话等这样的内容进行的.")]),t._v(" "),a("p",[t._v("当然, 对于架构师或是高级别的技术人员, 又是另一种面试方式, 这在国内的大公司中得分两种.")]),t._v(" "),a("ul",[a("li",[t._v("一种是业务型部门的高级技术人员, 基本上来说, 不会再问你一些技术的细节, 只会问你一些架构方面, 项目管理方面, 以及技术方面的事, 或者一些业务架构上的事情. 相对来说, 业务或应用方面的架构师和高级工程师需要对业务和行业比较了解, 有丰富的业务项目经验就好了, 技术上倒不需要有多深的知识. 我觉得, 在一个行业呆久了, 只要你对业务有思考, 再加上有技术把持, 基本上来说, 只要平时多读一些不错的业务上的想法, 还是比较好过的(因为不会问及细节问题).")]),t._v(" "),a("li",[t._v("另一种是偏技术部门的架构师和高级工程师, 比如核心基础技术, 或是云计算之类的. 那就会问你很多技术细节上的东西了, 而且问得还很深, 需要你有相应的项目经验, 或是开源社区里的工作经验. 你需要有过相当的经历才有可能面过. 但是, 回过头来说, 就算是这样的岗位, 本质上还是会回到面知识型问题的方法, 所以, 无非就是你能钻研的知识深一点儿罢了. 知识是死的, 只要你努力, 你总有一天能学会的.")])]),t._v(" "),a("p",[t._v("总体来说, 与国外公司相比, 国内的公司不管是哪个层级上的面试都是比较好通过的.")]),t._v(" "),a("h5",{attrs:{id:"_2-国外公司"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-国外公司"}},[t._v("#")]),t._v(" 2.国外公司")]),t._v(" "),a("p",[t._v("国外的公司我面过的不多, 只面过, Amazon, Google, Microsoft, Facebook 这几个大公司, 还有一些小公司就不在这里说了. 这几个大公司中, Facebook 是相对比较好面的, Google 是相对最难面的. 这些公司的面试最近都有改观, 不再以算法为主要面试手段了, 但还是会多多少少面你算法方面的题目. 而且, 无论初级还是高级的技术人员的面试都还是有点难的, 因为这些公司的招聘标准是要招超过现有团队同等级别 50% 以上的人. 这就要求团队成员只能越来越好, 最终导致标准越来越高.")]),t._v(" "),a("p",[t._v("一般来说, 会有两轮电话面试, 一轮是工程师面写代码, 主要是算法相关的代码, 然后可能还是工程师再面一轮技术, 或是经理电话面一轮, 主要想了解一下你目前的工作职责还有你的一些长处和喜好, 包括你的一些想法什么的. 如果没有什么问题, 你就会进入到 in-house 面试.")]),t._v(" "),a("p",[t._v("in-house 面试一般要面一天, 最少 5 轮, 3 轮和技术相关(包括代码, 算法, 设计, 架构, Problem solving), 1 轮是经理 (包括做过的项目, 解决问题的能力, 学习能力, 思考方式), 1 轮是 HR(包括性格, 喜好, 薪水). 老实说, 这种车轮战的面试, 如果你之前没玩过, 是第一次上, 那么会非常不习惯. 一天面下来, 你会累死. 当然, 习惯了你就会觉得没什么问题, 所以还是要多练习.")]),t._v(" "),a("p",[t._v("国外的公司面试时一定会让你写代码, 无论你面多高级的职位, 只要是技术岗, 基本上都会让你写代码. 你千万不要把代码写得跟面条一样, 至少要分模块函数, 把函数接口定义得清楚点儿, 代码逻辑也要简洁清楚(有大量的 if-else 嵌套的一定不是好代码), 变量命名也要好一点儿. 写代码的过程中如果有觉得不好的要打上 "),a("code",[t._v("// TODO:refactor me")]),t._v("​ 之类的注释, 这样会是一个好的编码习惯. 一般写完代码后, 面试官会问如下几个问题.")]),t._v(" "),a("ul",[a("li",[t._v("讲解一下你的代码. 这主要是跟你一起 Review 代码, 一般会考你的表达能力. 最好用一到两个 case 来讲解一下代码会更好.")]),t._v(" "),a("li",[t._v("分析一下代码的时间和空间复杂度.")]),t._v(" "),a("li",[t._v("优化代码, 包括代码中的 Bug 以及更高性能的算法.")])]),t._v(" "),a("p",[t._v("在这个过程中, 面试官除了要答案以外, 也会了解你的思维方式或是做事方式.")]),t._v(" "),a("p",[t._v("注意, 有些很有经验的面试官会从一个很简单的编码题开始, 然后不断地加需求, 或是改需求. 一旦你发现这个事的时候, 我给你的建议是不要马上实现新的需求, 而是停下来, 和面试官讨论需求, 感觉一下未来可能的需求变化, 然后开始重构代码, 抽象该抽象的代码, 将接口和实现分离, 把程序逻辑和业务功能分离.")]),t._v(" "),a("p",[t._v("这里, 你需要使用很多编码技巧甚至一些设计模式. 如果你让面试官看到你是在 Case-by-Case 地写代码, 那你就完蛋了. 基本上来说, 如果你平时写代码不是这样的习惯, 在这个过程中你是无法装的, 你会被搞得原形毕露的.")]),t._v(" "),a("p",[t._v("在设计和架构中, 一般会涉及面向对象方面, 数据库设计方面和系统架构方面的内容. 系统架构方面的内容问得也很多, 基本上都在问一些和高并发, 高可用, 高性能和大规模分布式相关的架构. 但是, 在你解题前, 你一定要问清楚需求, 不要急着说结论. 先调研需求, 最好再问一下, 为什么要做这个需求? 做这个需求的意义是什么?")]),t._v(" "),a("p",[t._v("当你了解完需求后, 你还可以挑战一下, 如果是这个需求的话, 为什么不用另外一种方式或架构? 这些问题, 都是加分项. 搞清楚需求后, 你要开始设计系统了. 设计系统时, 你不要只是拍脑袋, 还需要做一点容量计算. 如果数据不完整, 你直接跟面试官说清楚就好了, 有数据上的支持会让你更好地设计你的架构, 而且, 这会是非常大的加分项.")]),t._v(" "),a("p",[t._v("另外, 在设计系统时, 还要考虑到系统未来的扩展性, 也就是未来如果又加入一些别的东西进来, 或是量变得很大了, 你的系统是否可以容易地进行功能扩展或性能扩展. 这个架构问题, 如果你没有足够丰富的经验, 或是严谨的思考, 并不容易做得出来.")]),t._v(" "),a("p",[t._v("Problem Solving 是一些国外公司尤其是 Amazon 最喜欢面的一个环节了. 国外的这些大公司都认为他们要解决的问题是没有人解决过的, 所以他们需要的人才也是能解决自己从来没有见过的问题的人. 一般来说, 面试官会给你一个你从来没有见过的问题, 而且是很难的问题, 很明显是一个只有工程师才能解的问题.")]),t._v(" "),a("p",[t._v("比如, 用最简单的方式统计一条公路上向两个方向开出的汽车(比如在公路路面上放两个压力传感器什么的), 或是让你设计一个自动化的学校排座系统, 能够让性格接近的人坐在自己身边等. 一般来说, 他也不指望你能在一个小时的面试中找到问题的最优解, 主要看你的解题思路. 另一方面, 面试官也会和你一起来解(有可能面试官自己也不知道答案), 这样他想感觉一下, 和你一起工作, 一起解难题是个什么样的体验.")]),t._v(" "),a("p",[t._v("总之, 面试国外的公司不是你在短期就能准备的, 尤其是面一些高级别的技术职位, 还是比较难的. 基本上来说, 你脑子要转得快, 智商也要比较高, 还要在日常受过比较好的软件开发或是工程架构上的训练, 平时还要很系统, 很工程地做事, 用正确且严谨的方式做事. 不然, 你一定是面不过的.")]),t._v(" "),a("h5",{attrs:{id:"_3-小结-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-小结-14"}},[t._v("#")]),t._v(" 3.小结")]),t._v(" "),a("p",[t._v("总结一下今天的内容. 我认为, 国内外公司的面试风格有很大不同. 国内的公司是比较好面的, 国外的公司相对难面一些. 国内公司包括知名公司要招的基本上都是马上能来干活的, 所以, 面试中问的更多的是一些技术知识上的东西. 比较好准备, 恶补一下相关知识就好了. 不怎么追问细节, 也不需要写代码, 也不需要解决一个难题, 容易蒙混过关.")]),t._v(" "),a("p",[t._v("国外知名公司则对面试者进行全方位的考察, 你的表达能力, 沟通能力, 思维方式, 解题思路, 代码风格, 算法和数据结构, 设计和架构能力, 解决难题的能力... 这些是很难靠恶补就能过关的. 因此, 我针对这两种不同的面试风格, 给出了相应的面试流程, 以及应对技巧.")]),t._v(" "),a("h4",{attrs:{id:"程序员面试攻略-实力才是王中王"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#程序员面试攻略-实力才是王中王"}},[t._v("#")]),t._v(" 程序员面试攻略:实力才是王中王")]),t._v(" "),a("p",[t._v("之前的《程序员练级攻略》系列文章, 对于面试成功与否是非常重要的, 但是因为内容太多, 所以, 你可能会迷失. 这里我再补充一下相关的知识.")]),t._v(" "),a("p",[t._v('对于后端程序员来说, C, C++ 和 Java 是一定要学好的, TCP 网络和 Linux 系统编程也是需要学好的. 《练级攻略》中那些资料如果你能全部吃透和掌握的话(也就是"编程语言"和"系统知识"这两个章节), 那么中国的所有公司你都可以进, 包括 BAT, 职位可以面到一级的高级工程师.')]),t._v(" "),a("p",[t._v('如果你要更为底层的话, 那么需要掌握高手篇中的 "Linux 系统, 内存和网络", "异步 I/O", "Lock-Free", 以及 "Java 的底层知识", 把里面的那些资料都看懂学透, 那么, 你可以面过年薪 50 万的职位. 这是没有问题的.')]),t._v(" "),a("p",[t._v("如果你要往架构师方面发展, 一方面你需要有足够多的经验, 以及相关的项目实施经验, 这需要在相当的大公司里做过相应的项目和架构. 再辅助以高手篇中的分布式架构的三篇: 入门, 经典图书和论文, 工程设计, 以及微服务和容器化这些内容, 我保证你至少可以拿到年薪 60 万以上的工作.")]),t._v(" "),a("p",[t._v("你一定要明白, 真正解决用户的问题的不是前端技术, 而且是后端的业务逻辑和数据计算. **前端并不是计算机的本质, 计算机提升社会运作效率并不是靠前端完成的, 而是靠自动化来完成的, 前端只是辅助. **")]),t._v(" "),a("p",[t._v("另外, 如果你今天还在做支持性的工作, 那么你要赶快转到有产出性的工作上去, 不然的话, 你未来也危险了. 比如像测试, 运维, 项目管理等, 这些都是支持性的工作. 我个人建议你转到开发工作上, 比如开发测试工具, 开发运维系统和工具, 开发项目管理软件...只有到了开发上, 你才会有更好的发展空间.")]),t._v(" "),a("p",[a("strong",[t._v("多唠叨一句, 学习不要图快, 要学会找到掌握知识的方法, 而不是死记硬背. 学习要细嚼慢咽, 一天吃不成个胖子.")])]),t._v(" "),a("h5",{attrs:{id:"_1-面试的训练"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-面试的训练"}},[t._v("#")]),t._v(" 1.面试的训练")]),t._v(" "),a("p",[t._v("对面试来说, 比较好的训练就是要经常出去面试, 所以还是应该隔三岔五就出去面试一下的. 一方面可以攒攒经验值, 可以训练一下自己的语言表达能力和应对各种问题的回答. 另一方面更重要, 可以了解一下目前市场的需求(技术, 技能和业务), 同时了解一下自己的身价.")]),t._v(" "),a("p",[t._v("我记得以前我在一家公司埋头干了 4 年不问外界的事. 有一天, 被朋友推荐到某公司, 去面了一把. 那家公司问我要多少钱, 我说, 8 千一个月. 对方说, 你要少了, 你这样的能力, 市场价至少一万五了(我在当时所在的公司才拿 6 千). 所以, 我开始更新简历, 面了好些公司, 发现我的薪资, 岗位以及我的能力, 果然与市场价严重不匹配...")]),t._v(" "),a("p",[t._v('你之所以会紧张, 会不知所措, 会感到不适, 会觉得难, 大多数情况下是因为你不熟悉这个环境, 你对这个环境还很陌生. 只要你面得多了, 你就会熟悉这个环境, 你也就能驾轻就熟了. "老司机"之所以能成为"老司机", 还不是因为经常跟女孩子聊天交谈, 时间长了, 就成老司机了.')]),t._v(" "),a("p",[t._v("另外, 对于语言组织的训练, 除了多多与人交流, 还有就是你平时需要多看多写, 喜欢看书和写作的人通常在语言表达能力方面也不会差, 而反之则通常会比较差. 所以, 写 blog, 表达自己的想法是很重要的.")]),t._v(" "),a("h5",{attrs:{id:"_2-跳槽和升职"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-跳槽和升职"}},[t._v("#")]),t._v(" 2.跳槽和升职")]),t._v(" "),a("p",[t._v("有人说, 跳槽是升职加薪最好的手段, 这么说也有一定道理, 因为只有用人单位在竞争你, 你的职位和薪资才能提得上去. 如果你想靠公司的良心, 这是比较难的, 除非你非常非常出色. 很多人都是会以跳槽来作为升职或加薪的手段的.")]),t._v(" "),a("p",[t._v("我认为, 对于一个人来说, "),a("strong",[t._v("适当的跳槽还是很有必要的")]),t._v(". 有些时候, 在一个地方做得再好, 也要出去看看外面的世界是什么样的. 一方面, 有了对比后, 你才会更明白自己要什么, 另一方面, 想把握趋势和行业动态, 也需要你跳槽. 只是跳槽不宜太频繁, 最好不要低于两年换一次, 而且最好承前启后, 不要有太多的过渡.")]),t._v(" "),a("p",[t._v("如果你想在一家公司内从普通员工升职到公司高管这个可能还是有点难的, 所以, 通过跳槽的方式来达到这一目标还是可能的. 但是这需要一定的策略. 比如, 你需要先去世界顶尖公司, 在里面做到高级技术人员的级别, 甚至可能你先要去读书深造. 总之, 你需要先进入国外一流公司(比如微软), 然后在里面升 1 或 2 级, 然后可以跳到另一家相当的公司(比如谷歌或亚马逊).")]),t._v(" "),a("p",[t._v("此时, 你的简历会非常亮眼了, 只要你的级别是高级程序员(对应于亚马逊的 SDE3), 你会成为国内各大公司追捧的人才, 你回国到 BAT 这样的公司里做个高级管理人员是没有任何问题的. 然而, 如果你一开始不是去这些顶尖公司, 而是直接到 BAT 里做个程序员, 我觉得未来能上到中高层的机会不会多.")]),t._v(" "),a("p",[t._v("总之, 如果你决定在职场大展宏图的话, 那么在年轻的时候, 让自己的简历变得越漂亮越好. 最好是先去国外, 然后在需要职业成长的时候, 被国内公司重金请回来, 会比直接在国内的公司里发展要好一些. 这是我个人觉得比较好的方式.")]),t._v(" "),a("h5",{attrs:{id:"_3-最重要的事"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-最重要的事"}},[t._v("#")]),t._v(" 3.最重要的事")]),t._v(" "),a("p",[t._v("程序员面试中, 最重要的事还是自己技术方面的能力, 国内会注重你的项目经验, 国外会注重你的基础知识, 项目经验, 解题思路, 以及软件设计能力. 所以要努力提高自己的这些技术技能和见解.")]),t._v(" "),a("p",[t._v("在《程序员练级攻略》这一系列文章中, 除了一个大型的地图, 以及很多技术的学习资料和资源外, 我也给出了很多公司的最佳实践和解题思路. 就算你没有实际工作经验, 通过思考和研究这些前人的经验, 站在巨人的肩膀上, 会为你开启更大的舞台. 当你去到这些大公司后, 就可以把你学习到的这些知识立马用上.")]),t._v(" "),a("p",[t._v("当然, 计算机软件开发是一件动手能力很强的事, 所以, 你需要不断地动手. 好在这个世界有开源项目, 加入开源项目会比加入一个公司的门槛要低得多. 你完全可以到开源项目中攒经验, 这可能会比在工作中攒到的经验更多.")]),t._v(" "),a("p",[t._v("总之, 我想说的是, 要应付并通过面试并不难, 但是千万不要应付你的人生, 你学技术不是用来面试的, 它至少来说是你谋生的技能, 要尊重自己的谋生技能, 说不定, 哪天你还要用这些技能造福社会, 改变世界的.")]),t._v(" "),a("h5",{attrs:{id:"_4-小结-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-小结-15"}},[t._v("#")]),t._v(" 4.小结")]),t._v(" "),a("p",[t._v("总结一下今天的内容. 《程序员练级攻略》系列文章, 对于面试成功与否是非常重要的, 但内容太多, 所以在本文一开始, 我总结概述了其中的重点内容, 方便你能提纲挈领地掌握关键知识点.")]),t._v(" "),a("p",[t._v('随后, 我强调要想取得良好的面试效果, 也是需要多加练习的, 隔三岔五就出去面试一下, 积累面试经验的同时, 也了解一下市场行情. 然后探讨一个有些敏感的话题"跳槽和加薪", 我认为, 先去国外, 然后在需要职业成长的时候, 被国内公司重金请回来, 会比直接在国内的公司里发展要好一些.')]),t._v(" "),a("p",[t._v("最后分享的是程序员面试过程中最重要的事: 技术能力, 国内会注重你的项目经验, 国外会注重你的基础知识, 项目经验, 解题思路, 以及软件设计能力. 所以, 要努力提高自己的技术技能和见解. 但是你要记住, 学技术不是用来面试的, 它只是你谋生的技能, 要尊重自己的谋生技能.")]),t._v(" "),a("p",[t._v("‍")]),t._v(" "),a("h3",{attrs:{id:"高效学习"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高效学习"}},[t._v("#")]),t._v(" 高效学习")]),t._v(" "),a("p",[t._v("下面是《高效学习》系列文章的目录.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/14271",target:"_blank",rel:"noopener noreferrer"}},[t._v("端正学习态度"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/14321",target:"_blank",rel:"noopener noreferrer"}},[t._v("源头, 原理和知识地图"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/14360",target:"_blank",rel:"noopener noreferrer"}},[t._v("深度, 归纳和坚持实践"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/14380",target:"_blank",rel:"noopener noreferrer"}},[t._v("如何学习和阅读代码"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/14389",target:"_blank",rel:"noopener noreferrer"}},[t._v("面对枯燥和量大的知识"),a("OutboundLink")],1)])]),t._v(" "),a("h4",{attrs:{id:"高效学习-端正学习态度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高效学习-端正学习态度"}},[t._v("#")]),t._v(" 高效学习:端正学习态度")]),t._v(" "),a("p",[t._v('在开始这一系列文章之前, 我想说, 如果你想从我这里得到一些速成的方法, 那么你就不用往下看了, 学习是不可能速成的. 这里只有一些方法和技巧, 是我这么多年来行之有效的, 分享出来也许对你有帮助. 一方面, 可能会让你学得更多和更累, 另一方面, 可能会让你学得更系统, 更全面. 总之, 学习是一件"逆人性"的事, 就像锻炼身体一样, '),a("strong",[t._v("需要人持续付出, 会让人感到痛苦, 并随时想找理由放弃")]),t._v(".")]),t._v(" "),a("p",[t._v("大部分人都认为自己爱学习, 但是:")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("他们都是只有意识没有行动, 他们是动力不足的人.")])]),t._v(" "),a("li",[a("strong",[t._v("他们都不知道自己该学什么, 他们缺乏方向和目标.")])]),t._v(" "),a("li",[a("strong",[t._v("他们都不具备自主学习的能力, 没有正确的方法和技能.")])]),t._v(" "),a("li",[a("strong",[t._v("更要命的是, 他们缺乏实践和坚持.")])])]),t._v(" "),a("p",[t._v("如果你去研究一下古今中外的成功人士, 就会发现, 他们基本上都是非常自律的, 也都是非常热爱学习的. 他们可以沉得下心来不断地学习, 在学习中不断地思考, 探索和实践.")]),t._v(" "),a("p",[t._v("所以, 如果你不能克服自己 DNA 中的弱点, 不能端正自己的态度, 不能自律, 不能坚持, 不能举一反三, 不能不断追问等, 那么无论有多好的方法, 你都不可能学好. 所以, 有正确的态度很重要.")]),t._v(" "),a("p",[t._v("然后, 我会在后面给你一些方法和相关的技能, 让你可以真正实际操作起来.")]),t._v(" "),a("h5",{attrs:{id:"_1-主动学习和被动学习"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-主动学习和被动学习"}},[t._v("#")]),t._v(" 1.主动学习和被动学习")]),t._v(" "),a("p",[t._v("1946 年, 美国学者埃德加·戴尔(Edgar Dale)提出了「学习金字塔」(Cone of Learning)的理论. 之后美国缅因州国家训练实验室也做了相同的实验, 并发布了「学习金字塔」报告.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/5f7364e410acd745784ccbb0c9052d5b-20230731162102-4t3c3bu.png",alt:""}})]),t._v(" "),a("p",[t._v("人的学习分为「被动学习」和「主动学习」两个层次.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("被动学习")]),t._v(": 如听讲, 阅读, 视听, 演示, 学习内容的平均留存率为 5%, 10%, 20% 和 30%.")]),t._v(" "),a("li",[a("strong",[t._v("主动学习")]),t._v(": 如通过讨论, 实践, 教授给他人, 会将原来被动学习的内容留存率从 5% 提升到 50%, 75% 和 90%.")])]),t._v(" "),a("p",[t._v("这个模型很好地展示了"),a("strong",[t._v("不同学习深度和层次之间")]),t._v("的对比.")]),t._v(" "),a("p",[t._v("可以看到, 你听别人讲, 或是自己看书, 或是让别人演示给你, 这些都不能让你真正获得学习能力, 因为你是在被别人灌输, 在听别人说. "),a("strong",[t._v("只有你开始自己思考, 开始自己总结和归纳, 开始找人交流讨论, 开始践行, 并开始对外输出, 你才会掌握到真正的学习能力")]),t._v(".")]),t._v(" "),a("p",[t._v("举个大家都懂的例子, 那就是学习英文, 我们从小就是在开始学习英文了, 很多人英文成绩可以考得很好, 语法也可以不错. 然而, 哪天真正要和外国人交流的时候, 却发现自己的英文能力渣得不要不要的, 只会回答: Fine. Thank you, and you? 这就是浅度学习的结果.")]),t._v(" "),a("p",[t._v("我的英文能力也是一样的, 直到有一天进到外企, 外企请了个外教每周来公司三次和我们练英文, 我的英文能力才有一点点进步, 然而还是不够. 后来有一天, 公司的客户抱怨我们的一线客服处理问题太慢, 问我们在后台做开发的人有谁去一线支持客户, 我举手了. 于是我接了半年来自日本, 新加坡, 德国, 法国, 英国等多个国家的客户电话和邮件. 在这期间, 我的英文能力直线上升, 速度快得不得了. 一方面是我要把自己知道的讲给客户听, 另一方面要跟客户有交流, 所以我学得更努力, 也更有效果. 主要是日本人和德国人给了我足够的信心, 这两个国家的人可能是这世界上最严谨的人, 他们非常喜欢打破沙锅问到底, 而且他们的英文也不怎么好, 但是他们都用很慢的语速来和我交流, 一方面是怕他们自己说不好, 另一方面是也希望我用慢速的话和他们说. 于是大家都在一种慢速的环境下说英文, 把每个单词的音都发准了, 这使我提高了英文能力. 后面再跟一些口音很奇葩的老外(比如印度人和法国人)说英文的时候, 我就会让他们说慢点, 以便我适应他们的口音. 几年后, 我到了另外一家外国公司工作, 需要跟一些口音非常重的印度人和非洲人说英文, 我都能听懂, 着实把我身边的同事们都震住了. 这就是深度学习的最好的例子, 要践行!")]),t._v(" "),a("p",[a("mark",[a("strong",[t._v("所以, 学习不是努力读更多的书, 盲目追求阅读的速度和数量, 这会让人产生低层次的勤奋和成长的感觉, 这只是在使蛮力. 要思辨, 要践行, 要总结和归纳, 否则你只是在机械地重复某件事, 而不会有质的成长的")])]),t._v("​ **. **")]),t._v(" "),a("h5",{attrs:{id:"_2-浅度学习和深度学习"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-浅度学习和深度学习"}},[t._v("#")]),t._v(" 2.浅度学习和深度学习")]),t._v(" "),a("p",[t._v("老实说, 对于当前这个社会:")]),t._v(" "),a("ul",[a("li",[t._v("大多数人的信息渠道都被微信朋友圈, 微博, 知乎, 今日头条, 抖音占据着. 这些信息渠道中有营养的信息少之又少.")]),t._v(" "),a("li",[t._v("大多数公司都是实行类似于 996 这样的加班文化, 在透支和消耗着下一代年轻人, 让他们成长不起来.")]),t._v(" "),a("li",[t._v("因为国内互联网访问不通畅, 加上英文水平受限, 所以大多数人根本没法获取到国外的第一手信息.")]),t._v(" "),a("li",[t._v("快餐文化盛行, 绝大多数人都急于速成, 心态比较浮燥, 对事物不求甚解.")])]),t._v(" "),a("p",[t._v("所以, 在这种环境下, 你只需要踏实一点, 像以前那样看书, 看英文资料, 只需要正常学习, 根本不用努力, 就可以超过你身边的绝大多数人.")]),t._v(" "),a("p",[t._v("在这样一个时代下, 种种迹象表明, 快速, 简单, 轻松的方式给人带来的快感更强烈, 而高层次的思考, 思辨和逻辑则被这些频度高的快餐信息感所弱化. 于是, 商家们看到了其中的商机, 看到了如何在这样的时代里怎么治愈这些人在学习上的焦虑, 他们在想方设法地用一些手段推出各种代读, 领读和听读类产品, 让人们可以在短时间内体会到轻松获取知识的快感, 并产生勤奋好学和成长的幻觉(老实说, 像我这种付费专栏或是得到等知识付费产品基本上就是类似的产物).")]),t._v(" "),a("p",[t._v('这些所谓的"快餐文化"可以让你有短暂的满足感, 但是无法让你有更深层次的思考和把知识转换成自己的技能的有效路径, 因为那些都是需要大量时间和精力的付出, 不符合现代人的生活节奏. 人们开始在朋友圈, 公众号, 得到等这样的地方进行学习, 导致他们越学越焦虑, 越学越浮燥, 越学越不会思考. 于是, 他们成了"什么都懂, 但依然过不好这一生"的状态.')]),t._v(" "),a("p",[t._v("只要你注意观察, 就会发现, 少数的精英人士, 他们在训练自己获取知识的能力, 他们到源头查看第一手的资料, 然后深度钻研, 并通过自己的思考后, 生产更好的内容. 而绝大部分受众享受轻度学习, 消费内容.")]),t._v(" "),a("p",[t._v("你有没有发现, 在知识的领域也有阶层之分, 那些长期在底层知识阶层的人, 需要等着高层的人来喂养, 他们长期陷于各种谣言和不准确的信息环境中, 于是就导致错误或幼稚的认知, 并习惯于那些不费劲儿的轻度学习方式, 从而一点点地丧失了深度学习的独立思考能力, 从而再也没有能力打破知识阶层的限制, 被困在认知底层翻不了身.")]),t._v(" "),a("p",[t._v("可见深度学习十分重要, 但应该怎样进行深度学习呢? 下面几点是关键.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("高质量的信息源和第一手的知识")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("把知识连成地图, 将自己的理解反述出来")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("不断地反思和思辨, 与不同年龄段的人讨论")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("举一反三, 并践行之, 把知识转换成技能")]),t._v(".")])]),t._v(" "),a("p",[t._v("换言之, 学习有三个步骤.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("知识采集")]),t._v(". 信息源是非常重要的, "),a("strong",[t._v("获取信息源头, 破解表面信息的内在本质, 多方数据印证")]),t._v(", 是这个步骤的关键.")]),t._v(" "),a("li",[a("strong",[t._v("知识缝合")]),t._v(". 所谓缝合就是把信息组织起来, 成为结构体的知识. 这里, "),a("strong",[t._v("连接记忆, 逻辑推理, 知识梳理")]),t._v("是很重要的三部分.")]),t._v(" "),a("li",[a("strong",[t._v("技能转换")]),t._v(". 通过"),a("strong",[t._v("举一反三, 实践和练习")]),t._v(", 以及"),a("strong",[t._v("传授教导")]),t._v(", 把知识转化成自己的技能. 这种技能可以让你进入更高的阶层.")])]),t._v(" "),a("p",[t._v("我觉得这是任何人都是可以做到的, 就是看你想不想做了.")]),t._v(" "),a("p",[t._v("此外, 在正式开始讲如何学习之前, 让我先说一些关于学习的观点, 这是在为后面的那些学习方法和技巧做提纲挈领的铺垫.")]),t._v(" "),a("h5",{attrs:{id:"_3-学习是为了找到方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-学习是为了找到方法"}},[t._v("#")]),t._v(" 3.学习是为了找到方法")]),t._v(" "),a("p",[a("strong",[t._v("学习不仅仅是为了找到答案, 而更是为了找到方法")]),t._v(". 很多时候, 尤其是中国的学生, 他们在整个学生时代都喜欢死记硬背, 因为他们只有一个 KPI, 那就是在考试中取得好成绩, 所以, 死记硬背或题海战术成了他们的学习习惯. 然而在知识的海洋中, 答案太多了, 你是记不住那么多答案的.")]),t._v(" "),a("p",[a("strong",[t._v("只有掌握解题的思路和方法, 你才算得上拥有解决问题的能力")]),t._v('. 所有的练习, 所有的答案, 其实都是在引导你去寻找一种"以不变应万变"的方法或能力. 在这种能力下, 你不需要知道答案, 因为你可以用这种方法很快找到答案, 找到解, 甚至可以通过这样的方式找到最优解或最优雅的答案.')]),t._v(" "),a("p",[t._v("这就好像, 你要去登一座山, 一种方法是通过别人修好的路爬上去, 一种是通过自己的技能找到路(或是自己修一条路)爬上去. 也就是说, 需要有路才爬得上山的人, 和没有路能造路的人相比, 后者的能力就会比前者大得多得多. 所以"),a("strong",[t._v("学习是为了找到通往答案的路径和方法, 是为了拥有无师自通的能力")]),t._v(".")]),t._v(" "),a("h5",{attrs:{id:"_4-学习是为了找到原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-学习是为了找到原理"}},[t._v("#")]),t._v(" 4.学习是为了找到原理")]),t._v(" "),a("p",[a("strong",[t._v("学习不仅仅是为了知道, 而更是为了思考和理解")]),t._v(". 在学习的过程中, 我们不是为了知道某个事的表面是什么, 而是要通过表象去探索其内在的本质和原理. 真正的学习, 从来都不是很轻松的, 而是那种你知道得越多, 你的问题就会越多, 你的问题越多, 你就会思考得越多, 你思考得越多, 你就会越觉得自己知道得少, 于是你就会想要了解更多. 如此循环, 是这么一种螺旋上升上下求索的状态.")]),t._v(" "),a("p",[t._v("但是这种循环, 会在你理解了某个关键知识点后一下子把所有的知识全部融会贯通, 让你赫然开朗, 此时的那种感觉是非常美妙而难以言语的. 在学习的过程中, 我们要不断地问自己, 这个技术出现的初衷是什么? 是要解决什么样的问题? 为什么那个问题要用这种方法解? 为什么不能用别的方法解? 为什么不能简单一些? ...")]),t._v(" "),a("p",[t._v("这些问题都会驱使你像一个侦探一样去探索背后的事实和真相, 并在不断的思考中一点一点地理解整个事情的内在本质, 逻辑和原理. "),a("strong",[t._v("一旦理解和掌握了这些本质的东西, 你就会发现, 整个复杂多变的世界在变得越来越简单. 你就好像找到了所有问题的最终答案似的, 一通百通了")]),t._v(".")]),t._v(" "),a("h5",{attrs:{id:"_5-学习是为了了解自己"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-学习是为了了解自己"}},[t._v("#")]),t._v(" 5.学习是为了了解自己")]),t._v(" "),a("p",[a("strong",[t._v("学习不仅仅是为了开拓眼界, 而更是为了找到自己的未知, 为了了解自己")]),t._v(". 英文中有句话叫: You do not know what you do not know, 可以翻译为: 你不知道你不知道的东西. 也就是说, 你永远不会去学习你不知道其存在的东西. 就好像你永远 Google 不出来你不知道的事, 因为对于你不知道的事, 你不知道用什么样的关键词, 你不知道关键词, 你就找不到你想要的知识.")]),t._v(" "),a("p",[t._v("这个世界上有很多东西是你不知道的, 所以学习可以让你知道自己不知道的东西. 只有当我们知道有自己不知道的东西, 我们才会知道我们要学什么. 所以要多走出去, 与不同的人交流, 与比自己聪明的人共事, 你才会知道自己的短板和缺失, 才会反过来审视和分析自己, 从而明白如何提升自己.")]),t._v(" "),a("p",[t._v("山外有山, 楼外有楼, 人活着最怕的就是坐井观天, 自以为是. 因为这样一来, 你的大脑会封闭起来, 你会开始不接受新的东西, 你的发展也就到了天花板. "),a("strong",[t._v("开拓眼界的目的就是发现自己的不足和上升空间, 从而才能让自己成长")]),t._v(".")]),t._v(" "),a("h5",{attrs:{id:"_6-学习是为了改变自己"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-学习是为了改变自己"}},[t._v("#")]),t._v(" 6.学习是为了改变自己")]),t._v(" "),a("p",[a("strong",[t._v("学习不仅仅是为了成长, 而更是为了改变自己")]),t._v(". 很多时候, 我们觉得学习是为了自己的成长, 但是其实, 学习是为了改变自己, 然后才能获得成长. 为什么这么说呢? 我们知道, 人都是有直觉的, 但如果人的直觉真的靠谱, 那么我们就不需要学习了. 而学习就是为了告诉我们, 我们的很多直觉或是思维方式是不对的, 不好的, 不科学的.")]),t._v(" "),a("p",[t._v("只有做出了改变后, 才能够获得更好的成长. 你可以回顾一下自己的成长经历, 哪一次你有质的成长时, 不是因为你突然间开窍了, 开始用一种更有效率, 更科学, 更系统的方式做事, 然后让你达到了更高的地方. 不是吗? 当你学习了乘法以后, 在很多场景下, 就不需要用加法来统计了, 你可以使用乘法来数数, 效率提升百倍.")]),t._v(" "),a("p",[t._v("当你有一天知道了逻辑中的充要条件或是因果关系后, 你会发现使用这样的方式来思考问题时, 你比以往更接近问题的真相. "),a("strong",[t._v("学习是为了改变自己的思考方式, 改变自己的思维方式, 改变自己与生俱来的那些垃圾和低效的算法. 总之, 学习让我们改变自己, 行动和践行, 反思和改善, 从而获得成长")]),t._v(".")]),t._v(" "),a("h5",{attrs:{id:"_7-小结-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-小结-3"}},[t._v("#")]),t._v(" 7.小结")]),t._v(" "),a("p",[t._v('总结一下今天的内容. 首先, 学习是一件"逆人性"的事, 就像锻炼身体一样, 需要人持续付出, 但会让人痛苦, 并随时可能找理由放弃. 如果你不能克服自己 DNA 中的弱点, 不能端正自己的态度, 不能自律, 不能坚持, 不能举一反三, 不能不断追问等, 那么, 无论有多好的方法, 你都不可能学好. 因此有正确的态度很重要.')]),t._v(" "),a("p",[t._v("此外, 还要拥有正确的学习观念: 学习不仅仅是为了找到答案, 而更是为了找到方法; 学习不仅仅是为了知道, 而更是为了思考和理解; 学习不仅仅是为了开拓眼界, 而更是为了找到自己的未知, 为了了解自己; 学习不仅仅是为了成长, 而更是为了改变自己, 改变自己的思考方式, 改变自己的思维方式, 改变自己与生俱来的那些垃圾和低效的算法.")]),t._v(" "),a("p",[t._v("端正的学习态度和正确的学习观念, 是高效学习的第一步, 拥有这两者一定可以让你事半功倍. 然后就是要总结和掌握高效学习的方法, 这是我们下篇文章中将要分享的内容. 敬请期待.")]),t._v(" "),a("h4",{attrs:{id:"高效学习-源头-原理和知识地图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高效学习-源头-原理和知识地图"}},[t._v("#")]),t._v(" 高效学习:源头,原理和知识地图")]),t._v(" "),a("p",[t._v("有了上一篇文章中分享的那些观点, 我们来看看应该怎么做. 下面是我觉得比较不错的一些"),a("strong",[t._v("学习的方法")]),t._v(", 或者说对我来说最有效的学习方法. 我相信, 只要你和我一样做到的话, 你的学习效率一定能够提升很快.")]),t._v(" "),a("h5",{attrs:{id:"_1-挑选知识和信息源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-挑选知识和信息源"}},[t._v("#")]),t._v(" 1.挑选知识和信息源")]),t._v(" "),a("p",[t._v("还是我在《程序员练级攻略》中说的那样, 英文对于我们来说至关重要, 尤其是对于计算机知识来说. 如果你觉得用百度搜中文关键词就可以找到自己想要的知识, 那么你一定远远落后于这个时代了. 如果你用 Google 英文关键词可以找到自己想要的知识, 那么你算是能跟得上这个时代. 如果你能在社区里跟社区里的大牛交流得到答案, 那么你算是领先于这个时代了.")]),t._v(" "),a("p",[t._v("所以, 我认为你的信息源要有下面几个特质.")]),t._v(" "),a("ul",[a("li",[t._v("应该是"),a("strong",[t._v("第一手资料")]),t._v(", 不是被别人理解过, 消化过的二手资料. 尤其对于知识性的东西来说, 更是这样. 应该是原汁原味的, 不应该是被添油加醋的.")]),t._v(" "),a("li",[t._v("应该是"),a("strong",[t._v("有佐证, 有数据, 有引用")]),t._v("的, 或是有权威人士或大公司生产系统背书的资料. 应该是被时间和实践检验过的, 或是小心求证过的, 不是拍脑袋野路子或是道听途说出来的资料.")]),t._v(" "),a("li",[t._v("应该是加入了一些自己的经验和思考, 可以引发人深思的, 是所谓"),a("strong",[t._v("信息的密集很大")]),t._v("的文章.")])]),t._v(" "),a("p",[t._v("顺便说一句, 我发现 Medium 上的文章质量比较高, 很多文章都 Google 到了 Medium 上.")]),t._v(" "),a("p",[t._v("我在《程序员练级攻略 》后期的文章中罗列了很多文章资源, 有的读者很不能理解, 他们觉得我多少应该导读一下或是写上一些自己的想法, 而不是只是简单地罗列出来. 这里请允许我辩解一下, 我之所以这样做, 并不是因为偷懒, 我完全可以把这些信息资料全部隐藏起来, 翻译也好, 搬运也好, 导读也好, 自己消化完后再写出来. 那么, 我可以写出多少个专栏来?")]),t._v(" "),a("p",[t._v("我觉得, 只要我有时间, 极客时间上的所有专栏都不用写了, 我一个人就 OK 了. 我可以写得又快又好, 而且超出所有的人. 那我可以挣到很多钱. 但我不想这样, 我想把我读过的好的文章推荐给大家, 就像推荐书一样. 那些是信息源头, 已经写得非常不错了, 我不用再多废话. 而且那些文章底部都有很多的引用, 你可以一路点过去.")]),t._v(" "),a("p",[t._v("但"),a("strong",[t._v("我想通过这些简单链接的方式, 为我的读者打开一个全新的世界, 他们可以在这个世界中自己找食吃, 而不需要依赖我, 这才是我想给大家带来的东西")]),t._v(". 我不知道, 我的那些推荐文章, 有没有让你看到了一个很广阔的世界, 在那里, 每天都在产生很多最新, 最酷, 最有营养的一手信息, 而不是被我或他人消化过的二手信息.")]),t._v(" "),a("p",[t._v('这里我只想说, 对于一个学习者来说, 找到优质的信息源可以让你事半功倍. 一方面, 就像找到一本很好的武林秘籍一样, 而不是被他人翻译过或消化过的, 也不会有信息损失甚至有错误信息会让你走火入魔. 另一方面, 你需要的不只有知识和答案, 更重要的是掌握学习的方法和技能. 你要的是"渔", 而不是"鱼".')]),t._v(" "),a("h5",{attrs:{id:"_2-注重基础和原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-注重基础和原理"}},[t._v("#")]),t._v(" 2.注重基础和原理")]),t._v(" "),a("p",[t._v("我在很多的场合都提到过, "),a("mark",[a("strong",[t._v("基础知识和原理性的东西是无比重要的")])]),t._v('. 这些基础知识就好像地基一样, 只要足够扎实, 就要可以盖出很高很高的楼. 正所谓"勿在浮沙筑高台". 我说过, 很多人并不是学得不够快, 而他们的基础真的不行. 基础不行, 会影响你对事物的理解, 甚至会让你不能理解为什么是这样. 当你对事物的出现有不理解的东西时, 通常来说, 是因为你的基础知识没有跟上.')]),t._v(" "),a("p",[t._v("在《程序员练级攻略 》一文中, 我用了很大的篇幅给出了学习基础技术的路径. 只要你努力学习那些基础知识, 了解了其中的原理, 就会发现这世界上的很多东西是大同的.")]),t._v(" "),a("p",[t._v("举个例子, 如果你学习过底层的 Socket 编程, 了解多路复用和各种 I/O 模型的话(select, poll, epoll, aio, windows completion port, libevent 等), 那么, 对于 Node.js, Java NIO, Nginx, C++ 的 ACE 框架等这些中间件或是编程框架, 你就会发现, 无论表现形式是什么样的, 其底层原理都是一个样的.")]),t._v(" "),a("p",[t._v('无论是 JVM 还是 Node, 或者是 Python 解释器里干了什么, 它都无法逾越底层操作系统 API 对 "物理世界" 的限制. 而当你了解了这个底层物理世界以后, 无论那些技术玩成什么花样, 它们都无法超出你的掌控(这种感觉是很爽的).')]),t._v(" "),a("p",[t._v("再举一个例子, 当学了足够多的语言, 并有了丰富的实践后, 你开始对编程语言的各种编程范式或是控制流有了原理上的了解, 这时再学一门新语言的话, 你会发现自己学得飞快. 就像我 2010 年学习 Go 语言一样, 除了那些每个语言都有的 if-else,  for/while-loop, function 等东西以外, 我重点在看的就是, 出错处理是怎么玩的? 内存管理是怎么玩的? 数据封装和扩展怎么玩的? 多态和泛型怎么搞的? 运行时识别和反射机制是怎么玩的? 并发编程怎样玩? ... 这些都是现代编程语言必需的东西, 如果没有, 那么这个语言的表达能力就很落后了. 所以当知道编程语言的本质和原理后, 你学习一门新的语言是非常非常快的, 而且可以直达其高级特性.")]),t._v(" "),a("p",[a("strong",[t._v("最最关键的是, 这些基础知识和原理性的东西和技术, 都是经历过长时间的考验的, 所以, 这些基础技术也有很多人类历史上的智慧结晶, 会给你很多启示和帮助")]),t._v(". 比如: TCP 协议的状态机, 可以让你明白, 如果你要设计一个异步通信协议, 状态机是一件多么重要的事, 还有 TCP 拥塞控制中的方式, 让你知道, 设计一个以响应时间来限流的中件间是什么样的.")]),t._v(" "),a("p",[t._v("当学习算法和数据结构到一定程度的时候, 你就会知道, 算法不仅对于优化程序很重要, 而且会让你知道, 该如何设计数据结构和算法来让程序变得更为健壮和优雅.")]),t._v(" "),a("p",[t._v("有时候, 学习就像拉弓蓄力一样, 学习基础知识感觉很枯燥很不实用, 工作上用不到, 然而学习这些知识是为了未来可以学得更快. 基础打牢, 学什么都快, 而学得快就会学得多, 学得多, 就会思考得多, 对比得多, 结果是学得更快...这种感觉, 对于想速成的人来说, 很难体会.")]),t._v(" "),a("p",[t._v("这里我想再次强调一下, 请一定要注重基础知识和原理上的学习!")]),t._v(" "),a("h5",{attrs:{id:"_3-使用知识图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-使用知识图"}},[t._v("#")]),t._v(" 3.使用知识图")]),t._v(" "),a("p",[t._v("先讲一个故事, 2000 年我从昆明到上海, 开始沪飘的岁月. 刚到上海, 找不到好工作, 只能大量地学习和看书, C/C++/Java, TCP/IP, Windows 编程, Unix 编程, 等等. 结果呢, 书太多了, 根本看不过来. 我想要更多地掌握知识, "),a("strong",[t._v("结果我发现以死记硬背的方式根本就是在使蛮力学习, 我很难在很短的时间内学习很多的知识")]),t._v(".")]),t._v(" "),a("p",[t._v('于是我自己发明了一种叫 "联想记忆法" 的方法, 比如, 在学习 C++ 的时候, 面对《C++ Primer》这种厚得不行的书, 我就使用联想记忆法.')]),t._v(" "),a("p",[t._v("我把 C++ 分成三部分.")]),t._v(" "),a("ul",[a("li",[t._v("第一部分是 C++ 是用来解决 C 语言的问题的, 那么 C 语言有什么问题呢? 指针, 宏, 错误处理, 数据拷贝... C++ 用什么技术来解决这些问题呢?")]),t._v(" "),a("li",[t._v("第二部分是 C++ 的面向对象特性: 封装, 继承, 多态. 封装, 让我想到了构造函数, 析构函数等. 构造函数让我想到了初始化列表, 想到了默认构造函数, 想到了拷贝构造函数, 想到了 new... 多态, 让我想到了虚函数, 想到了 RTTI, RTTI 让我想到了 dynamic_cast 和 typeid 等.")]),t._v(" "),a("li",[t._v("第三部分是 C++ 的泛型编程. 我想到了 template, 想到了操作符重载, 想到了函数对象, 想到 STL, 想到数据容器, 想到了 iterator, 想到了通用算法, 等等.")])]),t._v(" "),a("p",[t._v('于是, 我通过 "顺藤摸瓜" 的方式, 从知识树的主干开始做广度或是深度遍历, 于是我就得到了一整棵的知识树. 这种 "顺藤摸瓜" 的记忆方式让我记住了很多知识. '),a("strong",[t._v("最重要的是, 当出现一些我不知道的知识点时, 我就会往这棵知识树上挂, 而这样一来, 也使得我的学习更为系统和全面")]),t._v(".")]),t._v(" "),a("p",[t._v("这种"),a("strong",[t._v("画知识图")]),t._v("的方式可以让你从一个技术最重要最主干的地方出发开始遍历所有的技术细节, 也就是画地图的方式. 如果你不想在知识的海洋中迷路, 你需要有一份地图, 所以, "),a("strong",[t._v("学习并不是为了要记忆那些知识点, 而是为了要找到一个知识的地图, 你在这个地图上能通过关键路径找到你想要的答案")]),t._v(".")]),t._v(" "),a("h5",{attrs:{id:"_4-小结-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-小结-16"}},[t._v("#")]),t._v(" 4.小结")]),t._v(" "),a("p",[t._v("总结一下今天的内容. 首先, 我强调了, 挑选知识和信息源的重要性, 因为优质的信息源可以让你事半功倍. 其次, 我认为一定要注重基础和原理, 基础打牢, 学什么都快, 而学得快就会学得多, 学得多, 就会思考得多, 对比得多, 结果是学得更快.")]),t._v(" "),a("p",[t._v("最后, "),a("strong",[t._v("我指出学习时一定要使用知识图, 学习并不是为了要记忆那些知识点, 而是为了要找到一个知识的地图, 你在这个地图上能通过关键路径找到你想要的答案")]),t._v(". 我相信, 只要掌握了好的方法, 你能做到的话, 你的学习效率一定提升很快.")]),t._v(" "),a("h4",{attrs:{id:"高效学习-深度-归纳和坚持实践"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高效学习-深度-归纳和坚持实践"}},[t._v("#")]),t._v(" 高效学习:深度,归纳和坚持实践")]),t._v(" "),a("h5",{attrs:{id:"_1-系统地学习"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-系统地学习"}},[t._v("#")]),t._v(" 1.系统地学习")]),t._v(" "),a("p",[t._v("在学习某个技术的时候, 我除了会用到上篇文章中提到的知识图, 还会问自己很多个为什么. 于是, 我形成了一个更高层的知识脑图. 下面我把这这个方法分享出来. 当然学习一门技术时, Go 语言也好, Docker 也好, 我都有一个"),a("strong",[t._v("学习模板")]),t._v(". 只有把这个学习模板中的内容都填实了, 我才罢休. 这个模板如下.")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("这个技术出现的背景, 初衷和要达到什么样的目标或是要解决什么样的问题")]),t._v(". 这个问题非常关键, 也就是说, 你在学习一个技术的时候, 需要知道这个技术的成因和目标, 也就是这个技术的灵魂. 如果不知道这些的话, 那么你会看不懂这个技术的一些设计理念.")]),t._v(" "),a("li",[a("strong",[t._v("这个技术的优势和劣势分别是什么, 或者说这个技术的 trade-off 是什么")]),t._v(". 任何技术都有其好坏, 在解决一个问题的时候, 也会带来新的问题. 另外, 一般来说, 任何设计都有 trade-off(要什么和不要什么), 所以你要清楚这个技术的优势和劣势, 以及带来的挑战.")]),t._v(" "),a("li",[a("strong",[t._v("这个技术适用的场景")]),t._v(". 任何技术都有其适用的场景, 离开了这个场景, 这个技术可能会有很多槽点, 所以学习技术不但要知道这个技术是什么, 还要知道其适用的场景. 没有任何一个技术是普适的. 注意, 所谓场景一般分别两个, "),a("strong",[t._v("一个是业务场景, 一个是技术场景")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("技术的组成部分和关键点")]),t._v(". 这是技术的核心思想和核心组件了, 也是这个技术的灵魂所在了. 学习技术的核心部分是快速掌握的关键.")]),t._v(" "),a("li",[a("strong",[t._v("技术的底层原理和关键实现")]),t._v(". 任何一个技术都有其底层的关键基础技术, 这些关键技术很有可能也是其它技术的关键基础技术. 所以, 学习这些关键的基础底层技术, 可以让你未来很快地掌握其它技术. 可以参看我在 CoolShell 上写的 Docker 底层技术那一系列文章.")]),t._v(" "),a("li",[a("strong",[t._v("已有的实现和它之间的对比")]),t._v(". 一般来说, 任何一个技术都会有不同的实现, 不同的实现都会有不同的侧重. 学习不同的实现, 可以让你得到不同的想法和思路, 对于开阔思维, 深入细节是非常重要的.")])]),t._v(" "),a("p",[t._v("基本上来说, 如果你按照我上面所提的这 6 大点来学习一门技术, 你一定会学习到技术的精髓, 而且学习的高度在一开始就超过很多人了. 如果你能这样坚持 2-3 年, 我相信你一定会在某个领域成为炙手可热的佼佼者.")]),t._v(" "),a("h5",{attrs:{id:"_2-举一反三"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-举一反三"}},[t._v("#")]),t._v(" 2.举一反三")]),t._v(" "),a("p",[t._v("举一反三的道理人人都知道, 所以在这里我并不想讨论为什么要举一反三, 而是想讨论如何才能有举一反三的能力. 我认为人与人最大的差别就是举一反三的能力. 那些聪明的或者是有经验的人举一反三起来真是太令人惊叹.")]),t._v(" "),a("p",[t._v("我觉得一个人的举一反三能力, 可以分解成如下三种基本能力.")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("联想能力")]),t._v(". 这种能力的锻炼需要你平时就在不停地思考同一个事物的不同的用法, 或是联想与之有关的其他事物. 对于软件开发和技术学习也一样.")]),t._v(" "),a("li",[a("strong",[t._v("抽象能力")]),t._v(". 抽象能力是举一反三的基本技能. 平时你解决问题的时候, 如果你能对这个问题进行抽象, 你就可以获得更多的表现形式. "),a("strong",[t._v("抽象能力需要找到解决问题的通用模型")]),t._v(", 比如数学就是对现实世界的一种抽象. 只要能把现实世界的各种问题建立成数据模型(如建立各种维度的向量), 就可以用数学来求解, 这也是机器学习的本质.")]),t._v(" "),a("li",[a("strong",[t._v("自省能力")]),t._v(". 所谓自省能力就是自己找自己的难看. 当你得到一个解的时候, 要站在自己的对立面来找这个解的漏洞. 有点像左右手互博. 这种自己和自己辩论的能力又叫思辨能力. 将自己分裂成正反方, 左右方, 甚至多方, 站在不同的立场上来和自己辩论, 从而做到不漏过一个 case, 从而获得完整全面的问题分析能力.")])]),t._v(" "),a("p",[t._v("在这方面, 我对自己的训练如下.")]),t._v(" "),a("ol",[a("li",[t._v("对于一个场景, 制造出各种不同的问题或难题.")]),t._v(" "),a("li",[t._v("对于一个问题, 努力寻找尽可能多的解, 并比较这些解的优劣.")]),t._v(" "),a("li",[t._v("对于一个解, 努力寻找各种不同的测试案例, 以图让其健壮.")])]),t._v(" "),a("p",[t._v("老实说, 要获得这三种能力, 除了你要很喜欢思考和找其它人来辩论或讨论以外, 还要看你自己是否真的善于思考, 是否有好奇心, 是否喜欢打破沙锅问到底, 是否喜欢关注细节, 做事是否认真, 是否严谨...")]),t._v(" "),a("p",[t._v("这一系列的能力最终能构建出你强大的思考力, 而这个思考力会直接转换成你的求知和学习能力. 其实我也是在不断地加强自己的这些能力.")]),t._v(" "),a("h5",{attrs:{id:"_3-总结和归纳"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-总结和归纳"}},[t._v("#")]),t._v(" 3.总结和归纳")]),t._v(" "),a("p",[a("strong",[t._v("对自己的知识进行总结和归纳是提高学习能力的一个非常重要的手段")]),t._v(". 这是把一个复杂问题用简单的语言来描述的能力. 就像我小时候上学时, 老师让我们写文章的中心思想一样. 这种总结和归纳能力会让你更好地掌握和使用知识.")]),t._v(" "),a("p",[t._v("也就是说, 我们"),a("mark",[a("strong",[t._v("把学到的东西用自己的语言和理解重新组织并表达出来, 本质上是对信息进行消化和再加工的过程, 这个过程可能会有信息损失, 但也可能会有新信息加入, 本质上是信息重构的过程")])]),t._v(".")]),t._v(" "),a("p",[a("strong",[t._v("我们积累的知识越多, 在知识间进行联系和区辨的能力就越强, 对知识进行总结和归纳也就越轻松")]),t._v(". 而想要提高总结归纳的能力, 首先要多阅读, 多积累素材, 扩大自己的知识面, 多和别人讨论, 多思辨, 从而见多识广.")]),t._v(" "),a("p",[t._v("不过, 需要注意的是, 如果只学了部分知识或者还没有学透, 就开始对知识进行总结归纳, 那么总结归纳出来的知识结构也只能是混乱和幼稚的. 因此, "),a("strong",[t._v("学习的开始阶段, 可以不急于总结归纳, 不急于下判断, 做结论, 而应该保留部分知识的不确定性, 保持对知识的开放状态")]),t._v(". 当对整个知识的理解更深入, 自己站的位置更高以后, 总结和归纳才会更有条理. "),a("strong",[t._v("总结归纳更多是在复习中对知识的回顾和重组, 而不是一边学习一边就总结归纳")]),t._v(".")]),t._v(" "),a("p",[t._v("来总结一下做总结归纳的方法: "),a("mark",[a("strong",[t._v("把你看到和学习到的信息, 归整好, 排列好, 关联好, 总之把信息碎片给结构化掉, 然后在结构化的信息中, 找到规律, 找到相通之处, 找到共同之处, 进行简化, 归纳和总结, 最终形成一种套路, 一种模式, 一种通用方法")])]),t._v(".")]),t._v(" "),a("p",[t._v("要训练自己这方面的能力, 你需要多看一些经典的方法论图书, 看看别人是怎样总结和归纳知识的. 你可以在一开始模仿并把自己的理解的知识给写出来, 写博客会是一种很好的方式. 另外一种更好的方式是讲一遍给别人听. 总之, 你需要把你总结归纳的知识公开出来, 给别人看, 接受别人的批评和反馈, 这样你才能成长得更快. 其实, 我也在锻炼这样的能力.")]),t._v(" "),a("p",[t._v("如果你在 Coolshell 上看过我写的《"),a("a",{attrs:{href:"https://coolshell.cn/?s=TCP%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF",target:"_blank",rel:"noopener noreferrer"}},[t._v("TCP 的那些事儿"),a("OutboundLink")],1),t._v("》, 你就能知道我对《TCP/IP 详解》这本这么厚的书以及一些日常工作经验的总结, 我写成了两篇比较简单的博客. 你需要像我一样扩大自己的知识面, 然后学会写博客, 就能慢慢地拥有这种能力了. 这种将信息删减, 精炼和归纳的方法, 可以让你的学习能力得到快速的提升. 当你这么做的时候, 一方面是在锻炼你抓重点的能力, 另一方面是在锻炼你化繁为简的能力. 这两种能力都是让你高效学习的能力.")]),t._v(" "),a("p",[t._v("最后, 还想说一下, 一般来说, 拥有这样能力的人, 都需要有在更高的维度上思考问题的能力. 比如一些名人的金句, 就是这种能力的体现. 这种能力需要你非常深入的思考, 需要你的阅历和经验, 当然和聪明人在一起也是提升这种能力的最有效的选择.")]),t._v(" "),a("h5",{attrs:{id:"_4-实践出真知"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-实践出真知"}},[t._v("#")]),t._v(" 4.实践出真知")]),t._v(" "),a("p",[t._v("所谓"),a("mark",[a("strong",[t._v("实践出真知, 也就是学以致用")])]),t._v(", 不然只是纸上谈兵, 误国误民. 只有实践过, 你才能对学到的东西有更深的体会. 就像我看 《Effective C++》和《More Effective C++》这两本书一样, 一开始看的时候, 我被作者的那种翻来覆去不断找到答案又否定自己的求知精神所折服. 但是, 作者的这种思维方式只有在我有了很多的实践和经验(错误)后, 才能够真正地体会为什么是这样的.")]),t._v(" "),a("p",[t._v("这两书不厚, 但是, 我看了十多年, 书中的很多章节我都可以背出来, 但是我想得到的不是这些知识, 而是这种"),a("strong",[t._v("思维方式")]),t._v(", 这需要我去做很多的编程工作才能真正明白, 才会有斯科特·迈耶斯(Scott Meyers)那样的思维方式, 这才是最宝贵的.")]),t._v(" "),a("p",[t._v("另外, 实践出真知也就是英文中的 "),a("strong",[t._v("Eat your own dog food")]),t._v(". 吃自己的狗粮, 你才能够有最真实的体会. 那些大公司里的开发人员, 写完代码, 自己不测试, 自己也不运维, 我实在不知道他们怎么可能明白什么是好的设计, 好的软件? 不吃自己的狗粮, 不养自己的孩子, 他们就不会有痛苦, 没有痛苦, 就不会想改进, 没有改进的诉求也就不会有学习的动力, 没有学习, 就不会进步, 没有进步就只会开发很烂的软件...不断地恶性循环下去.")]),t._v(" "),a("p",[t._v("实践是很累很痛苦的事, 但只有痛苦才会让人反思, 而反思则是学习和改变自己的动力. Grow up through the pain, 是非常有道理的.")]),t._v(" "),a("h5",{attrs:{id:"_5-坚持不懈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-坚持不懈"}},[t._v("#")]),t._v(" 5.坚持不懈")]),t._v(" "),a("p",[t._v("坚持不懈是一句正确的废话. 前段时间, 我在我的读者群中发起了一个名为 ARTS 的活动. "),a("strong",[t._v("每人每周写一个 ARTS: Algorithm 是一道算法题, Review 是读一篇英文文章, Technique/Tips 是分享一个小技术, Share 是分享一个观点")]),t._v(". 我希望大家可以坚持一年, 但是我也相信, 能够坚持下来的人一定很少, 绝大多数人都是虎头蛇尾的, 但是我依然相信会有人坚持下来的.")]),t._v(" "),a("p",[t._v("坚持是一件反人性的事, 所以它才难能可贵, 也更有价值. 我从 2003 年写 blog 到今天 15 年了, 看书学习写代码, 我都会一点一点的坚持. 人不怕笨, 怕的是懒, 怕的是找到各种理由放弃.")]),t._v(" "),a("p",[t._v("这里我想鼓励一下你. 现在很多国外的在线视频课都是 3-5 分钟一节课, 一共 20 节课, 总时长不到两个小时. 然而你会发现, 能坚持看完的不到千分之一. 当年 Leetcode 只有 151 道题的时候, 一共有十几万人上来做题, 但全部做完的只有十几个, 万分之一. 所以只要你能坚持, 就可以超过这个世界上绝大多数人. 想一想, 如果全中国有 100 万个程序员, 只要你能坚持学习技术 2-3 年, 你就可以超过至少 99 万人了(可能还更多).")]),t._v(" "),a("p",[t._v("当然, 坚持也不是要苦苦地坚持, 有循环有成就感的坚持才是真正可以持续的. 所以, "),a("strong",[t._v("一方面你要把你的坚持形成成果晒出来, 让别人来给你点赞, 另一方面, 你还要把坚持变成一种习惯, 就像吃饭喝水一样, 你感觉不到太多的成本付出. 只有做到这两点, 你才能够真正坚持")]),t._v(".")]),t._v(" "),a("h5",{attrs:{id:"_6-小结-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-小结-6"}},[t._v("#")]),t._v(" 6.小结")]),t._v(" "),a("p",[t._v("总结一下今天的内容. 我分享了系统学习, 举一反三, 总结归纳, 实践出真知和坚持不懈等几个方面的内容.")]),t._v(" "),a("ul",[a("li",[t._v("在系统学习中, 我给出了我学习时用的学习模板, 它不但有助于你学习到技术的精髓, 更能帮你提升你的学习高度. 坚持几年, 你一定能在某个领域成为炙手可热的佼佼者.")]),t._v(" "),a("li",[t._v("在举一反三中, 我分享了如何获得这种能力的方法.")]),t._v(" "),a("li",[t._v("在总结和归纳中, 我指出, 积累的知识越多, 在知识间进行联系和区辨的能力越强, 总结归纳的能力越强, 进而逐渐形成在更高维度上思考问题的能力.")]),t._v(" "),a("li",[t._v("在实践出真知中, 我阐明了实践的重要性, 并认为, 只有实践过, 才能对学到的东西有更深的体会.")]),t._v(" "),a("li",[t._v("最后, 我强调, 虽然学习方法很重要, 但坚持不懈更为重要, 并给出了怎样做才能让自己对学习这件反人类的事儿坚持不懈.")])]),t._v(" "),a("h4",{attrs:{id:"高效学习-如何学习和阅读代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高效学习-如何学习和阅读代码"}},[t._v("#")]),t._v(" 高效学习:如何学习和阅读代码")]),t._v(" "),a("h5",{attrs:{id:"_1-读文档还是读代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-读文档还是读代码"}},[t._v("#")]),t._v(" 1.读文档还是读代码")]),t._v(" "),a("p",[t._v('杰夫·阿特伍德(Jeff Atwood)说过这么一句话: "'),a("a",{attrs:{href:"https://blog.codinghorror.com/code-tells-you-how-comments-tell-you-why/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Code Tells You How, Comments Tell You Why"),a("OutboundLink")],1),t._v('". 我把其扩展一下:')]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("代码 = What, How & Details")])]),t._v(" "),a("li",[a("strong",[t._v("文档/书 = What, How & Why")])])]),t._v(" "),a("p",[t._v("可见, "),a("strong",[t._v("代码并不会告诉你 Why")]),t._v(", 看代码只能靠猜测或推导来估计 Why, 是揣测, 不准确, 所以会有很多误解. "),a("strong",[t._v("而且, 我们每个人都知道, Why 是能让人一通百通的东西, 也是能让人醍醐灌顶的东西")]),t._v(".")]),t._v(" "),a("p",[t._v("但是, "),a("strong",[t._v("代码会告诉你细节")]),t._v(", 这是书和文档不能给你的. "),a("strong",[t._v("细节是魔鬼, 细节决定成败")]),t._v(". 这样的话我们不但听过很多, 我们做技术的也应该体会过很多. 当然也要承认, 这些代码细节给人带来的快感毕竟不如知道 Why 后的快感大(至少对我是这样的).")]),t._v(" "),a("p",[a("strong",[t._v("书和文档是人对人说的话, 代码是人对机器说的话")]),t._v("(注: 代码中有一部份逻辑是控制流程的逻辑, 不是业务逻辑). 所以:")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("如果你想知道人为什么要这么搞, 那么应该去看书")]),t._v("(像 Effective C++, Code Complete, Design Pattern, Thinking in Java 等), "),a("strong",[t._v("看文档")]),t._v(".")]),t._v(" "),a("li",[t._v("**如果你要知道让机器干了什么? 那你应该看代码! ** (就像 Linus 去看 zlib 的代码来找性能问题. )")])]),t._v(" "),a("p",[t._v("因此我认为都比较重要, 关键看你的目的是什么了.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("如果你想了解一种思想, 一种方法, 一种原理, 一种思路, 一种经验, 恐怕, 读书和读文档会更有效率一些")]),t._v(", 因为其中会有作者的思路描述. 像 Effective C++ 之类的书, 里面有很多对不同用法和设计的推敲, TCP/IP 详解里面也会有对 TCP 算法好坏的比较...这些思维方式能让你对技术的把握力更强, 而光看代码很难达到这种级别.")]),t._v(" "),a("li",[a("strong",[t._v("如果你想了解的就是具体细节, 比如某协程的实现, 某个模块的性能, 某个算法的实现, 那么你还是要去读代码的")]),t._v(", 因为代码中会有更具体的处理细节(尤其是对于一些 edge case 或是代码技巧方面的内容).")])]),t._v(" "),a("p",[t._v("另外看看下面的几个现象, 你可以自己比较一下.")]),t._v(" "),a("ul",[a("li",[t._v("很多时候, 我们去读代码, 那是因为没有文档, 或是文档写得太差.")]),t._v(" "),a("li",[t._v("很多时候, "),a("strong",[t._v("在 Google, Stack Overflow, GitHub 过后, 你会发现, 你掌握的知识就是一块一块的碎片, 既不系统, 也不结构化, 更别说融会贯通了. 你会觉得自己需要好好地读一本书, 系统地掌握知识. 你的这种感觉一定很强烈吧")]),t._v(".")]),t._v(" "),a("li",[t._v("很多时候, 在读别人代码的时候, 你会因为基础知识或是原理不懂, 或是你在不知道为什么的情况下, 要么完全读不懂代码, 要么会误解代码. 比如, 如果你没有 C 语言和 TCP 原理方面的基础知识, 就根本读不懂 Linux 下 TCP 的相关代码. 我们因为误解代码用意而去修改代码造成的故障还少吗?")]),t._v(" "),a("li",[t._v("很多时候, 看到一个算法或是一个设计时, 比如 Paxos, 你是不是会想去看一下这个算法的实现代码是什么样的? 思考一下如何才能实现得好? (但是如果你没看过 Paxos 的算法思想, 我不认为你光看代码实现, 就能收获 Paxos 的思想. )")]),t._v(" "),a("li",[t._v("很多时候, "),a("strong",[t._v("当你写代码的时候, 你能感觉得到自己写的代码有点别扭, 怎么写都别扭, 这个时候, 你也会有想去看别人的代码是怎么实现的冲动")]),t._v(".")])]),t._v(" "),a("p",[t._v('类似的情况还有很多, 但从代码中收获大, 还是从书中收获大, 在不同的场景, 不同的目的下, 会有不同的答案. 这里谈一谈人的学习过程吧. 从学习的过程中, 来分析一下看代码和看书这两个活动. 人对新事物的学习过程基本都是从"感性认识"到"理性认识"的.')]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("如果你是个新手, 那应该多读代码, 多动手写代码")]),t._v(', 因为你需要的是"感性认识", 这个时候"理性认识"你体会不到. 一是因为, 你没有切身的感受, 即便告诉你 Why 你也体会不到. 另一方面, 这个阶段, 你要的不是做漂亮, 而是做出来. 所以在'),a("strong",[t._v("新手阶段, 你会喜欢 GitHub 这样的东西")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v('如果你是个老手, 你有多年的"感性认识"了, 那么你的成长需要更多的"理性认识"')]),t._v(" . 因为这个阶段, 一方面, 你会不满足于做出来, 你会想去做更牛更漂亮的东西; 另一方面, 你知道的越多, 你的问题也越多, 你迫切地需要知道 Why! 这时你需要大量地找牛人交流(读牛人的书, 是一种特殊的人与人的交流), 所以"),a("strong",[t._v("这个阶段, 你会喜欢读好的书和文章")]),t._v(".")])]),t._v(" "),a("p",[t._v("然而, 对于计算机行业这个技术创新能力超强, 技术种类繁多的行业来说, 每个人都既是新手, 也是老手.")]),t._v(" "),a("h5",{attrs:{id:"_2-如何阅读源代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-如何阅读源代码"}},[t._v("#")]),t._v(" 2.如何阅读源代码")]),t._v(" "),a("p",[t._v("首先, 在阅读代码之前, 我建议你需要有下面的这些前提再去阅读代码, 这样你读起代码来会很顺畅.")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("基础知识")]),t._v(". 相关的语言和基础技术的知识.")]),t._v(" "),a("li",[a("strong",[t._v("软件功能")]),t._v(". 你先要知道这个软件完成的是什么样的功能, 有哪些特性, 哪些配置项. 你先要"),a("strong",[t._v("读一遍用户手册")]),t._v(", 然后让软件跑起来, 自己先用一下感受一下.")]),t._v(" "),a("li",[a("strong",[t._v("相关文档")]),t._v(". 读一下相关的内部文档, Readme 也好, Release Notes 也好, Design 也好, Wiki 也好, 这些文档可以让你明白整个软件的方方面面. 如果你的软件没有文档, 那么你只能指望这个软件的原作者还在, 而且他还乐于交流.")]),t._v(" "),a("li",[a("strong",[t._v("代码的组织结构")]),t._v(". 也就是代码目录中每个目录是什么样的功能, 每个文档是干什么的. 如果你要读的程序是在某种标准的框架下组织的, 比如: Java 的 Spring 框架, 那么恭喜你, 这些代码不难读了.")])]),t._v(" "),a("p",[t._v("接下来, 你要了解这个软件的代码是由哪些部分构成的, 我在这里给你一个列表, 供你参考.")]),t._v(" "),a("ol",[a("li",[a("p",[a("strong",[t._v("接口抽象定义")]),t._v(". 任何代码都会有很多接口或抽象定义, 其描述了代码需要处理的数据结构或者业务实体, 以及它们之间的关系, 理清楚这些关系是非常重要的.")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("模块粘合层")]),t._v(". 代码有很多都是用来粘合代码的, 比如中间件(middleware), Promises 模式, 回调(Callback), 代理委托, 依赖注入等. 这些代码模块间的粘合技术是非常重要的, 因为它们会把本来平铺直述的代码给分裂开来, 让你不容易看明白它们的关系.")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("业务流程")]),t._v(". 这是代码运行的过程. 一开始不要进入细节, 但需要在高层搞清楚整个业务的流程是什么样的, 在这个流程中, 数据是怎么被传递和处理的. 一般来说, 需要画程序流程图或者时序处理图.")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("具体实现")]),t._v(". 了解上述的三个方面的内容, 相信你对整个代码的框架和逻辑已经有了总体认识. 这个时候, 你就可以深入细节, 开始阅读具体实现的代码了. 对于代码的具体实现, 一般来说, 你需要知道下面一些事实, 这样有助于你在阅读代码时找到重点.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("代码逻辑")]),t._v(". 代码有两种逻辑, 一种是业务逻辑, 这种逻辑是真正的业务处理逻辑; 另一种是控制逻辑, 这种逻辑只是用控制程序流转的, 不是业务逻辑. 比如: flag 之类的控制变量, 多线程处理的代码, 异步控制的代码, 远程通讯的代码, 对象序列化反序列化的代码等. 这两种逻辑你要分开, 很多代码之所以混乱就是把这两种逻辑混在一起了(详情参看《编程范式游记》).")]),t._v(" "),a("li",[a("strong",[t._v("出错处理")]),t._v(". 根据二八原则, 20% 的代码是正常的逻辑, 80% 的代码是在处理各种错误, 所以, 你在读代码的时候, 完全可以把处理错误的代码全部删除掉, 这样就会留下比较干净和简单的正常逻辑的代码. 排除干扰因素, 可以更高效地读代码.")]),t._v(" "),a("li",[a("strong",[t._v("数据处理")]),t._v(". 只要你认真观察, 就会发现, 我们好多代码就是在那里倒腾数据. 比如 DAO, DTO, 比如 JSON, XML, 这些代码冗长无聊, 不是主要逻辑, 可以不理.")]),t._v(" "),a("li",[a("strong",[t._v("重要的算法")]),t._v(". 一般来说, 我们的代码里会有很多重要的算法, 我说的并不一定是什么排序或是搜索算法, 可能会是一些其它的核心算法, 比如一些索引表的算法, 全局唯一 ID 的算法, 信息推荐的算法, 统计算法, 通读算法(如 Gossip)等. 这些比较核心的算法可能会非常难读, 但它们往往是最有技术含量的部分.")]),t._v(" "),a("li",[a("strong",[t._v("底层交互")]),t._v(". 有一些代码是和底层系统的交互, 一般来说是和操作系统或是 JVM 的交互. 因此, 读这些代码通常需要一定的底层技术知识, 不然, 很难读懂.")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("运行时调试")]),t._v(". 很多时候, 代码只有运行起来了, 才能知道具体发生了什么事, 所以, 我们让代码运行进来, 然后用日志也好, debug 设置断点跟踪也好. 实际看一下代码的运行过程, 是了解代码的一种很好的方式.")])])]),t._v(" "),a("p",[t._v("总结一下, 阅读代码的方法如下:")]),t._v(" "),a("ul",[a("li",[t._v('一般采用自顶向下, 从总体到细节的"剥洋葱皮"的读法.')]),t._v(" "),a("li",[t._v("画图是必要的, 程序流程图, 调用时序图, 模块组织图...")]),t._v(" "),a("li",[t._v("代码逻辑归一下类, 排除杂音, 主要逻辑才会更清楚.")]),t._v(" "),a("li",[t._v("debug 跟踪一下代码是了解代码在执行中发生了什么的最好方式.")])]),t._v(" "),a("p",[t._v("对了, 阅读代码你需要一个很好的 IDE. 我记得以前读 C 和 C++ 代码时, 有一个叫 source insight 的工具就大大提高了我的代码阅读效率. 说白了就是可以查看代码间相互的调用 reference 的工具, 这方面 Visual Studio 做得是非常好的.")]),t._v(" "),a("h5",{attrs:{id:"_3-小结-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-小结-15"}},[t._v("#")]),t._v(" 3.小结")]),t._v(" "),a("p",[t._v('总结一下今天的内容. 我先跟你探讨了"是读文档, 还是读代码", 分析对比了从文档和代码中各自能收获到哪些东西, 然后给出建议, 如果想了解思想, 方法和原理, 读书和读文档会更有效率; 如果想知道具体细节, 还是应该读代码. 随后分享了一些我阅读代码和源代码时候的方法和技巧. 希望对你有启发.')]),t._v(" "),a("h4",{attrs:{id:"高效学习-面对枯燥和量大的知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高效学习-面对枯燥和量大的知识"}},[t._v("#")]),t._v(" 高效学习:面对枯燥和量大的知识")]),t._v(" "),a("h5",{attrs:{id:"_1-如何面对枯燥的知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-如何面对枯燥的知识"}},[t._v("#")]),t._v(" 1.如何面对枯燥的知识")]),t._v(" "),a("p",[t._v("首先要知道, 为什么会有枯燥的知识? 一般来说, 枯燥的东西通常是你不感兴趣的东西, 而你不感兴趣的东西, 可能是你并不知道有什么用的东西. 这样的知识通常是比较底层或是抽象度比较高的知识, 比如: 线性代数, 或者一些操作系统内部的原理...越理论的东西就越让人觉得枯燥.")]),t._v(" "),a("p",[t._v("我还记得, 当初上大学学习《计算机网络》时, 直接学习那个七层协议, 以及那些报文, 让我感觉枯燥得不行. 那个时候, 完全不知道这些东西有什么用, 因为我连网络是什么都没有见过. 直到有一天, 我在老师的公司里看到了网卡, 网线和 Hub, 然后了解了 Windows NT 的域和 IP 地址, 然后用 Power Builder 连上了 SQL Server, 用 SQL 写入并读取了数据, 我才真正明白网络原来有这么好玩.")]),t._v(" "),a("p",[t._v("我开始学习《TCP/IP 详解》, 又感到一阵枯燥. 然后, 有一个同事给我递来了《Unix 网络编程》, 我照着其中的例子, 写了一个聊天服务器, 前端用 Delphi 写了一个 QQ 的样子, 那种兴奋劲就别提了. 再后来, 因为要处理网络问题, 调优网络性能, 我才发现, 以前随便学了点的《TCP/IP 详解》对我在排查网络问题上有很大的帮助. 这个时候, 我才认真地看了这本书, 也正是这个时候, 才算是真正读进去了.")]),t._v(" "),a("p",[t._v("后来, 我让我团队的一个人学《TCP/IP 详解》这本书, 他发现有点难啃就买了一本《图解 TCP/IP》. 我找来一看, 发现这种图文并茂的书真是增加了很不错的阅读体验, 一下子就觉得不是很枯燥了. 这让我回想起来那本《从一到无穷大》的相对论科普书, 简单, 一点也不枯燥. 然而, 能把这么复杂的问题用这么简单的语言讲清楚的一定是这个领域的大牛了.")]),t._v(" "),a("p",[t._v("我列举我的这个学习过程, 就是想说, 如果你发现有些知识太过于枯燥, 那么可以通过下面的方法解决.")]),t._v(" "),a("ol",[a("li",[t._v("这个知识对于你来说来"),a("strong",[t._v("太高级")]),t._v("了, 你可能不知道能用在什么地方.")]),t._v(" "),a("li",[t._v("人的认知是从感性认识向理性认识转化的, 所以, 你可能要先去找一下应用场景, 学点更实用的, 再回来学理论.")]),t._v(" "),a("li",[t._v("学习需要"),a("strong",[t._v("有反馈, 有成就感")]),t._v(", 带着相关问题去学习会更好.")]),t._v(" "),a("li",[t._v("当然, 找到牛人来给你讲解, 也是一个很不错的手段.")])]),t._v(" "),a("h5",{attrs:{id:"_2-如何面对大量的知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-如何面对大量的知识"}},[t._v("#")]),t._v(" 2.如何面对大量的知识")]),t._v(" "),a("p",[t._v("看过《程序员练级攻略》的朋友们, 一定会有这样的疑问, 东西太多了, 怎么学. 我给你的建议是, "),a("strong",[t._v("一点一点学, 一口一口吃")]),t._v(". 你可以使用我前面说过的那些方法, 注重基础, 画知识图, 多问为什么, 多动手, 然后坚持住, 哪怕你每周就学一个知识点, 你一年也可以学到 50 个知识点. 只要你在进步, 总有一天可以把这些知识学到手的.")]),t._v(" "),a("p",[t._v("当然, 你的目的不是学完这些知识, 因为学无止境, 你永远也学不完, 所以你"),a("strong",[t._v("在学习时, 一定不要学在表面上, 一定要学到本质, 学到原理上, 那些东西是不容易变的, 也是经得住时间考验的")]),t._v(". 把学习当成投资, 这是这个世界上回报最好的投资.")]),t._v(" "),a("p",[t._v("带着问题去学习, 带着要解决的东西去学习, 带着挑战去学习, 于是每当你解决了一个问题, 做了一个功能, 完成了一个挑战, 你就会感到兴奋和有成就感. 这样你也就找到了源源不断的学习驱动力.")]),t._v(" "),a("p",[t._v("把你学习的心得, 过程, 笔记, 代码分享出来, 找到和你一同学习的人, 因为一个人长跑很辛苦, 有人同行就会好很多, 就算没有人同行, 你的读者, 你的观众也会为你鼓掌加油, 这些也是让你持续前行的动力.")]),t._v(" "),a("h5",{attrs:{id:"_3-认真阅读文档"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-认真阅读文档"}},[t._v("#")]),t._v(" 3.认真阅读文档")]),t._v(" "),a("p",[t._v("我发现很多技术问题都是出在技术人员不认真读技术手册上, 我自己也一样. 在我的成长生涯中, 我发现很多答案或其实都在文档中, 而我却没有仔细地去读一下. 可能是, 我们都不想投入太多的时间吧.")]),t._v(" "),a("p",[t._v("在这里我想说, 用户手册(User Manual)一定要好好地读一读, 很多很多提示都在里面了, 这是让你可以少掉很多坑的法宝. 比如: Unix 和 Linux 的 man, Docker 和 Kubernetes 的官方文档, Git 的操作文档... 你的很多很多问题的答案都在这些文档中.")]),t._v(" "),a("p",[t._v("举个例子, 很多年前, 我掉了一个坑, 我把这个问题记录在了文章《 "),a("a",{attrs:{href:"https://blog.csdn.net/haoel/article/details/1388498",target:"_blank",rel:"noopener noreferrer"}},[t._v("C/C++ 返回内部静态成员的陷阱"),a("OutboundLink")],1),t._v(" 》中.  其中提到了一个函数 "),a("code",[t._v("char *inet_ntoa(struct in_addr in);")]),t._v(', 我还批评了一下这个函数. 然而, 只要你 man 一下这个函数, 就可以看到: "The string is returned in a statically allocated buffer, which subsequent calls will overwrite".')]),t._v(" "),a("p",[t._v("还有, 很多中国的文档都会教人把 tcp_tw_recycle 和 tcp_tw_resue 这两个参数打开. 然而只要你 man 一下 "),a("a",{attrs:{href:"http://man7.org/linux/man-pages/man7/tcp.7.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("TCP(7)"),a("OutboundLink")],1),t._v(" , 就可以看到这样的描述:")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/6460476db40ac46f637860fddf9b112c-20230731162102-wvpnd1y.png",alt:""}})]),t._v(" "),a("p",[t._v("你就可以看到这两个参数都是"),a("strong",[t._v("不建议被打开")]),t._v("的.")]),t._v(" "),a("p",[t._v("认真阅读用户手册不但可以让你少掉很多坑, 同时还能让你学习到很多.")]),t._v(" "),a("h5",{attrs:{id:"_4-其它几个实用的技巧"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-其它几个实用的技巧"}},[t._v("#")]),t._v(" 4.其它几个实用的技巧")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("用不同的方式来学习同一个东西")]),t._v(". 比如: 通过看书, 听课, 创建脑图, 写博客, 讲课, 解决实际问题, 等等.")]),t._v(" "),a("li",[a("strong",[t._v("不要被打断")]),t._v(". 被打断简直就是学习的天敌, 所以在学习的时候, 最好把手机设置成勿扰模式放在一边, 然后把电脑上的所有通知也关掉, 最好到一个别人找不到你的地方.")]),t._v(" "),a("li",[a("strong",[t._v("总结压缩信息")]),t._v('. 当你获得太多的信息时, 你需要有一个"压缩算法". 我常用的压缩算法是只关心关键点, 所以你需要使用表格, 图示, 笔记或者脑图来帮助你压缩信息.')]),t._v(" "),a("li",[a("strong",[t._v("把未知关联到已知")]),t._v(". 把你新学的知识点关联到已知的事物上来. 比如, 你在学习 Go 语言, 你就把一些知识关联到自己已经学过的语言上比如 C 和 Java. 通过类比, 你会学得更扎实, 也会思考得更多.")]),t._v(" "),a("li",[a("strong",[t._v("用教的方式来学习")]),t._v(". 你想想, 如果你过几天要在公开场合对很多人讲一个技术, 那么这个压力会让你学得更好. 因为要教给别人, 所以这么高的标准需要你不但要把自己已掌握的东西学好, 还要把周边的也一并学了, 才可能做到百问不倒. 你才敢去教别人, 不是么?")]),t._v(" "),a("li",[a("strong",[t._v("学以致用")]),t._v(". 把学到的东西用起来, 没有什么比用起来能让你的知识更巩固的了. 在实践中, 你才会有更为真实的体会, 你才会遇到非常细节和非常具体的问题, 这些都会让你重新思考, 或深化学习.")]),t._v(" "),a("li",[a("strong",[t._v("不要记忆")]),t._v(". 聪明的人不会记忆知识的, 他们会找方法, 那些可以"),a("strong",[t._v("推导出知识或答案的方法")]),t._v(". 这也是为什么外国人特别喜欢方法论.")]),t._v(" "),a("li",[a("strong",[t._v("多犯错误")]),t._v(". 犯错会让你学得到更多, 通过错误总结教训, 你会比没有犯过错的人体会得更深. 但是千万不要犯低级错误, 也不要同一个错误犯两次.")])]),t._v(" "),a("p",[t._v("如果你有更好的一些技巧, 欢迎你分享出来.")]),t._v(" "),a("h5",{attrs:{id:"_5-小结-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-小结-17"}},[t._v("#")]),t._v(" 5.小结")]),t._v(" "),a("p",[t._v("总结一下今天的内容. 首先我先分析了为什么会有枯燥的知识. 我认为, 枯燥的知识通常是你不感兴趣的知识, 也有可能是你不知道有什么用的东西. 然后, 结合自己的经历给出了面对枯燥的知识时该怎样做. 此外, 我们身处在信息爆炸时代, 如何面对如此量大的知识, 也是我们面临的一个挑战. 我建议一定不要学在表面上, 一定要学到本质上, 原理上, 一定要学那些不容易改变, 能经得住时间考验的东西.")]),t._v(" "),a("h3",{attrs:{id:"高效沟通"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高效沟通"}},[t._v("#")]),t._v(" 高效沟通")]),t._v(" "),a("p",[t._v("下面是《高效沟通》系列文章的目录.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/28550",target:"_blank",rel:"noopener noreferrer"}},[t._v("Talk 和 Code 同等重要"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/32619",target:"_blank",rel:"noopener noreferrer"}},[t._v("沟通阻碍和应对方法"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/32796",target:"_blank",rel:"noopener noreferrer"}},[t._v("沟通方式及技巧"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/32902",target:"_blank",rel:"noopener noreferrer"}},[t._v("沟通技术"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/33112",target:"_blank",rel:"noopener noreferrer"}},[t._v("好老板要善于提问"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/41008",target:"_blank",rel:"noopener noreferrer"}},[t._v("好好说话的艺术"),a("OutboundLink")],1)])]),t._v(" "),a("h4",{attrs:{id:"高效沟通-talk和code同等重要"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高效沟通-talk和code同等重要"}},[t._v("#")]),t._v(" 高效沟通:Talk和Code同等重要")]),t._v(" "),a("p",[a("strong",[t._v("Talk is cheap, show me the code")]),t._v(", 是技术人常说的一句话, 也是技术社区中经常用的一句话. 这句话的意思是, 那些光说不练的人说一句是很简单的, 而写代码的人则会为一句话付出很多很多的精力, 其表明一个看上去再简单的东西, 用一行一行的代码实现起来, 并能让其运转起来也是一件很复杂很辛苦的事. 说得容易, 做起来难!")]),t._v(" "),a("p",[t._v("这句话是 Linus 说的, 也是我引入到中文社区的, 然而逐渐地, 大众对这句话的解读开始有点变味了, 走向了另外一个极端--他们觉得代码才是最重要的, 甚至其中有些人开始觉得真正的技术人员是只用代码说话的!")]),t._v(" "),a("p",[t._v("似乎, 这个世界上总是会有一些人, 当他们看到一个观点的时候, 在他们的脑袋里只有两个答案, 一个是 true, 如果不是 true, 那就是 false. 就好像只要一个人犯了个错误, 这个人就是一个不折不扣的大坏蛋, 如果一个人是个好人, 那他要在所有的地方都是优秀完美的.")]),t._v(" "),a("p",[t._v("对于技术人员来说, 其实 "),a("strong",[t._v("Talk 和 Code 是同样重要")]),t._v("的, Talk 是人对人说的话, 而 Code 也不仅仅只是人对机器说的话, 也更是另外一种人对人说的话(因为 Code 需要易读和易维护, 就需要让人读懂). 可见无论是 Code 还是 Talk 其实都是要和人交流的, "),a("strong",[t._v("Code 是间接交流, Talk 则是直接交流")]),t._v(". 在公司中工作, 需要了解公司的意图, 与团队一起做项目, 调研客户的需求, 设计出用户易操作的界面...你会慢慢地发现, 其实 Talk 并不 cheap, 而 Code 才是其中比较 cheap 的(注: 这是站在了另外一个角度).")]),t._v(" "),a("p",[t._v("一个好的程序员, 需要有好的学习能力, 这样你才能成为技术专家, 但是你还要有好的沟通能力, 不然你的技术能力完全发挥不出来. 就像一棵大树一样, 学习能力能让你的根越扎越深, 无论遇到什么狂风暴雨, 你都可以屹立不倒, 而沟通能力则是树杆和枝叶, 它们能让你伸展到更高更远的天空.")]),t._v(" "),a("p",[t._v('所以与人沟通是一项非常重要的软技能, 应该刻意训练和培养自己这方面的能力. 今天就来聊聊"技术人如何高效沟通"这一话题. 我会分享很多我的工作经验, 以及我这么多年来积累和总结的一些沟通技巧. 它们在我的工作和生活中都起到了至关重要的作用, 希望同样能给你一些启发. 我特别想对技术人员强调一下我的观点: '),a("strong",[t._v("有效的沟通是事业成功的必要条件")]),t._v(". 不管你的目标是成为一名卓越的管理者, 还是成为某个领域的技术牛人, 你都应该提高自己的沟通能力.")]),t._v(" "),a("h5",{attrs:{id:"_1-沟通的原理和问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-沟通的原理和问题"}},[t._v("#")]),t._v(" 1.沟通的原理和问题")]),t._v(" "),a("p",[t._v("想要获得高效的沟通, 首先需要知道, "),a("strong",[t._v("什么是沟通以及其背后的原理")]),t._v(". 简单来说, 沟通是指运用语言, 文字或一些特定的非语言行为(面部表情, 肢体动作等), 把自己的想法, 要求, 信息等内容传递给对方. 而沟通的原理跟计算机之间的通信有些类似. 我在大脑里面将要表达的内容根据通信协议(比如中文)进行编码, 发送出来, 你接收到中文信息, 但它表达的是什么意思呢? 这时就需要去解码.")]),t._v(" "),a("p",[t._v('然而, 日常生活中经常出现的一种情况是, 我这句话是这个意思, 但却被对方理解为其他意思, 即 "说者无心, 听者有意". 究其原因, 其实是因为每个人的编码器和解码器完全不匹配造成的, 这也是沟通中经常出现的问题.')]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/c85fc1caac454631cf04a4b9b390079d-20230731162102-947zwfq.png",alt:""}})]),t._v(" "),a("p",[t._v("那该怎样解决这个问题呢? 想象一下, 在计算机世界中, 遇到这个问题都是怎样解决呢? 也就是出现编码器和解码器不一样的情况, 怎么办? 通常可以通过一些"),a("strong",[t._v("约定")]),t._v('来解决这个问题. 对应到沟通这个场景下, "约定"仍然是个好办法. 我在一些国外公司工作过, 基本上入职之后的第一件事都是, 被告知公司里面有很多术语, 在描述对应的事物时要用统一的术语. 就好像江湖中的黑话一样, 这就是通讯协议的标准化, 这样可以简化很多沟通的成本.')]),t._v(" "),a("p",[t._v("此外, "),a("strong",[t._v("反馈")]),t._v("也是个很好的方式, 你把你理解的东西说给我听. 如果有偏差, 我再给你解释一下, 直到双方达成"),a("strong",[t._v("共识")]),t._v('. 这就好像 TCP 协议一样, 为了保证对方收到了, 就需要接收方发出确认包. 因为发送方和接收方的解码器不一样, 所以, 接收方把其解码的信息再编码后传回来, 发送方这边再解码看看是不是同样的数据, 于是就可以保证编码器和解码器中的信息是一致的了. 这又叫"双工通信"(你看, 我开始用到术语了, 文科生听不懂了, 嘿嘿), 不要小看"双工"这事儿, 它是有效沟通的前提. 反之, 则会有鸡同鸭讲, 对牛弹琴的意味了.')]),t._v(" "),a("p",[t._v('当然, 就算是统一术语并且有反馈机制, 人与人的沟通依然还是有很多的问题. 最大的一个问题就是, 我们的成长背景不一样, 经历不一样, 知识储备不一样, 所以对相同事物的理解难免会存在一定的偏差. 日常沟通可能还好一点, 但涉及到一些专业领域中术语的表达, 沟通不畅的问题会变得更为严重. 比如, 我在讲一些计算机术语, 而那些没有计算机方面知识储备的人, 是完全听不懂的. 即便他能听懂我说的每一个字, 但还是理解不了我在说什么. 所以这个世界上有一些 "教 6 岁孩子学习 XXX" 的文章, 这种方式其实就是想把一些高级的知识通过低级知识来表达出来, 以便可以让小孩子都能听懂, 也就是所谓的科普. 相信我, 如果你能做到这点, 你一定是这个行业的专家级人物了.')]),t._v(" "),a("p",[t._v("就像那本相当经典的图书《"),a("a",{attrs:{href:"https://book.douban.com/subject/27182584/",target:"_blank",rel:"noopener noreferrer"}},[t._v("从一到无穷大"),a("OutboundLink")],1),t._v("》, 其实它在讲的是高阶物理知识, 其中有非常难以理解的爱因斯坦相对论, 然而这本书却被作者写成了中学生都可以读懂的科普书. 能把深奥的物理知识写得这么通俗易懂, 只有真正的专家才可以做到. 这本书的作者是: 乔治·伽莫夫(George Gamow)美籍俄裔物理学家, 宇宙学家, 科普作家, 热大爆炸宇宙学模型的创立者, 也是最早提出遗传密码模型的人.")]),t._v(" "),a("p",[t._v('信息在传递中的损失也不容忽视. 相信很多人都玩过一个类似"传话"的游戏: 一个人将一句话偷偷说给站在队首的人听, 然后他把自己听到的内容传给第二个人, 依次传下去, 直到队尾. 最后由队尾的人大声说出听到的内容. 很多时候这个最终的结果都会令人哭笑不得, 因为在传递的过程中, 最初的信息已经完全变了样子.')]),t._v(" "),a("p",[t._v('因为, 每一次信息的传递都是由不同的编码器和解码器完成的, 而传递信息所使用的协议(人类的语言)是很难准确地携带所有的信息的, 所以每一次编码和解码都会有信息的丢失和失真. 还有一些人会在其中有意无意地"加油添醋", 甚至加入"谣言", 导致整个信息传递过程被黑!')]),t._v(" "),a("p",[t._v('与之对应的, 如果一个公司层级越深, 那么执行力一定越差. 为什么呢? 因为老大的"旨意"一层一层往下传递, 传到最下面其实信息早就变了样儿. 基本的模式都是, 我听我的领导讲了, 自己理解了一下, 然后对下面的人讲. 经常会出现这样的情况, 最高层老板讲, 我要的是这个, 但最终员工交付的却是另外一个东西. 信息传递的渠道越多, 损失也会越大. 所以, 会有下面这张经典的图.')]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/26cf7e81973c1e67b50517f76911465a-20230731162102-vtcv16p.png",alt:""}})]),t._v(" "),a("p",[t._v("另一方面, 在职场里, 出于各种各样的原因, 有些领导不想直接把自己上级的话对自己下属去讲. 一方面, 要把其变成下属能理解的语言去讲, 他们觉得这样会更有效率, 下属不用管公司或是别人要什么, 只管好自己要干什么就好.")]),t._v(" "),a("p",[t._v("而另一方面也有政治上的原因, 他们把一些信息阻断了, 甚至修改了, 以此来达到控制别人的目的. 通常来说, 只要有等级存在, 职场中的管理层就会对上粉过饰非, 对下盘剥利诱, 这就是职场的生存法则, 尤其是大公司更是这样. 所以, 公司大了后, 如果管理跟不上, 听之任之, 上层和下层脱节基本上来说是必然的.")]),t._v(" "),a("p",[t._v('对我而言, 不管以前做公司管理层, 还是现在经营自己的公司, 我一直都秉承的原则是, 将信息源头的信息原模原样分享出去, 而不是我"嚼过的". 因为, 我认为后者的信息损失会非常大, 而且产生的不良后果也会很大. 真正的团队管理, 不应该屏蔽信息, 信息应该是公开透明的, 因为我相信团队成熟到可以面对各种信息, 并且是可以一起找解一起找出路的.')]),t._v(" "),a("h5",{attrs:{id:"_2-小结-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-小结-3"}},[t._v("#")]),t._v(" 2.小结")]),t._v(" "),a("p",[t._v("总结一下今天的内容. 在文章伊始我先强调了我的观点, Talk 和 code 同样重要, 有效的沟通是你事业成功的必要条件. 随后介绍了何为沟通及其背后的原理. 我认为, 沟通原理跟计算机世界中的通信原理有些类似. 由于编码器和解码器的不同, 会造成理解的偏差. 这个问题可以通过约定和反馈来解决, 也就是要先达成共识, 然后基于共识来进行沟通. 最后我阐述了一些沟通问题, 以及应对这些问题的方法.")]),t._v(" "),a("h4",{attrs:{id:"高效沟通-沟通阻碍和应对方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高效沟通-沟通阻碍和应对方法"}},[t._v("#")]),t._v(" 高效沟通:沟通阻碍和应对方法")]),t._v(" "),a("p",[t._v("了解了沟通原理和相关问题之后, 我们来系统地分析一下哪些因素会成为沟通中最主要的障碍, 并给出应对方法.")]),t._v(" "),a("h5",{attrs:{id:"_1-信息不准确"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-信息不准确"}},[t._v("#")]),t._v(" 1.信息不准确")]),t._v(" "),a("p",[t._v("对照我们在沟通原理中提到的沟通模型, 可以看到, 如果被编码的信息本身是错误的, 或是你的编码器中有 bug, 把信息编辑错了, 那么, 无论是你有多牛的沟通技巧, 采用多有效率的沟通方式, 都不可能表达清楚. 用词不当, 词不达意, 添油加醋, 断章取义, 歪曲事实...都是这类沟通方式最糟糕的表现.")]),t._v(" "),a("p",[t._v("针对这类情况, 我给出的建议是, "),a("strong",[t._v("在沟通之前, 首先要想清楚沟通的目的是什么, 然后整理自己的措辞")]),t._v(". 如果是一些比较重要的沟通, 最好可以把自己的想法写下来, 然后放一会儿, 再回过头来看, 想象一下如果是别人对自己讲这些话, 自己会怎么理解.")]),t._v(" "),a("p",[t._v("在实时交谈的过程中时, 面对一些容易让人产生误解, 或是自己感觉没有表达好的信息, 你需要停下来, 思考一下, 换个方式, 重新再来一次. 我也经常这样. 我会停一下, 告诉对方, 让他等一下, 给我一点时间来组织语言和逻辑, 或者说, 对不起, 我没表达好, 我换个思路重新说...")]),t._v(" "),a("p",[t._v("而当别人没有表达清楚的时候, 你要及时打断对方, 跟对方说, 你没有听懂, 你不知道这是什么意思, 是否可以重新澄清一下, 等等. 这都是我们日常沟通中惯用的手法. 而如果你明明知道你不懂却不好意思问的话, 这就是沟通中最大的阻碍了, 沟通就是要来来回回的确认.")]),t._v(" "),a("p",[t._v("这里的关键点是, 在信息不准确时, 节约时间已经没有意义了. "),a("strong",[t._v("沟通效率的关键不在于快, 而是准确")]),t._v("! 要做到这些, 你需要不断地练习, 多有几次准确表达自己, 成功沟通的经历, 就会驱使你的沟通表现越来越好. 在《程序员面试攻略》中, 我还分享了另一个方法, 就是多看多写, 养成写博客的习惯. 当你越来越能把复杂的事情写清楚的时候, 你的表达能力就会越好.")]),t._v(" "),a("h5",{attrs:{id:"_2-信息太多"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-信息太多"}},[t._v("#")]),t._v(" 2.信息太多")]),t._v(" "),a("p",[t._v("信息太多就等于没有信息. 有些人在交流的时候, 会先说一些无效信息或者与主题无关的干扰信息. 比如:")]),t._v(" "),a("ul",[a("li",[t._v("害怕别人可能不能理解, 就进行大量的前期铺垫和背景描述;")]),t._v(" "),a("li",[t._v("害怕得罪别人, 先花大量的时间进行解释和免责;")]),t._v(" "),a("li",[t._v("想把所有的东西都告诉对方, 在做 PPT 的时候, 放入了大量的文字而让人 get 不到重点;")]),t._v(" "),a("li",[t._v("怕别人听不进去, 唠唠叨叨, 车轱辘话来回说;")]),t._v(" "),a("li",[t._v("用各种各样的比喻来说明一个事, 但就是不直接说明这个事, 把大家搞得云里雾里的;")]),t._v(" "),a("li",[t._v("枝节太多, 跑题, 东拉西扯, 抓不住重点;")]),t._v(" "),a("li",[t._v("...")])]),t._v(" "),a("p",[t._v('我以前团队有个下属来跟我来说, "我最近工作很累, 压力很大..." 当时, 听他这么说, 我虽然表面故作镇定, 但心里面却是不安的, 我的直觉告诉我他可能接下来就要和我说离职了. 然后, 我开始安慰他, 再把话题偏到和他分享我以前遇到相似的情况时我是怎么怎么做的. 结果换来的是更多的解释, 他跟我表达更复杂的情况, 于是我又在帮他想办法...')]),t._v(" "),a("p",[t._v('这样你躲我闪的沟通持续了三十分钟之后, 我才搞明白他其实是只是想休假. 他想请一个星期以上的长假, 害怕申请不下来, 所以, 先给我解释这么多, 而我以为他要离开. 于是, 在我俩各自"心怀鬼胎"的环境下, 沟通变得越来越复杂了...')]),t._v(" "),a("p",[t._v('其实, 如果他第一句话就说: "我想请一周的假, 想休息休息", 我觉得有点长了, 自然会问他原因的, 如果我不觉得长, 我就马上给答案了. 但无论是哪种情况, 都不会像我以为他要离职这么复杂.')]),t._v(" "),a("p",[t._v("是的, "),a("strong",[t._v("不要绕弯子, 有话直说, 这是最高效的沟通方式. 这既是对对方的一种信任, 也是一种对自己的尊重. 这样沟通, 事情往往能得到更好的解决")]),t._v(".")]),t._v(" "),a("h5",{attrs:{id:"_3-没有交互"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-没有交互"}},[t._v("#")]),t._v(" 3.没有交互")]),t._v(" "),a("p",[t._v("没有交互的沟通是一种有些令人沮丧的交流方式, 这相当打击积极沟通的一方. 尤其是面对程序员, 开会也好, 分享也好, 我经常一个问题出去(比如: 想听听大家有什么意见, 我这么做有问题吗? 等等), 没有任何的回应, 一片寂静, 本来注视着你的眼神一下子都低下了头, 相当令我沮丧, 甚至有些令我不知所措.")]),t._v(" "),a("p",[t._v("于是, 沟通成了单向灌输, 沟通中的一方或者双方喋喋不休地说, 而且是只说不听, 各说各的. 这样不仅会把双方都搞得很疲倦, 而且问题一点儿也没有解决. 这样的沟通可以说是完全失败的, 只是在浪费时间. 遇到这种情况, 一定要学会止损. 也就是, 一旦意识到这样的情况发生, 就委婉终止这样的谈话, 想办法脱身. 而且还要反思自己和对方到底出了什么问题, 然后寻找有效沟通的方式和技巧.")]),t._v(" "),a("p",[t._v("这里多说一句, 有时候, 领导太过于威严, 或是太过于强势, 不听别人的观点, 就会导致别人不敢表达自己的想法, 或是觉得表达出来也没什么用. 时间一长, 就造成了没有交互的沟通.")]),t._v(" "),a("p",[t._v('不要觉得这样"发命令式"的沟通很好, 效率很高. 实际上, 你把你的员工当成不会思考的机器的话, 他们也就真的成为了不会思考的机器. 有一天, 你需要你的员工为你分担压力, 帮你贡献一些想法的时候, 你会发现你这堆员工简直就跟机器一样没有差别.')]),t._v(" "),a("p",[a("strong",[t._v("找到对方的兴趣点, 降低表达自己真实想法的门槛, 培养让大家畅所欲言的自由环境, 把自己的答案变成问题, 让其它人有参与感, 这样才可能有好的沟通, 也能够有好的结果")]),t._v(".")]),t._v(" "),a("h5",{attrs:{id:"_4-表达方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-表达方式"}},[t._v("#")]),t._v(" 4.表达方式")]),t._v(" "),a("p",[t._v("沟通中有两个非常重要的因素, 一是沟通的内容, 二就是表达方式和态度了. 同样的沟通内容, 以不同的表达方式说出来, 实现的效果也会大相径庭. 很多场景下, 人们以一种平等且互相尊重的态度进行交流的时候, 沟通一般都能得到顺利进行.")]),t._v(" "),a("p",[t._v("试想如果一方态度不好, 或者带着某种情绪, 用听起来轻蔑且粗鲁的方式跟你说话的话, 会出现什么样的结果? 这就解释了为什么人们有时会为一些琐碎小事儿而争论不休. 我们要尤其意识到, 很多时候沟通失败, 不是沟通内容出了问题, 是表达方式, 谈话的态度出了问题. 后面讲述沟通技巧的时候, 我会详细讲述这个问题.")]),t._v(" "),a("p",[t._v("老实说, 我有时候也会有这样的问题(就是那种情商为零的情况), 我也在努力克服, 努力改善中. 要做到这些可能只有读万卷书, 行万里路了...")]),t._v(" "),a("h5",{attrs:{id:"_5-二手信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-二手信息"}},[t._v("#")]),t._v(" 5.二手信息")]),t._v(" "),a("p",[t._v('由于信息在传递过程中会自然损失的特性, 导致即便在没有人为主观去篡改的情况下, 很多二手信息内容的准确度也是不够的. 这跟上面提到的"信息不准确"有些类似. 通常来说, 二手信息都是变味的信息, 这些变味的信息在很多时候是会是影响人的判断力的. 像道听途说, 以讹传讹之类的二手信息, 可能会让你做出严重的错误判断. 流言止于智者, 流言之所以能止于智者, 不是因为智者聪明, 而是智者会到信息源头上去求证.')]),t._v(" "),a("p",[t._v('在网上有很多关于我的传闻和一些八卦故事, 而且这些八卦是非常有生命的, 里面那些所谓的"当事人"把一些事描述得活灵活现的, 却基本没有人来找我求证是否真的是那样的? 我怎么想也想也不明白: 是我死了无法对证了, 还是现在的人喜欢看八卦喜欢到已经不关心事实了?')]),t._v(" "),a("p",[a("strong",[t._v("到信息的源头, 向当事人去求证, 会让这个世界更加和谐, 也会让你变得更有智慧")]),t._v(".")]),t._v(" "),a("h5",{attrs:{id:"_6-信道被黑"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-信道被黑"}},[t._v("#")]),t._v(" 6.信道被黑")]),t._v(" "),a("p",[t._v("我们做计算机的人都知道, 如果在网络通信的时候, 信息在传输过程中被有恶意的人修改会产生什么样的后果. 这就是信息不对称, 这个世界有太多的人喜欢玩信息不对称的游戏, 因为信息不对称了, 轻则可以牟利, 重则可以控制人的思想和行为. 挑拨离间, 散布谣言, 假传圣旨, 捏造事实, 欺上瞒下...就是这方面的示例. 所以你应该知道信息平等是有多重要的一件事了.")]),t._v(" "),a("p",[t._v("虽然有时候信息是负面的, 隐瞒可以让你获得短暂的宁静, 但是纸包不住火, 一个谎言需要用更多的谎言去弥补, 一旦被识破, 你得到的将是信用的破产和大众报复性的结果. 所以, 在面对负面信息的时候, 最好的方式不是隐瞒, 而是公开以及给出解决方案.")]),t._v(" "),a("p",[t._v('要解决信息被黑这个事, 只有一条路可以走, 那就是让信息公开透明, 将没有被"嚼过"的信息, 完整一致地传递给别人, 让大家用自己的想法去理解它. 尤其是在公司宣布一些变化的时候, 千万别嚼完了再告知下属. 但有些管理者会觉得, 信息公开透明之后就不好做管理了, 因为开启民智了. 这些人的想法是: 我就喜欢愚民, 员工傻一点我好管. 我让你加班你就加班, 我让你朝东你就朝东, 不会问我为什么朝东, 为什么不朝西.')]),t._v(" "),a("p",[t._v("但是我想说, 信息不对称只有短期利益, 没有长期利益. 短期来看, 团队成员听话, 团队好管理. 但长远来看, 这么做无疑是在剥夺员工自我成长的机会, 从而无法培养员工的自驱性和创造力. 当一个团队没有创造力, 不会思考的时候, 你还能走多远呢?")]),t._v(" "),a("h5",{attrs:{id:"_7-小结-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-小结-4"}},[t._v("#")]),t._v(" 7.小结")]),t._v(" "),a("p",[t._v("总结一下今天的内容. 在这篇文章中, 我介绍了最主要的六种沟通阻碍: 信息不准确, 信息太多, 没有交互, 表达方式, 二手信息和信道被黑, 给出了各种阻碍所带来的沟通问题, 同时给出了相应的解决办法. 希望能够启发你的思考, 并给你提供帮助.")]),t._v(" "),a("p",[t._v("下篇文章中, 我将分享一些行之有效的沟通方式和技巧. 敬请期待.")]),t._v(" "),a("h4",{attrs:{id:"高效沟通-沟通方式及技巧"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高效沟通-沟通方式及技巧"}},[t._v("#")]),t._v(" 高效沟通:沟通方式及技巧")]),t._v(" "),a("h5",{attrs:{id:"_1-沟通方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-沟通方式"}},[t._v("#")]),t._v(" 1.沟通方式")]),t._v(" "),a("p",[t._v("好的沟通方式有很多种, 我主要介绍最常用的三种: "),a("strong",[t._v("尊重, 倾听和情绪控制")]),t._v(".")]),t._v(" "),a("h6",{attrs:{id:"_1-尊重"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-尊重"}},[t._v("#")]),t._v(" (1)尊重")]),t._v(" "),a("p",[t._v("尊重对方在高效沟通中非常重要, 也是一个很关键的前提. 这里你需要记住以下两个原则.")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("我可以不同意你, 但是会捍卫你说话的权利")]),t._v(". 即便在你不认同对方观点的情况下, 也要尊重对方的表达, 认真聆听, 这个时候有可能你会发现不一样的东西, 从而改变自己最初不准确的认知.")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("赢得对方的尊重需要先尊重对方")]),t._v(". 在你对他人表现出足够的尊重之后, 同时你也能够赢得对方的尊重, 他会更乐于跟你交谈, 而且交流的内容也会更为细致和深入, 从而实现良好的沟通效果. 此外, 在这样的背景下, 当你和对方出现观点不一致的情况时, 对方也会更乐于聆听你, 并顺着你的思路去思考.")]),t._v(" "),a("p",[t._v("所以可以说, 尊重对方并赢得对方尊重的沟通方式, 通常会进行得比较深入, 沟通效果也会很不错.")])])]),t._v(" "),a("p",[t._v("注意尊重并不代表要低三下四, 随声附和, 做一个墙头草可以让别人很容易和你相处, 但要赢得对方的尊重, 这还远远不够, "),a("strong",[t._v("你一定要和对方有观点上的交互, 甚至是碰撞. 沟通的目的不是为了附和对方, 而是产生一种更完整更全面的认知")]),t._v(". 只有当双方都愿意接受不同的观点时, 此时的沟通才会迸发出更多的火花, 而这一切都需要发生在相互尊重的基础之上.")]),t._v(" "),a("h6",{attrs:{id:"_2-倾听"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-倾听"}},[t._v("#")]),t._v(" (2)倾听")]),t._v(" "),a("p",[t._v('《沟通的艺术》一书中将"倾听"定位为至少与"说"同等重要的沟通形式, 足以见其重要性. 作者认为, 倾听与听或者听到有很大不同, 它是解读别人所说信息的过程, 包含听到, 专注, 理解, 回应和记忆五大元素.')]),t._v(" "),a("p",[t._v("上面的说法有点高大上, 我们还是实在一点. 我们之所以要倾听, 就是因为倾听可以让我们获得更多信息, 对对方有更多的了解. 倾听能让对方感觉到自己被尊重, 所以才会跟你分享更多的信息. 这其实是沟通中的高级技巧, 因为当你掌握了对方很多信息时, 你就可以了解这个人, 也就对你越有利. 所以, 面试的时候, 一般来说会面试的面试官基本上都不多说话, 都是在听你讲, 你讲的越多, 他就了解你越多. 那些电视里访谈类节目中的主持人都是很厉害的倾听高手, 因为他们要挖到被采访人更多的信息.")]),t._v(" "),a("p",[t._v("你一定要学会倾听, 掌握到更多的信息, 因为掌握不了足够的信息就会信息不对称, 信息不对称就会做出错误的假设. 尤其是在谈判的时候, 你觉得他的利益点是这个, 而实际上他的利益点可能是另外一个. 所以, 倾听其实不仅仅只是听, 还要思考, 要思考更深层的原因, 不要被表象所迷惑, 才会有更高效率的沟通, 这才有助于你做出正确的决定.")]),t._v(" "),a("h6",{attrs:{id:"_3-情绪控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-情绪控制"}},[t._v("#")]),t._v(" (3)情绪控制")]),t._v(" "),a("p",[t._v("能否控制好自己的情绪对于沟通效果来说至关重要. 如果动不动就生气或者心怀戒心, 通常会令沟通很难进行, 更不用说实现高效沟通. 如果能控制好自己的情绪, 时刻保持理性思考, 这不仅会使所沟通问题得到顺利解决, 而且能给对方留下好的印象, 进而形成良好的人际关系. 我们都会说某个人的 EQ 比较高, 并不是说这个人很会说话, 很会说话, 有随机应变能力的人通常都是 IQ 高, EQ 高的人一般都是可以控制自己情绪的人.")]),t._v(" "),a("p",[t._v("具体该怎样做呢? 我建议遵循以下两个原则.")]),t._v(" "),a("ul",[a("li",[a("mark",[a("strong",[t._v("不要过早或者过度打岔和反驳")])]),t._v(". 倾听对方, 即便有不同意见, 也要耐心地听对方说完, 不要打岔或反驳. 断章取义是件非常可怕的事儿, 因为当你听对方完整讲述完之后, 很多时候会改变自己在聆听过程中的某些想法或者看法. 此外, 打断别人说话, 是很不礼貌的事儿, 次数多了, 会给对方留下坏印象.")]),t._v(" "),a("li",[a("mark",[a("strong",[t._v("求同存异, 冷静客观")])]),t._v(". 每个人的知识储备不同, 生长环境不同, 经历和性格等也不同, 所以看待和理解问题时, 自然会有很大差异. 所以, 要懂得尊重这些差异, 客观公正地思考问题, 并给出相应的建议和看法. "),a("strong",[t._v("切莫在冲动之下, 说出很多一些过分或过激的话, 因为言语的力量是巨大的, 杀伤力有时难以预估")]),t._v(". 举一个有些极端的例子. 假如你和铁哥们儿吵架了, 对方一气之下, 打了你两拳, 你很有可能过两天就忘记了. 但是如果对方说了几句伤你心的话, 这种伤心则有可能会持续很久很久, 甚至你们可能会因此而绝交.")])]),t._v(" "),a("p",[t._v("人是有情感的动物, 并不是所有的人都能够控制得住自己的情绪的, 尤其是血气方刚的年轻人. "),a("strong",[t._v("有时候, 我会自己告诫自己, 情绪是自己的, 不是别人的, 不应该被别人 hack 了")]),t._v(". 所以, 无论发生什么事, 自己才是自己心情的主人, 而不是别人. 话虽这样说, 但是要做到并不容易. 有时候, 我也不能很好控制我的情绪, 到今天都还不行, 这也是我要用一生去成长的事...")]),t._v(" "),a("h5",{attrs:{id:"_2-沟通技巧"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-沟通技巧"}},[t._v("#")]),t._v(" 2.沟通技巧")]),t._v(" "),a("p",[t._v("掌握了上面的沟通方式, 下面来看几个我经常用的沟通技巧.")]),t._v(" "),a("h6",{attrs:{id:"_1-引起对方的兴趣"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-引起对方的兴趣"}},[t._v("#")]),t._v(" (1)引起对方的兴趣")]),t._v(" "),a("p",[t._v("第一是"),a("strong",[t._v("引起对方的兴趣")]),t._v(". 如果对方没有兴趣的话, 那么他是不愿意跟你沟通的. 但你要怎样引起对方的兴趣呢? 我现在也在创业. 我出去跟客户谈, 我技术好, 是没有用的. 只有利益, 才能引起对方的兴趣.")]),t._v(" "),a("p",[t._v("举一个真实的例子, 为了找一家银行谈合作, 我找了一堆关系, 给我介绍了某个银行的副行长. 见面的时候我的着装有些随意, 而周围的人都穿着衬衫和西裤, 很正式. 估计要不是别人介绍的, 他一眼都不想看我, 几句话就能把我打发了.")]),t._v(" "),a("p",[t._v("他一开始就问我: 你是谁? 你们公司叫什么名字? 没听说过. 注册资本多少? 哎呀几十万呀……我被这几个问题搞得非常地狼狈和不堪, 完全不知道该怎么往下继续. 在这样的情况下, 如果你是我你会怎么办呢? 该怎样吸引他的兴趣呢?")]),t._v(" "),a("p",[t._v("真实情况是我只用了 20 分钟时间就搞定了这件事. 我分享一下, 我是怎么做到的.")]),t._v(" "),a("p",[t._v("首先, 我见他之前做了一些功课, 收集了一些信息. 银行和金融业, 今年下半年整个形势都是很糟糕的, 银行贷款都办不了. 国家货币在紧缩, 还有 P2P 这些乱七八糟的事儿. 于是我就跟他说, 我这边有一个客户, 这个客户的现金流比较大, 一天的流水大概是 3-5 个亿...")]),t._v(" "),a("p",[t._v("还没等我讲完, 他就打断了我, 立马说: 哦? ! 请坐, 那个谁, 过来倒点儿水……当一个人对你有兴趣了以后, 后面的事就比较好谈了. 当然, 我并不是在忽悠他, 我做的技术项目本来就是为大规模并发的场景而生的, 所以, 能用得上这些技术的用户基本上来说都是有一定的业务量的, 也是有相应的现金流的...")]),t._v(" "),a("h6",{attrs:{id:"_2-直达主题-强化观点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-直达主题-强化观点"}},[t._v("#")]),t._v(" (2)直达主题,强化观点")]),t._v(" "),a("p",[t._v("第二是"),a("strong",[t._v("直达主题, 强化观点")]),t._v(". 要做到这点, 你需要做的是过滤信息, 简明扼要地表达. 信息不要空泛笼统, 而要可以准确执行. 亚马逊要求员工都有一个技能叫做 deal with ambiguity. ambiguity 就是歧义的, 模糊的, 不知道怎么执行的. 工程师的情结通常是我写出来的代码 1 就是 1, 0 就是 0.")]),t._v(" "),a("p",[t._v("但很多时候产品需求都是很模糊的. 而且很多时候, 整个世界都是模糊的, 有歧义的. 有的人这么说, 有的人那么说. 你都不知道自己该信谁. 所以亚马逊要求员工有一个能力就是, 你一定要有把模糊的理解变成准确理解的能力, 因为如果不这样, 你是写不出代码来的.")]),t._v(" "),a("p",[t._v("这种过滤掉无用或者非关键信息的能力很重要. **确定自己的目标, 学会抓重点, 知道自己要什么和不要什么, 这样你要的才会更鲜明. 当一些事情变得简明和鲜明起来时, 你才会表现出有力量的观点和话语. 而这些被强化过的观点和话语, 只需要一句, 就会在对方脑子里形成一个小爆点, 要么击中了对方的软处(扎心), 要么会让对方产生深度思考. **只有这样, 你的信息才算是真正地传达过去, 并在对方的脑子里生根发芽, 这就是所谓的影响力!")]),t._v(" "),a("p",[t._v('要有这样的能力, 你需要通过反复练习来获得. 在表达之前, 要想明白自己表达的目的是什么, 先组织一下自己要表达的内容, 然后结合自己的表达目的反思这些信息中, 哪些是有用信息, 哪些是无用信息. 留下有用信息之后, 思考是否有更加简单明了的表达方式, 是不是可以一句话就行. 当你开始把大量的信息提炼浓缩成"金句"的时候, 你就真正开始成为沟通的高手了.')]),t._v(" "),a("p",[t._v('这里有个小技巧是换位思考, 假设你自己获取到这样的信息会怎样理解和执行, 甚至可以尝试多维度来理解, 自己跟自己"互搏", 逐渐修正, 直到令自己满意. 这个过程需要花不少心思, 也需要长时间的坚持和锻炼. 你要对自己有信心.')]),t._v(" "),a("h6",{attrs:{id:"_3-基于数据和事实"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-基于数据和事实"}},[t._v("#")]),t._v(" (3)基于数据和事实")]),t._v(" "),a("p",[t._v("第三是"),a("strong",[t._v("用数据和事实说话")]),t._v('. 你跟别人沟通, 要尽量少说"可能, 也许, 我觉得就这样"等字眼, 你最好通过数据和证据, 通过权威的引用和证词, 通过相关的实例和亲身的事例来让你的观点有不可被辩驳不可被质疑的特性. 当你的信息出现了这样的特性时, 接收信息的人, 基本上来说, 就会无条件地相信. 别人会无条件地相信你说的话, 你想想这是一种多么牛的沟能方式!')]),t._v(" "),a("p",[t._v("我记得我在亚马逊的时候, 产品经理整天在数据仓库里做各种的统计和分析, 然后拿着数据来说服老板和开发人员开一个新的项目. 当那些数据和事实放在你面前时, 你真的是只有认命的份儿了.")]),t._v(" "),a("p",[t._v("所以, 在很多时候, 我们要在沟通之前注意收集相关的数据和事实, 多做一些沟通相关的功课, 你的沟通会更有效率. 基本上来说, 数据, 事实, 证据和权威是沟通中的大规模杀伤性武器!")]),t._v(" "),a("h5",{attrs:{id:"_3-小结-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-小结-16"}},[t._v("#")]),t._v(" 3.小结")]),t._v(" "),a("p",[t._v("总结一下今天的内容. 简单来说, 在沟通过程中, 你要牢记三大沟通方式: 尊重对方, 倾听对方和情绪控制, 从今天开始, 你就可以在和别人沟通的时候刻意练习这几大沟通方式了. 然后我还和你分享了几个对我帮助很大的沟通技巧.")]),t._v(" "),a("ul",[a("li",[t._v("一是沟通之前, 你要想方设法引起对方的兴趣, 这里面你要思考对方最关注什么, 你可以帮到他什么.")]),t._v(" "),a("li",[t._v("二是直达主题, 强化观点, 要做到这一点, 你需要过滤信息, 简明扼要地表达. 也就是说你要明确自己的沟通目的, 然后围绕目的不断迭代自己的表达内容. 同时, 你可以用换位思考法来进一步确保自己的表达能够准确无误传递给对方.")]),t._v(" "),a("li",[t._v('三是用数据和实例说话. 沟通的时候, 你应该尽量少用"可能", "也许"之类不确定的话术, 转而使用数据和实例等确定性的语言来夯实你的观点, 当然, 这中间你要学会如何积累"实例".  这三样东西不仅可以帮你解决绝大多数问题, 而且可以把你的沟通变得简单粗暴, 直接有效.')])]),t._v(" "),a("p",[t._v("采用这样的方式和技巧, 我想你基本上可以解决 80%-90% 以上的沟通问题了. 还是那句话, 我能做到的, 你一定也可以. 加油!")]),t._v(" "),a("h4",{attrs:{id:"高效沟通-沟通技术"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高效沟通-沟通技术"}},[t._v("#")]),t._v(" 高效沟通:沟通技术")]),t._v(" "),a("p",[t._v("上篇文章中我分享了一些常用的沟通方式: 尊重, 倾听和情绪控制, 并给出了几个我认为很不错的沟通技巧, 比如: 引起对方的兴趣; 过滤信息, 简明扼要地表达; 用数据和实例说话. 这篇文章中, 我来分享几个关键的沟通技术, 相信掌握了这几大沟通法宝, 你的沟通水平会大幅提升.")]),t._v(" "),a("h5",{attrs:{id:"_1-逻辑"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-逻辑"}},[t._v("#")]),t._v(" 1.逻辑")]),t._v(" "),a("p",[t._v("你的逻辑能力一定要强. 因为中国人从小就不学逻辑学, 所以讲话不注重逻辑, 而理科生尤其是学过数学的程序员是懂逻辑的, 所以, 对于程序员来说, 是可以用缜密逻辑疯狂地碾压别人的.")]),t._v(" "),a("p",[t._v("逻辑是一门科学, 也是一门数学. 谁是谁的充分条件, 必要条件或充要条件, 以及有没有关联关系, 有没有因果关系等, 这些东西你要做到心中有数, 当对方的表达中出现逻辑错误时, 你可以随时指出来. 比如这两个事儿没有因果关系, 不要把它们放在一起谈.")]),t._v(" "),a("p",[t._v("有一次, 我就跟一家公司的产品团队 PK 了一下. 这家公司的产品有一个视频下载功能, 但他们统计数据发现, 有大约 40% 的用户下载到一半就取消下载操作了. 于是他们就想提高用户的下载体验, 解决办法是模仿微信的绿色进度条的做法: 让进度条的 90% 嗖地过去, 然后最后的 10% 则对应实际剩下的下载进度.")]),t._v(" "),a("p",[t._v('通过逻辑分析, 不难发现这样做是不能赢得用户的. 他们的逻辑是: "用户看到已经下载 90% 了, 然后会想那 10% 很快就能下载好, 所以会愿意多等一会儿. 而不是下载 10% 就让用户等了半天, 那他就不想等了." 这里的前置条件是用进度条欺骗用户, 后置条件是用户愿意等待下载.')]),t._v(" "),a("p",[t._v("但是不是进度条这样设计了以后, 用户就真的愿意等到下载完成呢? 不是的. 不需要试验, 脑补一下, 当微信打不开网页, 或者打开速度超过我们的心理忍受限度时, 无论那个进度条是多少, 我们都不会等的. 有这么一个逻辑在这里卡着.")]),t._v(" "),a("p",[t._v("基于这种逻辑, 我跟他们说, 这种进度条设计会导致更低的下载率. 因为视频通常比较大, 下载的总时间是很长的, 绝大多数用户对这个速度是没有概念的. 打开网页的时间是很短的, 90% 的网页在 3, 4 秒内就打开了, 只有少数偶尔需要 5 秒到 10 秒才能打开(因为移动网络的问题).")]),t._v(" "),a("p",[t._v('这时, 我可以通过这种"就快完"的手段把用户多留下来一会儿. 但是, 视频下载无论怎样优化, 至少需要半分钟, 才能下载下来. 此时, 如果进度条不能反映真实进度的话, 用户对总的打开时间是没有合理预期的, 90% 的进度提前到了, 剩下的 10% 花那么久, 很容易让人认为是下载卡死了, 从而放弃, 乃至在多次重试无果后对应用和平台都失去兴趣.')]),t._v(" "),a("p",[t._v("所以, 这样的进度条设计只是用户愿意等一小下(15 秒以内)的充分条件(还不一定是必要条件), 并不是用户愿意等待直到视频下载完成的充分条件或必要条件.")]),t._v(" "),a("p",[t._v("在这样的逻辑面前, 产品经理立马取消了这个功能的排期, 说还需要想一想. 你看, 你可以用你的一些逻辑推理去分析问题的前因后果和条件, 然后用这个条件来说服他.")]),t._v(" "),a("p",[t._v("在逻辑层面说服对方, 是一种非常高级的手段, 就像懂微积分的人来解数学题一样, 那些不懂微积分的只有被碾压的份儿了.")]),t._v(" "),a("h5",{attrs:{id:"_2-信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-信息"}},[t._v("#")]),t._v(" 2.信息")]),t._v(" "),a("p",[a("strong",[t._v("信息要全面, 准确")]),t._v(". 这里重点提一下 X/Y 问题. X/Y 问题是一件非常讨厌的事情. 有时候我们拿着 Y 问题去找别人, 问到一半才知道, 我们原来要问的是 X 问题.")]),t._v(" "),a("p",[t._v('Stack Overflow 上有个问题, 问的是"怎么截取一个字符串的最后三位? "大家给了一堆答案. 突然有个人问: "你为什么要截取字符串的后三位? "他说: "我要找文件的扩展名". 实际上, 文件的扩展名不一定是 3 个字符, 而且有专门的函数干这个事儿, 不需要自己写. 这里, 取文件的扩展名, 这叫 X, 取文件名的最后 3 个字符, 这叫 Y. 他想知道 X, 但不知道该怎么说, 于是就说成了 Y, 导致别人都去解决一个不存在的问题. 这叫 X/Y Problem.')]),t._v(" "),a("p",[t._v("我可以告诉你, 这个世界上到处都是 X/Y 问题. 有些公司找我说, 我们要做分布式架构, 我们要做大中台, 我们要做线下线上融合……这些问题都是 Y 问题. 我都要反问, 你为什么要做分布式架构? 为了大规模营销, 为了稳定性, 还是为了加快开发速度? 做大中台, 你是为了什么?  是为了打通各个业务线, 为了快速开发, 还是为了技术输出? 等等. 要解的真实问题才是 X 问题, 手段都是 Y 问题. 只有你真正了解了 X 问题, 你才能真正明白整个事.")]),t._v(" "),a("p",[t._v("当你了解了 X 问题后, 你就要到源头, 来质疑或是改良他的 Y 问题, 甚至提出 Z 方案, 而对方会陷入被动, 被你牵着鼻子转.")]),t._v(" "),a("h5",{attrs:{id:"_3-维度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-维度"}},[t._v("#")]),t._v(" 3.维度")]),t._v(" "),a("p",[t._v("想一下, 人与人不同都是细节上的不同, 比如: 身高, 体重, 手机号等, 人与人的相同点都是在宏观上相同, 比如: 国籍, 性别...这告诉我们, 如果你要找不同就要到细节上去, 如果你要找共同, 就要到大局上去.")]),t._v(" "),a("p",[t._v("所以, 在和人争论时, 如果要反驳, 那一定是低维度反驳, 越细节越好. 而在说服对方时, 则要在高维度说服对方, 越宏观越好, 比如从公司的大目标出发. 高维度讲究的是求同存异. 你跟别人相同的东西一定是高维度的, 这就是大同, 而你跟别人不同的一定是非常细节的东西. 大同的东西, 更容易让人产生共鸣, 从而容易达成默契和共识.")]),t._v(" "),a("p",[t._v("因此, "),a("strong",[t._v("能够站在更高的维度来沟通是我们需要努力的目标")]),t._v('. 我们经常会听到类似的话: "哎呀, 大家都没有恶意. 我们虽然争论成这样, 但是大家都是为公司好, 只不过我们的路径不对. "或者"我们的目标是一样的, 但是我们的方式不一样. "能感觉到吧? 气氛一下子就缓和了好多.')]),t._v(" "),a("p",[t._v('站在更高的维度上讨论问题, 可以让你有大局观, 对方就会显得很小气, 导致对方也会不好意思, 于是就会出现"六尺巷"的故事中所描述的那种场景.')]),t._v(" "),a("h5",{attrs:{id:"_4-共同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-共同"}},[t._v("#")]),t._v(" 4.共同")]),t._v(" "),a("p",[a("strong",[t._v("这里讲的是共情, 共享, 共利, 共识以及换位思考")]),t._v(". 如果你能站在对方的角度思考问题, 那么你所想的问题以及所想沟通的内容, 一定会跟只想自己有很大不同. 同时, 你会神奇地发现, 换位思考能帮助你更为全面地理解并解决问题.")]),t._v(" "),a("p",[t._v('寻找"共同"的过程, 其实也可以理解成为化"敌"为"友"的过程. 我们不妨想象一下, 沟通双方剑拔弩张, 随时一触即发的情况, 和沟通双方有共同的目标一起思考和解决问题的状态, 哪种更能获得更好的结果. 而共同该怎样找, 跟我们在维度中提及的很相似, 就是从高维度, 寻找共同之处.')]),t._v(" "),a("p",[t._v("首先是共情, 跟对方相互分享各自的情感, 这是一种拉近距离最有效的手段, 然后是相互共享自己的观点, 在观点中寻求双方共同的利益点, 然后不断地循环, 一点一点地达成共识.")]),t._v(" "),a("h5",{attrs:{id:"_5-三本书"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-三本书"}},[t._v("#")]),t._v(" 5.三本书")]),t._v(" "),a("p",[t._v("此外我还想强调一点, "),a("strong",[t._v("无论干什么, 你一定要有一个非常犀利的观点, 也就是金句")]),t._v(". 如何得到这些金句呢? 一定要多看书. 你到那些公众号或者知乎里面看一些抖机灵的内容是没有用的. 抖机灵的金句没有用. 一定要是有思想深度的金句, 才有力量. 推荐你看三本书《"),a("a",{attrs:{href:"https://book.douban.com/subject/26871359/",target:"_blank",rel:"noopener noreferrer"}},[t._v("清醒思考的艺术"),a("OutboundLink")],1),t._v("》, 《"),a("a",{attrs:{href:"https://book.douban.com/subject/24754537/",target:"_blank",rel:"noopener noreferrer"}},[t._v("简单逻辑学"),a("OutboundLink")],1),t._v("》和《"),a("a",{attrs:{href:"https://book.douban.com/subject/5320866/",target:"_blank",rel:"noopener noreferrer"}},[t._v("重来"),a("OutboundLink")],1),t._v("》.")]),t._v(" "),a("p",[t._v("我是先被《重来》洗脑了, 这本书帮我开拓了眼界, 打破了我既有的思维模式, 让我反思过去习以为常的每一件事. 同时书中给出了实用, 可操作的建议, 让我头一次从心底感受到, 原来世界还可以如此不同.")]),t._v(" "),a("p",[t._v("然后, 我看了《清醒思考的艺术》, 这本书作者以显微镜般的观察发现人们常犯的 52 个思维错误, 并一一列出. 帮人们认识到错误的思维是如何发生, 从而避免掉入思维陷阱中. 看这本书的过程中, 我能明显感觉到自己的思维方式在被重新构造.")]),t._v(" "),a("p",[t._v("随后是《简单逻辑学》. 逻辑学是很枯燥的, 但这本书的作者以其简练而又充满趣味的笔触, 将逻辑学活化为一种艺术, 从它的基本原理, 到论证, 到非逻辑思维的根源, 再到 28 种就发生在人们身边的非逻辑思维形式, 带领我们进入这个精彩无比的逻辑世界, 体会妙趣横生的思维交锋, 跨过无处不在的逻辑陷阱, 让人沉醉其中, 欲罢不能.")]),t._v(" "),a("p",[t._v("这三本书对我影响很大, 也建议你好好读读, 能改善你的思维, 炼就你的火眼金睛. 你会发现自己跟和别人不在一个频道上, 你能看到事物更多的侧面, 在阐述观点时, 会比别人更加深刻, 犀利和有见地. 一些金句也会在你跟人互动交流时, 随机地冒出来. 你自己都能明显感觉到自己的气场要比其他人足.")]),t._v(" "),a("h5",{attrs:{id:"_6-小结-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-小结-7"}},[t._v("#")]),t._v(" 6.小结")]),t._v(" "),a("p",[t._v("总结一下今天的内容. 我们讲了沟通的四大关键技术: "),a("strong",[t._v("逻辑, 信息, 维度和共同")]),t._v(".")]),t._v(" "),a("p",[t._v("有逻辑的表达, 更容易说服对方. 信息全面准确, 更有利于让沟通的双方清楚定位问题, 从而更高效地解决问题.")]),t._v(" "),a("p",[t._v("维度是个很有趣的事儿, 有的时候要站在高维度去碾压对方; 有的时候要站在低维度去碾压对方. 如何把握这个度很重要. 如果站在客户的角度, 最好用高维度. 但如果站在技术细节的角度, 这是低维度. 高维度容易拉拢对方, 而在低维度更容易说服对方. 只不过低维度容易爆发冲突, 要恰当地控制好度.")]),t._v(" "),a("p",[t._v('最后一点是共同, 其实寻找共同的过程就是化"敌"为"友"的过程, 帮助大家在共赢的大思路和环境下, 共同思考问题的解, 从而实现高效沟通. 此外, 我强调了金句的重要性, 以及如何获得这些金句. 答案是没有捷径可走, 唯有多读书, 多思考, 才能慢慢获得.')]),t._v(" "),a("p",[t._v("下篇文章, 我们将进入《高效沟通》系列文章的实践部分, 分享一下该如何与员工沟通. 敬请期待.")]),t._v(" "),a("h4",{attrs:{id:"高效沟通-好老板要善于提问"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高效沟通-好老板要善于提问"}},[t._v("#")]),t._v(" 高效沟通:好老板要善于提问")]),t._v(" "),a("p",[t._v("前面的几篇文章中, 我分享了一些通用的沟通方法, 如尊重, 倾听和情绪控制等. 接下来的几篇文章中, 我将从如何与员工沟通, 如何与客户沟通, 以及如何与老板沟通这几个角度, 和你聊聊这些沟通方法具体应该如何应用. 作为一名团队 Leader, 你首先应该学会如何与团队成员进行有效沟通, 因为它是实现管理效果的必要手段和有效途径. 但如何拥有这个基本功呢? 我来分享一下我的经验.")]),t._v(" "),a("h5",{attrs:{id:"_1-引导"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-引导"}},[t._v("#")]),t._v(" 1.引导")]),t._v(" "),a("p",[t._v("我在汤森路透工作的时候, 曾经参加过一个管理上的培训课程. 这个培训课程的第一课就是教这些管理者如何在沟通中引导员工, 而不是给员工灌输自己的想法. 课程里强调, 管理者要想尽一切办法让员工自己思考问题, 想出答案; 而不是灌输, 什么事儿都是自己在想, 自己讲给员工听. 员工不想, 你怎么说, 他都很难把你的话理解到位, 也就是说你一定要让他自己把事情想出来.")]),t._v(" "),a("p",[t._v("这有点儿像电影《盗梦空间》说的, 你应该在思想里埋下一个种子. 我们要干的就是在员工的思想里埋一个种子, 让它生根发芽. 但这要怎样实现呢?")]),t._v(" "),a("p",[t._v("答案就是管理者要学会问问题, 问员工怎样做. 假如员工给出了一个方案, 但不巧, 可能由于他考虑得不全面, 或者由于他不知道某些情况, 不是你想要的答案. 这时, 该怎么办呢?")]),t._v(" "),a("p",[t._v("你可以说, 如果这么做的话, 会有一个什么问题, 而这个问题很重要, 如何解决? 然后, 他会给出解决这个问题的方法. 但这么做又会带来另一个问题, 直到把他逼到你想要的答案上去.")]),t._v(" "),a("p",[t._v("如果每次遇到问题, 都让他自己想答案, 次数多了以后, 他会觉得自己的参与感越来越多. 最后, 他会觉得是他用他的观点说服了你. 尽管这就是你想要的答案, 但你还是要假装被说服. 这样他会很开心的, 会有一种参与感. 然后, 在执行这件事儿的时候, 也会更加卖力, 更加有激情. 他会觉得自己在实现自己的想法, 而且自己的想法是对的.")]),t._v(" "),a("p",[t._v("作为 Leader, 你要记住, "),a("strong",[t._v("永远不要给员工答案, 要让员工给你答案, 而且不要只给一个答案, 一定要给多个答案")]),t._v(". 然后让他们比较这些答案, 促使他们深入地进行思考. 这不是在让员工做问答题, 其实是在给员工成长机会, 促进他们的成长.")]),t._v(" "),a("p",[t._v("永远不要跟员工说, 我给你一个任务, 这个任务两星期完成. 要让他来说, 这个任务需要多久能完成. 并要求员工提供多种执行方案, 不要只给一个时间. 你快点做怎么做, 慢点做怎么做, 是否还有其他方案. 一定要员工自己去做计划, 去思考. 反之, 如果你什么都想了, 只让员工去执行, 那么他就不思考了, 而且有时还会生出一些怨念. 比如抱怨领导这样安排不合理, 那个执行方案有问题等. 带有情绪的执行, 势必会产生不够好的执行结果.")]),t._v(" "),a("p",[t._v("但根据我的观察, 喜欢给答案的管理者还是挺多的, 他们总是习惯性地给员工答案, 而不善于挖掘员工的实力和潜力. 我觉得这是世界上最 Low 的管理模式了, 是家长式, 保姆式的管理. 实际上, 你的员工都是专业人才, 你应该充分信任他们, 并且想方设法激发他们的主观能动性, 促使他们发挥自己的能力, 积极地为你贡献答案, 从而保持团队的活力和创造力.")]),t._v(" "),a("h5",{attrs:{id:"_2-倾听-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-倾听-2"}},[t._v("#")]),t._v(" 2.倾听")]),t._v(" "),a("p",[t._v("倾听意味着在听他人讲话的时候, 不让自己的想法扭曲别人传递的信息. 你要做到毫无偏见, 才能全面理解对方的信息. 倾听不只是听或者听见, 需要你用心聆听别人讲话, 而不是只听自己想听到的内容. 如我在《沟通方式及技巧》一文中提到的, 倾听可以让员工感觉到自己被尊重, 所以他们会乐意分享更多的信息.")]),t._v(" "),a("p",[t._v("学会倾听不仅可以帮你拉近和员工的距离, 还可以让你更加了解员工. 我在汤森路透工作的时候, 团队里有两个刚毕业的小伙子. 一个来自农村, 一个来自城市. 来自农村的小伙子是家里老大, 家里条件不太好, 不仅要挣钱还自己的助学贷款, 还要帮家里还外债. 而那个来自城市的小伙子是家里老五, 上面是四个姐姐, 家里条件也相对比较好. 不用去想人物性格, 从这个背景里, 就能大致猜出这两个人的差距. 果不其然, 有四个姐姐的小伙子, 抗压能力相当低, 觉得什么活儿都有难度, 什么都适应不了.")]),t._v(" "),a("p",[t._v("而要还外债的小伙子抗压能力相当高, 没事儿就来跟我说, 你把什么任务都给我, 我什么都能搞定. 经过几年的努力, 他终于把家里的外债还干净了, 然后特别高兴, 请我吃饭. 我说, 你不用感谢我, 要感谢你自己, 是你自己做得多. 通过这个例子, 我想说明, 通过倾听更多地了解员工, 了解他们的生长环境和背景, 可以帮你对每个员工建立更加合理的预期, 从而更好地进行任务分配和人员管理.")]),t._v(" "),a("p",[t._v("所以, 外企一般都会要求经理和员工有周期性的一对一交谈, 就是为了及时了解员工的各种动态和想法.")]),t._v(" "),a("h5",{attrs:{id:"_3-共情"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-共情"}},[t._v("#")]),t._v(" 3.共情")]),t._v(" "),a("p",[t._v("共情, 又被称为同理心, 或者换位思考, 它指的是站在对方立场设身处地思考问题的一种方式. 换句话说, 在人际交往过程中, 你需要能够体会他人的情绪和想法, 理解他人的立场和感受, 并站在他人的角度思考和处理问题.")]),t._v(" "),a("p",[t._v('比如, 有团队成员要辞职了, 你要怎样跟他谈呢? 你肯定要找他谈感情. 我们一起共事这么久, 你要走了, 我们一起回忆回忆过去. 然后说, 没关系, 你看你要离开了, 有没有什么我可以帮你的? 不要强行让对方留下来, 要多谈感情, 多回忆一下, 多听听对方的诉说. 当他回想起过去一起同甘共苦的日子, 难免会心生留恋, 也许会回心转意的. 当然, 如果你并不能把他留下来时, 不如大度一些, 帮他看看他要去的另外一家公司是否是正确的选择, 而且你还可以给他介绍更好的地方. 既然留不下来, 就索性为他介绍更好的地方. 这样做至少还能引发他一些思考, "我都要离开了, 我老板对我还这么好, 我以后能不能找到这么好的老板? "')]),t._v(" "),a("p",[t._v("这里的关键是, 当对方开始想离开你了, 你千万不要指责和教育对方, 而一定要站在对方的角度来思考问题, 理解对方, 真心对对方好. 晓之以理, 动之以情.")]),t._v(" "),a("h5",{attrs:{id:"_4-高维"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-高维"}},[t._v("#")]),t._v(" 4.高维")]),t._v(" "),a("p",[t._v("员工来跟你聊的, 通常都是细节问题. 这时, 你可以耐心地跟员工沟通, 并共同来寻找解决问题的方案. 但有的时候涉及到公司的一些问题时, 你自己也解决不了, 那么你该怎样跟员工聊呢? 比如, 公司因为战略方向调整, 想要砍掉你负责的业务, 你和你团队都需要转到新的业务线上.")]),t._v(" "),a("p",[t._v('你肯定不能跟自己的"弟兄们"说, 公司混蛋, 把我们这么好的业务给砍掉了. 作为管理者, 你应该知道, 没有完美的公司, 任何公司都存在这样那样的问题. 你需要有更高的维度来看待这个问题, 来给员工做出解释, 让他们既能理解公司的决定, 又能保持动力转到新的方向上.')]),t._v(" "),a("p",[t._v("对于这样的问题, 你首先应该肯定员工过去的努力以及取得的成绩, 明确说明虽然业务被砍, 但是我们的技术积累还在, 这是我们谋求未来发展的基石. 同时, 帮助员工看清公司新的战略方向会给全公司的人带来什么前景, 新的业务方向如何更能发挥出大家积累的经验和能力. 在成功安抚人心的同时, 引发大家对新业务方向的兴趣, 从而更有利于帮助团队后续过渡到新业务方向上.")]),t._v(" "),a("p",[t._v('当然, 在讲这个事情的时候, 千万不要太过了, 还是要跟员工共情一下, 也要表达出自己的不满, 这样让员工觉得你是跟他们站在一起的, 而不是跟公司站在一起的, 后者无疑会引发你和大家的对立. 这里的沟通思路是这样的: "公司的这个决定, 我也有点难理解, 我们这么辛苦做了这么多, 没想会这样...但是我们做的事是很牛的, 我们这个团队是强大的, 强大到对于这样的打击都是没有问题的. 这个世界就是这样的不完美, 但是我们还是要去奋斗, 不然就更不完美了...接下来, 无论发生什么, 我们都要一起扛! " 也许, 这么说也没什么用, 但至少, 在困难到来时, 你可以让大家的心更近了.')]),t._v(" "),a("h5",{attrs:{id:"_5-反馈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-反馈"}},[t._v("#")]),t._v(" 5.反馈")]),t._v(" "),a("p",[t._v('反馈是一种非常重要的沟通形式, 对于确保团队的正常运转十分关键. 但有时候员工没有反馈的意识, 或者不愿意反馈, 你应该怎么办? 这时, 你应该建立一些反馈机制. 比如, 在我目前的团队里面就在用"1-2-3 反馈机制".')]),t._v(" "),a("ol",[a("li",[t._v("不管你遇到什么问题, 如果自己在那儿憋一个小时找不到解决方案, 或者说没有任何思路, 就要反馈到高级工程师这边来.")]),t._v(" "),a("li",[t._v("如果跟高级工程师在一起两个小时内, 找不到任何解决方案或者没有思路, 那么就要反馈到一线 leader.")]),t._v(" "),a("li",[t._v("如果一线 leader, 高级工程师, 花了三个小时, 依然找不到方案, 那么这个事就可能是个大事了, 要向上级反馈了.")])]),t._v(" "),a("p",[t._v("这么做, 就是为了确保一个大问题, 在一天之内能够上升到管理层. 然后管理层可能会寻求更牛的人或是从外界获取帮助, 以使得问题尽快能够得到解决.")]),t._v(" "),a("p",[t._v("这个反馈机制不仅能确保问题及时被反应出来, 并及时得到解决, 而且能够帮团队节约大量的时间和精力, 对团队来说是种很好的正向鼓励, 属于正反馈.")]),t._v(" "),a("p",[t._v('之前我一直强调, 正反馈的重要性. 在这个场景下, 无疑也是如此. 试想一下, 你和你的"兄弟们"逢山开路, 遇水搭桥, 一路凯歌的样子, 是不是很酣畅? 这便是反馈机制的威力了, 它会潜移默化地在团队中形成一种"解决问题"的文化, 让我们在发现问题的第一时间正视问题, 拼尽全力来解决问题, 并能从中享受到"搞定问题"的成就感, 从而形成正向循环.')]),t._v(" "),a("p",[t._v("除了对工作中问题的反馈, 反馈还可以存在与很多其他方面, 你完全可以结合团队的实际需求拟定出各种合适的反馈机制. 对于任何反馈机制的建立, 你只需要记住两点: 一是及时反馈; 二是能够形成正向循环.")]),t._v(" "),a("h5",{attrs:{id:"_6-小结-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-小结-8"}},[t._v("#")]),t._v(" 6.小结")]),t._v(" "),a("p",[t._v("总结一下今天的内容. 我分享了我与员工沟通时经常用到的几大法宝: 引导, 倾听, 共情, 高维和反馈.")]),t._v(" "),a("ul",[a("li",[t._v('引导, 用提问的方式, "倒逼"员工找到答案, 从而提高员工的参与感和成就感.')]),t._v(" "),a("li",[t._v("倾听, 心态平和, 毫无偏见, 全面接收和理解对方的信息, 而不是只听自己想听的信息.")]),t._v(" "),a("li",[t._v("共情, 换位思考, 站在对方立场设身处地思考和处理问题, 动之以情, 晓之以理.")]),t._v(" "),a("li",[t._v("高维, 提升自己的格局观, 能从全局利益, 长远利益思考问题, 解决问题.")]),t._v(" "),a("li",[t._v("反馈, 建立反馈机制, 及时发现问题, 解决问题, 形成正向循环.")])]),t._v(" "),a("p",[t._v("下篇文章中, 我将继续就如何与员工沟通这个话题进行讨论, 主要探讨如何进行一对一会议, 如何做绩效沟通, 如何定位性格特殊的员工, 如何挽留离职员工, 如何辞退员工等问题. 敬请期待.")]),t._v(" "),a("h4",{attrs:{id:"高效沟通-好好说话的艺术"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高效沟通-好好说话的艺术"}},[t._v("#")]),t._v(" 高效沟通:好好说话的艺术")]),t._v(" "),a("h5",{attrs:{id:"_1-跟员工沟通"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-跟员工沟通"}},[t._v("#")]),t._v(" 1.跟员工沟通")]),t._v(" "),a("p",[t._v('在跟员工沟通部分, 我将主要讨论令管理者头痛的五大难题: 怎样进行一对一会议; 员工绩效不好时, 如何沟通; 怎样"搞定"特立独行的员工; 怎样挽留离职员工; 如何劝退员工等. 首先, 我们来看看一对一会议.')]),t._v(" "),a("h6",{attrs:{id:"_1-一对一会议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-一对一会议"}},[t._v("#")]),t._v(" (1)一对一会议")]),t._v(" "),a("p",[t._v("一对一会议(one-one meeting)是一种非常重要的管理手段, 它能拉近管理者与员工的关系. 但你要记住, 好的一对一会议是以员工为中心的, 而不是以管理者为中心的. "),a("strong",[t._v('一对一会议时, 管理者需要做的是倾听, 而非"喋喋不休"地教育')]),t._v(".")]),t._v(" "),a("p",[t._v("我待过的几个外企里, 一对一会议基本都是标配, 频率是每半个月一次. 会议重点涉及以下四个方面的内容.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("工作状态")]),t._v(", 主要想了解员工的工作状态, 因为人的状态是变化的, 不是稳定的, 或多或少会有这样或那样的一些问题. 这个环节主要了解影响员工状态的细节, 为员工进行疏导, 激励和优化, 并和员工一起对过去几周的工作做出得失总结, 一起进步.")]),t._v(" "),a("li",[a("strong",[t._v("个人发展")]),t._v(", 员工的个人发展是员工和公司的头等大事, 所以, 你需要了解员工的兴趣, 爱好, 擅长做的事儿, 以及缺点和不足, 并结合公司的目标和实际项目需求, 为员工创造更有挑战的工作, 让员工更好地成长.")]),t._v(" "),a("li",[a("strong",[t._v("公司组织")]),t._v(", 让员工聊聊对公司有什么看法, 觉得公司哪儿做得好, 哪儿做得不好, 有哪些可以改进的建议. 如果公司非常大的话, 可以请员工来聊聊自己所在的部门或者团队的一些情况. 目的是了解员工是否认可公司的目标和方向, 这其中可能会有一些误解, 或者意见上的不统一, 需要跟员工说明白.")]),t._v(" "),a("li",[a("strong",[t._v("Leader 自己")]),t._v(". 也就是, 请员工聊聊对自己的看法. 放平心态, 不管是好的还是坏的, 都用平常心看待. 如果被员工指出哪里有不足, 可以请员工给自己一些建议, 或者请他来谈谈他认为怎样做会比较好. 这个环节很重要, 对管理者来说是个很好的反思和学习的过程.")])]),t._v(" "),a("p",[t._v('一对一会议的时间通常为半个小时到一个小时, 时间不要太长. 一对一会议中, 我的核心沟通原则是将心比心. 这其中的诀窍是让员工畅所欲言, 不要有任何的忌讳, 能够讲出最真实的想法, 哪怕想法是很偏激很不中听的, 只要是真实的都应该获得尊重. (作为管理者, 你一定要明白, 那些"直言不讳"的员工是不错的, 因为他们的心思不用让你"猜". "真言"虽然不中听, 但相比那些中听的"谎言"来说, 其实是会降低你的管理难度的. )')]),t._v(" "),a("p",[t._v("另外, 一对一的沟通都是直接跟下属聊, 你的直接下属跟他的直接下属聊. 此外, 你还可以跳过层级直接跟下属团队中的骨干成员聊. 骨干的意思是, 特别被重视的人, 是那些团队不愿意失去的人. 跟骨干聊是很有必要的, 这样能够体现出你对他的重视, 对员工来说是一种认可的方式.")]),t._v(" "),a("h6",{attrs:{id:"_2-绩效沟通"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-绩效沟通"}},[t._v("#")]),t._v(" (2)绩效沟通")]),t._v(" "),a("p",[t._v("绩效沟通对于管理者来说可能是最难的一个事了, 尤其是跟那些绩效不好的人沟通一年的绩效结果, 可能是管理者们最不愿意去做的事.")]),t._v(" "),a("p",[t._v('我曾经的团队里发生过一件事儿, 令我至今记忆犹新. 有一个从别的团队转岗过来的女孩, 工作一段时间之后, 我和她原来团队的负责人来一起来 review 她的绩效. 她原来的负责人上来就说, "你原来是做流程工具开发的, 但是我们觉得你程序写得不好……"话没说完, 这个小女孩就直接跳起来了, 反问道: "我程序写得不好, 你当时为什么不跟我说. 你跟我说哪里做得不好, 我马上改. 可是你接受了, 就说明我的绩效至少达标了……"不难想象, 这场绩效沟通会议就是一个"翻车现场"!')]),t._v(" "),a("p",[t._v("那时候, 我刚做管理两个月, 这事儿对于当时的我来说很是震撼. 所以从那个时候开始, 不管员工出什么问题, 我都会立马给出反馈, 明确告诉团队成员他工作的不足之处, 以及改进方案. 比如, 你这段代码太松散了, 这里的代码写得不够好. 你最近好像状态不是很好, 老出 Bug. 这样的低级错误为什么会发生? 哪里有问题? 等等. 是的, "),a("strong",[t._v("沟通一定要放在平时, 不要搞成像秋后算账一样! 因为你是管理者, 不是地主监工")]),t._v(".")]),t._v(" "),a("p",[t._v('如果员工实在能力欠缺, 难以达标, 其实"帮助"过程中, 他自己也是知道的. 基本上, 等不到年底, 这样的员工也会自己离职走人, 因为这样玩下去对他自己不利.')]),t._v(" "),a("p",[a("strong",[t._v("但要注意的是, 反馈的过程中, 不是我在指责员工, 而是我在帮助员工. 一定要有帮扶的态度, 这样员工会更容易接受")]),t._v(". 此外, 说话的维度要高一点儿, 要共情, 不要激起员工的情绪, 引发不必要的矛盾. 在反馈和帮扶的过程中, 你能够让员工感受到你的关注和重视, 对员工来说是种很好的正向鼓励, 有利于员工, 乃至团队的进步和成长.")]),t._v(" "),a("h6",{attrs:{id:"_3-特立独行的员工"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-特立独行的员工"}},[t._v("#")]),t._v(" (3)特立独行的员工")]),t._v(" "),a("p",[t._v('做过多年管理者的你, 一定遇到过一些"特立独行"的员工, 他们很自我, 不服管, 喜欢按照自己的思路做事儿. 该如何对这类员工进行管理和沟通, 想必会令你头痛不已. 尤其是当你感觉到某些"特立独行"的员工天赋异禀的时候, 你更希望能够将其优势充分发挥出来, 为团队创造更大的价值. 这里, 我就来谈谈我的想法和经验.')]),t._v(" "),a("p",[t._v("这里, 我们只讨论有很强能力的人(因为能力不强还特立独行的人最好劝退), 对于这类员工, 我有两个方法.")]),t._v(" "),a("ul",[a("li",[t._v("第一个方法是给他找到匹配的人, 要么是比他牛的人, 要么是跟他旗鼓相当可以在一起共事儿的人, 跟他一起工作. 有能力的人, 一般都受不了一群猪队友的, 因为他们会觉得老是被问一些好无聊的问题, 被问得很烦, 而且有很多很简单的事, 要讲半天, 对方却还听不懂. 是的, 聪明的人都是这样的, 很多聪明人都是特立独行的人.")]),t._v(" "),a("li",[t._v("第二个方法是给他一些独立的工作, 把他隔离出去. 让他做一些相对独立和有挑战的事情. 在微软等很多公司里面, 都有一个工种叫 IC – Individual Contributor. 把他们隔离出来是一个不错的选择.")])]),t._v(" "),a("p",[t._v("但是话说回来, 有些人还是很难办的, 以上两种方式可能对他都不起作用. 我也遇到过这样的员工, 能力很好, 但是特别挑剔工作. 任何事情都非常矫情. 这个时候你要多找他聊一下, 你需要直截了当, 明确没有二义地说明他需要做的工作, 以及岗位对他的要求. 注意, 一定要非常地明确! 如果不行, 那就只有分手了.")]),t._v(" "),a("p",[t._v("这里有个原则你要记住: "),a("strong",[t._v("当你在一个人身上花的精力和时间成本, 大于你到外面找一个更好的人或者能力相当的人来替代他的时候, 你就要坚决地把他替换掉")]),t._v(".")]),t._v(" "),a("h6",{attrs:{id:"_4-挽留离职员工"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-挽留离职员工"}},[t._v("#")]),t._v(" (4)挽留离职员工")]),t._v(" "),a("p",[t._v("如果一个员工离职, 而你又希望他留下来, 怎么办? 首先"),a("strong",[t._v("你要知道他离职的原因")]),t._v(". 我觉得, 绝大多数员工离职都是跟老板或者公司有关系的.")]),t._v(" "),a("p",[t._v("但是你和他做沟通的时候, 他肯定也不好意思说出真实原因. 所以, 你要做的是让他敞开心扉地去谈离职的事情. 你可以看看, 心理访谈类节目中的主持人是怎样做的. 通过看这些节目, 以及结合我自己的经验, 我认为, 想要让员工跟你袒露心扉, 你一定要明确表达你对他的认同, 甚至可以说一些公司的坏话.")]),t._v(" "),a("p",[t._v("这样, 你可以让他的心理界限逐渐消失, 就会开始诉说自己的真实原因(谁没有点苦闷的心事呢). 这时你一定要认真倾听, 就算是他在吐槽, 也一定要让他吐干净. 为什么呢? 我觉得吐槽公司并不是什么坏事儿, 员工吐槽公司, 说明对公司还有感情, 爱之深, 责之切.")]),t._v(" "),a("p",[t._v("借此, 你可以收集一些意见, 这些意见也许可以让公司变得更好, 因为他的离职原因也有可能是其它人的离职原因, 这对于留住还在职的员工是很有用的. 其次, 你可以知道他离开的真实原因, 思考一下是否能采取什么举措, 进行挽留.")]),t._v(" "),a("p",[t._v("另外, "),a("strong",[t._v("生意不行, 友情在")]),t._v(". 每个人的离开都是有各自不同的理由, 实在挽留不成的时候, 也要注意经营好这份情意.")]),t._v(" "),a("p",[t._v("在我认为挽留不成的时候, 我通常会站在他的角度作为他的朋友为他着想, 甚至帮他介绍工作, 或是在他离开时再为他争取一些利益或是别的什么. 这样做会让员工觉得这样的知心老板不好找啊, 就算最终还是离开, 但是未来也一定会有联系, 也许未来还能在一起共事儿. 这里的逻辑是, "),a("strong",[t._v("既然不能在此时挽留下来, 那就放眼未来, 人生还很长, 能在一起工作的机会还有很多")]),t._v(".")]),t._v(" "),a("p",[t._v("其实挽留是一件挺为难人的事情, 因为对方做完了这个决定以后, 再回头也需要很大的勇气. 所以, 你要提前判断员工离职的前兆. 一个人要离职是有前兆的, 你平时肯定是能感觉到的. 比如, 他一定会变得不积极, 甚至会有一些抱怨. 这时候其实是你挽留他的重要时机, 因为有抱怨说明还喜欢这个公司.")]),t._v(" "),a("p",[t._v('而他最终跟你摊牌的时候, 或是对公司漠不关心的时候, 留下来的机会是很小的. 员工离职之前一定会有很多前兆的, 我建议你, 细心体会一下, 在最佳挽留时机进行挽留, 不流失自己的"爱将".')]),t._v(" "),a("p",[t._v("最后提一句, 一般来说, 任何员工, 任何事, 干了两年就是一个大限, 离职率极高.")]),t._v(" "),a("h6",{attrs:{id:"_5-劝退员工"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-劝退员工"}},[t._v("#")]),t._v(" (5)劝退员工")]),t._v(" "),a("p",[t._v("在员工没有达到最低绩效的时候, 该怎样劝退员工, 也是令很多管理者头痛的问题. 还是那句话, 劝退一定不要秋后算账, 要把沟通放在平时.")]),t._v(" "),a("p",[t._v('劝退一个人, 你一定要给出一段时间的试用期, 也就是我们说的缓冲期. 一方面, 表达出"我是愿意帮助你的, 我也给你机会"的意思. 同时, 你也要给对方制定一个目标, 一个月之内, 他要解决和改进他的一些工作问题. 因为人都是有状态的, 你需要给他一段时间. 另一方面, 也要让员工有所准备, 可以在外面寻找一些相关的机会, 而不至于失业.')]),t._v(" "),a("p",[t._v("注意, 这里我想表达的是, "),a("strong",[t._v("任何人都应该有可以纠正错误的机会, 公司应该给员工这样的机会, 员工也应该给公司同样的机会")]),t._v(".")]),t._v(" "),a("p",[t._v("当然, 在分手那天到来的时候, 你可以跟员工一起看一下, 他的工作是什么, 他的职责是什么, 但是他的成绩又是什么? 你要找的是无可辩驳的证据. 然后跟他说明, 因为这些原因, 我希望我们能够和平地分手.")]),t._v(" "),a("p",[t._v("最好的方式是, 给员工一个面子, 让他把你开掉, 比如: 找外面的猎头, 把员工挖走. 亚马逊经常这么做. 亚马逊还有主动离职奖金, 第二年离职给 4000 美金, 第三年给 6000 美金……国内公司则简单粗暴一些.")]),t._v(" "),a("p",[t._v("在劝退的时候, 你可以请他吃一顿饭, 或者送他一个纪念品. 这个纪念品, 可以是他在你这儿工作过程中, 做得最好的一件事儿. 比如, 我会把这件事儿印成一件 T 恤, 送给他. 事儿是事儿, 人是人. 把工作和私交分开, 表明这并不代表我个人不愿意接受你, 只是我有我的职责, 我是公司的一名管理者, 职位在身, 需要负责. 但是, 像情人分手一样, 分开后, 我们还是好朋友.")]),t._v(" "),a("h5",{attrs:{id:"_2-跟客户沟通"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-跟客户沟通"}},[t._v("#")]),t._v(" 2.跟客户沟通")]),t._v(" "),a("p",[t._v("在跟客户沟通这部分, 我主要分享三方面的内容: 吸引客户的兴趣, 帮客户发现问题和管理客户的期望.")]),t._v(" "),a("h6",{attrs:{id:"_1-吸引客户的兴趣"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-吸引客户的兴趣"}},[t._v("#")]),t._v(" (1)吸引客户的兴趣")]),t._v(" "),a("p",[t._v("在前面的《沟通方式及技巧》一文中, 我分享了一个跟客户沟通的小技巧——初次和客户见面时要懂得吸引对方的兴趣. 想做到这点, 其实并不难, 但它的前提条件是在见客户之前必须要做足功课, 确保你自己了解客户的关注点, 以及当下的痛点. 然后在交谈的过程中, 可以有目的性地在这些方面展开话题, 突出一下自己在相关领域的优势和资源. 一般情况下, 这么做都是能很快引起客户兴趣的.")]),t._v(" "),a("p",[t._v("举个例子里, 我当天见的是某个银行的副行长, 周围的人都穿着衬衫和西裤, 很正式, 而我的着装却有些随意. 估计要不是别人介绍的, 他一眼都不想看我, 几句话就能把我打发了. 开始的几个问题, 也着实让我有些狼狈. 问我, 你们公司规模多大? 有多少人? 有什么案例? 我如实回答后, 只看见他满脸不屑的样. 但我后来却用了不到 20 分钟的时间就成功吸引了他的兴趣.")]),t._v(" "),a("p",[t._v("见他之前我做足了功课, 了解金融业下半年整体趋势都很糟糕, 银行贷款都办不了, 国家货币在紧缩, 还有 P2P 这些乱七八糟的事儿. 于是, 我就跟他说了一下形势和相关的解决方案, 然后就明显地感觉到他开始感兴趣了, 因为我谈的都是一般人不知道的(原谅我在这里不写这些了, 因为这是我现在创业的商业机密). 于是我再加油添醋, 说我这边可以接触的资源日流水好几亿...还没等我说完, 他就开始对我这个人以及我的谈话内容充满了兴趣.")]),t._v(" "),a("p",[t._v("也就是说, 做足功课, 了解客户的痛点或是 KPI 是与客户沟通的第一步, 也是最关键的一步, 不仅可以引起对方的兴趣, 还能决定见面时沟通的内容. 兵法有云: 知己知彼方能百战不殆, 说的就是这个道理.")]),t._v(" "),a("h6",{attrs:{id:"_2-帮客户发现问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-帮客户发现问题"}},[t._v("#")]),t._v(" (2)帮客户发现问题")]),t._v(" "),a("p",[t._v('有了"兴趣"这块开门砖以后, 接下来谈什么, 怎样谈就要容易多了. 这个时候, 我们可能就要进入到问题的实质, 深入交流了. 这里有以下几个关键点需要你把握.')]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("结合客户的痛点, 了解客户做过的尝试")]),t._v(". 在这里我们一定要明白, 客户的痛点其实就是我们的发力点, 也就是我们的价值点. 所以, 我们一定要弄清楚客户的痛点是什么, 以及针对这个痛点, 客户曾经做过哪些尝试.")]),t._v(" "),a("p",[t._v("这样不仅能够让我们更加深入和全面地了解客户痛点, 而且有助于我们在思考解决方案的时候绕开很多用户曾经踩过的雷. 或者, 我们也可以从这些已经做过的尝试中获得一些启发和帮助, 因为很多时候尝试失败, 并不一定意味着方法是错的, 很有可能是技巧, 能力或者资源配置出了问题.")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("深入细节, 了解细节才会有更准确的信息")]),t._v(". 前面文章中提到了倾听的重要性, 在与客户进行沟通的时候, 倾听也尤为重要. 因为你只有深入了解细节, 才能掌握更准确的信息, 从而给出更能帮助客户解决问题的方案. 但是在与客户沟通的过程中, 你有时会发现客户自己描述不清楚细节, 或者说不清楚自己到底想要什么.")]),t._v(" "),a("p",[t._v("这时, 你可以考虑让客户举个例子, 说给你听. 从这个例子中, 你可以获得更多的信息, 因为它将很多模糊不清的东西具象, 形象化了. 你可以把你的理解说给客户听, 跟他确认你的理解是否准确, 然后逐渐磨合, 最终达成共识. 这个更为准确的信息是你后面解决问题的前提和基础.")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("小心 X/Y 问题, 找到 X 问题")]),t._v(". 在《沟通技术》一文中, 我提到过 X/Y 问题. 很多时候客户跟你提的都是 Y 问题, 比如, 我们要做分布式架构, 我们要做大中台, 我们要做线下线上融合, 等等. 每次面对这些问题, 我都要反问, 你为什么要做分布式架构? 为了大规模营销, 为了稳定性, 还是为了加快开发速度? 做大中台, 你是为了什么?  是为了打通各个业务线, 为了快速开发, 还是为了技术输出? 等等.")]),t._v(" "),a("p",[t._v("要解的真实问题才是 X 问题, 手段都是 Y 问题. 只有你真正了解了 X 问题, 才能真正明白问题背后的出发点. 而当你了解了 X 问题后, 你就要到源头, 来质疑或是改良他的 Y 问题, 甚至提出 Z 方案. 这时, 你会发现你的客户开始跟着你的思路走了. 这里有个要点是, "),a("strong",[t._v("一定要分析客户问题背后的本质原因, 从根本上帮助客户解决问题")]),t._v(".")])])]),t._v(" "),a("p",[t._v('很多时候, 客户的问题只是表面的问题, 你要深入下去, 才能找到最本质最根本的 root-cause, 这和我们定位 Bug 的道理是一样的. 只有找到根本原因, 你才能对症下药, 标本兼治. 所以, 我现在也有了所谓的"一针见血"的沟通能力.')]),t._v(" "),a("h6",{attrs:{id:"_3-管理客户的期望"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-管理客户的期望"}},[t._v("#")]),t._v(" (3)管理客户的期望")]),t._v(" "),a("p",[t._v("在帮助客户发现问题之后, 我们就要来解决问题了. 这个时候, 帮助客户设立合理的目标就显得尤其重要了. 一般来说, 很多公司的销售都会把客户的期望搞得很高很高(因为要成单), 经常性地用最少的时间, 最低的价格, 做最多的事, 基本上来说这相当于把开发团队卖掉了. 不要以为只有销售会这样, 我们的很多管理者也是一样的, 为了保住自己的位置, 拼命地透支自己的团队, 等成绩拿到以后, 跳槽到别的公司.")]),t._v(" "),a("p",[t._v("其实, 我们是可能做到既让客户满意, 又不会作茧自缚的, 有以下几个手段可以使用.")]),t._v(" "),a("ol",[a("li",[t._v("要至少给出三套方案来让客户选择. 一个是低成本的玩法, 一个是高成本的玩法, 一个是性价比比较高的玩法, 这其中的取舍是我们可以去引导客户的.")]),t._v(" "),a("li",[t._v("另外, 我们需要找一些相关的案例和参照物来对比我们给的上述方案, 这样可以让客户有一个更为清醒的判断和认识. 以此来教育客户不同的方案代表着不同的期望和不同的结果.")])]),t._v(" "),a("p",[t._v("然后跟客户进行讨论, 该怎样优化和完善方案中的目标, 最终达成双方都认可和接受的目标. 这里一定要注意, 只有经过了取舍, 明确了哪些做哪些不做, 我们达成共识的目标才会是明确的, 有针对性的, 而且是具有很强的可操作性的.")]),t._v(" "),a("p",[t._v("当然, 有的时候, 客户可能会执意要求实现一些不切实际的方案. 比如, 有时客户可能会将项目时间压得太紧, 这样你无法保证按质完成所有任务. 除了需求分析, 设计和开发外, 一个完整的软件工程也要保证质量, 至少必须包含测试(至少要有手动的集成测试, 考虑可维护性的话还要包括自动的单元测试)和 bug 修复的部分, 而这两个部分加起来的时间通常比开发本身的时间还要多.")]),t._v(" "),a("p",[t._v("如果项目时间压得太紧, 只有两条路可以选. 第一, 保证质量, 但减少一些功能或其他要求, 如去掉一些对还未调研清楚的第三方库的依赖; 第二, 保证主要功能完成, 但不完全保证质量.")]),t._v(" "),a("p",[t._v("这时, 我们可以和客户一起分析, 哪种选择更为合理, 可行, 将选择权交给客户. 这里记住, "),a("strong",[t._v("永远不要跟客户说不, 要有条件地说是, 告诉客户不同的期望要有不同的付出和不同的成本. 不要帮客户做决定, 而是给客户提供尽可能多的选项, 让客户来做决定")]),t._v(".")]),t._v(" "),a("p",[t._v("有的时候, 客户对交付时间和完成的功能会有过高的预期. 这时我们要和客户商谈, 降低这个预期, 但同时尽量给予一些其他的补偿. 比如, 这个事臣妾做不到啊, 要不你多给我一些时间, 我少收你点费用? 或是, 你这个太复杂了, 太重了, 要做我先做个简单版的, 这样可以以低成本来看看客户的反应, 然后根据客户的反应再看下一步怎么做, 等等. 我们不要拒绝, 要疏导.")]),t._v(" "),a("p",[t._v("如果客户不愿意放弃他的高目标, 那么我们就争取一些补偿或是交换. 一般来说, 只要是合理的, 人总是通情达理的, 一般来说都会满足你的. 比如: 我们可以跟业务部门讨论, 我做完这一版后, 你要给我 1 个月的时间, 重构一下我的代码, 请给我们这些时间.")]),t._v(" "),a("p",[a("strong",[t._v("讨价还价是这个世界能运转的原因之一, 要学会使用")]),t._v(".")]),t._v(" "),a("p",[t._v("总结下来, 在与客户沟通预期时, 我通常会坚持以下几个原则.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("一定要给客户选择权, 永远不要说不, 要有条件地说是")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("降低期望的同时给予其他的补偿")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("提高期望的同时附加更多的条件")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("对于比较大的期望要分步骤达到客户的期望")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("不要帮客户做决定, 而是给客户提供尽可能多的选项, 然后引导客户做决定")]),t._v(".")])]),t._v(" "),a("h5",{attrs:{id:"_3-跟老板沟通"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-跟老板沟通"}},[t._v("#")]),t._v(" 3.跟老板沟通")]),t._v(" "),a("h6",{attrs:{id:"_1-了解你的老板"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-了解你的老板"}},[t._v("#")]),t._v(" (1)了解你的老板")]),t._v(" "),a("p",[t._v("在跟客户沟通中, 我强调了了解客户及其痛点的重要性, 这是第一步, 也是最为关键的一步. 同样, 想跟老板进行良好的沟通, 了解你的老板也很重要. 首先, 你需要了解老板的做事风格. 比如, 有的老板是事无巨细的, 有的老板是大刀阔斧的, 有的老板是威风管理, 而有的老板则是老好人, 等等.")]),t._v(" "),a("p",[t._v("其次, 你还要了解老板的目标和 KPI 是什么. 最后, 要知道老板的老板是谁, 他的风格是什么, 他的目标和 KPI 是什么, 因为你老板的目标和 KPI 是你老板的老板给的. 所以你了解老板的老板才更能了解你的老板, 从而做更正确的事儿.")]),t._v(" "),a("p",[t._v('想了解你的老板, 最简单的方法就是察其言观其行, 因此 "倾听"就显得尤其重要了. 老板总是喜欢教育下属, 总是喜欢发表高谈阔论的, 所以, 倾听老板是件不难的事, 但是, 这也是一件很难的事! 因为老板职位在身, 所以, 有很多事老板是不会对下属说的, 尤其是很多负面或是有压力的事. 他不能表现得很懦弱, 否则就没人听他的了. 老板从来都是孤独和孤单的, 牙被打掉了往肚子里咽. '),a("strong",[t._v("所以, 倾听老板会有一些出乎你的意料的发现, 你要能了解老板背后的苦衷, 那些才是最重要的")]),t._v(".")]),t._v(" "),a("h6",{attrs:{id:"_2-赢得老板的信任"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-赢得老板的信任"}},[t._v("#")]),t._v(" (2)赢得老板的信任")]),t._v(" "),a("p",[t._v('你要赢得老板的信任, 就要知道老板也是要有成绩的, 他们只会关心那些能为他带来成绩的员工. 所以, 你要成为工作当中的骨干人员, 能把自己的事搞定, 能把别人搞不定的事搞定. 这样老板才会依赖你, 你才可能有更好的"议价能力". 不然, 就算你对老板的马屁拍好了, 你也不会真正和老板有平等的话语权, 你也只不过是老板的跟班罢了.')]),t._v(" "),a("p",[t._v("当你有了能力后, 老板才会给你机会, 你有了能力又有机会, 你就会有更多的机会. 这些机会能让你有更多的经验来提升自己的能力, 于是形成一个正循环, 你的老板会越来越信任你, 你才能获得真正和老板平等的权利.")]),t._v(" "),a("h6",{attrs:{id:"_3-管理老板的期望"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-管理老板的期望"}},[t._v("#")]),t._v(" (3)管理老板的期望")]),t._v(" "),a("p",[t._v("就算你很牛, 老板很信任你, 你还是要学习管理老板的期望. 在每次和老板交流的时候, 你都要确认老板的期望是什么, 如果跟你的想法有所偏差, 一定要及时反馈和讨论. 因为每个人的特长和优势不同, 老板希望你做的, 未必是你擅长或者乐于做的. 有什么想法一定要诚实地说出来, 以免被安排了不喜欢的工作, 自己越干越不开心, 越干越没热情. 这就很麻烦了.")]),t._v(" "),a("p",[t._v("这和管理客户的期很相似, 不要帮老板做决定, 给老板几种方案, 并引导他做决定. 不要说不, 要有条件地说是, 在拒绝的同时给予补偿. 如果反抗不了了, 就争取其它的利益.")]),t._v(" "),a("p",[t._v("你要明白, 老板如果没人了, 他将一事无成, 所以, 他一般都会是通情达理的. 只要你注意表达的方式和方法, 摆事实讲道理, 态度上没问题; 只要你从事情的不同角度展开, 权衡一下利弊, 并使用共情和高维这样的沟通方式, 让老板能站在你的立场将这些问题想清楚, 你一定能够争取得到你想要的.")]),t._v(" "),a("h6",{attrs:{id:"_4-非暴力-怼-老板"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-非暴力-怼-老板"}},[t._v("#")]),t._v(' (4)非暴力"怼"老板')]),t._v(" "),a("p",[t._v("沉默是金, 是我今天给出的最后一个方法. 它应该在什么时候用呢? 我来介绍一下. 在工作中跟老板有意见分歧是在所难免的. 但有一些时候, 你明明觉得自己给老板提供了一个你认为从各个维度来讲都很不错的方案, 但老板还是说, 这不行, 两个月时间太长, 最多给你一个半月时间. 这个时候最好的方法不是怒气冲冠, 也不是直接 Say No, 而是保持沉默不说话, 闷着.")]),t._v(" "),a("p",[t._v('相信我, 只要你沉默下来, 你的老板就会沉不住气的, 气氛的尴尬不是他想要的, 他只是希望你能听他的. 所以, 一般来说, 老板马上就会打破沉默, 对你开始各种"忽悠", 如果你依然不说话, 你的老板就会开始妥协, 换各种思路来说服你, 然后你就可以顺着老板的话, 跟老板谈条件了. 这是一个非常有用的谈判技巧.')]),t._v(" "),a("p",[t._v("比如, 老板感到不安后, 他一定会安慰你, 也会给你开条件: 这样吧, 你努力把它弄完, 年底给你涨工资. 你不要立马答应下来, 要表现出极不情愿, 告诉老板这违背了客观发展规律. 老板会再次利诱你.")]),t._v(" "),a("p",[t._v('这时, 你再表态, 带着弟兄们拼一拼, 争取一半月内搞定, 但就这一次, 下不为例. 你是可以原谅老板"混蛋"一次的, 给他一次机会. 但你要让他感觉到欠你和你的团队人情, 欠人情是最恐怖的事儿了. 这样, 他下次再做类似事情的时候, 自己都会不好意思.')]),t._v(" "),a("h5",{attrs:{id:"_4-小结-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-小结-17"}},[t._v("#")]),t._v(" 4.小结")]),t._v(" "),a("p",[t._v("好了, 总结一下今天的内容. 今天的内容好丰富, 包含跟员工沟通, 跟客户沟通以及跟老板沟通三大部分, 将前几篇文章中介绍的沟通方法和技巧用了个遍. 相信你一定有挺多的体会和感悟.")]),t._v(" "),a("p",[t._v("其实不管对方是员工, 客户, 还是老板, 甚至是自己的家人朋友, 与人沟通的关键, 都是要好好说话, 静心聆听, 能够尊重对方的想法和情绪, 更能站在对方的角度来思考. 只要你心中时刻想着共情, 共赢, 你的沟通一定会顺畅和高效很多. 《高效沟通》系列今天更新结束, 希望这些内容能给你一些帮助和启发.")]),t._v(" "),a("h3",{attrs:{id:"结语"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结语"}},[t._v("#")]),t._v(" 结语")]),t._v(" "),a("h4",{attrs:{id:"谈谈我的-三观"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#谈谈我的-三观"}},[t._v("#")]),t._v(' 谈谈我的"三观"')]),t._v(" "),a("p",[t._v('也许是人到了四十多了, 才敢写这么大的命题. 不过, 我还是想把我的想法记录下来, 算是对我思考的一个"快照"(snapshot), 给未来的我看看. 我想这篇文章要么被未来的我打脸, 要么打未来我的脸. 但不管怎么样, 我觉得对自己来说都很有意义.')]),t._v(" "),a("p",[t._v('我在标题中提到的"三观"指的是'),a("strong",[t._v("世界观, 人生观和价值观")]),t._v(":")]),t._v(" "),a("ul",[a("li",[t._v("**世界观代表你是怎么看这个世界的, ** 是左还是右, 是激进还是保守, 是理想还是现实, 是乐观还是悲观...")]),t._v(" "),a("li",[t._v("**人生观代表你想成为什么样的人, ** 是成为有钱人, 还是成为人生的体验者, 是成为老师, 还是成为行业专家, 是成为有思想的人, 还是成为有创造力的人...")]),t._v(" "),a("li",[t._v("**价值观则代表你觉得什么对你来说更重要, ** 是名是利, 是过程还是结果, 是付出还是索取, 是国家还是自己, 是家庭还是职业...")])]),t._v(" "),a("p",[t._v("人的三观其实是会变的, 回顾一下我的过去, 我感觉我的三观至少在这几个阶段有比较明显的变化: 学生时代, 刚走上社会的年轻时代, 三十岁后, 还有现在. 估计其他人也都差不多吧.")]),t._v(" "),a("ul",[a("li",[t._v("学生时代的三观更多是学校给的, 用各种标准答案给的.")]),t._v(" "),a("li",[t._v("刚走上社会后发现完全不是这么一回事, 但学生时代的三观已经在思想中根深蒂固, 以至于三观开始分裂, 内心开始挣扎.")]),t._v(" "),a("li",[t._v("三十岁后, 不如意的事越来越多, 对社会越来越了解, 有些人屈从现实, 有些人不服输继续奋斗, 有些人展露才能开始影响社会. 此时我们分裂的三观开始收敛, 而我属于还在继续奋斗的人.")]),t._v(" "),a("li",[t._v("四十岁时, 经历过的事太多, 发现留给自己的时间不多了, 世界太复杂, 还有好多事没做, 发现自己变得与世无争, 也变得更加自我了.")])]),t._v(" "),a("h5",{attrs:{id:"_1-面对世界"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-面对世界"}},[t._v("#")]),t._v(" 1.面对世界")]),t._v(" "),a("p",[t._v("年轻的时候, 我对世界上的一些国家有很深的偏见, 也对各个国家之间的不公平现象感到非常愤怒. 但后来, 因为有各种机会出国长时间生活和工作, 到过加拿大, 英国, 美国, 日本...随着自己经历的丰富与眼界的开阔, 自己的三观也发生了很多变化. 发现有些事并不是自己一开始所认识的那样. **我深深感觉到, 要有一个好的世界观, 你需要亲身去经历和体会这个世界, 而不是光听别人怎么说. **")]),t._v(" "),a("p",[t._v("所以到现在, 我也不是很理解为什么国与国之间硬要比个你高我低, 硬要分个高下, 争个输赢. 世界都已经发展到全球化的阶段了, 很多产品早就是你中有我, 我中有你的情况了. 举个例子, 一部手机中的元件, 可能来自全世界数十个国家, 我们已经说不清楚一部手机究竟是哪个国家生产的了. 既然整个世界都在以一种合作共赢的姿态运作, 我们就认准自己的位置, 拥抱世界, 持续向先进国家学习, 互惠互利, 不好吗?")]),t._v(" "),a("p",[t._v('**我对国与国之间关系的态度是, 有礼有节, 不卑不亢, 对待外国人, 有礼貌但也要有节气, 既不卑躬屈膝, 也不趾高气昂. **整体而言, 我并不觉得我们比国外有多差, 也不觉得我们比国外有多好. 我们还在成长, 还需要帮助与协作, 俗话说"四海之内皆兄弟", 无论在哪个国家, 在老百姓的世界里, 哪有那么多矛盾. **有机会多出去走走, 多结交几个其它民族的朋友, 你会觉得, 在友善和包容的环境下, 你的心情和生活可以更好. **')]),t._v(" "),a("p",[t._v("你可能会说, 不是我们不想这样, 是别的国家不容许我们发展. **老实说, 大的层面我也感受不到, 但就我所在的互联网计算机行业而言, 我觉得世界的开放性越来越好, 开源项目空前的繁荣, 互联网文化也空前的开放. 在计算机和互联网行业, 我们享受了太多开源和开放的红利, 别人不开放, 我们可能在很多领域还落后数十年. **")]),t._v(" "),a("p",[t._v("随着自己经历越来越多, 也发现这个世界越来越复杂, 自己越来越渺小, 这个世界有它自己的运作规律和方法, 还有很多事情超出了我能理解的范围, 更超出了我能控制的范围.")]),t._v(" "),a("p",[t._v("我现在更多关心的是和我生活相关的东西, 比如: 上网, 教育, 医疗, 食品, 治安, 税务, 旅游, 收入, 物价, 个人权益, 个人隐私...可以看到, 过去的几十年, 我们国家已经有了长足的进步, 这点也让我让感到非常开心和自豪.")]),t._v(" "),a("p",[t._v("因此, 我还要继续努力, 不断提高自己. 只有这样, 当我面对哪些我们无法改变, 无法影响的事情都时候, 才能有更多选择的可能性.")]),t._v(" "),a("h5",{attrs:{id:"_2-面对社会"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-面对社会"}},[t._v("#")]),t._v(" 2.面对社会")]),t._v(" "),a("p",[t._v("在网上与别人争论观点或事情, 我觉得越来越无聊, 以前被怼了, 一定要怼回去, 可现在不会了, 视而不见. 不是怕了, 是因为在我看来, 网络上的争论大多数都没有章法且逻辑混乱.")]),t._v(" "),a("ol",[a("li",[t._v("很多讨论不是针对事, 而是直接骂人, 随意给人扣帽子.")]),t._v(" "),a("li",[t._v("非黑即白, 你说这个不是黑的, 他们就会把你划到白的那边.")]),t._v(" "),a("li",[t._v("漂移观点, 复杂化问题, 东拉西扯, 牵强附会, 还扯出其它不相关的事来混淆.")]),t._v(" "),a("li",[t._v("杠精很多, 不关心你的整体观点, 抓住一个小辫子就大作文章.")])]),t._v(" "),a("p",[t._v("很明显, "),a("strong",[t._v("与其花时间教育这些人, 不如花时间提升自己, 让自己变得更优秀, 这样就有更高的可能性去接触更聪明, 更成功, 更高层次的人. ** 因为一方面, 你改变不了他们, 另一方面, 改变他们对你自己也没什么意义, 改变自己, 提升自己, 让自己成长才有意义. 时间是宝贵的, 而那些人根本不值得你浪费时间, 你")]),t._v("应该花时间去结交更聪明, 更有素质的人, 做更有价值的事**. 美国总统富兰克林·罗斯福的妻子埃莉诺·罗斯福(Eleanor Roosevelt)说过:")]),t._v(" "),a("blockquote",[a("p",[t._v("Great minds discuss ideas(伟人谈论想法)\nAverage minds discuss events(普通人谈论事件)\nSmall minds discuss people(庸人谈论他人)")])]),t._v(" "),a("p",[t._v("把时间多放在一些想法上, 对自己, 对社会都是有意义的, 而把时间用来八卦别人, 说长道短, **你既不可能改善自己的生活, 也不会让你有所成长, 更不会提升你的影响力. 记住, 你的影响力不是你对别人说长道短的能力, 而是体现在有多少人信赖你并希望得到你的帮助. ** 因此多交一些有想法的朋友, 多把自己的想法付诸实践, 哪怕没有成功, 你的人生也会比别人过得有意义.")]),t._v(" "),a("p",[t._v("如果你看过我以前的博客, 你会发现一些吐槽性质的文章, 但后面就再也没有了, 我也不再针对具体的某个人做出评价. 因为人太复杂了, 经历越多, 你就会发现你很难评价人, 与其花时间在评论人和事上, 不如花时间做一些力所能及的事来改善自己或身边的环境. 所以, **我建议大家少一些对人的指责和批评, 多通过一件事来引发你的思考, 想一想有什么可以改善的地方, 有什么方法可以做得更好, 有哪些是自己可以添砖加瓦的? 你会发现, 只要你坚持这么做, 你个人的提升以及对社会的价值会越来越大, 你的影响力也会越来越大. **")]),t._v(" "),a("h5",{attrs:{id:"_3-面对人生"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-面对人生"}},[t._v("#")]),t._v(" 3.面对人生")]),t._v(" "),a("p",[t._v("现在的我, 既不是左派也不是右派, 我更多时候是一个自由派, 哪边都不站, 只站我自己.")]),t._v(" "),a("p",[t._v('《教父》里有这样的人生观: **第一步要努力实现自我价值, 第二步要全力照顾好家人, 第三步要尽可能帮助善良的人, 第四步为族群发声, 第五步为国家争荣誉. 事实上作为男人, 前两步成功, 人生已算得上圆满, 做到第三步堪称伟大, 而随意颠倒次序的那些人, 一般不值得信任. **这也是古人的"修身齐家治国平天下"! 所以, 在你我准备开始"平天下"的时候, 也得先想想, 自己的生活有没有过好, 家人照顾好了么, 身边有哪些事是自己力所能及可以去改善的.')]),t._v(" "),a("p",[t._v("穷则独善其身, 达则兼济天下. 提升自己, 照顾好自己的家人, 尽己所能帮助身边的人, 这已经很不错了!")]),t._v(" "),a("p",[t._v("什么样的人干什么样的事, 什么样的阶段做什么样的选择. **有人说, 选择比努力更重要, 我深以为然, 而且我觉得选择和决定, 比努力更难. ** 努力是认准了一件事后不停地发力, 而决定要认准哪件事作为自己坚持和努力的方向, 则是令人彷徨和焦虑的(半途而废的人也很多). 面对人生, 你每天都在做一个又一个的决定, 在做一个又一个的选择, 有的决定大, 有的决定小, 你的人生轨迹就是沿着这一个一个的决定和选择走出来的.")]),t._v(" "),a("p",[t._v("我在 24 岁放弃房子, 离开银行到小公司上班的时候, 就知道人生的选择是一个翘翘板, 你选择这一头就不能坐上另一头, **选择是有代价的, 而不选择的代价更大; 选择是要冒险的, 你不敢冒险时风险可能更大; 选择是需要放弃的, 鱼和熊掌不可兼得. 想想等你老了回头看时, 好多事情在年轻的时候不敢做, 可你再也没有机会了, 你就知道不敢选择, 不敢冒险的代价有多大了. **选择就是一种权衡( trade off), 这世上根本不会有什么完美, 只要你想做事, 有雄心壮志, 你的人生就是一个坑接着一个坑, 你所能做的就是找到你喜欢的方向跳坑.")]),t._v(" "),a("p",[t._v("因此, 你要想清楚自己要什么, 不要什么, 而且还不能要得太多, 这样你才好做选择. 否则, 影响决定的因子太多, 决定就不好做, 也做不好.")]),t._v(" "),a("p",[t._v('正如本文开头说的那样, 你是激进派还是保守派, 你是喜欢领导还是喜欢跟从, 你是注重长期还是注重短期, 你是注重过程还是注重结果...你对这些东西的坚持和守护, 成为了你的"三观", 而你的三观影响着你的选择, 你的选择影响着你的人生.')]),t._v(" "),a("h5",{attrs:{id:"_4-价值取向"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-价值取向"}},[t._v("#")]),t._v(" 4.价值取向")]),t._v(" "),a("p",[t._v("下面是一些大家经常在说, 可能也是大多数人关心的问题, 就这些问题, 我也谈谈我的价值取向.")]),t._v(" "),a("p",[t._v("**1. 挣钱. "),a("strong",[t._v("​"),a("strong",[a("strong",[t._v("挣钱是一件大家都想做的事, 但你得解决一个很核心的问题, 那就是为什么别人愿意给你钱? 对于挣钱这件事的看法, 我从大学毕业到现在都没怎么变过, 那就是我更多关注怎么提高自己的能力, 让自己值那个价钱, 让别人愿意付钱. 另外, 我发现")])]),t._v("​")]),t._v("越是有能力的人, 就越不计较一些短期得失, 越计较短期得失的人往往都是很平庸的人. **")]),t._v(" "),a("p",[t._v("有能力的人不会关心自己的年终奖得拿多少, 会不会晋升, 他们更关心自己的实力有没有超过更多人, 更关注自己长远的成长, 而不是一时的利益. 聪明的人从不关心眼前的得失, 不关心表面上的东西, 他们更关心的是长期利益, 关心长期利益的人一定不是投机者, 而是投资者, **投资者会把时间, 精力, 金钱投资在能让自己成长与提升的地方, 能让自己施展本领与抱负的地方, 他们培养自己的领导力和影响力. **而投机者则是在职场溜须拍马, 讨好领导, 在学习上追求速成, 在投资上使用跟随策略, 在创业上甚至会不择手段. 当风险来临时, 投机者是几乎没有任何抗风险能力的, 他们所谓的能力只不过是因为形势好.")]),t._v(" "),a("p",[t._v("**2. 技术. ** 对于计算机技术来说, 要学的东西实在是太多, 我并不害怕要学的东西很多, 因为学习能力是一个好的工程师必需具备的能力, 所以我不惧怕困难和挑战. 我觉得争论语言和技术谁好谁坏是一种幼稚的表现, 没有完美的技术, 工程(Engineering )玩的是权衡(trade off). 所以, 我对没有完美的技术并不担心, 我担心的是, 当我们进入一家公司后, 这家公司会有一些技术上的沉淀, 也就是针对公司自己的专用技术, 比如一些中间件, 一些编程框架, lib 库什么的. 老实说, 我比较害怕公司的专用技术, 因为一旦失业, 我建立在这些专用技术上的技能也会随之瓦解, 有时候我甚至害怕把技术建立在某一个平台上, 小众的不用说了, 大众的我也比较担扰, 比如 Windows 或 Unix/Linux, 因为一旦这个平台不流行或是被取代, 那我也会随之被淘汰(过去的这 20 年已经发生过太多这样的事了). 为了应对这样的焦虑, **我更愿意花时间在技术的原理和技术的本质上, 这导致我需要了解各种各样的技术的设计方法以及内在原理. ** 所以在国内绝大多数程序员们更多关注架构性能的今天, 我则花更多的时间去了解编程范式, 代码重构, 软件设计, 计算机系统原理, 领域设计, 工程方法...只有原理, 本质和设计思想才可能让我不会被绑在某个专用技术或平台上, 除非我们人类的这条计算机之路没走对.")]),t._v(" "),a("p",[t._v('**3. 职业. ** 在过去 20 多年的职业生涯中, 我从基层工程师做到管理, 很多做技术的人都会转管理, 但我还是扎根技术, 就算是在今天, 还是会抠很多技术细节, 包括写代码. 一方面, 我觉得不写代码的人一定是做不好技术管理的, 技术管理要做技术决定, 而从不上手技术的人是做不好技术决定的, 另一方面, 我觉得管理是支持性工作, 不是产出性工作, 大多数管理者无非是因为组织大了, 需要管人管事, 所以要花大量的时间和精力处理各种问题, 甚至办公室政治. 然而, 如果有一天失业了, 大环境变得不好了, 一个管理者和一个程序员要出去找工作, 程序员会比管理者更能自食其力. 因此, 我并不觉得管理者这个职业有意思, 我还是觉得程序员这个有创造性的职业更有趣. **通常来说, 管理者的技能需要到公司和组织中才能展现, 而有创造性技能的人则可以让自己更加独立. 相比之下, 我觉得程序员的技能可以让我更稳定更自由地活着. ** 所以我更喜欢"'),a("a",{attrs:{href:"https://coolshell.cn/articles/4951.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("电影工作组"),a("OutboundLink")],1),t._v('"那样的团队和组织形式.')]),t._v(" "),a("p",[t._v('**4. 打工. ** 对于打工, 也就是加入一家公司工作, 无论是在小公司还是大公司工作, 都会有利有弊, 任何公司都有其不完美的地方, 这个需要承认. 首先我必须完成公司交给我的任务(但我也不会是傻傻地完成工作, 对于一些有问题的任务我也会提出我的看法). 然后, 我会尽我所能找到工作中可以提高效率的地方, 并改善它. 在推动公司 / 部门 / 团队在技术与工程方面进步并不是一件很容易的事, 因为进步是需要成本的. 有时候, 这种成本并不一定是公司和团队愿意接受的. 另外, 从客观规律上来说, 某件事的进步一定会和现状有一些摩擦. 有的人害怕摩擦而选择忍耐, 我则不是, 我觉得与别人的摩擦并不可怕, 因为大家的目标都是基本一致的, 只是做事的标准和方式不一样, 这是可以沟通和相互理解的. 反而, 如果没有去推动这件事, 我觉得对于公司或对于我个人来说, 都是一种对人生的浪费. 敬业也好, 激情也好, 其就是体现在你是否愿意冒险去推动一件于公于私都有利的事, 而不是成为一个"听话", "随大流", "懒政"的人, 这样即耽误了公司也耽误了自己. 所以, 我更信仰的是'),a("a",{attrs:{href:"http://www.aqee.net/post/do-the-right-thing-wait-to-get-fired.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("《做正确的事情, 等着被开除》, "),a("OutboundLink")],1),t._v("这些东西, 可参看"),a("a",{attrs:{href:"https://coolshell.cn/articles/17972.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("《我看绩效考核》, "),a("OutboundLink")],1),t._v("以及我在GitChat 上的一些问答.")]),t._v(" "),a("p",[t._v("**5. 创业. **前两天, 有个小伙跟我说, 他要离开 BAT 去创业公司了, 他觉得在那里更自由一些, 没有大公司的种种问题. 我毫不犹豫地教育了他. 我说, 你选择这个创业公司的动机不对啊, 你无非就是在逃避一些东西罢了, 你把创业公司当做一个避风港, 这是不对的, 因为创业公司的问题可能会更多. 去创业公司更好的心态是, 这个创业公司在干的事业是不是你的事业? 说白了, 如果你是为了你的事业, 为了解决个什么问题, 为了改进个什么东西, 那么, 创业是适合你的, **也只有在做自己事业的时候, 你才能不惧困难, 勇敢地面对一切. 那种想找一个安稳的避风港的心态不会让你平静, 你要知道世界本来就是不平静的, 找到自己的归宿和目标才可能让你真正平静. **")]),t._v(" "),a("p",[t._v("正因如此, 在我现在的创业团队, 我不要求大家加班, 我也不灌洗脑鸡汤, 对于想要加入的人, 我会跟他讲我现在遇到的各种问题以及各种机遇, 并让他自己思考, 我们在做的事情是不是他自己的事业诉求? 还可不可以更好? "),a("strong",[t._v("每个人都应该为自己的事业, 为自己的理想去活一次, 追逐自己的事业和理想并不容易, 需要有很大付出, 也只有你内心的那个理想才值得这么大的付出……")])]),t._v(" "),a("p",[t._v("**6. 客户. **基于上述的价值观, 我现在创业面对客户时, 并不会完全迁就客户, 我的一些银行客户和互联网客户应该体会到我的做事方式了. 虽然用户要什么我就给什么, 用户想听什么我就说什么, 这样更圆滑, 可以省很多精力, 但这都不是我喜欢的. **我更愿意鲜明地表达我的观点, 并拉着用户跟我一起成长, 因为我并不觉得完成客户的项目有成就感, 我的成就感来自于客户的成长. **所以, 面对客户做得不对的, 有问题有隐患的地方, 我基本上都是直言不讳地说出来. 因为我觉得把真实的想法说出来是对客户, 对自己最基本的尊重, 不管客户最终的选择是什么, 我都要把利弊跟客户讲清楚. 我并不是在这里装, 因为, 我也想做一些更高级, 更有技术含量的事. 所以, 对于一些还未达到我预期的客户, 如果我不把他们拉上来, 我也对不起自己.")]),t._v(" "),a("p",[t._v('最后, 对于我"不惑之年"形成的这些价值观体系, 也许未来还会变, 也许还不成熟, 总之, 我不愿跟大多数人一样, 因为大多数人都是随遇而安或随大流的, 他们觉得这样做风险最小, 而我想走一条属于自己的路, 做真正的自己. 就像我 24 岁从银行里出来时想的那样, **我选择了一个正确的专业(计算机科学), 待在了一个正确的年代(信息化革命), 这样的"狗屎运"几百年不遇, 如果我还患得患失, 那我岂不辜负了活在这样一个刺激的时代? ! 我只需要在这个时代中做有价值的事就好了! **')]),t._v(" "),a("p",[t._v("这个时代真的是太好了!")]),t._v(" "),a("h4",{attrs:{id:"业精于勤-行成于思"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#业精于勤-行成于思"}},[t._v("#")]),t._v(" 业精于勤,行成于思")]),t._v(" "),a("p",[t._v("不知不觉, 一年就这样过去了. 这个专栏也到了结束的时候. 在结束的时候, 我需要跟大家正式说声再见, 同时也谢谢各位对本专栏的厚爱, 并希望大家从我的专栏里有所收获. 我也借最后这个结束语回顾一下整个过程.")]),t._v(" "),a("p",[t._v('老实说, 在本专栏刚开始的时候, 我对于这个专栏要写点什么是完全没有什么清晰的想法. 一方面, 我从来没有干过这样的事, 这么高频度发表文章的玩法, 在一开始来说我其实是相当懵逼的. 另一方面, 我内心对于收费这个事是很有压力的, 不知道要写什么样的内容才值得收费. 平时写 CoolShell, 完全是想写什么写什么, 别人爱不爱看都无所谓, 而对于收费的内容反而有点不知所措了. 所以, 在不知道要写什么专题的情况下, 只能起个"左耳听风"这么烂的名字, 哈哈. 这也是为什么在一开始专栏的文章比较散乱, 也没什么主线的原因.')]),t._v(" "),a("p",[t._v('同时, 极客时间的编辑也不希望我写很技术的文章, 因为他们对标的是"得到". 所以, 我早早就写好的《编程范式游记》压了两个多月, 而在一开始发表一些非技术类的和个人成长有关的文章(因为大家都觉得这样的文章不但人气足, 而且也是我的专长, 呵呵). 直到库存的文章用得差不多的时候, 才开始发《编程范式游记》. 那时我才觉得我应该一个专题一个专题地写, 这样才能够扛得住一整年的更新.')]),t._v(" "),a("p",[t._v("于是才有了后面的《区块链》系列, 《分布式系统的本质》系列, 和《分布式架构设计模式》系列, 再之后是大规模的《程序员练级攻略》, 以及个人发展的三个核心主题《面试》, 《学习》, 《沟通》, 加上之前的《时间管理》, 《技术领导力》, 《技术变现》, 以及流程相关的《故障处理》, 《Git 协同工作流》, 《安全问题》, 还有《程序错误处理》, 《Go, Docker 新技术选择》等等零散的文章, 最终构成了整个专栏.")]),t._v(" "),a("p",[t._v("这其中的选题基本上都是我给其它公司做的咨询的内容, 或是我到一些公司里分享中的一些内容, 其中的很多内容都是对公司收费的, 有的是我做企业培训的内容, 有的是我为企业解决实际问题后的总结和归纳, 有的则是我为企业做的整体架构的设计方案.")]),t._v(" "),a("p",[t._v('如果按"得到"那样一篇 2000 字音频 5 分钟, 我的确也可以做到每周 5 篇的更新速度(但是每篇文章就不完整了). 对此, 我觉得我还是对得起这个收费专栏的, 因为这些内容我问企业的收费都比这个专栏高得多得多. 这也是这个专栏在运作到一半的时候开始涨价的缘故, 还希望大家能理解.')]),t._v(" "),a("p",[t._v("当然, 在写这个专栏的过程也是令我非常痛苦的, 我基本上搭上了我的周末和节假日, 因为我平时还有我的主业. 我的主业在创业, 各种忙, 所以只能使用晚上或是休息时间. 尤其是在写《程序员练级攻略》的时候, 我足足花了 4-5 个月的时间, 基本上把整个互联网人肉地翻了一遍. 我在这几个月的时间里阅读了至少上千篇文章, 最后我对整个互联网我能找得到的知识进行梳理和筛选, 去除了至少 2/3 到 3/4 的内容, 产生了现在你看到的专栏文章, 然而也是很庞大的.")]),t._v(" "),a("p",[t._v("然而这个过程, 对我也是很有收获的. 一方面, 我挑战了自己, 我发现居然可以这么高产, 有这么多的东西可以写下来. 有很多系列, 完全是可以出书的, 这个专栏我觉得要出上 4-5 本书是没有问题的(当然, 我不会出的).")]),t._v(" "),a("p",[t._v("另一方面, 也是最重要的一方面, 我的创业过程中见的人接收到的信息是以前打工时代的一百倍以上, 我每天都在不停地学习, 思考和总结. 所以, 正好用这个机会把我的这些思考和想法给总结下来了, 这对于我个人来说, 比这个专栏的意义更大. 从这两方面, 我觉得我的成长和收获远远超过了这个收费专栏的收入, 因为这种成长的感觉是多少钱都换不来的.")]),t._v(" "),a("p",[t._v('好了, 讲完这个专栏和我自己在这个专栏中的收获, 我该谈谈对读者的期望和寄语了. 我在我的专栏中不断地说过, 学习是没有捷径的, 是逆人性的, 你需要长期地付出时间和精力. 如果一个人订一个收费专栏就可以成为高手, 那么这种"高手"早就被"北大青鸟"这样的培训公司"量产"了.')]),t._v(" "),a("p",[t._v("不过, 好在现在的人都被微博, 微信, 知乎, 今日头条, 抖音等这些 App 消费着(注意: 我说的不是人在消费 App, 而是人被 App 消费), 然后英文还不行, 科学上网也不行. 所以你真的不需要努力, 只需要正常, 你就可以超过绝大多数人.")]),t._v(" "),a("p",[t._v("你真的千万不要以为你订几个专栏, 买几本书, 听高手讲几次课, 你就可以变成高手了. 这就好像你以为你买了一个高级的机械键盘, 27 吋的 4K 屏, 高性能的电脑, 高级的人体工程学的桌椅, 你就可以写出好的代码来一样. 要成为一个好的羽毛球高手, 不是买几副好的运动装备, 到正规的体育场去打球, 而是要付出常人不能付出的汗水甚至伤痛. 任何行业都是这样的.")]),t._v(" "),a("p",[t._v("这里, 我还要把我《高效学习》中那个学习金字塔再帖出来.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/6dd6a269b78602797b25ed8c40563d01-20230731162102-drteevb.png",alt:""}})]),t._v(" "),a("p",[t._v("再次强调一下, 这个世界上的学习只有两种, "),a("strong",[t._v("一种是被动学习, 一种是主动学习")]),t._v(". 听课, 看书, 看视频, 看别人的演讲, 这些统统都是被动学习, 知识的留存度最多只有 30%, 不信你问问自己, 今天我的专栏中, 你记住了多少? 而与别人讨论, 实践和传授给别人, 是主动学习, 其可以让你掌握知识的 50% 到 90% 以上.")]),t._v(" "),a("p",[t._v("所以, 我希望我的专栏没有给你带来那种速成的幻觉, 而是让你有了可以付出汗水的理由和信心. 我没有把我获取知识的手段和我的知识图给隐藏起来, 然后, 用我理解的东西再贩卖给大家. 这样, 我可以把我的《程序员练级攻略》一共拆成 20-30 个小专栏, 然后一点一点地来收割大家, 这样我可以把大家困在知识的最底层.")]),t._v(" "),a("p",[t._v("然而, 我并没有这样做. 我觉得大家应该要去自己读最源头的东西, 源头的文章都有很多的链接, 你也会有第一手的感受, 这样你可以顺着找到更好的知识源, 并组织出适合你自己的学习路径和地图. 订阅我的专栏, 如果你不能够按照我专栏里的那些东西去践行的话, 那么也毫无意义.")]),t._v(" "),a("p",[t._v("这也是为什么我在我的读者群中推荐出 ARTS 的任务, 每个人每周一个 Algorithm, Review 一篇英文文章, 总结一个工作中的技术 Tip, 以及 Share 一个传递价值观的东西! 我希望这个事可以给大家得到相应的算法, 代码, 技术和影响力的训练. 如果你不去践行, 那么我专栏上的这些东西你也就只是看看罢了.")]),t._v(" "),a("p",[t._v("在实施的过程中, 我们建立了一个近 500 人的读者微信群, 进这个群的人必需要承诺做 ARTS. 然而事实上呢, 并没有, 敢进这个微信群的人已经很少了, 而进来的, 过了三个月后, 还在坚持做的, 只有个位数的人了. 这个就是现实.")]),t._v(" "),a("p",[t._v("这个世界不存在知识不够的情况, 真的还没有到知识被少数精英的攥在手里面不给大家的情况, 这个世界上的知识就像阳光和空气一样, 根本不需要你付费, 你就可以获得的. 问题是, 大多数人都失去了获取知识的能力, 你就算把知识放在他们面前, 他们也不会去学习, 他们需要你喂, 甚至需要你帮他们嚼碎了, 帮他们消化过了, 他们才能吃得到, 消化得了. 这才是最大的问题. 不好意思, 我又说实话了, 难听但是对你有用.")]),t._v(" "),a("p",[t._v("我的专栏更多的是我的经验和心得的分享, 不是捷径和知识的搬运. 我已经花了 20 年的投入和付出, 而我的成长中走了很多的弯路和磨难, 我希望我的这些经验可以让你只需要付出我一半的时间就可以远远地超过我.")]),t._v(" "),a("p",[t._v('另外, 有很多知识我把其称作为"硬核知识", 这类的知识就像硬核桃一样, 相当难啃. 就像那些数学公式, 计算机底层原理, 复杂的网络协议和操作系统的调度等等, 这些知识, 你除了死磕之外, 没有其它的办法.')]),t._v(" "),a("p",[t._v('不要说, 某某技术因为太复杂了所以是"反人类的", 那些"硬核技术"不是反人类的, 是"反低能人类"的. 所以, 别把自己归到那个类别中. 要学会不断地挑战自己, 挑战自己就是不让自己舒舒服服地像个僵尸一样地活着, 而是改变自己让自己像凤凰一样在浴火中涅槃重生!')]),t._v(" "),a("p",[t._v("青山不改, 绿水长流, 祝各位成长快乐!")]),t._v(" "),a("p",[t._v("再见!")]),t._v(" "),a("p",[t._v("​​")])])}),[],!1,null,null,null);a.default=e.exports}}]);