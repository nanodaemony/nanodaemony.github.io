(window.webpackJsonp=window.webpackJsonp||[]).push([[238],{590:function(s,t,a){"use strict";a.r(t);var n=a(4),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"_5-消息队列高手课"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-消息队列高手课"}},[s._v("#")]),s._v(" 5.消息队列高手课")]),s._v(" "),t("h4",{attrs:{id:"前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),t("h5",{attrs:{id:"_1-底层技术知识-给你深入解决业务问题的能力"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-底层技术知识-给你深入解决业务问题的能力"}},[s._v("#")]),s._v(" 1.底层技术知识, 给你深入解决业务问题的能力")]),s._v(" "),t("p",[s._v("消息队列几乎是每个后端程序员都会用到的中间件, 它在你的技术栈中重要程度不言而喻. 消息队列的功能很简单, 就是收发消息, 看一下文档, 几分钟就写出一个用消息队列收发消息的 Demo. 但是, 把消息队列真正应用到生产系统中, 就没那么简单了.")]),s._v(" "),t("p",[s._v("在使用消息队列的过程中, 可能会遇到很多问题, 比如选择哪款消息队列更适合你的业务系统? 如何保证系统的高可靠, 高可用和高性能? 如何保证消息不重复, 不丢失? 如何做到水平扩展? 诸如此类的问题, "),t("strong",[s._v("每一个问题想要解决好, 都不太容易. ​")])]),s._v(" "),t("p",[t("strong",[s._v("从职业发展, 保持市场竞争力的角度来看, 掌握一些底层技术, 深耕个人技术栈的深度, 实现从“用轮子”到“造轮子”的技术提升, 也是一个非常明智的选择. ​")]),s._v("为什么这么说呢?")]),s._v(" "),t("p",[s._v("可以看到, 技术圈的风向一直在变, 大数据, 云的热度已经在慢慢消退, 现在当红的是 AI 和 IoT. 这些火热的概念, 它最终要从论文和 PPT 落地, 变成真正能解决问题的系统, 否则就是一个空中楼阁. 那不变的是什么? 无论 AI 还是 IoT, 都是一个分布式系统, 都要处理海量的数据, 都要应对海量并发, 它们需要解决的底层问题是一样的. 所以, 不管技术圈的风向如何变化, 那些掌握这些"),t("strong",[s._v("底层技术")]),s._v("的程序员, 永远都是最受欢迎的人.")]),s._v(" "),t("p",[s._v("消息队列也确实是非常适合拿来展开做源码分析的技术. 不难发现, 消息队列作为使用最广泛, 生命力最旺盛的中间件, 无论技术如何发展, 都离不开分布式系统的最基本需求: "),t("strong",[s._v("通信")]),s._v(". 它涉及的底层技术是非常全面的, 比如: 高性能通信, 海量数据存储, 高并发等. 并且, 消息队列具有功能简洁, 结构清晰的特点, 入门简单但具有足够的深度, 适合用来进行深入地分析和学习.")]),s._v(" "),t("p",[s._v("总结起来, 通过这次系列课程的学习, 你可以达成三个成就:")]),s._v(" "),t("h5",{attrs:{id:"_2-课程设置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-课程设置"}},[s._v("#")]),s._v(" 2.课程设置")]),s._v(" "),t("p",[s._v("这个课程设置为三部分: 基础篇, 进阶篇和案例篇.")]),s._v(" "),t("p",[t("strong",[s._v("基础篇")]),s._v(", 以讲解消息队列的使用方法和最佳实践为主, 包括消息队列基础知识, 技术选型, 高级功能等, 给出消息队列应用过程中常见问题的解决策略.")]),s._v(" "),t("p",[t("strong",[s._v("进阶篇")]),s._v(", 是这个课程的核心内容, 会深入到源码中去, 探讨消息队列的实现原理.")]),s._v(" "),t("p",[s._v("在这个模块的前半部分, 每篇会围绕一个知识点来深入探讨, 比如像异步模型, 高性能的底层网络通信等, "),t("strong",[s._v("其中每一个知识点不仅是中间件开发人员必须掌握的, 而且是各大厂面试题中的常考内容")]),s._v(".")]),s._v(" "),t("p",[s._v("后半部分会分析一些开源消息队列的源代码, 每篇选择一个开源的消息队列, 针对一个功能特性, 来一起分析它的源码是如何实现的, 理解这个功能特性的实现原理, 同时学习源代码中优秀的设计思想和一些好的编程技巧.")]),s._v(" "),t("p",[s._v("希望通过进阶篇的学习, 能够帮助理解消息队列的设计思想, "),t("strong",[s._v("学会从源码分析, 解决问题的方法, 掌握这些可复用到其他领域的底层技术. ​")])]),s._v(" "),t("p",[t("strong",[s._v("案例篇")]),s._v(", 会做两个微型的项目.")]),s._v(" "),t("ul",[t("li",[s._v("第一个微项目, 一起用消息队列和流计算框架来实现一个流计算任务;")]),s._v(" "),t("li",[s._v("第二个微项目, 一起来实现一个最简单的 RPC 框架, 因为开发中间件用到的很多技术都是互通的, 开发消息队列的技术同样可以用于开发 RPC 框架.")])]),s._v(" "),t("h5",{attrs:{id:"_3-由浅入深学习消息队列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-由浅入深学习消息队列"}},[s._v("#")]),s._v(" 3.由浅入深学习消息队列")]),s._v(" "),t("p",[s._v("要想学好消息队列, 不应该仅仅停留在使用层面上, 还需要深入了解它的"),t("strong",[s._v("设计思路, 实现原理和使用的底层技术")]),s._v(". 但是要注意循序渐进, 由浅入深地去学习.")]),s._v(" "),t("p",[s._v("第一步就是去了解消息的基本概念, 比如主题, 订阅, 分区等. 这些基础的概念, 就像学习一门编程语言中的基础语法一样, 只有搞清楚它们, 才能进行后续的学习. 然后需要去掌握使用消息队列的技能, 能够处理一些常见的问题.")]),s._v(" "),t("p",[s._v("有了这些基础知识的储备以后, 就可以深入到源码中去, 进而加深对消息队列的理解, 提升技术深度了. 这时候要了解其中必备的底层技术, 比如高性能的网络传输, 内存管理和锁的使用; 同时也要深入学习消息队列一些高级特性的实现原理, 比如如何实现事务消息, 消息队列如何支撑海量 IoT 设备同时在线.")]),s._v(" "),t("h5",{attrs:{id:"_4-一份知识图谱"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-一份知识图谱"}},[s._v("#")]),s._v(" 4.一份知识图谱")]),s._v(" "),t("p",[s._v("下面是一张 "),t("strong",[s._v("“消息队列生态全景图”, 涵盖了消息队列产品, 标准和协议, 应用场景, 编程语言以及实现技术")]),s._v(".")]),s._v(" "),t("p",[t("img",{attrs:{src:"assets/image-20230522220439-76nodz0.png",alt:""}})]),s._v(" "),t("p",[s._v("大概浏览一下图中涉及的内容, 首先来看看消息队列的产品, 标准和协议, 以及应用场景的部分.")]),s._v(" "),t("p",[s._v("目前, 市面上有的消息队列产品很多, 像 Kafka, ActiveMQ, RocketMQ, Pulsar, RabbitMQ 等等, 其中比较主流的开源消息队列为 Kafka, RocketMQ 和 RabbitMQ. "),t("strong",[s._v("并不需要把每个消息队列都去学习一遍, 因为这些消息队列中很多的原理和知识都共通的")]),s._v(".")]),s._v(" "),t("p",[s._v("与消息队列相关的协议和标准有 JMS, AMQP, MQTT 和 OpenMessaging. 不过, 目前为止还没有哪个标准或者协议能“一统江湖”.")]),s._v(" "),t("p",[s._v("消息队列的应用范围广泛, 在一些典型且常用的消息队列应用场景中, 比如像处理日志数据, 监控, 流计算等, 需要了解对应不同场景, 应该选用哪个消息队列产品? 什么样的姿势才是最佳的使用方式?")]),s._v(" "),t("p",[s._v("然后来看看这些开源消息队列产品实现中, 涉及的编程语言和技术要点.")]),s._v(" "),t("p",[s._v("消息队列涉及到的语言有 Java, Scala 和 Erlang.")]),s._v(" "),t("p",[s._v("对于实现消息队列中涉及的重要的实现技术, 像网络通信, 序列化反序列化, 分布式事务, 内存管理等, 这部分内容是这门课程中的精粹, 需要重点学习. 这些基础的技术要点不仅仅可以用于实现消息队列, 在其他各种中间件的实现过程中都会涉及, 也是各种高级研发职位面试题中经常会被问到的内容.")]),s._v(" "),t("h5",{attrs:{id:"_5-学习资源推荐"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-学习资源推荐"}},[s._v("#")]),s._v(" 5.学习资源推荐")]),s._v(" "),t("p",[s._v("消息队列的最佳学习资料就是它们的官方文档, 因为官方文档更加详细准确, 并且随着版本迭代, 很多第三方教程文档会过时, 而官方文档总能保持与当前版本同步更新. 以下是几个开源消息队列的官方文档:")]),s._v(" "),t("ul",[t("li",[s._v("RocketMQ 官方文档: "),t("a",{attrs:{href:"https://rocketmq.apache.org/docs/quick-start/",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://rocketmq.apache.org/docs/quick-start/"),t("OutboundLink")],1)]),s._v(" "),t("li",[s._v("RocketMQ 中国开发者中心: "),t("a",{attrs:{href:"http://rocketmq.cloud/zh-cn/",target:"_blank",rel:"noopener noreferrer"}},[s._v("http://rocketmq.cloud/zh-cn/"),t("OutboundLink")],1)]),s._v(" "),t("li",[s._v("Kafka 官方文档: "),t("a",{attrs:{href:"http://kafka.apache.org/documentation/",target:"_blank",rel:"noopener noreferrer"}},[s._v("http://kafka.apache.org/documentation/"),t("OutboundLink")],1)]),s._v(" "),t("li",[s._v("RabbitMQ 官方文档: "),t("a",{attrs:{href:"https://www.rabbitmq.com/documentation.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://www.rabbitmq.com/documentation.html"),t("OutboundLink")],1)])]),s._v(" "),t("h4",{attrs:{id:"为什么需要消息队列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要消息队列"}},[s._v("#")]),s._v(" 为什么需要消息队列?")]),s._v(" "),t("p",[s._v("本节来讲讲为什么需要消息队列, 消息队列主要解决的是什么问题.")]),s._v(" "),t("p",[s._v("举个例子说明一下消息队列的作用. 小袁是一家巧克力作坊的老板, 生产出美味的巧克力需要三道工序: 首先将可可豆磨成可可粉, 然后将可可粉加热并加入糖变成巧克力浆, 最后将巧克力浆灌入模具, 撒上坚果碎, 冷却后就是成品巧克力了.")]),s._v(" "),t("p",[s._v("最开始的时候, 每次研磨出一桶可可粉后, 工人就会把这桶可可粉送到加工巧克力浆的工人手上, 然后再回来加工下一桶可可粉. 小袁很快就发现, 其实工人可以不用自己运送半成品, 于是他在每道工序之间都增加了一组传送带, 研磨工人只要把研磨好的可可粉放到传送带上, 就可以去加工下一桶可可粉了. 传送带解决了上下游工序之间的通信问题.")]),s._v(" "),t("p",[s._v("传送带上线后确实提高了生产效率, 但也带来了新的问题: 每道工序的生产速度并不相同. 在巧克力浆车间, 一桶可可粉传送过来时, 工人可能正在加工上一批可可粉, 没有时间接收. 不同工序的工人们必须协调好什么时间往传送带上放置半成品, 如果出现上下游工序加工速度不一致的情况, 上下游工人之间必须互相等待, 确保不会出现传送带上的半成品无人接收的情况.")]),s._v(" "),t("p",[s._v("为了解决这个问题, 小袁在每组传送的下游带配备了一个暂存半成品的仓库, 这样上游工人就不用等待下游工人有空, 任何时间都可以把加工完成的半成品丢到传送带上, 无法接收的货物被暂存在仓库中, 下游工人可以随时来取. 传送带配备的仓库实际上起到了通信”过程中缓存”的作用.")]),s._v(" "),t("p",[t("img",{attrs:{src:"assets/image-20230522220503-idub4pb.jpg",alt:""}}),t("br"),s._v("\n传送带解决了半成品运输问题, 仓库可以暂存一些半成品, 解决了上下游生产速度不一致的问题, 小袁在不知不觉中实现了一个巧克力工厂版的消息队列.")]),s._v(" "),t("h5",{attrs:{id:"_1-哪些问题适合使用消息队列来解决"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-哪些问题适合使用消息队列来解决"}},[s._v("#")]),s._v(" 1.哪些问题适合使用消息队列来解决?")]),s._v(" "),t("p",[s._v("接下来说一下开发中哪些问题适合使用消息队列解决.")]),s._v(" "),t("h6",{attrs:{id:"_1-异步处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-异步处理"}},[s._v("#")]),s._v(" (1)异步处理")]),s._v(" "),t("p",[s._v("如何设计一个秒杀系统? 这个问题可以有一百个版本的合理答案, 但大多数答案中都离不开消息队列. 秒杀系统需要解决的核心问题是, "),t("strong",[s._v("如何利用有限的服务器资源, 尽可能多地处理短时间内的海量请求")]),s._v(". 处理一个秒杀请求包含了很多步骤, 例如:")]),s._v(" "),t("ul",[t("li",[s._v("风险控制;")]),s._v(" "),t("li",[s._v("库存锁定;")]),s._v(" "),t("li",[s._v("生成订单;")]),s._v(" "),t("li",[s._v("短信通知;")]),s._v(" "),t("li",[s._v("更新统计数据.")])]),s._v(" "),t("p",[s._v("如果没有任何优化, 正常的处理流程是: APP 将请求发送给网关, 依次调用上述 5 个流程, 然后将结果返回给 APP.")]),s._v(" "),t("p",[s._v("对于对于这 5 个步骤来说, "),t("strong",[s._v("能否决定秒杀成功, 实际上只有风险控制和库存锁定这 2 个步骤")]),s._v(". 只要用户的秒杀请求通过风险控制, 并在服务端完成库存锁定, 就可以给用户返回秒杀结果了, 对于后续的生成订单, 短信通知和更新统计数据等步骤, 并不一定要在秒杀请求中处理完成.")]),s._v(" "),t("p",[s._v("所以当服务端完成前面 2 个步骤, "),t("strong",[s._v("确定本次请求的秒杀结果后, 就可以马上给用户返回响应, 然后把请求的数据放入消息队列中, 由消息队列异步地进行后续的操作")]),s._v(".")]),s._v(" "),t("p",[t("img",{attrs:{src:"assets/image-20230522220503-dhxche9.jpg",alt:""}})]),s._v(" "),t("p",[s._v("处理一个秒杀请求, 从 5 个步骤减少为 2 个步骤, 这样不仅响应速度更快, 并且在秒杀期间, 可以把大量的服务器资源用来处理秒杀请求. 秒杀结束后再把资源用于处理后面的步骤, 充分利用有限的服务器资源处理更多的秒杀请求.")]),s._v(" "),t("p",[t("strong",[s._v("可以看到, 在这个场景中, 消息队列被用于实现服务的异步处理. ​")]),s._v("这样做的好处是:")]),s._v(" "),t("ul",[t("li",[s._v("可以更快地返回结果;")]),s._v(" "),t("li",[s._v("减少等待, 自然实现了步骤之间的并发, 提升系统总体的性能.")])]),s._v(" "),t("h6",{attrs:{id:"_2-流量控制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-流量控制"}},[s._v("#")]),s._v(" (2)流量控制")]),s._v(" "),t("p",[s._v("继续说秒杀系统, 前面已经使用消息队列实现了部分工作的异步处理, 但依然还面临一个问题: 如何避免过多的请求压垮秒杀系统?")]),s._v(" "),t("p",[s._v("一个设计健壮的程序有自我保护的能力, 也就是说, 它应该可以在海量的请求下, 还能在自身能力范围内尽可能多地处理请求, 拒绝处理不了的请求并且保证自身运行正常. 不幸的是, 现实中很多程序并没有那么健壮, 而直接拒绝请求返回错误对于用户来说也是不怎么好的体验.")]),s._v(" "),t("p",[s._v("因此, 需要设计一套足够健壮的架构来将后端的服务保护起来. 常见的"),t("strong",[s._v("设计思路是, 使用消息队列隔离网关和后端服务, 以达到流量控制和保护后端服务的目的. ​")])]),s._v(" "),t("p",[s._v("加入消息队列后, 整个秒杀流程变为:")]),s._v(" "),t("ol",[t("li",[s._v("网关在收到请求后, 将请求放入请求消息队列;")]),s._v(" "),t("li",[s._v("后端服务从请求消息队列中获取 APP 请求, 完成后续秒杀处理过程, 然后返回结果.")])]),s._v(" "),t("p",[t("img",{attrs:{src:"assets/image-20230522220503-riyi221.jpg",alt:""}})]),s._v(" "),t("p",[t("strong",[s._v("秒杀开始后, 当短时间内大量的秒杀请求到达网关时, 不会直接冲击到后端的秒杀服务, 而是先堆积在消息队列中, 后端服务按照自己的最大处理能力, 从消息队列中消费请求进行处理. ​")])]),s._v(" "),t("p",[s._v("对于超时的请求可以直接丢弃, APP 将超时无响应的请求处理为秒杀失败即可. 运维人员还可以随时增加秒杀服务的实例数量进行水平扩容, 而不用对系统的其他部分做任何更改.")]),s._v(" "),t("p",[s._v("这种设计的优点是: 能根据下游的处理能力自动调节流量, 达到**==削峰填谷==**的作用. 但这样做同样是有代价的:")]),s._v(" "),t("ul",[t("li",[s._v("增加了系统调用链环节, 导致总体的"),t("strong",[s._v("响应时延变长")]),s._v(".")]),s._v(" "),t("li",[s._v("上下游系统都要将同步调用改为异步消息, 增加了系统的"),t("strong",[s._v("复杂度")]),s._v(".")])]),s._v(" "),t("p",[s._v("那还有没有更简单一点儿的流量控制方法呢? 如果能预估出秒杀服务的处理能力, 就可以用消息队列实现一个令牌桶, 更简单地进行流量控制.")]),s._v(" "),t("p",[s._v("令牌桶控制流量的原理是: 单位时间内只发放固定数量的令牌到令牌桶中, 规定服务在处理请求之前必须先从令牌桶中拿出一个令牌, 如果令牌桶中没有令牌, 则拒绝请求. 这样就保证单位时间内, 能处理的请求不超过发放令牌的数量, 起到了流量控制的作用.")]),s._v(" "),t("p",[t("img",{attrs:{src:"assets/image-20230522220503-ph3dhnm.jpg",alt:""}})]),s._v(" "),t("p",[s._v("实现的方式也很简单, 不需要破坏原有的调用链, 只要网关在处理 APP 请求时增加一个获取令牌的逻辑.")]),s._v(" "),t("p",[s._v("令牌桶可以简单地用一个有固定容量的消息队列加一个令牌发生器来实现: "),t("strong",[s._v("令牌发生器按照预估的处理能力, 匀速生产令牌并放入令牌队列(如果队列满了则丢弃令牌), 网关在收到请求时去令牌队列消费一个令牌, 获取到令牌则继续调用后端秒杀服务, 如果获取不到令牌则直接返回秒杀失败")]),s._v(".")]),s._v(" "),t("p",[s._v("以上是常用的使用消息队列两种进行流量控制的设计方法, 可以根据各自的优缺点和不同的适用场景进行合理选择.")]),s._v(" "),t("h6",{attrs:{id:"_3-服务解耦"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-服务解耦"}},[s._v("#")]),s._v(" (3)服务解耦")]),s._v(" "),t("p",[s._v("消息队列的另外一个作用, 就是"),t("strong",[s._v("实现系统应用之间的解耦")]),s._v(". 再举一个电商的例子来说明解耦的作用和必要性.")]),s._v(" "),t("p",[s._v("订单是电商系统中比较核心的数据, 当一个新订单创建时:")]),s._v(" "),t("ol",[t("li",[s._v("支付系统需要发起支付流程;")]),s._v(" "),t("li",[s._v("风控系统需要审核订单的合法性;")]),s._v(" "),t("li",[s._v("客服系统需要给用户发短信告知用户;")]),s._v(" "),t("li",[s._v("经营分析系统需要更新统计数据;")]),s._v(" "),t("li",[s._v("……")])]),s._v(" "),t("p",[s._v("这些订单下游的系统都需要实时获得订单数据. 随着业务不断发展, 这些订单下游系统不断的增加, 不断变化, 并且每个系统可能只需要订单数据的一个子集, 负责订单服务的开发团队不得不花费很大的精力, 应对不断增加变化的下游系统, 不停地修改调试订单系统与这些下游系统的接口. 任何一个下游系统接口变更, 都需要订单模块重新进行一次上线, 对于一个电商的核心服务来说, 这几乎是不可接受的.")]),s._v(" "),t("p",[t("strong",[s._v("所有的电商都选择用消息队列来解决类似的系统耦合过于紧密的问题")]),s._v(". 引入消息队列后, "),t("strong",[s._v("订单服务在订单变化时发送一条消息到消息队列的一个主题 Order 中, 所有下游系统都订阅主题 Order, 这样每个下游系统都可以获得一份实时完整的订单数据")]),s._v(".")]),s._v(" "),t("p",[s._v("无论增加, 减少下游系统或是下游系统需求如何变化, 订单服务都无需做任何更改, 实现了订单服务与下游服务的解耦.")]),s._v(" "),t("h5",{attrs:{id:"_2-总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-总结"}},[s._v("#")]),s._v(" 2.总结")]),s._v(" "),t("p",[s._v("以上就是消息队列最常被使用的三种场景: "),t("strong",[s._v("异步处理, 流量控制和服务解耦")]),s._v(". 当然消息队列的适用范围不仅仅局限于这些场景, 还有包括:")]),s._v(" "),t("ul",[t("li",[s._v("作为发布 / 订阅系统实现一个微服务级系统间的观察者模式;")]),s._v(" "),t("li",[s._v("连接流计算任务和数据;")]),s._v(" "),t("li",[s._v("用于将消息广播给大量接收者.")])]),s._v(" "),t("p",[t("strong",[s._v("简单的说, 在单体应用里面需要用队列解决的问题, 在分布式系统中大多都可以用消息队列来解决.")])]),s._v(" "),t("p",[s._v("同时也要认识到, 消息队列也有它自身的一些问题和局限性, 包括:")]),s._v(" "),t("ul",[t("li",[s._v("引入消息队列带来的延迟问题;")]),s._v(" "),t("li",[s._v("增加了系统的复杂度;")]),s._v(" "),t("li",[s._v("可能产生数据不一致的问题.")])]),s._v(" "),t("p",[s._v("所以说没有最好的架构, 只有最适合的架构, 根据目标业务的特点和自身条件选择合适的架构, 才是体现一个架构师功力的地方.")]),s._v(" "),t("h4",{attrs:{id:"如何选择消息队列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何选择消息队列"}},[s._v("#")]),s._v(" 如何选择消息队列?")]),s._v(" "),t("p",[s._v('作为一个程序员, 相信你一定听过"没有银弹"这个说法, 这里面的银弹是指能轻松杀死狼人, 用白银做的子弹, 什么意思呢? 在软件工程中, 不存在像"银弹"这样可以解决一切问题的设计, 架构或软件, 每一个软件系统, 它都是独一无二的, 不可能用一套方法去解决所有的问题.')]),s._v(" "),t("p",[s._v("在消息队列的技术选型这个问题上, 也是同样的道理. 并不存在说, 哪个消息队列就是最好的. 常用的这几个消息队列, 每一个产品都有自己的优势和劣势, 需要根据现有系统的情况, 选择最适合的产品.")]),s._v(" "),t("h5",{attrs:{id:"_1-选择消息队列产品的基本标准"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-选择消息队列产品的基本标准"}},[s._v("#")]),s._v(" 1.选择消息队列产品的基本标准")]),s._v(" "),t("p",[s._v("虽然这些消息队列产品在功能和特性方面各有优劣, 但在选择的时候要有一个最低标准, 保证入选的产品至少是及格的.")]),s._v(" "),t("p",[s._v("先说一下这及格的标准是什么样的.")]),s._v(" "),t("p",[t("strong",[s._v("首先, 必须是开源的产品")]),s._v(", 这个非常重要. 开源意味着, 如果有一天遇到了一个影响系统业务的 Bug, 至少还有机会通过修改源代码来迅速修复或规避这个 Bug, 解决系统火烧眉毛的问题, 而不是束手无策地等待开发者不一定什么时候发布的下一个版本来解决.")]),s._v(" "),t("p",[t("strong",[s._v("其次, 这个产品必须是近年来比较流行并且有一定社区活跃度的产品")]),s._v(". 流行的好处是, 只要使用场景不太冷门, 那么遇到 Bug 的概率会非常低, 因为大部分可能遇到的 Bug, 其他人早就遇到并且修复了. 还有一个优势就是, 流行的产品与周边生态系统会有一个比较好的集成和兼容, 比如 Kafka 和 Flink 就有比较好的兼容性, Flink 内置了 Kafka 的 Data Source, 使用 Kafka 就很容易作为 Flink 的数据源开发流计算应用, 如果用一个比较小众的消息队列产品, 在进行流计算的时候, 就不得不自己开发一个 Flink 的 Data Source.")]),s._v(" "),t("p",[s._v("最后, 作为一款及格的消息队列产品, 必须具备的几个特性包括:")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("消息的可靠传递")]),s._v(": 确保不丢消息;")]),s._v(" "),t("li",[t("strong",[s._v("Cluster")]),s._v(": 支持集群, 确保不会因为某个节点宕机导致服务不可用, 当然也不能丢消息;")]),s._v(" "),t("li",[t("strong",[s._v("性能")]),s._v(": 具备足够好的性能, 能满足绝大多数场景的性能要求.")])]),s._v(" "),t("h5",{attrs:{id:"_2-可供选择的消息队列产品"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-可供选择的消息队列产品"}},[s._v("#")]),s._v(" 2.可供选择的消息队列产品")]),s._v(" "),t("h6",{attrs:{id:"_1-rabbitmq"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-rabbitmq"}},[s._v("#")]),s._v(" (1)RabbitMQ")]),s._v(" "),t("p",[s._v("RabbitMQ 是使用一种比较小众的编程语言: Erlang 语言编写的, 它最早是为电信行业系统之间的可靠通信设计的, 也是少数几个支持 AMQP 协议的消息队列之一.")]),s._v(" "),t("p",[s._v("RabbitMQ 就像它的名字中的兔子一样: 轻量级, 迅捷, 它的 Slogan, 也就是宣传口号, 也很明确地表明了 RabbitMQ 的特点: Messaging that just works, 开箱即用的消息队列. 也就是说, "),t("strong",[s._v("RabbitMQ 是一个相当轻量级的消息队列, 非常容易部署和使用")]),s._v(".")]),s._v(" "),t("p",[s._v("RabbitMQ 一个比较有特色的功能是支持非常灵活的路由配置, 和其他消息队列不同的是, 它在生产者(Producer)和队列(Queue)之间增加了一个 Exchange 模块, 可以理解为交换机.")]),s._v(" "),t("p",[s._v("这个 Exchange 模块的作用和交换机也非常相似, 根据配置的路由规则将生产者发出的消息分发到不同的队列中. 路由的规则也非常灵活, 甚至可以自己来实现路由规则.")]),s._v(" "),t("p",[s._v("RabbitMQ 的客户端支持的编程语言大概是所有消息队列中最多的, 如果系统是用某种冷门语言开发的, 那多半可以找到对应的 RabbitMQ 客户端.")]),s._v(" "),t("p",[s._v("接下来说下 RabbitMQ 的几个问题.")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("第一个问题是 RabbitMQ 对"),t("strong",[s._v("消息堆积的支持并不好")]),s._v(", 在它的设计理念里面, 消息队列是一个管道, 大量的消息积压是一种不正常的情况, 应当尽量去避免. 当大量消息积压的时候, 会导致 RabbitMQ 的性能急剧下降.")])]),s._v(" "),t("li",[t("p",[s._v("第二个问题是 RabbitMQ 的"),t("strong",[s._v("性能是介绍的这几个消息队列中最差的")]),s._v(", 根据官方给出的测试数据综合日常使用的经验, 依据硬件配置的不同, 它大概每秒钟可以处理几万到十几万条消息. 其实, 这个性能也足够支撑绝大多数的应用场景了, 不过, 如果应用对消息队列的性能要求非常高, 那不要选择 RabbitMQ.")])]),s._v(" "),t("li",[t("p",[s._v("最后一个问题是 RabbitMQ 使用的编程语言 Erlang, 这个编程语言不仅是非常小众的语言, 更麻烦的是, 这个语言的学习曲线非常陡峭. 如果想基于 RabbitMQ 做一些扩展和二次开发什么的, 建议你慎重考虑一下可持续维护的问题.")])])]),s._v(" "),t("h6",{attrs:{id:"_2-rocketmq"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-rocketmq"}},[s._v("#")]),s._v(" (2)RocketMQ")]),s._v(" "),t("p",[s._v("RocketMQ 是阿里巴巴在 2012 年开源的消息队列产品, 后来捐赠给 Apache 软件基金会, 2017 正式毕业, 成为 Apache 的顶级项目. 阿里内部也是使用 RocketMQ 作为支撑其业务的消息队列, 经历过多次双十一考验, 它的性能, 稳定性和可靠性都是值得信赖的. 作为优秀的国产消息队列, 近年来越来越多的被国内众多大厂使用.")]),s._v(" "),t("p",[s._v("RocketMQ 就像一个品学兼优的好学生, 有着不错的性能, 稳定性和可靠性, 具备一个现代的消息队列应该有的几乎全部功能和特性, 并且它还在持续的成长中.")]),s._v(" "),t("p",[s._v("RocketMQ 有非常活跃的中文社区, 大多数问题都可以找到中文的答案, 也许会成为你选择它的一个原因. 另外, RocketMQ 使用 Java 语言开发, 它的贡献者大多数都是中国人, 源代码相对也比较容易读懂, 很容易对 RocketMQ 进行扩展或者二次开发.")]),s._v(" "),t("p",[s._v("RocketMQ 对在线业务的响应时延做了很多的优化, 大多数情况下可以做到毫秒级的响应, "),t("strong",[s._v("如果应用场景很在意响应时延, 那应该选择使用 RocketMQ. ​")])]),s._v(" "),t("p",[s._v("RocketMQ 的性能比 RabbitMQ 要高一个数量级, 每秒钟大概能处理"),t("strong",[s._v("几十万")]),s._v("条消息.")]),s._v(" "),t("p",[s._v("RocketMQ 的一个劣势是, 作为国产的消息队列, 相比国外的比较流行的同类产品, 在国际上还没有那么流行, 与周边生态系统的集成和兼容程度要略逊一筹.")]),s._v(" "),t("h6",{attrs:{id:"_3-kafka"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-kafka"}},[s._v("#")]),s._v(" (3)Kafka")]),s._v(" "),t("p",[s._v("最后聊一聊 Kafka. Kafka 最早是由 LinkedIn 开发, 目前也是 Apache 的顶级项目. Kafka 最初的设计目的是用于处理海量的日志.")]),s._v(" "),t("p",[s._v("在早期的版本中, 为了获得极致的性能, 在设计方面做了很多的牺牲, 比如不保证消息的可靠性, 可能会丢失消息, 也不支持集群, 功能上也比较简陋, 这些牺牲对于处理海量日志这个特定的场景都是可以接受的. 这个时期的 Kafka 甚至不能称之为一个合格的消息队列.")]),s._v(" "),t("p",[s._v("但注意, 重点一般都在后面. 随后的几年 Kafka 逐步补齐了这些短板, 在网上搜到的很多消息队列的对比文章还在说 Kafka 不可靠, 其实这种说法早已经过时了. "),t("strong",[s._v("当下的 Kafka 已经发展为一个非常成熟的消息队列产品, 无论在数据可靠性, 稳定性和功能特性等方面都可以满足绝大多数场景的需求")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("Kafka 与周边生态系统的兼容性是最好的没有之一, 尤其在")]),s._v("​**==大数据和流计算领域=="),t("strong",[s._v("​")]),s._v(", 几乎所有的相关开源软件系统都会优先支持 Kafka. ​**")]),s._v(" "),t("p",[s._v("Kafka 使用 Scala 和 Java 语言开发, 设计上大量使用了批量和异步的思想, 这种设计使得 Kafka 能做到"),t("strong",[s._v("超高的性能")]),s._v(". Kafka 的性能, 尤其是异步收发的性能, 是三者中最好的, 但与 RocketMQ 并没有量级上的差异, 大约每秒钟可以处理几十万条消息.")]),s._v(" "),t("p",[s._v("如果使用配置比较好的服务器对 Kafka 进行过压测, 在有足够的客户端并发进行异步批量发送, 并且开启压缩的情况下, Kafka 的极限处理能力可以超过每秒 2000 万条消息.")]),s._v(" "),t("p",[s._v("但是 Kafka 这种异步批量的设计带来的问题是, 它的"),t("strong",[s._v("同步收发消息的响应时延比较高")]),s._v(", 因为当客户端发送一条消息的时候, Kafka 并不会立即发送出去, 而是要等一会儿攒一批再发送, 在它的 Broker 中, 很多地方都会使用这种"),t("strong",[s._v("先攒一波再一起处理")]),s._v("的设计. 如果业务场景中, 每秒钟消息数量没有那么多的时候, Kafka 的时延反而会比较高. 所以 "),t("strong",[s._v("Kafka 不太适合在线业务场景. ​")])]),s._v(" "),t("h6",{attrs:{id:"_4-pulsar"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-pulsar"}},[s._v("#")]),s._v(" (4) Pulsar")]),s._v(" "),t("p",[s._v("Pulsar 是一个新兴的开源消息队列产品, 最早是由 Yahoo 开发, 目前处于成长期, 流行度和成熟度相对没有那么高. 与其他消息队列最大的不同是, Pulsar 采用存储和计算分离的设计, 它有可能会引领未来消息队列的一个发展方向, 建议持续关注这个项目.")]),s._v(" "),t("h5",{attrs:{id:"_4-总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-总结"}},[s._v("#")]),s._v(" 4.总结")]),s._v(" "),t("p",[s._v("总结了几条选择的建议:")]),s._v(" "),t("p",[s._v("如果说消息队列并不是将要构建系统的主角之一, 且对消息队列功能和性能都没有很高的要求, 只需要一个开箱即用易于维护的产品, 建议使用 RabbitMQ.")]),s._v(" "),t("p",[t("strong",[s._v("如果系统使用消息队列主要场景是处理在线业务, 比如在交易系统中用消息队列传递订单, 那 RocketMQ 的低延迟和金融级的稳定性是更好的.")])]),s._v(" "),t("p",[s._v("如果需要"),t("strong",[s._v("处理海量的消息, 像收集日志, 监控信息或是前端的埋点这类数据")]),s._v(", 或是应用场景大量使用了大数据, 流计算相关的开源产品, 那 Kafka 是最适合的消息队列.")]),s._v(" "),t("h4",{attrs:{id:"消息模型-主题和队列有什么区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#消息模型-主题和队列有什么区别"}},[s._v("#")]),s._v(" 消息模型:主题和队列有什么区别?")]),s._v(" "),t("p",[s._v("每种消息队列都有自己的一套消息模型, 像队列(Queue), 主题(Topic)或是分区(Partition)这些名词概念, 在每个消息队列模型中都会涉及一些, 含义还不太一样.")]),s._v(" "),t("p",[s._v("为什么出现这种情况呢? "),t("strong",[s._v("因为没有标准")]),s._v(". 曾经也有一些国际组织尝试制定过消息相关的标准, 比如"),t("strong",[s._v("早期的 JMS 和 AMQP. 但让人无奈的是, 标准的进化跟不上消息队列的演进速度, 这些标准实际上已经被废弃了")]),s._v(".")]),s._v(" "),t("p",[s._v("那么, 到底什么是队列? 什么是主题? 主题和队列又有什么区别呢? 想要彻底理解这些, 需要从消息队列的演进说起.")]),s._v(" "),t("h5",{attrs:{id:"_1-主题和队列有什么区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-主题和队列有什么区别"}},[s._v("#")]),s._v(" 1.主题和队列有什么区别?")]),s._v(" "),t("p",[t("strong",[s._v("好的架构不是设计出来的, 而是演进出来的")]),s._v(". 现代的消息队列呈现出的模式, 一样是经过之前的十几年逐步演进而来的.")]),s._v(" "),t("p",[s._v("最初的消息队列, 就是一个严格意义上的"),t("strong",[s._v("队列")]),s._v(". 在计算机领域, 队列(Queue)是一种数据结构, 有完整而严格的定义. 在维基百科中, 队列的定义是这样的:")]),s._v(" "),t("blockquote",[t("p",[s._v("队列是先进先出(FIFO, First-In-First-Out)的线性表(Linear List). 在具体应用中通常用链表或者数组来实现. 队列只允许在后端(称为 rear)进行插入操作, 在前端(称为 front)进行删除操作.")])]),s._v(" "),t("p",[s._v("这个定义里面包含几个关键点, 第一个是先进先出, 这里面隐含着的一个要求是, 在消息入队出队过程中, 需要保证这些消息"),t("strong",[s._v("严格有序")]),s._v(", 按照什么顺序写进队列, 必须按照同样的顺序从队列中读出来. 不过, 队列是没有读这个操作的, 读就是出队, 也就是从队列中删除这条消息.")]),s._v(" "),t("p",[t("strong",[s._v("早期的消息队列, 就是按照队列的数据结构来设计的. ​")]),s._v("一起看下这个图, 生产者(Producer)发消息就是入队操作, 消费者(Consumer)收消息就是出队也就是删除操作, 服务端存放消息的容器自然就称为队列.")]),s._v(" "),t("p",[s._v("这就是最初的一种消息模型: "),t("strong",[s._v("队列模型")]),s._v(".")]),s._v(" "),t("p",[t("img",{attrs:{src:"assets/image-20230522220547-ox1v5ip.jpg",alt:""}})]),s._v(" "),t("p",[t("strong",[s._v("如果有多个生产者往同一个队列里面发送消息, 这个队列中可以消费到的消息, 就是这些生产者生产的所有消息的合集")]),s._v(". 消息的顺序就是这些生产者发送消息的自然顺序. 如果有多个消费者接收同一个队列的消息, 这些消费者之间实际上是竞争的关系, 每个消费者只能收到队列中的一部分消息, 也就是说任何一条消息只能被其中的一个消费者收到.")]),s._v(" "),t("p",[s._v("如果需"),t("strong",[s._v("要将一份消息数据分发给多个消费者, 要求每个消费者都能收到全量的消息")]),s._v(", 例如, 对于一份订单数据, 风控系统, 分析系统, 支付系统等都需要接收消息. 这个时候, 单个队列就满足不了需求, 一个可行的解决方式是, "),t("strong",[s._v("为每个消费者创建一个单独的队列, 让生产者发送多份")]),s._v(".")]),s._v(" "),t("p",[s._v("显然这是个比较蠢的做法, 同样的一份消息数据被复制到多个队列中会浪费资源, 更重要的是, 生产者必须知道有多少个消费者. 为每个消费者单独发送一份消息, 这实际上违背了消息队列解耦这个设计初衷.")]),s._v(" "),t("p",[s._v("为了解决这个问题, 演化出了另外一种消息模型: "),t("strong",[s._v("==发布-订阅模型=="),t("strong",[s._v("​")]),s._v("(Publish-Subscribe Pattern)")]),s._v(".")]),s._v(" "),t("p",[t("img",{attrs:{src:"assets/image-20230522220547-y92hft1.jpg",alt:""}})]),s._v(" "),t("p",[t("strong",[s._v("在发布-订阅模型中, 消息的发送方称为发布者(Publisher), 消息的接收方称为订阅者(Subscriber), 服务端存放消息的容器称为主题(Topic)")]),s._v(". 发布者将消息发送到主题中, 订阅者在接收消息之前需要先订阅主题. 订阅在这里既是一个动作, 同时还可以认为是主题在消费时的一个逻辑副本, "),t("strong",[s._v("每份订阅中, 订阅者都可以接收到主题的所有消息")]),s._v(".")]),s._v(" "),t("p",[s._v("在消息领域的历史上很长的一段时间, 队列模式和发布-订阅模式是并存的, 有些消息队列同时支持这两种消息模型, 比如 ActiveMQ. 仔细对比一下这两种模型, 生产者就是发布者, 消费者就是订阅者, 队列就是主题, 并没有本质的区别. "),t("strong",[s._v("==它们最大的区别其实就是, 一份消息数据能不能被消费多次的问题=="),t("strong",[s._v("​")]),s._v(". ​")])]),s._v(" "),t("p",[s._v("实际上, "),t("strong",[s._v("在这种发布-订阅模型中, 如果只有一个订阅者, 那它和队列模型就基本是一样的了")]),s._v(". 也就是说, 发布-订阅模型在功能层面上是可以兼容队列模型的.")]),s._v(" "),t("h5",{attrs:{id:"_2-rabbitmq的消息模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-rabbitmq的消息模型"}},[s._v("#")]),s._v(" 2.RabbitMQ的消息模型")]),s._v(" "),t("p",[s._v("现代的消息队列产品使用的消息模型大多是这种发布-订阅模型, 当然也有例外. 这个例外就是 RabbitMQ, 它是少数依然坚持使用"),t("strong",[s._v("队列模型")]),s._v("的产品之一. 那它是怎么解决多个消费者的问题呢? 前面提到 RabbitMQ 的一个特色 Exchange 模块吗? 在 RabbitMQ 中, "),t("strong",[s._v("Exchange 位于生产者和队列之间, 生产者并不关心将消息发送给哪个队列, 而是将消息发送给 Exchange, 由 Exchange 上配置的策略来决定将消息投递到哪些队列中")]),s._v(".")]),s._v(" "),t("p",[s._v("​"),t("img",{attrs:{src:"assets/image-20230522220547-nddwolw.jpg",alt:""}}),s._v("​")]),s._v(" "),t("p",[t("strong",[s._v("同一份消息如果需要被多个消费者来消费, 需要配置 Exchange 将消息发送到多个队列, 每个队列中都存放一份完整的消息数据, 可以为一个消费者提供消费服务")]),s._v(". 这也可以变相地实现新发布-订阅模型中, 一份消息数据可以被多个订阅者来多次消费这样的功能.")]),s._v(" "),t("h5",{attrs:{id:"_3-rocketmq的消息模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-rocketmq的消息模型"}},[s._v("#")]),s._v(" 3.RocketMQ的消息模型")]),s._v(" "),t("p",[s._v("RocketMQ 使用的消息模型是标准的"),t("strong",[s._v("发布-订阅模型")]),s._v(", 在 RocketMQ 的术语表中, 生产者, 消费者和主题与前面讲的发布-订阅模型中的概念是完全一样的.")]),s._v(" "),t("p",[s._v("但是, 在 RocketMQ 也有"),t("strong",[s._v("队列")]),s._v("(Queue)这个概念, 并且队列在 RocketMQ 中是一个非常重要的概念, 那队列在 RocketMQ 中的作用是什么呢? 这就要从消息队列的消费机制说起.")]),s._v(" "),t("p",[s._v("几乎所有的消息队列产品都使用一种非常朴素的**==请求-确认机制=="),t("strong",[s._v(", 确保消息不会在传递过程中由于网络或服务器故障丢失. 具体的做法就是")]),s._v("在生产端, 生产者先将消息发送给服务端, 也就是 Broker, 服务端在收到消息并将消息写入主题或者队列中后, 会给生产者发送确认的响应**.")]),s._v(" "),t("p",[t("strong",[s._v("如果生产者没有收到服务端的确认或者收到失败的响应, 则会重新发送消息; 在消费端, 消费者在收到消息并完成自己的消费业务逻辑(比如, 将数据保存到数据库中)后, 也会给服务端发送消费成功的确认, 服务端只有收到消费确认后, 才认为一条消息被成功消费, 否则它会给消费者重新发送这条消息, 直到收到对应的消费成功确认. ​")])]),s._v(" "),t("p",[s._v("这个确认机制很好地保证了消息传递过程中的可靠性, 但是引入这个机制在消费端带来了一个不小的问题. 什么问题呢? "),t("strong",[s._v("为了确保消息的有序性, 在某一条消息被成功消费之前, 下一条消息是不能被消费的, 否则就会出现消息空洞, 违背了有序性这个原则")]),s._v(".")]),s._v(" "),t("p",[s._v("也就是说, 每个主题在任意时刻, "),t("strong",[s._v("至多只能有一个消费者实例在进行消费")]),s._v(", 那就没法通过水平扩展消费者的数量来提升消费端总体的消费性能. 为了解决这个问题, "),t("strong",[s._v("RocketMQ 在主题下面增加了队列的概念")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("==每个主题包含多个队列, 通过多个队列来实现多实例并行生产和消费=="),t("strong",[s._v("​")]),s._v(". ​")]),s._v("需要注意的是, RocketMQ "),t("strong",[s._v("只在队列上保证消息的有序性, 主题层面是无法保证消息的严格顺序的")]),s._v(".")]),s._v(" "),t("p",[s._v("RocketMQ 中, 订阅者的概念是通过"),t("strong",[s._v("消费组")]),s._v("(Consumer Group)来体现的. "),t("strong",[s._v("每个消费组都消费主题中一份完整的消息, 不同消费组之间消费进度彼此不受影响")]),s._v(", 也就是说, 一条消息被 Consumer Group1 消费过, 也会再给 Consumer Group2 消费.")]),s._v(" "),t("p",[t("strong",[s._v("消费组中包含多个消费者, 同一个组内的消费者是竞争消费的关系, 每个消费者负责消费组内的一部分消息. 如果一条消息被消费者 Consumer1 消费了, 那同组的其他消费者就不会再收到这条消息.")])]),s._v(" "),t("p",[s._v("在 Topic 的消费过程中, 由于消息需要被不同的组进行多次消费, 所以消费完的消息并不会立即被删除, 这就需要 RocketMQ "),t("strong",[s._v("为每个消费组在每个队列上维护一个")]),s._v("​**==消费位置=="),t("strong",[s._v("​")]),s._v("(Consumer Offset)**, 这个位置之前的消息都被消费过, 之后的消息都没有被消费过, 每成功消费一条消息, 消费位置就加一. 这个消费位置是非常重要的概念, 在使用消息队列的时候, "),t("strong",[s._v("丢消息的原因大多是由于消费位置处理不当导致的")]),s._v(".")]),s._v(" "),t("p",[s._v("RocketMQ 的消息模型中, 比较关键的概念就是这些了. 模型如下图:")]),s._v(" "),t("p",[t("img",{attrs:{src:"assets/image-20230522220547-82624dx.jpg",alt:""}})]),s._v(" "),t("h5",{attrs:{id:"_4-kafka的消息模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-kafka的消息模型"}},[s._v("#")]),s._v(" 4.Kafka的消息模型")]),s._v(" "),t("p",[t("strong",[s._v("==Kafka 的消息模型和 RocketMQ 是完全一样的==")]),s._v(", 所有 RocketMQ 中对应的概念, 和生产消费过程中的确认机制, 都完全适用于 Kafka. "),t("strong",[s._v("唯一的区别是, 在 Kafka 中, 队列这个概念的名称不一样, Kafka 中对应的名称是")]),s._v("​**==分区(Partition)=="),t("strong",[s._v("​")]),s._v(", 含义和功能是没有任何区别的**.")]),s._v(" "),t("h5",{attrs:{id:"_5-小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-小结"}},[s._v("#")]),s._v(" 5.小结")]),s._v(" "),t("p",[s._v("本节讲了队列和主题的区别, 这两个概念的背后实际上对应着两种不同的消息模型: 队列模型和发布-订阅模型. 这两种消息模型其实并没有本质上的区别, 都可以通过一些扩展或者变化来互相替代.")]),s._v(" "),t("p",[s._v("常用的消息队列中, RabbitMQ 采用的是队列模型, 但是它一样可以实现发布-订阅的功能. "),t("strong",[s._v("RocketMQ 和 Kafka 采用的是发布-订阅模型, 并且二者的消息模型是基本一致的")]),s._v(".")]),s._v(" "),t("p",[s._v("但业务模型不等于就是实现层面的模型, 像 Kafka 和 RocketMQ 的业务模型基本是一样的, 并不是说他们的实现就是一样的, 实际上这两个消息队列的实现是完全不同的.")]),s._v(" "),t("h4",{attrs:{id:"如何确保消息不会丢失"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何确保消息不会丢失"}},[s._v("#")]),s._v(" 如何确保消息不会丢失?")]),s._v(" "),t("p",[s._v("现在主流的消息队列产品都提供了非常完善的消息可靠性保证机制, 完全可以做到在消息传递过程中, 即使发生网络中断或者硬件故障, 也能确保消息的可靠传递, 不丢消息. 因此绝大部分丢消息的原因都是由于开发者不熟悉消息队列, 没有正确使用和配置消息队列导致的. 虽然不同的消息队列提供的 API 不一样, 相关的配置项也不同, 但是在保证消息可靠传递这块儿, 它们的实现原理是一样的.")]),s._v(" "),t("p",[s._v("本节分析一下消息队列是怎么保证消息可靠传递的, 以及实现原理是怎么样的. 当熟知原理以后, 无论你使用任何一种消息队列, 再简单看一下它的 API 和相关配置项, 就能很快知道该如何配置消息队列, 写出可靠的代码, 避免消息丢失.")]),s._v(" "),t("h5",{attrs:{id:"_1-检测消息丢失的方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-检测消息丢失的方法"}},[s._v("#")]),s._v(" 1.检测消息丢失的方法")]),s._v(" "),t("p",[s._v("用消息队列最尴尬的情况不是丢消息, 而是消息丢了还不知道. 一般而言, 一个新的系统刚刚上线, 各方面都不太稳定, 需要一个磨合期, 这个时候特别"),t("strong",[s._v("需要监控到系统中是否有消息丢失的情况")]),s._v(".")]),s._v(" "),t("p",[s._v("如果是 IT 基础设施比较完善的公司, 一般都有分布式链路追踪系统, 使用类似的追踪系统可以很方便地追踪每一条消息. 如果没有这样的追踪系统, 这里提供一个比较简单的方法, 来检查是否有消息丢失的情况.")]),s._v(" "),t("p",[t("strong",[s._v("可以利用消息队列的有序性来验证是否有消息丢失. ​")]),s._v("原理非常简单, 在 Producer 端, 给每个发出的消息附加一个"),t("strong",[s._v("连续递增的序号")]),s._v(", 然后在 Consumer 端来"),t("strong",[s._v("检查")]),s._v("这个序号的连续性.")]),s._v(" "),t("p",[s._v("如果没有消息丢失, Consumer 收到消息的序号必然是连续递增的, 或者说收到的消息, 其中的序号必然是上一条消息的序号 +1. 如果检测到序号不连续, 那就是丢消息了. 还可以通过缺失的序号来确定丢失的是哪条消息, 方便进一步排查原因.")]),s._v(" "),t("p",[s._v("大多数消息队列的客户端都支持拦截器机制, 可以利用这个拦截器机制, 在 Producer 发送消息之前的拦截器中将序号注入到消息中, 在 Consumer 收到消息的拦截器中检测序号的连续性, 这样实现的好处是消息检测的代码不会侵入到业务代码中, 待系统稳定后, 也方便将这部分检测的逻辑关闭或者删除.")]),s._v(" "),t("p",[s._v("如果是在一个分布式系统中实现这个检测方法, 有几个问题要注意.")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("首先, 像 Kafka 和 RocketMQ 这样的消息队列, 它是不保证在 Topic 上的严格顺序的, 只能保证分区上的消息是有序的, 所以在发消息的时候必须要"),t("strong",[s._v("指定分区")]),s._v(", 并且在每个分区单独检测消息序号的连续性.")])]),s._v(" "),t("li",[t("p",[s._v("如果系统中 Producer 是多实例的, 由于并不好协调多个 Producer 之间的发送顺序, 所以也需要每个 Producer 分别生成各自的消息序号, 并且需要附加上 Producer 的标识, 在 Consumer 端按照每个 Producer 分别来检测序号的连续性.")])]),s._v(" "),t("li",[t("p",[s._v("Consumer 实例的数量最好和分区数量一致, 做到 Consumer 和分区一一对应, 这样会比较方便地在 Consumer 内检测消息序号的连续性.")])])]),s._v(" "),t("h5",{attrs:{id:"_2-确保消息可靠传递"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-确保消息可靠传递"}},[s._v("#")]),s._v(" 2.确保消息可靠传递")]),s._v(" "),t("p",[s._v("讲完了检测消息丢失的方法, 接下来一起来看一下, 整个消息从生产到消费的过程中, "),t("strong",[s._v("哪些地方可能会导致丢消息, 以及应该如何避免消息丢失")]),s._v(".")]),s._v(" "),t("p",[s._v("下图是一条消息从生产到消费完成这个过程, 可以划分三个阶段, 为了方便描述给每个阶段分别起了个名字.")]),s._v(" "),t("p",[t("img",{attrs:{src:"assets/image-20230522220634-powqrt6.jpg",alt:""}})]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("生产阶段")]),s._v(": 从消息在 Producer 创建出来, 经过网络传输发送到 Broker 端.")]),s._v(" "),t("li",[t("strong",[s._v("存储阶段")]),s._v(": 消息在 Broker 端存储, 如果是集群, 消息会在这个阶段被复制到其他的副本上.")]),s._v(" "),t("li",[t("strong",[s._v("消费阶段")]),s._v(": Consumer 从 Broker 上拉取消息, 经过网络传输发送到 Consumer 上.")])]),s._v(" "),t("p",[t("strong",[s._v("1.生产阶段")])]),s._v(" "),t("p",[t("strong",[s._v("在生产阶段, 消息队列通过最常用的")]),s._v("​**==请求确认机制=="),t("strong",[s._v("​")]),s._v(", 来保证消息的可靠传递**: 当代码调用发消息方法时, 消息队列的客户端会把消息发送到 Broker, Broker 收到消息后, 会给客户端返回一个"),t("strong",[s._v("确认响应")]),s._v(", 表明消息已经收到了. "),t("strong",[s._v("客户端收到响应后, 完成了一次正常消息的发送")]),s._v(".")]),s._v(" "),t("p",[s._v("只要 Producer 收到了 Broker 的确认响应, 就可以保证消息在生产阶段不会丢失. 有些消息队列在长时间没收到发送确认响应后, 会自动重试, 如果重试再失败, 就会以返回值或者异常的方式告知用户.")]),s._v(" "),t("p",[t("strong",[s._v("在编写发送消息代码时, 需要注意正确处理返回值或者捕获异常, 就可以保证这个阶段的消息不会丢失. ​")]),s._v("以 Kafka 为例, 看一下如何可靠地发送消息:")]),s._v(" "),t("p",[s._v("同步发送时, 只要注意捕获异常即可.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RecordMetadata")]),s._v(" metadata "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" producer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("send")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("record"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" 消息发送成功。"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Throwable")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" 消息发送失败！"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("异步发送时, 则需要在回调方法里进行检查. 这个地方是需要特别注意的, "),t("strong",[s._v("很多丢消息的原因就是使用了异步发送, 却没有在回调中检查发送结果")]),s._v(".")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[s._v("producer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("send")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("record"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("metadata"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" exception"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("metadata "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" 消息发送成功。"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" 消息发送失败！"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("exception"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[t("strong",[s._v("2.存储阶段")])]),s._v(" "),t("p",[s._v("在存储阶段正常情况下, 只要 Broker 在正常运行, 就不会出现丢失消息的问题, 但是如果 Broker 出现了故障, 比如进程死掉了或者服务器宕机了, 还是可能会丢失消息的.")]),s._v(" "),t("p",[t("strong",[s._v("如果对消息的可靠性要求非常高, 可以通过配置 Broker 参数来避免因为宕机丢消息. ​")])]),s._v(" "),t("p",[s._v("对于单个节点的 Broker, 需要配置 Broker 参数, 在收到消息后, 将"),t("strong",[s._v("消息写入磁盘后")]),s._v("再给 Producer 返回确认响应, 这样即使发生宕机, 由于消息已经被写入磁盘, 就不会丢失消息, 恢复后还可以继续消费. 例如, 在 RocketMQ 中, 需要将"),t("strong",[s._v("刷盘方式 flushDiskType 配置为 SYNC_FLUSH 同步刷盘")]),s._v(".")]),s._v(" "),t("p",[s._v("如果是 Broker 是由多个节点组成的集群, 需要将 Broker 集群配置成: 至少将消息发送到 2 个以上的节点, 再给客户端回复发送确认响应. 这样当某个 Broker 宕机时, 其他的 Broker 可以替代宕机的 Broker, 也不会发生消息丢失. 后面会单独讲解在集群模式下, 消息队列是如何通过消息复制来确保消息的可靠性的.")]),s._v(" "),t("p",[t("strong",[s._v("3.消费阶段")])]),s._v(" "),t("p",[t("strong",[s._v("消费阶段采用和生产阶段类似的确认机制来保证消息的可靠传递, 客户端从 Broker 拉取消息后, 执行用户的消费业务逻辑, 成功后, 才会给 Broker 发送消费确认响应")]),s._v(". 如果 Broker 没有收到消费确认响应, 下次拉消息的时候还会返回同一条消息, 确保消息不会在网络传输过程中丢失, 也不会因为客户端在执行消费逻辑中出错导致丢失.")]),s._v(" "),t("p",[s._v("在编写消费代码时需要注意的是, "),t("strong",[s._v("不要在收到消息后就立即发送消费确认, 而是应该在执行完所有消费业务逻辑之后, 再发送消费确认. ​")])]),s._v(" "),t("p",[s._v("以用 Python 语言消费 RabbitMQ 消息为例, 来看一下如何实现一段可靠的消费代码:")]),s._v(" "),t("div",{staticClass:"language-python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("callback")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ch"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" method"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" properties"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" body"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" [x] 收到消息 %r"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" body"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在这儿处理收到的消息")]),s._v("\n    database"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("save"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("body"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" [x] 消费完成 "')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 完成消费业务逻辑后发送消费确认响应")]),s._v("\n    ch"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("basic_ack"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("delivery_tag "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" method"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("delivery_tag"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n \nchannel"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("basic_consume"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("queue"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'hello'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" on_message_callback"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("callback"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("可以看到, 在消费的回调方法 callback 中, 正确的顺序是, 先是把消息保存到数据库中, 然后再发送消费确认响应. 这样如果保存消息到数据库失败了, 就不会执行消费确认的代码, 下次拉到的还是这条消息, 直到消费成功.")]),s._v(" "),t("h5",{attrs:{id:"_3-小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-小结"}},[s._v("#")]),s._v(" 3.小结")]),s._v(" "),t("p",[s._v("本节分析了一条消息从发送到消费整个流程中, 消息队列是如何确保消息的可靠性, 不会丢失的. 这个过程可以分为分三个阶段, 每个阶段都需要正确的编写代码并且设置正确的配置项, 才能配合消息队列的可靠性机制, 确保消息不会丢失.")]),s._v(" "),t("ul",[t("li",[s._v("在生产阶段, 需要捕获消息发送的错误, 并重发消息.")]),s._v(" "),t("li",[s._v("在存储阶段, 可以通过配置刷盘和复制相关的参数, 让消息写入到多个副本的磁盘上, 来确保消息不会因为某个 Broker 宕机或者磁盘损坏而丢失.")]),s._v(" "),t("li",[s._v("在消费阶段, 需要在处理完全部消费业务逻辑之后, 再发送消费确认.")])]),s._v(" "),t("h4",{attrs:{id:"如何处理消费过程中的重复消息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何处理消费过程中的重复消息"}},[s._v("#")]),s._v(" 如何处理消费过程中的重复消息?")]),s._v(" "),t("p",[s._v("本节来聊一聊如何处理重复消息的问题. 在消息传递过程中, 如果出现传递失败的情况, 发送方会执行重试, 重试的过程中就有可能会产生"),t("strong",[s._v("重复的消息")]),s._v(". 对使用消息队列的业务系统来说, 如果没有对重复消息进行处理, 就有可能会导致系统的数据出现错误.")]),s._v(" "),t("p",[s._v("比如说, 一个消费订单消息, 统计下单金额的微服务, 如果没有正确处理重复消息, 那就会出现"),t("strong",[s._v("重复统计, 导致统计结果错误")]),s._v(".")]),s._v(" "),t("p",[s._v("你可能会问, 如果消息队列本身能保证消息不重复, 那应用程序的实现不就简单了? 那有没有消息队列能保证消息不重复呢?")]),s._v(" "),t("h5",{attrs:{id:"_1-消息重复的情况必然存在"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-消息重复的情况必然存在"}},[s._v("#")]),s._v(" 1.消息重复的情况必然存在")]),s._v(" "),t("p",[s._v("在 MQTT 协议中, 给出了三种传递消息时能够提供的服务质量标准, 这三种服务质量从低到高依次是:")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("At most once")]),s._v(": 至多一次. 消息在传递时, 最多会被送达一次. 换一个说法就是, 没什么消息可靠性保证, 允许丢消息. 一般都是一些"),t("strong",[s._v("对消息可靠性要求不太高的监控场景使用")]),s._v(", 比如每分钟上报一次机房温度数据, 可以接受数据少量丢失.")]),s._v(" "),t("li",[t("strong",[s._v("At least once")]),s._v(": 至少一次. 消息在传递时, 至少会被送达一次. 也就是说, "),t("strong",[s._v("不允许丢消息, 但是允许有少量重复消息出现")]),s._v(".")]),s._v(" "),t("li",[t("strong",[s._v("Exactly once")]),s._v(": 恰好一次. 消息在传递时, "),t("strong",[s._v("只会被送达一次, 不允许丢失也不允许重复")]),s._v(", 这个是最高的等级.")])]),s._v(" "),t("p",[s._v("这个服务质量标准不仅适用于 MQTT, 对所有的消息队列都是适用的. 现在常用的绝大部分消息队列提供的服务质量都是 "),t("strong",[s._v("==At least once==")]),s._v(", 包括 RocketMQ, RabbitMQ 和 Kafka 都是这样. 也就是说, "),t("strong",[s._v("==消息队列很难保证消息不重复==")]),s._v(".")]),s._v(" "),t("p",[s._v("根据 Kafka 的文档, Kafka 是支持 Exactly once 的. 但是 Kafka 支持的 Exactly once 和前面的消息传递的服务质量标准 Exactly once 是不一样的, 它是 Kafka 提供的另外一个特性, Kafka 中支持的事务也和通常意义理解的事务有一定的差异. 在 Kafka 中, 事务和 Excactly once 主要是为了配合流计算使用的特性, 后面会单独来讲 Kafka 的事务和它支持的 Exactly once 特性.")]),s._v(" "),t("p",[t("strong",[s._v('既然消息队列无法保证消息不重复, 就需要的消费代码能够接受"消息是可能会重复的"这一现状, 然后, 通过一些方法来消除重复消息对业务的影响.')])]),s._v(" "),t("h5",{attrs:{id:"_2-用幂等性解决重复消息问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-用幂等性解决重复消息问题"}},[s._v("#")]),s._v(" 2.用幂等性解决重复消息问题")]),s._v(" "),t("p",[s._v("一般解决重复消息的办法是, "),t("strong",[s._v("==在消费端让消费消息的操作具备幂等性==")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("幂等(Idempotence)")]),s._v(" 本来是一个数学上的概念, 它是这样定义的:")]),s._v(" "),t("blockquote",[t("p",[s._v("如果一个函数 f(x) 满足: f(f(x)) = f(x), 则函数 f(x) 满足幂等性.")])]),s._v(" "),t("p",[s._v("这个概念被拓展到计算机领域, 被用来描述一个操作, 方法或者服务. 一个幂等操作的特点是, "),t("strong",[s._v("其任意多次执行所产生的影响均与一次执行的影响相同. ​")])]),s._v(" "),t("p",[s._v("一个幂等的方法, 使用同样的参数, 对它进行多次调用和一次调用, 对系统产生的影响是一样的. 所以, "),t("strong",[s._v("对于幂等的方法, 不用担心重复执行会对系统造成任何改变")]),s._v(".")]),s._v(" "),t("p",[s._v('举个例子来说明一下. 在不考虑并发的情况下, "将账户 X 的余额设置为 100 元", 执行一次后对系统的影响是, 账户 X 的余额变成了 100 元. 只要提供的参数 100 元不变, 那即使再执行多少次, 账户 X 的余额始终都是 100 元, 不会变化, 这个操作就是一个幂等的操作.')]),s._v(" "),t("p",[s._v('再举一个例子, "将账户 X 的余额加 100 元", 这个操作它就不是幂等的, 每执行一次, 账户余额就会增加 100 元, 执行多次和执行一次对系统的影响(也就是账户的余额)是不一样的.')]),s._v(" "),t("p",[t("strong",[s._v("如果系统消费消息的业务逻辑具备幂等性, 那就不用担心消息重复的问题了, 因为同一条消息, 消费一次和消费多次对系统的影响是完全一样的. 也就可以认为, 消费多次等于消费一次.")])]),s._v(" "),t("p",[s._v("从对系统的影响结果来说: "),t("strong",[s._v("==At least once + 幂等消费 = Exactly once=="),t("strong",[s._v("​")]),s._v(". ​")])]),s._v(" "),t("p",[s._v("那么如何实现幂等操作呢? 最好的方式就是, "),t("strong",[s._v("从业务逻辑设计上入手, 将消费的业务逻辑设计成具备幂等性的操作. ​")]),s._v("但不是所有的业务都能设计成天然幂等的, 这里就需要一些方法和技巧来实现幂等.")]),s._v(" "),t("p",[s._v("下面介绍几种常用的设计幂等操作的方法:")]),s._v(" "),t("p",[t("strong",[s._v("1.利用数据库的唯一约束实现幂等")])]),s._v(" "),t("p",[s._v("例如前面的不具备幂等特性的转账的例子: 将账户 X 的余额加 100 元. 在这个例子中, 可以通过改造业务逻辑, 让它具备幂等性.")]),s._v(" "),t("p",[s._v("首先, 可以限定对于每个转账单每个账户只可以执行一次变更操作, 在分布式系统中, 这个限制实现的方法非常多, 最简单的是在数据库中建一张转账流水表, 这个表有三个字段: 转账单 ID, 账户 ID 和变更金额, 然后给转账单 ID 和账户 ID 这两个字段联合起来创建一个唯一约束, 这样对于相同的转账单 ID 和账户 ID, 表里至多只能存在一条记录.")]),s._v(" "),t("p",[s._v('这样, 消费消息的逻辑可以变为: "在转账流水表中增加一条转账记录, 然后再根据转账记录, 异步操作更新用户余额即可." 在转账流水表增加一条转账记录这个操作中, 由于在这个表中预先定义了"账户 ID 转账单 ID"的唯一约束, 对于同一个转账单同一个账户'),t("strong",[s._v("只能插入一条记录")]),s._v(", 后续重复的插入操作都会失败, 这样就实现了一个幂等的操作. 只要写一个 SQL, 正确地实现它就可以了.")]),s._v(" "),t("p",[s._v('基于这个思路, 不光是可以使用关系型数据库, 只要是支持类似 "INSERT IF NOT EXIST" 语义的存储类系统都可以用于实现幂等, 比如也可以用 Redis 的 SETNX 命令来替代数据库中的唯一约束, 来实现幂等消费.')]),s._v(" "),t("p",[t("strong",[s._v("2.为更新的数据设置前置条件")])]),s._v(" "),t("p",[s._v("另外一种实现幂等的思路是, "),t("strong",[s._v("给数据变更设置一个前置条件, 如果满足条件就更新数据, 否则拒绝更新数据, 在更新数据的时候, 同时变更前置条件中需要判断的数据")]),s._v(". 这样, 重复执行这个操作时, 由于第一次更新数据的时候已经变更了前置条件中需要判断的数据, 不满足前置条件, 则不会重复执行更新数据操作.")]),s._v(" "),t("p",[s._v('比如 "将账户 X 的余额增加 100 元" 这个操作并不满足幂等性, 可以把这个操作加上一个前置条件, 变为: "如果账户 X 当前的余额为 500 元, 将余额加 100 元", 这个操作就具备了幂等性. 对应到消息队列中的使用时, 可以'),t("strong",[s._v("在发消息时在消息体中带上当前的余额, 在消费的时候进行判断数据库中, 当前余额是否与消息中的余额相等, 只有相等才执行变更操作")]),s._v(".")]),s._v(" "),t("p",[s._v("但是, 如果要更新的数据不是数值, 或者要做一个比较复杂的更新操作怎么办? 用什么作为前置判断条件呢? "),t("strong",[s._v("更加通用的方法是, 给数据增加一个版本号属性, 每次更数据前, 比较当前数据的版本号是否和消息中的版本号一致, 如果不一致就拒绝更新数据, 更新数据的同时将版本号 +1, 一样可以实现幂等更新")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("3.记录并检查操作")])]),s._v(" "),t("p",[s._v("如果上面提到的两种实现幂等方法都不能适用于你的场景, 还有一种通用性最强, 适用范围最广的实现幂等性方法: "),t("strong",[s._v('记录并检查操作, 也称为 "Token 机制或者 GUID(全局唯一 ID)机制", 实现的思路特别简单: 在执行数据更新操作之前, 先检查一下是否执行过这个更新操作')]),s._v(".")]),s._v(" "),t("p",[s._v("具体的实现方法是, 在发送消息时, "),t("strong",[s._v("给每条消息指定一个全局唯一的 ID")]),s._v(", 消费时, 先根据这个 ID 检查这条消息是否有被消费过, 如果没有消费过, 才更新数据, 然后将消费状态置为已消费.")]),s._v(" "),t("p",[s._v('原理和实现是不是很简单? 其实一点儿都不简单, 在分布式系统中, 这个方法其实是非常难实现的. 首先, 给每个消息指定一个全局唯一的 ID 就是一件不那么简单的事儿, 方法有很多, 但都不太好同时满足简单, 高可用和高性能, 或多或少都要有些牺牲. 更加麻烦的是, 在"检查消费状态, 然后更新数据并且设置消费状态"中, '),t("strong",[s._v("三个操作必须作为一组操作保证原子性")]),s._v(", 才能真正实现幂等, 否则就会出现 Bug.")]),s._v(" "),t("p",[s._v('比如说, 对于同一条消息: "全局 ID 为 8, 操作为: 给 ID 为 666 账户增加 100 元", 有可能出现这样的情况:')]),s._v(" "),t("ul",[t("li",[s._v('t0 时刻: Consumer A 收到条消息, 检查消息执行状态, 发现消息未处理过, 开始执行"账户增加 100 元";')]),s._v(" "),t("li",[s._v("t1 时刻: Consumer B 收到条消息, 检查消息执行状态, 发现消息未处理过, 因为这个时刻, Consumer A 还未来得及更新消息执行状态.")])]),s._v(" "),t("p",[s._v("这样就会导致账户被错误地增加了两次 100 元, 这是一个在分布式系统中非常容易犯的错误, 一定要引以为戒.")]),s._v(" "),t("p",[s._v("对于这个问题, 当然可以用事务来实现, 也可以用锁来实现, 但是在分布式系统中, 无论是分布式事务还是分布式锁都是比较难解决问题.")]),s._v(" "),t("h5",{attrs:{id:"_3-小结-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-小结-2"}},[s._v("#")]),s._v(" 3.小结")]),s._v(" "),t("p",[s._v('本节介绍了通过幂等消费来解决消息重复的问题, 然后重点讲了几种实现幂等操作的方法, 可以利用数据库的约束来防止重复更新数据, 也可以为数据更新设置一次性的前置条件, 来防止重复消息, 对于这两种方法都不适用的场景, 还可以用"记录并检查操作"的方式来保证幂等, 这种方法适用范围最广, 但是实现难度和复杂度也比较高, 一般不推荐使用.')]),s._v(" "),t("p",[s._v("这些实现幂等的方法, 不仅可以用于解决重复消息的问题, 也同样适用于, 在其他场景中来解决重复请求或者重复调用的问题. 比如可以将 HTTP 服务设计成幂等的, 解决前端或者 APP 重复提交表单数据的问题; 也可以将一个微服务设计成幂等的, 解决 RPC 框架自动重试导致的重复调用问题. 这些方法都是通用的.")]),s._v(" "),t("h4",{attrs:{id:"消息积压了该如何处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#消息积压了该如何处理"}},[s._v("#")]),s._v(" 消息积压了该如何处理?")]),s._v(" "),t("p",[s._v("在使用消息队列遇到的问题中, 消息积压这个问题应该是经常遇到的问题, 并且这个问题还不太好解决. 消息积压的直接原因, 一定是系统中的某个部分出现了性能问题, 来不及处理上游发送的消息, 才会导致消息积压.")]),s._v(" "),t("p",[s._v("所以先来分析下, 在使用消息队列时, 如何来优化代码的性能, 避免出现消息积压. 然后再来看看, 如果线上系统出现了消息积压, 该如何进行紧急处理, 最大程度地避免消息积压对业务的影响.")]),s._v(" "),t("h5",{attrs:{id:"_1-优化性能来避免消息积压"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-优化性能来避免消息积压"}},[s._v("#")]),s._v(" 1.优化性能来避免消息积压")]),s._v(" "),t("p",[s._v("在使用消息队列的系统中, "),t("strong",[s._v("对于性能的优化, 主要体现在生产者和消费者这一收一发两部分的业务逻辑中. 对于消息队列本身的性能, 作为使用者一般不需要太关注")]),s._v(". 为什么这么说呢?")]),s._v(" "),t("p",[s._v("主要原因是, 对于绝大多数使用消息队列的业务来说, 消息队列本身的处理能力要远大于业务系统的处理能力. 主流消息队列的单个节点, 消息收发的性能可以达到每秒钟处理几万至几十万条消息的水平, 还可以通过水平扩展 Broker 的实例数成倍地提升处理能力.")]),s._v(" "),t("p",[s._v("而一般的业务系统需要处理的业务逻辑远比消息队列要复杂, 单个节点每秒钟可以处理几百到几千次请求, 已经可以算是性能非常好的了. 所以对于消息队列的性能优化一般更关注的是, "),t("strong",[s._v("在消息的收发两端的业务代码怎么和消息队列配合, 达到一个最佳的性能. ​")])]),s._v(" "),t("h6",{attrs:{id:"_1-发送端性能优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-发送端性能优化"}},[s._v("#")]),s._v(" (1)发送端性能优化")]),s._v(" "),t("p",[s._v("发送端业务代码的处理性能, 实际上和消息队列的关系不大, 因为一般发送端都是先执行自己的业务逻辑, 最后再发送消息. "),t("strong",[s._v("如果说代码发送消息的性能上不去, 需要优先检查一下, 是不是发消息之前的业务逻辑耗时太多导致的. ​")])]),s._v(" "),t("p",[s._v("对于发送消息的业务逻辑, 只需要注意设置合适的并发和批量大小, 就可以达到很好的发送性能. 为什么这么说呢?")]),s._v(" "),t("p",[s._v("之前提到过 Producer 发送消息的过程, Producer 发消息给 Broker, Broker 收到消息后返回确认响应, 这是一次完整的交互. 假设这一次交互的平均时延是 1ms, 把这 1ms 的时间分解开, 它包括了下面这些步骤的耗时:")]),s._v(" "),t("ul",[t("li",[s._v("发送端准备数据, 序列化消息, 构造请求等逻辑的时间, 也就是发送端在发送网络请求之前的耗时;")]),s._v(" "),t("li",[s._v("发送消息和返回响应在网络传输中的耗时;")]),s._v(" "),t("li",[s._v("Broker 处理消息的时延.")])]),s._v(" "),t("p",[s._v("如果是单线程发送, 每次只发送 1 条消息, 那么每秒只能发送 1000ms / 1ms * 1 条 /ms = 1000 条消息, 这种情况下并不能发挥出消息队列的全部实力.")]),s._v(" "),t("p",[t("strong",[s._v("无论是增加每次发送消息的批量大小, 还是增加并发, 都能成倍地提升发送性能")]),s._v(". 至于到底是选择批量发送还是增加并发, 主要取决于发送端程序的业务性质. 简单来说, 只要能够满足性能要求, 怎么实现方便就怎么实现.")]),s._v(" "),t("p",[s._v("比如消息发送端是一个微服务, 主要接受 RPC 请求处理在线业务. 很自然的, 微服务在处理每次请求的时候, 就在当前线程直接发送消息就可以了, 因为所有 RPC 框架都是多线程支持多并发的, 自然也就实现了"),t("strong",[s._v("并行发送消息")]),s._v(". 并且在线业务比较在意的是请求响应时延, 选择批量发送必然会影响 RPC 服务的时延. 这种情况, 比较明智的方式就是通过并发来提升发送性能.")]),s._v(" "),t("p",[s._v("如果系统是一个离线分析系统, 离线系统在性能上的需求是什么呢? 它不关心时延, 更注重整个系统的吞吐量. 发送端的数据都是来自于数据库, 这种情况就更适合"),t("strong",[s._v("批量发送")]),s._v(", 可以批量从数据库读取数据, 然后批量来发送消息, 同样用少量的并发就可以获得非常高的吞吐量.")]),s._v(" "),t("h6",{attrs:{id:"_2-消费端性能优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-消费端性能优化"}},[s._v("#")]),s._v(" (2)消费端性能优化")]),s._v(" "),t("p",[s._v("使用消息队列的时候, "),t("strong",[s._v("大部分的性能问题都出现在消费端, 如果消费的速度跟不上发送端生产消息的速度, 就会造成消息积压")]),s._v(". 如果这种性能倒挂的问题只是暂时的, 那问题不大, 只要消费端的性能恢复之后, 超过发送端的性能, 那积压的消息是可以逐渐被消化掉的.")]),s._v(" "),t("p",[s._v("要是消费速度一直比生产速度慢, 时间长了, 整个系统就会出现问题, 要么消息队列的存储被填满无法提供服务, 要么消息丢失, 这对于整个系统来说都是严重故障.")]),s._v(" "),t("p",[s._v("所以在设计系统的时候, "),t("strong",[s._v("一定要保证消费端的消费性能要高于生产端的发送性能, 这样的系统才能健康的持续运行. ​")])]),s._v(" "),t("p",[s._v("消费端的性能优化除了优化消费业务逻辑以外, 也可以通过"),t("strong",[s._v("水平扩容")]),s._v(", 增加消费端的并发数来提升总体的消费性能. 特别需要注意的一点是, "),t("strong",[s._v("==在扩容 Consumer 的实例数量的同时, 必须同步扩容主题中的分区(也叫队列)数量, 确保 Consumer 的实例数和分区数量是相等的=="),t("strong",[s._v("​")]),s._v(". ​")]),s._v("如果 Consumer 的实例数量超过分区数量, 这样的扩容实际上是没有效果的. "),t("strong",[s._v("原因之前讲过, 因为对于消费者来说, 在每个分区上实际上只能支持单线程消费")]),s._v(".")]),s._v(" "),t("p",[s._v("有很多消费程序是这样来解决消费慢的问题的:")]),s._v(" "),t("p",[t("img",{attrs:{src:"assets/image-20230522220710-hxa7pqp.jpg",alt:""}})]),s._v(" "),t("p",[s._v("它收消息处理的业务逻辑可能比较慢, 也很难再优化了, 为了避免消息积压, 在收到消息的 OnMessage 方法中, 不处理任何业务逻辑, 把这个消息放到一个内存队列里面就返回了. 然后它可以启动很多的业务线程, 这些业务线程里面是真正处理消息的业务逻辑, 这些线程从内存队列里取消息处理, 这样它就解决了单个 Consumer 不能并行消费的问题.")]),s._v(" "),t("p",[s._v("这个方法是不是很完美地实现了并发消费? 请注意, "),t("strong",[s._v("==这是一个非常常见的错误方法==")]),s._v("!  为什么错误? "),t("strong",[s._v("因为会丢消息")]),s._v(". 如果收消息的节点发生宕机, 在内存队列中还没来及处理的这些消息就会丢失.")]),s._v(" "),t("h5",{attrs:{id:"_2-消息积压了该如何处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-消息积压了该如何处理"}},[s._v("#")]),s._v(" 2.消息积压了该如何处理?")]),s._v(" "),t("p",[s._v("还有一种消息积压的情况是, 日常系统正常运转的时候, 没有积压或者只有少量积压很快就消费掉了, 但是某一个时刻, 突然就开始积压消息并且积压持续上涨. 这种情况下需要在短时间内找到消息积压的原因, 迅速解决问题才不至于影响业务.")]),s._v(" "),t("p",[s._v("导致突然积压的原因肯定是多种多样的, 不同的系统, 不同的情况有不同的原因, 不能一概而论. 但是"),t("strong",[s._v("排查消息积压原因, 是有一些相对固定而且比较有效的方法的")]),s._v(".")]),s._v(" "),t("p",[s._v("能导致积压突然增加, 最粗粒度的原因, 只有两种: "),t("strong",[s._v("要么是发送变快了, 要么是消费变慢了")]),s._v(".")]),s._v(" "),t("p",[s._v("大部分消息队列都内置了监控的功能, 只要通过监控数据, 很容易确定是哪种原因. 如果是单位时间发送的消息增多, 比如说是赶上大促或者抢购, 短时间内不太可能优化消费端的代码来提升消费性能, 唯一的方法是通过扩容消费端的实例数来提升总体的消费能力.")]),s._v(" "),t("p",[s._v("如果短时间内没有足够的服务器资源进行扩容, 没办法的办法是, 将系统降级, 通过关闭一些不重要的业务, 减少发送方发送的数据量, 最低限度让系统还能正常运转, 服务一些重要业务.")]),s._v(" "),t("p",[s._v("还有一种不太常见的情况, 通过监控发现, 无论是发送消息的速度还是消费消息的速度和原来都没什么变化, 这时候需要检查一下消费端, "),t("strong",[s._v("是不是消费失败导致的一条消息反复消费这种情况比较多, 这种情况也会拖慢整个系统的消费速度")]),s._v(".")]),s._v(" "),t("p",[s._v("如果监控到消费变慢了, 需要检查消费实例, 分析一下是什么原因导致消费变慢. 优先检查一下日志是否有大量的消费错误, 如果没有错误的话, 可以通过打印堆栈信息, 看一下消费线程是不是卡在什么地方不动了, 比如触发了死锁或者卡在等待某些资源上了.")]),s._v(" "),t("h5",{attrs:{id:"_3-小结-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-小结-3"}},[s._v("#")]),s._v(" 3.小结")]),s._v(" "),t("p",[s._v("本节主要讨论了 2 个问题, 一个是如何在消息队列的收发两端优化系统性能, 提前预防消息积压. 另外一个问题是, 当系统发生消息积压了之后, 该如何处理.")]),s._v(" "),t("p",[s._v("优化消息收发性能, 预防消息积压的方法有两种, 增加批量或者是增加并发, 在发送端这两种方法都可以使用, 在消费端需要注意的是, 增加并发需要同步扩容分区数量, 否则是起不到效果的.")]),s._v(" "),t("p",[s._v("对于系统发生消息积压的情况, 需要先解决积压, 再分析原因, 毕竟保证系统的可用性是首先要解决的问题. 快速解决积压的方法就是通过水平扩容增加 Consumer 的实例数量.")]),s._v(" "),t("h4",{attrs:{id:"答疑解惑-1-网关如何接收服务端的秒杀结果"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#答疑解惑-1-网关如何接收服务端的秒杀结果"}},[s._v("#")]),s._v(" 答疑解惑(1):网关如何接收服务端的秒杀结果?")]),s._v(" "),t("h5",{attrs:{id:"_1-网关如何接收服务端的秒杀结果"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-网关如何接收服务端的秒杀结果"}},[s._v("#")]),s._v(" 1.网关如何接收服务端的秒杀结果?")]),s._v(" "),t("p",[s._v('在 "为什么需要消息队列" 小节, 举了一个秒杀的例子, 这个例子是用来说明消息队列是如何来实现异步处理的. 针对这个例子, 网关在发送消息之后, 是如何来接收后端服务的秒杀结果, 又如何来给 APP 返回响应的呢?')]),s._v(" "),t("p",[s._v("在解答这个问题之前, 需要先说一下, 实际生产环境中的秒杀系统, 远比这个例子复杂得多, 实现方案也是多种多样的, 不是说一定要按照这个例子的方式来实现.")]),s._v(" "),t("p",[s._v("在这个例子中, 网关接收后端服务秒杀结果, 实现的方式也不只一种, 这里提供一个比较简单的方案.")]),s._v(" "),t("p",[s._v("比如说, 用 Java 语言来举例子:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RequestHandler")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  \n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ID 生成器")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Inject")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IdGenerator")]),s._v(" idGenerator"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 消息队列生产者")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Inject")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Producer")]),s._v(" producer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 保存秒杀结果的 Map")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Inject")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Map")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Long")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Result")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" results"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 保存 mutex 的 Map")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Map")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Long")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" mutexes "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConcurrentHashMap")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这个网关实例的 ID")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Inject")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" myId"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n  "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Inject")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" timeout"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 在这里处理 APP 的秒杀请求")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Response")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("onRequest")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Request")]),s._v(" request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 获取一个进程内唯一的 UUID 作为请求 id")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Long")]),s._v(" uuid "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" idGenerator"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("next")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n      "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Message")]),s._v(" msg "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("composeMsg")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" uuid"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" myId"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 生成一个 mutex，用于等待和通知")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" mutex "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      mutexes"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("uuid"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" mutex"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n \n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 发消息")]),s._v("\n      producer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("send")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("msg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 等待后端处理")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("mutex"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        mutex"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("wait")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("timeout"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 查询秒杀结果")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Result")]),s._v(" result "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" results"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("remove")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("uuid"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 检查秒杀结果并返回响应")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" result "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" result"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("success")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Response")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("success")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Throwable")]),s._v(" ignored"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("finally")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      mutexes"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("remove")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("uuid"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 返回秒杀失败")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Response")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("fail")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 在这里处理后端服务返回的秒杀结果")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("onResult")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Result")]),s._v(" result"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" mutex "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" mutexes"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("result"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("uuid")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" mutex"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果查询不到，说明已经超时了，丢弃 result 即可。")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 登记秒杀结果")]),s._v("\n      results"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("result"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("uuid")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" result"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 唤醒处理 APP 请求的线程")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("mutex"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        mutex"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("notify")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br"),t("span",{staticClass:"line-number"},[s._v("59")]),t("br"),t("span",{staticClass:"line-number"},[s._v("60")]),t("br"),t("span",{staticClass:"line-number"},[s._v("61")]),t("br"),t("span",{staticClass:"line-number"},[s._v("62")]),t("br"),t("span",{staticClass:"line-number"},[s._v("63")]),t("br"),t("span",{staticClass:"line-number"},[s._v("64")]),t("br"),t("span",{staticClass:"line-number"},[s._v("65")]),t("br"),t("span",{staticClass:"line-number"},[s._v("66")]),t("br"),t("span",{staticClass:"line-number"},[s._v("67")]),t("br"),t("span",{staticClass:"line-number"},[s._v("68")]),t("br"),t("span",{staticClass:"line-number"},[s._v("69")]),t("br"),t("span",{staticClass:"line-number"},[s._v("70")]),t("br"),t("span",{staticClass:"line-number"},[s._v("71")]),t("br"),t("span",{staticClass:"line-number"},[s._v("72")]),t("br"),t("span",{staticClass:"line-number"},[s._v("73")]),t("br"),t("span",{staticClass:"line-number"},[s._v("74")]),t("br")])]),t("p",[s._v("在这个方案中, 网关在收到 APP 的秒杀请求后, 直接给消息队列发消息. 至于消息的内容, 并不一定是 APP 请求的 Request, 只要包含足够的字段就行了, 比如用户 ID, 设备 ID, 请求时间等等. 另外, 还需要包含这个请求的 ID 和网关的 ID, 这些后面会用到.")]),s._v(" "),t("p",[t("strong",[s._v("如果发送消息失败, 可以直接给 APP 返回秒杀失败结果, 成功发送消息之后, 线程就阻塞等待秒杀结果. 这里面不可能无限等待下去, 需要设定一个等待的超时时间. ​")])]),s._v(" "),t("p",[s._v("等待结束之后, 去"),t("strong",[s._v("存放秒杀结果的 Map")]),s._v(" 中查询是否有返回的秒杀结果, 如果有就构建 Response, 给 APP 返回秒杀结果, 如果没有, 按秒杀失败处理.")]),s._v(" "),t("p",[s._v("这是处理 APP 请求的线程, 接下来看一下网关如何来接收从后端秒杀服务返回的秒杀结果.")]),s._v(" "),t("p",[s._v("可以选择用 RPC 的方式来返回秒杀结果, 这里网关节点是 RPC 服务端, 后端服务为客户端. 之前网关发出去的消息中包含了网关的 ID, 后端服务可以通过这个网关 ID 来找到对应的网关实例, 秒杀结果中需要包含请求 ID, 这个请求 ID 也是从消息中获取的.")]),s._v(" "),t("p",[s._v("网关收到后端服务的秒杀结果之后, 用请求 ID 为 Key, 把这个结果保存到秒杀结果的 Map 中, 然后通知对应的处理 APP 请求的线程, "),t("strong",[s._v("结束等待")]),s._v(". 前面说过, 处理 APP 请求的线程, 在结束等待之后, 会去秒杀的结果 Map 中查询这个结果, 然后再给 APP 返回响应.")]),s._v(" "),t("p",[s._v("这个处理过程的流程图如下:")]),s._v(" "),t("p",[t("img",{attrs:{src:"assets/image-20230522220732-0rif7il.jpg",alt:""}}),s._v("这个解决方案还不是一个性能最优的方案, 处理 APP 请求的线程需要"),t("strong",[s._v("同步等待")]),s._v("秒杀结果. 后面会专门来讲, 如何使用异步方式来提升程序的性能.")]),s._v(" "),t("h5",{attrs:{id:"_2-详解rocketmq和kafka的消息模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-详解rocketmq和kafka的消息模型"}},[s._v("#")]),s._v(" 2.详解RocketMQ和Kafka的消息模型")]),s._v(" "),t("p",[s._v("RocketMQ 和 kafka 这两个消息队列产品的消息模型是一样的, 这里再把这个模型相关的概念, 通过一个例子详细地说一说.")]),s._v(" "),t("p",[s._v("假设有一个主题 MyTopic, 这里为主题创建 5 个队列, 分布到 2 个 Broker 中.")]),s._v(" "),t("p",[t("img",{attrs:{src:"assets/image-20230522220732-eiog1e1.jpg",alt:""}})]),s._v(" "),t("p",[s._v("先说消息生产这一端, 假设有 3 个生产者实例: Produer0, Produer1 和 Producer2.")]),s._v(" "),t("p",[s._v("这 3 个生产者是如何对应到 2 个 Broker 的, 又是如何对应到 5 个队列的呢? 这个很简单, "),t("strong",[s._v("不用对应, 随便发")]),s._v(". 每个生产者可以在 5 个队列中轮询发送, 也可以随机选一个队列发送, 或者只往某个队列发送, 这些都可以. 比如 Producer0 要发 5 条消息, 可以都发到队列 Q0 里面, 也可以 5 个队列每个队列发一条.")]),s._v(" "),t("p",[s._v("然后说消费端, 需要搞清楚消费组, 消费者和队列这几个概念的对应关系.")]),s._v(" "),t("p",[t("strong",[s._v("每个消费组就是一份订阅, 它要消费主题 MyTopic 下, 所有队列的全部消息")]),s._v('. 注意队列里的消息并不是消费掉就没有了, 这里的"消费", 只是去队列里面读了消息, 并没有删除, 消费完这条消息还是在队列里面.')]),s._v(" "),t("p",[t("strong",[s._v("多个消费组在消费同一个主题时, 消费组之间是互不影响的")]),s._v(". 比如有 2 个消费组: G0 和 G1. G0 消费了哪些消息, G1 是不知道的, 也不用知道. G0 消费过的消息, G1 还可以消费. 即使 G0 积压了很多消息, 对 G1 来说也没有任何影响.")]),s._v(" "),t("p",[s._v("然后再说消费组的内部, "),t("strong",[s._v("一个消费组中可以包含多个消费者的实例")]),s._v(". 比如说消费组 G1, 包含了 2 个消费者 C0 和 C1, 那这 2 个消费者又是怎么和主题 MyTopic 的 5 个队列对应的呢?")]),s._v(" "),t("p",[s._v("由于消费确认机制的限制, 这里面有一个原则是, "),t("strong",[s._v("在同一个消费组里面, 每个队列只能被一个消费者实例占用")]),s._v(". 至于如何分配, 这里面有很多策略, 就不展开说了. 总之保证每个队列分配一个消费者就行了. 比如, 可以让消费者 C0 消费 Q0, Q1 和 Q2, C1 消费 Q3 和 Q4, 如果 C0 宕机了, "),t("strong",[s._v("会触发重新分配, 这时候 C1 同时消费全部 5 个队列")]),s._v(".")]),s._v(" "),t("p",[s._v("再强调一下, "),t("strong",[s._v("队列占用只是针对消费组内部")]),s._v("来说的, 对于其他的消费组来说是没有影响的. 比如队列 Q2 被消费组 G1 的消费者 C1 占用了, 对于消费组 G2 来说, 是完全没有影响的, G2 也可以分配它的消费者来占用和消费队列 Q2.")]),s._v(" "),t("p",[t("strong",[s._v("最后说一下消费位置, 每个消费组内部维护自己的一组消费位置, 每个队列对应一个消费位置")]),s._v(". 消费位置在服务端保存, 并且"),t("strong",[s._v("消费位置和消费者是没有关系的")]),s._v(". 每个消费位置一般就是一个整数, 记录这个消费组中, 这个队列消费到哪个位置了, 这个位置之前的消息都成功消费了, 之后的消息都没有消费或者正在消费.")]),s._v(" "),t("p",[s._v("把这个例子的消费位置整理成表格如下.")]),s._v(" "),t("p",[t("img",{attrs:{src:"assets/image-20230522220733-k3fbadz.jpg",alt:""}})]),s._v(" "),t("p",[s._v("可以看到, 这个表格中并没有消费者这一列, 也就是说"),t("strong",[s._v("消费者和消费位置是没有关系")]),s._v("的.")]),s._v(" "),t("h5",{attrs:{id:"_3-如何实现单个队列的并行消费"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-如何实现单个队列的并行消费"}},[s._v("#")]),s._v(" 3.如何实现单个队列的并行消费?")]),s._v(" "),t("p",[s._v("一个问题：如果不要求严格顺序, 如何实现单个队列的并行消费? 关于这个问题, 有很多的实现方式, 在 JMQ(京东自研的消息队列产品)中, 它实现的思路是这样的.")]),s._v(" "),t("p",[s._v("比如说, 队列中当前有 10 条消息, 对应的编号是 0-9, 当前的消费位置是 5. 同时来了三个消费者来拉消息, 把编号为 5, 6, 7 的消息分别给三个消费者, 每人一条. 过了一段时间, 三个消费成功的响应都回来了, 这时候就可以把消费位置更新为 8 了, 这样就实现并行消费.")]),s._v(" "),t("p",[s._v("这是理想的情况. 还有可能编号为 6, 7 的消息响应回来了, 编号 5 的消息响应一直回不来, 怎么办? 这个位置 5 就是一个"),t("strong",[s._v("消息空洞")]),s._v(". 为了避免位置 5 把这个队列卡住, "),t("strong",[s._v("可以先把消费位置 5 这条消息, 复制到一个特殊重试队列中, 然后依然把消费位置更新为 8, 继续消费. 再有消费者来拉消息的时候, 优先把重试队列中的那条消息给消费者就可以")]),s._v("了.")]),s._v(" "),t("p",[s._v("这是并行消费的一种实现方式. 需要注意的是, 并行消费开销还是很大的, 不应该作为一个常规的, 提升消费并发的手段, "),t("strong",[s._v("如果消费慢需要增加消费者的并发数, 还是需要扩容队列数")]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"_4-如何保证消息的严格顺序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-如何保证消息的严格顺序"}},[s._v("#")]),s._v(" 4.如何保证消息的严格顺序?")]),s._v(" "),t("p",[s._v("怎么来保证消息的严格顺序? 前面多次提到过, "),t("strong",[s._v("主题层面是无法保证严格顺序的, 只有在队列上才能保证消息的严格顺序")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("==如果说业务必须要求全局严格顺序, 就只能把消息队列数配置成 1, 生产者和消费者也只能是一个实例, 这样才能保证全局严格顺序==")]),s._v(".")]),s._v(" "),t("p",[s._v("大部分情况下, 并不需要全局严格顺序, 只要保证局部有序就可以满足要求了. 比如在传递账户流水记录的时候, 只要"),t("strong",[s._v("保证每个账户的流水有序")]),s._v("就可以了, 不同账户之间的流水记录是不需要保证顺序的.")]),s._v(" "),t("p",[t("strong",[s._v("如果需要保证局部严格顺序, 可以这样来实现. 在发送端, 使用账户 ID 作为 Key, 采用一致性哈希算法计算出队列编号, 指定队列来发送消息. 一致性哈希算法可以保证, 相同 Key 的消息总是发送到同一个队列上, 这样可以保证相同 Key 的消息是严格有序的. 如果不考虑队列扩容, 也可以用队列数量取模的简单方法来计算队列编号")]),s._v(".")]),s._v(" "),t("h4",{attrs:{id:"如何使用异步设计提升系统性能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何使用异步设计提升系统性能"}},[s._v("#")]),s._v(" 如何使用异步设计提升系统性能?")]),s._v(" "),t("p",[s._v("对于开发者来说, 异步是一种程序设计的思想, 使用异步模式设计的程序可以显著减少线程等待, 从而在高吞吐量的场景中, 极大提升系统的整体性能, 显著降低时延.")]),s._v(" "),t("p",[s._v("因此, 像消息队列这种需要超高吞吐量和超低时延的中间件系统, 在"),t("strong",[s._v("其核心流程中, 一定会大量采用异步的设计思想")]),s._v(".")]),s._v(" "),t("p",[s._v("接下来通过一个例子学习一下, 使用异步设计是如何提升系统性能的.")]),s._v(" "),t("h5",{attrs:{id:"_1-异步设计如何提升系统性能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-异步设计如何提升系统性能"}},[s._v("#")]),s._v(" 1.异步设计如何提升系统性能?")]),s._v(" "),t("p",[s._v("假设要实现一个转账的微服务 Transfer( accountFrom, accountTo, amount), 这个服务有三个参数: 转出账户, 转入账户和转账金额.")]),s._v(" "),t("p",[s._v("实现过程也比较简单, 需要从账户 A 中转账 100 元到账户 B 中:")]),s._v(" "),t("ol",[t("li",[s._v("先从 A 的账户中减去 100 元;")]),s._v(" "),t("li",[s._v("再给 B 的账户加上 100 元, 转账完成.")])]),s._v(" "),t("p",[s._v("对应的时序图是这样的:")]),s._v(" "),t("p",[t("img",{attrs:{src:"assets/image-20230522220920-zcjulsn.jpg",alt:""}})]),s._v(" "),t("p",[s._v("在这个例子的实现过程中, 调用了另外一个微服务 Add(account, amount), 它的功能是给账户 account 增加金额 amount, 当 amount 为负值的时候, 就是扣减响应的金额.")]),s._v(" "),t("p",[s._v("需要特别说明的是, 在这段代码中, 为了使问题简化以便能专注于异步和性能优化, 省略了错误处理和事务相关的代码, 在实际的开发中不要这样做.")]),s._v(" "),t("h6",{attrs:{id:"_1-同步实现的性能瓶颈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-同步实现的性能瓶颈"}},[s._v("#")]),s._v(" (1)同步实现的性能瓶颈")]),s._v(" "),t("p",[s._v("首先来看一下同步实现, 对应的伪代码如下:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Transfer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("accountFrom"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" accountTo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" amount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 先从 accountFrom 的账户中减去相应的钱数")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("accountFrom"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" amount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 再把减去的钱数加到 accountTo 的账户中")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("accountTo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" amount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("OK")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("上面的伪代码首先从 accountFrom 的账户中减去相应的钱数, 再把减去的钱数加到 accountTo 的账户中, 这种同步实现是一种很自然方式, 简单直接. 那么性能表现如何呢? 这里分析一下性能.")]),s._v(" "),t("p",[s._v("假设微服务 Add 的平均响应时延是 50ms, 那么很容易计算出实现的微服务 Transfer 的平均响应时延大约等于执行 2 次 Add 的时延, 也就是 100ms. 那随着调用 Transfer 服务的请求越来越多, 会出现什么情况呢?")]),s._v(" "),t("p",[s._v("在这种实现中, 每处理一个请求需要耗时 100ms, 并在这 100ms 过程中是需要"),t("strong",[s._v("独占一个线程")]),s._v("的, 那么可以得出这样一个结论: 每个线程每秒钟最多可以处理 10 个请求. 假设使用的服务器同时打开的线程数量上限是 10000, 可以计算出这台服务器每秒钟可以处理的请求上限是: 10000 (个线程) * 10(次请求每秒) = 100000 次每秒.")]),s._v(" "),t("p",[s._v("如果请求速度超过这个值, 那么请求就不能被马上处理, 只能阻塞或者排队, 这时候 Transfer 服务的响应时延由 100ms 延长到了: "),t("strong",[s._v("排队的等待时延 + 处理时延 (100ms)")]),s._v(". 也就是说, 在大量请求的情况下, 微服务的平均响应时延变长了.")]),s._v(" "),t("p",[s._v("这是不是已经到了这台服务器所能承受的极限了呢? 其实远远没有, 如果监测一下服务器的各项指标, 会发现无论是 CPU, 内存, 还是网卡流量或者是磁盘的 IO 都空闲的很, 那 Transfer 服务中的那 10,000 个线程在干什么呢? 对, "),t("strong",[s._v("绝大部分线程都在等待 Add 服务返回结果")]),s._v(".")]),s._v(" "),t("p",[s._v("也就是说, "),t("strong",[s._v("采用同步实现的方式, 整个服务器的所有线程大部分时间都没有在工作, 而是都在等待. ​")])]),s._v(" "),t("p",[s._v("如果能减少或者避免这种无意义的等待, 就可以大幅提升服务的吞吐能力, 从而提升服务的总体性能.")]),s._v(" "),t("h6",{attrs:{id:"_2-采用异步实现解决等待问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-采用异步实现解决等待问题"}},[s._v("#")]),s._v(" (2)采用异步实现解决等待问题")]),s._v(" "),t("p",[s._v("接下来看一下如何用异步的思想来解决这个问题, 实现同样的业务逻辑.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TransferAsync")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("accountFrom"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" accountTo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" amount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("OnComplete")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 异步从 accountFrom 的账户中减去相应的钱数，然后调用 OnDebit 方法。")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AddAsync")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("accountFrom"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" amount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("OnDebit")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("accountTo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" amount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("OnAllDone")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("OnComplete")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 扣减账户 accountFrom 完成后调用")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("OnDebit")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("accountTo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" amount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("OnAllDone")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("OnComplete")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//  再异步把减去的钱数加到 accountTo 的账户中，然后执行 OnAllDone 方法")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AddAsync")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("accountTo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" amount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("OnAllDone")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("OnComplete")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 转入账户 accountTo 完成后调用")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("OnAllDone")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("OnComplete")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("OnComplete")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("p",[s._v("这里 TransferAsync 服务比 Transfer 多了一个参数, 并且这个参数传入的是一个"),t("strong",[s._v("回调方法")]),s._v(" OnComplete()(虽然 Java 语言并不支持将方法作为方法参数传递, 但像 JavaScript 等很多语言都具有这样的特性, 在 Java 语言中, 也可以通过传入一个回调类的实例来变相实现类似的功能).")]),s._v(" "),t("p",[s._v("这个 TransferAsync() 方法的语义是: 请帮我执行转账操作, 当转账完成后, 请调用 OnComplete() 方法. "),t("strong",[s._v("调用 TransferAsync 的线程不必等待转账完成就可以立即返回了, 待转账结束后, TransferService 自然会调用 OnComplete() 方法来执行转账后续的工作")]),s._v(".")]),s._v(" "),t("p",[s._v("异步的实现过程相对于同步来说, 稍微有些复杂. 先定义 2 个回调方法:")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("OnDebit()")]),s._v(": 扣减账户 accountFrom 完成后调用的回调方法;")]),s._v(" "),t("li",[t("strong",[s._v("OnAllDone()")]),s._v(": 转入账户 accountTo 完成后调用的回调方法.")])]),s._v(" "),t("p",[s._v("整个异步实现的语义相当于:")]),s._v(" "),t("ol",[t("li",[s._v("异步从 accountFrom 的账户中减去相应的钱数, 然后调用 OnDebit() 方法;")]),s._v(" "),t("li",[s._v("在 OnDebit() 方法中, 异步把减去的钱数加到 accountTo 的账户中, 然后执行 OnAllDone() 方法;")]),s._v(" "),t("li",[s._v("在 OnAllDone() 方法中, 调用 OnComplete() 方法.")])]),s._v(" "),t("p",[s._v("绘制成时序图是这样的:")]),s._v(" "),t("p",[t("img",{attrs:{src:"assets/image-20230522220920-z1qx2a4.jpg",alt:""}})]),s._v(" "),t("p",[s._v("异步化实现后, 整个流程的时序和同步实现是完全一样的, "),t("strong",[s._v("区别只是在线程模型上由同步顺序调用改为了异步调用和回调的机制. ​")])]),s._v(" "),t("p",[s._v("这里分析一下异步实现的性能, 由于流程的时序和同步实现是一样, 在低请求数量的场景下, 平均响应时延"),t("strong",[s._v("一样是 100ms")]),s._v(". 在超高请求数量场景下, 异步的实现不再需要线程等待执行结果, 只需要个位数量的线程, 即可实现同步场景大量线程一样的吞吐量.")]),s._v(" "),t("p",[s._v("由于没有了线程的数量的限制, "),t("strong",[s._v("总体吞吐量上限会大大超过同步实现")]),s._v(", 并且在服务器 CPU, 网络带宽资源达到极限之前, 响应时延不会随着请求数量增加而显著升高, 几乎可以一直保持约 100ms 的平均响应时延.")]),s._v(" "),t("h5",{attrs:{id:"_2-简单实用的异步框架-completablefuture"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-简单实用的异步框架-completablefuture"}},[s._v("#")]),s._v(" 2.简单实用的异步框架:CompletableFuture")]),s._v(" "),t("p",[s._v("在实际开发时, 可以使用异步框架和响应式框架, 来解决一些通用的异步编程问题, 简化开发. Java 中比较常用的异步框架有 Java8 内置的 CompletableFuture 和 ReactiveX 的 RxJava, CompletableFuture 简单实用易于理解, 但是 RxJava 的功能更加强大.")]),s._v(" "),t("p",[s._v("Java 8 中新增了一个非常强大的用于异步编程的类: "),t("strong",[s._v("CompletableFuture")]),s._v(", 使用 CompletableFuture 很容易编写出优雅且易于维护的异步代码.")]),s._v(" "),t("p",[s._v("接下来看看如何用 CompletableFuture 实现的转账服务.")]),s._v(" "),t("p",[s._v("首先用 CompletableFuture 定义 2 个微服务的接口:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * 账户服务\n */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AccountService")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * 变更账户金额\n     * @param account 账户 ID\n     * @param amount 增加的金额，负值为减少\n     */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CompletableFuture")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Void")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" account"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" amount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * 转账服务\n */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TransferService")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * 异步转账服务\n     * @param fromAccount 转出账户\n     * @param toAccount 转入账户\n     * @param amount 转账金额，单位分\n     */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CompletableFuture")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Void")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("transfer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" fromAccount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" toAccount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" amount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("p",[s._v("可以看到"),t("strong",[s._v("这两个接口中定义的方法的返回类型都是一个带泛型的 CompletableFeture, 尖括号中的泛型类型就是真正方法需要返回数据的类型")]),s._v(", 这两个服务不需要返回数据, 所以直接用 Void 类型就可以.")]),s._v(" "),t("p",[s._v("然后来实现转账服务:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * 转账服务的实现\n */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TransferServiceImpl")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TransferService")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Inject")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AccountService")]),s._v(" accountService"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 使用依赖注入获取账户服务的实例")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CompletableFuture")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Void")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("transfer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" fromAccount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" toAccount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" amount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 异步调用 add 方法从 fromAccount 扣减相应金额")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" accountService"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("fromAccount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" amount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 然后调用 add 方法给 toAccount 增加相应金额")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("thenCompose")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("v "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" accountService"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("toAccount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" amount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("p",[s._v("在转账服务的实现类 TransferServiceImpl 里面, 先定义一个 AccountService 实例.")]),s._v(" "),t("p",[s._v("然后看实现 transfer() 方法的实现, 先调用一次账户服务 accountService.add() 方法从 fromAccount 扣减响应的金额, 因为 add() 方法返回的就是一个 "),t("strong",[s._v("CompletableFeture 对象")]),s._v(", 可以用 CompletableFeture 的 thenCompose() 方法将下一次调用 accountService.add() 串联起来, 实现异步依次调用两次账户服务完整转账.")]),s._v(" "),t("p",[s._v("客户端使用 CompletableFuture 也非常灵活, 既可以同步调用, 也可以异步调用.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Client")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Inject")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TransferService")]),s._v(" transferService"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 使用依赖注入获取转账服务的实例")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("A")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("B")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1001")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("syncInvoke")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ExecutionException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("InterruptedException")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 同步调用")]),s._v("\n        transferService"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("transfer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("A")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("B")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" 转账完成！"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("asyncInvoke")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 异步调用")]),s._v("\n        transferService"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("transfer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("A")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("B")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("thenRun")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" 转账完成！"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br")])]),t("p",[s._v("在调用异步方法获得返回值 CompletableFuture 对象后, 既可以调用 CompletableFuture 的 get() 方法, 像调用同步方法那样"),t("strong",[s._v("等待调用的方法执行结束并获得返回值")]),s._v(', 也可以像异步回调的方式一样, 调用 CompletableFuture 那些以 then 开头的一系列方法, 为 CompletableFuture 定义异步方法结束之后的后续操作. 比如像上面这个例子中, 调用 thenRun() 方法, 参数就是将转账完成打印在控台上这个操作, 这样就可以实现在转账完成后, 在控制台打印 "转账完成!" 了.')]),s._v(" "),t("h5",{attrs:{id:"_3-小结-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-小结-4"}},[s._v("#")]),s._v(" 3.小结")]),s._v(" "),t("p",[s._v("简单的说, 异步思想就是, "),t("strong",[s._v('当要执行一项比较耗时的操作时, 不去等待操作结束, 而是给这个操作一个命令: "当操作完成后, 接下来去执行什么."')])]),s._v(" "),t("p",[t("strong",[s._v("使用异步编程模型, 虽然并不能加快程序本身的速度, 但可以减少或者避免线程等待, 只用很少的线程就可以达到超高的吞吐能力. ​")])]),s._v(" "),t("p",[s._v("同时也需要注意到异步模型的问题: 相比于同步实现, 异步实现的复杂度要大很多, 代码的可读性和可维护性都会显著的下降. 虽然使用一些异步编程框架会在一定程度上简化异步开发, 但是并不能解决异步模型高复杂度的问题.")]),s._v(" "),t("p",[s._v("异步性能虽好, 但一定不要滥用, "),t("strong",[s._v("只有类似在像消息队列这种业务逻辑简单并且需要超高吞吐量的场景下, 或者必须长时间等待资源的地方, 才考虑使用异步模型")]),s._v(". 如果系统的业务逻辑比较复杂, 在性能足够满足业务需求的情况下, 采用符合人类自然的思路且易于开发和维护的同步模型是更加明智的选择.")]),s._v(" "),t("h4",{attrs:{id:"如何实现高性能的异步网络传输"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何实现高性能的异步网络传输"}},[s._v("#")]),s._v(" 如何实现高性能的异步网络传输?")]),s._v(" "),t("p",[s._v("上一节学习了异步的线程模型, 异步与同步模型最大的区别是, 同步模型会阻塞线程等待资源, 而异步模型不会阻塞线程, 它是等资源准备好后, 再通知业务代码来完成后续的资源处理逻辑. 这种异步设计的方法, 可以很好地"),t("strong",[s._v("解决 IO 等待的问题")]),s._v(".")]),s._v(" "),t("p",[s._v("许多数业务系统都是 IO 密集型系统. 跟 IO 密集型系统相对的另一种系统叫计算密集型系统. IO 密集型系统大部分时间都在执行 IO 操作, 这个 IO 操作主要包括"),t("strong",[s._v("网络 IO 和磁盘 IO")]),s._v(", 以及与计算机连接的一些外围设备的访问. 与之相对的计算密集型系统, 大部分时间都是在使用 CPU 执行计算操作. 日常开发的业务系统, 很少有非常耗时的计算, 更多的是网络收发数据, 读写磁盘和数据库这些 IO 操作. 这样的系统基本上都是 IO 密集型系统, 特别适合使用异步的设计来提升系统性能.")]),s._v(" "),t("p",[s._v("应用程序最常使用的 IO 资源, 主要包括磁盘 IO 和网络 IO. 由于现在的 SSD 的速度越来越快, 对于"),t("strong",[s._v("本地磁盘的读写, 异步的意义越来越小")]),s._v(". 所以"),t("strong",[s._v("使用异步设计的方法来提升 IO 性能, 更加需要关注的问题是, 如何来实现高性能的异步网络传输")]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"_1-理想的异步网络框架应该是什么样的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-理想的异步网络框架应该是什么样的"}},[s._v("#")]),s._v(" 1.理想的异步网络框架应该是什么样的?")]),s._v(" "),t("p",[s._v("在开发的程序中, 如果要实现通过网络来传输数据, 需要用到开发语言提供的网络通信类库. 大部分语言提供的网络通信基础类库都是"),t("strong",[s._v("同步")]),s._v("的. 一个 TCP 连接建立后, 用户代码会获得一个用于收发数据的通道. 每个通道会在内存中开辟两片区域用于收发数据的缓存.")]),s._v(" "),t("p",[s._v("发送数据的过程比较简单, 直接往这个通道里面来写入数据就可以了. "),t("strong",[s._v("用户代码在发送时写入的数据会暂存在缓存中, 然后操作系统会通过网卡, 把发送缓存中的数据传输到对端的服务器上")]),s._v(".")]),s._v(" "),t("p",[s._v("只要这个缓存不满, 或者发送数据的速度没有超过网卡传输速度的上限, 那这个发送数据的操作耗时, 只不过是一次内存写入的时间, 这个时间是非常快的. 所以"),t("strong",[s._v("发送数据的时候同步发送就可以了, 没有必要异步. ​")])]),s._v(" "),t("p",[s._v("比较麻烦的是接收数据. "),t("strong",[s._v("对于数据的接收方来说, 它并不知道什么时候会收到数据")]),s._v(". 那能直接想到的方法就是, "),t("strong",[s._v("用一个线程阻塞在那儿等着数据, 当有数据到来的时候, 操作系统会先把数据写入接收缓存, 然后给接收数据的线程发一个通知, 线程收到通知后结束等待, 开始读取数据. 处理完这一批数据后, 继续阻塞等待下一批数据到来, 这样周而复始地处理收到的数据")]),s._v(".")]),s._v(" "),t("p",[t("img",{attrs:{src:"assets/image-20230522220941-cy1t0v2.jpg",alt:""}})]),s._v(" "),t("p",[s._v("这就是"),t("strong",[s._v("同步网络 IO 的模型")]),s._v(". 同步网络 IO 模型在处理少量连接的时候, 是没有问题的. 但是如果要同时处理非常多的连接, 同步的网络 IO 模型就有点儿力不从心了.")]),s._v(" "),t("p",[s._v("因为每个连接都需要阻塞一个线程来等待数据, 大量的连接数就会"),t("strong",[s._v("需要相同数量的数据接收线程")]),s._v(". 当这些 TCP 连接都在进行数据收发的时候, 就会有大量的线程来抢占 CPU 时间, 造成频繁的 CPU 上下文切换, 导致 CPU 的负载升高, 整个系统的性能就会比较慢.")]),s._v(" "),t("p",[s._v("所以需要使用异步的模型来解决网络 IO 问题. 怎么解决呢?")]),s._v(" "),t("p",[t("strong",[s._v("可以先抛开你知道的各种语言的异步类库和各种异步的网络 IO 框架, 想一想对于业务开发者来说, 一个好的异步网络框架, 它的 API 应该是什么样的呢? ​")])]),s._v(" "),t("p",[t("strong",[s._v("希望达到的效果无非就是只用少量的线程就能处理大量的连接, 有数据到来的时候能第一时间处理就可以了.")])]),s._v(" "),t("p",[t("img",{attrs:{src:"assets/image-20230522220942-h5wue5p.jpg",alt:""}})]),s._v(" "),t("p",[s._v("对于开发者来说, 最简单的方式就是, 事先定义好收到数据后的处理逻辑, 把这个处理逻辑作为一个回调方法, 在连接建立前就通过框架提供的 API 设置好. 当收到数据的时候, 由框架自动来执行这个"),t("strong",[s._v("回调方法")]),s._v("就好了.")]),s._v(" "),t("p",[s._v("实际上, 有没有这么简单的框架呢?")]),s._v(" "),t("h5",{attrs:{id:"_2-使用netty来实现异步网络通信"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-使用netty来实现异步网络通信"}},[s._v("#")]),s._v(" 2.使用Netty来实现异步网络通信")]),s._v(" "),t("p",[s._v("在 Java 中, Netty 框架的 API 设计就是这样的. 接下来看一下如何使用 Netty 实现异步接收数据.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 创建一组线性")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("EventLoopGroup")]),s._v(" group "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("NioEventLoopGroup")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 初始化 Server")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServerBootstrap")]),s._v(" serverBootstrap "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServerBootstrap")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    serverBootstrap"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("group")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("group"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    serverBootstrap"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("channel")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("NioServerSocketChannel")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    serverBootstrap"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("localAddress")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("InetSocketAddress")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"localhost"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9999")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 设置收到数据后的处理的 Handler")]),s._v("\n    serverBootstrap"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("childHandler")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ChannelInitializer")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SocketChannel")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("initChannel")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SocketChannel")]),s._v(" socketChannel"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Exception")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            socketChannel"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("pipeline")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("addLast")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyHandler")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 绑定端口，开始提供服务")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ChannelFuture")]),s._v(" channelFuture "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" serverBootstrap"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("bind")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sync")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    channelFuture"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("channel")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("closeFuture")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sync")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Exception")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("printStackTrace")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("finally")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    group"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("shutdownGracefully")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sync")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br")])]),t("p",[s._v("这段代码它的功能非常简单, 就是在本地 9999 端口, 启动了一个 Socket Server 来接收数据. 一起来看一下这段代码:")]),s._v(" "),t("ol",[t("li",[s._v("首先创建了一个 EventLoopGroup 对象, 命名为 group, 这个 group 对象可以简单把它理解为一组线程. "),t("strong",[s._v("这组线程的作用就是来执行收发数据的业务逻辑")]),s._v(".")]),s._v(" "),t("li",[s._v("然后使用 Netty 提供的 ServerBootstrap 来初始化一个 Socket Server, 绑定到本地 9999 端口上.")]),s._v(" "),t("li",[s._v("在真正启动服务之前, 给 serverBootstrap 传入了一个 MyHandler 对象, 这个 MyHandler 是自己实现的一个类, 它需要继承 Netty 提供的一个抽象类: ChannelInboundHandlerAdapter, 在这个 MyHandler 里面, 可以定义收到数据后的处理逻辑. 这个设置 Handler 的过程, 就是前面提到的"),t("strong",[s._v("预先来定义回调方法")]),s._v("的过程.")]),s._v(" "),t("li",[s._v("最后就可以真正绑定本地端口, 启动 Socket 服务了.")])]),s._v(" "),t("p",[s._v("服务启动后, 如果有客户端来请求连接, Netty 会自动接受并创建一个 Socket 连接. 可以看到, 上面的代码中并没有像一些同步网络框架中那样, 需要用户调用 Accept() 方法来接受创建连接的情况, 在 Netty 中, 这个过程是"),t("strong",[s._v("自动")]),s._v("的.")]),s._v(" "),t("p",[s._v("当收到来自客户端的数据后, Netty 就会在"),t("strong",[s._v("第一行提供的 EventLoopGroup 对象中, 获取一个 IO 线程, 在这个 IO 线程中调用接收数据的回调方法, 来执行接收数据的业务逻辑")]),s._v(", 在这个例子中, 就是传入的 MyHandler 中的方法.")]),s._v(" "),t("p",[s._v("Netty 本身它是一个全异步的设计, 前面讲过, 异步设计会带来额外的复杂度, 所以这个例子的代码看起来会比较多, 比较复杂. 但是其实它提供了一组非常友好 API.")]),s._v(" "),t("p",[s._v("真正需要业务代码来实现的就两个部分: "),t("strong",[s._v("一个是把服务初始化并启动起来, 另外就是实现收发消息的业务逻辑 MyHandler")]),s._v(". 而像线程控制, 缓存管理, 连接管理这些异步网络 IO 中通用的, 比较复杂的问题, Netty 已经自动处理好了. 所以非常多的开源项目使用 Netty 作为其底层的网络 IO 框架, 并不是没有原因的.")]),s._v(" "),t("p",[s._v("在这种设计中, Netty 自己维护一组线程来执行数据收发的业务逻辑. 如果说业务场景需要更灵活的实现, 自己来维护收发数据的线程, 可以选择更加底层的 "),t("strong",[s._v("Java NIO")]),s._v(". 其实 Netty 也是基于 NIO 来实现的.")]),s._v(" "),t("h5",{attrs:{id:"_3-使用nio来实现异步网络通信"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-使用nio来实现异步网络通信"}},[s._v("#")]),s._v(" 3.使用NIO来实现异步网络通信")]),s._v(" "),t("p",[s._v("在 Java 的 NIO 中, 它提供了一个 Selector 对象, 来解决一个线程在多个网络连接上的多路复用问题. 什么意思呢? 在 NIO 中, "),t("strong",[s._v("每个已经建立好的连接用一个 Channel 对象来表示")]),s._v(". 我们希望能实现, 在一个线程里, 接收来自多个 Channel 的数据. 也就是说, 这些 Channel 中, 任何一个 Channel 收到数据后, 第一时间能在同一个线程里面来处理.")]),s._v(" "),t("p",[s._v("可以想一下, 一个线程对应多个 Channel, 有可能会出现这两种情况:")]),s._v(" "),t("ol",[t("li",[s._v("线程在忙着处理收到的数据, 这时候 Channel 中又收到了新数据;")]),s._v(" "),t("li",[s._v("线程闲着没事儿干, 所有的 Channel 中都没收到数据, 也不能确定哪个 Channel 会在什么时候收到数据.")])]),s._v(" "),t("p",[t("img",{attrs:{src:"assets/image-20230522220942-akem09u.jpg",alt:""}})]),s._v(" "),t("p",[s._v("Selecor 通过一种类似于"),t("strong",[s._v("事件的机制")]),s._v("来解决这个问题. 首先需要把连接, 也就是 "),t("strong",[s._v("Channel 绑定到 Selector 上")]),s._v(", 然后可以在接收数据的线程来调用 Selector.select() 方法来等待数据到来. 这个 select 方法是一个"),t("strong",[s._v("阻塞方法")]),s._v(", 这个线程会一直卡在这儿, "),t("strong",[s._v("直到这些 Channel 中的任意一个有数据到来")]),s._v(", 就会结束等待返回数据. 它的返回值是一个迭代器, 可以从这个迭代器里面获取所有 Channel 收到的数据, 然后来执行数据接收的业务逻辑.")]),s._v(" "),t("p",[s._v("可以选择直接在这个线程里面来执行接收数据的业务逻辑, 也可以将任务分发给其他的线程来执行, 如何选择完全可以由业务代码来控制.")]),s._v(" "),t("h4",{attrs:{id:"序列化与反序列化-如何通过网络传输结构化的数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#序列化与反序列化-如何通过网络传输结构化的数据"}},[s._v("#")]),s._v(" 序列化与反序列化: 如何通过网络传输结构化的数据?")]),s._v(" "),t("p",[s._v("上一节解决了如何实现高性能的网络传输的问题. 那是不是程序之间就可以通信了呢? 这里面还有一些问题需要解决.")]),s._v(" "),t("p",[s._v("在 TCP 的连接上, 它传输数据的基本形式就是"),t("strong",[s._v("二进制流")]),s._v(", 也就是一段一段的 1 和 0. 在一般编程语言或者网络框架提供的 API 中, 传输数据的基本形式是字节, 也就是 Byte. 一个字节就是 8 个二进制位, 8 个 Bit, 所以在这里, 二进制流和字节流本质上是一样的.")]),s._v(" "),t("p",[s._v("那对于编写的程序来说, 它需要通过网络传输的数据是什么形式的呢? 是"),t("strong",[s._v("结构化")]),s._v("的数据, 比如一条命令, 一段文本或者是一条消息. 对应到写的代码中, 这些结构化的数据是什么? 这些都可以用一个类(Class)或者一个结构体(Struct)来表示.")]),s._v(" "),t("p",[s._v("那显然, "),t("strong",[s._v("要想使用网络框架的 API 来传输结构化的数据, 必须得先实现结构化的数据与字节流之间的双向转换. ​")]),s._v("这种将结构化数据转换成字节流的过程, 称为"),t("strong",[s._v("序列化")]),s._v(", 反过来转换, 就是"),t("strong",[s._v("反序列化")]),s._v(".")]),s._v(" "),t("p",[s._v("序列化的用途除了用于在网络上传输数据以外, 另外的一个重要用途是, 将结构化数据保存在文件中, 因为在文件内保存数据的形式也是二进制序列, 和网络传输过程中的数据是一样的, 所以序列化同样适用于将结构化数据保存在文件中.")]),s._v(" "),t("p",[t("strong",[s._v("很多处理海量数据的场景中, 都需要将对象序列化后, 把它们暂时从内存转移到磁盘中, 等需要用的时候, 再把数据从磁盘中读取出来, 反序列化成对象来使用, 这样不仅可以长期保存不丢失数据, 而且可以节省有限的内存空间. ​")])]),s._v(" "),t("p",[s._v("本节来分析一下怎么实现高性能的序列化和反序列化.")]),s._v(" "),t("h5",{attrs:{id:"_1-选择哪种序列化实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-选择哪种序列化实现"}},[s._v("#")]),s._v(" 1.选择哪种序列化实现?")]),s._v(" "),t("p",[s._v("有很多通用的序列化实现, 可以直接拿来使用. Java 和 Go 语言都内置了序列化实现, 也有一些流行的开源序列化实现, 比如, Google 的 Protobuf, Kryo, Hessian 等; 此外, 像 JSON, XML 这些标准的数据格式, 也可以作为一种序列化实现来使用. 当然也可以自己来实现私有的序列化实现.")]),s._v(" "),t("p",[s._v("面对这么多种序列化实现, 该如何选择呢? 需要权衡这样几个因素:")]),s._v(" "),t("ol",[t("li",[s._v("序列化后的数据最好是易于人类阅读的;")]),s._v(" "),t("li",[s._v("实现的复杂度是否足够低;")]),s._v(" "),t("li",[s._v("序列化和反序列化的速度越快越好;")]),s._v(" "),t("li",[s._v("序列化后的信息密度越大越好, 也就是说, 同样的一个结构化数据, 序列化之后占用的存储空间越小越好;")])]),s._v(" "),t("p",[s._v("当然, "),t("strong",[s._v("不会存在一种序列化实现在这四个方面都是最优的")]),s._v(", 否则就没必要来纠结到底选择哪种实现了. 因为大多数情况下, 易于阅读和信息密度是矛盾的, 实现的复杂度和性能也是互相矛盾的. 所以需要根据所实现的业务, 来选择合适的序列化实现.")]),s._v(" "),t("p",[s._v("像 JSON, XML 这些序列化方法, 可读性最好, 但信息密度也最低. 像 Kryo, Hessian 这些通用的二进制序列化实现, 适用范围广, 使用简单, 性能比 JSON, XML 要好一些, 但是肯定不如专用的序列化实现.")]),s._v(" "),t("p",[s._v("对于一些强业务类系统, 比如说电商类, 社交类的应用系统, 这些系统的特点是, 业务复杂, 需求变化快, 但是对性能的要求没有那么苛刻. 这种情况下, 推荐使用 JSON 这种实现简单, 数据可读性好的序列化实现, 这种实现使用起来非常简单, 序列化后的 JSON 数据都可以看得懂, 无论是接口调试还是排查问题都非常方便. 付出的代价就是多一点点 CPU 时间和存储空间而已.")]),s._v(" "),t("p",[s._v("如果 JSON 序列化的性能达不到系统的要求, 可以采用性能更好的"),t("strong",[s._v("二进制序列化")]),s._v("实现, 实现的复杂度和 JSON 序列化是差不多的, 都很简单, 但是序列化性能更好, 信息密度也更高, 代价就是失去了可读性.")]),s._v(" "),t("h5",{attrs:{id:"_2-实现高性能的序列化和反序列化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-实现高性能的序列化和反序列化"}},[s._v("#")]),s._v(" 2.实现高性能的序列化和反序列化")]),s._v(" "),t("p",[s._v("绝大部分系统, 使用上面这两类通用的序列化实现都可以满足需求, 而像消息队列这种用于解决通信问题的中间件, "),t("strong",[s._v("它对性能要求非常高, 通用的序列化实现达不到性能要求, 所以很多的消息队列都选择自己实现高性能的专用序列化和反序列化")]),s._v(".")]),s._v(" "),t("p",[s._v("使用专用的序列化方法, 可以提高序列化性能, 并有效减小序列化后的字节长度.")]),s._v(" "),t("p",[t("strong",[s._v("在专用的序列化方法中, 不必考虑通用性")]),s._v(". 比如可以固定字段的顺序, 这样在序列化后的字节里面就不必包含字段名, 只要字段值就可以了, 不同类型的数据也可以做针对性的优化:")]),s._v(" "),t("p",[s._v("比如对于一个的 User 对象, 可以把它序列化成这样:")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("03 | 08 7a 68 61 6e 67 73 61 6e | 17 | 01 | zhangsan | 23 | true\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("这里解释一下这个序列化方法是怎么表示 User 对象的.")]),s._v(" "),t("p",[s._v("首先需要标识一下这个对象的类型, 这里用一个字节来表示类型, 比如用 03 表示这是一个 User 类型的对象.")]),s._v(" "),t("p",[s._v('其次约定按照 name, age, married 这个固定顺序来序列化这三个属性. 按照顺序, 第一个字段是 name, 可以不存字段名, 直接存字段值"zhangsan"就行, 由于名字的长度不固定, 用第一个字节 08 表示这个名字的长度是 8 个字节, 后面的 8 个字节就是 zhangsan.')]),s._v(" "),t("p",[s._v("第二个字段是年龄, 直接用一个字节表示就可以了, 23 的 16 进制是 17.")]),s._v(" "),t("p",[s._v("最后一个字段是婚姻状态, 用一个字节来表示, 01 表示已婚, 00 表示未婚, 这里面保存一个 01.")]),s._v(" "),t("p",[s._v("可以看到, 同样的一个 User 对象, JSON 序列化后需要 47 个字节, 这里只要 12 个字节就够了.")]),s._v(" "),t("p",[t("strong",[s._v("专用的序列化方法显然更高效, 序列化出来的字节更少, 在网络传输过程中的速度也更快. 但缺点是, 需要为每种对象类型定义专门的序列化和反序列化方法, 实现起来太复杂了, 大部分情况下是不划算的. ​")])]),s._v(" "),t("h5",{attrs:{id:"_3-小结-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-小结-5"}},[s._v("#")]),s._v(" 3.小结")]),s._v(" "),t("p",[s._v("进程之间要通过网络传输结构化的数据, 需要通过序列化和反序列化来实现结构化数据和二进制数据的双向转换. 在选择序列化实现的时候, 需要综合考虑"),t("strong",[s._v("数据可读性, 实现复杂度, 性能和信息密度")]),s._v("这四个因素.")]),s._v(" "),t("p",[s._v("大多数情况下, 选择一个高性能的通用序列化框架都可以满足要求, 在性能可以满足需求的前提下, 推荐优先选择 JSON 这种可读性好的序列化方法.")]),s._v(" "),t("p",[s._v("如果说需要超高的性能, 或者是带宽有限的情况下, 可以使用专用的序列化方法, 来提升序列化性能, 节省传输流量. 不过实现起来很复杂, 大部分情况下并不划算.")]),s._v(" "),t("h4",{attrs:{id:"传输协议-应用程序之间对话的语言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#传输协议-应用程序之间对话的语言"}},[s._v("#")]),s._v(" 传输协议: 应用程序之间对话的语言")]),s._v(" "),t("p",[s._v("应用程序之间要想互相通信, 一起配合来实现业务功能, 还需要有一套传输协议来支持.")]),s._v(" "),t("p",[t("strong",[s._v("传输协议就是应用程序之间对话的语言. ​")]),s._v("设计传输协议, 并没有太多规范和要求, 只要是通信双方的应用程序都能正确处理这个协议, 并且没有歧义就好了.")]),s._v(" "),t("p",[s._v("本节来说一下设计高性能传输协议的一些方法和技巧.")]),s._v(" "),t("h5",{attrs:{id:"_1-如何断句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-如何断句"}},[s._v("#")]),s._v(" 1.如何断句?")]),s._v(" "),t("p",[s._v('既然传输协议也是一种语言, 那么在应用程序之间"通话"的过程中, 与人类用自然语言沟通有很多相似之处, 但是需要处理的问题却又不同.')]),s._v(" "),t("p",[s._v('现代语言, 无论是汉语还是英语, 都是通过标点符号来分隔句子的, 这个叫"断句". 古代汉语是没有标点符号的, 断句全靠上下文, 但这种'),t("strong",[s._v("断句方式有的时候会出现歧义")]),s._v(', 比如很著名的那个段子"下雨天留客天天留我不留", 不同的断句方式, 意思完全不一样.')]),s._v(" "),t("p",[s._v("在传输数据的的时候, "),t("strong",[s._v("首先要解决的就是断句问题")]),s._v(". 对于传输层来说, 收到的数据是什么样的? 就是一段一段的字节, 但是因为网络的不确定性, 收到的分段并不一定是发出去的分段. 比如发送的数据是这样的:")]),s._v(" "),t("blockquote",[t("p",[s._v("下雨天 留客天 天留 我不留")])]),s._v(" "),t("p",[s._v("经过网络传输, 可能就变成这样了:")]),s._v(" "),t("blockquote",[t("p",[s._v("下雨天 留客天 天留我不 留")])]),s._v(" "),t("p",[s._v("意思完全变了. 所以靠时间停顿来断句是不靠谱的.")]),s._v(" "),t("p",[s._v('那在协议中也加上"标点符号"不就行了? 而且并不需要像自然语言中那么多种标点符号, 只需要定义一个分隔符就可以了.')]),s._v(" "),t("p",[s._v("这个办法是可行的, 也有很多传输协议采用这种方法, 比如 HTTP1 协议, 它的"),t("strong",[s._v("分隔符是换行(\\r\\n)")]),s._v(". 但是这个办法有一个问题比较难处理, 在自然语言中, 标点符号是专用的, 它没有别的含义, 和文字是有天然区分的.")]),s._v(" "),t("p",[s._v("在数据传输的过程中, "),t("strong",[s._v("无论定义什么字符作为分隔符, 理论上它都有可能会在传输的数据中出现")]),s._v('. 为了区分"数据内的分隔符"和真正的分隔符, '),t("strong",[s._v("必须得在发送数据阶段, 加上分隔符之前, 把数据内的分隔符做转义, 收到数据之后再转义回来")]),s._v(". 这是个比较麻烦的过程, 还要损失一些性能.")]),s._v(" "),t("p",[s._v("更加实用的方法是在每句话前面加一个表示这句话"),t("strong",[s._v("长度的数字")]),s._v(", 收到数据的时候, 按照长度来读取就可以了. 比如:")]),s._v(" "),t("blockquote",[t("p",[s._v("03 下雨天 03 留客天 02 天留 03 我不留")])]),s._v(" "),t("p",[s._v("这里面固定使用 2 位数字来存放长度, 每句话最长可以支持到 99 个字. 接收后的处理就比较简单了, 先读取 2 位数字 03, 知道接下来的 3 个字是第一句话, 那我们接下来就等着这 3 个字都收到了, 就可以作为第一句话来处理了, 接下来再按照这个方法来读第二句话, 第三句话.")]),s._v(" "),t("p",[t("strong",[s._v("这种预置长度的方法就很好解决了断句的问题, 并且它实现起来要比分隔符的方法简单很多, 性能也更好, 是目前普遍采用的一种分隔数据的方法. ​")])]),s._v(" "),t("p",[s._v("掌握了断句的方法之后, 再来看一下实现高性能协议还需要解决什么问题.")]),s._v(" "),t("h5",{attrs:{id:"_2-用双工收发协议提升吞吐量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-用双工收发协议提升吞吐量"}},[s._v("#")]),s._v(" 2.用双工收发协议提升吞吐量")]),s._v(" "),t("p",[s._v("HTTP1 协议, 就是这样一种单工协议, 客户端与服务端建立一个连接后, 客户端发送一个请求, 直到服务端返回响应或者请求超时, 这段时间内, 这个连接通道上是不能再发送其他请求的. 这种单工通信的效率是比较低的, 很多浏览器和 APP 为了解决这个问题, 只能同时在服务端和客户端之间创建多个连接, 这也是没有办法的办法.")]),s._v(" "),t("p",[s._v("由于 TCP 连接它是一个全双工的通道, 因此可以同时进行数据的双向收发, 互相是不会受到任何影响的. "),t("strong",[s._v("要提高吞吐量, 应用层的协议也必须支持双工通信")]),s._v(".")]),s._v(" "),t("p",[s._v("发送请求的时候, 给每个请求加一个序号, 这个序号在本次会话内保证唯一, 然后在响应中带上请求的序号, 这样就可以保证请求和响应的顺序.")]),s._v(" "),t("h4",{attrs:{id:"内存管理-如何避免内存溢出和频繁的垃圾回收"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内存管理-如何避免内存溢出和频繁的垃圾回收"}},[s._v("#")]),s._v(" 内存管理:如何避免内存溢出和频繁的垃圾回收?")]),s._v(" "),t("p",[s._v("现代的编程语言, 像 Java, Go 语言等, 采用的都是自动内存管理机制. 在编写代码的时候, 不需要显式去申请和释放内存. 当创建一个新对象的时候, 系统会自动分配一块内存用于存放新创建的对象, 对象使用完毕后, 系统会自动择机收回这块内存, 完全不需要开发者干预.")]),s._v(" "),t("p",[s._v("对于开发者来说, 这种自动内存管理的机制, 显然是非常方便的, 不仅极大降低了开发难度, 提升了开发效率, 更重要的是, 它完美地解决了内存泄漏的问题. 当年, Java 语言能够迅速普及和流行, 超越 C 和 C++, 自动内存管理机制是非常重要的一个因素. 但是它也会带来一些问题, 什么问题呢? 这就要从它的实现原理中来分析.")]),s._v(" "),t("h5",{attrs:{id:"_1-自动内存管理机制的实现原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-自动内存管理机制的实现原理"}},[s._v("#")]),s._v(" 1.自动内存管理机制的实现原理")]),s._v(" "),t("p",[s._v("做内存管理, 主要需要考虑"),t("strong",[s._v("申请内存和内存回收")]),s._v("这两个部分工作.")]),s._v(" "),t("p",[s._v("申请内存的逻辑非常简单:")]),s._v(" "),t("ol",[t("li",[s._v("计算要创建对象所需要占用的内存大小;")]),s._v(" "),t("li",[s._v("在内存中找一块儿连续并且是空闲的内存空间, 标记为已占用;")]),s._v(" "),t("li",[s._v("把申请的内存地址绑定到对象的引用上, 这时候对象就可以使用了.")])]),s._v(" "),t("p",[s._v("内存回收的过程就非常复杂了, 总体上, 内存回收需要做这样两件事: 先是要找出所有可以回收的对象, 将对应的内存标记为空闲, 然后还需要整理内存碎片.")]),s._v(" "),t("p",[s._v('如何找出可以回收的对象呢? 现代的 GC 算法大多采用的是 "标记-清除" 算法或是它的变种算法, 这种算法分为标记和清除两个阶段:')]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("标记阶段")]),s._v(": 从 GC Root 开始, 可以简单地把 GC Root 理解为程序入口的那个对象, 标记所有可达的对象, 因为程序中所有在用的对象一定都会被这个 GC Root 对象直接或者间接引用.")]),s._v(" "),t("li",[t("strong",[s._v("清除阶段")]),s._v(": 遍历所有对象, 找出所有没有标记的对象. 这些没有标记的对象都是可以被回收的, 清除这些对象, 释放对应的内存即可.")])]),s._v(" "),t("p",[s._v("这个算法有一个最大问题就是, 在执行标记和清除过程中, 必须"),t("strong",[s._v("把进程暂停")]),s._v(", 否则计算的结果就是不准确的. 这也就是为什么发生垃圾回收的时候程序会卡死的原因. 后续产生了许多变种的算法, 这些算法更加复杂, 可以"),t("strong",[s._v("减少一些进程暂停的时间")]),s._v(", 但都不能完全避免暂停进程.")]),s._v(" "),t("p",[s._v("完成对象回收后, 还需要整理内存碎片. 什么是内存碎片呢? 举个例子:")]),s._v(" "),t("p",[s._v("假设内存只有 10 个字节, 一开始这 10 个字节都是空闲的. 这里初始化了 5 个 Short 类型的对象, 每个 Short 占 2 个字节, 正好占满 10 个字节的内存空间. 程序运行一段时间后, 其中的 2 个 Short 对象用完并被回收了. 这时候, 如果需要创建一个占 4 个字节的 Int 对象, 是否可以创建成功呢?")]),s._v(" "),t("p",[s._v("答案是, 不一定. 刚刚回收了 2 个 Short, 正好是 4 个字节, 但是创建一个 Int 对象需要连续 4 个字节的内存空间, 2 段 2 个字节的内存, "),t("strong",[s._v("并不一定就等于一段连续的 4 字节内存")]),s._v(". 如果这两段 2 字节的空闲内存不连续, 就无法创建 Int 对象, 这就是内存碎片问题.")]),s._v(" "),t("p",[s._v("所以, "),t("strong",[s._v("垃圾回收完成后, 还需要进行内存碎片整理, 将不连续的空闲内存移动到一起, 以便空出足够的连续内存空间供后续使用. ​")]),s._v("和垃圾回收算法一样, 内存碎片整理也有很多非常复杂的实现方法, 但由于整理过程中需要移动内存中的数据, 也都不可避免地需要"),t("strong",[s._v("暂停进程")]),s._v(".")]),s._v(" "),t("p",[s._v("虽然自动内存管理机制有效地解决了内存泄漏问题, 带来的代价是执行垃圾回收时会暂停进程, 如果暂停的时间过长, 程序看起来就像卡死了一样.")]),s._v(" "),t("h5",{attrs:{id:"_2-为什么在高并发下程序会卡死"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-为什么在高并发下程序会卡死"}},[s._v("#")]),s._v(" 2.为什么在高并发下程序会卡死?")]),s._v(" "),t("p",[s._v("在理解了自动内存管理的基本原理后, 就可以分析为什么在高并发场景下, 这种自动内存管理的机制会更容易触发进程暂停.")]),s._v(" "),t("p",[s._v("一般来说, 微服务在收到一个请求后, 执行一段业务逻辑, 然后返回响应. 这个过程中, 会创建一些对象, 比如说请求对象, 响应对象和处理中间业务逻辑中需要使用的一些对象等等. 随着这个请求响应的处理流程结束, 前面创建的这些对象也就都没有用了, 它们将会在下一次垃圾回收过程中被释放.")]),s._v(" "),t("p",[s._v("需要注意的是, 直到下一次垃圾回收之前, "),t("strong",[s._v("这些已经没有用的对象会一直占用内存")]),s._v(".")]),s._v(" "),t("p",[s._v("那么虚拟机是如何决定什么时候来执行垃圾回收呢? 这里面的策略非常复杂, 也有很多不同的实现, 但是无论是什么策略, 如果内存不够用了, 那肯定要执行一次垃圾回收的, 否则程序就没法继续运行了.")]),s._v(" "),t("p",[s._v("在低并发情况下, 单位时间内需要处理的请求不多, 创建的对象数量不会很多, 自动垃圾回收机制可以很好地发挥作用, 它可以选择在系统不太忙的时候来执行垃圾回收, 每次垃圾回收的对象数量也不多, 相应的, 程序暂停的时间非常短, 短到都无法感知到这个暂停. 这是一个良性的循环.")]),s._v(" "),t("p",[s._v("在高并发的情况下, 一切都变得不一样了.")]),s._v(" "),t("p",[s._v("这时候系统会非常繁忙, 短时间内就会创建大量的对象, 这些对象将会迅速占满内存, 这时候由于没有内存可以使用了, 垃圾回收被迫开始启动, 并且这次被迫执行的垃圾回收面临的是占满整个内存的海量对象, 它执行的时间也会比较长, 相应的这个回收过程会导致进程长时间暂停.")]),s._v(" "),t("p",[s._v("进程长时间暂停, "),t("strong",[s._v("又会导致大量的请求积压等待处理")]),s._v(", 垃圾回收刚刚结束, 更多的请求立刻涌进来, 迅速占满内存, 再次被迫执行垃圾回收, 进入了一个恶性循环. 如果垃圾回收的速度跟不上创建对象的速度, 还可能会产生内存溢出的现象.")]),s._v(" "),t("p",[s._v("于是就出现了前面提到的情况: 一到大促, 大量请求过来, 服务就卡死了.")]),s._v(" "),t("h5",{attrs:{id:"_3-高并发下的内存管理技巧"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-高并发下的内存管理技巧"}},[s._v("#")]),s._v(" 3.高并发下的内存管理技巧")]),s._v(" "),t("p",[s._v("对于开发者来说, 垃圾回收是不可控的, 而且是无法避免的. 但可以通过一些方法来降低垃圾回收的频率, 减少进程暂停的时长.")]),s._v(" "),t("p",[s._v("只有使用过被丢弃的对象才是垃圾回收的目标, 所以需要想办法在处理大量请求的同时, 尽量少的产生这种一次性对象.")]),s._v(" "),t("p",[s._v("最有效的方法就是, 优化代码中处理请求的业务逻辑, "),t("strong",[s._v("尽量少的创建一次性对象")]),s._v(", 特别是占用内存较大的对象. 比如说可以把收到请求的 Request 对象在业务流程中一直传递下去, 而不是每执行一个步骤, 就创建一个内容和 Request 对象差不多的新对象.")]),s._v(" "),t("p",[s._v("对于需要"),t("strong",[s._v("频繁使用, 占用内存较大的一次性对象")]),s._v(", 可以"),t("strong",[s._v("考虑自行回收并重用")]),s._v("这些对象. 实现的方法是这样的: 可以为这些对象建立一个"),t("strong",[s._v("对象池")]),s._v(". 收到请求后, 在对象池内申请一个对象, 使用完后再放回到对象池中, 这样就可以反复地重用这些对象, 非常有效地避免频繁触发垃圾回收.")]),s._v(" "),t("p",[s._v("如果可能的话, 使用更大内存的服务器, 也可以非常有效地缓解这个问题.")]),s._v(" "),t("p",[s._v("当然, 要从根本上来解决这个问题, 办法只有一个, 那就是绕开自动垃圾回收机制, 自己来实现内存管理. 但是自行管理内存将会带来非常多的问题, 比如说极大增加了程序的复杂度, 可能会引起内存泄漏等等.")]),s._v(" "),t("p",[s._v("流计算平台 Flink, 就是自行实现了一套内存管理机制, 一定程度上缓解了处理大量数据时垃圾回收的问题, 但是也带来了一些问题和 Bug, 总体看来, 效果并不是特别好. 因此一般情况下并不推荐你这样做, 具体还是要根据应用情况, 综合权衡做出一个相对最优的选择.")]),s._v(" "),t("h5",{attrs:{id:"_4-小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-小结"}},[s._v("#")]),s._v(" 4.小结")]),s._v(" "),t("p",[s._v("现代的编程语言, 大多采用自动内存管理机制, 虚拟机会不定期执行垃圾回收, 自动释放不再使用的内存, 但是执行垃圾回收的过程会导致进程暂停.")]),s._v(" "),t("p",[s._v("在高并发的场景下, 会产生大量的待回收的对象, 需要频繁地执行垃圾回收, 导致程序长时间暂停, 使得程序看起来就像卡死了一样. 为了缓解这个问题, 需要尽量少地使用一次性对象, 对于需要频繁使用, 占用内存较大的一次性对象, 可以考虑自行回收并重用这些对象, 来减轻垃圾回收的压力.")]),s._v(" "),t("h4",{attrs:{id:"kafka如何实现高性能io"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#kafka如何实现高性能io"}},[s._v("#")]),s._v(" Kafka如何实现高性能IO?")]),s._v(" "),t("p",[s._v("Apache Kafka 是一个高性能的消息队列, 在众多消息队列产品中, Kafka 的性能绝对是处于第一梯队的. Kafka 是如何做到这么高的性能的?")]),s._v(" "),t("p",[s._v("前面几节一直围绕着同一个主题: 怎么开发一个高性能的网络应用程序. 其中提到了像全异步化的线程模型, 高性能的异步网络传输, 自定义的私有传输协议和序列化, 反序列化等等, 这些方法和优化技巧, 都可以在 Kafka 的源代码中找到对应的实现.")]),s._v(" "),t("h5",{attrs:{id:"_1-使用批量消息提升服务端处理能力"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-使用批量消息提升服务端处理能力"}},[s._v("#")]),s._v(" 1.使用批量消息提升服务端处理能力")]),s._v(" "),t("p",[t("strong",[s._v("批量处理是一种非常有效的提升系统吞吐量的方法")]),s._v(". 在 Kafka 内部, 消息都是"),t("strong",[s._v('以"批"为单位')]),s._v("处理的. 一批消息从发送端到接收端, 是如何在 Kafka 中流转的呢?")]),s._v(" "),t("p",[s._v("先来看发送端, 也就是 Producer 这一端.")]),s._v(" "),t("p",[s._v("在 Kafka 的客户端 SDK 中, Kafka 的 Producer 只提供了"),t("strong",[s._v("单条发送的 send() 方法")]),s._v(", 并没有提供任何批量发送的接口. 原因是 Kafka 根本就没有提供单条发送的功能, 虽然它提供的 API 每次只能发送一条消息, 但实际上 Kafka 的客户端 SDK 在实现消息发送逻辑的时候, 采用了"),t("strong",[s._v("异步批量发送的机制")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("当调用 send() 方法发送一条消息之后, 无论是同步发送还是异步发送, Kafka 都")]),s._v("​**==不会立即就把这条消息发送出去=="),t("strong",[s._v("​")]),s._v(". 它会先把这条消息, 存放在内存中缓存起来, 然后选择合适的时机把缓存中的所有消息组成一批, 一次性发给 Broker. 简单地说就是"),t("strong",[s._v("​")]),s._v("==攒一波一起发=="),t("strong",[s._v("​")]),s._v(".**")]),s._v(" "),t("p",[s._v("在 Kafka 的服务端, 也就是 Broker 这一端, 又是如何处理这一批一批的消息呢?")]),s._v(" "),t("p",[s._v("在服务端, Kafka 不会把一批消息再还原成多条消息, 再一条一条地处理, 这样太慢了. Kafka 这块儿处理的非常聪明, "),t("strong",[s._v('每批消息都会被当做一个"批消息"来处理')]),s._v(". 也就是说, 在 Broker 整个处理流程中, 无论是写入磁盘, 从磁盘读出来, 还是复制到其他副本这些流程中, "),t("strong",[s._v('批消息都不会被解开, 一直是作为一条"批消息"来进行处理的. ​')])]),s._v(" "),t("p",[s._v("在消费时, "),t("strong",[s._v("消息同样是以批为单位进行传递")]),s._v("的, Consumer 从 Broker 拉到一批消息后, "),t("strong",[s._v("在客户端把批消息解开")]),s._v(", 再一条一条交给用户代码处理.")]),s._v(" "),t("p",[s._v('比如在客户端发送 30 条消息, 在业务程序看来, 是发送了 30 条消息, 而对于 Kafka 的 Broker 来说, 它其实就是处理了 1 条包含 30 条消息的"批消息"而已. 显然处理 1 次请求要比处理 30 次请求要快得多.')]),s._v(" "),t("p",[t("strong",[s._v("==构建批消息和解开批消息分别在发送端和消费端的客户端完成=="),t("strong",[s._v("​")]),s._v(", 不仅减轻了 Broker 的压力, 最重要的是减少了 Broker 处理请求的次数, 提升了总体的处理能力. ​")])]),s._v(" "),t("p",[s._v("这就是 Kafka 用批量消息提升性能的方法.")]),s._v(" "),t("h5",{attrs:{id:"_2-使用顺序读写提升磁盘io性能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-使用顺序读写提升磁盘io性能"}},[s._v("#")]),s._v(" 2.使用顺序读写提升磁盘IO性能")]),s._v(" "),t("p",[s._v("相比于网络传输和内存, 磁盘 IO 的速度是比较慢的. 对于消息队列的服务端来说, 性能的瓶颈主要在磁盘 IO 这一块. 下面看看 Kafka 在磁盘 IO 这块儿做了哪些优化.")]),s._v(" "),t("p",[s._v("对于磁盘来说, 它有一个特性, 就是**==顺序读写的性能要远远好于随机读写==**. 在 SSD(固态硬盘)上, 顺序读写的性能要比随机读写快几倍, 如果是机械硬盘, 这个差距会达到几十倍. 为什么呢?")]),s._v(" "),t("p",[s._v("操作系统每次从磁盘读写数据的时候, 需要先寻址, 也就是先要找到数据在磁盘上的物理位置, 然后再进行数据读写. 如果是机械硬盘, 这个寻址需要比较长的时间, 因为它要移动磁头, 这是个机械运动.")]),s._v(" "),t("p",[t("strong",[s._v("顺序读写相比随机读写省去了大部分的寻址时间, 它只要寻址一次, 就可以连续地读写下去, 所以说, 性能要比随机读写要好很多. ​")])]),s._v(" "),t("p",[s._v("Kafka 就是充分利用了磁盘的这个特性. 它的存储设计非常简单, "),t("strong",[s._v("对于每个分区, 它把从 Producer 收到的消息, 顺序地写入对应的 log 文件中, 一个文件写满了, 就开启一个新的文件这样顺序写下去. 消费的时候, 也是从某个全局的位置开始, 也就是某一个 log 文件中的某个位置开始, 顺序地把消息读出来")]),s._v(".")]),s._v(" "),t("p",[s._v("这样一个简单的设计, 充分利用了顺序读写这个特性, 极大提升了 Kafka 在使用磁盘时的 IO 性能.")]),s._v(" "),t("h5",{attrs:{id:"_3-利用pagecache加速消息读写"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-利用pagecache加速消息读写"}},[s._v("#")]),s._v(" 3.利用PageCache加速消息读写")]),s._v(" "),t("p",[s._v("接下来说一下 Kafka 是如何实现缓存的.")]),s._v(" "),t("p",[s._v("在 Kafka 中, 它会"),t("strong",[s._v("利用 PageCache 加速消息读写")]),s._v(". PageCache 是现代操作系统都具有的一项基本特性. 通俗地说, PageCache 就是操作系统在内存中给磁盘上的文件建立的缓存. 无论使用什么语言编写的程序, 在调用系统的 API 读写文件的时候, "),t("strong",[s._v("并不会直接去读写磁盘上的文件, 应用程序实际操作的都是 PageCache, 也就是文件在内存中缓存的副本")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("应用程序在写入文件的时候, 操作系统会先把数据写入到内存中的 PageCache, 然后再一批一批地写到磁盘上. 读取文件的时候, 也是从 PageCache 中来读取数据.")]),s._v(" 这时候会出现两种可能情况.")]),s._v(" "),t("p",[s._v("一种是 PageCache 中有数据, 那就直接读取, 这样就节省了从磁盘上读取数据的时间; 另一种情况是, PageCache 中没有数据, 这时候操作系统会引发一个"),t("strong",[s._v("缺页中断")]),s._v(", 应用程序的读取线程会被阻塞, 操作系统把数据从文件中"),t("strong",[s._v("复制")]),s._v("到 PageCache 中, 然后应用程序再从 PageCache 中继续把数据读出来, 这时会真正读一次磁盘上的文件, 这个"),t("strong",[s._v("读的过程就会比较慢")]),s._v(".")]),s._v(" "),t("p",[s._v("用户的应用程序在使用完某块 PageCache 后, 操作系统并不会立刻就清除这个 PageCache, 而是尽可能地"),t("strong",[s._v("利用空闲的物理内存保存这些 PageCache")]),s._v(", 除非系统内存不够用, 操作系统才会清理掉一部分 PageCache. 清理的策略一般是 "),t("strong",[s._v("LRU")]),s._v(" 或它的变种算法, 它保留 PageCache 的逻辑是: 优先保留最近一段时间最常使用的那些 PageCache.")]),s._v(" "),t("p",[t("strong",[s._v('Kafka 在读写消息文件的时候, 充分利用了 PageCache 的特性. 一般来说, 消息刚刚写入到服务端就会被消费, 按照 LRU 的"优先清除最近最少使用的页"这种策略, 读取的时候, 对于这种刚刚写入的 PageCache, 命中的几率会非常高. 也就是说, 大部分情况下, 消费读消息都会命中 PageCache, 带来的好处有两个: 一个是读取的速度会非常快, 另外一个是, 给写入消息让出磁盘的 IO 资源, 间接也提升了写入的性能.')])]),s._v(" "),t("h5",{attrs:{id:"_4-zerocopy-零拷贝技术"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-zerocopy-零拷贝技术"}},[s._v("#")]),s._v(" 4.ZeroCopy:零拷贝技术")]),s._v(" "),t("p",[s._v('Kafka 的服务端在消费过程中, 还使用了一种"'),t("strong",[s._v("零拷贝")]),s._v('"的操作系统特性来进一步提升消费的性能.')]),s._v(" "),t("p",[s._v("在服务端处理消费的大致逻辑是这样的:")]),s._v(" "),t("ul",[t("li",[s._v("首先从文件中找到消息数据, 读到内存中;")]),s._v(" "),t("li",[s._v("然后把消息通过网络发给客户端.")])]),s._v(" "),t("p",[s._v("这个过程中, 数据实际上做了 2 次或者 3 次复制:")]),s._v(" "),t("ol",[t("li",[s._v("从文件复制数据到 PageCache 中, 如果命中 PageCache, 这一步可以省掉;")]),s._v(" "),t("li",[s._v("从 PageCache 复制到应用程序的内存空间中, 也就是可以操作的对象所在的内存;")]),s._v(" "),t("li",[s._v("从应用程序的内存空间复制到 Socket 的缓冲区, 这个过程就是调用网络应用框架的 API 发送数据的过程.")])]),s._v(" "),t("p",[s._v("Kafka 使用零拷贝技术可以把这个复制次数减少一次, 上面的 2, 3 步骤两次复制合并成一次复制. "),t("strong",[s._v("直接从 PageCache 中把数据复制到 Socket 缓冲区中, 这样不仅减少一次数据复制, 更重要的是, 由于不用把数据复制到用户内存空间, DMA 控制器可以直接完成数据复制, 不需要 CPU 参与, 速度更快")]),s._v(".")]),s._v(" "),t("p",[s._v("下面是这个零拷贝对应的系统调用:")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("<sys/socket.h>")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ssize_t")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sendfile")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" out_fd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" in_fd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("off_t")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("offset"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("size_t")]),s._v(" count"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("它的前两个参数分别是"),t("strong",[s._v("目的端和源端的文件描述符")]),s._v(", 后面两个参数是源端的偏移量和复制数据的长度, 返回值是实际复制数据的长度.")]),s._v(" "),t("p",[t("strong",[s._v("如果遇到这种")]),s._v("​**==从文件读出数据后再通过网络发送出去的场景, 并且这个过程中不需要对这些数据进行处理=="),t("strong",[s._v("​")]),s._v(", 那一定要使用这个零拷贝的方法, 可以有效地提升性能.**")]),s._v(" "),t("h5",{attrs:{id:"_5-小结-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-小结-2"}},[s._v("#")]),s._v(" 5.小结")]),s._v(" "),t("p",[s._v("本节总结了 Kafka 的高性能设计中的几个关键的技术点:")]),s._v(" "),t("ul",[t("li",[s._v("使用批量处理的方式来提升系统吞吐能力.")]),s._v(" "),t("li",[s._v("基于磁盘文件高性能顺序读写的特性来设计的存储结构.")]),s._v(" "),t("li",[s._v("利用操作系统的 PageCache 来缓存数据, 减少 IO 并提升读性能.")]),s._v(" "),t("li",[s._v("使用零拷贝技术加速消费流程.")])]),s._v(" "),t("p",[s._v("这些优化的方法和技术, 同样可以用在其他适合的场景和应用程序中.")]),s._v(" "),t("h4",{attrs:{id:"缓存策略-如何使用缓存来减少磁盘io"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存策略-如何使用缓存来减少磁盘io"}},[s._v("#")]),s._v(" 缓存策略:如何使用缓存来减少磁盘IO?")]),s._v(" "),t("p",[t("strong",[s._v("现代的消息队列, 都使用磁盘文件来存储消息")]),s._v(". 因为磁盘是一个持久化的存储, 即使服务器掉电也不会丢失数据. 绝大多数用于生产系统的服务器, 都会使用多块儿磁盘组成磁盘阵列, 这样不仅服务器掉电不会丢失数据, 即使其中的一块儿磁盘发生故障, 也可以把数据从其他磁盘中恢复出来.")]),s._v(" "),t("p",[s._v("使用磁盘的另外一个原因是, 磁盘很便宜, 这样就可以用比较低的成本, 来存储海量的消息. 所以, 不仅仅是消息队列, 几乎所有的存储系统的数据, 都需要保存到磁盘上.")]),s._v(" "),t("p",[s._v("但是磁盘有一个致命的问题, 就是"),t("strong",[s._v("读写速度很慢")]),s._v(". 它有多慢呢? 一般来说 SSD(固态硬盘)每秒钟可以读写几千次, 如果程序在处理业务请求的时候直接来读写磁盘, 假设处理每次请求需要读写 3～5 次, 即使每次请求的数据量不大, 程序最多每秒也就能处理 1000 次左右的请求.")]),s._v(" "),t("p",[s._v("而内存的随机读写速度是磁盘的 10 万倍! 所以"),t("strong",[s._v("使用内存作为缓存来加速应用程序的访问速度, 是几乎所有高性能系统都会采用的方法. ​")])]),s._v(" "),t("p",[s._v("缓存的思想很简单, 就是"),t("strong",[s._v("把低速存储的数据, 复制一份副本放到高速的存储中, 用来加速数据的访问")]),s._v(". 缓存使用起来也非常简单, 很多同学在做一些业务系统的时候, 在一些执行比较慢的方法上加上一个 @Cacheable 的注解, 就可以使用缓存来提升它的访问性能了.")]),s._v(" "),t("p",[s._v("但是你是否考虑过, 采用 @Cacheable 注解的方式缓存的命中率如何? 或者说怎样才能提高缓存的命中率? 缓存是否总能返回最新的数据? 如果缓存返回了过期的数据该怎么办? 接下来, 一起来通过学习设计, 使用缓存的最佳实践, 找到这些问题的答案.")]),s._v(" "),t("h5",{attrs:{id:"_1-选择只读缓存还是读写缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-选择只读缓存还是读写缓存"}},[s._v("#")]),s._v(" 1.选择只读缓存还是读写缓存?")]),s._v(" "),t("p",[s._v("使用缓存, 首先就会面临选择"),t("strong",[s._v("读缓存还是读写缓存")]),s._v("的问题. 他们唯一的区别就是, "),t("strong",[s._v("在更新数据的时候, 是否经过缓存")]),s._v(".")]),s._v(" "),t("p",[s._v("之前讲到 Kafka 使用的 PageCache, 它就是一个非常典型的"),t("strong",[s._v("读写缓存")]),s._v(". 操作系统会利用系统空闲的物理内存来给文件读写做缓存, 这个缓存叫做 PageCache. 应用程序在写文件的时候, 操作系统会先把数据写入到 PageCache 中, 数据在成功写到 PageCache 之后, 对于用户代码来说, 写入就结束了.")]),s._v(" "),t("p",[s._v("然后, 操作系统"),t("strong",[s._v("再异步地把数据更新到磁盘的文件中")]),s._v(". 应用程序在读文件的时候, 操作系统也是先尝试从 PageCache 中寻找数据, 如果找到就直接返回数据, 找不到会触发一个缺页中断, 然后操作系统把数据从文件读取到 PageCache 中, 再返回给应用程序.")]),s._v(" "),t("p",[s._v("可以看到, 在数据写到 PageCache 中后, 它并不是同时就写到磁盘上了, 这中间是有一个"),t("strong",[s._v("延迟")]),s._v("的. 操作系统可以保证, 即使是应用程序意外退出了, 操作系统也会把这部分数据同步到磁盘上. 但是, 如果服务器突然掉电了, 这部分数据就丢失了.")]),s._v(" "),t("p",[s._v("因此"),t("strong",[s._v("读写缓存的这种设计, 它天然就是不可靠的, 是一种牺牲数据一致性换取性能的设计. ​")]),s._v("当然应用程序可以调用 sync 等系统调用, 强制操作系统立即把缓存数据同步到磁盘文件中去, 但是这个同步的过程是很慢的, 也就失去了缓存的意义.")]),s._v(" "),t("p",[s._v("另外写缓存的实现是非常复杂的. 应用程序不停地更新 PageCache 中的数据, 操作系统需要记录哪些数据有变化, 同时还要在另外一个线程中, 把缓存中变化的数据更新到磁盘文件中. 在提供并发读写的同时来异步更新数据, 这个过程中要保证数据的一致性, 并且有非常好的性能, 实现这些真不是一件容易的事儿.")]),s._v(" "),t("p",[t("strong",[s._v("所以一般情况下不推荐使用读写缓存.")])]),s._v(" "),t("p",[s._v("那为什么 Kafka 可以使用 PageCache 来提升它的性能呢? 这是由消息队列的一些特点决定的.")]),s._v(" "),t("p",[s._v("首先, 消息队列它的读写比例大致是 1: 1, 因为大部分用消息队列都是一收一发这样使用. 这种读写比例, 只读缓存既无法给写加速, 读的加速效果也有限, 并不能提升多少性能.")]),s._v(" "),t("p",[s._v("另外, Kafka 它并不是只靠磁盘来保证数据的可靠性, 它更依赖的是, "),t("strong",[s._v("在不同节点上的多副本")]),s._v("来解决数据可靠性问题, 这样即使某个服务器掉电丢失一部分文件内容, 它也可以从其他节点上找到正确的数据, 不会丢消息.")]),s._v(" "),t("p",[s._v("而且, PageCache 这个读写缓存是操作系统实现的, Kafka 只要按照正确的姿势来使用就好了, 不涉及到实现复杂度的问题. 所以 Kafka 其实在设计上, 充分利用了 PageCache 这种读写缓存的优势, 并且规避了 PageCache 的一些劣势, 达到了一个非常好的效果.")]),s._v(" "),t("p",[t("strong",[s._v("和 Kafka 一样, 大部分其他的消息队列, 同样也会采用读写缓存来加速消息写入的过程")]),s._v(", 只是实现的方式都不一样.")]),s._v(" "),t("p",[s._v("不同于消息队列, 日常开发的大部分业务类应用程序, 读写比都是严重不均衡的, 一般读的数据的频次会都会远高于写数据的频次. 从经验值来看, 读次数一般都是写次数的几倍到几十倍. 这种情况下, 使用"),t("strong",[s._v("只读缓存")]),s._v("来加速系统才是非常明智的选择.")]),s._v(" "),t("h5",{attrs:{id:"_2-保持缓存数据新鲜"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-保持缓存数据新鲜"}},[s._v("#")]),s._v(" 2.保持缓存数据新鲜")]),s._v(" "),t("p",[s._v("接下来看一下, 在构建一个只读缓存时, 应该侧重考虑哪些问题.")]),s._v(" "),t("p",[s._v("对于只读缓存来说, "),t("strong",[s._v("缓存中的数据来源只有一个途径, 就是从磁盘上来")]),s._v(". 当数据需要更新的时候, 磁盘中的数据和缓存中的副本都需要进行更新. 在分布式系统中, 除非是使用事务或者一些分布式一致性算法来保证数据一致性, 否则由于节点宕机, 网络传输故障等情况的存在, 并不能保证缓存中的数据和磁盘中的数据是完全一致的.")]),s._v(" "),t("p",[t("strong",[s._v("如果出现数据不一致的情况, 数据一定是以磁盘上的那份拷贝为准. 因此需要解决的问题就是, 尽量让缓存中的数据与磁盘上的数据保持同步.")])]),s._v(" "),t("p",[s._v("那选择什么时候来更新缓存中的数据呢? 比较自然的想法是, 更新磁盘中数据的同时, 更新一下缓存中的数据不就可以了? 这个想法是没有任何问题的, 缓存中的数据会一直保持最新. 但是在并发的环境中, 实现起来还是不太容易的.")]),s._v(" "),t("p",[s._v("是选择同步还是异步来更新缓存呢? 如果是同步更新, 更新磁盘成功了, 但是更新缓存失败了, 是不是要反复重试来保证更新成功? 如果多次重试都失败, 那这次更新是算成功还是失败呢? 如果是异步更新缓存, 怎么保证更新的时序?")]),s._v(" "),t("p",[s._v("比如, 先把一个文件中的某个数据设置成 0, 然后又设为 1, 这个时候文件中的数据肯定是 1, 但是缓存中的数据可不一定就是 1 了. 因为把缓存中的数据更新为 0, 和更新为 1 是两个并发的异步操作, 不一定谁会先执行.")]),s._v(" "),t("p",[s._v("这些问题都会导致缓存的数据和磁盘中的数据不一致, 而且在下次更新这条数据之前, 这个不一致的问题它是一直存在的. 当然这些问题也不是不能解决的, 比如可以使用分布式事务来解决, 只是付出的性能, 实现复杂度等代价比较大.")]),s._v(" "),t("p",[s._v("另外一种比较简单的方法就是, 定时将磁盘上的数据同步到缓存中. 一般的情况下, 每次同步时直接全量更新就可以了, 因为是在异步的线程中更新数据, 同步的速度即使慢一些也不是什么大问题. 如果缓存的数据太大, 更新速度慢到无法接受, 也可以选择增量更新, 每次只更新从上次缓存同步至今这段时间内变化的数据, 代价是实现起来会稍微有些复杂.")]),s._v(" "),t("p",[s._v("如果说, 某次同步过程中发生了错误, 等到下一个同步周期也会自动把数据纠正过来. 这种定时同步缓存的方法, 缺点是缓存更新不那么及时, 优点是实现起来非常简单, 鲁棒性非常好.")]),s._v(" "),t("p",[s._v("还有一种更简单的方法, 从来不去更新缓存中的数据, 而是给缓存中的每条数据设置一个比较短的过期时间, 数据过期以后即使它还存在缓存中, 也认为它不再有效, 需要从磁盘上再次加载这条数据, 这样就变相地实现了数据更新.")]),s._v(" "),t("p",[s._v("而像交易类的系统, 它对数据的一致性非常敏感. 比如给别人转了一笔钱, 别人查询自己余额却没有变化, 这种情况肯定是无法接受的. 对于这样的系统, 一般来说都不使用缓存或者使用提到的第一种方法, 在更新数据的时候同时来更新缓存.")]),s._v(" "),t("h5",{attrs:{id:"_3-缓存置换策略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-缓存置换策略"}},[s._v("#")]),s._v(" 3.缓存置换策略")]),s._v(" "),t("p",[s._v("在使用缓存的过程中, 除了要考虑数据一致性的问题, 还需要关注的另一个重要的问题是, 在内存有限的情况下, 要优先缓存哪些数据, 让缓存的命中率最高.")]),s._v(" "),t("p",[s._v("当应用程序要访问某些数据的时候, 如果这些数据在缓存中, 那直接访问缓存中的数据就可以了, 这次访问的速度是很快的, 这种情况称为一次缓存命中; 如果这些数据不在缓存中, 那只能去磁盘中访问数据, 就会比较慢. 显然, 缓存的命中率越高, 应用程序的总体性能就越好.")]),s._v(" "),t("p",[s._v("那用什么样的策略来选择缓存的数据, 能使得缓存的命中率尽量高一些呢?")]),s._v(" "),t("p",[s._v("如果你的系统是那种可以预测未来访问哪些数据的系统, 比如有的系统它会定期做数据同步, 每次同步的数据范围都是一样的, 像这样的系统, 缓存策略很简单, 就是要访问什么数据, 就缓存什么数据, 甚至可以做到百分之百的命中.")]),s._v(" "),t("p",[s._v("但许多系统并不能准确地预测未来会有哪些数据会被访问到, 所以只能使用一些策略来尽可能地提高缓存命中率.")]),s._v(" "),t("p",[s._v("一般来说, 都会在数据首次被访问的时候, 顺便把这条数据放到缓存中. 随着访问的数据越来越多, 总有把缓存占满的时刻, 这个时候就需要把缓存中的一些数据删除掉, 以便存放新的数据, 这个过程称为"),t("strong",[s._v("缓存置换")]),s._v(".")]),s._v(" "),t("p",[s._v("到这里问题就变成了: 当缓存满了的时候, 删除哪些数据, 才能会使缓存的命中率更高一些, 也就是采用什么置换策略的问题.")]),s._v(" "),t("p",[t("strong",[s._v("命中率最高的置换策略, 一定是根据业务逻辑, 定制化的策略. ​")]),s._v("比如如果知道某些数据已经删除了, 永远不会再被访问到, 那优先置换这些数据肯定是没问题的.")]),s._v(" "),t("p",[s._v("另外一个选择, 就是使用"),t("strong",[s._v("通用的置换算法")]),s._v(". 一个最经典也是最实用的算法就是 LRU 算法, 也叫最近最少使用算法. 这个算法它的思想是, 最近刚刚被访问的数据, 它在将来被访问的可能性也很大, 而很久都没被访问过的数据, 未来再被访问的几率也不大. 基于这个思想, "),t("strong",[s._v("LRU 的算法原理非常简单, 它总是把最长时间未被访问的数据置换出去. ​")])]),s._v(" "),t("p",[s._v("Kafka 使用的 PageCache, 是由 Linux 内核实现的, 它的置换算法的就是一种 LRU 的变种算法: "),t("strong",[s._v("LRU 2Q")]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"_4-小结-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-小结-2"}},[s._v("#")]),s._v(" 4.小结")]),s._v(" "),t("p",[s._v("本节介绍如何使用缓存来加速系统, 减少磁盘 IO. 按照读写性质, 可以分为"),t("strong",[s._v("读写缓存和只读缓存")]),s._v(", 读写缓存实现起来非常复杂, 并且只在消息队列等少数情况下适用. 只读缓存适用的范围更广, 实现起来也更简单.")]),s._v(" "),t("p",[s._v("在实现只读缓存的时候, 需要考虑的第一个问题是如何来更新缓存. 这里面有三种方法, 第一种是在更新数据的同时去更新缓存, 第二种是定期来更新全部缓存, 第三种是给缓存中的每个数据设置一个有效期, 让它自然过期以达到更新的目的. 这三种方法在更新的及时性上和实现的复杂度这两方面, 都是依次递减的, 可以按需选择.")]),s._v(" "),t("p",[s._v("对于缓存的置换策略, 最优的策略一定根据业务来设计的定制化的置换策略, 当然可以考虑 LRU 这样通用的缓存置换算法.")]),s._v(" "),t("h4",{attrs:{id:"如何正确使用锁保护共享数据-协调异步线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何正确使用锁保护共享数据-协调异步线程"}},[s._v("#")]),s._v(" 如何正确使用锁保护共享数据, 协调异步线程?")]),s._v(" "),t("p",[s._v('在消息队列中, "锁"是一个必须要使用的技术, 但是使用锁其实会降低系统的性能. 如何正确使用锁, 又需要注意哪些事项呢?')]),s._v(" "),t("p",[s._v("使用异步和并发的设计可以大幅提升程序的性能, 但为此付出的代价是, 程序比原来更加复杂了, 多线程在并行执行的时候, 带来了很多不确定性. 特别是对于一些需要多个线程并发读写的共享数据, 如果处理不好, 很可能会产出不可预期的结果.")]),s._v(" "),t("p",[s._v("锁的原理: "),t("strong",[s._v("任何时间都只能有一个线程持有锁, 只有持有锁的线程才能访问被锁保护的资源. ​")])]),s._v(" "),t("h5",{attrs:{id:"_1-避免滥用锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-避免滥用锁"}},[s._v("#")]),s._v(" 1.避免滥用锁")]),s._v(" "),t("p",[s._v("使用锁的第一条原则: "),t("strong",[s._v("如果能不用锁, 就不用锁; 如果不确定是不是应该用锁, 那也不要用锁. ​")]),s._v("为什么这么说呢? 因为虽然使用锁可以保护共享资源, 但是代价还是不小的.")]),s._v(" "),t("p",[s._v("第一, 加锁和解锁过程都是需要 CPU 时间的, 这是一个性能的损失. 另外, 使用锁就有可能导致线程等待锁, 等待锁过程中线程是阻塞的状态, 过多的锁等待会显著降低程序的性能.")]),s._v(" "),t("p",[s._v("第二, 如果对锁使用不当, 很容易造成死锁, 导致整个程序卡死, 这是非常严重的问题. 本来多线程的程序就非常难于调试, 如果再加上锁, 出现并发问题或者死锁问题, 程序将更加难调试.")]),s._v(" "),t("p",[s._v('所以在使用锁以前, 一定要非常明确这个问题必须要用一把锁来解决. 切忌看到一个共享数据, 也搞不清它在并发环境中会不会出现争用问题, 就"为了保险, 给它加个锁吧." '),t("strong",[s._v("千万不能有这种不负责任的想法, 否则将会付出惨痛的代价! 只有在并发环境中, 共享资源不支持并发访问, 或者说并发访问共享资源会导致系统错误的情况下, 才需要使用锁. ​")])]),s._v(" "),t("h5",{attrs:{id:"_2-锁的用法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-锁的用法"}},[s._v("#")]),s._v(" 2.锁的用法")]),s._v(" "),t("p",[s._v("锁的用法一般是这样的:")]),s._v(" "),t("ol",[t("li",[s._v("在访问共享资源之前, 先获取锁.")]),s._v(" "),t("li",[s._v("如果获取锁成功, 就可以访问共享资源了.")]),s._v(" "),t("li",[s._v("最后需要释放锁, 以便其他线程继续访问共享资源.")])]),s._v(" "),t("p",[s._v("Java 中使用锁的例子:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Lock")]),s._v(" lock "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ReentrantLock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("visitShareResWithLock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  lock"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("lock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 在这里安全的访问共享资源")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("finally")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    lock"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("unlock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[s._v("也可以使用 synchronized 关键字, 它的效果和锁是一样的:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" lock "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("visitShareResWithLock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("lock"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 在这里安全的访问共享资源")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("使用锁的时候, 需要注意几个问题:")]),s._v(" "),t("p",[s._v("最重要的问题就是, "),t("strong",[s._v("使用完锁, 一定要释放它")]),s._v(". 比较容易出现状况的地方是, 很多语言都有异常机制, 当抛出异常的时候, 不再执行后面的代码. 如果在访问共享资源时抛出异常, 那后面释放锁的代码就不会被执行, 这样锁就一直无法释放, 形成死锁. 所以要考虑到代码可能走到的所有正常和异常的分支, 确保所有情况下, 锁都能被释放.")]),s._v(" "),t("p",[s._v("有些语言提供了 try-with 的机制, 不需要显式地获取和释放锁, 可以简化编程, 有效避免这种问题, 推荐使用.")]),s._v(" "),t("p",[s._v("比如在 Python 中:")]),s._v(" "),t("div",{staticClass:"language-python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[s._v("lock "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" threading"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("RLock"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("visitShareResWithLock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" lock"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 注意缩进")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在这里安全的访问共享资源")]),s._v("\n  \n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 锁会在 with 代码段执行完成后自动释放")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("h5",{attrs:{id:"_3-如何避免死锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-如何避免死锁"}},[s._v("#")]),s._v(" 3.如何避免死锁?")]),s._v(" "),t("p",[s._v("使用锁的时候遇到的最常见的问题就是死锁. 死锁是指, 由于某种原因, 锁一直没有释放, 后续需要获取锁的线程都将处于等待锁的状态, 这样程序就卡死了.")]),s._v(" "),t("p",[s._v("导致死锁的原因并不多, 第一种原因就是前面讲的, 获取了锁之后没有释放.")]),s._v(" "),t("p",[s._v("还有一种是"),t("strong",[s._v("锁的重入问题")]),s._v(", 来看下面这段代码:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("visitShareResWithLock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  lock"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("lock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 获取锁")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    lock"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("lock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 再次获取锁，会导致死锁吗？")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("finally")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    lock"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("unlock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("在这段代码中, 当前的线程获取到了锁 lock, 然后在持有这把锁的情况下, 再次去尝试获取这把锁, 这样会导致死锁吗?")]),s._v(" "),t("p",[s._v("答案是, 不一定. "),t("strong",[s._v("会不会死锁取决于获取的这把锁它是不是可重入锁. ​")]),s._v("如果是可重入锁, 那就没有问题, 否则就会死锁.")]),s._v(" "),t("p",[s._v('大部分编程语言都提供了可重入锁, 如果没有特别的要求, 要尽量使用可重入锁. 有的同学可能会问, "既然已经获取到锁了, 干嘛还要再次获取同一把锁呢?"')]),s._v(" "),t("p",[s._v("其实, 如果程序足够复杂, 调用栈很深, 很多情况下, 当需要获取一把锁的时候, 但不太好判断在 n 层调用之外的某个地方, 是不是已经获取过这把锁了, 这个时候获取可重入锁就有意义了.")]),s._v(" "),t("p",[s._v("最后一种死锁的情况是最复杂的, 也是最难解决的. 如果程序中"),t("strong",[s._v("存在多把锁")]),s._v(", 就有可能出现这些锁互相锁住的情况. 一起来看下面这段 Python 代码:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("threading")]),s._v("\n \ndef "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("func1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("lockA"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" lockB"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("True")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Thread1: Try to accquire lockA..."')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("lockA")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Thread1: lockA accquired. Try to accquire lockB..."')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("lockB")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Thread1: Both lockA and LockB accrquired."')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n \n \ndef "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("func2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("lockA"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" lockB"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("True")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Thread2: Try to accquire lockB..."')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("lockB")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Thread2: lockB accquired. Try to accquire lockA..."')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("lockA")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Thread2: Both lockA and LockB accrquired."')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n \n \n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" __name__ "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" '__main__'"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n  lockA "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("threading"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),s._v("RLock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  lockB "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("threading"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),s._v("RLock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  t1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("threading"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),s._v("Thread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("target"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("func1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("lockA"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" lockB"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  t2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("threading"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),s._v("Thread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("target"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("func2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("lockA"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" lockB"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  t1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("start")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  t2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("start")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br")])]),t("p",[s._v("这个代码模拟了一个最简单最典型的死锁情况. 在这个程序里面, 有两把锁: lockA 和 lockB, 然后定义了两个线程, 这两个线程反复地去获取这两把锁, 然后释放. 执行以下这段代码, 看看会出现什么情况:")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("$ python3 DeadLock.py\nThread1: Try to accquire lockA"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\nThread1: lockA accquired. Try to accquire lockB"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\nThread1: Both lockA and LockB accrquired.\nThread1: Try to accquire lockA"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(". "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\nThread1: Try to accquire lockA"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\nThread2: Try to accquire lockB"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\nThread1: lockA accquired. Try to accquire lockB"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\nThread2: lockB accquired. Try to accquire lockA"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[s._v("可以看到, 程序执行一会儿就卡住了, 发生了死锁. 那死锁的原因是什么呢? 请注意看代码, 这两个线程, 他们获取锁的顺序是不一样的. 第一个线程, 先获取 lockA, 再获取 lockB, 而第二个线程正好相反, 先获取 lockB, 再获取 lockA.")]),s._v(" "),t("p",[s._v("然后再看一下死锁前的最后两行日志, 线程 1 持有了 lockA, 现在尝试获取 lockB, 而线程 2 持有了 lockB, 尝试获取 lockA. 你可以想一下这个场景, 两个线程, 各持有一把锁, 都等着对方手里的另外一把锁, 这样就僵持住了.")]),s._v(" "),t("p",[s._v("这是最简单的两把锁两个线程死锁的情况, 想想如果你的程序中有十几把锁, 几十处加锁解锁, 几百的线程, 如果出现死锁分析起来就炸了.")]),s._v(" "),t("p",[s._v("关于避免死锁, 这里给几点建议.")]),s._v(" "),t("ol",[t("li",[s._v("再次强调一下, 避免滥用锁, 程序里用的锁少, 写出死锁 Bug 的几率自然就低.")]),s._v(" "),t("li",[s._v("对于同一把锁, 加锁和解锁必须要放在同一个方法中, 这样一次加锁对应一次解锁, 代码清晰简单, 便于分析问题.")]),s._v(" "),t("li",[s._v("尽量避免在持有一把锁的情况下, 去获取另外一把锁, 就是要尽量避免同时持有多把锁.")]),s._v(" "),t("li",[s._v("如果需要持有多把锁, 一定要注意加解锁的顺序, 解锁的顺序要和加锁顺序相反. 比如获取三把锁的顺序是 A, B, C, 释放锁的顺序必须是 C, B, A.")]),s._v(" "),t("li",[s._v("给程序中所有的锁排一个顺序, 在所有需要加锁的地方, 按照同样的顺序加解锁. 比如前面例子的两个线程都按照先获取 lockA 再获取 lockB 的顺序加锁, 就不会产生死锁.")])]),s._v(" "),t("h5",{attrs:{id:"_4-使用读写锁要兼顾性能和安全性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-使用读写锁要兼顾性能和安全性"}},[s._v("#")]),s._v(" 4.使用读写锁要兼顾性能和安全性")]),s._v(" "),t("p",[s._v("对于共享数据来说, 如果说某个方法在访问它的时候, 只是去读取, 并不更新数据, 那是不是就不需要加锁呢? 还是需要的, 因为如果一个线程读数据的同时, 另外一个线程同时在更新数据, 那么读到的数据有可能是更新到一半的数据, 这肯定是不符合预期的. 所以无论是只读访问, 还是读写访问, 都是需要加锁的.")]),s._v(" "),t("p",[s._v("如果给数据简单地加一把锁, 虽然解决了安全性的问题, 但是牺牲了性能, 因为那无论读还是写, 都无法并发了, 跟单线程的程序性能是一样.")]),s._v(" "),t("p",[s._v("实际上, 如果没有线程在更新数据, 那即使多个线程都在并发读, 也是没有问题的. 前面提到过, 大部分情况下, 数据的读写比是不均衡的, 读要远远多于写, 所以希望的是:")]),s._v(" "),t("ul",[t("li",[s._v("读访问可以并发执行.")]),s._v(" "),t("li",[s._v("写的同时不能并发读, 也不能并发写.")])]),s._v(" "),t("p",[s._v("这样就兼顾了性能和安全性. 读写锁就是为这一需求设计的. 看一下 Java 中提供的读写锁:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ReadWriteLock")]),s._v(" rwlock "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ReentrantReadWriteLock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("read")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  rwlock"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("readLock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("lock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 在这儿读取共享数据")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("finally")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    rwlock"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("readLock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("unlock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("write")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  rwlock"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("writeLock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("lock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 在这儿更新共享数据")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("finally")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    rwlock"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("writeLock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("unlock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br")])]),t("p",[s._v("在这段代码中, 需要读数据的时候获取读锁, 获取到的读锁不是一个互斥锁, 也就是说 read() 方法是可以多个线程并行执行的, 这样使得读数据的性能依然很好. 写数据的时候获取写锁, 当一个线程持有写锁的时候, 其他线程既无法获取读锁, 也不能获取写锁, 达到保护共享数据的目的.")]),s._v(" "),t("p",[s._v("这样, 使用读写锁就兼顾了性能和安全.")]),s._v(" "),t("h4",{attrs:{id:"如何用硬件同步原语-cas-替代锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何用硬件同步原语-cas-替代锁"}},[s._v("#")]),s._v(" 如何用硬件同步原语(CAS)替代锁?")]),s._v(" "),t("p",[s._v("前一节介绍如何使用锁来保护共享资源, 然而使用锁是有一定性能损失的, 并且如果发生了过多的锁等待, 将会非常影响程序的性能.")]),s._v(" "),t("p",[s._v("在一些特定的情况下, 可以使用"),t("strong",[s._v("硬件同步原语来替代锁")]),s._v(", 可以保证和锁一样的数据安全性, 同时具有更好的性能.")]),s._v(" "),t("p",[s._v("伯克利大学发表了一篇论文《"),t("a",{attrs:{href:"http://www.usenix.org/conference/nsdi19/presentation/khandelwal",target:"_blank",rel:"noopener noreferrer"}},[s._v("Confluo: Distributed Monitoring and Diagnosis Stack for High-speed Networks"),t("OutboundLink")],1),s._v("》, 这个论文中提到的 Confluo, 也是一个类似于消息队列的流数据存储, 它的吞吐量号称是 Kafka 的 4～10 倍. Confluo 它的这个设计思路是一个创新, 并且实际上它的性能也非常好. Confluo 是如何做到这么高的吞吐量的呢? 这里面非常重要的一个创新的设计就是, 它"),t("strong",[s._v("使用硬件同步原语来代替锁")]),s._v(", 在一个日志上(可以理解为消息队列中的一个队列或者分区), 保证严格顺序的前提下, 实现了多线程并发写入.")]),s._v(" "),t("p",[s._v("本节就来学习一下如何用硬件同步原语(CAS)替代锁.")]),s._v(" "),t("h5",{attrs:{id:"_1-什么是硬件同步原语"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是硬件同步原语"}},[s._v("#")]),s._v(" 1.什么是硬件同步原语?")]),s._v(" "),t("p",[s._v("为什么硬件同步原语可以替代锁呢?")]),s._v(" "),t("p",[t("strong",[s._v("硬件同步原语(Atomic Hardware Primitives)是由计算机硬件提供的一组原子操作, 比较常用的原语主要是 CAS 和 FAA 这两种.")])]),s._v(" "),t("p",[s._v("CAS(Compare and Swap), 它的字面意思是: 先比较, 再交换. 看一下 CAS 实现的伪代码:")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" atomic "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v("\nfunction "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cas")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("p "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" pointer to "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" old "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" new "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" returns bool "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("p ≠ old "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" false\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("p ← new\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" true\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("它的输入参数一共有三个, 分别是:")]),s._v(" "),t("ul",[t("li",[s._v("p: "),t("strong",[s._v("要修改的变量的指针")]),s._v(".")]),s._v(" "),t("li",[s._v("old: "),t("strong",[s._v("旧值")]),s._v(".")]),s._v(" "),t("li",[s._v("new: "),t("strong",[s._v("新值")]),s._v(".")])]),s._v(" "),t("p",[s._v("返回的是一个布尔值, 标识是否赋值成功.")]),s._v(" "),t("p",[s._v("通过这个伪代码可以看出 CAS 原语的逻辑非常简单, 就是"),t("strong",[s._v("先比较一下变量 p 当前的值是不是等于 old, 如果等于, 那就把变量 p 赋值为 new, 并返回 true, 否则就不改变变量 p, 并返回 false")]),s._v(".")]),s._v(" "),t("p",[s._v("这是 CAS 这个原语的语义, 接下来看一下 FAA 原语(Fetch and Add):")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" atomic "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v("\nfunction "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("faa")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("p "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" pointer to "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" inc "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" returns "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" value "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("location\n    "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("p "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" value "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" inc\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" value\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("FAA 原语的语义是, "),t("strong",[s._v("先获取变量 p 当前的值 value, 然后给变量 p 增加 inc, 最后返回变量 p 之前的值 value")]),s._v(".")]),s._v(" "),t("p",[s._v("这两个原语到底有什么特殊的呢?")]),s._v(" "),t("p",[s._v("上面的这两段伪代码, 如果用编程语言来实现, 肯定是无法保证原子性的. **==而原语的特殊之处就是, 它们都是由计算机硬件, 具体说就是 CPU 提供的实现, 可以保证操作的原子性==**​==.==")]),s._v(" "),t("p",[t("strong",[s._v("原子操作具有不可分割性, 也就不存在并发的问题")]),s._v(". 所以在某些情况下, "),t("strong",[s._v("原语可以用来替代锁, 实现一些即安全又高效的并发操作")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("CAS 和 FAA 在各种编程语言中, 都有相应的实现, 可以来直接使用, 无论你是使用哪种编程语言, 它们底层的实现是一样的, 效果也是一样的. ​")])]),s._v(" "),t("h5",{attrs:{id:"_2-cas版本的账户服务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-cas版本的账户服务"}},[s._v("#")]),s._v(" 2.CAS版本的账户服务")]),s._v(" "),t("p",[s._v("接下来还是拿账户服务来举例说明一下, 看看如何使用 CAS 原语来替代锁, 实现同样的安全性.")]),s._v(" "),t("p",[s._v("假设有一个共享变量 balance, 它保存的是当前账户余额, 然后模拟多个线程并发转账的情况, 看一下如何使用 CAS 原语来保证数据的安全性.")]),s._v(" "),t("p",[s._v("这次使用 Go 语言来实现这个转账服务. 先看一下使用锁实现的版本:")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("package")]),s._v(" main\n \n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"fmt"')]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"sync"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 账户初始值为 0 元")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" balance "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int32")]),s._v("\n\tbalance "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("int32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\tdone "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("make")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("chan")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("bool")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 执行 10000 次转账，每次转入 1 元")]),s._v("\n\tcount "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),s._v("\n \n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" lock sync"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Mutex\n \n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" count"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这里模拟异步并发转账")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("go")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("transfer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("balance"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" done"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("lock"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 等待所有转账都完成")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" count"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<-")]),s._v("done\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 打印账户余额")]),s._v("\n\tfmt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Printf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"balance = %d \\n"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" balance"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 转账服务")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("transfer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("balance "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" amount "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" done "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("chan")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("bool")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" lock "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("sync"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Mutex"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\tlock"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Lock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("balance "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("balance "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("int32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("amount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\tlock"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Unlock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\tdone "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br")])]),t("p",[s._v("这个例子中, 让账户的初始值为 0, 然后启动多个协程来并发执行 10000 次转账, 每次往账户中转入 1 元, 全部转账执行完成后, 账户中的余额应该正好是 10000 元.")]),s._v(" "),t("p",[s._v("这个使用锁的版本, 反复多次执行, 每次 balance 的结果都正好是 10000, 那这段代码的安全性是没问题的. 接下来看一下, 使用 CAS 原语的版本.")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("transferCas")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("balance "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" amount "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" done "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("chan")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("bool")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t\told "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" atomic"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("LoadInt32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("balance"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" old "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("int32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("amount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" atomic"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("CompareAndSwapInt32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("balance"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" old"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("new")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t\t\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\tdone "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[s._v('这个 CAS 版本的转账服务和上面使用锁的版本, 程序的总体结构是一样的, 主要的区别就在于, "异步给账户余额 +1" 这一小块儿代码的实现.')]),s._v(" "),t("p",[s._v("那在使用锁的版本中, 需要先获取锁, 然后变更账户的值, 最后释放锁, 完成一次转账. 可以看一下使用 CAS 原语的实现:")]),s._v(" "),t("p",[s._v("首先, 它用 for 来做了一个没有退出条件的循环. 在这个循环的内部, 反复地调用 CAS 原语, 来尝试给账户的余额 +1. 先"),t("strong",[s._v("取得账户当前的余额")]),s._v(", 暂时存放在变量 old 中, 再计算转账之后的余额, 保存在变量 new 中, 然后调用 CAS 原语来尝试给变量 balance 赋值. 前面讲过, CAS 原语它的赋值操作是有前置条件的, 只有变量 balance 的值等于 old 时, 才会将 balance 赋值为 new.")]),s._v(" "),t("p",[s._v("在 for 循环中执行了 3 条语句, 在并发的环境中执行, 这里面会有两种可能情况:")]),s._v(" "),t("p",[s._v("一种情况是, 执行到第 3 条 CAS 原语时, 没有其他线程同时改变了账户余额, 那是可以安全变更账户余额的, 这个时候执行 CAS 的返回值一定是 true, 转账成功, 就可以退出循环了. 并且 CAS 这一条语句, 它是一个原子操作, 赋值的安全性是可以保证的.")]),s._v(" "),t("p",[s._v("另外一种情况, 那就是在这个过程中, 有其他线程改变了账户余额, 这个时候是无法保证数据安全的, 不能再进行赋值. 执行 CAS 原语时, 由于无法通过比较的步骤, 所以不会执行赋值操作. 本次尝试转账失败, 当前线程并没有对账户余额做任何变更. 由于返回值为 false, "),t("strong",[s._v("不会退出循环, 所以会继续重试")]),s._v(", 直到转账成功退出循环.")]),s._v(" "),t("p",[s._v("这样每一次转账操作, 都可以通过若干次重试, 在保证安全性的前提下, 完成并发转账操作.")]),s._v(" "),t("p",[s._v("其实对于这个例子, 还有更简单, 性能更好的方式: 那就是直接使用 "),t("strong",[s._v("FAA")]),s._v(" 原语.")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("transferFaa")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("balance "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" amount "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" done "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("chan")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("bool")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\tatomic"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("AddInt32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("balance"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("int32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("amount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\tdone "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[t("strong",[s._v("FAA 原语它的操作是, 获取变量当前的值, 然后把它做一个加法, 并且保证这个操作的原子性, 一行代码就可以搞定了")]),s._v(". 看你可能会想, 那 CAS 原语还有什么意义呢?")]),s._v(" "),t("p",[s._v("在这个例子里面, 肯定是使用 FAA 原语更合适, 但是使用 CAS 原语的适用范围更加广泛一些. 类似于这样的逻辑: 先读取数据, 做计算, 然后更新数据, 无论这个计算是什么样的, 都可以使用 CAS 原语来保护数据安全, 但是 FAA 原语, 这个计算的逻辑只能"),t("strong",[s._v("局限于简单的加减法")]),s._v(".")]),s._v(" "),t("p",[s._v("另外这种使用 CAS 原语反复重试赋值的方法, 它是比较耗费 CPU 资源的, 因为在 for 循环中, 如果赋值不成功, 是会立即进入下一次循环没有等待的. 如果线程之间的碰撞非常频繁, 经常性的反复重试, "),t("strong",[s._v("这个重试的线程会占用大量的 CPU 时间")]),s._v(", 随之系统的整体性能就会下降.")]),s._v(" "),t("p",[s._v("缓解这个问题的一个方法是使用 Yield(),  大部分编程语言都支持 Yield() 这个系统调用, Yield() 的作用是, 告诉操作系统, 让出当前线程占用的 CPU 给其他线程使用. "),t("strong",[s._v("每次循环结束前调用一下 Yield() 方法, 可以在一定程度上减少 CPU 的使用率, 缓解这个问题")]),s._v(". 也可以在每次循环结束之后, Sleep() 一小段时间, 但是这样做的代价是, 性能会严重下降.")]),s._v(" "),t("p",[s._v("所以这种方法它只适合于线程之间碰撞不太频繁, 也就是说绝大部分情况下, 执行 CAS 原语不需要重试这样的场景.")]),s._v(" "),t("h5",{attrs:{id:"_3-小结-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-小结-6"}},[s._v("#")]),s._v(" 3.小结")]),s._v(" "),t("p",[s._v("本节分析了 CAS 和 FAA 这两个原语. 这些原语是由 CPU 提供的原子操作, 在并发环境中, 单独使用这些原语不用担心数据安全问题. 在特定的场景中, CAS 原语可以替代锁, 在保证安全性的同时, 提供比锁更好的性能.")]),s._v(" "),t("h4",{attrs:{id:"数据压缩-时间换空间的游戏"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据压缩-时间换空间的游戏"}},[s._v("#")]),s._v(" 数据压缩: 时间换空间的游戏")]),s._v(" "),t("p",[s._v("本节来聊聊数据压缩. 笔者曾经在一台配置比较高的服务器上, 对 Kafka 做过一个极限的性能压测, 想验证一下 Kafka 到底有多快. 使用的种子消息大小为 1KB, 只要是并发数量足够多, 不开启压缩时, 可以打满万兆网卡的全部带宽, TPS 接近 100 万. 开启压缩时, TPS 可以达到 2000 万左右, 吞吐量提升了大约 20 倍!可以看到, 对于 Kafka 来说, 使用数据压缩, 提升了大概几十倍的吞吐量. 当然在实际生产时, 不太可能达到这么高的压缩率, 但是合理地使用数据压缩, 仍然可以做到提升数倍的吞吐量.")]),s._v(" "),t("p",[s._v("所以, "),t("strong",[s._v("数据压缩不仅能节省存储空间, 还可以用于提升网络传输性能. ​")]),s._v("这种使用压缩来提升系统性能的方法, 不仅限于在消息队列中使用, 日常开发的应用程序也可以使用. 比如程序要传输大量的数据, 或者要在磁盘, 数据库中存储比较大的数据, 这些情况下, 都可以考虑使用数据压缩来提升性能, 还能节省网络带宽和存储空间.")]),s._v(" "),t("p",[s._v("本节分析一下使用数据压缩来提升系统性能的方法.")]),s._v(" "),t("h5",{attrs:{id:"_1-什么情况适合使用数据压缩"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么情况适合使用数据压缩"}},[s._v("#")]),s._v(" 1.什么情况适合使用数据压缩?")]),s._v(" "),t("p",[s._v("在使用压缩之前, 首先需要考虑, 当前这个场景是不是真的适合使用数据压缩.")]),s._v(" "),t("p",[s._v("比如进程之间通过网络传输数据, 这个数据是不是需要压缩呢? 来对比一下:")]),s._v(" "),t("ul",[t("li",[s._v("不压缩直接传输需要的时间是: 传输"),t("strong",[s._v("未压缩")]),s._v("数据的耗时.")]),s._v(" "),t("li",[s._v("使用数据压缩需要的时间是: 压缩耗时 + 传输"),t("strong",[s._v("压缩")]),s._v("数据耗时 + 解压耗时.")])]),s._v(" "),t("p",[s._v("到底是压缩快, 还是不压缩快呢? 其实不好说. 影响的因素非常多, 比如数据的压缩率, 网络带宽, 收发两端服务器的繁忙程度等等.")]),s._v(" "),t("p",[t("strong",[s._v("压缩和解压的操作都是计算密集型的操作, 非常耗费 CPU 资源")]),s._v(". 如果应用处理业务逻辑就需要耗费大量的 CPU 资源, 就不太适合再进行压缩和解压.")]),s._v(" "),t("p",[t("strong",[s._v("但如果系统的瓶颈是磁盘的 IO 性能, CPU 资源又很闲, 这种情况就非常适合在把数据写入磁盘前先进行压缩.")])]),s._v(" "),t("p",[s._v("但是, 如果系统读写比严重不均衡, 还要考虑每读一次数据就要解压一次是不是划算.")]),s._v(" "),t("p",[t("strong",[s._v("压缩的本质是资源的置换, 是一个时间换空间, 或者说是 CPU 资源换存储资源的游戏. ​")])]),s._v(" "),t("h5",{attrs:{id:"_2-应该选择什么压缩算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-应该选择什么压缩算法"}},[s._v("#")]),s._v(" 2.应该选择什么压缩算法?")]),s._v(" "),t("p",[s._v("如果通过权衡, 使用数据压缩确实可以提升系统的性能, 接下来就需要选择合适的压缩算法.")]),s._v(" "),t("p",[s._v("压缩算法可以分为"),t("strong",[s._v("有损压缩和无损压缩")]),s._v(". 有损压缩主要是用来压缩音视频, 它压缩之后是会丢失信息的. 这里讨论的全都是无损压缩, 也就是说数据经过压缩和解压过程之后, 与压缩之前相比, 是 100% 相同的.")]),s._v(" "),t("p",[s._v("数据为什么可以被压缩呢? 各种各样的压缩算法又是怎么去压缩数据的呢? 举个例子来简单说明一下.")]),s._v(" "),t("p",[s._v("比如说, 下面这段数据:")]),s._v(" "),t("blockquote",[t("p",[s._v("00000000000000000000")])]),s._v(" "),t("p",[s._v("来人肉压缩一下:")]),s._v(" "),t("blockquote",[t("p",[s._v("20 个 0")])]),s._v(" "),t("p",[s._v("20 个字符就被压缩成了 4 个字符, 并且是可以无损还原的. 也也算是一个压缩算法, 并且和其他的压缩算法本质是没什么区别的.")]),s._v(" "),t("p",[s._v("目前常用的压缩算法包括: ZIP, GZIP, SNAPPY, LZ4 等等. 选择压缩算法的时候, 主要需要考虑数据的"),t("strong",[s._v("压缩率和压缩耗时")]),s._v(". 一般来说, 压缩率越高的算法, 压缩耗时也越高. 如果是对性能要求高的系统, 可以选择压缩速度快的算法, 比如 LZ4; 如果需要更高的压缩比, 可以考虑 GZIP 或者压缩率更高的 XZ 等算法.")]),s._v(" "),t("p",[s._v("压缩样本对压缩速度和压缩比的影响也是比较大的, 同样大小的一段数字和一段新闻的文本, 即使是使用相同的压缩算法, 压缩率和压缩时间的差异也是比较大的. 所以, 有的时候在选择压缩算法的之前, 用系统的样例业务数据做一个测试, 可以帮助你找到最合适的压缩算法.")]),s._v(" "),t("h5",{attrs:{id:"_3-如何选择合适的压缩分段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-如何选择合适的压缩分段"}},[s._v("#")]),s._v(" 3.如何选择合适的压缩分段?")]),s._v(" "),t("p",[s._v("大部分的压缩算法的区别主要是, "),t("strong",[s._v("对数据进行编码的算法")]),s._v(", 压缩的流程和压缩包的结构大致一样的. 而在压缩过程中, 最需要了解的就是如何选择合适的压缩分段大小.")]),s._v(" "),t("p",[s._v("在压缩时, 给定的被压缩数据它必须有确定的长度, 或者说是有头有尾的, 不能是一个无限的数据流, "),t("strong",[s._v("如果要对流数据进行压缩, 那必须把流数据划分成多个帧, 一帧一帧的分段压缩. ​")])]),s._v(" "),t("p",[s._v("主要原因是, 压缩算法在开始压缩之前, 一般都需要对被压缩数据从头到尾进行一次扫描, 扫描的目的是确定如何对数据进行划分和编码, 一般的原则是重复次数多, 占用空间大的内容, 使用尽量短的编码, 这样压缩率会更高.")]),s._v(" "),t("p",[s._v('另外, 被压缩的数据长度越大, 重码率会更高, 压缩比也就越高. 这个很好理解, 比如这篇文章可能出现了几十次"压缩"这个词, 如果将整篇文章压缩, 这个词的重复率是几十次, 但如果按照每个自然段来压缩, 那每段中这个词的重复率只有二三次. 显然全文压缩的压缩率肯定高于分段压缩.')]),s._v(" "),t("p",[s._v("当然分段也不是越大越好, 实际上分段大小超过一定长度之后, 再增加长度对压缩率的贡献就不太大了, 这是一个原因. 另外过大的分段长度, 在解压缩的时候, 会有更多的解压浪费. 比如一个 1MB 大小的压缩文件, 即使只是需要读其中很短的几个字节, 也不得不把整个文件全部解压缩, 造成很大的解压浪费.")]),s._v(" "),t("p",[s._v("所以需要根据业务, 选择合适的压缩分段, 在压缩率, 压缩速度和解压浪费之间找到一个合适的平衡.")]),s._v(" "),t("p",[s._v("确定了如何对数据进行划分和压缩算法之后, 就可以进行压缩了, 压缩的过程就是用编码来替换原始数据的过程. 压缩之后的压缩包就是由这个编码字典和用编码替换之后的数据组成的.")]),s._v(" "),t("p",[s._v("这就是数据压缩的过程. 解压的时候, 先读取编码字典, 然后按照字典把压缩编码还原成原始的数据就可以了.")]),s._v(" "),t("h5",{attrs:{id:"_4-kafka是如何处理消息压缩的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-kafka是如何处理消息压缩的"}},[s._v("#")]),s._v(" 4.Kafka是如何处理消息压缩的?")]),s._v(" "),t("p",[s._v("回过头来再看一下 Kafka 它是如何来处理数据压缩的.")]),s._v(" "),t("p",[s._v("首先 Kafka 是否开启压缩是可以配置的, 它也支持配置使用哪一种压缩算法. 原因在上面说过, 不同的业务场景是否需要开启压缩, 选择哪种压缩算法是不能一概而论的. 所以 Kafka 的设计者把这个选择权交给使用者.")]),s._v(" "),t("p",[t("strong",[s._v("在开启压缩时, Kafka 选择一批消息一起压缩, 每一个批消息就是一个压缩分段. 使用者也可以通过参数来控制每批消息的大小. ​")])]),s._v(" "),t("p",[t("strong",[s._v("在 Kafka 中, 生产者生成一个批消息发给服务端, 在服务端中是不会拆分批消息的. 那按照批来压缩, 意味着在服务端也不用对这批消息进行解压, 可以整批直接存储, 然后整批发送给消费者. 最后批消息由消费者进行解压.")])]),s._v(" "),t("p",[s._v("在服务端不用解压, 就不会耗费服务端宝贵的 CPU 资源, 同时还能获得压缩后, 占用传输带宽小, 占用存储空间小的这些好处, 这是一个非常聪明的设计.")]),s._v(" "),t("p",[s._v("在使用 Kafka 时, 如果生产者和消费者的 CPU 资源不是特别吃紧, 开启压缩后可以节省网络带宽和服务端的存储空间, 提升总体的吞吐量, 一般都是个不错的选择.")]),s._v(" "),t("h5",{attrs:{id:"_5-小结-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-小结-3"}},[s._v("#")]),s._v(" 5.小结")]),s._v(" "),t("p",[s._v("数据压缩本质上是用 CPU 资源换取存储资源, 或者说是用压缩解压的时间来换取存储的空间, 这个买卖是不是划算, 需要根据自己的情况先衡量一下.")]),s._v(" "),t("p",[s._v("在选择压缩算法的时候, 需要综合考虑压缩时间和压缩率两个因素, 被压缩数据的内容也是影响压缩时间和压缩率的重要因素, 必要的时候可以先用业务数据做一个压缩测试, 这样有助于选择最合适的压缩算法.")]),s._v(" "),t("p",[s._v("另外一个影响压缩率的重要因素是压缩分段的大小, 需要根据业务情况选择一个合适的分段策略, 在保证不错的压缩率的前提下, 尽量减少解压浪费.")]),s._v(" "),t("p",[s._v("最后讲了一下 Kafka 它是如何处理消息压缩的. "),t("strong",[s._v("Kafka 在生产者上, 对每批消息进行压缩, 批消息在服务端不解压, 消费者在收到消息之后再进行解压. 简单地说, Kafka 的压缩和解压都是在客户端完成的")]),s._v(".")]),s._v(" "),t("h4",{attrs:{id:"rocketmq-producer源码分析-消息生产的实现过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq-producer源码分析-消息生产的实现过程"}},[s._v("#")]),s._v(" RocketMQ Producer源码分析:消息生产的实现过程")]),s._v(" "),t("p",[s._v("消息队列最核心的功能就是收发消息, 也就是消息生产和消费这两个流程. 前面提到了消息队列一些常见问题, 比如如何保证消息不会丢失? 为什么会收到重复消息? 消费时为什么要先执行消费业务逻辑再确认消费? 这些问题最终落地到代码上, 都包含在这一收一发两个流程中.")]),s._v(" "),t("p",[s._v("下面通过分析源码的方式, 详细学习一下这两个流程到底是如何实现的. 日常使用消息队列的时候, 遇到的大部分问题, 更多的是跟 Producer 和 Consumer, 也就是消息队列的"),t("strong",[s._v("客户端")]),s._v(", 关联更紧密, 因此重点也将放在分析客户端的源代码上.")]),s._v(" "),t("p",[s._v("这里选择代码风格比较简明易懂的 RocketMQ 作为分析对象. 一起分析 RocketMQ 的 Producer 的源代码, 学习消息生产的实现过程.")]),s._v(" "),t("p",[s._v("在分析源代码的过程中, 首要目的就是"),t("strong",[s._v("搞清楚功能的实现原理")]),s._v(", 另外最好能有敏锐的嗅觉, 善于发现代码中优秀的设计和巧妙构思, 学习, 总结并记住这些方法. 在日常开发中, 再遇到类似场景, 就可以直接拿来使用.")]),s._v(" "),t("p",[s._v("使用当前最新的 release 版本 release-4.5.1 进行分析, 使用 Git 在 GitHub 上直接下载源码到本地:")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" clone git@github.com:apache/rocketmq.git\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" rocketmq\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" checkout release-4.5.1\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("客户端是一个单独的 Module, 在 "),t("strong",[s._v("rocketmq/client")]),s._v(" 目录中.")]),s._v(" "),t("h5",{attrs:{id:"_1-从单元测试看producer-api的使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-从单元测试看producer-api的使用"}},[s._v("#")]),s._v(" 1.从单元测试看Producer API的使用")]),s._v(" "),t("p",[s._v("不建议从 main() 方法入手去分析源码, 而是带着问题去分析. 本节的问题是非常清晰的, 就是要搞清楚 Producer 是如何发消息的. 带着这个问题, 接下来该如何分析源码呢?")]),s._v(" "),t("p",[t("strong",[s._v("这里建议是先看一下单元测试用例")]),s._v(". 因为一般单元测试中, 每一个用例就是测试代码中的一个局部或者说是一个小流程. 那对于一些比较完善的开源软件, 它们的单元测试覆盖率都非常高, 很容易找到关心的那个流程所对应的测试用例. 源码分析就可以从这些测试用例入手, 一步一步跟踪其方法调用链路, 理清实现过程.")]),s._v(" "),t("p",[s._v("首先分析一下 RocketMQ 客户端的单元测试, 看看 Producer 提供哪些 API, 更重要的是了解这些 API 应该如何使用.")]),s._v(" "),t("p",[s._v('Producer 的所有测试用例都在同一个测试类 "org.apache.rocketmq.client.producer.DefaultMQProducerTest" 中, 看一下这个测试类中的所有单元测试方法, 大致可以了解到 Producer 的主要功能.')]),s._v(" "),t("p",[s._v("这个测试类的主要测试方法如下:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[s._v("init\nterminate\ntestSendMessage_ZeroMessage\ntestSendMessage_NoNameSrv\ntestSendMessage_NoRoute\ntestSendMessageSync_Success\ntestSendMessageSync_WithBodyCompressed\ntestSendMessageAsync_Success\ntestSendMessageAsync\ntestSendMessageAsync_BodyCompressed\ntestSendMessageSync_SuccessWithHook\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[s._v("其中 init 和 terminate 是测试开始初始化和测试结束销毁时需要执行的代码, 其他以 testSendMessage 开头的方法都是在各种情况和各种场景下发送消息的测试用例, 通过这些用例的名字, 可以大致看出测试的功能.")]),s._v(" "),t("p",[s._v("比如 testSendMessageSync 和 testSendMessageAsync 分别是测试"),t("strong",[s._v("同步发送和异步发送")]),s._v("的用例, testSendMessageSync_WithBodyCompressed 是压缩消息发送的测试用例.")]),s._v(" "),t("p",[s._v("像 RocketMQ 这种开源项目, 前期花费大量时间去编写测试用例, 看似浪费时间, 实际上会节省非常多后期联调测试, 集成测试, 以及上线后出现问题解决问题的时间, 并且能够有效降低线上故障的概率, 总体来说是非常划算的. "),t("strong",[s._v("强烈建议在日常进行开发的过程中, 也多写一些测试用例, 尽量把单元测试的覆盖率做到 50% 以上")]),s._v(".")]),s._v(" "),t("p",[s._v('RockectMQ 的 Producer 入口类为 "org.apache.rocketmq.client.producer.'),t("strong",[s._v("DefaultMQProducer")]),s._v('", 大致浏览一下代码和类的继承关系, 整理出 Producer 相关的几个核心类和接口如下:')]),s._v(" "),t("p",[t("img",{attrs:{src:"assets/image-20230522222610-8bgsony.png",alt:""}})]),s._v(" "),t("p",[s._v("这里面 RocketMQ 使用了一个设计模式: "),t("strong",[s._v("门面模式")]),s._v("(Facade Pattern).")]),s._v(" "),t("blockquote",[t("p",[s._v("门面模式主要的作用是给客户端提供了一个可以访问系统的接口, 隐藏系统内部的复杂性.")])]),s._v(" "),t("p",[s._v("接口 MQProducer 就是这个模式中的门面, 客户端只要使用这个接口就可以访问 Producer 实现消息发送的相关功能, 从使用层面上来说, 不必再与其他复杂的实现类打交道了.")]),s._v(" "),t("p",[s._v("类 "),t("strong",[s._v("DefaultMQProducer")]),s._v(" 实现了接口 MQProducer, 它里面的方法实现大多没有任何的业务逻辑, 只是封装了对其他实现类的方法调用, 也可以理解为是门面的一部分. Producer 的大部分业务逻辑的实现都在类 "),t("strong",[s._v("DefaultMQProducerImpl")]),s._v(" 中, 这个类会在后面重点分析其实现.")]),s._v(" "),t("p",[s._v("有的时候接口被实现分散在很多的内部类中, 不方便用接口来对外提供服务, 就可以仿照 RocketMQ 的这种方式, 使用门面模式来隐藏内部实现, 对外提供服务.")]),s._v(" "),t("p",[t("strong",[s._v("接口 MQAdmin")]),s._v(" 定义了一些元数据管理的方法, 在消息发送过程中会用到.")]),s._v(" "),t("h5",{attrs:{id:"_2-启动过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-启动过程"}},[s._v("#")]),s._v(" 2.启动过程")]),s._v(" "),t("p",[s._v("通过单元测试中的代码可以看到, 在 init() 和 terminate() 这两个测试方法中, 分别执行了 Producer 的 start() 和 shutdown() 方法, 说明在 RocketMQ 中, "),t("strong",[s._v("Producer 是一个有状态的服务, 在发送消息之前需要先启动 Producer")]),s._v(". 这个启动过程, 实际上就是为了发消息做的准备工作, 所以在分析发消息流程之前, 需要先理清 Producer 中维护了哪些状态, 在启动过程中, Producer 都做了哪些"),t("strong",[s._v("初始化的工作")]),s._v(". 有了这个基础才能分析其发消息的实现流程.")]),s._v(" "),t("p",[s._v("首先从测试用例的方法 init() 入手:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Before")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("init")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Exception")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" producerGroupTemp "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" producerGroupPrefix "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("currentTimeMillis")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    producer "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("DefaultMQProducer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("producerGroupTemp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    producer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setNamesrvAddr")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"127.0.0.1:9876"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    producer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setCompressMsgBodyOverHowmuch")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 省略构造测试消息的代码")]),s._v("\n \n    producer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("start")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 省略用于测试构造 mock 的代码")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("p",[s._v("这段初始化代码的逻辑非常简单, 就是创建了一个 "),t("strong",[s._v("DefaultMQProducer 的实例")]),s._v(", 为它初始化一些参数, 然后调用 start() 方法启动它. 接下来跟进 start() 方法的实现, 继续分析其初始化过程.")]),s._v(" "),t("p",[s._v("DefaultMQProducer 的 start() 方法中直接调用了 DefaultMQProducer 的 Implstart() 方法, 直接来看这个方法的代码:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("start")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" startFactory"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MQClientException")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("switch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("serviceState"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CREATE_JUST")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("serviceState "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServiceState")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("START_FAILED")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 省略参数检查和异常情况处理的代码")]),s._v("\n \n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 获取 MQClientInstance 的实例 mQClientFactory，没有则自动创建新的实例")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("mQClientFactory "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MQClientManager")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getInstance")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getAndCreateMQClientInstance")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("defaultMQProducer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" rpcHook"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 在 mQClientFactory 中注册自己")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" registerOK "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" mQClientFactory"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("registerProducer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("defaultMQProducer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getProducerGroup")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 省略异常处理代码")]),s._v("\n \n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 启动 mQClientFactory")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("startFactory"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                mQClientFactory"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("start")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("serviceState "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServiceState")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("RUNNING")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("RUNNING")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("START_FAILED")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SHUTDOWN_ALREADY")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 省略异常处理代码")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 给所有 Broker 发送心跳")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("mQClientFactory"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sendHeartbeatToAllBrokerWithLock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br")])]),t("p",[s._v("这里面, "),t("strong",[s._v("RocketMQ 使用一个成员变量 serviceState 来记录和管理自身的服务状态, 这实际上是状态模式 (State Pattern) 这种设计模式的变种实现")]),s._v(".")]),s._v(" "),t("blockquote",[t("p",[s._v("状态模式允许一个对象在其内部状态改变时改变它的行为, 对象看起来就像是改变了它的类.")])]),s._v(" "),t("p",[s._v("与标准的状态模式不同的是, 它没有使用状态子类, 而是使用"),t("strong",[s._v("分支流程")]),s._v("(switch-case)来实现不同状态下的不同行为, 在管理比较简单的状态时, 使用这种设计会让代码更加简洁. 这种模式非常广泛地用于管理有状态的类, 推荐在日常开发中使用.")]),s._v(" "),t("p",[s._v("在设计状态的时候, 有两个要点是需要注意的. "),t("strong",[s._v("第一是不仅要设计正常的状态, 还要设计中间状态和异常状态, 否则一旦系统出现异常, 状态就不准确了, 也就很难处理这种异常状态")]),s._v(". 比如在这段代码中, RUNNING 和 SHUTDOWN_ALREADY 是正常状态, CREATE_JUST 是一个中间状态, START_FAILED 是一个异常状态.")]),s._v(" "),t("p",[t("strong",[s._v("第二个要点是, 将这些状态之间的转换路径考虑清楚, 并在进行状态转换的时候, 检查上一个状态是否能转换到下一个状态")]),s._v(". 比如在这里, 只有处于 CREATE_JUST 状态才能转换为 RUNNING 状态, 这样就可以确保这个服务是一次性的, 只能启动一次. 从而避免了多次启动服务而导致的各种问题.")]),s._v(" "),t("p",[s._v("接下来看一下启动过程的实现:")]),s._v(" "),t("ol",[t("li",[s._v("通过一个单例模式(Singleton Pattern)的 MQClientManager 获取 MQClientInstance 的实例 mQClientFactory, 没有则自动创建新的实例;")]),s._v(" "),t("li",[s._v("在 mQClientFactory 中注册自己;")]),s._v(" "),t("li",[s._v("启动 mQClientFactory;")]),s._v(" "),t("li",[s._v("给所有 Broker 发送心跳.")])]),s._v(" "),t("p",[s._v("这里面又使用了一个最简单的设计模式: 单例模式.")]),s._v(" "),t("blockquote",[t("p",[s._v("单例模式涉及一个单一的类, 该类负责创建自己的对象, 同时确保只有单个对象被创建. 这个类提供了一种访问其唯一的对象的方式, 可以直接访问, 不需要实例化该类的对象.")])]),s._v(" "),t("p",[s._v("其中实例 mQClientFactory 对应的类 "),t("strong",[s._v("MQClientInstance")]),s._v(" 是 RocketMQ 客户端中的顶层类, 大多数情况下, 可以简单地理解为每个客户端对应类 MQClientInstance 的一个实例. "),t("strong",[s._v("这个实例维护着客户端的大部分状态信息, 以及所有的 Producer, Consumer 和各种服务的实例, 想要学习客户端整体结构的同学可以从分析这个类入手, 逐步细化分析下去")]),s._v(".")]),s._v(" "),t("p",[s._v("进一步分析一下 MQClientInstance#start() 中的代码:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 启动请求响应通道")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("mQClientAPIImpl"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("start")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 启动各种定时任务")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("startScheduledTask")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 启动拉消息服务")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("pullMessageService"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("start")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 启动 Rebalance 服务")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rebalanceService"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("start")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 启动 Producer 服务")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("defaultMQProducer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getDefaultMQProducerImpl")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("start")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[s._v("这一部分代码的注释比较清楚, 流程是这样的:")]),s._v(" "),t("ol",[t("li",[s._v("启动实例 mQClientAPIImpl, 其中 mQClientAPIImpl 是类 MQClientAPIImpl 的实例, 封装了客户端与 Broker 通信的方法;")]),s._v(" "),t("li",[s._v("启动各种定时任务, 包括与 Broker 之间的定时心跳, 定时与 NameServer 同步数据等任务;")]),s._v(" "),t("li",[s._v("启动"),t("strong",[s._v("拉取消息")]),s._v("服务;")]),s._v(" "),t("li",[s._v("启动 Rebalance 服务;")]),s._v(" "),t("li",[s._v("启动默认的 Producer 服务.")])]),s._v(" "),t("p",[s._v("以上是 Producer 的启动流程. 这里面有几个重要的类, 需要清楚它们的各自的职责.")]),s._v(" "),t("ol",[t("li",[t("strong",[s._v("DefaultMQProducerImpl")]),s._v(": Producer 的"),t("strong",[s._v("内部实现类, 大部分 Producer 的业务逻辑, 也就是发消息的逻辑, 都在这个类中")]),s._v(".")]),s._v(" "),t("li",[t("strong",[s._v("MQClientInstance")]),s._v(": 这个类中封装了客户端一些"),t("strong",[s._v("通用的业务逻辑")]),s._v(", 无论是 Producer 还是 Consumer, 最终需要与服务端交互时, 都需要调用这个类中的方法;")]),s._v(" "),t("li",[t("strong",[s._v("MQClientAPIImpl")]),s._v(": 这个类中封装了客户端服务端的 RPC, 对调用者隐藏了真正网络通信部分的具体实现;")]),s._v(" "),t("li",[t("strong",[s._v("NettyRemotingClient")]),s._v(": RocketMQ 各进程之间网络通信的底层实现类.")])]),s._v(" "),t("h5",{attrs:{id:"_3-消息发送过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-消息发送过程"}},[s._v("#")]),s._v(" 3.消息发送过程")]),s._v(" "),t("p",[s._v("接下来一起分析 Producer 发送消息的流程.")]),s._v(" "),t("p",[s._v("在 Producer 的接口 MQProducer 中, 定义了 19 个不同参数的发消息的方法, 按照发送方式不同可以分成三类:")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("单向发送(Oneway)")]),s._v(": 发送消息后立即返回, 不处理响应, 不关心是否发送成功;")]),s._v(" "),t("li",[t("strong",[s._v("同步发送(Sync)")]),s._v(": 发送消息后等待响应;")]),s._v(" "),t("li",[t("strong",[s._v("异步发送(Async)")]),s._v(": 发送消息后立即返回, 在提供的回调方法中处理响应.")])]),s._v(" "),t("p",[s._v("这三类发送实现基本上是相同的, 异步发送稍微有一点儿区别, 看一下"),t("strong",[s._v("异步发送")]),s._v('的实现方法 "DefaultMQProducerImpl#send()":')]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Deprecated")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("send")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Message")]),s._v(" msg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MessageQueueSelector")]),s._v(" selector"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" arg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SendCallback")]),s._v(" sendCallback"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" timeout"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MQClientException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RemotingException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("InterruptedException")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" beginStartTime "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("currentTimeMillis")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ExecutorService")]),s._v(" executor "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getAsyncSenderExecutor")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        executor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("submit")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Runnable")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("run")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" costTime "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("currentTimeMillis")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" beginStartTime"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("timeout "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" costTime"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                            "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sendSelectImpl")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("msg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" selector"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" arg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CommunicationMode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ASYNC")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" sendCallback"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                                timeout "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" costTime"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MQBrokerException")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throw")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MQClientException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"unknownn exception"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Exception")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                        sendCallback"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("onException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    sendCallback"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("onException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RemotingTooMuchRequestException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"call timeout"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RejectedExecutionException")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throw")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MQClientException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"exector rejected "')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br")])]),t("p",[s._v("可以看到, RocketMQ 使用了一个 "),t("strong",[s._v("ExecutorService")]),s._v(" 来实现异步发送: 使用 asyncSenderExecutor 的线程池, 异步调用方法 "),t("strong",[s._v("sendSelectImpl()")]),s._v(", 继续发送消息的后续工作, 当前线程把发送任务提交给 asyncSenderExecutor 就可以返回了. "),t("strong",[s._v("单向发送和同步发送的实现则是直接在当前线程中调用方法 sendSelectImpl()")]),s._v(".")]),s._v(" "),t("p",[s._v("来继续看方法 sendSelectImpl() 的实现:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 省略部分代码")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MessageQueue")]),s._v(" mq "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 选择将消息发送到哪个队列（Queue）中")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MessageQueue")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" messageQueueList "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("\n        mQClientFactory"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getMQAdminImpl")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("parsePublishMessageQueues")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("topicPublishInfo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getMessageQueueList")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Message")]),s._v(" userMessage "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MessageAccessor")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cloneMessage")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("msg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" userTopic "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("NamespaceUtil")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("withoutNamespace")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("userMessage"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getTopic")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" mQClientFactory"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getClientConfig")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getNamespace")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    userMessage"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setTopic")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("userTopic"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    mq "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" mQClientFactory"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getClientConfig")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("queueWithNamespace")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("selector"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("select")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("messageQueueList"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" userMessage"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" arg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Throwable")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throw")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MQClientException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"select message queue throwed exception."')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 省略部分代码")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 发送消息")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("mq "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sendKernelImpl")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("msg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" mq"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" communicationMode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" sendCallback"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" timeout "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" costTime"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throw")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MQClientException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"select message queue return null."')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 省略部分代码")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br")])]),t("p",[s._v("方法 sendSelectImpl() 中主要的功能就是"),t("strong",[s._v("选定要发送的队列, 然后调用方法 sendKernelImpl() 发送消息")]),s._v(".")]),s._v(" "),t("p",[s._v("选择哪个队列发送由 MessageQueueSelector#select() 方法决定. 在这里 RocketMQ 使用了"),t("strong",[s._v("策略模式")]),s._v("(Strategy Pattern), 来解决不同场景下需要使用不同的队列选择算法问题.")]),s._v(" "),t("blockquote",[t("p",[s._v("策略模式: 定义一系列算法, 将每一个算法封装起来, 并让它们可以相互替换. 策略模式让算法独立于使用它的客户而变化.")])]),s._v(" "),t("p",[s._v("RocketMQ 提供了很多 "),t("strong",[s._v("MessageQueueSelector")]),s._v(" 的实现, 例如随机选择策略, 哈希选择策略和同机房选择策略等, 如果需要也可以自己实现选择策略. 前面提到过, 如果要保证相同 key 消息的严格顺序, 需要使用哈希选择策略, 或者提供一个自己实现的选择策略.")]),s._v(" "),t("p",[s._v("接下来再看一下方法 sendKernelImpl(). 这个方法的代码非常多, 大约有 200 行, 但逻辑比较简单, 主要功能就是构建发送消息的头 RequestHeader 和上下文 SendMessageContext, 然后调用方法 MQClientAPIImpl#sendMessage(), 将消息发送给队列所在的 Broker.")]),s._v(" "),t("p",[s._v("至此, 消息被发送给远程调用的封装类 MQClientAPIImpl, 完成后续序列化和网络传输等步骤.")]),s._v(" "),t("p",[t("strong",[s._v("可以看到, RocketMQ 的 Producer 整个发消息的流程, 无论是同步发送还是异步发送, 都统一到了同一个流程中. 包括异步发送消息的实现, 实际上也是通过一个线程池, 在异步线程执行的调用和同步发送相同的底层方法来实现的. ​")])]),s._v(" "),t("p",[s._v("在底层方法的代码中, 依靠方法的一个参数来区分同步还是异步发送. 这样实现的好处是, 整个流程是统一的, 很多同步异步共同的逻辑, 代码可以复用, 并且代码结构清晰简单, 便于维护.")]),s._v(" "),t("p",[s._v("使用同步发送的时候, 当前线程会阻塞等待服务端的响应, 直到收到响应或者超时方法才会返回, 所以在业务代码调用同步发送的时候, 只要返回成功, 消息就一定发送成功了. 异步发送的时候, 发送的逻辑都是在 Executor 的异步线程中执行的, 所以不会阻塞当前线程, 当服务端返回响应或者超时之后, "),t("strong",[s._v("Producer 会调用 Callback 方法来给业务代码返回结果")]),s._v('. 业务代码需要在 Callback 中来判断发送结果. 这与之前的 "如何保证消息不丢失" 讲到的发送流程是完全一样的.')]),s._v(" "),t("h5",{attrs:{id:"_4-小结-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-小结-3"}},[s._v("#")]),s._v(" 4.小结")]),s._v(" "),t("p",[s._v("本节分析了 RocketMQ 客户端消息生产的实现过程, 包括 Producer 初始化和发送消息的主流程. Producer 中包含的几个核心的服务都是"),t("strong",[s._v("有状态")]),s._v("的, 在 Producer 启动时, 在 MQClientInstance 这个类中来统一来启动. 在发送消息的流程中, RocketMQ 分了三种发送方式: "),t("strong",[s._v("单向, 同步和异步")]),s._v(", 这三种发送方式对应的发送流程基本是相同的, 同步和异步发送是由已经封装好的 "),t("strong",[s._v("MQClientAPIImpl")]),s._v(" 类来分别实现的.")]),s._v(" "),t("p",[s._v("对于在分析代码中提到的几个重要的业务逻辑实现类, 最好能记住这几个类和它的功能, 包括: "),t("strong",[s._v("DefaultMQProducerImpl 封装了大部分 Producer 的业务逻辑, MQClientInstance 封装了客户端一些通用的业务逻辑, MQClientAPIImpl 封装了客户端与服务端的 RPC, NettyRemotingClient 实现了底层网络通信.")])]),s._v(" "),t("h4",{attrs:{id:"kafka-consumer源码分析-消息消费的实现过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#kafka-consumer源码分析-消息消费的实现过程"}},[s._v("#")]),s._v(" Kafka Consumer源码分析:消息消费的实现过程")]),s._v(" "),t("p",[s._v("前面提到, 用于解决消息队列一些常见问题的知识和原理, 最终落地到代码上, 都包含在收, 发消息这两个流程中. 对于消息队列的生产和消费这两个核心流程, 在大部分消息队列中, 它实现的主要流程都是一样的, 所以通过这两节课之后, 掌握了这两个流程的实现过程. 无论使用的是哪种消息队列, 遇到收发消息的问题, 都可以用同样的思路去分析和解决问题.")]),s._v(" "),t("p",[s._v("本节来看一下 "),t("strong",[s._v("Kafka 消费者")]),s._v("的源代码, 理清 Kafka 消费的实现过程, 并且能从中学习到一些 Kafka 的优秀设计思路和编码技巧.")]),s._v(" "),t("p",[s._v("在开始分析源码之前, 一起来回顾一下 Kafka 消费模型的几个要点:")]),s._v(" "),t("ul",[t("li",[s._v("Kafka 的每个 Consumer(消费者)实例属于一个 ConsumerGroup(消费组);")]),s._v(" "),t("li",[s._v("在消费时, ConsumerGroup 中的每个 Consumer 独占一个或多个 Partition(分区);")]),s._v(" "),t("li",[s._v("对于每个 ConsumerGroup, 在任意时刻, 每个 Partition 至多有 1 个 Consumer 在消费;")]),s._v(" "),t("li",[s._v("每个 ConsumerGroup 都有一个 Coordinator(协调者)负责分配 Consumer 和 Partition 的对应关系, 当 Partition 或是 Consumer 发生变更是, 会触发 reblance(重新分配)过程, 重新分配 Consumer 与 Partition 的对应关系;")]),s._v(" "),t("li",[s._v("Consumer 维护与 Coordinator 之间的心跳, 这样 Coordinator 就能感知到 Consumer 的状态, 在 Consumer 故障的时候及时触发 rebalance.")])]),s._v(" "),t("p",[s._v("掌握并理解 Kafka 的消费模型, 对于接下来理解其消费的实现过程是至关重要的, 如果对上面的这些要点还有不清楚的地方, 建议回顾一下之前的内容.")]),s._v(" "),t("p",[s._v("这里版本 2.2 进行分析, 使用 Git 在 GitHub 上直接下载源码到本地:")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" clone git@github.com:apache/kafka.git\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" kafka\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" checkout "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.2")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("前面提到过分析国外源码最好的方式就是从文档入手, 接下来就找一下 Kafka 的文档, 看看从哪儿来入手开启分析流程.")]),s._v(" "),t("p",[s._v("Kafka 的 Consumer 入口类 KafkaConsumer 的 JavaDoc 给出了一个使用 Consumer 消费的最简代码示例:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 设置必要的配置信息")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Properties")]),s._v(" props "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Properties")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nprops"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"bootstrap.servers"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"localhost:9092"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nprops"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"group.id"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"test"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nprops"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"enable.auto.commit"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"true"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nprops"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"auto.commit.interval.ms"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1000"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nprops"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"key.deserializer"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"org.apache.kafka.common.serialization.StringDeserializer"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nprops"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"value.deserializer"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"org.apache.kafka.common.serialization.StringDeserializer"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 创建 Consumer 实例")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("KafkaConsumer")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" consumer "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("KafkaConsumer")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("props"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 订阅 Topic")]),s._v("\nconsumer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("subscribe")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Arrays")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("asList")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"foo"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"bar"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 循环拉消息")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConsumerRecords")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" records "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" consumer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("poll")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConsumerRecord")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" record "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" records"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"offset = %d, key = %s, value = %s%n"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" record"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("offset")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" record"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("key")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" record"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("value")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br")])]),t("p",[s._v("这段代码主要的主要流程是:")]),s._v(" "),t("ol",[t("li",[s._v("设置必要的配置信息, 包括: 起始连接的 Broker 地址, Consumer Group 的 ID, 自动提交消费位置的配置和序列化配置;")]),s._v(" "),t("li",[s._v("创建 Consumer 实例;")]),s._v(" "),t("li",[s._v("订阅了 2 个 Topic: foo 和 bar;")]),s._v(" "),t("li",[s._v("循环拉取消息并打印在控制台上.")])]),s._v(" "),t("p",[s._v('通过上面的代码实例可以看到, 消费这个大的流程, 在 Kafka 中实际上是被分成了**"订阅"和"拉取消息"这两个小的流程.** 前面提到过, Kafka 在消费过程中, '),t("strong",[s._v("每个 Consumer 实例是绑定到一个分区上的")]),s._v(", 那 Consumer 是如何确定, 绑定到哪一个分区上的呢? 这个问题也是可以通过分析消费流程来找到答案的. 所以分析整个消费流程主要聚焦在三个问题上:")]),s._v(" "),t("ol",[t("li",[s._v("订阅过程是如何实现的?")]),s._v(" "),t("li",[s._v("Consumer 是如何与 Coordinator 协商, 确定消费哪些 Partition 的?")]),s._v(" "),t("li",[s._v("拉取消息的过程是如何实现的?")])]),s._v(" "),t("p",[s._v("了解前两个问题, 有助于充分理解 Kafka 的元数据模型, 以及 Kafka 是如何在客户端和服务端之间来交换元数据的. 最后一个问题, 拉取消息的实现过程, 实际上就是消费的主要流程. 这里带着这三个问题, 来分析 Kafka 的订阅和拉取消息的过程如何实现.")]),s._v(" "),t("h5",{attrs:{id:"_1-订阅过程如何实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-订阅过程如何实现"}},[s._v("#")]),s._v(" 1.订阅过程如何实现?")]),s._v(" "),t("p",[s._v("先来看看"),t("strong",[s._v("订阅的实现流程")]),s._v(". 从上面的例子跟踪到订阅的主流程方法:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("subscribe")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Collection")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" topics"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConsumerRebalanceListener")]),s._v(" listener"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("acquireAndEnsureOpen")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 省略部分代码")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 重置订阅状态")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("subscriptions"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("subscribe")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HashSet")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("topics"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" listener"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 更新元数据")]),s._v("\n        metadata"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setTopics")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("subscriptions"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("groupSubscription")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("finally")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("release")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[s._v("在这个代码中, 先忽略掉各种参数和状态检查的分支代码, 订阅的主流程主要更新了两个属性: "),t("strong",[s._v("一个是订阅状态 subscriptions, 另一个是更新元数据中的 topic 信息")]),s._v(". 订阅状态 subscriptions 主要维护了订阅的 topic 和 patition 的消费位置等状态信息. 属性 metadata 中维护了 Kafka 集群元数据的一个子集, 包括集群的 Broker 节点, Topic 和 Partition 在节点上分布, 以及聚焦的第二个问题: Coordinator 给 Consumer 分配的 Partition 信息.")]),s._v(" "),t("p",[s._v("请注意一下, 这个 subscribe() 方法的实现有一个非常值得大家学习的地方: 就是开始的 acquireAndEnsureOpen() 和 try-finally release(), 作用就是"),t("strong",[s._v("保护这个方法只能单线程调用")]),s._v(".")]),s._v(" "),t("p",[s._v("Kafka 在文档中明确地注明了 Consumer "),t("strong",[s._v("不是线程安全")]),s._v("的, 意味着 Consumer 被并发调用时会出现不可预期的结果. 为了避免这种情况发生, Kafka 做了主动的检测并抛出异常, 而不是放任系统产生不可预期的情况.")]),s._v(" "),t("p",[s._v('Kafka "'),t("strong",[s._v('主动检测不支持的情况并抛出异常, 避免系统产生不可预期的行为" ​')]),s._v('这种模式, 对于增强的系统的健壮性是一种非常有效的做法. 如果系统不支持用户的某种操作, 正确的做法是, 检测不支持的操作, 直接拒绝用户操作, 并给出明确的错误提示, 而不应该只是在文档中写上"不要这样做", 却放任用户错误的操作, 产生一些不可预期的, 奇怪的错误结果.')]),s._v(" "),t("p",[s._v("具体 Kafka 是如何实现的并发检测, 可以看一下方法 acquireAndEnsureOpen() 的实现, 很简单也很经典, 就不再展开讲解了.")]),s._v(" "),t("p",[s._v("继续跟进到更新元数据的方法 metadata.setTopics() 里面, 这个方法的实现除了更新元数据类 Metadata 中的 topic 相关的一些属性以外, 还调用了 Metadata.requestUpdate() 方法请求更新元数据.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("requestUpdate")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("needUpdate "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("updateVersion"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("跟进到 requestUpdate() 的方法里面可以发现, 这里面并没有真正发送更新元数据的请求, "),t("strong",[s._v("只是将需要更新元数据的标志位 needUpdate 设置为 true 就结束了")]),s._v(". Kafka 必须确保在第一次拉消息之前元数据是可用的, 也就是说在第一次拉消息之前必须更新一次元数据, 否则 Consumer 就不知道它应该去哪个 Broker 上去拉哪个 Partition 的消息.")]),s._v(" "),t("p",[s._v("分析完订阅相关的代码, 来总结一下: 在订阅的实现过程中, Kafka 更新了订阅状态 subscriptions 和元数据 metadata 中的相关 topic 的一些属性, "),t("strong",[s._v('将元数据状态置为 "需要立即更新", 但是并没有真正发送更新元数据的请求, 整个过程没有和集群有任何网络数据交换')]),s._v(".")]),s._v(" "),t("p",[s._v("那这个元数据会在什么时候真正做一次更新呢? 可以先带着这个问题接着看代码.")]),s._v(" "),t("h5",{attrs:{id:"_2-拉取消息的过程如何实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-拉取消息的过程如何实现"}},[s._v("#")]),s._v(" 2.拉取消息的过程如何实现?")]),s._v(" "),t("p",[s._v("接下来分析"),t("strong",[s._v("拉取消息的流程")]),s._v(". 这个流程的时序图如下:")]),s._v(" "),t("p",[t("img",{attrs:{src:"assets/image-20230522222707-yrsdpi4.png",alt:""}})]),s._v(" "),t("p",[s._v("对着时序图来分析它的实现流程. 在 KafkaConsumer.poll() 方法主要是先后调用了 2 个私有方法:")]),s._v(" "),t("ol",[t("li",[t("strong",[s._v("updateAssignmentMetadataIfNeeded()")]),s._v(": 更新元数据.")]),s._v(" "),t("li",[t("strong",[s._v("pollForFetches()")]),s._v(": 拉取消息.")])]),s._v(" "),t("p",[s._v("方法 updateAssignmentMetadataIfNeeded() 中, 调用了 coordinator.poll() 方法, poll() 方法里面又调用了 client.ensureFreshMetadata() 方法, 在 client.ensureFreshMetadata() 方法中又调用了 client.poll() 方法, 实现了与 Cluster 通信, "),t("strong",[s._v("在 Coordinator 上注册 Consumer 并拉取和更新元数据")]),s._v('. 至此, "元数据会在什么时候真正做一次更新" 这个问题也有了答案.')]),s._v(" "),t("p",[s._v("类 ConsumerNetworkClient 封装了 Consumer 和 Cluster 之间所有的网络通信的实现, 这个类是一个非常彻底的异步实现. 它没有维护任何的线程, 所有待发送的 Request 都存放在属性 unsent 中, 返回的 Response 存放在属性 pendingCompletion 中. 每次调用 poll() 方法的时候, 在当前线程中发送所有待发送的 Request, 处理所有收到的 Response.")]),s._v(" "),t("p",[s._v("前面讲到过, "),t("strong",[s._v("这种异步设计的优势就是用很少的线程实现高吞吐量, 劣势也非常明显, 极大增加了代码的复杂度")]),s._v(". 对比前面分析的 RocketMQ 的代码, Producer 和 Consumer 在主要收发消息流程上功能的复杂度是差不多的, 但是可以很明显地感受到 Kafka 的代码实现要比 RocketMQ 的代码实现更加的复杂难于理解.")]),s._v(" "),t("p",[s._v("继续分析方法 pollForFetches() 的实现.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Map")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TopicPartition")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConsumerRecord")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("pollForFetches")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Timer")]),s._v(" timer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 省略部分代码")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果缓存里面有未读取的消息，直接返回这些消息")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Map")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TopicPartition")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConsumerRecord")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" records "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" fetcher"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("fetchedRecords")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("records"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isEmpty")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" records"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 构造拉取消息请求，并发送")]),s._v("\n    fetcher"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sendFetches")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 省略部分代码")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 发送网络请求拉取消息，等待直到有消息返回或者超时")]),s._v("\n    client"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("poll")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("pollTimer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("fetcher"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("hasCompletedFetches")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 省略部分代码")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 返回拉到的消息")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" fetcher"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("fetchedRecords")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br")])]),t("p",[s._v("这段代码的主要实现逻辑是:")]),s._v(" "),t("ol",[t("li",[s._v("如果缓存里面有未读取的消息, 直接返回这些消息;")]),s._v(" "),t("li",[s._v("构造拉取消息请求, 并发送;")]),s._v(" "),t("li",[s._v("发送网络请求并拉取消息, 等待直到有消息返回或者超时;")]),s._v(" "),t("li",[s._v("返回拉到的消息.")])]),s._v(" "),t("p",[s._v("在方法 fetcher.sendFetches() 的实现里面, "),t("strong",[s._v("Kafka 根据元数据的信息, 构造到所有需要的 Broker 的拉消息的 Request, 然后调用 client.Send() 方法将这些请求异步发送出去")]),s._v(". 并且注册了一个回调类来处理返回的 Response, 所有返回的 Response 被暂时存放在 Fetcher.completedFetches 中. 需要注意的是, 这时的 Request 并没有被真正发给各个 Broker, 而是被暂存在了 client.unsend 中等待被发送.")]),s._v(" "),t("p",[s._v("然后, 在调用 client.poll() 方法时, 会真正将之前构造的所有 Request 发送出去, 并处理收到的 Response.")]),s._v(" "),t("p",[s._v("最后, fetcher.fetchedRecords() 方法中, 将返回的 Response 反序列化后转换为消息列表, 返回给调用者.")]),s._v(" "),t("p",[s._v("综合上面的实现分析, 这里给出整个拉取消息的流程涉及到的相关类的类图, 在这个类图中, 为了便于理解, 并没有把所有类都绘制上去, 只是把本节两个流程相关的主要类和这些类里的关键属性画在了图中. 你可以配合这个类图和上面的时序图进行代码阅读.")]),s._v(" "),t("p",[t("img",{attrs:{src:"assets/image-20230522222707-dnnibny.png",alt:""}})]),s._v(" "),t("h5",{attrs:{id:"_3-小结-7"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-小结-7"}},[s._v("#")]),s._v(" 3.小结")]),s._v(" "),t("p",[s._v("本节一起分析了 Kafka Consumer 消费消息的实现过程. 在分析代码过程中, 不仅仅是要掌握 Kafka 整个消费的流程是是如何实现的, 更重要的是理解它这种完全异步的设计思想.")]),s._v(" "),t("p",[t("strong",[s._v("发送请求时, 构建 Request 对象, 暂存入发送队列, 但不立即发送, 而是等待合适的时机批量发送. 并且, 用回调或者 RequestFeuture 方式, 预先定义好如何处理响应的逻辑. 在收到 Broker 返回的响应之后, 也不会立即处理, 而是暂存在队列中, 择机处理. 那这个择机策略就比较复杂了, 有可能是需要读取响应的时候, 也有可能是缓冲区满了或是时间到了, 都有可能触发一次真正的网络请求, 也就是在 poll() 方法中发送所有待发送 Request 并处理所有 Response. ​")])]),s._v(" "),t("p",[s._v("这种设计的好处是, 不需要维护用于异步发送的和处理响应的线程, 并且能充分发挥批量处理的优势, 这也是 Kafka 的性能非常好的原因之一. 这种设计的缺点也非常的明显, 就是实现的复杂度太大了, 如果没有深厚的代码功力, 很难驾驭这么复杂的设计, 并且后续维护的成本也很高.")]),s._v(" "),t("p",[t("strong",[s._v("总体来说, 不推荐把代码设计得这么复杂. 代码结构简单, 清晰, 易维护是在设计过程中需要考虑的一个非常重要的因素. 很多时候为了获得较好的代码结构, 在可接受的范围内, 去牺牲一些性能, 也是划算的")]),s._v(".")]),s._v(" "),t("h4",{attrs:{id:"kafka和rocketmq的消息复制实现的差异点在哪"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#kafka和rocketmq的消息复制实现的差异点在哪"}},[s._v("#")]),s._v(" Kafka和RocketMQ的消息复制实现的差异点在哪?")]),s._v(" "),t("p",[s._v('之前在 "如何确定消息不丢失" 部分提到, 消息队列在收发两端, 主要是依靠业务代码, 配合请求确认的机制, 来保证消息不会丢失的. 而在服务端, '),t("strong",[s._v("一般采用持久化和复制的方式来保证不丢消息")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("把消息复制到多个节点上, 不仅可以解决丢消息的问题, 还可以保证消息服务的高可用")]),s._v(". 即使某一个节点宕机了, 还可以继续使用其他节点来收发消息. 所以大部分生产系统, 都会把消息队列配置成"),t("strong",[s._v("集群模式")]),s._v(", 并开启消息复制, 来保证系统的高可用和数据可靠性.")]),s._v(" "),t("p",[s._v("本节讲一下消息复制需要解决的一些问题, 以及 RocketMQ 和 Kafka 都是如何应对这些问题来实现复制的.")]),s._v(" "),t("h5",{attrs:{id:"_1-消息复制面临什么问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-消息复制面临什么问题"}},[s._v("#")]),s._v(" 1.消息复制面临什么问题?")]),s._v(" "),t("p",[s._v("我们希望消息队列最好能兼具高性能, 高可用并且还能提供数据一致性的保证. 虽然很多消息队列产品宣称三个特性全都支持, 但这都是有前置条件的.")]),s._v(" "),t("p",[s._v("首先来说性能. 任何的复制实现方式, 数据的写入性能一定是不如单节点的. 这个很好理解, 因为无论采用哪种复制实现方式, 都需要数据被写入到多个节点之后再返回, 性能一定是不如只写入一个节点的.")]),s._v(" "),t("p",[t("strong",[s._v("需要写入的节点数量越多, 可用性和数据可靠性就越好, 但是写入性能就越低, 这是一个天然的矛盾. ​")]),s._v("不过复制对消费的性能影响不大, 不管采用哪种复制方式, 消费消息的时候, 都只是选择多副本中一个节点去读数据而已, 这和单节点消费并没有差别.")]),s._v(" "),t("p",[s._v('再来说一致性, 消息队列对数据一致性的要求, 既包括了 "不丢消息" 这个要求, 也包括 "严格顺序" 的要求. '),t("strong",[s._v('如果要确保数据一致性, 必须采用 "主-从" 的复制方式, 这个结论是有严格的数学论证的, 只要记住就可以了')]),s._v(".")]),s._v(" "),t("p",[s._v("在 "),t("strong",[s._v('"主-从" ​')]),s._v("模式下, 数据先写入到主节点上, 从节点只从主节点上复制数据, 如果出现主从数据不一致的情况, 必须以主节点上的数据为准. 这里面需要注意一下, 这里面的主节点并不是不可变的, 在很多的复制实现中, 当主节点出现问题的时候, 其他节点可以通过选举的方式, 变成主节点. "),t("strong",[s._v("只要保证在任何一个时刻, 集群的主节点数不能超过 1 个, 就可以确保数据一致性")]),s._v(".")]),s._v(" "),t("p",[s._v("最后说一下高可用. 既然必须要采用主从的复制方式, 高可用需要解决的就是, 当某个主节点宕机的时候, 尽快再选出一个主节点来接替宕机的主节点.")]),s._v(" "),t("p",[s._v("比较快速的实现方式是, 使用一个"),t("strong",[s._v("第三方的管理服务")]),s._v("来管理这些节点, 发现某个主节点宕机的时候, 由管理服务来指定一个新的主节点. 但引入管理服务会带来一系列问题, 比如管理服务本身的高可用, 数据一致性如何保证?")]),s._v(" "),t("p",[s._v("有的消息队列选择自选举的方式, 由还存活的这些节点通过投票, 来选出一个新的主节点, 这种投票的实现方式, 它的优点是没有外部依赖, 可以实现自我管理. 缺点就是投票的实现都比较复杂, 并且选举的过程是比较慢的, 几秒至几十秒都有可能, 在选出新的主节点前, 服务一直是不可用的.")]),s._v(" "),t("p",[s._v("大部分复制的实现, 都不会选择把消息写入全部副本再返回确认, 因为这样虽然可以保证数据一致性, 但是一旦这些副本中有任何一个副本宕机, 写入就会卡死了. "),t("strong",[s._v("如果只把消息写入到一部分副本就认为写入成功并返回确认, 就可以解决卡死的问题, 并且性能也会比写全部副本好很多")]),s._v(".")]),s._v(" "),t("p",[s._v("到底写入多少个副本算写入成功呢? 这又是一个非常难抉择的问题.")]),s._v(" "),t("p",[s._v('假设集群采用 "一主二从三副本" 的模式, 如果只要消息写入到两个副本就算是写入成功了, 那这三个节点最多允许宕机一个节点, 否则就没法提供服务了. 如果说把要求写入的副本数量降到 1, 只要消息写入到主节点就算成功了, 那三个节点中, 可以允许宕机两个节点, 系统依然可以提供服务, 这个可用性就更好一些. 但有可能出现一种情况: 主节点有一部分消息还没来得复制到任何一个从节点上, 主节点就宕机了, 这时候就会丢消息, 数据一致性又没有办法保证了.')]),s._v(" "),t("p",[s._v("上面的内容还没有涉及到任何复制或者选举的方法和算法, 都是最朴素, 最基本的原理. 可以看出这里面是有很多天然的矛盾, 所以"),t("strong",[s._v("目前并没有一种完美的实现方案能够兼顾高性能, 高可用和一致性. ​")])]),s._v(" "),t("p",[s._v("不同的消息队列选择了不同的复制实现方式, 这些实现方式都有各自的优缺点, 在高性能, 高可用和一致性方面提供的能力也是各有高低. 下面一起来看一下 RocketMQ 和 Kafka 分别是如何来实现复制的.")]),s._v(" "),t("h5",{attrs:{id:"_2-rocketmq如何实现复制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-rocketmq如何实现复制"}},[s._v("#")]),s._v(" 2.RocketMQ如何实现复制?")]),s._v(" "),t("p",[s._v("RocketMQ 在 2018 年引入 Deldger, 增加了一种全新的复制方式.")]),s._v(" "),t("p",[s._v("先来说一下传统的复制方式.")]),s._v(" "),t("p",[s._v("在 RocketMQ 中, 复制的基本单位是 "),t("strong",[s._v("Broker")]),s._v(", 也就是服务端的进程. 复制采用的也是"),t("strong",[s._v("主从方式")]),s._v(", 通常情况下配置成一主一从, 也可以支持一主多从.")]),s._v(" "),t("p",[s._v("RocketMQ 提供了两种复制方式, 一种是"),t("strong",[s._v("异步复制")]),s._v(', 消息先发送到主节点上, 就返回"写入成功", 然后消息再异步复制到从节点上. 另外一种方式是'),t("strong",[s._v("同步双写")]),s._v(', 消息同步双写到主从节点上, 主从都写成功, 才返回"写入成功". 这两种方式本质上的区别是, '),t("strong",[s._v('写入多少个副本再返回"写入成功"的问题, 异步复制需要的副本数是 1, 同步双写需要的副本数是 2')]),s._v(".")]),s._v(" "),t("p",[s._v('前面讲过, 如果在返回 "写入成功" 前, 需要写入的副本数不够多, 那就会丢消息. 对 RocketMQ 来说, 如果采用异步复制的方式会不会丢消息呢? '),t("strong",[s._v("答案是并不会丢消息")]),s._v(".")]),s._v(" "),t("p",[s._v("分析一下为什么不会丢消息.")]),s._v(" "),t("p",[s._v("在 RocketMQ 中, "),t("strong",[s._v("Broker 的主从关系是通过配置固定的, 不支持动态切换")]),s._v("."),t("strong",[s._v("​ 如果主节点宕机, 生产者就不能再生产消息了, 消费者可以自动切换到从节点继续进行消费")]),s._v(". 这时候, 即使有一些消息没有来得及复制到从节点上, 这些消息依然躺在主节点的磁盘上, 除非是主节点的磁盘坏了, 否则等主节点重新恢复服务的时候, 这些消息依然可以继续复制到从节点上, 也可以继续消费, 不会丢消息, 消息的顺序也是没有问题的.")]),s._v(" "),t("p",[s._v("从设计上来讲, "),t("strong",[s._v("RocketMQ 的这种主从复制方式, 牺牲了可用性, 换取了比较好的性能和数据一致性. ​")])]),s._v(" "),t("p",[s._v("那 RocketMQ 又是如何解决可用性的问题的呢? 一对主从节点可用性不行, 多来几对主从节点不就解决了? "),t("strong",[s._v("RocketMQ 支持把一个主题分布到多对主从节点上去, 每对主从节点中承担主题中的一部分队列, 如果某个主节点宕机了, 会自动切换到其他主节点上继续发消息, 这样既解决了可用性的问题, 还可以通过水平扩容来提升 Topic 总体的性能")]),s._v(".")]),s._v(" "),t("p",[s._v("这种复制方式在大多数场景下都可以很好的工作, 但也面临一些问题.")]),s._v(" "),t("p",[t("strong",[s._v("比如在需要保证消息严格顺序的场景下, 由于在主题层面无法保证严格顺序, 所以必须指定队列来发送消息, 对于任何一个队列, 它一定是落在一组特定的主从节点上, 如果这个主节点宕机, 其他的主节点是无法替代这个主节点的, 否则就无法保证严格顺序. 在这种复制模式下, 严格顺序和高可用只能选择一个.")])]),s._v(" "),t("p",[s._v("RocketMQ 引入 Dledger, 使用新的复制方式, 可以很好地解决这个问题. 来看一下 Dledger 是怎么来复制的.")]),s._v(" "),t("p",[t("strong",[s._v("Dledger 在写入消息的时候, 要求至少消息复制到半数以上的节点之后, 才给客户端返回写入成功, 并且它是支持通过选举来动态切换主节点的. ​")])]),s._v(" "),t("p",[s._v("同样拿 3 个节点举例说明一下. 当主节点宕机的时候, 2 个从节点会通过投票选出一个新的主节点来继续提供服务, 相比主从的复制模式, 解决了可用性的问题. 由于消息要至少复制到 2 个节点上才会返回写入成功, 即使主节点宕机了, 也至少有一个节点上的消息是和主节点一样的. "),t("strong",[s._v("Dledger 在选举时, 总会把数据和主节点一样的从节点选为新的主节点, 这样就保证了数据的一致性, 既不会丢消息, 还可以保证严格顺序")]),s._v(".")]),s._v(" "),t("p",[s._v("当然 Dledger 的复制方式也不是完美的, 依然存在一些不足: "),t("strong",[s._v("比如选举过程中不能提供服务")]),s._v(". 最少需要 3 个节点才能保证数据一致性, 3 节点时, 只能保证 1 个节点宕机时可用, 如果 2 个节点同时宕机, 即使还有 1 个节点存活也无法提供服务, 资源的利用率比较低. 另外由于至少要复制到半数以上的节点才返回写入成功, 性能上也不如主从异步复制的方式快.")]),s._v(" "),t("p",[s._v("讲完了 RocketMQ, 再来看看 Kafka 是怎么来实现复制的.")]),s._v(" "),t("h5",{attrs:{id:"_3-kafka是如何实现复制的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-kafka是如何实现复制的"}},[s._v("#")]),s._v(" 3.Kafka是如何实现复制的?")]),s._v(" "),t("p",[s._v("Kafka 中, 复制的"),t("strong",[s._v("基本单位是分区")]),s._v(". 每个分区的几个副本之间, 构成一个小的复制集群, "),t("strong",[s._v("Broker 只是这些分区副本的容器, 所以 Kafka 的 Broker 是不分主从的")]),s._v(".")]),s._v(" "),t("p",[s._v("分区的多个副本中也是采用一主多从的方式. Kafka 在写入消息的时候, 采用的也是"),t("strong",[s._v("异步复制")]),s._v('的方式. 消息在写入到主节点之后, 并不会马上返回写入成功, 而是等待足够多的节点都复制成功后再返回. 在 Kafka 中这个 "足够多" 是多少呢? Kafka 的设计哲学是, 让用户自己来决定.')]),s._v(" "),t("p",[s._v('Kafka 为这个 "足够多" 创造了一个专有名词: '),t("strong",[s._v("ISR")]),s._v('(In Sync Replicas), 翻译过来就是 "保持数据同步的副本". ISR 的数量是可配的, 但需要注意的是, 这个 ISR 中是包含主节点的.')]),s._v(" "),t("p",[t("strong",[s._v("Kafka 使用 ZooKeeper 来监控每个分区的多个节点, 如果发现某个分区的主节点宕机了, Kafka 会利用 ZooKeeper 来选出一个新的主节点, 这样解决了可用性的问题")]),s._v(". ZooKeeper 是一个分布式协调服务, 后面会专门介绍 ZooKeeper. 选举的时候, 会从所有 ISR 节点中来选新的主节点, "),t("strong",[s._v("这样可以保证数据一致性")]),s._v(".")]),s._v(" "),t("p",[s._v("默认情况下, 如果所有的 ISR 节点都宕机了, 分区就无法提供服务了. 也可以选择配置成让分区继续提供服务, 这样只要有一个节点还活着, 就可以提供服务, "),t("strong",[s._v("代价是无法保证数据一致性, 会丢消息")]),s._v(".")]),s._v(" "),t("p",[s._v("Kafka 的这种高度可配置的复制方式, 优点是非常灵活, 可以通过配置这些复制参数, "),t("strong",[s._v("在可用性, 性能和一致性这几方面做灵活的取舍")]),s._v(", 缺点就是学习成本比较高.")]),s._v(" "),t("h5",{attrs:{id:"_4-总结-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-总结-2"}},[s._v("#")]),s._v(" 4.总结")]),s._v(" "),t("p",[s._v("本节主要讲了一下消息复制需要面临的问题以及 RocketMQ 和 Kafka 都是如何应对这些问题来实现复制的.")]),s._v(" "),t("p",[s._v("RocketMQ 提供新, 老两种复制方式: 传统的主从模式和新的基于 Dledger 的复制方式. 传统的主从模式性能更好, 但灵活性和可用性稍差, 而基于 Dledger 的复制方式, 在 Broker 故障的时候可以自动选举出新节点, 可用性更好, 性能稍差, 并且资源利用率更低一些. Kafka 提供了基于 ISR 的更加灵活可配置的复制方式, 用户可以自行配置, 在可用性, 性能和一致性这几方面根据系统的情况来做取舍. 但是这种灵活的配置方式学习成本较高.")]),s._v(" "),t("p",[t("strong",[s._v("并没有一种完美的复制方案, 可以同时能够兼顾高性能, 高可用和一致性")]),s._v(". 需要根据实际的业务需求, 先做出取舍, 然后再去配置消息队列的复制方式.")]),s._v(" "),t("h4",{attrs:{id:"rocketmq客户端如何在集群中找到正确的节点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq客户端如何在集群中找到正确的节点"}},[s._v("#")]),s._v(" RocketMQ客户端如何在集群中找到正确的节点?")]),s._v(" "),t("p",[s._v("前面讲解 RocketMQ 的生产者启动流程时提到过, 生产者只要配置一个接入地址, 就可以访问整个集群, 并不需要客户端配置每个 Broker 的地址. RocketMQ 会自动根据要访问的主题名称和队列序号, 找到对应的 Broker 地址. 如果 Broker 发生宕机, 客户端还会自动切换到新的 Broker 节点上, 这些对于用户代码来说都是透明的.")]),s._v(" "),t("p",[t("strong",[s._v("这些功能都是由 NameServer 协调 Broker 和客户端共同实现的, 其中 NameServer 的作用是最关键的. ​")])]),s._v(" "),t("p",[s._v("展开来讲, 不仅仅是 RocketMQ, 任何一个弹性分布式集群, 都需要一个类似于 NameServer 服务, 来帮助访问集群的客户端寻找集群中的节点, 这个服务一般称为 "),t("strong",[s._v("NamingService")]),s._v(". 比如像 Dubbo 这种 RPC 框架, 它的注册中心就承担了 NamingService 的职责. 在 Flink 中, 则是 JobManager 承担了 NamingService 的职责. 也就是说, "),t("strong",[s._v("这种使用 NamingService 服务来协调集群的设计, 在分布式集群的架构设计中, 是一种非常通用的方法")]),s._v(".")]),s._v(" "),t("p",[s._v("本节一起来分析一下 NameServer 的源代码, 看一下 NameServer 是如何协调集群中众多的 Broker 和客户端的.")]),s._v(" "),t("h5",{attrs:{id:"_1-nameserver是如何提供服务的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-nameserver是如何提供服务的"}},[s._v("#")]),s._v(" 1.NameServer是如何提供服务的?")]),s._v(" "),t("p",[t("strong",[s._v("在 RocketMQ 中, NameServer 是一个独立的进程, 为 Broker, 生产者和消费者提供服务. NameServer 最主要的功能就是, 为客户端提供寻址服务, 协助客户端找到主题对应的 Broker 地址. 此外, NameServer 还负责监控每个 Broker 的存活状态. ​")])]),s._v(" "),t("p",[s._v("NameServer 支持只部署一个节点, 也支持部署多个节点组成一个集群, 这样可以避免单点故障. "),t("strong",[s._v("在集群模式下, NameServer 各节点之间是")]),s._v("​**==不需要任何通信=="),t("strong",[s._v("​")]),s._v("的, 也不会通过任何方式互相感知, 每个节点都可以独立提供全部服务**.")]),s._v(" "),t("p",[s._v("一起通过这个图来看一下, 在 RocketMQ 集群中, NameServer 是如何配合 Broker, 生产者和消费者一起工作的. 这个图来自"),t("a",{attrs:{href:"https://github.com/apache/rocketmq/tree/master/docs",target:"_blank",rel:"noopener noreferrer"}},[s._v("RocketMQ 的官方文档"),t("OutboundLink")],1),s._v(".")]),s._v(" "),t("p",[t("img",{attrs:{src:"assets/image-20230522222800-maj3xhw.jpg",alt:""}})]),s._v(" "),t("p",[t("strong",[s._v("每个 Broker 都需要和所有的 NameServer 节点进行通信")]),s._v(". 当 Broker 保存的 Topic 信息发生变化的时候, 它会主动通知所有的 NameServer 更新路由信息, "),t("strong",[s._v("为了保证数据一致性, Broker 还会定时给所有的 NameServer 节点上报路由信息")]),s._v(". 这个上报路由信息的 RPC 请求, 也同时起到 Broker 与 NameServer 之间的心跳作用, NameServer 依靠这个心跳来确定 Broker 的健康状态.")]),s._v(" "),t("p",[s._v("因为每个 NameServer 节点都可以独立提供完整的服务, 所以对于客户端来说, 包括生产者和消费者, 只需要"),t("strong",[s._v("选择任意一个 NameServer 节点来查询路由信息就可以")]),s._v("了. 客户端在生产或消费某个主题的消息之前, 会先从 NameServer 上查询这个主题的路由信息, 然后根据路由信息获取到当前主题和队列对应的 Broker 物理地址, 再连接到 Broker 节点上进行生产或消费.")]),s._v(" "),t("p",[s._v("如果 NameServer 检测到与 Broker 的"),t("strong",[s._v("连接中断")]),s._v("了, NameServer 会认为这个 Broker 不再能提供服务. NameServer 会立即把这个 Broker 从路由信息中移除掉, 避免客户端连接到一个不可用的 Broker 上去. 而客户端在与 Broker 通信失败之后, 会重新去 NameServer 上拉取路由信息, 然后连接到其他 Broker 上继续生产或消费消息, 这样就实现了自动切换失效 Broker 的功能.")]),s._v(" "),t("p",[s._v("此外, NameServer 还提供一个类似 Redis 的 KV 读写服务, 这个不是主要的流程, 这里就不展开讲.")]),s._v(" "),t("p",[s._v("下面分析一下 NameServer 的源代码, 看一下这些服务都是如何实现的.")]),s._v(" "),t("h5",{attrs:{id:"_2-nameserver的总体结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-nameserver的总体结构"}},[s._v("#")]),s._v(" 2.NameServer的总体结构")]),s._v(" "),t("p",[s._v("由于 NameServer 的结构非常简单, 排除 KV 读写相关的类之后, 一共只有 6 个类, 这里面直接给出这 6 个类的说明:")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("NamesrvStartup")]),s._v(": 程序入口.")]),s._v(" "),t("li",[t("strong",[s._v("NamesrvController")]),s._v(": NameServer 的总控制器, 负责所有服务的生命周期管理.")]),s._v(" "),t("li",[t("strong",[s._v("RouteInfoManager")]),s._v(": NameServer ==最核心==的实现类, 负责保存和管理集群路由信息.")]),s._v(" "),t("li",[t("strong",[s._v("BrokerHousekeepingService")]),s._v(": 监控 Broker 连接状态的代理类.")]),s._v(" "),t("li",[t("strong",[s._v("DefaultRequestProcessor")]),s._v(": 负责处理客户端和 Broker 发送过来的 RPC 请求的处理器.")]),s._v(" "),t("li",[t("strong",[s._v("ClusterTestRequestProcessor")]),s._v(": 用于测试的请求处理器.")])]),s._v(" "),t("p",[s._v("RouteInfoManager 这个类中保存了所有的路由信息, 这些路由信息都是保存在==内存==中, 并且没有持久化的. 在代码中, 这些路由信息保存在 RouteInfoManager 的几个成员变量中:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BrokerData")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Comparable")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BrokerData")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HashMap")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* topic */")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("QueueData")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" topicQueueTable"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HashMap")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* brokerName */")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BrokerData")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" brokerAddrTable"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HashMap")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* clusterName */")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Set")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* brokerName */")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" clusterAddrTable"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HashMap")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* brokerAddr */")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BrokerLiveInfo")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" brokerLiveTable"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HashMap")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* brokerAddr */")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* Filter Server */")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" filterServerTable"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("以上代码中的这 5 个 Map 对象, 保存了"),t("strong",[s._v("集群所有的 Broker 和主题的路由信息")]),s._v(".")]),s._v(" "),t("p",[s._v("topicQueueTable 保存的是"),t("strong",[s._v("主题和队列")]),s._v("信息, 其中每个队列信息对应的类 QueueData 中, 还保存了 brokerName. 需要注意的是, "),t("strong",[s._v("这个 brokerName 并不真正是某个 Broker 的物理地址, 它对应的一组 Broker 节点, 包括一个主节点和若干个从节点")]),s._v(".")]),s._v(" "),t("p",[s._v("brokerAddrTable 中保存了集群中每个 brokerName 对应 Broker 信息, 每个 Broker 信息用一个 BrokerData 对象表示:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BrokerData")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Comparable")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BrokerData")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" cluster"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" brokerName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HashMap")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Long")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* brokerId */")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* broker address */")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" brokerAddrs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[t("strong",[s._v("BrokerData 中保存了集群名称 cluster, brokerName 和一个保存 Broker 物理地址的 Map: brokerAddrs, 它的 Key 是 BrokerID, Value 就是这个 BrokerID 对应的 Broker 的物理地址. ​")])]),s._v(" "),t("p",[s._v("下面这三个 map 相对没那么重要, 简单说明如下:")]),s._v(" "),t("ul",[t("li",[s._v("brokerLiveTable 中, 保存了每个 Broker 当前的动态信息, 包括心跳更新时间, 路由数据版本等等.")]),s._v(" "),t("li",[s._v("clusterAddrTable 中, 保存的是集群名称与 BrokerName 的对应关系.")]),s._v(" "),t("li",[s._v("filterServerTable 中, 保存了每个 Broker 对应的消息过滤服务的地址, 用于服务端消息过滤.")])]),s._v(" "),t("p",[s._v("可以看到, 在 NameServer 的 RouteInfoManager 中, 主要的"),t("strong",[s._v("路由信息就是由 topicQueueTable 和 brokerAddrTable 这两个 Map 来保存的")]),s._v(".")]),s._v(" "),t("p",[s._v("在了解了总体结构和数据结构之后, 再来看一下实现的流程.")]),s._v(" "),t("h5",{attrs:{id:"_3-nameserver如何处理broker注册的路由信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-nameserver如何处理broker注册的路由信息"}},[s._v("#")]),s._v(" 3.NameServer如何处理Broker注册的路由信息?")]),s._v(" "),t("p",[s._v("首先来看一下, NameServer 是如何处理 Broker 注册的路由信息的.")]),s._v(" "),t("p",[s._v("NameServer 处理 Broker 和客户端所有 RPC 请求的入口方法是: DefaultRequestProcessor#processRequest(), 其中处理 Broker 注册请求的代码如下:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("DefaultRequestProcessor")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("NettyRequestProcessor")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RemotingCommand")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("processRequest")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ChannelHandlerContext")]),s._v(" ctx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RemotingCommand")]),s._v(" request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RemotingCommandException")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("switch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getCode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RequestCode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("REGISTER_BROKER")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Version")]),s._v(" brokerVersion "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MQVersion")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("value2Version")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getVersion")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("brokerVersion"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ordinal")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MQVersion"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Version")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("V3_0_11")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ordinal")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("registerBrokerWithFilterServer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ctx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("registerBroker")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ctx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br")])]),t("p",[s._v("这是一个非常典型的"),t("strong",[s._v("处理 Request 的路由分发器")]),s._v(", 根据 request.getCode() 来分发请求到对应的处理器中. Broker 发给 NameServer 注册请求的 Code 为 REGISTER_BROKER, 在代码中根据 Broker 的版本号不同, 分别有两个不同的处理实现方法: registerBrokerWithFilterServer() 和 registerBroker(). 这两个方法实现的流程是差不多的, 实际上都是调用了 RouteInfoManager#registerBroker() 方法, 直接看这个方法的代码:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RegisterBrokerResult")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("registerBroker")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" clusterName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" brokerAddr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" brokerName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" brokerId"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" haServerAddr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TopicConfigSerializeWrapper")]),s._v(" topicConfigWrapper"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" filterServerList"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Channel")]),s._v(" channel"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RegisterBrokerResult")]),s._v(" result "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RegisterBrokerResult")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 加写锁，防止并发修改数据")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lock"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("writeLock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("lockInterruptibly")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 更新 clusterAddrTable")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Set")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" brokerNames "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("clusterAddrTable"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("clusterName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" brokerNames"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                brokerNames "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HashSet")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("clusterAddrTable"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("clusterName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" brokerNames"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            brokerNames"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("brokerName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 更新 brokerAddrTable")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" registerFirst "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BrokerData")]),s._v(" brokerData "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("brokerAddrTable"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("brokerName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" brokerData"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                registerFirst "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 标识需要先注册")]),s._v("\n                brokerData "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BrokerData")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("clusterName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" brokerName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HashMap")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Long")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("brokerAddrTable"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("brokerName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" brokerData"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Map")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Long")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" brokerAddrsMap "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" brokerData"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getBrokerAddrs")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 更新 brokerAddrTable 中的 brokerData")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Iterator")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Entry")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Long")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" it "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" brokerAddrsMap"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("entrySet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("iterator")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("it"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("hasNext")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Entry")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Long")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" item "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" it"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("next")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" brokerAddr "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" brokerAddr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("equals")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("item"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getValue")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" brokerId "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" item"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getKey")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    it"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("remove")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果是新注册的 Master Broker，或者 Broker 中的路由信息变了，需要更新 topicQueueTable")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" oldAddr "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" brokerData"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getBrokerAddrs")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("brokerId"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" brokerAddr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            registerFirst "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" registerFirst "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" oldAddr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" topicConfigWrapper\n                "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MixAll")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MASTER_ID")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" brokerId"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isBrokerTopicConfigChanged")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("brokerAddr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" topicConfigWrapper"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getDataVersion")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" registerFirst"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConcurrentMap")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TopicConfig")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" tcTable "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("\n                        topicConfigWrapper"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getTopicConfigTable")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("tcTable "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Map"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Entry")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TopicConfig")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" entry "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" tcTable"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("entrySet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("createAndUpdateQueueData")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("brokerName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" entry"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getValue")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 更新 brokerLiveTable")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BrokerLiveInfo")]),s._v(" prevBrokerLiveInfo "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("brokerLiveTable"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("brokerAddr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BrokerLiveInfo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("currentTimeMillis")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                    topicConfigWrapper"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getDataVersion")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                    channel"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                    haServerAddr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" prevBrokerLiveInfo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                log"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("info")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"new broker registered, {} HAServer: {}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" brokerAddr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" haServerAddr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 更新 filterServerTable")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("filterServerList "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("filterServerList"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isEmpty")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("filterServerTable"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("remove")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("brokerAddr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("filterServerTable"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("brokerAddr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" filterServerList"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果是 Slave Broker，需要在返回的信息中带上 master 的相关信息")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MixAll")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MASTER_ID")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" brokerId"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" masterAddr "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" brokerData"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getBrokerAddrs")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MixAll")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MASTER_ID")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("masterAddr "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BrokerLiveInfo")]),s._v(" brokerLiveInfo "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("brokerLiveTable"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("masterAddr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("brokerLiveInfo "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                        result"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setHaServerAddr")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("brokerLiveInfo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getHaServerAddr")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                        result"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setMasterAddr")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("masterAddr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("finally")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 释放写锁")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lock"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("writeLock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("unlock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Exception")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        log"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("error")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"registerBroker Exception"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" result"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br"),t("span",{staticClass:"line-number"},[s._v("59")]),t("br"),t("span",{staticClass:"line-number"},[s._v("60")]),t("br"),t("span",{staticClass:"line-number"},[s._v("61")]),t("br"),t("span",{staticClass:"line-number"},[s._v("62")]),t("br"),t("span",{staticClass:"line-number"},[s._v("63")]),t("br"),t("span",{staticClass:"line-number"},[s._v("64")]),t("br"),t("span",{staticClass:"line-number"},[s._v("65")]),t("br"),t("span",{staticClass:"line-number"},[s._v("66")]),t("br"),t("span",{staticClass:"line-number"},[s._v("67")]),t("br"),t("span",{staticClass:"line-number"},[s._v("68")]),t("br"),t("span",{staticClass:"line-number"},[s._v("69")]),t("br"),t("span",{staticClass:"line-number"},[s._v("70")]),t("br"),t("span",{staticClass:"line-number"},[s._v("71")]),t("br"),t("span",{staticClass:"line-number"},[s._v("72")]),t("br"),t("span",{staticClass:"line-number"},[s._v("73")]),t("br"),t("span",{staticClass:"line-number"},[s._v("74")]),t("br"),t("span",{staticClass:"line-number"},[s._v("75")]),t("br"),t("span",{staticClass:"line-number"},[s._v("76")]),t("br"),t("span",{staticClass:"line-number"},[s._v("77")]),t("br"),t("span",{staticClass:"line-number"},[s._v("78")]),t("br"),t("span",{staticClass:"line-number"},[s._v("79")]),t("br"),t("span",{staticClass:"line-number"},[s._v("80")]),t("br"),t("span",{staticClass:"line-number"},[s._v("81")]),t("br"),t("span",{staticClass:"line-number"},[s._v("82")]),t("br"),t("span",{staticClass:"line-number"},[s._v("83")]),t("br"),t("span",{staticClass:"line-number"},[s._v("84")]),t("br"),t("span",{staticClass:"line-number"},[s._v("85")]),t("br"),t("span",{staticClass:"line-number"},[s._v("86")]),t("br"),t("span",{staticClass:"line-number"},[s._v("87")]),t("br"),t("span",{staticClass:"line-number"},[s._v("88")]),t("br"),t("span",{staticClass:"line-number"},[s._v("89")]),t("br"),t("span",{staticClass:"line-number"},[s._v("90")]),t("br"),t("span",{staticClass:"line-number"},[s._v("91")]),t("br"),t("span",{staticClass:"line-number"},[s._v("92")]),t("br"),t("span",{staticClass:"line-number"},[s._v("93")]),t("br"),t("span",{staticClass:"line-number"},[s._v("94")]),t("br"),t("span",{staticClass:"line-number"},[s._v("95")]),t("br"),t("span",{staticClass:"line-number"},[s._v("96")]),t("br"),t("span",{staticClass:"line-number"},[s._v("97")]),t("br"),t("span",{staticClass:"line-number"},[s._v("98")]),t("br"),t("span",{staticClass:"line-number"},[s._v("99")]),t("br"),t("span",{staticClass:"line-number"},[s._v("100")]),t("br"),t("span",{staticClass:"line-number"},[s._v("101")]),t("br")])]),t("p",[s._v("上面这段代码比较长, 但总体结构很简单, 就是"),t("strong",[s._v("根据 Broker 请求过来的路由信息, 依次对比并更新 clusterAddrTable, brokerAddrTable, topicQueueTable, brokerLiveTable 和 filterServerTable 这 5 个保存集群信息和路由信息的 Map 对象中的数据")]),s._v(".")]),s._v(" "),t("p",[s._v("另外, 在 RouteInfoManager 中, 这 5 个 Map 作为一个整体资源, 使用了一个"),t("strong",[s._v("读写锁来做并发控制, 避免并发更新和更新过程中读到不一致的数据问题")]),s._v('. 这个读写锁的使用方法与之前 "如何正确使用锁保护共享数据, 协调异步线程?" 中讲到的方法是一样的.')]),s._v(" "),t("h5",{attrs:{id:"_4-客户端如何寻找broker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-客户端如何寻找broker"}},[s._v("#")]),s._v(" 4.客户端如何寻找Broker?")]),s._v(" "),t("p",[s._v("下面来看一下 NameServer 如何帮助客户端来找到对应的 Broker. "),t("strong",[s._v("对于客户端来说, 无论是生产者还是消费者, 通过主题来寻找 Broker 的流程是一样的, 使用的也是同一份实现")]),s._v(". 客户端在启动后, 会启动一个定时器, 定期从 NameServer 上拉取相关主题的路由信息, 然后缓存在本地内存中, 在需要的时候使用. 每个主题的路由信息用一个 TopicRouteData 对象来表示:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TopicRouteData")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RemotingSerializable")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("QueueData")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" queueDatas"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BrokerData")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" brokerDatas"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("其中 queueDatas 保存了主题中的所有"),t("strong",[s._v("队列信息")]),s._v(", brokerDatas 中保存了主题相关的所有 Broker 信息. 客户端选定了队列后, 可以在对应的 QueueData 中找到对应的 BrokerName, 然后用这个 BrokerName 找到对应的 BrokerData 对象, 最终找到对应的 Master Broker 的物理地址. 这部分代码在 org.apache.rocketmq.client.impl.factory."),t("strong",[s._v("MQClientInstance")]),s._v(" 这个类中.")]),s._v(" "),t("p",[s._v("下面看一下在 NameServer 中, 是如何实现"),t("strong",[s._v("根据主题来查询 TopicRouteData")]),s._v(" 的.")]),s._v(" "),t("p",[s._v("NameServer 处理客户端请求和处理 Broker 请求的流程是一样的, 都是通过"),t("strong",[s._v("路由分发器将请求分发的对应的处理方法中")]),s._v(", 直接看具体的实现方法 RouteInfoManager#pickupTopicRouteData():")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TopicRouteData")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("pickupTopicRouteData")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" topic"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 初始化返回数据 topicRouteData")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TopicRouteData")]),s._v(" topicRouteData "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TopicRouteData")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" foundQueueData "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" foundBrokerData "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Set")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" brokerNameSet "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HashSet")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BrokerData")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" brokerDataList "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LinkedList")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BrokerData")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    topicRouteData"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setBrokerDatas")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("brokerDataList"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HashMap")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" filterServerMap "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HashMap")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    topicRouteData"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setFilterServerTable")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("filterServerMap"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 加读锁")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lock"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("readLock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("lockInterruptibly")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 先获取主题对应的队列信息")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("QueueData")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" queueDataList "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("topicQueueTable"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("topic"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("queueDataList "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n                "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 把队列信息返回值中")]),s._v("\n                topicRouteData"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setQueueDatas")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("queueDataList"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                foundQueueData "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n                "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 遍历队列，找出相关的所有 BrokerName")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Iterator")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("QueueData")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" it "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" queueDataList"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("iterator")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("it"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("hasNext")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("QueueData")]),s._v(" qd "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" it"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("next")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    brokerNameSet"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("qd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getBrokerName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n                "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 遍历这些 BrokerName，找到对应的 BrokerData，并写入返回结果中")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" brokerName "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" brokerNameSet"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BrokerData")]),s._v(" brokerData "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("brokerAddrTable"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("brokerName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" brokerData"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BrokerData")]),s._v(" brokerDataClone "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BrokerData")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("brokerData"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getCluster")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" brokerData"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getBrokerName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HashMap")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Long")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" brokerData\n                            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getBrokerAddrs")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("clone")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                        brokerDataList"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("brokerDataClone"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                        foundBrokerData "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" brokerAddr "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" brokerDataClone"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getBrokerAddrs")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("values")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" filterServerList "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("filterServerTable"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("brokerAddr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                            filterServerMap"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("brokerAddr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" filterServerList"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("finally")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 释放读锁")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lock"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("readLock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("unlock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Exception")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        log"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("error")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"pickupTopicRouteData Exception"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n    log"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("debug")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"pickupTopicRouteData {} {}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" topic"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" topicRouteData"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("foundBrokerData "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" foundQueueData"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" topicRouteData"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br"),t("span",{staticClass:"line-number"},[s._v("59")]),t("br"),t("span",{staticClass:"line-number"},[s._v("60")]),t("br"),t("span",{staticClass:"line-number"},[s._v("61")]),t("br"),t("span",{staticClass:"line-number"},[s._v("62")]),t("br"),t("span",{staticClass:"line-number"},[s._v("63")]),t("br"),t("span",{staticClass:"line-number"},[s._v("64")]),t("br")])]),t("p",[s._v("这个方法的实现流程是这样的:")]),s._v(" "),t("ol",[t("li",[s._v("初始化返回的 topicRouteData 后, 获取读锁.")]),s._v(" "),t("li",[s._v("在 topicQueueTable 中获取主题对应的队列信息, 并写入返回结果中.")]),s._v(" "),t("li",[s._v("遍历队列, 找出相关的所有 BrokerName.")]),s._v(" "),t("li",[s._v("遍历这些 BrokerName, 从 brokerAddrTable 中找到对应的 BrokerData, 并写入返回结果中.")]),s._v(" "),t("li",[s._v("释放读锁并返回结果.")])]),s._v(" "),t("h5",{attrs:{id:"_5-小结-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-小结-4"}},[s._v("#")]),s._v(" 5.小结")]),s._v(" "),t("p",[s._v("这节课一起分析了 RocketMQ NameServer 的源代码, "),t("strong",[s._v("NameServer 在集群中起到的一个核心作用就是, 为客户端提供路由信息, 帮助客户端找到对应的 Broker")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("每个 NameServer 节点上都保存了集群所有 Broker 的路由信息, 可以独立提供服务. Broker 会与所有 NameServer 节点建立长连接, 定期上报 Broker 的路由信息. 客户端会选择连接某一个 NameServer 节点, 定期获取订阅主题的路由信息, 用于 Broker 寻址. ​")])]),s._v(" "),t("p",[s._v("NameServer 的所有核心功能都是在 "),t("strong",[s._v("RouteInfoManager")]),s._v(" 这个类中实现的, 这类中使用了几个 Map 来在内存中保存集群中所有 Broker 的路由信息.")]),s._v(" "),t("p",[s._v("把这些 NameServer 的设计和实现方法抽象一下, 就可以总结出通用的 NamingService 的设计思想.")]),s._v(" "),t("p",[t("strong",[s._v('NamingService 负责保存集群内所有节点的路由信息, NamingService 本身也是一个小集群, 由多个 NamingService 节点组成. 这里所说的 "路由信息" 也是一种通用的抽象, 含义是: "客户端需要访问的某个特定服务在哪个节点上". ​')])]),s._v(" "),t("p",[s._v("集群中的节点主动连接 NamingService 服务, 注册自身的路由信息. 给客户端提供路由寻址服务的方式可以有两种, 一种是客户端直接连接 NamingService 服务查询路由信息, 另一种是, 客户端连接集群内任意节点查询路由信息, 节点再从自身的缓存或者从 NamingService 上进行查询.")]),s._v(" "),t("h4",{attrs:{id:"kafka的协调服务zookeeper-实现分布式系统的瑞士军刀"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#kafka的协调服务zookeeper-实现分布式系统的瑞士军刀"}},[s._v("#")]),s._v(" Kafka的协调服务ZooKeeper: 实现分布式系统的瑞士军刀")]),s._v(" "),t("p",[s._v("RocketMQ 的 NameServer 虽然设计非常简洁, 但很好地解决了路由寻址的问题. 而 Kafka 却采用了完全不同的设计思路, 它选择"),t("strong",[s._v("使用 ZooKeeper 这样一个分布式协调服务来实现和 RocketMQ 的 NameServer 差不多的功能")]),s._v(".")]),s._v(" "),t("p",[s._v("本节简单了解一下 ZooKeeper, 然后再看看 Kafka 是如何借助 ZooKeeper 来构建集群, 实现路由寻址的.")]),s._v(" "),t("h5",{attrs:{id:"_1-zookeeper的作用是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-zookeeper的作用是什么"}},[s._v("#")]),s._v(" 1.ZooKeeper的作用是什么?")]),s._v(" "),t("p",[s._v('Apache ZooKeeper 它是一个非常特殊的中间件, 为什么这么说呢? 一般来说, 像中间件类的开源产品, 大多遵循"做一件事, 并做好它." 这样的 UNIX 哲学, 每个软件都专注于一种功能上. 而 ZooKeeper 更像是一个"瑞士军刀", 它提供了很多基本的操作, 能实现什么样的功能更多取决于使用者如何来使用它.')]),s._v(" "),t("p",[t("strong",[s._v("ZooKeeper 作为一个分布式的协调服务框架, 主要用来解决分布式集群中, 应用系统需要面对的各种通用的一致性问题. ZooKeeper 本身可以部署为一个集群, 集群的各个节点之间可以通过选举来产生一个 Leader, 选举遵循半数以上的原则, 所以一般集群需要部署奇数个节点. ​")])]),s._v(" "),t("p",[s._v("ZooKeeper 最核心的功能是, 它提供了一个分布式的存储系统, 数据的组织方式类似于 UNIX 文件系统的树形结构. 由于这是一个可以"),t("strong",[s._v("保证一致性的存储系统")]),s._v(", 所以可以放心地在应用集群中读写 ZooKeeper 的数据, 而不用担心数据一致性的问题. "),t("strong",[s._v("分布式系统中一些需要整个集群所有节点都访问的元数据, 比如集群节点信息, 公共配置信息等, 特别适合保存在 ZooKeeper 中")]),s._v(".")]),s._v(" "),t("p",[s._v('在这个树形的存储结构中, 每个节点被称为一个"ZNode". ZooKeeper 提供了一种特殊的 ZNode 类型: '),t("strong",[s._v("临时节点")]),s._v(". 这种临时节点有一个特性: "),t("strong",[s._v("如果创建临时节点的客户端与 ZooKeeper 集群失去连接, 这个临时节点就会自动消失")]),s._v(". "),t("strong",[s._v("在 ZooKeeper 内部, 它维护了 ZooKeeper 集群与所有客户端的心跳, 通过判断心跳的状态, 来确定是否需要删除客户端创建的临时节点.")])]),s._v(" "),t("p",[s._v("ZooKeeper 还提供了一种订阅 ZNode 状态变化的通知机制: "),t("strong",[s._v("Watcher")]),s._v(", 一旦 ZNode 或者它的子节点状态发生了变化, "),t("strong",[s._v("订阅的客户端会立即收到通知")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("利用 ZooKeeper 临时节点和 Watcher 机制, 很容易随时来获取业务集群中每个节点的存活状态, 并且可以监控业务集群的节点变化情况, 当有节点上下线时, 都可以收到来自 ZooKeeper 的通知.")])]),s._v(" "),t("p",[s._v("此外还可以用 ZooKeeper 来实现业务集群的快速选举, 节点间的简单通信, 分布式锁等很多功能.")]),s._v(" "),t("p",[s._v("下面看一下 Kafka 是如何使用 ZooKeeper 的.")]),s._v(" "),t("h5",{attrs:{id:"_2-kafka在zookeeper中保存了哪些信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-kafka在zookeeper中保存了哪些信息"}},[s._v("#")]),s._v(" 2.Kafka在ZooKeeper中保存了哪些信息?")]),s._v(" "),t("p",[s._v("首先看一下 Kafka 在 ZooKeeper 都保存了哪些信息, 参考下图.")]),s._v(" "),t("p",[t("img",{attrs:{src:"assets/image-20230522222826-zg5d74n.jpg",alt:""}}),s._v("你可能在网上看到过和这个图类似的其他版本的图, 这些图中绘制的 ZNode 比这张图要多一些, 这些图大都是描述的 0.8.x 的旧版本的情况, 最新版本的 Kafka 已经将消费位置管理等一些原本依赖 ZooKeeper 实现的功能, 替换成了其他的实现方式.")]),s._v(" "),t("p",[t("strong",[s._v("图中圆角的矩形是临时节点, 直角矩形是持久化的节点. ​")])]),s._v(" "),t("p",[t("strong",[s._v("从左往右来看, 左侧这棵树保存的是 Kafka 的 Broker 信息, /brokers/ids/[0…N], 每个临时节点对应着一个在线的 Broker, Broker 启动后会创建一个临时节点, 代表 Broker 已经加入集群可以提供服务了, 节点名称就是 BrokerID, 节点内保存了包括 Broker 的地址, 版本号, 启动时间等等一些 Broker 的基本信息. 如果 Broker 宕机或者与 ZooKeeper 集群失联了, 这个临时节点也会随之消失.")])]),s._v(" "),t("p",[t("strong",[s._v("右侧部分的这棵树保存的就是主题和分区的信息. /brokers/topics/ 节点下面的每个子节点都是一个主题, 节点的名称就是主题名称. 每个主题节点下面都包含一个固定的 partitions 节点, pattitions 节点的子节点就是主题下的所有分区, 节点名称就是分区编号. ​")])]),s._v(" "),t("p",[t("strong",[s._v("每个分区节点下面是一个名为 state 的临时节点, 节点中保存着分区当前的 leader 和所有的 ISR 的 BrokerID. 这个 state 临时节点是由这个分区当前的 Leader Broker 创建的. 如果这个分区的 Leader Broker 宕机了, 对应的这个 state 临时节点也会消失, 直到新的 Leader 被选举出来, 再次创建 state 临时节点. ​")])]),s._v(" "),t("h5",{attrs:{id:"_3-kafka客户端如何找到对应的broker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-kafka客户端如何找到对应的broker"}},[s._v("#")]),s._v(" 3.Kafka客户端如何找到对应的Broker?")]),s._v(" "),t("p",[s._v("那 Kafka 客户端如何找到主题, 队列对应的 Broker 呢? "),t("strong",[s._v("其实就是先根据主题和队列, 在右边的树中找到分区对应的 state 临时节点, 前面提到过, state 节点中保存了这个分区 Leader 的 BrokerID. 拿到这个 Leader 的 BrokerID 后, 再去左侧的树中, 找到 BrokerID 对应的临时节点, 就可以获取到 Broker 真正的访问地址了")]),s._v(".")]),s._v(" "),t("p",[s._v("前面说过, Kafka 的客户端并不会去直接连接 ZooKeeper, "),t("strong",[s._v("它只会和 Broker 进行远程通信")]),s._v(", 那可以合理推测一下, "),t("strong",[s._v("ZooKeeper 上的元数据应该是通过 Broker 中转给每个客户端的")]),s._v(".")]),s._v(" "),t("p",[s._v("下面一起看一下 Kafka 的源代码, 来验证一下这个猜测.")]),s._v(" "),t("p",[s._v("前面提到过, 客户端真正与服务端发生网络传输是在 org.apache.kafka.clients.NetworkClient#poll() 方法中实现的, 一直跟踪这个调用链:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("NetworkClient")]),s._v("#"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("poll")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("DefaultMetadataUpdater")]),s._v("#"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("maybeUpdate")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("DefaultMetadataUpdater")]),s._v("#"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("maybeUpdate")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("直到 maybeUpdate(long, Node) 这个方法, 在这个方法里面, Kafka 构造了一个"),t("strong",[s._v("更新元数据的请求")]),s._v(":")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("maybeUpdate")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" now"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" nodeConnectionId "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("idString")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("canSendRequest")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nodeConnectionId"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" now"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 构建一个更新元数据的请求的构造器")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Metadata"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("MetadataRequestAndVersion")]),s._v(" metadataRequestAndVersion "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" metadata"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("newMetadataRequestAndVersion")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        inProgressRequestVersion "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" metadataRequestAndVersion"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("requestVersion"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MetadataRequest"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Builder")]),s._v(" metadataRequest "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" metadataRequestAndVersion"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("requestBuilder"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        log"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("debug")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Sending metadata request {} to node {}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" metadataRequest"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 发送更新元数据的请求")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sendInternalMetadataRequest")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("metadataRequest"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" nodeConnectionId"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" now"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" defaultRequestTimeoutMs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//...")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br")])]),t("p",[s._v("这段代码先构造了更新元数据的请求的构造器, 然后调用 sendInternalMetadataRequest() 把这个请求放到待发送的队列中. 这里面有两个地方需要特别说明一下.")]),s._v(" "),t("p",[s._v("第一点是, 在这个方法里面创建的并不是一个真正的更新元数据的 MetadataRequest, 而是一个用于构造 MetadataRequest 的构造器 MetadataRequest.Builder, 等到真正要发送请求之前, Kafka 才会调用 Builder.buid() 方法把这个 MetadataRequest 构建出来然后发送出去. 而且不仅是元数据的请求, "),t("strong",[s._v("所有的请求都是这样来处理的")]),s._v(".")]),s._v(" "),t("p",[s._v("第二点是, 调用 sendInternalMetadataRequest() 方法时, 这个请求也并没有被真正发出去, 依然是"),t("strong",[s._v("保存在待发送的队列")]),s._v("中, 然后择机来异步批量发送.")]),s._v(" "),t("p",[s._v("请求的具体内容封装在 org.apache.kafka.common.requests."),t("strong",[s._v("MetadataRequest")]),s._v(" 这个对象中, 它包含的信息很简单, 只有一个主题的列表, 来表明需要获取哪些主题的元数据, 另外还有一个布尔类型的字段 allowAutoTopicCreation, 表示是否允许自动创建主题.")]),s._v(" "),t("p",[s._v("然后再来看下, "),t("strong",[s._v("在 Broker 中, Kafka 是怎么来处理这个更新元数据的请求的")]),s._v(".")]),s._v(" "),t("p",[s._v("Broker 处理所有 RPC 请求的入口类在 kafka.server.KafkaApis#handle() 这个方法里面, 找到对应处理更新元数据的方法 handleTopicMetadataRequest(RequestChannel.Request), 这段代码是用 Scala 语言编写的:")]),s._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" handleTopicMetadataRequest"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("request"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" RequestChannel"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" metadataRequest "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("body"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("MetadataRequest"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" requestVersion "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("header"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("apiVersion\n\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 计算需要获取哪些主题的元数据")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" topics "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 在旧版本的协议中，每次都获取所有主题的元数据")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("requestVersion "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("metadataRequest"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("topics"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" metadataRequest"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("topics"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("isEmpty"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        metadataCache"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("getAllTopics"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n        metadataRequest"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("topics"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("asScala"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("toSet\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("metadataRequest"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("isAllTopics"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        metadataCache"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("getAllTopics"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n        metadataRequest"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("topics"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("asScala"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("toSet\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 省略掉鉴权相关代码")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" topicMetadata "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("authorizedTopics"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("isEmpty"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n      Seq"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("empty"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("MetadataResponse"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("TopicMetadata"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 从元数据缓存过滤出相关主题的元数据")]),s._v("\n      getTopicMetadata"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("metadataRequest"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("allowAutoTopicCreation"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" authorizedTopics"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("listenerName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        errorUnavailableEndpoints"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" errorUnavailableListeners"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 获取所有 Broker 列表")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" brokers "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" metadataCache"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("getAliveBrokers\n\n  trace"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Sending topic metadata %s and brokers %s for correlation id %d to client %s"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("format"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("completeTopicMetadata"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("mkString"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('","')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    brokers"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("mkString"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('","')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("header"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("correlationId"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("header"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("clientId"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 构建 Response 并发送")]),s._v("\n  sendResponseMaybeThrottle"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" requestThrottleMs "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("=>")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" MetadataResponse"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n      requestThrottleMs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      brokers"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("flatMap"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("_"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("getNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("listenerName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("asJava"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      clusterId"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      metadataCache"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("getControllerId"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("getOrElse"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("MetadataResponse"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("NO_CONTROLLER_ID"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      completeTopicMetadata"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("asJava\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br")])]),t("p",[s._v("这段代码的主要逻辑是, "),t("strong",[s._v("先根据请求中的主题列表, 去本地的元数据缓存 MetadataCache 中过滤出相应主题的元数据, 也就是上面那张图中, 右半部分的那棵树的子集, 然后再去本地元数据缓存中获取所有 Broker 的集合, 也就是上图中左半部分那棵树, 最后把这两部分合在一起, 作为响应返回给客户端")]),s._v(".")]),s._v(" "),t("p",[s._v("Kafka 在每个 Broker 中都维护了一份和 ZooKeeper 中一样的元数据缓存, 并不是每次客户端请求元数据就去读一次 ZooKeeper. 由于 ZooKeeper 提供了 Watcher 这种监控机制, Kafka 可以感知到 ZooKeeper 中的元数据变化, 从而及时更新 Broker 中的元数据缓存.")]),s._v(" "),t("p",[s._v("这样就完成了一次完整的更新元数据的流程. 通过分析代码, 可以证实开始的猜测都是没有问题的.")]),s._v(" "),t("h5",{attrs:{id:"_4-小结-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-小结-4"}},[s._v("#")]),s._v(" 4.小结")]),s._v(" "),t("p",[s._v("ZooKeeper 是一个分布式的协调服务, 它的核心服务是一个高可用, 高可靠的一致性存储, 在此基础上, 提供了包括读写元数据, 节点监控, 选举, 节点间通信和分布式锁等很多功能, 基于"),t("strong",[s._v("这些功能可以非常方便的开发一个分布式的集群系统. ​")])]),s._v(" "),t("p",[s._v("但 ZooKeeper 也并不是完美的, 在使用的时候需要注意几个问题:")]),s._v(" "),t("ol",[t("li",[t("strong",[s._v("不要往 ZooKeeper 里面写入大量数据")]),s._v(", 它不是一个真正意义上的存储系统, 只适合存放少量的数据. 依据服务器配置的不同, ZooKeeper 在写入超过几百 MB 数据之后, 性能和稳定性都会严重下降.")]),s._v(" "),t("li",[t("strong",[s._v("不要让业务集群的可用性依赖于 ZooKeeper 的可用性")]),s._v(", 什么意思呢? 系统可以使用 Zookeeper, 但需要留一手, 要考虑如果 Zookeeper 集群宕机了, 业务集群最好还能提供服务. 因为 ZooKeeper 的选举过程是比较慢的, 而它对网络的抖动又比较敏感, 一旦触发选举, 这段时间内的 ZooKeeper 是不能提供任何服务的.")])]),s._v(" "),t("p",[s._v("Kafka 主要使用 ZooKeeper 来保存它的元数据, 监控 Broker 和分区的存活状态, 并利用 ZooKeeper 来进行选举.")]),s._v(" "),t("p",[s._v("Kafka 在 ZooKeeper 中保存的元数据, 主要就是 Broker 的列表和主题分区信息两棵树. 这份元数据同时也被缓存到每一个 Broker 中. 客户端并不直接和 ZooKeeper 来通信, 而是在需要的时候, 通过 RPC 请求去 Broker 上拉取它关心的主题的元数据, 然后保存到客户端的元数据缓存中, 以便支撑客户端生产和消费.")]),s._v(" "),t("p",[s._v("可以看到, 目前 Kafka 的这种设计, "),t("strong",[s._v("集群的可用性是严重依赖 ZooKeeper 的, 也就是说, 如果 ZooKeeper 集群不能提供服务, 那整个 Kafka 集群也就不能提供服务了, 这其实是一个不太好的设计")]),s._v(".")]),s._v(" "),t("p",[s._v("如果需要要部署大规模的 Kafka 集群, 建议的方式是, 拆分成多个互相独立的小集群部署, 每个小集群都使用一组独立的 ZooKeeper 提供服务. 这样每个 ZooKeeper 中存储的数据相对比较少, 并且如果某个 ZooKeeper 集群故障, 只会影响到一个小的 Kafka 集群, 故障的影响面相对小一些.")]),s._v(" "),t("p",[s._v("Kafka 的开发者也意识到了这个问题, 目前正在讨论开发一个"),t("strong",[s._v("元数据服务")]),s._v("来替代 ZooKeeper.")]),s._v(" "),t("h4",{attrs:{id:"如何利用事务消息实现分布式事务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何利用事务消息实现分布式事务"}},[s._v("#")]),s._v(" 如何利用事务消息实现分布式事务?")]),s._v(" "),t("p",[s._v("一说起事务自然会联想到数据库, 那消息队列为什么也需要事务?")]),s._v(" "),t("p",[s._v("其实很多场景下, 发消息这个过程, 目的往往是通知另外一个系统或者模块去更新数据, "),t("strong",[s._v("==消息队列中的事务, 主要解决的是消息生产者和消息消费者的数据一致性问题=="),t("strong",[s._v("​")]),s._v(". ​")])]),s._v(" "),t("p",[s._v("依然拿电商举例. 一般来说, 用户在电商 APP 上购物时, 先把商品加到购物车里, 然后几件商品一起下单, 最后支付, 完成购物流程, 就可以愉快地等待收货了.")]),s._v(" "),t("p",[s._v("这个过程中有一个需要用到消息队列的步骤, 订单系统创建订单后, 发消息给购物车系统, 将已下单的商品从购物车中删除. 因为从购物车删除已下单商品这个步骤, 并不是用户下单支付这个主要流程中必需的步骤, "),t("strong",[s._v("使用消息队列来异步清理购物车")]),s._v("是更加合理的设计.")]),s._v(" "),t("p",[t("img",{attrs:{src:"assets/image-20230522220613-5o150sx.jpg",alt:""}})]),s._v(" "),t("p",[s._v("对于订单系统来说, 它创建订单的过程中实际上执行了 2 个步骤的操作:")]),s._v(" "),t("ol",[t("li",[s._v("在订单库中插入一条订单数据, 创建订单;")]),s._v(" "),t("li",[s._v("发消息给消息队列, 消息的内容就是刚刚创建的订单.")])]),s._v(" "),t("p",[s._v("购物车系统订阅相应的主题, 接收订单创建的消息, 然后清理购物车, 在购物车中删除订单中的商品.")]),s._v(" "),t("p",[s._v("在分布式系统中, 上面提到的这些步骤, "),t("strong",[s._v("任何一个步骤都有可能失败, 如果不做任何处理, 那就有可能出现订单数据与购物车数据不一致的情况")]),s._v(", 比如说:")]),s._v(" "),t("ul",[t("li",[s._v("创建了订单, 没有清理购物车;")]),s._v(" "),t("li",[s._v("订单没创建成功, 购物车里面的商品却被清掉了.")])]),s._v(" "),t("p",[s._v("那需要解决的问题可以总结为: "),t("strong",[s._v("在上述任意步骤都有可能失败的情况下, 还要保证订单库和购物车库这两个库的数据一致性.")])]),s._v(" "),t("p",[s._v("对于购物车系统收到订单创建成功消息清理购物车这个操作来说, 失败的处理比较简单, 只要成功执行购物车清理后再提交消费确认即可, 如果失败, 由于没有提交消费确认, 消息队列会自动重试.")]),s._v(" "),t("p",[t("strong",[s._v("问题的关键点集中在订单系统, 创建订单和发送消息这两个步骤要么都操作成功, 要么都操作失败, 不允许一个成功而另一个失败的情况出现. ​")])]),s._v(" "),t("p",[s._v("这就是事务需要解决的问题.")]),s._v(" "),t("h5",{attrs:{id:"_1-什么是分布式事务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是分布式事务"}},[s._v("#")]),s._v(" 1.什么是分布式事务?")]),s._v(" "),t("p",[s._v("那什么是事务呢? 如果需要对若干数据进行更新操作, 为了保证这些数据的完整性和一致性, 希望这些更新操作"),t("strong",[s._v("要么都成功, 要么都失败. ​")]),s._v("至于更新的数据, 不只局限于数据库中的数据, 可以是磁盘上的一个文件, 也可以是远端的一个服务, 或者以其他形式存储的数据. 这就是通常理解的事务. 其实这段对事务的描述不是太准确也不完整, 但是它更易于理解, 大体上也是正确的.")]),s._v(" "),t("p",[s._v("一个严格意义的事务实现, 应该具有 4 个属性: "),t("strong",[s._v("原子性, 一致性, 隔离性, 持久性")]),s._v(". 这四个属性通常称为 ACID 特性.")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("原子性, 是指一个事务操作不可分割, 要么成功, 要么失败, 不能有一半成功一半失败的情况.")])]),s._v(" "),t("li",[t("p",[s._v("一致性, 是指这些数据在事务执行完成这个时间点之前, 读到的一定是更新前的数据, 之后读到的一定是更新后的数据, 不应该存在一个时刻, 让用户读到更新过程中的数据.")])]),s._v(" "),t("li",[t("p",[s._v("隔离性, 是指一个事务的执行不能被其他事务干扰. 即一个事务内部的操作及使用的数据对正在进行的其他事务是隔离的, 并发执行的各个事务之间不能互相干扰, 这个有点儿像打网游中的副本, 在副本中打的怪和掉的装备, 与其他副本没有任何关联也不会互相影响.")])]),s._v(" "),t("li",[t("p",[s._v("持久性, 是指一个事务一旦完成提交, 后续的其他操作和故障都不会对事务的结果产生任何影响.")])])]),s._v(" "),t("p",[s._v("大部分传统的单体关系型数据库都完整的实现了 ACID, 但是"),t("strong",[s._v("对于分布式系统来说, 严格的实现 ACID 这四个特性几乎是不可能的, 或者说实现的代价太大而无法接受")]),s._v(".")]),s._v(" "),t("p",[s._v('分布式事务就是要在分布式系统中的实现事务. 在分布式系统中, 在保证可用性和不严重牺牲性能的前提下, 光是要实现数据的一致性就已经非常困难了, 所以出现了很多"残血版"的一致性, 比如'),t("strong",[s._v("顺序一致性, 最终一致性")]),s._v("等等.")]),s._v(" "),t("p",[s._v("显然实现严格的分布式事务是更加不可能完成的任务. 所以"),t("strong",[s._v("目前大家所说的分布式事务, 更多情况下, 是在分布式系统中事务的不完整实现. 在不同的应用场景中, 有不同的实现, 目的都是通过一些妥协来解决实际问题")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("在实际应用中, 比较常见的分布式事务实现有 2PC(Two-phase Commit, 也叫二阶段提交), TCC(Try-Confirm-Cancel) 和事务消息")]),s._v(". 每一种实现都有其特定的使用场景, 也有各自的问题, 都不是完美的解决方案.")]),s._v(" "),t("p",[t("strong",[s._v("事务消息适用的场景主要是那些")]),s._v("​**==需要异步更新数据, 并且对数据实时性要求不太高=="),t("strong",[s._v("​")]),s._v("的场景**. 比如前面提到的例子, 在创建订单后, 如果出现短暂的几秒, 购物车里的商品没有被及时清空, 也不是完全不可接受的, 只要最终购物车的数据和订单数据保持一致就可以了.")]),s._v(" "),t("h5",{attrs:{id:"_2-消息队列是如何实现分布式事务的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-消息队列是如何实现分布式事务的"}},[s._v("#")]),s._v(" 2.消息队列是如何实现分布式事务的?")]),s._v(" "),t("p",[s._v("事务消息需要消息队列提供相应的功能才能实现, "),t("strong",[s._v("Kafka 和 RocketMQ 都提供了事务相关功能")]),s._v(".")]),s._v(" "),t("p",[s._v("回到订单和购物车这个例子, 一起来看下如何用消息队列来实现分布式事务.")]),s._v(" "),t("p",[t("img",{attrs:{src:"assets/image-20230522220613-h4ynhyn.jpg",alt:""}})]),s._v(" "),t("p",[s._v("首先, "),t("strong",[s._v("订单系统在消息队列上开启一个事务")]),s._v('. 然后订单系统给消息服务器发送一个**=="半消息"==**, '),t("strong",[s._v("这个半消息不是说消息内容不完整, 它包含的内容就是完整的消息内容, 半消息和普通消息的唯一区别是, 在事务提交之前, 对于消费者来说, 这个消息是不可见的")]),s._v(".")]),s._v(" "),t("p",[s._v("半消息发送成功后, "),t("strong",[s._v("订单系统就可以")]),s._v("​**==执行本地事务=="),t("strong",[s._v("​")]),s._v('了, 在订单库中创建一条订单记录, 并提交订单库的数据库事务. 然后根据本地事务的执行结果决定提交或者回滚事务消息. 如果订单创建成功, 那就提交事务消息, 购物车系统就可以消费到这条消息继续后续的流程. 如果订单创建失败, 那就回滚事务消息, 购物车系统就不会收到这条消息. 这样就基本实现了"要么都成功, 要么都失败"的一致性要求.**')]),s._v(" "),t("p",[s._v("但是这个实现过程中, 有一个问题是没有解决的. 如果在"),t("strong",[s._v("第四步提交事务消息")]),s._v("时失败了怎么办? 对于这个问题, Kafka 和 RocketMQ 给出了 2 种不同的解决方案.")]),s._v(" "),t("p",[t("strong",[s._v("Kafka 的解决方案比较简单粗暴, 直接抛出异常, 让用户自行处理. 可以在业务代码中反复重试提交, 直到提交成功, 或者删除之前创建的订单进行补偿")]),s._v(". RocketMQ 则给出了另外一种解决方案.")]),s._v(" "),t("h5",{attrs:{id:"_3-rocketmq中的分布式事务实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-rocketmq中的分布式事务实现"}},[s._v("#")]),s._v(" 3.RocketMQ中的分布式事务实现")]),s._v(" "),t("p",[s._v("在 RocketMQ 中的事务实现中, 增加了**==事务反查的机制=="),t("strong",[s._v("​")]),s._v("来解决事务消息提交失败的问题**. "),t("strong",[s._v("如果 Producer 也就是订单系统, 在提交或者回滚事务消息时发生网络异常, RocketMQ 的 Broker 没有收到提交或者回滚的请求, Broker 会定期去 Producer 上反查这个事务对应的本地事务的状态, 然后根据反查结果决定提交或者回滚这个事务")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("为了支撑这个事务反查机制, 业务代码需要实现一个反查本地事务状态的接口, 告知 RocketMQ 本地事务是成功还是失败.")])]),s._v(" "),t("p",[s._v("在这个例子中, 反查本地事务的逻辑也很简单, 只要根据消息中的订单 ID, 在订单库中查询这个订单是否存在即可, 如果订单存在则返回成功, 否则返回失败. "),t("strong",[s._v("RocketMQ 会自动根据事务反查的结果提交或者回滚事务消息")]),s._v(".")]),s._v(" "),t("p",[s._v("这个反查本地事务的实现, 并不依赖消息的发送方, 也就是订单服务的某个实例节点上的任何数据. 这种情况下, 即使是发送事务消息的那个订单服务节点宕机了, RocketMQ 依然可以通过其他订单服务的节点来执行反查, 确保事务的完整性.")]),s._v(" "),t("p",[t("strong",[s._v("综合上面讲的通用事务消息的实现和 RocketMQ 的事务反查机制, 使用 RocketMQ 事务消息功能实现分布式事务的流程如下图: ​")])]),s._v(" "),t("p",[t("img",{attrs:{src:"assets/image-20230522220614-a19lpn7.jpg",alt:""}})]),s._v(" "),t("h5",{attrs:{id:"_4-小结-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-小结-5"}},[s._v("#")]),s._v(" 4.小结")]),s._v(" "),t("p",[s._v("本节给出了现有的几种分布式事务的解决方案, 包括事务消息, 但是这几种方案都不能解决分布式系统中的所有问题, 每一种方案都有局限性和特定的适用场景.")]),s._v(" "),t("p",[t("strong",[s._v("RocketMQ 具有事务反查机制, 这种机制通过定期反查事务状态, 来补偿提交事务消息可能出现的通信失败")]),s._v(". 在 Kafka 的事务功能中, 并没有类似的反查机制, 需要用户自行去解决这个问题.")]),s._v(" "),t("p",[s._v("但是, 这不代表 RocketMQ 的事务功能比 Kafka 更好, 只能说在这个例子的场景下, 更适合使用 RocketMQ. Kafka 对于事务的定义, 实现和适用场景, 和 RocketMQ 有比较大的差异.")]),s._v(" "),t("h4",{attrs:{id:"rocketmq与kafka中如何实现事务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq与kafka中如何实现事务"}},[s._v("#")]),s._v(" RocketMQ与Kafka中如何实现事务?")]),s._v(" "),t("p",[s._v('在之前 "如何利用事务消息实现分布式事务" 部分, 通过一个小例子来讲解了如何来使用事务消息. 本节分析一下在 RocketMQ 和 Kafka 中, 事务消息分别是如何来实现的.')]),s._v(" "),t("h5",{attrs:{id:"_1-rocketmq的事务是如何实现的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-rocketmq的事务是如何实现的"}},[s._v("#")]),s._v(" 1.RocketMQ的事务是如何实现的?")]),s._v(" "),t("p",[s._v("首先看 RocketMQ 的事务. 前面已经讲解过 RocketMQ 事务的大致流程, 这里再重温一下这个流程.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CreateOrderService")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n  "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Inject")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("OrderDao")]),s._v(" orderDao"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 注入订单表的 DAO")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Inject")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ExecutorService")]),s._v(" executorService"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n \n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TransactionMQProducer")]),s._v(" producer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 初始化 transactionListener 和 producer")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Init")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("init")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MQClientException")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TransactionListener")]),s._v(" transactionListener "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("createTransactionListener")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    producer "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TransactionMQProducer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"myGroup"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    producer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setExecutorService")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("executorService"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    producer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setTransactionListener")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("transactionListener"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    producer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("start")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 创建订单服务的请求入口")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@PUT")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@RequestMapping")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("createOrder")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@RequestBody")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CreateOrderRequest")]),s._v(" request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 根据创建订单请求创建一条消息")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Message")]),s._v(" msg "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("createMessage")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 发送事务消息")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SendResult")]),s._v(" sendResult "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" producer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sendMessageInTransaction")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("msg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 返回：事务是否成功")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" sendResult"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getSendStatus")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SendStatus")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SEND_OK")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TransactionListener")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("createTransactionListener")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TransactionListener")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LocalTransactionState")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("executeLocalTransaction")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Message")]),s._v(" msg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" arg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CreateOrderRequest")]),s._v(" request "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CreateOrderRequest")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" arg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 执行本地事务创建订单")]),s._v("\n          orderDao"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("createOrderInDB")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果没抛异常说明执行成功，提交事务消息")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LocalTransactionState")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("COMMIT_MESSAGE")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Throwable")]),s._v(" t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 失败则直接回滚事务消息")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LocalTransactionState")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ROLLBACK_MESSAGE")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 反查本地事务")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LocalTransactionState")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("checkLocalTransaction")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MessageExt")]),s._v(" msg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("、\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 从消息中获得订单 ID")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" orderId "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" msg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getUserProperty")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"orderId"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 去数据库中查询订单号是否存在，如果存在则提交事务；")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果不存在，可能是本地事务失败了，也可能是本地事务还在执行，所以返回 UNKNOW")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//（PS：这里 RocketMQ 有个拼写错误：UNKNOW）")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" orderDao"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isOrderIdExistsInDB")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("orderId"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LocalTransactionState")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("COMMIT_MESSAGE")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LocalTransactionState")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UNKNOW")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//....")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br"),t("span",{staticClass:"line-number"},[s._v("59")]),t("br"),t("span",{staticClass:"line-number"},[s._v("60")]),t("br"),t("span",{staticClass:"line-number"},[s._v("61")]),t("br"),t("span",{staticClass:"line-number"},[s._v("62")]),t("br"),t("span",{staticClass:"line-number"},[s._v("63")]),t("br")])]),t("p",[s._v("在这个流程中提供了一个创建订单的服务, 功能就是"),t("strong",[s._v("在数据库中插入一条订单记录")]),s._v(", 并发送一条创建订单的消息, 要求写数据库和发消息这两个操作在一个事务内执行, 要么都成功, 要么都失败. 在这段代码中, 首先在 init() 方法中初始化了 transactionListener 和发生 RocketMQ 事务消息的变量 producer. 真正提供创建订单服务的方法是 createOrder(), 在这个方法里面, 根据请求的参数创建一条消息, 然后"),t("strong",[s._v("调用 RocketMQ producer 发送事务消息, 并返回事务执行结果")]),s._v(".")]),s._v(" "),t("p",[s._v("之后的 createTransactionListener() 方法是在 init() 方法中调用的, 这里面直接构造一个匿名类, 来实现 RocketMQ 的 TransactionListener 接口, 这个接口需要实现两个方法:")]),s._v(" "),t("ul",[t("li",[s._v("executeLocalTransaction: "),t("strong",[s._v("执行本地事务")]),s._v(", 在这里直接把订单数据插入到数据库中, 并返回本地事务的执行结果.")]),s._v(" "),t("li",[s._v("checkLocalTransaction: "),t("strong",[s._v("反查本地事务")]),s._v(", 在这里处理是在数据库中查询订单号是否存在, 如果存在则提交事务, 如果不存在, 可能是本地事务失败了, 也可能是本地事务还在执行, 所以返回 UNKNOW.")])]),s._v(" "),t("p",[s._v("这样就使用 RocketMQ 的事务消息功能实现了一个创建订单的分布式事务. 接下来一起通过 RocketMQ 的源代码来看一下, 它的事务消息是如何实现的.")]),s._v(" "),t("p",[s._v("首先看一下在 producer 中, 是如何来发送事务消息的:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TransactionSendResult")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sendMessageInTransaction")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Message")]),s._v(" msg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                                                      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LocalTransactionExecuter")]),s._v(" localTransactionExecuter"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" arg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MQClientException")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TransactionListener")]),s._v(" transactionListener "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getCheckListener")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" localTransactionExecuter "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" transactionListener"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throw")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MQClientException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"tranExecutor is null"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Validators")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("checkMessage")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("msg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("defaultMQProducer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SendResult")]),s._v(" sendResult "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这里给消息添加了属性，标明这是一个事务消息，也就是半消息")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MessageAccessor")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("putProperty")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("msg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MessageConst")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("PROPERTY_TRANSACTION_PREPARED")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"true"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MessageAccessor")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("putProperty")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("msg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MessageConst")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("PROPERTY_PRODUCER_GROUP")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("defaultMQProducer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getProducerGroup")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 调用发送普通消息的方法，发送这条半消息")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        sendResult "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("send")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("msg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Exception")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throw")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MQClientException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"send message Exception"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LocalTransactionState")]),s._v(" localTransactionState "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LocalTransactionState")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UNKNOW")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Throwable")]),s._v(" localException "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("switch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sendResult"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getSendStatus")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SEND_OK")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sendResult"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getTransactionId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    msg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("putUserProperty")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"__transactionId__"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" sendResult"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getTransactionId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" transactionId "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" msg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getProperty")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MessageConst")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("PROPERTY_UNIQ_CLIENT_MESSAGE_ID_KEYIDX")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" transactionId "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("equals")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("transactionId"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    msg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setTransactionId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("transactionId"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n                "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 执行本地事务")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" localTransactionExecuter"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    localTransactionState "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" localTransactionExecuter"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("executeLocalTransactionBranch")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("msg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" arg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("transactionListener "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    log"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("debug")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Used new transaction API"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    localTransactionState "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" transactionListener"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("executeLocalTransaction")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("msg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" arg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" localTransactionState"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    localTransactionState "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LocalTransactionState")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UNKNOW")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("localTransactionState "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LocalTransactionState")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("COMMIT_MESSAGE")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    log"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("info")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"executeLocalTransactionBranch return {}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" localTransactionState"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    log"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("info")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("msg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Throwable")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                log"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("info")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"executeLocalTransactionBranch exception"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                log"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("info")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("msg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                localException "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("FLUSH_DISK_TIMEOUT")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("FLUSH_SLAVE_TIMEOUT")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SLAVE_NOT_AVAILABLE")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n            localTransactionState "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LocalTransactionState")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ROLLBACK_MESSAGE")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 根据事务消息和本地事务的执行结果 localTransactionState，决定提交或回滚事务消息")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这里给 Broker 发送提交或回滚事务的 RPC 请求。")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("endTransaction")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sendResult"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" localTransactionState"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" localException"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Exception")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        log"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("warn")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"local transaction execute "')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" localTransactionState "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('", but end broker transaction failed"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TransactionSendResult")]),s._v(" transactionSendResult "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TransactionSendResult")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    transactionSendResult"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setSendStatus")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sendResult"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getSendStatus")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    transactionSendResult"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setMessageQueue")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sendResult"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getMessageQueue")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    transactionSendResult"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setMsgId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sendResult"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getMsgId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    transactionSendResult"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setQueueOffset")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sendResult"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getQueueOffset")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    transactionSendResult"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setTransactionId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sendResult"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getTransactionId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    transactionSendResult"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setLocalTransactionState")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("localTransactionState"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" transactionSendResult"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br"),t("span",{staticClass:"line-number"},[s._v("59")]),t("br"),t("span",{staticClass:"line-number"},[s._v("60")]),t("br"),t("span",{staticClass:"line-number"},[s._v("61")]),t("br"),t("span",{staticClass:"line-number"},[s._v("62")]),t("br"),t("span",{staticClass:"line-number"},[s._v("63")]),t("br"),t("span",{staticClass:"line-number"},[s._v("64")]),t("br"),t("span",{staticClass:"line-number"},[s._v("65")]),t("br"),t("span",{staticClass:"line-number"},[s._v("66")]),t("br"),t("span",{staticClass:"line-number"},[s._v("67")]),t("br"),t("span",{staticClass:"line-number"},[s._v("68")]),t("br"),t("span",{staticClass:"line-number"},[s._v("69")]),t("br"),t("span",{staticClass:"line-number"},[s._v("70")]),t("br"),t("span",{staticClass:"line-number"},[s._v("71")]),t("br"),t("span",{staticClass:"line-number"},[s._v("72")]),t("br"),t("span",{staticClass:"line-number"},[s._v("73")]),t("br"),t("span",{staticClass:"line-number"},[s._v("74")]),t("br"),t("span",{staticClass:"line-number"},[s._v("75")]),t("br"),t("span",{staticClass:"line-number"},[s._v("76")]),t("br"),t("span",{staticClass:"line-number"},[s._v("77")]),t("br"),t("span",{staticClass:"line-number"},[s._v("78")]),t("br"),t("span",{staticClass:"line-number"},[s._v("79")]),t("br"),t("span",{staticClass:"line-number"},[s._v("80")]),t("br"),t("span",{staticClass:"line-number"},[s._v("81")]),t("br"),t("span",{staticClass:"line-number"},[s._v("82")]),t("br"),t("span",{staticClass:"line-number"},[s._v("83")]),t("br")])]),t("p",[s._v("这段代码的实现逻辑是这样的: 首先给待发送消息添加了一个属性 "),t("strong",[s._v("PROPERTY_TRANSACTION_PREPARED")]),s._v(", 标明这是一个"),t("strong",[s._v("事务消息, 也就是半消息")]),s._v(", 然后会像发送普通消息一样去把这条消息发送到 Broker 上. 如果发送成功了, 就开始调用之前提供的接口 TransactionListener 的实现类中, "),t("strong",[s._v("执行本地事务的方法 executeLocalTransaction() 来执行本地事务")]),s._v(", 在上面的例子中就是在数据库中插入一条订单记录.")]),s._v(" "),t("p",[t("strong",[s._v("最后根据半消息发送的结果和本地事务执行的结果, 来决定提交或者回滚事务")]),s._v(". 在实现方法 endTransaction() 中, producer 就是给 Broker 发送了一个单向的 RPC 请求, 告知 Broker 完成事务的提交或者回滚. 由于有事务反查的机制来兜底, 这个 RPC 请求即使失败或者丢失, 也都不会影响事务最终的结果. 最后构建事务消息的发送结果, 并返回.")]),s._v(" "),t("p",[s._v("以上就是 RocketMQ 在 "),t("strong",[s._v("Producer")]),s._v(" 这一端事务消息的实现, 然后再看一下 Broker 这一端, 它是"),t("strong",[s._v("怎么来处理事务消息和进行事务反查")]),s._v("的.")]),s._v(" "),t("p",[s._v("Broker 在处理 Producer 发送消息的请求时, 会根据"),t("strong",[s._v("消息中的属性")]),s._v("判断一下, 这条消息是普通消息还是半消息:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("traFlag "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Boolean")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("parseBoolean")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("traFlag"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n    putMessageResult "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("brokerController"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getTransactionalMessageService")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("prepareMessage")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("msgInner"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    putMessageResult "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("brokerController"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getMessageStore")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("putMessage")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("msgInner"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("这段代码在 org.apache.rocketmq.broker.processor.SendMessageProcessor#sendMessage() 方法中, 然后跟进去看看真正处理半消息的业务逻辑, 这段处理逻辑在类 org.apache.rocketmq.broker.transaction.queue."),t("strong",[s._v("TransactionalMessageBridge")]),s._v(" 中:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("PutMessageResult")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("putHalfMessage")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MessageExtBrokerInner")]),s._v(" messageInner"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" store"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("putMessage")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("parseHalfMessageInner")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("messageInner"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MessageExtBrokerInner")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("parseHalfMessageInner")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MessageExtBrokerInner")]),s._v(" msgInner"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 记录消息的主题和队列，到新的属性中")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MessageAccessor")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("putProperty")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("msgInner"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MessageConst")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("PROPERTY_REAL_TOPIC")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" msgInner"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getTopic")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MessageAccessor")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("putProperty")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("msgInner"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MessageConst")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("PROPERTY_REAL_QUEUE_ID")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("valueOf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("msgInner"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getQueueId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    msgInner"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setSysFlag")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MessageSysFlag")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("resetTransactionValue")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("msgInner"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getSysFlag")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MessageSysFlag")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TRANSACTION_NOT_TYPE")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 替换消息的主题和队列为：RMQ_SYS_TRANS_HALF_TOPIC，0")]),s._v("\n    msgInner"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setTopic")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TransactionalMessageUtil")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("buildHalfTopic")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    msgInner"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setQueueId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    msgInner"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setPropertiesString")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MessageDecoder")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("messageProperties2String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("msgInner"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getProperties")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" msgInner"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br")])]),t("p",[s._v("可以看到, 在这段代码中, "),t("strong",[s._v("==RocketMQ 并没有把半消息保存到消息中客户端指定的那个队列中, 而是记录了原始的主题队列后, 把这个半消息保存在了一个特殊的内部主题 RMQ_SYS_TRANS_HALF_TOPIC 中, 使用的队列号固定为 0==")]),s._v(". "),t("strong",[s._v("这个主题和队列对消费者是不可见的, 所以里面的消息永远不会被消费. 这样就保证了在事务提交成功之前, 这个半消息对消费者来说是消费不到的")]),s._v(".")]),s._v(" "),t("p",[s._v("然后再看一下 RocketMQ 是如何进行事务反查的: 在 Broker 的 "),t("strong",[s._v("TransactionalMessageCheckService")]),s._v(" 服务中启动了一个"),t("strong",[s._v("定时器, 定时从半消息队列中读出所有待反查的半消息, 针对每个需要反查的半消息, Broker 会给对应的 Producer 发一个要求执行事务状态反查的 RPC 请求, 这部分的逻辑在方法 org.apache.rocketmq.broker.transaction.AbstractTransactionalMessageCheckListener#sendCheckMessage() 中, 根据 RPC 返回响应中的反查结果, 来决定这个半消息是需要提交还是回滚, 或者后续继续来反查")]),s._v(".")]),s._v(" "),t("p",[s._v("最后, 提交或者回滚事务实现的逻辑是差不多的, "),t("strong",[s._v("首先把半消息标记为已处理, 如果是提交事务, 那就把半消息从半消息队列中复制到这个消息真正的主题和队列中去, 如果要回滚事务, 这一步什么都不需要做, 最后结束这个事务. 这部分逻辑的实现在 org.apache.rocketmq.broker.processor.EndTransactionProcessor 这个类中")]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"_2-kafka的事务和exactly-once可以解决什么问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-kafka的事务和exactly-once可以解决什么问题"}},[s._v("#")]),s._v(" 2.Kafka的事务和Exactly Once可以解决什么问题?")]),s._v(" "),t("p",[s._v("接下来再说一下 Kafka 的事务. 之前说过, Kafka 的事务解决的问题和 RocketMQ 是不太一样的. RocketMQ 中的事务, 它解决的问题是确保执行本地事务和发消息这两个操作, 要么都成功, 要么都失败. 并且 RocketMQ 增加了一个事务反查的机制, 来尽量提高事务执行的成功率和数据一致性.")]),s._v(" "),t("p",[t("strong",[s._v("而 Kafka 中的事务, 它解决的问题是确保在一个事务中发送的多条消息, 要么都成功, 要么都失败")]),s._v(". 注意这里面的多条消息不一定要在同一个主题和分区中, 可以是发往多个主题和分区的消息. 当然可以在 Kafka 的事务执行过程中, 加入本地事务, 来实现和 RocketMQ 中事务类似的效果, 但是 Kafka 是"),t("strong",[s._v("没有事务反查机制")]),s._v("的.")]),s._v(" "),t("p",[t("strong",[s._v("Kafka 的这种事务机制, 单独来使用的场景不多. 更多的情况下被用来配合 Kafka 的幂等机制来实现 Kafka 的 Exactly Once 语义")]),s._v(". 前面强调过, 这里面的 Exactly Once, 与通常理解的消息队列的服务水平中的 Exactly Once 是不一样的.")]),s._v(" "),t("p",[s._v("通常理解消息队列的服务水平中的 Exactly Once, 指的是消息从生产者发送到 Broker, 然后消费者再从 Broker 拉取消息, 然后进行消费. 这个过程中确保每一条消息恰好传输一次, 不重不丢. 前面说过, 包括 Kafka 在内的几个常见的开源消息队列, "),t("strong",[s._v("都只能做到 At Least Once, 也就是至少一次, 保证消息不丢, 但有可能会重复. 做不到 Exactly Once")]),s._v(".")]),s._v(" "),t("p",[t("img",{attrs:{src:"assets/image-20230522222851-x2b9yur.png",alt:""}})]),s._v(" "),t("p",[s._v("那 Kafka 中的 Exactly Once 又是解决的什么问题呢? "),t("strong",[s._v("它解决的是在流计算中, 用 Kafka 作为数据源, 并且将计算结果保存到 Kafka 这种场景下, 数据从 Kafka 的某个主题中消费, 在计算集群中计算, 再把计算结果保存在 Kafka 的其他主题中. 这样的过程中, 保证每条消息都被恰好计算一次, 确保计算结果正确.")])]),s._v(" "),t("p",[t("img",{attrs:{src:"assets/image-20230522222851-j1590lc.png",alt:""}})]),s._v(" "),t("p",[s._v("举个例子, 比如把所有订单消息保存在一个 Kafka 的主题 Order 中, 在 Flink 集群中运行一个计算任务, 统计每分钟的订单收入, 然后把结果保存在另一个 Kafka 的主题 Income 里面. 要保证计算结果准确, 就要确保无论是 Kafka 集群还是 Flink 集群中任何节点发生故障, 每条消息都只能被计算一次, 不能重复计算, 否则计算结果就错了. 这里面有一个很重要的限制条件, 就是"),t("strong",[s._v("数据必须来自 Kafka 并且计算结果都必须保存到 Kafka 中, 才可以享受到 Kafka 的 Excactly Once 机制")]),s._v(".")]),s._v(" "),t("p",[s._v("可以看到, "),t("strong",[s._v('Kafka 的 Exactly Once 机制, 是为了解决在 "读数据-计算-保存结果" 这样的计算过程中数据不重不丢, 而不是通常理解的使用消息队列进行消息生产消费过程中的 Exactly Once')]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"_3-kafka的事务是如何实现的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-kafka的事务是如何实现的"}},[s._v("#")]),s._v(" 3.Kafka的事务是如何实现的?")]),s._v(" "),t("p",[s._v("那 Kafka 的事务又是怎么实现的呢? 它的实现原理和 RocketMQ 的事务是差不多的, 都是"),t("strong",[s._v("基于两阶段提交")]),s._v("来实现的, 但是实现的过程更加复杂.")]),s._v(" "),t("p",[s._v("首先说一下参与 Kafka 事务的几个角色或者说是模块. 为了解决分布式事务问题, Kafka 引入了"),t("strong",[s._v("事务协调者")]),s._v("这个角色, 负责在服务端协调整个事务. 这个协调者并不是一个独立的进程, 而是 Broker 进程的一部分, "),t("strong",[s._v("协调者和分区一样通过选举来保证自身的可用性")]),s._v(".")]),s._v(" "),t("p",[s._v("和 RocketMQ 类似, Kafka 集群中也有一个特殊的"),t("strong",[s._v("用于记录事务日志的主题")]),s._v(', 这个事务日志主题的实现和普通的主题是一样的, 里面记录的数据就是类似于"开启事务", "提交事务"这样的事务日志. 日志主题同样也包含了很多的分区. 在 Kafka 集群中, 可以存在多个协调者, 每个协调者负责管理和使用事务日志中的几个分区. 这样设计, 其实就是为了能并行执行多个事务, 提升性能.')]),s._v(" "),t("p",[t("img",{attrs:{src:"assets/image-20230522222851-no5p1rx.png",alt:""}})]),s._v(" "),t("p",[s._v("下面说一下 Kafka 事务的实现流程.")]),s._v(" "),t("p",[t("strong",[s._v("首先, 当开启事务的时候, 生产者会给协调者发一个请求来开启事务, 协调者在事务日志中记录下事务 ID.")])]),s._v(" "),t("p",[t("strong",[s._v("然后, 生产者在发送消息之前, 还要给协调者发送请求, 告知发送的消息属于哪个主题和分区, 这个信息也会被协调者记录在事务日志中")]),s._v(". 接下来, 生产者就可以像发送普通消息一样来发送事务消息, 这里和 RocketMQ 不同的是, RocketMQ 选择把未提交的事务消息保存在特殊的队列中, "),t("strong",[s._v("而 Kafka 在处理未提交的事务消息时, 和普通消息是一样的, 直接发给 Broker, 保存在这些消息对应的分区中, Kafka 会在客户端的消费者中, 暂时过滤未提交的事务消息")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v('消息发送完成后, 生产者给协调者发送提交或回滚事务的请求, 由协调者来开始两阶段提交, 完成事务. 第一阶段, 协调者把事务的状态设置为"预提交", 并写入事务日志. 到这里, 实际上事务已经成功了, 无论接下来发生什么情况, 事务最终都会被提交.')])]),s._v(" "),t("p",[t("strong",[s._v('之后便开始第二阶段, 协调者在事务相关的所有分区中, 都会写一条"事务结束"的特殊消息, 当 Kafka 的消费者, 也就是客户端, 读到这个事务结束的特殊消息之后, 它就可以把之前暂时过滤的那些未提交的事务消息, 放行给业务代码进行消费了. 最后协调者记录最后一条事务日志, 标识这个事务已经结束了.')])]),s._v(" "),t("p",[s._v("整个事务的实现流程的时序图如下.")]),s._v(" "),t("p",[t("img",{attrs:{src:"assets/image-20230522222851-mujievz.png",alt:""}})]),s._v(" "),t("p",[s._v('总结一下 Kafka 这个两阶段的流程, 准备阶段, 生产者发消息给协调者开启事务, 然后消息发送到每个分区上. 提交阶段, 生产者发消息给协调者提交事务, 协调者给每个分区发一条"事务结束"的消息, 完成分布式事务提交.')]),s._v(" "),t("h5",{attrs:{id:"_4-小结-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-小结-6"}},[s._v("#")]),s._v(" 4.小结")]),s._v(" "),t("p",[s._v("这节课分别讲解了 Kafka 和 RocketMQ 是如何来实现事务的.")]),s._v(" "),t("p",[t("strong",[s._v("它们在实现事务过程中的一些共同的地方, 它们都是基于两阶段提交来实现的事务, 都利用了特殊的主题中的队列和分区来记录事务日志.")])]),s._v(" "),t("p",[t("strong",[s._v("不同之处在于对处于事务中的消息的处理方式, RocketMQ 是把这些消息暂存在一个特殊的队列中, 待事务提交后再移动到业务队列中; 而 Kafka 直接把消息放到对应的业务分区中, 配合客户端过滤来暂时屏蔽进行中的事务消息. ​")])]),s._v(" "),t("p",[t("strong",[s._v("此外 RocketMQ 和 Kafka 事务的适用场景是不一样的, RocketMQ 的事务适用于解决本地事务和发消息的数据一致性问题, 而 Kafka 的事务则是用于实现它的 Exactly Once 机制, 应用于实时计算的场景中.")])]),s._v(" "),t("h4",{attrs:{id:"pulsar的存储计算分离设计-全新的消息队列设计思路"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pulsar的存储计算分离设计-全新的消息队列设计思路"}},[s._v("#")]),s._v(" Pulsar的存储计算分离设计:全新的消息队列设计思路")]),s._v(" "),t("p",[s._v("Pulsar 也是一个开源的分布式消息队列产品, 最早是由 Yahoo 开发, 现在是 Apache 基金会旗下的开源项目. Pulsar 在架构设计上, 和其他的消息队列产品有非常显著的区别, 这很可能是消息队列这类中间件产品未来架构的发展方向.")]),s._v(" "),t("h5",{attrs:{id:"_1-pulsar的架构和其他消息队列有什么不同"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-pulsar的架构和其他消息队列有什么不同"}},[s._v("#")]),s._v(" 1.Pulsar的架构和其他消息队列有什么不同?")]),s._v(" "),t("p",[s._v('无论是 RocketMQ, RabbitMQ 还是 Kafka, 消息都是存储在 Broker 的磁盘或者内存中. 客户端在访问某个主题分区之前, 必须先找到这个分区所在 Broker, 然后连接到这个 Broker 上进行生产和消费. 在集群模式下, 为了避免单点故障导致丢消息, Broker 在保存消息的时候, 必须也把消息复制到其他的 Broker 上. 当某个 Broker 节点故障的时候, 并不是集群中任意一个节点都能替代这个故障的节点, 只有那些"和这个故障节点拥有相同数据的节点"才能替代这个故障的节点. '),t("strong",[s._v('原因就是每一个 Broker 存储的消息数据是不一样的, 或者说, 每个节点上都存储了状态(数据). 这种节点称为"有状态的节点(Stateful Node)"')]),s._v(".")]),s._v(" "),t("p",[s._v("Pulsar 与其他消息队列在架构上, 最大的不同在于它的 "),t("strong",[s._v("Broker 是无状态的(Stateless)")]),s._v(". 也就是说, "),t("strong",[s._v("在 Pulsar 的 Broker 中既不保存元数据, 也不存储消息")]),s._v(". 那 Pulsar 的消息存储在哪儿呢? 来看一下 Pulsar 的架构是什么样的.")]),s._v(" "),t("p",[t("img",{attrs:{src:"assets/image-20230522222929-wc1s6yq.png",alt:""}})]),s._v(" "),t("p",[s._v("这张 Pulsar 的架构图来自 Pulsar 的官方文档("),t("a",{attrs:{href:"https://pulsar.apache.org/docs/en/concepts-architecture-overview/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Architecture Overview"),t("OutboundLink")],1),s._v("). 先来看图中右侧的 Bookie 和 ZK 这两个方框, 这两个方框分别代表了 "),t("strong",[s._v("BookKeeper 集群和 ZooKeeper 集群")]),s._v(". 在 Pulsar 中, ZooKeeper 集群的作用和在 Kafka 中是一样的, 都是被用来存储"),t("strong",[s._v("元数据")]),s._v(". "),t("strong",[s._v("BookKeeper 集群则被用来存储消息数据")]),s._v(".")]),s._v(" "),t("p",[s._v("那这个 BookKeeper 又是什么呢? BookKeeper 有点儿类似 HDFS, 是一个"),t("strong",[s._v("分布式的存储集群")]),s._v(", 只不过它的存储单元和 HDFS 不一样, 在 HDFS 中存储单元就是文件, 这个很好理解. "),t("strong",[s._v("而 BookKeeper 的存储单元是 Ledger")]),s._v(". 其实 Ledger 就是一段 "),t("strong",[s._v("WAL(Write Ahead Log)")]),s._v(", 或者可以简单地理解为"),t("strong",[s._v("某个主题队列的一段")]),s._v(", 它包含了连续的若干条消息, 消息在 Ledger 中称为 "),t("strong",[s._v("Entry")]),s._v(". 为了保证 Ledger 中的 Entry 的严格顺序, Pulsar 为 Ledger 增加"),t("strong",[s._v("一次性的写入限制, Broker 创建一个 Ledger 后, 只有这个 Broker 可以往 Ledger 中写入 Entry, 一旦 Ledger 关闭后, 无论是 Broker 主动关闭, 还是因为 Broker 宕机异常关闭, 这个 Ledger 就永远只能读取不能写入了")]),s._v(". 如果需要继续写入 Entry, 只能新建另外一个 Ledger.")]),s._v(" "),t("p",[s._v('这种 "一次性写入" 的设计的主要目的是为了'),t("strong",[s._v("解决并发写入控制的问题.")]),s._v(' 前面讲过, 对于共享资源数据的并发写一般都是需要加锁的, 否则很难保证数据的一致性. 对于分布式存储来说, 就需要加"分布式锁". 但分布式锁本身就很难实现, 使用分布式锁对性能也会有比较大的损失. '),t("strong",[s._v('这种 "一次性写入" 的设计, 只有创建 Ledger 的进程可以写入数据, Ledger 这个资源不共享, 也就不需要加锁')]),s._v(", 是一种很巧妙的设计, 在遇到类似场景的时候可以借鉴.")]),s._v(" "),t("p",[t("strong",[s._v("消息数据由 BookKeeper 集群负责存储, 元数据由 ZooKeeper 集群负责存储, Pulsar 的 Broker 上就不需要存储任何数据了, 这样 Broker 就成为了无状态的节点")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("虽然 Broker 是无状态的, 不存储任何的数据, 但是在一个特定的时刻, 每一个主题的分区, 还是要落在某个具体的 Broker 上. 不能说多个 Broker 同时读写同一个分区, 因为这样是没有办法保证消息的顺序的, 也没有办法来管理消费位置.")])]),s._v(" "),t("p",[s._v("再来看图中左侧最大的那个 Broker 方框, 在 Broker 中包含了几个重要的模块. "),t("strong",[s._v("Load Balancer ​")]),s._v("负责动态的分配哪些 Broker 管理哪些主题分区. "),t("strong",[s._v("Managed Ledger")]),s._v(" 这个模块负责管理本节点需要用到的那些 Ledger, 当然这些 Ledger 都是保存在 BookKeeper 集群中的. 为了提升性能, Pulsar 同样采用用了一个 Cache 模块, 来缓存一部分 Ledger.")]),s._v(" "),t("p",[t("strong",[s._v("Pulsar 的客户端要读写某个主题分区上的数据之前, 依然要在元数据中找到分区当前所在的那个 Broker, 这一点是和其他消息队列的实现是一样的")]),s._v(". 不一样的地方是, 其他的消息队列, 分区与 Broker 的对应关系是相对稳定的, 只要不发生故障, 这个关系是不会变的. 而"),t("strong",[s._v("在 Pulsar 中, 这个对应关系是动态的, 它可以根据 Broker 的负载情况进行动态调整, 而且由于 Broker 是无状态的, 分区可以调整到集群中任意一个 Broker 上, 这个负载均衡策略就可以做得非常简单并且灵活. 如果某一个 Broker 发生故障, 可以立即用任何一个 Broker 来替代它")]),s._v(".")]),s._v(" "),t("p",[s._v("那在这种架构下, Pulsar 又是如何来完成消息收发的呢? 客户端在收发消息之前, 需要先连接 Service Discovery 模块, 获取当前主题分区与 Broker 的对应关系, 然后再连接到相应 Broker 上进行消息收发. 客户端收发消息的整体流程, 和其他的消息队列是差不多的. 比较显著的一个区别就是, 消息是保存在 BookKeeper 集群中的, 而不是本机上. "),t("strong",[s._v("数据的可靠性保证也是 BookKeeper 集群提供的, 所以 Broker 就不需要再往其他的 Broker 上复制消息了")]),s._v(".")]),s._v(" "),t("p",[s._v("图中的 Global replicators 模块虽然也会复制消息, 但是复制的目的是为了在不同的集群之间共享数据, 而不是为了保证数据的可靠性.")]),s._v(" "),t("h5",{attrs:{id:"_2-存储计算分离的设计有哪些优点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-存储计算分离的设计有哪些优点"}},[s._v("#")]),s._v(" 2.存储计算分离的设计有哪些优点?")]),s._v(" "),t("p",[t("strong",[s._v('在 Pulsar 这种架构下, 消息数据保存在 BookKeeper 中, 元数据保存在 ZooKeeper 中, Broker 的数据存储的职责被完全被剥离出去, 只保留了处理收发消息等计算的职责, 这就是一个非常典型的"存储计算分离"的设计.')])]),s._v(" "),t("p",[s._v("什么是存储计算分离呢? 顾名思义, 就是将系统的存储职责和计算职责分离开, 存储节点只负责数据存储, 而计算节点只负责计算, 也就是执行业务逻辑. 这样一种设计称为存储计算分离. 存储计算分离设计并不新鲜, 它的应用其实是非常广泛的.")]),s._v(" "),t("p",[s._v("比如所有的大数据系统, 包括 Map Reduce 这种传统的批量计算, 和现在比较流行的 Spark, Flink 这种流计算, 它们都采用的存储计算分离设计. 数据保存在 HDFS 中, 也就是说 HDFS 负责存储, 而负责计算的节点, 无论是用 YARN 调度还是 Kubernetes 调度, 都只负责 "),t("strong",[s._v('"读取-计算-写入" 这样一种通用的计算逻辑, 不保存任何数据')]),s._v(".")]),s._v(" "),t("p",[s._v("更普遍的, "),t("strong",[s._v("各种 Web 应用和微服务应用, 绝大多数也采用的是存储计算分离的设计")]),s._v(". 数据保存在数据库中, 微服务节点只负责响应请求, 执行业务逻辑. 也就是说, "),t("strong",[s._v("数据库负责存储, 微服务节点负责计算")]),s._v(".")]),s._v(" "),t("p",[s._v("那存储计算分离有什么"),t("strong",[s._v("优点")]),s._v("呢? 分两方面来看.")]),s._v(" "),t("p",[s._v("对于计算节点来说, 它不需要存储数据, "),t("strong",[s._v("节点就变成了无状态的(Stateless)节点")]),s._v(". 一个由无状态节点组成的集群, 管理, 调度都变得非常简单了. 集群中每个节点都是一样的, 天然就支持水平扩展. 任意一个请求都可以路由到集群中任意一个节点上, 负载均衡策略可以做得非常灵活, 可以随机分配, 可以轮询, 也可以根据节点负载动态分配等等. "),t("strong",[s._v("故障转移")]),s._v("(Failover)也更加简单快速, 如果某个节点故障了, 直接把请求分配给其他节点就可以了.")]),s._v(" "),t("p",[s._v("对比一下, 像 ZooKeeper 这样存储计算不分离的系统, 它们的故障转移就非常麻烦, 一般需要用复杂的选举算法, 选出新的 leader, 提供服务之前, 可能还需要进行数据同步, 确保新的节点上的数据和故障节点是完全一致之后, 才可以继续提供服务. 这个过程是非常复杂而且漫长的.")]),s._v(" "),t("p",[s._v("对于计算节点的开发者来说, 可以专注于计算业务逻辑开发, 而不需要关注像数据一致性, 数据可靠性, 故障恢复和数据读写性能等等这些比较麻烦的存储问题, 极大地降低了开发难度, 提升了开发效率.")]),s._v(" "),t("p",[s._v('而对于存储系统来说, 它需要实现的功能就很简单, 系统的开发者只需要专注于解决一件事就可以了, 那就是 "如何安全高效地存储数据". 并且存储系统的功能是非常稳定的, 比如像 ZooKeeper, HDFS, MySQL 这些存储系统, 从它们诞生到现在, 功能几乎就没有变过. 每次升级都是在优化存储引擎, 提升性能, 数据可靠性, 可用性等等.')]),s._v(" "),t("p",[s._v("接下来说存储计算分离这种设计的"),t("strong",[s._v("缺点")]),s._v(".")]),s._v(" "),t("p",[s._v("对于一个系统来说, 无论存储和计算是不是分离的, 它需要完成的功能和解决的问题是一样的. 就像前面讲到的, Pulsar 的 Broker 相比于其他消息队列的 Broker, 各方面都变的很简单. 这并不是说存储计算分离的设计能把系统面临的各种复杂的问题都解决了, 其实一个问题都没解决, 只是把"),t("strong",[s._v("这些问题转移到了 BookKeeper 这个存储集群上了而已")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("BookKeeper 依然要解决数据一致性, 节点故障转移, 选举, 数据复制等等这些问题. ​")]),s._v("并且存储计算分离之后, 原来一个集群变成了两个集群, 整个系统其实变得更加"),t("strong",[s._v("复杂")]),s._v("了.")]),s._v(" "),t("p",[s._v("另外存储计算分离之后, 系统的性能也会有一些损失. 比如, 从 Pulsar 的 Broker 上消费一条消息, Broker 还需要去请求 BookKeeper 集群读取数据, 然后返回给客户端, 这个过程至少增加了一次网络传输和 n 次内存拷贝. 相比于直接读本地磁盘, 性能肯定是要差一些的.")]),s._v(" "),t("p",[s._v("不过, 对于业务系统来说, 采用存储计算分离的设计, 它并不需要自己开发一个数据库或者 HDFS, 只要用现有的成熟的存储系统就可以了, 所以相当于系统的复杂度还是降低了. 相比于存储计算分离带来的各种优点, 损失一些性能也是可以接受的.")]),s._v(" "),t("p",[s._v("因此对于大部分业务系统来说, 采用存储计算分离设计, 都是非常划算的.")]),s._v(" "),t("h5",{attrs:{id:"_3-小结-8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-小结-8"}},[s._v("#")]),s._v(" 3.小结")]),s._v(" "),t("p",[s._v("本节分析了 Apache Pulsar 的架构及其存储计算分离的设计思想.")]),s._v(" "),t("p",[t("strong",[s._v("Pulsar 和其他消息队列最大的区别是, 它采用了存储计算分离的设计. 存储消息的职责从 Broker 中分离出来, 交给专门的 BookKeeper 存储集群. 这样 Broker 就变成了无状态的节点, 在集群调度和故障恢复方面更加简单灵活. ​")])]),s._v(" "),t("p",[s._v("存储计算分离是一种设计思想, 它将系统的存储职责和计算职责分离开, 存储节点只负责数据存储, 而计算节点只负责计算, 计算节点是无状态的. 无状态的计算节点, 具有易于开发, 调度灵活的优点, 故障转移和恢复也更加简单快速. 这种设计的缺点是, 系统总体的复杂度更高, 性能也更差. 不过对于大部分分布式的业务系统来说, 由于它不需要自己开发存储系统, 采用存储计算分离的设计, 既可以充分利用这种设计的优点, 整个系统也不会因此变得过于复杂, 综合评估优缺点, 利大于弊, 更加划算.")]),s._v(" "),t("h4",{attrs:{id:"答疑解惑2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#答疑解惑2"}},[s._v("#")]),s._v(" 答疑解惑2")]),s._v(" "),t("h5",{attrs:{id:"_1-并发调用情况下的幂等性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-并发调用情况下的幂等性"}},[s._v("#")]),s._v(" 1.并发调用情况下的幂等性")]),s._v(" "),t("p",[s._v("看一个问题。如果可以保证以下这些操作的原子性, 哪些操作在并发调用的情况下具备幂等性?")]),s._v(" "),t("ul",[t("li",[s._v("A. f(n, a): 给账户 n 转入 a 元")]),s._v(" "),t("li",[s._v("B. f(n, a): 将账户 n 的余额更新为 a 元")]),s._v(" "),t("li",[s._v("C. f(n, b, a): 如果账户 n 当前的余额为 b 元, 那就将账户的余额更新为 n 元")]),s._v(" "),t("li",[s._v("D. f(n, v, a): 如果账户 n 当前的流水号等于 v, 那么给账户的余额加 a 元, 并将流水号加一")])]),s._v(" "),t("p",[s._v("这道题的正确答案是 D. 比较迷惑的是选项 B 中, 将账户 n 的余额更新为 a 元, 这个操作不具备幂等性吗?")]),s._v(" "),t("p",[s._v('如果单单只是考虑这个操作, 执行一次和执行多次, 对系统的影响是一样的, 账户 n 的余额都是 a 元. 所以这个操作确实是幂等的. 但注意题目中说的是: "哪些操作'),t("strong",[s._v("在并发调用的情况下")]),s._v('具备幂等性?", 在并发调用的情况下再来看一下 B 这个选项的操作是否还具备幂等性.')]),s._v(" "),t("p",[s._v("假设, 账户余额 100 元, 依次执行 2 次转账:")]),s._v(" "),t("ol",[t("li",[s._v("将账户余额设为 200 元;")]),s._v(" "),t("li",[s._v("将账户余额设为 300 元;")])]),s._v(" "),t("p",[s._v("经过两次转账后, 账户余额应该是 300 元. 按照时间顺序, 就有可能会出现下面这种情况:")]),s._v(" "),t("ol",[t("li",[s._v("t0 时刻客户端发送请求: 将账户余额设为 200 元.")]),s._v(" "),t("li",[s._v("t1 时刻服务端收到请求, 账户余额由 100 元变为 200 元, 然后服务端发出给客户端操作成功的响应, 但是这个响应在网络传输过程中丢失了.")]),s._v(" "),t("li",[s._v("t2 时刻客户端发送请求: 将账户余额设为 300 元.")]),s._v(" "),t("li",[s._v("t3 时刻服务端收到请求, 账户余额由 200 元变为 300 元, 然后服务端发出给客户端操作成功的响应.")]),s._v(" "),t("li",[s._v("t4 时刻客户端: 收到“将账户余额设为 300 元”这个请求的成功响应, 本次调用成功.")]),s._v(" "),t("li",[s._v("t5 时刻客户端由于没收到“将账户余额设为 300 元”这个请求的成功响应, 重新发送请求: 将账户余额设为 200 元.")]),s._v(" "),t("li",[s._v("t6 时刻服务端收到请求, 账户余额由 300 元变为 200 元, 然后服务端给客户端发出操作成功的响应.")]),s._v(" "),t("li",[s._v("t7 时刻客户端收到响应, 本次重试调用成功.")])]),s._v(" "),t("p",[s._v("结果, 账户余额错误地变成了 200 元.")]),s._v(" "),t("p",[s._v("因此 "),t("strong",[s._v("一个操作是否幂等, 还跟调用顺序有关系")]),s._v(", 在线性调用情况下, 具备幂等性的操作, 在并发调用时, 就不一定具备幂等性了.")]),s._v(" "),t("h5",{attrs:{id:"_2-kafka和rocketmq如何通过选举来产生新的leader"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-kafka和rocketmq如何通过选举来产生新的leader"}},[s._v("#")]),s._v(" 2.Kafka和RocketMQ如何通过选举来产生新的Leader?")]),s._v(" "),t("p",[s._v("前面讲了 Kafka 和 RocketMQ 消息队列是如何通过"),t("strong",[s._v("复制")]),s._v("来保证数据一致性的. 当 Broker 节点发生故障时, 它们都是通过"),t("strong",[s._v("选举机制")]),s._v(", 来选出新的 Leader 来继续提供服务. 前面并没有深入进去来讲选举的实现原理. 那 Kafka 和 RocketMQ(Dledger)都是怎么来实现的选举呢?")]),s._v(" "),t("p",[s._v("先来说 Kafka 的选举, 因为 Kafka 的选举实现比较简单. 严格地说, Kafka 分区的 Leader 并不是选举出来的, 而是 "),t("strong",[s._v("Controller")]),s._v(" 指定的. Kafka 使用 ZooKeeper 来监控每个分区的多个副本, 如果发现某个分区的主节点宕机了, Controller 会收到 ZooKeeper 的通知, 这个时候 Controller 会从 ISR 节点中选择一个节点, 指定为新的 Leader.")]),s._v(" "),t("p",[s._v("在 Kafka 中 Controller 本身也是通过 "),t("strong",[s._v("ZooKeeper 选举")]),s._v("产生的. 下面讲一下 Kafka Controller 利用 ZooKeeper 选举的方法, 这种方法非常简单实用, 并且适用性非常广泛, 在设计很多分布式系统中都可以用到.")]),s._v(" "),t("p",[s._v('这种选举方法严格来说也不是真正的 "选举", 而是一种'),t("strong",[s._v("抢占模式")]),s._v(". 实现也很简单, 每个 Broker 在启动后, 都会"),t("strong",[s._v("尝试在 ZooKeeper 中创建同一个临时节点: /controller")]),s._v(", 并把自身的信息写入到这个节点中. 由于 ZooKeeper 是一个"),t("strong",[s._v("可以保证数据一致性的分布式存储")]),s._v(", 所以集群中只会有一个 Broker 抢到这个临时节点, "),t("strong",[s._v("那它就是 Leader 节点")]),s._v(". 其他没抢到 Leader 的节点, 会 Watch 这个临时节点, 如果当前的 Leader 节点宕机, 所有其他节点都会收到通知, 它们会开始新一轮的抢 Leader 游戏.")]),s._v(" "),t("p",[s._v('这就好比有个玉玺, 谁都可以抢这个玉玺, 谁抢到谁做皇帝, 其他没抢到的人也不甘心, 时刻盯着这个玉玺, 一旦现在这个皇帝驾崩了, 所有人一哄而上, 再"抢"出一个新皇帝. 这个算法虽然不怎么优雅, 但胜在简单直接, 并且快速公平, 是非常不错的选举方法.')]),s._v(" "),t("p",[s._v('但是这个算法它依赖一个"玉玺", 也就是一个'),t("strong",[s._v("可以保证数据一致性的分布式存储")]),s._v(", 这个分布式存储不一定非得是 ZooKeeper, 可以是 "),t("strong",[s._v("Redis")]),s._v(", 可以是 MySQL, 也可以是 HDFS, 只要是"),t("strong",[s._v("可以保证数据一致性的分布式存储")]),s._v(', 都可以充当这个"玉玺", 所以这个选举方法的适用场景也是非常广泛的.')]),s._v(" "),t("p",[s._v("再来说 "),t("strong",[s._v("RocketMQ")]),s._v("/Dledger 的选举, 在 Dledger 中的 Leader 真的是通过投票选举出来的, 所以它不需要借助于任何外部的系统, 仅靠集群的节点间投票来达成一致, 选举出 Leader. 一般这种自我选举的算法, 为了保证数据一致性, 避免集群分裂, 算法设计的都非常非常复杂, 不太可能自己来实现这样一个选举算法, 所以在这里不展开讲. Dledger 采用的是 "),t("a",{attrs:{href:"https://raft.github.io",target:"_blank",rel:"noopener noreferrer"}},[s._v("Raft 一致性算法"),t("OutboundLink")],1),s._v(".")]),s._v(" "),t("p",[s._v("像 Raft 这种自我选举的算法, 相比于上面介绍的抢占式选举, 优点是不需要借助外部系统, 完全可以实现自我选举. 缺点也非常明显, 就是算法实在是"),t("strong",[s._v("太复杂了")]),s._v(", 非常难实现. 并且往往集群中的节点要通过"),t("strong",[s._v("多轮投票")]),s._v("才能达成一致, 这个选举过程是比较慢的, 一次选举耗时几秒甚至几十秒都有可能.")]),s._v(" "),t("p",[s._v("日常在设计一些分布式的业务系统时, 如果需要"),t("strong",[s._v("选举 Leader")]),s._v(', 还是采用 Kafka 的这种"抢玉玺"的方法更加简单实用.')]),s._v(" "),t("h4",{attrs:{id:"流计算与消息1-通过flink理解流计算的原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#流计算与消息1-通过flink理解流计算的原理"}},[s._v("#")]),s._v(" 流计算与消息1:通过Flink理解流计算的原理")]),s._v(" "),t("p",[s._v("前面简单地介绍了消息队列和流计算的相关性. 在生产中, "),t("strong",[s._v("消息队列和流计算往往是相互配合")]),s._v(", 一起来使用的. 而流计算也是后端程序员技术栈中非常重要的一项技术. 这里通过两个例子来实际演练一下, 如何使用消息队列配合流计算框架实现一些常用的流计算任务.")]),s._v(" "),t("p",[s._v("本节基于 Flink 实现一个流计算任务, 通过这个例子来感受一下流计算的好处. 下一节会把本节的例子升级改造, 使用 Kafka 配合 Flink 来实现 Exactly Once 语义, 确保数据在计算过程中不重不丢.")]),s._v(" "),t("h5",{attrs:{id:"_1-哪些问题适合用流计算解决"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-哪些问题适合用流计算解决"}},[s._v("#")]),s._v(" 1.哪些问题适合用流计算解决?")]),s._v(" "),t("p",[s._v("首先来说一下, 哪些问题适合用流计算来解决? 或者说流计算的应用场景是什么样的呢?")]),s._v(" "),t("p",[s._v("用一句话来回答这个问题: "),t("strong",[s._v("对实时产生的数据进行实时统计分析, 这类场景都适合使用流计算来实现. ​")])]),s._v(" "),t("p",[s._v('这里面有两个"实时", 一个是说数据是"实时"产生的; 另一个是说, 统计分析这个过程是"实时"进行的, 统计结果也是第一时间就计算出来了. 对于这样的场景都可以考虑使用流计算框架.')]),s._v(" "),t("p",[s._v("因为流计算框架可以自动实现实时的并行计算, 性能非常好, 并且内置了很多常用的统计分析的算子, 比如 TimeWindow, GroupBy, Sum 和 Count, 所以非常适合用来做实时的统计和分析. 举几个例子:")]),s._v(" "),t("ul",[t("li",[s._v("每分钟按照 IP 统计 Web 请求次数;")]),s._v(" "),t("li",[s._v("电商在大促时, 实时统计当前下单量;")]),s._v(" "),t("li",[s._v("实时统计 App 中的埋点数据, 分析营销推广效果.")])]),s._v(" "),t("p",[s._v("以上这些场景, 以及和这些场景类似的场景, 都是比较适合用流计算框架来实现的. 特别是基于时间维度的统计分析, 使用流计算框架来实现是非常方便的.")]),s._v(" "),t("h5",{attrs:{id:"_2-用代码定义job并在flink中执行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-用代码定义job并在flink中执行"}},[s._v("#")]),s._v(" 2.用代码定义Job并在Flink中执行")]),s._v(" "),t("p",[s._v("接下来用 Flink 来实现一个实时统计任务: 接收 NGINX 的 access.log, 每 5 秒钟按照 IP 地址统计 Web 请求的次数. 这个统计任务它一个非常典型的, 按照 Key 来进行分类汇总的统计任务, 并且汇总是按照一定周期来实时进行的.")]),s._v(" "),t("p",[s._v("假设已经有一个实时发送 access.log 的日志服务, 它运行在本地的 9999 端口上, 只要有客户端连接上来, 他就会通过 Socket 给客户端发送实时的访问日志, 日志的内容只包含访问时间和 IP 地址, 每条数据的结尾用一个换行符 (\\n) 作为分隔符. 这个日志服务就是流计算任务的数据源.")]),s._v(" "),t("p",[s._v("用 NetCat 连接到这个服务上, 看一下数据格式:")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("$nc localhost 9999\n14:37:11 192.168.1.3\n14:37:11 192.168.1.2\n14:37:12 192.168.1.4\n14:37:14 192.168.1.2\n14:37:14 192.168.1.4\n14:37:14 192.168.1.3\n...\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("接下来用 Scala 语言和 Flink 来实现这个流计算任务. 可以先不用关心如何部署启动 Flink, 如何设置开发环境这些问题, 先看下定义这个流计算任务的代码:")]),s._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("object")]),s._v(" SocketWindowIpCount "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" main"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("args"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Unit")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 获取运行时环境")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" env"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" StreamExecutionEnvironment "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" StreamExecutionEnvironment"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("getExecutionEnvironment\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 按照 EventTime 来统计")]),s._v("\n    env"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("setStreamTimeCharacteristic"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("TimeCharacteristic"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("EventTime"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 设置并行度")]),s._v("\n    env"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("setParallelism"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 定义输入：从 Socket 端口中获取数据输入")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" hostname"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("String")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"localhost"')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" port"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9999")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Task 1")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" input"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" DataStream"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" env"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("socketTextStream"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("hostname"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" port"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token char"}},[s._v("'\\n'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 数据转换：将非结构化的以空格分隔的文本转成结构化数据 IpAndCount")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Task 2")]),s._v("\n    input\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("map "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" line "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("=>")]),s._v(" line"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("split"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"\\\\s"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("map "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" wordArray "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("=>")]),s._v(" IpAndCount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" SimpleDateFormat"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"HH:mm:ss"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("parse"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("wordArray"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" wordArray"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 计算：每 5 秒钟按照 ip 对 count 求和")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("assignAscendingTimestamps"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("_"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("date"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("getTime"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 告诉 Flink 时间从哪个字段中获取")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("keyBy"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ip"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 按照 ip 地址统计")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Task 3")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("window"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("TumblingEventTimeWindows"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("of"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Time"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("seconds"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 每 5 秒钟统计一次")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("sum"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"count"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 对 count 字段求和")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出：转换格式，打印到控制台上")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("map "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" aggData "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("=>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" SimpleDateFormat"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"HH:mm:ss"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("format"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("aggData"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("date"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" "')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" aggData"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ip "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" "')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" aggData"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("count "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("print"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n \n    env"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("execute"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Socket Window IpCount"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/** 中间数据结构 */")]),s._v("\n \n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" IpAndCount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("date"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Date"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ip"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" count"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Long")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br")])]),t("p",[s._v("解读一下这段代码.")]),s._v(" "),t("p",[s._v("首先需要获取流计算的运行时环境, 也就是这个 env 对象, 对 env 做一些初始化的设置. 然后再定义输入的数据源, 这里就是运行在 9999 端口上的日志服务.")]),s._v(" "),t("p",[s._v("在代码中, env.socketTextStream(hostname, port, ‘\\n’) 这个语句中的三个参数分别是主机名, 端口号和分隔符, 返回值的数据类型是 DataStream[String], 代表一个数据流, 其中的每条数据都是 String 类型的. "),t("strong",[s._v("它告诉 Flink 数据源是一个 Socket 服务")]),s._v(". 这样 Flink 在执行这个计算任务的时候, 就会去连接日志服务来接收数据.")]),s._v(" "),t("p",[s._v("定义完数据源之后, 需要做一些"),t("strong",[s._v("数据转换")]),s._v(", 把字符串转成结构化的数据 IpAndCount, 便于后续做计算. 在定义计算的部分, 依次告诉 Flink: 时间从 date 字段中获取, 按照 IP 地址进行汇总, 每 5 秒钟汇总一次, 汇总方式就是对 count 字段求和.")]),s._v(" "),t("p",[s._v("之后定义计算结果如何输出, 这里直接把结果打印到控制台上就行.")]),s._v(" "),t("p",[s._v("这样就完成了一个流计算任务的定义. 可以看到, 定义一个计算任务的代码还是非常简单的, 如果要自己写一个分布式的统计程序来实现一样的功能, 代码量和复杂度肯定要远远超过上面这段代码.")]),s._v(" "),t("p",[s._v("总结下来, 无论是使用 Flink, Spark 还是其他的流计算框架, 定义一个流计算的任务基本上都可以分为: "),t("strong",[s._v("定义输入, 定义计算逻辑和定义输出")]),s._v("三部分, 通俗地说, 也就是: "),t("strong",[s._v("数据从哪儿来, 怎么计算, 结果写到哪儿去")]),s._v(", 这三件事儿.")]),s._v(" "),t("p",[s._v("执行计算任务打印出的计算结果是这样的:")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("1> 18:40:10 192.168.1.2 23\n4> 18:40:10 192.168.1.4 16\n4> 18:40:15 192.168.1.4 27\n3> 18:40:15 192.168.1.3 23\n1> 18:40:15 192.168.1.2 25\n4> 18:40:15 192.168.1.1 21\n1> 18:40:20 192.168.1.2 21\n3> 18:40:20 192.168.1.3 31\n4> 18:40:20 192.168.1.1 25\n4> 18:40:20 192.168.1.4 26\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[s._v("对于流计算的初学者, 特别不好理解的一点是上面编写的这段代码, "),t("strong",[s._v('它只是"用来定义计算任务的代码", 而不是"真正处理数据的代码". ​')]),s._v("对于普通的应用程序, 源代码编译之后, 计算机就直接执行了, 这个比较好理解. 而在 Flink 中, 当这个计算任务在 Flink 集群的计算节点中运行的时候, 真正处理数据的代码并不是上面写的那段代码, 而是 Flink 在"),t("strong",[s._v("解析了计算任务之后, 动态生成的代码")]),s._v(".")]),s._v(" "),t("p",[s._v("这个有点儿类似于查询 MySQL 的时候执行的 SQL, 当提交一个 SQL 查询后, MySQL 在执行查询遍历数据库中每条数据时, 并不是对每条数据执行一遍 SQL, 真正执行的其实是 MySQL 自己的代码. SQL 只是告诉 MySQL 要如何来查询数据, 同样, 这里编写的这段定义计算任务的代码, 只是告诉 Flink 要如何处理数据而已.")]),s._v(" "),t("h5",{attrs:{id:"_3-job是如何在flink集群中执行的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-job是如何在flink集群中执行的"}},[s._v("#")]),s._v(" 3.Job是如何在Flink集群中执行的?")]),s._v(" "),t("p",[s._v("那计算任务是如何在 Flink 中执行的呢? 先简单看一下 Flink 集群在运行时的架构.")]),s._v(" "),t("p",[s._v("下面这张图来自于 "),t("a",{attrs:{href:"https://github.com/liyue2008/IpCount",target:"_blank",rel:"noopener noreferrer"}},[s._v("Flink 的官方文档"),t("OutboundLink")],1),s._v(".")]),s._v(" "),t("p",[t("img",{attrs:{src:"assets/image-20230522223010-5jngkt1.png",alt:""}})]),s._v(" "),t("p",[s._v("Flink 的集群和其他分布式系统都是类似的, 集群的大部分节点都是 "),t("strong",[s._v("TaskManager")]),s._v(" 节点, 每个节点就是一个 Java 进程, 负责执行计算任务. 另外一种节点是 "),t("strong",[s._v("JobManager")]),s._v(" 节点, 它负责管理和协调所有的计算节点和计算任务, 同时客户端和 Web 控制台也是通过 JobManager 来提交和管理每个计算任务的.")]),s._v(" "),t("p",[t("strong",[s._v("编写好计算任务的代码后, 打包成 JAR 文件, 然后通过 Flink 的客户端提交到 JobManager 上. 计算任务被 Flink 解析后, 会生成一个 Dataflow Graph, 也叫 JobGraph, 简称 DAG, 这是一个有向无环图(DAG).")]),s._v(" 比如前面的例子生成的 DAG 是这样的:")]),s._v(" "),t("p",[t("img",{attrs:{src:"assets/image-20230522223010-38kyojd.png",alt:""}})]),s._v(" "),t("p",[s._v("图中的每个节点是一个 Task, 每个 Task 就是一个"),t("strong",[s._v("执行单元")]),s._v(", 运行在某一个 TaskManager 的进程内. 可以想象一下, 就像电流流过电路图一样, 数据从 Source Task 流入, 进入这个 DAG, 每流过一个 Task, 就被这个 Task 做一些计算和变换, 然后数据继续流入下一个 Task, 直到最后一个 Sink Task 流出 DAG, 就自然完成了计算.")]),s._v(" "),t("p",[s._v('对于图中的 3 个 Task, 每个 Task 对应执行了什么计算, 完全可以和上面定义计算任务的源代码对应上, 代码注释中也用 "//Task n" 的形式给出了标注. 第一个 Task 执行的计算很简单, 就是连接日志服务接收日志数据, 然后将日志数据发往下一个 Task. 第二个 Task 执行了两个 map 变换, 把文本数据转换成了结构化的数据, 并添加 Watermark(水印). Watermark 这个概念可以先不用管, 主要是用于触发按时间汇总的操作. 第三个 Task 执行了剩余的计算任务, 按时间汇总日志, 并输出打印到控制台上.')]),s._v(" "),t("p",[s._v("这个 DAG 仍然是一个逻辑图, 它到底是怎么在 Flink 集群中执行的呢? 注意图中每个 Task 都标注了一个 "),t("strong",[s._v("Parallelism")]),s._v("(并行度)的数字. 这个并行度的意思就是, "),t("strong",[s._v("这个 Task 可以被多少个线程并行执行")]),s._v(". 比如图中的第二个任务, 它的并行度是 4, 就代表 Task 在 Flink 集群中运行的时候, 会有 4 个线程都在执行这个 Task, 每个线程就是一个 SubTask(子任务). 注意如果 Flink 集群的节点数够多, 这 4 个 SubTask 可能会运行在不同的 TaskManager 节点上.")]),s._v(" "),t("p",[s._v("建立了 SubTask 的概念之后, 再重新回过头来看一下这个图中的两个箭头. 第一个箭头连接前两个 Task, 这个箭头标注了 "),t("strong",[s._v("REBALANCE")]),s._v("(重新分配), 因为第一个 Task 并行度是 1, 而第二个 Task 并行度是 4, 意味着从第一个 Task 流出的数据将被重新分配给第二个 Task 的 4 个线程, 也就是 4 个 SubTask(子任务)中, 这样就实现了"),t("strong",[s._v("并行处理")]),s._v(". 这和消息队列中每个主题分成多个分区进行并行收发的设计思想是一样的.")]),s._v(" "),t("p",[s._v("再来看连接第二, 第三这两个 Task 的箭头, 这个箭头上标注的是 "),t("strong",[s._v("HASH")]),s._v(', 为什么呢? 可以看到, 第二个 Task 中最后一步业务逻辑是: keyBy("ip"), 也就是按照 IP 这个字段做一个 HASH 分流. 可以想一下, 第三个 Task, 它的并行度是 4, 也就是有 4 个线程在并行执行汇总. 如果要统计每个 IP 的日志条数, 那必须得把相同 IP 的数据发送到同一个 SubTask(子任务)中去, 这样在每个 SubTask(子任务)中, 对于每一条数据, 只要在对应 IP 汇总记录上进行累加就可以了.')]),s._v(" "),t("p",[s._v("反之, 要是相同 IP 的数据被分到多个 SubTask(子任务)上, 这些 SubTask 又可能分布在多个物理节点上, 那就没办法统计了. 所以第二个 Task 会把数据按照 IP 地址做一个 HASH 分流, 保证 IP 相同的数据都发送到第三个 Task 中相同的 SubTask(子任务)中. 这个 HASH 分流的设计是不是感觉很眼熟? 前面提到严格顺序消息的实现方法: "),t("strong",[s._v("通过 HASH 算法, 让 key 相同的数据总是发送到相同的分区上来保证严格顺序, 和 Flink 这里的设计就是一样的")]),s._v(".")]),s._v(" "),t("p",[s._v("最后在第三个 Task 中, 4 个 SubTask 并行进行数据汇总, 每个 SubTask 负责汇总一部分 IP 地址的数据. 最终打印到控制台上的时候, 也是 4 个线程并行打印. 可以看看输出的计算结果, 每一行数据前面的数字, 就是第三个 Task 中 SubTask 的编号.")]),s._v(" "),t("h5",{attrs:{id:"_4-小结-7"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-小结-7"}},[s._v("#")]),s._v(" 4.小结")]),s._v(" "),t("p",[s._v("Flink 分析计算任务之后生成 JobGraph, JobGraph 是一个有向无环图, 数据流过这个图中的节点, 在每个节点进行计算和变换, 最终流出有向无环图就完成了计算. JobGraph 中的每个节点是一个 Task, Task 是可以并行执行的, 每个线程就是一个 SubTask. SubTask 被 JobManager 分配给某个 TaskManager, 在 TaskManager 进程中的一个线程中执行.")]),s._v(" "),t("p",[s._v("通过分析 Flink 的实现原理可以看到, 流计算框架本身并没有什么神奇的技术, 之所以能够做到非常好的性能, 主要有两个原因. 一是它能自动拆分计算任务来实现并行计算, 这个和 Hadoop 中 Map Reduce 的原理是一样的. 二是流计算框架中都内置了很多常用的计算和统计分析的算子, 这些算子的实现都是经过反复优化过的, 不仅能方便开发, 性能上也比大多数程序员自行实现要快很多.")]),s._v(" "),t("h4",{attrs:{id:"流计算与消息2-在流计算中使用kafka链接计算任务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#流计算与消息2-在流计算中使用kafka链接计算任务"}},[s._v("#")]),s._v(" 流计算与消息2:在流计算中使用Kafka链接计算任务")]),s._v(" "),t("p",[s._v("流计算框架本身是个分布式系统, 一般由多个节点组成一个集群. 计算任务在计算集群中运行的时候, 会被拆分成多个子任务, 这些子任务也是分布在集群的多个计算节点上的.")]),s._v(" "),t("p",[s._v("大部分流计算平台都会采用"),t("strong",[s._v("存储计算分离")]),s._v("的设计, 将计算任务的状态保存在 HDFS 等分布式存储系统中. 每个子任务将状态分离出去之后, 就变成了无状态的节点, 如果某一个计算节点发生宕机, 使用集群中任意一个节点都可以替代故障节点.")]),s._v(" "),t("p",[s._v("但对流计算来说, 这里面还有一个问题没解决, "),t("strong",[s._v("就是在集群中流动的数据并没有被持久化")]),s._v(", 所以它们就有可能由于节点故障而丢失, 怎么解决这个问题呢? 办法也比较简单粗暴, 就是直接重启整个计算任务, 并且从数据源头向前回溯一些数据. 计算任务重启之后, 会重新分配计算节点, 顺便就完成了故障迁移.")]),s._v(" "),t("p",[s._v("回溯数据源, 可以保证数据不丢失, 这和消息队列中, 通过重发未成功的消息来保证数据不丢的方法是类似的. 所以它们面临同样的问题: "),t("strong",[s._v("可能会出现重复的消息")]),s._v(". 消息队列可以通过在消费端做幂等来克服这个问题, 但是对于流计算任务来说, 这个问题就很棘手了.")]),s._v(" "),t("p",[s._v("对于接收计算结果的下游系统, 它可能会收到重复的计算结果, 这还不是最糟糕的. 像一些统计类的计算任务, 就会有比较大的影响, 比如前面统计访问次数的例子, 本来这个 IP 地址在统计周期内被访问了 5 次, 产生了 5 条访问日志, 正确的结果应该是 5 次. 如果日志被重复统计, 那结果就会多于 5 次, 重复的数据导致统计结果出现了错误. 怎么解决这个问题呢? 前面提到过, Kafka 支持 Exactly Once 语义, 它的这个特性就是为了解决这个问题而生的. 本节就通过一个例子来看看"),t("strong",[s._v("如何使用 Kafka 配合 Flink, 解决数据重复的问题, 实现端到端的 Exactly Once 语义")]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"_1-flink是如何保证exactly-once语义的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-flink是如何保证exactly-once语义的"}},[s._v("#")]),s._v(" 1.Flink是如何保证Exactly Once语义的?")]),s._v(" "),t("p",[s._v('端到端 Exactly Once 里面的"端到端"指的是, '),t("strong",[s._v("数据从 Kafka 的 A 主题消费, 发送给 Flink 的计算集群进行计算, 计算结果再发给 Kafka 的 B 主题")]),s._v(". 在这整个过程中, "),t("strong",[s._v("无论是 Kafka 集群的节点还是 Flink 集群的节点发生故障, 都不会影响计算结果, 每条消息只会被计算一次, 不能多也不能少")]),s._v(".")]),s._v(" "),t("p",[s._v("在理解端到端 Exactly Once 的实现原理之前, 需要先了解一下, Flink 集群本身是如何保证 Exactly Once 语义的. 为什么 Flink 也需要保证 Exactly Once 呢? Flink 集群本身也是一个分布式系统, 它首先需要保证数据在 Flink 集群内部只被计算一次, 只有在这个基础上, 才谈得到端到端的 Exactly Once.")]),s._v(" "),t("p",[t("strong",[s._v("Flink 通过 CheckPoint 机制来定期保存计算任务的快照")]),s._v(", 这个快照中主要包含两个重要的数据:")]),s._v(" "),t("ol",[t("li",[t("strong",[s._v("整个计算任务的状态")]),s._v(". 这个状态主要是计算任务中, 每个子任务在计算过程中需要保存的临时状态数据. 比如前面例子中汇总了一半的数据.")]),s._v(" "),t("li",[t("strong",[s._v("数据源的位置信息")]),s._v(". 这个信息记录了在数据源的这个流中已经计算了哪些数据. 如果数据源是 Kafka 的主题, 这个位置信息就是 Kafka 主题中的消费位置.")])]),s._v(" "),t("p",[s._v("有了 CheckPoint, 当计算任务失败重启的时候, 可以"),t("strong",[s._v("从最近的一个 CheckPoint 恢复计算任务")]),s._v('. 具体的做法是, 每个子任务先从 CheckPoint 中读取并恢复自己的状态, 然后整个计算任务从 CheckPoint 中记录的数据源位置开始消费数据, 只要这个恢复位置和 CheckPoint 中每个子任务的状态是完全对应的, 或者说, 每个子任务的状态恰好是: "刚刚处理完恢复位置之前的那条数据, 还没有开始处理恢复位置对应的这条数据", 这个时刻保存的状态, 就可以做到严丝合缝地恢复计算任务, 每一条数据既不会丢失也不会重复.')]),s._v(" "),t("p",[s._v("因为每个子任务分布在不同的节点上, 并且数据是一直在子任务中流动的, 所以确保 CheckPoint 中记录的恢复位置和每个子任务的状态完全对应并不是一件容易的事儿, Flink 是怎么实现的呢?")]),s._v(" "),t("p",[t("strong",[s._v("Flink 通过在数据流中插入一个 Barrier(屏障)来确保 CheckPoint 中的位置和状态完全对应")]),s._v(". 下面这张图来自"),t("a",{attrs:{href:"https://ci.apache.org/projects/flink/flink-docs-stable/internals/stream_checkpointing.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Flink 官网的说明文档"),t("OutboundLink")],1),s._v(".")]),s._v(" "),t("p",[t("img",{attrs:{src:"assets/image-20230522223034-tx07ago.png",alt:""}})]),s._v(" "),t("p",[t("strong",[s._v("可以把 Barrier 理解为一条特殊的数据")]),s._v(". Barrier 由 Flink 生成, 并在"),t("strong",[s._v("数据进入计算集群时被插入到数据流中")]),s._v(". 这样无限的数据流就被很多的 Barrier 分隔成很多段. Barrier 在流经每个计算节点的时候, 就会触发这个节点在 CheckPoint 中保存本节点的状态, 如果这个节点是数据源节点, 还会保存数据源的位置.")]),s._v(" "),t("p",[t("strong",[s._v("当一个 Barrier 流过所有计算节点, 流出计算集群后, 一个 CheckPoint 也就保存完成了. 由于每个节点都是在 Barrier 流过的时候保存的状态, 这时的状态恰好就是 Barrier 所在位置(也就是 CheckPoint 数据源位置)对应的状态, 这样就完美解决了状态与恢复位置对应的问题. ​")])]),s._v(" "),t("p",[t("strong",[s._v("Flink 通过 CheckPoint 机制实现了集群内计算任务的 Exactly Once 语义, 但是仍然实现不了在输入和输出两端数据不丢不重.")]),s._v(' 比如 Flink 在把一条计算结果发给 Kafka 并收到来自 Kafka 的"发送成功"响应之后, 才会继续处理下一条数据. 如果这个时候重启计算任务, Flink 集群内的数据都可以完美地恢复到上一个 CheckPoint, 但是已经发给 Kafka 的消息却没办法撤回, 还是会出现数据重复的问题.')]),s._v(" "),t("p",[t("strong",[s._v("所以需要配合 Kafka 的 Exactly Once 机制, 才能实现端到端的 Exactly Once.")])]),s._v(" "),t("h5",{attrs:{id:"_2-kafka如何配合flink实现端到端exactly-once"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-kafka如何配合flink实现端到端exactly-once"}},[s._v("#")]),s._v(" 2.Kafka如何配合Flink实现端到端Exactly Once?")]),s._v(" "),t("p",[s._v("Kafka 的 Exactly Once 语义是通过它的"),t("strong",[s._v("事务和生产幂等")]),s._v("两个特性来共同实现的. 其中 Kafka 事务可以保证一个事务内的所有消息, 要么都成功投递, 要么都不投递. 生产幂等这个特性可以保证在生产者给 Kafka Broker 发送消息这个过程中, 消息不会重复发送. Kafka 的生产者给每个消息增加都附加一个连续递增的序号, Broker 端会检测这个序号的连续性, 如果序号重复了, Broker 会拒绝这个重复消息.")]),s._v(" "),t("p",[s._v("Kafka 的这两个机制, 配合 Flink 就可以来实现端到端的 Exactly Once 了. 简单地说就是, "),t("strong",[s._v("每个 Flink 的 CheckPoint 对应一个 Kafka 事务. Flink 在创建一个 CheckPoint 的时候, 同时开启一个 Kafka 的事务, 完成 CheckPoint 同时提交 Kafka 的事务. 当计算任务重启的时候, 在 Flink 中计算任务会恢复到上一个 CheckPoint, 这个 CheckPoint 正好对应 Kafka 上一个成功提交的事务. 未完成的 CheckPoint 和未提交的事务中的消息都会被丢弃, 这样就实现了端到端的 Exactly Once")]),s._v(".")]),s._v(" "),t("p",[s._v('但是怎么才能保证 "完成 CheckPoint 同时提交 Kafka 的事务" 呢? 或者说, 如何来保证 "完成 CheckPoint" 和 "提交 Kafka 事务" 这两个操作, 要么都成功, 要么都失败呢? 这不就是一个典型的分布式事务问题嘛!')]),s._v(" "),t("p",[s._v("所以 Flink 基于"),t("strong",[s._v("两阶段提交")]),s._v("这个常用的分布式事务算法, 实现了一个分布式事务的控制器来解决这个问题.")]),s._v(" "),t("h5",{attrs:{id:"_3-exactly-once版本的web请求的统计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-exactly-once版本的web请求的统计"}},[s._v("#")]),s._v(" 3.Exactly Once版本的Web请求的统计")]),s._v(" "),t("p",[s._v('这里把前面的 "统计 Web 请求的次数" 的 Flink Job 改造一下, 让这个 Job 具备 Exactly Once 特性. 这个实时统计任务接收 NGINX 的 access.log, 每 5 秒钟按照 IP 地址统计 Web 请求的次数. 假设已经有一个实时发送 access.log 的日志服务来发送日志, 日志的内容只包含访问时间和 IP 地址, 这个日志服务就是流计算任务的数据源.')]),s._v(" "),t("p",[t("strong",[s._v("改造之后需要把数据的来源替换成 Kafka 的 ip_count_source 主题, 计算结果也要保存到 Kafka 的主题 ip_count_sink 中.")])]),s._v(" "),t("p",[s._v("整个系统的数据流向就变成下图这样:")]),s._v(" "),t("p",[t("img",{attrs:{src:"assets/image-20230522223034-250wuvz.jpg",alt:""}})]),s._v(" "),t("p",[t("strong",[s._v("日志服务将日志数据发送到 Kafka 的主题 ip_count_source, 计算任务消费这个主题的数据作为数据源, 计算结果会被写入到 Kafka 的主题 ip_count_sink 中. ​")])]),s._v(" "),t("p",[s._v("Flink 提供了 Kafka Connector 模块, 可以作为数据源从 Kafka 中消费数据, 也可以作为 Kafka 的 Producer, 将计算结果发送给 Kafka, 并且这个 Kafka Connector 已经实现了 Exactly Once 语义, 在使用的时候只要做适当的配置就可以了.")]),s._v(" "),t("p",[s._v("这次用 Java 语言来实现这个任务, 改造后的计算任务代码如下:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ExactlyOnceIpCount")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Exception")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 设置输入和输出")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("FlinkKafkaConsumer011")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IpAndCount")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" sourceConsumer "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setupSource")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("FlinkKafkaProducer011")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" sinkProducer "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setupSink")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 设置运行时环境")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StreamExecutionEnvironment")]),s._v(" env "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StreamExecutionEnvironment")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getExecutionEnvironment")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        env"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setStreamTimeCharacteristic")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TimeCharacteristic"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("EventTime")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 按照 EventTime 来统计")]),s._v("\n        env"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("enableCheckpointing")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 每 5 秒保存一次 CheckPoint")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 设置 CheckPoint")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CheckpointConfig")]),s._v(" config "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" env"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getCheckpointConfig")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        config"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setCheckpointingMode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CheckpointingMode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("EXACTLY_ONCE")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 设置 CheckPoint 模式为 EXACTLY_ONCE")]),s._v("\n        config"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("enableExternalizedCheckpoints")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CheckpointConfig"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ExternalizedCheckpointCleanup")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("RETAIN_ON_CANCELLATION")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 取消任务时保留 CheckPoint")]),s._v("\n        config"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setPreferCheckpointForRecovery")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 启动时从 CheckPoint 恢复任务")]),s._v("\n \n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 设置 CheckPoint 的 StateBackend，在这里 CheckPoint 保存在本地临时目录中。")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 只适合单节点做实验，在生产环境应该使用分布式文件系统，例如 HDFS。")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("File")]),s._v(" tmpDirFile "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("File")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getProperty")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"java.io.tmpdir"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        env"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setStateBackend")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StateBackend")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("FsStateBackend")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("tmpDirFile"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("toURI")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("toURL")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 设置故障恢复策略：任务失败的时候自动每隔 10 秒重启，一共尝试重启 3 次")]),s._v("\n        env"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setRestartStrategy")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RestartStrategies")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("fixedDelayRestart")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// number of restart attempts")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// delay")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 定义输入：从 Kafka 中获取数据")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("DataStream")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IpAndCount")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" input "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" env"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("addSource")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sourceConsumer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 计算：每 5 秒钟按照 ip 对 count 求和")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("DataStream")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IpAndCount")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" output "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("\n                input\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("keyBy")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IpAndCount")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("::")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getIp")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 按照 ip 地址统计")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("window")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TumblingEventTimeWindows")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("of")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Time")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("seconds")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 每 5 秒钟统计一次")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("allowedLateness")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Time")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("seconds")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sum")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"count"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 对 count 字段求和")]),s._v("\n \n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出到 kafka topic")]),s._v("\n        output"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("map")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IpAndCount")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("::")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("addSink")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sinkProducer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// execute program")]),s._v("\n        env"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("execute")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Exactly-once IpCount"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br")])]),t("p",[s._v("这段代码和前面原始版本的代码整体架构是差不多的, 同样是: "),t("strong",[s._v("定义数据源, 定义计算逻辑和定义输入")]),s._v("这三大步骤. 下面主要来说不同之处, 这些不同的地方也就是如何配置 Exactly Once 特性的关键点.")]),s._v(" "),t("p",[s._v("首先需要开启并配置好 CheckPoint. 在这段代码中开启了 CheckPoint, "),t("strong",[s._v("设置每 5 秒钟创建一个 CheckPoint")]),s._v(". 然后还需要定义保存 CheckPoint 的 StateBackend, 也就是告诉 Flink 把 CheckPoint 保存在哪儿. 在生产环境中, CheckPoint 应该保存到 HDFS 这样的分布式文件系统中. 这里为了方便运行调试, 直接把 CheckPoint 保存到本地的临时目录中. 之后还需要将 Job 配置成自动重启, 这样当节点发生故障时, Flink 会自动重启 Job 并从最近一次 CheckPoint 开始恢复.")]),s._v(" "),t("p",[s._v("在定义输出创建 FlinkKafkaProducer 的时候, 需要指定 Exactly Once 语义, 这样 Flink 才会开启 Kafka 的事务, 代码如下:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("FlinkKafkaProducer011")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setupSink")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 设置 Kafka Producer 属性")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Properties")]),s._v(" producerProperties "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Properties")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    producerProperties"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"bootstrap.servers"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"localhost:9092"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 事务超时时间设置为 1 分钟")]),s._v("\n    producerProperties"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"transaction.timeout.ms"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"60000"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 创建 FlinkKafkaProducer，指定语义为 EXACTLY_ONCE")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("FlinkKafkaProducer011")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ip_count_sink"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("KeyedSerializationSchemaWrapper")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SimpleStringSchema")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n            producerProperties"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("FlinkKafkaProducer011"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Semantic")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("EXACTLY_ONCE")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[s._v("最后一点需要注意的, 在从 Kafka 主题 ip_count_sink 中消费计算结果的时候, 需要配置 Consumer 属性: isolation.level=read_committed, 也就是"),t("strong",[s._v("只消费已提交事务")]),s._v("的消息. 因为默认情况下, Kafka 的 Consumer 是可以消费到未提交事务的消息的.")]),s._v(" "),t("h5",{attrs:{id:"_4-小结-8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-小结-8"}},[s._v("#")]),s._v(" 4.小结")]),s._v(" "),t("p",[s._v("端到端 Exactly Once 语义, 可以保证在分布式系统中, 每条数据不多不少只被处理一次. "),t("strong",[s._v("在流计算中, 因为数据重复会导致计算结果错误, 所以 Exactly Once 在流计算场景中尤其重要. Kafka 和 Flink 都提供了保证 Exactly Once 的特性, 配合使用可以实现端到端的 Exactly Once 语义.")])]),s._v(" "),t("p",[s._v("在 Flink 中, 如果节点出现故障, 可以自动重启计算任务, 重新分配计算节点来保证系统的可用性. 配合 CheckPoint 机制, 可以保证重启后任务的状态恢复到最后一次 CheckPoint, 然后从 CheckPoint 中记录的恢复位置继续读取数据进行计算. Flink 通过一个巧妙的 Barrier 使 CheckPoint 中恢复位置和各节点状态完全对应.")]),s._v(" "),t("p",[s._v('Kafka 的 Exactly Once 语义是通过它的事务和生产幂等两个特性来共同实现的. 在配合 Flink 的时候, 每个 Flink 的 CheckPoint 对应一个 Kafka 事务, 只要保证 CheckPoint 和 Kafka 事务同步提交就可以实现端到端的 Exactly Once, Flink 通过 "二阶段提交" 算法来保证 CheckPoint 和 Kafka 事务状态的一致性.')]),s._v(" "),t("h4",{attrs:{id:"动手实现一个简单的rpc框架1-原理和程序的结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#动手实现一个简单的rpc框架1-原理和程序的结构"}},[s._v("#")]),s._v(" 动手实现一个简单的RPC框架1:原理和程序的结构")]),s._v(" "),t("p",[s._v("消息队列和 RPC 框架是最常用的两种通信方式, 虽然这两种中间系统的功能不一样, 但是"),t("strong",[s._v("实现这两种中间件系统的过程中, 有很多相似之处")]),s._v(", 比如它们都是分布式系统, 都需要解决应用间通信的问题, 都需要解决序列化的问题等.")]),s._v(" "),t("p",[s._v("先来一起了解一下 RPC 框架的实现原理.")]),s._v(" "),t("p",[s._v('首先需要明确一下 RPC 框架的范围. 这里所说的 RPC 框架, 是指类似于 Dubbo, gRPC 这种框架, 使用这些框架, 应用程序可以"在客户端直接调用服务端方法, 就像调用本地方法一样". 而一些基于 REST 的远程调用框架, 虽然同样可以实现远程调用, 但它对使用者并不透明, 无论是服务端还是客户端, 都需要和 HTTP 协议打交道, 解析和封装 HTTP 请求和响应. 这类框架并不能算是 RPC 框架.')]),s._v(" "),t("h5",{attrs:{id:"_1-rpc框架是怎么调用远程服务的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-rpc框架是怎么调用远程服务的"}},[s._v("#")]),s._v(" 1.RPC框架是怎么调用远程服务的?")]),s._v(" "),t("p",[s._v("这里以 Spring 和 Dubbo 配合的微服务体系为例看看 RPC 框架到底是如何实现调用远程服务的.")]),s._v(" "),t("p",[s._v("一般来说客户端和服务端分别是这样的:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Component")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HelloClient")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Reference")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// dubbo 注解")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HelloService")]),s._v(" helloService"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("hello")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" helloService"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("hello")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"World"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Service")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// dubbo 注解")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Component")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HelloServiceImpl")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HelloService")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("hello")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello "')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br")])]),t("p",[s._v("在客户端可以通过 @Reference 注解, 获得一个实现了 HelloServicer 这个接口的对象, 业务代码只要调用这个对象的方法, 就可以获得结果. 对于客户端代码来说, 调用就是 helloService 这个本地对象, 但实际上, 真正的服务是在远程的服务端进程中实现的.")]),s._v(" "),t("p",[s._v("再来看服务端, 在服务端的实现类 HelloServiceImpl 实现了 HelloService 这个接口. 然后通过 @Service 这个注解(注意这个 @Service 是 Dubbo 提供的注解, 不是 Spring 提供的同名注解), 在 Dubbo 框架中"),t("strong",[s._v("注册了这个实现类 HelloServiceImpl")]),s._v(". 在服务端只是提供了接口 HelloService 的实现, 并没有任何远程调用的实现代码.")]),s._v(" "),t("p",[s._v('对于业务代码来说, 无论是客户端还是服务端, 除了增加了两个注解以外, 和实现一个进程内调用没有任何区别. Dubbo 看起来就像把服务端进程中的实现类"映射"到了客户端进程中一样. 下面来看一下, Dubbo 这类 RPC 框架是如何来实现调用远程服务的.')]),s._v(" "),t("p",[s._v("在客户端的业务代码得到的 HelloService 这个接口的实例, 并不是在服务端提供的真正的实现类 HelloServiceImpl 的一个实例. 它实际上是"),t("strong",[s._v("由 RPC 框架提供的一个代理类的实例")]),s._v(". 这个"),t("strong",[s._v('代理类有一个专属的名称, 叫"桩(Stub)"')]),s._v(".")]),s._v(" "),t("p",[s._v("在不同的 RPC 框架中, 这个桩的生成方式并不一样, 有些是在"),t("strong",[s._v("编译阶段")]),s._v("生成的, 有些是在"),t("strong",[s._v("运行时")]),s._v("动态生成的, 这个和编程语言的语言特性是密切相关的, 所以在不同的编程语言中有不同的实现, 这部分很复杂, 可以先不用过多关注. 只需要知道这个桩它做了哪些事儿就可以了.")]),s._v(" "),t("p",[s._v("由于 HelloService 的桩, 同样要实现 HelloServer 接口, 客户端在调用 HelloService 的 hello() 方法时, 实际上调用的是桩的 hello() 方法, 在这个桩的 hello() 方法里面, 它会"),t("strong",[s._v("构造一个请求, 这个请求就是一段数据结构, 请求中包含两个重要的信息")]),s._v(":")]),s._v(" "),t("ol",[t("li",[t("strong",[s._v("请求的服务名")]),s._v(", 在这个例子中, 就是 HelloService#hello(String), 也就是说客户端调用的是 HelloService 的 hello() 方法;")]),s._v(" "),t("li",[t("strong",[s._v("请求的所有参数")]),s._v(', 在这个例子中, 就只有一个参数 name, 它的值是 "World".')])]),s._v(" "),t("p",[s._v("然后它会把这个请求发送给服务端, 等待服务的响应. 这个时候请求到达了服务端, 然后来看服务端是怎么处理这个请求的.")]),s._v(" "),t("p",[s._v("服务端的 RPC 框架收到这个请求之后, "),t("strong",[s._v("先把请求中的服务名解析出来, 然后根据这个服务名找一下, 在服务端进程中, 有没有这个服务名对应的服务提供者")]),s._v(".")]),s._v(" "),t("p",[s._v("在这个例子的服务端中, 由于已经通过 @Service 注解向 RPC 框架注册过 HelloService 的实现类, 所以 RPC 框架在收到请求后, 可以通过请求中的服务名找到 HelloService 真正的实现类 HelloServiceImpl. 找到实现类之后, RPC 框架会调用这个实现类的 hello() 方法, 使用的参数值就是客户端发送过来的参数值. "),t("strong",[s._v("服务端的 RPC 框架在获得返回结果之后, 再将结果封装成响应, 返回给客户端")]),s._v(".")]),s._v(" "),t("p",[s._v("客户端 RPC 框架的桩收到服务端的响应之后, 从响应中解析出返回值, 返回给客户端的调用方. 这样就完成了一次远程调用. 调用过程如下图所示.")]),s._v(" "),t("p",[t("img",{attrs:{src:"assets/image-20230523153103-1ccvp1h.jpg",alt:""}})]),s._v(" "),t("p",[s._v("在上面的这个调用流程中, 我们忽略了一个问题, 那就是客户端是如何找到服务端地址的呢? 在 RPC 框架中, "),t("strong",[s._v("这部分的实现原理其实和消息队列的实现是完全一样的")]),s._v(", 都是通过一个 NamingService 来解决的.")]),s._v(" "),t("p",[s._v("在 RPC 框架中, 这个 NamingService 一般称为"),t("strong",[s._v("注册中心")]),s._v(". 服务端的业务代码在向 RPC 框架中注册服务之后, RPC 框架就会把这个"),t("strong",[s._v("服务的名称和地址发布到注册中心")]),s._v("上. 客户端的桩在调用服务端之前, 会向注册中心请求服务端的地址, 请求的参数就是服务名称, 也就是上面例子中的方法签名 HelloService#hello, 注册中心会返回提供这个服务的地址, 然后客户端再去请求服务端.")]),s._v(" "),t("p",[s._v("有些 RPC 框架, 比如 gRPC, 是可以支持跨语言调用的. 它的服务提供方和服务调用方是可以用不同的编程语言来实现的. 比如可以用 Python 编写客户端, 用 Go 语言来编写服务端, 这两种语言开发的服务端和客户端仍然可以正常通信. 这种支持跨语言调用的 RPC 框架的实现原理和普通的单语言的 RPC 框架并没有什么本质的不同.")]),s._v(" "),t("p",[s._v("可以再回顾一下上面那张调用的流程图, 如果需要实现跨语言的调用, 也就是说图中的客户端进程和服务端进程是由两种不同的编程语言开发的. 其实只要客户端发出去的请求能被服务端正确解析, 同样服务端返回的响应, 客户端也能正确解析, 其他的步骤完全不用做任何改变, 不就可以实现跨语言调用了吗?")]),s._v(" "),t("p",[s._v("在客户端和服务端, 收发请求响应的工作都是 RPC 框架来实现的, 所以**==只要 RPC 框架保证在不同的编程语言中, 使用相同的序列化协议, 就可以实现跨语言的通信=="),t("strong",[s._v("​")]),s._v(". ​"),t("strong",[s._v("另外为了在不同的语言中能描述相同的服务定义, 也就是上面例子中的 HelloService 接口, 跨语言的 RPC 框架还需要")]),s._v("==提供一套描述服务的语言, 称为 IDL(Interface description language)==**. 所有的服务都需要用 IDL 定义, 再由 RPC 框架转换为特定编程语言的接口或者抽象类. 这样就可以实现跨语言调用了.")]),s._v(" "),t("p",[s._v("这些就是 RPC 框架的基本实现原理, 实现一个简单的 RPC 框架并不是很难, 这里面用到的绝大部分技术, 包括: 高性能网络传输, 序列化和反序列化, 服务路由的发现方法等, 在消息队列实现原理过程中都有体现.")]),s._v(" "),t("h5",{attrs:{id:"_2-rpc框架的总体结构是什么样的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-rpc框架的总体结构是什么样的"}},[s._v("#")]),s._v(" 2.RPC框架的总体结构是什么样的?")]),s._v(" "),t("p",[s._v("下面就一起来实现一个麻雀虽小但五脏俱全的 RPC 框架.")]),s._v(" "),t("p",[s._v("先来看一下这个项目的总体结构. 这里采用 Java 语言来实现这个 RPC 框架. 把 RPC 框架对外提供的所有服务定义在一个接口 RpcAccessPoint 中:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * RPC 框架对外提供的服务接口\n */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RpcAccessPoint")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Closeable")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * 客户端获取远程服务的引用\n     * @param uri 远程服务地址\n     * @param serviceClass 服务的接口类的 Class\n     * @param <T> 服务接口的类型\n     * @return 远程服务引用\n     */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getRemoteService")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("URI")]),s._v(" uri"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" serviceClass"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * 服务端注册服务的实现实例\n     * @param service 实现实例\n     * @param serviceClass 服务的接口类的 Class\n     * @param <T> 服务接口的类型\n     * @return 服务地址\n     */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("URI")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("addServiceProvider")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" service"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" serviceClass"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * 服务端启动 RPC 框架，监听接口，开始提供远程服务。\n     * @return 服务实例，用于程序停止的时候安全关闭服务。\n     */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Closeable")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("startServer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Exception")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br")])]),t("p",[s._v("这个接口主要的方法就只有两个, 第一个方法 getRemoteService() 供客户端来使用, 这个方法的作用和上面例子中 Dubbo 的 @Reference 注解是一样的, "),t("strong",[s._v("客户端调用这个方法可以获得远程服务的实例")]),s._v(". 第二个方法 addServiceProvider() 供服务端来使用, 这个方法的作用和 Dubbo 的 @Service 注解是一样的, "),t("strong",[s._v("服务端通过调用这个方法来注册服务的实现")]),s._v(". 方法 startServer() 和 close(在父接口 Closeable 中定义)用于服务端启动和停止服务.")]),s._v(" "),t("p",[s._v("另外还需要定一个注册中心的接口 NameService:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * 注册中心\n */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("NameService")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * 注册服务\n     * @param serviceName 服务名称\n     * @param uri 服务地址\n     */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("registerService")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" serviceName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("URI")]),s._v(" uri"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IOException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * 查询服务地址\n     * @param serviceName 服务名称\n     * @return 服务地址\n     */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("URI")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("lookupService")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" serviceName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IOException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br")])]),t("p",[s._v("这个注册中心只有两个方法, 分别是注册服务地址 registerService() 和查询服务地址 lookupService().")]),s._v(" "),t("p",[s._v("以上就是要实现的这个 RPC 框架的全部功能了. 然后通过一个例子看一下这个 RPC 框架如何来使用. 同样, 需要先定义一个服务接口:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HelloService")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("hello")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("然后分别看一下服务端和客户端是如何使用这个 RPC 框架的.")]),s._v(" "),t("p",[s._v("客户端:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("URI")]),s._v(" uri "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" nameService"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("lookupService")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("serviceName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HelloService")]),s._v(" helloService "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" rpcAccessPoint"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getRemoteService")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("uri"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HelloService")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" response "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" helloService"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("hello")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nlogger"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("info")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"收到响应: {}."')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" response"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v('客户端首先调用注册中心 NameService 的 lookupService() 方法, 查询服务地址, 然后调用 rpcAccessPoint 的 getRemoteService() 方法, 获得远程服务的本地实例, 也就是前面提到的 "桩" helloService. 最后调用 helloService 的 hello() 方法, 获得返回值并打印出来.')]),s._v(" "),t("p",[s._v("然后来看服务端, 首先需要有一个 HelloService 的实现:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HelloServiceImpl")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HelloService")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("hello")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" ret "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello, "')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" ret"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("然后将这个实现注册到 RPC 框架上, 并启动 RPC 服务:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[s._v("rpcAccessPoint"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("startServer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("URI")]),s._v(" uri "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" rpcAccessPoint"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("addServiceProvider")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("helloService"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HelloService")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nnameService"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("registerService")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("serviceName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" uri"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("首先启动 RPC 框架的服务, 然后调用 rpcAccessPoint.addServiceProvider() 方法注册 helloService 服务, 然后再调用 nameServer.registerService() 方法, 在注册中心注册服务的地址.")]),s._v(" "),t("p",[s._v("这里将要实现的这个 RPC 框架的使用方式, 总体上和上面使用 Dubbo 和 Spring 的例子是一样的, 唯一的一点区别是, 由于没有使用 Spring 和注解, 所以需要用代码的方式实现同样的功能.")]),s._v(" "),t("p",[s._v("这个 RPC 框架的实现代码以及上面如何使用这个 RPC 框架的例子, 放在了 GitHub 的 "),t("a",{attrs:{href:"https://github.com/liyue2008/simple-rpc-framework",target:"_blank",rel:"noopener noreferrer"}},[s._v("simple-rpc-framework"),t("OutboundLink")],1),s._v(" 项目中. 整个项目分为如下 5 个 Module:")]),s._v(" "),t("p",[t("img",{attrs:{src:"assets/image-20230523153103-gztitf6.jpg",alt:""}})]),s._v(" "),t("p",[s._v("其中 RPC 框架提供的服务 RpcAccessPoint 和注册中心服务 NameService, 这两个接口的定义在 Module rpc-api 中. 使用框架的例子, HelloService 接口定义在 Module hello-service-api 中, 客户端和服务端分别在 client 和 server 这两个 Module 中.")]),s._v(" "),t("p",[s._v("后面将一起来实现这个 RPC 框架, 也就是 Module rpc-netty.")]),s._v(" "),t("h5",{attrs:{id:"_3-小结-9"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-小结-9"}},[s._v("#")]),s._v(" 3.小结")]),s._v(" "),t("p",[s._v('在 RPC 框架中, 最关键的就是理解"桩"的实现原理, 桩是 RPC 框架在客户端的服务代理, '),t("strong",[s._v("它和远程服务具有相同的方法签名, 或者说是实现了相同的接口")]),s._v('. 客户端在调用 RPC 框架提供的服务时, 实际调用的就是"桩"提供的方法, 在桩的实现方法中, 它会发请求的服务名和参数到服务端, 服务端的 RPC 框架收到请求后, 解析出服务名和参数后, 调用在 RPC 框架中注册的"真正的服务提供者", 然后将结果返回给客户端.')]),s._v(" "),t("h4",{attrs:{id:"动手实现一个简单的rpc框架2-通信与序列化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#动手实现一个简单的rpc框架2-通信与序列化"}},[s._v("#")]),s._v(" 动手实现一个简单的RPC框架2:通信与序列化")]),s._v(" "),t("p",[s._v("本节来实现这个 RPC 框架的通信和序列化部分.")]),s._v(" "),t("p",[s._v("网络传输和序列化这两部分的功能相对来说是非常通用并且独立的, 在设计的时候, 只要能做到比较好的抽象, 这两部的实现, 它的通用性是非常强的. 不仅可以用于这个例子中的 RPC 框架中, 同样可以直接拿去用于实现消息队列, 或者其他需要互相通信的分布式系统中.")]),s._v(" "),t("h5",{attrs:{id:"_1-如何设计一个通用的高性能序列化实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-如何设计一个通用的高性能序列化实现"}},[s._v("#")]),s._v(" 1.如何设计一个通用的高性能序列化实现?")]),s._v(" "),t("p",[s._v("先来实现序列化和反序列化部分, 因为后面讲到的部分会用到序列化和反序列化.")]),s._v(" "),t("p",[s._v("首先需要设计一个可扩展的, 通用的序列化接口, 为了方便使用, 直接使用静态类的方式来定义这个接口(严格来说这并不是一个接口).")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SerializeSupport")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("E")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("E")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("parse")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("byte")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" buffer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("E")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("byte")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("serialize")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("E")]),s._v("  entry"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("上面的 parse() 方法用于反序列化, serialize() 方法用于序列化. 看一下使用方式:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 序列化")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyClass")]),s._v(" myClassObject "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("byte")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" bytes "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SerializeSupport")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("serialize")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("myClassObject"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 反序列化")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyClass")]),s._v(" myClassObject1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SerializeSupport")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("parse")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("bytes"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("可以使用通用的序列化实现, 也可以自己来定义专用的序列化实现. 专用的序列化性能最好, 但缺点是实现起来比较复杂, 需要为每一种类型的数据专门编写序列化和反序列化方法. 一般的 RPC 框架采用的都是通用的序列化实现, 比如 "),t("strong",[s._v("gRPC 采用的是 Protobuf 序列化实现, Dubbo 支持 hession2 等好几种序列化实现")]),s._v(".")]),s._v(" "),t("p",[s._v("那为什么这些 RPC 框架不像消息队列一样, 采用性能更好的专用的序列化实现呢? 这个原因很简单, "),t("strong",[s._v("消息队列它需要序列化数据的类型是固定的, 只是它自己的内部通信的一些命令. 但 RPC 框架, 它需要序列化的数据是, 用户调用远程方法的参数, 这些参数可能是各种数据类型, 所以必须使用通用的序列化实现, 确保各种类型的数据都能被正确的序列化和反序列化")]),s._v(". 但这里还是采用专用的序列化实现, 主要的目的是带你一起来实践一下, 如何来实现序列化和反序列化.")]),s._v(" "),t("p",[s._v("这里给所有序列化的实现类定义一个 Serializer 接口, 所有的序列化实现类都实现这个接口就可以了:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Serializer")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * 计算对象序列化后的长度，主要用于申请存放序列化数据的字节数组\n     * @param entry 待序列化的对象\n     * @return 对象序列化后的长度\n     */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("size")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" entry"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * 序列化对象。将给定的对象序列化成字节数组\n     * @param entry 待序列化的对象\n     * @param bytes 存放序列化数据的字节数组\n     * @param offset 数组的偏移量，从这个位置开始写入序列化数据\n     * @param length 对象序列化后的长度，也就是{@link Serializer#size(java.lang.Object)}方法的返回值。\n     */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("serialize")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" entry"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("byte")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" bytes"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" offset"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * 反序列化对象\n     * @param bytes 存放序列化数据的字节数组\n     * @param offset 数组的偏移量，从这个位置开始写入序列化数据\n     * @param length 对象序列化后的长度\n     * @return 反序列化之后生成的对象\n     */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("parse")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("byte")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" bytes"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" offset"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * 用一个字节标识对象类型，每种类型的数据应该具有不同的类型值\n     */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("byte")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("type")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * 返回序列化对象类型的 Class 对象。\n     */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getSerializeClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br")])]),t("p",[s._v("这个接口中, 除了 serialize() 和 parse() 这两个序列化和反序列化两个方法以外, 还定义了下面这几个方法: size() 方法计算序列化之后的数据长度, 用于事先来申请存放序列化数据的字节数组; type() 方法定义每种序列化实现的类型, 这个类型值也会写入到序列化之后的数据中, 主要的作用是在反序列化的时候, 能够识别是什么数据类型的, 以便找到对应的反序列化实现类; getSerializeClass() 这个方法返回这个序列化实现类对应的对象类型, 目的是在执行序列化的时候, 通过被序列化的对象类型找到对应序列化实现类.")]),s._v(" "),t("p",[s._v("利用这个 Serializer 接口, 就可以来实现 SerializeSupport 这个支持任何对象类型序列化的通用静态类了. 首先定义两个 Map, 这两个 Map 中存放着所有实现 Serializer 接口的序列化实现类.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Map")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 序列化对象类型 */")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Serializer")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 序列化实现 */")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" serializerMap "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HashMap")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Map")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Byte")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 序列化实现类型 */")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 序列化对象类型 */")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" typeMap "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HashMap")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("serializerMap 中的 key 是序列化实现类对应的序列化对象的类型, 它的用途是在序列化的时候, 通过被序列化的对象类型, 找到对应的序列化实现类. typeMap 的作用和 serializerMap 是类似的, 它的 key 是序列化实现类的类型, 用于在反序列化的时候, 从序列化的数据中读出对象类型, 然后找到对应的序列化实现类.")]),s._v(" "),t("p",[s._v("理解了这两个 Map 的作用, 实现序列化和反序列化这两个方法就很容易了. 这两个方法的实现思路是一样的, 都是"),t("strong",[s._v("通过一个类型在这两个 Map 中进行查找, 查找的结果就是对应的序列化实现类的实例")]),s._v(", 也就是 Serializer 接口的实现, 然后调用对应的序列化或者反序列化方法就可以了. 具体的实现在 SerializeSupport 中, 可以自行查看.")]),s._v(" "),t("p",[s._v("所有的 Serializer 的实现类是怎么加载到 SerializeSupport 的那两个 Map 中的呢? 这里面利用了 Java 的一个 "),t("strong",[s._v("SPI 类加载机制")]),s._v(", 后面专门讲.")]),s._v(" "),t("p",[s._v("到这里就封装好了一个通用的序列化的接口, 对于使用序列化的模块来说, 它"),t("strong",[s._v("只要依赖 SerializeSupport 这个静态类, 调用它的序列化和反序列化方法就可以了, 不需要依赖任何序列化实现类")]),s._v(". 对于序列化实现的提供者来说, 也只需要依赖并实现 Serializer 这个接口就可以了. 比如 HelloService 例子中的参数是一个 String 类型的数据, 需要实现一个支持 String 类型的序列化实现:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StringSerializer")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Serializer")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("size")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" entry"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" entry"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getBytes")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StandardCharsets")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UTF_8")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("serialize")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" entry"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("byte")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" bytes"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" offset"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("byte")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" strBytes "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" entry"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getBytes")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StandardCharsets")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UTF_8")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("arraycopy")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("strBytes"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" bytes"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" offset"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" strBytes"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("parse")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("byte")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" bytes"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" offset"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("bytes"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" offset"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StandardCharsets")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UTF_8")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("byte")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("type")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Types")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TYPE_STRING")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getSerializeClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br")])]),t("p",[s._v("注意在把 String 和 byte 数组做转换的时候, "),t("strong",[s._v("一定要指定编码方式, 确保序列化和反序列化的时候都使用一致的编码, 这里统一使用 UTF8 编码")]),s._v(". 否则如果遇到执行序列化和反序列化的两台服务器默认编码不一样, 就会出现乱码. 在开发过程用遇到的很多中文乱码问题, 绝大部分都是这个原因.")]),s._v(" "),t("p",[s._v("在这个例子中, 还有一个更复杂的序列化实现 MetadataSerializer, 用于将注册中心的数据持久化到文件中, 也可以参考一下.")]),s._v(" "),t("p",[s._v("到这里序列化的部分就实现完成了. 这个序列化的实现, 对外提供服务的就只有一个 SerializeSupport 静态类, 并且可以通过扩展支持序列化任何类型的数据, 这样一个通用的实现, 不仅可以用在这个 RPC 框架的例子中, 完全可以把这部分直接拿过去用在其他业务代码中.")]),s._v(" "),t("h5",{attrs:{id:"_2-使用netty来实现异步网络通信-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-使用netty来实现异步网络通信-2"}},[s._v("#")]),s._v(" 2.使用Netty来实现异步网络通信")]),s._v(" "),t("p",[s._v("接下来来说网络通信部分的实现.")]),s._v(" "),t("p",[s._v("同样的思路, 把通信的部分也封装成接口. 在这个 RPC 框架中, 对于通信模块的需求是这样的: 只需要客户端给服务端发送请求, 然后服务返回响应就可以了. 所以通信接口只需要提供一个"),t("strong",[s._v("发送请求方法")]),s._v("就可以了:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Transport")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * 发送请求命令\n     * @param request 请求命令\n     * @return 返回值是一个 Future\n     */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CompletableFuture")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Command")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("send")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Command")]),s._v(" request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("这个 send() 方法参数 request 就是需要发送的请求数据, 返回值是一个 CompletableFuture 对象, 通过这个 CompletableFuture 对象可以获得响应结果. 这里面"),t("strong",[s._v("使用一个 CompletableFuture 作为返回值, 使用起来就非常灵活, 可以直接调用它的 get() 方法来获取响应数据, 这就相当于同步调用; 也可以使用以 then 开头的一系列异步方法, 指定当响应返回的时候, 需要执行的操作, 就等同于异步调用")]),s._v(". 所以这样一个方法既可以同步调用, 也可以异步调用.")]),s._v(" "),t("p",[s._v("在这个接口中, 请求和响应数据都抽象成了一个 "),t("strong",[s._v("Command")]),s._v(" 类, 来看一下这个类是如何定义的:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Command")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Header")]),s._v(" header"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("byte")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" payload"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//...")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Header")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" requestId"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" version"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" type"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ResponseHeader")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Header")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" code"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" error"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br")])]),t("p",[s._v("Command 类包含一个命令头 Header 和一个 payload 字节数组. payload 就是命令中要传输的数据, 这里要求这个数据已经是被序列化之后生成的字节数组. Header 中包含三个属性: requestId 用于唯一标识一个请求命令, 在使用双工方式异步收发数据的时候, 这个 requestId 可以用于请求和响应的配对.")]),s._v(" "),t("p",[s._v("version 这个属性用于标识这条命令的版本号. type 用于标识这条命令的类型, 这个类型主要的目的是为了能让接收命令一方来识别收到的是什么命令, 以便路由到对应的处理类中去.")]),s._v(" "),t("p",[s._v("另外在返回的响应 Header 中, 还需要包含一个 code 字段和一个 error 字段, code 字段使用一个数字表示响应状态, 0 代表成功, 其他值分别代表各种错误, 这个设计和 HTTP 协议中的 StatueCode 是一样的.")]),s._v(" "),t("p",[t("strong",[s._v("==在设计通信协议时, 让协议具备持续的升级能力, 并且保持向下兼容是非常重要的==")]),s._v(". 因为所有的软件, 唯一不变的就是变化, 由于需求一直变化, 不可能保证传输协议永远不变, 一旦传输协议发生变化, 为了确保使用这个传输协议的这些程序还能正常工作, 或者是向下兼容, 协议中必须提供一个版本号, 标识收到的这条数据使用的是哪个版本的协议.")]),s._v(" "),t("p",[s._v("发送方在发送命令的时候需要带上这个命令的版本号, 接收方在收到命令之后必须先检查命令的版本号, 如果接收方可以支持这个版本的命令就正常处理, 否则就拒绝接收这个命令. 这样才是一个完备的, 可持续的升级的通信协议.")]),s._v(" "),t("p",[s._v("需要注意的是, 这个版本号是命令的版本号, 或者说是传输协议的版本号, 它不等同于程序的版本号.")]),s._v(" "),t("p",[s._v("继续来看 Transport 这个接口的实现 NettyTransport 类. 这个 send() 方法的实现, 本质上就是一个异步方法, 在把请求数据发出去之后就返回了, 并不会阻塞当前这个线程去等待响应返回来. 来看一下它的实现:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CompletableFuture")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Command")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("send")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Command")]),s._v(" request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 构建返回值")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CompletableFuture")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Command")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" completableFuture "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CompletableFuture")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 将在途请求放到 inFlightRequests 中")]),s._v("\n        inFlightRequests"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ResponseFuture")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getHeader")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getRequestId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" completableFuture"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 发送命令")]),s._v("\n        channel"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("writeAndFlush")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("addListener")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ChannelFutureListener")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" channelFuture "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 处理发送失败的情况")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("channelFuture"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isSuccess")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                completableFuture"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("completeExceptionally")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("channelFuture"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cause")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                channel"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("close")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Throwable")]),s._v(" t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 处理发送异常")]),s._v("\n        inFlightRequests"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("remove")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getHeader")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getRequestId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        completableFuture"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("completeExceptionally")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" completableFuture"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br")])]),t("p",[s._v("这段代码实际上就干了两件事, 第一件事是把请求中的 requestId 和返回的 completableFuture 一起, 构建了一个 ResponseFuture 对象, 然后把这个对象放到了 inFlightRequests 这个变量中. inFlightRequests 中存放了所有在途的请求, 也就是已经发出了请求但还没有收到响应的这些 responseFuture 对象.")]),s._v(" "),t("p",[s._v("第二件事就是调用 netty 发送数据的方法, 把这个 request 命令发给对方. 这里面需要注意的一点是, 已经发出去的请求, 有可能会因为网络连接断开或者对方进程崩溃等各种异常情况, 永远都收不到响应. 那为了确保这些孤儿 ResponseFuture 不会在内存中越积越多, 必须要捕获所有的异常情况, 结束对应的 ResponseFuture. 所以在上面代码中, 两个地方都做了异常处理, "),t("strong",[s._v("分别应对发送失败和发送异常两种情况")]),s._v(".")]),s._v(" "),t("p",[s._v("即使是对所有能捕获的异常都做了处理, 也不能保证所有 ResponseFuture 都能正常或者异常结束, 比如编写对端程序的程序员写的代码有问题, 收到了请求但没给返回响应, 为了应对这种情况, 还必须有一个兜底超时的机制来保证所有情况下 ResponseFuture 都能结束, 无论什么情况, 只要超过了超时时间还没有收到响应, 就认为这个 ResponseFuture 失败了, 结束并删除它. 这部分代码在 InFlightRequests 这个类中.")]),s._v(" "),t("p",[s._v("这里还有一个很重要的最佳实践. 如果是同步发送请求, 客户端需要等待服务端返回响应, 服务端处理这个请求需要花多长时间, 客户端就要等多长时间. 这实际上是一个天然的"),t("strong",[s._v("背压机制")]),s._v("(Back pressure), 服务端处理速度会天然地限制客户端请求的速度.")]),s._v(" "),t("p",[s._v("但是在异步请求中, 客户端异步发送请求并不会等待服务端, 缺少了这个天然的背压机制, 如果服务端的处理速度跟不上客户端的请求速度, 客户端的发送速度也不会因此慢下来, 就会出现在途的请求越来越多, 这些请求堆积在服务端的内存中, 内存放不下就会一直请求失败. 服务端处理不过来的时候, 客户端还一直不停地发请求显然是没有意义的. "),t("strong",[s._v("为了避免这种情况, 需要增加一个背压机制, 在服务端处理不过来的时候限制一下客户端的请求速度")]),s._v(".")]),s._v(" "),t("p",[s._v("这个背压机制的实现也在 InFlightRequests 类中, 在这里面定义了一个信号量:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Semaphore")]),s._v(" semaphore "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Semaphore")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("这个信号量有 10 个许可, 每次往 inFlightRequest 中加入一个 ResponseFuture 的时候, 需要先从信号量中获得一个许可, 如果这时候没有许可了, 就会阻塞当前这个线程, 也就是发送请求的这个线程, 直到有人归还了许可, 才能继续发送请求. 每结束一个在途请求, 就归还一个许可, 这样就可以保证在途请求的数量最多不超过 10 个请求, 积压在服务端正在处理或者待处理的请求也不会超过 10 个. 这样就实现了一个简单有效的背压机制.")]),s._v(" "),t("p",[s._v("在 ResponseInvocation 这个类中异步接收所有服务端返回的响应, 处理逻辑比较简单, 就是根据响应头中的 requestId, 去在途请求 inFlightRequest 中查找对应的 ResponseFuture, 设置返回值并结束这个 ResponseFuture 就可以了.")]),s._v(" "),t("p",[s._v("使用 Netty 来收发数据这部分代码, 都放在了 com.github.liyue2008.rpc.transport.netty 这个包中.")]),s._v(" "),t("h4",{attrs:{id:"动手实现一个简单的rpc框架3-客户端"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#动手实现一个简单的rpc框架3-客户端"}},[s._v("#")]),s._v(" 动手实现一个简单的RPC框架3:客户端")]),s._v(" "),t("p",[s._v('在 RPC 框架中, 最关键的就是理解"桩"的实现原理, 桩是 RPC 框架在客户端的服务代理, 它和远程服务具有相同的方法签名, 或者说是实现了相同的接口, 客户端在调用 RPC 框架提供的服务时, 实际调用的就是"桩"提供的方法, 在桩的实现方法中, 它会发请求到服务端获取调用结果并返回给调用方.')]),s._v(" "),t("p",[t("strong",[s._v("在 RPC 框架的客户端中, 最关键的部分, 也就是如何来生成和实现这个桩. ​")])]),s._v(" "),t("h5",{attrs:{id:"_1-如何来动态地生成桩"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-如何来动态地生成桩"}},[s._v("#")]),s._v(" 1.如何来动态地生成桩?")]),s._v(" "),t("p",[s._v('RPC 框架中的这种桩的设计, 它其实采用了一种设计模式: "代理模式". 代理模式给某一个对象提供一个代理对象, 并由代理对象控制对原对象的引用, 被代理的那个对象称为委托对象.')]),s._v(" "),t("p",[s._v("在 RPC 框架中, 代理对象都是由 RPC 框架的客户端来提供的, 也就是一直说的桩, 委托对象就是在服务端, 真正实现业务逻辑的服务类的实例.")]),s._v(" "),t("p",[t("img",{attrs:{src:"assets/image-20230523153633-2tp53mx.jpg",alt:""}})]),s._v(" "),t("p",[s._v("最常用 Spring 框架的核心 IOC(依赖注入)和 AOP(面向切面)机制, 就是这种代理模式的一个实现. 在日常开发的过程中, 可以利用这种代理模式, 在调用流程中动态地注入一些非侵入式业务逻辑. 这里的"),t("strong",[s._v("非侵入指的是, 在现有的调用链中, 增加一些业务逻辑, 而不用去修改调用链上下游的代码")]),s._v(".")]),s._v(" "),t("p",[s._v("下面来看下这个 RPC 框架的客户端中, 怎么来实现的这个代理类, 也就是桩. 首先定一个 StubFactory 接口, 这个接口就只有一个方法:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StubFactory")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("createStub")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Transport")]),s._v(" transport"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" serviceClass"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("这个桩工厂接口只定义了一个方法 createStub(), 它的功能就是"),t("strong",[s._v("创建一个桩的实例")]),s._v(", 这个桩实现的接口可以是任意类型的, 也就是上面代码中的泛型 T. 这个方法有两个参数, 第一个参数是一个 Transport 对象, 这个 Transport 在前面介绍过, 它是用来给服务端发请求的时候使用的. 第二个参数是一个 Class 对象, 它用来告诉桩工厂: 需要创建的这个桩应该是什么类型的. "),t("strong",[s._v("createStub() 的返回值就是由工厂创建出来的桩")]),s._v(".")]),s._v(" "),t("p",[s._v("如何来实现这个工厂方法创建桩呢? 这个桩是一个由 RPC 框架生成的类, 这个类它要实现给定的接口, 里面的逻辑就是"),t("strong",[s._v("把方法名和参数封装成请求, 发送给服务端, 然后再把服务端返回的调用结果返回给调用方")]),s._v(". 这里已经解决了网络传输和序列化的问题, 剩下一个核心问题就是如何来生成这个类了.")]),s._v(" "),t("p",[s._v("普通的类它是源代码通过编译器编译之后生成的. 那 RPC 框架怎么才能根据要实现的接口来生成一个类呢? 不同的 RPC 框架的实现是不一样的, 比如 gRPC 它是在编译 IDL 的时候就把桩生成好了, 这个时候编译出来桩, 它是"),t("strong",[s._v("目标语言的源代码文件")]),s._v(". 比如目标语言是 Java, 编译完成后它们会"),t("strong",[s._v("生成一些 Java 的源代码文件")]),s._v(", 其中以 Grpc.java 结尾的文件就是生成的桩的源代码. 这些生成的源代码文件再经过 Java 编译器编译以后就成了桩.")]),s._v(" "),t("p",[s._v("而 Dubbo 是在"),t("strong",[s._v("运行时动态生成的桩")]),s._v(", 这个实现就更加复杂了, 并且它利用了很多 Java 语言底层的特性. 但是它的原理并不复杂, Java 源代码编译完成之后, 生成的是一些 class 文件, JVM 在运行的时候, 读取这些 Class 文件来创建对应类的实例.")]),s._v(" "),t("p",[s._v("这个 Class 文件虽然非常复杂, 但本质上它里面记录的内容, 就是编写的源代码中的内容, 包括类的定义, 方法定义和业务逻辑等等, 并且它也是有固定的格式的. 如果按照这个格式, 来生成一个 class 文件, 只要这个文件的格式是符合 Java 规范的, JVM 就可以识别并加载它. "),t("strong",[s._v("这样就不需要经过源代码, 编译这些过程, 直接动态来创建一个桩")]),s._v(".")]),s._v(" "),t("p",[s._v("在这个 RPC 的例子中, 采用一种更通用的方式来动态生成桩. 具体方式是: 先生成桩的源代码, 然后动态地编译这个生成的源代码, 然后再加载到 JVM 中.")]),s._v(" "),t("p",[s._v("为了让这部分代码不会过于复杂, 这里限定: 服务接口只能有一个方法, 并且这个方法只能有一个参数, 参数和返回值的类型都是 String 类型.")]),s._v(" "),t("p",[t("strong",[s._v("需要动态生成的这个桩, 它每个方法的逻辑都是一样的, 都是把类名, 方法名和方法的参数封装成请求, 然后发给服务端, 收到服务端响应之后再把结果作为返回值, 返回给调用方")]),s._v(". 所以这里定义一个 AbstractStub 的抽象类, 在这个类中实现大部分通用的逻辑, 让所有动态生成的桩都继承这个抽象类, 这样动态生成桩的代码会更少一些.")]),s._v(" "),t("p",[s._v("下面来实现客户端最关键的这部分代码: 实现这个 StubFactory 接口动态生成桩.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("DynamicStubFactory")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StubFactory")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("STUB_SOURCE_TEMPLATE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"package com.github.liyue2008.rpc.client.stubs;\\n"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"import com.github.liyue2008.rpc.serialize.SerializeSupport;\\n"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"\\n"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"public class %s extends AbstractStub implements %s {\\n"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"    @Override\\n"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"    public String %s(String arg) {\\n"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"        return SerializeSupport.parse(\\n"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"                invokeRemote(\\n"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"                        new RpcRequest(\\n"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"                                \\"%s\\",\\n"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"                                \\"%s\\",\\n"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"                                SerializeSupport.serialize(arg)\\n"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"                        )\\n"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"                )\\n"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"        );\\n"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"    }\\n"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@SuppressWarnings")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"unchecked"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("createStub")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Transport")]),s._v(" transport"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" serviceClass"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 填充模板")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" stubSimpleName "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" serviceClass"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getSimpleName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Stub"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" classFullName "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" serviceClass"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" stubFullName "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"com.github.liyue2008.rpc.client.stubs."')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" stubSimpleName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" methodName "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" serviceClass"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getMethods")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" source "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("format")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("STUB_SOURCE_TEMPLATE")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" stubSimpleName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" classFullName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" methodName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" classFullName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" methodName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 编译源代码")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("JavaStringCompiler")]),s._v(" compiler "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("JavaStringCompiler")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Map")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("byte")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" results "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" compiler"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("compile")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("stubSimpleName "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('".java"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" source"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 加载编译好的类")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" clazz "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" compiler"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("loadClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("stubFullName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" results"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 把 Transport 赋值给桩")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServiceStub")]),s._v(" stubInstance "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServiceStub")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" clazz"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("newInstance")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            stubInstance"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setTransport")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("transport"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 返回这个桩")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" stubInstance"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Throwable")]),s._v(" t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throw")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RuntimeException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br")])]),t("p",[s._v("一起来看一下这段代码, 静态变量 STUB_SOURCE_TEMPLATE 是"),t("strong",[s._v("桩的源代码的模板")]),s._v(", 需要做的就是填充模板中变量, 生成桩的源码, 然后动态的编译, 加载这个桩就可以了.")]),s._v(" "),t("p",[s._v("先来看这个模板, 它唯一的这个方法中, 就只有一行代码, 把接口的类名, 方法名和序列化后的参数封装成一个 "),t("strong",[s._v("RpcRequest")]),s._v(" 对象, 调用父类 AbstractStub 中的 invokeRemote() 方法, 发送给服务端. invokeRemote() 方法的返回值就是序列化的调用结果, 在模板中把这个结果反序列化之后, 直接作为返回值返回给调用方就可以了.")]),s._v(" "),t("p",[s._v("再来看下面的 createStrub() 方法, 从 serviceClass 这个参数中, 可以取到服务接口定义的所有信息, 包括接口名, 它有哪些方法, 每个方法的参数和返回值类型等等. 通过这些信息就可以填充模板, 生成桩的源代码.")]),s._v(" "),t("p",[s._v('桩的类名就定义为: "接口名 + Stub", 为了避免类名冲突, 把这些桩都统一放到固定的包 com.github.liyue2008.rpc.client.stubs 下面. 填充好模板生成的源代码存放在 source 变量中, 然后经过动态编译, 动态加载之后, 就可以拿到这个桩的类 clazz, 利用反射创建一个桩的实例 stubInstance. 把用于网络传输的对象 transport 赋值给桩, 这样桩才能与服务端进行通信. 到这里就实现了动态创建一个桩.')]),s._v(" "),t("h5",{attrs:{id:"_2-使用依赖倒置原则解耦调用者和实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-使用依赖倒置原则解耦调用者和实现"}},[s._v("#")]),s._v(" 2.使用依赖倒置原则解耦调用者和实现")]),s._v(" "),t("p",[s._v("在这个 RPC 框架的例子中, 很多地方都采用了同样一种解耦的方法: "),t("strong",[s._v("通过定义一个接口来解耦调用方和实现")]),s._v('. 在设计上这种方法称为"依赖倒置原则(Dependence Inversion Principle)", 它的核心思想是调用方不应依赖于具体实现, 而是为实现定义一个接口, 让调用方和实现都依赖于这个接口. 这种方法也称为面向接口编程. 这样的好处是可以解耦调用方和具体的实现, 不仅实现是可替换的, 实现连同定义实现的接口也是可以复用的.')]),s._v(" "),t("p",[s._v("比如上面定义的 StubFactory 它是一个接口, 它的实现类是 DynamicStubFactory, 调用方是 NettyRpcAccessPoint, 调用方 NettyAccessPoint 并不依赖实现类 DynamicStubFactory, 就可以调用 DynamicStubFactory 的 createStub() 方法.")]),s._v(" "),t("p",[s._v("要解耦调用方和实现类, 还需要解决一个问题: 谁来创建实现类的实例? 一般来说, 都是谁使用谁创建, 但这里面"),t("strong",[s._v("为了解耦调用方和实现类, 调用方就不能来直接创建实现类")]),s._v(", 因为这样就无法解耦了. 那能不能用一个第三方来创建这个实现类呢? 也是不行的, 即使用一个第三方类来创建实现, 那依赖关系就变成了: 调用方依赖第三方类, 第三方类依赖实现类, 调用方还是间接依赖实现类, 还是没有解耦.")]),s._v(" "),t("p",[s._v("这个问题怎么来解决? 没错, 使用 Spring 的依赖注入是可以解决的. 这里再介绍一种 Java 语言内置的, 更轻量级的解决方案: "),t("strong",[s._v("SPI(Service Provider Interface)")]),s._v(". "),t("strong",[s._v("在 SPI 中, 每个接口在目录 META-INF/services/ 下都有一个配置文件, 文件名就是以这个接口的类名, 文件的内容就是它的实现类的类名")]),s._v(". 还是以 StubFactory 接口为例, 看一下它的配置文件:")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$cat")]),s._v(" rpc-netty/src/main/resources/META-INF/services/com.github.liyue2008.rpc.client.StubFactory\ncom.github.liyue2008.rpc.client.DynamicStubFactory\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("只要把这个配置文件, 接口和实现类都放到 "),t("strong",[s._v("CLASSPATH")]),s._v(" 中, 就可以"),t("strong",[s._v("通过 SPI 的方式来进行加载")]),s._v("了. 加载的参数就是这个接口的 class 对象, "),t("strong",[s._v("返回值就是这个接口的所有实现类的实例")]),s._v(', 这样就在 "不依赖实现类" 的前提下, 获得了一个实现类的实例. 具体的实现代码在 ServiceSupport 这个类中.')]),s._v(" "),t("h5",{attrs:{id:"_3-小结-10"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-小结-10"}},[s._v("#")]),s._v(" 3.小结")]),s._v(" "),t("p",[s._v("客户端实现的难点就是, 如何来动态地生成桩. 像 gRPC 这类多语言的 RPC 框架, 都是在编译 IDL 的过程中生成桩的源代码, 再和业务代码, 使用目标语言的编译器一起编译的. 而像 Dubbo 这类没有编译过程的 RPC 框架, 都是在运行时, 利用一些语言动态特性, 动态创建的桩.")]),s._v(" "),t("h4",{attrs:{id:"动手实现一个简单的rpc框架4-服务端"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#动手实现一个简单的rpc框架4-服务端"}},[s._v("#")]),s._v(" 动手实现一个简单的RPC框架4:服务端")]),s._v(" "),t("p",[s._v("本节一起来实现这个框架的最后一部分: 服务端. 对于这个 RPC 框架来说, 服务端可以分为两个部分: "),t("strong",[s._v("注册中心和 RPC 服务")]),s._v(". 其中注册中心的作用是帮助客户端来寻址, 找到对应 RPC 服务的物理地址, RPC 服务用于接收客户端桩的请求, 调用业务服务的方法, 并返回结果.")]),s._v(" "),t("h5",{attrs:{id:"_1-注册中心是如何实现的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-注册中心是如何实现的"}},[s._v("#")]),s._v(" 1.注册中心是如何实现的?")]),s._v(" "),t("p",[s._v("先来看看注册中心是如何实现的. 一般来说一个完整的注册中心也是分为客户端和服务端两部分的, 客户端给调用方提供 API, 并实现与服务端的通信; 服务端提供真正的业务功能, 记录每个 RPC 服务发来的注册信息, 并保存到它的元数据中. 当有客户端来查询服务地址的时候, 它会从元数据中获取服务地址, 返回给客户端.")]),s._v(" "),t("p",[s._v("由于注册中心并不是这个 RPC 框架的重点内容, 所以在这里只实现了一个单机版的注册中心, 它只有客户端没有服务端, 所有的客户端依靠读写同一个元数据文件来实现元数据共享. 所以这个注册中心只能支持单机运行, 并不支持跨服务器调用.")]),s._v(" "),t("p",[s._v("但是这里同样采用的是面向接口编程的设计模式, 这样可以在不改动一行代码的情况下, 就可以通过增加一个 SPI 插件的方式, 提供一个可以跨服务器调用的真正的注册中心实现, 比如一个基于 HTTP 协议实现的注册中心.")]),s._v(" "),t("p",[s._v("首先在 RPC 服务的接入点, 接口 RpcAccessPoint 中增加一个获取注册中心实例的方法:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RpcAccessPoint")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Closeable")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * 获取注册中心的引用\n     * @param nameServiceUri 注册中心 URI\n     * @return 注册中心引用\n     */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("NameService")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getNameService")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("URI")]),s._v(" nameServiceUri"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[s._v("这个方法的参数就是注册中心的 URI, 也就是它的地址, 返回值就是访问这个注册中心的实例. 然后再给 NameService 接口增加两个方法:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("NameService")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * 所有支持的协议\n     */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Collection")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("supportedSchemes")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * 连接注册中心\n     * @param nameServiceUri 注册中心地址\n     */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("connect")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("URI")]),s._v(" nameServiceUri"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("p",[s._v('其中 supportedSchemes() 方法, 返回可以支持的所有协议, 比如在这个例子中的实现, 它的协议是 "file". connect() 方法就是给定注册中心服务端的 URI, 去建立与注册中心服务端的连接.')]),s._v(" "),t("p",[s._v("下面来看获取注册中心的方法 getNameService() 的实现, 它的实现也很简单, 就是"),t("strong",[s._v("通过 SPI 机制加载所有的 NameService 的实现类, 然后根据给定的 URI 中的协议, 去匹配支持这个协议的实现类, 然后返回这个实现的引用就可以")]),s._v("了. 由于这部分实现是通用并且不会改变的, 直接把实现代码放在 RpcAccessPoint 这个接口中.")]),s._v(" "),t("p",[s._v("这样就实现了一个可扩展的注册中心接口, 系统可以根据 URI 中的协议, 动态地来选择不同的注册中心实现. 增加一种注册中心的实现, 也不需要修改任何代码, 只要按照 SPI 的规范, 把协议的实现加入到运行时 CLASSPATH 中就可以了. (这里设置 CLASSPATH 的目的, 在于告诉 Java 执行环境, 在哪些目录下可以找到所要执行的 Java 程序所需要的类或者包.)")]),s._v(" "),t("p",[s._v("这个例子中注册中心的实现类是 LocalFileNameService, 它的实现比较简单, 就是去读写一个本地文件, 实现注册服务 registerService() 方法时, 把"),t("strong",[s._v("服务提供者保存到本地文件")]),s._v("中; 实现查找服务 lookupService() 时, 就是去本地文件中读出所有的服务提供者, 找到对应的服务提供者, 然后返回.")]),s._v(" "),t("p",[s._v("这里面有一点需要注意的是, 由于这个本地文件是一个共享资源, 它会被 RPC 框架所有的客户端和服务端并发读写. 所以"),t("strong",[s._v("必须要加锁! ​")]),s._v("由于这个文件可能被多个进程读写, 所以这里不能使用编程语言提供的那些锁, 原因是这些锁只能在进程内起作用, 它锁不住其他进程. 这里面必须使用由"),t("strong",[s._v("操作系统提供的文件锁")]),s._v(". 这个锁的使用和其他的锁并没有什么区别, 同样是在访问共享文件之前先获取锁, 访问共享资源结束后必须释放锁. 具体的代码可以去查看 LocalFileNameService 这个实现类.")]),s._v(" "),t("h5",{attrs:{id:"_2-rpc服务是怎么实现的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-rpc服务是怎么实现的"}},[s._v("#")]),s._v(" 2.RPC服务是怎么实现的?")]),s._v(" "),t("p",[s._v("接下来再来看看 RPC 服务是怎么实现的. RPC 服务也就是 RPC 框架的服务端. 在之前讲解这个 RPC 框架的实现原理时讲到过, RPC 框架的服务端主要需要实现下面这两个功能:")]),s._v(" "),t("ol",[t("li",[t("strong",[s._v("服务端的业务代码把服务的实现类注册到 RPC 框架中 ;")])]),s._v(" "),t("li",[t("strong",[s._v("接收客户端桩发出的请求, 调用服务的实现类并返回结果. ​")])])]),s._v(" "),t("p",[s._v("把服务的实现类注册到 RPC 框架中, 这个逻辑的实现很简单, 只要使用一个合适的数据结构, 记录下所有注册的实例就可以了, 后面在处理客户端请求的时候, 会用到这个数据结构来查找服务实例.")]),s._v(" "),t("p",[s._v("然后来看, RPC 框架的服务端如何来处理客户端发送的 RPC 请求. 首先来看服务端中, 使用 Netty 接收所有请求数据的处理类 RequestInvocation 的 channelRead0() 方法.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("channelRead0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ChannelHandlerContext")]),s._v(" channelHandlerContext"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Command")]),s._v(" request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Exception")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RequestHandler")]),s._v(" handler "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" requestHandlerRegistry"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getHeader")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getType")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" handler"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Command")]),s._v(" response "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" handler"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("handle")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" response"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            channelHandlerContext"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("writeAndFlush")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("response"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("addListener")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ChannelFutureListener")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" channelFuture "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("channelFuture"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isSuccess")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    logger"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("warn")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Write response failed!"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" channelFuture"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cause")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    channelHandlerContext"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("channel")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("close")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            logger"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("warn")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Response is null!"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throw")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Exception")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("format")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"No handler for request with type: %d!"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getHeader")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getType")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br")])]),t("p",[t("strong",[s._v("这段代码的处理逻辑就是根据请求命令的 Hdader 中的请求类型 type, 去 requestHandlerRegistry 中查找对应的请求处理器 RequestHandler, 然后调用请求处理器去处理请求, 最后把结果发送给客户端.")])]),s._v(" "),t("p",[s._v('这种通过"请求中的类型", 把请求分发到对应的处理类或者处理方法的设计, 在 RocketMQ 和 Kafka 的源代码中都见到过, 在服务端处理请求的场景中, 这是一个很常用的方法. 这里使用的也是同样的设计, 不同的是这里使用了一个命令注册机制, 让这个路由分发的过程省略了大量的 if-else 或者是 switch 代码. 这样做的好处是, 可以很方便地扩展命令处理器, 而不用修改路由分发的方法, 并且代码看起来更加优雅. 这个命令注册机制的实现类是 '),t("strong",[s._v("RequestHandlerRegistry")]),s._v(", 可以自行去查看.")]),s._v(" "),t("p",[s._v("因为这个 RPC 框架中只需要处理一种类型的请求: RPC 请求, 所以只实现了一个命令处理器: "),t("strong",[s._v("RpcRequestHandler")]),s._v(". 这部分代码是这个 RPC 框架服务端最核心的部分. 另外为了便于理解, 这里只保留了核心业务逻辑, 在充分理解这部分核心业务逻辑之后, 可以再去查看项目中完整的源代码.")]),s._v(" "),t("p",[s._v("先来看它处理客户端请求, 也就是这个 handle() 方法的实现.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Command")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("handle")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Command")]),s._v(" requestCommand"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Header")]),s._v(" header "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" requestCommand"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getHeader")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 从 payload 中反序列化 RpcRequest")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RpcRequest")]),s._v(" rpcRequest "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SerializeSupport")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("parse")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("requestCommand"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getPayload")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 查找所有已注册的服务提供方，寻找 rpcRequest 中需要的服务")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" serviceProvider "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" serviceProviders"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("rpcRequest"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getInterfaceName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 找到服务提供者，利用 Java 反射机制调用服务的对应方法")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" arg "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SerializeSupport")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("parse")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("rpcRequest"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getSerializedArguments")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Method")]),s._v(" method "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" serviceProvider"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getMethod")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("rpcRequest"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getMethodName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" result "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" method"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("invoke")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("serviceProvider"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" arg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 把结果封装成响应命令并返回")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Command")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ResponseHeader")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("type")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" header"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getVersion")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" header"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getRequestId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SerializeSupport")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("serialize")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("result"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("ol",[t("li",[s._v("把 requestCommand 的 payload 属性反序列化成为 RpcRequest;")]),s._v(" "),t("li",[s._v("根据 rpcRequest 中的服务名, 去成员变量 serviceProviders 中查找已注册服务实现类的实例;")]),s._v(" "),t("li",[s._v("找到服务提供者之后, 利用 Java "),t("strong",[s._v("反射机制")]),s._v("调用服务的对应方法;")]),s._v(" "),t("li",[s._v("把结果封装成响应命令并返回, 在 RequestInvocation 中, 它会把这个响应命令发送给客户端.")])]),s._v(" "),t("p",[s._v("再来看成员变量 "),t("strong",[s._v("serviceProviders")]),s._v(", 它的定义是: Map<String/"),t("em",[s._v("service name")]),s._v("/, Object/"),t("em",[s._v("service provider")]),s._v("/> serviceProviders. 它实际上就是一个 Map, Key 就是服务名, Value 就是服务提供方, 也就是服务实现类的实例. 这个 Map 的数据从哪儿来的呢? 来看一下 RpcRequestHandler 这个类的定义:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Singleton")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RpcRequestHandler")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RequestHandler")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServiceProviderRegistry")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("addServiceProvider")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" serviceClass"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" serviceProvider"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        serviceProviders"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("serviceClass"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getCanonicalName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" serviceProvider"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        logger"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("info")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Add service: {}, provider: {}."')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                serviceClass"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getCanonicalName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                serviceProvider"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getCanonicalName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[s._v("可以看到, 这个类不仅实现了处理客户端请求的 RequestHandler 接口, 同时还实现了注册 RPC 服务 ServiceProviderRegistry 接口, 也就是说 RPC 框架服务端需要实现的两个功能——注册 RPC 服务和处理客户端 RPC 请求, 都是在这一个类 RpcRequestHandler 中实现的, 所以这个类是这个 RPC 框架服务端最核心的部分. 成员变量 serviceProviders 这个 Map 中的数据, 也就是在 addServiceProvider() 这个方法的实现中添加进去的.")]),s._v(" "),t("p",[s._v("注意 RpcRequestHandler 上增加了一个注解 @Singleton, 限定这个类它是一个单例模式, 这样确保在进程中任何一个地方, 无论通过 ServiceSupport 获取 RequestHandler 或者 ServiceProviderRegistry 这两个接口的实现类, 拿到的都是 RpcRequestHandler 这个类的唯一的一个实例. 这个 @Singleton 的注解和获取单例的实现在 ServiceSupport 中.")]),s._v(" "),t("h5",{attrs:{id:"_3-小结-11"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-小结-11"}},[s._v("#")]),s._v(" 3.小结")]),s._v(" "),t("p",[s._v("在 RPC 框架的服务端处理客户端请求的业务逻辑中, 分两层做了两次请求分发:")]),s._v(" "),t("ol",[t("li",[s._v("在 RequestInvocation 类中, 根据请求命令中的请求类型 (command.getHeader().getType()), 分发到对应的请求处理器 RequestHandler 中;")]),s._v(" "),t("li",[s._v("RpcRequestHandler 类中, 根据 RPC 请求中的服务名, 把 RPC 请求分发到对应的服务实现类的实例中去.")])]),s._v(" "),t("p",[s._v("这两次分发采用的设计是差不多的, 但需要注意的是, 这并不是一种过度设计. 原因是这两次分发分别是在不同的业务抽象分层中, 第一次"),t("strong",[s._v("分发是在服务端的网络传输层抽象")]),s._v("中, 它是网络传输的一部分, 而第二次分发是 "),t("strong",[s._v("RPC 框架服务端的业务层")]),s._v(', 是 RPC 框架服务端的一部分. 良好的分层设计, 目的也是让系统各部分更加的 "低耦合, 高内聚".')]),s._v(" "),t("h4",{attrs:{id:"答疑解惑3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#答疑解惑3"}},[s._v("#")]),s._v(" 答疑解惑3")]),s._v(" "),t("h5",{attrs:{id:"_1-主流消息队列都是如何存储消息的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-主流消息队列都是如何存储消息的"}},[s._v("#")]),s._v(" 1.主流消息队列都是如何存储消息的?")]),s._v(" "),t("p",[s._v("前面提到过, 现代的消息队列本质上是一个分布式的存储系统. 那决定一个存储系统的性能好坏, 最主要的因素是什么? 就是它的"),t("strong",[s._v("存储结构")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("在所有的存储系统中, 消息队列的存储可能是最简单的. 每个主题包含若干个分区, 每个分区其实就是一个 WAL(Write Ahead Log), 写入的时候只能尾部追加, 不允许修改. 读取的时候, 根据一个索引序号进行查询, 然后连续顺序往下读. ​")])]),s._v(" "),t("p",[s._v("接下来看看, 几种主流的消息队列都是如何设计它们的存储结构的.")]),s._v(" "),t("p",[s._v("先来看 Kafka, "),t("strong",[s._v("Kafka 的存储以 Partition 为单位, 每个 Partition 包含一组消息文件(Segment file)和一组索引文件(Index), 并且消息文件和索引文件一一对应, 具有相同的文件名(但文件扩展名不一样), 文件名就是这个文件中第一条消息的索引序号")]),s._v(".")]),s._v(" "),t("p",[s._v("每个索引中保存索引序号(也就是这条消息是这个分区中的第几条消息)和对应的消息在消息文件中的绝对位置. 在索引的设计上, Kafka 采用的是稀疏索引, 为了节省存储空间, 它不会为每一条消息都创建索引, 而是每隔几条消息创建一条索引.")]),s._v(" "),t("p",[s._v("写入消息的时候非常简单, 就是在消息文件尾部连续追加写入, 一个文件写满了再写下一个文件. 查找消息时, 首先根据文件名找到所在的索引文件, 然后用二分法遍历索引文件内的索引, 在里面找到离目标消息最近的索引, 再去消息文件中, 找到这条最近的索引指向的消息位置, 从这个位置开始顺序遍历消息文件, 找到目标消息.")]),s._v(" "),t("p",[s._v("可以看到, 寻址过程还是需要一定时间的. 一旦找到消息位置后, 就可以批量顺序读取, 不必每条消息都要进行一次寻址.")]),s._v(" "),t("p",[s._v("然后再来看一下 RocketMQ, "),t("strong",[s._v("RocketMQ 的存储以 Broker 为单位")]),s._v(". 它的存储也是分为"),t("strong",[s._v("消息文件和索引文件, 但是在 RocketMQ 中, 每个 Broker 只有一组消息文件, 它把在这个 Broker 上的所有主题的消息都存在这一组消息文件中. 索引文件和 Kafka 一样, 是按照主题和队列分别建立的, 每个队列对应一组索引文件, 这组索引文件在 RocketMQ 中称为 ConsumerQueue. RocketMQ 中的索引是定长稠密索引, 它为每一条消息都建立索引, 每个索引的长度(注意不是消息长度)是固定的 20 个字节")]),s._v(".")]),s._v(" "),t("p",[s._v("写入消息的时候, Broker 上所有主题, 所有队列的消息按照自然顺序追加写入到同一个消息文件中, 一个文件写满了再写下一个文件. 查找消息的时候, 可以直接根据队列的消息序号, 计算出索引的全局位置(索引序号 x 索引固定长度 20), 然后直接读取这条索引, 再根据索引中记录的消息的全局位置, 找到消息. 可以看到, 这里两次寻址都是绝对位置寻址, 比 Kafka 的查找是要快的.")]),s._v(" "),t("p",[t("img",{attrs:{src:"assets/image-20230522223218-3qwnc59.png",alt:""}})]),s._v(" "),t("p",[s._v("对比这两种存储结构, 可以看到它们有很多共通的地方, 都是采用"),t("strong",[s._v("消息文件 + 索引文件的存储方式, 索引文件的名字都是第一条消息的索引序号, 索引中记录了消息的位置等等")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("在消息文件的存储粒度上, Kafka 以分区为单位, 粒度更细, 优点是更加灵活, 很容易进行数据迁移和扩容. RocketMQ 以 Broker 为单位, 较粗的粒度牺牲了灵活性, 带来的好处是, 在写入的时候, 同时写入的文件更少, 有更好的批量(不同主题和分区的数据可以组成一批一起写入), 更多的顺序写入, 尤其是在 Broker 上有很多主题和分区的情况下, 有更好的写入性能. ​")])]),s._v(" "),t("p",[t("strong",[s._v("索引设计上, RocketMQ 和 Kafka 分别采用了稠密和稀疏索引, 稠密索引需要更多的存储空间, 但查找性能更好, 稀疏索引能节省一些存储空间, 代价是牺牲了查找性能. ​")])]),s._v(" "),t("p",[s._v("可以看到, 两种消息队列在存储设计上, 有不同的选择. 大多数场景下, 这两种存储设计的差异其实并不明显, 都可以满足需求. 但是在某些极限场景下, 依然会体现出它们设计的差异. 比如在一个 Broker 上有上千个活动主题的情况下, RocketMQ 的写入性能就会体现出优势. 再比如, 如果消息都是几个, 十几个字节的小消息, 但是消息的数量很多, 这时候 Kafka 的稀疏索引设计就能节省非常多的存储空间.")]),s._v(" "),t("h5",{attrs:{id:"_2-流计算与批计算的区别是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-流计算与批计算的区别是什么"}},[s._v("#")]),s._v(" 2.流计算与批计算的区别是什么?")]),s._v(" "),t("p",[s._v("对于这个问题, 通过一个例子来分析一下.")]),s._v(" "),t("p",[s._v("比如你要在一个学校门口开个网吧, 到底能不能赚钱需要事先进行调研, 看看学生的流量够不够撑起这个网吧. 然后你就蹲在学校门口数人头, 每过来一个学生就数一下, 数一下一天中每个小时会有多少个学生经过, 这是"),t("strong",[s._v("流计算")]),s._v(". 你还可以放个摄像头, 让它自动把路过的每个人都拍下来, 然后晚上回家再慢慢数这些照片, 这就是"),t("strong",[s._v("批计算")]),s._v(". 简单地说, "),t("strong",[s._v("流计算就是实时统计计算, 批计算则是事后统计计算, 这两种方式都可以统计出每小时的人流量")]),s._v(".")]),s._v(" "),t("p",[s._v("那这两种方式哪种更好呢? 还是那句话, "),t("strong",[s._v("看具体的使用场景和需求")]),s._v(". 流计算的优势就是实时统计, 每到整点的时候, 上一个小时的人流量就已经数出来了. 在 T+0 的时刻就能第一时间得到统计结果, 批计算相对就要慢一些, 它最早在 T+0 时刻才开始进行统计, 什么时候出结果取决于统计的耗时.")]),s._v(" "),t("p",[s._v("但是流计算也有一些不足, 比如在数人头的时候突然来了个美女, 你多看了几眼, 漏数了一些人怎么办? 没办法, 明天再来重新数吧. 也就是说"),t("strong",[s._v("对于流计算的故障恢复还是一个比较难解决的问题")]),s._v(". 另外, 你数了一整天人头, 回去做分析的时候才发现, 去网吧的大多数都是男生, 所以需要统计的是在校男生, 而不是所有人的数量. 这时候, 如果保存了这一天所有人的照片, 那重新数一遍照片就可以了, 否则就只能明天上街再数一次人头. 这个时候批计算的优势就体现出来了, 因为有原始数据, 当需求发生变化的时候, 可以随时改变算法重新计算.")]),s._v(" "),t("p",[t("strong",[s._v("总结下来, 大部分的统计分析类任务, 使用流计算和批计算都可以实现. 流计算具有更好的实时性, 而批计算可靠性更好, 并且更容易应对需求变化. 所以大部分针对海量数据的统计分析, 只要是对实时性要求没有那么高的场景, 大多采用的还是批计算的方式. ​")])]),s._v(" "),t("h4",{attrs:{id:"jmq的broker是如何异步处理消息的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jmq的broker是如何异步处理消息的"}},[s._v("#")]),s._v(" JMQ的Broker是如何异步处理消息的?")]),s._v(" "),t("p",[s._v("京东基础架构团队开发的消息队列 JMQ, 它的综合性能要显著优于目前公认性能非常好的 Kafka. 虽然在开发 JMQ 的过程中有很多的创新, 但是对于性能的优化这块, 并没有什么全新的划时代的新技术, JMQ 之所以能做到这样的极致性能, 靠的就是合理地设计和正确地使用已有的这些通用的底层技术和优化技巧. 这里以京东 JMQ 为例, 将这些基础技术点在消息队列实现中的应用讲解一下.")]),s._v(" "),t("h5",{attrs:{id:"_1-jmq的broker是如何异步处理消息的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-jmq的broker是如何异步处理消息的"}},[s._v("#")]),s._v(" 1.JMQ的Broker是如何异步处理消息的?")]),s._v(" "),t("p",[s._v("对于消息队列的 Broker, 它最核心的两个流程就是"),t("strong",[s._v("接收生产者发来的消息, 以及给消费者发送消息")]),s._v(". 后者的业务逻辑相对比较简单, 影响消息队列性能的关键, 就是消息生产的这个业务流程. 在 JMQ 中, 经过优化后的消息生产流程, 实测它每秒钟可以处理超过 100 万次请求.")]),s._v(" "),t("p",[s._v("消息生产的流程需要完成的功能是这样的:")]),s._v(" "),t("p",[t("img",{attrs:{src:"assets/image-20230522223243-cmqgbd6.jpg",alt:""}})]),s._v(" "),t("ul",[t("li",[s._v("首先, 生产者发送一批消息给 Broker 的主节点;")]),s._v(" "),t("li",[s._v("Broker 收到消息之后, 会对消息做一系列的解析, 检查等处理;")]),s._v(" "),t("li",[s._v("然后, 把消息复制给所有的 Broker 从节点, 并且需要把消息写入到磁盘中;")]),s._v(" "),t("li",[s._v("主节点收到大多数从节点的复制成功确认后, 给生产者回响应告知消息发送成功.")])]),s._v(" "),t("p",[s._v("由于使用各种异步框架或多或少都会有一些性能损失, 所以在设计这个流程的时候, 没有使用任何的异步框架, 而是自行设计一组互相配合的处理线程来实现, 但使用的异步设计思想和之前所讲的是一样的.")]),s._v(" "),t("p",[s._v("对于这个流程, JMQ 设计的线程模型是这样的:")]),s._v(" "),t("p",[t("img",{attrs:{src:"assets/image-20230522223243-tdjofpr.png",alt:""}})]),s._v(" "),t("p",[s._v("图中白色的细箭头是数据流, 蓝色的箭头是控制流, 白色的粗箭头代表远程调用. 蓝白相间的方框代表的是处理的步骤, 这里在蓝色方框中标注了这个步骤是在什么线程中执行的. 圆角矩形代表的是流程中需要使用的一些关键的数据结构.")]),s._v(" "),t("p",[s._v("这里设计了 6 组线程, 将一个大的流程拆成了 6 个小流程. 并且整个过程完全是异步化的.")]),s._v(" "),t("p",[s._v("流程的入口在图中的左上角, Broker 在收到来自生产者的发消息请求后, 会在一个 Handler 中处理这些请求, 这和在普通的业务系统中用 Handler 接收 HTTP 请求是一样的, 执行 Handler 中业务逻辑使用的是 Netty 的 IO 线程.")]),s._v(" "),t("p",[s._v("收到请求后, 在 Handler 中不做过多的处理, 执行必要的检查后, 将请求放到一个内存队列中, 也就是图中的 Requests Queue. 请求被放入队列后, Handler 的方法就结束了. 可以看到, 在 Handler 中只是把请求放到了队列中, 没有太多的业务逻辑, 这个执行过程是非常快的, 所以即使是处理海量的请求, 也不会过多的占用 IO 线程.")]),s._v(" "),t("p",[s._v("由于要保证消息的有序性, 整个流程的大部分过程是不能并发的, 只能单线程执行. 所以接下来使用一个线程 WriteThread 从请求队列中按照顺序来获取请求, 依次进行解析请求等其他的处理逻辑, 最后将消息序列化并写入存储. 序列化后的消息会被写入到一个内存缓存中, 就是图中的 JournalCache, 等待后续的处理.")]),s._v(" "),t("p",[s._v("执行到这里, 一条一条的消息已经被转换成一个连续的字节流, 每一条消息都在这个字节流中有一个全局唯一起止位置, 也就是这条消息的 Offset. 后续的处理就不用关心字节流中的内容了, 只要确保这个字节流能快速正确的被保存和复制就可以了.")]),s._v(" "),t("p",[s._v("这里面还有一个工作需要完成, 就是给生产者回响应, 但在这一步, 消息既没有落盘, 也没有完成复制, 还不能给客户端返回响应, 所以把待返回的响应按照顺序放到一个内存的链表 Pending Callbacks 中, 并记录每个请求中的消息对应的 Offset.")]),s._v(" "),t("p",[s._v("然后有 2 个线程, "),t("strong",[s._v("FlushThread")]),s._v(" 和 "),t("strong",[s._v("ReplicationThread")]),s._v(", 这两个线程是并行执行的, 分别负责"),t("strong",[s._v("批量异步进行刷盘和复制")]),s._v(", 刷盘和复制又分别是 2 个比较复杂的流程, 就不展开讲了. 刷盘线程不停地将新写入 Journal Cache 的字节流写到磁盘上, 完成一批数据的刷盘, 它就会更新一个刷盘位置的内存变量, 确保这个刷盘位置之前数据都已经安全的写入磁盘中. 复制线程的逻辑也是类似的, 同样维护了一个复制位置的内存变量.")]),s._v(" "),t("p",[s._v("最后设计了一组专门用于发送响应的线程 "),t("strong",[s._v("ReponseThreads")]),s._v(", 在刷盘位置或者复制位置更新后, 去检查待返回的响应链表 Pending Callbacks, 根据 QOS 级别的设置(因为不同 QOS 基本对发送成功的定义不一样, 有的设置需要消息写入磁盘才算成功, 有的需要复制完成才算成功), 将刷盘位置或者复制位置之前所有响应, 以及已经超时的响应, 利用这组线程 ReponseThreads 异步并行的发送给各个客户端.")]),s._v(" "),t("p",[s._v("这样就完成了"),t("strong",[s._v("消息生产")]),s._v("这个流程. 整个流程中, 除了 JournalCache 的加载和卸载需要对文件加锁以外, 没有用到其他的锁. 每个小流程都不会等待其他流程的共享资源, 也就不用互相等待资源(没有数据需要处理时等待上游流程提供数据的情况除外), 并且只要有数据就能第一时间处理.")]),s._v(" "),t("p",[s._v("这个流程中, "),t("strong",[s._v("最核心的部分在于 WriteThread 执行处理的这个步骤")]),s._v(", 对每条消息进行处理的这些业务逻辑, 都只能在 WriteThread 中单线程执行, 虽然这里面干了很多的事儿, 但是确保这些逻辑中, 没有缓慢的磁盘和网络 IO, 也没有使用任何的锁来等待资源, 全部都是内存操作, 这样即使单线程可以非常快速地执行所有的业务逻辑.")]),s._v(" "),t("p",[t("strong",[s._v("这个里面有很重要的几点优化: ​")])]),s._v(" "),t("ul",[t("li",[s._v("第一是使用了异步设计, 把刷盘和复制这两部分比较慢的操作从这个流程中分离出去异步执行;")]),s._v(" "),t("li",[s._v("第二是使用了一个写缓存 Journal Cache 将一个写磁盘的操作, 转换成了一个写内存的操作, 来提升数据写入的性能;")]),s._v(" "),t("li",[s._v("第三是这个处理的全流程是近乎无锁的设计, 避免了线程因为等待锁导致的阻塞;")]),s._v(" "),t("li",[s._v("第四是把回复响应这个需要等待资源的操作, 也异步放到其他的线程中去执行.")])]),s._v(" "),t("p",[s._v("这样一个看起来很简单的接收请求写入数据并回响应的流程, 需要涉及的技术包括: "),t("strong",[s._v("异步的设计, 缓存设计, 锁的正确使用, 线程协调, 序列化和内存管理")]),s._v(", 等等. 因此需要对这些技术都有深入的理解, 并合理地使用, 才能在确保逻辑正确, 数据准确的前提下, 做到极致的性能. 这也是为什么分析了这么多看起来和消息队列没什么关系的知识点和技术.")]),s._v(" "),t("h4",{attrs:{id:"程序员如何构建知识体系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#程序员如何构建知识体系"}},[s._v("#")]),s._v(" 程序员如何构建知识体系?")]),s._v(" "),t("p",[s._v("现在做技术的人普遍都有一种焦虑, 相信你也或多或少有一点, 焦虑什么呢? 总是感觉, 自己不懂的技术太多了. 虽然你不停地去学习, 拼命地扩充自己的技术栈, 但是面对不断出现的新技术, 学习的速度永远赶不上新技术发展的速度, 就会感觉自己不会的东西越来越多, 这其实就是一种技术焦虑.")]),s._v(" "),t("p",[s._v("焦虑的来源是什么? 焦虑其实是对某些不好的事情过度担心而产生的一种烦躁情绪. 这种担心更多来源于“看不清”或者说是“未知”, 人的本能就是对未知的事物会有莫名的恐惧.")]),s._v(" "),t("p",[s._v("对于技术焦虑来说, 你所担心的“不好的事情”, 其实就是担心自己技术成长跟不上技术环境的发展速度. 就像一场赛跑, 赛道是无数条路, 所有人都在不同的路上拼命地往前跑, 你不知道别人跑到哪儿了, 也不知道还有多远才能终点, 不焦虑才怪. 解决焦虑的办法是, "),t("strong",[s._v("给你一个导航, 你能看到自己处在什么位置, 前面的路是什么样的, 应该怎么来走, 焦虑也就解除了")]),s._v(".")]),s._v(" "),t("p",[s._v("缓解技术焦虑的“导航”是什么? 如果你能跳出来, 看清整个技术体系全貌, 知道你自己的技术栈在这个技术体系中的位置, 了解自己的长处和短板, 也就不再焦虑了.")]),s._v(" "),t("p",[s._v("我们可以把整个技术体系理解为一个超大的倒立的锥形体, 上大下小. 这个锥形, "),t("strong",[s._v("越靠上越偏重于应用, 或者说偏重于业务, 越靠下, 越偏重于基础技术和理论. ​")]),s._v("整个技术知识结构是这样的模式, 组成这个技术模型的每个技术点也呈现这样的状态. 比如消息队列, 就是整个技术体系中的一小块, 它也是一个倒立的锥形.")]),s._v(" "),t("p",[t("img",{attrs:{src:"assets/image-20230522223308-2z319h6.jpg",alt:""}})]),s._v(" "),t("p",[s._v("最上层是消息队列相关的生态系统, 这个里面涉及到的技术就非常多了, 包括怎么和流计算配合, 怎么和微服务配合, 怎么来实现云原生等等. 再往下一层, 是各种消息队列产品, 这里面任何一种消息队列产品, 你要想把它学到精通, 都需要花很多精力.")]),s._v(" "),t("p",[s._v("这个锥形越往下层, 涉及到的技术就越少. 比如说, 消息队列的实现原理, 我们这一整门课也就差不多讲全了. 它用到的底层技术, 就是异步, 并发, 锁等. 直到这个锥形的尖尖, 就一个数据结构, 也是所有消息队列的理论基础: “队列”这个数据结构.")]),s._v(" "),t("p",[s._v("在回到宏观层面来看这个大锥形, 虽然它越来越大, 但是新增的部分都在哪儿? 都在上面是不是? 也就是说, 这个大锥形它上面的大饼越摊越大, 但是底下的部分, 其实变化很少. 虽然计算机相关的科学也只有几十年的历史, 但是, "),t("strong",[s._v("近二十几年, 基础理论方面几乎没有任何突破性的进展")]),s._v(", 也即是说这个大锥形的尖尖, 二十年没变过.")]),s._v(" "),t("p",[s._v("看清了技术体系的整体, 再来看你自身这个个体. 对于整个技术体系这个超大的锥形体, 我们每个人能掌握的, 也就是你个人的技术栈, 也就只有其中很小的一部分.")]),s._v(" "),t("p",[s._v("你可能学了很多技术, 包括大学里面教的基础理论知识, 工作主要用的编程语言和一些框架等, 为了面试, 刷了好多的架构和算法题. 你是不是感觉, 这三部分完全没有任何关系? 大学的课程早就忘得差不多了, 因为工作中基本用不上; 工作中每天用到的就是这点儿框架和增删改查, 做得很熟练了, 也没什么挑战; 刷题的那些算法也仅仅是用来面试而已.")]),s._v(" "),t("p",[s._v("原因是什么? "),t("strong",[s._v("因为你的技术栈还没有打通形成体系, 是断层的")]),s._v(". 这些知识其实是有联系的, 无论你开发的是什么应用, 使用什么编程语言, 都免不了要使用一些基础组件或者存储系统, 实现这些基础组件必然会用到一些设计模式, 各种算法, 那这些模式和算法, 它的理论基础就是你在大学中学习的那些图论, 计算机组成原理等等这些课中涉及的知识. 所以说并不是这些知识你用不到, 而是你的知识体系没有建立起来.")]),s._v(" "),t("p",[s._v("那一个好的, 成体系的技术栈应该是什么样的呢? 应该是, “"),t("strong",[s._v("基础深厚, 涉猎广泛, 融汇贯通")]),s._v("”.")]),s._v(" "),t("p",[s._v("把你个人的技术栈放到大锥形体中, 应该像一个头向下倒立的鱿鱼. 我们都知道, 鱿鱼脑袋又大又尖, 须子又多又长. 把鱿鱼倒过来, 它脑袋要尽量塞满这个大锥形的底部, 也就是说, "),t("strong",[s._v("底层的大部分基础知识你要掌握")]),s._v(".")]),s._v(" "),t("p",[s._v("向上延伸的很多触手, 代表整个技术体系的最上层的众多领域中, 其中的几个领域你也是要掌握的. 并且, 自上而下, 最好不要有断层, 上层你掌握的技术不能只是浮于表面, 而是要足够的深入, "),t("strong",[s._v("深入到与你掌握的底层技术连通起来")]),s._v(", 代表你的知识体系是贯通的.")]),s._v(" "),t("p",[s._v("举个例子, 比如你写了一段代码, 往数据库中写了一条数据. 你编写的程序, 它在运行时是怎么存储和传输这条数据的? 数据是如何从你的程序传递给数据库的? 数据在数据库中是如何处理并存储的? 数据库又是怎么把数据保存到磁盘上的? 数据在磁盘上是以什么形式保存的? 如果你可以回答出这些问题, 那代表在这方面你的知识体系自上而下已经打通了.")]),s._v(" "),t("p",[t("img",{attrs:{src:"assets/image-20230522223309-kg9oz9n.jpg",alt:""}})]),s._v(" "),t("p",[s._v("这样的个人技术体系它有什么好处呢? 你已经掌握的每项应用技术, 都是你实际工作中最常用的东西, 你掌握的足够深入, 设计出来的技术方案或者写出来的代码质量就更高, 遇到相关的疑难问题也不至于难倒你. 有一个非常好的基础, 你学习新的应用技术也会非常快, 因为你只要学习它上层那部分就可以了, 底层的技术很多是相通的.")]),s._v(" "),t("p",[s._v("那么, 我们应该怎么样来构建自己的技术知识体系呢? 这里我给你一些建议.")]),s._v(" "),t("p",[s._v("我们大部分程序员的成长轨迹都是差不多的. 大学学习的那些计算机专业课, 除了你学的那门编程语言以外, 其他的专业课毕业之后大概率是用不到的. 原因是, 这些技术在整个技术体系中, 基本上处于最底层. 而我们毕业后, 无论是做 Web 开发, 做 APP 开发还是搞机器学习等等, 在技术锥形结构中都是最上层的应用技术, 距离底层的技术太远, 联系不上.")]),s._v(" "),t("p",[s._v("这个阶段我给你的建议是, 在一个技术领域内尽量扩展你的技术广度. 比如, 你是做 Web 开发的, 你可以尝试多学多用相关的各种技术, 像各种 Web 框架, HTTP 协议, JSON, 数据库应用, 相关的各种中间件和组件. 你不要今天学了 Spring, 明天又去学机器学习, 后天再去学安卓, 这样跨度太大很难建立体系.")]),s._v(" "),t("p",[s._v("当你在某个技术领域的技术广度足够了, 达到一个什么程度呢? 这个领域内常用的技术你都会使用, 随便一个技术, 你都知道, 或者即使你不知道, 简单看一下也能很快明白, 了解这个技术在这个技术领域内是哪一类的, 至少你知道的某个技术和它是类似的.")]),s._v(" "),t("p",[s._v("这个时候, 你就可以去深入的, 有目的的去找领域内最核心的几个技术, 去深入地学习它的实现原理和底层技术. 比如, 你是做 Web 开发的, 你可以去学习某个 Web 框架的实现原理, 学习 Web 容器的工作原理, 学习数据库的存储结构等等. 当你把这个技术领域内的大部分技术研究到足够深入, 能够联系起来, 你在这个技术领域内的个人技术体系就建好了, 你的第一条“小鱿鱼”就形成了.")]),s._v(" "),t("p",[s._v("所谓万事开头难, 这一步其实是最难的, 但是只要迈过这个门槛, 后面的过程就相对简单了. 你这个小鱿鱼可能个头很小, 须子也不多, 头扎的也不够深, 但是没关系, 只要是建立起了知识体系, 这些问题都不是关键问题, 都可以通过不断的学习来逐步成长.")]),s._v(" "),t("p",[s._v("建立起第一个小鱿鱼之后, 你可以选择继续扩展你知识体系的广度和深度, 养肥养大这条小鱿鱼. 也可以换一个新的技术方向, 再养一条新的小鱿鱼. 随着你涉猎的技术广度和深度逐步增加, 这些孤立的小鱿鱼, 总会在底层的某个地方连通起来, 变成一条大鱿鱼. 当你个人的技术体系足够丰满了之后, 大部分新技术对你来说不过都是一根儿鱿鱼须子而已. 你了解了技术全景, 再构建起你个人的技术体系, 自然就不再焦虑了.")]),s._v(" "),t("p",[s._v("所谓, “大道至简, 知易行难”. 道理总是听起来很简单, 真正能理解道理, 落到实践中去, 还是非常难的. 在实践的过程中, 可能有很多繁琐的, 琐碎的问题都需要你去解决. 希望你在构建自己的知识体系过程中, 能沉下心, 坚持去学习, 练习和试错. 勤勉之道无他, 在有恒而已, 愿你我共勉.")]),s._v(" "),t("p",[s._v("‍")]),s._v(" "),t("p",[s._v("‍")]),s._v(" "),t("h4",{attrs:{id:"参考资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[s._v("#")]),s._v(" 参考资料")]),s._v(" "),t("ul",[t("li",[s._v("pulsar官方文档："),t("a",{attrs:{href:"https://pulsar.apache.org/docs/3.0.x/concepts-architecture-overview/",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://pulsar.apache.org/docs/3.0.x/concepts-architecture-overview/"),t("OutboundLink")],1)])]),s._v(" "),t("p",[s._v("‍")])])}),[],!1,null,null,null);t.default=e.exports}}]);