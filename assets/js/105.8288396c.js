(window.webpackJsonp=window.webpackJsonp||[]).push([[105],{422:function(s,t,a){"use strict";a.r(t);var n=a(7),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"_250-mysql基础架构与存储引擎🌟"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_250-mysql基础架构与存储引擎🌟"}},[s._v("#")]),s._v(" 250.MySQL基础架构与存储引擎🌟")]),s._v(" "),t("h4",{attrs:{id:"mysql架构🌟"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mysql架构🌟"}},[s._v("#")]),s._v(" MySQL架构🌟")]),s._v(" "),t("p",[s._v("下图是 MySQL 的简要架构图. 整体主要分为 "),t("strong",[s._v("Server 层和存储引擎层")]),s._v(".")]),s._v(" "),t("p",[s._v("​"),t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20210904145152067.png",alt:""}}),s._v("​")]),s._v(" "),t("h5",{attrs:{id:"_1-server层"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-server层"}},[s._v("#")]),s._v(" 1.Server层")]),s._v(" "),t("p",[t("strong",[s._v("Server 层主要包括连接器, 查询缓存, 分析器, 优化器, 执行器")]),s._v("等, 所有"),t("mark",[t("strong",[s._v("跨存储引擎")])]),s._v("的功能都在这一层实现, 比如存储过程, 触发器, 视图, 内置函数等, 还有一个通用的"),t("strong",[s._v("日志模块 binlog 日志模块")]),s._v(".")]),s._v(" "),t("p",[s._v("总结一下: "),t("strong",[s._v("连接器用于身份权限校验; 分析器分析 SQL 语句要做什么; 优化器分析采用何种方案去执行语句; 执行器去执行语句")]),s._v(".")]),s._v(" "),t("h6",{attrs:{id:"_1-连接器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-连接器"}},[s._v("#")]),s._v(" (1)连接器")]),s._v(" "),t("p",[t("strong",[s._v("连接器用于与客户端建立连接, 并进行身份认证和权限校验等")]),s._v(". 客户端要向 MySQL 发起通信都必须先跟 Server 端建立通信连接, 而建立连接的工作就是连接器完成的.")]),s._v(" "),t("p",[s._v("连接器负责"),t("strong",[s._v("跟客户端建立连接, 获取权限, 维持和管理连接")]),s._v(". 连接后如果用户名密码"),t("strong",[s._v("认证")]),s._v("通过, 连接器会到权限表里面查出账户拥有的"),t("strong",[s._v("权限")]),s._v(". 后面这个连接里面的权限判断逻辑都将依赖于此时读到的权限. 这意味着一个用户成功建立连接后, 即使用管理员账号对这个用户的权限做了修改, 也不会影响已经存在连接的权限. 修改完成后, 只有再新建连接才会使用新的权限设置.")]),s._v(" "),t("p",[s._v("每个客户端连接都会在服务器进程中拥有一个"),t("strong",[s._v("线程")]),s._v(", 这个连接的查询只会在这个"),t("strong",[s._v("单独的线程")]),s._v("中执行, 该线程只能轮流在某个 CPU 中运行.")]),s._v(" "),t("p",[s._v("客户端如果太长时间没动静, 连接器会自动断开连接. 这由参数 "),t("strong",[s._v("wait_timeout")]),s._v(" 控制, 默认为 8 小时. 建立连接的过程通常比较复杂, 所以建议尽量减少建立连接的动作, "),t("strong",[s._v("尽量使用长连接")]),s._v(". 项目中应该使用"),t("strong",[s._v("数据库连接池")]),s._v("来维护连接。")]),s._v(" "),t("h6",{attrs:{id:"_2-查询缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-查询缓存"}},[s._v("#")]),s._v(" (2)查询缓存")]),s._v(" "),t("p",[s._v("执行查询语句的时候, 会先查询缓存.")]),s._v(" "),t("p",[s._v("之前执行过的语句及其结果可能会以 "),t("strong",[s._v("key-value")]),s._v(" 的形式被直接缓存在内存中. "),t("strong",[s._v("key 是查询的语句, value 是查询的结果")]),s._v(". 如果当前查询能够直接在这个缓存中找到 key, 那么这个 value 就会被直接返回给客户端.")]),s._v(" "),t("p",[s._v("MySQL8.0 版本已经"),t("strong",[s._v("删除")]),s._v("了查询缓存模块, 因为收益并不大, 而且还需要一定的维护成本.")]),s._v(" "),t("blockquote",[t("p",[s._v("为什么删除查询缓存机制?")])]),s._v(" "),t("p",[s._v("对于频繁更新的表, 查询缓存并不好.")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("但查询缓存的失效非常频繁, 只要有对一个表有更新, 这个表上所有的查询缓存都会被清空，因此缓存都将失效")]),s._v(".")]),s._v(" "),t("li",[t("strong",[s._v("缓存碎片, 内存不足都会造成缓存失效")]),s._v(".")]),s._v(" "),t("li",[t("strong",[s._v("缓存全部在内存中, 容易造成内存资源紧张, MySQL 本来就十分需要内存")]),s._v(". 且 SQL 语句有任何不同, 都会因为 Hash 不同而认为是不同的查询, 从而进行缓存.")])]),s._v(" "),t("h6",{attrs:{id:"_3-分析器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-分析器"}},[s._v("#")]),s._v(" (3)分析器")]),s._v(" "),t("p",[t("strong",[s._v("分析器会分析 SQL 语句进行词法分析与语法分析，也就是判断 SQL 语句是什么并判断其要做什么")]),s._v(".")]),s._v(" "),t("p",[s._v('词法分析就是识别出 SQL 字符串的含义; 针对词法分析的结果, 词法分析器会根据语法规则判断输入的 SQL 语句语法是否合法. 如果输入的语句不对, 就会抛出 "You have an error in your SQL syntax..." 错误.')]),s._v(" "),t("p",[s._v("MySQL 会解析查询, 并创建内部数据结构(解析树), 然后对其进行各种优化, 包括重写查询, 决定表的读取顺序, 以及选择合适的索引等. "),t("strong",[s._v("SQL 语句经过分析器分析之后, 会生成一颗语法树")]),s._v(", 如下图所示.")]),s._v(" "),t("p",[s._v("​"),t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20230315221642-cahwx26.png",alt:"image"}}),s._v("​")]),s._v(" "),t("h6",{attrs:{id:"​​​-4-优化器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#​​​-4-优化器"}},[s._v("#")]),s._v(" ​​​(4)优化器")]),s._v(" "),t("p",[t("strong",[s._v("优化器根据实际情况去判断并选择最优的方案去执行语句")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("这里最优只是优化器觉得最优的方案, 实际执行时不一定是最优的")]),s._v(". 优化器可以在表里面有多个索引的时候, 决定使用哪个索引; 或者在一个语句有多表关联(JOIN) 的时候, 决定各个表的连接顺序. 比如:")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" t1 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("JOIN")]),s._v(" t2 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("USING")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ID"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" t1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("c "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" t2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("d "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("可以先从表 t1 里面取出 c = 10 的记录的 ID 值, 再根据 ID 值关联表 t2, 再判断 t2 里面 d 的值是否等于 20.")]),s._v(" "),t("li",[s._v("可以先从表 t2 里面取出 d = 20 的记录的 ID 值, 再根据 ID 值关联表 t1, 再判断 t1 里面 c 的值是否等于 10.")])]),s._v(" "),t("p",[s._v("这两种执行方法的逻辑结果是一样的, 但执行的效率会有不同, 而优化器的作用就是决定选择使用哪种方案.")]),s._v(" "),t("p",[s._v("用户可以通过特殊的关键字提示(hint)优化器, 影响它的决策过程. 也可以请求优化器解释(explain)优化过程的各个因素, 使用户可以知道服务器是如何进行优化决策的, 并提供一个参考基准, 便于用户重构查询和 schema, 修改相关配置, 使应用尽可能高效运行.")]),s._v(" "),t("h6",{attrs:{id:"_5-执行器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-执行器"}},[s._v("#")]),s._v(" (5)执行器")]),s._v(" "),t("p",[t("strong",[s._v("执行器执行语句并从存储引擎返回数据")]),s._v(".")]),s._v(" "),t("p",[s._v("前面通过分析器知道 SQL 要做什么, 通过优化器知道了该怎么做, 于是就进入了执行器阶段, 开始执行语句.")]),s._v(" "),t("p",[s._v("开始执行的时候, 要先判断一下用户对数据表"),t("strong",[s._v("有没有执行查询权限")]),s._v(", 如果有权限则打开表继续执行. 打开表的时候, 执行器就会根据表的引擎定义, 去使用这个引擎提供的接口.")]),s._v(" "),t("p",[s._v("比如查询:")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" T "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("这里 ID 字段没有索引, 执行器的执行流程如下:")]),s._v(" "),t("ol",[t("li",[s._v("调用 InnoDB 引擎接口取这个表的第一行, 判断 ID 值是不是 10, 如果不是则跳过, 如果是则将这行存在结果集中;")]),s._v(" "),t("li",[s._v('调用引擎接口取 "下一行", 重复相同的判断逻辑, 直到取到这个表的最后一行.')]),s._v(" "),t("li",[s._v("执行器将上述遍历过程中所有满足条件的行组成的记录集作为"),t("strong",[s._v("结果集")]),s._v("返回给客户端.")])]),s._v(" "),t("p",[s._v("数据库的慢查询日志中可以看到一个 "),t("strong",[s._v("rows_examined")]),s._v(" 的字段, 表示这个"),t("strong",[s._v("语句执行过程中扫描了多少行")]),s._v(". 这个值就是在执行器每次调用引擎获取数据行的时候累加的. 有些场景下, 执行器调用一次, 在引擎内部则扫描了多行, 因此引擎扫描行数跟 rows_examined 并不是完全相同的.")]),s._v(" "),t("h5",{attrs:{id:"_2-存储引擎层"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-存储引擎层"}},[s._v("#")]),s._v(" 2.存储引擎层")]),s._v(" "),t("p",[t("strong",[s._v("存储引擎层主要负责数据的存储和读取")]),s._v(", 采用可以替换的"),t("strong",[s._v("插件式架构")]),s._v(", 支持 InnoDB, MyISAM, Memory 等多种存储引擎.")]),s._v(" "),t("h4",{attrs:{id:"mysql存储引擎🌟"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mysql存储引擎🌟"}},[s._v("#")]),s._v(" MySQL存储引擎🌟")]),s._v(" "),t("h5",{attrs:{id:"_1-基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-基础"}},[s._v("#")]),s._v(" 1.基础")]),s._v(" "),t("p",[s._v("存储引擎就是数据库用于数据存储, 更新, 查询等操作的不同实现方式. MySQL 采用不同方式将数据存储在文件或内存中, 这些技术使用不同的"),t("strong",[s._v("存储机制, 索引技巧, 锁定水平")]),s._v("以提供不同的功能和能力.")]),s._v(" "),t("p",[s._v("查看 MySQL 提供的所有存储引擎.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SHOW")]),s._v(" ENGINES"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SHOW")]),s._v(" VARIABLES "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("LIKE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%storage_engine%'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看默认引擎")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("结果如下图所示:")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20210904140759531.png",alt:"image-20210904140759531"}})]),s._v(" "),t("p",[s._v("MySQL 默认存储引擎是 "),t("strong",[s._v("InnoDB")]),s._v(". 不同存储引擎有不同的功能特点及"),t("strong",[s._v("适用场景")]),s._v(", 不同需求可以选择不同的存储引擎.")]),s._v(" "),t("h5",{attrs:{id:"_2-myisam"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-myisam"}},[s._v("#")]),s._v(" 2.MyISAM")]),s._v(" "),t("p",[s._v("MyISAM 是 MySQL5.5 版本之前的默认存储引擎, "),t("strong",[s._v("不支持事务")]),s._v(".")]),s._v(" "),t("p",[s._v("不支持行级锁, 只能对整张表加锁, 读取时会对需要读到的所有表加共享锁, 写入时则对表加排它锁. 但在表有读取操作的同时, 也可以往表中插入新的记录, 这被称为并发插入(CONCURRENT INSERT).")]),s._v(" "),t("p",[s._v("如果指定了 "),t("strong",[s._v("DELAY_KEY_WRITE")]),s._v(" 选项, 在每次修改执行完成时, "),t("strong",[s._v("不会立即")]),s._v("将修改的索引数据写入磁盘, 而是会写到内存中的"),t("strong",[s._v("键缓冲区")]),s._v(", 只有在清理键缓冲区或者关闭表的时候才会将对应的索引块写入磁盘. 这种方式可以极大的提升写入性能, 但是在数据库或者主机崩溃时会"),t("strong",[s._v("造成索引损坏")]),s._v(", 需要执行"),t("strong",[s._v("修复操作")]),s._v(". 可以手工或者自动执行检查和修复操作, 但是和事务恢复以及崩溃恢复不同, 可能导致一些"),t("strong",[s._v("数据丢失")]),s._v(", 而且修复操作是非常慢的.")]),s._v(" "),t("p",[t("strong",[s._v("应用场景")]),s._v(": 如果设计简单, 数据以"),t("strong",[s._v("紧密格式")]),s._v("存储. "),t("strong",[s._v("对于只读数据, 或者表比较小, 可以容忍修复操作")]),s._v(", 则依然可以使用它.")]),s._v(" "),t("p",[s._v("其索引实现参考: MyISAM 索引实现.")]),s._v(" "),t("h5",{attrs:{id:"_3-innodb"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-innodb"}},[s._v("#")]),s._v(" 3.InnoDB")]),s._v(" "),t("p",[s._v("InnoDB 是默认存储引擎, 是事务型存储引擎.")]),s._v(" "),t("p",[t("strong",[s._v("事务支持")]),s._v(": InnoDB 采用 MVCC 来支持高并发, 并且实现了四个标准的隔离级别. 其默认级别是"),t("strong",[s._v("可重复读")]),s._v(", 并且通过 next-key 锁 + MVCC 策略解决幻读问题.")]),s._v(" "),t("p",[t("strong",[s._v("索引")]),s._v(": 主索引是"),t("strong",[s._v("聚簇索引")]),s._v(", 在索引中保存了数据, 从而避免直接读取磁盘, 因此对查询性能有很大的提升.")]),s._v(" "),t("p",[s._v("InnoDB 做了很多优化, 包括从磁盘读取数据时采用的可预测性读, 能够加快读操作并且自动创建的自适应哈希索引, 能够加速插入操作的插入缓冲区等.")]),s._v(" "),t("p",[t("strong",[s._v("应用场景")]),s._v(": 可靠性要求较高或要求事务. 只有在需要它"),t("strong",[s._v("不支持")]),s._v("的特性时, 才考虑使用其它存储引擎.")]),s._v(" "),t("blockquote",[t("p",[s._v("MyISAM与InnoDB的对比")])]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("事务")]),s._v(": InnoDB 支持事务, MyISAM 不支持事务.")]),s._v(" "),t("li",[t("strong",[s._v("锁的粒度")]),s._v(": MyISAM 只支持表锁, InnoDB 支持"),t("strong",[s._v("表锁与行锁")]),s._v(". InnoDB 在应对高并发事务上使用 MVCC 比单纯的加锁更高效.")]),s._v(" "),t("li",[t("strong",[s._v("外键")]),s._v(": InnoDB 支持外键; 而 MyISAM 不支持外键.")]),s._v(" "),t("li",[t("strong",[s._v("备份")]),s._v(": InnoDB 支持"),t("strong",[s._v("在线热备份")]),s._v(".")]),s._v(" "),t("li",[t("strong",[s._v("崩溃恢复")]),s._v(": MyISAM 崩溃后发生损坏的概率比 InnoDB 高很多, 且恢复的速度也更慢; InnoDB 崩溃之后恢复更加容易.")]),s._v(" "),t("li",[t("strong",[s._v("其它特性")]),s._v(": MyISAM 支持压缩表和空间数据索引.")])]),s._v(" "),t("p",[s._v('《MySQL 高性能》: 不要轻易相信 "MyISAM 比 InnoDB 快" 之类的经验之谈, 这个结论往往不是绝对的. 在很多已知场景中, InnoDB 的速度都能让 MyISAM 望尘莫及, 尤其是用到了聚簇索引, 或者需要访问的数据都可以放入内存的应用. 所以'),t("strong",[s._v("一般情况下选择 InnoDB 都是没有问题")]),s._v("的. 如果并不在乎可扩展能力和并发能力, 也不需要事务支持以及崩溃后的安全恢复问题, 也可以选择 MyISAM.")]),s._v(" "),t("blockquote",[t("p",[s._v("如何选择存储引擎?")])]),s._v(" "),t("p",[t("strong",[s._v("根据具体的应用场景选择:")]),s._v(" "),t("strong",[t("strong",[s._v("综合考虑是否需要事务, 是否可以热备份, 崩溃恢复, 存储引擎的特有特性等. 注意不要混合使用存储引擎")])]),s._v(". 一般使用 InnoDB 就行了.")]),s._v(" "),t("h5",{attrs:{id:"_4-其他存储引擎"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-其他存储引擎"}},[s._v("#")]),s._v(" 4.其他存储引擎")]),s._v(" "),t("h6",{attrs:{id:"_1-archive"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-archive"}},[s._v("#")]),s._v(" (1)Archive")]),s._v(" "),t("p",[t("strong",[s._v("特性")]),s._v(": 对表数据进行压缩, 磁盘 I/O 更少, 数据存储在 ARZ 为后缀的文件中(表文件为 "),t("strong",[s._v("a.arz, a.frm")]),s._v("), 只支持 INSERT 和 SELECT 操作(不可以 DELETE 和 UPDATE), 只允许在自增 ID 列上加索引.")]),s._v(" "),t("p",[t("strong",[s._v("应用场景")]),s._v(": 日志和数据采集类应用.")]),s._v(" "),t("h6",{attrs:{id:"_2-memory"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-memory"}},[s._v("#")]),s._v(" (2)Memory")]),s._v(" "),t("p",[t("strong",[s._v("特性")]),s._v(": 数据保存在内存中, 所以数据库重启后会导致数据丢失. 支持 HASH 索引(等值查找应选择 HASH)和 BTree 索引(范围查找应选择), 所有字段都为固定长度, Memory 存储使用表级锁.")]),s._v(" "),t("p",[t("strong",[s._v("应用场景")]),s._v(": 用于查找或是映射表, 例如用于保存数据分析中产生的中间表, 用于缓存周期性聚合数据的结果表等. Memory 数据易丢失, 所以要求数据可再生.")]),s._v(" "),t("h4",{attrs:{id:"sql语句执行流程🌟"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sql语句执行流程🌟"}},[s._v("#")]),s._v(" SQL语句执行流程🌟")]),s._v(" "),t("p",[s._v("SQL 语句一般可以分为"),t("strong",[s._v("查询与更新")]),s._v("(增加, 更新, 删除)两类.")]),s._v(" "),t("p",[s._v("整体流程(与 MySQL架构 的顺序基本一致)如下:")]),s._v(" "),t("ul",[t("li",[s._v("客户端发送一条查询语句给服务器.")]),s._v(" "),t("li",[s._v("服务器先检查查询缓存, 如果命中了缓存, 则立刻返回存储在缓存中的结果. 否则进入下一阶段.")]),s._v(" "),t("li",[s._v("服务器端进行 SQL 解析, 预处理, 再由"),t("strong",[s._v("优化器")]),s._v("生成对应的执行计划.")]),s._v(" "),t("li",[s._v("MySQL 根据优化器生成的执行计划, 调用存储引擎的 API 来执行查询.")]),s._v(" "),t("li",[s._v("将结果返回给客户端.")])]),s._v(" "),t("h5",{attrs:{id:"_1-客户端发送执行请求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-客户端发送执行请求"}},[s._v("#")]),s._v(" 1.客户端发送执行请求")]),s._v(" "),t("p",[s._v('MySQL 客户端和服务器之间的通信协议是 "'),t("strong",[s._v("半双工")]),s._v('" 的, 这意味着在任何一个时刻, 要么是由服务器向客户端发送数据, 要么是由客户端向服务器发送数据, 这两个动作不能同时发生. 所以无法也无须将一个消息切成小块独立来发送. 这种协议让 MySQL 通信简单快速, 但也从很多地方限制了 MySQL. 一个明显的限制是, 这意味着没法进行流量控制. 一旦一端开始发生消息, 另一端要接收完整个消息才能响应它. 客户端用一个单独的数据包将查询传给服务器. 这也是为什么当查询的语句很长的时候, 参数 '),t("code",[s._v("max_allowed_packet")]),s._v("​ 就特别重要了. "),t("strong",[s._v("一旦客户端发送了请求, 它能做的事情就只是等待结果了. 一般服务器响应给用户的数据通常很多, 由多个数据包组成. 当服务器开始响应客户端请求时, 客户端必须完整地接收整个返回结果, 而不能简单地只取前面几条结果, 然后让服务器停止发送数据")]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"_2-查询语句执行流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-查询语句执行流程"}},[s._v("#")]),s._v(" 2.查询语句执行流程")]),s._v(" "),t("p",[s._v("先分析下查询语句, 语句如下:")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" tb_student A "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" A"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'18'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" A"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Jack'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("参考 MySQL 架构分析下这个语句的执行流程如下.")]),s._v(" "),t("h6",{attrs:{id:"_1-查询权限"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-查询权限"}},[s._v("#")]),s._v(" (1)查询权限")]),s._v(" "),t("p",[s._v("先检查该语句是"),t("strong",[s._v("否有权限")]),s._v(", 如果没有则直接返回错误信息.")]),s._v(" "),t("h6",{attrs:{id:"_2-查询缓存-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-查询缓存-2"}},[s._v("#")]),s._v(" (2)查询缓存")]),s._v(" "),t("p",[s._v("如果有权限则计算这条 SQL 语句的 Hash 并以之为 key 在内存中查询是否缓存有结果, 当查询命中该缓存, MySQL会立刻返回结果, 跳过了解析, 优化和执行阶段, 如果没有, 执行下一步.")]),s._v(" "),t("p",[s._v("注意新版已经去掉了查询缓存机制.")]),s._v(" "),t("h6",{attrs:{id:"_3-词法分析与语法检查"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-词法分析与语法检查"}},[s._v("#")]),s._v(" (3)词法分析与语法检查")]),s._v(" "),t("p",[t("strong",[s._v('MySQL 通过关键字将 SQL 语句进行解析, 并生成一棵对应的 "解析树". MySQL 解析器将使用 MySQL 语法规则验证和解析查询. 例如, 它将验证是否使用错误的关键字, 或者使用关键字的顺序是否正确等, 再或者它还会验证引号是否能前后正确匹配')]),s._v(".")]),s._v(" "),t("p",[s._v("通过分析器进行词法分析并分析是否有语法错误, 提取 SQL 语句的"),t("strong",[s._v("关键元素")]),s._v(", 并生成一棵对应的 \"解析树\". 比如提取上面这个语句是查询 SELECT, 提取需要查询的表名为 tb_student, 需要查询所有的列, 查询条件是这个表的 id = '1'.")]),s._v(" "),t("p",[s._v("预处理器则根据一些 MySQL 规则进一步检查解析树是否合法, 例如这里将检查数据表和数据列是否存在, 还会解析名字和别名, 看看它们是否有歧义.")]),s._v(" "),t("h6",{attrs:{id:"_4-优化器确定执行方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-优化器确定执行方案"}},[s._v("#")]),s._v(" (4)优化器确定执行方案")]),s._v(" "),t("blockquote",[t("p",[s._v("生成执行计划")])]),s._v(" "),t("p",[s._v("现在语法树被认为是合法的了, 并且由优化器将其转化成"),t("strong",[s._v("执行计划")]),s._v(".")]),s._v(" "),t("p",[s._v("和很多其他关系数据库不同, MySQL 并不会生成查询字节码来执行查询. MySQL 生成查询的一棵"),t("strong",[s._v("指令树")]),s._v(", 然后通过存储引擎执行完成这棵指令树并返回结果. 最终的执行计划包含了重构查询的全部信息.")]),s._v(" "),t("blockquote",[t("p",[s._v("基于成本的执行计划选择策略")])]),s._v(" "),t("p",[t("strong",[s._v("一条查询可以有很多种执行计划, 最后都返回相同的结果. 优化器的作用就是找到这其中最好的执行计划")]),s._v(". "),t("mark",[t("strong",[s._v("MySQL 使用基于成本的优化器, 它将尝试预测一个查询使用某种执行计划时的成本, 并选择其中成本最小的一个")])]),s._v(".")]),s._v(" "),t("p",[s._v('最初, 成本的最小单位是随机读取一个 4K 数据页的成本, 后来成本计算公式变得更加复杂, 并且引入了一些 "因子" 来估算某些操作的代价, 如通过各种'),t("strong",[s._v("统计信息")]),s._v("来计算: 每个表或者索引的页面个数, 索引的基数(索引中不同值的数量), 索引和数据行的长度, 索引分布情况. "),t("strong",[s._v("这些统计信息是通过存储引擎获取的")]),s._v(".")]),s._v(" "),t("p",[s._v('例如上述 SQL 语句可以有两种执行方案: (1) 先查询学生表中姓名为 "Jack" 的学生, 然后判断是否年龄是 18. (2) 先找出学生中年龄 18 岁的学生, 然后再查询姓名为 "Jack" 的学生. 优化器会根据'),t("strong",[s._v("自己的优化算法")]),s._v("进行选择执行效率最好的一个方案(优化器的决定有时候不一定最好).")]),s._v(" "),t("p",[s._v("确定执行计划后就准备开始执行.")]),s._v(" "),t("blockquote",[t("p",[s._v("优化策略")])]),s._v(" "),t("p",[s._v("MySQL 的查询优化器是一个非常复杂的部件, 它使用了很多优化策略来"),t("strong",[s._v("生成一个最优的执行计划")]),s._v(". 优化策略可以简单地分为两种, 一种是"),t("strong",[s._v("静态优化")]),s._v(", 一种是"),t("strong",[s._v("动态优化")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("静态优化")]),s._v("可以直接对解析树进行分析, 并完成优化. 例如优化器可以通过一些简单的代数变换将 WHERE 条件转换成另一种等价形式. 静态优化不依赖于特别的数值, 如 WHERE 条件中带入的一些常数等. "),t("strong",[s._v("静态优化在第一次完成后就一直有效")]),s._v(', 即使使用不同的参数重复执行查询也不会发生变化. 可以认为这是一种 "编译时优化".')]),s._v(" "),t("p",[t("strong",[s._v("动态优化")]),s._v('则和查询的上下文有关, 也可能和很多其他因素有关, 例如 WHERE 条件中的取值, 索引中条目对应的数据行数等. 这需要在每次查询的时候都重新评估, 可以认为这是 "运行时优化".')]),s._v(" "),t("p",[s._v("在执行语句和存储过程的时候, 动态优化和静态优化的区别非常重要. "),t("strong",[s._v("MySQL 对查询的静态优化只需要做一次, 但对查询的动态优化则在每次执行时都需要重新评估")]),s._v(". 有时候甚至在查询的执行过程中也会重新优化.")]),s._v(" "),t("p",[s._v("下面是一些 MySQL 能够处理的优化类型:")]),s._v(" "),t("ul",[t("li",[s._v("重新定义关联表的顺序.")]),s._v(" "),t("li",[s._v("将外连接转化成内连接.")]),s._v(" "),t("li",[s._v("使用等价变换规则. 比如比较符号的变换.")]),s._v(" "),t("li",[s._v("覆盖索引扫描.")]),s._v(" "),t("li",[s._v("提前终止查询.")])]),s._v(" "),t("blockquote",[t("p",[s._v("数据与索引的统计信息")])]),s._v(" "),t("p",[t("strong",[s._v("MySQL 通过统计信息来计算执行计划的成本进而选择合适的执行计划. 统计信息由存储引擎实现, 不同的存储引擎可能会存储不同的统计信息(也可以按照不同的格式存储统计信息)")]),s._v(" .")]),s._v(" "),t("p",[s._v("因为服务器层没有任何统计信息, 所以 MySQL 查询优化器在生成查询的执行计划时, 需要向存储引擎获取相应的统计信息. 存储引擎则提供给优化器对应的统计信息, 包括: 每个表或者索引有多少个页面, 每个表的每个索引的基数是多少, 数据行和索引长度, 索引的分布信息等. "),t("strong",[s._v("优化器根据这些信息来选择一个最优的执行计划")]),s._v(".")]),s._v(" "),t("blockquote",[t("p",[s._v("优化器选择错误的原因")])]),s._v(" "),t("p",[s._v("有很多种原因会导致 MySQL 优化器"),t("strong",[s._v("选择错误的执行计划")]),s._v(", 如下所示:")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("统计信息不准确")]),s._v(". MySQL 依赖存储引擎提供的统计信息来评估成本, 但有的存储引擎提供的信息是准确的, 有的偏差可能非常大. 例如, InnoDB 因为其 MVCC 的架构, 并不能维护一个数据表的行数的精确统计信息.")]),s._v(" "),t("li",[t("strong",[s._v("执行计划中的成本估算不等同于实际执行的成本")]),s._v(". 所以即使统计信息精准, 优化器给出的执行计划也可能不是最优的. 例如"),t("strong",[s._v("有时候某个执行计划虽然需要读取更多的页面, 但是它的成本却更小")]),s._v(". 因为如果这些页面都是顺序读或者这些页面都已经在内存中的话, 那么它的访问成本将很小. MySQL 层面并不知道哪些页面在内存中, 哪些在磁盘上, 所以查询实际执行过程中到底需要多少次物理 I/O 是无法得知的.")]),s._v(" "),t("li",[t("strong",[s._v("MySQL 的最优可能和你想的最优不一样")]),s._v(". 你可能希望执行时间尽可能的短, 但 MySQL 只是基于其成本模型选择最优的执行计划, 而有些时候这并不是最快的执行方式. 所以根据执行成本来选择执行计划并不是完美的模型.")]),s._v(" "),t("li",[t("strong",[s._v("MySQL 从不考虑其他并发执行的查询")]),s._v(", 这可能会影响到当前查询的速度.")]),s._v(" "),t("li",[t("strong",[s._v("MySQL 也并不是任何时候都是基于成本的优化")]),s._v(". 有时也会基于一些固定的规则, 例如如果存在全文搜索的 MATCH() 子句, 则在存在全文索引的时候就使用全文索引. 即使有时候使用别的索引和 WHERE 条件可以远比这种方式要快, MySQL 也仍然会使用对应的全文索引.")])]),s._v(" "),t("blockquote",[t("p",[s._v("查询优化器的提示(hint)")])]),s._v(" "),t("p",[s._v("如果对优化器选择的执行计划不满意, 可以"),t("strong",[s._v("使用优化器提供的几个提示(hint)来控制最终的执行计划")]),s._v(". 常见的提示如下.")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("USE INDEX, IGNORE INDEX 和 FORCE INDEX")]),s._v(". 这几个提示会告诉优化器使用或不使用哪些索引来查询记录(例如在决定关联顺序的时候使用哪个索引). 在 MyQL 5.1 和之后的版本可以通过新增选项 FOR ORDER BY 和 FOR GROUP BY 来指定是否对排序和分组有效. FORCE INDEX 和 USE INDEX 基本相同, 除了一点: "),t("strong",[s._v("FORCE INDEX 会告诉优化器全表扫描的成本会远远高于索引扫描, 哪怕实际上该索引用处不大")]),s._v(". 当发现优化器选择了错误的索引, 或者因为某些原因(比如在不使用 ORDER BY 的时候希望结果有序)要使用另一个索引时, 可以使用该提示.")]),s._v(" "),t("li",[t("strong",[s._v("FOR UPDATE 和 LOCK IN SHARE MODE")]),s._v(". 这也不是真正的优化器提示. 这两个提示主要"),t("strong",[s._v("控制 SELECT 语句的锁机制, 但只对实现了行级锁的存储引擎有效")]),s._v(". 使用该提示会"),t("strong",[s._v("对符合查询条件的数据行加锁")]),s._v(". 这两个提示经常被滥用, 很容易造成服务器的锁争用问题. 应"),t("mark",[t("strong",[s._v("避免使用")])]),s._v("这个. (参考: 共享锁与排他锁(读写锁))")])]),s._v(" "),t("h6",{attrs:{id:"_5-执行查询并返回结果"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-执行查询并返回结果"}},[s._v("#")]),s._v(" (5)执行查询并返回结果")]),s._v(" "),t("p",[s._v("在解析和优化阶段, MySQL 将生成查询对应的执行计划, MySQL 的查询执行引擎则根据这个执行计划来完成整个查询. 这里执行计划是一个数据结构, 而不是和很多其他的关系型数据库那样会生成对应的字节码.")]),s._v(" "),t("p",[s._v("MySQL 只是简单地根据执行计划给出的指令"),t("strong",[s._v("逐步执行")]),s._v('. 在根据执行计划逐步执行的过程中, 有大量的操作需要通过调用存储引擎实现的接口来完成, 这些接口称为 "handler API" 接口.')]),s._v(" "),t("p",[s._v("最后将查询结果返回给客户端.")]),s._v(" "),t("h5",{attrs:{id:"_3-更新语句执行流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-更新语句执行流程"}},[s._v("#")]),s._v(" 3.更新语句执行流程")]),s._v(" "),t("p",[s._v("接下来看看更新语句如何执行, 示例 SQL 语句如下:")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("UPDATE")]),s._v(" tb_student A "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" A"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'19'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" A"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Jack'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("这条语句与之前查询的流程类似, 只不过执行"),t("strong",[s._v("更新需要进行日志记录")]),s._v(". 这就引入了日志模块, MySQL 自带的"),t("strong",[s._v("日志模块是 binlog(归档日志)")]),s._v(" , 所有的存储引擎都可以使用, "),t("strong",[s._v("常用的 InnoDB 引擎")]),s._v("还自带了一个日志模块 "),t("strong",[s._v("redo log(重做日志) 和 undo log(回滚日志)")]),s._v(" .")]),s._v(" "),t("p",[s._v("下面分析这个语句的执行流程, 大体流程如下:")]),s._v(" "),t("ul",[t("li",[s._v("先查询到 Jack 这条数据.")]),s._v(" "),t("li",[t("strong",[s._v("然后拿到查询语句, 把 age 改为 19, 然后调用引擎 API 接口, 写入这一行数据, InnoDB 引擎把数据保存在内存中, 同时记录 redo log, 此时 redo log 进入 prepare 状态, 然后告诉执行器, 执行完成了随时可以提交")]),s._v(".")]),s._v(" "),t("li",[t("strong",[s._v("执行器收到通知后记录 binlog, 然后调用引擎接口, 提交 redo log 并且状态改为提交状态, 更新完成")]),s._v(".")])]),s._v(" "),t("p",[s._v("数据更新的详细流程如下:")]),s._v(" "),t("p",[s._v("​"),t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/%E5%9B%BE%E7%81%B5-MySQL%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E4%B8%8EInnoDB%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86-20250223101634-rq6njmc.png",alt:"图灵-MySQL执行过程与InnoDB底层原理"}}),s._v("​")]),s._v(" "),t("p",[s._v("整体流程如下:")]),s._v(" "),t("ol",[t("li",[s._v("当需要"),t("strong",[s._v("更新的数据不在 Buffer Pool 缓存池的时候, 会从磁盘中把整页数据都加载到缓存池内存中")]),s._v(".")]),s._v(" "),t("li",[t("strong",[s._v("将旧的数据值(name=Lucy)写入到")]),s._v(" "),t("mark",[t("strong",[s._v("undo 回滚日志中, 便于后续回滚")])]),s._v("​ "),t("strong",[s._v(". 如果事务提交失败要回滚数据, 可以用 undo 日志里的数据恢复 buffer pool 里面的缓存数据")]),s._v(".")]),s._v(" "),t("li",[t("strong",[s._v("执行器更新内存数据")]),s._v(", 即 name=Jack.")]),s._v(" "),t("li",[t("strong",[s._v("更新信息写入到 redo log buffer 缓冲区")]),s._v("中.")]),s._v(" "),t("li",[t("strong",[s._v("redo 日志顺序写入磁盘, 准备提交事务(prepare阶段)")]),s._v(" .")]),s._v(" "),t("li",[t("strong",[s._v("准备提交事务, 将 binlog 日志写入磁盘")]),s._v(".")]),s._v(" "),t("li",[s._v("写入 commit 标记到 redo 日志文件里, "),t("strong",[s._v("此时事务提交完成")]),s._v(". 该标记为了保证事务提交后 redo 与 binlog 数据一致. 到这里可以告知客户端事务已经提交完成. 这里 redo 日志文件记录了哪些位置的什么数据做了哪些修改, 由于 redo 日志具有"),t("strong",[s._v("顺序写")]),s._v("的特点, 所以写入是很快的, 因此"),t("mark",[t("strong",[s._v("修改记录到 redo 日志中即可认为事务已经完成")])]),s._v(". 这比每次都直接去修改磁盘上的 ibd 文件要快.")]),s._v(" "),t("li",[t("strong",[s._v("在系统空闲的时候将修改随机写入磁盘进行持久化, 以 page 为单位写入")]),s._v(". 完成后实现磁盘中的数据更新. 如果事务提交成功, buffer pool 里的数据还没来得及写入磁盘的时候系统宕机了, 可以用 redo 日志的数据"),t("strong",[s._v("恢复磁盘 ibd 文件里面的数据")]),s._v(". 也就是 buffer pool 里面的数据还没持久化到磁盘文件中, 但是 redo log 中记录了哪些数据做了哪些修改, 因此当系统恢复的时候, 可以先根据 redo log 对数据进行磁盘中的数据重做, 让其与 redo log 中的数据状态保持一致, 也就是实现数据的持久化. "),t("strong",[s._v('这个过程其实就是 "重做", 或者 "重放", 也就是 redo 的含义')]),s._v(".")])]),s._v(" "),t("p",[s._v("一个简要的流程图如下：")]),s._v(" "),t("p",[s._v("​"),t("img",{attrs:{src:"/img/%E5%9B%BE%E7%81%B5-MySQL%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E4%B8%8EInnoDB%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%201-20250223102245-5jbbcw3.png",alt:"图灵-MySQL执行过程与InnoDB底层原理 1"}}),s._v("​")]),s._v(" "),t("p",[s._v("更新语句默认都是会自动提交事务，因此更新的执行流程也可以看做是"),t("mark",[t("strong",[s._v("事务的执行流程")])]),s._v(".")]),s._v(" "),t("blockquote",[t("p",[s._v("更新流程总结")])]),s._v(" "),t("p",[s._v("整个过程，其实是把数据直接在内存中更新，这样后面其他事务马上就能使用数据了。同时把更新操作记录到三个日志中：")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("undo log")]),s._v(": 回滚日志。记录修改之前的数据，如果遇到事务回滚就能基于此回滚内存中的数据。")]),s._v(" "),t("li",[t("strong",[s._v("redo log")]),s._v(": 重做日志。由于对数据的修改是先放到内存中的，这个属于缓存，需要定时刷新到磁盘才算完全持久化。如果内存数据还没刷盘服务器就挂了，之前更新到内存的数据就丢失了。系统恢复时可以用 redo log 进行重做，进行数据恢复。")]),s._v(" "),t("li",[t("strong",[s._v("binlog")]),s._v(": 二进制日志。这是服务器层的日志，记录了本次执行的 SQL 语句或者修改的数据是啥(对应不同的日志格式)。如果数据库的数据不小心被删除了(比如删库跑路)，就可以用此文件恢复数据。")])]),s._v(" "),t("blockquote",[t("p",[s._v("为什么MySQL不能直接更新磁盘上的数据而设置这么一套复杂的机制来执行SQL?")])]),s._v(" "),t("p",[s._v("因为如果来一个请求就直接对磁盘文件进行随机读写, 然后更新磁盘文件里的数据性能可能相当差. 磁盘随机读写的性能是非常差的, 所以"),t("strong",[s._v("直接更新磁盘文件是不能让数据库抗住很高并发的")]),s._v(". MySQL 这套机制看起来复杂, 但它可以"),t("strong",[s._v("保证每个更新请求都是更新内存 Buffer Pool, 然后顺序写日志文件, 同时还能保证各种异常情况下的数据一致性")]),s._v(". 更新内存的性能是极高的, 然后顺序写磁盘上的日志文件的性能也是非常高的, 要远高于随机读写磁盘文件. 正是通过这套机制, 才能让 MySQL 数据库在较高配置的机器上每秒可以抗下几干甚至上万的读写请求.")]),s._v(" "),t("blockquote",[t("p",[s._v("为什么要用两个日志模块, 用一个日志模块不行吗?")])]),s._v(" "),t("p",[s._v("这是因为最开始 MySQL 默认存储引擎是 MyISAM, 但 "),t("strong",[s._v("redo log 是 InnoDB 引擎独有的")]),s._v(", 这就导致会"),t("strong",[s._v("没有 crash-safe 的能力")]),s._v("(即使数据库发生"),t("strong",[s._v("异常重启")]),s._v(", 之前提交的记录都不会丢失), "),t("strong",[s._v("binlog 日志只能用来归档")]),s._v(".")]),s._v(" "),t("p",[s._v("并不是说只用一个日志模块不可以, "),t("strong",[s._v("只是 InnoDB 引擎就是通过 redo log 来支持事务")]),s._v(". 那么用两个日志模块, 但是不要这么复杂行不行, 为什么 redo log 要引入 prepare 预提交状态? 这里用"),t("strong",[s._v("反证法")]),s._v("来说明下为什么要这么做.")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("先写 redo log 直接提交, 然后写 binlog")]),s._v(". 假设写完 redo log 后机器挂了, binlog 日志没有被写入, 那么机器重启后, 这台机器会通过 redo log 恢复数据, 但是这个时候 binlog 并没有记录该数据, 后续进行机器备份的时候, 就会丢失这一条数据, 同时主从同步也会"),t("strong",[s._v("丢失")]),s._v("这一条数据.")]),s._v(" "),t("li",[t("strong",[s._v("先写 binlog, 然后写 redo log")]),s._v(". 假设写完了 binlog, 机器异常重启了, 由于没有 redo log, 本机是无法恢复这一条记录的, 但是 binlog 又有记录, 那么和上面同样的道理, 就会"),t("strong",[s._v("产生数据不一致")]),s._v("的情况.")])]),s._v(" "),t("p",[s._v("如果"),t("strong",[s._v("采用 redo log 两阶段提交")]),s._v("的方式就不一样了, "),t("strong",[s._v("写完 binglog 后, 然后再提交 redo log")]),s._v(" 就会防止出现上述的问题, 从而保证了数据一致性.")]),s._v(" "),t("p",[s._v("那么问题来了, 有没有一个极端的情况呢? 假设 redo log 处于预提交状态, binglog 也已经写完了, 这个时候发生了异常重启会怎么样呢?  这个就要依赖于 MySQL 的"),t("strong",[s._v("处理机制")]),s._v("了, MySQL 的处理过程如下:")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("判断 redo log 是否完整, 如果判断是完整的就立即提交.")])]),s._v(" "),t("li",[t("strong",[s._v("如果 redo log 只是预提交但不是 commit 状态, 这个时候就会去判断 binlog 是否完整, 如果完整就提交 redo log, 不完整就回滚事务")]),s._v(".")])]),s._v(" "),t("p",[s._v("这样就解决了"),t("strong",[s._v("数据一致性")]),s._v("问题.")]),s._v(" "),t("h4",{attrs:{id:"回滚日志-undo-log-🌟"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#回滚日志-undo-log-🌟"}},[s._v("#")]),s._v(" 回滚日志(undo log)🌟")]),s._v(" "),t("h5",{attrs:{id:"_1-基础-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-基础-2"}},[s._v("#")]),s._v(" 1.基础")]),s._v(" "),t("p",[s._v("undo log 叫做"),t("strong",[s._v("回滚日志")]),s._v(", 在事务执行变更操作之前需要先将相反的操作写入 undo log, 通过它可以"),t("strong",[s._v("进行事务回滚操作, undo log 也是实现 MVCC 的基础")]),s._v(".")]),s._v(" "),t("blockquote",[t("p",[s._v("写入时机")])]),s._v(" "),t("p",[s._v("回滚日志是在"),t("strong",[s._v("更新内存数据之前")]),s._v("写入的，更新内存数据时回滚日志已经持久化到磁盘上了。这样就保证了即使遇到数据库突然宕机导致内存中缓存的更新数据丢失了, 当用户再次启动数据库的时候, 数据库还能够通过"),t("strong",[s._v("回滚日志")]),s._v("来回滚之前未完成的事务.")]),s._v(" "),t("p",[s._v("如果想要保证事务的"),t("strong",[s._v("原子性")]),s._v(", 就需要在异常发生时, 对已经执行的操作进行"),t("strong",[s._v("回滚")]),s._v(", 而恢复机制就是通过 "),t("strong",[s._v("回滚日志(undo log)")]),s._v("  实现的, 所有事务进行的修改都会"),t("strong",[s._v("先记录到这个回滚日志中")]),s._v(", "),t("strong",[s._v("然后再执行相关的操作")]),s._v(". 如果执行过程中遇到异常的话, 可以直接利用"),t("strong",[s._v("回滚日志")]),s._v("中的信息将数据"),t("strong",[s._v("回滚")]),s._v("到修改之前的样子就行!")]),s._v(" "),t("p",[s._v("​"),t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20250223102524-g7v1lu8.png",alt:"image"}}),s._v("​")]),s._v(" "),t("blockquote",[t("p",[s._v("回滚日志的作用")])]),s._v(" "),t("p",[s._v("回滚日志作用：")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("回滚")]),s._v("：记录事务的修改，可以实现事务的回滚。这可以实现事务的原子性。")]),s._v(" "),t("li",[t("strong",[s._v("实现 MVCC")]),s._v("：MVCC 使用到的快照数据存储在 undo log(回滚日志)中, 该日志通过回滚指针把一个数据行(Record) 的所有快照连接起来, 这样数据就可以有多个版本。")])]),s._v(" "),t("blockquote",[t("p",[s._v("回滚段")])]),s._v(" "),t("p",[s._v("InnoDB 对 "),t("strong",[s._v("undo log 文件")]),s._v("的管理采用段的方式, 也就是"),t("strong",[s._v("回滚段")]),s._v("(rollback segment). 每个回滚段记录了 1024 个 undo log segment, 每个事务只会使用一个 undo log segment.")]),s._v(" "),t("p",[s._v("在 MySQL5.5 的时候, 只有一个回滚段, 那么最大同时支持的事务数量为 1024 个. 在 MySQL 5.6 开始, InnoDB 支持最大 128 个回滚段, 故其支持"),t("strong",[s._v("同时在线的事务限制提高到了 128 * 1024")]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"_2-回滚日志相关参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-回滚日志相关参数"}},[s._v("#")]),s._v(" 2.回滚日志相关参数")]),s._v(" "),t("ul",[t("li",[s._v('innodb_undo_directory: 设置 undo log 文件所在的路径. 该参数的默认值为 "./", 即 InnoDB 数据文件存储位置, 目录下 ibdata1 文件就是 undo log 存储的位置.')]),s._v(" "),t("li",[t("strong",[s._v("innodb_undo_logs")]),s._v(": 设置 undo log 文件内部回滚段的个数, 默认值为 128. YFD 设置值为 128.")]),s._v(" "),t("li",[s._v("innodb_undo_tablespaces: 设置 undo log 文件的数量, 这样回滚段可以较为平均地分布在多个文件中. 设置该参数后, 会在路径 innodb_undo_directory 看到以 undo 为前缀的文件.")])]),s._v(" "),t("h5",{attrs:{id:"_3-日志删除时机"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-日志删除时机"}},[s._v("#")]),s._v(" 3.日志删除时机")]),s._v(" "),t("p",[s._v("回滚日志不需要一直存储着，因为事务提交之后一般就用不着回滚了，删除的时机如下：")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("新增类型的, 在事务提交之后就可以删除了")]),s._v(".")]),s._v(" "),t("li",[t("strong",[s._v("修改类型的, 事务提交之后不能立即删除, 这些日志会用于 MVCC, 只有当没有事务用到该版本信息时才可以删除")]),s._v(".")])]),s._v(" "),t("h4",{attrs:{id:"重做日志-redo-log-🌟"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重做日志-redo-log-🌟"}},[s._v("#")]),s._v(" 重做日志(redo log)🌟")]),s._v(" "),t("h5",{attrs:{id:"_1-基础-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-基础-3"}},[s._v("#")]),s._v(" 1.基础")]),s._v(" "),t("p",[s._v("重做日志(redo log) 也叫"),t("strong",[s._v("事务日志")]),s._v(", 可以帮助提高事务的效率.")]),s._v(" "),t("blockquote",[t("p",[s._v("写入时机")])]),s._v(" "),t("p",[s._v("在数据更新的流程中，涉及写入重做日志的操作如下：")]),s._v(" "),t("p",[s._v("​"),t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/%E5%9B%BE%E7%81%B5-MySQL%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E4%B8%8EInnoDB%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%20(3).png",alt:""}}),s._v("​")]),s._v(" "),t("p",[s._v("在修改完内存缓存池的数据之后，就开始写入重做日志，等后面写入 binlog 之后，还会在重做日志中写入事务提交完成的标记。")]),s._v(" "),t("h5",{attrs:{id:"_2-重做-事务-日志的作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-重做-事务-日志的作用"}},[s._v("#")]),s._v(" 2.重做(事务)日志的作用")]),s._v(" "),t("p",[s._v("重做(事务)日志的作用如下：")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("提升事务提交的性能")]),s._v("。因为日志中已经记录了事务, 就无须在每个事务提交时把缓冲池的脏块刷新(flush)到磁盘中。")]),s._v(" "),t("li",[t("strong",[s._v("提供数据库异常启动后数据修复的 crash safe 能力")]),s._v("。")])]),s._v(" "),t("blockquote",[t("p",[s._v("提升事务提交性能")])]),s._v(" "),t("p",[t("strong",[s._v("使用事务日志, 存储引擎在修改表的数据时只需要修改其内存拷贝, 再把该修改行为记录到持久在硬盘上的事务日志中, 而不用每次都将修改的数据本身持久到磁盘.")])]),s._v(" "),t("p",[t("strong",[s._v("InnoDB 使用日志来减少提交事务时的开销. 因为日志中已经记录了事务, 就无须在每个事务提交时把缓冲池的脏块刷新(flush)到磁盘中")]),s._v(". 事务修改的数据和索引通常会映射到表空间的随机位置, 所以刷新这些变更到磁盘需要很多随机 I/O. InnoDB 假设使用的是常规磁盘(机械磁盘), 随机 I/O 比顺序 I/O 要昂贵得多, 因为一个 I/O 请求需要时间把磁头移到正确的位置, 然后等待磁盘上读出需要的部分, 再转到开始位置.")]),s._v(" "),t("p",[t("strong",[s._v("事务日志采用的是追加的方式, 因此写日志的操作是磁盘上一小块区域内的顺序 I/O, 而不像随机 I/O 需要在磁盘的多个地方移动磁头, 所以采用事务日志的方式相对来说要快得多. 事务日志持久以后, 内存中被修改的数据在后台可以慢慢地刷回到磁盘. 目前大多数存储引擎都是这样实现的, 这称之为预写式日志(Write-Ahead Logging), 修改数据需要写两次磁盘")]),s._v(".")]),s._v(" "),t("blockquote",[t("p",[s._v("提供crash safe能力")])]),s._v(" "),t("p",[t("mark",[t("strong",[s._v("InnoDB 用日志把随机 I/O 变成顺序 I/O. 一旦日志安全写到磁盘, 事务就持久化了, 即使变更还没写到数据文件. 如果一些糟糕的事情发生了(例如断电了), InnoDB 可以重放日志并且恢复已经提交的事务")])]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("如果数据的修改已经记录到事务日志并持久化, 但数据本身还没有写回磁盘, 此时系统崩溃, 存储引擎在重启时能够自动恢复这部分修改的数据")]),s._v(". 具体的恢复方式则视存储引擎而定.")]),s._v(" "),t("p",[s._v("最开始 MySQL 里自带的引擎是 MyISAM, 但 MyISAM 没有 crash-safe 的能力, binlog 日志只能用于"),t("strong",[s._v("归档")]),s._v(". 而 InnoDB 是另一个公司以插件形式引入 MySQL 的, 既然只依靠 binlog 是没有 crash-safe 能力的, 所以 InnoDB 使用了另外一套日志系统, 也就是事务日志来实现 crash-safe 能力. "),t("strong",[s._v("有了事务日志, InnoDB 就可以保证即使数据库发生异常重启, 之前提交的记录都不会丢失, 这个能力就称为")]),s._v(" "),t("mark",[t("strong",[s._v("crash-safe")])]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"_3-缓冲区写入磁盘机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-缓冲区写入磁盘机制"}},[s._v("#")]),s._v(" 3.缓冲区写入磁盘机制")]),s._v(" "),t("h6",{attrs:{id:"基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[s._v("#")]),s._v(" 基础")]),s._v(" "),t("p",[t("strong",[s._v("日志缓冲必须被刷新到持久化存储, 以确保提交的事务完全被持久化了")]),s._v('. 了解清楚 "把日志缓冲写到日志文件" 和 "把日志刷新到持久化存储" 之间的不同是很重要的. '),t("strong",[s._v("在大部分操作系统中, 把缓冲写到日志只是简单地把数据从 InnoDB 的内存缓冲转移到了操作系统的缓存, 也是在内存里, 并没有真的把数据写到了持久化存储")]),s._v(".")]),s._v(" "),t("p",[t("mark",[t("strong",[s._v("当 InnoDB 变更任何数据时, 会写一条变更记录到内存日志缓冲区. 在缓冲满的时候, 事务提交的时候, 或者每一秒钟, InnoDB 都会刷写缓冲区的内容到磁盘日志文件---无论上述三个条件哪个先达到")])]),s._v(".")]),s._v(" "),t("p",[s._v("流程如下，其实就是先写到 redo log buffer，然后写到操作系统的 Page Cache，最后再由操作系统刷盘存储到磁盘上的重做日志文件中。")]),s._v(" "),t("p",[s._v("​"),t("img",{attrs:{src:"/img/image-20250223122654-z3yszq8.png",alt:"image"}}),s._v("​")]),s._v(" "),t("p",[s._v("如果有大事务, 增加日志缓冲区(默认 1MB)大小可以帮助减少 I/O. 变量 innodb_log_buffer_size 可以控制日志缓冲区的大小. "),t("strong",[s._v("通常不需要把日志缓冲区设置得非常大")]),s._v(". 推荐的范围是 1MB～8MB, 一般来说足够了, 除非要写很多相当大的 BLOB 记录. 相对于 InnoDB 的普通数据, 日志条目是非常紧凑的. 它们不是基于页的, 所以不会浪费空间来一次存储整个页. InnoDB 也使得日志条目尽可能地短.")]),s._v(" "),t("h6",{attrs:{id:"环式写磁盘"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#环式写磁盘"}},[s._v("#")]),s._v(" 环式写磁盘")]),s._v(" "),t("p",[s._v("InnoDB 最后还是必须把变更写到数据文件, 因为日志有固定的大小. InnoDB 的日志是"),t("strong",[s._v("环形方式")]),s._v("写的: 当写到日志的尾部, 会重新跳转到开头继续写, 但不会覆盖还没应用到数据文件的日志记录, 因为这样做会清掉已提交事务的唯一持久化记录.")]),s._v(" "),t("p",[t("strong",[s._v("InnoDB 使用多个文件作为一组循环日志(如下图所示)")]),s._v(" . 通常不需要修改默认的日志数量, 只修改每个日志文件的大小即可. 要修改日志文件大小, 需要完全关闭 MySQL, 将旧的日志文件移到其他地方保存, 重新配置参数, 然后重启. 一定要确保 MySQL 干净地关闭了, 或者还有日志文件可以保证需要应用到数据文件的事务记录, 否则数据库就无法恢复了! 当重启服务器的时候, 查看 MySQL 的错误日志. 在重启成功之后, 才可以删除旧的日志文件.")]),s._v(" "),t("p",[s._v("在有"),t("strong",[s._v("多个 redo log 日志文件")]),s._v("的情况下, redo log 会对某个文件从头开始写, 写完一个文件继续写另一个文件, 写到最后一个文件末尾就又回到第一个文件开头循环写, 如下面这个图所示.")]),s._v(" "),t("p",[s._v("​"),t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/20230319185252.png",alt:""}}),s._v("​")]),s._v(" "),t("p",[s._v("write pos 是"),t("strong",[s._v("当前记录的位置")]),s._v(", 一边写一边后移, 写到第 3 号文件末尾后就回到 0 号文件开头.")]),s._v(" "),t("p",[s._v("checkpoint 是"),t("strong",[s._v("当前要擦除的位置")]),s._v(", 也是往后推移并且循环的, 擦除记录前要把记录更新到数据文件里.")]),s._v(" "),t("p",[s._v("write pos 和 checkpoint 之间的部分就是空着的"),t("strong",[s._v("可写部分")]),s._v(", 可以用来记录新的操作. 如果 write pos 追上 checkpoint, 表示 redo log 写满了, 这时候不能再执行新的更新, 得停下来先擦掉一些记录, 也就是"),t("strong",[s._v("把一部分数据持久化到 ibd 磁盘文件中")]),s._v(", 把 checkpoint 推进一下.")]),s._v(" "),t("p",[s._v("整体的"),t("strong",[s._v("日志文件大小受控于 innodb_log_file_size 和 innodb_log_files_in_group 两个参数")]),s._v(", 这对写性能非常重要. 日志文件的总大小是每个文件的大小之和. 默认情况下, 只有两个 5MB 的文件, 总共 10MB. 对高性能工作来说这太小了. "),t("strong",[s._v("至少需要几百 MB, 或者甚至上 GB 的日志文件")]),s._v(".")]),s._v(" "),t("h6",{attrs:{id:"刷盘策略与innodb-flush-log-at-trx-commit参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#刷盘策略与innodb-flush-log-at-trx-commit参数"}},[s._v("#")]),s._v(" 刷盘策略与innodb_flush_log_at_trx_commit参数")]),s._v(" "),t("p",[t("strong",[s._v("数据修改是先写入到重做日志缓冲区(redo log buffer)中的, 后面操作系统需要把修改的数据从内存刷新到磁盘进行持久化(刷盘), 这里就有不同的刷盘策略")]),s._v("。")]),s._v(" "),t("p",[t("strong",[s._v("参数")]),s._v(" "),t("mark",[t("strong",[s._v("innodb_flush_log_at_trx_commit")])]),s._v(" "),t("strong",[s._v("可以控制 redo log 的从内存缓冲区写入磁盘的策略(日志缓冲刷新的频繁程度)")]),s._v(" , 也就是上面流程图中更新信息写入到 redo log buffer 缓冲区中之后, 将 redo log buffer 缓冲区中的修改写入到 redo log 的过程(步骤 5).")]),s._v(" "),t("blockquote",[t("p",[s._v("innodb_flush_log_at_trx_commit参数取值")])]),s._v(" "),t("p",[s._v("它有三种可能取值:")]),s._v(" "),t("ul",[t("li",[s._v("设置为 0: 表示每次事务提交时都只是把 redo log "),t("strong",[s._v("留在 redo log buffer 中")]),s._v(", 数据库宕机可能会造成"),t("strong",[s._v("丢失数据")]),s._v(". 对于上图就是没有步骤 5 了.")]),s._v(" "),t("li",[t("strong",[s._v("设置为 1(默认值)")]),s._v(" : 表示"),t("strong",[s._v("每次事务提交时都将 redo log 直接持久化到磁盘, 数据最安全, 不会因为数据库宕机丢失数据")]),s._v(", 但是效率稍微差一点, 线上系统推荐这个设置.")]),s._v(" "),t("li",[s._v("设置为 2: 表示每次事务提交时都"),t("strong",[s._v("只是把 redo log 写到操作系统的缓存 page cache 里而不会写到文件中")]),s._v(", 这种情况如果"),t("strong",[s._v("数据库宕机(数据库进程挂掉)是不会丢失数据的(因为数据是缓存在操作系统的 page cache 内存里面的)")]),s._v(" . 但是操作系统如果宕机了, page cache 缓存里的数据还没来得及写入磁盘文件的话就会丢失数据.")])]),s._v(" "),t("blockquote",[t("p",[s._v("innodb_flush_log_at_trx_commit参数选择")])]),s._v(" "),t("p",[s._v("上面的 0 和 2 都是不会写入文件的, 而是"),t("mark",[t("strong",[s._v("暂存到内存缓冲区中(0 是 redo log buffer, 2 是操作系统的 page cache)")])]),s._v(' , 因此存在宕机丢失数据的风险. 因此如果 MySQL 崩溃了或电源断电了, 设置 0 和 2 通常会导致最多一秒的数据丢失, 因为数据可能只存在于操作系统的缓存. 这里说 "通常", 因为不论如何 InnoDB 会每秒尝试刷新日志文件到磁盘, 但是在一些场景下也可能丢失超过 1 秒的事务, 例如当刷新被推迟了. 与此相反, 把日志刷新到持久化存储意味着 InnoDB 请求操作系统把数据刷出缓存, 并且确认写到磁盘了. 这是一个'),t("strong",[s._v("阻塞 I/O 的调用")]),s._v(", 直到数据被完全写回才会完成. "),t("strong",[s._v("因为写数据到磁盘比较慢, 当 innodb_flush_log_at_trx_commit 被设置为 1 时, 可能明显地降低 InnoDB 每秒可以提交的事务数")]),s._v(".")]),s._v(" "),t("p",[s._v("设置 innodb_flush_log_at_trx_commit 为不为 1 的值可能导致丢失事务. "),t("mark",[t("strong",[s._v("高性能事务处理需要的最佳配置是把 innodb_flush_log_at_trx_commit 设置为 1 且把日志文件放到一个有电池保护的写缓存的 RAID 卷中")])]),s._v(". 这兼顾了安全和速度. "),t("strong",[s._v("YFD 配置的 innodb_flush_log_at_trx_commit 参数值为 1")]),s._v(".")]),s._v(" "),t("p",[s._v("redo log buffer 刷盘持久化的策略如下图所示, 几种策略对应了不同的 redo log 记录方式.")]),s._v(" "),t("p",[s._v("​"),t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/202303191907182.png",alt:""}}),s._v("​")]),s._v(" "),t("p",[t("strong",[s._v("InnoDB 使用一个后台线程智能地刷新这些变更到数据文件")]),s._v(", 每隔 1 秒就会把 redo log buffer 中的日志, 调用操作系统函数 write 写到文件系统的 "),t("strong",[s._v("page cache")]),s._v(", 然后调用操作系统函数 fsync 持久化到磁盘文件. 这个线程可以批量组合写入, 使得数据写入更顺序, 以提高效率. 实际上, 事务日志把数据文件的随机 I/O 转换为几乎顺序的日志文件和数据文件 I/O. 把刷新操作转移到后台使查询可以更快完成, 并且缓和查询高峰时 I/O 系统的压力.")]),s._v(" "),t("p",[t("strong",[s._v("这里 redo log buffer 是 MySQL 进程管理的内存区域, page cache 是操作系统管理的内存区域, redo log buffer 中的数据修改信息会被写入操作系统的缓存 page cache 中")]),s._v(". page cache 是操作系统内存的一部分, 主要用于解决内存与磁盘速度差异较大的交互问题, 与在 CPU 与内存之间设置高速缓存是一个道理.")]),s._v(" "),t("h4",{attrs:{id:"二进制归档日志-binlog-🌟"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二进制归档日志-binlog-🌟"}},[s._v("#")]),s._v(" 二进制归档日志(binlog)🌟")]),s._v(" "),t("h5",{attrs:{id:"_1-基础-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-基础-4"}},[s._v("#")]),s._v(" 1.基础")]),s._v(" "),t("p",[s._v("二进制归档日志(binlog) 是属于 "),t("strong",[s._v("Server 层")]),s._v("的日志, 是一种逻辑日志, 保存了"),t("strong",[s._v("所有执行过的修改操作语句, 不保存查询操作")]),s._v(". 所有存储引擎都有.")]),s._v(" "),t("p",[s._v("如果 MySQL 服务意外停止, 可通过 binlog 日志文件排查用户操作或表结构操作, 从而来恢复数据库数据.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 查看binlog相关参数")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("show")]),s._v(" variables "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%log_bin%'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("YFD 测试环境的执行结果如下所示:")]),s._v(" "),t("p",[s._v("​"),t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/202303191911123.png",alt:""}}),s._v("​")]),s._v(" "),t("p",[s._v("几个参数的含义:")]),s._v(" "),t("ul",[t("li",[s._v("log_bin: binlog 日志是否打开状态")]),s._v(" "),t("li",[s._v("log_bin_basename: 是 binlog 日志的基本文件名, 后面会追加标识来表示每一个文件, binlog 日志文件会滚动增加.")]),s._v(" "),t("li",[s._v("log_bin_index: 指定的是 binlog 文件的索引文件, 这个文件管理了所有的 binlog 文件的目录.")]),s._v(" "),t("li",[s._v("sql_log_bin: "),t("strong",[s._v("SQL 语句是否写入 binlog 文件")]),s._v(", ON 代表需要写入, OFF 代表不需要写入. 如果想在主库上执行一些操作, 但不复制到 slave 库上, 可以通过修改参数 sql_log_bin 来实现. 比如模拟主从同步复制异常.")])]),s._v(" "),t("p",[s._v("MySQL5.7 版本中, binlog 默认是关闭的, 8.0 版本默认是打开的. 上图中 log_bin 的值是 ON 就代表 binlog 是开启状态.")]),s._v(" "),t("p",[s._v("binlog 日志文件可能会存在多个, 比如:")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("mysql"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("bin"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("000001")]),s._v("\nmysql"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("bin"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("000002")]),s._v("\nmysql"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("bin"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("index")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("这里 mysql-bin.index 文件是 binlog 文件的索引文件, 这个文件管理了所有的 binlog 文件的目录.")]),s._v(" "),t("blockquote",[t("p",[s._v("binlog写入时机")])]),s._v(" "),t("p",[s._v("在数据更新流程中，会先写重做日志，写入后再写二进制归档日志。")]),s._v(" "),t("p",[s._v("​"),t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/%E5%9B%BE%E7%81%B5-MySQL%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E4%B8%8EInnoDB%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%20(5).png",alt:""}}),s._v("​")]),s._v(" "),t("blockquote",[t("p",[s._v("binlog的作用")])]),s._v(" "),t("p",[s._v("binlog 主要用处是"),t("mark",[t("strong",[s._v("恢复数据与主从复制")])]),s._v(".")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("数据恢复")]),s._v(": binlog 主要用来"),t("strong",[s._v("恢复数据库磁盘里的数据")]),s._v(". 比如某次修改已经将数据的真实修改写入到了磁盘文件中, 但是有人误操作删除了磁盘文件的数据(比如删库跑路), 这时候就可以用 binlog 恢复原始的数据.")]),s._v(" "),t("li",[t("strong",[s._v("主从复制")]),s._v(": 主从复制是基于主从机器之间的 binlog 同步实现的，因为 binlog 记录的是执行的 SQL 或者数据，所以从机器也跟着执行一次就实现了数据同步。")]),s._v(" "),t("li",[t("strong",[s._v("变更数据事件消费")]),s._v(": 除此之外，还可以监听 binlog 的变化，将数据变化的事件生成消息或者进行二次加工，将结果发送到 MQ 或者其他系统中，比如同步到 ES 或者 Redis 中。")])]),s._v(" "),t("h5",{attrs:{id:"_2-binlog日志格式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-binlog日志格式"}},[s._v("#")]),s._v(" 2.binlog日志格式")]),s._v(" "),t("p",[s._v("参数 binlog_format 可以设置 binlog "),t("strong",[s._v("日志的记录格式")]),s._v(", MySQL 支持三种格式类型:")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("STATEMENT")]),s._v(": 基于 "),t("strong",[s._v("SQL 语句的复制")]),s._v(", 每一条会修改数据的 SQL 都会记录到 master 机器的 binlog 中, 这种方式"),t("strong",[s._v("日志量小")]),s._v(", 节约 IO 开销, 提高性能, 但是对于一些执行"),t("strong",[s._v("过程中才能确定结果的函数")]),s._v(", 比如 UUID(), SYSDATE() 等函数如果随 SQL 同步到 slave 机器去执行, 则结果跟 master 机器执行的不一样.")]),s._v(" "),t("li",[t("strong",[s._v("ROW")]),s._v(": 基于"),t("strong",[s._v("行的复制, 日志中会记录成每一行数据被修改的形式")]),s._v(", 然后在 slave 端再对相同的数据进行修改记录下每一行数据修改的细节, 可以解决函数, 存储过程等在 slave 机器的复制问题, 但这种方式"),t("strong",[s._v("日志量较大")]),s._v(", 性能不如 Statement. 假设 update 语句更新 100 行数据, Statement 方式就记录这条 update 语句, Row 方式会记录被修改的 100 行数据.")]),s._v(" "),t("li",[t("strong",[s._v("MIXED")]),s._v(": 混合模式复制, 实际就是前两种模式的结合, 在 Mixed 模式下, MySQL 会根据执行的每一条具体的 SQL 语句来区分对待记录的日志形式, 也就是在 Statement 和 Row 之间选择一种, 如果 SQL 里有函数或一些在执行时才知道结果的情况, 会选择 Row, 其它情况选择 Statement, 推荐使用这一种.")])]),s._v(" "),t("p",[t("strong",[s._v("YFD 采用的 ROW 格式")]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"_3-binlog写入磁盘机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-binlog写入磁盘机制"}},[s._v("#")]),s._v(" 3.binlog写入磁盘机制")]),s._v(" "),t("p",[s._v("binlog 写入磁盘机制主要通过 "),t("strong",[s._v("sync_binlog")]),s._v(" 参数控制, 默认值是 0.")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("设置为 0")]),s._v(". 表示每次提交事务都只写到操作系统的 page cache, 由系统自行判断什么时候执行 fsync 写入磁盘. 虽然性能得到提升, 但是机器宕机, page cache 里面的 binlog 会丢失. 这与前面 redo log 类似.")]),s._v(" "),t("li",[t("strong",[s._v("设置为 1. 表示每次提交事务都会执行 fsync 写入磁盘, 这种方式最安全")]),s._v(".")]),s._v(" "),t("li",[t("strong",[s._v("设置为 N(N > 1)")]),s._v(" . 表示每次提交事务都写到 page cache, 但累积 N 个事务后才 fsync 写入磁盘, 这种如果机器宕机会丢失 N 个事务的 binlog.")])]),s._v(" "),t("p",[s._v("YFD 采用的 "),t("strong",[s._v("sync_binlog = 1")]),s._v(".")]),s._v(" "),t("p",[s._v("发生以下任何事件时, "),t("strong",[s._v("binlog 日志文件会重新生成")]),s._v(":")]),s._v(" "),t("ul",[t("li",[s._v("服务器启动或重新启动.")]),s._v(" "),t("li",[s._v("服务器刷新日志, 执行命令 flush logs.")]),s._v(" "),t("li",[s._v("日志文件大小达到 max_binlog_size 值, 默认值为 1GB.")])]),s._v(" "),t("h5",{attrs:{id:"_4-查看binlog日志文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-查看binlog日志文件"}},[s._v("#")]),s._v(" 4.查看binlog日志文件")]),s._v(" "),t("p",[s._v("可以用 MySQL 自带的命令工具 "),t("strong",[s._v("mysqlbinlog")]),s._v(" 可以查看 binlog 日志内容.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 查看bin-log二进制文件(命令行方式, 不用登录mysql)")]),s._v("\nmysqlbinlog "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("--no-defaults -v --base64-output=decode-rows D:/dev/mysql-5.7.25-winx64/data/mysql-binlog.000007 ")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 查看bin-log二进制文件(带查询条件)")]),s._v("\nmysqlbinlog "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('--no-defaults -v --base64-output=decode-rows D:/dev/mysql-5.7.25-winx64/data/mysql-binlog.000007 start-datetime="2023-01-21 00:00:00" stop-datetime="2023-02-01 00:00:00" start-position="5000" stop-position="20000"')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("执行 mysqlbinlog 命令.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("mysqlbinlog "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("--no-defaults -v --base64-output=decode-rows D:/dev/mysql-5.7.25-winx64/data/mysql-binlog.000007")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("查出来的 binlog 日志文件内容如下:")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DELIMITER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# at 4")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#230127 21:13:51 server id 1  end_log_pos 123 CRC32 0x084f390f  Start: binlog v 4, server v 5.7.25-log created 230127 21:13:51 at startup")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Warning: this binlog is either in use or was not closed properly.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ROLLBACK")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# at 123")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#230127 21:13:51 server id 1  end_log_pos 154 CRC32 0x672ba207  Previous-GTIDs")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# [empty]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# at 154")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#230127 21:22:48 server id 1  end_log_pos 219 CRC32 0x8349d010  Anonymous_GTID  last_committed=0        sequence_number=1       rbr_only=yes")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!50718 SET TRANSACTION ISOLATION LEVEL READ COMMITTED*/")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@SESSION.GTID_NEXT")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'ANONYMOUS'")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# at 219")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#230127 21:22:48 server id 1  end_log_pos 291 CRC32 0xbf49de02  Query   thread_id=3     exec_time=0     error_code=0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TIMESTAMP")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1674825768")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.pseudo_thread_id")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.foreign_key_checks")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.sql_auto_is_null")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.unique_checks")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.autocommit")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.sql_mode")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1342177280")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.auto_increment_increment")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.auto_increment_offset")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!\\C utf8 */")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.character_set_client")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("33")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("@"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.collation_connection")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("33")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("@"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.collation_server")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("33")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.lc_time_names")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.collation_database")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DEFAULT")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BEGIN")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# at 291")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#230127 21:22:48 server id 1  end_log_pos 345 CRC32 0xc4ab653e  Table_map: `test`.`account` mapped to number 99")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# at 345")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#230127 21:22:48 server id 1  end_log_pos 413 CRC32 0x54a124bd  Update_rows: table id 99 flags: STMT_END_F")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### UPDATE `test`.`account`")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### WHERE")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("###   @1=1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("###   @2='lilei'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("###   @3=1000")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### SET")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("###   @1=1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("###   @2='lilei'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("###   @3=2000")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# at 413")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#230127 21:22:48 server id 1  end_log_pos 444 CRC32 0x23355595  Xid = 10")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COMMIT")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# at 444")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br")])]),t("p",[s._v("能看到里面有具体执行的"),t("strong",[s._v("修改 SQL 语句以及执行时的相关情况")]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"_5-binlog日志文件恢复数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-binlog日志文件恢复数据"}},[s._v("#")]),s._v(" 5.binlog日志文件恢复数据")]),s._v(" "),t("p",[t("strong",[s._v("如果数据被误删除了, 可以尝试用 binlog 日志文件对数据进行恢复, 其实就是")]),s._v("​"),t("mark",[t("strong",[s._v("回放执行")])]),s._v("​"),t("strong",[s._v("之前记录在 binlog 文件里的 SQL")]),s._v(".")]),s._v(" "),t("p",[s._v("举一个数据恢复的例子:")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 先执行刷新日志的命令生成一个新的binlog文件mysql-binlog.000008, 后面修改操作日志都会记录在最新的这个文件里")]),s._v("\nflush logs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 执行两条插入语句")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INSERT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INTO")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("test"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("account"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("balance"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VALUES")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'4'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'zhu'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'666'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INSERT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INTO")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("test"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("account"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("balance"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VALUES")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'5'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'zhu1'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'888'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 假设现在误操作执行了一条删除语句把刚新增的两条数据删掉了")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("delete")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" account "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("现在需要"),t("strong",[s._v("恢复被删除的两条数据")]),s._v(", 先查看 binlog 日志文件.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("mysqlbinlog "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("--no-defaults -v --base64-output=decode-rows D:/dev/mysql-5.7.25-winx64/data/mysql-binlog.000008")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("文件内容如下:")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@SESSION.GTID_NEXT")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'ANONYMOUS'")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# at 219")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#230127 23:32:24 server id 1  end_log_pos 291 CRC32 0x4528234f  Query   thread_id=5     exec_time=0     error_code=0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TIMESTAMP")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1674833544")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.pseudo_thread_id")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.foreign_key_checks")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.sql_auto_is_null")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.unique_checks")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.autocommit")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.sql_mode")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1342177280")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.auto_increment_increment")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.auto_increment_offset")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!\\C utf8 */")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.character_set_client")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("33")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("@"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.collation_connection")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("33")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("@"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.collation_server")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("33")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.lc_time_names")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@session.collation_database")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DEFAULT")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BEGIN")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# at 291")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#230127 23:32:24 server id 1  end_log_pos 345 CRC32 0x7482741d  Table_map: `test`.`account` mapped to number 99")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# at 345")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#230127 23:32:24 server id 1  end_log_pos 396 CRC32 0x5e443cf0  Write_rows: table id 99 flags: STMT_END_F")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### INSERT INTO `test`.`account`")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### SET")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("###   @1=4")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("###   @2='zhu'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("###   @3=666")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# at 396")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#230127 23:32:24 server id 1  end_log_pos 427 CRC32 0x8a0d8a3c  Xid = 56")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COMMIT")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# at 427")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#230127 23:32:40 server id 1  end_log_pos 492 CRC32 0x5261a37e  Anonymous_GTID  last_committed=1        sequence_number=2       rbr_only=yes")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!50718 SET TRANSACTION ISOLATION LEVEL READ COMMITTED*/")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@SESSION.GTID_NEXT")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'ANONYMOUS'")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# at 492")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#230127 23:32:40 server id 1  end_log_pos 564 CRC32 0x01086643  Query   thread_id=5     exec_time=0     error_code=0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TIMESTAMP")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1674833560")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BEGIN")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# at 564")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#230127 23:32:40 server id 1  end_log_pos 618 CRC32 0xc26b6719  Table_map: `test`.`account` mapped to number 99")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# at 618")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#230127 23:32:40 server id 1  end_log_pos 670 CRC32 0x8e272176  Write_rows: table id 99 flags: STMT_END_F")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### INSERT INTO `test`.`account`")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### SET")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("###   @1=5")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("###   @2='zhu1'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("###   @3=888")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# at 670")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#230127 23:32:40 server id 1  end_log_pos 701 CRC32 0xb5e63d00  Xid = 58")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COMMIT")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# at 701")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#230127 23:34:23 server id 1  end_log_pos 766 CRC32 0xa0844501  Anonymous_GTID  last_committed=2        sequence_number=3       rbr_only=yes")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!50718 SET TRANSACTION ISOLATION LEVEL READ COMMITTED*/")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@SESSION.GTID_NEXT")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'ANONYMOUS'")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# at 766")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#230127 23:34:23 server id 1  end_log_pos 838 CRC32 0x687bdf88  Query   thread_id=7     exec_time=0     error_code=0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TIMESTAMP")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1674833663")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BEGIN")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# at 838")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#230127 23:34:23 server id 1  end_log_pos 892 CRC32 0x4f7b7d6a  Table_map: `test`.`account` mapped to number 99")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# at 892")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#230127 23:34:23 server id 1  end_log_pos 960 CRC32 0xc47ac777  Delete_rows: table id 99 flags: STMT_END_F")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### DELETE FROM `test`.`account`")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### WHERE")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("###   @1=4")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("###   @2='zhu'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("###   @3=666")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### DELETE FROM `test`.`account`")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### WHERE")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("###   @1=5")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("###   @2='zhu1'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("###   @3=888")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# at 960")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#230127 23:34:23 server id 1  end_log_pos 991 CRC32 0x386699fe  Xid = 65")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COMMIT")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@SESSION.GTID_NEXT")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'AUTOMATIC'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* added by mysqlbinlog */")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*!*/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DELIMITER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# End of log file")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br"),t("span",{staticClass:"line-number"},[s._v("59")]),t("br"),t("span",{staticClass:"line-number"},[s._v("60")]),t("br"),t("span",{staticClass:"line-number"},[s._v("61")]),t("br"),t("span",{staticClass:"line-number"},[s._v("62")]),t("br"),t("span",{staticClass:"line-number"},[s._v("63")]),t("br"),t("span",{staticClass:"line-number"},[s._v("64")]),t("br"),t("span",{staticClass:"line-number"},[s._v("65")]),t("br"),t("span",{staticClass:"line-number"},[s._v("66")]),t("br"),t("span",{staticClass:"line-number"},[s._v("67")]),t("br"),t("span",{staticClass:"line-number"},[s._v("68")]),t("br"),t("span",{staticClass:"line-number"},[s._v("69")]),t("br"),t("span",{staticClass:"line-number"},[s._v("70")]),t("br"),t("span",{staticClass:"line-number"},[s._v("71")]),t("br"),t("span",{staticClass:"line-number"},[s._v("72")]),t("br"),t("span",{staticClass:"line-number"},[s._v("73")]),t("br"),t("span",{staticClass:"line-number"},[s._v("74")]),t("br"),t("span",{staticClass:"line-number"},[s._v("75")]),t("br"),t("span",{staticClass:"line-number"},[s._v("76")]),t("br")])]),t("p",[s._v("找到两条插入数据的 SQL, "),t("strong",[s._v("每条 SQL 的上下都有 BEGIN 和 COMMIT")]),s._v(", 找到第一条 SQL BEGIN 前面的文件位置标识 at "),t("strong",[s._v("219")]),s._v("(这是文件的位置标识), 再找到第二条 SQL COMMIT 后面的文件位置标识 at "),t("strong",[s._v("701")]),s._v(".")]),s._v(" "),t("p",[s._v("可以根据文件位置标识来恢复数据, 执行如下 SQL:")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("mysqlbinlog  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("--no-defaults --start-position=219 --stop-position=701 --database=test D:/dev/mysql-5.7.25-winx64/data/mysql-binlog.000009 | mysql -uroot -p123456 -v test")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 补充一个根据时间来恢复数据的命令, 找到第一条SQL BEGIN前面的时间戳标记 SET TIMESTAMP=1674833544, 再找到第二条SQL COMMIT后面的时间戳标记 SET TIMESTAMP=1674833663, 转成datetime格式")]),s._v("\nmysqlbinlog  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('--no-defaults --start-datetime="2023-1-27 23:32:24" --stop-datetime="2023-1-27 23:34:23" --database=test D:/dev/mysql-5.7.25-winx64/data/mysql-binlog.000009 | mysql -uroot -p123456 -v test')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("这样被删除数据就被恢复了.")]),s._v(" "),t("p",[s._v("注意: "),t("strong",[s._v("如果要恢复大量数据")]),s._v(", 比如删库跑路, 假设把数据库所有数据都删除了要怎么恢复, 如果数据库之前没有备份, 所有的 binlog 日志都在的话, 就从 binlog 第一个文件开始逐个恢复每个 binlog 文件里的数据, 这种一般不太可能, 因为 binlog 日志比较大, "),t("strong",[s._v("早期的 binlog 文件会定期删除的, 所以一般不可能用 binlog 文件恢复整个数据库的")]),s._v(".")]),s._v(" "),t("p",[t("mark",[t("strong",[s._v("一般推荐的是定期做一次全量数据库备份, 那么恢复数据库可以用最近的一次全量备份再加上备份时间点之后的 binlog 来恢复数据")])]),s._v(".")]),s._v(" "),t("p",[s._v("备份数据库一般可以用 mysqldump 命令工具.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 备份整个数据库")]),s._v("\nmysqldump "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("u root 数据库名"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("备份文件名"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("   \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 备份整个表")]),s._v("\nmysqldump "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("u root 数据库名 表名字"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("备份文件名"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 恢复整个数据库, test为数据库名称, 需要自己先建一个数据库test")]),s._v("\nmysql "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("u root test "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" 备份文件名 \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h4",{attrs:{id:"其他日志"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其他日志"}},[s._v("#")]),s._v(" 其他日志")]),s._v(" "),t("h5",{attrs:{id:"_1-慢查询日志"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-慢查询日志"}},[s._v("#")]),s._v(" 1.慢查询日志")]),s._v(" "),t("p",[s._v("慢查询日志是开销最低, 精度最高的测量查询时间的工具.")]),s._v(" "),t("p",[s._v("应该借助"),t("strong",[s._v("工具分析慢查询日志, 生成直观的报告")]),s._v(".")]),s._v(" "),t("p",[s._v("通过慢查询日志定位需要优化的单条查询, 然后单独分析该语句.")]),s._v(" "),t("h5",{attrs:{id:"_2-错误日志"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-错误日志"}},[s._v("#")]),s._v(" 2.错误日志")]),s._v(" "),t("p",[s._v("MySQL 还有一个比较重要的日志是错误日志, 它"),t("strong",[s._v("记录了数据库启动和停止, 以及运行过程中发生任何严重错误时的相关信息")]),s._v(". 当数据库出现任何故障导致无法正常使用时, 建议首先查看此日志.")]),s._v(" "),t("p",[s._v("在 MySQL 数据库中, 错误日志功能是默认开启的, 而且无法被关闭.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 查看错误日志存放位置")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("show")]),s._v(" variables "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%log_error%'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("‍")]),s._v(" "),t("p",[s._v("‍")]),s._v(" "),t("h4",{attrs:{id:"参考资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[s._v("#")]),s._v(" 参考资料")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://segmentfault.com/a/1190000012650596",target:"_blank",rel:"noopener noreferrer"}},[s._v("MySQL-InnoDB-MVCC多版本并发控制"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"http://xiaorui.cc/2016/12/08/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E5%BB%BA%E8%AE%AEinnodb%E4%BD%BF%E7%94%A8%E4%BA%BF%E7%BA%A7%E5%A4%A7%E8%A1%A8/",target:"_blank",rel:"noopener noreferrer"}},[s._v("为什么不建议innodb使用亿级大表 | 峰云就她了"),t("OutboundLink")],1)])]),s._v(" "),t("p",[s._v("‍")])])}),[],!1,null,null,null);t.default=e.exports}}]);