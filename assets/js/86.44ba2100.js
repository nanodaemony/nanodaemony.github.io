(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{401:function(s,a,t){"use strict";t.r(a);var n=t(7),e=Object(n.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"_40-前端编译与优化🌼"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_40-前端编译与优化🌼"}},[s._v("#")]),s._v(" 40.前端编译与优化🌼")]),s._v(" "),a("p",[s._v("本节对应《深入理解 Java 虚拟机》的第十章")]),s._v(" "),a("p",[s._v("从计算机程序出现的第一天起, 对效率的追逐就是程序员天生的坚定信仰, 这个过程犹如一场没有终点, 永不停歇的  F1 方程式竞赛, 程序员是车手, 技术平台则是在赛道上飞驰的赛车.")]),s._v(" "),a("h4",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[s._v("#")]),s._v(" 概述")]),s._v(" "),a("p",[s._v('在 Java 技术下谈 "编译期" 而没有具体上下文语境的话, 其实是一句很含糊的表述, 因为它可能是指一个'),a("strong",[s._v("前端编译器")]),s._v('(叫 "编译器的前端" 更准确一些)把 '),a("code",[s._v("*.java")]),s._v("​ 文件转变成 "),a("code",[s._v("*.class")]),s._v("​ 文件的过程; 也可能是指 Java 虚拟机的"),a("strong",[s._v("即时编译器")]),s._v("(常称 JIT 编译器, Just In Time Compiler)"),a("strong",[s._v("运行期把字节码转变成本地机器码的过程")]),s._v("; 还可能是指使用"),a("strong",[s._v("静态的提前编译器")]),s._v("(常称 AOT 编译器, Ahead Of Time Compiler)"),a("strong",[s._v("直接把程序编译成与目标机器指令集相关的二进制代码的过程")]),s._v(".")]),s._v(" "),a("blockquote",[a("p",[s._v("三类编译过程及其编译器产品")])]),s._v(" "),a("p",[s._v("下面列举了这 3 类编译过程里一些比较有代表性的编译器产品:")]),s._v(" "),a("ul",[a("li",[a("mark",[a("strong",[s._v("前端编译器")])]),s._v(": JDK 的 "),a("strong",[s._v("Javac")]),s._v(", Eclipse JDT 中的增量式编译器(ECJ).")]),s._v(" "),a("li",[a("mark",[a("strong",[s._v("即时编译器")])]),s._v(": HotSpot 虚拟机的 "),a("strong",[s._v("C1, C2 编译器, Graal 编译器")]),s._v(".")]),s._v(" "),a("li",[a("mark",[a("strong",[s._v("提前编译器")])]),s._v(": JDK 的 Jaotc, GNU Compiler for the Java(GCJ).")])]),s._v(" "),a("p",[s._v('这 3 类过程中最符合普通程序员对 Java 程序编译认知的应该是第一类, 本章标题中的 "前端" 指的也是这种由前端编译器完成的编译行为. 在本章后续的讨论里, 提到的全部 "编译期" 和 "编译器" 都仅限于'),a("strong",[s._v("第一类编译过程")]),s._v(', 所以会把第二, 三类编译过程留到第 11 章中去讨论. 限制了 "'),a("strong",[s._v("编译期")]),s._v('" 的范围后, 对于 "优化" 二字的定义也需要放宽一些, 因为 '),a("strong",[s._v("Javac 这类前端编译器对代码的运行效率几乎没有任何优化措施可言")]),s._v(", 哪怕是编译器真的采取了优化措施也不会产生什么实质的效果. 因为 Java 虚拟机设计团队选择把"),a("strong",[s._v("对性能的优化全部集中到运行期的即时编译器中")]),s._v(', 这样可以让那些不是由 Javac 产生的 Class 文件(如 JRuby, Groovy 等语言的 Class 文件)也同样能享受到编译器优化措施所带来的性能红利. 但是, 如果把 "优化" 的定义放宽, 把对开发阶段的优化也计算进来的话, Javac 确实是做了许多针对 Java 语言编码过程的优化措施来降低程序员的编码复杂度, 提高编码效率. 相当多新生的 Java 语法特性, 都是靠编译器的 "语法糖" 来实现, 而不是依赖字节码或者 Java 虚拟机的底层改进来支持. 可以这样认为, '),a("mark",[a("strong",[s._v("Java 中即时编译器在运行期的优化过程, 支撑了程序执行效率的不断提升; 而前端编译器在编译期的优化过程, 则是支撑着程序员的编码效率和语言使用者的幸福感的提高")])]),s._v(".")]),s._v(" "),a("h4",{attrs:{id:"javac编译器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javac编译器"}},[s._v("#")]),s._v(" Javac编译器")]),s._v(" "),a("p",[s._v("分析源码是了解一项技术的实现内幕最彻底的手段, Javac 编译器不像 HotSpot 虚拟机那样使用 C++ 语言(包含少量 C 语言)实现, 它本身就是一个"),a("strong",[s._v("由 Java 语言编写的程序")]),s._v(", 这为了解它的编译过程带来了很大的便利.")]),s._v(" "),a("h5",{attrs:{id:"_1-javac的源码与调试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-javac的源码与调试"}},[s._v("#")]),s._v(" 1.Javac的源码与调试")]),s._v(" "),a("p",[s._v("在 JDK 6 以前, Javac 并不属于标准 Java SE API 的一部分, 它实现代码单独存放在 tools.jar 中, 要在程序中使用的话就必须把这个库放到类路径上. 在 JDK 6 发布时通过了 JSR 199 编译器 API 的提案, 使得 Javac 编译器的实现代码晋升成为标准 Java 类库之一, 它的源码就改为放在 "),a("code",[s._v("JDK_SRC_HOME/langtools/src/share/classes/com/sun/tools/javac")]),s._v("​ 中. 到了 JDK 9 时, 整个 JDK 所有的 Java 类库都采用"),a("strong",[s._v("模块化")]),s._v("进行重构划分, Javac 编译器就被挪到了 jdk.compiler 模块(路径为: "),a("code",[s._v("JDK_SRC_HOME/src/jdk.compiler/share/classes/com/sun/tools/javac")]),s._v("​)里面. 虽然程序代码的内容基本没有变化, 但由于本节的主题是源码解析, 不可避免地会涉及大量的路径和包名, 这就要选定 JDK 版本来讨论了, 本次将会以 "),a("strong",[s._v("JDK 9 之前的代码结构")]),s._v("来进行讲解.")]),s._v(" "),a("p",[s._v("Javac 编译器除了 JDK 自身的标准类库外, 就只引用了 "),a("code",[s._v("JDK_SRC_HOME/langtools/src/share/classes/com/sun/*")]),s._v('​ 里面的代码, 所以代码编译环境建立时基本无须处理依赖关系, 相当简单便捷. 以 Eclipse IDE 作为开发工具为例, 先建立一个名为 "Compiler_javac" 的 Java 工程, 然后把 '),a("code",[s._v("JDK_SRC_HOME/langtools/src/share/classes/com/sun/*")]),s._v("​ 目录下的源文件全部复制到工程的源码目录中, 如图 10-1 所示.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/Image00189-20240302133505-1mrlexk.jpg",alt:"",title:"图10-1　Eclipse 中的 Javac 工程"}})]),s._v(" "),a("p",[s._v('导入代码期间, 源码文件 "AnnotationProxyMaker.java" 可能会提示 "Access Restriction", 被 Eclipse 拒绝编译, 如图 10-2 所示.')]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/Image00190-20240302133505-kkh7emn.jpg",alt:"",title:"图10-2　AnnotationProxyMaker 被拒绝编译"}})]),s._v(" "),a("p",[s._v('这是由于 Eclipse 为了避免开发人员引用非标准 Java 类库可能导致的兼容性问题, 在 "JRE System Library" 设置中默认包含了一系列的代码访问规则(Access Rules), 如果代码中引用了这些访问规则所禁止引用的类, 就会提示这个错误. 可以通过添加一条允许访问 JAR 包中所有类的访问规则来解决该问题, 如图 10-3 所示.')]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/Image00191-20240302133505-j51t1uf.jpg",alt:"",title:"图10-3　设置访问规则"}})]),s._v(" "),a("p",[s._v('导入了 Javac 的源码后, 就可以运行 com.sun.tools.javac.Main 的 main() 方法来执行编译了, 可以使用的参数与命令行中使用的 Javac 命令没有任何区别, 编译的文件与参数在 Eclipse 的 "Debug Configurations" 面板中的 "Arguments" 页签中指定.')]),s._v(" "),a("p",[s._v('《Java 虚拟机规范》中严格定义了 Class 文件格式的各种细节, 可是对如何把 Java 源码编译为 Class 文件却描述得相当宽松. 规范里尽管有专门的一章名为 "Compiling for the Java Virtual Machine", 但这章也仅仅是以举例的形式来介绍怎样的 Java 代码应该被转换为怎样的字节码, 并没有使用编译原理中常用的描述工具(如文法, 生成式等)来对 Java 源码编译过程加以约束. 这是给了 Java 前端编译器较大的实现灵活性, 但也导致 '),a("strong",[s._v("Class 文件编译过程在某种程度上是与具体的 JDK 或编译器实现相关的")]),s._v(", 譬如在一些极端情况下, 可能会出现某些代码在 Javac 编译器可以编译, 但是 ECJ 编译器就不可以编译的问题(反过来也有可能, 后文中将会给出一些这样的例子).")]),s._v(" "),a("p",[s._v("从 Javac 代码的总体结构来看, "),a("strong",[s._v("编译过程大致可以分为 1 个准备过程和 3 个处理过程")]),s._v(", 它们分别如下所示.")]),s._v(" "),a("p",[s._v("(1) "),a("strong",[s._v("准备过程")]),s._v(": 初始化插入式注解处理器.")]),s._v(" "),a("p",[s._v("(2) "),a("strong",[s._v("解析与填充符号表过程")]),s._v(", 包括:")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("词法, 语法分析")]),s._v(". 将源代码的字符流转变为标记集合, 构造出抽象语法树.")]),s._v(" "),a("li",[a("strong",[s._v("填充符号表")]),s._v(". 产生符号地址和符号信息.")])]),s._v(" "),a("p",[s._v("(3) "),a("strong",[s._v("插入式注解处理器的注解处理过程")]),s._v(": 插入式注解处理器的执行阶段, 本章的实战部分会设计一个插入式注解处理器来影响 Javac 的编译行为.")]),s._v(" "),a("p",[s._v("(4) "),a("strong",[s._v("分析与字节码生成过程")]),s._v(", 包括:")]),s._v(" "),a("ul",[a("li",[s._v("标注检查. 对语法的静态信息进行检查.")]),s._v(" "),a("li",[a("strong",[s._v("数据流及控制流分析")]),s._v(". 对程序动态运行过程进行检查.")]),s._v(" "),a("li",[a("strong",[s._v("解语法糖")]),s._v(". 将简化代码编写的语法糖还原为原有的形式.")]),s._v(" "),a("li",[a("strong",[s._v("字节码生成")]),s._v(". 将前面各个步骤所生成的信息转化成字节码.")])]),s._v(" "),a("p",[s._v("上述 3 个处理过程里, 执行插入式注解时又可能会产生新的符号, "),a("strong",[s._v("如果有新的符号产生, 就必须转回到之前的解析")]),s._v(", 填充符号表的过程中重新处理这些新符号, 从总体来看, 三者之间的关系与交互顺序如图 10-4 所示. 因此, Javac 编译器的"),a("strong",[s._v("编译过程")]),s._v("大致可分为 3 个步骤.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/Image00192-20240302133505-ya1nv52.jpg",alt:"",title:"图10-4　Javac 的编译过程"}})]),s._v(" "),a("p",[s._v("可以把上述处理过程对应到代码中, Javac 编译动作的入口是 com.sun.tools.javac.main."),a("strong",[s._v("JavaCompiler")]),s._v(" 类, 上述 3 个过程的代码逻辑集中在这个类的 compile() 和 compile2() 方法里, 其中主体代码如图 10-5 所示, 整个编译过程主要的处理由图中标注的 8 个方法来完成.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/Image00193-20240302133505-4pu79e0.jpg",alt:"",title:"图10-5　Javac 编译过程的主体代码"}})]),s._v(" "),a("p",[s._v("接下来, 将对照 Javac 的源代码, 逐项讲解上述过程. 下面就介绍的是"),a("mark",[a("strong",[s._v("进行 Java 编译到生成 class 文件整个流程会发生什么")])]),s._v(".")]),s._v(" "),a("h5",{attrs:{id:"_2-解析与填充符号表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-解析与填充符号表"}},[s._v("#")]),s._v(" 2.解析与填充符号表")]),s._v(" "),a("p",[s._v("解析过程由图 10-5 中的 parseFiles() 方法(图 10-5 中的过程 1.1)来完成, "),a("strong",[s._v("解析过程包括了经典程序编译原理中的词法分析和语法分析两个步骤")]),s._v(".")]),s._v(" "),a("h6",{attrs:{id:"_1-词法和语法分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-词法和语法分析"}},[s._v("#")]),s._v(" (1)词法和语法分析")]),s._v(" "),a("p",[a("strong",[s._v("词法分析是将源代码的字符流转变为标记(Token)集合的过程")]),s._v(', 单个字符是程序编写时的最小元素, 但标记才是编译时的最小元素. 关键字, 变量名, 字面量, 运算符都可以作为标记, 如 "'),a("code",[s._v("int a = b + 2")]),s._v('​" 这句代码中就包含了 6 个标记, 分别是 int, a, =, b, +, 2, 虽然关键字 int 由 3 个字符构成, 但是它只是一个独立的标记, 不可以再拆分. 在 Javac 的源码中, 词法分析过程由 '),a("code",[s._v("com.sun.tools.javac.parser.Scanner")]),s._v("​ 类来实现.")]),s._v(" "),a("p",[a("strong",[s._v("语法分析是根据标记序列构造抽象语法树的过程")]),s._v(", 抽象语法树(Abstract Syntax Tree, AST)是一种用来描述程序代码语法结构的树形表示方式, 抽象语法树的每一个节点都代表着程序代码中的一个语法结构(Syntax Construct), 例如包, 类型, 修饰符, 运算符, 接口, 返回值甚至连代码注释等都可以是一种特定的语法结构.")]),s._v(" "),a("p",[s._v("图 10-6 是 Eclipse AST View 插件分析出来的某段代码的抽象语法树视图. 在 Javac 的源码中, 语法分析过程由 com.sun.tools.javac.parser."),a("strong",[s._v("Parser")]),s._v(" 类实现, 这个阶段产出的抽象语法树是以 com.sun.tools.javac.tree."),a("strong",[s._v("JCTree")]),s._v(" 类表示的.")]),s._v(" "),a("p",[s._v("经过词法和语法分析生成语法树以后, 编译器就不会再对源码字符流进行操作了, 后续的操作都建立在"),a("strong",[s._v("抽象语法树")]),s._v("之上.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/Image00194-20240302133505-as0ephs.jpg",alt:"",title:"图10-6　抽象语法树结构视图"}})]),s._v(" "),a("h6",{attrs:{id:"_2-填充符号表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-填充符号表"}},[s._v("#")]),s._v(" (2)填充符号表")]),s._v(" "),a("p",[s._v("完成了语法分析和词法分析之后, 下一个阶段是"),a("strong",[s._v("对符号表进行填充的过程")]),s._v(", 也就是图 10-5 中 "),a("strong",[s._v("enterTrees()")]),s._v("  方法(图 10-5 中注释的过程 1.2)要做的事情. "),a("strong",[s._v("符号表(Symbol Table)是由一组符号地址和符号信息构成的数据结构, 可以把它类比想象成哈希表中键值对的存储形式(实际上符号表不一定是哈希表实现, 可以是有序符号表, 树状符号表, 栈结构符号表等各种形式)")]),s._v(" . 符号表中所登记的信息在编译的不同阶段都要被用到. 譬如在语义分析的过程中, 符号表所登记的内容将用于语义检查(如检查一个名字的使用和原先的声明是否一致)和产生中间代码, 在目标代码生成阶段, 当对符号名进行地址分配时, 符号表是地址分配的直接依据.")]),s._v(" "),a("p",[s._v("在 Javac 源代码中, 填充符号表的过程由 "),a("code",[s._v("com.sun.tools.javac.comp.Enter")]),s._v("​ 类实现, 该过程的产出物是一个待处理列表, 其中包含了每一个编译单元的抽象语法树的顶级节点, 以及 packageinfo.java(如果存在的话)的顶级节点.")]),s._v(" "),a("h5",{attrs:{id:"_3-注解处理器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-注解处理器"}},[s._v("#")]),s._v(" 3.注解处理器")]),s._v(" "),a("p",[s._v("JDK 5 之后, Java 语言提供了对"),a("strong",[s._v("注解")]),s._v('(Annotations)的支持, 注解在设计上原本是与普通的 Java 代码一样, 都只会在程序运行期间发挥作用的. 但在 JDK 6 中又提出并通过了 JSR-269 提案, 该提案设计了一组被称为 "插入式注解处理器" 的标准 API, 可以提前至编译期对代码中的特定注解进行处理, 从而影响到前端编译器的工作过程. '),a("strong",[s._v("可以把插入式注解处理器看作是一组编译器的插件, 当这些插件工作时, 允许读取, 修改, 添加抽象语法树中的任意元素")]),s._v(". 如果这些插件在处理注解期间对语法树进行过修改, 编译器将回到解析及填充符号表的过程重新处理, 直到所有插入式注解处理器都没有再对语法树进行修改为止, 每一次循环过程称为一个轮次(Round), 这也就对应着图 10-4 的那个回环过程.")]),s._v(" "),a("p",[a("strong",[s._v("有了编译器注解处理的标准 API 后, 程序员的代码才有可能干涉编译器的行为, 由于语法树中的任意元素, 甚至包括代码注释都可以在插件中被访问到, 所以通过插入式注解处理器实现的插件在功能上有很大的发挥空间. 只要有足够的创意, 程序员能使用插入式注解处理器来实现许多原本只能在编码中由人工完成的事情")]),s._v(". 譬如 Java 著名的编码效率工具 Lombok, 它可以"),a("strong",[s._v("通过注解来实现自动产生 getter/setter 方法, 进行空置检查, 生成受查异常表, 产生 equals() 和 hashCode() 方法")]),s._v(", 等等, 帮助开发人员消除 Java 的冗长代码, 这些都是依赖插入式注解处理器来实现的, 本章最后会设计一个如何使用插入式注解处理器的简单实战.")]),s._v(" "),a("p",[s._v("在 Javac 源码中, 插入式注解处理器的初始化过程是在 initPorcessAnnotations() 方法中完成的, 而它的执行过程则是在 processAnnotations() 方法中完成. 这个方法会判断是否还有新的注解处理器需要执行, 如果有的话, 通过 com.sun.tools.javac.processing.JavacProcessingEnvironment 类的 doProcessing() 方法来生成一个新的 JavaCompiler 对象, 对编译的后续步骤进行处理.")]),s._v(" "),a("h5",{attrs:{id:"_4-语义分析与字节码生成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-语义分析与字节码生成"}},[s._v("#")]),s._v(" 4.语义分析与字节码生成")]),s._v(" "),a("p",[s._v("经过语法分析之后, 编译器获得了程序代码的抽象语法树表示, 抽象语法树能够表示一个结构正确的源程序, 但"),a("strong",[s._v("无法保证源程序的语义是符合逻辑的")]),s._v(". 而"),a("strong",[s._v("语义分析的主要任务则是对结构上正确的源程序进行上下文相关性质的检查")]),s._v(", 譬如进行类型检查, 控制流检查, 数据流检查, 等等. 举个简单的例子, 假设有如下 3 个变量定义语句:")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("后续可能出现的赋值运算:")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" d "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" d "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" d "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("后续代码中如果出现了如上 3 种赋值运算的话, 那它们都能构成结构正确的抽象语法树, 但是只有第一种的写法在语义上是没有错误的, 能够通过检查和编译. 其余两种在 Java 语言中是不合逻辑的, 无法编译(是否合乎语义逻辑必须限定在具体的语言与具体的上下文环境之中才有意义. 如在 C 语言中, a, b, c 的上下文定义不变, 第二, 三种写法都是可以被正确编译的). 大家编码时经常能"),a("strong",[s._v("在 IDE 中看到由红线标注的错误提示, 其中绝大部分都是来源于语义分析阶段的检查结果")]),s._v(".")]),s._v(" "),a("h6",{attrs:{id:"_1-标注检查"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-标注检查"}},[s._v("#")]),s._v(" (1)标注检查")]),s._v(" "),a("p",[s._v("Javac 在编译过程中, 语义分析过程可分为"),a("strong",[s._v("标注检查和数据及控制流分析")]),s._v("两个步骤, 分别由图 10-5 的 attribute() 和 flow() 方法(分别对应图 10-5 中的过程 3.1 和过程 3.2)完成.")]),s._v(" "),a("p",[a("strong",[s._v("标注检查步骤要检查的内容包括诸如变量使用前是否已被声明, 变量与赋值之间的数据类型是否能够匹配")]),s._v(", 等等, 刚才 3 个变量定义的例子就属于标注检查的处理范畴. 在标注检查中, 还会顺便进行一个称为常量折叠(Constant Folding)的代码优化, 这是 Javac 编译器会对源代码做的极少量优化措施之一(代码优化几乎都在即时编译器中进行). 如果在 Java 代码中写下如下所示的变量定义:")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/Image00195-20240302133505-rch85ey.jpg",alt:"",title:"图10-7　常量折叠"}})]),s._v(" "),a("div",{staticClass:"language-Java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v('则在抽象语法树上仍然能看到字面量 "1", "2" 和操作符 "+" 号, 但是在经过常量折叠优化之后, 它们将会被'),a("strong",[s._v("折叠")]),s._v('为字面量 "3", 如图 10-7 所示, 这个插入式表达式(Infix Expression)的值已经在语法树上标注出来了(ConstantExpressionValue: 3). 由于编译期间进行了常量折叠, 所以在代码里面定义 "a = 1 + 2" 比起直接定义 "a = 3" 来, 并不会增加程序运行期哪怕仅仅一个处理器时钟周期的处理工作量.')]),s._v(" "),a("p",[s._v("标注检查步骤在 Javac 源码中的实现类是 com.sun.tools.javac.comp.Attr 类和 com.sun.tools.javac.comp.Check 类.")]),s._v(" "),a("h6",{attrs:{id:"_2-数据及控制流分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-数据及控制流分析"}},[s._v("#")]),s._v(" (2)数据及控制流分析")]),s._v(" "),a("p",[a("strong",[s._v("数据流分析和控制流分析是对程序上下文逻辑更进一步的验证, 它可以检查出诸如程序局部变量在使用前是否有赋值, 方法的每条路径是否都有返回值, 是否所有的受查异常都被正确处理了等问题")]),s._v(". 编译时期的数据及控制流分析与类加载时的数据及控制流分析的目的基本上可以看作是一致的, 但校验范围会有所区别, 有一些校验项只有在编译期或运行期才能进行. 下面举一个关于 final 修饰符的数据及控制流分析的例子, 见代码清单 10-1 所示.")]),s._v(" "),a("blockquote",[a("p",[s._v("代码清单10-1 final语义校验示例")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 方法一带有 final 修饰")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// do something")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 方法二没有 final 修饰")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// do something")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("在这两个 foo() 方法中, 一个方法的参数和局部变量定义使用了 final 修饰符, 另外一个则没有, 在代码编写时程序肯定会受到 final 修饰符的影响, 不能再改变 arg 和 var 变量的值, 但是如果观察这两段代码编译出来的字节码, 会发现它们是没有任何一点区别的, 每条指令, 甚至每个字节都一模一样. 通过第 6 章对 Class 文件结构的讲解已经知道, 局部变量与类的字段(实例变量, 类变量)的存储是有显著差别的, 局部变量在常量池中并没有 CONSTANT_Fieldref_info 的符号引用, 自然就不可能存储有访问标志(access_flags)的信息, 甚至可能连变量名称都不一定会被保留下来(这取决于编译时的编译器的参数选项), 自然在 Class 文件中就不可能知道一个局部变量是不是被声明为 final 了. 因此, "),a("strong",[s._v("可以肯定地推断出把局部变量声明为 final, 对运行期是完全没有影响的")]),s._v(", 变量的不变性仅仅由 Javac 编译器在编译期间来保障, 这就是一个只能在编译期而不能在运行期中检查的例子. 在 Javac 的源码中, 数据及控制流分析的入口是图 10-5 中的 flow() 方法(图 10-5 中的过程 3.2), 具体操作由 com.sun.tools.javac.comp.Flow 类来完成.")]),s._v(" "),a("h6",{attrs:{id:"_3-解语法糖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-解语法糖"}},[s._v("#")]),s._v(" (3)解语法糖")]),s._v(" "),a("p",[a("strong",[s._v("语法糖")]),s._v("(Syntactic Sugar) 指的是在计算机语言中添加的某种语法, 这种语法对语言的编译结果和功能并没有实际影响, 但是却能"),a("strong",[s._v("更方便程序员使用该语言")]),s._v(". 通常来说使用语法糖能够减少代码量, 增加程序的可读性, 从而减少程序代码出错的机会.")]),s._v(" "),a("p",[s._v("Java 中最常见的语法糖包括了前面提到过的泛型(其他语言中泛型并不一定都是语法糖实现, 如 "),a("code",[s._v("C#")]),s._v("​ 的泛型就是直接由 CLR 支持的), 变长参数, 自动装箱拆箱, 等等, "),a("mark",[a("strong",[s._v("Java 虚拟机运行时并不直接支持这些语法, 它们在编译阶段被还原回原始的基础语法结构, 这个过程就称为解语法糖")])]),s._v(". Java 的这些语法糖是如何实现的, 被分解后会是什么样子, 都将在(Java语法糖)中详细讲述.")]),s._v(" "),a("p",[s._v("在 Javac 的源码中, 解语法糖的过程由 "),a("strong",[s._v("desugar()")]),s._v("  方法触发, 在 com.sun.tools.javac.comp.TransTypes 类和 com.sun.tools.javac.comp.Lower 类中完成.")]),s._v(" "),a("h6",{attrs:{id:"_4-字节码生成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-字节码生成"}},[s._v("#")]),s._v(" (4)字节码生成")]),s._v(" "),a("p",[s._v("字节码生成是 Javac 编译过程的最后一个阶段, 在 Javac 源码里面由 com.sun.tools.javac.jvm."),a("strong",[s._v("Gen")]),s._v(" 类来完成. "),a("strong",[s._v("字节码生成阶段不仅仅是把前面各个步骤所生成的信息(语法树, 符号表)转化成字节码指令写到磁盘中, 编译器还进行了少量的代码添加和转换工作")]),s._v(".")]),s._v(" "),a("p",[s._v("例如前文多次登场的实例构造器 "),a("code",[s._v("<init>()")]),s._v("​ 方法和类构造器 "),a("code",[s._v("<clinit>()")]),s._v("​ 方法就是在这个阶段被"),a("strong",[s._v("添加到语法树")]),s._v("之中的. 请注意这里的实例构造器并不等同于默认构造函数, 如果用户代码中没有提供任何构造函数, 那编译器将会"),a("strong",[s._v("添加一个没有参数的, 可访问性")]),s._v("("),a("code",[s._v("public, protected, private 或 <package>")]),s._v("​)与当前类型一致的"),a("strong",[s._v("默认构造函数")]),s._v(", 这个工作在填充符号表阶段中就已经完成. "),a("code",[s._v("<init>()")]),s._v("​ 和 "),a("code",[s._v("<clinit>()")]),s._v('​ 这两个构造器的产生实际上是一种代码收敛的过程, 编译器会把语句块(对于实例构造器而言是 "'),a("code",[s._v("{}")]),s._v('​" 块, 对于类构造器而言是 "'),a("code",[s._v("static{}")]),s._v('​" 块), 变量初始化(实例变量和类变量), 调用父类的实例构造器(仅仅是实例构造器, '),a("code",[s._v("<clinit>()")]),s._v("​ 方法中无须调用父类的 "),a("code",[s._v("<clinit>()")]),s._v("​ 方法, Java 虚拟机会自动保证父类构造器的正确执行, 但在 "),a("code",[s._v("<clinit>()")]),s._v("​ 方法中经常会生成调用 java.lang.Object 的 "),a("code",[s._v("<init>()")]),s._v("​ 方法的代码)等操作收敛到 "),a("code",[s._v("<init>()")]),s._v("​ 和 "),a("code",[s._v("<clinit>()")]),s._v("​ 方法之中, 并且保证无论源码中出现的顺序如何, 都一定是按先执行父类的实例构造器, 然后初始化变量, 最后执行语句块的顺序进行, 上面所述的动作由 "),a("code",[s._v("Gen::normalizeDefs()")]),s._v("​ 方法来实现. 除了生成构造器以外, 还有其他的一些代码替换工作用于优化程序某些逻辑的实现方式, 如把字符串的加操作替换为 StringBuffer 或 StringBuilder(取决于目标代码的版本是否大于或等于 JDK 5)的 append() 操作, 等等.")]),s._v(" "),a("p",[s._v("完成了对语法树的遍历和调整之后, 就会把填充了所有所需信息的符号表交到 com.sun.tools.javac.jvm.ClassWriter 类手上, 由这个类的 "),a("strong",[s._v("writeClass() 方法输出字节码, 生成最终的 Class 文件, 到此整个编译过程宣告结束")]),s._v(".")]),s._v(" "),a("h4",{attrs:{id:"java语法糖的味道"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java语法糖的味道"}},[s._v("#")]),s._v(" Java语法糖的味道")]),s._v(" "),a("p",[s._v("几乎所有的编程语言都或多或少提供过一些语法糖来方便程序员的代码开发, 这些语法糖虽然不会提供实质性的功能改进, 但是它们或能"),a("strong",[s._v("提高效率, 或能提升语法的严谨性, 或能减少编码出错的机会")]),s._v(". 现在也有一种观点认为语法糖并不一定都是有益的, 大量添加和使用含糖的语法, 容易让程序员产生依赖, 无法看清语法糖的糖衣背后, 程序代码的真实面目. 语法糖是 javac 编译器提供的.")]),s._v(" "),a("p",[s._v("总而言之, "),a("strong",[s._v('语法糖可以看作是前端编译器实现的一些 "小把戏", 这些 "小把戏" 可能会使效率得到 "大提升"')]),s._v(' , 但也应该去了解这些 "小把戏" 背后的真实面貌, 那样才能利用好它们, 而不是被它们所迷惑.')]),s._v(" "),a("h5",{attrs:{id:"_1-泛型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-泛型"}},[s._v("#")]),s._v(" 1.泛型")]),s._v(" "),a("p",[s._v("泛型的本质是"),a("strong",[s._v("参数化类型")]),s._v("(Parameterized Type)或者"),a("strong",[s._v("参数化多态")]),s._v("(Parametric Polymorphism)的应用, 即可以将操作的数据类型指定为方法签名中的一种特殊参数, 这种参数类型能够用在类, 接口和方法的创建中, 分别构成"),a("strong",[s._v("泛型类, 泛型接口和泛型方法")]),s._v(". 泛型让程序员能够针对泛化的数据类型编写相同的算法, 这极大地增强了编程语言的类型系统及抽象能力.")]),s._v(" "),a("h6",{attrs:{id:"_1-java与c-的泛型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-java与c-的泛型"}},[s._v("#")]),s._v(" (1)Java与C#的泛型")]),s._v(" "),a("p",[s._v('Java 选择的泛型实现方式叫作 "'),a("strong",[s._v("类型擦除式泛型")]),s._v('" (Type Erasure Generics), '),a("strong",[s._v("它只在程序源码中存在, 在编译后的字节码文件中, 全部泛型都被替换为原来的裸类型(Raw Type, 稍后会讲解裸类型具体是什么)了, 并且在相应的地方插入了强制转型代码")]),s._v(", 因此对于"),a("strong",[s._v("运行期")]),s._v("的 Java 语言来说, "),a("code",[s._v("ArrayList<int>")]),s._v("​ 与 "),a("code",[s._v("ArrayList<String>")]),s._v('​ 其实是同一个类型, 由此可以想象 "类型擦除" 这个名字的含义和来源, 这也是为什么会把 Java 泛型安排在语法糖里介绍的原因.')]),s._v(" "),a("p",[s._v("Java 的泛型确实在实际使用中会有一些限制, 如果读者是一名 C# 开发人员, 可能很难想象代码清单 10-2 中的 Java 代码都是不合法的.")]),s._v(" "),a("blockquote",[a("p",[s._v("代码清单10-2 Java中不支持的泛型用法")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TypeErasureGenerics")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("E")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("doSomething")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("item "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("instanceof")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("E")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 不合法, 无法对泛型进行实例判断")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("E")]),s._v(" newItem "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("E")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 不合法, 无法使用泛型创建对象")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("E")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" itemArray "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("E")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 不合法, 无法使用泛型创建数组")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("上面这些是 Java 泛型在编码阶段产生的不良影响, 如果说这种使用层次上的差别还可以通过多写几行代码, 方法中多加一两个类型参数来解决的话, 性能上的差距则是难以用编码弥补的. "),a("code",[s._v("C#2.0")]),s._v("​ 引入了泛型之后, 带来的显著优势之一便是对比起 Java 在执行性能上的提高, 因为在使用平台提供的容器类型(如 "),a("code",[s._v("List<T>, Dictionary<TKey, TValue>")]),s._v("​)时, 无须像 Java 里那样不厌其烦地拆箱和装箱, 如果在 Java 中要避免这种损失, 就必须构造一个与数据类型相关的容器类(譬如 IntFloatHashMap 这样的容器). 显然, 这除了引入更多代码造成复杂度提高, 复用性降低之外, 更是丧失了泛型本身的存在价值.")]),s._v(" "),a("p",[s._v("Java 的类型擦除式泛型无论在使用效果上还是运行效率上, 几乎是全面落后于 "),a("code",[s._v("C#")]),s._v("​ 的具现化式泛型, 而它的唯一优势是在于实现这种泛型的影响范围上: 擦除式泛型的实现几乎只需要在 Javac 编译器上做出改进即可, 不需要改动字节码, 不需要改动 Java 虚拟机, 也保证了以前没有使用泛型的库可以直接运行在 Java 5.0 之上. 但这种听起来节省工作量甚至可以说是有偷工减料嫌疑的优势就显得非常短视, 真的能在当年 Java 实现泛型的利弊权衡中胜出吗? 答案的确是它胜出了, 但必须在那时的泛型历史背景中去考虑不同实现方式带来的代价.")]),s._v(" "),a("h6",{attrs:{id:"_2-泛型的历史背景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-泛型的历史背景"}},[s._v("#")]),s._v(" (2)泛型的历史背景")]),s._v(" "),a("p",[s._v("泛型思想早在 C++ 语言的模板(Template)功能中就开始生根发芽, 而在 Java 中加入泛型的首次尝试是出现在 1996 年. Martin Odersky(后来 Scala 语言的缔造者)当时是德国卡尔斯鲁厄大学编程理论的教授, 他想设计一门能够支持函数式编程的程序语言, 又不想从头把编程语言的所有功能都再做一遍, 所以就注意到了刚刚发布一年的 Java, 并在它上面实现了函数式编程的 3 大特性: 泛型, 高阶函数和模式匹配, 形成了 Scala 语言的前身 Pizza 语言.")]),s._v(" "),a("p",[s._v("举个例子, 在没有泛型的时代, 由于 Java 中的数组是支持协变(Covariant)的, 对应的集合类也可以存入不同类型的元素, 类似于代码清单 10-3 这样的代码尽管不提倡, 但是完全可以正常编译成 Class 文件.")]),s._v(" "),a("blockquote",[a("p",[s._v("代码清单10-3 以下代码可正常编译为Class")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" array "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\narray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("                     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 编译期不会有问题, 运行时会报错")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArrayList")]),s._v(" things "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nthings"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 编译, 运行时都不会报错")]),s._v("\nthings"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello world"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("为了保证这些编译出来的 Class 文件可以在 Java 5.0 引入泛型之后继续运行, 设计者面前大体上有两条路可以选择:")]),s._v(" "),a("p",[s._v("(1) "),a("strong",[s._v("需要泛型化的类型(主要是容器类型), 以前有的就保持不变, 然后平行地加一套泛型化版本的新类型")]),s._v(".")]),s._v(" "),a("p",[s._v("(2) "),a("strong",[s._v("直接把已有的类型泛型化, 即让所有需要泛型化的已有类型都原地泛型化, 不添加任何平行于已有类型的泛型版")]),s._v(".")]),s._v(" "),a("p",[s._v("在这个分叉路口, "),a("code",[s._v("C#")]),s._v("​ 走了第一条路, 添加了一组 System.Collections.Generic 的新容器, 以前的 System.Collections 以及 System.Collections.Specialized 容器类型继续存在. "),a("code",[s._v("C#")]),s._v("​ 的开发人员很快就接受了新的容器, 倒也没出现过什么不适应的问题, 唯一的不适大概是许多 "),a("code",[s._v(".NET")]),s._v("​ 自身的标准库已经把老容器类型当作方法的返回值或者参数使用, 这些方法至今还保持着原来的老样子.")]),s._v(" "),a("p",[s._v("但如果相同的选择出现在 Java 中就很可能不会是相同的结果了, 要知道当时 "),a("code",[s._v(".NET")]),s._v("​ 才问世两年, 而 Java 已经有快十年的历史了, 再加上各自流行程度的不同, 两者遗留代码的规模根本不在同一个数量级上. 而且更大的问题是 Java 并不是没有做过第一条路那样的技术决策, 在 JDK 1.2 时, 遗留代码规模尚小, Java 就引入过新的集合类, 并且保留了旧集合类不动. 这导致了直到现在标准类库中还有 Vector(老)和 ArrayList(新), 有 Hashtable(老)和 HashMap(新)等两套容器代码并存, 如果当时再摆弄出像 Vector(老), ArrayList(新), "),a("code",[s._v("Vector<T>")]),s._v("​(老但有泛型), "),a("code",[s._v("ArrayList<T>")]),s._v("​(新且有泛型)这样的容器集合, 可能叫骂声会比今天听到的更响更大.")]),s._v(" "),a("p",[s._v("到了这里, 相信读者已经能稍微理解为什么当时 Java 只能选择第二条路了. 下面就来看看当时做的类型擦除式泛型的实现时到底哪里偷懒了, 又带来了怎样的缺陷.")]),s._v(" "),a("h6",{attrs:{id:"_3-类型擦除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-类型擦除"}},[s._v("#")]),s._v(" (3)类型擦除")]),s._v(" "),a("p",[s._v("继续以 ArrayList 为例来介绍 Java 泛型的"),a("strong",[s._v("类型擦除具体是如何实现的")]),s._v(". 由于 Java 选择了第二条路, 直接"),a("strong",[s._v("把已有的类型泛型化")]),s._v(". 要让所有需要泛型化的已有类型, 譬如 ArrayList, 原地泛型化后变成了 "),a("code",[s._v("ArrayList<T>")]),s._v("​, 而且保证以前直接用 ArrayList 的代码在泛型新版本里必须还能继续用这同一个容器, 这就必须让所有泛型化的实例类型, 譬如 "),a("code",[s._v("ArrayList<Integer>, ArrayList<String>")]),s._v('​ 这些全部自动成为 ArrayList 的子类型才能可以, 否则类型转换就是不安全的. 由此就引出了 "裸类型"(Raw Type)的概念, '),a("strong",[s._v("裸类型应被视为所有该类型泛型化实例的共同父类型(Super Type)")]),s._v(" , 只有这样, 像代码清单 10-4 中的赋值才是被系统允许的从子类到父类的安全转型.")]),s._v(" "),a("blockquote",[a("p",[s._v("代码清单10-4 裸类型赋值")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" ilist "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" slist "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArrayList")]),s._v(" list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 裸类型")]),s._v("\nlist "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" ilist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nlist "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" slist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("接下来的问题是该"),a("strong",[s._v("如何实现裸类型")]),s._v(". 这里又有了两种选择: 一种是在运行期由 Java 虚拟机来自动地, 真实地构造出 "),a("code",[s._v("ArrayList<Integer>")]),s._v("​ 这样的类型, 并且自动实现从 "),a("code",[s._v("ArrayList<Integer>")]),s._v("​ 派生自 ArrayList 的继承关系来满足裸类型的定义; 另外一种是索性简单粗暴地直接在编译时把 "),a("code",[s._v("ArrayList<Integer>")]),s._v("​ 还原回 ArrayList, 只在元素访问, 修改时自动插入一些强制类型转换和检查指令, 这样看起来也是能满足需要, 这两个选择的最终结果大家已经都知道了. 代码清单 10-5 是一段简单的 Java 泛型例子, 可以看一下它"),a("strong",[s._v("编译后")]),s._v("的实际样子是怎样的.")]),s._v(" "),a("blockquote",[a("p",[s._v("代码清单10-5 泛型擦除前的例子")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Map")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" map "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HashMap")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"你好"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"how are you?"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"吃了没? "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"how are you?"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("把这段 Java 代码编译成 Class 文件, 然后再用字节码反编译工具进行反编译后, 将会发现"),a("strong",[s._v("泛型都不见了")]),s._v(", 程序又变回了 Java 泛型出现之前的写法, "),a("strong",[s._v("泛型类型都变回了裸类型")]),s._v(", 只在元素访问时插入了从 Object 到 String 的"),a("strong",[s._v("强制转型代码")]),s._v(", 如代码清单 10-6 所示.")]),s._v(" "),a("blockquote",[a("p",[s._v("代码清单10-6 泛型擦除后的例子")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Map")]),s._v(" map "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HashMap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"你好"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"how are you?"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"吃了没? "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 强制类型转换")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"how are you?"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("类型擦除带来的缺陷前面已经提到过一些, 为了系统性地讲述, 在此再举 3 个例子, 把前面与 "),a("code",[s._v("C#")]),s._v("​ 对比时简要提及的擦除式泛型的缺陷做更具体的说明.")]),s._v(" "),a("p",[s._v("首先, 使用擦除法实现泛型直接导致了对原始类型(Primitive Types)数据的支持又成了新的麻烦, 譬如将代码清单 10-2 稍微修改一下, 变成代码清单 10-7 这个样子.")]),s._v(" "),a("blockquote",[a("p",[s._v("代码清单10-7 原始类型的泛型(目前的Java不支持)")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" ilist "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" llist "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArrayList")]),s._v(" list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nlist "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" ilist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nlist "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" llist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("这种情况下, 一旦把泛型信息擦除后, 到要插入强制转型代码的地方就没办法往下做了, 因为不支持 int, long 与 Object 之间的强制转型. 当时 Java 给出的解决方案一如既往的简单粗暴: 既然没法转换那就索性"),a("strong",[s._v("别支持原生类型的泛型")]),s._v("了吧, 大家都用 "),a("code",[s._v("ArrayList<Integer>, ArrayList<Long>")]),s._v("​, 反正都做了自动的强制类型转换, 遇到原生类型时把装箱, 拆箱也自动做了得了. 这个决定后面导致了"),a("strong",[s._v("无数构造包装类和装箱, 拆箱的开销")]),s._v(", 成为 Java 泛型慢的重要原因, 也成为今天 Valhalla 项目要重点解决的问题之一.")]),s._v(" "),a("p",[s._v("第二, "),a("strong",[s._v("运行期无法取到泛型类型信息, 会让一些代码变得相当啰嗦")]),s._v(", 譬如代码清单 10-2 中罗列的几种 Java 不支持的泛型用法, 都是由于"),a("strong",[s._v("运行期 Java 虚拟机无法取得泛型类型而导致")]),s._v("的. 像代码清单 10-8 这样, 去写一个泛型版本的从 List 到数组的转换方法, 由于不能从 List 中取得参数化类型 T, 所以不得不从一个额外参数中再传入一个数组的组件类型进去, 实属无奈.")]),s._v(" "),a("blockquote",[a("p",[s._v("代码清单10-8 不得不加入的类型参数")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("convert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" componentType"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" array "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("newInstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("componentType"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("size")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("最后, 笔者认为通过擦除法来实现泛型, 还"),a("strong",[s._v("丧失了一些面向对象思想应有的优雅")]),s._v(", 带来了一些模棱两可的模糊状况, 例如代码清单 10-9 的例子.")]),s._v(" "),a("blockquote",[a("p",[s._v("代码清单10-9 当泛型遇见重载1")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("GenericTypes")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("method")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"invoke method(List<String> list)"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("method")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"invoke method(List<Integer> list)"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("思考一下上面这段代码是否正确, 能否编译执行? 这段代码是"),a("strong",[s._v("不能被编译")]),s._v("的, 因为参数 "),a("code",[s._v("List<Integer>")]),s._v("​ 和 "),a("code",[s._v("List<String>")]),s._v("​ "),a("mark",[a("strong",[s._v("编译之后都被擦除了, 变成了同一种的裸类型 List, 类型擦除导致这两个方法的特征签名变得一模一样, 所以无法编译通过")])]),s._v(". 初步看来, 无法重载的原因已经找到了, 但是真的就是如此吗? 其实这个例子中"),a("strong",[s._v("泛型擦除成相同的裸类型只是无法重载的其中一部分原因")]),s._v(", 请再接着看一看代码清单 10-10 中的内容.")]),s._v(" "),a("blockquote",[a("p",[s._v("代码清单10-10 当泛型遇见重载2(必须用JDK6的Javac才能编译成功)")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("GenericTypes")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("method")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"invoke method(List<String> list)"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("method")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"invoke method(List<Integer> list)"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("method")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("method")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[s._v("执行结果:")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v("invoke "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("method")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\ninvoke "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("method")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("代码清单 10-9 与代码清单 10-10 的差别, 是两个 method() 方法添加了不同的返回值, 由于这两个返回值的加入, 方法重载居然成功了, 即这段代码可以被编译和执行了. 这是对 Java 语言中返回值不参与重载选择的基本认知的挑战吗?")]),s._v(" "),a("p",[s._v("代码清单 10-10 中的重载当然不是根据返回值来确定的, 之所以这次能编译和执行成功, 是因为两个 method() 方法加入了不同的返回值后才能共存在一个 Class 文件之中. 前面介绍 Class 文件方法表(method_info)的数据结构时曾经提到过, "),a("strong",[s._v("方法重载要求方法具备不同的特征签名, 返回值并不包含在方法的特征签名中, 所以返回值不参与重载选择, 但是在 Class 文件格式之中, 只要描述符不是完全一致的两个方法就可以共存")]),s._v(". 也就是说两个方法如果有相同的名称和特征签名, 但返回值不同, 那它们也是可以合法地共存于一个 Class 文件中的.")]),s._v(" "),a("p",[s._v("由于 Java 泛型的引入, 各种场景(虚拟机解析, 反射等)下的方法调用都可能对原有的基础产生影响并带来新的需求, 如在泛型类中如何获取传入的参数化类型等. 所以 JCP 组织对《Java 虚拟机规范》做出了相应的修改, 引入了诸如 Signature, LocalVariableTypeTable 等新的属性用于解决伴随泛型而来的参数类型的识别问题, Signature 是其中最重要的一项属性, 它的作用就是存储一个方法在字节码层面的特征签名, 这个属性中保存的参数类型并不是原生类型, 而是包括了参数化类型的信息. 修改后的虚拟机规范要求所有能识别 49.0 以上版本的 Class 文件的虚拟机都要能正确地识别 Signature 参数.")]),s._v(" "),a("p",[s._v("从上面的例子中可以看到擦除法对实际编码带来的不良影响, 由于 "),a("code",[s._v("List<String>")]),s._v("​ 和 "),a("code",[s._v("List<Integer>")]),s._v("​ 擦除后是"),a("strong",[s._v("同一个类型")]),s._v(", 只能添加两个并不需要实际使用到的返回值才能完成重载, 这是一种毫无优雅和美感可言的解决方案, 并且存在一定语意上的混乱, 譬如上面脚注中提到的, 必须用 JDK 6 的 Javac 才能编译成功, 其他版本或者是 ECJ 编译器都有可能拒绝编译.")]),s._v(" "),a("p",[s._v("另外, 从 Signature 属性的出现还可以得出结论, 擦除法所谓的擦除, 仅仅是"),a("strong",[s._v("对方法的 Code 属性中的字节码进行擦除, 实际上元数据中还是保留了泛型信息")]),s._v(", 这也是在编码时能通过反射手段取得参数化类型的根本依据.")]),s._v(" "),a("h6",{attrs:{id:"_4-值类型与未来的泛型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-值类型与未来的泛型"}},[s._v("#")]),s._v(" (4)值类型与未来的泛型")]),s._v(" "),a("p",[s._v("在 2014 年, 刚好是 Java 泛型出现的十年之后, Oracle 建立了一个名为 "),a("strong",[s._v("Valhalla")]),s._v(" 的语言改进项目, 希望改进 Java 语言留下的各种缺陷(解决泛型的缺陷就是项目主要目标其中之一). 本节内容很可能在将来会发生变动, 请多加注意.")]),s._v(" "),a("p",[s._v("在 Valhalla 项目中规划了"),a("strong",[s._v("几种不同的新泛型实现方案")]),s._v(', 被称为 Model 1 到 Model 3, 在这些新的泛型设计中, 泛型类型有可能被具现化, 也有可能继续维持类型擦除以保持兼容(取决于采用哪种实现方案), 即使是继续采用类型擦除的方案, 泛型的参数化类型也可以选择不被完全地擦除掉, 而是相对完整地记录在 Class 文件中, 能够在运行期被使用, 也可以指定编译器默认要擦除哪些类型. 相对于使用不同方式实现泛型, 目前比较明确的是未来的 Java 应该会提供 "值类型" (Value Type)的语言层面的支持.')]),s._v(" "),a("p",[s._v("说起值类型, 这点也是 "),a("code",[s._v("C#")]),s._v("​ 用户攻讦 Java 语言的常用武器之一, "),a("code",[s._v("C#")]),s._v("​ 并没有 Java 意义上的原生数据类型, 在 "),a("code",[s._v("C#")]),s._v("​ 中使用的 int, bool, double 关键字其实是对应了一系列在 "),a("code",[s._v(".NET")]),s._v("​ 框架中预定义好的结构体(Struct), 如 Int32, Boolean, Double 等. 在 "),a("code",[s._v("C#")]),s._v("​ 中开发人员也可以定义自己值类型, 只要继承于 ValueType 类型即可, 而 ValueType 也是统一基类 Object 的子类, 所以并不会遇到 Java 那样 int 不自动装箱就无法转型为 Object 的尴尬.")]),s._v(" "),a("p",[s._v("值类型可以与引用类型一样, 具有构造函数, 方法或是属性字段, 等等, 而它与引用类型的区别在于它在赋值的时候通常是整体复制, 而不是像引用类型那样传递引用的. 更为关键的是, 值类型的实例很容易实现分配在方法的调用栈上的, 这意味着值类型会随着当前方法的退出而自动释放, 不会给垃圾收集子系统带来任何压力.")]),s._v(" "),a("p",[s._v('在 Valhalla 项目中, Java 的值类型方案被称为 "内联类型", 计划通过一个新的关键字 inline 来定义, 字节码层面也有专门与原生类型对应的以 Q 开头的新的操作码(譬如 iload 对应 qload)来支撑. 现在的预览版可以通过一个特制的解释器来保证这些未来可能加入的字节码指令能够被执行, 要即时编译的话, 现在只支持 C2 编译器. 即时编译器场景中是使用逃逸分析优化(见第 11 章)来处理内联类型的, 通过编码时标注以及内联类实例所具备的不可变性, 可以很好地解决逃逸分析面对传统引用类型时难以判断(没有足够的信息, 或者没有足够的时间做全程序分析)对象是否逃逸的问题.')]),s._v(" "),a("h5",{attrs:{id:"_2-自动装箱-拆箱与遍历循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-自动装箱-拆箱与遍历循环"}},[s._v("#")]),s._v(" 2.自动装箱,拆箱与遍历循环")]),s._v(" "),a("p",[s._v("就纯技术的角度而论, 自动装箱, 自动拆箱与遍历循环(for-each 循环)这些语法糖, 无论是实现复杂度上还是其中蕴含的思想上都不能和泛型相提并论, 两者涉及的难度和深度都有很大差距. 专门拿出一节来讲解它们只是因为这些是 Java 语言里面被使用最多的语法糖. 下面通过代码清单 10-11 和代码清单 10-12 中所示的代码来看看这些语法糖在编译后会发生什么样的变化.")]),s._v(" "),a("blockquote",[a("p",[s._v("代码清单10-11 自动装箱, 拆箱与遍历循环")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" list "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Arrays")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("asList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("blockquote",[a("p",[s._v("代码清单10-12 自动装箱, 拆箱与遍历循环编译之后")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),s._v(" list "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Arrays")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("asList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Iterator")]),s._v(" localIterator "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("iterator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" localIterator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("hasNext")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("localIterator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("intValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("代码清单 10-11 中一共包含了"),a("strong",[s._v("泛型, 自动装箱, 自动拆箱, 遍历循环与变长参数")]),s._v(" 5 种语法糖, 代码清单 10-12 则展示了它们在编译前后发生的变化. 泛型就不必说了, 自动装箱, 拆箱在编译之后被转化成了对应的"),a("strong",[s._v("包装和还原方法")]),s._v(", 如本例中的 Integer.valueOf() 与 Integer.intValue() 方法, 而遍历循环则是把代码还原成了"),a("strong",[s._v("迭代器")]),s._v("的实现, 这也是为何遍历循环需要被遍历的类实现 Iterable 接口的原因. 最后再看看变长参数, 它在调用的时候变成了一个数组类型的参数, 在变长参数出现之前, 程序员的确也就是使用数组来完成类似功能的.")]),s._v(" "),a("h5",{attrs:{id:"_3-条件编译"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-条件编译"}},[s._v("#")]),s._v(" 3.条件编译")]),s._v(" "),a("p",[s._v("许多程序设计语言都提供了条件编译的途径, 如 C, C++ 中使用预处理器指示符("),a("code",[s._v("#ifdef")]),s._v("​)来完成条件编译. C, C++ 的预处理器最初的任务是解决编译时的代码依赖关系(如极为常用的 "),a("code",[s._v("#include")]),s._v("​ 预处理命令), 而在 Java 语言之中并没有使用预处理器, 因为 Java 语言天然的编译方式(编译器并非一个个地编译 Java 文件, 而是"),a("strong",[s._v("将所有编译单元的语法树顶级节点输入到待处理列表后再进行编译")]),s._v(", 因此各个文件之间能够互相提供符号信息)就无须使用到预处理器. "),a("strong",[s._v("那 Java 语言是否有办法实现条件编译呢")]),s._v("?")]),s._v(" "),a("p",[s._v("Java 语言当然"),a("strong",[s._v("也可以进行条件编译")]),s._v(', 方法就是使用条件为常量的 if 语句. 如代码清单 10-14 所示, 该代码中的 if 语句不同于其他 Java 代码, 它在编译阶段就会被 "运行", 生成的字节码之中只包括分支为 true 的一条语句, 并不会包含 if 语句及另外一个分支的语句.')]),s._v(" "),a("blockquote",[a("p",[s._v("代码清单10-14 Java语言的条件编译示例")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"block 1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"block 2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("该代码编译后 Class 文件的反编译结果:")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"block 1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("strong",[s._v("只能使用条件为常量的 if 语句才能达到上述效果, 如果使用常量与其他带有条件判断能力的语句搭配, 则可能在控制流分析中提示错误, 被拒绝编译")]),s._v(", 如代码清单 10-15 所示的代码就会被编译器拒绝编译.")]),s._v(" "),a("blockquote",[a("p",[s._v("代码清单10-15 不能使用其他条件语句来完成条件编译")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 编译器将会提示“Unreachable code”")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[a("strong",[s._v("Java 语言中条件编译的实现, 也是 Java 语言的一颗语法糖, 根据布尔常量值的真假, 编译器将会把分支中不成立的代码块消除掉, 这一工作将在编译器解除语法糖阶段")]),s._v("(com.sun.tools.javac.comp.Lower 类中)完成. 由于这种条件编译的实现方式使用了 if 语句, 所以它必须遵循最基本的 Java 语法, 只能写在方法体内部, 因此它"),a("strong",[s._v("只能实现语句基本块(Block)级别的条件编译")]),s._v(", 而没有办法实现根据条件调整整个 Java 类的结构.")]),s._v(" "),a("p",[s._v("除了本节中介绍的泛型, 自动装箱, 自动拆箱, 遍历循环, 变长参数和条件编译之外, Java 语言还有不少其他的语法糖, 如内部类, 枚举类, 断言语句, 数值字面量, 对枚举和字符串的 switch 支持, try 语句中定义和关闭资源(这 3 个从 JDK 7 开始支持), Lambda 表达式(从 JDK 8 开始支持, Lambda 不能算是单纯的语法糖, 但在前端编译器中做了大量的转换工作), 等等, 读者可以通过跟踪 Javac 源码, 反编译 Class 文件等方式了解它们的本质实现, 囿于篇幅, 就不再一一介绍了.")]),s._v(" "),a("h4",{attrs:{id:"实战-插入式注解处理器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实战-插入式注解处理器"}},[s._v("#")]),s._v(" 实战:插入式注解处理器")]),s._v(" "),a("p",[s._v("Java 的编译优化部分在本书中并没有像前面两部分那样设置独立的, 整章篇幅的实战, 因为大家开发程序, 考虑的主要还是程序会如何运行, 较少会涉及针对程序编译的特殊需求. 也正因如此, 在 JDK 的编译子系统里面, 暴露给用户直接控制的功能相对很少, 除了第 11 章会介绍的虚拟机即时编译的若干相关参数以外, 就只有使用 JSR-296 中定义的插入式注解处理器 API 来对 Java 编译子系统的行为施加影响.")]),s._v(" "),a("p",[s._v("但是笔者丝毫不认为相对于前两部分介绍的内存管理子系统和字节码执行子系统, 编译子系统就不那么重要了. 一套编程语言中编译子系统的优劣, 很大程度上决定了程序运行性能的好坏和编码效率的高低, 尤其在 Java 语言中, 运行期即时编译与虚拟机执行子系统非常紧密地互相依赖, 配合运作(第 11 章将主要讲解这方面的内容). "),a("strong",[s._v("了解 JDK 如何编译和优化代码, 有助于写出适合 Java 虚拟机自优化的程序")]),s._v(". 话题说远了, 下面回到实战中来, 看看"),a("strong",[s._v("插入式注解处理器 API 能实现什么功能")]),s._v(".")]),s._v(" "),a("h5",{attrs:{id:"_1-实战目标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-实战目标"}},[s._v("#")]),s._v(" 1.实战目标")]),s._v(" "),a("p",[s._v("通过阅读 Javac 编译器的源码, 可以知道前端编译器在把 Java 程序源码编译为字节码的时候, 会对 Java 程序"),a("strong",[s._v("源码做各方面的检查校验")]),s._v('. 这些校验主要是以程序 "写得对不对" 为出发点, 虽然也会产生一些警告和提示类的信息, 但总体来讲还是较少去校验程序 "写得好不好". 有鉴于此, 业界出现了'),a("strong",[s._v('许多针对程序 "写得好不好" 的辅助校验工具')]),s._v(", 如 CheckStyle, FindBug, Klocwork 等. 这些代码校验工具有一些是基于 Java 的源码进行校验, 有一些是通过扫描字节码来完成, 在本节的实战中, 将会"),a("strong",[s._v("使用注解处理器 API 来编写一款拥有自己编码风格的校验工具: NameCheckProcessor")]),s._v(".")]),s._v(" "),a("p",[s._v("当然, 由于实战都是为了学习和演示技术原理, 而且篇幅所限, 不可能做出一款能媲美 CheckStyle 等工具的产品来, 所以 NameCheckProcessor 的目标也仅定为对 Java 程序命名进行检查. 根据《Java 语言规范》中 6.8 节的要求, Java 程序命名推荐(而不是强制)应当符合下列格式的书写规范.")]),s._v(" "),a("ul",[a("li",[s._v("类(或接口): 符合驼式命名法, 首字母大写.")]),s._v(" "),a("li",[s._v("方法: 符合驼式命名法, 首字母小写.")]),s._v(" "),a("li",[s._v("字段: (1) 类或实例变量. 符合驼式命名法, 首字母小写. (2) 常量. 要求全部由大写字母或下划线构成, 并且第一个字符不能是下划线.")])]),s._v(" "),a("p",[s._v("上文提到的驼式命名法(Camel Case Name), 正如它的名称所表示的那样, 是指混合使用大小写字母来分割构成变量或函数的名字, 犹如驼峰一般, 这是当前 Java 语言中主流的命名规范, "),a("strong",[s._v("实战目标就是为 Javac 编译器添加一个额外的功能, 在编译程序时检查程序名是否符合上述对类(或接口), 方法, 字段的命名要求")]),s._v(".")]),s._v(" "),a("h5",{attrs:{id:"_2-代码实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-代码实现"}},[s._v("#")]),s._v(" 2.代码实现")]),s._v(" "),a("p",[s._v("要通过注解处理器 API 实现一个编译器插件, 首先需要了解这组 API 的一些基本知识. 实现注解处理器的代码需要继承抽象类 javax.annotation.processing."),a("strong",[s._v("AbstractProcessor")]),s._v(', 这个抽象类中只有一个子类必须实现的抽象方法: "'),a("code",[s._v("process()")]),s._v('​", 它是 Javac 编译器在执行注解处理器代码时要调用的过程, 可以从这个方法的第一个参数 "annotations" 中获取到此注解处理器所要处理的注解集合, 从第二个参数 "roundEnv" 中访问到当前这个轮次(Round)中的抽象语法树节点, 每个语法树节点在这里都表示为一个 Element. 在 javax.lang.model.ElementKind 中定义了 18 类 Element, 已经包括了 Java 代码中可能出现的全部元素, 如: "包(PACKAGE), 枚举(ENUM), 类(CLASS), 注解(ANNOTATION_TYPE), 接口(INTERFACE), 枚举值(ENUM_CONSTANT), 字段(FIELD), 参数(PARAMETER), 本地变量(LOCAL_VARIABLE), 异常(EXCEPTION_PARAMETER), 方法(METHOD), 构造函数(CONSTRUCTOR), 静态语句块(STATIC_INIT, 即 '),a("code",[s._v("static{}")]),s._v("​ 块), 实例语句块(INSTANCE_INIT, 即 "),a("code",[s._v("{}")]),s._v('​ 块), 参数化类型(TYPE_PARAMETER, 泛型尖括号内的类型), 资源变量(RESOURCE_VARIABLE, try-resource 中定义的变量), 模块(MODULE)和未定义的其他语法树节点(OTHER)". 除了 process() 方法的传入参数之外, 还有一个很重要的实例变量 "processingEnv", 它是 AbstractProcessor 中的一个 protected 变量, 在注解处理器初始化的时候(init() 方法执行的时候)创建, 继承了 AbstractProcessor 的注解处理器代码可以直接访问它. 它代表了注解处理器框架提供的一个上下文环境, 要创建新的代码, 向编译器输出信息, 获取其他工具类等都需要用到这个实例变量.')]),s._v(" "),a("p",[s._v("注解处理器除了 process() 方法及其参数之外, 还有两个经常配合着使用的注解, 分别是:  "),a("strong",[s._v("@SupportedAnnotationTypes 和 @SupportedSourceVersion")]),s._v(', 前者代表了这个注解处理器对哪些注解感兴趣, 可以使用星号 "'),a("code",[s._v("*")]),s._v('​" 作为通配符代表对所有的注解都感兴趣, 后者指出这个注解处理器可以处理哪些版本的 Java 代码.')]),s._v(" "),a("p",[s._v("每一个注解处理器在运行时都是"),a("strong",[s._v("单例")]),s._v("的, 如果不需要改变或添加抽象语法树中的内容, process() 方法就可以返回一个值为 false 的布尔值, 通知编译器这个轮次中的代码未发生变化, 无须构造新的 JavaCompiler 实例, 在这次实战的注解处理器中只对程序命名进行检查, 不需要改变语法树的内容, 因此 process() 方法的返回值一律都是 false.")]),s._v(" "),a("p",[s._v("关于注解处理器的 API, 就简单介绍这些, 对这个领域有兴趣的读者可以阅读相关的帮助文档. 来看看注解处理器 NameCheckProcessor 的具体代码, 如代码清单 10-16 所示.")]),s._v(" "),a("blockquote",[a("p",[s._v("代码清单10-16 注解处理器NameCheckProcessor")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// 可以用"*"表示支持所有 Annotations')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@SupportedAnnotationTypes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"*"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 只支持 JDK 6的 Java 代码")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@SupportedSourceVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SourceVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("RELEASE_6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("NameCheckProcessor")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AbstractProcessor")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("NameChecker")]),s._v(" nameChecker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * 初始化名称检查插件\n     */")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ProcessingEnvironment")]),s._v(" processingEnv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("processingEnv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        nameChecker "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("NameChecker")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("processingEnv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * 对输入的语法树的各个节点进行名称检查\n     */")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("process")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Set")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TypeElement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" annotations"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RoundEnvironment")]),s._v(" roundEnv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("roundEnv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("processingOver")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Element")]),s._v(" element "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" roundEnv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getRootElements")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n                nameChecker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("checkNames")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("element"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br")])]),a("p",[s._v('从代码清单 10-16 中可以看到 NameCheckProcessor 能处理基于 JDK 6 的源码, 它不限于特定的注解, 对任何代码都 "感兴趣", 而在 process() 方法中是把当前轮次中的每一个 RootElement 传递到一个名为 NameChecker 的检查器中执行名称检查逻辑, NameChecker 的代码如代码清单 10-17 所示.')]),s._v(" "),a("blockquote",[a("p",[s._v("代码清单10-17 命名检查器NameChecker")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * 程序名称规范的编译器插件: <br>\n * 如果程序命名不合规范, 将会输出一个编译器的 WARNING 信息\n */")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("NameChecker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Messager")]),s._v(" messager"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("NameCheckScanner")]),s._v(" nameCheckScanner "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("NameCheckScanner")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("NameChecker")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ProcessingEnvironment")]),s._v(" processsingEnv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("messager "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" processsingEnv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getMessager")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * 对 Java 程序命名进行检查, 根据《Java 语言规范》第三版第6.8节的要求, Java 程序命名应当符合下列格式: \n     *\n     * <ul>\n     * <li> 类或接口: 符合驼式命名法, 首字母大写. \n     * <li> 方法: 符合驼式命名法, 首字母小写. \n     * <li> 字段: \n     * <ul>\n     * <li> 类, 实例变量: 符合驼式命名法, 首字母小写. \n     * <li> 常量: 要求全部大写. \n     * </ul>\n     * </ul>\n     */")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("checkNames")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Element")]),s._v(" element"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        nameCheckScanner"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("scan")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("element"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * 名称检查器实现类, 继承了 JDK 6中新提供的 ElementScanner6<br>\n     * 将会以 Visitor 模式访问抽象语法树中的元素\n     */")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("NameCheckScanner")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ElementScanner6")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n         * 此方法用于检查 Java 类\n         */")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("visitType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TypeElement")]),s._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Void")]),s._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("scan")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getTypeParameters")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("checkCamelCase")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("visitType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n         * 检查方法命名是否合法\n         */")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("visitExecutable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ExecutableElement")]),s._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Void")]),s._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getKind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("METHOD")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Name")]),s._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getSimpleName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("contentEquals")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getEnclosingElement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getSimpleName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n                    messager"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("WARNING")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"一个普通方法 “"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"”不应当与类名重复, 避免与构造函数产生混淆"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("checkCamelCase")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("visitExecutable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n         * 检查变量命名是否合法\n         */")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("visitVariable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("VariableElement")]),s._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Void")]),s._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果这个 Variable 是枚举或常量, 则按大写命名检查, 否则按照驼式命名法规则检查")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getKind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ENUM_CONSTANT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getConstantValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("heuristicallyConstant")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("checkAllCaps")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("checkCamelCase")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n         * 判断一个变量是否是常量\n         */")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("heuristicallyConstant")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("VariableElement")]),s._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getEnclosingElement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getKind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("mark"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("INTERFACE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getKind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("mark"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("FIELD")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getModifiers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("containsAll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("EnumSet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("of")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("PUBLIC")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("STATIC")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("FINAL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n         * 检查传入的 Element 是否符合驼式命名法, 如果不符合, 则输出警告信息\n         */")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("checkCamelCase")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Element")]),s._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" initialCaps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getSimpleName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" previousUpper "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" conventional "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" firstCodePoint "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("codePointAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Character")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("isUpperCase")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("firstCodePoint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                previousUpper "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("initialCaps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    messager"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("WARNING")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"名称“"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"”应当以小写字母开头"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Character")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("isLowerCase")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("firstCodePoint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("initialCaps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    messager"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("WARNING")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"名称“"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"”应当以大写字母开头"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n                conventional "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("conventional"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" cp "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" firstCodePoint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Character")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("charCount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Character")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("charCount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    cp "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("codePointAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Character")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("isUpperCase")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("previousUpper"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                            conventional "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n                        previousUpper "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n                        previousUpper "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("conventional"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n                messager"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("WARNING")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"名称“"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"”应当符合驼式命名法(Camel Case Names)"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n         * 大写命名检查, 要求第一个字母必须是大写的英文字母, 其余部分可以是下划线或大写字母\n         */")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("checkAllCaps")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Element")]),s._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getSimpleName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" conventional "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" firstCodePoint "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("codePointAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Character")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("isUpperCase")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("firstCodePoint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n                conventional "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" previousUnderscore "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" cp "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" firstCodePoint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Character")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("charCount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Character")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("charCount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    cp "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("codePointAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cp "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[s._v("'_'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("previousUnderscore"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                            conventional "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n                        previousUnderscore "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                        previousUnderscore "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Character")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("isUpperCase")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Character")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("isDigit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                            conventional "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n                    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("conventional"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n                messager"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("WARNING")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"常量“"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"”应当全部以大写字母或下划线命名, 并且以字母开头"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br"),a("span",{staticClass:"line-number"},[s._v("72")]),a("br"),a("span",{staticClass:"line-number"},[s._v("73")]),a("br"),a("span",{staticClass:"line-number"},[s._v("74")]),a("br"),a("span",{staticClass:"line-number"},[s._v("75")]),a("br"),a("span",{staticClass:"line-number"},[s._v("76")]),a("br"),a("span",{staticClass:"line-number"},[s._v("77")]),a("br"),a("span",{staticClass:"line-number"},[s._v("78")]),a("br"),a("span",{staticClass:"line-number"},[s._v("79")]),a("br"),a("span",{staticClass:"line-number"},[s._v("80")]),a("br"),a("span",{staticClass:"line-number"},[s._v("81")]),a("br"),a("span",{staticClass:"line-number"},[s._v("82")]),a("br"),a("span",{staticClass:"line-number"},[s._v("83")]),a("br"),a("span",{staticClass:"line-number"},[s._v("84")]),a("br"),a("span",{staticClass:"line-number"},[s._v("85")]),a("br"),a("span",{staticClass:"line-number"},[s._v("86")]),a("br"),a("span",{staticClass:"line-number"},[s._v("87")]),a("br"),a("span",{staticClass:"line-number"},[s._v("88")]),a("br"),a("span",{staticClass:"line-number"},[s._v("89")]),a("br"),a("span",{staticClass:"line-number"},[s._v("90")]),a("br"),a("span",{staticClass:"line-number"},[s._v("91")]),a("br"),a("span",{staticClass:"line-number"},[s._v("92")]),a("br"),a("span",{staticClass:"line-number"},[s._v("93")]),a("br"),a("span",{staticClass:"line-number"},[s._v("94")]),a("br"),a("span",{staticClass:"line-number"},[s._v("95")]),a("br"),a("span",{staticClass:"line-number"},[s._v("96")]),a("br"),a("span",{staticClass:"line-number"},[s._v("97")]),a("br"),a("span",{staticClass:"line-number"},[s._v("98")]),a("br"),a("span",{staticClass:"line-number"},[s._v("99")]),a("br"),a("span",{staticClass:"line-number"},[s._v("100")]),a("br"),a("span",{staticClass:"line-number"},[s._v("101")]),a("br"),a("span",{staticClass:"line-number"},[s._v("102")]),a("br"),a("span",{staticClass:"line-number"},[s._v("103")]),a("br"),a("span",{staticClass:"line-number"},[s._v("104")]),a("br"),a("span",{staticClass:"line-number"},[s._v("105")]),a("br"),a("span",{staticClass:"line-number"},[s._v("106")]),a("br"),a("span",{staticClass:"line-number"},[s._v("107")]),a("br"),a("span",{staticClass:"line-number"},[s._v("108")]),a("br"),a("span",{staticClass:"line-number"},[s._v("109")]),a("br"),a("span",{staticClass:"line-number"},[s._v("110")]),a("br"),a("span",{staticClass:"line-number"},[s._v("111")]),a("br"),a("span",{staticClass:"line-number"},[s._v("112")]),a("br"),a("span",{staticClass:"line-number"},[s._v("113")]),a("br"),a("span",{staticClass:"line-number"},[s._v("114")]),a("br"),a("span",{staticClass:"line-number"},[s._v("115")]),a("br"),a("span",{staticClass:"line-number"},[s._v("116")]),a("br"),a("span",{staticClass:"line-number"},[s._v("117")]),a("br"),a("span",{staticClass:"line-number"},[s._v("118")]),a("br"),a("span",{staticClass:"line-number"},[s._v("119")]),a("br"),a("span",{staticClass:"line-number"},[s._v("120")]),a("br"),a("span",{staticClass:"line-number"},[s._v("121")]),a("br"),a("span",{staticClass:"line-number"},[s._v("122")]),a("br"),a("span",{staticClass:"line-number"},[s._v("123")]),a("br"),a("span",{staticClass:"line-number"},[s._v("124")]),a("br"),a("span",{staticClass:"line-number"},[s._v("125")]),a("br"),a("span",{staticClass:"line-number"},[s._v("126")]),a("br"),a("span",{staticClass:"line-number"},[s._v("127")]),a("br"),a("span",{staticClass:"line-number"},[s._v("128")]),a("br"),a("span",{staticClass:"line-number"},[s._v("129")]),a("br"),a("span",{staticClass:"line-number"},[s._v("130")]),a("br"),a("span",{staticClass:"line-number"},[s._v("131")]),a("br"),a("span",{staticClass:"line-number"},[s._v("132")]),a("br"),a("span",{staticClass:"line-number"},[s._v("133")]),a("br"),a("span",{staticClass:"line-number"},[s._v("134")]),a("br"),a("span",{staticClass:"line-number"},[s._v("135")]),a("br"),a("span",{staticClass:"line-number"},[s._v("136")]),a("br"),a("span",{staticClass:"line-number"},[s._v("137")]),a("br"),a("span",{staticClass:"line-number"},[s._v("138")]),a("br"),a("span",{staticClass:"line-number"},[s._v("139")]),a("br"),a("span",{staticClass:"line-number"},[s._v("140")]),a("br"),a("span",{staticClass:"line-number"},[s._v("141")]),a("br"),a("span",{staticClass:"line-number"},[s._v("142")]),a("br"),a("span",{staticClass:"line-number"},[s._v("143")]),a("br"),a("span",{staticClass:"line-number"},[s._v("144")]),a("br"),a("span",{staticClass:"line-number"},[s._v("145")]),a("br"),a("span",{staticClass:"line-number"},[s._v("146")]),a("br"),a("span",{staticClass:"line-number"},[s._v("147")]),a("br"),a("span",{staticClass:"line-number"},[s._v("148")]),a("br"),a("span",{staticClass:"line-number"},[s._v("149")]),a("br"),a("span",{staticClass:"line-number"},[s._v("150")]),a("br"),a("span",{staticClass:"line-number"},[s._v("151")]),a("br"),a("span",{staticClass:"line-number"},[s._v("152")]),a("br"),a("span",{staticClass:"line-number"},[s._v("153")]),a("br"),a("span",{staticClass:"line-number"},[s._v("154")]),a("br"),a("span",{staticClass:"line-number"},[s._v("155")]),a("br"),a("span",{staticClass:"line-number"},[s._v("156")]),a("br"),a("span",{staticClass:"line-number"},[s._v("157")]),a("br"),a("span",{staticClass:"line-number"},[s._v("158")]),a("br"),a("span",{staticClass:"line-number"},[s._v("159")]),a("br"),a("span",{staticClass:"line-number"},[s._v("160")]),a("br"),a("span",{staticClass:"line-number"},[s._v("161")]),a("br"),a("span",{staticClass:"line-number"},[s._v("162")]),a("br"),a("span",{staticClass:"line-number"},[s._v("163")]),a("br"),a("span",{staticClass:"line-number"},[s._v("164")]),a("br"),a("span",{staticClass:"line-number"},[s._v("165")]),a("br"),a("span",{staticClass:"line-number"},[s._v("166")]),a("br"),a("span",{staticClass:"line-number"},[s._v("167")]),a("br")])]),a("p",[s._v("NameChecker 的代码看起来有点长, 但实际上注释占了很大一部分, 而且即使算上注释也不到 190 行. 它通过一个继承于 javax.lang.model.util.ElementScanner6 的 NameCheckScanner 类, 以 Visitor 模式来完成对语法树的遍历, 分别执行 visitType(), visitVariable() 和 visitExecutable() 方法来访问类, 字段和方法, 这 3 个 "),a("code",[s._v("visit*()")]),s._v("​ 方法"),a("strong",[s._v("对各自的命名规则做相应的检查")]),s._v(", checkCamelCase() 与 checkAllCaps() 方法则用于实现驼式命名法和全大写命名规则的检查.")]),s._v(" "),a("p",[s._v('整个注解处理器只需 NameCheckProcessor 和 NameChecker 两个类就可以全部完成, 为了验证实战成果, 代码清单 10-18 中提供了一段命名规范的 "反面教材" 代码, 其中的每一个类, 方法及字段的命名都存在问题, 但是使用普通的 Javac 编译这段代码时不会提示任意一条警告信息.')]),s._v(" "),a("blockquote",[a("p",[s._v("代码清单10-18 包含了多处不规范命名的代码样例")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BADLY_NAMED_CODE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("enum")]),s._v(" colors "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        red"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" blue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" green"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" _FORTY_TWO "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("NOT_A_CONSTANT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" _FORTY_TWO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("BADLY_NAMED_CODE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("NOTcamelCASEmethodNAME")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("h5",{attrs:{id:"_3-运行与测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-运行与测试"}},[s._v("#")]),s._v(" 3.运行与测试")]),s._v(" "),a("p",[s._v('可以通过 Javac 命令的 "'),a("code",[s._v("-processor")]),s._v('​" 参数来执行编译时需要附带的注解处理器, 如果'),a("strong",[s._v("有多个注解处理器的话, 用逗号分隔")]),s._v(". 还可以使用 "),a("code",[s._v("-XprintRounds")]),s._v("​ 和 "),a("code",[s._v("-XprintProcessorInfo")]),s._v("​ 参数来查看注解处理器运作的详细信息, 本次实战中的 NameCheckProcessor 的"),a("strong",[s._v("编译及执行过程")]),s._v("如代码清单 10-19 所示.")]),s._v(" "),a("blockquote",[a("p",[s._v("代码清单10-19 注解处理器的运行过程")])]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[s._v("D"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\\src"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("javac org"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("fenixsoft"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("compile"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("NameChecker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("java\n\nD"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\\src"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("javac org"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("fenixsoft"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("compile"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("NameCheckProcessor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("java\n\nD"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\\src"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("javac "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("processor org"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("fenixsoft"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("compile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("NameCheckProcessor org"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("fenixsoft"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("compile"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("BADLY_NAMED_CODE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("java\n\norg\\fenixsoft\\compile\\BADLY_NAMED_CODE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("java"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 警告"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 名称“BADLY_NAMED_CODE”应当符合驼式命名法"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Camel Case Names"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\npublic class BADLY_NAMED_CODE "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n       "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("\norg\\fenixsoft\\compile\\BADLY_NAMED_CODE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("java"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 警告"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 名称“colors”应当以大写字母开头\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("enum")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("colors")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("\norg\\fenixsoft\\compile\\BADLY_NAMED_CODE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("java"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 警告"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 常量“red”应当全部以大写字母或下划线命名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 并且以字母开头\n                red"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" blue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" green"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("\norg\\fenixsoft\\compile\\BADLY_NAMED_CODE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("java"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 警告"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 常量“blue”应当全部以大写字母或下划线命名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 并且以字母开头\n                red"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" blue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" green"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                     "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("\norg\\fenixsoft\\compile\\BADLY_NAMED_CODE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("java"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 警告"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 常量“green”应当全部以大写字母或下划线命名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 并且以字母开头\n                red"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" blue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" green"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                           "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("\norg\\fenixsoft\\compile\\BADLY_NAMED_CODE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("java"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 警告"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 常量“_FORTY_TWO”应当全部以大写字母或下划线命名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 并且以字母开头\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" final "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" _FORTY_TWO "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                         "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("\norg\\fenixsoft\\compile\\BADLY_NAMED_CODE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("java"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 警告"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 名称“NOT_A_CONSTANT”应当以小写字母开头\n        public "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" NOT_A_CONSTANT "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" _FORTY_TWO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                          "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("\norg\\fenixsoft\\compile\\BADLY_NAMED_CODE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("java"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 警告"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 名称“Test”应当以小写字母开头\n        protected "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                       "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("\norg\\fenixsoft\\compile\\BADLY_NAMED_CODE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("java"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("17")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 警告"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 名称“NOTcamelCASEmethodNAME”应当以小写字母开头\n        public "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("NOTcamelCASEmethodNAME")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br")])]),a("h5",{attrs:{id:"_4-其他应用案例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-其他应用案例"}},[s._v("#")]),s._v(" 4.其他应用案例")]),s._v(" "),a("p",[s._v("NameCheckProcessor 的实战例子只演示了 JSR-269 嵌入式注解处理 API 其中的一部分功能, 基于这组 API 支持的比较有名的项目还有用于校验 Hibernate 标签使用正确性的 Hibernate Validator Annotation Processor(本质上与 NameCheckProcessor 所做的事情差不多), 自动为字段生成 getter 和 setter 方法等辅助内容的 "),a("mark",[a("strong",[s._v("Lombok")])]),s._v(" ("),a("strong",[s._v("根据已有元素生成新的语法树元素")]),s._v(")等, 读者有兴趣的话可以参考它们官方站点的相关内容.")]),s._v(" "),a("p",[s._v("‍")]),s._v(" "),a("h4",{attrs:{id:"本章小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本章小结"}},[s._v("#")]),s._v(" 本章小结")]),s._v(" "),a("p",[s._v('本章从 Javac 编译器源码实现的层次上学习了 Java 源代码编译为字节码的过程, 分析了 Java 语言中泛型, 主动装箱拆箱, 条件编译等多种语法糖的前因后果, 并实战练习了如何使用插入式注解处理器来完成一个检查程序命名规范的编译器插件. 如本章概述中所说的, 在前端编译器中, "优化" 手段主要用于提升程序的编码效率, 之所以把 Javac 这类将 Java 代码转变为字节码的编译器称作 "前端编译器", 是因为'),a("strong",[s._v("它只完成了从程序到抽象语法树或中间字节码的生成")]),s._v(', 而在此之后, 还有一组内置于 Java 虚拟机内部的 "后端编译器" 来'),a("strong",[s._v("完成代码优化以及从字节码生成本地机器码的过程")]),s._v(", 即前面多次提到的"),a("strong",[s._v("即时编译器或提前编译器")]),s._v(", 这个后端编译器的编译速度及编译结果质量高低, 是衡量 Java 虚拟机性能最重要的一个指标. 在第 11 章中, 将会一探后端编译器的运作和优化过程.")]),s._v(" "),a("p",[s._v("‍")]),s._v(" "),a("p",[s._v("‍")]),s._v(" "),a("p",[s._v("‍")]),s._v(" "),a("p",[s._v("‍")])])}),[],!1,null,null,null);a.default=e.exports}}]);