(window.webpackJsonp=window.webpackJsonp||[]).push([[173],{481:function(_,t,v){"use strict";v.r(t);var s=v(7),a=Object(s.a)({},(function(){var _=this,t=_._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"_310-负载均衡"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_310-负载均衡"}},[_._v("#")]),_._v(" 310.负载均衡")]),_._v(" "),t("h4",{attrs:{id:"基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[_._v("#")]),_._v(" 基础")]),_._v(" "),t("p",[_._v("集群中的应用服务器(节点) 通常被设计成"),t("mark",[t("strong",[_._v("无状态")])]),_._v(", 用户可以请求"),t("strong",[_._v("任何一个节点")]),_._v(".")]),_._v(" "),t("p",[_._v("负载均衡器会根据集群中每个节点的负载情况, 将用户请求转发到合适的节点上.")]),_._v(" "),t("p",[_._v("负载均衡器可以用来实现"),t("strong",[_._v("高可用以及伸缩性")]),_._v(":")]),_._v(" "),t("ul",[t("li",[t("strong",[_._v("高可用")]),_._v(": 当某个节点故障时, 负载均衡器会将用户请求转发到另外的节点上, 从而保证所有服务持续可用.")]),_._v(" "),t("li",[t("strong",[_._v("伸缩性")]),_._v(": 根据系统整体负载情况, 可以很容易地添加或移除节点.")])]),_._v(" "),t("p",[_._v("负载均衡器运行过程包含两个部分:")]),_._v(" "),t("ol",[t("li",[_._v("根据"),t("strong",[_._v("负载均衡算法")]),_._v("得到转发的节点;")]),_._v(" "),t("li",[_._v("进行转发.")])]),_._v(" "),t("h4",{attrs:{id:"负载均衡算法🌟"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡算法🌟"}},[_._v("#")]),_._v(" 负载均衡算法🌟")]),_._v(" "),t("h5",{attrs:{id:"_1-随机算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-随机算法"}},[_._v("#")]),_._v(" 1.随机算法")]),_._v(" "),t("p",[_._v("把请求"),t("strong",[_._v("随机发送到服务器")]),_._v("上. 和轮询算法类似, 该算法比较适合服务器"),t("strong",[_._v("性能差不多")]),_._v("的场景.")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20200529170206895.png",alt:""}})]),_._v(" "),t("h5",{attrs:{id:"_2-轮询算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-轮询算法"}},[_._v("#")]),_._v(" 2.轮询算法")]),_._v(" "),t("p",[t("strong",[_._v("轮询算法把每个请求轮流发送到每个服务器上")]),_._v(".")]),_._v(" "),t("p",[_._v("下图中, 一共有 6 个客户端产生了 6 个请求, 这 6 个请求按 (1, 2, 3, 4, 5, 6) 的顺序发送. (1, 3, 5) 的请求会被发送到服务器 1, (2, 4, 6) 的请求会被发送到服务器 2.")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20200529165843251-1645206.png",alt:"",title:"负载均衡-轮询算法"}})]),_._v(" "),t("p",[_._v("该算法比较适合每个服务器的"),t("strong",[_._v("性能差不多")]),_._v("的场景, 如果有性能存在差异的情况下, 那么性能较差的服务器可能无法承担过大的负载(下图的 Server 2).")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20200529165922541.png",alt:"",title:"负载均衡-轮询算法"}})]),_._v(" "),t("h5",{attrs:{id:"_3-加权轮询算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-加权轮询算法"}},[_._v("#")]),_._v(" 3.加权轮询算法")]),_._v(" "),t("p",[_._v("加权轮询是在轮询的基础上, 根据服务器的性能差异, 为"),t("strong",[_._v("服务器赋予一定的权值")]),_._v(", 性能高的服务器(比如 CPU 和内存更多)分配更高的权值.")]),_._v(" "),t("p",[_._v("例如下图中, 服务器 1 被赋予的权值为 5, 服务器 2 被赋予的权值为 1, 那么 (1, 2, 3, 4, 5) 请求会被发送到服务器 1, (6) 请求会被发送到服务器 2.")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20200529170028089.png",alt:"",title:"负载均衡-加权轮询算法"}})]),_._v(" "),t("h5",{attrs:{id:"_4-最少连接算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-最少连接算法"}},[_._v("#")]),_._v(" 4.最少连接算法")]),_._v(" "),t("p",[_._v("由于每个请求的连接时间不一样, 使用轮询或者加权轮询算法的话, 可能会让一台服务器当前连接数过大, 而另一台服务器的连接过小, 造成"),t("strong",[_._v("负载不均衡")]),_._v(".")]),_._v(" "),t("p",[_._v("例如下图中, (1, 3, 5) 请求会被发送到服务器 1, 但是 (1, 3) 很快就断开连接, 此时只有 (5) 请求连接服务器 1; (2, 4, 6) 请求被发送到服务器 2, 只有 (2) 的连接断开, 此时 (6, 4) 请求连接服务器 2. 该系统继续运行时, 服务器 2 会承担过大的负载.")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20200529170048807.png",alt:""}})]),_._v(" "),t("p",[t("strong",[_._v("最少连接算法就是将请求发送给当前最少连接数的服务器上")]),_._v(".")]),_._v(" "),t("p",[_._v("例如下图中, 服务器 1 当前连接数最小, 那么新到来的请求 6 就会被发送到服务器 1 上.")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20200529170149493.png",alt:""}})]),_._v(" "),t("h5",{attrs:{id:"_5-加权最少连接算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-加权最少连接算法"}},[_._v("#")]),_._v(" 5.加权最少连接算法")]),_._v(" "),t("p",[_._v("在最少连接的基础上, 根据服务器的性能为每台服务器分配"),t("strong",[_._v("权重")]),_._v(", 再根据权重计算出每台服务器能处理的连接数.")]),_._v(" "),t("h5",{attrs:{id:"_6-源地址哈希算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-源地址哈希算法"}},[_._v("#")]),_._v(" 6.源地址哈希算法")]),_._v(" "),t("p",[_._v("源地址哈希通过对"),t("strong",[_._v("客户端 IP 计算哈希值")]),_._v("之后, 再对"),t("strong",[_._v("服务器数量取模")]),_._v("得到目标服务器的序号.")]),_._v(" "),t("p",[_._v("可以保证同一 IP 的客户端的请求会转发到同一台服务器上, 用来实现会话"),t("strong",[_._v("粘滞(Sticky Session)")]),_._v(" .")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20200529170236967.png",alt:""}})]),_._v(" "),t("h4",{attrs:{id:"实现方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现方式"}},[_._v("#")]),_._v(" 实现方式")]),_._v(" "),t("p",[_._v("下面介绍一些实现负载均衡的方式.")]),_._v(" "),t("h5",{attrs:{id:"_1-http重定向"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-http重定向"}},[_._v("#")]),_._v(" 1.HTTP重定向")]),_._v(" "),t("p",[_._v("需要引入一个 HTTP 重定向负载均衡服务器, 使用某种负载均衡算法计算得到服务器的 IP 地址之后, 将该地址写入 "),t("strong",[_._v("HTTP 重定向报文")]),_._v("中, 状态码为 "),t("strong",[_._v("302")]),_._v(". 客户端收到重定向报文之后, 需要"),t("strong",[_._v("重新向服务器发起请求")]),_._v(".")]),_._v(" "),t("p",[t("strong",[_._v("缺点")]),_._v(": 需要两次请求, 因此访问延迟比较高; HTTP 负载均衡器处理能力有限, 会限制集群的规模. 该负载均衡转发的缺点比较明显, 基本不会使用.")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20200529170300073.png",alt:"image-20200529170300073"}})]),_._v(" "),t("h5",{attrs:{id:"_2-dns域名解析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-dns域名解析"}},[_._v("#")]),_._v(" 2.DNS域名解析")]),_._v(" "),t("p",[t("strong",[_._v("在 DNS 解析域名的同时使用负载均衡算法计算服务器 IP 地址")]),_._v(".")]),_._v(" "),t("p",[t("strong",[_._v("优点")]),_._v(": DNS 能够根据地理位置进行域名解析, 返回离用户最近的服务器 IP 地址.")]),_._v(" "),t("p",[t("strong",[_._v("缺点")]),_._v(": 由于 DNS 具有多级结构, 每一级的域名记录都可能被缓存, "),t("strong",[_._v("当下线一台服务器需要修改 DNS 记录时, 需要过很长一段时间才能生效")]),_._v(".")]),_._v(" "),t("p",[t("mark",[t("strong",[_._v("大型网站基本使用了 DNS 做为第一级负载均衡手段, 然后在内部使用其它方式做第二级负载均衡. 也就是说, 域名解析的结果为内部的负载均衡服务器 IP 地址")])]),_._v(".")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20200529170349728.png",alt:"image-20200529170349728"}})]),_._v(" "),t("h5",{attrs:{id:"_3-反向代理服务器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-反向代理服务器"}},[_._v("#")]),_._v(" 3.反向代理服务器")]),_._v(" "),t("p",[t("strong",[_._v("反向代理服务器")]),_._v("位于源服务器"),t("strong",[_._v("前面")]),_._v(", 用户的请求需要"),t("strong",[_._v("先经过反向代理服务器")]),_._v("才能到达源服务器. 反向代理可以用来"),t("strong",[_._v("进行缓存, 日志记录")]),_._v("等, 同时也可以用来做为"),t("strong",[_._v("负载均衡服务器")]),_._v(".")]),_._v(" "),t("p",[_._v("在这种负载均衡转发方式下, 客户端不直接请求源服务器, 因此源服务器不需要外部 IP 地址, 而反向代理需要配置内部和外部两套 IP 地址.")]),_._v(" "),t("p",[t("strong",[_._v("优点")]),_._v(": 与其它功能集成在一起, 部署简单.")]),_._v(" "),t("p",[t("strong",[_._v("缺点")]),_._v(": "),t("strong",[_._v("所有请求和响应")]),_._v("都需要经过反向代理服务器, 它"),t("strong",[_._v("可能会成为性能瓶颈")]),_._v(".")]),_._v(" "),t("h5",{attrs:{id:"_4-网络层"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-网络层"}},[_._v("#")]),_._v(" 4.网络层")]),_._v(" "),t("p",[t("strong",[_._v("在操作系统内核进程获取网络数据包, 根据负载均衡算法计算源服务器的 IP 地址, 并修改请求数据包的目的 IP 地址, 最后进行转发")]),_._v(".")]),_._v(" "),t("p",[_._v("源服务器返回的响应也需要经过负载均衡服务器, 通常是让负载均衡服务器同时作为集群的网关服务器来实现.")]),_._v(" "),t("p",[t("strong",[_._v("优点")]),_._v(": 在内核进程中进行处理, 性能比较高.")]),_._v(" "),t("p",[t("strong",[_._v("缺点")]),_._v(": 和反向代理一样, 所有的请求和响应都经过负载均衡服务器, 会成为性能瓶颈.")]),_._v(" "),t("h5",{attrs:{id:"_5-数据链路层"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-数据链路层"}},[_._v("#")]),_._v(" 5.数据链路层")]),_._v(" "),t("p",[_._v("在数据链路层根据"),t("strong",[_._v("负载均衡算法")]),_._v("计算源服务器的 "),t("strong",[_._v("MAC")]),_._v(" 地址, 并修改请求数据包的目的 MAC 地址, 并进行转发.")]),_._v(" "),t("p",[_._v("通过配置源服务器的虚拟 IP 地址和负载均衡服务器的 IP 地址一致, 从而不需要修改 IP 地址就可以进行转发. 也正因为 IP 地址一样, 所以源服务器的响应不需要转发回负载均衡服务器, 可以直接转发给客户端, "),t("strong",[_._v("避免了负载均衡服务器的成为瓶颈")]),_._v(".")]),_._v(" "),t("p",[_._v("这是一种"),t("strong",[_._v("三角传输模式")]),_._v(", 被称为"),t("strong",[_._v("直接路由")]),_._v(". 对于提供下载和视频服务的网站来说, 直接路由避免了大量的网络传输数据经过负载均衡服务器.")]),_._v(" "),t("p",[_._v("这是目前"),t("strong",[_._v("大型网站使用最广负载均衡转发方式")]),_._v(", 在 Linux 平台可以使用的负载均衡服务器为 "),t("strong",[_._v("LVS")]),_._v("(Linux Virtual Server).")]),_._v(" "),t("p",[_._v("‍")]),_._v(" "),t("p",[_._v("‍")]),_._v(" "),t("p",[_._v("‍")])])}),[],!1,null,null,null);t.default=a.exports}}]);