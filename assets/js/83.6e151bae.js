(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{412:function(t,r,e){"use strict";e.r(r);var a=e(4),_=Object(a.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"_1-操作系统基础"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-操作系统基础"}},[t._v("#")]),t._v(" 1.操作系统基础")]),t._v(" "),r("h4",{attrs:{id:"基本概念"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[t._v("#")]),t._v(" 基本概念")]),t._v(" "),r("p",[t._v("操作系统(Operating System, OS) 是管理计算机硬件与软件资源的程序, 是计算机系统的内核与基石.")]),t._v(" "),r("p",[t._v("操作系统分为"),r("strong",[t._v("内核与外壳")]),t._v(". 内核负责管理系统的进程, 内存, 设备驱动程序, 文件和网络系统等等, 决定着系统的性能和稳定性, 是连接应用程序和硬件的桥梁, 内核是能"),r("strong",[t._v("操作硬件")]),t._v("的程序. 外壳可以理解成围绕着内核的"),r("strong",[t._v("应用程序")]),t._v(".")]),t._v(" "),r("h5",{attrs:{id:"_1-操作系统基本特征"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-操作系统基本特征"}},[t._v("#")]),t._v(" 1.操作系统基本特征")]),t._v(" "),r("h6",{attrs:{id:"_1-并发"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-并发"}},[t._v("#")]),t._v(" (1)并发")]),t._v(" "),r("p",[t._v("并发是指宏观上在一段时间内能"),r("strong",[t._v("同时运行多个程序")]),t._v(", 而并行则指同一时刻能运行多个指令. 并行需要硬件支持, 如多流水线, 多核处理器或者分布式计算系统. 操作系统通过引入进程和线程, 使得程序能够并发运行.")]),t._v(" "),r("h6",{attrs:{id:"_2-共享"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-共享"}},[t._v("#")]),t._v(" (2)共享")]),t._v(" "),r("p",[t._v("共享是指系统中的"),r("strong",[t._v("资源")]),t._v("可以被"),r("strong",[t._v("多个并发进程共同使用")]),t._v(".")]),t._v(" "),r("p",[t._v("共享有两种方式: "),r("strong",[t._v("互斥共享和同时共享")]),t._v(". 互斥共享的资源称为"),r("strong",[t._v("临界资源")]),t._v(", 例如打印机等, 在同一时间只允许一个进程访问, 需要用同步机制来实现对临界资源的访问.")]),t._v(" "),r("h6",{attrs:{id:"_3-虚拟"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-虚拟"}},[t._v("#")]),t._v(" (3)虚拟")]),t._v(" "),r("p",[t._v("主要有"),r("strong",[t._v("两种虚拟技术")]),t._v(": "),r("strong",[t._v("时分复用技术和空分复用技术")]),t._v(".")]),t._v(" "),r("p",[r("strong",[t._v("多个进程")]),t._v("能在同一个处理器上并发执行使用了"),r("strong",[t._v("时分复用技术")]),t._v(", 让每个进程轮流占有处理器, 每次只执行一小个时间片并快速切换.")]),t._v(" "),r("p",[r("strong",[t._v("虚拟内存")]),t._v("使用了"),r("strong",[t._v("空分复用技术")]),t._v(", 它将物理内存抽象为地址空间, 每个进程都有各自的地址空间. 地址空间的页被映射到物理内存, 地址空间的页并不需要全部在物理内存中, 当使用到一个没有在物理内存的页时, 执行页面置换算法, 将该页置换到内存中.")]),t._v(" "),r("h6",{attrs:{id:"_4-异步"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-异步"}},[t._v("#")]),t._v(" (4)异步")]),t._v(" "),r("p",[t._v("异步指进程不是一次性执行完毕, 而是走走停停, 以不可知的速度向前推进.")]),t._v(" "),r("h5",{attrs:{id:"_2-操作系统基本功能"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-操作系统基本功能"}},[t._v("#")]),t._v(" 2.操作系统基本功能")]),t._v(" "),r("h6",{attrs:{id:"_1-进程管理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-进程管理"}},[t._v("#")]),t._v(" (1)进程管理")]),t._v(" "),r("p",[t._v("进程控制, 进程同步, 进程通信, 死锁处理, 处理机调度等.")]),t._v(" "),r("h6",{attrs:{id:"_2-内存管理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-内存管理"}},[t._v("#")]),t._v(" (2)内存管理")]),t._v(" "),r("p",[t._v("内存分配, 地址映射, 内存保护与共享, 虚拟内存等.")]),t._v(" "),r("h6",{attrs:{id:"_3-文件管理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-文件管理"}},[t._v("#")]),t._v(" (3)文件管理")]),t._v(" "),r("p",[t._v("文件存储空间的管理, 目录管理, 文件读写管理和保护等.")]),t._v(" "),r("h6",{attrs:{id:"_4-设备管理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-设备管理"}},[t._v("#")]),t._v(" (4)设备管理")]),t._v(" "),r("p",[t._v("完成用户的 I/O 请求, 方便用户使用各种设备, 并提高设备的利用率. 主要包括缓冲管理, 设备分配, 设备处理, 虛拟设备等.")]),t._v(" "),r("h5",{attrs:{id:"_3-大内核和微内核"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-大内核和微内核"}},[t._v("#")]),t._v(" 3.大内核和微内核")]),t._v(" "),r("h6",{attrs:{id:"_1-大内核"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-大内核"}},[t._v("#")]),t._v(" (1)大内核")]),t._v(" "),r("p",[t._v("大内核是将操作系统功能作为"),r("strong",[t._v("一个紧密结合")]),t._v("的整体放到内核. 由于各模块"),r("strong",[t._v("共享信息")]),t._v(", 因此有很高的性能.")]),t._v(" "),r("h6",{attrs:{id:"_2-微内核"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-微内核"}},[t._v("#")]),t._v(" (2)微内核")]),t._v(" "),r("p",[t._v("由于操作系统不断复杂, 因此将一部分操作系统功能"),r("strong",[t._v("移出内核")]),t._v(", 从而降低内核的复杂性. 移出的部分根据分层的原则划分成"),r("strong",[t._v("若干服务")]),t._v(", 相互独立. 在微内核结构下, 操作系统被划分成小的, 定义良好的"),r("strong",[t._v("模块")]),t._v(", 只有"),r("strong",[t._v("微内核")]),t._v("这一个模块运行在内核态, 其余模块运行在"),r("strong",[t._v("用户态")]),t._v(".")]),t._v(" "),r("p",[t._v("由于需要频繁地在"),r("strong",[t._v("用户态和核心态")]),t._v("之间进行"),r("strong",[t._v("切换")]),t._v(", 所以会有一定的性能损失.")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20210919191129845-3717458.png",alt:"",title:"操作系统微内核"}})]),t._v(" "),r("h4",{attrs:{id:"用户态与内核态🌟"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#用户态与内核态🌟"}},[t._v("#")]),t._v(" 用户态与内核态🌟")]),t._v(" "),r("h5",{attrs:{id:"_1-概述"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述"}},[t._v("#")]),t._v(" 1.概述")]),t._v(" "),r("p",[t._v("根据进程访问资源的特点, 可以把"),r("strong",[t._v("进程")]),t._v("在系统上的运行分为"),r("strong",[t._v("两个级别")]),t._v(":")]),t._v(" "),r("ol",[r("li",[r("strong",[t._v("用户态(user mode)")]),t._v(": "),r("strong",[t._v("用户态是用户应用程序运行的模式")]),t._v(". 用户态运行的进程可以直接读取用户程序的数据. 应用程序必须依托于内核态运行, 因此用户态的态的"),r("strong",[t._v("操作权限比内核态是要低")]),t._v("的, 如磁盘, 文件等, 访问操作都是"),r("strong",[t._v("受限")]),t._v("的.")]),t._v(" "),r("li",[r("strong",[t._v("内核态(kernel mode)")]),t._v(": "),r("strong",[t._v("内核态是操作系统内核运行的模式. ​")]),t._v("​"),r("strong",[r("strong",[t._v("内核态控制计算机的硬件资源, 如硬件设备, 文件系统等等, 并为上层应用程序提供执行环境. 内核态运行的进程几乎可以访问计算机的")])]),t._v("​"),r("strong",[t._v("任何资源, 不受限制")]),t._v(".")])]),t._v(" "),r("blockquote",[r("p",[t._v("为什么需要用户态和内核态?")])]),t._v(" "),r("p",[t._v("为什么需要两个模式? 在 CPU 的所有指令中, 有些指令是非常危险的, 如果使用不当将会造成"),r("strong",[t._v("系统崩溃")]),t._v(".")]),t._v(" "),r("p",[t._v("为避免这种情况, CPU 将指令划分为"),r("strong",[t._v("特权级(内核态)指令")]),t._v("和"),r("strong",[t._v("非特权级(用户态)指令")]),t._v(". 将可能引起损害的机器指令作为"),r("strong",[t._v("特权指令")]),t._v(", 并且硬件只有在内核模式下才允许执行特权指令. 这样可以"),r("strong",[t._v("防止操作系统和用户程序受到错误用户程序的影响")]),t._v(". 如果用户模式下系统执行特权指令, 那么硬件会认为这个指令非法而不会执行这个指令, 并将其以"),r("strong",[t._v("陷阱形式")]),t._v("通知给操作系统.")]),t._v(" "),r("h5",{attrs:{id:"_2-切换方式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-切换方式"}},[t._v("#")]),t._v(" 2.切换方式")]),t._v(" "),r("p",[r("strong",[t._v("用户态切换到内核态的几种方式:")])]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("系统调用")]),t._v(": "),r("strong",[t._v("系统调用")]),t._v("是用户态"),r("strong",[t._v("主动要求")]),t._v("切换到内核态的一种方式, 用户应用程序通过操作系统调用内核为上层应用程序开放的接口来执行程序.")]),t._v(" "),r("li",[r("strong",[t._v("异常")]),t._v(": 当 CPU 在执行用户态的应用程序时发生了某些不可知的"),r("strong",[t._v("异常")]),t._v(", 当前用户态的应用进程就会切换到处理此异常的"),r("strong",[t._v("内核程序")]),t._v("中去.")]),t._v(" "),r("li",[r("strong",[t._v("硬件设备的中断")]),t._v(": 当"),r("strong",[t._v("硬件设备完成用户请求")]),t._v("后, 会向 CPU 发出相应的中断信号, 这时 CPU 会暂停执行下一条即将要执行的指令, 转而去执行与中断信号对应的应用程序. 如果先前执行的指令是用户态下程序的指令, 那么这个转换过程也是用户态到内核台的转换.")])]),t._v(" "),r("h4",{attrs:{id:"系统调用🌟"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#系统调用🌟"}},[t._v("#")]),t._v(" 系统调用🌟")]),t._v(" "),r("p",[t._v("一般运行的"),r("strong",[t._v("程序基本都是运行在用户态")]),t._v(", 如果需要进行与"),r("strong",[t._v("内核态级别的资源有关的操作")]),t._v("(如"),r("strong",[t._v("文件管理, 进程控制, 内存管理")]),t._v("等), 就需要通过**==系统调用=="),r("strong",[t._v("方式向操作系统提出服务请求, 从而")]),t._v("陷入内核**, 并由操作系统代为完成.")]),t._v(" "),r("p",[r("strong",[t._v("系统调用就是操作系统为应用程序提供能够访问到内核态资源的接口")]),t._v(".")]),t._v(" "),r("p",[r("strong",[t._v("系统调用")]),t._v("按功能大致可分为如下几类:")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("设备管理")]),t._v(". 完成设备的请求或释放, 以及设备启动等功能.")]),t._v(" "),r("li",[r("strong",[t._v("文件管理")]),t._v(". 完成文件的读, 写, 创建及删除等功能.")]),t._v(" "),r("li",[r("strong",[t._v("进程控制")]),t._v(". 完成进程的创建, 撤销, 阻塞及唤醒等功能.")]),t._v(" "),r("li",[r("strong",[t._v("进程通信")]),t._v(". 完成进程之间的消息传递或信号传递等功能.")]),t._v(" "),r("li",[r("strong",[t._v("内存管理")]),t._v(". 完成内存的分配, 回收以及获取作业占用内存区大小及地址等功能.")])]),t._v(" "),r("p",[t._v("Linux 系统调用实例.")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",{staticStyle:{"text-align":"center"}},[t._v("Task")]),t._v(" "),r("th",{staticStyle:{"text-align":"center"}},[t._v("Commands")])])]),t._v(" "),r("tbody",[r("tr",[r("td",{staticStyle:{"text-align":"center"}},[r("strong",[t._v("进程控制")])]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[t._v("fork(); exit(); wait();")])]),t._v(" "),r("tr",[r("td",{staticStyle:{"text-align":"center"}},[r("strong",[t._v("进程通信")])]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[t._v("pipe(); shmget(); mmap();")])]),t._v(" "),r("tr",[r("td",{staticStyle:{"text-align":"center"}},[r("strong",[t._v("文件操作")])]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[t._v("open(); read(); write();")])]),t._v(" "),r("tr",[r("td",{staticStyle:{"text-align":"center"}},[r("strong",[t._v("设备操作")])]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[t._v("ioctl(); read(); write();")])]),t._v(" "),r("tr",[r("td",{staticStyle:{"text-align":"center"}},[r("strong",[t._v("信息维护")])]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[t._v("getpid(); alarm(); sleep();")])]),t._v(" "),r("tr",[r("td",{staticStyle:{"text-align":"center"}},[r("strong",[t._v("安全相关")])]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[t._v("chmod(); umask(); chown();")])])])]),t._v(" "),r("p",[t._v("下图是用户程序调用"),r("strong",[t._v("系统调用 open()")]),t._v(" 的处理过程.")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20200915132706394.png",alt:"",title:"系统调用过程"}})]),t._v(" "),r("h4",{attrs:{id:"操作系统中断"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#操作系统中断"}},[t._v("#")]),t._v(" 操作系统中断")]),t._v(" "),r("h5",{attrs:{id:"_1-中断分类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-中断分类"}},[t._v("#")]),t._v(" 1.中断分类")]),t._v(" "),r("h6",{attrs:{id:"_1-外中断"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-外中断"}},[t._v("#")]),t._v(" (1)外中断")]),t._v(" "),r("p",[t._v("由 CPU 执行指令以外的"),r("strong",[t._v("事件引起")]),t._v(", 如 I/O 完成中断, 表示设备输入/输出处理已经完成, 处理器能够发送下一个输入/输出请求. 此外还有时钟中断, 控制台中断等.")]),t._v(" "),r("h6",{attrs:{id:"_2-异常"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-异常"}},[t._v("#")]),t._v(" (2)异常")]),t._v(" "),r("p",[t._v("由 CPU 执行指令的"),r("strong",[t._v("内部事件")]),t._v("引起, 如非法操作码, 地址越界, 算术溢出等.")]),t._v(" "),r("h6",{attrs:{id:"_3-陷入"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-陷入"}},[t._v("#")]),t._v(" (3)陷入")]),t._v(" "),r("p",[t._v("在用户程序中使用"),r("strong",[t._v("系统调用")]),t._v(".")]),t._v(" "),r("p",[t._v("‍")]),t._v(" "),r("h4",{attrs:{id:"参考资料"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),r("ul",[r("li",[t._v("汤子瀛, 哲凤屏, 汤小丹. 计算机操作系统[M]. 西安电子科技大学出版社, 2001.")]),t._v(" "),r("li",[t._v("史蒂文斯. UNIX 环境高级编程 [M]. 人民邮电出版社, 2014.")]),t._v(" "),r("li",[r("a",{attrs:{href:"https://applied-programming.github.io/Operating-Systems-Notes/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Operating System Notes"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://www.cs.uic.edu/~jbell/CourseNotes/OperatingSystems/2_Structures.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Operating-System Structures"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"http://cse.csusb.edu/tongyu/courses/cs460/notes/process.php",target:"_blank",rel:"noopener noreferrer"}},[t._v("Processes"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://www.slideshare.net/rkolahalam/inter-process-communication-presentation1",target:"_blank",rel:"noopener noreferrer"}},[t._v("Inter Process Communication Presentation[1]"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://blogs.cisco.com/datacenter/decoding-ucs-invicta-part-1",target:"_blank",rel:"noopener noreferrer"}},[t._v("Decoding UCS Invicta – Part 1"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://www.ibm.com/developerworks/cn/linux/l-cn-rpmdpkg/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Linux 平台上的软件包管理"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"http://liubigbin.github.io/2016/03/11/Linux-%E4%B9%8B%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B%E3%80%81%E5%83%B5%E6%AD%BB%E8%BF%9B%E7%A8%8B%E4%B8%8E%E5%AD%A4%E5%84%BF%E8%BF%9B%E7%A8%8B/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Linux 之守护进程, 僵死进程与孤儿进程"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://stackoverflow.com/questions/185899/what-is-the-difference-between-a-symbolic-link-and-a-hard-link",target:"_blank",rel:"noopener noreferrer"}},[t._v("What is the difference between a symbolic link and a hard link?"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://idea.popcount.org/2012-12-11-linux-process-states/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Linux process states"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://en.wikipedia.org/wiki/GUID_Partition_Table",target:"_blank",rel:"noopener noreferrer"}},[t._v("GUID Partition Table"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://blog.csdn.net/kevinhg/article/details/7001719",target:"_blank",rel:"noopener noreferrer"}},[t._v("详解 wait 和 waitpid 函数"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://blog.csdn.net/tianlesoftware/article/details/6009110",target:"_blank",rel:"noopener noreferrer"}},[t._v("IDE, SATA, SCSI, SAS, FC, SSD 硬盘类型介绍"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"http://www.mpchunter.com/s3000/akai-ib-301s-scsi-interface-for-s2800s3000/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Akai IB-301S SCSI Interface for S2800,S3000"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://en.wikipedia.org/wiki/Parallel_ATA",target:"_blank",rel:"noopener noreferrer"}},[t._v("Parallel ATA"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"http://www.thessdreview.com/our-reviews/adata-xpg-sx900-256gb-sata-3-ssd-review-expanded-capacity-and-sandforce-driven-speed/4/",target:"_blank",rel:"noopener noreferrer"}},[t._v("ADATA XPG SX900 256GB SATA 3 SSD Review – Expanded Capacity and SandForce Driven Speed"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://blogs.cisco.com/datacenter/decoding-ucs-invicta-part-1",target:"_blank",rel:"noopener noreferrer"}},[t._v("Decoding UCS Invicta – Part 1"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E7%A1%AC%E7%9B%98",target:"_blank",rel:"noopener noreferrer"}},[t._v("硬盘"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"http://www.differencebetween.info/difference-between-sas-and-sata",target:"_blank",rel:"noopener noreferrer"}},[t._v("Difference between SAS and SATA"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://zh.wikipedia.org/wiki/BIOS",target:"_blank",rel:"noopener noreferrer"}},[t._v("BIOS"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://www.cs.rutgers.edu/~pxk/416/notes/13-fs-studies.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("File system design case studies"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://classes.soe.ucsc.edu/cmps111/Fall08/proj4.shtml",target:"_blank",rel:"noopener noreferrer"}},[t._v("Programming Project #4"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"http://web.cs.ucla.edu/classes/fall14/cs111/scribe/11a/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("FILE SYSTEM DESIGN"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);r.default=_.exports}}]);