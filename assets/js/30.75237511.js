(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{621:function(s,a,t){"use strict";t.r(a);var n=t(7),e=Object(n.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"_30-linux性能优化实战-极客时间-🌸"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_30-linux性能优化实战-极客时间-🌸"}},[s._v("#")]),s._v(" 30.Linux性能优化实战(极客时间)🌸")]),s._v(" "),a("h3",{attrs:{id:"开篇词"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开篇词"}},[s._v("#")]),s._v(" 开篇词")]),s._v(" "),a("h4",{attrs:{id:"开篇词-别再让linux性能问题成为你的绊脚石"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开篇词-别再让linux性能问题成为你的绊脚石"}},[s._v("#")]),s._v(" 开篇词-别再让Linux性能问题成为你的绊脚石")]),s._v(" "),a("p",[s._v("你好, 我是倪朋飞, 微软 Azure 的资深工程师, 同时也是 Kubernetes 项目维护者, 主要负责开源容器编排系统 Kubernetes 在 Azure 的落地实践.")]),s._v(" "),a("p",[s._v('一直以来, 我都在云计算领域工作. 对于服务器性能的关注, 可以追溯到我刚参加工作那会儿. 为什么那么早就开始探索性能问题呢? 其实是源于一次我永远都忘不了的"事故". 那会儿我在盛大云工作, 忙活了大半夜把产品发布上线后, 刚刚躺下打算休息, 却突然收到大量的告警. 匆忙爬起来登录到服务器之后, 我发现有一些系统进程的 CPU 使用率高达 100%. 当时我完全是两眼一抹黑, 可以说是只能看到症状, 却完全不知道该从哪儿下手去排查和解决它. 直到最后, 我也没能想到好办法, 这次发布也成了我心中之痛.')]),s._v(" "),a("p",[s._v("从那之后, 我开始到处查看各种相关书籍, 从操作系统原理, 到 Linux 内核, 再到硬件驱动程序等等. 可是, 学了那么多知识之后, 我还是不能很快解决类似的性能问题.")]),s._v(" "),a("p",[s._v("于是, 我又通过网络搜索, 或者请教公司的技术大拿, 学习了大量性能优化的思路和方法, 这期间尝试了大量的 Linux 性能工具. 在不断的实践和总结后, 我终于知道, 怎么**把观察到的性能问题跟系统原理关联起来, 特别是把系统从应用程序, 库函数, 系统调用, 再到内核和硬件等不同的层级贯穿起来. **")]),s._v(" "),a("p",[s._v('这段学习可以算得上是我的"黑暗"经历了. 我想很多人应该都有过这样的挫折. 比如:')]),s._v(" "),a("ul",[a("li",[s._v("流量高峰期, 服务器 CPU 使用率过高报警, 你登录 Linux 上去 top 完之后, 却不知道怎么进一步定位, 到底是系统 CPU 资源太少, 还是程序并发部分写的有问题?")]),s._v(" "),a("li",[s._v("系统并没有跑什么吃内存的程序, 但是敲完 free 命令之后, 却发现系统已经没有什么内存了, 那到底是哪里占用了内存? 为什么?")]),s._v(" "),a("li",[s._v("一大早就收到 Zabbix 告警, 你发现某台存放监控数据的数据库主机的 iowait 较高, 这个时候该怎么办?")])]),s._v(" "),a("p",[s._v("这些问题或者场景, 你肯定或多或少都遇到过.")]),s._v(" "),a("p",[s._v("实际上, "),a("strong",[s._v('性能优化一直都是大多数软件工程师头上的"紧箍咒"')]),s._v(" , 甚至许多工作多年的资深工程师, 也无法准确地分析出线上的很多性能问题. 性能问题为什么这么难呢? 我觉得主要是因为性能优化是个"),a("strong",[s._v("系统工程")]),s._v(", 总是牵一发而动全身. 它涉及了从程序设计, 算法分析, 编程语言, 再到系统, 存储, 网络等各种底层基础设施的方方面面. 每一个组件都有可能出问题, 而且很有可能多个组件同时出问题.")]),s._v(" "),a("p",[s._v("毫无疑问, 性能优化是软件系统中最有挑战的工作之一, 但是换个角度看, "),a("strong",[s._v("它也是最考验体现你综合能力的工作之一")]),s._v(". 如果说你能把性能优化的各个关键点吃透, 那我可以肯定地说, 你已经是一个非常优秀的软件工程师了.")]),s._v(" "),a("p",[s._v("那怎样才能掌握这个技能呢? 你可以像我前面说的那样, 花大量的时间和精力去钻研, 从内功到实战一一苦练. 当然, 那样可行, 但也会走很多弯路, 而且可能你啃了很多大块头的书, 终于拿下了最难的底层体系, 却因为缺乏实战经验, 在实际开发工作中仍然没有头绪.")]),s._v(" "),a("p",[s._v("其实, 对于大多数人来说, "),a("strong",[s._v("最好的学习方式一定是带着问题学习")]),s._v(", 而不是先去啃那几本厚厚的原理书籍, 这样很容易把自己的信心压垮.")]),s._v(" "),a("p",[s._v("我认为, "),a("strong",[s._v("学习要会抓重点")]),s._v(". 其实只要你了解少数几个系统组件的基本原理和协作方式, 掌握基本的性能指标和工具, 学会实际工作中性能优化的常用技巧, 就已经可以准确分析和优化大多数的性能问题了. 在这个认知的基础上, 再反过来去阅读那些经典的操作系统或者其它图书, 你才能事半功倍.")]),s._v(" "),a("p",[s._v("所以在这个专栏里, 我会以"),a("strong",[s._v("案例驱动")]),s._v("的思路, 给你讲解 Linux 性能的基本指标, 工具, 以及相应的观测, 分析和调优方法.")]),s._v(" "),a("p",[s._v("具体来看, 我会分为 5 个模块. 前 4 个模块会从资源使用的视角出发, 分析各种 Linux 资源可能会碰到的性能问题, 包括 "),a("strong",[s._v("CPU 性能")]),s._v(", "),a("strong",[s._v("磁盘 I/O 性能")]),s._v(", "),a("strong",[s._v("内存性能")]),s._v("以及"),a("strong",[s._v("网络性能")]),s._v(". 每个模块还由浅入深划分为四个不同的篇章.")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("基础篇")]),s._v(", 介绍 Linux 必备的基本原理以及对应的性能指标和性能工具. 比如怎么理解平均负载, 怎么理解上下文切换, Linux 内存的工作原理等等.")]),s._v(" "),a("li",[a("strong",[s._v("案例篇")]),s._v(", 这里通过模拟案例, 帮你分析高手在遇到资源瓶颈时, 是如何观测, 定位, 分析并优化这些性能问题的.")]),s._v(" "),a("li",[a("strong",[s._v("套路篇")]),s._v(", 在理解了基础, 亲身体验了模拟案例之后, 我会帮你梳理出排查问题的整体思路, 也就是检查性能问题的一般步骤, 这样以后你遇到问题, 就可以按照这样的路子来.")]),s._v(" "),a("li",[a("strong",[s._v("答疑篇")]),s._v(", 我相信在学习完每一个模块之后, 你都会有很多的问题, 在答疑篇里, 我会拿出提问频次较高的问题给你系统解答.")])]),s._v(" "),a("p",[s._v('第 5 个综合实战模块, 我将为你还原真实的工作场景, 手把手带你在"'),a("strong",[s._v("高级战场")]),s._v('"中演练, 这样你能把前面学到的所有知识融会贯通, 并且看完专栏, 马上就能用在工作中. "想要得到你就要学会付出, 要付出还要坚持; 如果你真的觉得很难, 那你就放弃, 如果你放弃了就不要抱怨. 人生就是这样, 世界是平衡的, 每个人都是通过自己的努力, 去决定自己生活的样子."')]),s._v(" "),a("h4",{attrs:{id:"_01-如何学习linux性能优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_01-如何学习linux性能优化"}},[s._v("#")]),s._v(" 01-如何学习Linux性能优化?")]),s._v(" "),a("p",[s._v("你是否也曾跟我一样, 看了很多书, 学了很多 Linux 性能工具, 但在面对 Linux 性能问题时, 还是束手无策? 实际上, 性能分析和优化始终是大多数软件工程师的一个痛点. 但面对难题, 我们真的就无解了吗?")]),s._v(" "),a("p",[s._v('在我看来, 大多数人对性能问题"投降", 原因可能只有两个. 一个是你'),a("strong",[s._v("没找到有效的方法学原理")]),s._v(', 一听到"系统", "底层"这些词就发怵, 觉得东西太难, 自己一定学不会, 自然也就无法深入学下去, 从而'),a("strong",[s._v("不能建立起性能的全局观")]),s._v(". 再一个就是, 你看到性能问题的根源太复杂, 既不懂怎么去分析, 也不能抽丝剥茧找到瓶颈. 你可能会想, 反正程序出了问题, 上网查就是了, 用别人的方法, 囫囵吞枣地多试几次, 有可能就解决了. 于是, 你懒得深究这些方法为啥有效, 更不知道为什么, 很多方法在别人的环境有效, 到你这儿就不行了.")]),s._v(" "),a("p",[s._v("所以, 相同的错误重复在犯, 相同的状况也是重复出现.")]),s._v(" "),a("p",[s._v("其实, 性能问题并没有你想像得那么难, "),a("strong",[s._v("只要理解了应用程序和系统的少数几个基本原理, 再进行大量的实战练习, 建立起整体性能的全局观")]),s._v(", 大多数性能问题的优化就会水到渠成. 很多工程师在分析应用程序所使用的第三方组件的性能时, 并不熟悉这些组件所用的编程语言, 却依然可以分析出线上问题的根源, 并能通过一些方法进行优化, 比如修改应用程序对它们的调用逻辑, 或者调整组件的配置选项等.")]),s._v(" "),a("p",[s._v("还是那句话, "),a("strong",[s._v("你不需要了解每个组件的所有实现细节")]),s._v(", 只要能理解它们最基本的工作原理和协作方式, 你也可以做到.")]),s._v(" "),a("h5",{attrs:{id:"_1-性能指标是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-性能指标是什么"}},[s._v("#")]),s._v(" 1.性能指标是什么?")]),s._v(" "),a("p",[s._v('学习性能优化的第一步, 一定是了解"性能指标"这个概念.')]),s._v(" "),a("p",[s._v('当看到性能指标时, 你会首先想到什么呢? "'),a("strong",[s._v("高并发")]),s._v('"和"'),a("strong",[s._v("响应快")]),s._v('" 一定是最先出现在你脑海里的两个词, 而它们也正对应着性能优化的'),a("mark",[a("strong",[s._v('两个核心指标--"吞吐"和"延时"')])]),s._v(" . 这两个指标是"),a("mark",[a("strong",[s._v("从应用负载的视角")])]),s._v("来考察性能, 直接影响了产品终端的用户体验. 跟它们对应的, 是"),a("mark",[a("strong",[s._v("从系统资源的视角")])]),s._v("出发的指标, 比如资源使用率, 饱和度等.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/e781e331b9052efa6e9d0d186a0cf588-20230731161933-3lw4eqi.png",alt:""}})]),s._v(" "),a("p",[s._v("随着应用负载的增加, 系统资源的使用也会升高, 甚至达到极限. 而"),a("strong",[s._v("性能问题的本质")]),s._v(", 就是系统资源已经达到瓶颈, 但请求的处理却还不够快, 无法支撑更多的请求. 性能分析, 其实就是"),a("strong",[s._v("找出应用或系统的瓶颈, 并设法去避免或者缓解它们")]),s._v(", 从而更高效地利用系统资源处理更多的请求.")]),s._v(" "),a("p",[s._v("这包含了一系列的步骤, 比如下面这六个步骤.")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("选择指标评估应用程序和系统的性能")]),s._v(";")]),s._v(" "),a("li",[a("strong",[s._v("为应用程序和系统设置性能目标")]),s._v(";")]),s._v(" "),a("li",[a("strong",[s._v("进行性能基准测试")]),s._v(";")]),s._v(" "),a("li",[a("strong",[s._v("性能分析定位瓶颈")]),s._v(";")]),s._v(" "),a("li",[a("strong",[s._v("优化系统和应用程序")]),s._v(";")]),s._v(" "),a("li",[a("strong",[s._v("性能监控和告警")]),s._v(".")])]),s._v(" "),a("p",[s._v("了解了这些性能相关的基本指标和核心步骤后, 该怎么学呢? 接下来说说要学好 Linux 性能优化的几个重要问题.")]),s._v(" "),a("blockquote",[a("p",[s._v("学这个专栏需要什么基础")])]),s._v(" "),a("p",[s._v("这个专栏的核心是性能的分析和优化, 而不是最基本的 Linux 操作系统的使用方法.")]),s._v(" "),a("p",[s._v("因而最好用过 Linux 操作系统, 然后要具备一些"),a("strong",[s._v("编程基础")]),s._v(", 比如:")]),s._v(" "),a("ul",[a("li",[s._v("了解 Linux 常用命令的使用方法;")]),s._v(" "),a("li",[s._v("知道怎么安装和管理软件包;")]),s._v(" "),a("li",[s._v("知道怎么通过编程语言开发应用程序等.")])]),s._v(" "),a("p",[s._v("这样, 在我讲性能时, 你就更容易理解性能背后的原理, 特别是在结合专栏里的案例实践后, 对性能分析能有更直观的体会. 这个专栏不会像教科书那样, 详细教你操作系统, 算法原理, 网络协议乃至各种编程语言的全部细节, 但一些重要的系统原理还是必不可少的. 我还会用实际案例一步步教你, 贯穿从应用程序到操作系统的各个组件.")]),s._v(" "),a("blockquote",[a("p",[s._v("学习的重点是什么?")])]),s._v(" "),a("p",[s._v("想要学习好性能分析和优化, "),a("strong",[s._v("建立整体系统性能的全局观")]),s._v("是最核心的话题. 因而,")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("理解最基本的几个系统知识原理")]),s._v(";")]),s._v(" "),a("li",[a("strong",[s._v("掌握必要的性能工具")]),s._v(";")]),s._v(" "),a("li",[a("strong",[s._v("通过实际的场景演练, 贯穿不同的组件")]),s._v(".")])]),s._v(" "),a("p",[s._v("这三点就是学习的重中之重. 专栏的每篇文章中, 针对不同场景, 会把这三个方面给你讲清楚.")]),s._v(" "),a("p",[s._v("其实说到性能工具, 就不得不提性能领域的大师布伦丹·格雷格(Brendan Gregg). 他不仅是动态追踪工具 DTrace 的作者, 还开发了许许多多的性能工具. 我相信你一定见过他所描绘的 Linux 性能工具图谱:")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/300131a5a064cb0c7a606dc104994b29-20230731161933-tdnn1jk.png",alt:""}})]),s._v(" "),a("p",[s._v("(图片来自"),a("a",{attrs:{href:"http://www.brendangregg.com/Perf/linux_perf_tools_full.png",target:"_blank",rel:"noopener noreferrer"}},[s._v("brendangregg.com"),a("OutboundLink")],1),s._v(")")]),s._v(" "),a("p",[s._v("这个图是 Linux 性能分析最重要的参考资料之一, 它告诉你, "),a("strong",[s._v("在 Linux 不同子系统出现性能问题后, 应该用什么样的工具来观测和分析")]),s._v(".")]),s._v(" "),a("p",[s._v("比如, 当遇到 I/O 性能问题时, 可以参考图片最下方的 I/O 子系统, 使用 iostat, iotop, blktrace 等工具分析磁盘 I/O 的瓶颈.")]),s._v(" "),a("p",[s._v("另外, 还要特别强调一点, 就是"),a("strong",[s._v("性能工具的选用")]),s._v(". 有句话是这么说的, "),a("strong",[s._v("一个正确的选择胜过千百次的努力")]),s._v(". 虽然夸张了些, 但是选用合适的性能工具, 确实可以大大简化整个性能优化过程. 在什么场景选用什么样的工具, 以及怎么学会选择合适工具, 都是我想教给你的东西.")]),s._v(" "),a("p",[s._v("但是切记, "),a("strong",[s._v("千万不要把性能工具当成学习的全部")]),s._v(". 工具只是解决问题的手段, 关键在于你的用法. 只有真正理解了它们背后的原理, 并且结合具体场景, 融会贯通系统的不同组件, 你才能真正掌握它们.")]),s._v(" "),a("p",[s._v("最后, 为了让你对性能有个全面的认识, 我画了一张思维导图, 里面涵盖了大部分性能分析和优化都会包含的知识, 专栏中也基本都会讲到. 你可以保存或者打印下来, 每学会一部分就标记出来, 记录并把握自己的学习进度.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/c1270db676f656c14ecbd7c310b4555f-20230731161933-ltn6er5.png",alt:""}})]),s._v(" "),a("blockquote",[a("p",[s._v("怎么学更高效?")])]),s._v(" "),a("p",[s._v("前面讲了 Linux 性能优化的学习重点, 接下来再分享一下几个学习技巧. 掌握这些技巧, 可以让你学得更轻松.")]),s._v(" "),a("p",[s._v("**技巧一: 虽然系统的原理很重要, 但在刚开始一定不要试图抓住所有的实现细节. **")]),s._v(" "),a("p",[s._v("深陷到系统实现的内部, 可能会让你丢掉学习的重点, 而且繁杂的实现逻辑, 很可能会打退你学习的积极性. 所以, 我个人观点是一定要适度.")]),s._v(" "),a("p",[s._v("你可以先学会这些系统工作原理, 但不要去深究 Linux 内核是如何做到的, 而是要把重点放到如何观察和运用这些原理上, 比如:")]),s._v(" "),a("ul",[a("li",[s._v("有哪些指标可以衡量性能?")]),s._v(" "),a("li",[s._v("使用什么样的性能工具来观察指标?")]),s._v(" "),a("li",[s._v("导致这些指标变化的因素等.")])]),s._v(" "),a("p",[s._v("**技巧二: 边学边实践, 通过大量的案例演习掌握 Linux 性能的分析和优化. **")]),s._v(" "),a("p",[s._v("只有通过在机器上练习, 把讲的知识和案例自己过一遍, 这些东西才能转化成你的. 我精心设计这些案例, 正是为了让你有更好的学习理解和操作体验. 所以强烈推荐你去实际运行, 分析这些案例, 或者用学到的知识去分析你自己的系统, 这样你会有更直观的感受, 获得更好的学习效果.")]),s._v(" "),a("p",[s._v("**技巧三: 勤思考, 多反思, 善总结, 多问为什么. **")]),s._v(" "),a("p",[s._v("想真正学懂一门知识, 最好的方法就是问问题. 当你能提出好的问题时, 就说明你已经深入了解了它.")]),s._v(" "),a("h3",{attrs:{id:"cpu性能篇"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cpu性能篇"}},[s._v("#")]),s._v(" CPU性能篇")]),s._v(" "),a("h4",{attrs:{id:"_02-基础篇-到底应该怎么理解-平均负载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_02-基础篇-到底应该怎么理解-平均负载"}},[s._v("#")]),s._v(' 02-基础篇:到底应该怎么理解"平均负载"?')]),s._v(" "),a("p",[s._v("每次发现系统变慢时, 大家通常做的第一件事, 就是"),a("strong",[s._v("执行 top 或者 uptime 命令")]),s._v(", 来了解系统的"),a("strong",[s._v("负载情况")]),s._v(". 比如在命令行里输入了 uptime 命令, 系统也随即给出了结果.")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("uptime")]),s._v("\n02:34:03 up "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" days, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v(":14,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" user,  load average: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.63")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.83")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.88")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("那你真的知道这里每列输出的含义吗?")]),s._v(" "),a("p",[s._v("我相信你对前面的几列比较熟悉, 它们分别是"),a("strong",[s._v("当前时间, 系统运行时间以及正在登录用户数")]),s._v(".")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("02:34:03              // 当前时间\nup "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" days, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v(":14      // 系统运行时间\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" user                // 正在登录用户数\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("而最后三个数字呢, "),a("strong",[s._v("依次则是过去 1 分钟, 5 分钟, 15 分钟的平均负载(Load Average)")]),s._v(" .")]),s._v(" "),a("p",[a("strong",[s._v("平均负载")]),s._v('? 这个词对很多人来说, 可能既熟悉又陌生. 我就遇到过这样的一个场景. 公司一个实习生一直追问我, 什么是平均负载, 我支支吾吾半天, 最后也没能解释明白. 明明总看到也总会用到, 怎么就说不明白呢? 后来我静下来想想, 其实还是自己的功底不够. 于是这几年, 我遇到问题, 特别是基础问题, 都会多问自己几个 "为什么", 以求能够彻底理解现象背后的本质原理, 用起来更灵活, 也更有底气.')]),s._v(" "),a("p",[s._v("本节就来学习下, "),a("strong",[s._v("如何观测和理解这个最常见, 也是最重要的系统指标")]),s._v(".")]),s._v(" "),a("p",[s._v("一定有人会说, 平均负载不就是单位时间内的 CPU 使用率吗? 上面的 0.63, 就代表 CPU 使用率是 63%. 其实并不是这样, 可以通过执行 man uptime 命令, 来了解平均负载的详细解释.")]),s._v(" "),a("p",[s._v("简单来说, "),a("mark",[a("strong",[s._v("平均负载是指单位时间内, 系统处于可运行状态和不可中断状态的平均进程数, 也就是平均活跃进程数, 它和 CPU 使用率并没有直接关系")])]),s._v(". 这里先解释下, 可运行状态和不可中断状态这俩词儿.")]),s._v(" "),a("p",[a("strong",[s._v("所谓可运行状态的进程, 是指正在使用 CPU 或者正在等待 CPU 的进程, 也就是 ps 命令看到的, 处于 R 状态(Running 或 Runnable)的进程")]),s._v(".")]),s._v(" "),a("p",[a("strong",[s._v("不可中断状态的进程则是正处于内核态关键流程中的进程, 并且这些流程是不可打断的, 比如最常见的是等待硬件设备的 I/O 响应, 也就是在 ps 命令中看到的 D 状态(Uninterruptible Sleep, 也称为 Disk Sleep)的进程.")])]),s._v(" "),a("p",[s._v("比如, 当一个进程向磁盘读写数据时, 为了保证数据的一致性, 在得到磁盘回复前, 它是不能被其他进程或者中断打断的, 这个时候的进程就处于"),a("strong",[s._v("不可中断状态")]),s._v(". 如果此时的进程被打断了, 就容易出现磁盘数据与进程数据不一致的问题.")]),s._v(" "),a("p",[s._v("所以, "),a("strong",[s._v("不可中断状态实际上是系统对进程和硬件设备的一种保护机制")]),s._v(".")]),s._v(" "),a("p",[s._v("因此可以简单理解为, "),a("strong",[s._v("平均负载其实就是平均活跃进程数")]),s._v('. 平均活跃进程数, 直观上的理解就是单位时间内的活跃进程数, 但它实际上是活跃进程数的指数衰减平均值. 这个 "指数衰减平均" 的详细含义不用计较, 这只是系统的一种更快速的计算方式, 把它直接当成活跃进程数的平均值也没问题.')]),s._v(" "),a("p",[a("strong",[s._v("既然平均的是活跃进程数")]),s._v(", 那么最理想的, 就是每个 CPU 上都刚好运行着一个进程, 这样每个 CPU 都得到了充分利用. 比如当平均负载为 2 时, 意味着什么呢?")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("在只有 2 个 CPU 的系统上, 意味着所有的 CPU 都刚好被完全占用")]),s._v(".")]),s._v(" "),a("li",[a("strong",[s._v("在 4 个 CPU 的系统上, 意味着 CPU 有 50% 的空闲")]),s._v(".")]),s._v(" "),a("li",[a("strong",[s._v("而在只有 1 个 CPU 的系统中, 则意味着有一半的进程竞争不到 CPU")]),s._v(".")])]),s._v(" "),a("h5",{attrs:{id:"_1-平均负载为多少时合理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-平均负载为多少时合理"}},[s._v("#")]),s._v(" 1.平均负载为多少时合理")]),s._v(" "),a("p",[s._v("讲完了什么是平均负载, 现在再回到最开始的例子, 不知道你能否判断出, 在 uptime 命令的结果里, 那三个时间段的平均负载数, 多大的时候能说明系统负载高? 或是多小的时候就能说明系统负载很低呢?")]),s._v(" "),a("p",[a("mark",[a("strong",[s._v("平均负载最理想的情况是等于 CPU 个数")])]),s._v(". 所以在评判平均负载时, "),a("strong",[s._v("首先要知道系统有几个 CPU")]),s._v(", 这可以通过 top 命令或者从文件 "),a("code",[s._v("/proc/cpuinfo")]),s._v("​ 中读取, 比如:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'model name'")]),s._v(" /proc/cpuinfo "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("wc")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-l")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[a("strong",[s._v("有了 CPU 个数, 就可以判断出, 当平均负载比 CPU 个数还大的时候, 系统已经出现了过载.")])]),s._v(" "),a("p",[s._v("不过, 新的问题又来了. 在例子中可以看到, 平均负载有三个数值, 到底该参考哪一个呢?")]),s._v(" "),a("p",[s._v("实际上, 都要看. 三个不同时间间隔的平均值, 其实提供了, 分析"),a("strong",[s._v("系统负载趋势")]),s._v("的数据来源, 就能更全面, 更立体地理解目前的负载状况.")]),s._v(" "),a("p",[s._v("比如初秋时北京的天气, 如果只看中午的温度, 你可能以为还在 7 月份的大夏天. 但如果你结合了早上, 中午, 晚上三个时间点的温度来看, 基本就可以全方位了解这一天的天气情况了.")]),s._v(" "),a("p",[s._v("同样的, 前面说到的 CPU 的三个负载时间段也是这个道理.")]),s._v(" "),a("ul",[a("li",[s._v("如果 1 分钟, 5 分钟, 15 分钟的三个值基本相同, 或者相差不大, 那就说明系统负载很平稳.")]),s._v(" "),a("li",[s._v("但如果 1 分钟的值远小于 15 分钟的值, 就说明系统最近 1 分钟的负载在减少, 而过去 15 分钟内却有很大的负载.")]),s._v(" "),a("li",[s._v("反过来, 如果 1 分钟的值远大于 15 分钟的值, 就说明最近 1 分钟的负载在增加, 这种增加有可能只是临时性的, 也有可能还会持续增加下去, 所以就需要持续观察. 一旦 1 分钟的平均负载接近或超过了 CPU 的个数, 就意味着系统正在发生过载的问题, 这时就得分析调查是哪里导致的问题, 并要想办法优化了.")])]),s._v(" "),a("p",[s._v("再举个例子, 假设在一个单 CPU 系统上看到平均负载为 1.73, 0.60, 7.98, 那么说明在过去 1 分钟内, 系统"),a("strong",[s._v("有 73% 的超载")]),s._v(", 而在 15 分钟内, 有 698% 的超载, 从整体趋势来看, "),a("strong",[s._v("系统的负载在降低")]),s._v(".")]),s._v(" "),a("p",[s._v("那么, 在实际生产环境中, 平均负载多高时, 需要重点关注呢?")]),s._v(" "),a("p",[s._v("在我看来, "),a("strong",[s._v("当平均负载高于 CPU 数量 70% 的时候")]),s._v(", 就应该分析排查负载高的问题了. 一旦负载过高, 就可能导致进程响应变慢, 进而影响服务的正常功能.")]),s._v(" "),a("p",[s._v("但 70% 这个数字并不是绝对的, 最推荐的方法, 还是把系统的平均负载监控起来, 然后根据更多的历史数据, 判断负载的变化趋势. 当发现负载有明显升高趋势时, 比如说负载翻倍了, 你再去做分析和调查.")]),s._v(" "),a("h5",{attrs:{id:"_2-平均负载与cpu使用率"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-平均负载与cpu使用率"}},[s._v("#")]),s._v(" 2.平均负载与CPU使用率")]),s._v(" "),a("p",[s._v("现实工作中, 经常容易把"),a("strong",[s._v("平均负载和 CPU 使用率混淆")]),s._v(", 所以在这里也做一个区分.")]),s._v(" "),a("p",[s._v("可能你会疑惑, 既然平均负载代表的是活跃进程数, 那平均负载高了, 不就意味着 CPU 使用率高吗?")]),s._v(" "),a("p",[s._v("还是要回到平均负载的含义上来, "),a("mark",[a("strong",[s._v("平均负载是指单位时间内, 处于可运行状态和不可中断状态的进程数. 所以, 它不仅包括了正在使用 CPU 的进程, 还包括等待 CPU 和等待 I/O 的进程")])]),s._v(".")]),s._v(" "),a("p",[a("mark",[a("strong",[s._v("而 CPU 使用率, 是单位时间内 CPU 繁忙情况的统计, 跟平均负载并不一定完全对应")])]),s._v(". 比如:")]),s._v(" "),a("ul",[a("li",[s._v("CPU 密集型进程, 使用大量 CPU 会导致平均负载升高, 此时这两者是一致的;")]),s._v(" "),a("li",[s._v("I/O 密集型进程, 等待 I/O 也会导致平均负载升高, "),a("strong",[s._v("但 CPU 使用率不一定很高")]),s._v(";")]),s._v(" "),a("li",[s._v("大量等待 CPU 的进程调度也会导致平均负载升高, 此时的 CPU 使用率也会比较高.")])]),s._v(" "),a("h5",{attrs:{id:"_3-平均负载案例分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-平均负载案例分析"}},[s._v("#")]),s._v(" 3.平均负载案例分析")]),s._v(" "),a("p",[s._v("下面以三个示例分别来看这三种情况, 并用 "),a("strong",[s._v("iostat, mpstat, pidstat")]),s._v(" 等工具, 找出平均负载升高的根源. 因为案例分析都是基于机器上的操作, 所以不要只是听听, 看看就够了, 最好还是实际操作一下.")]),s._v(" "),a("h6",{attrs:{id:"_1-准备工作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-准备工作"}},[s._v("#")]),s._v(" (1)准备工作")]),s._v(" "),a("p",[s._v("下面的案例都是基于 Ubuntu 18.04, 当然同样适用于其他 Linux 系统. 使用的案例环境如下所示.")]),s._v(" "),a("ul",[a("li",[s._v("机器配置: 2 CPU, 8GB 内存.")]),s._v(" "),a("li",[s._v("预先安装 stress 和 sysstat 包, 如 apt install stress sysstat.")])]),s._v(" "),a("p",[s._v("在这里先简单介绍一下 stress 和 sysstat.")]),s._v(" "),a("p",[s._v("stress 是一个 Linux 系统压力测试工具, 这里用作"),a("strong",[s._v("异常进程模拟平均负载升高的场景")]),s._v(".")]),s._v(" "),a("p",[s._v("而 sysstat 包含了常用的 Linux 性能工具, 用来监控和分析系统的性能. 案例会用到这个包的两个命令 "),a("strong",[s._v("mpstat")]),s._v(" 和 "),a("strong",[s._v("pidstat")]),s._v(".")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("mpstat 是一个常用的多核 CPU 性能分析工具, 用来实时查看每个 CPU 的性能指标, 以及所有 CPU 的平均指标.")])]),s._v(" "),a("li",[a("strong",[s._v("pidstat 是一个常用的进程性能分析工具, 用来实时查看进程的 CPU, 内存, I/O 以及上下文切换等性能指标.")])])]),s._v(" "),a("p",[s._v("此外, 每个场景都需要开三个终端, 登录到同一台 Linux 机器中.")]),s._v(" "),a("p",[s._v("另外要注意, 下面的所有命令, 都是默认以 root 用户运行. 如果上面的要求都已经完成了, 可以先用 uptime 命令, 看一下测试前的平均负载情况:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("uptime")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".,  load average: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.11")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.15")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.09")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h6",{attrs:{id:"_2-场景一-cpu密集型进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-场景一-cpu密集型进程"}},[s._v("#")]),s._v(" (2)场景一:CPU密集型进程")]),s._v(" "),a("p",[s._v("首先在第一个终端运行 stress 命令, 模拟一个 CPU 使用率 100% 的场景:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ stress "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--cpu")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--timeout")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("600")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("接着, 在第二个终端运行 uptime 查看平均负载的变化情况:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -d 参数表示高亮显示变化的区域")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("watch")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("uptime")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".,  load average: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.00")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.75")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.39")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("最后, 在第三个终端"),a("strong",[s._v("运行 mpstat 查看 CPU 使用率")]),s._v("的变化情况:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -P ALL 表示监控所有 CPU, 后面数字 5 表示间隔 5 秒后输出一组数据")]),s._v("\n$ mpstat "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-P")]),s._v(" ALL "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\nLinux "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.15")]),s._v(".0 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ubuntu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" 09/22/18 _x86_64_ "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" CPU"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v(":30:06     CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v(":30:11     all   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("50.05")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("49.95")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v(":30:11       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100.00")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v(":30:11       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v(" \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("从终端二中可以看到, "),a("strong",[s._v("1 分钟的平均负载会慢慢增加到 1.00")]),s._v(", 而从终端三中还可以看到, 正好有一个 CPU 的使用率为 100%, 但它的 iowait 只有 0. 这说明, 平均负载的升高正是"),a("strong",[s._v("由于 CPU 使用率为 100%")]),s._v(" .")]),s._v(" "),a("p",[s._v("那么, 到底是哪个进程导致了 CPU 使用率为 100% 呢? 可以使用 pidstat 来查询:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 间隔 5 秒后输出一组数据")]),s._v("\n$ pidstat "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-u")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v(":37:07      "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("UID")]),s._v("       PID    %usr %system  %guest   %wait    %CPU   CPU  Command\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v(":37:12        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2962")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  stress\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("从这里可以明显看到, "),a("strong",[s._v("stress 进程")]),s._v("的 CPU 使用率为 100%.")]),s._v(" "),a("h6",{attrs:{id:"_3-场景二-i-o密集型进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-场景二-i-o密集型进程"}},[s._v("#")]),s._v(" (3)场景二:I/O密集型进程")]),s._v(" "),a("p",[s._v("首先还是运行 stress 命令, 但这次模拟 I/O 压力, 即不停地执行 sync:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ stress "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-i")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--timeout")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("600")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("还是在第二个终端运行 uptime 查看平均负载的变化情况:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("watch")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("uptime")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".,  load average: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.06")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.58")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.37")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("然后, 第三个终端"),a("strong",[s._v("运行 mpstat 查看 CPU 使用率的变化情况")]),s._v(":")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示所有 CPU 的指标, 并在间隔 5 秒输出一组数据")]),s._v("\n$ mpstat "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-P")]),s._v(" ALL "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nLinux "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.15")]),s._v(".0 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ubuntu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("     09/22/18     _x86_64_    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" CPU"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v(":41:28     CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v(":41:33     all    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.21")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12.07")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("32.67")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.21")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("54.84")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v(":41:33       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.43")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("23.87")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("67.53")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.43")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.74")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v(":41:33       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.81")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.20")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("98.99")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("从这里可以看到, 1 分钟的平均负载会慢慢增加到 1.06, 其中一个 CPU 的系统 CPU 使用率升高到了 23.87, 而 iowait 高达 67.53%. 这说明, "),a("strong",[s._v("平均负载的升高是由于 iowait 的升高")]),s._v(".")]),s._v(" "),a("p",[s._v("那么到底是哪个进程, 导致 iowait 这么高呢? 还是用 pidstat 来查询:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 间隔 5 秒后输出一组数据, -u 表示 CPU 指标")]),s._v("\n$ pidstat "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-u")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nLinux "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.15")]),s._v(".0 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ubuntu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("     09/22/18     _x86_64_    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" CPU"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v(":42:08      "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("UID")]),s._v("       PID    %usr %system  %guest   %wait    %CPU   CPU  Command\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v(":42:13        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("104")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.39")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.39")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  kworker/1:1H\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v(":42:13        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("109")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.40")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.40")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  kworker/0:1H\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v(":42:13        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2997")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("35.53")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.99")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("37.52")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  stress\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v(":42:13        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3057")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.40")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.40")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  pidstat\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("可以发现, 还是 stress 进程导致的.")]),s._v(" "),a("h6",{attrs:{id:"_4-场景三-大量进程的场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-场景三-大量进程的场景"}},[s._v("#")]),s._v(" (4)场景三:大量进程的场景")]),s._v(" "),a("p",[s._v("当系统中运行进程超出 CPU 运行能力时, 就会出现等待 CPU 的进程.")]),s._v(" "),a("p",[s._v("比如还是使用 stress, 但这次模拟的是 8 个进程:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ stress "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--timeout")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("600")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("由于系统只有 2 个 CPU, 明显比 8 个进程要少得多, 因而系统的 CPU 处于严重过载状态, 平均负载高达 7.97:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("uptime")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".,  load average: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.97")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5.93")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.02")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("接着再运行 pidstat 来看一下进程的情况:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 间隔 5 秒后输出一组数据")]),s._v("\n$ pidstat "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-u")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":23:25      "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("UID")]),s._v("       PID    %usr %system  %guest   %wait    %CPU   CPU  Command\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":23:30        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3190")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("25.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("74.80")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("25.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  stress\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":23:30        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3191")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("25.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("75.20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("25.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  stress\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":23:30        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3192")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("25.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("74.80")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("25.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  stress\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":23:30        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3193")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("25.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("75.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("25.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  stress\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":23:30        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3194")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24.80")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("74.60")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24.80")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  stress\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":23:30        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3195")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24.80")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("75.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24.80")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  stress\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":23:30        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3196")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24.80")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("74.60")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24.80")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  stress\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":23:30        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3197")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24.80")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("74.80")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24.80")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  stress\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":23:30        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3200")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.20")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.20")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.20")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  pidstat\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("可以看出, "),a("strong",[s._v("8 个进程在争抢 2 个 CPU, 每个进程等待 CPU 的时间(也就是 %wait 列)高达 75%")]),s._v(" . 这些超出 CPU 计算能力的进程, 最终导致 CPU 过载.")]),s._v(" "),a("h5",{attrs:{id:"_4-小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-小结"}},[s._v("#")]),s._v(" 4.小结")]),s._v(" "),a("p",[s._v("分析完这三个案例, 再来归纳一下平均负载的理解.")]),s._v(" "),a("p",[a("strong",[s._v("平均负载提供了一个快速查看系统整体性能的手段, 反映了整体的负载情况")]),s._v(". 但只看平均负载本身, 并不能直接发现, 到底是哪里出现了瓶颈. 所以在理解平均负载时, 也要注意:")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("平均负载高有可能是 CPU 密集型进程导致的")]),s._v(";")]),s._v(" "),a("li",[a("strong",[s._v("平均负载高并不一定代表 CPU 使用率高, 还有可能是 I/O 更繁忙了")]),s._v(";")]),s._v(" "),a("li",[a("strong",[s._v("当发现负载高的时候, 可以使用 mpstat, pidstat 等工具, 辅助分析负载的来源")]),s._v(".")])]),s._v(" "),a("h4",{attrs:{id:"_03-基础篇-经常说的cpu上下文切换是什么意思-上"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_03-基础篇-经常说的cpu上下文切换是什么意思-上"}},[s._v("#")]),s._v(" 03-基础篇:经常说的CPU上下文切换是什么意思?(上)")]),s._v(" "),a("p",[s._v("上一节讲了要怎么理解平均负载( Load Average), 并用三个案例展示了不同场景下平均负载升高的分析方法. 这其中, "),a("strong",[s._v("多个进程竞争 CPU 就是一个经常被我们忽视的问题")]),s._v(".")]),s._v(" "),a("p",[s._v("我想你一定很好奇, "),a("strong",[s._v("进程在竞争 CPU 的时候并没有真正运行, 为什么还会导致系统的负载升高呢")]),s._v("? 其实 "),a("strong",[s._v("CPU 上下文切换就是罪魁祸首")]),s._v(".")]),s._v(" "),a("p",[s._v("Linux 是一个多任务操作系统, 它支持远大于 CPU 数量的任务同时运行. 当然这些任务实际上并不是真的在同时运行, 而是因为"),a("strong",[s._v("系统在很短的时间内, 将 CPU 轮流分配给它们, 造成多任务同时运行的错觉")]),s._v(".")]),s._v(" "),a("p",[s._v("而在每个任务运行前, CPU 都需要知道任务从哪里加载, 又从哪里开始运行, 也就是需要系统事先帮它设置好 "),a("strong",[s._v("CPU 寄存器和程序计数器")]),s._v("(Program Counter, PC).")]),s._v(" "),a("p",[s._v("CPU 寄存器, 是 CPU 内置的容量小, 但速度极快的内存. 而程序计数器, 则是用来存储 CPU 正在执行的指令位置, 或者即将执行的下一条指令位置. 它们都是 CPU 在运行任何任务前, 必须的依赖环境, 因此也被叫做 "),a("strong",[s._v("CPU 上下文")]),s._v(".")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/d0b18f16c3eb81c3859018b9606ced32-20230731161933-fgdvxo4.png",alt:""}})]),s._v(" "),a("p",[s._v("知道了什么是 CPU 上下文, 就也很容易理解 "),a("strong",[s._v("CPU 上下文切换")]),s._v(". CPU 上下文切换, "),a("mark",[a("strong",[s._v("就是先把前一个任务的 CPU 上下文(也就是 CPU 寄存器和程序计数器)保存起来, 然后加载新任务的上下文到这些寄存器和程序计数器, 最后再跳转到程序计数器所指的新位置, 运行新任务")])]),s._v(".")]),s._v(" "),a("p",[a("strong",[s._v("而这些保存下来的上下文, 会存储在系统内核中, 并在任务重新调度执行时再次加载进来. 这样就能保证任务原来的状态不受影响, 让任务看起来还是连续运行")]),s._v(".")]),s._v(" "),a("p",[s._v("我猜肯定会有人说, CPU 上下文切换无非就是更新了 CPU 寄存器的值嘛, 但这些寄存器, 本身就是为了快速运行任务而设计的, 为什么会影响系统的 CPU 性能呢?")]),s._v(" "),a("p",[s._v('在回答这个问题前, 不知道你有没有想过, 操作系统管理的这些"任务"到底是什么呢?')]),s._v(" "),a("p",[s._v("也许你会说, 任务就是进程, 或者说任务就是线程. 是的, 进程和线程正是最常见的任务. 但是除此之外, 还有没有其他的任务呢? 不要忘了, 硬件通过触发信号, 会导致中断处理程序的调用, 也是一种常见的任务.")]),s._v(" "),a("p",[s._v("所以, 根据任务的不同, CPU 的上下文切换就可以分为几个不同的场景, 也就是"),a("mark",[a("strong",[s._v("进程上下文切换")])]),s._v("​"),a("mark",[s._v(", ")]),s._v("​"),a("mark",[a("strong",[s._v("线程上下文切换")])]),s._v("​"),a("mark",[s._v("以及")]),s._v("​"),a("mark",[a("strong",[s._v("中断上下文切换")])]),s._v(".")]),s._v(" "),a("p",[s._v("这节课就来看看, 怎么理解这几个不同的上下文切换, 以及它们为什么会引发 CPU 性能相关问题.")]),s._v(" "),a("h5",{attrs:{id:"_1-进程上下文切换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-进程上下文切换"}},[s._v("#")]),s._v(" 1.进程上下文切换")]),s._v(" "),a("p",[s._v("Linux 按照特权等级, 把进程的运行空间分为"),a("strong",[s._v("内核空间和用户空间")]),s._v(", 分别对应着下图中, CPU 特权等级的 Ring 0 和 Ring 3.")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("内核空间(Ring 0)具有最高权限, 可以直接访问所有资源")]),s._v(";")])]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("用户空间(Ring 3)只能访问受限资源, 不能直接访问内存等硬件设备, 必须通过系统调用陷入到内核中, 才能访问这些特权资源")]),s._v(".")])]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/a68ed9f2a3bbbf0d2f3880b0ede244d5-20230731161933-za0cswi.png",alt:""}})]),s._v(" "),a("p",[s._v("也就是说, "),a("mark",[a("strong",[s._v("进程既可以在用户空间运行, 又可以在内核空间中运行. 进程在用户空间运行时, 被称为进程的用户态, 而陷入内核空间的时候, 被称为进程的内核态")])]),s._v(".")]),s._v(" "),a("p",[s._v("从用户态到内核态的转变, 需要通过"),a("strong",[s._v("系统调用")]),s._v("来完成. 比如, 当查看文件内容时, 就需要多次系统调用来完成: 首先调用 open() 打开文件, 然后调用 read() 读取文件内容, 并调用 write() 将内容写到标准输出, 最后再调用 close() 关闭文件.")]),s._v(" "),a("p",[s._v("那么系统调用的过程有没有发生 CPU 上下文的切换呢? 答案自然是肯定的.")]),s._v(" "),a("p",[a("strong",[s._v("CPU 寄存器里原来用户态的指令位置, 需要先保存起来. 接着为了执行内核态代码, CPU 寄存器需要更新为内核态指令的新位置. 最后才是跳转到内核态运行内核任务")]),s._v(".")]),s._v(" "),a("p",[s._v("而系统调用结束后, CPU 寄存器需要"),a("strong",[s._v("恢复")]),s._v("原来保存的用户态, 然后再切换到用户空间, 继续运行进程. 所以一次系统调用的过程, 其实是"),a("strong",[s._v("发生了两次 CPU 上下文切换")]),s._v(".")]),s._v(" "),a("p",[s._v("不过需要注意的是, 系统调用过程中, 并不会涉及到虚拟内存等进程用户态的资源, 也不会切换进程. 这跟通常所说的进程上下文切换是不一样的:")]),s._v(" "),a("ul",[a("li",[a("mark",[a("strong",[s._v("进程上下文切换, 是指从一个进程切换到另一个进程运行")])]),s._v(".")]),s._v(" "),a("li",[a("mark",[a("strong",[s._v("而系统调用过程中一直是同一个进程在运行")])]),s._v(".")])]),s._v(" "),a("p",[s._v("所以, "),a("strong",[s._v("系统调用过程通常称为特权模式切换, 而不是上下文切换")]),s._v(". 但实际上, "),a("strong",[s._v("系统调用过程中, CPU 的上下文切换还是无法避免的")]),s._v(".")]),s._v(" "),a("p",[s._v("那么进程上下文切换跟系统调用又有什么区别呢?")]),s._v(" "),a("p",[s._v("首先需要知道, "),a("mark",[a("strong",[s._v("进程是由内核来管理和调度的, 进程的切换只能发生在内核态")])]),s._v(". 所以进程的上下文不仅包括了虚拟内存, 栈, 全局变量等用户空间的资源, 还包括了内核堆栈, 寄存器等内核空间的状态.")]),s._v(" "),a("p",[s._v("因此, 进程的上下文切换就比系统调用时多了一步: "),a("strong",[s._v("在保存当前进程的内核状态和 CPU 寄存器之前, 需要先把该进程的虚拟内存, 栈等保存下来; 而加载了下一进程的内核态后, 还需要刷新进程的虚拟内存和用户")]),s._v("栈.")]),s._v(" "),a("p",[s._v('如下图所示, 保存上下文和恢复上下文的过程并不是 "免费" 的, 需要'),a("strong",[s._v("内核在 CPU 上运行")]),s._v("才能完成.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/affeed0e95391757739a96caf35b209f-20230731161933-dmjq4py.png",alt:""}})]),s._v(" "),a("p",[s._v("根据 "),a("a",{attrs:{href:"https://blog.tsunanet.net/2010/11/how-long-does-it-take-to-make-context.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Tsuna"),a("OutboundLink")],1),s._v(" 的测试报告, "),a("strong",[s._v("每次上下文切换都需要几十纳秒到数微秒的 CPU 时间")]),s._v(". 这个时间还是相当可观的, 特别是在进程上下文切换次数较多的情况下, 很容易导致 CPU 将大量时间耗费在寄存器, 内核栈以及虚拟内存等资源的保存和恢复上, 进而大大缩短了真正运行进程的时间. 这也正是上一节中讲的, 导致平均负载升高的一个重要因素.")]),s._v(" "),a("p",[s._v("另外, "),a("strong",[s._v("Linux 通过 TLB(Translation Lookaside Buffer)来管理虚拟内存到物理内存的映射关系")]),s._v(". 当虚拟内存更新后, TLB 也需要刷新, 内存的访问也会随之变慢. 特别是在多处理器系统上, 缓存是被多个处理器共享的, 刷新缓存不仅会影响当前处理器的进程, 还会影响共享缓存的其他处理器的进程.")]),s._v(" "),a("p",[s._v("知道了进程上下文切换潜在的性能问题后, 再来看, "),a("strong",[s._v("究竟什么时候会切换进程上下文")]),s._v(".")]),s._v(" "),a("p",[s._v("显然, 进程切换时才需要切换上下文, 换句话说, "),a("mark",[a("strong",[s._v("只有在进程调度的时候, 才需要切换上下文")])]),s._v(". Linux 为每个 CPU 都维护了一个就绪队列, 将活跃进程(即正在运行和正在等待 CPU 的进程)按照优先级和等待 CPU 的时间排序, 然后选择最需要 CPU 的进程, 也就是优先级最高和等待 CPU 时间最长的进程来运行.")]),s._v(" "),a("p",[s._v("那么, 进程在什么时候才会被调度到 CPU 上运行呢?")]),s._v(" "),a("p",[s._v("最容易想到的一个时机, 就是进程执行完终止了, 它之前使用的 CPU 会释放出来, 这个时候再从就绪队列里, 拿一个新的进程过来运行. 其实还有很多其他场景, 也会触发进程调度, 在这里逐个梳理下.")]),s._v(" "),a("ul",[a("li",[s._v("其一, 为了保证所有进程可以得到公平调度, CPU 时间被划分为一段段的"),a("strong",[s._v("时间")]),s._v("片, 这些时间片再被轮流分配给各个进程. 这样, "),a("strong",[s._v("当某个进程的时间片耗尽了, 就会被系统挂起, 切换到其它正在等待 CPU 的进程运行")]),s._v(".")]),s._v(" "),a("li",[s._v("其二, 进程在"),a("strong",[s._v("系统资源不足(比如内存不足)时, 要等到资源满足后才可以运行, 这个时候进程也会被挂起")]),s._v(", 并由系统调度其他进程运行.")]),s._v(" "),a("li",[s._v("其三, 当进程通过"),a("strong",[s._v("睡眠函数 sleep 这样的方法将自己主动挂起时")]),s._v(", 自然也会重新调度.")]),s._v(" "),a("li",[s._v("其四, 当"),a("strong",[s._v("有优先级更高的进程运行时")]),s._v(", 为了保证高优先级进程的运行, 当前进程会被挂起, 由高优先级进程来运行.")]),s._v(" "),a("li",[s._v("最后一个, 发生"),a("strong",[s._v("硬件中断时, CPU 上的进程会被中断挂起")]),s._v(", 转而执行内核中的中断服务程序.")])]),s._v(" "),a("p",[s._v("了解这几个场景是非常有必要的, 因为一旦出现上下文切换的性能问题, 它们就是幕后凶手.")]),s._v(" "),a("h5",{attrs:{id:"_2-线程上下文切换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-线程上下文切换"}},[s._v("#")]),s._v(" 2.线程上下文切换")]),s._v(" "),a("p",[s._v("说完了进程的上下文切换, 再来看看线程相关的问题.")]),s._v(" "),a("p",[s._v("线程与进程最大的区别在于, "),a("mark",[a("strong",[s._v("线程是调度的基本单位, 而进程则是资源拥有的基本单位")])]),s._v(". 说白了, 所谓内核中的任务调度, "),a("strong",[s._v("实际上的调度对象是线程")]),s._v("; 而进程只是给线程提供了虚拟内存, 全局变量等资源. 所以, 对于线程和进程, 我们可以这么理解:")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("当进程只有一个线程时, 可以认为进程就等于线程")]),s._v(".")]),s._v(" "),a("li",[a("strong",[s._v("当进程拥有多个线程时, 这些线程会共享相同的虚拟内存和全局变量等资源. 这些资源在上下文切换时是不需要修改的")]),s._v(".")]),s._v(" "),a("li",[a("strong",[s._v("另外, 线程也有自己的私有数据, 比如栈和寄存器等, 这些在上下文切换时也是需要保存的")]),s._v(".")])]),s._v(" "),a("p",[s._v("这么一来, 线程的上下文切换其实就可以分为两种情况:")]),s._v(" "),a("ul",[a("li",[s._v("第一种, "),a("strong",[s._v("前后两个线程属于不同进程")]),s._v(". 此时, 因为资源不共享, 所以切换过程就跟进程上下文切换是一样.")]),s._v(" "),a("li",[s._v("第二种, "),a("strong",[s._v("前后两个线程属于同一个进程")]),s._v(". 此时, 因为虚拟内存是共享的, 所以在切换时, 虚拟内存这些资源就保持不动, 只需要切换线程的私有数据, 寄存器等不共享的数据.")])]),s._v(" "),a("p",[s._v("到这里你应该也发现了, 虽然同为上下文切换, "),a("strong",[s._v("但同进程内的线程切换, 要比多进程间的切换消耗更少的资源")]),s._v(", 而这也正是多线程代替多进程的一个优势.")]),s._v(" "),a("h5",{attrs:{id:"_3-中断上下文切换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-中断上下文切换"}},[s._v("#")]),s._v(" 3.中断上下文切换")]),s._v(" "),a("p",[s._v("除了前面两种上下文切换, 还有一个场景也会切换 CPU 上下文, 那就是中断.")]),s._v(" "),a("p",[s._v("为了快速响应硬件的事件, "),a("mark",[a("strong",[s._v("中断处理会打断进程的正常调度和执行, 转而调用中断处理程序, 响应设备事件")])]),s._v(". 而在打断其他进程时, 就需要将进程当前的状态保存下来, 这样在中断结束后, 进程仍然可以从原来的状态恢复运行.")]),s._v(" "),a("p",[s._v("跟进程上下文不同, "),a("strong",[s._v("中断上下文切换并不涉及到进程的用户态")]),s._v(". 所以, 即便中断过程打断了一个正处在用户态的进程, 也不需要保存和恢复这个进程的虚拟内存, 全局变量等用户态资源. 中断上下文, 其实只包括内核态中断服务程序执行所必需的状态, 包括 CPU 寄存器, 内核堆栈, 硬件中断参数等.")]),s._v(" "),a("p",[a("mark",[a("strong",[s._v("对同一个 CPU 来说, 中断处理比进程拥有更高的优先级")])]),s._v(", 所以中断上下文切换并不会与进程上下文切换同时发生. 同样道理, 由于中断会打断正常进程的调度和执行, 所以"),a("strong",[s._v("大部分中断处理程序都短小精悍")]),s._v(", 以便尽可能快的执行结束.")]),s._v(" "),a("p",[s._v("另外, 跟进程上下文切换一样, 中断上下文切换也需要消耗 CPU, 切换次数过多也会耗费大量的 CPU, 甚至严重降低系统的整体性能. 所以, 当发现中断次数过多时, 就需要注意去排查它是否会给系统带来严重的性能问题.")]),s._v(" "),a("h5",{attrs:{id:"_4-小结-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-小结-2"}},[s._v("#")]),s._v(" 4.小结")]),s._v(" "),a("p",[s._v("总结一下, 不管是哪种场景导致的上下文切换, 都应该知道:")]),s._v(" "),a("ol",[a("li",[s._v("CPU 上下文切换, 是保证 Linux 系统正常工作的核心功能之一, 一般情况下不需要特别关注.")]),s._v(" "),a("li",[a("strong",[s._v("但过多的上下文切换, 会把 CPU 时间消耗在寄存器, 内核栈以及虚拟内存等数据的保存和恢复上, 从而缩短进程真正运行的时间, 导致系统的整体性能大幅下降")]),s._v(".")])]),s._v(" "),a("p",[s._v("本节主要介绍这几种上下文切换的工作原理, 下一节将继续案例实战, 说说上下文切换问题的分析方法.")]),s._v(" "),a("h4",{attrs:{id:"_04-基础篇-经常说的cpu上下文切换是什么意思-下"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_04-基础篇-经常说的cpu上下文切换是什么意思-下"}},[s._v("#")]),s._v(" 04-基础篇:经常说的CPU上下文切换是什么意思?(下)")]),s._v(" "),a("p",[s._v("上一节讲了 CPU 上下文切换的工作原理. 简单回顾一下, CPU 上下文切换是保证 Linux 系统正常工作的一个核心功能, 按照不同场景, 可以分为"),a("mark",[a("strong",[s._v("进程上下文切换, 线程上下文切换和中断上下文切换")])]),s._v(".")]),s._v(" "),a("p",[s._v("今天就接着来看, 究竟怎么分析 CPU 上下文切换的问题.")]),s._v(" "),a("h5",{attrs:{id:"_1-怎么查看系统的上下文切换情况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-怎么查看系统的上下文切换情况"}},[s._v("#")]),s._v(" 1.怎么查看系统的上下文切换情况")]),s._v(" "),a("p",[s._v("通过前面学习可知, 过多的上下文切换, "),a("strong",[s._v("会把 CPU 时间消耗在寄存器, 内核栈以及虚拟内存等数据的保存和恢复上, 缩短进程真正运行的时间")]),s._v(", 成了系统性能大幅下降的一个元凶.")]),s._v(" "),a("p",[s._v("既然上下文切换对系统性能影响那么大, 你肯定迫不及待想知道, 到底要怎么查看上下文切换呢? 在这里可以使用 vmstat 这个工具, 来查询系统的上下文切换情况. "),a("strong",[s._v("vmstat 是一个常用的系统性能分析工具, 主要用来分析系统的内存使用情况, 也常用来分析 CPU 上下文切换和中断的次数")]),s._v(".")]),s._v(" "),a("p",[s._v("比如, 下面就是一个 vmstat 的使用示例:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 每隔 5 秒输出 1 组数据")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("vmstat")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\nprocs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----\n r  b   swpd   "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("free")]),s._v("   buff  cache   si   so    bi    bo   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v("   cs us sy "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("id")]),s._v(" wa st\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7005360")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("91564")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("818900")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("25")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("33")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("重点强调下需要特别关注的四列内容:")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("cs(context switch)是每秒上下文切换的次数")]),s._v(".")]),s._v(" "),a("li",[a("strong",[s._v("in(interrupt)则是每秒中断的次数")]),s._v(".")]),s._v(" "),a("li",[a("strong",[s._v("r(Running or Runnable)是就绪队列的长度")]),s._v(", 也就是正在运行和等待 CPU 的进程数.")]),s._v(" "),a("li",[a("strong",[s._v("b(Blocked)则是处于不可中断睡眠状态的进程数")]),s._v(".")])]),s._v(" "),a("p",[s._v("可以看到, 这个例子中的上下文切换次数 cs 是 33 次, 而系统中断次数 in 则是 25 次, 而就绪队列长度 r 和不可中断状态进程数 b 都是 0.")]),s._v(" "),a("p",[s._v("vmstat 只给出了系统"),a("strong",[s._v("总体的上下文切换情况")]),s._v(", 要想查看每个进程的详细情况, 就需要使用前面提到过的 "),a("strong",[s._v("pidstat")]),s._v(" 了. 给它加上 -w 选项, 就可以查看每个进程上下文切换的情况了.")]),s._v(" "),a("p",[s._v("比如:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 每隔 5 秒输出 1 组数据")]),s._v("\n$ pidstat "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-w")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\nLinux "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.15")]),s._v(".0 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ubuntu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  09/23/18  _x86_64_  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" CPU"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n \n08:18:26      "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("UID")]),s._v("       PID   cswch/s nvcswch/s  Command\n08:18:31        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.20")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("  systemd\n08:18:31        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5.40")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("  rcu_sched\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("这个结果中有两列内容是重点关注对象. 一个是 "),a("strong",[s._v("cswch , 表示每秒自愿上下文切换(voluntary context switches)的次数, 另一个则是 nvcswch , 表示每秒非自愿上下文切换(non voluntary context switches)的次数")]),s._v(".")]),s._v(" "),a("p",[s._v("这两个概念一定要牢牢记住, 因为它们意味着不同的性能问题:")]),s._v(" "),a("ul",[a("li",[s._v("所谓"),a("mark",[a("strong",[s._v("自愿上下文切换")])]),s._v("​ "),a("strong",[s._v(", 是指进程无法获取所需资源, 导致的上下文切换")]),s._v(". 比如 I/O, 内存等系统资源不足时, 就会发生自愿上下文切换.")]),s._v(" "),a("li",[s._v("而"),a("mark",[a("strong",[s._v("非自愿上下文切换")])]),s._v("​ "),a("strong",[s._v(", 则是指进程由于时间片已到等原因, 被系统强制调度, 进而发生的上下文切换")]),s._v(". 比如说, 大量进程都在争抢 CPU 时, 就容易发生非自愿上下文切换.")])]),s._v(" "),a("h5",{attrs:{id:"_2-案例分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-案例分析"}},[s._v("#")]),s._v(" 2.案例分析")]),s._v(" "),a("p",[s._v("知道了怎么查看这些指标, 另一个问题又来了, 上下文切换频率是多少次才算正常呢? 别急着要答案, 同样的, 先来看一个上下文切换的案例. 通过案例实战演练, 你自己就可以分析并找出这个标准了.")]),s._v(" "),a("h6",{attrs:{id:"_1-准备工作-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-准备工作-2"}},[s._v("#")]),s._v(" (1)准备工作")]),s._v(" "),a("p",[s._v("本节将使用 sysbench 来模拟系统多线程调度切换的情况.")]),s._v(" "),a("p",[a("strong",[s._v("sysbench 是一个多线程的基准测试工具, 一般用来评估不同系统参数下的数据库负载情况")]),s._v(". 当然, 在这次案例中, 只把它当成一个异常进程来看, 作用是模拟上下文切换过多的问题.")]),s._v(" "),a("p",[s._v("下面的案例基于 Ubuntu 18.04, 当然其他的 Linux 系统同样适用. 我使用的案例环境如下所示:")]),s._v(" "),a("ul",[a("li",[s._v("机器配置: 2 CPU, 8GB 内存")]),s._v(" "),a("li",[s._v("预先安装 sysbench 和 sysstat 包, 如 apt install sysbench sysstat")])]),s._v(" "),a("p",[s._v("正式操作开始前, 需要打开三个终端, 登录到同一台 Linux 机器中, 并安装好上面提到的两个软件包.")]),s._v(" "),a("p",[s._v("另外注意, 下面所有命令, 都"),a("strong",[s._v("默认以 root 用户运行")]),s._v(". 所以, 如果是用普通用户登陆的系统, 记住先运行 sudo su root 命令切换到 root 用户.")]),s._v(" "),a("p",[s._v("安装完成后, 可以先用 vmstat 看一下空闲系统的上下文切换次数:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 间隔 1 秒后输出 1 组数据")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("vmstat")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nprocs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----\n r  b   swpd   "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("free")]),s._v("   buff  cache   si   so    bi    bo   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v("   cs us sy "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("id")]),s._v(" wa st\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6984064")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("92668")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("830896")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("19")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("19")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("35")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("99")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("可以看到, 现在的上下文切换次数 cs 是 35, 而中断次数 in 是 19, r 和 b 都是 0. 因为这会儿并没有运行其他任务, 所以它们就是空闲系统的上下文切换次数.")]),s._v(" "),a("h6",{attrs:{id:"_2-操作和分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-操作和分析"}},[s._v("#")]),s._v(" (2)操作和分析")]),s._v(" "),a("p",[s._v("接下来正式进入实战操作.")]),s._v(" "),a("p",[s._v("首先, 在第一个终端里运行 sysbench , 模拟系统多线程调度的瓶颈:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 以 10 个线程运行 5 分钟的基准测试, 模拟多线程切换的问题")]),s._v("\n$ sysbench "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--threads")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" --max-time"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("300")]),s._v(" threads run\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("接着, 在第二个终端运行 vmstat, 观察上下文切换情况:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 每隔 1 秒输出 1 组数据(需要 Ctrl+C 才结束)")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("vmstat")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nprocs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----\n r  b   swpd   "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("free")]),s._v("   buff  cache   si   so    bi    bo   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v("   cs us sy "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("id")]),s._v(" wa st\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6487428")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("118240")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1292772")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9019")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1398830")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("84")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6487428")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("118240")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1292772")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10191")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1392312")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("84")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("可以发现, cs 列的上下文切换次数从之前的 35 "),a("strong",[s._v("骤然上升到了 139 万")]),s._v(". 同时, 注意观察其他几个指标:")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("r 列: 就绪队列的长度已经到了 8, 远远超过了系统 CPU 的个数 2, 所以肯定会有大量的 CPU 竞争")]),s._v(".")]),s._v(" "),a("li",[s._v("us(user)和 sy(system)列: 这两列的 CPU 使用率加起来上升到了 100%, 其中"),a("strong",[s._v("系统 CPU 使用率")]),s._v(", 也就是 "),a("strong",[s._v("sy 列高达 84%, 说明 CPU 主要是被内核占用")]),s._v("了.")]),s._v(" "),a("li",[s._v("in 列: 中断次数也上升到了 1 万左右, 说明"),a("strong",[s._v("中断处理")]),s._v("也是个潜在的问题.")])]),s._v(" "),a("p",[s._v("综合这几个指标可以知道, "),a("strong",[s._v("系统的就绪队列过长, 也就是正在运行和等待 CPU 的进程数过多, 导致了大量的上下文切换, 而上下文切换又导致了系统 CPU 的占用率升高")]),s._v(".")]),s._v(" "),a("p",[s._v("那么到底是什么进程导致了这些问题呢?")]),s._v(" "),a("p",[s._v("继续分析, 在第三个终端再用 pidstat 来看一下,  CPU 和进程上下文切换的情况:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 每隔 1 秒输出 1 组数据(需要 Ctrl+C 才结束)")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -w 参数表示输出进程切换指标, 而 -u 参数则表示输出 CPU 使用指标")]),s._v("\n$ pidstat "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-w")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-u")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n08:06:33      "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("UID")]),s._v("       PID    %usr %system  %guest   %wait    %CPU   CPU  Command\n08:06:34        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10488")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30.00")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  sysbench\n08:06:34        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("26326")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  kworker/u4:2\n \n08:06:33      "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("UID")]),s._v("       PID   cswch/s nvcswch/s  Command\n08:06:34        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("  rcu_sched\n08:06:34        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("  ksoftirqd/1\n08:06:34        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("471")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("  hv_balloon\n08:06:34        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1230")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("  iscsid\n08:06:34        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4089")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("  kworker/1:5\n08:06:34        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4333")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("  kworker/0:3\n08:06:34        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10499")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("224.00")]),s._v("  pidstat\n08:06:34        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("26326")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("236.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("  kworker/u4:2\n08:06:34     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("26784")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("223.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("  sshd\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[s._v("从 pidstat 的输出可以发现, CPU 使用率的升高果然是 sysbench 导致的, "),a("strong",[s._v("它的 CPU 使用率已经达到了 100%")]),s._v(" . 但上下文切换则是来自其他进程, "),a("strong",[s._v("包括非自愿上下文切换频率最高的 pidstat, 以及自愿上下文切换频率最高的内核线程 kworker 和 sshd")]),s._v(".")]),s._v(" "),a("p",[s._v("不过, 细心的你肯定也发现了一个怪异的事儿: pidstat 输出的上下文切换次数, 加起来也就几百, 比 vmstat 的 139 万明显小了太多. 这是怎么回事呢? 难道是工具本身出了错吗?")]),s._v(" "),a("p",[s._v("别着急, 在怀疑工具之前, 再来回想一下, 前面讲到的几种上下文切换场景. 其中有一点提到, "),a("strong",[s._v("Linux 调度的基本单位实际上是线程")]),s._v(", 而场景中 sysbench 模拟的也是线程的调度问题, 那是不是 pidstat 忽略了线程的数据呢?")]),s._v(" "),a("p",[s._v("通过运行 man pidstat, 你会发现, "),a("strong",[s._v("pidstat 默认显示进程的指标数据, 加上 -t 参数后, 才会输出线程的指标")]),s._v(".")]),s._v(" "),a("p",[s._v("所以可以在第三个终端里, Ctrl+C 停止刚才的 pidstat 命令, 再加上 -t 参数, 重试一下看看:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 每隔 1 秒输出一组数据(需要 Ctrl+C 才结束)")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -wt 参数表示输出线程的上下文切换指标")]),s._v("\n$ pidstat "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-wt")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n08:14:05      "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("UID")]),s._v("      TGID       TID   cswch/s nvcswch/s  Command\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n08:14:05        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10551")]),s._v("         -      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("  sysbench\n08:14:05        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("         -     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10551")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("__sysbench\n08:14:05        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("         -     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10552")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18911.00")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("103740.00")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("__sysbench\n08:14:05        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("         -     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10553")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18915.00")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100955.00")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("__sysbench\n08:14:05        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("         -     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10554")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18827.00")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("103954.00")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("__sysbench\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("现在就能看到了, 虽然 sysbench 进程(也就是主线程)的上下文切换次数看起来并不多, 但它的"),a("strong",[s._v("子线程的上下文切换次数却有很多")]),s._v(". 看来, 上下文切换罪魁祸首, 还是"),a("strong",[s._v("过多的 sysbench 线程")]),s._v(".")]),s._v(" "),a("p",[s._v("已经找到了上下文切换次数增多的根源, 那是不是到这儿就可以结束了呢?")]),s._v(" "),a("p",[s._v("当然不是. 不知道你还记不记得, 前面在观察系统指标时, 除了上下文切换频率骤然升高, 还有一个指标也有很大的变化. 是的, 正是"),a("strong",[s._v("中断次数")]),s._v(". 中断次数也上升到了 1 万, 但到底是什么类型的中断上升了, 现在还不清楚. 接下来继续抽丝剥茧找源头.")]),s._v(" "),a("p",[a("strong",[s._v("既然是中断, 那它只发生在内核态")]),s._v(", 而 pidstat 只是一个进程的性能分析工具, 并不提供任何关于中断的详细信息, 怎样才能知道中断发生的类型呢?")]),s._v(" "),a("p",[s._v("没错, 那就是从 "),a("code",[s._v("/proc/interrupts")]),s._v("​ 这个只读文件中读取. /proc 实际上是 Linux 的一个虚拟文件系统, 用于内核空间与用户空间之间的通信. "),a("code",[s._v("/proc/interrupts")]),s._v("​ 就是这种通信机制的一部分, 提供了一个只读的中断使用情况.")]),s._v(" "),a("p",[s._v("还是在第三个终端里, Ctrl+C 停止刚才的 pidstat 命令, 然后运行下面的命令, 观察中断的变化情况:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -d 参数表示高亮显示变化的区域")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("watch")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" /proc/interrupts\n           CPU0       CPU1\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\nRES:    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2450431")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5279697")]),s._v("   Rescheduling interrupts\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("观察一段时间, 可以发现, 变化速度最快的是"),a("strong",[s._v("重调度中断")]),s._v("(RES), 这个中断类型表示, 唤醒空闲状态的 CPU 来调度新的任务运行. 这是多处理器系统(SMP)中, 调度器用来分散任务到不同 CPU 的机制, 通常也被称为"),a("strong",[s._v("处理器间中断")]),s._v("(Inter-Processor Interrupts, IPI).")]),s._v(" "),a("p",[s._v("所以, 这里的中断升高还是因为"),a("strong",[s._v("过多任务的调度问题")]),s._v(", 跟前面上下文切换次数的分析结果是一致的.")]),s._v(" "),a("p",[s._v("通过这个案例, 你应该也发现了多工具, 多方面指标对比观测的好处. 如果最开始时, 只用了 pidstat 观测, 这些很严重的上下文切换线程, 压根儿就发现不了了.")]),s._v(" "),a("p",[s._v("现在再回到最初的问题, "),a("strong",[s._v("每秒上下文切换多少次才算正常")]),s._v("呢? "),a("strong",[s._v("这个数值其实取决于系统本身的 CPU 性能")]),s._v(". 在我看来, 如果系统的上下文切换次数比较稳定, 那么从数百到一万以内, 都应该算是正常的. "),a("strong",[s._v("但当上下文切换次数超过一万次, 或者切换次数出现数量级的增长时, 就很可能已经出现了性能问题")]),s._v(".")]),s._v(" "),a("p",[s._v("这时还需要根据上下文切换的类型, 再做具体分析. 比方说:")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("自愿上下文切换变多了, 说明进程都在等待资源, 有可能发生了 I/O 等其他问题")]),s._v(";")]),s._v(" "),a("li",[a("strong",[s._v("非自愿上下文切换变多了, 说明进程都在被强制调度, 也就是都在争抢 CPU, 说明 CPU 的确成了瓶颈")]),s._v(";")]),s._v(" "),a("li",[a("strong",[s._v("中断次数变多了, 说明 CPU 被中断处理程序占用, 还需要通过查看 /proc/interrupts 文件来分析具体的中断类型")]),s._v(".")])]),s._v(" "),a("h4",{attrs:{id:"_05-基础篇-某个应用的cpu使用率居然达到100-该怎么办"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_05-基础篇-某个应用的cpu使用率居然达到100-该怎么办"}},[s._v("#")]),s._v(" 05-基础篇:某个应用的CPU使用率居然达到100%,该怎么办?")]),s._v(" "),a("p",[s._v("通过前两节对平均负载和 CPU 上下文切换的学习, 我相信你对 CPU 的性能已经有了初步了解. 不过我还是想问一下, 在学这个专栏前, 你最常用什么指标来描述系统的 CPU 性能呢? 我想你的答案, 可能不是平均负载, 也不是 CPU 上下文切换, 而是另一个更直观的指标--CPU 使用率.")]),s._v(" "),a("p",[s._v("前面说过, "),a("strong",[s._v("CPU 使用率是单位时间内 CPU 使用情况的统计, 以百分比的方式展示")]),s._v(". 那么, 作为最常用也是最熟悉的 CPU 指标, 你能说出 CPU 使用率到底是怎么算出来的吗? 再有, 诸如 top, ps 之类的性能工具展示的 %user, %nice, %system, %iowait, %steal 等等, 你又能弄清楚它们之间的不同吗?")]),s._v(" "),a("p",[s._v("今天就了解 CPU 使用率的内容, 同时也会以常用的反向代理服务器 Nginx 为例, 一步步操作和分析中深入理解.")]),s._v(" "),a("h5",{attrs:{id:"_1-cpu使用率"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-cpu使用率"}},[s._v("#")]),s._v(" 1.CPU使用率")]),s._v(" "),a("p",[s._v("在上一期提到, Linux 作为一个多任务操作系统, 将每个 CPU 的时间划分为很短的时间片, 再通过调度器轮流分配给各个任务使用, 因此造成多任务同时运行的错觉.")]),s._v(" "),a("p",[s._v("为了维护 CPU 时间, Linux 通过事先定义的"),a("strong",[s._v("节拍率")]),s._v("(内核中表示为 HZ), 触发时间中断, 并使用全局变量 Jiffies 记录了开机以来的节拍数. 每发生一次时间中断, Jiffies 的值就加 1.")]),s._v(" "),a("p",[s._v("节拍率 HZ 是内核的可配选项, 可以设置为 100, 250, 1000 等. 不同的系统可能设置不同数值, 可以查询 "),a("code",[s._v("/boot/config")]),s._v("​ 内核选项来查看它的配置值. 比如实验系统中, 节拍率设置成了 250, 也就是每秒钟触发 250 次时间中断.")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'CONFIG_HZ='")]),s._v(" /boot/config-"),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("uname")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-r")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("CONFIG_HZ")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("250")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("同时, 正因为节拍率 HZ 是内核选项, 所以用户空间程序并不能直接访问. 为了方便用户空间程序, 内核还提供了一个"),a("strong",[s._v("用户空间节拍率 USER_HZ, 它总是固定为 100")]),s._v(", 也就是 1/100 秒. 这样用户空间程序并不需要关心内核中 HZ 被设置成了多少, 因为它看到的总是固定值 USER_HZ.")]),s._v(" "),a("p",[s._v("Linux 通过 "),a("code",[s._v("/proc")]),s._v("​ 虚拟文件系统, 向用户空间提供了系统内部状态的信息, 而 "),a("code",[s._v("/proc/stat")]),s._v("​ 提供的就是系统的 "),a("strong",[s._v("CPU 和任务统计信息")]),s._v(". 如果只关注 CPU 的话, 可以执行下面的命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 只保留各个 CPU 的数据")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" /proc/stat "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" ^cpu\ncpu  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("280580")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7407")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("286084")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172900810")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("83602")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("583")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\ncpu0 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("144745")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4181")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("176701")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("86423902")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("52076")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("301")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\ncpu1 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("135834")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3226")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("109383")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("86476907")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("31525")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("282")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("这里的输出结果是一个表格. 其中第一列表示的是 "),a("strong",[s._v("CPU 编号")]),s._v(", 如 cpu0, cpu1, 而第一行没有编号的 cpu, 表示的是"),a("strong",[s._v("所有 CPU 的累加")]),s._v(". 其他列则表示不同场景下 CPU 的累加节拍数, 它的单位是 USER_HZ, 也就是 10 ms(1/100 秒), 所以这其实就是不同场景下的 CPU 时间.")]),s._v(" "),a("p",[s._v("当然, 这里每一列的顺序并不需要你背下来. 只要记住, 有需要的时候, 查询 man proc 就可以. 不过, 你要清楚 man proc 文档里每一列的涵义, 它们"),a("strong",[s._v("都是 CPU 使用率相关的重要指标")]),s._v(", 你还会在很多其他的性能工具中看到它们. 下面, 来依次解读一下.")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("user(通常缩写为 us), 代表用户态 CPU 时间")]),s._v(". 注意, 它不包括下面的 nice 时间, 但包括了 guest 时间.")]),s._v(" "),a("li",[a("strong",[s._v("nice(通常缩写为 ni), 代表低优先级用户态 CPU 时间")]),s._v(", 也就是进程的 nice 值被调整为 1-19 之间时的 CPU 时间. 这里注意, nice 可取值范围是 -20 到 19, 数值越大, 优先级反而越低.")]),s._v(" "),a("li",[a("strong",[s._v("system(通常缩写为 sys), 代表内核态 CPU 时间")]),s._v(".")]),s._v(" "),a("li",[a("strong",[s._v("idle(通常缩写为 id), 代表空闲时间")]),s._v(". 注意, 它不包括等待 I/O 的时间(iowait).")]),s._v(" "),a("li",[a("strong",[s._v("iowait(通常缩写为 wa), 代表等待 I/O 的 CPU 时间")]),s._v(".")]),s._v(" "),a("li",[a("strong",[s._v("irq(通常缩写为 hi), 代表处理硬中断的 CPU 时间")]),s._v(".")]),s._v(" "),a("li",[a("strong",[s._v("softirq(通常缩写为 si), 代表处理软中断的 CPU 时间")]),s._v(".")]),s._v(" "),a("li",[s._v("steal(通常缩写为 st), 代表当系统运行在虚拟机中的时候, 被其他虚拟机占用的 CPU 时间.")]),s._v(" "),a("li",[s._v("guest(通常缩写为 guest), 代表通过虚拟化运行其他操作系统的时间, 也就是运行虚拟机的 CPU 时间.")]),s._v(" "),a("li",[s._v("guest_nice(通常缩写为 gnice), 代表以低优先级运行虚拟机的时间.")])]),s._v(" "),a("p",[s._v("而通常所说的 "),a("mark",[a("strong",[s._v("CPU 使用率, 就是除了空闲时间外的其他时间占总 CPU 时间的百分比")])]),s._v(", 用公式来表示就是:")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/327e321b40db46540623d6de344c5836-20230731161933-43tsuvg.png",alt:""}}),s._v("\n根据这个公式, 就可以从 "),a("code",[s._v("/proc/stat")]),s._v("​ 中的数据, 很容易地计算出 CPU 使用率. 当然, 也可以用每一个场景的 CPU 时间, 除以总的 CPU 时间, 计算出每个场景的 CPU 使用率.")]),s._v(" "),a("p",[s._v("不过先不要着急计算, 你能说出, 直接用 /proc/stat 的数据, 算的是"),a("strong",[s._v("什么时间段的 CPU 使用率")]),s._v("吗? 看到这里, 你应该想起来了, 这是"),a("strong",[s._v("开机以来")]),s._v("的节拍数累加值, 所以直接算出来的, 是"),a("strong",[s._v("开机以来的平均 CPU 使用率")]),s._v(", 一般没啥参考价值.")]),s._v(" "),a("p",[s._v("事实上, 为了计算 CPU 使用率, 性能工具一般都会"),a("strong",[s._v("取间隔一段时间(比如 3 秒)的两次值")]),s._v(", 作差后, 再计算出这段时间内的平均 CPU 使用率, 即")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/490c1e8b915a24e2b519b516ccfdabaa-20230731161933-k66kt78.png",alt:""}})]),s._v(" "),a("p",[s._v("这个公式, 就是用各种性能工具所看到的 CPU 使用率的实际计算方法.")]),s._v(" "),a("p",[s._v("现在知道了系统 CPU 使用率的计算方法, 那进程的呢? 跟系统的指标类似, Linux 也给每个进程提供了运行情况的统计信息, 也就是 "),a("code",[s._v("/proc/[pid]/stat")]),s._v("​. 不过, 这个文件包含的数据就比较丰富了, 总共有 52 列的数据.")]),s._v(" "),a("p",[s._v("当然, 不用担心, 因为并不需要掌握每一列的含义. 还是那句话, 需要的时候, 查 man proc 就行.")]),s._v(" "),a("p",[s._v("回过头来看, 是不是说要查看 CPU 使用率, 就必须先读取 "),a("code",[s._v("/proc/stat")]),s._v("​ 和 "),a("code",[s._v("/proc/[pid]/stat")]),s._v("​ 这两个文件, 然后再按照上面的公式计算出来呢?")]),s._v(" "),a("p",[s._v("当然不是, 各种各样的性能分析工具已经计算好了. 不过要注意的是, "),a("mark",[a("strong",[s._v("性能分析工具给出的都是间隔一段时间的平均 CPU 使用率, 所以要注意间隔时间的设置")])]),s._v(", 特别是用多个工具对比分析时, 一定要保证它们用的是相同的间隔时间.")]),s._v(" "),a("p",[s._v("比如, 对比一下 top 和 ps 这两个工具报告的 CPU 使用率, 默认的结果很可能不一样, "),a("strong",[s._v("因为 top 默认使用 3 秒时间间隔, 而 ps 使用的却是进程的整个生命周期")]),s._v(".")]),s._v(" "),a("h5",{attrs:{id:"_2-怎么查看cpu使用率"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-怎么查看cpu使用率"}},[s._v("#")]),s._v(" 2.怎么查看CPU使用率")]),s._v(" "),a("p",[s._v("知道了 CPU 使用率的含义后, 再来看看要怎么查看 CPU 使用率. 说到查看 CPU 使用率的工具, 我猜你第一反应肯定是 top 和 ps. 的确, "),a("strong",[s._v("top 和 ps 是最常用的性能分析工具")]),s._v(":")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("top 显示了系统总体的 CPU 和内存使用情况, 以及各个进程的资源使用情况")]),s._v(".")]),s._v(" "),a("li",[a("strong",[s._v("ps 则只显示了每个进程的资源使用情况")]),s._v(".")])]),s._v(" "),a("p",[s._v("比如, top 的输出格式为:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 默认每 3 秒刷新一次")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v(" - "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),s._v(":58:59 up "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v(" days, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v(":47,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" user,  load average: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.03")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.02")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("\nTasks: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),s._v(" total,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" running,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("72")]),s._v(" sleeping,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" stopped,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" zombie\n%Cpu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v(" us,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v(" sy,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" ni, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("99.3")]),s._v(" id,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" wa,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" hi,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" si,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" st\nKiB Mem "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8169348")]),s._v(" total,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5606884")]),s._v(" free,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("334640")]),s._v(" used,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2227824")]),s._v(" buff/cache\nKiB Swap:        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" total,        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" free,        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" used.  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7497908")]),s._v(" avail Mem\n \n  PID "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("USER")]),s._v("      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("78088")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9288")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6696")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":16.83 systemd\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.05 kthreadd\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" root       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-20")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" I   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.00 kworker/0:0H\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("这个输出结果中, "),a("strong",[s._v("第三行 %Cpu 就是系统的 CPU 使用率")]),s._v(", 具体每一列的含义上一节讲过, 只是把 CPU 时间变换成了 CPU 使用率, 就不再重复讲了. 不过需要注意, "),a("strong",[s._v("top 默认显示的是所有 CPU 的平均值")]),s._v(", 这个时候只需要按下数字 1 , 就可以切换到每个 CPU 的使用率了.")]),s._v(" "),a("p",[s._v("继续往下看, "),a("strong",[s._v("空白行之后是进程的实时信息, 每个进程都有一个 %CPU 列, 表示进程的 CPU 使用率. 它是用户态和内核态 CPU 使用率的总和, 包括进程用户空间使用的 CPU, 通过系统调用执行的内核空间 CPU, 以及在就绪队列等待运行的 CPU")]),s._v(". 在虚拟化环境中, 它还包括了运行虚拟机占用的 CPU.")]),s._v(" "),a("p",[s._v("所以, 到这里可以发现, top 并"),a("strong",[s._v("没有细分进程的用户态 CPU 和内核态 CPU")]),s._v(". 那要怎么查看每个进程的详细情况呢? 你应该还记得上一节用到的 "),a("strong",[s._v("pidstat")]),s._v(" 吧, 它正是一个专门分析每个进程 CPU 使用情况的工具.")]),s._v(" "),a("p",[s._v("比如下面的 pidstat 命令, 就间隔 1 秒展示了进程的 5 组 CPU 使用率, 包括:")]),s._v(" "),a("ul",[a("li",[s._v("用户态 CPU 使用率 (%usr);")]),s._v(" "),a("li",[s._v("内核态 CPU 使用率(%system);")]),s._v(" "),a("li",[s._v("运行虚拟机 CPU 使用率(%guest);")]),s._v(" "),a("li",[s._v("等待 CPU 使用率(%wait);")]),s._v(" "),a("li",[s._v("以及总的 CPU 使用率(%CPU).")])]),s._v(" "),a("p",[s._v("最后的 Average 部分, 还计算了 5 组数据的平均值.")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 每隔 1 秒输出一组数据, 共输出 5 组")]),s._v("\n$ pidstat "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),s._v(":56:02      "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("UID")]),s._v("       PID    %usr %system  %guest   %wait    %CPU   CPU  Command\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),s._v(":56:03        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15006")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.99")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.99")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  dockerd\n \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n \nAverage:      "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("UID")]),s._v("       PID    %usr %system  %guest   %wait    %CPU   CPU  Command\nAverage:        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15006")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.99")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.99")]),s._v("     -  dockerd\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h5",{attrs:{id:"_3-cpu使用率过高怎么办"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-cpu使用率过高怎么办"}},[s._v("#")]),s._v(" 3.CPU使用率过高怎么办?")]),s._v(" "),a("p",[s._v("通过 top, ps, pidstat 等工具, 就能够轻松找到 CPU 使用率较高(比如 100% )的进程. 接下来, 你可能又想知道, "),a("strong",[s._v("占用 CPU 的到底是代码里的哪个函数呢")]),s._v("? 找到它, 你才能更高效, 更针对性地进行优化.")]),s._v(" "),a("p",[s._v("我猜你第一个想到的, 应该是 "),a("strong",[s._v("GDB")]),s._v('(The GNU Project Debugger), 这个功能强大的程序调试利器. 的确, GDB 在调试程序错误方面很强大. 但是, 我又要来"挑刺"了. 请记住, '),a("strong",[s._v("GDB 并不适合在性能分析的早期应用")]),s._v(".")]),s._v(" "),a("p",[s._v("为什么呢? 因为 GDB 调试程序的过程会中断程序运行, 这"),a("strong",[s._v("在线上环境往往是不允许的")]),s._v(". 所以, GDB 只适合用在性能分析的后期, 当找到了出问题的大致函数后, 线下再借助它来进一步调试函数内部的问题.")]),s._v(" "),a("p",[s._v("那么哪种工具适合在第一时间分析进程的 CPU 问题呢? 我推荐是 "),a("strong",[s._v("perf")]),s._v(". perf 是 Linux 2.6.31 以后内置的性能分析工具. "),a("strong",[s._v("它以性能事件采样为基础, 不仅可以分析系统的各种事件和内核性能, 还可以用来分析指定应用程序的性能问题")]),s._v(".")]),s._v(" "),a("p",[s._v("使用 perf 分析 CPU 性能问题, 来说两种最常见, 也是我最喜欢的用法.")]),s._v(" "),a("p",[s._v("第一种常见用法是 "),a("strong",[s._v("perf top")]),s._v(", 类似于 top, 它能够实时"),a("strong",[s._v("显示占用 CPU 时钟最多的函数或者指令")]),s._v(", 因此可以用来查找热点函数, 使用界面如下所示:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ perf "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v("\nSamples: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("833")]),s._v("  of event "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'cpu-clock'")]),s._v(", Event count "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("approx."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("97742399")]),s._v("\nOverhead  Shared Object       Symbol\n   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.28")]),s._v("%  perf                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" 0x00000000001f78a4\n   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.72")]),s._v("%  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("kernel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" vsnprintf\n   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.32")]),s._v("%  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("kernel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" module_get_kallsym\n   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.65")]),s._v("%  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("kernel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" _raw_spin_unlock_irqrestore\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("输出结果中, 第一行包含三个数据, 分别是采样数(Samples), 事件类型(event)和事件总数量(Event count). 比如这个例子中, perf 总共采集了 833 个 CPU 时钟事件, 而总事件数则为 97742399.")]),s._v(" "),a("p",[s._v("另外, "),a("strong",[s._v("采样数需要特别注意")]),s._v(". 如果采样数过少(比如只有十几个), 那下面的排序和百分比就没什么实际参考价值了.")]),s._v(" "),a("p",[s._v("再往下看是一个表格式样的数据, 每一行包含四列, 分别是:")]),s._v(" "),a("ul",[a("li",[s._v("第一列 Overhead, 是该符号的性能事件在所有采样中的比例, 用百分比来表示.")]),s._v(" "),a("li",[s._v("第二列 Shared, 是该函数或指令所在的动态共享对象(Dynamic Shared Object), 如内核, 进程名, 动态链接库名, 内核模块名等.")]),s._v(" "),a("li",[s._v("第三列 Object, 是动态共享对象的类型. 比如 "),a("code",[s._v("[.]")]),s._v("​ 表示用户空间的可执行程序, 或者动态链接库, 而 "),a("code",[s._v("[k]")]),s._v("​ 则表示内核空间.")]),s._v(" "),a("li",[s._v("最后一列 Symbol 是···")])]),s._v(" "),a("p",[s._v("还是以上面的输出为例, 可以看到, 占用 CPU 时钟最多的是 perf 工具自身, 不过它的比例也只有 7.28%, 说明系统并没有 CPU 性能问题. perf top 的使用你应该很清楚了吧.")]),s._v(" "),a("p",[s._v("接着再来看第二种常见用法, 也就是 "),a("strong",[s._v("perf record 和 perf report")]),s._v(". perf top 虽然实时展示了系统的性能信息, 但它的缺点是并不保存数据, 也就无法用于离线或者后续的分析. 而 perf record 则提供了保存数据的功能, 保存后的数据, 需要用 perf report 解析展示.")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ perf record "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 按 Ctrl+C 终止采样")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" perf record: Woken up "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("times")]),s._v(" to "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("write")]),s._v(" data "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" perf record: Captured and wrote "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.452")]),s._v(" MB perf.data "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6093")]),s._v(" samples"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n \n$ perf report "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 展示类似于 perf top 的报告")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("在实际使用中, 还经常为 perf top 和 perf record 加上 -g 参数, 开启调用关系的采样, 方便根据调用链来分析性能问题.")]),s._v(" "),a("h5",{attrs:{id:"_4-案例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-案例"}},[s._v("#")]),s._v(" 4.案例")]),s._v(" "),a("p",[s._v("下面就以 Nginx + PHP 的 Web 服务为例, 来看看"),a("mark",[a("strong",[s._v("当发现 CPU 使用率过高的问题后, 要怎么使用 top 等工具找出异常的进程, 又要怎么利用 perf 找出引发性能问题的函数")])]),s._v(".")]),s._v(" "),a("h6",{attrs:{id:"_1-准备工作-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-准备工作-3"}},[s._v("#")]),s._v(" (1)准备工作")]),s._v(" "),a("p",[s._v("以下案例基于 Ubuntu 18.04, 同样适用于其他的 Linux 系统. 案例环境如下所示:")]),s._v(" "),a("ul",[a("li",[s._v("机器配置: 2 CPU, 8GB 内存")]),s._v(" "),a("li",[s._v("预先安装 docker, sysstat, perf, ab 等工具, 如 apt install "),a("a",{attrs:{href:"http://docker.io",target:"_blank",rel:"noopener noreferrer"}},[s._v("docker.io"),a("OutboundLink")],1),s._v(" sysstat linux-tools-common apache2-utils")])]),s._v(" "),a("p",[s._v("先简单介绍一下这次新使用的工具 ab. ab(apache bench)是一个常用的 HTTP 服务性能测试工具, 这里用来模拟 Ngnix 的客户端. 由于 Nginx 和 PHP 的配置比较麻烦, 我把它们打包成了两个 "),a("a",{attrs:{href:"https://github.com/feiskyer/linux-perf-examples/tree/master/nginx-high-cpu",target:"_blank",rel:"noopener noreferrer"}},[s._v("Docker 镜像"),a("OutboundLink")],1),s._v(", 这样只需要运行两个容器, 就可以得到模拟环境.")]),s._v(" "),a("p",[s._v("注意, 这个案例要用到两台虚拟机, 如下图所示:")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/ea6315bcd1467b86b5d5e9016c3368a5-20230731161933-sw0gbd6.png",alt:""}})]),s._v(" "),a("p",[s._v('可以看到, 其中一台用作 Web 服务器, 来模拟性能问题; 另一台用作 Web 服务器的客户端, 来给 Web 服务增加压力请求. 使用两台虚拟机是为了相互隔离, 避免 "交叉感染".')]),s._v(" "),a("p",[s._v("接下来打开两个终端, 分别 SSH 登录到两台机器上, 并安装上面提到的工具. 下面的所有命令, 都默认假设以 root 用户运行.")]),s._v(" "),a("p",[s._v("不过, 操作之前还想再说一点. 这次案例中 PHP 应用的核心逻辑比较简单, 大部分人一眼就可以看出问题, 但你要知道, 实际生产环境中的源码就复杂多了.")]),s._v(" "),a("p",[s._v("所以, 希望在按照步骤操作之前, 先不要查看源码(避免先入为主), 而是"),a("strong",[s._v("把它当成一个黑盒来分析.")]),s._v("  这样可以更好地理解整个解决思路, 怎么从系统的资源使用问题出发, 分析出瓶颈所在的应用, 以及瓶颈在应用中的大概位置.")]),s._v(" "),a("h6",{attrs:{id:"_2-操作和分析-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-操作和分析-2"}},[s._v("#")]),s._v(" (2)操作和分析")]),s._v(" "),a("p",[s._v("接下来, 正式进入操作环节.")]),s._v(" "),a("p",[s._v("首先, 在第一个终端执行下面的命令来运行 Nginx 和 PHP 应用:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),s._v(" nginx "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),s._v(":80 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-itd")]),s._v(" feisky/nginx\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),s._v(" phpfpm "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-itd")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--network")]),s._v(" container:nginx feisky/php-fpm\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("然后, 在第二个终端使用 curl 访问 "),a("code",[s._v("http://[VM1 的 IP]:10000")]),s._v("​, 确认 Nginx 已正常启动. 应该可以看到 It works! 的响应.")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 192.168.0.10 是第一台虚拟机的 IP 地址")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" http://192.168.0.10:10000/\nIt works"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("接着来测试一下这个 Nginx 服务的性能. 在第二个终端运行下面的 ab 命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 并发 10 个请求测试 Nginx 性能, 总共测试 100 个请求")]),s._v("\n$ ab "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-n")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(" http://192.168.0.10:10000/\nThis is ApacheBench, Version "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$Revision")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1706008")]),s._v(" $"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\nCopyright "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1996")]),s._v(" Adam Twiss, Zeus Technology Ltd, \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\nRequests per second:    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11.63")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#/sec] (mean)")]),s._v("\nTime per request:       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("859.942")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("ms"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("mean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("从 ab 的输出结果可以看到, Nginx 能承受的每秒平均请求数只有 11.63. 你一定在吐槽, 这也太差了吧. 那到底是哪里出了问题呢? 用 top 和 pidstat 再来观察下.")]),s._v(" "),a("p",[s._v("这次在第二个终端, 将测试的请求总数增加到 10000. 继续在第二个终端, 运行 ab 命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ ab "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-n")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),s._v(" http://10.240.0.5:10000/\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("接着, 回到第一个终端运行 top 命令, 并按下数字 1, 切换到每个 CPU 的使用率:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n%Cpu0  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("98.7")]),s._v(" us,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.3")]),s._v(" sy,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" ni,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" id,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" wa,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" hi,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" si,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" st\n%Cpu1  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("99.3")]),s._v(" us,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.7")]),s._v(" sy,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" ni,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" id,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" wa,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" hi,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" si,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" st\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n  PID "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("USER")]),s._v("      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21514")]),s._v(" daemon    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("336696")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16384")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8712")]),s._v(" R  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("41.9")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.2")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":06.00 php-fpm\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21513")]),s._v(" daemon    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("336696")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13244")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5572")]),s._v(" R  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("40.2")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.2")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":06.08 php-fpm\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21515")]),s._v(" daemon    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("336696")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16384")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8712")]),s._v(" R  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("40.2")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.2")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":05.67 php-fpm\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21512")]),s._v(" daemon    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("336696")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13244")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5572")]),s._v(" R  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("39.9")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.2")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":05.87 php-fpm\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21516")]),s._v(" daemon    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("336696")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16384")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8712")]),s._v(" R  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("35.9")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.2")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":05.61 php-fpm\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("这里可以看到, 系统中有几个 php-fpm 进程的 CPU 使用率加起来接近 200%; 而每个 CPU 的用户使用率(us)也已经超过了 98%, 接近饱和. 这样就可以确认, 正是"),a("strong",[s._v("用户空间的 php-fpm 进程, 导致 CPU 使用率骤升")]),s._v(".")]),s._v(" "),a("p",[s._v("那再往下走, 怎么知道是 php-fpm 的"),a("strong",[s._v("哪个函数")]),s._v("导致了 CPU 使用率升高呢? 来用 perf 分析一下. 在第一个终端运行下面的 perf 命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -g 开启调用关系分析, -p 指定 php-fpm 的进程号 21515")]),s._v("\n$ perf "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-g")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21515")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("按方向键切换到 php-fpm, 再按下回车键展开 php-fpm 的调用关系, 你会发现, 调用关系最终到了 "),a("strong",[s._v("sqrt 和 add_function")]),s._v(". 看来需要从这两个函数入手了.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/c192e4493e891b2d9ab0b8bc4154ae7b-20230731161933-d2b14k5.png",alt:""}})]),s._v(" "),a("p",[s._v("拷贝出 "),a("a",{attrs:{href:"https://github.com/feiskyer/linux-perf-examples/blob/master/nginx-high-cpu/app/index.php",target:"_blank",rel:"noopener noreferrer"}},[s._v("Nginx 应用的源码"),a("OutboundLink")],1),s._v(", 看看是不是调用了这两个函数:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从容器 phpfpm 中将 PHP 源码拷贝出来")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" phpfpm:/app "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用 grep 查找函数调用")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" sqrt "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-r")]),s._v(" app/ "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 找到了 sqrt 调用")]),s._v("\napp/index.php:  "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$x")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" sqrt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$x")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" add_function "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-r")]),s._v(" app/ "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 没找到 add_function 调用, 这其实是 PHP 内置函数")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("OK, 原来只有 sqrt 函数在 app/index.php 文件中调用了. 那最后一步, 就该看看这个文件的源码了:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" app/index.php\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("?php\n// "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("test")]),s._v(" only.\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$x")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0001")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$i")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$i")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$i")]),s._v("++"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$x")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" sqrt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$x")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"It works!"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("有没有发现问题在哪里呢? 我想你要笑话我了, 居然犯了一个这么傻的错误, 测试代码没删就直接发布应用了. 为了方便你验证优化后的效果, 我把修复后的应用也打包成了一个 Docker 镜像, 可以在第一个终端中执行下面的命令来运行它:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 停止原来的应用")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-f")]),s._v(" nginx phpfpm\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 运行优化后的应用")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),s._v(" nginx "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),s._v(":80 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-itd")]),s._v(" feisky/nginx:cpu-fix\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),s._v(" phpfpm "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-itd")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--network")]),s._v(" container:nginx feisky/php-fpm:cpu-fix\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("接着, 到第二个终端来验证一下修复后的效果. 首先 Ctrl+C 停止之前的 ab 命令后, 再运行下面的命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ ab "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-n")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),s._v(" http://10.240.0.5:10000/\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\nComplete requests:      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),s._v("\nFailed requests:        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\nTotal transferred:      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1720000")]),s._v(" bytes\nHTML transferred:       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("90000")]),s._v(" bytes\nRequests per second:    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2237.04")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#/sec] (mean)")]),s._v("\nTime per request:       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.470")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("ms"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("mean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nTime per request:       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.447")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("ms"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("mean, across all concurrent requests"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nTransfer rate:          "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("375.75")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("Kbytes/sec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" received\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("从这里你可以发现, 现在每秒的平均请求数, 已经从原来的 11 变成了 2237. 就是这么很傻的一个小问题, 却会极大的影响性能, 并且查找起来也并不容易吧. 当然, 找到问题后, 解决方法就简单多了, 删除测试代码就可以了.")]),s._v(" "),a("h5",{attrs:{id:"_5-小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-小结"}},[s._v("#")]),s._v(" 5.小结")]),s._v(" "),a("p",[s._v("CPU 使用率是最直观和最常用的系统性能指标, 更是排查性能问题时, 通常会关注的第一个指标. 所以更要熟悉它的含义, 尤其要弄清楚"),a("strong",[s._v("用户(%user), Nice(%nice), 系统(%system) , 等待 I/O(%iowait) , 中断(%irq)以及软中断(%softirq)这几种不同 CPU 的使用率")]),s._v(". 比如说:")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("用户 CPU 和 Nice CPU 高, 说明用户态进程占用了较多的 CPU, 所以应该着重排查进程的性能问题")]),s._v(".")]),s._v(" "),a("li",[a("strong",[s._v("系统 CPU 高, 说明内核态占用了较多的 CPU, 所以应该着重排查内核线程或者系统调用的性能问题")]),s._v(".")]),s._v(" "),a("li",[a("strong",[s._v("I/O 等待 CPU 高, 说明等待 I/O 的时间比较长, 所以应该着重排查系统存储是不是出现了 I/O 问题")]),s._v(".")]),s._v(" "),a("li",[a("strong",[s._v("软中断和硬中断高, 说明软中断或硬中断的处理程序占用了较多的 CPU, 所以应该着重排查内核中的中断服务程序")]),s._v(".")])]),s._v(" "),a("p",[s._v("碰到 CPU 使用率升高的问题, 可以借助 top, pidstat 等工具, 确认引发 CPU 性能问题的来源; 再使用 perf 等工具, 排查出引起性能问题的具体函数.")]),s._v(" "),a("h4",{attrs:{id:"_06-案例篇-系统的cpu使用率很高-但为啥却找不到高cpu的应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_06-案例篇-系统的cpu使用率很高-但为啥却找不到高cpu的应用"}},[s._v("#")]),s._v(" 06-案例篇:系统的CPU使用率很高,但为啥却找不到高CPU的应用?")]),s._v(" "),a("p",[s._v("上一节讲了 CPU 使用率是什么, 并通过一个案例教你使用 top, vmstat, pidstat 等工具, 排查高 CPU 使用率的进程, 然后再使用 perf top 工具, 定位应用内部函数的问题. 不过就有人留言了, 说似乎感觉高 CPU 使用率的问题, 还是挺容易排查的.")]),s._v(" "),a("p",[s._v("那是不是所有 CPU 使用率高的问题, 都可以这么分析呢? 答案应该是否定的.")]),s._v(" "),a("p",[s._v("回顾前面的内容, 系统的 CPU 使用率, 不仅包括进程用户态和内核态的运行, 还包括中断处理, 等待 I/O 以及内核线程等. 所以, "),a("strong",[s._v("当发现系统的 CPU 使用率很高的时候, 不一定能找到相对应的高 CPU 使用率的进程")]),s._v(".")]),s._v(" "),a("p",[s._v("今天就用一个 Nginx + PHP 的 Web 服务的案例, 来分析这种情况.")]),s._v(" "),a("h5",{attrs:{id:"_1-案例分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-案例分析"}},[s._v("#")]),s._v(" 1.案例分析")]),s._v(" "),a("h6",{attrs:{id:"_1-你的准备"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-你的准备"}},[s._v("#")]),s._v(" (1)你的准备")]),s._v(" "),a("p",[s._v("今天依旧探究系统 CPU 使用率高的情况, 所以这次实验的准备工作, 与上节准备工作基本相同, 差别在于案例所用的 Docker 镜像不同.")]),s._v(" "),a("p",[s._v("本次案例还是基于 Ubuntu 18.04, 同样适用于其他的 Linux 系统. 案例环境如下所示:")]),s._v(" "),a("ul",[a("li",[s._v("机器配置: 2 CPU, 8GB 内存")]),s._v(" "),a("li",[s._v("预先安装 docker, sysstat, perf, ab 等工具, 如 apt install "),a("a",{attrs:{href:"http://docker.io",target:"_blank",rel:"noopener noreferrer"}},[s._v("docker.io"),a("OutboundLink")],1),s._v(" sysstat linux-tools-common apache2-utils")])]),s._v(" "),a("p",[s._v("前面讲到过, ab(apache bench)是一个常用的 HTTP 服务性能测试工具, 这里同样用来模拟 Nginx 的客户端. 由于 Nginx 和 PHP 的配置比较麻烦, 我把它们打包成了两个 "),a("a",{attrs:{href:"https://github.com/feiskyer/linux-perf-examples/tree/master/nginx-short-process",target:"_blank",rel:"noopener noreferrer"}},[s._v("Docker 镜像"),a("OutboundLink")],1),s._v(", 这样只需要运行两个容器, 就可以得到模拟环境. 注意, 这个案例要用到两台虚拟机, 如下图所示:")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/ea6315bcd1467b86b5d5e9016c3368a5-20230731161933-b0inv9t.png",alt:""}})]),s._v(" "),a("p",[s._v('可以看到, 其中一台用作 Web 服务器, 来模拟性能问题; 另一台用作 Web 服务器的客户端, 来给 Web 服务增加压力请求. 使用两台虚拟机是为了相互隔离, 避免 "交叉感染". 接下来打开两个终端, 分别 SSH 登录到两台机器上, 并安装上述工具.')]),s._v(" "),a("h6",{attrs:{id:"_2-操作和分析-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-操作和分析-3"}},[s._v("#")]),s._v(" (2)操作和分析")]),s._v(" "),a("p",[s._v("首先在第一个终端, 执行下面的命令运行 Nginx 和 PHP 应用:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),s._v(" nginx "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),s._v(":80 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-itd")]),s._v(" feisky/nginx:sp\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),s._v(" phpfpm "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-itd")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--network")]),s._v(" container:nginx feisky/php-fpm:sp\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("然后, 在第二个终端, 使用 curl 访问 "),a("code",[s._v("http://[VM1 的 IP]:10000")]),s._v("​, 确认 Nginx 已正常启动.")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 192.168.0.10 是第一台虚拟机的 IP 地址")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" http://192.168.0.10:10000/\nIt works"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("接着来测试一下这个 Nginx 服务的性能. 在第二个终端运行下面的 ab 命令. 要注意, 与上次操作不同的是, 这次需要并发 100 个请求测试 Nginx 性能, 总共测试 1000 个请求.")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 并发 100 个请求测试 Nginx 性能, 总共测试 1000 个请求")]),s._v("\n$ ab "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-n")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" http://192.168.0.10:10000/\nThis is ApacheBench, Version "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$Revision")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1706008")]),s._v(" $"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\nCopyright "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1996")]),s._v(" Adam Twiss, Zeus Technology Ltd, \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\nRequests per second:    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("87.86")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#/sec] (mean)")]),s._v("\nTime per request:       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1138.229")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("ms"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("mean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("从 ab 的输出结果可以看到, Nginx 能承受的每秒平均请求数, 只有 87 多一点, 是不是感觉它的性能有点差呀. 那么, 到底是哪里出了问题呢? 再用 top 和 pidstat 来观察一下.")]),s._v(" "),a("p",[s._v("这次在第二个终端, 将测试的并发请求数改成 5, 同时把请求时长设置为 10 分钟(-t 600). 这样, 当在第一个终端使用性能分析工具时, Nginx 的压力还是继续的.")]),s._v(" "),a("p",[s._v("继续在第二个终端运行 ab 命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ ab "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-t")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("600")]),s._v(" http://192.168.0.10:10000/\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("然后在第一个终端运行 top 命令, 观察系统的 CPU 使用情况:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n%Cpu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80.8")]),s._v(" us, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15.1")]),s._v(" sy,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" ni,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.8")]),s._v(" id,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" wa,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" hi,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.3")]),s._v(" si,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" st\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n \n  PID "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("USER")]),s._v("      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6882")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8456")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5052")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3884")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.7")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":04.78 docker-containe\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6947")]),s._v(" systemd+  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("33104")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3716")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2340")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.7")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":04.92 nginx\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7494")]),s._v(" daemon    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("336696")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15012")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7332")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.2")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":03.55 php-fpm\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7495")]),s._v(" daemon    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("336696")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15160")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7480")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.2")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":03.55 php-fpm\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10547")]),s._v(" daemon    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("336696")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16200")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8520")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.2")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":03.13 php-fpm\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10155")]),s._v(" daemon    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("336696")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16200")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8520")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.7")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.2")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":03.12 php-fpm\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10552")]),s._v(" daemon    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("336696")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16200")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8520")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.7")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.2")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":03.12 php-fpm\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15006")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1168608")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("66264")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("37536")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.8")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v(":39.51 dockerd\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4323")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" I   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.87 kworker/u4:1\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("p",[s._v("观察 top 输出的进程列表可以发现, "),a("strong",[s._v("CPU 使用率最高的进程也只不过才 2.7%")]),s._v(" , 看起来并不高.")]),s._v(" "),a("p",[s._v("然而, 再看系统 CPU 使用率(%Cpu)这一行, 你会发现, 系统的整体 CPU 使用率是比较高的: "),a("strong",[s._v("用户 CPU 使用率(us)已经到了 80%, 系统 CPU 为 15.1%, 而空闲 CPU (id)则只有 2.8%")]),s._v(" .")]),s._v(" "),a("p",[s._v("为什么用户 CPU 使用率这么高呢? 再重新分析一下进程列表, 看看有没有可疑进程:")]),s._v(" "),a("ul",[a("li",[s._v("docker-containerd 进程是用来运行容器的, 2.7% 的 CPU 使用率看起来正常;")]),s._v(" "),a("li",[s._v("Nginx 和 php-fpm 是运行 Web 服务的, 它们会占用一些 CPU 也不意外, 并且 2% 的 CPU 使用率也不算高;")]),s._v(" "),a("li",[s._v("再往下看, 后面的进程呢, 只有 0.3% 的 CPU 使用率, 看起来不太像会导致用户 CPU 使用率达到 80%.")])]),s._v(" "),a("p",[s._v("那就奇怪了, "),a("mark",[a("strong",[s._v("明明用户 CPU 使用率都 80% 了, 可挨个分析了一遍进程列表, 还是找不到高 CPU 使用率的进程")])]),s._v(". 看来 top 是不管用了, 那还有其他工具可以查看进程 CPU 使用情况吗? 不知道你记不记得老朋友 "),a("strong",[s._v("pidstat")]),s._v(", 它可以用来分析进程的 CPU 使用情况.")]),s._v(" "),a("p",[s._v("接下来还是在第一个终端, 运行 pidstat 命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 间隔 1 秒输出一组数据(按 Ctrl+C 结束)")]),s._v("\n$ pidstat "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n04:36:24      "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("UID")]),s._v("       PID    %usr %system  %guest   %wait    %CPU   CPU  Command\n04:36:25        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6882")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  docker-containe\n04:36:25      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("101")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6947")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  nginx\n04:36:25        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14834")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  php-fpm\n04:36:25        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14835")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  php-fpm\n04:36:25        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14845")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  php-fpm\n04:36:25        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14855")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  php-fpm\n04:36:25        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14857")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  php-fpm\n04:36:25        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15006")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  dockerd\n04:36:25        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15801")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  pidstat\n04:36:25        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("17084")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  stress\n04:36:25        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("31116")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  atopacctd\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("p",[s._v("观察一会儿, 你是不是发现, 所有进程的 CPU 使用率也都不高啊, 最高的 Docker 和 Nginx 也只有 4% 和 3%, 即使所有进程的 CPU 使用率都加起来, 也不过是 21%, 离 80% 还差得远呢!")]),s._v(" "),a("p",[s._v("最早的时候, 我碰到这种问题就完全懵了: "),a("strong",[s._v("明明用户 CPU 使用率已经高达 80%, 但我却怎么都找不到是哪个进程的问题")]),s._v(". 到这里, 你也可以想想, 你是不是也遇到过这种情况? 还能不能再做进一步的分析呢?")]),s._v(" "),a("p",[s._v("后来我发现, 会出现这种情况, "),a("strong",[s._v("很可能是因为前面的分析漏了一些关键信息")]),s._v(". 你可以先暂停一下, 自己往上翻, 重新操作检查一遍. 或者一起返回去分析 top 的输出, 看看能不能有新发现.")]),s._v(" "),a("p",[s._v("现在回到第一个终端, 重新运行 top 命令, 并观察一会儿:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v(" - 04:58:24 up "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(" days, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),s._v(":47,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" user,  load average: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.39")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.82")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.74")]),s._v("\nTasks: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("149")]),s._v(" total,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(" running,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("93")]),s._v(" sleeping,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" stopped,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" zombie\n%Cpu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("77.7")]),s._v(" us, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("19.3")]),s._v(" sy,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" ni,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.0")]),s._v(" id,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" wa,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" hi,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.0")]),s._v(" si,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" st\nKiB Mem "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8169348")]),s._v(" total,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2543916")]),s._v(" free,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("457976")]),s._v(" used,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5167456")]),s._v(" buff/cache\nKiB Swap:        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" total,        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" free,        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" used.  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7363908")]),s._v(" avail Mem\n \n  PID "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("USER")]),s._v("      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6947")]),s._v(" systemd+  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("33104")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3764")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2340")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":32.69 nginx\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6882")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12108")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8360")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3884")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":31.40 docker-containe\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15465")]),s._v(" daemon    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("336696")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15256")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7576")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.2")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.62 php-fpm\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15466")]),s._v(" daemon    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("336696")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15196")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7516")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.2")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.62 php-fpm\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15489")]),s._v(" daemon    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("336696")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16200")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8520")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.2")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.62 php-fpm\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6948")]),s._v(" systemd+  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("33104")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3764")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2340")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.95 nginx\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15006")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1168608")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("65632")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("37536")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.8")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v(":51.09 dockerd\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15476")]),s._v(" daemon    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("336696")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16200")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8520")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.2")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.61 php-fpm\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15477")]),s._v(" daemon    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("336696")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16200")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8520")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.2")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.61 php-fpm\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24340")]),s._v(" daemon    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8184")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1616")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("536")]),s._v(" R   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.01 stress\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24342")]),s._v(" daemon    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8196")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1580")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("492")]),s._v(" R   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.01 stress\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24344")]),s._v(" daemon    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8188")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1056")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("492")]),s._v(" R   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.01 stress\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24347")]),s._v(" daemon    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8184")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1356")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("540")]),s._v(" R   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.01 stress\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br")])]),a("p",[s._v("这次从头开始看 top 的每行输出, 咦? "),a("strong",[s._v("Tasks 这一行看起来有点奇怪, 就绪队列中居然有 6 个 Running 状态的进程(6 running)")]),s._v(" , 是不是有点多呢?")]),s._v(" "),a("p",[s._v("回想一下 ab 测试的参数, 并发请求数是 5. 再看进程列表里, php-fpm 的数量也是 5, 再加上 Nginx, 好像同时有 6 个进程也并不奇怪. 但真的是这样吗?")]),s._v(" "),a("p",[s._v("再仔细看进程列表, "),a("strong",[s._v("这次主要看 Running(R) 状态的进程")]),s._v(". 你有没有发现, "),a("strong",[s._v("Nginx 和所有的 php-fpm 都处于 Sleep(S)状态, 而真正处于 Running(R)状态的, 却是几个 stress 进程")]),s._v(". 这几个 stress 进程就比较奇怪了, 需要做进一步的分析.")]),s._v(" "),a("p",[s._v("还是使用 pidstat 来分析这几个进程, 并且使用 -p 选项指定进程的 PID. 首先, 从上面 top 的结果中, 找到这几个进程的 PID. 比如, 先随便找一个 24344, 然后用 pidstat 命令看一下它的 CPU 使用情况:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ pidstat "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24344")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(":14:55      "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("UID")]),s._v("       PID    %usr %system  %guest   %wait    %CPU   CPU  Command\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("奇怪, 居然"),a("strong",[s._v("没有任何输出")]),s._v(". 难道是 pidstat 命令出问题了吗? 之前我说过, "),a("strong",[s._v("在怀疑性能工具出问题前, 最好还是先用其他工具交叉确认一下")]),s._v(". 那用什么工具呢? ps 应该是最简单易用的. 在终端里运行下面的命令, 看看 24344 进程的状态:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从所有进程中查找 PID 是 24344 的进程")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" aux "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24344")]),s._v("\nroot      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9628")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14856")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1096")]),s._v(" pts/0    S+   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(":15   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--color")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("auto "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24344")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("还是没有输出. 现在终于发现问题, "),a("strong",[s._v("原来这个进程已经不存在了, 所以 pidstat 就没有任何输出")]),s._v(". 既然进程都没了, 那性能问题应该也跟着没了吧. 再用 top 命令确认一下:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n%Cpu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80.9")]),s._v(" us, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14.9")]),s._v(" sy,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" ni,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.8")]),s._v(" id,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" wa,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" hi,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.3")]),s._v(" si,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" st\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n \n  PID "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("USER")]),s._v("      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6882")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12108")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8360")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3884")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.7")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":45.63 docker-containe\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6947")]),s._v(" systemd+  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("33104")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3764")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2340")]),s._v(" R   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.7")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":47.79 nginx\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3865")]),s._v(" daemon    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("336696")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15056")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7376")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.2")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.15 php-fpm\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6779")]),s._v(" daemon    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8184")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1112")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("556")]),s._v(" R   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.01 stress\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("好像又错了. 结果还跟原来一样, 用户 CPU 使用率还是高达 80.9%, 系统 CPU 接近 15%, 而空闲 CPU 只有 2.8%, Running 状态的进程有 Nginx, stress 等.")]),s._v(" "),a("p",[s._v("可是, 刚刚看到 stress 进程不存在了, 怎么现在还在运行呢? 再细看一下 top 的输出, "),a("strong",[s._v("原来这次 stress 进程的 PID 跟前面不一样了, 原来的 PID 24344 不见了, 现在的是 6779")]),s._v(".")]),s._v(" "),a("p",[s._v("进程的 PID 在变, 这说明什么呢? 在我看来, "),a("strong",[s._v("要么是这些进程在不停地重启, 要么就是全新的进程")]),s._v(", 这无非也就两个原因:")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("第一个原因, 进程在不停地崩溃重启, 比如因为段错误, 配置错误等等, 这时进程在退出后可能又被监控系统自动重启了.")])]),s._v(" "),a("li",[a("strong",[s._v("第二个原因, 这些进程都是短时进程, 也就是在其他应用内部通过 exec 调用的外面命令. 这些命令一般都只运行很短的时间就会结束, 很难用 top 这种间隔时间比较长的工具发现(上面的案例, 碰巧发现了)")])])]),s._v(" "),a("p",[s._v("至于 stress, 前面提到过, 它是一个常用的压力测试工具. 它的 PID 在不断变化中, 看起来像是被其他进程调用的短时进程. 要想继续分析下去, 还得找到它们的父进程.")]),s._v(" "),a("p",[s._v("要怎么查找一个进程的父进程呢? 没错, 用 "),a("strong",[s._v("pstree")]),s._v(" 就可以用树状形式显示所有进程之间的关系:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ pstree "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" stress\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("-docker-containe-+-php-fpm-+-php-fpm---sh---stress\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("-3*"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("php-fpm---sh---stress---stress"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("从这里可以看到, "),a("strong",[s._v("stress 是被 php-fpm 调用的子进程, 并且进程数量不止一个(这里是 3 个)")]),s._v(" . 找到父进程后, 就能进入 app 的内部分析了.")]),s._v(" "),a("p",[s._v("首先, 当然应该去看看它的源码. 运行下面的命令, 把案例应用的源码拷贝到 app 目录, 然后再执行 grep 查找是不是有代码再调用 stress 命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 拷贝源码到本地")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" phpfpm:/app "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# grep 查找看看是不是有代码在调用 stress 命令")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" stress "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-r")]),s._v(" app\napp/index.php:// fake I/O with stress "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("via write"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("/unlink"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("))")]),s._v(".\napp/index.php:"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$result")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" exec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/usr/local/bin/stress -t 1 -d 1 2>&1"')]),s._v(", "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$output")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$status")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("找到了, 果然是 app/index.php 文件中"),a("strong",[s._v("直接调用了 stress 命令")]),s._v(".")]),s._v(" "),a("p",[s._v("再来看看 "),a("a",{attrs:{href:"https://github.com/feiskyer/linux-perf-examples/blob/master/nginx-short-process/app/index.php",target:"_blank",rel:"noopener noreferrer"}},[s._v("app/index.php"),a("OutboundLink")],1),s._v(" 的源代码:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" app/index.php\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("?php\n// fake I/O with stress "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("via write"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("/unlink"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("))")]),s._v(".\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$result")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" exec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/usr/local/bin/stress -t 1 -d 1 2>&1"')]),s._v(", "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$output")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$status")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("isset"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$_GET")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"verbose"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$_GET")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"verbose"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$status")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Server internal error: "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  print_r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$output")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"It works!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n?"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("可以看到, 源码里"),a("strong",[s._v("对每个请求都会调用一个 stress 命令, 模拟 I/O 压力")]),s._v(". 从注释上看, stress 会通过 write() 和 unlink() 对 I/O 进程进行压测, 看来这应该就是系统 CPU 使用率升高的根源了.")]),s._v(" "),a("p",[s._v("不过, stress 模拟的是 I/O 压力, 而之前在 top 的输出中看到的, 却一直是用户 CPU 和系统 CPU 升高, 并没见到 iowait 升高. 这又是怎么回事呢? stress 到底是不是 CPU 使用率升高的原因呢?")]),s._v(" "),a("p",[s._v("还得继续往下走. 从代码中可以看到, 给请求加入 verbose=1 参数后, 就可以查看 stress 的输出. 你先试试看, 在第二个终端运行:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" http://192.168.0.10:10000?verbose"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nServer internal error: Array\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" stress: info: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("19607")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" dispatching hogs: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" cpu, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" io, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" vm, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" hdd\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" stress: FAIL: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("19608")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("563")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" mkstemp failed: Permission denied\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" stress: FAIL: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("19607")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("394")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("-- worker "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("19608")]),s._v(" returned error "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" stress: WARN: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("19607")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("396")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" now reaping child worker processes\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" stress: FAIL: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("19607")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("400")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("kill")]),s._v(" error: No such process\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" stress: FAIL: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("19607")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("451")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" failed run completed "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" 0s\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("看错误消息 mkstemp failed: Permission denied, 以及 failed run completed in 0s. "),a("strong",[s._v("原来 stress 命令并没有成功, 它因为权限问题失败退出了. 看来, 我们发现了一个 PHP 调用外部 stress 命令的 bug: 没有权限创建临时文件.")])]),s._v(" "),a("p",[a("mark",[a("strong",[s._v("从这里可以猜测, 正是由于权限错误, 大量的 stress 进程在启动时初始化失败, 进而导致用户 CPU 使用率的升高")])]),s._v(".")]),s._v(" "),a("p",[s._v("分析出问题来源, 下一步是不是就要开始优化了呢? 当然不是! 既然只是猜测, 那就需要再确认一下, 这个猜测到底对不对, 是不是真的有大量的 stress 进程. 该用什么工具或指标呢?")]),s._v(" "),a("p",[s._v("前面已经用了 top, pidstat, pstree 等工具, 没有发现大量的 stress 进程. 那还有什么其他的工具可以用吗?")]),s._v(" "),a("p",[s._v("还记得上一期提到的 perf 吗? 它可以用来分析 CPU 性能事件, 用在这里就很合适. 依旧在第一个终端中运行 "),a("code",[s._v("perf record -g")]),s._v("​ 命令 , 并等待一会儿(比如 15 秒)后按 Ctrl+C 退出. 然后再运行 perf report 查看报告:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 记录性能事件, 等待大约 15 秒后按 Ctrl+C 退出")]),s._v("\n$ perf record "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-g")]),s._v("\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看报告")]),s._v("\n$ perf report\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("这样就可以看到下图这个性能报告:")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/fd0ad6402bf3c0ee454ab2515dd7b7d4-20230731161933-la7dfij.png",alt:""}})]),s._v(" "),a("p",[s._v("你看, "),a("strong",[s._v("stress 占了所有 CPU 时钟事件的 77%, 而 stress 调用调用栈中比例最高的, 是随机数生成函数 random(), 看来它的确就是 CPU 使用率升高的元凶了")]),s._v(". 随后的优化就很简单了, 只要修复权限问题, 并减少或删除 stress 的调用, 就可以减轻系统的 CPU 压力.")]),s._v(" "),a("p",[s._v("当然, 实际生产环境中的问题一般都要比这个案例复杂, 在你找到触发瓶颈的命令行后, 却可能发现, 这个外部命令的调用过程是应用核心逻辑的一部分, 并不能轻易减少或者删除.")]),s._v(" "),a("p",[s._v("这时就得继续排查, 为什么被调用的命令, 会导致 CPU 使用率升高或 I/O 升高等问题. 这些复杂场景的案例, 我会在后面的综合实战里详细分析.")]),s._v(" "),a("p",[s._v("最后, 在案例结束时, 不要忘了清理环境, 执行下面的 Docker 命令, 停止案例中用到的 Nginx 进程:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-f")]),s._v(" nginx phpfpm\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h5",{attrs:{id:"_2-execsnoop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-execsnoop"}},[s._v("#")]),s._v(" 2.execsnoop")]),s._v(" "),a("p",[s._v("在这个案例中, 使用了 top, pidstat, pstree 等工具分析了系统 CPU 使用率高的问题, 并发现 CPU 升高是短时进程 stress 导致的, 但是整个分析过程还是比较复杂的. 对于这类问题, 有没有更好的方法"),a("strong",[s._v("监控")]),s._v("呢?")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/brendangregg/perf-tools/blob/master/execsnoop",target:"_blank",rel:"noopener noreferrer"}},[s._v("execsnoop"),a("OutboundLink")],1),s._v(" 就是一个专为"),a("strong",[s._v("短时进程设计的工具")]),s._v(". 它通过 "),a("strong",[s._v("ftrace")]),s._v(" 实时监控进程的 exec() 行为, 并输出短时进程的基本信息, 包括进程 PID, 父进程 PID, 命令行参数以及执行的结果.")]),s._v(" "),a("p",[s._v("比如, "),a("strong",[s._v("用 execsnoop 监控上述案例, 就可以直接得到 stress 进程的父进程 PID 以及它的命令行参数, 并可以发现大量的 stress 进程在不停启动")]),s._v(":")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 按 Ctrl+C 结束")]),s._v("\n$ execsnoop\nPCOMM            PID    "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("PPID")]),s._v("   RET ARGS\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sh")]),s._v("               "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30394")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30393")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\nstress           "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30396")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30394")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" /usr/local/bin/stress "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-t")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sh")]),s._v("               "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30398")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30393")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\nstress           "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30399")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30398")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" /usr/local/bin/stress "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-t")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sh")]),s._v("               "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30402")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30400")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\nstress           "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30403")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30402")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" /usr/local/bin/stress "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-t")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sh")]),s._v("               "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30405")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30393")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\nstress           "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30407")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30405")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" /usr/local/bin/stress "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-t")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("execsnoop 所用的 ftrace 是一种常用的"),a("strong",[s._v("动态追踪技术")]),s._v(", 一般用于分析 Linux 内核的运行时行为, 后面课程也会详细介绍并使用.")]),s._v(" "),a("h5",{attrs:{id:"_3-小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-小结"}},[s._v("#")]),s._v(" 3.小结")]),s._v(" "),a("p",[s._v("碰到常规问题无法解释的 CPU 使用率情况时, 首先要想到有可能是"),a("strong",[s._v("短时应用导致的问题")]),s._v(", 比如有可能是下面这两种情况.")]),s._v(" "),a("ul",[a("li",[s._v("第一, "),a("strong",[s._v("应用里直接调用了其他二进制程序, 这些程序通常运行时间比较短, 通过 top 等工具也不容易发现")]),s._v(".")]),s._v(" "),a("li",[s._v("第二, "),a("strong",[s._v("应用本身在不停地崩溃重启, 而启动过程的资源初始化, 很可能会占用相当多的 CPU")]),s._v(".")])]),s._v(" "),a("p",[s._v("对于这类进程, "),a("strong",[s._v("可以用 pstree 或者 execsnoop 找到它们的父进程, 再从父进程所在的应用入手, 排查问题的根源")]),s._v(".")]),s._v(" "),a("h4",{attrs:{id:"_07-案例篇-系统中出现大量不可中断进程和僵尸进程怎么办"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_07-案例篇-系统中出现大量不可中断进程和僵尸进程怎么办"}},[s._v("#")]),s._v(" 07-案例篇:系统中出现大量不可中断进程和僵尸进程怎么办?")]),s._v(" "),a("p",[s._v("上一节用一个 Nginx+PHP 的案例, 讲了服务器 CPU 使用率高的分析和应对方法. 这里一定要记得, 当碰到无法解释的 CPU 使用率问题时, 先要检查一下是不是短时应用在捣鬼.")]),s._v(" "),a("p",[a("strong",[s._v("短时应用的运行时间比较短, 很难在 top 或者 ps 这类展示系统概要和进程快照的工具中发现, 需要使用记录事件的工具来配合诊断, 比如 execsnoop 或者 perf top.")])]),s._v(" "),a("p",[s._v("这些思路你不用刻意去背, 多练习几次, 多在操作中思考, 你便能灵活运用.")]),s._v(" "),a("p",[s._v("另外, 还讲到 CPU 使用率的类型. 除了上一节提到的用户 CPU 之外, 它还包括系统 CPU(比如上下文切换), 等待 I/O 的 CPU(比如等待磁盘的响应)以及中断 CPU(包括软中断和硬中断)等.")]),s._v(" "),a("p",[s._v("前面已经在上下文切换的文章中, 一起分析了系统 CPU 使用率高的问题, 剩下的"),a("strong",[s._v("等待 I/O 的 CPU 使用率")]),s._v("(以下简称为 iowait)升高, 也是最常见的一个服务器性能问题. 今天就来看一个多进程 I/O 的案例, 并分析这种情况.")]),s._v(" "),a("h5",{attrs:{id:"_1-进程状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-进程状态"}},[s._v("#")]),s._v(" 1.进程状态")]),s._v(" "),a("p",[a("mark",[a("strong",[s._v("当 iowait 升高时, 进程很可能因为得不到硬件的响应, 而长时间处于不可中断状态. 从 ps 或者 top 命令的输出中, 你可以发现它们都处于 D 状态, 也就是不可中断状态(Uninterruptible Sleep)")])]),s._v(" . 既然说到了进程的状态, 进程有哪些状态你还记得吗? 先来回顾一下.")]),s._v(" "),a("p",[s._v("top 和 ps 是最常用的查看进程状态的工具, 就从 top 的输出开始. 下面是一个 top 命令输出的示例, S 列(也就是 Status 列)表示进程的状态. 从这个示例里, 可以看到 R, D, Z, S, I 等几个状态, 它们分别是什么意思呢?")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v("\n  PID "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("USER")]),s._v("      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("28961")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("43816")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3148")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4040")]),s._v(" R   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.2")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.01 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("620")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("37280")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("33676")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("908")]),s._v(" D   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.4")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.01 app\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("160072")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9416")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6752")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":37.64 systemd\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1896")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" Z   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.00 devapp\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.10 kthreadd\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" root       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-20")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" I   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.00 kworker/0:0H\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(" root       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-20")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" I   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.00 mm_percpu_wq\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":06.37 ksoftirqd/0\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("挨个来看一下:")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("R")]),s._v(" 是 Running 或 Runnable 的缩写, 表示"),a("strong",[s._v("进程在 CPU 的就绪队列中, 正在运行或者正在等待运行")]),s._v(".")]),s._v(" "),a("li",[a("strong",[s._v("D")]),s._v(" 是 Disk Sleep 的缩写, 也就是"),a("strong",[s._v("不可中断状态睡眠(Uninterruptible Sleep), 一般表示进程正在跟硬件交互, 并且交互过程不允许被其他进程或中断打断")]),s._v(".")]),s._v(" "),a("li",[a("strong",[s._v("Z")]),s._v(' 是 Zombie 的缩写, 如果你玩过 "植物大战僵尸" 这款游戏, 应该知道它的意思. 它表示'),a("strong",[s._v("僵尸进程, 也就是进程实际上已经结束了, 但是父进程还没有回收它的资源(比如进程的描述符, PID 等)")]),s._v(" .")]),s._v(" "),a("li",[a("strong",[s._v("S")]),s._v(" 是 Interruptible Sleep 的缩写, 也就是"),a("strong",[s._v("可中断状态睡眠, 表示进程因为等待某个事件而被系统挂起. 当进程等待的事件发生时, 它会被唤醒并进入 R 状态")]),s._v(".")]),s._v(" "),a("li",[a("strong",[s._v("I")]),s._v(" 是 Idle 的缩写, 也就是"),a("strong",[s._v("空闲状态, 用在不可中断睡眠的内核线程上")]),s._v(". 前面说了, 硬件交互导致的不可中断进程用 D 表示, 但对某些内核线程来说, 它们有可能实际上并没有任何负载, 用 Idle 正是为了区分这种情况. 要注意, D 状态的进程会导致平均负载升高, I 状态的进程却不会.")])]),s._v(" "),a("p",[s._v("当然了, 上面的示例并没有包括进程的所有状态. 除了以上 5 个状态, 进程还包括下面这 2 个状态.")]),s._v(" "),a("p",[s._v("第一个是 "),a("strong",[s._v("T 或者 t")]),s._v(", 也就是 Stopped 或 Traced 的缩写, 表示进程"),a("strong",[s._v("处于暂停或者跟踪状态")]),s._v(". 向一个进程发送 SIGSTOP 信号, 它就会因响应这个信号变成"),a("strong",[s._v("暂停状态")]),s._v("(Stopped); 再向它发送 SIGCONT 信号, 进程又会恢复运行(如果进程是终端里直接启动的, 则需要你用 fg 命令, 恢复到前台运行). 而当用调试器(如 gdb)调试一个进程时, 在使用断点中断进程后, 进程就会变成跟踪状态, 这其实也是一种特殊的暂停状态, 只不过可以用调试器来跟踪并按需要控制进程的运行.")]),s._v(" "),a("p",[s._v("另一个是 "),a("strong",[s._v("X")]),s._v(", 也就是 Dead 的缩写, 表示"),a("strong",[s._v("进程已经消亡")]),s._v(", 所以不会在 top 或者 ps 命令中看到它.")]),s._v(" "),a("p",[s._v("了解了这些, 再回到今天的主题. 先看不可中断状态, 这其实是"),a("strong",[s._v("为了保证进程数据与硬件状态一致, 并且正常情况下, 不可中断状态在很短时间内就会结束. 所以, 短时的不可中断状态进程, 一般可以忽略")]),s._v(". 但如果系统或硬件发生了故障, 进程可能会在不可中断状态保持很久, 甚至导致系统中出现大量不可中断进程. 这时就得注意下, 系统是不是出现了 I/O 等性能问题.")]),s._v(" "),a("p",[s._v("再看僵尸进程, 这是多进程应用很容易碰到的问题. 正常情况下, "),a("strong",[s._v("当一个进程创建了子进程后, 它应该通过系统调用 wait() 或者 waitpid() 等待子进程结束, 回收子进程的资源; 而子进程在结束时, 会向它的父进程发送 SIGCHLD 信号, 所以, 父进程还可以注册 SIGCHLD 信号的处理函数, 异步回收资源")]),s._v(".")]),s._v(" "),a("p",[s._v("如果父进程没这么做, 或是子进程执行太快, 父进程还没来得及处理子进程状态, 子进程就已经提前退出, 那这时的子进程就会变成"),a("strong",[s._v("僵尸进程")]),s._v('. 换句话说, 父亲应该一直对儿子负责, 善始善终, 如果不作为或者跟不上, 都会导致 "问题少年" 的出现.')]),s._v(" "),a("p",[s._v("通常, "),a("strong",[s._v("僵尸进程持续的时间都比较短, 在父进程回收它的资源后就会消亡; 或者在父进程退出后, 由 init 进程回收后也会消亡")]),s._v(". 一旦父进程没有处理子进程的终止, 还一直保持运行状态, 那么子进程就会一直处于僵尸状态. "),a("mark",[a("strong",[s._v("大量的僵尸进程会用尽 PID 进程号, 导致新进程不能创建, 所以这种情况一定要避免")])]),s._v(".")]),s._v(" "),a("h5",{attrs:{id:"_2-案例分析-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-案例分析-2"}},[s._v("#")]),s._v(" 2.案例分析")]),s._v(" "),a("p",[s._v("接下来将用一个多进程应用的案例, 分析"),a("strong",[s._v("大量不可中断状态和僵尸状态进程")]),s._v("的问题. 这个应用基于 C 开发, 由于它的编译和运行步骤比较麻烦, 我把它打包成了一个 "),a("a",{attrs:{href:"https://github.com/feiskyer/linux-perf-examples/tree/master/high-iowait-process",target:"_blank",rel:"noopener noreferrer"}},[s._v("Docker 镜像"),a("OutboundLink")],1),s._v(". 这样只需要运行一个 Docker 容器就可以得到模拟环境.")]),s._v(" "),a("h6",{attrs:{id:"_1-你的准备-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-你的准备-2"}},[s._v("#")]),s._v(" (1)你的准备")]),s._v(" "),a("p",[s._v("下面的案例仍然基于 Ubuntu 18.04, 同样适用于其他的 Linux 系统. 案例环境如下所示:")]),s._v(" "),a("ul",[a("li",[s._v("机器配置: 2 CPU, 8GB 内存")]),s._v(" "),a("li",[s._v("预先安装 docker, sysstat, dstat 等工具, 如 apt install "),a("a",{attrs:{href:"http://docker.io",target:"_blank",rel:"noopener noreferrer"}},[s._v("docker.io"),a("OutboundLink")],1),s._v(" dstat sysstat")])]),s._v(" "),a("p",[s._v("这里, dstat 是一个新的性能工具, 它吸收了 vmstat, iostat, ifstat 等几种工具的优点, 可以同时观察系统的 CPU, 磁盘 I/O, 网络以及内存使用情况.")]),s._v(" "),a("p",[s._v("接下来, 打开一个终端, SSH 登录到机器上, 并安装上述工具.")]),s._v(" "),a("h6",{attrs:{id:"_2-操作和分析-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-操作和分析-4"}},[s._v("#")]),s._v(" (2)操作和分析")]),s._v(" "),a("p",[s._v("安装完成后, 首先执行下面的命令运行案例应用:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--privileged")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("app "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-itd")]),s._v(" feisky/app:iowait\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("然后, 输入 ps 命令, 确认案例应用已正常启动. 如果一切正常, 应该可以看到如下所示的输出:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" aux "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" /app\nroot      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4009")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4376")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1008")]),s._v(" pts/0    Ss+  05:51   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00 /app\nroot      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4287")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.6")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.4")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("37280")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("33660")]),s._v(" pts/0    D+   05:54   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00 /app\nroot      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4288")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.6")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.4")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("37280")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("33668")]),s._v(" pts/0    D+   05:54   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00 /app\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("从这个界面, 可以发现多个 app 进程已经启动, 并且它们的状态分别是 "),a("strong",[s._v("Ss+ 和 D+")]),s._v(" . 其中, S 表示可中断睡眠状态, D 表示不可中断睡眠状态, 在前面刚学过, 那后面的 s 和 + 是什么意思呢? 不知道也没关系, 查一下 man ps 就可以. 现在记住, "),a("strong",[s._v("s 表示这个进程是一个会话的领导进程, 而 + 表示前台进程组")]),s._v(".")]),s._v(" "),a("p",[s._v("这里又出现了两个新概念, "),a("strong",[s._v("进程组")]),s._v("和"),a("strong",[s._v("会话")]),s._v(". 它们用来管理一组相互关联的进程, 意思其实很好理解.")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("进程组表示一组相互关联的进程, 比如每个子进程都是父进程所在组的成员")]),s._v(";")]),s._v(" "),a("li",[a("strong",[s._v("而会话是指共享同一个控制终端的一个或多个进程组")]),s._v(".")])]),s._v(" "),a("p",[s._v("比如通过 SSH 登录服务器, 就会打开一个控制终端(TTY), 这个控制终端就对应一个会话. 而在终端中运行的命令以及它们的子进程, 就构成了一个个的进程组, 其中, 在后台运行的命令, 构成后台进程组; 在前台运行的命令, 构成前台进程组.")]),s._v(" "),a("p",[s._v("明白了这些, 再用 top 看一下系统的资源使用情况:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 按下数字 1 切换到所有 CPU 的使用情况, 观察一会儿按 Ctrl+C 结束")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v(" - 05:56:23 up "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("17")]),s._v(" days, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(":45,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" users,  load average: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.00")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.68")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.39")]),s._v("\nTasks: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("247")]),s._v(" total,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" running,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("79")]),s._v(" sleeping,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" stopped, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("115")]),s._v(" zombie\n%Cpu0  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" us,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.7")]),s._v(" sy,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" ni, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("38.9")]),s._v(" id, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("60.5")]),s._v(" wa,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" hi,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" si,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" st\n%Cpu1  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" us,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.7")]),s._v(" sy,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" ni,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.7")]),s._v(" id, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("94.6")]),s._v(" wa,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" hi,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" si,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" st\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n \n  PID "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("USER")]),s._v("      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4340")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("44676")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4048")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3432")]),s._v(" R   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.05 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4345")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("37280")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("33624")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("860")]),s._v(" D   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.01 app\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4344")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("37280")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("33624")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("860")]),s._v(" D   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.4")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.01 app\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("160072")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9416")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6752")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":38.59 systemd\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("从这里你能看出什么问题吗? 细心一点, 逐行观察, 别放过任何一个地方. 忘了哪行参数意思的话, 也要及时返回去复习. 这里, 我发现了四个可疑的地方.")]),s._v(" "),a("ul",[a("li",[s._v("先看"),a("strong",[s._v("第一行的平均负载( Load Average)")]),s._v(" , 过去 1 分钟, 5 分钟和 15 分钟内的平均负载在依次减小, 说明"),a("strong",[s._v("平均负载正在升高")]),s._v("; 而 1 分钟内的平均负载已经达到系统的 CPU 个数, 说明系统很可能已经有了性能瓶颈.")]),s._v(" "),a("li",[s._v("再看第二行的 Tasks, "),a("strong",[s._v("有 1 个正在运行的进程, 但僵尸进程比较多, 而且还在不停增加, 说明有子进程在退出时没被清理")]),s._v(".")]),s._v(" "),a("li",[s._v("接下来看两个 CPU 的使用率情况, 用户 CPU 和系统 CPU 都不高, 但 "),a("strong",[s._v("iowait 分别是 60.5% 和 94.6%")]),s._v(" , 好像有点儿不正常.")]),s._v(" "),a("li",[s._v("最后再看每个进程的情况, "),a("strong",[s._v("CPU 使用率最高的进程只有 0.3%, 看起来并不高; 但有两个进程处于 D 状态, 它们可能在等待 I/O, 但光凭这里并不能确定是它们导致了 iowait 升高")]),s._v(".")])]),s._v(" "),a("p",[s._v("把这四个问题再汇总一下, 就可以得到很明确的两点:")]),s._v(" "),a("ul",[a("li",[s._v("第一点, "),a("strong",[s._v("iowait 太高了, 导致系统的平均负载升高, 甚至达到了系统 CPU 的个数")]),s._v(".")]),s._v(" "),a("li",[s._v("第二点, "),a("strong",[s._v("僵尸进程在不断增多, 说明有程序没能正确清理子进程的资源")]),s._v(".")])]),s._v(" "),a("p",[s._v("接下来一起顺着这两个问题继续分析, 找出根源.")]),s._v(" "),a("h5",{attrs:{id:"_3-iowait分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-iowait分析"}},[s._v("#")]),s._v(" 3.iowait分析")]),s._v(" "),a("p",[s._v("先来看一下 iowait 升高的问题.")]),s._v(" "),a("p",[s._v("我相信, 一提到 iowait 升高, 你首先会想要"),a("strong",[s._v("查询系统的 I/O 情况")]),s._v(". 我一般也是这种思路, 那么什么工具可以查询系统的 I/O 情况呢?")]),s._v(" "),a("p",[s._v("这里推荐的正是上节课要求安装的 "),a("strong",[s._v("dstat")]),s._v(", 它的好处是, 可以"),a("strong",[s._v("同时查看 CPU 和 I/O 这两种资源的使用情况")]),s._v(", 便于对比分析.")]),s._v(" "),a("p",[s._v("那么在终端中运行 dstat 命令, 观察 CPU 和 I/O 的使用情况:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 间隔 1 秒输出 10 组数据")]),s._v("\n$ dstat "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\nYou did not "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" any stats, using "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-cdngy")]),s._v(" by default.\n--total-cpu-usage-- -dsk/total- -net/total- ---paging-- ---system--\nusr sys idl wai stl"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v("  writ"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" recv  send"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v("   out "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" int   csw\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("96")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("1219k  408k"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("885")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("98")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  34M    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 198B  790B"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("138")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  34M    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  66B  342B"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("135")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("84")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("5633k    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  66B  342B"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("52")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("177")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("39")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("58")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  22M    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  66B  342B"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("43")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("144")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  34M    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 200B  450B"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("46")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("147")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("98")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  34M    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  66B  342B"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("45")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("134")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  34M    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  66B  342B"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("39")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("131")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("83")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("17")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("5633k    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  66B  342B"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("46")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("168")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("39")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("59")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  22M    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  66B  342B"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("37")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("134")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("从 dstat 的输出, 可以看到, "),a("strong",[s._v("每当 iowait 升高(wai)时, 磁盘的读请求(read)都会很大. 这说明 iowait 的升高跟磁盘的读请求有关, 很可能就是磁盘读导致的")]),s._v(".")]),s._v(" "),a("p",[s._v("那到底是哪个进程在读磁盘呢? 不知道你还记不记得, 上节在 top 里看到的不可中断状态进程, 我觉得它就很可疑, 试着来分析下.")]),s._v(" "),a("p",[s._v("继续在刚才的终端中, 运行 top 命令, 观察 D 状态的进程:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 观察一会儿按 Ctrl+C 结束")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n  PID "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("USER")]),s._v("      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4340")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("44676")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4048")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3432")]),s._v(" R   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.05 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4345")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("37280")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("33624")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("860")]),s._v(" D   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.01 app\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4344")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("37280")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("33624")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("860")]),s._v(" D   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.4")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.01 app\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("从 top 的输出找到 D 状态进程的 PID, 可以发现, 这个界面里有两个 D 状态的进程, PID 分别是 4344 和 4345.")]),s._v(" "),a("p",[s._v("接着查看这些进程的磁盘读写情况. 对了, 别忘了工具是什么. 一般要查看某一个进程的资源使用情况, 都可以用老朋友 pidstat, 不过这次记得加上 -d 参数, 以便输出 I/O 使用情况.")]),s._v(" "),a("p",[s._v("比如, 以 4344 为例, 在终端里运行下面的 pidstat 命令, 并用 -p 4344 参数指定进程号:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -d 展示 I/O 统计数据, -p 指定进程号, 间隔 1 秒输出 3 组数据")]),s._v("\n$ pidstat "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4344")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n06:38:50      "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("UID")]),s._v("       PID   kB_rd/s   kB_wr/s kB_ccwr/s iodelay  Command\n06:38:51        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4344")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  app\n06:38:52        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4344")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  app\n06:38:53        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4344")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  app\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("在这个输出中, kB_rd 表示每秒读的 KB 数, kB_wr 表示每秒写的 KB 数, iodelay 表示 I/O 的延迟(单位是时钟周期). 它们都是 0, 那就表示此时没有任何的读写, 说明问题不是 4344 进程导致的.")]),s._v(" "),a("p",[s._v("可是, 用同样的方法分析进程 4345, 你会发现, 它也没有任何磁盘读写.")]),s._v(" "),a("p",[s._v("那要怎么知道, "),a("strong",[s._v("到底是哪个进程在进行磁盘读写呢")]),s._v("? 继续使用 pidstat, 但这次去掉进程号, 干脆就来观察所有进程的 I/O 使用情况.")]),s._v(" "),a("p",[s._v("在终端中运行下面的 pidstat 命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 间隔 1 秒输出多组数据 (这里是 20 组)")]),s._v("\n$ pidstat "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n06:48:46      "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("UID")]),s._v("       PID   kB_rd/s   kB_wr/s kB_ccwr/s iodelay  Command\n06:48:47        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4615")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  kworker/u4:1\n06:48:47        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6080")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("32768.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("170")]),s._v("  app\n06:48:47        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6081")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("32768.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("184")]),s._v("  app\n \n06:48:47      "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("UID")]),s._v("       PID   kB_rd/s   kB_wr/s kB_ccwr/s iodelay  Command\n06:48:48        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6080")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("110")]),s._v("  app\n \n06:48:48      "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("UID")]),s._v("       PID   kB_rd/s   kB_wr/s kB_ccwr/s iodelay  Command\n06:48:49        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6081")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("191")]),s._v("  app\n \n06:48:49      "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("UID")]),s._v("       PID   kB_rd/s   kB_wr/s kB_ccwr/s iodelay  Command\n \n06:48:50      "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("UID")]),s._v("       PID   kB_rd/s   kB_wr/s kB_ccwr/s iodelay  Command\n06:48:51        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6082")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("32768.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  app\n06:48:51        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6083")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("32768.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  app\n \n06:48:51      "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("UID")]),s._v("       PID   kB_rd/s   kB_wr/s kB_ccwr/s iodelay  Command\n06:48:52        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6082")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("32768.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("184")]),s._v("  app\n06:48:52        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6083")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("32768.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("175")]),s._v("  app\n \n06:48:52      "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("UID")]),s._v("       PID   kB_rd/s   kB_wr/s kB_ccwr/s iodelay  Command\n06:48:53        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6083")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("105")]),s._v("  app\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br")])]),a("p",[s._v("观察一会儿可以发现, 的确是 app 进程在进行磁盘读, 并且每秒读的数据有 32 MB, 看来就是 app 的问题. 不过, app 进程到底在执行啥 I/O 操作呢?")]),s._v(" "),a("p",[s._v("这里需要回顾一下进程用户态和内核态的区别. "),a("strong",[s._v("进程想要访问磁盘, 就必须使用系统调用")]),s._v(", 所以接下来, 重点就是找出 app 进程的系统调用了.")]),s._v(" "),a("p",[a("strong",[s._v("strace 正是最常用的跟踪进程系统调用的工具")]),s._v(". 所以从 pidstat 的输出中拿到进程的 PID 号, 比如 6082, 然后在终端中运行 strace 命令, 并用 -p 参数指定 PID 号:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("strace")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6082")]),s._v("\nstrace: attach: ptrace"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("PTRACE_SEIZE, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6082")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": Operation not permitted\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("这儿出现了一个奇怪的错误, strace 命令居然失败了, 并且命令报出的错误是"),a("strong",[s._v("没有权限")]),s._v(". 按理来说, 所有操作都已经是以 root 用户运行了, 为什么还会没有权限呢? 也可以先想一下, 碰到这种情况, 你会怎么处理呢?")]),s._v(" "),a("p",[a("strong",[s._v("一般遇到这种问题时, 我会先检查一下进程的状态是否正常")]),s._v(". 比如继续在终端中运行 ps 命令, 并使用 grep 找出刚才的 6082 号进程:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" aux "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6082")]),s._v("\nroot      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6082")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" pts/0    Z+   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v(":43   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("app"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("defunct"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("果然, 进程 6082 已经变成了 Z 状态, 也就是"),a("strong",[s._v("僵尸进程")]),s._v(". 僵尸进程都是已经退出的进程, 所以就没法儿继续分析它的系统调用. 关于僵尸进程的处理方法, 一会儿再说, 现在还是继续分析 iowait 的问题.")]),s._v(" "),a("p",[s._v("到这一步, 你应该注意到了, 系统 iowait 的问题还在继续, 但是 top, pidstat 这类工具已经不能给出更多的信息了. 这时就应该求助那些"),a("strong",[s._v("基于事件记录的动态追踪工具")]),s._v("了.")]),s._v(" "),a("p",[s._v("可以用 perf top 看看有没有新发现. 再或者可以在终端中运行 "),a("strong",[s._v("perf record")]),s._v(", 持续一会儿(例如 15 秒), 然后按 Ctrl+C 退出, 再运行 perf report 查看报告:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ perf record "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-g")]),s._v("\n$ perf report\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("接着, 找到关注的 app 进程, 按回车键展开调用栈, 就会得到下面这张调用关系图:")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/1b25b83b5a6b9dc07bc8dcf86640bdf5-20230731161933-iwb0d0z.png",alt:""}})]),s._v(" "),a("p",[s._v("这个图里的 swapper 是内核中的调度进程, 可以先忽略掉.")]),s._v(" "),a("p",[s._v("来看其他信息, 可以发现, app 的确在"),a("strong",[s._v("通过系统调用 sys_read() 读取数据")]),s._v(". 并且从 new_sync_read 和 blkdev_direct_IO 能看出, 进程正在对磁盘进行"),a("strong",[s._v("直接读")]),s._v(", 也就是"),a("strong",[s._v("绕过了系统缓存, 每个读请求都会从磁盘直接读")]),s._v(", 这就可以解释观察到的 iowait 升高了.")]),s._v(" "),a("p",[s._v("看来, 罪魁祸首是 app 内部进行了"),a("strong",[s._v("磁盘的直接 I/O")]),s._v(" 啊!")]),s._v(" "),a("p",[s._v("下面的问题就容易解决了. 接下来应该从代码层面分析, 究竟是哪里出现了直接读请求. 查看源码文件 "),a("a",{attrs:{href:"https://github.com/feiskyer/linux-perf-examples/blob/master/high-iowait-process/app.c",target:"_blank",rel:"noopener noreferrer"}},[s._v("app.c"),a("OutboundLink")],1),s._v(", 会发现它果然"),a("strong",[s._v("使用了 O_DIRECT 选项打开磁盘")]),s._v(", 于是绕过了系统缓存, 直接对磁盘进行读写.")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("open"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("disk, O_RDONLY"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("O_DIRECT"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("O_LARGEFILE, 0755"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("直接读写磁盘, 对 I/O 敏感型应用(比如数据库系统)是很友好的, 因为可以在应用中, 直接控制磁盘的读写. 但在大部分情况下, 最好还是通过系统缓存来优化磁盘 I/O, 换句话说, 删除 O_DIRECT 这个选项就是了.")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/feiskyer/linux-perf-examples/blob/master/high-iowait-process/app-fix1.c",target:"_blank",rel:"noopener noreferrer"}},[s._v("app-fix1.c"),a("OutboundLink")],1),s._v(" 就是修改后的文件, 我也打包成了一个镜像文件, 运行下面的命令, 就可以启动它了:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 首先删除原来的应用")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-f")]),s._v(" app\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 运行新的应用")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--privileged")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("app "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-itd")]),s._v(" feisky/app:iowait-fix1\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("最后, 再用 top 检查一下:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v(" - "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":59:32 up "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("19")]),s._v(" min,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" user,  load average: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.15")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.07")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.05")]),s._v("\nTasks: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("137")]),s._v(" total,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" running,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("72")]),s._v(" sleeping,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" stopped,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(" zombie\n%Cpu0  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" us,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.7")]),s._v(" sy,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" ni, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("98.0")]),s._v(" id,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v(" wa,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" hi,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" si,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" st\n%Cpu1  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" us,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.3")]),s._v(" sy,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" ni, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("98.7")]),s._v(" id,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" wa,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" hi,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" si,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" st\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n \n  PID "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("USER")]),s._v("      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3084")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" Z   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.3")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.04 app\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3085")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" Z   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.3")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.04 app\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("159848")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9120")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6724")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":09.03 systemd\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.00 kthreadd\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" I   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.40 kworker/0:0\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("你会发现, iowait 已经非常低了, 只有 0.3%, 说明刚才的改动已经成功修复了 iowait 高的问题, 大功告成! 不过, 别忘了僵尸进程还在等着你. 仔细观察僵尸进程的数量, 你会郁闷地发现, 僵尸进程还在不断的增长中.")]),s._v(" "),a("h5",{attrs:{id:"_4-僵尸进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-僵尸进程"}},[s._v("#")]),s._v(" 4.僵尸进程")]),s._v(" "),a("p",[s._v("接下来, 就来处理僵尸进程的问题. 既然僵尸进程是因为父进程没有回收子进程的资源而出现的, 那么要解决掉它们, 就要找到它们的根儿, "),a("mark",[a("strong",[s._v("也就是找出父进程, 然后在父进程里解决")])]),s._v("​ "),a("strong",[s._v(".")])]),s._v(" "),a("p",[s._v("父进程的找法前面讲过, 最简单的就是运行 "),a("strong",[s._v("pstree")]),s._v(" 命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -a 表示输出命令行选项")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# p 表 PID")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# s 表示指定进程的父进程")]),s._v("\n$ pstree "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-aps")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3084")]),s._v("\nsystemd,1\n  └─dockerd,15006 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-H")]),s._v(" fd://\n      └─docker-containe,15024 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--config")]),s._v(" /var/run/docker/containerd/containerd.toml\n          └─docker-containe,3991 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-namespace")]),s._v(" moby -workdir"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n              └─app,4009\n                  └─"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("app,3084"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("运行完, 你会发现 3084 号进程的"),a("strong",[s._v("父进程是 4009")]),s._v(", 也就是 app 应用.")]),s._v(" "),a("p",[s._v("所以接着查看 app 应用程序的代码, 看看子进程结束的处理是否正确, 比如"),a("strong",[s._v("有没有调用 wait() 或 waitpid()")]),s._v(" , 抑或是, "),a("strong",[s._v("有没有注册 SIGCHLD 信号的处理函数")]),s._v(".")]),s._v(" "),a("p",[s._v("现在查看修复 iowait 后的源码文件 "),a("a",{attrs:{href:"https://github.com/feiskyer/linux-perf-examples/blob/master/high-iowait-process/app-fix1.c",target:"_blank",rel:"noopener noreferrer"}},[s._v("app-fix1.c"),a("OutboundLink")],1),s._v(", 找到子进程的创建和清理的地方:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("int status "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("int i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i++"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      if"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("fork"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        sub_process"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    sleep"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n  while"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("wait"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("status"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("循环语句本来就容易出错, 你能找到这里的问题吗? 这段代码虽然看起来调用了 wait() 函数等待子进程结束, 但却错误地把 wait() 放到了 for 死循环的外面, 也就是说, "),a("strong",[s._v("wait() 函数实际上并没被调用到")]),s._v(", 把它挪到 for 循环的里面就可以了.")]),s._v(" "),a("p",[s._v("修改后的文件放到了 "),a("a",{attrs:{href:"https://github.com/feiskyer/linux-perf-examples/blob/master/high-iowait-process/app-fix2.c",target:"_blank",rel:"noopener noreferrer"}},[s._v("app-fix2.c"),a("OutboundLink")],1),s._v(" 中, 也打包成了一个 Docker 镜像, 运行下面的命令, 你就可以启动它:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 先停止产生僵尸进程的 app")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-f")]),s._v(" app\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 然后启动新的 app")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--privileged")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("app "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-itd")]),s._v(" feisky/app:iowait-fix2\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("启动后, 再用 top 最后来检查一遍:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v(" - "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),s._v(":00:44 up "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v(" min,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" user,  load average: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.05")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.05")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.04")]),s._v("\nTasks: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("125")]),s._v(" total,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" running,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("72")]),s._v(" sleeping,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" stopped,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" zombie\n%Cpu0  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" us,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.7")]),s._v(" sy,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" ni, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("98.3")]),s._v(" id,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" wa,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" hi,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" si,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" st\n%Cpu1  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" us,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.3")]),s._v(" sy,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" ni, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("98.7")]),s._v(" id,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" wa,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" hi,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" si,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" st\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n \n  PID "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("USER")]),s._v("      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3198")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4376")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("840")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("780")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.01 app\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.00 kthreadd\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" I   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.41 kworker/0:0\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("好了, 僵尸进程(Z 状态)没有了, iowait 也是 0, 问题终于全部解决了.")]),s._v(" "),a("h5",{attrs:{id:"_5-小结-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-小结-2"}},[s._v("#")]),s._v(" 5.小结")]),s._v(" "),a("p",[s._v("今天用一个多进程的案例, 分析系统等待 I/O 的 CPU 使用率(也就是 iowait%)升高的情况.")]),s._v(" "),a("p",[s._v("虽然这个案例是磁盘 I/O 导致了 iowait 升高, 不过 "),a("mark",[a("strong",[s._v("iowait 高不一定代表 I/O 有性能瓶颈. 当系统中只有 I/O 类型的进程在运行时, iowait 也会很高, 但实际上, 磁盘的读写远没有达到性能瓶颈的程度")])]),s._v(".")]),s._v(" "),a("p",[s._v("因此, 碰到 iowait 升高时, 需要先用 dstat, pidstat 等工具, "),a("strong",[s._v("确认是不是磁盘 I/O 的问题")]),s._v(", 然后再找是哪些进程导致了 I/O.")]),s._v(" "),a("p",[a("strong",[s._v("等待 I/O 的进程一般是不可中断状态, 所以用 ps 命令找到的 D 状态(即不可中断状态)的进程, 多为可疑进程")]),s._v(". 但这个案例中, 在 I/O 操作后, 进程又变成了僵尸进程, 所以不能用 strace 直接分析这个进程的系统调用.")]),s._v(" "),a("p",[s._v("这种情况下, 用了 perf 工具, 来分析系统的 CPU 时钟事件, 最终发现是直接 I/O 导致的问题. 这时再检查源码中对应位置的问题, 就很轻松了.")]),s._v(" "),a("p",[a("strong",[s._v("而僵尸进程的问题相对容易排查, 使用 pstree 找出父进程后, 去查看父进程的代码, 检查 wait() / waitpid() 的调用, 或是 SIGCHLD 信号处理函数的注册就行了")]),s._v(".")]),s._v(" "),a("h4",{attrs:{id:"_09-基础篇-怎么理解linux软中断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_09-基础篇-怎么理解linux软中断"}},[s._v("#")]),s._v(" 09-基础篇:怎么理解Linux软中断?")]),s._v(" "),a("p",[s._v("上一期用一个不可中断进程的案例, 学习了 "),a("strong",[s._v("iowait")]),s._v("(也就是等待 I/O 的 CPU 使用率)升高时的分析方法. 这里要记住, 进程的不可中断状态是系统的一种保护机制, 可以保证硬件的交互过程不被意外打断. 所以, "),a("strong",[s._v("短时间的不可中断状态是很正常的")]),s._v(".")]),s._v(" "),a("p",[s._v("但是, 当进程长时间都处于不可中断状态时, 就得当心了. 这时可以使用 dstat, pidstat 等工具, 确认是不是磁盘 I/O 的问题, 进而排查相关的进程和磁盘设备. 关于磁盘 I/O 的性能问题, 暂且不用专门去背, 会在后续的 I/O 部分详细介绍, 到时候理解了也就记住了.")]),s._v(" "),a("p",[s._v("其实除了 iowait, "),a("mark",[a("strong",[s._v("软中断(softirq)CPU 使用率升高也是最常见的一种性能问题")])]),s._v(". 接下来的两节, 就来学习软中断的内容, 还会以最常见的反向代理服务器 Nginx 的案例, 来分析这种情况.")]),s._v(" "),a("h5",{attrs:{id:"_1-从-取外卖-看中断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-从-取外卖-看中断"}},[s._v("#")]),s._v(' 1.从"取外卖"看中断')]),s._v(" "),a("p",[s._v("说到中断, "),a("strong",[s._v("中断是系统用来响应硬件设备请求的一种机制, 它会打断进程的正常调度和执行, 然后调用内核中的中断处理程序来响应设备的请求.")])]),s._v(" "),a("p",[s._v("为什么要有中断呢? 可以举个生活中的例子, 让你感受一下中断的魅力.")]),s._v(" "),a("p",[s._v("比如你订了一份外卖, 但是不确定外卖什么时候送到, 也没有别的方法了解外卖的进度, 但配送员送外卖是不等人的, 到了这儿没人取的话, 就直接走人了. 所以你只能苦苦等着, 时不时去门口看看外卖送到没, 而不能干其他事情.")]),s._v(" "),a("p",[s._v("不过如果在订外卖的时候就跟配送员约定好, 让他送到后给你打个电话, 那就不用苦苦等待了, 就可以去忙别的事情, 直到电话一响, 接电话, 取外卖就可以了.")]),s._v(" "),a("p",[s._v('这里的"打电话", 其实'),a("strong",[s._v("就是一个中断")]),s._v(". 没接到电话的时候, 你可以做其他的事情; 只有接到了电话(也就是发生中断), 你才要进行另一个动作: 取外卖.")]),s._v(" "),a("p",[s._v("这个例子就可以发现, "),a("mark",[a("strong",[s._v("中断其实是一种异步的事件处理机制, 可以提高系统的并发处理能力")])]),s._v(".")]),s._v(" "),a("p",[a("mark",[a("strong",[s._v("由于中断处理程序会打断其他进程的运行, 所以为了减少对正常进程运行调度的影响, 中断处理程序就需要尽可能快地运行. 如果中断本身要做的事情不多, 那么处理起来也不会有太大问题; 但如果中断要处理的事情很多, 中断服务程序就有可能要运行很长时间.")])])]),s._v(" "),a("p",[s._v("特别是, 中断处理程序在响应中断时, 还会临时关闭中断. 这就会导致上一次中断处理完成之前, 其他中断都不能响应, 也就是说"),a("strong",[s._v("中断有可能会丢失")]),s._v(".")]),s._v(" "),a("p",[s._v("那么还是以取外卖为例. 假如你订了 2 份外卖, 一份主食和一份饮料, 并且是由 2 个不同的配送员来配送. 这次你不用时时等待着, 两份外卖都约定了电话取外卖的方式. 但是问题又来了. 当第一份外卖送到时, 配送员给你打了个长长的电话, 商量发票的处理方式. 与此同时, 第二个配送员也到了, 也想给你打电话. 但是很明显, 因为电话占线(也就是关闭了中断响应), 第二个配送员的电话是打不通的. 所以第二个配送员很可能试几次后就走掉了(也就是丢失了一次中断).")]),s._v(" "),a("h5",{attrs:{id:"_2-软中断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-软中断"}},[s._v("#")]),s._v(" 2.软中断")]),s._v(" "),a("p",[s._v('如果弄清楚了 "取外卖" 的模式, 那对系统的中断机制就很容易理解了. 事实上, 为了解决中断处理程序执行过长和中断丢失的问题, '),a("strong",[s._v("Linux 将中断处理过程分成了两个阶段")]),s._v(", 也就是"),a("strong",[s._v("上半部和下半部")]),s._v(":")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("上半部用来快速处理中断")]),s._v(", 它在"),a("strong",[s._v("中断禁止模式")]),s._v("下运行, 主要处理跟硬件紧密相关的或时间敏感的工作.")]),s._v(" "),a("li",[a("strong",[s._v("下半部用来延迟处理上半部未完成的工作, 通常以内核线程的方式运行")]),s._v(".")])]),s._v(" "),a("p",[s._v("比如说前面取外卖的例子, 上半部就是接听电话, 告诉配送员你已经知道了, 其他事儿见面再说, 然后电话就可以挂断了; 下半部才是取外卖的动作, 以及见面后商量发票处理的动作. 这样, 第一个配送员不会占用太多时间, 当第二个配送员过来时, 照样能正常打通电话.")]),s._v(" "),a("p",[s._v("除了取外卖, 再举个最常见的网卡接收数据包的例子, 让你更好地理解.")]),s._v(" "),a("p",[s._v("网卡接收到数据包后, 会通过"),a("strong",[s._v("硬件中断")]),s._v("的方式, 通知内核有新的数据到了. 这时内核就应该调用中断处理程序来响应它. 可以先想一下, 这种情况下的上半部和下半部分别负责什么工作呢?")]),s._v(" "),a("p",[a("strong",[s._v("对上半部来说, 既然是快速处理, 其实就是要把网卡的数据读到内存中, 然后更新一下硬件寄存器的状态(表示数据已经读好了), 最后再发送一个软中断信号, 通知下半部做进一步的处理.")])]),s._v(" "),a("p",[a("strong",[s._v("而下半部被软中断信号唤醒后, 需要从内存中找到网络数据, 再按照网络协议栈, 对数据进行逐层解析和处理, 直到把它送给应用程序.")])]),s._v(" "),a("p",[s._v("所以, 这两个阶段也可以这样理解:")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("上半部直接处理硬件请求, 也就是常说的硬中断, 特点是快速执行")]),s._v(";")]),s._v(" "),a("li",[a("strong",[s._v("而下半部则是由内核触发, 也就是常说的软中断, 特点是延迟执行")]),s._v(".")])]),s._v(" "),a("p",[s._v('实际上, 上半部会打断 CPU 正在执行的任务, 然后立即执行中断处理程序. 而下半部以内核线程的方式执行, 并且每个 CPU 都对应一个软中断内核线程, 名字为 "ksoftirqd/CPU 编号", 比如说, 0 号 CPU 对应的软中断内核线程的名字就是 ksoftirqd/0.')]),s._v(" "),a("p",[s._v("不过要注意的是, 软中断不只包括了刚刚所讲的硬件设备中断处理程序的下半部, 一些内核自定义的事件也属于软中断, 比如内核调度和 RCU 锁(Read-Copy Update 的缩写, RCU 是 Linux 内核中最常用的锁之一)等.")]),s._v(" "),a("p",[s._v("那要怎么知道系统里有哪些软中断呢?")]),s._v(" "),a("h5",{attrs:{id:"_3-查看软中断和内核线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-查看软中断和内核线程"}},[s._v("#")]),s._v(" 3.查看软中断和内核线程")]),s._v(" "),a("p",[s._v("不知道你还记不记得, 前面提到过的 "),a("strong",[s._v("proc 文件系统. 它是一种内核空间和用户空间进行通信的机制, 可以用来查看内核的数据结构, 或者用来动态修改内核的配置")]),s._v(". 其中:")]),s._v(" "),a("ul",[a("li",[s._v("​"),a("code",[s._v("/proc/softirqs")]),s._v("​ 提供了"),a("strong",[s._v("软中断")]),s._v("的运行情况;")]),s._v(" "),a("li",[s._v("​"),a("code",[s._v("/proc/interrupts")]),s._v("​ 提供了"),a("strong",[s._v("硬中断")]),s._v("的运行情况.")])]),s._v(" "),a("p",[s._v("运行下面的命令, 查看 "),a("code",[s._v("/proc/softirqs")]),s._v("​ 文件的内容, 就可以看到各种类型软中断在不同 CPU 上的累积运行次数:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" /proc/softirqs\n                    CPU0       CPU1\n          HI:          "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("          "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n       TIMER:     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("811613")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1972736")]),s._v("\n      NET_TX:         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("49")]),s._v("          "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v("\n      NET_RX:    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1136736")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1506885")]),s._v("\n       BLOCK:          "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("          "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n    IRQ_POLL:          "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("          "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n     TASKLET:     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("304787")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3691")]),s._v("\n       SCHED:     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("689718")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1897539")]),s._v("\n     HRTIMER:          "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("          "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n         RCU:    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1330771")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1354737")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("在查看 /proc/softirqs 文件内容时, 要特别注意以下这两点.")]),s._v(" "),a("p",[s._v("第一, 要"),a("strong",[s._v("注意软中断的类型")]),s._v(", 也就是这个界面中第一列的内容. 从第一列可以看到, 软中断包括了 10 个类别, 分别对应不同的工作类型. 比如 NET_RX 表示网络接收中断, 而 NET_TX 表示网络发送中断.")]),s._v(" "),a("p",[s._v("第二, 要"),a("strong",[s._v("注意同一种软中断在不同 CPU 上的分布情况")]),s._v(", 也就是同一行的内容. 正常情况下, 同一种中断在不同 CPU 上的累积次数应该差不多. 比如这个界面中, NET_RX 在 CPU0 和 CPU1 上的中断次数基本是同一个数量级, 相差不大.")]),s._v(" "),a("p",[s._v("不过你可能发现, TASKLET 在不同 CPU 上的分布并不均匀. "),a("strong",[s._v("TASKLET 是最常用的软中断实现机制, 每个 TASKLET 只运行一次就会结束, 并且只在调用它的函数所在的 CPU 上运行")]),s._v(".")]),s._v(" "),a("p",[s._v("因此, 使用 TASKLET 特别简便, 当然也会存在一些问题, 比如说由于只在一个 CPU 上运行导致的调度不均衡, 再比如因为不能在多个 CPU 上并行运行带来了性能限制.")]),s._v(" "),a("p",[s._v("另外, 刚刚提到过, "),a("strong",[s._v("软中断实际上是以内核线程的方式运行的, 每个 CPU 都对应一个软中断内核线程, 这个软中断内核线程就叫做 ksoftirqd/CPU 编号")]),s._v(". 那要怎么查看这些线程的运行状况呢?")]),s._v(" "),a("p",[s._v("其实用 ps 命令就可以做到, 比如执行下面的指令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" aux "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" softirq\nroot         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" ?        S    Oct10   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":01 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("ksoftirqd/0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nroot        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" ?        S    Oct10   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":01 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("ksoftirqd/1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("注意, 这些线程的名字外面都有中括号, 这说明 ps 无法获取它们的命令行参数(cmline). 一般来说, ps 的输出中, "),a("strong",[s._v("名字括在中括号里的, 一般都是内核线程")]),s._v(".")]),s._v(" "),a("h5",{attrs:{id:"_4-小结-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-小结-3"}},[s._v("#")]),s._v(" 4.小结")]),s._v(" "),a("p",[a("strong",[s._v("Linux 中的中断处理程序分为上半部和下半部:")])]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("上半部对应硬件中断, 用来快速处理中断.")])]),s._v(" "),a("li",[a("strong",[s._v("下半部对应软中断, 用来异步处理上半部未完成的工作.")])])]),s._v(" "),a("p",[s._v("Linux 中的软中断包括网络收发, 定时, 调度, RCU 锁等各种类型, 可以通过查看 "),a("code",[s._v("/proc/softirqs")]),s._v("​ 来观察软中断的运行情况.")]),s._v(" "),a("h4",{attrs:{id:"_10-案例篇-系统的软中断cpu使用率升高该怎么办"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-案例篇-系统的软中断cpu使用率升高该怎么办"}},[s._v("#")]),s._v(" 10-案例篇:系统的软中断CPU使用率升高该怎么办?")]),s._v(" "),a("p",[s._v("上一讲介绍了软中断的基本原理, 先来简单复习下.")]),s._v(" "),a("p",[s._v("中断是一种异步的事件处理机制, 用来提高系统的并发处理能力. 中断事件发生, 会触发执行中断处理程序, 而中断处理程序被分为"),a("strong",[s._v("上半部和下半部")]),s._v("这两个部分.")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("上半部对应硬中断, 用来快速处理中断")]),s._v(";")]),s._v(" "),a("li",[a("strong",[s._v("下半部对应软中断, 用来异步处理上半部未完成的工作")]),s._v(".")])]),s._v(" "),a("p",[s._v("Linux 中的软中断包括网络收发, 定时, 调度, RCU 锁等各种类型, 可以查看 proc 文件系统中的 /proc/softirqs , 观察软中断的运行情况.")]),s._v(" "),a("p",[s._v("在 Linux 中, "),a("mark",[a("strong",[s._v("每个 CPU 都对应一个软中断内核线程, 名字是 ksoftirqd/CPU 编号. 当软中断事件的频率过高时, 内核线程也会因为 CPU 使用率过高而导致软中断处理不及时, 进而引发网络收发延迟, 调度缓慢等性能问题")])]),s._v(".")]),s._v(" "),a("p",[s._v("软中断 CPU 使用率过高也是一种最常见的性能问题. 本节就用最常见的反向代理服务器 Nginx 的案例, 教你学会分析这种情况.")]),s._v(" "),a("h5",{attrs:{id:"_1-案例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-案例"}},[s._v("#")]),s._v(" 1.案例")]),s._v(" "),a("h6",{attrs:{id:"_1-你的准备-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-你的准备-3"}},[s._v("#")]),s._v(" (1)你的准备")]),s._v(" "),a("p",[s._v("接下来的案例基于 Ubuntu 18.04, 也同样适用于其他的 Linux 系统. 案例环境是这样的:")]),s._v(" "),a("ul",[a("li",[s._v("机器配置: 2 CPU, 8 GB 内存.")]),s._v(" "),a("li",[s._v("预先安装 docker, sysstat, sar , hping3, tcpdump 等工具, 比如 apt-get install docker.io sysstat hping3 tcpdump.")])]),s._v(" "),a("p",[s._v("这里又用到了三个新工具, sar,  hping3 和 tcpdump, 先简单介绍一下:")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("sar 是一个系统活动报告工具")]),s._v(", 既可以实时查看系统的当前活动, 又可以配置保存和报告历史统计数据.")]),s._v(" "),a("li",[a("strong",[s._v("hping3 是一个可以构造 TCP/IP 协议数据包的工具")]),s._v(", 可以对系统进行安全审计, 防火墙测试等.")]),s._v(" "),a("li",[a("strong",[s._v("tcpdump 是一个常用的网络抓包工具")]),s._v(", 常用来分析各种网络问题.")])]),s._v(" "),a("p",[s._v("本次案例用到两台虚拟机, 下图是它们的关系.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/240b3e59e4d14c3e6c62815209620501-20230731161933-65ftqm7.png",alt:""}})]),s._v(" "),a("p",[s._v('可以看到, 其中一台虚拟机运行 Nginx, 用来模拟待分析的 Web 服务器; 而另一台当作 Web 服务器的客户端, 用来给 Nginx 增加压力请求. 使用两台虚拟机的目的, 是为了相互隔离, 避免"交叉感染".')]),s._v(" "),a("h6",{attrs:{id:"_2-操作和分析-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-操作和分析-5"}},[s._v("#")]),s._v(" (2)操作和分析")]),s._v(" "),a("p",[s._v("先在第一个终端, 执行下面的命令运行案例, 也就是一个最基本的 Nginx 应用:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 运行 Nginx 服务并对外开放 80 端口")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-itd")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("nginx "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(":80 nginx\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("然后, 在第二个终端, 使用 curl 访问 Nginx 监听的端口, 确认 Nginx 正常启动. 假设 192.168.0.30 是 Nginx 所在虚拟机的 IP 地址, 运行 curl 命令后应该会看到下面这个输出界面:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" http://192.168.0.30/\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("DOCTYPE html"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("html"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("head"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("title"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("Welcome to nginx"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("/title"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("接着, 还是在第二个终端, 运行 hping3 命令, 来模拟 Nginx 的客户端请求:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -S 参数表示设置 TCP 协议的 SYN(同步序列号), -p 表示目的端口为 80")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -i u100 表示每隔 100 微秒发送一个网络帧")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 注: 如果你在实践过程中现象不明显, 可以尝试把 100 调小, 比如调成 10 甚至 1")]),s._v("\n$ hping3 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-S")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-i")]),s._v(" u100 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("现在再回到第一个终端, 你应该发现了异常. 是不是感觉"),a("strong",[s._v("系统响应明显变慢")]),s._v("了, 即便只是在终端中敲几个回车, 都得很久才能得到响应? 这个时候应该怎么办呢?")]),s._v(" "),a("p",[s._v("虽然在运行 hping3 命令时, 就已经告诉你, 这是一个 SYN FLOOD 攻击, 你肯定也会想到从网络方面入手, 来分析这个问题. 不过, 在实际的生产环境中, 没人直接告诉你原因.")]),s._v(" "),a("p",[s._v("所以, 可以把 hping3 模拟 SYN FLOOD 这个操作暂时忘掉, 然后重新从观察到的问题开始, 分析系统的资源使用情况, 逐步找出问题的根源.")]),s._v(" "),a("p",[s._v("那么, 该从什么地方入手呢? 刚才发现, 简单的 SHELL 命令都明显变慢了, "),a("strong",[s._v("先看看系统的整体资源使用情况")]),s._v("应该是个不错的注意, 比如执行下 top 看看是不是出现了 CPU 的瓶颈. 在第一个终端运行 top 命令, 看一下系统整体的资源使用情况.")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# top 运行后按数字 1 切换到显示所有 CPU")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v(" - "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(":50:58 up "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" days, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v(":10,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" user,  load average: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("\nTasks: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("122")]),s._v(" total,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" running,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("71")]),s._v(" sleeping,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" stopped,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" zombie\n%Cpu0  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" us,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" sy,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" ni, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("96.7")]),s._v(" id,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" wa,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" hi,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.3")]),s._v(" si,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" st\n%Cpu1  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" us,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" sy,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" ni, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("95.6")]),s._v(" id,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" wa,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" hi,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.4")]),s._v(" si,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" st\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n \n  PID "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("USER")]),s._v("      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":01.64 ksoftirqd/0\n   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":01.97 ksoftirqd/1\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2663")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("923480")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("28292")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13996")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(":58.66 docker-containe\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3699")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" I   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.13 kworker/u4:0\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3708")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("44572")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4176")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3512")]),s._v(" R   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.07 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("225384")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9136")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6724")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":23.25 systemd\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.03 kthreadd\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[s._v("这里有没有发现异常的现象? 从第一行开始, 逐个看一下:")]),s._v(" "),a("ul",[a("li",[s._v("平均负载全是 0, 就绪队列里面只有一个进程(1 running).")]),s._v(" "),a("li",[s._v("每个 CPU 的使用率都挺低, 最高的 CPU1 的使用率也只有 4.4%, 并不算高.")]),s._v(" "),a("li",[s._v("再看进程列表, CPU 使用率最高的进程也只有 0.3%, 还是不高呀.")])]),s._v(" "),a("p",[s._v("那为什么系统的响应变慢了呢? 既然每个指标的数值都不大, 那就再来看看, 这些指标对应的更具体的含义. 毕竟, 哪怕是同一个指标, 用在系统的不同部位和场景上, 都有可能对应着不同的性能问题.")]),s._v(" "),a("p",[s._v("仔细看 top 的输出, "),a("strong",[s._v("两个 CPU 的使用率虽然分别只有 3.3% 和 4.4%, 但都用在了软中断上; 而从进程列表上也可以看到, CPU 使用率最高的也是软中断进程 ksoftirqd")]),s._v(". 看起来, 软中断有点可疑了.")]),s._v(" "),a("p",[s._v("根据上一期的内容, 既然软中断可能有问题, 那先要知道, 究竟是哪类软中断的问题. 停下来想想, 上一节用了什么方法, 来判断软中断类型呢? 没错, 还是 proc 文件系统. 观察 "),a("code",[s._v("/proc/softirqs")]),s._v("​ 文件的内容, 就能知道各种"),a("strong",[s._v("软中断类型的次数")]),s._v(".")]),s._v(" "),a("p",[s._v("不过, 这里的各类软中断次数, 又是什么时间段里的次数呢? 它是系统运行以来的"),a("strong",[s._v("累积中断次数")]),s._v(". 所以直接查看文件内容, 得到的只是累积中断次数, 对这里的问题并没有直接参考意义. 因为这些"),a("strong",[s._v("中断次数的变化速率")]),s._v("才是需要关注的.")]),s._v(" "),a("p",[s._v("那什么工具可以观察命令输出的变化情况呢? 在前面案例中用过的 "),a("strong",[s._v("watch 命令, 就可以定期运行一个命令来查看输出")]),s._v("; 如果再加上 -d 参数, 还可以高亮出变化的部分, 从高亮部分就可以直观看出, 哪些内容变化得更快.")]),s._v(" "),a("p",[s._v("还是在第一个终端, 运行下面的命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("watch")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" /proc/softirqs\n                    CPU0       CPU1\n          HI:          "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("          "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n       TIMER:    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1083906")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2368646")]),s._v("\n      NET_TX:         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("53")]),s._v("          "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v("\n      NET_RX:    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1550643")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1916776")]),s._v("\n       BLOCK:          "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("          "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n    IRQ_POLL:          "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("          "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n     TASKLET:     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("333637")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3930")]),s._v("\n       SCHED:     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("963675")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2293171")]),s._v("\n     HRTIMER:          "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("          "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n         RCU:    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1542111")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1590625")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("通过 "),a("code",[s._v("/proc/softirqs")]),s._v("​ 文件内容的变化情况, 可以发现, "),a("strong",[s._v("TIMER(定时中断), NET_RX(网络接收), SCHED(内核调度), RCU(RCU 锁)")]),s._v(" 等这几个软中断都在不停变化.")]),s._v(" "),a("p",[s._v("其中, NET_RX 也就是网络数据包接收软中断的变化速率最快. 而其他几种类型的软中断, 是保证 Linux 调度, 时钟和临界区保护这些正常工作所必需的, 所以它们有一定的变化倒是正常的.")]),s._v(" "),a("p",[s._v("那么接下来, 就从"),a("strong",[s._v("网络接收")]),s._v("的软中断着手, 继续分析. 既然是网络接收的软中断, 第一步应该就是观察系统的网络接收情况. 这里你可能想起了很多网络工具, 不过这里推荐使用 "),a("strong",[s._v("sar")]),s._v(".")]),s._v(" "),a("p",[a("strong",[s._v("sar 可以用来查看系统的网络收发情况, 还有一个好处是, 不仅可以观察网络收发的吞吐量(BPS, 每秒收发的字节数), 还可以观察网络收发的 PPS, 即每秒收发的网络帧数")]),s._v(".")]),s._v(" "),a("p",[s._v("在第一个终端中运行 sar 命令, 并添加 -n DEV 参数显示网络收发的报告:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -n DEV 表示显示网络收发的报告, 间隔 1 秒输出一组数据")]),s._v("\n$ sar "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-n")]),s._v(" DEV "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),s._v(":03:46        IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s   %ifutil\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),s._v(":03:47         eth0  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12607.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6304.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("664.86")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("358.11")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.01")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),s._v(":03:47      docker0   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6302.00")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12604.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("270.79")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("664.66")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),s._v(":03:47           lo      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),s._v(":03:47    veth9f6bbcd   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6302.00")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12604.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("356.95")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("664.66")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.05")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("对于 sar 的输出界面, 先来简单介绍一下, 从左往右依次是:")]),s._v(" "),a("ul",[a("li",[s._v("第一列: 表示报告的时间.")]),s._v(" "),a("li",[s._v("第二列: IFACE 表示"),a("strong",[s._v("网卡")]),s._v(".")]),s._v(" "),a("li",[s._v("第三, 四列: rxpck/s 和 txpck/s 分别表示"),a("strong",[s._v("每秒接收, 发送的网络帧数, 也就是 PPS")]),s._v(".")]),s._v(" "),a("li",[s._v("第五, 六列: rxkB/s 和 txkB/s 分别表示"),a("strong",[s._v("每秒接收, 发送的千字节数, 也就是 BPS")]),s._v(".")]),s._v(" "),a("li",[s._v("后面的其他参数基本接近 0, 显然跟今天的问题没有直接关系, 可以先忽略掉.")])]),s._v(" "),a("p",[s._v("具体来看输出的内容, 可以发现:")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("对网卡 eth0 来说, 每秒接收的网络帧数比较大")]),s._v(", 达到了 12607, 而发送的网络帧数则比较小, 只有 6304; 每秒接收的千字节数只有 664 KB, 而发送的千字节数更小, 只有 358 KB.")]),s._v(" "),a("li",[s._v("docker0 和 veth9f6bbcd 的数据跟 eth0 基本一致, 只是发送和接收相反, 发送的数据较大而接收的数据较小. 这是 Linux 内部网桥转发导致的, 暂且不用深究, 只要知道这是系统把 eth0 收到的包转发给 Nginx 服务即可. 具体工作原理, 会在后面的网络部分详细介绍.")])]),s._v(" "),a("p",[s._v("从这些数据有没有发现什么异常的地方?")]),s._v(" "),a("p",[s._v("既然怀疑是网络接收中断的问题, 还是重点来看 eth0: 接收的 PPS 比较大, 达到 12607, 而接收的 BPS 却很小, 只有 664 KB. 直观来看网络帧应该都是比较小的, 稍微计算一下, 664*1024/12607 = 54 字节, 说明平均每个网络帧只有 54 字节, 这显然是很小的网络帧, 也就是通常所说的小包问题.")]),s._v(" "),a("p",[s._v("那么, 有没有办法知道这是一个"),a("strong",[s._v("什么样的网络帧")]),s._v(", 以及从哪里发过来的呢?")]),s._v(" "),a("p",[s._v("使用 tcpdump 抓取 eth0 上的包就可以了. 我们事先已经知道, Nginx 监听在 80 端口, 它所提供的 HTTP 服务是基于 TCP 协议的, 所以可以指定 TCP 协议和 80 端口精确抓包.")]),s._v(" "),a("p",[s._v("接下来, 在第一个终端中运行 tcpdump 命令, 通过 "),a("code",[s._v("-i eth0")]),s._v("​ 选项指定网卡 eth0, 并通过 "),a("code",[s._v("tcp port 80")]),s._v("​ 选项指定 TCP 协议的 80 端口:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -i eth0 只抓取 eth0 网卡, -n 不解析协议名和主机名")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# tcp port 80 表示只抓取 tcp 协议并且端口号为 80 的网络帧")]),s._v("\n$ tcpdump "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-i")]),s._v(" eth0 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-n")]),s._v(" tcp port "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),s._v(":11:32.678966 IP "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.2.18238 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30.80: Flags "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("S"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("seq")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("458303614")]),s._v(", win "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("512")]),s._v(", length "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("从 tcpdump 的输出中, 可以发现")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("192.168.0.2.18238 > 192.168.0.30.80")]),s._v(", 表示网络帧从 192.168.0.2 的 18238 端口发送到 192.168.0.30 的 80 端口, 也就是从运行 hping3 机器的 18238 端口发送网络帧, 目的为 Nginx 所在机器的 80 端口.")]),s._v(" "),a("li",[s._v("​"),a("code",[s._v("Flags [S]")]),s._v("​ 则表示这是一个 SYN 包.")])]),s._v(" "),a("p",[s._v("再加上前面用 sar 发现的, PPS 超过 12000 的现象, 现在可以确认, 这就是从 192.168.0.2 这个地址发送过来的 SYN FLOOD 攻击.")]),s._v(" "),a("p",[s._v("到这里已经做了全套的性能诊断和分析. 从系统的软中断使用率高这个现象出发, 通过观察 "),a("code",[s._v("/proc/softirqs")]),s._v("​ 文件的变化情况, "),a("strong",[s._v("判断出软中断类型是网络接收中断")]),s._v("; 再通过 sar 和 tcpdump , 确认这是一个 SYN FLOOD 问题.")]),s._v(" "),a("p",[a("mark",[a("strong",[s._v("SYN FLOOD 问题最简单的解决方法, 就是从交换机或者硬件防火墙中封掉来源 IP, 这样 SYN FLOOD 网络帧就不会发送到服务器中")])]),s._v(".")]),s._v(" "),a("h5",{attrs:{id:"_2-小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-小结"}},[s._v("#")]),s._v(" 2.小结")]),s._v(" "),a("p",[s._v("软中断 CPU 使用率(softirq)升高是一种很常见的性能问题. 虽然软中断的类型很多, "),a("strong",[s._v("但实际生产中遇到的性能瓶颈大多是网络收发类型的软中断, 特别是网络接收的软中断")]),s._v(". 在碰到这类问题时, 可以借用 sar, tcpdump 等工具, 做进一步分析.")]),s._v(" "),a("h4",{attrs:{id:"_11-套路篇-如何迅速分析出系统cpu的瓶颈在哪里"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-套路篇-如何迅速分析出系统cpu的瓶颈在哪里"}},[s._v("#")]),s._v(" 11-套路篇:如何迅速分析出系统CPU的瓶颈在哪里?")]),s._v(" "),a("p",[s._v("前几节里, 我通过几个案例, 带你分析了各种常见的 CPU 性能问题. 通过这些, 我相信你对 CPU 的性能分析已经不再陌生和恐惧, 起码有了基本的思路, 也了解了不少 CPU 性能的分析工具.")]),s._v(" "),a("p",[s._v("不过, 我猜你可能也碰到了一个我曾有过的困惑:  CPU 的性能指标那么多, CPU 性能分析工具也是一抓一大把, 如果离开专栏, 换成实际的工作场景, 我又该观察什么指标, 选择哪个性能工具呢?")]),s._v(" "),a("p",[s._v('不要担心, 今天我就以多年的性能优化经验, 给你总结出一个"又快又准"的瓶颈定位套路, 告诉你在不同场景下, 指标工具怎么选, 性能瓶颈怎么找.')]),s._v(" "),a("h5",{attrs:{id:"_1-cpu性能指标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-cpu性能指标"}},[s._v("#")]),s._v(" 1.CPU性能指标")]),s._v(" "),a("p",[s._v("我们先来回顾下, 描述 CPU 的性能指标都有哪些. 你可以自己先找张纸, 凭着记忆写一写; 或者打开前面的文章, 自己总结一下.")]),s._v(" "),a("p",[s._v("首先, "),a("strong",[s._v("最容易想到的应该是 CPU 使用率")]),s._v(", 这也是实际环境中最常见的一个性能指标.")]),s._v(" "),a("p",[s._v("CPU 使用率描述了非空闲时间占总 CPU 时间的百分比, 根据 CPU 上运行任务的不同, 又被分为用户 CPU, 系统 CPU, 等待 I/O CPU, 软中断和硬中断等.")]),s._v(" "),a("ul",[a("li",[s._v("用户 CPU 使用率, 包括用户态 CPU 使用率(user)和低优先级用户态 CPU 使用率(nice), 表示 CPU 在用户态运行的时间百分比. 用户 CPU 使用率高, 通常说明有应用程序比较繁忙.")]),s._v(" "),a("li",[s._v("系统 CPU 使用率, 表示 CPU 在内核态运行的时间百分比(不包括中断). 系统 CPU 使用率高, 说明内核比较繁忙.")]),s._v(" "),a("li",[s._v("等待 I/O 的 CPU 使用率, 通常也称为 iowait, 表示等待 I/O 的时间百分比. iowait 高, 通常说明系统与硬件设备的 I/O 交互时间比较长.")]),s._v(" "),a("li",[s._v("软中断和硬中断的 CPU 使用率, 分别表示内核调用软中断处理程序, 硬中断处理程序的时间百分比. 它们的使用率高, 通常说明系统发生了大量的中断.")]),s._v(" "),a("li",[s._v("除了上面这些, 还有在虚拟化环境中会用到的窃取 CPU 使用率(steal)和客户 CPU 使用率(guest), 分别表示被其他虚拟机占用的 CPU 时间百分比, 和运行客户虚拟机的 CPU 时间百分比.")])]),s._v(" "),a("p",[a("strong",[s._v("第二个比较容易想到的, 应该是平均负载(Load Average)")]),s._v(" , 也就是系统的平均活跃进程数. 它反应了系统的整体负载情况, 主要包括三个数值, 分别指过去 1 分钟, 过去 5 分钟和过去 15 分钟的平均负载.")]),s._v(" "),a("p",[s._v("理想情况下, 平均负载等于逻辑 CPU 个数, 这表示每个 CPU 都恰好被充分利用. 如果平均负载大于逻辑 CPU 个数, 就表示负载比较重了.")]),s._v(" "),a("p",[a("strong",[s._v("第三个, 也是在专栏学习前你估计不太会注意到的, 进程上下文切换")]),s._v(", 包括:")]),s._v(" "),a("ul",[a("li",[s._v("无法获取资源而导致的自愿上下文切换;")]),s._v(" "),a("li",[s._v("被系统强制调度导致的非自愿上下文切换.")])]),s._v(" "),a("p",[s._v("上下文切换, 本身是保证 Linux 正常运行的一项核心功能. 但过多的上下文切换, 会将原本运行进程的 CPU 时间, 消耗在寄存器, 内核栈以及虚拟内存等数据的保存和恢复上, 缩短进程真正运行的时间, 成为性能瓶颈.")]),s._v(" "),a("p",[s._v("除了上面几种, "),a("strong",[s._v("还有一个指标, CPU 缓存的命中率")]),s._v(". 由于 CPU 发展的速度远快于内存的发展, CPU 的处理速度就比内存的访问速度快得多. 这样, CPU 在访问内存的时候, 免不了要等待内存的响应. 为了协调这两者巨大的性能差距, CPU 缓存(通常是多级缓存)就出现了.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/d863118fd498575559fcf96e0eae4f5a-20230731161933-5x3whn2.png",alt:""}})]),s._v(" "),a("p",[s._v("就像上面这张图显示的, CPU 缓存的速度介于 CPU 和内存之间, 缓存的是热点的内存数据. 根据不断增长的热点数据, 这些缓存按照大小不同分为 L1, L2, L3 等三级缓存, 其中 L1 和 L2 常用在单核中,  L3 则用在多核中.")]),s._v(" "),a("p",[s._v("从 L1 到 L3, 三级缓存的大小依次增大, 相应的, 性能依次降低(当然比内存还是好得多). 而它们的命中率, 衡量的是 CPU 缓存的复用情况, 命中率越高, 则表示性能越好.")]),s._v(" "),a("p",[s._v('这些指标都很有用, 需要我们熟练掌握, 所以我总结成了一张图, 帮你分类和记忆. 你可以保存打印下来, 随时查看复习, 也可以当成 CPU 性能分析的"指标筛选"清单.')]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/de210677c7d9d86fea1dbb903970f1bc-20230731161933-ecrs8oc.png",alt:""}})]),s._v(" "),a("h5",{attrs:{id:"_2-性能工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-性能工具"}},[s._v("#")]),s._v(" 2.性能工具")]),s._v(" "),a("p",[s._v("掌握了 CPU 的性能指标, 还需要知道怎样去获取这些指标, 也就是工具的使用.")]),s._v(" "),a("p",[s._v("还记得前面案例都用了哪些工具吗? 这里也一起回顾一下 CPU 性能工具.")]),s._v(" "),a("p",[s._v("首先, 平均负载的案例. 先用 uptime,  查看了系统的平均负载; 而在平均负载升高后, 又用 mpstat 和 pidstat, 分别观察了每个 CPU 和每个进程 CPU 的使用情况, 进而找出了导致平均负载升高的进程, 也就是压测工具 stress.")]),s._v(" "),a("p",[s._v("第二个, 上下文切换的案例. 先用 vmstat 查看了系统的上下文切换次数和中断次数; 然后通过 pidstat, 观察了进程的自愿上下文切换和非自愿上下文切换情况; 最后通过 pidstat, 观察了线程的上下文切换情况, 找出了上下文切换次数增多的根源, 也就是基准测试工具 sysbench.")]),s._v(" "),a("p",[s._v("第三个, 进程 CPU 使用率升高的案例. 先用 top 查看了系统和进程的 CPU 使用情况, 发现 CPU 使用率升高的进程是 php-fpm; 再用 perf top, 观察 php-fpm 的调用链, 最终找出 CPU 升高的根源, 也就是库函数 sqrt().")]),s._v(" "),a("p",[s._v("第四个, 系统的 CPU 使用率升高的案例. 先用 top 观察到了系统 CPU 升高, 但通过 top 和 pidstat, 却找不出高 CPU 使用率的进程. 于是, 重新审视 top 的输出, 又从 CPU 使用率不高但处于 Running 状态的进程入手, 找出了可疑之处, 最终通过 perf record 和 perf report, 发现原来是短时进程在捣鬼.")]),s._v(" "),a("p",[s._v("另外, 对于短时进程, 还介绍了一个专门的工具 execsnoop, 它可以实时监控进程调用的外部命令.")]),s._v(" "),a("p",[s._v("第五个, 不可中断进程和僵尸进程的案例. 先用 top 观察到了 iowait 升高的问题, 并发现了大量的不可中断进程和僵尸进程; 接着用 dstat 发现是这是由磁盘读导致的, 于是又通过 pidstat 找出了相关的进程. 但用 strace 查看进程系统调用却失败了, 最终还是用 perf 分析进程调用链, 才发现根源在于磁盘直接 I/O .")]),s._v(" "),a("p",[s._v("最后一个, 软中断的案例. 通过 top 观察到, 系统的软中断 CPU 使用率升高; 接着查看 "),a("code",[s._v("/proc/softirqs")]),s._v("​, 找到了几种变化速率较快的软中断; 然后通过 sar 命令, 发现是网络小包的问题, 最后再用 tcpdump, 找出网络帧的类型和来源, 确定是一个 SYN FLOOD 攻击导致的.")]),s._v(" "),a("p",[s._v("到这里, 估计你已经晕了吧, 原来短短几个案例, 我们已经用过十几种 CPU 性能工具了, 而且每种工具的适用场景还不同呢! 这么多的工具要怎么区分呢? 在实际的性能分析中, 又该怎么选择呢?")]),s._v(" "),a("p",[s._v("我的经验是, 从两个不同的维度来理解它们, 做到活学活用.")]),s._v(" "),a("h5",{attrs:{id:"_3-活学活用-把性能指标和性能工具联系起来"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-活学活用-把性能指标和性能工具联系起来"}},[s._v("#")]),s._v(" 3.活学活用-把性能指标和性能工具联系起来")]),s._v(" "),a("p",[a("strong",[s._v("第一个维度, 从 CPU 的性能指标出发. 也就是说, 当要查看某个性能指标时, 要清楚知道哪些工具可以做到")]),s._v(".")]),s._v(" "),a("p",[s._v("根据不同的性能指标, 对提供指标的性能工具进行分类和理解. 这样在实际排查性能问题时, 就可以清楚知道, 什么工具可以提供你想要的指标, 而不是毫无根据地挨个尝试, 撞运气.")]),s._v(" "),a("p",[s._v("其实, 我在前面的案例中已经多次用到了这个思路. 比如用 top 发现了软中断 CPU 使用率高后, 下一步自然就想知道具体的软中断类型. 那在哪里可以观察各类软中断的运行情况呢? 当然是 proc 文件系统中的 /proc/softirqs 这个文件.")]),s._v(" "),a("p",[s._v("紧接着, 比如说, 我们找到的软中断类型是网络接收, 那就要继续往网络接收方向思考. 系统的网络接收情况是什么样的? 什么工具可以查到网络接收情况呢? 在我们案例中, 用的正是 dstat.")]),s._v(" "),a("p",[s._v('虽然你不需要把所有工具背下来, 但如果能理解每个指标对应的工具的特性, 一定更高效, 更灵活地使用. 这里, 我把提供 CPU 性能指标的工具做成了一个表格, 方便你梳理关系和理解记忆, 当然, 你也可以当成一个"指标工具"指南来使用.')]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/77dae9f3f51e9a4e541cdaf24fdc9868-20230731161933-0eld9vv.png",alt:""}})]),s._v(" "),a("p",[s._v("下面再来看第二个维度.")]),s._v(" "),a("p",[a("strong",[s._v("第二个维度, 从工具出发. 也就是当你已经安装了某个工具后, 要知道这个工具能提供哪些指标")]),s._v(".")]),s._v(" "),a("p",[s._v("这在实际环境特别是生产环境中也是非常重要的, 因为很多情况下, 你并没有权限安装新的工具包, 只能最大化地利用好系统中已经安装好的工具, 这就需要你对它们有足够的了解.")]),s._v(" "),a("p",[s._v("具体到每个工具的使用方法, 一般都支持丰富的配置选项. 不过不用担心, 这些配置选项并不用背下来. 你只要知道有哪些工具, 以及这些工具的基本功能是什么就够了. 真正要用到的时候,  通过 man 命令, 查它们的使用手册就可以了.")]),s._v(" "),a("p",[s._v('同样的, 我也将这些常用工具汇总成了一个表格, 方便你区分和理解, 自然, 你也可以当成一个"工具指标"指南使用, 需要时查表即可.')]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/6b9227212ea6ffea890b9209c3d32e66-20230731161933-io32wcw.png",alt:""}})]),s._v(" "),a("h5",{attrs:{id:"_4-如何迅速分析cpu的性能瓶颈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-如何迅速分析cpu的性能瓶颈"}},[s._v("#")]),s._v(" 4.如何迅速分析CPU的性能瓶颈")]),s._v(" "),a("p",[s._v("我相信到这一步, 你对 CPU 的性能指标已经非常熟悉, 也清楚每种性能指标分别能用什么工具来获取.")]),s._v(" "),a("p",[s._v("那是不是说, 每次碰到 CPU 的性能问题, 你都要把上面这些工具全跑一遍, 然后再把所有的 CPU 性能指标全分析一遍呢?")]),s._v(" "),a("p",[s._v("你估计觉得这种简单查找的方式, 就像是在傻找. 不过, 别笑话, 因为最早的时候我就是这么做的. 把所有的指标都查出来再统一分析, 当然是可以的, 也很可能找到系统的潜在瓶颈.")]),s._v(" "),a("p",[s._v("但是这种方法的效率真的太低了! 耗时耗力不说, 在庞大的指标体系面前, 你一不小心可能就忽略了某个细节, 导致白干一场. 我就吃过好多次这样的苦.")]),s._v(" "),a("p",[s._v("所以, 在实际生产环境中, 我们通常都希望尽可能"),a("strong",[s._v("快")]),s._v("地定位系统的瓶颈, 然后尽可能"),a("strong",[s._v("快")]),s._v("地优化性能, 也就是要又快又准地解决性能问题.")]),s._v(" "),a("p",[s._v("那有没有什么方法, 可以又快又准找出系统瓶颈呢? 答案是肯定的.")]),s._v(" "),a("p",[s._v("虽然 CPU 的性能指标比较多, 但要知道, 既然都是描述系统的 CPU 性能, 它们就不会是完全孤立的, 很多指标间都有一定的关联. "),a("strong",[s._v("想弄清楚性能指标的关联性, 就要通晓每种性能指标的工作原理")]),s._v(". 这也是为什么我在介绍每个性能指标时, 都要穿插讲解相关的系统原理, 希望你能记住这一点.")]),s._v(" "),a("p",[s._v("举个例子, 用户 CPU 使用率高, 我们应该去排查进程的用户态而不是内核态. 因为用户 CPU 使用率反映的就是用户态的 CPU 使用情况, 而内核态的 CPU 使用情况只会反映到系统 CPU 使用率上.")]),s._v(" "),a("p",[s._v("你看, 有这样的基本认识, 我们就可以缩小排查的范围, 省时省力.")]),s._v(" "),a("p",[s._v("所以, 为了"),a("strong",[s._v("缩小排查范围, 我通常会先运行几个支持指标较多的工具, 如 top, vmstat 和 pidstat")]),s._v(" . 为什么是这三个工具呢? 仔细看看下面这张图, 你就清楚了.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/f2bf7129d971ae79d18198aba1e01f5b-20230731161933-710z5jb.png",alt:""}})]),s._v(" "),a("p",[s._v("这张图里列出了 top, vmstat 和 pidstat 分别提供的重要的 CPU 指标, 并用虚线表示关联关系, 对应出了性能分析下一步的方向.")]),s._v(" "),a("p",[s._v("通过这张图可以发现, 这三个命令, 几乎包含了所有重要的 CPU 性能指标, 比如:")]),s._v(" "),a("ul",[a("li",[s._v("从 top 的输出可以得到各种 CPU 使用率以及僵尸进程和平均负载等信息.")]),s._v(" "),a("li",[s._v("从 vmstat 的输出可以得到上下文切换次数, 中断次数, 运行状态和不可中断状态的进程数.")]),s._v(" "),a("li",[s._v("从 pidstat 的输出可以得到进程的用户 CPU 使用率, 系统 CPU 使用率, 以及自愿上下文切换和非自愿上下文切换情况.")])]),s._v(" "),a("p",[s._v("另外, 这三个工具输出的很多指标是相互关联的, 所以, 我也用虚线表示了它们的关联关系, 举几个例子你可能会更容易理解.")]),s._v(" "),a("p",[s._v("第一个例子, pidstat 输出的进程用户 CPU 使用率升高, 会导致 top 输出的用户 CPU 使用率升高. 所以, 当发现 top 输出的用户 CPU 使用率有问题时, 可以跟 pidstat 的输出做对比, 观察是否是某个进程导致的问题.")]),s._v(" "),a("p",[s._v("而找出导致性能问题的进程后, 就要用进程分析工具来分析进程的行为, 比如使用 strace 分析系统调用情况, 以及使用 perf 分析调用链中各级函数的执行情况.")]),s._v(" "),a("p",[s._v("第二个例子, top 输出的平均负载升高, 可以跟 vmstat 输出的运行状态和不可中断状态的进程数做对比, 观察是哪种进程导致的负载升高.")]),s._v(" "),a("ul",[a("li",[s._v("如果是不可中断进程数增多了, 那么就需要做 I/O 的分析, 也就是用 dstat 或 sar 等工具, 进一步分析 I/O 的情况.")]),s._v(" "),a("li",[s._v("如果是运行状态进程数增多了, 那就需要回到 top 和 pidstat, 找出这些处于运行状态的到底是什么进程, 然后再用进程分析工具, 做进一步分析.")])]),s._v(" "),a("p",[s._v("最后一个例子, 当发现 top 输出的软中断 CPU 使用率升高时, 可以查看 /proc/softirqs 文件中各种类型软中断的变化情况, 确定到底是哪种软中断出的问题. 比如, 发现是网络接收中断导致的问题, 那就可以继续用网络分析工具 sar 和 tcpdump 来分析.")]),s._v(" "),a("p",[s._v("注意, 我在这个图中只列出了最核心的几个性能工具, 并没有列出所有. 这么做, 一方面是不想用大量的工具列表吓到你. 在学习之初就接触所有或核心或小众的工具, 不见得是好事. 另一方面, 是希望你能先把重心放在核心工具上, 毕竟熟练掌握它们, 就可以解决大多数问题.")]),s._v(" "),a("p",[s._v("所以, 你可以保存下这张图, 作为 CPU 性能分析的思路图谱. 从最核心的这几个工具开始, 通过我提供的那些案例, 自己在真实环境里实践, 拿下它们.")]),s._v(" "),a("h5",{attrs:{id:"_5-小结-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-小结-3"}},[s._v("#")]),s._v(" 5.小结")]),s._v(" "),a("p",[s._v("本节回忆了常见的 CPU 性能指标, 梳理了常见的 CPU 性能观测工具, 最后还总结了快速分析 CPU 性能问题的思路.")]),s._v(" "),a("p",[s._v("虽然 CPU 的性能指标很多, 相应的性能分析工具也很多, 但熟悉了各种指标的含义之后, 就会发现它们其实都有一定的关联. 顺着这个思路, 掌握常用的分析套路并不难.")]),s._v(" "),a("h4",{attrs:{id:"_12-套路篇-cpu性能优化的几个思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-套路篇-cpu性能优化的几个思路"}},[s._v("#")]),s._v(" 12-套路篇:CPU性能优化的几个思路")]),s._v(" "),a("p",[s._v("上一节一起回顾了常见的 CPU 性能指标, 梳理了核心的 CPU 性能观测工具, 最后还总结了快速分析 CPU 性能问题的思路. 虽然 CPU 的性能指标很多, 相应的性能分析工具也很多, 但理解了各种指标的含义后, 你就会发现它们其实都有一定的关联. 顺着这些关系往下理解, 就会发现, 掌握这些常用的瓶颈分析套路, 其实并不难.")]),s._v(" "),a("p",[s._v("在找到 CPU 的性能瓶颈后, 下一步要做的就是优化了, 也就是找出充分利用 CPU 的方法, 以便完成更多的工作. 本节就来说说, "),a("strong",[s._v("优化 CPU 性能问题的思路和注意事项")]),s._v(".")]),s._v(" "),a("h5",{attrs:{id:"_1-性能优化方法论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-性能优化方法论"}},[s._v("#")]),s._v(" 1.性能优化方法论")]),s._v(" "),a("p",[s._v("在历经千辛万苦, 通过各种性能分析方法, 终于找到引发性能问题的瓶颈后, 是不是立刻就要开始优化了呢? 别急, 动手之前, 可以先看看下面这三个问题.")]),s._v(" "),a("ul",[a("li",[s._v("首先, "),a("strong",[s._v("既然要做性能优化, 那要怎么判断它是不是有效呢? 特别是优化后, 到底能提升多少性能呢")]),s._v("?")]),s._v(" "),a("li",[s._v("第二, "),a("strong",[s._v("性能问题通常不是独立的, 如果有多个性能问题同时发生, 你应该先优化哪一个呢")]),s._v("?")]),s._v(" "),a("li",[s._v("第三, "),a("strong",[s._v("提升性能的方法并不是唯一的, 当有多种方法可以选择时, 会选用哪一种呢? 是不是总选那个最大程度提升性能的方法就行了呢")]),s._v("?")])]),s._v(" "),a("p",[s._v("如果可以轻松回答这三个问题, 那么二话不说就可以开始优化.")]),s._v(" "),a("p",[s._v("比如, 在前面的不可中断进程案例中, 通过性能分析发现是因为一个进程的"),a("strong",[s._v("直接 I/O")]),s._v(' , 导致了 iowait 高达 90%. 那是不是用 "'),a("strong",[s._v("直接 I/O 换成缓存 I/O")]),s._v('" 的方法, 就可以立即优化了呢?')]),s._v(" "),a("p",[s._v("按照上面讲的, 可以先自己思考下那三点. 如果不能确定, 下面一起来看看.")]),s._v(" "),a("ul",[a("li",[s._v("第一个问题, 直接 I/O 换成缓存 I/O, 可以把 iowait 从 90% 降到接近 0, 性能提升很明显.")]),s._v(" "),a("li",[s._v("第二个问题, 没有发现其他性能问题, 直接 I/O 是唯一的性能瓶颈, 所以不用挑选优化对象.")]),s._v(" "),a("li",[s._v("第三个问题, 缓存 I/O 是目前用到的最简单的优化方法, 而且这样优化并不会影响应用的功能.")])]),s._v(" "),a("p",[s._v("好的, 这三个问题很容易就能回答, 所以立即优化没有任何问题.")]),s._v(" "),a("p",[s._v("但是很多现实情况并不像这个例子那么简单. 性能评估可能有多重指标, 性能问题可能会多个同时发生, 而且, 优化某一个指标的性能, 可能又导致其他指标性能的下降. 那么, 面对这种复杂的情况, 该怎么办呢?")]),s._v(" "),a("p",[s._v("接下来就来深入分析这三个问题.")]),s._v(" "),a("h6",{attrs:{id:"_1-怎么评估性能优化的效果"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-怎么评估性能优化的效果"}},[s._v("#")]),s._v(" (1)怎么评估性能优化的效果?")]),s._v(" "),a("p",[s._v("首先来看第一个问题, 怎么评估性能优化的效果.")]),s._v(" "),a("p",[s._v("解决性能问题的目的, 自然是想得到一个性能提升的效果. 为了评估这个效果, 需要"),a("strong",[s._v("对系统的性能指标进行量化, 并且要分别测试出优化前, 后的性能指标, 用前后指标的变化来对比呈现效果")]),s._v('. 我把这个方法叫做性能评估 "三步走".')]),s._v(" "),a("ol",[a("li",[s._v("确定性能的量化指标.")]),s._v(" "),a("li",[s._v("测试优化前的性能指标.")]),s._v(" "),a("li",[s._v("测试优化后的性能指标.")])]),s._v(" "),a("p",[s._v("先看第一步, 性能的量化指标有很多, 比如 CPU 使用率, 应用程序的吞吐量, 客户端请求的延迟等, 都可以评估性能. 那应该选择什么指标来评估呢?")]),s._v(" "),a("p",[s._v("建议是"),a("strong",[s._v("不要局限在单一维度的指标上")]),s._v(", 至少要从"),a("strong",[s._v("应用程序和系统资源")]),s._v("这两个维度, 分别选择不同的指标. 比如, 以 Web 应用为例:")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("应用程序")]),s._v("的维度, 可以用"),a("strong",[s._v("吞吐量和请求延迟")]),s._v("来评估应用程序的性能.")]),s._v(" "),a("li",[a("strong",[s._v("系统资源")]),s._v("的维度, 可以用 "),a("strong",[s._v("CPU 使用率")]),s._v("来评估系统的 CPU 使用情况.")])]),s._v(" "),a("p",[s._v("之所以从这两个不同维度选择指标, 主要是因为应用程序和系统资源这两者间相辅相成的关系.")]),s._v(" "),a("ul",[a("li",[s._v("好的应用程序是性能优化的最终目的和结果, 系统优化总是为应用程序服务的. 所以, 必须要使用应用程序的指标, 来评估性能优化的整体效果.")]),s._v(" "),a("li",[s._v("系统资源的使用情况是影响应用程序性能的根源. 所以, 需要用系统资源的指标, 来观察和分析瓶颈的来源.")])]),s._v(" "),a("p",[s._v("至于接下来的两个步骤, 主要是为了对比优化前后的性能, 更直观地呈现效果. 如果第一步, 是从两个不同维度选择了多个指标, 那么在性能测试时, 就需要获得这些指标的具体数值.")]),s._v(" "),a("p",[s._v("还是以刚刚的 Web 应用为例, 对应上面提到的几个指标, 可以选择 ab 等工具, 测试 Web 应用的并发请求数和响应延迟. 而测试的同时, 还可以用 vmstat, pidstat 等性能工具, 观察系统和进程的 CPU 使用率. 这样就同时获得了应用程序和系统资源这两个维度的指标数值.")]),s._v(" "),a("p",[s._v("不过, 在进行性能测试时, 有两个特别重要的地方需要注意下.")]),s._v(" "),a("ul",[a("li",[s._v("第一, "),a("strong",[s._v("要避免性能测试工具干扰应用程序的性能")]),s._v(". 通常, 对 Web 应用来说, 性能测试工具跟目标应用程序要在不同的机器上运行. 比如, 在之前的 Nginx 案例中, 每次都会强调要用两台虚拟机, 其中一台运行 Nginx 服务, 而另一台运行模拟客户端的工具, 就是为了避免这个影响.")]),s._v(" "),a("li",[s._v("第二, "),a("strong",[s._v("避免外部环境的变化影响性能指标的评估")]),s._v(". 这要求优化前, 后的应用程序, 都运行在相同配置的机器上, 并且它们的外部依赖也要完全一致. 比如还是拿 Nginx 来说, 就可以运行在同一台机器上, 并用相同参数的客户端工具来进行性能测试.")])]),s._v(" "),a("h6",{attrs:{id:"_2-多个性能问题同时存在要怎么选择"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-多个性能问题同时存在要怎么选择"}},[s._v("#")]),s._v(" (2)多个性能问题同时存在要怎么选择?")]),s._v(" "),a("p",[s._v("再来看第二个问题, 开篇就说过, 系统性能总是牵一发而动全身, 所以性能问题通常也不是独立存在的. 那当多个性能问题同时发生的时候, 应该先去优化哪一个呢?")]),s._v(" "),a("p",[s._v('在性能测试的领域, 流传很广的一个说法是 "二八原则", 也就是说 80% 的问题都是由 20% 的代码导致的. 只要找出这 20% 的位置, 就可以优化 80% 的性能. 所以, 我想表达的是, '),a("strong",[s._v("并不是所有的性能问题都值得优化")]),s._v(".")]),s._v(" "),a("p",[s._v("建议是, 动手优化之前先动脑, 先把所有这些性能问题给分析一遍, "),a("strong",[s._v("找出最重要的, 可以最大程度提升性能的问题")]),s._v(", 从它开始优化. 这样的好处是, 不仅性能提升的收益最大, 而且很可能其他问题都不用优化, 就已经满足了性能要求.")]),s._v(" "),a("p",[s._v("那关键就在于, 怎么判断出哪个性能问题最重要. 这其实还是性能分析要解决的核心问题, 只不过这里要分析的对象, 从原来的一个问题, 变成了多个问题, 思路其实还是一样的.")]),s._v(" "),a("p",[s._v("所以, 依然可以用前面讲过的方法挨个分析, 分别找出它们的瓶颈. 分析完所有问题后, 再按照因果等关系, 排除掉有因果关联的性能问题. 最后, 再对剩下的性能问题进行优化.")]),s._v(" "),a("p",[s._v("如果剩下的问题还是好几个, 就得分别进行性能测试了. 比较不同的优化效果后, 选择能明显提升性能的那个问题进行修复. 这个过程通常会花费较多的时间, 这里推荐两个可以简化这个过程的方法.")]),s._v(" "),a("ul",[a("li",[s._v("第一, 如果发现是系统资源达到了瓶颈, 比如 CPU 使用率达到了 100%, 那么首先优化的一定是系统资源使用问题. 完成系统资源瓶颈的优化后, 才要考虑其他问题.")]),s._v(" "),a("li",[s._v("第二, 针对不同类型的指标, 首先去优化那些由瓶颈导致的, 性能指标变化幅度最大的问题. 比如产生瓶颈后, 用户 CPU 使用率升高了 10%, 而系统 CPU 使用率却升高了 50%, 这个时候就应该首先优化系统 CPU 的使用.")])]),s._v(" "),a("h6",{attrs:{id:"_3-有多种优化方法时要如何选择"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-有多种优化方法时要如何选择"}},[s._v("#")]),s._v(" (3)有多种优化方法时要如何选择?")]),s._v(" "),a("p",[s._v("接着来看第三个问题, 当多种方法都可用时, 应该选择哪一种呢? 是不是最大提升性能的方法, 一定最好呢?")]),s._v(" "),a("p",[s._v("一般情况下, 当然想选能最大提升性能的方法, 这其实也是性能优化的目标.")]),s._v(" "),a("p",[s._v("但要注意, 现实情况要考虑的因素却没那么简单. 最直观来说, "),a("strong",[s._v("性能优化并非没有成本")]),s._v(". 性能优化通常会带来复杂度的提升, 降低程序的可维护性, 还可能在优化一个指标时, 引发其他指标的异常. 也就是说, 很可能优化了一个指标, 另一个指标的性能却变差了.")]),s._v(" "),a("p",[s._v("一个很典型的例子是将在网络部分讲到的 "),a("strong",[s._v("DPDK")]),s._v("(Data Plane Development Kit). DPDK 是一种优化网络处理速度的方法, 它通过绕开内核网络协议栈的方法, 提升网络的处理能力. 不过它有一个很典型的要求, 就是要独占一个 CPU 以及一定数量的内存大页, 并且总是以 100% 的 CPU 使用率运行. 所以如果 CPU 核数很少, 就有点得不偿失了.")]),s._v(" "),a("p",[s._v('所以, 在考虑选哪个性能优化方法时, 要综合多方面的因素. 切记, 不要想着 "一步登天", 试图一次性解决所有问题; 也不要只会 "拿来主义", 把其他应用的优化方法原封不动拿来用, 却不经过任何思考和分析.')]),s._v(" "),a("h5",{attrs:{id:"_2-cpu优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-cpu优化"}},[s._v("#")]),s._v(" 2.CPU优化")]),s._v(" "),a("p",[s._v("清楚了性能优化最基本的三个问题后, 接下来从"),a("strong",[s._v("应用程序和系统")]),s._v("的角度, 分别来看看"),a("strong",[s._v("如何才能降低 CPU 使用率, 提高 CPU 的并行处理能力")]),s._v(".")]),s._v(" "),a("h6",{attrs:{id:"_1-应用程序优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-应用程序优化"}},[s._v("#")]),s._v(" (1)应用程序优化")]),s._v(" "),a("p",[s._v("首先, 从应用程序的角度来说, 降低 CPU 使用率的最好方法当然是, 排除所有不必要的工作, 只保留最核心的逻辑. 比如减少循环的层次, 减少递归, 减少动态内存分配等等.")]),s._v(" "),a("p",[s._v("除此之外, 应用程序的性能优化也包括很多种方法, 这里列出了最常见的几种, 你可以记下来.")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("编译器优化")]),s._v(": 很多编译器都会提供优化选项, 适当开启它们, 在编译阶段就可以获得编译器的帮助, 来提升性能. 比如, gcc 就提供了优化选项 -O2, 开启后会自动对应用程序的代码进行优化.")]),s._v(" "),a("li",[a("strong",[s._v("算法优化")]),s._v(": 使用复杂度更低的算法, 可以显著加快处理速度. 比如, 在数据比较大的情况下, 可以用 O(nlogn) 的排序算法(如快排, 归并排序等), 代替 O(n^2) 的排序算法(如冒泡, 插入排序等).")]),s._v(" "),a("li",[a("strong",[s._v("异步处理")]),s._v(": 使用异步处理, 可以避免程序因为等待某个资源而一直阻塞, 从而提升程序的并发处理能力. 比如, 把轮询替换为事件通知, 就可以避免轮询耗费 CPU 的问题.")]),s._v(" "),a("li",[a("strong",[s._v("多线程代替多进程")]),s._v(": 前面讲过, 相对于进程的上下文切换, 线程的上下文切换并不切换进程地址空间, 因此可以降低上下文切换的成本.")]),s._v(" "),a("li",[a("strong",[s._v("善用缓存")]),s._v(": 经常访问的数据或者计算过程中的步骤, 可以放到内存中缓存起来, 这样在下次用时就能直接从内存中获取, 加快程序的处理速度.")])]),s._v(" "),a("h6",{attrs:{id:"_2-系统优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-系统优化"}},[s._v("#")]),s._v(" (2)系统优化")]),s._v(" "),a("p",[s._v("从系统的角度来说, 优化 CPU 的运行, 一方面要"),a("strong",[s._v("充分利用 CPU 缓存的本地性")]),s._v(", 加速缓存访问; 另一方面, 就是要"),a("strong",[s._v("控制进程的 CPU 使用情况, 减少进程间的相互影响")]),s._v(".")]),s._v(" "),a("p",[s._v("具体来说, 系统层面的 CPU 优化方法也有不少, 这里同样列举了最常见的一些方法, 方便你记忆和使用.")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("CPU 绑定")]),s._v(": 把进程绑定到一个或者多个 CPU 上, 可以提高 CPU 缓存的命中率, 减少跨 CPU 调度带来的上下文切换问题.")]),s._v(" "),a("li",[a("strong",[s._v("CPU 独占")]),s._v(": 跟 CPU 绑定类似, 进一步将 CPU 分组, 并通过 CPU "),a("strong",[s._v("亲和性")]),s._v("机制为其分配进程. 这样, 这些 CPU 就由指定的进程独占, 换句话说, 不允许其他进程再来使用这些 CPU.")]),s._v(" "),a("li",[a("strong",[s._v("优先级调整")]),s._v(": 使用 nice 调整进程的优先级, 正值调低优先级, 负值调高优先级. 在这里, 适当降低非核心应用的优先级, "),a("strong",[s._v("增高核心应用的优先级")]),s._v(", 可以确保核心应用得到优先处理.")]),s._v(" "),a("li",[a("strong",[s._v("为进程设置资源限制")]),s._v(": 使用 Linux cgroups 来"),a("strong",[s._v("设置进程的 CPU 使用上限")]),s._v(", 可以防止由于某个应用自身的问题, 而耗尽系统资源.")]),s._v(" "),a("li",[a("strong",[s._v("NUMA(Non-Uniform Memory Access)优化")]),s._v(": 支持 NUMA 的处理器会被划分为多个 node, 每个 node 都有自己的本地内存空间. NUMA 优化, 其实就是让 CPU 尽可能只访问本地内存.")]),s._v(" "),a("li",[a("strong",[s._v("中断负载均衡")]),s._v(": 无论是软中断还是硬中断, 它们的中断处理程序都可能会耗费大量的 CPU. 开启 irqbalance 服务或者配置 smp_affinity, 就可以"),a("strong",[s._v("把中断处理过程自动负载均衡到多个 CPU 上")]),s._v(".")])]),s._v(" "),a("h5",{attrs:{id:"_3-千万避免过早优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-千万避免过早优化"}},[s._v("#")]),s._v(" 3.千万避免过早优化")]),s._v(" "),a("p",[s._v('掌握上面这些优化方法后, 我估计, 很多人即使没发现性能瓶颈, 也会忍不住把各种各样的优化方法带到实际的开发中. 不过有句名言, "'),a("strong",[s._v("过早优化是万恶之源")]),s._v('", 我也非常赞同这一点, 过早优化不可取.')]),s._v(" "),a("p",[s._v("因为, 一方面, 优化会带来复杂性的提升, 降低可维护性; 另一方面, 需求不是一成不变的. 针对当前情况进行的优化, 很可能并不适应快速变化的新需求. 这样, 在新需求出现时, 这些复杂的优化, 反而可能阻碍新功能的开发.")]),s._v(" "),a("p",[s._v("所以, 性能优化最好是逐步完善, 动态进行, 不追求一步到位, 而要首先保证能满足当前的性能要求. 当发现性能不满足要求或者出现性能瓶颈时, 再根据性能评估的结果, 选择最重要的性能问题进行优化.")]),s._v(" "),a("h5",{attrs:{id:"_4-总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-总结"}},[s._v("#")]),s._v(" 4.总结")]),s._v(" "),a("p",[s._v('本节梳理了常见的 CPU 性能优化思路和优化方法. 发现性能问题后, 不要急于动手优化, 而要先找出最重要的, 可以获得最大性能提升的问题, 然后再从应用程序和系统两个方面入手优化. 这样不仅可以获得最大的性能提升, 而且很可能不需要优化其他问题, 就已经满足了性能要求. 但是记住, 一定要忍住"把 CPU 性能优化到极致"的冲动, 因为 CPU 并不是唯一的性能因素. 后续还会介绍更多的性能问题, 比如内存, 网络, I/O 甚至是架构设计的问题. 如果不做全方位的分析和测试, 只是单纯地把某个指标提升到极致, 并不一定能带来整体的收益.')]),s._v(" "),a("h3",{attrs:{id:"内存性能篇"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存性能篇"}},[s._v("#")]),s._v(" 内存性能篇")]),s._v(" "),a("h4",{attrs:{id:"_15-基础篇-linux内存是怎么工作的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_15-基础篇-linux内存是怎么工作的"}},[s._v("#")]),s._v(" 15-基础篇:Linux内存是怎么工作的?")]),s._v(" "),a("p",[s._v("前几节一起学习了 CPU 的性能原理和优化方法, 接下来将进入另一个板块——内存.")]),s._v(" "),a("p",[s._v("同 CPU 管理一样, 内存管理也是操作系统最核心的功能之一. "),a("strong",[s._v("内存主要用来存储系统和应用程序的指令, 数据, 缓存等")]),s._v(". 那么, Linux 到底是怎么管理内存的呢?")]),s._v(" "),a("h5",{attrs:{id:"_1-内存映射"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-内存映射"}},[s._v("#")]),s._v(" 1.内存映射")]),s._v(" "),a("p",[s._v("我们通常所说的机器的内存容量, 其实指的是"),a("strong",[s._v("物理内存")]),s._v(". 物理内存也称为主存, 大多数计算机用的主存都是动态随机访问内存(DRAM). 只有内核才可以直接访问物理内存. 那么, 进程要访问内存时, 该怎么办呢?")]),s._v(" "),a("p",[a("mark",[a("strong",[s._v("Linux 内核给每个进程都提供了一个独立的虚拟地址空间, 并且这个地址空间是连续的. 这样, 进程就可以很方便地访问内存, 更确切地说是访问虚拟内存")])]),s._v(".")]),s._v(" "),a("p",[s._v("虚拟地址空间的内部又被分为"),a("mark",[a("strong",[s._v("内核空间和用户空间")])]),s._v("两部分, 不同字长(也就是单个 CPU 指令可以处理数据的最大长度)的处理器, 地址空间的范围也不同. 比如最常见的 32 位和 64 位系统, 下面画了两张图来分别表示它们的虚拟地址空间, 如下所示:")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/3ff199022783c56041eba24df9ea8044-20230731161933-tgj4u9e.png",alt:""}})]),s._v(" "),a("p",[s._v("通过这里可以看出, 32 位系统的内核空间占用 1G, 位于最高处, 剩下的 3G 是用户空间. 而 64 位系统的内核空间和用户空间都是 128T, 分别占据整个内存空间的最高和最低处, 剩下的中间部分是未定义的.")]),s._v(" "),a("p",[s._v("还记得进程的用户态和内核态吗? "),a("strong",[s._v("进程在用户态时, 只能访问用户空间内存; 只有进入内核态后, 才可以访问内核空间内存")]),s._v(". 虽然每个进程的地址空间都包含了内核空间, 但这些内核空间, 其实关联的都是相同的物理内存. 这样, 进程切换到内核态后, 就可以很方便地访问内核空间内存.")]),s._v(" "),a("p",[s._v("既然"),a("strong",[s._v("每个进程都有一个这么大的地址空间, 那么所有进程的虚拟内存加起来, 自然要比实际的物理内存大得多")]),s._v(". 所以, "),a("strong",[s._v("并不是所有的虚拟内存都会分配物理内存, 只有那些实际使用的虚拟内存才分配物理内存, 并且分配后的物理内存")]),s._v(", 是通过"),a("mark",[a("strong",[s._v("内存映射")])]),s._v("来管理的.")]),s._v(" "),a("p",[a("mark",[a("strong",[s._v("内存映射, 其实就是将虚拟内存地址映射到物理内存地址. 为了完成内存映射, 内核为每个进程都维护了一张页表, 记录虚拟地址与物理地址的映射关系")])]),s._v(", 如下图所示:")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/b9a42cf0c0121bec352f92572253285c-20230731161933-2cicorc.png",alt:""}})]),s._v(" "),a("p",[s._v("页表实际上存储在 CPU 的内存管理单元 MMU 中, 这样正常情况下, 处理器就可以"),a("strong",[s._v("直接通过硬件, 找出要访问的内存")]),s._v(".")]),s._v(" "),a("p",[a("strong",[s._v("而当进程访问的虚拟地址在页表中查不到时, 系统会产生一个")]),s._v("​"),a("mark",[a("strong",[s._v("缺页异常")])]),s._v("​ "),a("strong",[s._v(", 进入内核空间分配物理内存, 更新进程页表, 最后再返回用户空间, 恢复进程的运行.")])]),s._v(" "),a("p",[s._v("另外, 前面在 CPU 上下文切换的部分曾经提到, TLB(Translation Lookaside Buffer, 转译后备缓冲器)会影响 CPU 的内存访问性能, 在这里其实就可以得到解释. "),a("strong",[s._v("TLB 其实就是 MMU 中页表的高速缓存")]),s._v(". 由于进程的虚拟地址空间是独立的, 而 TLB 的访问速度又比 MMU 快得多, 所以通过减少进程的上下文切换, 减少 TLB 的刷新次数, 就可以提高 TLB 缓存的使用率, 进而提高 CPU 的内存访问性能.")]),s._v(" "),a("p",[s._v("不过要注意, "),a("strong",[s._v("MMU 并不以字节为单位来管理内存, 而是")]),s._v("​"),a("mark",[a("strong",[s._v("规定了一个内存映射的最小单位, 也就是页")])]),s._v("​ "),a("strong",[s._v(", 通常是 4 KB 大小. 这样, 每一次内存映射, 都需要关联 4 KB 或者 4KB 整数倍的内存空间")]),s._v(".")]),s._v(" "),a("p",[s._v("页的大小只有 4 KB, 导致的另一个问题就是, "),a("strong",[s._v("整个页表会变得非常大")]),s._v(". 比方说, 仅 32 位系统就需要 100 多万个页表项(4GB/4KB), 才可以实现整个地址空间的映射. 为了解决页表项过多的问题, Linux 提供了两种机制, 也就是"),a("mark",[a("strong",[s._v("多级页表和大页")])]),s._v("(HugePage).")]),s._v(" "),a("p",[s._v("多级页表就是把内存分成区块来管理, 将原来的映射关系改成区块索引和区块内的偏移. 由于虚拟内存空间通常只用了很少一部分, 那么多级页表就只保存这些使用中的区块, 这样就可以大大地减少页表的项数.")]),s._v(" "),a("p",[s._v("Linux 用的正是"),a("mark",[a("strong",[s._v("四级页表")])]),s._v("来管理内存页, 如下图所示, 虚拟地址被分为 5 个部分, 前 4 个表项用于选择页, 而最后一个索引表示页内偏移.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/1aaec21bc5fc808fb45798b5746626ec-20230731161933-fnxdkm2.png",alt:""}})]),s._v(" "),a("p",[s._v("再看大页, 顾名思义, 就是比普通页更大的内存块, 常见的大小有 2MB 和 1GB. 大页通常用在使用大量内存的进程上, 比如 Oracle, DPDK 等.")]),s._v(" "),a("p",[s._v("通过这些机制, 在页表的映射下, 进程就可以通过虚拟地址来访问物理内存了. "),a("strong",[s._v("那么具体到一个 Linux 进程中, 这些内存又是怎么使用的呢")]),s._v("?")]),s._v(" "),a("h5",{attrs:{id:"_2-虚拟内存空间分布"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-虚拟内存空间分布"}},[s._v("#")]),s._v(" 2.虚拟内存空间分布")]),s._v(" "),a("p",[s._v("首先, 需要进一步"),a("strong",[s._v("了解虚拟内存空间的分布情况")]),s._v(". 最上方的内核空间不用多讲, 下方的用户空间内存, 其实又被分成了多个不同的"),a("mark",[a("strong",[s._v("段")])]),s._v(". 以 32 位系统为例, 下面画了一张图来表示它们的关系.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/4d9da1e3a6f987ccc41792e0c279cdbe-20230731161933-l2ze4n5.png",alt:""}})]),s._v(" "),a("p",[s._v("通过这张图可以看到, 用户空间内存, 从低到高分别是"),a("strong",[s._v("五种不同的内存段")]),s._v(".")]),s._v(" "),a("ol",[a("li",[a("strong",[s._v("只读段")]),s._v(", 包括代码和常量等.")]),s._v(" "),a("li",[a("strong",[s._v("数据段")]),s._v(", 包括全局变量等.")]),s._v(" "),a("li",[a("strong",[s._v("堆")]),s._v(", 包括动态分配的内存, 从低地址开始向上增长.")]),s._v(" "),a("li",[a("strong",[s._v("文件映射段")]),s._v(", 包括动态库, 共享内存等, 从高地址开始向下增长.")]),s._v(" "),a("li",[a("strong",[s._v("栈")]),s._v(", 包括局部变量和函数调用的上下文等. 栈的大小是固定的, 一般是 8 MB.")])]),s._v(" "),a("p",[s._v("在这五个内存段中, "),a("strong",[s._v("堆和文件映射段的内存是动态分配")]),s._v("的. 比如说, 使用 C 标准库的 malloc() 或者 mmap(), 就可以分别在堆和文件映射段动态分配内存.")]),s._v(" "),a("p",[s._v("其实 64 位系统的内存分布也类似, 只不过内存空间要大得多. 那么更重要的问题来了, 内存究竟是怎么分配的呢?")]),s._v(" "),a("h5",{attrs:{id:"_3-内存分配与回收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-内存分配与回收"}},[s._v("#")]),s._v(" 3.内存分配与回收")]),s._v(" "),a("p",[a("strong",[s._v("malloc()")]),s._v("  是 C 标准库提供的"),a("strong",[s._v("内存分配函数")]),s._v(", 对应到系统调用上, 有两种实现方式, 即 "),a("strong",[s._v("brk() 和 mmap()")]),s._v(" .")]),s._v(" "),a("p",[a("strong",[s._v("对小块内存(小于 128K), C 标准库使用 brk() 来分配")]),s._v(", 也就是通过移动堆顶的位置来分配内存. 这些内存释放后并不会立刻归还系统, 而是被缓存起来, 这样就可以重复使用.")]),s._v(" "),a("p",[a("strong",[s._v("而大块内存(大于 128K), 则直接使用内存映射 mmap() 来分配")]),s._v(", 也就是在文件映射段找一块空闲内存分配出去.")]),s._v(" "),a("p",[s._v("这两种方式, 自然各有优缺点.")]),s._v(" "),a("p",[s._v("brk() 方式的缓存, 可以减少缺页异常的发生, 提高内存访问效率. 不过, 由于这些内存没有归还系统, 在内存工作繁忙时, 频繁的内存分配和释放会造成"),a("strong",[s._v("内存碎片")]),s._v(".")]),s._v(" "),a("p",[s._v("而 mmap() 方式分配的内存, 会在释放时直接归还系统, 所以每次 mmap 都会发生缺页异常. 在内存工作繁忙时, 频繁的内存分配会导致大量的缺页异常, 使内核的管理负担增大. 这也是 malloc 只对大块内存使用 mmap 的原因.")]),s._v(" "),a("p",[s._v("了解这两种调用方式后, 还需要清楚一点, 那就是"),a("strong",[s._v("当这两种调用发生后, 其实并没有真正分配内存. 这些内存, 都只在首次访问时才分配, 也就是通过缺页异常进入内核中, 再由内核来分配内存")]),s._v(".")]),s._v(" "),a("p",[s._v("整体来说, Linux 使用伙伴系统来管理内存分配. 前面提到过, 这些内存在 MMU 中以页为单位进行管理, 伙伴系统也一样, 以页为单位来管理内存, 并且会通过相邻页的合并, 减少内存碎片化(比如 brk 方式造成的内存碎片).")]),s._v(" "),a("p",[s._v("你可能会想到一个问题, 如果遇到比页更小的对象, 比如不到 1K 的时候, 该怎么分配内存呢? 实际系统运行中, 确实有"),a("strong",[s._v("大量比页还小的对象, 如果为它们也分配单独的页, 那就太浪费内存")]),s._v("了.")]),s._v(" "),a("p",[s._v("所以, 在用户空间, malloc 通过 brk() 分配的内存, 在释放时并不立即归还系统, 而是缓存起来"),a("strong",[s._v("重复利用")]),s._v(". 在内核空间, Linux 则通过 slab 分配器来管理小内存. 可以把 slab 看成构建在伙伴系统上的一个缓存, 主要作用就是分配并释放内核中的小对象.")]),s._v(" "),a("p",[s._v("对内存来说, 如果只分配而不释放, 就会造成内存泄漏, 甚至会耗尽系统内存. 所以, 在应用程序用完内存后, 还需要"),a("strong",[s._v("调用 free() 或 unmap(), 来释放这些不用的内存")]),s._v(".")]),s._v(" "),a("p",[s._v("当然, 系统也不会任由某个进程用完所有内存. 在发现内存紧张时, "),a("strong",[s._v("系统就会通过一系列机制来回收内存")]),s._v(", 比如下面这三种方式:")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("回收缓存")]),s._v(", 比如使用 LRU(Least Recently Used)算法, 回收最近使用最少的内存页面;")]),s._v(" "),a("li",[a("strong",[s._v("回收不常访问的内存")]),s._v(", 把不常用的内存通过交换分区直接写到磁盘中;")]),s._v(" "),a("li",[a("strong",[s._v("杀死进程")]),s._v(", 内存紧张时系统还会通过 OOM(Out of Memory), 直接杀掉占用大量内存的进程.")])]),s._v(" "),a("p",[s._v("其中, 第二种方式回收不常访问的内存时, 会用到"),a("strong",[s._v("交换分区")]),s._v("(以下简称 Swap). Swap 其实就是把一块磁盘空间当成内存来用. 它可以把进程暂时不用的数据存储到磁盘中(这个过程称为"),a("strong",[s._v("换出")]),s._v("), 当进程访问这些内存时, 再从磁盘读取这些数据到内存中(这个过程称为"),a("strong",[s._v("换入")]),s._v(").")]),s._v(" "),a("p",[s._v("所以可以发现, "),a("strong",[s._v("Swap 把系统的可用内存变大了")]),s._v(". 不过要注意, 通常只在内存不足时, 才会发生 Swap 交换. 并且由于磁盘读写的速度远比内存慢, "),a("strong",[s._v("Swap 会导致严重的内存性能问题")]),s._v(".")]),s._v(" "),a("p",[s._v("第三种方式提到的 OOM(Out of Memory), 其实是内核的一种保护机制. 它监控进程的内存使用情况, 并且使用 oom_score 为每个进程的内存使用情况进行评分:")]),s._v(" "),a("ul",[a("li",[s._v("一个进程消耗的内存越大, oom_score 就越大;")]),s._v(" "),a("li",[s._v("一个进程运行占用的 CPU 越多, oom_score 就越小.")])]),s._v(" "),a("p",[s._v("这样, 进程的 oom_score 越大, 代表消耗的内存越多, 也就越容易被 OOM 杀死, 从而可以更好保护系统.")]),s._v(" "),a("p",[s._v("当然, 为了实际工作的需要, 管理员可以通过 "),a("code",[s._v("/proc")]),s._v("​ 文件系统, 手动设置进程的 oom_adj , 从而调整进程的 oom_score. oom_adj 的范围是 [-17, 15], 数值越大, 表示进程越容易被 OOM 杀死; 数值越小, 表示进程越不容易被 OOM 杀死, 其中 -17 表示禁止 OOM.")]),s._v(" "),a("p",[s._v("比如用下面的命令, 就可以把 sshd 进程的 oom_adj 调小为 -16, 这样, sshd 进程就不容易被 OOM 杀死.")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-16")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" /proc/"),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v("pidof sshd"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("/oom_adj\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h5",{attrs:{id:"_4-如何查看内存使用情况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-如何查看内存使用情况"}},[s._v("#")]),s._v(" 4.如何查看内存使用情况")]),s._v(" "),a("p",[s._v("通过了解内存空间的分布, 以及内存的分配和回收, 就对内存的工作原理应该有了大概的认识. 当然, 系统的实际工作原理更加复杂, 也会涉及其他一些机制, 这里只讲了最主要的原理. 掌握了这些, 可以对内存的运作有一条主线认识, 不至于脑海里只有术语名词的堆砌.")]),s._v(" "),a("p",[s._v("那么在了解内存的工作原理之后, 又该"),a("strong",[s._v("怎么查看系统内存使用情况")]),s._v("呢?")]),s._v(" "),a("p",[s._v("其实前面 CPU 内容的学习中, 也提到过一些相关工具. 在这里第一个想到的应该是 free 工具. 下面是一个 free 的输出示例:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 注意不同版本的 free 输出可能会有所不同")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("free")]),s._v("\n              total        used        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("free")]),s._v("      shared  buff/cache   available\nMem:        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8169348")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("263524")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6875352")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("668")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1030472")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7611064")]),s._v("\nSwap:             "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("           "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("           "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("可以看到, free 输出的是一个表格, 其中的数值都默认以"),a("strong",[s._v("字节")]),s._v("为单位. 表格总共有两行六列, 这两行分别是"),a("strong",[s._v("物理内存 Mem 和交换分区 Swap 的使用情况")]),s._v(", 而六列中, 每列数据的含义分别为:")]),s._v(" "),a("ul",[a("li",[s._v("第一列, total 是"),a("strong",[s._v("总内存")]),s._v("大小;")]),s._v(" "),a("li",[s._v("第二列, used 是"),a("strong",[s._v("已使用内存")]),s._v("的大小, 包含了共享内存;")]),s._v(" "),a("li",[s._v("第三列, free 是"),a("strong",[s._v("未使用内存")]),s._v("的大小;")]),s._v(" "),a("li",[s._v("第四列, shared 是"),a("strong",[s._v("共享内存")]),s._v("的大小;")]),s._v(" "),a("li",[s._v("第五列, buff/cache 是"),a("strong",[s._v("缓存和缓冲区")]),s._v("的大小;")]),s._v(" "),a("li",[s._v("最后一列, available 是"),a("strong",[s._v("新进程可用内存")]),s._v("的大小.")])]),s._v(" "),a("p",[s._v("这里尤其注意一下, 最后一列的可用内存 available. available 不仅包含未使用内存, 还包括了"),a("strong",[s._v("可回收的缓存")]),s._v(", 所以一般会比未使用内存更大. 不过, 并不是所有缓存都可以回收, 因为有些缓存可能正在使用中.")]),s._v(" "),a("p",[s._v("不过, "),a("mark",[a("strong",[s._v("free 显示的是整个系统的内存使用情况")])]),s._v(". 如果想"),a("mark",[a("strong",[s._v("查看进程的内存使用情况, 可以用 top 或者 ps 等工具")])]),s._v(". 比如, 下面是 top 的输出示例:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 按下 M 切换到内存排序")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\nKiB Mem "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8169348")]),s._v(" total,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6871440")]),s._v(" free,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("267096")]),s._v(" used,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1030812")]),s._v(" buff/cache\nKiB Swap:        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" total,        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" free,        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" used.  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7607492")]),s._v(" avail Mem\n \n  PID "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("USER")]),s._v("      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("430")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("19")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-1")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("122360")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("35588")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("23748")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.4")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":32.17 systemd-journal\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1075")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("771860")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22744")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11368")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":38.89 snapd\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1048")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("170904")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("17292")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9488")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.2")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.24 networkd-dispat\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("78020")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9156")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6644")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":22.92 systemd\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12376")]),s._v(" azure     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("76632")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7456")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6420")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.01 systemd\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12374")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("107984")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7312")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6304")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.00 sshd\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("top 输出界面的顶端, 也显示了系统整体的内存使用情况, 这些数据跟 free 类似, 就不再重复解释. 接着看下面的内容, 跟内存相关的几列数据, 比如 VIRT, RES, SHR 以及 %MEM 等.")]),s._v(" "),a("p",[s._v("这些数据, 包含了进程最重要的几个内存使用情况.")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("VIRT 是进程虚拟内存的大小")]),s._v(", 只要是进程申请过的内存, 即便还没有真正分配物理内存, 也会计算在内.")]),s._v(" "),a("li",[a("strong",[s._v("RES 是常驻内存的大小, 也就是进程实际使用的物理内存大小")]),s._v(", 但不包括 Swap 和共享内存.")]),s._v(" "),a("li",[a("strong",[s._v("SHR 是共享内存的大小")]),s._v(", 比如与其他进程共同使用的共享内存, 加载的动态链接库以及程序的代码段等.")]),s._v(" "),a("li",[a("strong",[s._v("%MEM 是进程使用物理内存占系统总内存的百分比")]),s._v(".")])]),s._v(" "),a("p",[s._v("除了要认识这些基本信息, 在查看 top 输出时, 还要注意两点.")]),s._v(" "),a("ul",[a("li",[s._v("第一, 虚拟内存通常并不会全部分配物理内存. 从上面的输出, 可以发现每个进程的虚拟内存都比常驻内存大得多.")]),s._v(" "),a("li",[s._v("第二, 共享内存 SHR 并不一定是共享的, 比方说, 程序的代码段, 非共享的动态链接库, 也都算在 SHR 里. 当然, SHR 也包括了进程间真正共享的内存. 所以在计算多个进程的内存使用时, 不要把所有进程的 SHR 直接相加得出结果.")])]),s._v(" "),a("h5",{attrs:{id:"_5-小结-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-小结-4"}},[s._v("#")]),s._v(" 5.小结")]),s._v(" "),a("p",[s._v("本节梳理了 Linux 内存的工作原理. "),a("strong",[s._v("对普通进程来说, 它能看到的其实是内核提供的虚拟内存, 这些虚拟内存还需要通过页表, 由系统映射为物理内存")]),s._v(".")]),s._v(" "),a("p",[s._v("当进程通过 malloc() 申请内存后, 内存并不会立即分配, 而是在首次访问时, 才通过缺页异常陷入内核中分配内存.")]),s._v(" "),a("p",[s._v("由于进程的虚拟地址空间比物理内存大很多, Linux 还提供了一系列的机制, 应对内存不足的问题, 比如缓存的回收, 交换分区 Swap 以及 OOM 等.")]),s._v(" "),a("p",[s._v("当需要了解系统或者进程的内存使用情况时, 可以用 free 和 top, ps 等性能工具. 它们都是分析性能问题时最常用的性能工具.")]),s._v(" "),a("h4",{attrs:{id:"_16-基础篇-怎么理解内存中的buffer和cache"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_16-基础篇-怎么理解内存中的buffer和cache"}},[s._v("#")]),s._v(" 16-基础篇:怎么理解内存中的Buffer和Cache?")]),s._v(" "),a("p",[s._v("上一节梳理了 Linux 内存管理的基本原理, 并学会了用 free 和 top 等工具, 来查看系统和进程的内存使用情况.")]),s._v(" "),a("p",[s._v("内存和 CPU 的关系非常紧密, 而内存管理本身也是很复杂的机制, 所以感觉知识很硬核, 很难啃, 都是正常的. 但还是那句话, 初学时不用非得理解所有内容, 继续往后学, 多理解相关的概念并配合一定的实践之后, 再回头复习往往会容易不少. 当然, 基本功不容放弃.")]),s._v(" "),a("p",[s._v("本节开始之前, 先来回顾一下系统的内存使用情况, 比如下面这个 free 输出界面:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 注意不同版本的 free 输出可能会有所不同")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("free")]),s._v("\n              total        used        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("free")]),s._v("      shared  buff/cache   available\nMem:        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8169348")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("263524")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6875352")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("668")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1030472")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7611064")]),s._v("\nSwap:             "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("           "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("           "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("显然, 这个界面包含了"),a("strong",[s._v("物理内存 Mem 和交换分区 Swap 的具体使用情况, 比如总内存, 已用内存, 缓存, 可用内存等. 其中缓存是 Buffer 和 Cache 两部分的总和")]),s._v(".")]),s._v(" "),a("p",[s._v("这里的大部分指标都比较容易理解, 但 Buffer 和 Cache 可能不太好区分. 从字面上来说, "),a("mark",[a("strong",[s._v("Buffer 是缓冲区, 而 Cache 是缓存, 两者都是数据在内存中的临时存储")])]),s._v('. 那么, 你知道这两种 "临时存储" 有什么区别吗?')]),s._v(" "),a("p",[s._v('注: 今天内容接下来的部分, Buffer 和 Cache 会都用英文来表示, 避免跟文中的 "缓存" 一词混淆. 而文中的 "缓存", 则通指内存中的临时存储.')]),s._v(" "),a("h5",{attrs:{id:"_1-free数据的来源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-free数据的来源"}},[s._v("#")]),s._v(" 1.free数据的来源")]),s._v(" "),a("p",[s._v("在正式讲解两个概念前, 可以先想想, 有没有什么途径来进一步了解它们? 除了中文翻译直接得到概念, 别忘了, Buffer 和 Cache 还是用 free 获得的指标.")]),s._v(" "),a("p",[s._v("还记得之前讲过的, 碰到看不明白的指标时该怎么办吗? 不懂就去查手册. 用 man 命令查询 free 的文档, 就可以找到对应指标的详细说明. 比如执行 man free, 就可以看到下面这个界面.")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("buffers\n              Memory used by kernel buffers "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Buffers "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" /proc/meminfo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n \n       cache  Memory used by the page cache and slabs "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Cached and SReclaimable "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" /proc/meminfo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n \n       buff/cache\n              Sum of buffers and cache\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("从 free 的手册中, 可以看到 buffer 和 cache 的说明.")]),s._v(" "),a("ul",[a("li",[a("mark",[a("strong",[s._v("Buffers 是内核缓冲区用到的内存")])]),s._v(", 对应的是  "),a("strong",[s._v("/proc/meminfo")]),s._v(" 中的 Buffers 值.")]),s._v(" "),a("li",[a("mark",[a("strong",[s._v("Cache 是内核页缓存和 Slab 用到的内存")])]),s._v(", 对应的是 "),a("code",[s._v("/proc/meminfo")]),s._v("​ 中的 Cached 与 SReclaimable 之和.")])]),s._v(" "),a("p",[s._v("这里的说明告诉我们, 这些数值都来自 "),a("code",[s._v("/proc/meminfo")]),s._v("​, 但更具体的 Buffers, Cached 和 SReclaimable 的含义, 还是没有说清楚.")]),s._v(" "),a("p",[s._v("要弄明白它们到底是什么, 我估计你第一反应就是去百度或者 Google 一下. 虽然大部分情况下, 网络搜索能给出一个答案. 但是, 且不说筛选信息花费的时间精力, 对你来说, 这个答案的准确性也是很难保证的. 要注意, 网上的结论可能是对的, 但是很可能跟你的环境并不匹配. 最简单来说, 同一个指标的具体含义, 就可能因为内核版本, 性能工具版本的不同而有挺大差别. 这也是为什么, 我总在专栏中强调通用思路和方法, 而不是让你死记结论. 对于案例实践来说, 机器环境就是的最大限制.")]),s._v(" "),a("p",[s._v("那么, 有没有更简单, 更准确的方法, 来查询它们的含义呢?")]),s._v(" "),a("h5",{attrs:{id:"_2-proc文件系统"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-proc文件系统"}},[s._v("#")]),s._v(" 2.proc文件系统")]),s._v(" "),a("p",[s._v("前面 CPU 性能模块就曾经提到过, "),a("code",[s._v("/proc")]),s._v("​ 是 Linux 内核"),a("strong",[s._v("提供的一种特殊文件系统, 是用户跟内核交互的接口")]),s._v(". 比方说, 用户可以从 "),a("code",[s._v("/proc")]),s._v("​ 中查询内核的运行状态和配置选项, 查询进程的运行状态, 统计数据等, 当然, 也可以通过 "),a("code",[s._v("/proc")]),s._v("​ 来修改内核的配置.")]),s._v(" "),a("p",[a("mark",[a("strong",[s._v("proc 文件系统同时也是很多性能工具的最终数据来源")])]),s._v(". 比如刚才看到的 free, 就是通过读取 "),a("code",[s._v("/proc/meminfo")]),s._v("​, 得到内存的使用情况.")]),s._v(" "),a("p",[s._v("继续说回 "),a("code",[s._v("/proc/meminfo")]),s._v("​, 既然 Buffers, Cached, SReclaimable 这几个指标不容易理解, 那还得继续查 proc 文件系统, 获取它们的详细定义.")]),s._v(" "),a("p",[s._v("执行 man proc, 就可以得到 proc 文件系统的详细文档. 注意这个文档比较长, 最好搜索一下(比如搜索 meminfo), 以便更快定位到内存部分.")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("Buffers %lu\n    Relatively temporary storage "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" raw disk blocks that shouldn"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'t get tremendously large (20MB or so).\n \nCached %lu\n   In-memory cache for files read from the disk (the page cache).  Doesn'")]),s._v("t include SwapCached.\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\nSReclaimable %lu "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("since Linux "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.6")]),s._v(".19"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    Part of Slab, that might be reclaimed, such as caches.\n  \nSUnreclaim %lu "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("since Linux "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.6")]),s._v(".19"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    Part of Slab, that cannot be reclaimed on memory pressure.\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("通过这个文档可以看到:")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("Buffers 是对原始磁盘块的临时存储, 也就是用来")]),s._v("​"),a("mark",[a("strong",[s._v("缓存磁盘的数据")])]),s._v("​ "),a("strong",[s._v(", 通常不会特别大(20MB 左右). 这样, 内核就可以把分散的写集中起来, 统一优化磁盘的写入, 比如可以把多次小的写合并成单次大的写等等.")])]),s._v(" "),a("li",[a("strong",[s._v("Cached 是从磁盘读取文件的页缓存, 也就是用来")]),s._v("​"),a("mark",[a("strong",[s._v("缓存从文件读取的数据")])]),s._v("​ "),a("strong",[s._v(". 这样下次访问这些文件数据时, 就可以直接从内存中快速获取, 而不需要再次访问缓慢的磁盘.")])]),s._v(" "),a("li",[s._v("SReclaimable 是 Slab 的一部分. Slab 包括两部分, 其中的可回收部分, 用 SReclaimable 记录; 而不可回收部分, 用 SUnreclaim 记录.")])]),s._v(" "),a("p",[s._v("这里终于找到了这三个指标的详细定义. 不过, 知道这个定义就真的理解了吗? 这里提两个问题, 想想能不能回答出来.")]),s._v(" "),a("ul",[a("li",[s._v("第一个问题, Buffer 的文档没有提到这是磁盘读数据还是写数据的缓存, 而在很多网络搜索的结果中都会提到 Buffer 只是对"),a("strong",[s._v("将要写入磁盘数据")]),s._v("的缓存. 那反过来说, 它会不会也缓存从磁盘中读取的数据呢?")]),s._v(" "),a("li",[s._v("第二个问题, 文档中提到, Cache 是对从文件读取数据的缓存, 那么它是不是也会缓存写文件的数据呢?")])]),s._v(" "),a("p",[s._v("为了解答这两个问题, 接下来将用几个案例来展示 Buffer 和 Cache 在不同场景下的使用情况.")]),s._v(" "),a("h5",{attrs:{id:"_3-案例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-案例"}},[s._v("#")]),s._v(" 3.案例")]),s._v(" "),a("h6",{attrs:{id:"_1-你的准备-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-你的准备-4"}},[s._v("#")]),s._v(" (1)你的准备")]),s._v(" "),a("p",[s._v("跟前面实验一样, 今天的案例也是基于 Ubuntu 18.04, 当然, 其他 Linux 系统也适用. 案例环境是这样的.")]),s._v(" "),a("ul",[a("li",[s._v("机器配置: 2 CPU, 8GB 内存.")]),s._v(" "),a("li",[s._v("预先安装 sysstat 包, 如 apt install sysstat.")])]),s._v(" "),a("p",[s._v("之所以要安装 sysstat, 是因为要用到 vmstat 来观察 Buffer 和 Cache 的变化情况. 虽然从 "),a("code",[s._v("/proc/meminfo")]),s._v("​ 里也可以读到相同的结果, 但毕竟还是 vmstat 的结果更加直观.")]),s._v(" "),a("p",[s._v("另外, 这几个案例使用了 dd 来模拟磁盘和文件的 I/O, 所以也需要观测 I/O 的变化情况.")]),s._v(" "),a("p",[s._v("上面的工具安装完成后, 可以打开两个终端, 连接到 Ubuntu 机器上.")]),s._v(" "),a("h6",{attrs:{id:"_2-场景1-磁盘和文件写案例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-场景1-磁盘和文件写案例"}},[s._v("#")]),s._v(" (2)场景1:磁盘和文件写案例")]),s._v(" "),a("p",[s._v("先来模拟第一个场景. 首先在第一个终端, 运行下面这个 vmstat 命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 每隔 1 秒输出 1 组数据")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("vmstat")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nprocs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----\nr  b   swpd   "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("free")]),s._v("   buff  cache   si   so    bi    bo   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v("   cs us sy "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("id")]),s._v(" wa st\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7743608")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1112")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("92168")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("52")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("152")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7743608")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1112")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("92168")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("36")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("92")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("输出界面里, 内存部分的 buff 和 cache, 以及 io 部分的 bi 和 bo 就是要关注的重点.")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("buff 和 cache 就是前面看到的 Buffers 和 Cache, 单位是 KB.")])]),s._v(" "),a("li",[a("strong",[s._v("bi 和 bo 则分别表示块设备读取和写入的大小, 单位为块/秒")]),s._v(". 因为 Linux 中块的大小是 1KB, 所以这个单位也就等价于 KB/s.")])]),s._v(" "),a("p",[s._v("正常情况下, 空闲系统中, 应该看到的是这几个值在多次结果中一直保持不变.")]),s._v(" "),a("p",[s._v("接下来, 到第二个终端执行 dd 命令, 通过"),a("strong",[s._v("读取随机设备")]),s._v(", 生成一个 500MB 大小的文件:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("dd")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/dev/urandom "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("of")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/tmp/file "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("bs")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("1M "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("count")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("500")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("然后再回到第一个终端, 观察 Buffer 和 Cache 的变化情况:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----\nr  b   swpd   "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("free")]),s._v("   buff  cache   si   so    bi    bo   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v("   cs us sy "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("id")]),s._v(" wa st\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7499460")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1344")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("230484")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("29")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("145")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7338088")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1752")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("390512")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("488")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("39")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("558")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("47")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("53")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7158872")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1752")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("568800")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("376")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("49")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6980308")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1752")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("747860")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("360")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6977448")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1752")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("752072")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("29")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("138")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6977440")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1760")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("752080")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("152")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("212")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("99")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6977216")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1768")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("752104")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("122880")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("33")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("234")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("51")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("49")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6977440")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1768")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("752108")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10240")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("38")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("196")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("通过观察 vmstat 的输出, 可以发现, 在 dd 命令运行时, "),a("strong",[s._v("Cache 在不停地增长, 而 Buffer 基本保持不变")]),s._v(".")]),s._v(" "),a("p",[s._v("再进一步观察 I/O 的情况, 会看到:")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("在 Cache 刚开始增长时, 块设备 I/O 很少, bi 只出现了一次 488 KB/s, bo 则只有一次 4KB. 而过一段时间后, 才会出现大量的块设备写, 比如 bo 变成了 122880")]),s._v(".")]),s._v(" "),a("li",[a("strong",[s._v("当 dd 命令结束后, Cache 不再增长, 但块设备写还会持续一段时间, 并且, 多次 I/O 写的结果加起来, 才是 dd 要写的 500M 的数据")]),s._v(".")])]),s._v(" "),a("p",[s._v("把这个结果, 跟刚刚了解到的 Cache 的定义做个对比, 你可能会有点晕乎. 为什么前面文档上说 Cache 是文件读的页缓存, 怎么现在写文件也有它的份?")]),s._v(" "),a("p",[s._v("这个疑问暂且先记下来, 接着再来看"),a("strong",[s._v("另一个磁盘写的案例")]),s._v(". 两个案例结束后, 再统一进行分析.")]),s._v(" "),a("p",[s._v("不过, 对于接下来的案例, 必须强调一点: 下面的命令对环境要求很高, 需要系统配置多块磁盘, 并且磁盘分区 "),a("code",[s._v("/dev/sdb1")]),s._v("​ 还要处于未使用状态. 如果只有一块磁盘, 千万不要尝试, 否则将会对你的磁盘分区造成损坏. 如果系统符合标准, 就可以继续在第二个终端中, 运行下面的命令. 清理缓存后, 向磁盘分区 "),a("code",[s._v("/dev/sdb1")]),s._v("​ 写入 2GB 的随机数据:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 首先清理缓存")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" /proc/sys/vm/drop_caches\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 然后运行 dd 命令向磁盘分区 /dev/sdb1 写入 2G 数据")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("dd")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/dev/urandom "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("of")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/dev/sdb1 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("bs")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("1M "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("count")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2048")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("然后, 再回到终端一, 观察内存和 I/O 的变化情况:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----\n r  b   swpd   "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("free")]),s._v("   buff  cache   si   so    bi    bo   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v("   cs us sy "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("id")]),s._v(" wa st\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7584780")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("153592")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("97436")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("684")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("31")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("423")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("48")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7418580")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("315384")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("101668")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("32")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("144")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7253664")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("475844")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("106208")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("137")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7093352")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("631800")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("110520")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("23")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("223")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6930056")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("790520")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("114980")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12804")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("23")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("168")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6757204")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("949240")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("119396")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("183804")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("191")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("53")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("26")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6591516")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1107960")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123840")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("77316")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("232")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("52")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("33")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("从这里会看到, 虽然"),a("strong",[s._v("同是写数据, 写磁盘跟写文件的现象还是不同的. 写磁盘时(也就是 bo 大于 0 时), Buffer 和 Cache 都在增长, 但显然 Buffer 的增长快得多")]),s._v(".")]),s._v(" "),a("p",[s._v("这说明, 写磁盘用到了大量的 Buffer, 这跟在文档中查到的定义是一样的.")]),s._v(" "),a("p",[s._v("对比两个案例, 可以发现, "),a("strong",[s._v("写文件时会用到 Cache 缓存数据, 而写磁盘则会用到 Buffer 来缓存数据")]),s._v(". 所以, 回到刚刚的问题, 虽然文档上只提到, "),a("strong",[s._v("Cache 是文件读的缓存, 但实际上, Cache 也会缓存写文件时的数据")]),s._v(".")]),s._v(" "),a("h6",{attrs:{id:"_3-场景2-磁盘和文件读案例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-场景2-磁盘和文件读案例"}},[s._v("#")]),s._v(" (3)场景2:磁盘和文件读案例")]),s._v(" "),a("p",[s._v("了解了磁盘和文件写的情况, 再反过来想, 磁盘和文件读的时候, 又是怎样的呢?")]),s._v(" "),a("p",[s._v("回到第二个终端, 运行下面的命令. 清理缓存后, 从文件 "),a("code",[s._v("/tmp/file")]),s._v("​ 中, 读取数据写入空设备:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 首先清理缓存")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" /proc/sys/vm/drop_caches\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 运行 dd 命令读取文件数据")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("dd")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/tmp/file "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("of")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/dev/null\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("然后, 再回到终端一, 观察内存和 I/O 的变化情况:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----\n r  b   swpd   "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("free")]),s._v("   buff  cache   si   so    bi    bo   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v("   cs us sy "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("id")]),s._v(" wa st\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7724164")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2380")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("110844")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16576")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("62")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("360")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("76")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7691544")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2380")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("143472")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("32640")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("46")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("439")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("46")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7658736")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2380")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("176204")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("32640")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("54")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("407")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("46")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7626052")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2380")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("208908")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("32640")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("40")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("44")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("422")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("46")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("观察 vmstat 的输出, 会发现"),a("mark",[a("strong",[s._v("读取文件")])]),s._v("​"),a("strong",[s._v("时(也就是 bi 大于 0 时), Buffer 保持不变, 而 Cache 则在不停增长")]),s._v('. 这跟查到的定义 "Cache 是对文件读的页缓存" 是一致的.')]),s._v(" "),a("p",[s._v("那么, 磁盘读又是什么情况呢? 再运行第二个案例来看看.")]),s._v(" "),a("p",[s._v("首先, 回到第二个终端, 运行下面的命令. 清理缓存后, 从磁盘分区 "),a("code",[s._v("/dev/sda1")]),s._v("​ 中读取数据, 写入空设备:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 首先清理缓存")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" /proc/sys/vm/drop_caches\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 运行 dd 命令读取文件")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("dd")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/dev/sda1 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("of")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/dev/null "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("bs")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("1M "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("count")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1024")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("然后, 再回到终端一, 观察内存和 I/O 的变化情况:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----\n r  b   swpd   "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("free")]),s._v("   buff  cache   si   so    bi    bo   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v("   cs us sy "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("id")]),s._v(" wa st\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7225880")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2716")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("608184")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("48")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("159")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7199420")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("28644")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("608228")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("25928")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("60")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("252")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("65")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("35")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7167092")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("60900")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("608312")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("32256")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("54")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("269")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("49")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7134416")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("93572")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("608376")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("32672")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("53")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("253")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("51")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("49")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7101484")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("126320")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("608480")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("32748")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("414")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("49")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("观察 vmstat 的输出, 会发现"),a("mark",[a("strong",[s._v("读磁盘")])]),s._v("​"),a("strong",[s._v("时(也就是 bi 大于 0 时), Buffer 和 Cache 都在增长, 但显然 Buffer 的增长快很多. 这说明读磁盘时, 数据缓存到了 Buffer 中")]),s._v(".")]),s._v(" "),a("p",[s._v("经过上一个场景中两个案例的分析, 你自己也可以对比得出这个结论: "),a("strong",[s._v("读文件时数据会缓存到 Cache 中, 而读磁盘时数据会缓存到 Buffer 中")]),s._v(".")]),s._v(" "),a("p",[s._v("到这里你应该发现了, 虽然文档提供了对 Buffer 和 Cache 的说明, 但是"),a("strong",[s._v("仍不能覆盖到所有的细节")]),s._v(". 比如说, 本节了解到的这两点:")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v('Buffer 既可以用作"将要写入磁盘数据的缓存", 也可以用作"从磁盘读取数据的缓存".')])]),s._v(" "),a("li",[a("strong",[s._v('Cache 既可以用作"从文件读取数据的页缓存", 也可以用作"写文件的页缓存".')])])]),s._v(" "),a("p",[s._v("这样就回答了案例开始前的两个问题.")]),s._v(" "),a("p",[s._v("简单来说, "),a("mark",[a("strong",[s._v("Buffer 是对磁盘数据的缓存, 而 Cache 是文件数据的缓存, 它们既会用在读请求中, 也会用在写请求中")])]),s._v(".")]),s._v(" "),a("h5",{attrs:{id:"_4-小结-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-小结-4"}},[s._v("#")]),s._v(" 4.小结")]),s._v(" "),a("p",[s._v("本节一起探索了内存性能中 Buffer 和 Cache 的详细含义. "),a("strong",[s._v("Buffer 和 Cache 分别缓存磁盘和文件系统的读写数据")]),s._v(".")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("从写的角度来说, 不仅可以优化磁盘和文件的写入, 对应用程序也有好处, 应用程序可以在数据真正落盘前, 就返回去做其他工作.")])]),s._v(" "),a("li",[a("strong",[s._v("从读的角度来说, 既可以加速读取那些需要频繁访问的数据, 也降低了频繁 I/O 对磁盘的压力.")])])]),s._v(" "),a("p",[s._v("除了探索的内容本身, 这个探索过程对你应该也有所启发. 在排查性能问题时, 由于各种资源的性能指标太多, 不可能记住所有指标的详细含义. 那么准确高效的手段——查文档, 就非常重要了.")]),s._v(" "),a("p",[s._v("一定要养成查文档的习惯, 并学会解读这些性能指标的详细含义. 此外, proc 文件系统也是好帮手. 它为我们呈现了系统内部的运行状态, 同时也是很多性能工具的数据来源, 是辅助排查性能问题的好方法.")]),s._v(" "),a("h4",{attrs:{id:"_17-案例篇-如何利用系统缓存优化程序的运行效率"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_17-案例篇-如何利用系统缓存优化程序的运行效率"}},[s._v("#")]),s._v(" 17-案例篇:如何利用系统缓存优化程序的运行效率?")]),s._v(" "),a("p",[s._v("上一节学习了内存性能中 Buffer 和 Cache 的概念. 简单复习一下, "),a("strong",[s._v("Buffer 和 Cache 的设计目的, 是为了提升系统的 I/O 性能. 它们利用内存, 充当起慢速磁盘与快速 CPU 之间的桥梁, 可以加速 I/O 的访问速度")]),s._v(".")]),s._v(" "),a("p",[s._v("既然 Buffer 和 Cache 对系统性能有很大影响, 那在软件开发的过程中, "),a("strong",[s._v("能不能利用这一点, 来优化 I/O 性能, 提升应用程序的运行效率")]),s._v("呢? 答案自然是肯定的. 本节就用几个案例帮助理解缓存的作用, 并学习如何充分利用这些缓存来提高程序效率.")]),s._v(" "),a("h5",{attrs:{id:"_1-缓存命中率"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-缓存命中率"}},[s._v("#")]),s._v(" 1.缓存命中率")]),s._v(" "),a("p",[s._v("在案例开始前, 你应该习惯性地先问自己一个问题, 你想"),a("strong",[s._v("要做成某件事情, 结果应该怎么评估")]),s._v("? 比如想利用缓存来提升程序的运行效率, 应该怎么评估这个效果呢? 换句话说, 有没有哪个指标可以衡量缓存使用的好坏呢?")]),s._v(" "),a("p",[s._v("我估计你已经想到了, "),a("strong",[s._v("缓存的命中率")]),s._v(". 所谓缓存命中率, 是指直接通过缓存获取数据的请求次数, 占所有数据请求次数的百分比.")]),s._v(" "),a("p",[s._v("**命中率越高, 表示使用缓存带来的收益越高, 应用程序的性能也就越好. **")]),s._v(" "),a("p",[s._v("实际上, 缓存是现在所有高并发系统必需的核心模块, 主要作用就是把经常访问的数据(也就是热点数据), 提前读入到内存中. 这样, 下次访问时就可以直接从内存读取数据, 而不需要经过硬盘, 从而加快应用程序的响应速度.")]),s._v(" "),a("p",[s._v("这些独立的缓存模块通常会提供查询接口, 方便随时查看缓存的命中情况. 不过 Linux 系统中并没有直接提供这些接口, 所以这里要介绍一下, "),a("strong",[s._v("cachestat 和 cachetop 正是查看系统缓存命中情况的工具")]),s._v(".")]),s._v(" "),a("ul",[a("li",[a("mark",[a("strong",[s._v("cachestat 提供了整个操作系统缓存的读写命中情况.")])])]),s._v(" "),a("li",[a("mark",[a("strong",[s._v("cachetop 提供了每个进程的缓存命中情况.")])])])]),s._v(" "),a("p",[s._v("这两个工具都是 "),a("a",{attrs:{href:"https://github.com/iovisor/bcc",target:"_blank",rel:"noopener noreferrer"}},[s._v("bcc"),a("OutboundLink")],1),s._v(" 软件包的一部分, 它们基于 Linux 内核的 eBPF(extended Berkeley Packet Filters)机制, 来跟踪内核中管理的缓存, 并输出缓存的使用和命中情况.")]),s._v(" "),a("p",[s._v("这里注意, eBPF 的工作原理不是本节的重点, 记住这个名字即可, 后面还会详细学习. 本节要掌握的是这两个工具的使用方法. 注意使用 cachestat 和 cachetop 前, 需要安装 bcc 软件包.")]),s._v(" "),a("p",[s._v("操作完这些步骤, bcc 提供的所有工具就都安装到 "),a("code",[s._v("/usr/share/bcc/tools")]),s._v("​ 这个目录中了. 不过这里提醒你, bcc 软件包默认不会把这些工具配置到系统的 PATH 路径中, 所以得自己手动配置:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("export")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("PATH")])]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$PATH")]),s._v(":/usr/share/bcc/tools\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("配置完就可以运行 cachestat 和 cachetop 命令了. 比如, 下面就是一个 cachestat 的运行界面, 它以 1 秒的时间间隔, 输出了 3 组缓存统计数据:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ cachestat "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n   TOTAL   MISSES     HITS  DIRTIES   BUFFERS_MB  CACHED_MB\n       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("           "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("17")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("279")]),s._v("\n       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("           "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("17")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("279")]),s._v("\n       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("           "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("17")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("279")]),s._v(" \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("可以看到, cachestat 的输出其实是一个表格. 每行代表一组数据, 而每一列代表不同的"),a("strong",[s._v("缓存统计指标")]),s._v(". 这些指标从左到右依次表示:")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("TOTAL, 表示总的 I/O 次数;")])]),s._v(" "),a("li",[a("strong",[s._v("MISSES, 表示缓存未命中的次数;")])]),s._v(" "),a("li",[a("strong",[s._v("HITS, 表示缓存命中的次数;")])]),s._v(" "),a("li",[a("strong",[s._v("DIRTIES, 表示新增到缓存中的脏页数;")])]),s._v(" "),a("li",[a("strong",[s._v("BUFFERS_MB 表示 Buffers 的大小, 以 MB 为单位;")])]),s._v(" "),a("li",[a("strong",[s._v("CACHED_MB 表示 Cache 的大小, 以 MB 为单位.")])])]),s._v(" "),a("p",[s._v("接下来再来看一个 cachetop 的运行界面:")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("$ cachetop\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("58")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v(" Buffers "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MB")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("258")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" Cached "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MB")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("347")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" Sort"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HITS")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" Order"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" ascending\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("PID")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UID")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CMD")]),s._v("              "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HITS")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MISSES")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DIRTIES")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("READ_HIT")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("WRITE_HIT")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13029")]),s._v(" root     python                  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100.0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("它的输出跟 top 类似, 默认按照"),a("strong",[s._v("缓存的命中次数(HITS)排序")]),s._v(", 展示了每个进程的缓存命中情况. 具体到每一个指标, 这里的 HITS, MISSES 和 DIRTIES, 跟 cachestat 里的含义一样, 分别代表间隔时间内的缓存命中次数, 未命中次数以及新增到缓存中的脏页数.")]),s._v(" "),a("p",[s._v("而 READ_HIT 和 WRITE_HIT, 分别表示"),a("strong",[s._v("读和写的缓存命中率")]),s._v(".")]),s._v(" "),a("h5",{attrs:{id:"_2-指定文件的缓存大小"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-指定文件的缓存大小"}},[s._v("#")]),s._v(" 2.指定文件的缓存大小")]),s._v(" "),a("p",[s._v("除了缓存的命中率外, 还有一个指标你可能也会很感兴趣, 那就是"),a("strong",[s._v("指定文件在内存中的缓存大小")]),s._v(". 可以"),a("strong",[s._v("使用 pcstat 这个工具, 来查看文件在内存中的缓存大小以及缓存比例")]),s._v(".")]),s._v(" "),a("p",[s._v("pcstat 是一个基于 Go 语言开发的工具, 所以安装它之前, 首先应该安装 Go 语言.")]),s._v(" "),a("p",[s._v("安装完 Go 语言, 再运行下面的命令安装 pcstat:")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("export")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("GOPATH")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("~")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("go\n$ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("export")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("PATH")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("~")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("go"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("bin"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("$"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("PATH")]),s._v("\n$ go "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("get")]),s._v(" golang"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("org"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("sys"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("unix\n$ go "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("get")]),s._v(" github"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("com"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("tobert"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("pcstat"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("pcstat\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("全部安装完成后, 就可以运行 pcstat 来查看文件的缓存情况了. 比如, 下面就是一个 pcstat 运行的示例, 它展示了 "),a("code",[s._v("/bin/ls")]),s._v("​ 这个文件的缓存情况:")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("$ pcstat "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("bin"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("ls\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Name    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Size")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("bytes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Pages      "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Cached    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Percent "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("bin"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("ls "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("133792")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("33")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("000.000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("这个输出中, Cached 就是 "),a("code",[s._v("/bin/ls")]),s._v("​ 在缓存中的大小, 而 Percent 则是缓存的百分比. 你看到它们都是 0, 这说明 "),a("code",[s._v("/bin/ls")]),s._v("​ 并不在缓存中.")]),s._v(" "),a("p",[s._v("接着, 如果执行一下 ls 命令, 再运行相同的命令来查看的话, 就会发现 "),a("code",[s._v("/bin/ls")]),s._v("​ 都在缓存中了:")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("$ ls\n$ pcstat "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("bin"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("ls\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Name    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Size")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("bytes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Pages      "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Cached    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Percent "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("bin"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("ls "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("133792")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("33")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("33")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100.000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("知道了缓存相应的指标和查看系统缓存的方法后, 接下来就进入今天的正式案例.")]),s._v(" "),a("p",[s._v("跟前面的案例一样, 今天的案例也是基于 Ubuntu 18.04, 当然同样适用于其他的 Linux 系统.")]),s._v(" "),a("ul",[a("li",[s._v("机器配置: 2 CPU, 8GB 内存.")]),s._v(" "),a("li",[s._v("预先按照上面的步骤安装 bcc 和 pcstat 软件包, 并把这些工具的安装路径添加到到 PATH 环境变量中.")]),s._v(" "),a("li",[s._v("预先安装 Docker 软件包, 比如 apt-get install docker.io")])]),s._v(" "),a("h5",{attrs:{id:"_3-案例一"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-案例一"}},[s._v("#")]),s._v(" 3.案例一")]),s._v(" "),a("p",[s._v("第一个案例先来看一下上一节提到的 dd 命令. dd 作为一个磁盘和文件的拷贝工具, 经常被拿来测试磁盘或者文件系统的读写性能. 不过, 既然缓存会影响到性能, "),a("strong",[s._v("如果用 dd 对同一个文件进行多次读取测试, 测试的结果会怎么样呢")]),s._v("?")]),s._v(" "),a("p",[s._v("来动手试试. 首先打开两个终端, 连接到 Ubuntu 机器上, 确保 bcc 已经安装配置成功. 然后, 使用 dd 命令"),a("strong",[s._v("生成一个临时文件")]),s._v(", 用于后面的文件读取测试:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 生成一个 512MB 的临时文件")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("dd")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/dev/sda1 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("of")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("file "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("bs")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("1M "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("count")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("512")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 清理缓存")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" /proc/sys/vm/drop_caches\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("继续在第一个终端, 运行 pcstat 命令, 确认刚刚"),a("strong",[s._v("生成的文件不在缓存")]),s._v("中. 如果一切正常, 会看到 Cached 和 Percent 都是 0:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ pcstat "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v("\n+-------+----------------+------------+-----------+---------+\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Name  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Size "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("bytes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Pages      "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Cached    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Percent "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("-------+----------------+------------+-----------+---------"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("536870912")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("131072")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 000.000 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n+-------+----------------+------------+-----------+---------+\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("还是在第一个终端中, 现在运行 cachetop 命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 每隔 5 秒刷新一次数据")]),s._v("\n$ cachetop "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("这次是第二个终端, 运行 dd 命令测试文件的"),a("strong",[s._v("读取速度")]),s._v(":")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("dd")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("file "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("of")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/dev/null "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("bs")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("1M\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("512")]),s._v("+0 records "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("512")]),s._v("+0 records out\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("536870912")]),s._v(" bytes "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("537")]),s._v(" MB, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("512")]),s._v(" MiB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" copied, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16.0509")]),s._v(" s, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("33.4")]),s._v(" MB/s\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("从 dd 的结果可以看出, 这个文件的读性能是 33.4 MB/s. 由于在 dd 命令运行前已经清理了缓存, 所以 dd 命令读取数据时, 肯定要"),a("strong",[s._v("通过文件系统从磁盘中读取")]),s._v(".")]),s._v(" "),a("p",[s._v("不过, 这是不是意味着, dd 所有的读请求都能直接发送到磁盘呢?")]),s._v(" "),a("p",[s._v("再回到第一个终端, 查看 cachetop 界面的缓存命中情况:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("PID      "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("UID")]),s._v("      CMD              HITS     MISSES   DIRTIES  READ_HIT%  WRITE_HIT%\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v(".\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3264")]),s._v(" root     "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("dd")]),s._v("                  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("37077")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("37330")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("49.8")]),s._v("%      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("50.2")]),s._v("%\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("从 cachetop 的结果可以发现, "),a("strong",[s._v("并不是所有的读都落到了磁盘上, 事实上读请求的缓存命中率只有 50%")]),s._v(" .")]),s._v(" "),a("p",[s._v("接下来, 继续尝试相同的测试命令. 先切换到第二个终端, 再次执行刚才的 dd 命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("dd")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("file "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("of")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/dev/null "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("bs")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("1M\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("512")]),s._v("+0 records "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("512")]),s._v("+0 records out\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("536870912")]),s._v(" bytes "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("537")]),s._v(" MB, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("512")]),s._v(" MiB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" copied, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.118415")]),s._v(" s, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.5")]),s._v(" GB/s\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("看到这次的结果, 有没有点小惊讶? 磁盘的读性能居然变成了 "),a("strong",[s._v("4.5 GB/s")]),s._v(", 比第一次的结果明显高了太多. 为什么这次的结果这么好呢?")]),s._v(" "),a("p",[s._v("不妨再回到第一个终端, 看看 cachetop 的情况:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(":45:22 Buffers MB: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" / Cached MB: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("719")]),s._v(" / Sort: HITS / Order: ascending\nPID      "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("UID")]),s._v("      CMD              HITS     MISSES   DIRTIES  READ_HIT%  WRITE_HIT%\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v(".\n   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("32642")]),s._v(" root     "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("dd")]),s._v("                 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("131637")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100.0")]),s._v("%       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("%\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("显然, cachetop 也有了不小的变化. 可以发现, 这次的读的缓存命中率是 100.0%, 也就是说"),a("strong",[s._v("这次的 dd 命令全部命中了缓存, 所以才会看到那么高的性能")]),s._v(".")]),s._v(" "),a("p",[s._v("然后, 回到第二个终端, 再次执行 pcstat 查看文件 file 的缓存情况:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ pcstat "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v("\n+-------+----------------+------------+-----------+---------+\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Name  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Size "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("bytes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Pages      "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Cached    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Percent "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("-------+----------------+------------+-----------+---------"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("536870912")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("131072")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("131072")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100.000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n+-------+----------------+------------+-----------+---------+\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("从 pcstat 的结果可以发现, "),a("strong",[s._v("测试文件 file 已经被全部缓存了起来")]),s._v(", 这跟刚才观察到的缓存命中率 100% 是一致的.")]),s._v(" "),a("p",[s._v("这两次结果说明, "),a("strong",[s._v("系统缓存对第二次 dd 操作有明显的加速效果, 可以大大提高文件读取的性能")]),s._v(".")]),s._v(" "),a("p",[s._v("但同时也要注意, 如果把 dd 当成测试文件系统性能的工具, 由于缓存的存在, 就会导致测试结果严重失真.")]),s._v(" "),a("h5",{attrs:{id:"_4-案例二"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-案例二"}},[s._v("#")]),s._v(" 4.案例二")]),s._v(" "),a("p",[s._v("接下来再来看一个"),a("strong",[s._v("文件读写")]),s._v("的案例. 这个案例类似于前面学过的不可中断状态进程的例子. 它的基本功能比较简单, 也就是每秒从磁盘分区 "),a("code",[s._v("/dev/sda1")]),s._v("​ 中读取 32MB 的数据, 并打印出读取数据花费的时间.")]),s._v(" "),a("p",[s._v("为了方便运行案例, 我把它打包成了一个 "),a("a",{attrs:{href:"https://github.com/feiskyer/linux-perf-examples/tree/master/io-cached",target:"_blank",rel:"noopener noreferrer"}},[s._v("Docker 镜像"),a("OutboundLink")],1),s._v(". 跟前面案例类似, 我提供了下面两个选项, 可以根据系统配置, 自行调整磁盘分区的路径以及 I/O 的大小.")]),s._v(" "),a("ul",[a("li",[s._v("-d 选项, 设置要读取的磁盘或分区路径, 默认是查找前缀为 "),a("code",[s._v("/dev/sd")]),s._v("​ 或者 "),a("code",[s._v("/dev/xvd")]),s._v("​ 的磁盘.")]),s._v(" "),a("li",[s._v("-s 选项, 设置每次读取的数据量大小, 单位为字节, 默认为 33554432(也就是 32MB).")])]),s._v(" "),a("p",[s._v("这个案例同样需要开启两个终端. 分别 SSH 登录到机器上后, 先在第一个终端中运行 cachetop 命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 每隔 5 秒刷新一次数据")]),s._v("\n$ cachetop "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("接着, 再到第二个终端, 执行下面的命令运行案例:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--privileged")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("app "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-itd")]),s._v(" feisky/app:io-direct\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("案例运行后, 还需要运行下面这个命令, 来确认案例已经正常启动. 如果一切正常, 应该可以看到类似下面的输出:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" logs app\nReading data from disk /dev/sdb1 with buffer size "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("33554432")]),s._v("\nTime used: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.929935")]),s._v(" s to "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("33554432")]),s._v(" bytes\nTime used: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.949625")]),s._v(" s to "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("33554432")]),s._v(" bytes\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("从这里可以看到, 每读取 32 MB 的数据, 就需要花 0.9 秒. 这个时间合理吗? 我想你第一反应就是, 太慢了吧. 那这是不是没用系统缓存导致的呢?")]),s._v(" "),a("p",[s._v("再来检查一下. 回到第一个终端, 先看看 cachetop 的输出, 在这里找到案例进程 app 的缓存使用情况:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(":39:18 Buffers MB: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("73")]),s._v(" / Cached MB: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("281")]),s._v(" / Sort: HITS / Order: ascending\nPID      "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("UID")]),s._v("      CMD              HITS     MISSES   DIRTIES  READ_HIT%  WRITE_HIT%\n   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21881")]),s._v(" root     app                  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1024")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100.0")]),s._v("%       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("% \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("这个输出似乎有点意思了. 1024 次缓存全部命中, "),a("strong",[s._v("读的命中率是 100%, 看起来全部的读请求都经过了系统缓存")]),s._v(". 但是问题又来了, 如果真的都是缓存 I/O, 读取速度不应该这么慢.")]),s._v(" "),a("p",[s._v("不过, 话说回来, 我们似乎"),a("strong",[s._v("忽略了另一个重要因素, 每秒实际读取的数据大小. HITS 代表缓存的命中次数, 那么每次命中能读取多少数据呢? 自然是一页")]),s._v(".")]),s._v(" "),a("p",[s._v("前面讲过, "),a("strong",[s._v("内存以页为单位进行管理, 而每个页的大小是 4KB")]),s._v(". 所以, 在 5 秒的时间间隔里, 命中的缓存为 1024*4K/1024 = 4MB, 再除以 5 秒, 可以得到每秒读的缓存是 0.8MB, 显然跟案例应用的 32 MB/s 相差太多.")]),s._v(" "),a("p",[s._v("至于为什么只能看到 0.8 MB 的 HITS, 这个后面再解释, 这里先知道怎么根据结果来分析就可以了.")]),s._v(" "),a("p",[s._v("这也进一步验证了我们的猜想, 这个案例估计没有充分利用系统缓存. 其实前面遇到过类似的问题, 如果为系统调用设置直接 I/O 的标志, 就可以绕过系统缓存.")]),s._v(" "),a("p",[s._v("那么, 要判断应用程序是否用了直接 I/O, 最简单的方法当然是观察它的"),a("strong",[s._v("系统调用")]),s._v(", 查找应用程序在调用它们时的选项. 使用什么工具来观察系统调用呢? 自然还是 "),a("strong",[s._v("strace")]),s._v(".")]),s._v(" "),a("p",[s._v("继续在终端二中运行下面的 strace 命令, 观察案例应用的系统调用情况. 注意, 这里使用了 pgrep 命令来查找案例进程的 PID 号:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# strace -p $(pgrep app)")]),s._v("\nstrace: Process "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4988")]),s._v(" attached\nrestart_syscall"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v(". resuming interrupted nanosleep "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("."),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\nopenat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("AT_FDCWD, "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/dev/sdb1"')]),s._v(", O_RDONLY"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("O_DIRECT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("\nmmap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("NULL, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("33558528")]),s._v(", PROT_READ"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("PROT_WRITE, MAP_PRIVATE"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("MAP_ANONYMOUS, -1, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" 0x7f448d240000\nread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"8vq'),a("span",{pre:!0,attrs:{class:"token entity",title:"\\213"}},[s._v("\\213")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\314"}},[s._v("\\314")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\264"}},[s._v("\\264")]),s._v("u"),a("span",{pre:!0,attrs:{class:"token entity",title:"\\373"}},[s._v("\\373")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\4"}},[s._v("\\4")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\336"}},[s._v("\\336")]),s._v("K"),a("span",{pre:!0,attrs:{class:"token entity",title:"\\224"}},[s._v("\\224")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\25"}},[s._v("\\25")]),s._v("@"),a("span",{pre:!0,attrs:{class:"token entity",title:"\\371"}},[s._v("\\371")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\1"}},[s._v("\\1")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\252"}},[s._v("\\252")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\2"}},[s._v("\\2")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\262"}},[s._v("\\262")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\252"}},[s._v("\\252")]),s._v("q"),a("span",{pre:!0,attrs:{class:"token entity",title:"\\221"}},[s._v("\\221")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("0"),a("span",{pre:!0,attrs:{class:"token entity",title:"\\30"}},[s._v("\\30")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\225"}},[s._v("\\225")]),s._v("bD"),a("span",{pre:!0,attrs:{class:"token entity",title:"\\252"}},[s._v("\\252")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\266"}},[s._v("\\266")]),s._v('@J"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("., "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("33554432")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("33554432")]),s._v("\nwrite"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Time used: 0.948897 s to read 33"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("., "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("45")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("45")]),s._v("\nclose"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("                                "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("从 strace 的结果可以看到, 案例应用调用了 openat 来打开磁盘分区 "),a("code",[s._v("/dev/sdb1")]),s._v("​, 并且传入的参数为 "),a("code",[s._v("O_RDONLY|O_DIRECT")]),s._v("​(中间的竖线表示或).")]),s._v(" "),a("p",[s._v("O_RDONLY 表示以只读方式打开, 而 O_DIRECT 则表示以直接读取的方式打开, 这会"),a("strong",[s._v("绕过系统的缓存")]),s._v(".")]),s._v(" "),a("p",[s._v("验证了这一点, 就很容易理解为什么读 32 MB 的数据就都要那么久了. "),a("strong",[s._v("直接从磁盘读写的速度, 自然远慢于对缓存的读写. 这也是缓存存在的最大意义")]),s._v("了.")]),s._v(" "),a("p",[s._v("找出问题后, 还可以在再看看案例应用的"),a("a",{attrs:{href:"https://github.com/feiskyer/linux-perf-examples/blob/master/io-cached/app.c",target:"_blank",rel:"noopener noreferrer"}},[s._v("源代码"),a("OutboundLink")],1),s._v(", 再次验证一下:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("int flags "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" O_RDONLY "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" O_LARGEFILE "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" O_DIRECT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \nint fd "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" open"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("disk, flags, 0755"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面的代码, 很清楚地告诉我们: 它果然用了直接 I/O.")]),s._v(" "),a("p",[s._v("找出了磁盘读取缓慢的原因, 优化磁盘读的性能自然不在话下. 修改源代码, 删除 O_DIRECT 选项, "),a("strong",[s._v("让应用程序使用缓存 I/O , 而不是直接 I/O, 就可以加速磁盘读取速度")]),s._v(".")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/feiskyer/linux-perf-examples/blob/master/io-cached/app-cached.c",target:"_blank",rel:"noopener noreferrer"}},[s._v("app-cached.c"),a("OutboundLink")],1),s._v(" 就是修复后的源码, 我也把它打包成了一个容器镜像. 在第二个终端中, 按 Ctrl+C 停止刚才的 strace 命令, 运行下面的命令就可以启动它:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除上述案例应用")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-f")]),s._v(" app\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 运行修复后的应用")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--privileged")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("app "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-itd")]),s._v(" feisky/app:io-cached\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("还是第二个终端, 再来运行下面的命令查看新应用的日志, 应该能看到下面这个输出:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" logs app\nReading data from disk /dev/sdb1 with buffer size "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("33554432")]),s._v("\nTime used: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.037342")]),s._v(" s s to "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("33554432")]),s._v(" bytes\nTime used: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.029676")]),s._v(" s to "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("33554432")]),s._v(" bytes\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("现在, 每次只需要 0.03 秒, 就可以读取 32MB 数据, 明显比之前的 0.9 秒快多了. 所以, 这次应该用了系统缓存.")]),s._v(" "),a("p",[s._v("再回到第一个终端, 查看 cachetop 的输出来确认一下:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(":40:08 Buffers MB: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("73")]),s._v(" / Cached MB: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("281")]),s._v(" / Sort: HITS / Order: ascending\nPID      "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("UID")]),s._v("      CMD              HITS     MISSES   DIRTIES  READ_HIT%  WRITE_HIT%\n   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22106")]),s._v(" root     app                 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("40960")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100.0")]),s._v("%       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("%\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("果然, "),a("strong",[s._v("读的命中率还是 100%, HITS (即命中数)却变成了 40960")]),s._v(", 同样的方法计算一下, 换算成每秒字节数正好是 32 MB(即 40960*4k/5/1024=32M).")]),s._v(" "),a("p",[s._v("这个案例说明, "),a("strong",[s._v("在进行 I/O 操作时, 充分利用系统缓存可以极大地提升性能")]),s._v(". 但在观察缓存命中率时, 还要注意结合应用程序实际的 I/O 大小, 综合分析缓存的使用情况.")]),s._v(" "),a("p",[s._v("案例的最后, 再回到开始的问题, 为什么优化前, 通过 cachetop 只能看到很少一部分数据的全部命中, 而没有观察到大量数据的未命中情况呢? 这是因为, "),a("strong",[s._v("cachetop 工具并不把直接 I/O 算进来")]),s._v(". 这也又一次说明了, 了解工具原理的重要.")]),s._v(" "),a("h5",{attrs:{id:"_5-总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-总结"}},[s._v("#")]),s._v(" 5.总结")]),s._v(" "),a("p",[s._v("Buffers 和 Cache 可以极大提升系统的 I/O 性能. 通常用缓存命中率来衡量缓存的使用效率. 命中率越高, 表示缓存被利用得越充分, 应用程序的性能也就越好.")]),s._v(" "),a("p",[s._v("可以用 cachestat 和 cachetop 这两个工具, 观察系统和进程的缓存命中情况. 其中,")]),s._v(" "),a("ul",[a("li",[s._v("cachestat 提供了整个系统缓存的读写命中情况.")]),s._v(" "),a("li",[s._v("cachetop 提供了每个进程的缓存命中情况.")])]),s._v(" "),a("p",[s._v("不过要注意, "),a("strong",[s._v("Buffers 和 Cache 都是操作系统来管理的, 应用程序并不能直接控制这些缓存的内容和生命周期. 所以, 在应用程序开发中, 一般要用专门的缓存组件, 来进一步提升性能")]),s._v(". 比如, 程序内部"),a("strong",[s._v("可以使用堆或者栈明确声明内存空间, 来存储需要缓存的数据. 再或者, 使用 Redis 这类外部缓存服务, 优化数据的访问效率")]),s._v(".")]),s._v(" "),a("h4",{attrs:{id:"_18-案例篇-内存泄漏了该如何定位和处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_18-案例篇-内存泄漏了该如何定位和处理"}},[s._v("#")]),s._v(" 18-案例篇:内存泄漏了该如何定位和处理?")]),s._v(" "),a("p",[s._v("通过前几节对内存基础的学习, 已经知道"),a("strong",[s._v("对普通进程来说, 能看到的其实是内核提供的虚拟内存, 这些虚拟内存还需要通过页表, 由系统映射为物理内存")]),s._v(".")]),s._v(" "),a("p",[s._v("当进程通过 malloc() 申请虚拟内存后, 系统并不会立即为其分配物理内存, 而是在首次访问时, 才通过缺页异常陷入内核中分配内存.")]),s._v(" "),a("p",[s._v("为了协调 CPU 与磁盘间的性能差异, Linux 还会使用 Cache 和 Buffer, 分别把文件和磁盘读写的数据缓存到内存中.")]),s._v(" "),a("p",[s._v("对应用程序来说, "),a("strong",[s._v("动态内存的分配和回收, 是既核心又复杂的一个逻辑功能模块")]),s._v('. 管理内存的过程中, 也很容易发生各种各样的"事故", 比如,')]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("没正确回收分配后的内存, 导致了泄漏.")])]),s._v(" "),a("li",[s._v("访问的是已分配内存边界外的地址, 导致程序异常退出, 等等.")])]),s._v(" "),a("p",[s._v("本节就来看看, "),a("strong",[s._v("内存泄漏到底是怎么发生的, 以及发生内存泄漏之后该如何排查和定位")]),s._v(".")]),s._v(" "),a("p",[s._v("说起内存泄漏, 这就要先从内存的分配和回收说起了.")]),s._v(" "),a("h5",{attrs:{id:"_1-内存的分配和回收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-内存的分配和回收"}},[s._v("#")]),s._v(" 1.内存的分配和回收")]),s._v(" "),a("p",[s._v("先回顾一下应用程序中, 都有哪些方法来分配内存? 用完后, 又该怎么释放还给系统呢?")]),s._v(" "),a("p",[s._v("前面讲进程的内存空间时提到过, 用户空间内存包括多个不同的内存段, 比如只读段, 数据段, 堆, 栈以及文件映射段等. 这些内存段正是应用程序使用内存的基本方式.")]),s._v(" "),a("p",[s._v("举个例子, 在程序中定义了一个局部变量, 比如一个整数数组 "),a("code",[s._v("int data[64]")]),s._v("​, 就定义了一个可以存储 64 个整数的内存段. 由于这是一个"),a("strong",[s._v("局部变量")]),s._v(", 它会从内存空间的"),a("strong",[s._v("栈")]),s._v("中分配内存. "),a("strong",[s._v("栈内存由系统自动分配和管理. 一旦程序运行超出了这个局部变量的作用域, 栈内存就会被系统自动回收, 所以不会产生内存泄漏的问题.")])]),s._v(" "),a("p",[s._v("再比如, 很多时候, 事先并不知道数据大小, 所以就要"),a("strong",[s._v("用到标准库函数 malloc() 在程序中动态分配内存")]),s._v(". 这时候, 系统就会"),a("strong",[s._v("从内存空间的堆中分配内存")]),s._v(".")]),s._v(" "),a("p",[a("mark",[a("strong",[s._v("堆内存由应用程序自己来分配和管理. 除非程序退出, 这些堆内存并不会被系统自动释放, 而是需要应用程序明确调用库函数 free() 来释放它们. 如果应用程序没有正确释放堆内存, 就会造成内存泄漏.")])])]),s._v(" "),a("p",[s._v("这是两个栈和堆的例子, 那么其他内存段是否也会导致内存泄漏呢? 经过前面的学习, 这个问题并不难回答.")]),s._v(" "),a("ul",[a("li",[s._v("只读段, 包括程序的代码和常量, 由于是只读的, 不会再去分配新的内存, 所以也"),a("strong",[s._v("不会产生内存泄漏")]),s._v(".")]),s._v(" "),a("li",[s._v("数据段, 包括全局变量和静态变量, 这些变量在定义时就已经确定了大小, 所以也"),a("strong",[s._v("不会产生内存泄漏")]),s._v(".")]),s._v(" "),a("li",[s._v("最后一个内存映射段, 包括动态链接库和共享内存, 其中"),a("strong",[s._v("共享内存由程序动态分配和管理")]),s._v(". 所以, 如果程序在分配后忘了回收, 就会导致跟堆内存类似的泄漏问题.")])]),s._v(" "),a("p",[a("strong",[s._v("内存泄漏的危害非常大, 这些忘记释放的内存, 不仅应用程序自己不能访问, 系统也不能把它们再次分配给其他应用")]),s._v(". 内存泄漏不断累积, 甚至会耗尽系统内存.")]),s._v(" "),a("p",[s._v("虽然, 系统最终可以通过 OOM (Out of Memory)机制杀死进程, 但进程在 OOM 前, 可能已经引发了一连串的反应, 导致严重的性能问题. 比如, 其他需要内存的进程, 可能无法分配新的内存; 内存不足, 又会触发系统的缓存回收以及 SWAP 机制, 从而进一步导致 I/O 的性能问题等等.")]),s._v(" "),a("p",[a("strong",[s._v("内存泄漏的危害这么大, 那应该怎么检测这种问题呢? 特别是, 如果已经发现了内存泄漏, 该如何定位和处理呢.")])]),s._v(" "),a("p",[s._v("接下来就用一个计算斐波那契数列的案例, 来看看内存泄漏问题的定位和处理方法.")]),s._v(" "),a("h5",{attrs:{id:"_2-案例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-案例"}},[s._v("#")]),s._v(" 2.案例")]),s._v(" "),a("p",[s._v("今天的案例基于 Ubuntu 18.04.")]),s._v(" "),a("ul",[a("li",[s._v("机器配置: 2 CPU, 8GB 内存")]),s._v(" "),a("li",[s._v("预先安装 sysstat, Docker 以及 bcc 软件包, 比如:")])]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# install sysstat docker")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt-get")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-y")]),s._v(" sysstat docker.io\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Install bcc")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" apt-key adv "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--keyserver")]),s._v(" keyserver.ubuntu.com --recv-keys 4052245BD4284CDD\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"deb https://repo.iovisor.org/apt/bionic bionic main"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tee")]),s._v(" /etc/apt/sources.list.d/iovisor.list\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt-get")]),s._v(" update\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt-get")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-y")]),s._v(" bcc-tools libbcc-examples linux-headers-"),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("uname")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-r")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("其中 sysstat 软件包中的 vmstat, 可以观察内存的变化情况; 而 Docker 可以运行案例程序.")]),s._v(" "),a("p",[s._v("bcc 软件包前面也介绍过, 它提供了一系列的 Linux 性能分析工具, 常用来动态追踪进程和内核的行为. 按照上面步骤安装完后, 它提供的所有工具都位于 "),a("code",[s._v("/usr/share/bcc/tools")]),s._v("​ 这个目录中.")]),s._v(" "),a("p",[s._v("安装完成后, 再执行下面的命令来运行案例:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("app "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-itd")]),s._v(" feisky/app:mem-leak\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("案例成功运行后, 需要输入下面的命令, 确认案例应用已经正常启动. 如果一切正常, 应该可以看到下面这个界面:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" logs app\n2th "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n3th "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n4th "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n5th "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n6th "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v("\n7th "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("从输出中可以发现, 这个案例会输出斐波那契数列的一系列数值. 实际上, 这些数值每隔 1 秒输出一次.")]),s._v(" "),a("p",[s._v("知道了这些, 那应该怎么检查内存情况, 判断有没有泄漏发生呢? 首先想到的可能是 top 工具, 不过, top 虽然能观察系统和进程的内存占用情况, 但今天的案例并不适合. "),a("mark",[a("strong",[s._v("内存泄漏问题, 更应该关注内存使用的变化趋势")])]),s._v(".")]),s._v(" "),a("p",[s._v("所以开头也提到了, 今天推荐的是另一个老熟人, "),a("mark",[a("strong",[s._v("vmstat 工具")])]),s._v(".")]),s._v(" "),a("p",[s._v("运行下面的 vmstat, 等待一段时间, 观察内存的变化情况. 如果忘了 vmstat 里各指标的含义, 记得复习前面内容, 或者执行 man vmstat 查询.")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 每隔 3 秒输出一组数据")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("vmstat")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\nprocs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----\nr  b   swpd   "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("free")]),s._v("   buff  cache   si   so    bi    bo   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v("   cs us sy "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("id")]),s._v(" wa st\nprocs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----\nr  b   swpd   "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("free")]),s._v("   buff  cache   si   so    bi    bo   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v("   cs us sy "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("id")]),s._v(" wa st\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6601824")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("97620")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1098784")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("62")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("322")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6601700")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("97620")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1098788")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("57")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("251")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6601320")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("97620")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1098788")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("52")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("306")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6601452")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("97628")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1098788")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("27")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("63")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("326")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6601328")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("97628")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1098788")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("44")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("52")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("299")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6601080")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("97628")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1098792")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("56")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("285")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("从输出中你可以看到, 内存的 free 列在不停的变化, 并且是下降趋势; 而 buffer 和 cache 基本保持不变.")]),s._v(" "),a("p",[a("strong",[s._v("未使用内存在逐渐减小, 而 buffer 和 cache 基本不变, 这说明系统中使用的内存一直在升高")]),s._v(". 但这并不能说明有内存泄漏, 因为应用程序运行中需要的内存也可能会增大. 比如说, 程序中如果用了一个动态增长的数组来缓存计算结果, 占用内存自然会增长.")]),s._v(" "),a("p",[s._v("那怎么确定是不是内存泄漏呢? 或者换句话说, "),a("strong",[s._v("有没有简单方法找出让内存增长的进程, 并定位增长内存用在哪儿呢")]),s._v("?")]),s._v(" "),a("p",[s._v("根据前面内容, 你应该想到了"),a("strong",[s._v("用 top 或 ps 来观察进程的内存使用情况, 然后找出内存使用一直增长的进程, 最后再通过 pmap 查看进程的内存分布")]),s._v(". 但这种方法并不太好用, 因为要判断内存的变化情况, 还需要写一个脚本, 来处理 top 或者 ps 的输出.")]),s._v(" "),a("p",[a("mark",[a("strong",[s._v("这里介绍一个专门用来检测内存泄漏的工具 memleak. memleak 可以跟踪系统或指定进程的内存分配, 释放请求, 然后定期输出一个未释放内存和相应调用栈的汇总情况(默认 5 秒)")])]),s._v(" .")]),s._v(" "),a("p",[s._v("当然, memleak 是 bcc 软件包中的一个工具, 执行 "),a("code",[s._v("/usr/share/bcc/tools/memleak")]),s._v("​ 就可以运行它. 比如, 运行下面的命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -a 表示显示每个内存分配请求的大小以及地址")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -p 指定案例应用的 PID 号")]),s._v("\n$ /usr/share/bcc/tools/memleak "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-a")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v("pidof app"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\nWARNING: Couldn"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'t find .text section in /app\nWARNING: BCC can'")]),s._v("t handle sym "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("look")]),s._v(" ups "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" /app\n    addr "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" 7f8f704732b0 size "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8192")]),s._v("\n    addr "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" 7f8f704772d0 size "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8192")]),s._v("\n    addr "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" 7f8f704712a0 size "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8192")]),s._v("\n    addr "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" 7f8f704752c0 size "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8192")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("32768")]),s._v(" bytes "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" allocations from stack\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("unknown"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("app"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("unknown"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("app"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n        start_thread+0xdb "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("libpthread-2.27.so"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("从 memleak 的输出可以看到, 案例应用在不停地分配内存, 并且这些分配的地址没有被回收.")]),s._v(" "),a("p",[s._v("这里有一个问题, "),a("code",[s._v("Couldn’t find .text section in /app")]),s._v("​, 所以调用栈不能正常输出, 最后的调用栈部分只能看到 "),a("code",[s._v("[unknown]")]),s._v("​ 的标志.")]),s._v(" "),a("p",[s._v("为什么会有这个错误呢? 实际上, 这是由于案例应用运行在容器中导致的. memleak 工具运行在容器之外, 并不能直接访问进程路径 "),a("code",[s._v("/app")]),s._v("​.")]),s._v(" "),a("p",[s._v("比方说, 在终端中直接运行 ls 命令, 会发现这个路径的确不存在:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" /app\nls: cannot access "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/app'")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" No such "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v(" or directory\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("最简单的方法, 就是在容器外部构建相同路径的文件以及依赖库. 这个案例只有一个二进制文件, 所以只要把案例应用的二进制文件放到 /app 路径中, 就可以修复这个问题.")]),s._v(" "),a("p",[s._v("比如, 可以运行下面的命令, 把 app 二进制文件从容器中复制出来, 然后重新运行 memleak 工具:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" app:/app /app\n$ /usr/share/bcc/tools/memleak "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v("pidof app"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-a")]),s._v("\nAttaching to pid "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12512")]),s._v(", Ctrl+C to quit.\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("03:00:41"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" Top "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" stacks with outstanding allocations:\n    addr "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" 7f8f70863220 size "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8192")]),s._v("\n    addr "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" 7f8f70861210 size "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8192")]),s._v("\n    addr "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" 7f8f7085b1e0 size "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8192")]),s._v("\n    addr "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" 7f8f7085f200 size "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8192")]),s._v("\n    addr "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" 7f8f7085d1f0 size "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8192")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("40960")]),s._v(" bytes "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" allocations from stack\n        fibonacci+0x1f "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("app"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n        child+0x4f "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("app"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n        start_thread+0xdb "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("libpthread-2.27.so"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("这一次, 终于看到了"),a("strong",[s._v("内存分配的调用栈, 原来是 fibonacci() 函数分配的内存没释放")]),s._v(".")]),s._v(" "),a("p",[s._v("定位了内存泄漏的来源, 下一步自然就应该查看源码, 想办法修复它. 一起来看案例应用的源代码 "),a("a",{attrs:{href:"https://github.com/feiskyer/linux-perf-examples/blob/master/mem-leak/app.c",target:"_blank",rel:"noopener noreferrer"}},[s._v("app.c"),a("OutboundLink")],1),s._v(":")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" app "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" /app.c\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\nlong long *fibonacci"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("long long *n0, long long *n1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    // 分配 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1024")]),s._v(" 个长整数空间方便观测内存的变化情况\n    long long *v "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("long long *"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" calloc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1024")]),s._v(", sizeof"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("long long"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("))")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    *v "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" *n0 + *n1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("v")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n \nvoid *child"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("void *arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    long long n0 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    long long n1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    long long *v "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" NULL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("int n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" n++"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("v")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" fibonacci"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("n0, "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("n1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        n0 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" n1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        n1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" *v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        printf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%dth => %lld'),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('"')]),s._v(", n, *v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        sleep"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(". \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br")])]),a("p",[s._v("你会发现, child() 调用了 fibonacci() 函数, 但并没有释放 fibonacci() 返回的内存. 所以, 想要修复泄漏问题, 在 child() 中"),a("strong",[s._v("加一个释放函数")]),s._v("就可以了, 比如:")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("child")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        v "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("fibonacci")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("n0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("n1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        n0 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" n1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        n1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%dth => %lld\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("free")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 释放内存")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("这里把修复后的代码放到了 "),a("a",{attrs:{href:"https://github.com/feiskyer/linux-perf-examples/blob/master/mem-leak/app-fix.c",target:"_blank",rel:"noopener noreferrer"}},[s._v("app-fix.c"),a("OutboundLink")],1),s._v(", 也打包成了一个 Docker 镜像. 可以运行下面的命令, 验证一下内存泄漏是否修复:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 清理原来的案例应用")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-f")]),s._v(" app\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 运行修复后的应用")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("app "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-itd")]),s._v(" feisky/app:mem-leak-fix\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 重新执行 memleak 工具检查内存泄漏情况")]),s._v("\n$ /usr/share/bcc/tools/memleak "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-a")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v("pidof app"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\nAttaching to pid "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18808")]),s._v(", Ctrl+C to quit.\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(":23:18"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" Top "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" stacks with outstanding allocations:\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(":23:23"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" Top "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" stacks with outstanding allocations:\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("现在可以看到, 案例应用已经没有遗留内存, 证明修复工作成功完成.")]),s._v(" "),a("h5",{attrs:{id:"_3-小结-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-小结-2"}},[s._v("#")]),s._v(" 3.小结")]),s._v(" "),a("p",[s._v("总结一下今天的内容.")]),s._v(" "),a("p",[s._v("应用程序可以访问的用户内存空间, 由只读段, 数据段, 堆, 栈以及文件映射段等组成. 其中, "),a("strong",[s._v("堆内存和内存映射, 需要应用程序来动态管理内存段, 所以必须小心处理")]),s._v(". 不仅要会用标准库函数 "),a("code",[s._v("malloc()")]),s._v("​ 来动态分配内存, 还要记得在用完内存后, 调用库函数 "),a("code",[s._v("free()")]),s._v("​ 来释放它们.")]),s._v(" "),a("p",[s._v("今天的案例比较简单, 只用加一个 free() 调用就能修复内存泄漏. 不过, 实际应用程序就复杂多了. 比如说,")]),s._v(" "),a("ul",[a("li",[s._v("malloc() 和 free() 通常并不是成对出现, 而是需要在每个异常处理路径和成功路径上都释放内存.")]),s._v(" "),a("li",[s._v("在多线程程序中, 一个线程中分配的内存, 可能会在另一个线程中访问和释放.")]),s._v(" "),a("li",[s._v("更复杂的是, 在第三方的库函数中, 隐式分配的内存可能需要应用程序显式释放.")])]),s._v(" "),a("p",[s._v("所以, "),a("strong",[s._v("为了避免内存泄漏, 最重要的一点就是养成良好的编程习惯, 比如分配内存后, 一定要先写好内存释放的代码, 再去开发其他逻辑. 还是那句话, 有借有还, 才能高效运转, 再借不难")]),s._v(".")]),s._v(" "),a("p",[s._v("当然, 如果已经完成了开发任务, 还可以用 memleak 工具, 检查应用程序的运行中, 内存是否泄漏. 如果发现了内存泄漏情况, 再根据 memleak 输出的应用程序调用栈, 定位内存的分配位置, 从而释放不再访问的内存.")]),s._v(" "),a("h4",{attrs:{id:"_19-案例篇-为什么系统的swap变高了-上"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_19-案例篇-为什么系统的swap变高了-上"}},[s._v("#")]),s._v(" 19-案例篇:为什么系统的Swap变高了(上)")]),s._v(" "),a("p",[s._v("上一节通过一个斐波那契数列的案例, 学习了内存泄漏的分析. 如果在程序中直接或间接地分配了动态内存, 一定要记得释放掉它们, 否则就会导致内存泄漏, 严重时甚至会耗尽系统内存.")]),s._v(" "),a("p",[s._v("不过, 反过来讲, "),a("strong",[s._v("当发生了内存泄漏时, 或者运行了大内存的应用程序, 导致系统的内存资源紧张时, 系统又会如何应对呢")]),s._v("?")]),s._v(" "),a("p",[s._v("在内存基础篇已经学过, 这其实会导致两种可能结果, "),a("strong",[s._v("内存回收和 OOM 杀死进程")]),s._v(".")]),s._v(" "),a("p",[s._v("先来看后一个可能结果, 内存资源紧张导致的 OOM(Out Of Memory), 相对容易理解, 指的是系统杀死占用大量内存的进程, 释放这些内存, 再分配给其他更需要的进程.")]),s._v(" "),a("p",[s._v("接下来再看第一个可能的结果, 内存回收, 也就是系统释放掉可以回收的内存, 比如前面讲过的缓存和缓冲区, 就属于可回收内存. 它们在内存管理中, 通常被叫做"),a("mark",[a("strong",[s._v("文件页")])]),s._v("​ "),a("strong",[s._v("(")]),s._v(" File-backed Page).")]),s._v(" "),a("p",[a("mark",[a("strong",[s._v("大部分文件页, 都可以直接回收, 以后有需要时, 再从磁盘重新读取就可以了. 而那些被应用程序修改过, 并且暂时还没写入磁盘的数据(也就是脏页), 就得先写入磁盘, 然后才能进行内存释放.")])])]),s._v(" "),a("p",[s._v("这些"),a("strong",[s._v("脏页, 一般可以通过两种方式写入磁盘")]),s._v(".")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("可以在应用程序中, 通过系统调用 fsync, 把脏页同步到磁盘中;")])]),s._v(" "),a("li",[a("strong",[s._v("也可以交给系统, 由内核线程 pdflush 负责这些脏页的刷新.")])])]),s._v(" "),a("p",[s._v("除了缓存和缓冲区, 通过内存映射获取的文件映射页, 也是一种常见的文件页. 它也可以被释放掉, 下次再访问的时候, 从文件重新读取.")]),s._v(" "),a("p",[s._v("除了文件页外, 还有没有其他的内存可以回收呢? 比如, "),a("strong",[s._v("应用程序动态分配的堆内存")]),s._v(", 也就是在内存管理中说到的"),a("strong",[s._v("匿名页")]),s._v("(Anonymous Page), 是不是也可以回收呢?")]),s._v(" "),a("p",[s._v("这些内存自然不能直接释放. 但是如果这些内存在分配后很少被访问, 似乎也是一种资源浪费. 是不是可以"),a("strong",[s._v("把它们暂时先存在磁盘里, 释放内存给其他更需要的进程")]),s._v("?")]),s._v(" "),a("p",[s._v("其实, 这正是 Linux 的 Swap 机制. "),a("mark",[a("strong",[s._v("Swap 把这些不常访问的内存先写到磁盘中, 然后释放这些内存, 给其他更需要的进程使用. 再次访问这些内存时, 重新从磁盘读入内存就可以了")])]),s._v(".")]),s._v(" "),a("p",[s._v("在前几节已经分别学过缓存和 OOM 的原理和分析. 那 Swap 又是怎么工作的呢? 因为内容比较多, 接下来, 将用两节来探索 Swap 的工作原理, 以及 Swap 升高后的分析方法.")]),s._v(" "),a("p",[s._v("先来看看, Swap 究竟是怎么工作的.")]),s._v(" "),a("h5",{attrs:{id:"_1-swap原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-swap原理"}},[s._v("#")]),s._v(" 1.Swap原理")]),s._v(" "),a("p",[s._v("前面提到, "),a("strong",[s._v("Swap 说白了就是把一块磁盘空间或者一个本地文件(以下讲解以磁盘为例), 当成内存来使用")]),s._v(". 它包括"),a("strong",[s._v("换出和换入")]),s._v("两个过程.")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("所谓换出, 就是把进程暂时不用的内存数据存储到磁盘中, 并释放这些数据占用的内存.")])]),s._v(" "),a("li",[a("strong",[s._v("而换入, 则是在进程再次访问这些内存的时候, 把它们从磁盘读到内存中来.")])])]),s._v(" "),a("p",[s._v("所以 Swap 其实是把系统的可用内存变大了. 这样, "),a("strong",[s._v("即使服务器的内存不足, 也可以运行大内存的应用程序")]),s._v(".")]),s._v(" "),a("p",[s._v("还记得我最早学习 Linux 操作系统时, 内存实在太贵了, 一个普通学生根本就用不起大的内存, 那会儿我就是开启了 Swap 来运行 Linux 桌面. 当然, 现在的内存便宜多了, 服务器一般也会配置很大的内存, 那是不是说 Swap 就没有用武之地了呢?")]),s._v(" "),a("p",[s._v("当然不是. 事实上, 内存再大, 对应用程序来说, 也有不够用的时候.")]),s._v(" "),a("p",[s._v("一个很典型的场景就是, 即使内存不足时, 有些应用程序也并不想被 OOM 杀死, 而是希望能缓一段时间, 等待人工介入, 或者等系统自动释放其他进程的内存, 再分配给它.")]),s._v(" "),a("p",[s._v("除此之外, 常见的笔记本电脑的休眠和快速开机的功能, 也基于 Swap. 休眠时, 把系统的内存存入磁盘, 这样等到再次开机时, 只要从磁盘中加载内存就可以. 这样就省去了很多应用程序的初始化过程, 加快了开机速度.")]),s._v(" "),a("p",[s._v("话说回来, 既然 Swap 是为了回收内存, 那么 "),a("strong",[s._v("Linux 到底在什么时候需要回收内存呢")]),s._v("? 前面一直在说内存资源紧张, 又该怎么来衡量内存是不是紧张呢?")]),s._v(" "),a("p",[s._v("一个最容易想到的场景就是, "),a("strong",[s._v("有新的大块内存分配请求, 但是剩余内存不足")]),s._v(". 这个时候系统就需要回收一部分内存(比如前面提到的缓存), 进而尽可能地满足新内存请求. 这个过程通常被称为"),a("mark",[a("strong",[s._v("直接内存回收")])]),s._v(".")]),s._v(" "),a("p",[s._v("除了直接内存回收, 还有一个"),a("strong",[s._v("专门的内核线程用来定期回收内存")]),s._v(", 也就是 "),a("strong",[s._v("kswapd0")]),s._v(". 为了衡量内存的使用情况, kswapd0 定义了"),a("strong",[s._v("三个内存阈值(watermark, 也称为水位)")]),s._v(" , 分别是"),a("mark",[a("strong",[s._v("页最小阈值(pages_min), 页低阈值(pages_low)和页高阈值(pages_high)")])]),s._v(" . 剩余内存, 则使用 pages_free 表示.")]),s._v(" "),a("p",[s._v("下面画了一张图表示它们的关系.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/80e5896ff0f27cfaed9b56d6b283678e-20230731161933-nwmdiob.png",alt:""}})]),s._v(" "),a("p",[a("strong",[s._v("kswapd0 定期扫描内存的使用情况, 并根据剩余内存落在这三个阈值的空间位置, 进行内存的回收操作")]),s._v(".")]),s._v(" "),a("ul",[a("li",[s._v("剩余内存小于"),a("strong",[s._v("页最小阈值")]),s._v(", 说明进程可用内存都耗尽了, 只有内核才可以分配内存.")]),s._v(" "),a("li",[s._v("剩余内存落在"),a("strong",[s._v("页最小阈值")]),s._v("和"),a("strong",[s._v("页低阈值")]),s._v("中间, 说明内存压力比较大, 剩余内存不多了. 这时 kswapd0 会执行内存回收, 直到剩余内存大于高阈值为止.")]),s._v(" "),a("li",[s._v("剩余内存落在"),a("strong",[s._v("页低阈值")]),s._v("和"),a("strong",[s._v("页高阈值")]),s._v("中间, 说明内存有一定压力, 但还可以满足新内存请求.")]),s._v(" "),a("li",[s._v("剩余内存大于"),a("strong",[s._v("页高阈值")]),s._v(", 说明剩余内存比较多, 没有内存压力.")])]),s._v(" "),a("p",[s._v("可以看到, 一旦剩余内存小于页低阈值, 就会触发内存的回收. 这个页低阈值, 其实可以通过内核选项 "),a("code",[s._v("/proc/sys/vm/min_free_kbytes")]),s._v("​ 来间接设置. min_free_kbytes 设置了页最小阈值, 而其他两个阈值, 都是根据页最小阈值计算生成的, 计算方法如下 :")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v("pages_low "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" pages_min"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("\npages_high "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" pages_min"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h5",{attrs:{id:"_2-numa与swap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-numa与swap"}},[s._v("#")]),s._v(" 2.NUMA与Swap")]),s._v(" "),a("p",[s._v("很多情况下, 你明明发现了 Swap 升高, 可是在分析系统的内存使用时, 却很可能发现, 系统剩余内存还多着呢. "),a("strong",[s._v("为什么剩余内存很多的情况下, 也会发生 Swap 呢")]),s._v("?")]),s._v(" "),a("p",[s._v("看到上面的标题, 你应该已经想到了, 这正是"),a("strong",[s._v("处理器的 NUMA (Non-Uniform Memory Access)架构")]),s._v("导致的.")]),s._v(" "),a("p",[s._v("关于 NUMA, 前面 CPU 模块中曾简单提到过. 在 NUMA 架构下, 多个处理器被划分到不同 Node 上, 且每个 Node 都拥有自己的本地内存空间.")]),s._v(" "),a("p",[s._v("而同一个 Node 内部的内存空间, 实际上又可以进一步分为不同的内存域(Zone), 比如直接内存访问区(DMA), 普通内存区(NORMAL), 伪内存区(MOVABLE)等, 如下图所示:")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/c7169bdd695c2cffa8ab21c5d0c5e801-20230731161933-a8if6oz.png",alt:""}})]),s._v(" "),a("p",[s._v("先不用特别关注这些内存域的具体含义, 只要会查看阈值的配置, 以及缓存, 匿名页的实际使用情况就够了.")]),s._v(" "),a("p",[s._v("既然 NUMA 架构下的每个 Node 都有自己的本地内存空间, 那么在分析内存的使用时, 也应该"),a("strong",[s._v("针对每个 Node 单独分析")]),s._v(".")]),s._v(" "),a("p",[s._v("可以通过 numactl 命令, 来查看处理器在 Node 的分布情况, 以及每个 Node 的内存使用情况. 比如, 下面就是一个 numactl 输出的示例:")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v("$ numactl "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("hardware\navailable"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" nodes "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nnode "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" cpus"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nnode "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" size"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7977")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MB")]),s._v("\nnode "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" free"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4416")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MB")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("这个界面显示, 我的系统中只有一个 Node, 也就是 Node 0, 而且编号为 0 和 1 的两个 CPU,  都位于 Node 0 上. 另外, Node 0 的内存大小为 7977 MB, 剩余内存为 4416 MB.")]),s._v(" "),a("p",[s._v("了解了 NUNA 的架构和 NUMA 内存的查看方法后, 你可能就要问了"),a("strong",[s._v("这跟 Swap 有什么关系")]),s._v("呢?")]),s._v(" "),a("p",[s._v("实际上, 前面提到的三个内存阈值(页最小阈值, 页低阈值和页高阈值), 都可以通过内存域在 proc 文件系统中的接口 "),a("code",[s._v("/proc/zoneinfo")]),s._v("​ 来查看.")]),s._v(" "),a("p",[s._v("比如, 下面就是一个 "),a("code",[s._v("/proc/zoneinfo")]),s._v("​ 文件的内容示例:")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v("$ cat "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("proc"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("zoneinfo\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" zone   "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Normal")]),s._v("\n pages free     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("227894")]),s._v("\n       min      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14896")]),s._v("\n       low      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18620")]),s._v("\n       high     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22344")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n     nr_free_pages "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("227894")]),s._v("\n     nr_zone_inactive_anon "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11082")]),s._v("\n     nr_zone_active_anon "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14024")]),s._v("\n     nr_zone_inactive_file "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("539024")]),s._v("\n     nr_zone_active_file "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("923986")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("这个输出中有大量指标, 下面解释一下比较重要的几个.")]),s._v(" "),a("ul",[a("li",[s._v("pages 处的 min, low, high, 就是上面提到的三个内存阈值, 而 free 是剩余内存页数, 它跟后面的 nr_free_pages 相同.")]),s._v(" "),a("li",[s._v("nr_zone_active_anon 和 nr_zone_inactive_anon, 分别是活跃和非活跃的匿名页数.")]),s._v(" "),a("li",[s._v("nr_zone_active_file 和 nr_zone_inactive_file, 分别是活跃和非活跃的文件页数.")])]),s._v(" "),a("p",[s._v("从这个输出结果可以发现, "),a("strong",[s._v("剩余内存远大于页高阈值, 所以此时的 kswapd0 不会回收内存")]),s._v(".")]),s._v(" "),a("p",[s._v("当然, 某个 Node 内存不足时, 系统可以从其他 Node 寻找空闲内存, 也可以从本地内存中回收内存. 具体选哪种模式, 可以通过 "),a("code",[s._v("/proc/sys/vm/zone_reclaim_mode")]),s._v("​ 来调整. 它支持以下几个选项:")]),s._v(" "),a("ul",[a("li",[s._v("默认的 0, 也就是刚刚提到的模式, 表示既可以从其他 Node 寻找空闲内存, 也可以从本地回收内存.")]),s._v(" "),a("li",[s._v("1, 2, 4 都表示只回收本地内存, 2 表示可以回写脏数据回收内存, 4 表示可以用 Swap 方式回收内存.")])]),s._v(" "),a("h5",{attrs:{id:"_3-swappiness"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-swappiness"}},[s._v("#")]),s._v(" 3.swappiness")]),s._v(" "),a("p",[s._v("到这里就可以理解内存回收的机制了. 这些"),a("strong",[s._v("回收的内存既包括了文件页, 又包括了匿名页")]),s._v(".")]),s._v(" "),a("ul",[a("li",[a("mark",[a("strong",[s._v("对文件页的回收, 当然就是直接回收缓存, 或者把脏页写回磁盘后再回收.")])])]),s._v(" "),a("li",[a("mark",[a("strong",[s._v("而对匿名页的回收, 其实就是通过 Swap 机制, 把它们写入磁盘后再释放内存.")])])])]),s._v(" "),a("p",[s._v("不过, 你可能还有一个问题. 既然有两种不同的内存回收机制, 那么在实际回收内存时, 到底该先回收哪一种呢?")]),s._v(" "),a("p",[s._v("其实, Linux 提供了一个 "),a("code",[s._v("/proc/sys/vm/swappiness")]),s._v("​ 选项, 用来调整使用 Swap 的积极程度.")]),s._v(" "),a("p",[a("mark",[a("strong",[s._v("swappiness 的范围是 0-100, 数值越大, 越积极使用 Swap, 也就是更倾向于回收匿名页; 数值越小, 越消极使用 Swap, 也就是更倾向于回收文件页")])]),s._v(".")]),s._v(" "),a("p",[s._v("虽然 swappiness 的范围是 0-100, 不过要注意, 这并不是内存的百分比, 而是调整 Swap 积极程度的权重, 即使把它设置成 0, 当"),a("strong",[s._v("剩余内存 + 文件页小于页高阈值")]),s._v("时, 还是会发生 Swap.")]),s._v(" "),a("h5",{attrs:{id:"_4-小结-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-小结-5"}},[s._v("#")]),s._v(" 4.小结")]),s._v(" "),a("p",[s._v("在内存资源紧张时, Linux 通过"),a("strong",[s._v("直接内存回收和定期扫描的方式, 来释放文件页和匿名页, 以便把内存分配给更需要的进程使用")]),s._v(".")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("文件页的回收比较容易理解, 直接清空, 或者把脏数据写回磁盘后再释放")]),s._v(".")]),s._v(" "),a("li",[a("strong",[s._v("而对匿名页的回收, 需要通过 Swap 换出到磁盘中, 下次访问时, 再从磁盘换入到内存中.")])])]),s._v(" "),a("p",[s._v("可以设置 "),a("code",[s._v("/proc/sys/vm/min_free_kbytes")]),s._v("​, 来调整系统定期回收内存的阈值(也就是页低阈值), 还可以设置 "),a("code",[s._v("/proc/sys/vm/swappiness")]),s._v("​, 来调整文件页和匿名页的回收倾向.")]),s._v(" "),a("p",[s._v("在 NUMA 架构下, 每个 Node 都有自己的本地内存空间, 而当本地内存不足时, 默认既可以从其他 Node 寻找空闲内存, 也可以从本地内存回收.")]),s._v(" "),a("p",[s._v("可以设置 "),a("code",[s._v("/proc/sys/vm/zone_reclaim_mode")]),s._v("​, 来调整 NUMA 本地内存的回收策略.")]),s._v(" "),a("h4",{attrs:{id:"_20-案例篇-为什么系统的swap变高了-下"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_20-案例篇-为什么系统的swap变高了-下"}},[s._v("#")]),s._v(" 20-案例篇:为什么系统的Swap变高了?(下)")]),s._v(" "),a("p",[s._v("上一节详细学习了 Linux 内存回收, 特别是 Swap 的原理, 那么, "),a("strong",[s._v("当 Swap 使用升高时, 要如何定位和分析呢")]),s._v("? 下面, 就来看一个磁盘 I/O 的案例, 实战分析和演练.")]),s._v(" "),a("h5",{attrs:{id:"_1-案例-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-案例-2"}},[s._v("#")]),s._v(" 1.案例")]),s._v(" "),a("p",[s._v("下面案例基于 Ubuntu 18.04, 同样适用于其他的 Linux 系统.")]),s._v(" "),a("ul",[a("li",[s._v("机器配置: 2 CPU, 8GB 内存")]),s._v(" "),a("li",[s._v("需要预先安装 sysstat 等工具, 如 apt install sysstat")])]),s._v(" "),a("p",[s._v("首先打开两个终端, 分别 SSH 登录到两台机器上, 并安装上面提到的这些工具.")]),s._v(" "),a("p",[s._v("然后, 在终端中运行 free 命令, 查看 Swap 的使用情况. 比如, 在我的机器中, 输出如下:")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v("$ free\n             total        used        free      shared  buff"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("cache   available\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Mem")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8169348")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("331668")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6715972")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("696")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1121708")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7522896")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Swap")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("             "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("           "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("           "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("从这个 free 输出可以看到, Swap 的大小是 0, 这说明我的机器没有配置 Swap.")]),s._v(" "),a("p",[s._v("为了继续 Swap 的案例, 就需要先配置开启 Swap. 如果你的环境中已经开启了 Swap, 那可以略过下面的开启步骤, 继续往后走.")]),s._v(" "),a("p",[s._v("要开启 Swap, 首先要清楚, Linux 本身支持两种类型的 Swap, 即 "),a("strong",[s._v("Swap 分区和 Swap 文件")]),s._v(". 以 Swap 文件为例, 在第一个终端中运行下面的命令开启 Swap, 这里配置 Swap 文件的大小为 8GB:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 创建 Swap 文件")]),s._v("\n$ fallocate "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-l")]),s._v(" 8G /mnt/swapfile\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 修改权限只有根用户可以访问")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("chmod")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("600")]),s._v(" /mnt/swapfile\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 配置 Swap 文件")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkswap")]),s._v(" /mnt/swapfile\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 开启 Swap")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("swapon")]),s._v(" /mnt/swapfile\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("然后, 再执行 free 命令, 确认 Swap 配置成功:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("free")]),s._v("\n             total        used        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("free")]),s._v("      shared  buff/cache   available\nMem:        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8169348")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("331668")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6715972")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("696")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1121708")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7522896")]),s._v("\nSwap:       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8388604")]),s._v("           "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8388604")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("现在, free 输出中, Swap 空间以及剩余空间都从 0 变成了 8GB, 说明 Swap 已经"),a("strong",[s._v("正常开启")]),s._v(".")]),s._v(" "),a("p",[s._v("接下来在第一个终端中, 运行下面的 dd 命令, 模拟大文件的读取:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 写入空设备, 实际上只有磁盘的读请求")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("dd")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/dev/sda1 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("of")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/dev/null "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("bs")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("1G "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("count")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2048")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("接着, 在第二个终端中运行 sar 命令, 查看内存各个指标的变化情况. 可以多观察一会儿, 查看这些指标的变化情况.")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 间隔 1 秒输出一组数据")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -r 表示显示内存使用情况, -S 表示显示 Swap 使用情况")]),s._v("\n$ sar "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-r")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-S")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n04:39:56    kbmemfree   kbavail kbmemused  %memused kbbuffers  kbcached  kbcommit   %commit  kbactive   kbinact   kbdirty\n04:39:57      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6249676")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6839824")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1919632")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("23.50")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("740512")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("67316")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1691736")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10.22")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("815156")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("841868")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("\n \n04:39:56    kbswpfree kbswpused  %swpused  kbswpcad   %swpcad\n04:39:57      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8388604")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("\n \n04:39:57    kbmemfree   kbavail kbmemused  %memused kbbuffers  kbcached  kbcommit   %commit  kbactive   kbinact   kbdirty\n04:39:58      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6184472")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6807064")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1984836")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24.30")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("772768")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("67380")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1691736")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10.22")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("847932")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("874224")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("\n \n04:39:57    kbswpfree kbswpused  %swpused  kbswpcad   %swpcad\n04:39:58      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8388604")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("\n \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n \n04:44:06    kbmemfree   kbavail kbmemused  %memused kbbuffers  kbcached  kbcommit   %commit  kbactive   kbinact   kbdirty\n04:44:07       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("152780")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6525716")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8016528")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("98.13")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6530440")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("51316")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1691736")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10.22")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("867124")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6869332")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n \n04:44:06    kbswpfree kbswpused  %swpused  kbswpcad   %swpcad\n04:44:07      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8384508")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4096")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.05")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("52")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.27")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br")])]),a("p",[s._v("可以看到, sar 的输出结果是两个表格, "),a("strong",[s._v("第一个表格表示内存的使用情况, 第二个表格表示 Swap 的使用情况")]),s._v(". 其中, 各个指标名称前面的 kb 前缀, 表示这些指标的单位是 KB.")]),s._v(" "),a("p",[s._v("去掉前缀后, 你会发现, 大部分指标都已经见过了, 剩下的几个新出现的指标来简单介绍一下.")]),s._v(" "),a("ul",[a("li",[s._v("kbcommit, 表示当前"),a("strong",[s._v("系统负载需要的内存")]),s._v(". 它实际上是为了保证系统内存不溢出, 对需要内存的估计值. %commit, 就是这个值相对总内存的百分比.")]),s._v(" "),a("li",[s._v("kbactive, 表示"),a("strong",[s._v("活跃内存")]),s._v(", 也就是最近使用过的内存, "),a("strong",[s._v("一般不会被系统回收")]),s._v(".")]),s._v(" "),a("li",[s._v("kbinact, 表示"),a("strong",[s._v("非活跃内存")]),s._v(", 也就是不常访问的内存, "),a("strong",[s._v("有可能会被系统回收")]),s._v(".")])]),s._v(" "),a("p",[s._v("清楚了界面指标的含义后, 再结合具体数值, 来分析相关的现象. 可以清楚地看到, "),a("strong",[s._v("总的内存使用率(%memused)在不断增长, 从开始的 23% 一直长到了 98%, 并且主要内存都被缓冲区(kbbuffers)占用")]),s._v(". 具体来说:")]),s._v(" "),a("ul",[a("li",[s._v("刚开始, 剩余内存(kbmemfree)不断减少, 而缓冲区(kbbuffers)则不断增大, 由此可知, 剩余内存不断分配给了缓冲区.")]),s._v(" "),a("li",[s._v("一段时间后, 剩余内存已经很小, "),a("strong",[s._v("而缓冲区占用了大部分内存")]),s._v(". 这时候, Swap 的使用开始逐渐增大, 缓冲区和剩余内存则只在小范围内波动.")])]),s._v(" "),a("p",[s._v("你可能困惑了, 为什么缓冲区在不停增大? 这又是哪些进程导致的呢?")]),s._v(" "),a("p",[s._v("显然还得看看进程缓存的情况. 在前面缓存的案例中学过, cachetop 正好能满足这一点. 那就来 cachetop 一下.")]),s._v(" "),a("p",[s._v("在第二个终端中, 按下 Ctrl+C 停止 sar 命令, 然后运行下面的 cachetop 命令, 观察缓存的使用情况:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ cachetop "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(":28:28 Buffers MB: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6349")]),s._v(" / Cached MB: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("87")]),s._v(" / Sort: HITS / Order: ascending\nPID      "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("UID")]),s._v("      CMD              HITS     MISSES   DIRTIES  READ_HIT%  WRITE_HIT%\n   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18280")]),s._v(" root     python                 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100.0")]),s._v("%       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("%\n   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18279")]),s._v(" root     "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("dd")]),s._v("                  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("41088")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("41022")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("50.0")]),s._v("%      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("50.0")]),s._v("%\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("通过 cachetop 的输出看到, dd 进程的读写请求只有 50% 的命中率, 并且"),a("strong",[s._v("未命中的缓存页数(MISSES)为 41022(单位是页)")]),s._v(" . 这说明, 正是案例开始时运行的 dd, 导致了缓冲区使用升高.")]),s._v(" "),a("p",[s._v("你可能接着会问, 为什么 Swap 也跟着升高了呢? 直观来说, 缓冲区占了系统绝大部分内存, 还属于可回收内存, 内存不够用时, 不应该先回收缓冲区吗?")]),s._v(" "),a("p",[s._v("这种情况, 还得进一步通过 "),a("code",[s._v("/proc/zoneinfo")]),s._v("​ 来观察剩余内存, 内存阈值以及匿名页和文件页的活跃情况.")]),s._v(" "),a("p",[s._v("可以在第二个终端中, 按下 Ctrl+C, 停止 cachetop 命令. 然后运行下面的命令, 观察 "),a("code",[s._v("/proc/zoneinfo")]),s._v("​ 中这几个指标的变化情况:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -d 表示高亮变化的字段")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -A 表示仅显示 Normal 行以及之后的 15 行输出")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("watch")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-A")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Normal'")]),s._v(" /proc/zoneinfo\nNode "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(", zone   Normal\n  pages "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("free")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21328")]),s._v("\n        min      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14896")]),s._v("\n        low      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18620")]),s._v("\n        high     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22344")]),s._v("\n        spanned  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1835008")]),s._v("\n        present  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1835008")]),s._v("\n        managed  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1796710")]),s._v("\n        protection: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n      nr_free_pages "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21328")]),s._v("\n      nr_zone_inactive_anon "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("79776")]),s._v("\n      nr_zone_active_anon "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("206854")]),s._v("\n      nr_zone_inactive_file "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("918561")]),s._v("\n      nr_zone_active_file "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("496695")]),s._v("\n      nr_zone_unevictable "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2251")]),s._v("\n      nr_zone_write_pending "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("p",[s._v("可以发现, "),a("strong",[s._v("剩余内存(pages_free)在一个小范围内不停地波动. 当它小于页低阈值(pages_low) 时, 又会突然增大到一个大于页高阈值(pages_high)的值")]),s._v(".")]),s._v(" "),a("p",[s._v("再结合刚刚用 sar 看到的剩余内存和缓冲区的变化情况, 可以推导出, 剩余内存和缓冲区的波动变化, 正是"),a("strong",[s._v("由于内存回收和缓存再次分配的循环往复")]),s._v(".")]),s._v(" "),a("ul",[a("li",[s._v("当剩余内存小于页低阈值时, 系统会回收一些缓存和匿名内存, 使剩余内存增大. 其中, 缓存的回收导致 sar 中的缓冲区减小, 而匿名内存的回收导致了 Swap 的使用增大.")]),s._v(" "),a("li",[s._v("紧接着, 由于 dd 还在继续, 剩余内存又会重新分配给缓存, 导致剩余内存减少, 缓冲区增大.")])]),s._v(" "),a("p",[s._v("其实还有一个有趣的现象, 如果多次运行 dd 和 sar, 你可能会发现, 在多次的循环重复中, 有时候是 Swap 用得比较多, 有时候 Swap 很少, 反而缓冲区的波动更大.")]),s._v(" "),a("p",[s._v("换句话说, "),a("strong",[s._v("系统回收内存时, 有时候会回收更多的文件页, 有时候又回收了更多的匿名页")]),s._v(".")]),s._v(" "),a("p",[s._v("显然, 系统回收不同类型内存的倾向, 似乎不那么明显. 你应该想到了上节课提到的 "),a("strong",[s._v("swappiness")]),s._v(", 正是调整不同类型内存回收的配置选项.")]),s._v(" "),a("p",[s._v("还是在第二个终端中, 按下 Ctrl+C 停止 watch 命令, 然后运行下面的命令, 查看 swappiness 的配置:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" /proc/sys/vm/swappiness\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("60")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("swappiness 显示的是默认值 60, 这是一个相对中和的配置, 所以系统会根据实际运行情况, 选择合适的回收类型, 比如回收不活跃的匿名页, 或者不活跃的文件页.")]),s._v(" "),a("p",[s._v("到这里已经找出了 Swap 发生的根源. 另一个问题就是, 刚才的 Swap 到底影响了哪些应用程序呢? 换句话说, "),a("strong",[s._v("Swap 换出的是哪些进程的内存")]),s._v("?")]),s._v(" "),a("p",[s._v("这里还是推荐 proc 文件系统, 用来"),a("strong",[s._v("查看进程 Swap 换出的虚拟内存大小")]),s._v(", 它保存在 "),a("code",[s._v("/proc/pid/status")]),s._v("​ 中的 VmSwap 中(推荐执行 man proc 来查询其他字段的含义).")]),s._v(" "),a("p",[s._v("在第二个终端中运行下面的命令, 就可以查看使用 Swap 最多的进程.")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 按 VmSwap 使用量对进程排序, 输出进程名称, 进程 ID 以及 SWAP 用量")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("file")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" /proc/*/status "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("awk")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('\'/VmSwap|Name|^Pid/{printf $2 " " $3}END{ print ""}\'')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$file")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sort")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-k")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-n")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-r")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("head")]),s._v("\ndockerd "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2226")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10728")]),s._v(" kB\ndocker-containe "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2251")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8516")]),s._v(" kB\nsnapd "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("936")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4020")]),s._v(" kB\nnetworkd-dispat "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("911")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("836")]),s._v(" kB\npolkitd "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1004")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("44")]),s._v(" kB\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("从这里可以看到, 使用 Swap 比较多的是 dockerd 和 docker-containe 进程, 所以"),a("strong",[s._v("当 dockerd 再次访问这些换出到磁盘的内存时, 也会比较慢")]),s._v(".")]),s._v(" "),a("p",[s._v("这也说明了一点, 虽然缓存属于可回收内存, "),a("strong",[s._v("但在类似大文件拷贝这类场景下, 系统还是会用 Swap 机制来回收匿名内存, 而不仅仅是回收占用绝大部分内存的文件页")]),s._v(".")]),s._v(" "),a("p",[s._v("最后, 如果在一开始配置了 Swap, 不要忘记在案例结束后关闭. 可以运行下面的命令, 关闭 Swap:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ swapoff "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-a")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("实际上, 关闭 Swap 后再重新打开, 也是一种"),a("strong",[s._v("常用的 Swap 空间清理方法")]),s._v(", 比如:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ swapoff "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-a")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("swapon")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-a")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h5",{attrs:{id:"_2-小结-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-小结-2"}},[s._v("#")]),s._v(" 2.小结")]),s._v(" "),a("p",[s._v("在内存资源紧张时, Linux 会通过 Swap 把不常访问的匿名页换出到磁盘中, 下次访问的时候再从磁盘换入到内存中来. 可以设置 "),a("code",[s._v("/proc/sys/vm/min_free_kbytes")]),s._v("​, 来调整系统定期"),a("strong",[s._v("回收内存的阈值")]),s._v("; 也可以设置 "),a("code",[s._v("/proc/sys/vm/swappiness")]),s._v("​, 来调整文件页和匿名页的回收倾向.")]),s._v(" "),a("p",[s._v("当 Swap 变高时, 可以用 sar, "),a("code",[s._v("/proc/zoneinfo")]),s._v("​, "),a("code",[s._v("/proc/pid/status")]),s._v("​ 等方法, 查看系统和进程的内存使用情况, 进而找出 Swap 升高的根源和受影响的进程.")]),s._v(" "),a("p",[s._v("反过来说, 通常降低 Swap 的使用, 可以提高系统的整体性能. 要怎么做呢? 这里也总结了几种常见的降低方法.")]),s._v(" "),a("ul",[a("li",[s._v("禁止 Swap, 现在服务器的内存足够大, 所以除非有必要, 禁用 Swap 就可以了. 随着云计算的普及, 大部分云平台中的虚拟机都默认禁止 Swap.")]),s._v(" "),a("li",[s._v("如果实在需要用到 Swap, 可以尝试"),a("strong",[s._v("降低 swappiness 的值, 减少内存回收时 Swap 的使用倾向")]),s._v(".")]),s._v(" "),a("li",[s._v("响应延迟敏感的应用, 如果它们可能在开启 Swap 的服务器中运行, 还可以"),a("strong",[s._v("用库函数 mlock() 或者 mlockall() 锁定内存, 阻止它们的内存换出")]),s._v(".")])]),s._v(" "),a("h4",{attrs:{id:"_21-套路篇-如何-快准狠-找到系统内存的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_21-套路篇-如何-快准狠-找到系统内存的问题"}},[s._v("#")]),s._v(' 21-套路篇:如何"快准狠"找到系统内存的问题?')]),s._v(" "),a("p",[s._v("前几节, 通过几个案例, 分析了各种常见的内存性能问题. 我相信通过它们, 你对内存的性能分析已经有了基本的思路, 也熟悉了很多分析内存性能的工具. 你肯定会想, "),a("strong",[s._v("有没有迅速定位内存问题的方法? 当定位出内存的瓶颈后, 又有哪些优化内存的思路呢")]),s._v("?")]),s._v(" "),a("p",[s._v("本节就来梳理一下, "),a("strong",[s._v("怎样可以快速定位系统内存, 并且总结了相关的解决思路")]),s._v(".")]),s._v(" "),a("h5",{attrs:{id:"_1-内存性能指标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-内存性能指标"}},[s._v("#")]),s._v(" 1.内存性能指标")]),s._v(" "),a("p",[s._v("为了分析内存的性能瓶颈, 首先要知道, "),a("strong",[s._v("怎样衡量内存的性能, 也就是性能指标问题")]),s._v(". 先来回顾一下, 前几节学过的内存性能指标.")]),s._v(" "),a("p",[s._v("首先, 你最容易想到的是"),a("mark",[a("strong",[s._v("系统内存使用情况")])]),s._v("​ "),a("strong",[s._v(", 比如已用内存, 剩余内存, 共享内存, 可用内存, 缓存和缓冲区的用量")]),s._v("等.")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("已用内存和剩余内存很容易理解, 就是已经使用和还未使用的内存.")])]),s._v(" "),a("li",[a("strong",[s._v("共享内存是通过 tmpfs 实现的, 所以它的大小也就是 tmpfs 使用的内存大小. tmpfs 其实也是一种特殊的缓存.")])]),s._v(" "),a("li",[a("strong",[s._v("可用内存是新进程可以使用的最大内存, 它包括剩余内存和可回收缓存.")])]),s._v(" "),a("li",[a("strong",[s._v("缓存包括两部分, 一部分是磁盘读取文件的页缓存, 用来缓存从磁盘读取的数据, 可以加快以后再次访问的速度. 另一部分, 则是 Slab 分配器中的可回收内存.")])]),s._v(" "),a("li",[a("strong",[s._v("缓冲区是对原始磁盘块的临时存储, 用来缓存将要写入磁盘的数据. 这样, 内核就可以把分散的写集中起来, 统一优化磁盘写入.")])])]),s._v(" "),a("p",[s._v("第二类很容易想到的, 应该是"),a("mark",[a("strong",[s._v("进程内存使用情况")])]),s._v("​ "),a("strong",[s._v(", 比如进程的虚拟内存, 常驻内存, 共享内存以及 Swap 内存")]),s._v("等.")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("虚拟内存, 包括了进程代码段, 数据段, 共享内存, 已经申请的堆内存和已经换出的内存等. 这里要注意, 已经申请的内存, 即使还没有分配物理内存, 也算作虚拟内存.")])]),s._v(" "),a("li",[a("strong",[s._v("常驻内存是进程实际使用的物理内存, 不过, 它不包括 Swap 和共享内存.")])]),s._v(" "),a("li",[a("strong",[s._v("共享内存, 既包括与其他进程共同使用的真实的共享内存, 还包括了加载的动态链接库以及程序的代码段等.")])]),s._v(" "),a("li",[a("strong",[s._v("Swap 内存, 是指通过 Swap 换出到磁盘的内存.")])])]),s._v(" "),a("p",[s._v("当然, 这些指标中, 常驻内存一般会换算成占系统总内存的百分比, 也就是进程的内存使用率.")]),s._v(" "),a("p",[s._v("除了这些很容易想到的指标外, 我还想再强调一下, "),a("mark",[a("strong",[s._v("缺页异常")])]),s._v("​.")]),s._v(" "),a("p",[s._v("在内存分配的原理中曾经讲到过, 系统调用内存分配请求后, 并不会立刻为其分配物理内存, 而是在请求首次访问时, 通过缺页异常来分配. 缺页异常又分为下面两种场景.")]),s._v(" "),a("ul",[a("li",[s._v("可以直接从物理内存中分配时, 被称为"),a("strong",[s._v("次缺页异常")]),s._v(".")]),s._v(" "),a("li",[s._v("需要磁盘 I/O 介入(比如 Swap)时, 被称为"),a("strong",[s._v("主缺页异常")]),s._v(".")])]),s._v(" "),a("p",[s._v("显然, "),a("strong",[s._v("主缺页异常升高, 就意味着需要磁盘 I/O, 那么内存访问也会慢很多")]),s._v(".")]),s._v(" "),a("p",[s._v("除了系统内存和进程内存, 第三类重要指标就是 "),a("mark",[a("strong",[s._v("Swap 的使用情况")])]),s._v("​ "),a("strong",[s._v(", 比如 Swap 的已用空间, 剩余空间, 换入速度和换出速度等")]),s._v(".")]),s._v(" "),a("ul",[a("li",[s._v("已用空间和剩余空间很好理解, 就是字面上的意思, 已经使用和没有使用的内存空间.")]),s._v(" "),a("li",[s._v("换入和换出速度, 则表示每秒钟换入和换出内存的大小.")])]),s._v(" "),a("p",[s._v("这些内存的性能指标都需要熟记并且会用, 下面把它们汇总成了一个思维导图.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/23c2bc815734d77bce01be0f1545d64b-20230731161933-yzv2cgb.png",alt:""}})]),s._v(" "),a("h5",{attrs:{id:"_2-内存性能工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-内存性能工具"}},[s._v("#")]),s._v(" 2.内存性能工具")]),s._v(" "),a("p",[s._v("了解了内存的性能指标, 还得知道怎么才能获得这些指标, 也就是会用性能工具. 这里也用同样的方法, 回顾一下前面案例中已经用到的各种内存性能工具.")]),s._v(" "),a("p",[s._v("首先, 所有的案例中都用到了 "),a("mark",[a("strong",[s._v("free")])]),s._v(". 这是个最常用的内存工具, "),a("mark",[a("strong",[s._v("可以查看系统的整体内存和 Swap 使用情况")])]),s._v(". 相对应的, 可以"),a("mark",[a("strong",[s._v("用 top 或 ps, 查看进程的内存使用情况")])]),s._v(".")]),s._v(" "),a("p",[s._v("然后, 在缓存和缓冲区的原理篇中, 通过 "),a("mark",[a("strong",[s._v("proc 文件系统")])]),s._v(", 找到了内存指标的来源; 并通过 vmstat, 动态观察了内存的变化情况. 与 free 相比, "),a("strong",[s._v("vmstat 除了可以动态查看内存变化, 还可以区分缓存和缓冲区, Swap 换入和换出的内存大小")]),s._v(".")]),s._v(" "),a("p",[s._v("接着, 在缓存和缓冲区的案例篇中, 为了弄清楚缓存的命中情况, 又"),a("strong",[s._v("用了 cachestat, 查看整个系统缓存的读写命中情况, 并用 cachetop 来观察每个进程缓存的读写命中情况")]),s._v(".")]),s._v(" "),a("p",[s._v("再接着, 在内存泄漏的案例中, "),a("strong",[s._v("用 vmstat 发现了内存使用在不断增长, 又用 memleak, 确认发生了内存泄漏. 通过 memleak 给出的内存分配栈, 找到了内存泄漏的可疑位置")]),s._v(".")]),s._v(" "),a("p",[s._v("最后, 在 Swap 的案例中, 用 sar 发现了缓冲区和 Swap 升高的问题. 通过 cachetop, 找到了缓冲区升高的根源; 通过对比剩余内存跟 "),a("code",[s._v("/proc/zoneinfo")]),s._v("​ 的内存阈, 发现 Swap 升高是内存回收导致的. 案例最后, 还通过 proc 文件系统, 找出了 Swap 所影响的进程.")]),s._v(" "),a("p",[s._v("性能工具怎么那么多呀? 其实只要理解内存的工作原理, 结合性能指标来记忆, 拿下工具的使用方法并不难.")]),s._v(" "),a("h5",{attrs:{id:"_3-性能指标和工具的联系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-性能指标和工具的联系"}},[s._v("#")]),s._v(" 3.性能指标和工具的联系")]),s._v(" "),a("p",[s._v("同 CPU 性能分析一样, 我的经验是两个不同维度出发, 整理和记忆.")]),s._v(" "),a("ul",[a("li",[s._v("从内存指标出发, 更容易把工具和内存的工作原理关联起来.")]),s._v(" "),a("li",[s._v("从性能工具出发, 可以更快地利用工具, 找出想观察的性能指标. 特别是在工具有限的情况下, 更得充分利用手头的每一个工具, 挖掘出更多的问题.")])]),s._v(" "),a("p",[s._v("同样的, 根据内存性能指标和工具的对应关系, 我做了两个表格, 方便你梳理关系和理解记忆.")]),s._v(" "),a("p",[s._v("第一个表格, "),a("mark",[a("strong",[s._v("从内存指标出发, 列举了哪些性能工具可以提供这些指标")])]),s._v(". 这样, 在实际排查性能问题时, 就可以清楚知道, 究竟要用什么工具来辅助分析, 提供你想要的指标.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/f08abb0b4e71dcbb8e9fd3c3e2112acd-20230731161933-zfehgeg.png",alt:""}})]),s._v(" "),a("p",[s._v("第二个表格, "),a("mark",[a("strong",[s._v("从性能工具出发, 整理了这些常见工具能提供的内存指标")])]),s._v(". 掌握了这个表格, 可以最大化利用已有的工具, 尽可能多地找到你要的指标.")]),s._v(" "),a("p",[s._v("这些工具的具体使用方法并不用背, 只要知道有哪些可用的工具, 以及这些工具提供的基本指标. 真正用到时,  man 一下查它们的使用手册就可以了.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/8a0d5ef1a561d58783d1e7ea55dcc531-20230731161933-ey2bj5z.png",alt:""}})]),s._v(" "),a("h5",{attrs:{id:"_4-如何迅速分析内存的性能瓶颈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-如何迅速分析内存的性能瓶颈"}},[s._v("#")]),s._v(" 4.如何迅速分析内存的性能瓶颈")]),s._v(" "),a("p",[s._v("我相信到这一步, 你对内存的性能指标已经非常熟悉, 也清楚每种性能指标分别能用什么工具来获取. 那是不是说, 每次碰到内存性能问题, 都要把上面这些工具全跑一遍, 然后再把所有内存性能指标全分析一遍呢?")]),s._v(" "),a("p",[s._v("自然不是. 前面的 CPU 性能篇就说过, 简单查找法, 虽然是有用的, 也很可能找到某些系统潜在瓶颈. 但是这种方法的低效率和大工作量, 让我们首先拒绝了这种方法.")]),s._v(" "),a("p",[s._v("还是那句话, 在实际生产环境中, 大家希望的是, 尽可能"),a("strong",[s._v("快")]),s._v("地定位系统瓶颈, 然后尽可能"),a("strong",[s._v("快")]),s._v("地优化性能, 也就是要又快又准地解决性能问题.")]),s._v(" "),a("p",[s._v("那有没有什么方法, 可以又快又准地分析出系统的内存问题呢?")]),s._v(" "),a("p",[s._v("方法当然有. 还是那个关键词, 找关联. 其实, 虽然内存的性能指标很多, 但都是为了描述内存的原理, 指标间自然不会完全孤立, 一般都会有关联. 当然, 反过来说, 这些关联也正是源于系统的内存原理, 这也是我总强调基础原理的重要性, 并在文章中穿插讲解.")]),s._v(" "),a("p",[s._v("举个最简单的例子, 当看到系统的剩余内存很低时, 是不是就说明, 进程一定不能申请分配新内存了呢? 当然不是, 因为进程可以使用的内存, 除了剩余内存, 还包括了可回收的缓存和缓冲区.")]),s._v(" "),a("p",[s._v("所以, "),a("strong",[s._v("为了迅速定位内存问题, 我通常会先运行几个覆盖面比较大的性能工具, 比如 free, top, vmstat, pidstat 等")]),s._v(".")]),s._v(" "),a("p",[s._v("具体的分析思路主要有这几步.")]),s._v(" "),a("ol",[a("li",[a("strong",[s._v("先用 free 和 top, 查看系统整体的内存使用情况.")])]),s._v(" "),a("li",[a("strong",[s._v("再用 vmstat 和 pidstat, 查看一段时间的趋势, 从而判断出内存问题的类型")]),s._v(".")]),s._v(" "),a("li",[a("strong",[s._v("最后进行详细分析, 比如内存分配分析, 缓存/缓冲区分析, 具体进程的内存使用分析等")]),s._v(".")])]),s._v(" "),a("p",[s._v("同时也把这个分析过程画成了一张流程图.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/b3279de7af55dd1b62320e43c8ea7705-20230731161933-c2r79l7.png",alt:""}})]),s._v(" "),a("p",[s._v("图中列出了最常用的几个内存工具, 和相关的分析流程. 其中, 箭头表示分析的方向, 举几个例子可能会更容易理解.")]),s._v(" "),a("ul",[a("li",[s._v("第一个例子, 当通过 free, 发现大部分内存都被缓存占用后, 可以使用 vmstat 或者 sar 观察一下缓存的变化趋势, 确认缓存的使用是否还在继续增大. 如果继续增大, 则说明导致缓存升高的进程还在运行, 那就能用缓存/缓冲区分析工具(比如 cachetop, slabtop 等), 分析这些缓存到底被哪里占用.")]),s._v(" "),a("li",[s._v("第二个例子, 当 free 一下, 发现系统可用内存不足时, 首先要确认内存是否被缓存/缓冲区占用. 排除缓存/缓冲区后, 可以继续用 pidstat 或者 top, 定位占用内存最多的进程. 找出进程后, 再通过进程内存空间工具(比如 pmap), 分析进程地址空间中内存的使用情况就可以了.")]),s._v(" "),a("li",[s._v("第三个例子, 当通过 vmstat 或者 sar 发现内存在不断增长后, 可以分析中是否存在内存泄漏的问题. 比如可以使用内存分配分析工具 memleak, 检查是否存在内存泄漏. 如果存在内存泄漏问题, memleak 会为你输出内存泄漏的进程以及调用堆栈.")])]),s._v(" "),a("p",[s._v("注意, 这个图里没有列出所有性能工具, 只给出了最核心的几个. 这么做, 一方面, 确实不想让大量的工具列表吓到你. 另一方面, 希望你能把重心先放在核心工具上, 通过案例和真实环境的实践, 掌握使用方法和分析思路.")]),s._v(" "),a("h5",{attrs:{id:"_5-小结-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-小结-5"}},[s._v("#")]),s._v(" 5.小结")]),s._v(" "),a("p",[s._v("本节回顾了常见的内存性能指标, 梳理了常见的内存性能分析工具, 最后还总结了快速分析内存问题的思路.")]),s._v(" "),a("p",[s._v("虽然内存的性能指标和性能工具都挺多, 但理解了内存管理的基本原理后, 会发现它们其实都有一定的关联. 梳理出它们的关系, 掌握内存分析的套路并不难.")]),s._v(" "),a("p",[s._v("找到内存问题的来源后, 下一步就是相应的优化工作了. 在我看来, "),a("strong",[s._v("内存调优最重要的就是, 保证应用程序的热点数据放到内存中, 并尽量减少换页和交换")]),s._v(".")]),s._v(" "),a("p",[a("mark",[a("strong",[s._v("常见的优化思路有这么几种.")])])]),s._v(" "),a("ol",[a("li",[a("strong",[s._v("最好禁止 Swap")]),s._v(". 如果必须开启 Swap, 降低 swappiness 的值, 减少内存回收时 Swap 的使用倾向.")]),s._v(" "),a("li",[a("strong",[s._v("减少内存的动态分配")]),s._v(". 比如, 可以使用内存池, 大页(HugePage)等.")]),s._v(" "),a("li",[a("strong",[s._v("尽量使用缓存和缓冲区来访问数据")]),s._v(". 比如, 可以使用堆栈明确声明内存空间, 来存储需要缓存的数据; 或者用 Redis 这类的外部缓存组件, 优化数据的访问.")]),s._v(" "),a("li",[a("strong",[s._v("使用 cgroups 等方式限制进程的内存使用情况")]),s._v(". 这样, 可以确保系统内存不会被异常进程耗尽.")]),s._v(" "),a("li",[s._v("通过 "),a("code",[s._v("/proc/pid/oom_adj")]),s._v("​, 调整核心应用的 oom_score. 这样, 可以保证即使内存紧张, 核心应用也不会被 OOM 杀死.")])]),s._v(" "),a("h3",{attrs:{id:"io性能篇"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#io性能篇"}},[s._v("#")]),s._v(" IO性能篇")]),s._v(" "),a("h4",{attrs:{id:"_23-基础篇-linux文件系统是怎么工作的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_23-基础篇-linux文件系统是怎么工作的"}},[s._v("#")]),s._v(" 23-基础篇:Linux文件系统是怎么工作的?")]),s._v(" "),a("p",[s._v("通过前面 CPU 和内存模块的学习, 相信你已经掌握了 CPU 和内存的性能分析以及优化思路. 从这一节开始, 将进入下一个重要模块--"),a("strong",[s._v("文件系统和磁盘的 I/O 性能")]),s._v(".")]),s._v(" "),a("p",[s._v("同 CPU, 内存一样, 磁盘和文件系统的管理, 也是操作系统最核心的功能.")]),s._v(" "),a("ul",[a("li",[s._v("磁盘为系统提供了最基本的"),a("strong",[s._v("持久化存储")]),s._v(".")]),s._v(" "),a("li",[s._v("文件系统则在磁盘的基础上, 提供了一个用来"),a("strong",[s._v("管理文件的树状结构")]),s._v(".")])]),s._v(" "),a("p",[s._v("那么, 磁盘和文件系统是怎么工作的呢? 又有哪些指标可以衡量它们的性能呢? 今天就先来看看, Linux 文件系统的工作原理. 磁盘的工作原理, 下一节再来学习.")]),s._v(" "),a("h5",{attrs:{id:"_1-索引节点和目录项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-索引节点和目录项"}},[s._v("#")]),s._v(" 1.索引节点和目录项")]),s._v(" "),a("p",[a("mark",[a("strong",[s._v("文件系统, 本身是对存储设备上的文件, 进行组织管理的机制. 组织方式不同, 就会形成不同的文件系统")])]),s._v(".")]),s._v(" "),a("p",[s._v("要记住最重要的一点, "),a("mark",[a("strong",[s._v("在 Linux 中一切皆文件. 不仅普通的文件和目录, 就连块设备, 套接字, 管道等, 也都要通过统一的文件系统来管理")])]),s._v(".")]),s._v(" "),a("p",[s._v("为了方便管理, "),a("strong",[s._v("Linux 文件系统为每个文件都分配两个数据结构, 索引节点(index node)和目录项(directory entry). 它们主要用来记录文件的元信息和目录结构")]),s._v(".")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("索引节点, 简称为 inode, 用来记录文件的元数据, 比如 inode 编号, 文件大小, 访问权限, 修改日期, 数据的位置等. 索引节点和文件一一对应, 它跟文件内容一样, 都会被持久化存储到磁盘中. 所以记住, 索引节点同样占用磁盘空间.")])]),s._v(" "),a("li",[a("strong",[s._v("目录项, 简称为 dentry, 用来记录文件的名字, 索引节点指针以及与其他目录项的关联关系. 多个关联的目录项, 就构成了文件系统的目录结构. 不过, 不同于索引节点, 目录项是由内核维护的一个内存数据结构, 所以通常也被叫做目录项缓存.")])])]),s._v(" "),a("p",[s._v("换句话说, "),a("strong",[s._v("索引节点是每个文件的唯一标志, 而目录项维护的正是文件系统的树状结构")]),s._v(". 目录项和索引节点的关系是多对一, 你可以简单理解为, 一个文件可以有多个别名.")]),s._v(" "),a("p",[s._v("举个例子, 通过硬链接为文件创建的别名, 就会对应不同的目录项, 不过这些目录项本质上还是链接同一个文件, 所以, 它们的"),a("strong",[s._v("索引节点相同")]),s._v(".")]),s._v(" "),a("p",[s._v("索引节点和目录项记录了文件的元数据, 以及文件间的目录关系, 那么具体来说, 文件数据到底是怎么存储的呢? 是不是直接写到磁盘中就好了呢?")]),s._v(" "),a("p",[s._v("实际上, 磁盘读写的最小单位是"),a("strong",[s._v("扇区")]),s._v(", 然而扇区只有 512B 大小, 如果每次都读写这么小的单位, 效率一定很低. 所以, 文件系统又把连续的扇区组成了逻辑块, 然后每次都以逻辑块为最小单元, 来管理数据. 常见的逻辑块大小为 4KB, 也就是由连续的 8 个扇区组成.")]),s._v(" "),a("p",[s._v("为了帮助理解目录项, 索引节点以及文件数据的关系, 下面画了一张示意图. 可以对照着这张图, 来回忆刚刚讲过的内容, 把知识和细节串联起来.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/2e086d2d47928559784acacdc4b448f3-20230731161933-ipwjko8.png",alt:""}})]),s._v(" "),a("p",[s._v("不过, 这里有两点需要你注意.")]),s._v(" "),a("p",[s._v("第一, "),a("strong",[s._v("目录项本身就是一个内存缓存, 而索引节点则是存储在磁盘中的数据")]),s._v(". 在前面的 Buffer 和 Cache 原理中, 曾经提到过, 为了协调慢速磁盘与快速 CPU 的性能差异, 文件内容会缓存到页缓存 Cache 中. 那么, 你应该想到, "),a("strong",[s._v("这些索引节点自然也会缓存到内存中, 加速文件的访问")]),s._v(".")]),s._v(" "),a("p",[s._v("第二, "),a("strong",[s._v("磁盘在执行文件系统格式化时, 会被分成三个存储区域, 超级块, 索引节点区和数据块区")]),s._v(". 其中,")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("超级块, 存储整个文件系统的状态.")])]),s._v(" "),a("li",[a("strong",[s._v("索引节点区, 用来存储索引节点.")])]),s._v(" "),a("li",[a("strong",[s._v("数据块区, 则用来存储文件数据.")])])]),s._v(" "),a("h5",{attrs:{id:"_2-虚拟文件系统"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-虚拟文件系统"}},[s._v("#")]),s._v(" 2.虚拟文件系统")]),s._v(" "),a("p",[a("mark",[a("strong",[s._v("目录项, 索引节点, 逻辑块以及超级块, 构成了 Linux 文件系统的四大基本要素")])]),s._v(". 不过, 为了支持各种不同的文件系统, Linux 内核在用户进程和文件系统的中间, 又引入了一个抽象层, 也就是"),a("mark",[a("strong",[s._v("虚拟文件系统 VFS")])]),s._v("(Virtual File System).")]),s._v(" "),a("p",[s._v("VFS 定义了一组"),a("strong",[s._v("所有文件系统都支持的数据结构和标准接口")]),s._v(". 这样, 用户进程和内核中的其他子系统, 只需要跟 VFS 提供的统一接口进行交互就可以了, 而不需要再关心底层各种文件系统的实现细节.")]),s._v(" "),a("p",[s._v("这里画了一张 Linux 文件系统的架构图, 可以更好地理解系统调用, VFS, 缓存, 文件系统以及块存储之间的关系.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/9a3ceeff196551676acfa0a87b9ffd20-20230731161933-5n15ys6.png",alt:""}})]),s._v(" "),a("p",[s._v("通过这张图可以看到, 在 VFS 的下方, "),a("strong",[s._v("Linux 支持各种各样的文件系统, 如 Ext4, XFS, NFS 等等")]),s._v(". 按照存储位置的不同, 这些文件系统可以分为三类.")]),s._v(" "),a("ul",[a("li",[s._v("第一类是"),a("strong",[s._v("基于磁盘的文件系统")]),s._v(", 也就是把数据直接存储在计算机本地挂载的磁盘中. 常见的 Ext4, XFS, OverlayFS 等, 都是这类文件系统.")]),s._v(" "),a("li",[s._v("第二类是"),a("strong",[s._v("基于内存的文件系统")]),s._v(", 也就是常说的虚拟文件系统. 这类文件系统, 不需要任何磁盘分配存储空间, 但会占用内存. 经常用到的  "),a("mark",[a("strong",[s._v("/proc 文件系统, 其实就是一种最常见的虚拟文件系统")])]),s._v(". 此外,  "),a("strong",[s._v("/sys 文件系统也属于这一类, 主要向用户空间导出层次化的内核对象")]),s._v(".")]),s._v(" "),a("li",[s._v("第三类是"),a("strong",[s._v("网络文件系统")]),s._v(", 也就是用来访问其他计算机数据的文件系统, 比如 "),a("strong",[s._v("NFS")]),s._v(", SMB, iSCSI 等.")])]),s._v(" "),a("p",[a("mark",[a("strong",[s._v("这些文件系统, 要先挂载到 VFS 目录树中的某个子目录(称为挂载点), 然后才能访问其中的文件")])]),s._v(". 拿第一类, 也就是基于磁盘的文件系统为例, 在安装系统时, "),a("strong",[s._v("要先挂载一个根目录(/), 在根目录下再把其他文件系统(比如其他的磁盘分区, /proc 文件系统, /sys 文件系统, NFS 等)挂载进来")]),s._v(".")]),s._v(" "),a("h5",{attrs:{id:"_3-文件系统i-o"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-文件系统i-o"}},[s._v("#")]),s._v(" 3.文件系统I/O")]),s._v(" "),a("p",[s._v("把文件系统挂载到挂载点后, 就能"),a("strong",[s._v("通过挂载点, 再去访问它管理的文件")]),s._v("了. "),a("strong",[s._v("VFS 提供了一组标准的文件访问接口. 这些接口以系统调用的方式, 提供给应用程序使用")]),s._v(".")]),s._v(" "),a("p",[s._v("就拿 cat 命令来说, 它首先调用 open(), 打开一个文件; 然后调用 read(), 读取文件的内容; 最后再调用 write(), 把文件内容输出到控制台的标准输出中:")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("open")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("pathname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" flags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("mode_t")]),s._v(" mode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ssize_t")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("read")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" fd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("size_t")]),s._v(" count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ssize_t")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" fd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("size_t")]),s._v(" count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("文件读写方式的各种差异, 导致 I/O 的分类多种多样. 最常见的有, 缓冲与非缓冲 I/O, 直接与非直接 I/O, 阻塞与非阻塞 I/O, 同步与异步 I/O 等.  接下来, 就详细看这四种分类.")]),s._v(" "),a("p",[s._v("第一种, 根据"),a("mark",[a("strong",[s._v("是否利用标准库缓存")])]),s._v(", 可以把文件 I/O 分为"),a("strong",[s._v("缓冲 I/O 与非缓冲 I/O")]),s._v(".")]),s._v(" "),a("ul",[a("li",[s._v("缓冲 I/O, 是指"),a("strong",[s._v("利用标准库缓存来加速文件的访问, 而标准库内部再通过系统调度访问文件")]),s._v(".")]),s._v(" "),a("li",[s._v("非缓冲 I/O, 是指"),a("strong",[s._v("直接通过系统调用来访问文件, 不再经过标准库缓存")]),s._v(".")])]),s._v(" "),a("p",[s._v('注意, 这里所说的"缓冲", 是'),a("strong",[s._v("指标准库内部实现的缓存")]),s._v(". 比方说, 你可能见到过, 很多程序遇到换行时才真正输出, 而换行前的内容, 其实就是被标准库暂时缓存了起来.")]),s._v(" "),a("p",[s._v("无论缓冲 I/O 还是非缓冲 I/O, 它们最终还是要"),a("strong",[s._v("经过系统调用来访问文件")]),s._v(". 而根据上一节内容可以知道, 系统调用后, 还会通过页缓存, 来减少磁盘的 I/O 操作.")]),s._v(" "),a("p",[s._v("第二, 根据"),a("mark",[a("strong",[s._v("是否利用操作系统的页缓存")])]),s._v(", 可以把文件 I/O 分为"),a("strong",[s._v("直接 I/O 与非直接 I/O")]),s._v(".")]),s._v(" "),a("ul",[a("li",[s._v("直接 I/O, 是指"),a("strong",[s._v("跳过操作系统的页缓存, 直接跟文件系统交互来访问文件")]),s._v(".")]),s._v(" "),a("li",[s._v("非直接 I/O 正好相反, 文件读写时, "),a("strong",[s._v("先要经过系统的页缓存, 然后再由内核或额外的系统调用, 真正写入磁盘")]),s._v(".")])]),s._v(" "),a("p",[s._v("想要实现直接 I/O, 需要在系统调用中, 指定 O_DIRECT 标志. 如果没有设置过, 默认的是非直接 I/O.")]),s._v(" "),a("p",[s._v("不过要注意, 直接 I/O, 非直接 I/O, 本质上还是"),a("strong",[s._v("和文件系统交互")]),s._v(". 如果是在数据库等场景中, 还会看到, 跳过文件系统读写磁盘的情况, 也就是通常所说的"),a("strong",[s._v("裸 I/O")]),s._v(".")]),s._v(" "),a("p",[s._v("第三, 根据"),a("mark",[a("strong",[s._v("应用程序是否阻塞自身运行")])]),s._v(", 可以把文件 I/O 分为"),a("strong",[s._v("阻塞 I/O 和非阻塞 I/O")]),s._v(":")]),s._v(" "),a("ul",[a("li",[s._v("所谓阻塞 I/O, 是指应用程序执行 I/O 操作后, 如果"),a("strong",[s._v("没有获得响应, 就会阻塞当前线程")]),s._v(", 自然就不能执行其他任务.")]),s._v(" "),a("li",[s._v("所谓非阻塞 I/O, 是指应用程序执行 I/O 操作后, "),a("strong",[s._v("不会阻塞当前的线程, 可以继续执行其他的任务")]),s._v(", 随后再通过轮询或者事件通知的形式, 获取调用的结果.")])]),s._v(" "),a("p",[s._v("比方说, 访问管道或者网络套接字时, 设置 O_NONBLOCK 标志, 就表示用非阻塞方式访问; 而如果不做任何设置, 默认的就是阻塞访问.")]),s._v(" "),a("p",[s._v("第四, 根据"),a("mark",[a("strong",[s._v("是否等待响应结果")])]),s._v(", 可以把文件 I/O 分为"),a("strong",[s._v("同步和异步 I/O")]),s._v(":")]),s._v(" "),a("ul",[a("li",[s._v("所谓同步 I/O, 是指"),a("strong",[s._v("应用程序执行 I/O 操作后, 要一直等到整个 I/O 完成后, 才能获得 I/O 响应")]),s._v(".")]),s._v(" "),a("li",[s._v("所谓异步 I/O, 是指"),a("strong",[s._v("应用程序执行 I/O 操作后, 不用等待完成和完成后的响应, 而是继续执行就可以")]),s._v(". 等到这次 I/O 完成后, 响应会用事件通知的方式, 告诉应用程序.")])]),s._v(" "),a("p",[s._v("举个例子, 在操作文件时, 如果设置了 O_SYNC 或者 O_DSYNC 标志, 就代表同步 I/O. 如果设置了 O_DSYNC, 就要等文件数据写入磁盘后, 才能返回; 而 O_SYNC, 则是在 O_DSYNC 基础上, 要求文件元数据也要写入磁盘后, 才能返回.")]),s._v(" "),a("p",[s._v("再比如, "),a("strong",[s._v("在访问管道或者网络套接字时, 设置了 O_ASYNC 选项后, 相应的 I/O 就是异步 I/O")]),s._v(". 这样, 内核会再通过 SIGIO 或者 SIGPOLL, 来通知进程文件是否可读写.")]),s._v(" "),a("p",[s._v("你可能发现了, 这里的好多概念也经常出现在网络编程中. 比如非阻塞 I/O, 通常会跟 select/poll 配合, 用在网络套接字的 I/O 中.")]),s._v(" "),a("p",[s._v('这样就应该可以理解, "'),a("mark",[a("strong",[s._v("Linux 一切皆文件")])]),s._v('" 的深刻含义. '),a("mark",[a("strong",[s._v("无论是普通文件和块设备, 还是网络套接字和管道等, 它们都通过统一的 VFS 接口来访问")])]),s._v(".")]),s._v(" "),a("h5",{attrs:{id:"_4-性能观测"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-性能观测"}},[s._v("#")]),s._v(" 4.性能观测")]),s._v(" "),a("p",[s._v("学了这么多文件系统的原理, 你估计也是迫不及待想上手, 观察一下文件系统的性能情况了. 接下来, 打开一个终端, SSH 登录到服务器上, 来看看如何观测文件系统的性能.")]),s._v(" "),a("h6",{attrs:{id:"_1-容量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-容量"}},[s._v("#")]),s._v(" (1)容量")]),s._v(" "),a("p",[s._v("对文件系统来说, 最常见的一个问题就是空间不足. "),a("strong",[s._v("用 df 命令, 能查看文件系统的磁盘空间使用情况")]),s._v(". 比如:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("df")]),s._v(" /dev/sda1 \nFilesystem     1K-blocks    Used Available Use% Mounted on \n/dev/sda1       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30308240")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3167020")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("27124836")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),s._v("% / \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("可以看到, 根文件系统只使用了 11% 的空间. 这里还要注意, 总空间用 1K-blocks 的数量来表示, 可以给 df 加上 -h 选项, 以获得更好的可读性:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("df")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-h")]),s._v(" /dev/sda1 \nFilesystem      Size  Used Avail Use% Mounted on \n/dev/sda1        29G  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(".1G   26G  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),s._v("% / \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("不过有时候, 明明你碰到了空间不足的问题, 可是用 df 查看磁盘空间后, 却发现剩余空间还有很多. 这是怎么回事呢?")]),s._v(" "),a("p",[s._v("不知道你还记不记得, 刚才强调的一个细节. "),a("strong",[s._v("除了文件数据, 索引节点也占用磁盘空间")]),s._v(". 可以给 df 命令加上 -i 参数, 查看索引节点的使用情况, 如下所示:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("df")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-i")]),s._v(" /dev/sda1 \nFilesystem      Inodes  IUsed   IFree IUse% Mounted on \n/dev/sda1      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3870720")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("157460")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3713260")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("% / \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("索引节点的容量, (也就是 Inode 个数)是在格式化磁盘时设定好的, 一般由格式化工具自动生成. "),a("strong",[s._v("当发现索引节点空间不足, 但磁盘空间充足时, 很可能就是过多小文件导致的")]),s._v(".")]),s._v(" "),a("p",[s._v("所以, 一般来说, 删除这些小文件, 或者把它们移动到索引节点充足的其他磁盘中, 就可以解决这个问题.")]),s._v(" "),a("h6",{attrs:{id:"_2-缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-缓存"}},[s._v("#")]),s._v(" (2)缓存")]),s._v(" "),a("p",[s._v("在前面 Cache 案例中, 已经介绍过, 可以"),a("strong",[s._v("用 free 或 vmstat, 来观察页缓存的大小")]),s._v(". 复习一下, free 输出的 Cache, 是页缓存和可回收 Slab 缓存的和, 可以从 "),a("code",[s._v("/proc/meminfo")]),s._v("​, 直接得到它们的大小:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" /proc/meminfo "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-E")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"SReclaimable|Cached"')]),s._v(" \nCached:           "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("748316")]),s._v(" kB \nSwapCached:            "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" kB \nSReclaimable:     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("179508")]),s._v(" kB \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("话说回来, 文件系统中的目录项和索引节点缓存, 又该如何观察呢?")]),s._v(" "),a("p",[s._v("实际上, 内核使用 Slab 机制, 管理目录项和索引节点的缓存. "),a("code",[s._v("/proc/meminfo")]),s._v("​ 只给出了 Slab 的整体大小, 具体到每一种 Slab 缓存, 还要查看 "),a("code",[s._v("/proc/slabinfo")]),s._v("​ 这个文件.")]),s._v(" "),a("p",[s._v("比如, 运行下面的命令, 就可以得到"),a("strong",[s._v("所有目录项和各种文件系统索引节点的缓存情况")]),s._v(":")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" /proc/slabinfo "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-E")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'^#|dentry|inode'")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# name            <active_objs> <num_objs> <objsize> <objperslab> <pagesperslab> : tunables <limit> <batchcount> <sharedfactor> : slabdata <active_slabs> <num_slabs> <sharedavail> ")]),s._v("\nxfs_inode              "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("960")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("17")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" tunables    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" slabdata      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(". \next4_inode_cache   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("32104")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("34590")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1088")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" tunables    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" slabdata   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2306")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2306")]),s._v("      0hugetlbfs_inode_cache     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("624")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" tunables    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" slabdata      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" \nsock_inode_cache    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1190")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1242")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("704")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("23")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" tunables    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" slabdata     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("54")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("54")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" \nshmem_inode_cache   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1622")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2139")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("712")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("23")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" tunables    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" slabdata     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("93")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("93")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" \nproc_inode_cache    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3560")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4080")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("680")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" tunables    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" slabdata    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("340")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("340")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" \ninode_cache        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("25172")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("25818")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("608")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" tunables    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" slabdata   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1986")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1986")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" \ndentry             "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("76050")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("121296")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" tunables    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" slabdata   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5776")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5776")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("这个界面中, dentry 行表示目录项缓存, inode_cache 行, 表示 VFS 索引节点缓存, 其余的则是各种文件系统的索引节点缓存.")]),s._v(" "),a("p",[s._v("​"),a("code",[s._v("/proc/slabinfo")]),s._v("​ 的列比较多, 具体含义可以查询 man slabinfo. 在实际性能分析中, 更常使用 slabtop 来找到占用内存最多的缓存类型.")]),s._v(" "),a("p",[s._v("比如, 下面就是运行 slabtop 得到的结果:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 按下 c 按照缓存大小排序, 按下 a 按照活跃对象数排序 ")]),s._v("\n$ slabtop \nActive / Total Objects "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("% used"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("277970")]),s._v(" / "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("358914")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("77.4")]),s._v("%"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \nActive / Total Slabs "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("% used"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12414")]),s._v(" / "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12414")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100.0")]),s._v("%"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \nActive / Total Caches "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("% used"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("83")]),s._v(" / "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("135")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("61.5")]),s._v("%"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \nActive / Total Size "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("% used"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("57816")]),s._v(".88K / "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("73307")]),s._v(".70K "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("78.9")]),s._v("%"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \nMinimum / Average / Maximum Object "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(".01K / "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(".20K / "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v(".88K \n \n  OBJS ACTIVE  USE OBJ SIZE  SLABS OBJ/SLAB CACHE SIZE NAME \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("69804")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("23094")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("%    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(".19K   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3324")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21")]),s._v("     13296K dentry \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16380")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15854")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("%    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(".59K   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1260")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v("     10080K inode_cache \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("58260")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("55397")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("%    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(".13K   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1942")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),s._v("      7768K kernfs_node_cache \n   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("485")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("413")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("%    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(".69K     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("97")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("      3104K task_struct \n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1472")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1397")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("%    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(".00K     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("92")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v("      2944K kmalloc-2048 \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("从这个结果可以看到, 在我的系统中, 目录项和索引节点占用了最多的 Slab 缓存. 不过它们占用的内存其实并不大, 加起来也只有 23MB 左右.")]),s._v(" "),a("h5",{attrs:{id:"_5-小结-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-小结-6"}},[s._v("#")]),s._v(" 5.小结")]),s._v(" "),a("p",[a("strong",[s._v("文件系统, 是对存储设备上的文件, 进行组织管理的一种机制. 为了支持各类不同的文件系统, Linux 在各种文件系统实现上, 抽象了一层虚拟文件系统(VFS).")])]),s._v(" "),a("p",[a("strong",[s._v("VFS 定义了一组所有文件系统都支持的数据结构和标准接口. 这样, 用户进程和内核中的其他子系统, 就只需要跟 VFS 提供的统一接口进行交互.")])]),s._v(" "),a("p",[a("strong",[s._v("为了降低慢速磁盘对性能的影响, 文件系统又通过页缓存, 目录项缓存以及索引节点缓存, 缓和磁盘延迟对应用程序的影响.")])]),s._v(" "),a("h4",{attrs:{id:"_24-基础篇-linux磁盘i-o是怎么工作的-上"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_24-基础篇-linux磁盘i-o是怎么工作的-上"}},[s._v("#")]),s._v(" 24-基础篇:Linux磁盘I/O是怎么工作的(上)")]),s._v(" "),a("p",[s._v("上一节学习了 Linux 文件系统的工作原理. 简单回顾一下, 文件系统是对存储设备上的文件, 进行组织管理的一种机制. 而 Linux 在各种文件系统实现上, 又抽象了一层虚拟文件系统 VFS, 它定义了一组, 所有文件系统都支持的, 数据结构和标准接口.")]),s._v(" "),a("p",[s._v("这样, "),a("strong",[s._v("对应用程序来说, 只需要跟 VFS 提供的统一接口交互, 而不需要关注文件系统的具体实现; 对具体的文件系统来说, 只需要按照 VFS 的标准, 就可以无缝支持各种应用程序")]),s._v(".")]),s._v(" "),a("p",[s._v("VFS 内部又通过目录项, 索引节点, 逻辑块以及超级块等数据结构, 来管理文件.")]),s._v(" "),a("ul",[a("li",[s._v("目录项, 记录了文件的名字, 以及文件与其他目录项之间的目录关系.")]),s._v(" "),a("li",[s._v("索引节点, 记录了文件的元数据.")]),s._v(" "),a("li",[s._v("逻辑块, 是由连续磁盘扇区构成的最小读写单元, 用来存储文件数据.")]),s._v(" "),a("li",[s._v("超级块, 用来记录文件系统整体的状态, 如索引节点和逻辑块的使用情况等.")])]),s._v(" "),a("p",[s._v("其中, 目录项是一个内存缓存; 而超级块, 索引节点和逻辑块, 都是存储在磁盘中的持久化数据.")]),s._v(" "),a("p",[s._v("那么, 进一步想, "),a("strong",[s._v("磁盘又是怎么工作的呢? 又有哪些指标可以用来衡量它的性能呢")]),s._v("? 接下来就一起看看 Linux 磁盘 I/O 的工作原理.")]),s._v(" "),a("h5",{attrs:{id:"_1-磁盘"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-磁盘"}},[s._v("#")]),s._v(" 1.磁盘")]),s._v(" "),a("p",[s._v("磁盘是可以"),a("strong",[s._v("持久化存储")]),s._v("的设备, 根据存储介质的不同, 常见磁盘可以分为两类: 机械磁盘和固态磁盘.")]),s._v(" "),a("p",[s._v("第一类, 机械磁盘, 也称为硬盘驱动器(Hard Disk Driver), 通常缩写为 HDD. 机械磁盘主要由盘片和读写磁头组成, 数据就存储在盘片的环状磁道中. 在读写数据前, 需要移动读写磁头, 定位到数据所在的磁道, 然后才能访问数据. 显然, 如果 I/O 请求刚好连续, 那就不需要磁道寻址, 自然可以获得最佳性能. 这其实就是"),a("strong",[s._v("连续 I/O")]),s._v(" 的工作原理. 与之相对应的, 当然就是"),a("strong",[s._v("随机 I/O")]),s._v(", 它需要不停地移动磁头, 来定位数据位置, 所以读写速度就会比较慢.")]),s._v(" "),a("p",[s._v("第二类, 固态磁盘(Solid State Disk), 通常缩写为 SSD, 由固态电子元器件组成. 固态磁盘不需要磁道寻址, 所以, 不管是连续 I/O, 还是随机 I/O 的性能, 都比机械磁盘要好得多.")]),s._v(" "),a("p",[s._v("其实, "),a("strong",[s._v("无论机械磁盘, 还是固态磁盘, 相同磁盘的随机 I/O 都要比连续 I/O 慢很多")]),s._v(", 原因也很明显.")]),s._v(" "),a("ul",[a("li",[s._v("对机械磁盘来说, 刚刚提到过的, 由于随机 I/O 需要更多的磁头寻道和盘片旋转, 它的性能自然要比连续 I/O 慢.")]),s._v(" "),a("li",[s._v('而对固态磁盘来说, 虽然它的随机性能比机械硬盘好很多, 但同样存在 "'),a("strong",[s._v("先擦除再写入")]),s._v('" 的限制. 随机读写会导致大量的垃圾回收, 所以相对应的, 随机 I/O 的性能比起连续 I/O 来, 也还是差了很多.')]),s._v(" "),a("li",[s._v("此外, 连续 I/O 还可以通过"),a("strong",[s._v("预读")]),s._v("的方式, 来减少 I/O 请求的次数, 这也是其性能优异的一个原因. 很多性能优化的方案, 也都会从这个角度出发, 来优化 I/O 性能.")])]),s._v(" "),a("p",[s._v("此外, 机械磁盘和固态磁盘还分别有一个最小的读写单位.")]),s._v(" "),a("ul",[a("li",[s._v("机械磁盘的最小读写单位是"),a("strong",[s._v("扇区")]),s._v(", 一般大小为 512 字节.")]),s._v(" "),a("li",[s._v("而固态磁盘的最小读写单位是"),a("strong",[s._v("页")]),s._v(", 通常大小是 4KB, 8KB 等.")])]),s._v(" "),a("p",[s._v("在上一节也提到过, 如果每次都读写 512 字节这么小的单位的话, 效率很低. 所以, "),a("strong",[s._v("文件系统会把连续的扇区或页, 组成逻辑块, 然后以逻辑块作为最小单元来管理数据")]),s._v(". 常见的逻辑块的大小是 4KB, 也就是说, 连续 8 个扇区, 或者单独的一个页, 都可以组成一个逻辑块.")]),s._v(" "),a("p",[s._v("除了可以按照存储介质来分类, 另一个常见的分类方法, 是按照接口来分类, 比如可以把硬盘分为 IDE(Integrated Drive Electronics), SCSI(Small Computer System Interface) , SAS(Serial Attached SCSI) , SATA(Serial ATA) , FC(Fibre Channel) 等. 不同的接口, 往往分配不同的设备名称. 比如, IDE 设备会分配一个 hd 前缀的设备名, SCSI 和 SATA 设备会分配一个 "),a("strong",[s._v("sd 前缀")]),s._v("的设备名. 如果是多块同类型的磁盘, 就会按照 a, b, c 等的字母顺序来编号.")]),s._v(" "),a("p",[s._v("除了磁盘本身的分类外, 当把磁盘接入服务器后, 按照不同的使用方式, 又可以把它们划分为多种不同的"),a("strong",[s._v("架构")]),s._v(". 最简单的, 就是直接作为独立磁盘设备来使用. 这些磁盘, 往往还会根据需要, 划分为不同的"),a("strong",[s._v("逻辑分区")]),s._v(", 每个分区再用数字编号. 比如前面多次用到的 "),a("code",[s._v("/dev/sda")]),s._v("​, 还可以分成两个分区 "),a("code",[s._v("/dev/sda1")]),s._v("​ 和 "),a("code",[s._v("/dev/sda2")]),s._v("​.")]),s._v(" "),a("p",[s._v("另一个比较常用的架构, 是把多块磁盘组合成一个逻辑磁盘, 构成冗余独立"),a("strong",[s._v("磁盘阵列")]),s._v(", 也就是 "),a("strong",[s._v("RAID")]),s._v("(Redundant Array of Independent Disks), 从而可以提高数据访问的性能, 并且增强数据存储的可靠性.")]),s._v(" "),a("p",[s._v("根据容量, 性能和可靠性需求的不同, RAID 一般可以划分为多个级别, 如 RAID0, RAID1, RAID5, RAID10 等.")]),s._v(" "),a("ul",[a("li",[s._v("RAID0 有最优的读写性能, 但不提供数据冗余的功能.")]),s._v(" "),a("li",[s._v("而其他级别的 RAID, 在提供数据冗余的基础上, 对读写性能也有一定程度的优化.")])]),s._v(" "),a("p",[s._v("最后一种架构, 是把这些磁盘组合成一个网络存储集群, 再通过 NFS, SMB, iSCSI 等网络存储协议, 暴露给服务器使用.")]),s._v(" "),a("p",[s._v("其实在 Linux 中, "),a("strong",[s._v("磁盘实际上是作为一个块设备来管理的")]),s._v(", 也就是以块为单位读写数据, 并且支持随机读写. 每个块设备都会被赋予两个设备号, 分别是主, 次设备号. 主设备号用在驱动程序中, 用来区分设备类型; 而次设备号则是用来给多个同类设备编号.")]),s._v(" "),a("h5",{attrs:{id:"_2-通用块层"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-通用块层"}},[s._v("#")]),s._v(" 2.通用块层")]),s._v(" "),a("p",[s._v("跟上一节讲到的虚拟文件系统 VFS 类似, 为了减小不同块设备的差异带来的影响, "),a("mark",[a("strong",[s._v("Linux 通过一个统一的通用块层, 来管理各种不同的块设备. 通用块层, 其实是处在文件系统和磁盘驱动中间的一个块设备抽象层")])]),s._v(".")]),s._v(" "),a("p",[s._v("它主要有两个功能.")]),s._v(" "),a("ul",[a("li",[s._v("第一个功能跟虚拟文件系统的功能类似. 向上, "),a("strong",[s._v("为文件系统和应用程序, 提供访问块设备的标准接口")]),s._v("; 向下, "),a("strong",[s._v("把各种异构的磁盘设备抽象为统一的块设备, 并提供统一框架来管理这些设备的驱动程序")]),s._v(".")]),s._v(" "),a("li",[s._v("第二个功能, "),a("strong",[s._v("通用块层还会给文件系统和应用程序发来的 I/O 请求排队, 并通过重新排序, 请求合并等方式, 提高磁盘读写的效率")]),s._v(".")])]),s._v(" "),a("p",[s._v("其中, 对 I/O 请求排序的过程, 也就是大家熟悉的 I/O 调度. 事实上, Linux 内核支持四种 I/O 调度算法, 分别是 NONE, NOOP, CFQ 以及 DeadLine. 这里也分别介绍一下.")]),s._v(" "),a("ul",[a("li",[s._v("第一种 NONE, 更确切来说, 并不能算 I/O 调度算法. 因为它完全不使用任何 I/O 调度器, 对文件系统和应用程序的 I/O 其实不做任何处理, 常用在虚拟机中(此时磁盘 I/O 调度完全由物理机负责).")]),s._v(" "),a("li",[s._v("第二种 NOOP, 是最简单的一种 I/O 调度算法. 它实际上是一个先入先出的队列, 只做一些最基本的请求合并, 常用于 SSD 磁盘.")]),s._v(" "),a("li",[s._v("第三种 CFQ(Completely Fair Scheduler), 也被称为"),a("strong",[s._v("完全公平调度器")]),s._v(", 是现在很多发行版的默认 I/O 调度器, 它为每个进程维护了一个 I/O 调度队列, 并按照时间片来均匀分布每个进程的 I/O 请求. 类似于进程 CPU 调度, CFQ 还支持进程 I/O 的优先级调度, 所以它适用于运行大量进程的系统, 像是桌面环境, 多媒体应用等.")]),s._v(" "),a("li",[s._v("最后一种 DeadLine 调度算法, 分别为读, 写请求创建了不同的 I/O 队列, 可以提高机械磁盘的吞吐量, 并确保达到最终期限(deadline)的请求被优先处理. DeadLine 调度算法, 多用在 I/O 压力比较重的场景, 比如数据库等.")])]),s._v(" "),a("h5",{attrs:{id:"_3-i-o栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-i-o栈"}},[s._v("#")]),s._v(" 3.I/O栈")]),s._v(" "),a("p",[s._v("清楚了磁盘和通用块层的工作原理, 再结合上一节讲过的文件系统原理, 就可以"),a("strong",[s._v("整体来看 Linux 存储系统的 I/O 原理")]),s._v("了.")]),s._v(" "),a("p",[s._v("可以把 Linux 存储系统的 I/O 栈, 由上到下分为三个层次, 分别是"),a("mark",[a("strong",[s._v("文件系统层, 通用块层和设备层")])]),s._v(". 这三个 I/O 层的关系如下图所示, 这其实也是 Linux 存储系统的 I/O 栈全景图.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/ad396b7db3b2655a951eabeee034b8f5-20230731161933-b5lmzox.png",alt:""}})]),s._v(" "),a("p",[s._v("根据这张 I/O 栈的全景图, 可以更清楚地理解, 存储系统 I/O 的工作原理.")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("文件系统层, 包括虚拟文件系统和其他各种文件系统的具体实现. 它为上层的应用程序, 提供标准的文件访问接口; 对下会通过通用块层, 来存储和管理磁盘数据.")])]),s._v(" "),a("li",[a("strong",[s._v("通用块层, 包括块设备 I/O 队列和 I/O 调度器. 它会对文件系统的 I/O 请求进行排队, 再通过重新排序和请求合并, 然后才要发送给下一级的设备层.")])]),s._v(" "),a("li",[a("strong",[s._v("设备层, 包括存储设备和相应的驱动程序, 负责最终物理设备的 I/O 操作.")])])]),s._v(" "),a("p",[s._v("存储系统的 I/O, 通常是整个系统中最慢的一环. 所以, Linux 通过多种"),a("strong",[s._v("缓存机制")]),s._v("来优化 I/O 效率.")]),s._v(" "),a("p",[s._v("比方说, 为了优化文件访问的性能, 会使用页缓存, 索引节点缓存, 目录项缓存等多种缓存机制, 以减少对下层块设备的直接调用. 同样, 为了优化块设备的访问效率, 会使用缓冲区, 来缓存块设备的数据.")]),s._v(" "),a("h5",{attrs:{id:"_4-小结-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-小结-6"}},[s._v("#")]),s._v(" 4.小结")]),s._v(" "),a("p",[s._v("本节梳理了 Linux 磁盘 I/O 的工作原理, 并了解了由文件系统层, 通用块层和设备层构成的 Linux 存储系统 I/O 栈.")]),s._v(" "),a("p",[s._v("其中, "),a("strong",[s._v("通用块层是 Linux 磁盘 I/O 的核心. 向上, 它为文件系统和应用程序, 提供访问了块设备的标准接口; 向下, 把各种异构的磁盘设备, 抽象为统一的块设备, 并会对文件系统和应用程序发来的 I/O 请求进行重新排序, 请求合并等, 提高了磁盘访问的效率")]),s._v(".")]),s._v(" "),a("h4",{attrs:{id:"_25-基础篇-linux磁盘i-o是怎么工作的-下"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_25-基础篇-linux磁盘i-o是怎么工作的-下"}},[s._v("#")]),s._v(" 25-基础篇:Linux磁盘I/O是怎么工作的(下)")]),s._v(" "),a("p",[s._v("上一节学习了 Linux 磁盘 I/O 的工作原理, 并了解了由文件系统层, 通用块层和设备层构成的 Linux 存储系统 I/O 栈. 掌握了磁盘 I/O 的工作原理, 你估计迫不及待想知道, "),a("strong",[s._v("怎么才能衡量磁盘的 I/O 性能")]),s._v(".")]),s._v(" "),a("p",[s._v("接下来就来看看, "),a("strong",[s._v("磁盘的性能指标以及观测这些指标的方法")]),s._v(".")]),s._v(" "),a("h5",{attrs:{id:"_1-磁盘性能指标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-磁盘性能指标"}},[s._v("#")]),s._v(" 1.磁盘性能指标")]),s._v(" "),a("p",[s._v("说到磁盘性能的衡量标准, 必须要提到五个常见指标, 也就是经常用到的, "),a("mark",[a("strong",[s._v("使用率, 饱和度, IOPS, 吞吐量以及响应时间等. 这五个指标, 是衡量磁盘性能的基本指标")])]),s._v(".")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("使用率, 是指磁盘处理 I/O 的时间百分比")]),s._v(". 过高的使用率(比如超过 80%), 通常意味着磁盘 I/O 存在性能瓶颈.")]),s._v(" "),a("li",[a("strong",[s._v("饱和度, 是指磁盘处理 I/O 的繁忙程度")]),s._v(". 过高的饱和度, 意味着磁盘存在严重的性能瓶颈. 当饱和度为 100% 时, 磁盘无法接受新的 I/O 请求.")]),s._v(" "),a("li",[a("strong",[s._v("IOPS(Input/Output Per Second), 是指每秒的 I/O 请求数")]),s._v(".")]),s._v(" "),a("li",[a("strong",[s._v("吞吐量, 是指每秒的 I/O 请求大小")]),s._v(".")]),s._v(" "),a("li",[a("strong",[s._v("响应时间, 是指 I/O 请求从发出到收到响应的间隔时间")]),s._v(".")])]),s._v(" "),a("p",[s._v("这里要注意的是, 使用率只考虑有没有 I/O, 而不考虑 I/O 的大小. 换句话说, 当使用率是 100% 的时候, 磁盘依然有可能接受新的 I/O 请求.")]),s._v(" "),a("p",[s._v("这些指标, 很可能是你经常挂在嘴边的, 一讨论磁盘性能必定提起的对象. 不过还是要强调一点, 不要孤立地去比较某一指标, 而要结合读写比例, I/O 类型(随机还是连续)以及 I/O 的大小, 综合来分析.")]),s._v(" "),a("p",[s._v("举个例子, 在数据库, 大量小文件等这类随机读写比较多的场景中, IOPS 更能反映系统的整体性能; 而在多媒体等顺序读写较多的场景中, 吞吐量才更能反映系统的整体性能.")]),s._v(" "),a("p",[s._v("一般来说, 在为应用程序的服务器选型时, 要先对磁盘的 I/O 性能进行基准测试, 以便可以准确评估, 磁盘性能是否可以满足应用程序的需求.")]),s._v(" "),a("p",[s._v("这一方面, "),a("strong",[s._v("推荐用性能测试工具 fio 来测试磁盘的 IOPS, 吞吐量以及响应时间等核心指标")]),s._v(". 但还是那句话, 因地制宜, 灵活选取. 在基准测试时, 一定要注意根据应用程序 I/O 的特点, 来具体评估指标.")]),s._v(" "),a("p",[s._v("当然, 这就需要测试出不同 I/O 大小(一般是 512B 至 1MB 中间的若干值)分别在随机读, 顺序读, 随机写, 顺序写等各种场景下的性能情况. 用性能工具得到的这些指标, 可以作为后续分析应用程序性能的依据. 一旦发生性能问题, 就可以把它们作为磁盘性能的极限值, 进而评估磁盘 I/O 的使用情况.")]),s._v(" "),a("p",[s._v("了解磁盘的性能指标, 只是 I/O 性能测试的第一步. 接下来, 又该用什么方法来观测它们呢? 这里介绍几个"),a("strong",[s._v("常用的 I/O 性能观测方法")]),s._v(".")]),s._v(" "),a("h5",{attrs:{id:"_2-磁盘i-o观测"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-磁盘i-o观测"}},[s._v("#")]),s._v(" 2.磁盘I/O观测")]),s._v(" "),a("p",[s._v("第一个要观测的, 是"),a("strong",[s._v("每块磁盘的使用情况")]),s._v(".")]),s._v(" "),a("p",[a("mark",[a("strong",[s._v("iostat 是最常用的磁盘 I/O 性能观测工具, 它提供了每个磁盘的使用率, IOPS, 吞吐量等各种常见的性能指标")])]),s._v(", 当然, 这些指标实际上来自 "),a("code",[s._v("/proc/diskstats")]),s._v("​.")]),s._v(" "),a("p",[s._v("iostat 的输出界面如下.")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -d -x 表示显示所有磁盘 I/O 的指标")]),s._v("\n$ iostat "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-x")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" \nDevice            r/s     w/s     rkB/s     wkB/s   rrqm/s   wrqm/s  %rrqm  %wrqm r_await w_await aqu-sz rareq-sz wareq-sz  svctm  %util \nloop0            "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v(" \nloop1            "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v(" \nsda              "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v(" \nsdb              "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v(" \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("从这里可以看到, iostat 提供了非常丰富的性能指标. 第一列的 Device 表示磁盘设备的名字, 其他各列指标, 虽然数量较多, 但是每个指标的含义都很重要. 为了方便理解, 下面把它们总结成了一个表格.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/74bec0113044f815bf800566c2fd0d87-20230731161933-k0o6q1t.png",alt:""}})]),s._v(" "),a("p",[s._v("这些指标中要注意:")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("%util, 就是前面提到的磁盘 I/O 使用率;")])]),s._v(" "),a("li",[a("strong",[s._v("r/s+ w/s, 就是 IOPS;")])]),s._v(" "),a("li",[a("strong",[s._v("rkB/s+wkB/s, 就是吞吐量;")])]),s._v(" "),a("li",[a("strong",[s._v("r_await+w_await, 就是响应时间.")])])]),s._v(" "),a("p",[s._v("在观测指标时, 也别忘了结合请求的大小(rareq-sz 和 wareq-sz)一起分析.")]),s._v(" "),a("p",[s._v("你可能注意到, 从 iostat 并不能直接得到磁盘饱和度. 事实上, 饱和度通常也没有其他简单的观测方法, 不过, 可以把观测到的, 平均请求队列长度或者读写请求完成的等待时间, 跟基准测试的结果(比如通过 fio)进行对比, 综合评估磁盘的饱和情况.")]),s._v(" "),a("h5",{attrs:{id:"_3-进程i-o观测"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-进程i-o观测"}},[s._v("#")]),s._v(" 3.进程I/O观测")]),s._v(" "),a("p",[s._v("除了每块磁盘的 I/O 情况, "),a("strong",[s._v("每个进程的 I/O 情况也是需要关注的重点")]),s._v(".")]),s._v(" "),a("p",[s._v("上面提到的 iostat 只提供"),a("strong",[s._v("磁盘整体")]),s._v("的 I/O 性能数据, 缺点在于, 并不能知道具体是哪些进程在进行磁盘读写. "),a("strong",[s._v("要观察进程的 I/O 情况, 还可以使用 pidstat 和 iotop 这两个工具")]),s._v(".")]),s._v(" "),a("p",[s._v("pidstat 是老朋友了, 这里就不再啰嗦它的功能了. 给它加上 -d 参数, 就可以看到进程的 I/O 情况, 如下所示:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ pidstat "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v(":39:51      "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("UID")]),s._v("       PID   kB_rd/s   kB_wr/s kB_ccwr/s iodelay  Command \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v(":39:52      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("102")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("916")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  rsyslogd\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("从 pidstat 的输出能看到, 它可以实时查看每个进程的 I/O 情况, 包括下面这些内容.")]),s._v(" "),a("ul",[a("li",[s._v("用户 ID(UID)和进程 ID(PID).")]),s._v(" "),a("li",[a("strong",[s._v("每秒读取的数据大小")]),s._v("(kB_rd/s), 单位是 KB.")]),s._v(" "),a("li",[a("strong",[s._v("每秒发出的写请求数据大小")]),s._v("(kB_wr/s), 单位是 KB.")]),s._v(" "),a("li",[a("strong",[s._v("每秒取消的写请求数据大小")]),s._v("(kB_ccwr/s), 单位是 KB.")]),s._v(" "),a("li",[s._v("块 I/O 延迟(iodelay), 包括等待同步块 I/O 和换入块 I/O 结束的时间, 单位是时钟周期.")])]),s._v(" "),a("p",[s._v("除了可以用 pidstat 实时查看, 根据 I/O 大小对进程排序, 也是性能分析中一个常用的方法. 这一点, 我推荐另一个工具 "),a("strong",[s._v("iotop")]),s._v(". 它是一个类似于 top 的工具, 可以按照 I/O 大小对进程排序, 然后找到 I/O 较大的那些进程.")]),s._v(" "),a("p",[s._v("iotop 的输出如下所示:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ iotop\nTotal DISK READ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v(" B/s "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Total DISK WRITE "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.85")]),s._v(" K/s \nActual DISK READ:       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v(" B/s "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Actual DISK WRITE:       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v(" B/s \n  TID  PRIO  "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("USER")]),s._v("     DISK READ  DISK WRITE  SWAPIN     IO"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("    COMMAND \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15055")]),s._v(" be/3 root        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v(" B/s    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.85")]),s._v(" K/s  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v(" %  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v(" % systemd-journald \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("从这个输出可以看到, 前两行分别表示, 进程的"),a("strong",[s._v("磁盘读写大小总数和磁盘真实的读写大小总数")]),s._v(". 因为缓存, 缓冲区, I/O 合并等因素的影响, 它们可能并不相等.")]),s._v(" "),a("p",[s._v("剩下的部分, 则是从各个角度来分别表示进程的 I/O 情况, 包括线程 ID, I/O 优先级, 每秒读磁盘的大小, 每秒写磁盘的大小, 换入和等待 I/O 的时钟百分比等.")]),s._v(" "),a("p",[s._v("这两个工具, 是分析磁盘 I/O 性能时最常用到的.")]),s._v(" "),a("h5",{attrs:{id:"_4-小结-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-小结-7"}},[s._v("#")]),s._v(" 4.小结")]),s._v(" "),a("p",[s._v("本节梳理了 Linux 磁盘 I/O 的性能指标和性能工具. 通常用 "),a("strong",[s._v("IOPS, 吞吐量, 使用率, 饱和度以及响应时间等几个指标, 来评估磁盘的 I/O 性能")]),s._v(".")]),s._v(" "),a("p",[a("strong",[s._v("可以用 iostat 获得磁盘的 I/O 情况, 也可以用 pidstat, iotop 等观察进程的 I/O 情况")]),s._v(". 不过在分析这些性能指标时, 要注意结合读写比例, I/O 类型以及 I/O 大小等, 进行综合分析.")]),s._v(" "),a("h4",{attrs:{id:"_26-案例篇-如何找出狂打日志的-内鬼"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_26-案例篇-如何找出狂打日志的-内鬼"}},[s._v("#")]),s._v(' 26-案例篇:如何找出狂打日志的"内鬼"?')]),s._v(" "),a("p",[s._v("前两节学了文件系统和磁盘的 I/O 原理, 在碰到"),a("strong",[s._v("文件系统和磁盘的 I/O 问题时, 具体应该怎么定位和分析")]),s._v("呢? 本节就以一个最常见的应用程序记录大量日志的案例, 来分析这种情况.")]),s._v(" "),a("h5",{attrs:{id:"_1-案例准备"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-案例准备"}},[s._v("#")]),s._v(" 1.案例准备")]),s._v(" "),a("p",[s._v("本次案例还是基于 Ubuntu 18.04, 同样适用于其他的 Linux 系统. 案例环境如下所示:")]),s._v(" "),a("ul",[a("li",[s._v("机器配置: 2 CPU, 8GB 内存")]),s._v(" "),a("li",[s._v("预先安装 docker, sysstat 等工具, 如 apt install docker.io sysstat")])]),s._v(" "),a("p",[s._v("这个案例是一个用 Python 开发的小应用, 为了方便运行, 我把它打包成了一个 Docker 镜像. 这样, 你只要运行 Docker 命令, 就可以启动它.")]),s._v(" "),a("p",[s._v("接下来, 打开一个终端, SSH 登录到案例所用的机器中, 并安装上述工具.")]),s._v(" "),a("h5",{attrs:{id:"_2-案例分析-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-案例分析-3"}},[s._v("#")]),s._v(" 2.案例分析")]),s._v(" "),a("p",[s._v("首先在终端中执行下面的命令, 运行今天的目标应用:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-v")]),s._v(" /tmp:/tmp "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("app "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-itd")]),s._v(" feisky/logapp\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("然后, 在终端中运行 ps 命令, 确认案例应用正常启动. 如果操作无误, 应该可以在 ps 的输出中, 看到一个 app.py 的进程:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-ef")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" /app.py \nroot     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18940")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18921")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("73")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":41 pts/0    00:00:02 python /app.py \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("接着来看看系统有没有性能问题. 要观察哪些性能指标呢? 前面文章中, 我们知道 CPU, 内存和磁盘 I/O 等系统资源, 很容易出现资源瓶颈, 这就是观察的方向了. 来观察一下这些资源的使用情况.")]),s._v(" "),a("p",[s._v("当然, 动手之前应该想清楚, 要用哪些工具来做, 以及工具的使用顺序又是怎样的. 我的想法是, "),a("strong",[s._v("可以先用 top 来观察 CPU 和内存的使用情况; 然后再用 iostat 来观察磁盘的 I/O 情况")]),s._v(".")]),s._v(" "),a("p",[s._v("接下来, 可以在终端中运行 top 命令, 观察 CPU 和内存的使用情况:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 按 1 切换到每个 CPU 的使用情况 ")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v(" - "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":43:43 up "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" day,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(":39,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" users,  load average: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.48")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.09")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.63")]),s._v(" \nTasks: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("130")]),s._v(" total,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" running,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("74")]),s._v(" sleeping,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" stopped,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" zombie \n%Cpu0  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.7")]),s._v(" us,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6.0")]),s._v(" sy,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" ni,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.7")]),s._v(" id, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("92.7")]),s._v(" wa,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" hi,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" si,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" st \n%Cpu1  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" us,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v(" sy,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" ni, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("92.3")]),s._v(" id,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.3")]),s._v(" wa,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" hi,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" si,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" st \nKiB Mem "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8169308")]),s._v(" total,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("747684")]),s._v(" free,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("741336")]),s._v(" used,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6680288")]),s._v(" buff/cache \nKiB Swap:        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" total,        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" free,        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" used.  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7113124")]),s._v(" avail Mem \n \n  PID "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("USER")]),s._v("      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18940")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("656108")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("355740")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5236")]),s._v(" R   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6.3")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.4")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":12.56 python \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1312")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("236532")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24116")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9648")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v(":29.80 python3 \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("观察 top 的输出, 你会发现, "),a("strong",[s._v("CPU0 的使用率非常高")]),s._v(", 它的"),a("strong",[s._v("系统 CPU 使用率(sys%)为 6%, 而 iowait 超过了 90%. 这说明 CPU0 上, 可能正在运行 I/O 密集型的进程")]),s._v(". 不过, 究竟是什么原因呢? 这个疑问先保留着, 先继续看完.")]),s._v(" "),a("p",[s._v("接着来看, 进程部分的 CPU 使用情况. 你会发现, python 进程的 CPU 使用率已经达到了 6%, 而其余进程的 CPU 使用率都比较低, 不超过 0.3%. 看起来 python 是个可疑进程. 记下 python 进程的 PID 号 18940, 我们稍后分析.")]),s._v(" "),a("p",[s._v("最后再看"),a("strong",[s._v("内存的使用情况")]),s._v(", 总内存 8G, 剩余内存只有 730 MB, 而 Buffer/Cache 占用内存高达 6GB 之多, 这说明"),a("strong",[s._v("内存主要被缓存占用")]),s._v(". 虽然大部分缓存可回收, 还是得了解下缓存的去处, 确认缓存使用都是合理的.")]),s._v(" "),a("p",[s._v("到这一步, 基本可以判断出, "),a("strong",[s._v("CPU 使用率中的 iowait 是一个潜在瓶颈, 而内存部分的缓存占比较大")]),s._v(", 那磁盘 I/O 又是怎么样的情况呢?")]),s._v(" "),a("p",[s._v("在终端中按 Ctrl+C, 停止 top 命令, 再运行 iostat 命令, 观察 I/O 的使用情况:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -d 表示显示 I/O 性能指标, -x 表示显示扩展统计(即所有 I/O 指标) ")]),s._v("\n$ iostat "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-x")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" \nDevice            r/s     w/s     rkB/s     wkB/s   rrqm/s   wrqm/s  %rrqm  %wrqm r_await w_await aqu-sz rareq-sz wareq-sz  svctm  %util \nloop0            "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v(" \nsdb              "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v(" \nsda              "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("32768.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7270.44")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1102.18")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("512.00")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15.50")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("99.20")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("观察 iostat 的最后一列, 你会看到, "),a("strong",[s._v("磁盘 sda 的 I/O 使用率已经高达 99%")]),s._v(" , 很可能已经接近 I/O 饱和.")]),s._v(" "),a("p",[s._v("再看前面的各个指标, 每秒写磁盘请求数是 64, 写大小是 32 MB, 写请求的响应时间为 7 秒, 而请求队列长度则达到了 1100.")]),s._v(" "),a("p",[a("strong",[s._v("超慢的响应时间和特长的请求队列长度, 进一步验证了 I/O 已经饱和的猜想")]),s._v(". 此时, sda 磁盘已经遇到了严重的性能瓶颈.")]),s._v(" "),a("p",[s._v("到这里, 也就可以理解, 为什么前面看到的 iowait 高达 90% 了, 这正是磁盘 sda 的 I/O 瓶颈导致的. 接下来的重点就是分析 I/O 性能瓶颈的根源了. 那要怎么知道, 这些 I/O 请求相关的进程呢?")]),s._v(" "),a("p",[s._v("不知道你还记不记得, 上一节曾提到过, 可以"),a("strong",[s._v("用 pidstat 或者 iotop, 观察进程的 I/O 情况")]),s._v(". 这里就用 pidstat 来看一下.")]),s._v(" "),a("p",[s._v("使用 pidstat 加上 -d 参数, 就可以显示每个进程的 I/O 情况. 所以可以在终端中运行如下命令来观察:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ pidstat "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" \n \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),s._v(":08:35      "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("UID")]),s._v("       PID   kB_rd/s   kB_wr/s kB_ccwr/s iodelay  Command \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),s._v(":08:36        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18940")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("45816.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("96")]),s._v("  python \n \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),s._v(":08:36      "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("UID")]),s._v("       PID   kB_rd/s   kB_wr/s kB_ccwr/s iodelay  Command \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),s._v(":08:37        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("354")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("350")]),s._v("  jbd2/sda1-8 \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),s._v(":08:37        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18940")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("46000.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("96")]),s._v("  python \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),s._v(":08:37        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20065")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1503")]),s._v("  kworker/u4:2 \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("从 pidstat 的输出可以发现, 只有 python 进程的写比较大, 而且每秒写的数据超过 45 MB, 比上面 iostat 发现的 32MB 的结果还要大. 很明显, 正是 python 进程导致了 I/O 瓶颈.")]),s._v(" "),a("p",[s._v("再往下看 iodelay 项. 虽然只有 python 在大量写数据, 但你应该注意到了, 有两个进程 (kworker 和 jbd2) 的延迟, 居然比 python 进程还大很多.")]),s._v(" "),a("p",[s._v("这其中, kworker 是一个内核线程, 而 jbd2 是 ext4 文件系统中, 用来保证数据完整性的内核线程. 他们都是保证文件系统基本功能的内核线程, 所以具体细节暂时就不用管了, 只需要明白它们延迟的根源还是大量 I/O.")]),s._v(" "),a("p",[s._v("综合 pidstat 的输出来看, 还是 python 进程的嫌疑最大. 接下来分析 python 进程到底在写什么.")]),s._v(" "),a("p",[s._v("首先留意一下 python 进程的 PID 号, 18940. 看到 18940, 你有没有觉得熟悉? 其实前面在使用 top 时, 已经记录过的 CPU 使用率最高的进程, 也正是它. 不过, 虽然在 top 中使用率最高, 也不过是 6%, 并不算高. 所以, 以 I/O 问题为分析方向还是正确的.")]),s._v(" "),a("p",[s._v("知道了进程的 PID 号, 具体要怎么查看写的情况呢?")]),s._v(" "),a("p",[s._v("其实在系统调用的案例中讲过, 读写文件必须通过"),a("strong",[s._v("系统调用")]),s._v("完成. 观察系统调用情况, 就可以知道进程正在写的文件. 想起 "),a("strong",[s._v("strace")]),s._v(" 了吗, 它正是分析系统调用时最常用的工具.")]),s._v(" "),a("p",[s._v("接下来在终端中运行 strace 命令, 并通过 -p 18940 指定 python 进程的 PID 号:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("strace")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18940")]),s._v(" \nstrace: Process "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18940")]),s._v(" attached \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\nmmap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("NULL, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("314576896")]),s._v(", PROT_READ"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("PROT_WRITE, MAP_PRIVATE"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("MAP_ANONYMOUS, -1, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" 0x7f0f7aee9000 \nmmap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("NULL, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("314576896")]),s._v(", PROT_READ"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("PROT_WRITE, MAP_PRIVATE"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("MAP_ANONYMOUS, -1, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" 0x7f0f682e8000 \nwrite"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2018-12-05 15:23:01,709 - __main"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("., "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("314572844")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("314572844")]),s._v(" \nmunmap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("0x7f0f682e8000, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("314576896")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" \nwrite"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('"')]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("                       "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" \nmunmap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("0x7f0f7aee9000, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("314576896")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" \nclose"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("                                "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" \nstat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/tmp/logtest.txt.1"')]),s._v(", "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("st_mode"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("S_IFREG"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("0644, "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("st_size")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("943718535")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("从 write() 系统调用上可以看到, 进程向文件描述符编号为 3 的文件中, 写入了 300MB 的数据. 看来, 它应该是我们要找的文件. 不过, write() 调用中只能看到文件的描述符编号, 文件名和路径还是未知的.")]),s._v(" "),a("p",[s._v("再观察后面的 stat() 调用, 可以看到, 它正在获取 "),a("code",[s._v("/tmp/logtest.txt.1")]),s._v('​ 的状态.  这种 "点 + 数字格式" 的文件, 在日志回滚中非常常见. 因此可以猜测, 这是第一个日志回滚文件, 而正在写的日志文件路径, 则是 '),a("code",[s._v("/tmp/logtest.txt")]),s._v("​.")]),s._v(" "),a("p",[s._v("当然, 这只是猜测, 自然还需要验证. 这里再介绍一个新的工具 "),a("strong",[s._v("lsof")]),s._v(". 它专门用来"),a("mark",[a("strong",[s._v("查看进程打开文件列表")])]),s._v(', 不过, 这里的 "文件" 不只有普通文件, 还包括了目录, 块设备, 动态库, 网络套接字等.')]),s._v(" "),a("p",[s._v("接下来在终端中运行下面的 lsof 命令, 看看进程 18940 都打开了哪些文件:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("lsof")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18940")]),s._v(" \nCOMMAND   PID "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("USER")]),s._v("   FD   TYPE DEVICE  SIZE/OFF    NODE NAME \npython  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18940")]),s._v(" root  cwd    DIR   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0,50")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4096")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1549389")]),s._v(" / \npython  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18940")]),s._v(" root  rtd    DIR   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0,50")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4096")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1549389")]),s._v(" / \n… \npython  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18940")]),s._v(" root    2u   CHR  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("136,0")]),s._v("       0t0       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" /dev/pts/0 \npython  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18940")]),s._v(" root    3w   REG    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8,1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("117944320")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("303")]),s._v(" /tmp/logtest.txt \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("这个输出界面中, 有几列简单介绍一下, "),a("strong",[s._v("FD 表示文件描述符号, TYPE 表示文件类型, NAME 表示文件路径")]),s._v(". 这也是需要关注的重点.")]),s._v(" "),a("p",[s._v("再看最后一行, 这说明, 这个进程打开了文件 "),a("code",[s._v("/tmp/logtest.txt")]),s._v("​, 并且它的文件描述符是 3 号, 而 3 后面的 w, 表示"),a("strong",[s._v("以写的方式")]),s._v("打开.")]),s._v(" "),a("p",[s._v('这跟刚才 strace 完猜测的结果一致, 看来这就是问题的根源: 进程 18940 以每次 300MB 的速度, 在"疯狂"写日志, 而日志文件的路径是 '),a("code",[s._v("/tmp/logtest.txt")]),s._v("​.")]),s._v(" "),a("p",[s._v("既然找出了问题根源, 接下来按照惯例, 就该查看源代码, 然后分析为什么这个进程会狂打日志了.")]),s._v(" "),a("p",[s._v("可以运行 docker cp 命令, 把案例应用的源代码拷贝出来, 然后查看它的内容.")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 拷贝案例应用源代码到当前目录")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" app:/app.py "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" \n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看案例应用的源代码")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" app.py \n \nlogger "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" logging.getLogger"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("__name__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \nlogger.setLevel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("level"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("logging.INFO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \nrHandler "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" RotatingFileHandler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/tmp/logtest.txt"')]),s._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("maxBytes")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1024")]),s._v(" * "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1024")]),s._v(" * "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1024")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("backupCount")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \nrHandler.setLevel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("logging.INFO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n \ndef write_log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": \n  "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),s._v("'Write logs to "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),s._v("' \n  message "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" get_message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" True: \n    logger.info"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n    time.sleep"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" __name__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'__main__'")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" \n  msg_size "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("300")]),s._v(" * "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1024")]),s._v(" * "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1024")]),s._v(" \n  write_log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("msg_size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])]),a("p",[s._v("分析这个源码, 可以发现, 它的日志路径是 "),a("code",[s._v("/tmp/logtest.txt")]),s._v("​, 默认记录 INFO 级别以上的所有日志, 而且每次写日志的大小是 300MB. 这跟上面的分析结果是一致的.")]),s._v(" "),a("p",[s._v("一般来说, 生产系统的应用程序, 应该有动态调整日志级别的功能. 继续查看源码,会发现, 这个程序也可以调整日志级别. 如果给它发送 SIGUSR1 信号, 就可以把日志调整为 INFO 级; 发送 SIGUSR2 信号, 则会调整为 WARNING 级:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("def set_logging_info"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("signal_num, frame"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": \n  "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),s._v("'Set loging level to INFO when receives SIGUSR1"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),s._v("' \n  logger.setLevel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("logging.INFO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n \ndef set_logging_warning"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("signal_num, frame"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": \n  "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),s._v("'Set loging level to WARNING when receives SIGUSR2"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),s._v("' \n  logger.setLevel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("logging.WARNING"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n \nsignal.signal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("signal.SIGUSR1, set_logging_info"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \nsignal.signal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("signal.SIGUSR2, set_logging_warning"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("根据源码中的日志调用 logger.info(message), 可以知道它的日志是 INFO 级, 这也正是它的默认级别. 那么, 只要把默认级别调高到 WARNING 级, 日志问题应该就解决了.")]),s._v(" "),a("p",[s._v("接下来就来检查一下, 刚刚的分析对不对. 在终端中运行下面的 kill 命令, 给进程 18940 发送 SIGUSR2 信号:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("kill")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-SIGUSR2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18940")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("然后, 再执行 top 和 iostat 观察一下:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(". \n%Cpu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v(" us,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.2")]),s._v(" sy,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" ni, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("99.5")]),s._v(" id,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" wa,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" hi,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" si,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" st \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ iostat "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-x")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nDevice            r/s     w/s     rkB/s     wkB/s   rrqm/s   wrqm/s  %rrqm  %wrqm r_await w_await aqu-sz rareq-sz wareq-sz  svctm  %util \nloop0            "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v(" \nsdb              "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v(" \nsda              "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("观察 top 和 iostat 的输出会发现, 稍等一段时间后, iowait 会变成 0, 而 sda 磁盘的 I/O 使用率也会逐渐减少到 0.")]),s._v(" "),a("p",[s._v("到这里不仅定位了狂打日志的应用程序, 并通过调高日志级别的方法, 完美解决了 I/O 的性能瓶颈.")]),s._v(" "),a("h5",{attrs:{id:"_3-小结-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-小结-3"}},[s._v("#")]),s._v(" 3.小结")]),s._v(" "),a("p",[s._v("无论是操作系统, 还是应用程序, 都会记录大量的运行日志, 以便事后查看历史记录. 这些日志一般按照不同级别来开启, 比如, 开发环境通常打开调试级别的日志, 而线上环境则只记录警告和错误日志.")]),s._v(" "),a("p",[s._v("在排查应用程序问题时, 可能需要, 在线上环境临时开启应用程序的调试日志. 有时候, "),a("strong",[s._v("事后一不小心就忘了调回去. 没把线上的日志调高到警告级别, 可能会导致 CPU 使用率, 磁盘 I/O 等一系列的性能问题, 严重时, 甚至会影响到同一台服务器上运行的其他应用程序")]),s._v(".")]),s._v(" "),a("p",[s._v('今后, 在碰到这种"狂打日志"的场景时, 可以用 iostat, strace, lsof 等工具来定位狂打日志的进程, 找出相应的日志文件, 再通过应用程序的接口, 调整日志级别来解决问题.')]),s._v(" "),a("h4",{attrs:{id:"_27-案例篇-为什么我的磁盘i-o延迟很高"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_27-案例篇-为什么我的磁盘i-o延迟很高"}},[s._v("#")]),s._v(" 27-案例篇:为什么我的磁盘I/O延迟很高?")]),s._v(" "),a("p",[s._v("本节再来看一个新的案例. 这次案例是一个基于 Python Flask 框架的 Web 应用, 它提供了一个查询单词热度的 API, 但是 API 的响应速度并不让人满意.")]),s._v(" "),a("h5",{attrs:{id:"_1-案例准备-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-案例准备-2"}},[s._v("#")]),s._v(" 1.案例准备")]),s._v(" "),a("p",[s._v("本次案例还是基于 Ubuntu 18.04, 同样适用于其他的 Linux 系统. 案例环境如下所示:")]),s._v(" "),a("ul",[a("li",[s._v("机器配置: 2 CPU, 8GB 内存")]),s._v(" "),a("li",[s._v("预先安装 docker, sysstat 等工具, 如 apt install docker.io sysstat")])]),s._v(" "),a("p",[s._v("为了方便运行今天的案例, 我把它打包成了一个 Docker 镜像. 这样就只需要运行 Docker 命令就可以启动它.")]),s._v(" "),a("p",[s._v("今天的案例需要两台虚拟机, 其中一台是案例分析的目标机器, 运行 Flask 应用, 它的 IP 地址是 192.168.0.10; 而另一台作为客户端, 请求单词的热度. 我画了一张图表示它们的关系, 如下所示:")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/83976f9ff6919586334cd2c9b29a7531-20230731161933-rs26vbg.png",alt:""}})]),s._v(" "),a("h5",{attrs:{id:"_2-案例分析-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-案例分析-4"}},[s._v("#")]),s._v(" 2.案例分析")]),s._v(" "),a("p",[s._v("首先在第一个终端中执行下面的命令, 运行本次案例要分析的目标应用:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("app "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),s._v(":80 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-itd")]),s._v(" feisky/word-pop\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("然后, 在第二个终端中运行 curl 命令, 访问 http://192.168.0.10:1000/, 确认案例正常启动. 应该可以在 curl 的输出界面里, 看到一个 hello world 的输出:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" http://192.168.0.10:10000/ \nhello world\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("接下来, 在第二个终端中, 访问案例应用的单词热度接口, 也就是 http://192.168.0.10:1000/popularity/word.")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" http://192.168.0.10:1000/popularity/word\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("稍等一会儿会发现, 这个接口居然这么长时间都没响应, 究竟是怎么回事呢? 先回到终端一来分析一下.")]),s._v(" "),a("p",[s._v("先试试在第一个终端里, 随便执行一个命令, 比如执行 df 命令, 查看一下文件系统的使用情况. 奇怪的是, 这么简单的命令, 居然也要"),a("strong",[s._v("等好久")]),s._v("才有输出.")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("df")]),s._v(" \nFilesystem     1K-blocks    Used Available Use% Mounted on \nudev             "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4073376")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4073376")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("% /dev \ntmpfs             "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("816932")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1188")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("815744")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("% /run \n/dev/sda1       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30308240")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8713640")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21578216")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("29")]),s._v("% / \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("通过 df 可以知道, 系统还有足够多的磁盘空间. 那为什么响应会变慢呢? "),a("strong",[s._v("看来还是得观察一下, 系统的资源使用情况, 像是 CPU, 内存和磁盘 I/O 等的具体使用情况")]),s._v(".")]),s._v(" "),a("p",[s._v("这里的思路其实跟上一个案例比较类似, "),a("strong",[s._v("可以先用 top 来观察 CPU 和内存的使用情况, 然后再用 iostat 来观察磁盘的 I/O 情况")]),s._v(".")]),s._v(" "),a("p",[s._v("为了避免分析过程中 curl 请求突然结束, 回到终端二, 按 Ctrl+C 停止刚才的应用程序; 然后, 把 curl 命令放到一个循环里执行; 这次还要加一个 time 命令, 观察每次的执行时间:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("time")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" http://192.168.0.10:10000/popularity/word"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v(" \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("继续回到终端一来分析性能. 在终端一中运行 top 命令, 观察 CPU 和内存的使用情况:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v(" - "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":27:02 up "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(":30,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" user,  load average: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.82")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.26")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.76")]),s._v(" \nTasks: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("129")]),s._v(" total,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" running,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("74")]),s._v(" sleeping,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" stopped,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" zombie \n%Cpu0  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.5")]),s._v(" us,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.1")]),s._v(" sy,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" ni,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" id, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("94.4")]),s._v(" wa,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" hi,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" si,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" st \n%Cpu1  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.4")]),s._v(" us,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.7")]),s._v(" sy,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" ni, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("70.4")]),s._v(" id, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("26.5")]),s._v(" wa,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" hi,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" si,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" st \nKiB Mem "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8169300")]),s._v(" total,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3323248")]),s._v(" free,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("436748")]),s._v(" used,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4409304")]),s._v(" buff/cache \nKiB Swap:        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" total,        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" free,        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" used.  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7412556")]),s._v(" avail Mem \n \n  PID "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("USER")]),s._v("      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12280")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("103304")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("28824")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7276")]),s._v(" S  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.4")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":08.77 python \n   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":09.22 ksoftirqd/1 \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1549")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("236712")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24480")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9864")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(":31.38 python3 \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("观察 top 的输出可以发现, "),a("strong",[s._v("两个 CPU 的 iowait 都非常高")]),s._v(". 特别是 CPU0, iowait 已经高达 94 %, 而剩余内存还有 3GB, 看起来也是充足的.")]),s._v(" "),a("p",[s._v("再往下看, 进程部分有一个 python 进程的 CPU 使用率稍微有点高, 达到了 14%. 虽然 14% 并不能成为性能瓶颈, 不过有点嫌疑--可能跟 iowait 的升高有关.")]),s._v(" "),a("p",[s._v("那这个 PID 号为 12280 的 python 进程, 到底是不是我们的案例应用呢?")]),s._v(" "),a("p",[s._v("在第一个终端中, 按下 Ctrl+C, 停止 top 命令; 然后执行下面的 ps 命令, 查找案例应用 "),a("a",{attrs:{href:"http://app.py",target:"_blank",rel:"noopener noreferrer"}},[s._v("app.py"),a("OutboundLink")],1),s._v(" 的 PID 号:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" aux "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" app.py \nroot     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12222")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.4")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.2")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("96064")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("23452")]),s._v(" pts/0    Ss+  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":37   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00 python /app.py \nroot     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12280")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13.9")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("102424")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("27904")]),s._v(" pts/0    Sl+  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":37   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":09 /usr/local/bin/python /app.py \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("从 ps 的输出可以看到, 这个 CPU 使用率较高的进程, 正是我们的案例应用. 不过先别着急分析 CPU 问题, 毕竟 iowait 已经高达 94%, I/O 问题才是需要首要解决的.")]),s._v(" "),a("p",[s._v("接下来在终端一中, 运行下面的 iostat 命令, 其中:")]),s._v(" "),a("ul",[a("li",[s._v("-d 选项是指显示出 I/O 的性能指标;")]),s._v(" "),a("li",[s._v("-x 选项是指显示出扩展统计信息(即显示所有 I/O 指标).")])]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ iostat "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-x")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nDevice            r/s     w/s     rkB/s     wkB/s   rrqm/s   wrqm/s  %rrqm  %wrqm r_await w_await aqu-sz rareq-sz wareq-sz  svctm  %util \nloop0            "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v(" \nsda              "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("71.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("32912.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18118.31")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("241.89")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("463.55")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13.86")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("98.40")]),s._v(" \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("具体观察 iostat 的输出. 可以发现, 磁盘 sda 的 "),a("strong",[s._v("I/O 使用率已经达到 98%")]),s._v(" , 接近饱和了. 而且, "),a("strong",[s._v("写请求的响应时间高达 18 秒, 每秒的写数据为 32 MB")]),s._v(", 显然写磁盘碰到了瓶颈.")]),s._v(" "),a("p",[s._v("那要怎么知道, 这些 I/O 请求到底是哪些进程导致的呢? 可以使用 pidstat. 在终端一中, 运行下面的 pidstat 命令, 观察进程的 I/O 情况:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ pidstat "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":39:14      "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("UID")]),s._v("       PID   kB_rd/s   kB_wr/s kB_ccwr/s iodelay  Command \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":39:15        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12280")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("335716.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  python \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("从 pidstat 的输出, 再次看到了 PID 号为 12280 的结果. 这说明, 正是案例应用引发 I/O 的性能瓶颈.")]),s._v(" "),a("p",[s._v("走到这一步, 你估计觉得, 接下来就很简单了, 上一个案例不刚刚学过吗? 无非就是, 先用 strace 确认它是不是在写文件, 再用 lsof 找出文件描述符对应的文件即可.")]),s._v(" "),a("p",[s._v("到底是不是这样呢? 不妨来试试. 还是在终端一中, 执行下面的 strace 命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("strace")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12280")]),s._v(" \nstrace: Process "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12280")]),s._v(" attached \nselect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(", NULL, NULL, NULL, "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("tv_sec"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("tv_usec")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("567708")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Timeout"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \nstat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/usr/local/lib/python3.7/importlib/_bootstrap.py"')]),s._v(", "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("st_mode"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("S_IFREG"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("0644, "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("st_size")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("39278")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" \nstat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/usr/local/lib/python3.7/importlib/_bootstrap.py"')]),s._v(", "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("st_mode"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("S_IFREG"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("0644, "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("st_size")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("39278")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("从 strace 中, 可以看到大量的 stat 系统调用, 并且大都为 python 的文件, 但请注意, 这里"),a("strong",[s._v("并没有任何 write 系统调用")]),s._v(".")]),s._v(" "),a("p",[s._v("由于 strace 的输出比较多, 可以用 grep, 来过滤一下 write, 比如:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("strace")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12280")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("2")]),s._v(">")]),a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("&1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("write")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("遗憾的是, 这里仍然没有任何输出.")]),s._v(" "),a("p",[s._v("难道此时已经没有性能问题了吗? 重新执行刚才的 top 和 iostat 命令, 会发现性能问题仍然存在.")]),s._v(" "),a("p",[s._v("下面只好综合 strace, pidstat 和 iostat 这三个结果来分析了. 很明显, 你应该发现了这里的矛盾: iostat 已经证明磁盘 I/O 有性能瓶颈, 而 pidstat 也证明了, 这个瓶颈是由 12280 号进程导致的, 但 strace 跟踪这个进程, 却没有找到任何 write 系统调用.")]),s._v(" "),a("p",[s._v("这就奇怪了. 难道因为案例使用的编程语言是 Python, 而 Python 是解释型的, 所以找不到? 还是说, 因为案例运行在 Docker 中呢?")]),s._v(" "),a("p",[s._v("文件写, 明明应该有相应的 write 系统调用, 但用现有工具却找不到痕迹, 这时就该想想换工具的问题了. 怎样才能知道哪里在写文件呢?")]),s._v(" "),a("p",[s._v("这里介绍一个新工具, "),a("strong",[s._v("filetop")]),s._v(". 它是 bcc 软件包的一部分, 基于 Linux 内核的 eBPF(extended Berkeley Packet Filters)机制, 主要"),a("strong",[s._v("跟踪内核中文件的读写情况, 并输出线程 ID(TID), 读写大小, 读写类型以及文件名称")]),s._v(".")]),s._v(" "),a("p",[s._v("接下来就用这个工具, 观察一下文件的读写情况. 首先, 在终端一中运行下面的命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 切换到工具目录 ")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" /usr/share/bcc/tools \n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -C 选项表示输出新内容时不清空屏幕 ")]),s._v("\n$ ./filetop "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-C")]),s._v(" \n \nTID    COMM             READS  WRITES R_Kb    W_Kb    T FILE \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("514")]),s._v("    python           "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2832")]),s._v("    R "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("669")]),s._v(".txt \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("514")]),s._v("    python           "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2490")]),s._v("    R "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("667")]),s._v(".txt \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("514")]),s._v("    python           "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2685")]),s._v("    R "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("671")]),s._v(".txt \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("514")]),s._v("    python           "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2392")]),s._v("    R "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("670")]),s._v(".txt \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("514")]),s._v("    python           "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2050")]),s._v("    R "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("672")]),s._v(".txt \n \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n \nTID    COMM             READS  WRITES R_Kb    W_Kb    T FILE \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("514")]),s._v("    python           "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5957")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("       R "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("651")]),s._v(".txt \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("514")]),s._v("    python           "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5371")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("       R "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("112")]),s._v(".txt \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("514")]),s._v("    python           "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4785")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("       R "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("861")]),s._v(".txt \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("514")]),s._v("    python           "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4736")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("       R "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("213")]),s._v(".txt \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("514")]),s._v("    python           "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4443")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("       R "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("45")]),s._v(".txt \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])]),a("p",[s._v("你会看到, filetop 输出了 8 列内容, 分别是"),a("strong",[s._v("线程 ID, 线程命令行, 读写次数, 读写的大小(单位 KB), 文件类型以及读写的文件名称")]),s._v(".")]),s._v(" "),a("p",[s._v("这些内容里, 可能会看到很多动态链接库, 不过这不是重点, 暂且忽略即可. 我们的重点, 是一个 python 应用, 所以要特别关注 python 相关的内容.")]),s._v(" "),a("p",[s._v("多观察一会儿就会发现, 每隔一段时间, 线程号为 514 的 python 应用就会先写入大量的 txt 文件, 再大量地读.")]),s._v(" "),a("p",[s._v("线程号为 514 的线程, 属于哪个进程呢? 可以用 ps 命令查看. 先在终端一中停止 filetop; 然后, 运行下面的 ps 命令. 这个输出的第二列内容, 就是想知道的进程号:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-efT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("514")]),s._v("\nroot     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12280")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("514")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14626")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("33")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":47 pts/0    00:00:05 /usr/local/bin/python /app.py\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("这个线程正是案例应用 12280 的线程. 终于可以先松一口气, 不过还没完, filetop 只给出了文件名称, 却没有文件路径, 还得继续找啊.")]),s._v(" "),a("p",[s._v("再介绍一个好用的工具, "),a("strong",[s._v("opensnoop")]),s._v(". 它同属于 bcc 软件包, 可以"),a("strong",[s._v("动态跟踪内核中的 open 系统调用")]),s._v(". 这样就可以找出这些 txt 文件的路径.")]),s._v(" "),a("p",[s._v("接下来, 在终端一中, 运行下面的 opensnoop 命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ opensnoop \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12280")]),s._v("  python              "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" /tmp/9046db9e-fe25-11e8-b13f-0242ac110002/650.txt \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12280")]),s._v("  python              "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" /tmp/9046db9e-fe25-11e8-b13f-0242ac110002/651.txt \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12280")]),s._v("  python              "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" /tmp/9046db9e-fe25-11e8-b13f-0242ac110002/652.txt \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("这次, 通过 opensnoop 的输出可以看到, 这些 txt 路径位于 "),a("code",[s._v("/tmp")]),s._v("​ 目录下. 还能看到, 它打开的文件数量, 按照数字编号, 从 0.txt 依次增大到 999.txt, 这可远多于前面用 filetop 看到的数量.")]),s._v(" "),a("p",[s._v("综合 filetop 和 opensnoop, 就可以进一步分析了. 这里可以大胆猜测, 案例应用在写入 1000 个 txt 文件后, 又把这些内容读到内存中进行处理. 来检查一下, 这个目录中是不是真的有 1000 个文件:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" /tmp/9046db9e-fe25-11e8-b13f-0242ac110002 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("wc")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-l")]),s._v(" \nls: cannot access "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/tmp/9046db9e-fe25-11e8-b13f-0242ac110002'")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" No such "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v(" or directory \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("操作后却发现, 目录居然不存在了. 怎么回事呢? 回到 opensnoop 再观察一会儿:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ opensnoop \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12280")]),s._v("  python              "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" /tmp/defee970-fe25-11e8-b13f-0242ac110002/261.txt \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12280")]),s._v("  python              "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" /tmp/defee970-fe25-11e8-b13f-0242ac110002/840.txt \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12280")]),s._v("  python              "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" /tmp/defee970-fe25-11e8-b13f-0242ac110002/136.txt \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("原来, 这时的路径已经变成了另一个目录. 这说明, 这些目录都是应用程序动态生成的, 用完就删了.")]),s._v(" "),a("p",[s._v("结合前面的所有分析, 基本可以判断, 案例应用会动态生成一批文件, 用来临时存储数据, 用完就会删除它们. 但不幸的是, "),a("strong",[s._v("正是这些文件读写, 引发了 I/O 的性能瓶颈, 导致整个处理过程非常慢")]),s._v(".")]),s._v(" "),a("p",[s._v("当然还需要验证这个猜想. 老办法, 还是查看应用程序的源码 "),a("a",{attrs:{href:"https://github.com/feiskyer/linux-perf-examples/blob/master/io-latency/app.py",target:"_blank",rel:"noopener noreferrer"}},[s._v("app.py"),a("OutboundLink")],1),s._v(",")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("@app.route"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/popularity/<word>"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \ndef word_popularity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("word"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": \n  dir_path "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/tmp/{}'")]),s._v(".format"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("uuid.uuid1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("))")]),s._v(" \n  count "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" \n  sample_size "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" \n   \n  def save_to_file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("file_name, content"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": \n    with open"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("file_name, "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'w'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" as f: \n    f.write"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("content"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n \n  try: \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# initial directory firstly ")]),s._v("\n    os.mkdir"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("dir_path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# save article to files ")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("i")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" range"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sample_size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": \n        file_name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{}/{}.txt'")]),s._v(".format"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("dir_path, i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n        article "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" generate_article"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n        save_to_file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("file_name, article"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# count word popularity ")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" root, dirs, files "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" os.walk"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("dir_path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": \n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("file_name")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" files: \n            with open"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{}/{}'")]),s._v(".format"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("dir_path, file_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("))")]),s._v(" as f: \n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" validate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("word, f.read"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("))")]),s._v(": \n                    count "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" \n    finally: \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# clean files ")]),s._v("\n        shutil.rmtree"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("dir_path, "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ignore_errors")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("True"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n \n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("return")]),s._v(" jsonify"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'popularity'")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" count / sample_size * "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'word'")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" word"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br")])]),a("p",[s._v("源码中可以看到, 这个案例应用, 在每个请求的处理过程中, 都会生成一批临时文件, 然后读入内存处理, 最后再把整个目录删除掉.")]),s._v(" "),a("p",[s._v("这是"),a("strong",[s._v("一种常见的利用磁盘空间处理大量数据的技巧, 不过本次案例中的 I/O 请求太重, 导致磁盘 I/O 利用率过高")]),s._v(".")]),s._v(" "),a("p",[s._v("要解决这一点, 其实就是算法优化问题了. 比如在内存充足时, 就可以把所有数据都放到内存中处理, 这样就能避免 I/O 的性能问题.")]),s._v(" "),a("h5",{attrs:{id:"_3-小结-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-小结-4"}},[s._v("#")]),s._v(" 3.小结")]),s._v(" "),a("p",[s._v("本节分析了一个响应过慢的单词热度案例.")]),s._v(" "),a("p",[s._v("首先用 top, iostat, 分析了系统的 CPU 和磁盘使用情况. 发现了磁盘 I/O 瓶颈, 也知道了这个瓶颈是案例应用导致的.")]),s._v(" "),a("p",[s._v("接着, 试着照搬上一节案例的方法, 用 strace 来观察进程的系统调用, 不过这次很不走运, 没找到任何 write 系统调用.")]),s._v(" "),a("p",[s._v("于是, 又用了新的工具, 借助动态追踪工具包 bcc 中的 filetop 和 opensnoop, 找出了案例应用的问题, 发现这个根源是大量读写临时文件.")]),s._v(" "),a("p",[s._v("找出问题后, 优化方法就相对比较简单了. 如果内存充足时, 最简单的方法, 就是把数据都放在速度更快的内存中, 这样就没有磁盘 I/O 的瓶颈了. 再进一步, 可以还可以利用 Trie 树等各种算法, 进一步优化单词处理的效率.")]),s._v(" "),a("h4",{attrs:{id:"_28-案例篇-一个sql查询要15秒-这是怎么回事"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_28-案例篇-一个sql查询要15秒-这是怎么回事"}},[s._v("#")]),s._v(" 28-案例篇:一个SQL查询要15秒,这是怎么回事?")]),s._v(" "),a("p",[s._v("在实际应用中, 大量数据肯定是要存入数据库的, 而不会直接用文本文件的方式存储. 不过, 数据库也不是万能的. "),a("strong",[s._v("当数据库出现性能问题时, 又该如何分析和定位它的瓶颈呢")]),s._v("?")]),s._v(" "),a("p",[s._v("今天就来一起分析一个数据库的案例. 这是一个基于 Python Flask 的商品搜索应用, 商品信息存在 MySQL 中. 这个应用可以通过 MySQL 接口, 根据客户端提供的商品名称, 去数据库表中查询商品信息.")]),s._v(" "),a("h5",{attrs:{id:"_1-案例准备-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-案例准备-3"}},[s._v("#")]),s._v(" 1.案例准备")]),s._v(" "),a("p",[s._v("本次案例还是基于 Ubuntu 18.04, 同样适用于其他的 Linux 系统. 案例环境如下所示:")]),s._v(" "),a("ul",[a("li",[s._v("机器配置: 2 CPU, 8GB 内存")]),s._v(" "),a("li",[s._v("预先安装 docker, sysstat, git, make 等工具, 如 apt install docker.io sysstat make git")])]),s._v(" "),a("p",[s._v("其中, docker 和 sysstat 已经用过很多次, 这里不再赘述; make 是一个常用构建工具, 这里用来运行今天的案例.")]),s._v(" "),a("p",[s._v("案例总共由三个容器组成, 包括一个 MySQL 数据库应用, 一个商品搜索应用以及一个数据处理的应用. 其中, 商品搜索应用以 HTTP 的形式提供了一个接口:")]),s._v(" "),a("ul",[a("li",[s._v("​"),a("code",[s._v("/")]),s._v("​: 返回 Index Page;")]),s._v(" "),a("li",[s._v("​"),a("code",[s._v("/db/insert/products/")]),s._v("​: 插入指定数量的商品信息;")]),s._v(" "),a("li",[s._v("​"),a("code",[s._v("/products/")]),s._v("​: 查询指定商品的信息, 并返回处理时间.")])]),s._v(" "),a("p",[s._v("由于应用比较多, 为了方便运行它们, 我把它们同样打包成了几个 Docker 镜像, 并推送到了 Github 上. 这样只需要运行几条命令, 就可以启动了.")]),s._v(" "),a("p",[s._v("今天的案例需要两台虚拟机, 其中一台作为案例分析的目标机器, 运行 Flask 应用, 它的 IP 地址是 192.168.0.10; 另一台则是作为客户端, 请求单词的热度. 下面画了一张图表示它们的关系.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/6c9bad4d1e112263d8b3459116aed056-20230731161933-tbjfe7d.png",alt:""}})]),s._v(" "),a("p",[s._v("接下来, 打开两个终端, 分别 SSH 登录到这两台虚拟机中, 并在第一台虚拟机中安装上述工具.")]),s._v(" "),a("h5",{attrs:{id:"_2-案例分析-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-案例分析-5"}},[s._v("#")]),s._v(" 2.案例分析")]),s._v(" "),a("p",[s._v("首先在第一个终端中执行下面命令, 拉取本次案例所需脚本:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" clone https://github.com/feiskyer/linux-perf-examples\n$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" linux-perf-examples/mysql-slow\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("接着, 执行下面的命令, 运行本次的目标应用. 正常情况下, 应该可以看到下面的输出:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 注意下面的随机字符串是容器 ID, 每次运行均会不同, 并且你不需要关注它, 因为我们只会用到名字")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("make")]),s._v(" run\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("mysql "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-itd")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),s._v(":80 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-m")]),s._v(" 800m feisky/mysql:5.6\nWARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.\n4156780da5be0b9026bcf27a3fa56abc15b8408e358fa327f472bcc5add4453f\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("dataservice "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-itd")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--privileged")]),s._v(" feisky/mysql-dataservice\nf724d0816d7e47c0b2b1ff701e9a39239cb9b5ce70f597764c793b68131122bb\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("app "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--network")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("container:mysql "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-itd")]),s._v(" feisky/mysql-slow\n81d3392ba25bb8436f6151662a13ff6182b6bc6f2a559fc2e9d873cd07224ab6\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("然后, 再运行 docker ps 命令, 确认三个容器都处在运行(Up)状态:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v("\nCONTAINER ID        IMAGE                      COMMAND                  CREATED             STATUS              PORTS                             NAMES\n9a4e3c580963        feisky/mysql-slow          "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"python /app.py"')]),s._v("         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),s._v(" seconds ago      Up "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("36")]),s._v(" seconds                                         app\n2a47aab18082        feisky/mysql-dataservice   "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"python /dataservice…"')]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("46")]),s._v(" seconds ago      Up "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("41")]),s._v(" seconds                                         dataservice\n4c3ff7b24748        feisky/mysql:5.6           "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"docker-entrypoint.s…"')]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("47")]),s._v(" seconds ago      Up "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("46")]),s._v(" seconds       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3306")]),s._v("/tcp, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(".0.0:10000-"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v("/tcp   mysql\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("MySQL 数据库的启动过程, 需要做一些初始化工作, 这通常需要花费几分钟时间. 可以运行 docker logs 命令, 查看它的启动过程.")]),s._v(" "),a("p",[s._v("当看到下面这个输出时, 说明 MySQL 初始化完成, 可以接收外部请求了:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" logs "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-f")]),s._v(" mysql\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(". "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("Note"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" mysqld: ready "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" connections.\nVersion: "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'5.6.42-log'")]),s._v("  socket: "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/var/run/mysqld/mysqld.sock'")]),s._v("  port: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3306")]),s._v("  MySQL Community Server "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("GPL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("而商品搜索应用则是在 10000 端口监听. 然后执行下面的命令, 确认它也已经正常运行. 如果一切正常, 会看到 Index Page 的输出:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" http://127.0.0.1:10000/\nIndex Page\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("接下来, 运行 make init 命令, 初始化数据库, 并插入 10000 条商品信息. 这个过程比较慢, 比如在我的机器中, 就花了十几分钟时间. 耐心等待一段时间后, 会看到如下的输出:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("make")]),s._v(" init\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-i")]),s._v(" mysql mysql "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-uroot")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-P3306")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" tables.sql\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" http://127.0.0.1:10000/db/insert/products/10000\ninsert "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),s._v(" lines\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("接着切换到第二个终端, 访问一下商品搜索的接口, 看看能不能找到想要的商品. 执行如下的 curl 命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" http://192.168.0.10:10000/products/geektime\nGot data: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15.364538192749023")]),s._v(" sec\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("稍等一会儿, 你会发现, 这个接口返回的是空数据, 而且处理时间超过 15 秒. 这么慢的响应速度让人无法忍受, 到底出了什么问题呢?")]),s._v(" "),a("p",[s._v("既然今天用了 MySQL, 你估计会猜到是"),a("strong",[s._v("慢查询")]),s._v("的问题.")]),s._v(" "),a("p",[s._v("不过别急, 在具体分析前, 为了避免在分析过程中客户端的请求结束, 把 curl 命令放到一个循环里执行. 同时, 为了避免给系统过大压力, 设置在每次查询后, 都先等待 5 秒, 然后再开始新的请求. 所以可以在终端二中, 继续执行下面的命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" http://192.168.0.10:10000/products/geektime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("接下来, 重新回到终端一中, 分析接口响应速度慢的原因. 不过, 重回终端一后, 会发现系统响应也明显变慢了, 随便执行一个命令, 都得停顿一会儿才能看到输出.")]),s._v(" "),a("p",[s._v("这跟上一节的现象很类似, 看来还是得"),a("strong",[s._v("观察一下系统的资源使用情况, 比如 CPU, 内存和磁盘 I/O 等的情况")]),s._v(".")]),s._v(" "),a("p",[s._v("首先在终端一执行 top 命令, 分析系统的 CPU 使用情况:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v(" - "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(":02:15 up "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(" days,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(":05,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" user,  load average: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.66")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.72")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.59")]),s._v("\nTasks: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("137")]),s._v(" total,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" running,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("81")]),s._v(" sleeping,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" stopped,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" zombie\n%Cpu0  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.7")]),s._v(" us,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.3")]),s._v(" sy,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" ni, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("35.9")]),s._v(" id, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("62.1")]),s._v(" wa,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" hi,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" si,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" st\n%Cpu1  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v(" us,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.7")]),s._v(" sy,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" ni, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("84.7")]),s._v(" id, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14.3")]),s._v(" wa,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" hi,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" si,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" st\nKiB Mem "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8169300")]),s._v(" total,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7238472")]),s._v(" free,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("546132")]),s._v(" used,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("384696")]),s._v(" buff/cache\nKiB Swap:        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" total,        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" free,        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" used.  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7316952")]),s._v(" avail Mem\n \n  PID "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("USER")]),s._v("      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("27458")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("999")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("833852")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("57968")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13176")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.7")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.7")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":12.40 mysqld\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("27617")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24348")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9216")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4692")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":04.40 python\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1549")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("236716")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24568")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9864")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("51")]),s._v(":46.57 python3\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22421")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" I   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":01.16 kworker/u\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("观察 top 的输出, 发现两个 "),a("strong",[s._v("CPU 的 iowait 都比较高")]),s._v(", 特别是 CPU0, iowait 已经超过 60%. 而具体到各个进程, CPU 使用率并不高, 最高的也只有 1.7%.")]),s._v(" "),a("p",[s._v("既然 CPU 的嫌疑不大, 那问题应该还是出在了 I/O 上. 仍然在第一个终端, 执行下面的 iostat 命令, 看看有没有 I/O 性能问题:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ iostat "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-x")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nDevice            r/s     w/s     rkB/s     wkB/s   rrqm/s   wrqm/s  %rrqm  %wrqm r_await w_await aqu-sz rareq-sz wareq-sz  svctm  %util\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\nsda            "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("273.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("32568.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.90")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.16")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("119.30")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.56")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("97.20")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("iostat 的输出你应该非常熟悉. 观察这个界面, 可以发现, "),a("strong",[s._v("磁盘 sda 每秒的读数据为 32 MB,  而 I/O 使用率高达 97%, 接近饱和")]),s._v(", 这说明磁盘 sda 的读取确实碰到了性能瓶颈.")]),s._v(" "),a("p",[s._v("那要怎么知道, 这些 I/O 请求到底是哪些进程导致的呢? 当然可以使用 pidstat. 接下来, 在终端一中运行下面的 pidstat 命令, 观察进程的 I/O 情况:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -d 选项表示展示进程的 I/O 情况")]),s._v("\n$ pidstat "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(":04:11      "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("UID")]),s._v("       PID   kB_rd/s   kB_wr/s kB_ccwr/s iodelay  Command\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(":04:12      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("999")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("27458")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("32640.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  mysqld\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(":04:12        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("27617")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("  python\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(":04:12        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("27864")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  systemd-journal\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("从 pidstat 的输出可以看到, PID 为 27458 的 mysqld 进程正在进行大量的读, 而且读取速度是 32 MB/s, 跟刚才 iostat 的发现一致. 两个结果一对比, 自然就找到了"),a("strong",[s._v("磁盘 I/O 瓶颈的根源, 即 mysqld 进程")]),s._v(".")]),s._v(" "),a("p",[s._v("不过, 这事儿还没完. 我们自然要怀疑一下, 为什么 mysqld 会去读取大量的磁盘数据呢? 按照前面猜测, 这有可能是个慢查询问题.")]),s._v(" "),a("p",[s._v("可是, 回想一下, 慢查询的现象大多是 CPU 使用率高(比如 100% ), 但这里看到的却是 I/O 问题. 看来, 这并不是一个单纯的慢查询问题, 所以有必要分析一下 MySQL 读取的数据.")]),s._v(" "),a("p",[s._v("要分析进程的数据读取, 当然还要靠上一节用到过的 "),a("strong",[s._v("strace + lsof")]),s._v(" 组合.")]),s._v(" "),a("p",[s._v("接下来, 还是在终端一中, 执行 strace 命令, 并且指定 mysqld 的进程号 27458. MySQL 是一个多线程的数据库应用, 为了不漏掉这些线程的数据读取情况, 要记得在执行 stace 命令时, 加上 -f 参数:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("strace")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-f")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("27458")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("pid "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("28014")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" read"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("38")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"934EiwT363aak7VtqF1mHGa4LL4Dhbks"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("., "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("131072")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("131072")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("pid "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("28014")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" read"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("38")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hSs7KBDepBqA6m4ce6i6iUfFTeG9Ot9z"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("., "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20480")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20480")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("pid "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("28014")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" read"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("38")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"NRhRjCSsLLBjTfdqiBRLvN9K6FRfqqLm"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("., "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("131072")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("131072")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("pid "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("28014")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" read"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("38")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"AKgsik4BilLb7y6OkwQUjjqGeCTQTaRl"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("., "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24576")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24576")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("pid "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("28014")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" read"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("38")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hFMHx7FzUSqfFI22fQxWCpSnDmRjamaW"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("., "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("131072")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("131072")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("pid "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("28014")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" read"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("38")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ajUzLmKqivcDJSkiw7QWf2ETLgvQIpfC"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("., "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20480")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20480")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("观察一会儿会发现, 线程 28014 正在读取大量数据, 且读取文件的描述符编号为 38. 这儿的 38 又对应着哪个文件呢? 可以执行下面的 lsof 命令, 并且指定线程号 28014, 具体查看这个可疑线程和可疑文件:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("lsof")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("28014")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("奇怪的是, lsof 并没有给出任何输出. 实际上, 如果查看 lsof 命令的返回值, 就会发现, 这个命令的"),a("strong",[s._v("执行失败")]),s._v("了.")]),s._v(" "),a("p",[s._v("在 SHELL 中, 特殊标量 "),a("code",[s._v("$?")]),s._v("​ 表示上一条命令退出时的返回值. 查看这个特殊标量, 会发现它的返回值是 1. 可是别忘了, 在 Linux 中, 返回值为 0, 才表示命令执行成功. 返回值为 1, 显然表明执行失败.")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$?")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("为什么 lsof 命令执行失败了呢? 这里先暂停往下, 自己先思考一下原因. 遇到现象解释不了, 先去查查工具文档.")]),s._v(" "),a("p",[s._v('事实上, 通过查询 lsof 的文档, 你会发现, -p 参数需要指定进程号, 而刚才传入的是线程号, 所以 lsof 失败了. 因此, 任何一个细节都可能成为性能分析的"拦路虎".')]),s._v(" "),a("p",[s._v("回过头看, mysqld 的进程号是 27458, 而 28014 只是它的一个线程. 而且, 如果观察一下 mysqld 进程的线程, 会发现 mysqld 其实还有很多正在运行的其他线程:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -t 表示显示线程, -a 表示显示命令行参数")]),s._v("\n$ pstree "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-t")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-a")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("27458")]),s._v("\nmysqld,27458 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--log_bin")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("on "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--sync_binlog")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n  ├─"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("mysqld"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(",27922\n  ├─"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("mysqld"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(",27923\n  └─"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("mysqld"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(",28014\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("找到了原因, lsof 的问题就容易解决了. 把线程号换成进程号, 继续执行 lsof 命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("lsof")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("27458")]),s._v("\nCOMMAND  PID "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("USER")]),s._v("   FD   TYPE DEVICE SIZE/OFF NODE NAME\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n​mysqld  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("27458")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("999")]),s._v("   38u   REG    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8,1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("512440000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2601895")]),s._v(" /var/lib/mysql/test/products.MYD\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("这次得到了 lsof 的输出. 从输出中可以看到, mysqld 进程确实打开了大量文件, 而根据文件描述符(FD)的编号可以知道, 描述符为 38 的是一个路径为 "),a("code",[s._v("/var/lib/mysql/test/products.MYD")]),s._v("​ 的文件. 这里注意, 38 后面的 u 表示 mysqld 以读写的方式访问文件.")]),s._v(" "),a("p",[s._v("看到这个文件, 熟悉 MySQL 的你可能笑了:")]),s._v(" "),a("ul",[a("li",[s._v("MYD 文件, 是 MyISAM 引擎用来存储"),a("strong",[s._v("表数据")]),s._v("的文件;")]),s._v(" "),a("li",[s._v("文件名就是数据表的名字;")]),s._v(" "),a("li",[s._v("而这个文件的父目录, 也就是数据库的名字.")])]),s._v(" "),a("p",[s._v("换句话说, 这个文件告诉我们, mysqld 在读取数据库 test 中的 products 表.")]),s._v(" "),a("p",[s._v("实际上, 可以执行下面的命令, 查看 mysqld 在管理数据库 test 时的存储文件. 不过要注意, 由于 MySQL 运行在容器中, 需要通过 docker exec 到容器中查看:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-it")]),s._v(" mysql "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" /var/lib/mysql/test/\ndb.opt    products.MYD  products.MYI  products.frm\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("从这里可以发现, "),a("code",[s._v("/var/lib/mysql/test/")]),s._v("​ 目录中有四个文件, 每个文件的作用分别是:")]),s._v(" "),a("ul",[a("li",[s._v("MYD 文件用来存储表的数据;")]),s._v(" "),a("li",[s._v("MYI 文件用来存储表的索引;")]),s._v(" "),a("li",[s._v("frm 文件用来存储表的元信息(比如表结构);")]),s._v(" "),a("li",[s._v("opt 文件则用来存储数据库的元信息(比如字符集, 字符校验规则等).")])]),s._v(" "),a("p",[s._v("当然, 看到这些, 你可能还有一个疑问, 那就是, 这些文件到底是不是 mysqld 正在使用的数据库文件呢? 有没有可能是不再使用的旧数据呢? 其实, 这个很容易确认, 查一下 mysqld 配置的数据路径即可.")]),s._v(" "),a("p",[s._v("可以在终端一中, 继续执行下面的命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-i")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-t")]),s._v(" mysql mysql "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-e")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'show global variables like \"%datadir%\";'")]),s._v("\n+---------------+-----------------+\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Variable_name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Value           "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n+---------------+-----------------+\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" datadir       "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" /var/lib/mysql/ "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n+---------------+-----------------+\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("这里可以看到, "),a("code",[s._v("/var/lib/mysql/")]),s._v("​ 确实是 mysqld 正在使用的数据存储目录. 刚才分析得出的数据库 test 和数据表 products, 都是正在使用.")]),s._v(" "),a("p",[s._v("既然已经找出了数据库和表, 接下来要做的, 就是弄清楚数据库中正在执行什么样的 SQL 了. 继续在终端一中, 运行下面的 docker exec 命令, 进入 MySQL 的命令行界面:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-i")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-t")]),s._v(" mysql mysql\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n\nType "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'help;'")]),s._v(" or "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\\h'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" help. Type "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\\c'")]),s._v(" to "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("clear")]),s._v(" the current input statement.\nmysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("下一步应该可以想到, 那就是在 MySQL 命令行界面中, 执行 show processlist 命令, 来查看"),a("strong",[s._v("当前正在执行的 SQL 语句")]),s._v(".")]),s._v(" "),a("p",[s._v("不过, 为了保证 SQL 语句不截断, 这里可以执行 show full processlist 命令. 如果一切正常, 应该可以看到如下输出:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("mysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" show full processlist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n+----+------+-----------------+------+---------+------+--------------+-----------------------------------------------------+\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" User "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Host            "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" db   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Command "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Time "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" State        "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Info                                                "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n+----+------+-----------------+------+---------+------+--------------+-----------------------------------------------------+\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("27")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" root "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" localhost       "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("test")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Query   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" init         "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" show full processlist                               "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("28")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" root "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:42262 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("test")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Query   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Sending data "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" * from products where "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("productName")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'geektime'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n+----+------+-----------------+------+---------+------+--------------+-----------------------------------------------------+\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" rows "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v(" sec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("这个输出中,")]),s._v(" "),a("ul",[a("li",[s._v("db 表示数据库的名字;")]),s._v(" "),a("li",[s._v("Command 表示 SQL 类型;")]),s._v(" "),a("li",[s._v("Time 表示执行时间;")]),s._v(" "),a("li",[s._v("State 表示状态;")]),s._v(" "),a("li",[s._v("而 Info 则包含了完整的 SQL 语句.")])]),s._v(" "),a("p",[s._v("多执行几次 show full processlist 命令, 可看到 "),a("code",[s._v("select * from products where productName='geektime'")]),s._v("​ 这条 SQL 语句的执行时间比较长.")]),s._v(" "),a("p",[s._v("再回忆一下, 案例开始时在终端二查询的产品名称 "),a("code",[s._v("http://192.168.0.10:10000/products/geektime")]),s._v("​, 其中的 geektime 也符合这条查询语句的条件.")]),s._v(" "),a("p",[s._v("一般 MySQL 的慢查询问题, 很可能是没有利用好索引导致的, 那这条查询语句是不是这样呢? 又该怎么确认, 查询语句是否利用了索引呢?")]),s._v(" "),a("p",[s._v("其实, MySQL 内置的 explain 命令, 就可以解决这个问题. 继续在 MySQL 终端中, 运行下面的 explain 命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 切换到 test 库")]),s._v("\nmysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" use "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 执行 explain 命令")]),s._v("\nmysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" explain "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" * from products where "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("productName")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'geektime'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n+----+-------------+----------+------+---------------+------+---------+------+-------+-------------+\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("id")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" select_type "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" table    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" possible_keys "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" key  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" key_len "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" ref  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" rows  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Extra       "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n+----+-------------+----------+------+---------------+------+---------+------+-------+-------------+\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" SIMPLE      "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" products "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" ALL  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" NULL          "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" NULL "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" NULL    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" NULL "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Using where "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n+----+-------------+----------+------+---------------+------+---------+------+-------+-------------+\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" row "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v(" sec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("观察这次的输出. 这个界面中, 有几个比较重要的字段需要注意, 就以这个输出为例, 分别解释一下:")]),s._v(" "),a("ul",[a("li",[s._v("select_type 表示查询类型, 而这里的 SIMPLE 表示此查询不包括 UNION 查询或者子查询;")]),s._v(" "),a("li",[s._v("table 表示数据表的名字, 这里是 products;")]),s._v(" "),a("li",[s._v("type 表示查询类型, 这里的 ALL 表示全表查询, 但索引查询应该是 index 类型才对;")]),s._v(" "),a("li",[s._v("possible_keys 表示可能选用的索引, 这里是 NULL;")]),s._v(" "),a("li",[s._v("key 表示确切会使用的索引, 这里也是 NULL;")]),s._v(" "),a("li",[s._v("rows 表示查询扫描的行数, 这里是 10000.")])]),s._v(" "),a("p",[s._v("根据这些信息可以确定, 这条查询语句压根儿没有使用索引, 所以查询时, 会"),a("strong",[s._v("扫描全表")]),s._v(", 并且扫描行数高达 10000 行. 响应速度那么慢也就难怪了.")]),s._v(" "),a("p",[s._v("走到这一步, 应该很容易想到优化方法, 没有索引那就给 productName 建立索引就可以了. 建完索引之后, 该检查一下性能问题是否已经解决了.")]),s._v(" "),a("p",[s._v("切换到终端二中, 查看还在执行的 curl 命令的结果:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("Got data: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("in "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15.383180141448975")]),s._v(" sec\nGot data: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("in "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15.384996891021729")]),s._v(" sec\nGot data: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("in "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0021054744720458984")]),s._v(" sec\nGot data: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("in "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.003951072692871094")]),s._v(" sec\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("显然, 查询时间已经从 15 秒缩短到了 3 毫秒. 看来, 没有索引果然就是这次性能问题的罪魁祸首, 解决了索引, 就解决了查询慢的问题.")]),s._v(" "),a("h5",{attrs:{id:"_3-案例思考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-案例思考"}},[s._v("#")]),s._v(" 3.案例思考")]),s._v(" "),a("p",[s._v("到这里, 商品搜索应用查询慢的问题已经完美解决了. 但对于这个案例, 还有一点想说明一下.")]),s._v(" "),a("p",[s._v("不知道你还记不记得, 案例开始时, 启动的几个容器应用. 除了 MySQL 和商品搜索应用外, 还有一个 DataService 应用. 为什么这个案例开始时, 要运行一个看起来毫不相关的应用呢?")]),s._v(" "),a("p",[s._v("实际上, DataService 是一个严重影响 MySQL 性能的干扰应用. 抛开上述索引优化方法不说, 这个案例还有一种优化方法, 也就是停止 DataService 应用. 接下来, 就删除数据库索引, 回到原来的状态; 然后停止 DataService 应用, 看看优化效果如何.")]),s._v(" "),a("p",[s._v("首先在终端二中停止 curl 命令, 然后回到终端一中, 删除之前的索引, 接着, 在终端二中重新运行 curl 命令. 当然, 这次你会发现, 处理时间又变慢了:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" http://192.168.0.10:10000/products/geektime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\nGot data: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("in "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16.884345054626465")]),s._v(" sec\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("接下来, 再次回到终端一中, 执行下面的命令, 停止 DataService 应用:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 停止 DataService 应用")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-f")]),s._v(" dataservice\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("最后回到终端二中, 观察 curl 的结果:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("Got data: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("in "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16.884345054626465")]),s._v(" sec\nGot data: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("in "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15.238174200057983")]),s._v(" sec\nGot data: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("in "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.12604427337646484")]),s._v(" sec\nGot data: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("in "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1101069450378418")]),s._v(" sec\nGot data: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("in "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.11235237121582031")]),s._v(" sec\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("果然, 停止 DataService 后, 处理时间从 15 秒缩短到了 0.1 秒, 虽然比不上增加索引后的 3 毫秒, 但相对于 15 秒来说, 优化效果还是非常明显的.")]),s._v(" "),a("p",[s._v("那么, 这种情况下, 还有没有 I/O 瓶颈了呢?")]),s._v(" "),a("p",[s._v("切换到终端一中, 运行下面的 vmstat 命令(注意不是 iostat, 稍后解释原因), 观察 I/O 的变化情况:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("vmstat")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nprocs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----\n r  b   swpd   "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("free")]),s._v("   buff  cache   si   so    bi    bo   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v("   cs us sy "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("id")]),s._v(" wa st\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6809304")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1368")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("856744")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("32640")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("52")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("478")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("49")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6776620")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1368")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("889456")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("32640")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("33")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("490")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("49")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6747540")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1368")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("918576")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("29056")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("568")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("56")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("44")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6747540")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1368")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("918576")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("40")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("141")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6747160")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1368")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("918576")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("40")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("148")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("99")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("可以看到, 磁盘读(bi)和 iowait(wa)刚开始还是挺大的, 但没过多久, 就都变成了 0. 换句话说, I/O 瓶颈消失了.")]),s._v(" "),a("p",[s._v("这是为什么呢? 原因先留个悬念, 作为本节的思考题.")]),s._v(" "),a("p",[s._v("回过头来解释一下刚刚的操作, 在查看 I/O 情况时, 并没用 iostat 命令, 而是用了 vmstat. 其实, 相对于 iostat 来说, vmstat 可以同时提供 CPU, 内存和 I/O 的使用情况. 在性能分析过程中, 能够综合多个指标, 并结合系统的工作原理进行分析, 对解释性能现象通常会有意想不到的帮助.")]),s._v(" "),a("h5",{attrs:{id:"_4-小结-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-小结-8"}},[s._v("#")]),s._v(" 4.小结")]),s._v(" "),a("p",[s._v("本节分析了一个商品搜索的应用程序. 先是通过 top, iostat 分析了系统的 CPU 和磁盘使用情况, 发现了磁盘的 I/O 瓶颈.")]),s._v(" "),a("p",[s._v("接着, 借助 pidstat, 发现瓶颈是 mysqld 导致的. 紧接着又通过 strace, lsof, 找出了 mysqld 正在读的文件. 同时, 根据文件的名字和路径, 找出了 mysqld 正在操作的数据库和数据表. 综合这些信息可以判断, 这是一个没有利用索引导致的慢查询问题.")]),s._v(" "),a("h4",{attrs:{id:"_29-案例篇-redis响应严重延迟-如何解决"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_29-案例篇-redis响应严重延迟-如何解决"}},[s._v("#")]),s._v(" 29-案例篇:Redis响应严重延迟,如何解决?")]),s._v(" "),a("p",[s._v("Redis 是最常用的键值存储系统之一, 常用作数据库, 高速缓存和消息队列代理等. Redis 基于内存来存储数据, 不过, 为了保证在服务器异常时数据不丢失, 很多情况下, 要为它"),a("strong",[s._v("配置持久化, 而这就可能会引发磁盘 I/O 的性能问题")]),s._v(".")]),s._v(" "),a("p",[s._v("本节来分析一个"),a("strong",[s._v("利用 Redis 作为缓存")]),s._v("的案例. 这同样是一个基于 Python Flask 的应用程序, 它提供了一个查询缓存的接口, 但接口的响应时间比较长, 并不能满足线上系统的要求.")]),s._v(" "),a("h5",{attrs:{id:"_1-案例准备-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-案例准备-4"}},[s._v("#")]),s._v(" 1.案例准备")]),s._v(" "),a("p",[s._v("本次案例还是基于 Ubuntu 18.04, 同样适用于其他的 Linux 系统. 案例环境如下所示:")]),s._v(" "),a("ul",[a("li",[s._v("机器配置: 2 CPU, 8GB 内存")]),s._v(" "),a("li",[s._v("预先安装 docker, sysstat , git, make 等工具, 如 apt install docker.io sysstat")])]),s._v(" "),a("p",[s._v("今天的案例由 Python 应用 +Redis 两部分组成. 其中, Python 应用是一个基于 Flask 的应用, 它会利用 Redis , 来管理应用程序的缓存, 并对外提供三个 HTTP 接口: ​")]),s._v(" "),a("ul",[a("li",[s._v("​"),a("code",[s._v("/")]),s._v("​: 返回 hello redis;")]),s._v(" "),a("li",[s._v("​"),a("code",[s._v("/init/")]),s._v("​: 插入指定数量的缓存数据, 如果不指定数量, 默认的是 5000 条;")]),s._v(" "),a("li",[s._v("缓存的键格式为 uuid:")]),s._v(" "),a("li",[s._v("缓存的值为 good, bad 或 normal 三者之一")]),s._v(" "),a("li",[s._v("​"),a("code",[s._v("/get_cache/<type_name>")]),s._v("​: 查询指定值的缓存数据, 并返回处理时间. 其中, type_name 参数只支持 good, bad 和 normal(也就是找出具有相同 value 的 key 列表).")])]),s._v(" "),a("p",[s._v("由于应用比较多, 为了方便运行, 我把它们打包成了两个 Docker 镜像, 并推送到了 Github 上. 这样就只需要运行几条命令, 就可以启动了.")]),s._v(" "),a("p",[s._v("今天的案例需要两台虚拟机, 其中一台用作案例分析的目标机器, 运行 Flask 应用, 它的 IP 地址是 192.168.0.10; 而另一台作为客户端, 请求缓存查询接口. 我画了一张图来表示它们的关系.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/4148c5d0616b65f23ca40f43214f44ac-20230731161933-hh7xza3.png",alt:""}})]),s._v(" "),a("p",[s._v("接下来, 打开两个终端, 分别 SSH 登录到这两台虚拟机中, 并在第一台虚拟机中安装上述工具.")]),s._v(" "),a("h5",{attrs:{id:"_2-案例分析-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-案例分析-6"}},[s._v("#")]),s._v(" 2.案例分析")]),s._v(" "),a("p",[s._v("首先在第一个终端中, 执行下面的命令, 运行本次案例要分析的目标应用. 正常情况下, 应该可以看到下面的输出:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 注意下面的随机字符串是容器 ID, 每次运行均会不同, 并且你不需要关注它")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("redis "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-itd")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),s._v(":80 feisky/redis-server\nec41cb9e4dd5cb7079e1d9f72b7cee7de67278dbd3bd0956b4c0846bff211803\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("app "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--network")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("container:redis "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-itd")]),s._v(" feisky/redis-app\n2c54eb252d0552448320d9155a2618b799a1e71d7289ec7277a61e72a9de5fd0\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("然后, 再运行 docker ps 命令, 确认两个容器都处于运行(Up)状态:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v("\nCONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS              PORTS                             NAMES\n2c54eb252d05        feisky/redis-app      "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"python /app.py"')]),s._v("         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("48")]),s._v(" seconds ago      Up "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("47")]),s._v(" seconds                                         app\nec41cb9e4dd5        feisky/redis-server   "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"docker-entrypoint.s…"')]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("49")]),s._v(" seconds ago      Up "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("48")]),s._v(" seconds       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6379")]),s._v("/tcp, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(".0.0:10000-"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v("/tcp   redis\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("今天的应用在 10000 端口监听, 所以可以通过 http://192.168.0.10:10000, 来访问前面提到的三个接口.")]),s._v(" "),a("p",[s._v("切换到第二个终端, 使用 curl 工具, 访问应用首页. 如果看到 "),a("code",[s._v("hello redis")]),s._v("​ 的输出, 说明应用正常启动:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" http://192.168.0.10:10000/\nhello redis\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("接下来, 继续在终端二中, 执行下面的 curl 命令, 来调用应用的 "),a("code",[s._v("/init")]),s._v("​ 接口, 初始化 Redis 缓存, 并且插入 5000 条缓存信息. 这个过程比较慢. 耐心等一会儿后, 会看到下面这行输出:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 案例插入 5000 条数据, 在实践时可以根据磁盘的类型适当调整, 比如使用 SSD 时可以调大, 而 HDD 可以适当调小")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" http://192.168.0.10:10000/init/5000\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"elapsed_seconds"')]),s._v(":30.26814079284668,"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"keys_initialized"')]),s._v(":5000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("继续执行下一个命令, 访问应用的缓存查询接口. 如果一切正常, 你会看到如下输出:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" http://192.168.0.10:10000/get_cache\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"count"')]),s._v(":1677,"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"data"')]),s._v(":"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"d97662fa-06ac-11e9-92c7-0242ac110002"')]),s._v(","),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(","),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"elapsed_seconds"')]),s._v(":10.545469760894775,"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"type"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"good"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("可以看到, 这个接口调用居然要花 10 秒! 这么长的响应时间, 显然不能满足实际的应用需求.")]),s._v(" "),a("p",[s._v("到底出了什么问题呢? 还是要用前面学过的性能工具和原理, 来找到这个瓶颈.")]),s._v(" "),a("p",[s._v("不过别急, 同样为了避免分析过程中客户端的请求结束, 在进行性能分析前, 先要把 curl 命令放到一个循环里来执行. 可以在终端二中, 继续执行下面的命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" http://192.168.0.10:10000/get_cache"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v('接下来, 再重新回到终端一, 查找接口响应慢的"病因".')]),s._v(" "),a("p",[s._v("最近几个案例的现象都是响应很慢, 这种情况下自然先会怀疑, 是不是系统资源出现了瓶颈. 所以, "),a("strong",[s._v("先观察 CPU, 内存和磁盘 I/O 等的使用情况肯定不会错")]),s._v(".")]),s._v(" "),a("p",[s._v("先在终端一中执行 top 命令, 分析系统的 CPU 使用情况:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v(" - "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(":46:18 up "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),s._v(" days,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(":49,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" user,  load average: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.36")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.36")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.04")]),s._v("\nTasks: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("137")]),s._v(" total,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" running,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("79")]),s._v(" sleeping,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" stopped,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" zombie\n%Cpu0  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6.0")]),s._v(" us,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.7")]),s._v(" sy,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" ni,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5.7")]),s._v(" id, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("84.7")]),s._v(" wa,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" hi,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.0")]),s._v(" si,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" st\n%Cpu1  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.0")]),s._v(" us,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.0")]),s._v(" sy,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" ni, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("94.7")]),s._v(" id,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" wa,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" hi,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.3")]),s._v(" si,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" st\nKiB Mem "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8169300")]),s._v(" total,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7342244")]),s._v(" free,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("432912")]),s._v(" used,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("394144")]),s._v(" buff/cache\nKiB Swap:        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" total,        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" free,        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" used.  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7478748")]),s._v(" avail Mem\n \n  PID "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("USER")]),s._v("      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9181")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("193004")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("27304")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8716")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8.6")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":07.15 python\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9085")]),s._v(" systemd+  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("28352")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9760")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1860")]),s._v(" D   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":04.34 redis-server\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("368")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" D   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":33.88 jbd2/sda1-8\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("149")]),s._v(" root       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-20")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" I   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":10.63 kworker/0:1H\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1549")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("236716")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24576")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9864")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("91")]),s._v(":37.30 python3\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("观察 top 的输出可以发现, CPU0 的 iowait 比较高, 已经达到了 84%; 而各个进程的 CPU 使用率都不太高, 最高的 python 和 redis-server, 也分别只有 8% 和 5%. 再看内存, 总内存 8GB, 剩余内存还有 7GB 多, 显然内存也没啥问题.")]),s._v(" "),a("p",[s._v("综合 top 的信息, 最有嫌疑的就是 "),a("strong",[s._v("iowait")]),s._v(". 所以, 接下来还是要继续分析, 是不是 I/O 问题.")]),s._v(" "),a("p",[s._v("还在第一个终端中停止 top 命令; 然后, 执行下面的 iostat 命令, 查看有没有 I/O 性能问题:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ iostat "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-x")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nDevice            r/s     w/s     rkB/s     wkB/s   rrqm/s   wrqm/s  %rrqm  %wrqm r_await w_await aqu-sz rareq-sz wareq-sz  svctm  %util\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\nsda              "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("492.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2672.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("176.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("26.35")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.76")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5.43")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("观察 iostat 的输出发现, 磁盘 sda 每秒的写数据(wkB/s)为 2.5MB, I/O 使用率(%util)是 0. 看来, 虽然有些 I/O 操作, 但并没导致磁盘的 I/O 瓶颈.")]),s._v(" "),a("p",[s._v("排查下来, CPU 和内存使用没问题, I/O 也没有瓶颈, 接下来好像就没啥分析方向了?")]),s._v(" "),a("p",[s._v("碰到这种情况, 还是那句话, 反思一下, 是不是又漏掉什么有用线索了. 可以先自己思考一下, 从分析对象(案例应用), 系统原理和性能工具这三个方向下功夫, 回忆它们的特性, 查找现象的异常, 再继续往下走.")]),s._v(" "),a("p",[s._v("回想一下, 今天的案例问题是从 Redis 缓存中查询数据慢. "),a("strong",[s._v("对查询来说, 对应的 I/O 应该是磁盘的读操作, 但刚才用 iostat 看到的却是写操作")]),s._v(". 虽说 I/O 本身并没有性能瓶颈, 但这里的磁盘写也是比较奇怪的. 为什么会有磁盘写呢? 那就得知道, 到底是哪个进程在写磁盘.")]),s._v(" "),a("p",[s._v("要知道 I/O 请求来自哪些进程, 还是要靠 pidstat. 在终端一中运行下面的 pidstat 命令, 观察进程的 I/O 情况:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ pidstat "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(":49:35      "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("UID")]),s._v("       PID   kB_rd/s   kB_wr/s kB_ccwr/s iodelay  Command\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(":49:36        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("368")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("86")]),s._v("  jbd2/sda1-8\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(":49:36      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9085")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("636.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  redis-server\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("从 pidstat 的输出, 可以看到, I/O 最多的进程是 PID 为 9085 的 redis-server, 并且它也刚好是在写磁盘. 这说明, 确实是 redis-server 在进行磁盘写.")]),s._v(" "),a("p",[s._v("当然, 光找到读写磁盘的进程还不够, 还要再用 strace+lsof 组合, 看看 redis-server 到底在写什么.")]),s._v(" "),a("p",[s._v("接下来, 还是在终端一中, 执行 strace 命令, 并且指定 redis-server 的进程号 9085:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -f 表示跟踪子进程和子线程, -T 表示显示系统调用的时长, -tt 表示显示跟踪时间")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("strace")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-f")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-T")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-tt")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9085")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("pid  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9085")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":20:16.826131 epoll_pwait"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("EPOLLIN, "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("u32"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("u64")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10128")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("65")]),s._v(", NULL, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00005")]),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("5")]),s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("pid  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9085")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":20:16.826301 read"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"*2'),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$3")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("GET"),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$41")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('uuid:5b2e76cc-"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("., "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16384")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("61")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00007")]),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("1")]),s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("pid  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9085")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":20:16.826477 read"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(", 0x7fff366a5747, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-1")]),s._v(" EAGAIN "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Resource temporarily unavailable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00006")]),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("3")]),s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("pid  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9085")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":20:16.826645 write"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$3")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("bad"),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('"')]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00017")]),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("3")]),s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("pid  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9085")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":20:16.826907 epoll_pwait"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("EPOLLIN, "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("u32"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("u64")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10128")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("65")]),s._v(", NULL, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00003")]),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("2")]),s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("pid  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9085")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":20:16.827030 read"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"*2'),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$3")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("GET"),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$41")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('uuid:55862ada-"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("., "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16384")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("61")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00004")]),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("4")]),s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("pid  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9085")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":20:16.827149 read"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(", 0x7fff366a5747, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-1")]),s._v(" EAGAIN "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Resource temporarily unavailable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00004")]),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("3")]),s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("pid  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9085")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":20:16.827285 write"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$3")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("bad"),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('"')]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00014")]),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("1")]),s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("pid  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9085")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":20:16.827514 epoll_pwait"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("EPOLLIN, "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("u32"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("u64")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10128")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(", NULL, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00004")]),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("pid  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9085")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":20:16.827641 read"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"*2'),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$3")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("GET"),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$41")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('uuid:53522908-"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("., "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16384")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("61")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00004")]),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("3")]),s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("pid  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9085")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":20:16.827784 read"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(", 0x7fff366a5747, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-1")]),s._v(" EAGAIN "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Resource temporarily unavailable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00003")]),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("4")]),s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("pid  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9085")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":20:16.827945 write"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$4")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("good"),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('"')]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00028")]),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("8")]),s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("pid  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9085")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":20:16.828339 epoll_pwait"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("EPOLLIN, "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("u32"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("u64")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10128")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("63")]),s._v(", NULL, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00005")]),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("7")]),s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("pid  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9085")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":20:16.828486 read"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"*3'),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$4")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("SADD"),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$4")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("good"),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$36")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('535"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("., "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16384")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("67")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00004")]),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("0")]),s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("pid  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9085")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":20:16.828623 read"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(", 0x7fff366a5747, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-1")]),s._v(" EAGAIN "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Resource temporarily unavailable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00005")]),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("2")]),s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("pid  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9085")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":20:16.828760 write"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"*3'),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$4")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("SADD"),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$4")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("good"),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$36")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('535"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("., "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("67")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("67")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00006")]),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("0")]),s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("pid  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9085")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":20:16.828970 fdatasync"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00541")]),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("5")]),s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("pid  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9085")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":20:16.834493 write"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('":1'),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('"')]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00025")]),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("0")]),s._v(">")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("p",[s._v("观察一会儿, 有没有发现什么有趣的现象?")]),s._v(" "),a("p",[s._v("事实上, 从系统调用来看, "),a("strong",[s._v("epoll_pwait, read, write, fdatasync 这些系统调用都比较频繁")]),s._v(". 那么, 刚才观察到的写磁盘, 应该就是 write 或者 fdatasync 导致的了.")]),s._v(" "),a("p",[s._v("接着再来运行 lsof 命令, 找出这些系统调用的操作对象:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("lsof")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9085")]),s._v("\nredis-ser "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9085")]),s._v(" systemd-network    3r     FIFO   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0,12")]),s._v("      0t0 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15447970")]),s._v(" pipe\nredis-ser "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9085")]),s._v(" systemd-network    4w     FIFO   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0,12")]),s._v("      0t0 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15447970")]),s._v(" pipe\nredis-ser "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9085")]),s._v(" systemd-network    5u  a_inode   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0,13")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10179")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("eventpoll"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nredis-ser "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9085")]),s._v(" systemd-network    6u     sock    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0,9")]),s._v("      0t0 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15447972")]),s._v(" protocol: TCP\nredis-ser "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9085")]),s._v(" systemd-network    7w      REG    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8,1")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8830146")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2838532")]),s._v(" /data/appendonly.aof\nredis-ser "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9085")]),s._v(" systemd-network    8u     sock    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0,9")]),s._v("      0t0 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15448709")]),s._v(" protocol: TCP\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("现在可以发现, 描述符编号为 3 的是一个 pipe 管道, 5 号是 eventpoll, 7 号是一个普通文件, 而 8 号是一个 TCP socket.")]),s._v(" "),a("p",[s._v("结合磁盘写的现象, 可以知道, 只有 7 号普通文件才会产生磁盘写, 而它操作的文件路径是 "),a("code",[s._v("/data/appendonly.aof")]),s._v("​, 相应的系统调用包括 write 和 fdatasync.")]),s._v(" "),a("p",[s._v("如果你对 Redis 的持久化配置比较熟, 看到这个文件路径以及 fdatasync 的系统调用, 应该能想到, 这对应着正是 "),a("strong",[s._v("Redis 持久化配置中的 appendonly 和 appendfsync 选项")]),s._v(". 很可能是因为它们的配置不合理, 导致磁盘写比较多. 接下来就验证一下这个猜测, 可以通过 Redis 的命令行工具, 查询这两个选项的配置.")]),s._v(" "),a("p",[s._v("继续在终端一中, 运行下面的命令, 查询 appendonly 和 appendfsync 的配置:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-it")]),s._v(" redis redis-cli config get "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'append*'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"appendfsync"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"always"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"appendonly"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"yes"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("从这个结果可以发现, appendfsync 配置的是 always, 而 appendonly 配置的是 yes.")]),s._v(" "),a("p",[s._v("Redis 提供了两种数据持久化的方式, 分别是快照和追加文件.")]),s._v(" "),a("p",[a("strong",[s._v("快照方式")]),s._v(", 会按照指定的时间间隔, 生成数据的快照, 并且保存到磁盘文件中. 为了避免阻塞主进程, Redis 还会 fork 出一个子进程, 来负责快照的保存. 这种方式的性能好, 无论是备份还是恢复, 都比追加文件好很多. 不过, 它的缺点也很明显. 在数据量大时, fork 子进程需要用到比较大的内存, 保存数据也很耗时. 所以需要设置一个比较长的时间间隔来应对, 比如至少 5 分钟. 这样如果发生故障, 你丢失的就是几分钟的数据.")]),s._v(" "),a("p",[a("strong",[s._v("追加文件")]),s._v(", 则是用在文件末尾追加记录的方式, 对 Redis 写入的数据, 依次进行持久化, 所以它的持久化也更安全.  此外, 它还提供了一个用 appendfsync 选项设置 "),a("strong",[s._v("fsync 的策略")]),s._v(", 确保写入的数据都落到磁盘中, 具体选项包括 always, everysec, no 等.")]),s._v(" "),a("ul",[a("li",[s._v("always 表示, 每个操作都会执行一次 fsync, 是最为安全的方式;")]),s._v(" "),a("li",[s._v("everysec 表示, 每秒钟调用一次 fsync , 这样可以保证即使是最坏情况下, 也只丢失 1 秒的数据;")]),s._v(" "),a("li",[s._v("而 no 表示交给操作系统来处理.")])]),s._v(" "),a("p",[s._v("回忆一下刚刚看到的配置, appendfsync 配置的是 always, 意味着每次写数据时, 都会调用一次 fsync, 从而造成比较大的磁盘 I/O 压力.")]),s._v(" "),a("p",[s._v("当然, 还可以用 strace, 观察这个系统调用的执行情况. 比如通过 -e 选项指定 fdatasync 后, 就会得到下面的结果:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("strace")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-f")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9085")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-T")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-tt")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-e")]),s._v(" fdatasync\nstrace: Process "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9085")]),s._v(" attached with "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" threads\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("pid  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9085")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":22:52.013547 fdatasync"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00711")]),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("2")]),s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("pid  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9085")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":22:52.022467 fdatasync"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00857")]),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("2")]),s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("pid  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9085")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":22:52.032223 fdatasync"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00676")]),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("pid  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9085")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":22:52.139629 fdatasync"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00818")]),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("3")]),s._v(">")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("从这里可以看到, 每隔 10ms 左右, 就会有一次 fdatasync 调用, 并且每次调用本身也要消耗 7~8ms.")]),s._v(" "),a("p",[s._v("不管哪种方式, 都可以验证前面的猜想, 配置确实不合理. 这样就找出了 Redis 正在进行写入的文件, 也知道了产生大量 I/O 的原因.")]),s._v(" "),a("p",[s._v("不过, 回到最初的疑问, 为什么查询时会有磁盘写呢? 按理来说不应该只有数据的读取吗? 这就需要再来审查一下 "),a("code",[s._v("strace -f -T -tt -p 9085")]),s._v("​ 的结果.")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("read"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"*2'),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$3")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("GET"),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$41")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('uuid:53522908-"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("., "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16384")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nwrite"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$4")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("good"),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('"')]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"*3'),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$4")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("SADD"),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$4")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("good"),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$36")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('535"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("., "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16384")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nwrite"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"*3'),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$4")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("SADD"),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$4")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("good"),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$36")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('535"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("., "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("67")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nwrite"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('":1'),a("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('"')]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("细心的你应该记得, 根据 lsof 的分析, 文件描述符编号为 7 的是一个普通文件 "),a("code",[s._v("/data/appendonly.aof")]),s._v('​, 而编号为 8 的是 TCP socket. 而观察上面的内容, 8 号对应的 TCP 读写, 是一个标准的 "请求-响应" 格式, 即:')]),s._v(" "),a("ul",[a("li",[s._v("从 socket 读取 GET uuid:53522908-... 后, 响应 good;")]),s._v(" "),a("li",[s._v("再从 socket 读取 SADD good 535... 后, 响应 1.")])]),s._v(" "),a("p",[s._v("对 Redis 来说, SADD 是一个写操作, 所以 Redis 还会把它保存到用于持久化的 appendonly.aof 文件中.")]),s._v(" "),a("p",[s._v("观察更多的 strace 结果会发现, 每当 GET 返回 good 时, 随后都会有一个 SADD 操作, 这也就导致了, 明明是查询接口, Redis 却有大量的磁盘写.")]),s._v(" "),a("p",[s._v("到这里就找出了 Redis 写磁盘的原因. 不过, 在下最终结论前, 还是要确认一下, 8 号 TCP socket 对应的 Redis 客户端, 到底是不是我们的案例应用.")]),s._v(" "),a("p",[s._v("可以给 lsof 命令加上 -i 选项, 找出 TCP socket 对应的 TCP 连接信息. 不过, 由于 Redis 和 Python 应用都在容器中运行, 需要进入容器的网络命名空间内部, 才能看到完整的 TCP 连接.")]),s._v(" "),a("p",[s._v("注意: 下面的命令用到的 nsenter 工具, 可以进入容器命名空间. 如果你的系统没有安装, 请运行下面命令安装 nsenter.")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--rm")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-v")]),s._v(" /usr/local/bin:/target jpetazzo/nsenter\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("还是在终端一中, 运行下面的命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 由于这两个容器共享同一个网络命名空间, 所以我们只需要进入 app 的网络命名空间即可")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("PID")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" inspect "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--format")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(".State.Pid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" app"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -i 表示显示网络套接字信息")]),s._v("\n$ nsenter "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--target")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$PID")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--net")]),s._v(" -- "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("lsof")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-i")]),s._v("\nCOMMAND    PID            "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("USER")]),s._v("   FD   TYPE   DEVICE SIZE/OFF NODE NAME\nredis-ser "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9085")]),s._v(" systemd-network    6u  IPv4 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15447972")]),s._v("      0t0  TCP localhost:6379 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("LISTEN"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nredis-ser "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9085")]),s._v(" systemd-network    8u  IPv4 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15448709")]),s._v("      0t0  TCP localhost:6379-"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("localhost:32996 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ESTABLISHED"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\npython    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9181")]),s._v("            root    3u  IPv4 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15448677")]),s._v("      0t0  TCP *:http "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("LISTEN"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\npython    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9181")]),s._v("            root    5u  IPv4 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15449632")]),s._v("      0t0  TCP localhost:32996-"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("localhost:6379 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ESTABLISHED"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("这次可以看到, redis-server 的 8 号文件描述符, 对应 TCP 连接 "),a("code",[s._v("localhost:6379->localhost:32996")]),s._v("​. 其中, localhost:6379 是 redis-server 自己的监听端口, 自然 localhost:32996 就是 redis 的客户端. 再观察最后一行, localhost:32996 对应的, 正是 Python 应用程序(进程号为 9181).")]),s._v(" "),a("p",[s._v("历经各种波折, 总算找出了 Redis 响应延迟的潜在原因. 总结一下, 找到两个问题.")]),s._v(" "),a("p",[s._v("第一个问题, Redis 配置的 appendfsync 是 always, 这就导致 Redis 每次的写操作, 都会触发 fdatasync 系统调用. 今天的案例, 没必要用这么高频的同步写, 使用默认的 1s 时间间隔, 就足够了.")]),s._v(" "),a("p",[s._v("第二个问题, Python 应用在查询接口中会调用 Redis 的 SADD 命令, 这很可能是不合理使用缓存导致的.")]),s._v(" "),a("p",[s._v("对于第一个配置问题, 可以执行下面的命令, 把 appendfsync 改成 everysec:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-it")]),s._v(" redis redis-cli config "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" appendfsync everysec\nOK\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("改完后, 切换到终端二中查看, 会发现, 现在的请求时间, 已经缩短到了 0.9s:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("., "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"elapsed_seconds"')]),s._v(":0.9368953704833984,"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"type"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"good"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("而第二个问题, 就要查看应用的源码了. 查看案例应用的源代码:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("def get_cache"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("type_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),s._v("'handler "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" /get_cache"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),s._v("'\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("key")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" redis_client.scan_iter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"uuid:*"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":\n        value "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" redis_client.get"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" type_name:\n            redis_client.sadd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("type_name, key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(":"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    data "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("redis_client.smembers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("type_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("))")]),s._v("\n    redis_client.delete"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("type_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("return")]),s._v(" jsonify"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"type"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" type_name, "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'count'")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'data'")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("果然, Python 应用把 Redis 当成临时空间, 用来存储查询过程中找到的数据. 不过这些数据放内存中就可以了, 完全没必要再通过网络调用存储到 Redis 中.")]),s._v(" "),a("h5",{attrs:{id:"_3-小结-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-小结-5"}},[s._v("#")]),s._v(" 3.小结")]),s._v(" "),a("p",[s._v("本节分析了一个 Redis 缓存的案例. 先用 top, iostat , 分析了系统的 CPU , 内存和磁盘使用情况, 不过却发现, 系统资源并没有出现瓶颈. 这个时候想要进一步分析的话, 该从哪个方向着手呢?")]),s._v(" "),a("p",[s._v("通过今天的案例会发现, 为了进一步分析, 就需要对系统和应用程序的工作原理有一定的了解.")]),s._v(" "),a("p",[s._v("比如, 今天的案例中, 虽然磁盘 I/O 并没有出现瓶颈, 但从 Redis 的原理来说, 查询缓存时不应该出现大量的磁盘 I/O 写操作.")]),s._v(" "),a("p",[s._v("顺着这个思路, 就继续借助 pidstat, strace, lsof, nsenter 等一系列的工具, 找出了两个潜在问题, 一个是 Redis 的不合理配置, 另一个是 Python 应用对 Redis 的滥用. 找到瓶颈后, 相应的优化工作自然就比较轻松了.")]),s._v(" "),a("h4",{attrs:{id:"_30-套路篇-如何迅速分析出系统i-o的瓶颈在哪里"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_30-套路篇-如何迅速分析出系统i-o的瓶颈在哪里"}},[s._v("#")]),s._v(" 30-套路篇:如何迅速分析出系统I/O的瓶颈在哪里?")]),s._v(" "),a("p",[s._v('本节来总结一下, 如何"快准狠"定位系统的 I/O 瓶颈; 并且梳理清楚, 在不同场景下, 指标工具怎么选, 性能瓶颈又该如何定位.')]),s._v(" "),a("h5",{attrs:{id:"_1-性能指标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-性能指标"}},[s._v("#")]),s._v(" 1.性能指标")]),s._v(" "),a("p",[s._v("先来回顾一下, 描述 I/O 的性能指标有哪些? 可以先回想一下文件系统和磁盘 I/O 的原理, 结合下面这张 Linux 系统的 I/O 栈图, 凭着记忆和理解自己写一写.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/718eb7d89ce098f493d77944019a65a7-20230731161933-mdm7ywc.png",alt:""}})]),s._v(" "),a("p",[s._v("学了这么久的 I/O 性能知识, 一说起 I/O 指标, 你应该首先会想到分类描述. 我们要区分开文件系统和磁盘, 分别用不同指标来描述它们的性能.")]),s._v(" "),a("h6",{attrs:{id:"_1-文件系统i-o性能指标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-文件系统i-o性能指标"}},[s._v("#")]),s._v(" (1)文件系统I/O性能指标")]),s._v(" "),a("p",[s._v("先来看文件系统的情况.")]),s._v(" "),a("p",[a("strong",[s._v("首先, 最容易想到的是存储空间的使用情况, 包括容量, 使用量以及剩余空间等")]),s._v(". 一般称这些为磁盘空间的使用量, 因为文件系统的数据最终还是存储在磁盘上.")]),s._v(" "),a("p",[s._v("不过要注意, 这些只是文件系统向外展示的空间使用, 而非在磁盘空间的真实用量, 因为文件系统的元数据也会占用磁盘空间.")]),s._v(" "),a("p",[s._v("而且, 如果配置了 RAID, 从文件系统看到的使用量跟实际磁盘的占用空间, 也会因为 RAID 级别的不同而不一样. 比方配置 RAID10 后, 从文件系统最多也只能看到所有磁盘容量的一半.")]),s._v(" "),a("p",[s._v("除了数据本身的存储空间, 还有一个"),a("strong",[s._v("容易忽略的是索引节点的使用情况, 它也包括容量, 使用量以及剩余量等三个指标")]),s._v(". 如果文件系统中存储过多的小文件, 就可能碰到索引节点容量已满的问题.")]),s._v(" "),a("p",[a("strong",[s._v("其次, 应该想到的是前面多次提到过的缓存使用情况, 包括页缓存, 目录项缓存, 索引节点缓存以及各个具体文件系统(如 ext4, XFS 等)的缓存")]),s._v(". 这些缓存会使用速度更快的内存, 用来临时存储文件数据或者文件系统的元数据, 从而可以减少访问慢速磁盘的次数.")]),s._v(" "),a("p",[s._v("除了以上这两点, 文件 I/O 也是很重要的性能指标, 包括 IOPS(包括 r/s 和 w/s), 响应时间(延迟)以及吞吐量(B/s)等. 在考察这类指标时, 通常还要考虑实际文件的读写情况. 比如, 结合文件大小, 文件数量, I/O 类型等, 综合分析文件 I/O 的性能.")]),s._v(" "),a("p",[s._v("诚然, 这些性能指标非常重要, 但不幸的是, Linux 文件系统并没提供, 直接查看这些指标的方法. 只能通过系统调用, 动态跟踪或者基准测试等方法, 间接进行观察, 评估.")]),s._v(" "),a("p",[s._v("不过, 实际上, 这些指标在考察磁盘性能时更容易见到, 因为 Linux 为磁盘性能提供了更详细的数据.")]),s._v(" "),a("h6",{attrs:{id:"_2-磁盘i-o性能指标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-磁盘i-o性能指标"}},[s._v("#")]),s._v(" (2)磁盘I/O性能指标")]),s._v(" "),a("p",[s._v("接下来就来具体看看, "),a("strong",[s._v("哪些性能指标可以衡量磁盘 I/O 的性能")]),s._v(".")]),s._v(" "),a("p",[s._v("在磁盘 I/O 原理的文章中, 曾提到过四个核心的磁盘 I/O 指标.")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("使用率")]),s._v(", 是指磁盘忙处理 I/O 请求的百分比. 过高的使用率(比如超过 60%)通常意味着磁盘 I/O 存在性能瓶颈.")]),s._v(" "),a("li",[a("strong",[s._v("IOPS")]),s._v("(Input/Output Per Second), 是指每秒的 I/O 请求数.")]),s._v(" "),a("li",[a("strong",[s._v("吞吐量")]),s._v(", 是指每秒的 I/O 请求大小.")]),s._v(" "),a("li",[a("strong",[s._v("响应时间")]),s._v(", 是指从发出 I/O 请求到收到响应的间隔时间.")])]),s._v(" "),a("p",[s._v("考察这些指标时, 一定要注意综合 I/O 的具体场景来分析, 比如"),a("strong",[s._v("读写类型(顺序还是随机), 读写比例, 读写大小, 存储类型(有无 RAID 以及 RAID 级别, 本地存储还是网络存储)")]),s._v(" 等. 不过, 这里有个大忌, 就是把不同场景的 I/O 性能指标, 直接进行分析对比. 这是很常见的一个误区, 一定要避免.")]),s._v(" "),a("p",[s._v("除了这些指标外, 在前面 Cache 和 Buffer 原理的文章中, 曾多次提到, "),a("strong",[s._v("缓冲区(Buffer)")]),s._v(" 也是要重点掌握的指标, 它经常出现在内存和磁盘问题的分析中.")]),s._v(" "),a("p",[s._v("文件系统和磁盘 I/O 的这些指标都很有用, 需要熟练掌握, 下面总结成了一张图, 可以分类和记忆.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/42062990908f7ed3790f4d43b0680b90-20230731161933-lpggspe.png",alt:""}})]),s._v(" "),a("h5",{attrs:{id:"_2-性能工具-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-性能工具-2"}},[s._v("#")]),s._v(" 2.性能工具")]),s._v(" "),a("p",[s._v("掌握文件系统和磁盘 I/O 的性能指标后, 还要知道怎样去获取这些指标, 也就是搞明白工具的使用问题.")]),s._v(" "),a("p",[s._v("还记得前面的基础篇和案例篇中, 都分别用了哪些工具吗? 下面一起回顾下这些内容.")]),s._v(" "),a("p",[s._v("第一, 在文件系统的原理中, 介绍了"),a("strong",[s._v("查看文件系统容量的工具 df. 它既可以查看文件系统数据的空间容量, 也可以查看索引节点的容量")]),s._v(". 至于文件系统缓存, 通过 "),a("code",[s._v("/proc/meminfo")]),s._v("​, "),a("code",[s._v("/proc/slabinfo")]),s._v("​ 以及 slabtop 等各种来源, 观察页缓存, 目录项缓存, 索引节点缓存以及具体文件系统的缓存情况.")]),s._v(" "),a("p",[s._v("第二, 在磁盘 I/O 的原理中, 分别"),a("strong",[s._v("用 iostat 和 pidstat 观察了磁盘和进程的 I/O 情况")]),s._v(". 它们都是最常用的 I/O 性能分析工具. "),a("strong",[s._v("通过 iostat, 可以得到磁盘的 I/O 使用率, 吞吐量, 响应时间以及 IOPS 等性能指标; 而通过 pidstat, 则可以观察到进程的 I/O 吞吐量以及块设备 I/O 的延迟等")]),s._v(".")]),s._v(" "),a("p",[s._v("第三, 在狂打日志的案例中, 先用 top 查看系统的 CPU 使用情况, 发现 iowait 比较高; 然后, 又"),a("strong",[s._v("用 iostat 发现了磁盘的 I/O 使用率瓶颈, 并用 pidstat 找出了大量 I/O 的进程; 最后, 通过 strace 和 lsof 找出了问题进程正在读写的文件")]),s._v(", 并最终锁定性能问题的来源--原来是进程在狂打日志.")]),s._v(" "),a("p",[s._v("第四, 在磁盘 I/O 延迟的单词热度案例中, 同样先用 top, iostat , 发现磁盘有 I/O 瓶颈, 并用 pidstat 找出了大量 I/O 的进程. 可接下来, 想要照搬上次操作就失败了. 在随后的 strace 命令中, 居然没看到 write 系统调用. 于是就换了一个思路, 用新工具 filetop 和 opensnoop , 从内核中跟踪系统调用, 最终找出瓶颈的来源.")]),s._v(" "),a("p",[s._v("最后, 在 MySQL 和 Redis 的案例中, 同样的思路, 先用 top, iostat 以及 pidstat, 确定并找出 I/O 性能问题的瓶颈来源, 它们正是 mysqld 和 redis-server. 随后又用 strace+lsof 找出了它们正在读写的文件. 关于 MySQL 案例, 根据 mysqld 正在读写的文件路径, 再结合 MySQL 数据库引擎的原理, 不仅找出了数据库和数据表的名称, 还进一步发现了慢查询的问题, 最终通过优化索引解决了性能瓶颈.")]),s._v(" "),a("p",[s._v("至于 Redis 案例, 根据 redis-server 读写的文件, 以及正在进行网络通信的 TCP Socket, 再结合 Redis 的工作原理, 发现 Redis 持久化选项配置有问题; 从 TCP Socket 通信的数据中, 还发现了客户端的不合理行为. 于是修改 Redis 配置选项, 并优化了客户端使用 Redis 的方式, 从而减少网络通信次数, 解决性能问题.")]),s._v(" "),a("p",[s._v("一下子复习了这么多, 你是不是觉得头昏脑胀, 再次想感叹性能工具的繁杂呀! 其实, 只要把相应的系统工作原理捋明白, 工具使用并不难.")]),s._v(" "),a("h5",{attrs:{id:"_3-性能指标和工具的联系-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-性能指标和工具的联系-2"}},[s._v("#")]),s._v(" 3.性能指标和工具的联系")]),s._v(" "),a("p",[s._v("同前面 CPU 和内存板块的学习一样, 建议"),a("strong",[s._v("从指标和工具")]),s._v("两个不同维度出发, 整理记忆.")]),s._v(" "),a("ul",[a("li",[s._v("从 I/O 指标出发, 更容易把性能工具同系统工作原理关联起来, 对性能问题有宏观的认识和把握.")]),s._v(" "),a("li",[s._v("而从性能工具出发, 可以更快上手使用工具, 迅速找出想观察的性能指标. 特别是在工具有限的情况下, 更要充分利用好手头的每一个工具, 少量工具也要尽力挖掘出大量信息.")])]),s._v(" "),a("p",[a("strong",[s._v("第一个维度, 从文件系统和磁盘 I/O 的性能指标出发. 换句话说, 当想查看某个性能指标时, 要清楚知道, 哪些工具可以做到.")])]),s._v(" "),a("p",[s._v("根据不同的性能指标, 对提供指标的性能工具进行分类和理解. 这样在实际排查性能问题时, 就可以清楚知道, 什么工具可以提供想要的指标, 而不是毫无根据地挨个尝试, 撞运气.")]),s._v(" "),a("p",[s._v("虽然不需要把所有相关的工具背下来, 但如果能记清楚每个指标对应的工具特性, 实际操作起来, 一定能更高效, 灵活. 这里把 I/O 性能指标的工具做成了一个表格, 方便梳理关系和理解记忆.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/bd7029420118e1263365b11289c37518-20230731161933-bzuttwv.png",alt:""}})]),s._v(" "),a("p",[s._v("下面再来看第二个维度.")]),s._v(" "),a("p",[a("strong",[s._v("第二个维度, 从工具出发. 也就是当已经安装了某个工具后, 要知道这个工具能提供哪些指标.")])]),s._v(" "),a("p",[s._v("这在实际环境中, 特别是生产环境中也是非常重要的. 因为很多情况下, 你并没有权限安装新的工具包, 只能最大化地利用好系统已有的工具, 而这就需要你对它们有足够的了解. 具体到每个工具的使用方法, 一般都支持丰富的配置选项. 不过不用担心, 这些配置选项并不用背下来. 你只要知道有哪些工具, 以及这些工具的基本功能是什么就够了. 真正要用到的时候, 通过 man 命令, 查它们的使用手册就可以了.")]),s._v(" "),a("p",[s._v("同样的, 也将这些常用工具汇总成了一个表格, 方便区分和理解.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/aa14525940e72cf50b5d1e36d0fecc02-20230731161933-pahi0ao.png",alt:""}})]),s._v(" "),a("h5",{attrs:{id:"_4-如何迅速分析i-o的性能瓶颈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-如何迅速分析i-o的性能瓶颈"}},[s._v("#")]),s._v(" 4.如何迅速分析I/O的性能瓶颈")]),s._v(" "),a("p",[s._v("比起前两个板块, 虽然文件系统和磁盘的 I/O 性能指标仍比较多, 但核心的性能工具, 其实就是那么几个. 熟练掌握它们, 再根据实际系统的现象, 并配合系统和应用程序的原理, I/O 性能分析就很清晰了.")]),s._v(" "),a("p",[s._v("不过, 不管怎么说, 如果每次一碰到 I/O 的性能问题, 就把上面提到的所有工具跑一遍, 肯定是不现实的. 在实际生产环境中, 需要尽可能"),a("strong",[s._v("快")]),s._v("地定位系统的瓶颈, 然后尽可能"),a("strong",[s._v("快")]),s._v("地优化性能, 也就是要又快又准地解决性能问题.")]),s._v(" "),a("p",[s._v("那有没有什么方法, 可以又快又准地找出系统的 I/O 瓶颈呢? 答案是肯定的.")]),s._v(" "),a("p",[s._v("还是那句话, "),a("mark",[a("strong",[s._v("找关联")])]),s._v(". 多种性能指标间都有一定的关联性, 不要完全孤立的看待他们. "),a("strong",[s._v("想弄清楚性能指标的关联性, 就要通晓每种性能指标的工作原理")]),s._v(". 这也是为什么在介绍每个性能指标时, 都要穿插讲解相关的系统原理.")]),s._v(" "),a("p",[s._v("以前面几期的案例为例, 如果仔细对比前面的几个案例, 从 I/O 延迟的案例到 MySQL 和 Redis 的案例, 就会发现, 虽然这些问题千差万别, 但从 I/O 角度来分析, 最开始的分析思路基本上类似, 都是:")]),s._v(" "),a("ol",[a("li",[a("strong",[s._v("先用 iostat 发现磁盘 I/O 性能瓶颈;")])]),s._v(" "),a("li",[a("strong",[s._v("再借助 pidstat, 定位出导致瓶颈的进程;")])]),s._v(" "),a("li",[a("strong",[s._v("随后分析进程的 I/O 行为;")])]),s._v(" "),a("li",[a("strong",[s._v("最后结合应用程序的原理, 分析这些 I/O 的来源.")])])]),s._v(" "),a("p",[a("strong",[s._v("所以, 为了缩小排查范围, 通常会先运行那几个支持指标较多的工具, 如 iostat, vmstat, pidstat 等.")]),s._v("  然后再根据观察到的现象, 结合系统和应用程序的原理, 寻找下一步的分析方向. 下面把这个过程画成了一张图.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/86c905a3f71b9a5f9a1358d64d2327cb-20230731161933-55t6s4j.png",alt:""}})]),s._v(" "),a("p",[s._v("图中列出了最常用的几个文件系统和磁盘 I/O 性能分析工具, 以及相应的分析流程, 箭头则表示分析方向. 这其中, iostat, vmstat, pidstat 是最核心的几个性能工具, 它们也提供了最重要的 I/O 性能指标.")]),s._v(" "),a("p",[s._v("这个图中只列出了最核心的几个性能工具, 并没有列出前面表格中的所有工具. 这么做, 一方面是不想用大量的工具列表吓到你. 在学习之初就接触所有核心或小众的工具, 不见得是好事. 另一方面, 也是希望你能先把重心放在核心工具上, 毕竟熟练掌握它们, 就可以解决大多数问题.")]),s._v(" "),a("h5",{attrs:{id:"_5-小结-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-小结-7"}},[s._v("#")]),s._v(" 5.小结")]),s._v(" "),a("p",[s._v("本节复习了常见的文件系统和磁盘 I/O 性能指标, 梳理了常见的 I/O 性能观测工具, 并建立了性能指标和工具的关联. 最后还总结了快速分析 I/O 性能问题的思路.")]),s._v(" "),a("h4",{attrs:{id:"_31-套路篇-磁盘i-o性能优化的几个思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_31-套路篇-磁盘i-o性能优化的几个思路"}},[s._v("#")]),s._v(" 31-套路篇:磁盘I/O性能优化的几个思路")]),s._v(" "),a("p",[s._v("上一节回顾了常见的文件系统和磁盘 I/O 性能指标, 梳理了核心的 I/O 性能观测工具, 最后还总结了快速分析 I/O 性能问题的思路.")]),s._v(" "),a("p",[s._v("虽然 I/O 的性能指标很多, 相应的性能分析工具也有好几个, 但理解了各种指标的含义后, 就会发现它们其实都有一定的关联. 顺着这些关系往下理解, 就会发现掌握这些常用的瓶颈分析思路, 其实并不难.")]),s._v(" "),a("p",[s._v("找出了 I/O 的性能瓶颈后, 下一步要做的就是优化了, 也就是"),a("strong",[s._v("如何以最快的速度完成 I/O 操作, 或者换个思路, 减少甚至避免磁盘的 I/O 操作")]),s._v(".")]),s._v(" "),a("p",[s._v("本节就来说说, "),a("strong",[s._v("优化 I/O 性能问题的思路和注意事项")]),s._v(".")]),s._v(" "),a("h5",{attrs:{id:"_1-i-o基准测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-i-o基准测试"}},[s._v("#")]),s._v(" 1.I/O基准测试")]),s._v(" "),a("p",[s._v("按照我的习惯, 优化之前, 我会先问自己, I/O 性能"),a("mark",[a("strong",[s._v("优化的目标是什么")])]),s._v("? 换句话说, 这些 I/O 性能指标(比如 IOPS, 吞吐量, 延迟等), 要达到多少才合适呢?")]),s._v(" "),a("p",[s._v("事实上, I/O 性能指标的具体标准, 每个人估计会有不同的答案, 因为每个人的应用场景, 使用的文件系统和物理磁盘等, 都有可能不一样. 为了更客观合理地评估优化效果, "),a("strong",[s._v("首先应该对磁盘和文件系统进行基准测试, 得到文件系统或者磁盘 I/O 的极限性能")]),s._v(".")]),s._v(" "),a("p",[a("strong",[s._v("fio(Flexible I/O Tester)正是最常用的文件系统和磁盘 I/O 性能基准测试工具")]),s._v(". 它提供了大量的可定制化选项, 可以用来测试, 裸盘或者文件系统在各种场景下的 I/O 性能, 包括了不同块大小, 不同 I/O 引擎以及是否使用缓存等场景.")]),s._v(" "),a("p",[s._v("fio 的选项非常多, 下面会通过几个常见场景的测试方法, 介绍一些最常用的选项. 这些常见场景包括随机读, 随机写, 顺序读以及顺序写等, 可以执行下面这些命令来测试:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 随机读")]),s._v("\nfio "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("randread "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-direct")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-iodepth")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-rw")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("randread "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-ioengine")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("libaio "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-bs")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("4k "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-size")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("1G "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-numjobs")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-runtime")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-group_reporting")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-filename")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/dev/sdb\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 随机写")]),s._v("\nfio "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("randwrite "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-direct")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-iodepth")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-rw")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("randwrite "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-ioengine")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("libaio "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-bs")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("4k "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-size")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("1G "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-numjobs")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-runtime")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-group_reporting")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-filename")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/dev/sd \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 顺序读")]),s._v("\nfio "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("read "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-direct")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-iodepth")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-rw")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("read "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-ioengine")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("libaio "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-bs")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("4k "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-size")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("1G "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-numjobs")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-runtime")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-group_reporting")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-filename")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/dev/sdb\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 顺序写")]),s._v("\nfio "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("write "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-direct")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-iodepth")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-rw")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("write "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-ioengine")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("libaio "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-bs")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("4k "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-size")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("1G "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-numjobs")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-runtime")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-group_reporting")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-filename")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/dev/sdb \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("在这其中, 有几个参数需要重点关注一下.")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("direct, 表示是否跳过系统缓存")]),s._v(". 上面示例中设置的 1, 就表示跳过系统缓存.")]),s._v(" "),a("li",[a("strong",[s._v("iodepth, 表示使用异步 I/O(asynchronous I/O, 简称 AIO)时, 同时发出的 I/O 请求上限")]),s._v(". 在上面的示例中设置的是 64.")]),s._v(" "),a("li",[a("strong",[s._v("rw, 表示 I/O 模式")]),s._v(". 示例中, read/write 分别表示顺序读/写, 而 randread/randwrite 则分别表示随机读/写.")]),s._v(" "),a("li",[a("strong",[s._v("ioengine, 表示 I/O 引擎, 它支持同步(sync), 异步(libaio), 内存映射(mmap), 网络(net)等各种 I/O 引擎")]),s._v(". 上面示例中设置的 libaio 表示使用异步 I/O.")]),s._v(" "),a("li",[a("strong",[s._v("bs, 表示 I/O 的大小")]),s._v(". 示例中设置成了 4K(这也是默认值).")]),s._v(" "),a("li",[a("strong",[s._v("filename, 表示文件路径")]),s._v(", 当然, 它可以是磁盘路径(测试磁盘性能), 也可以是文件路径(测试文件系统性能). 示例中它设置成了磁盘 "),a("code",[s._v("/dev/sdb")]),s._v("​. 不过注意, 用磁盘路径测试写, 会破坏这个磁盘中的文件系统, 所以在使用前, 一定要事先做好数据备份.")])]),s._v(" "),a("p",[s._v("下面就是使用 fio 测试顺序读的一个报告示例.")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("read: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("g"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("rw")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("read, "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("bs")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("R"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" 4096B-4096B, "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("W"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" 4096B-4096B, "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" 4096B-4096B, "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ioengine")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("libaio, "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("iodepth")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v("\nfio-3.1\nStarting "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" process\nJobs: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("f"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("R"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100.0")]),s._v("%"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("r"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(".7MiB/s,w"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("0KiB/s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("r"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4280")]),s._v(",w"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" IOPS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("eta 00m:00s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nread: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("groupid"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("jobs")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("err")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(": "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("pid")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("17966")]),s._v(": Sun Dec "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),s._v(" 08:31:48 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2018")]),s._v("\n   read: "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("IOPS")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4257")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("BW")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(".6MiB/s "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("17")]),s._v(".4MB/s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("1024MiB/61568msec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    slat "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("usec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("min")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("max")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2566")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("avg")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.29")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("stdev")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21.76")]),s._v("\n    clat "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("usec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("min")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("228")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("max")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("407360")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("avg")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15024.30")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("stdev")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20524.39")]),s._v("\n     lat "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("usec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("min")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("243")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("max")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("407363")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("avg")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15029.12")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("stdev")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20524.26")]),s._v("\n    clat percentiles "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("usec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":\n     "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("1.00th")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("498")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(",  "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("5.00th")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1020")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("10.00th")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1319")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("20.00th")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1713")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(",\n     "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("30.00th")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1991")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("40.00th")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2212")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("50.00th")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2540")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("60.00th")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2933")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(",\n     "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("70.00th")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5407")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("80.00th")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("44303")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("90.00th")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("45351")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("95.00th")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("45876")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(",\n     "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("99.00th")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("46924")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("99.50th")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("46924")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("99.90th")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("48497")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("99.95th")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("49021")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(",\n     "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("99.99th")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("404751")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n   bw "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("  KiB/s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("min")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8208")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("max")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18832")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("per")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("99.85")]),s._v("%, "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("avg")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("17005.35")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("stdev")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("998.94")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("samples")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),s._v("\n   iops        "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("min")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2052")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("max")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4708")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("avg")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4251.30")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("stdev")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("249.74")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("samples")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),s._v("\n  lat "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("usec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("250")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.01")]),s._v("%, "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("500")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.03")]),s._v("%, "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("750")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.69")]),s._v("%, "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("1000")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.07")]),s._v("%\n  lat "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("msec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("25.64")]),s._v("%, "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("37.58")]),s._v("%, "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.08")]),s._v("%, "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("20")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.02")]),s._v("%, "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("50")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("29.86")]),s._v("%\n  lat "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("msec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("100")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.01")]),s._v("%, "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("500")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.02")]),s._v("%\n  cpu          "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("usr")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.02")]),s._v("%, "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("sys")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.97")]),s._v("%, "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ctx")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("33312")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("majf")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("minf")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("75")]),s._v("\n  IO depths    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v("%, "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v("%, "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v("%, "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("8")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v("%, "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("16")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v("%, "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("32")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v("%, "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100.0")]),s._v("%\n     submit    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("%, "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100.0")]),s._v("%, "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("8")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("%, "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("16")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("%, "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("32")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("%, "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("64")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("%, "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("%\n     complete  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("%, "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100.0")]),s._v("%, "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("8")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("%, "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("16")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("%, "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("32")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("%, "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("64")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v("%, "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("%\n     issued rwt: "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("total")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("262144,0")]),s._v(",0, "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("short")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0,0")]),s._v(",0, "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("dropped")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0,0")]),s._v(",0\n     latency   "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("target")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("window")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("percentile")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100.00")]),s._v("%, "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("depth")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v("\n \nRun status group "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("all "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("jobs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":\n   READ: "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("bw")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(".6MiB/s "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("17")]),s._v(".4MB/s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(".6MiB/s-16.6MiB/s "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("17")]),s._v(".4MB/s-17.4MB/s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("io")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("1024MiB "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("1074MB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("run")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("61568")]),s._v("-61568msec\n \nDisk stats "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("read/write"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":\n  sdb: "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ios")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("261897")]),s._v("/0, "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("merge")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("/0, "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ticks")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3912108")]),s._v("/0, "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("in_queue")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3474336")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("util")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("90.09")]),s._v("% \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br")])]),a("p",[s._v("这个报告中, 需要重点关注的是, slat, clat, lat, 以及 bw 和 iops 这几行.")]),s._v(" "),a("p",[s._v("先来看刚刚提到的前三个参数. 事实上, "),a("strong",[s._v("slat, clat, lat 都是指 I/O 延迟(latency)")]),s._v(" . 不同之处在于:")]),s._v(" "),a("ul",[a("li",[s._v("slat 是指从 I/O 提交到实际执行 I/O 的时长(Submission latency);")]),s._v(" "),a("li",[s._v("clat 是指从 I/O 提交到 I/O 完成的时长(Completion latency);")]),s._v(" "),a("li",[s._v("lat 是指从 fio 创建 I/O 到 I/O 完成的总时长.")])]),s._v(" "),a("p",[s._v("这里需要注意的是, 对同步 I/O 来说, 由于 I/O 提交和 I/O 完成是一个动作, 所以 slat 实际上就是 I/O 完成的时间, 而 clat 是 0. 而从示例可以看到, 使用异步 I/O(libaio)时, lat 近似等于 slat + clat 之和.")]),s._v(" "),a("p",[s._v("再来看 bw, 它代表吞吐量. 在上面的示例中可以看到, 平均吞吐量大约是 16 MB(17005 KiB/1024).")]),s._v(" "),a("p",[s._v("最后的 iops, 其实就是每秒 I/O 的次数, 上面示例中的平均 IOPS 为 4250.")]),s._v(" "),a("p",[s._v("通常情况下, 应用程序的 I/O 都是读写并行的, 而且每次的 I/O 大小也不一定相同. 所以, 刚刚说的这几种场景, 并不能精确模拟应用程序的 I/O 模式. 那怎么才能精确模拟应用程序的 I/O 模式呢?")]),s._v(" "),a("p",[s._v("幸运的是, "),a("strong",[s._v("fio 支持 I/O 的重放")]),s._v(". 借助前面提到过的 blktrace, 再配合上 fio, 就可以实现对应用程序 I/O 模式的基准测试. 需要先用 blktrace, 记录磁盘设备的 I/O 访问情况; 然后使用 fio, 重放 blktrace 的记录.")]),s._v(" "),a("p",[s._v("比如可以运行下面的命令来操作:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用 blktrace 跟踪磁盘 I/O, 注意指定应用程序正在操作的磁盘")]),s._v("\n$ blktrace /dev/sdb\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看 blktrace 记录的结果")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ls")]),s._v("\nsdb.blktrace.0  sdb.blktrace.1\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将结果转化为二进制文件")]),s._v("\n$ blkparse sdb "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" sdb.bin\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用 fio 重放日志")]),s._v("\n$ fio "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("replay "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--filename")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/dev/sdb "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--direct")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--read_iolog")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("sdb.bin \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("这样就通过 blktrace+fio 的组合使用, 得到了"),a("strong",[s._v("应用程序 I/O 模式的基准测试报告")]),s._v(".")]),s._v(" "),a("h5",{attrs:{id:"_2-i-o性能优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-i-o性能优化"}},[s._v("#")]),s._v(" 2.I/O性能优化")]),s._v(" "),a("p",[s._v("得到 I/O 基准测试报告后, 再用上一节总结的性能分析套路, 找出 I/O 的性能瓶颈并优化, 就是水到渠成的事情了. 当然, 想要优化 I/O 性能, 肯定离不开 Linux 系统的 I/O 栈图的思路辅助. 可以结合下面的 I/O 栈图再回顾一下.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/718eb7d89ce098f493d77944019a65a7-20230731161933-3soqp0i.png",alt:""}})]),s._v(" "),a("p",[s._v("下面就从"),a("mark",[a("strong",[s._v("应用程序, 文件系统以及磁盘角度, 分别看看 I/O 性能优化的基本思路")])]),s._v(".")]),s._v(" "),a("h6",{attrs:{id:"_1-应用程序优化-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-应用程序优化-2"}},[s._v("#")]),s._v(" (1)应用程序优化")]),s._v(" "),a("p",[s._v("首先来看一下, "),a("strong",[s._v("从应用程序的角度有哪些优化 I/O 的思路")]),s._v(".")]),s._v(" "),a("p",[s._v("应用程序处于整个 I/O 栈的最上端, 它可以通过系统调用, 来调整 I/O 模式(如顺序还是随机, 同步还是异步),  同时, 它也是 I/O 数据的最终来源. 在我看来, 可以有这么几种方式来优化应用程序的 I/O 性能.")]),s._v(" "),a("p",[a("strong",[s._v("第一, 可以用追加写代替随机写, 减少寻址开销, 加快 I/O 写的速度")]),s._v(".")]),s._v(" "),a("p",[a("strong",[s._v("第二, 可以借助缓存 I/O, 充分利用系统缓存, 降低实际 I/O 的次数")]),s._v(".")]),s._v(" "),a("p",[a("strong",[s._v("第三, 可以在应用程序内部构建自己的缓存, 或者用 Redis 这类外部缓存系统")]),s._v(". 这样, 一方面能在应用程序内部, 控制缓存的数据和生命周期; 另一方面, 也能降低其他应用程序使用缓存对自身的影响. 比如, 在前面的 MySQL 案例中已经见识过, 只是因为一个干扰应用清理了系统缓存, 就会导致 MySQL 查询有数百倍的性能差距(0.1s vs 15s). 再如, C 标准库提供的 fopen, fread 等库函数, 都会利用标准库的缓存, 减少磁盘的操作. 而直接使用 open, read 等系统调用时, 就只能利用操作系统提供的页缓存和缓冲区等, 而没有库函数的缓存可用.")]),s._v(" "),a("p",[a("strong",[s._v("第四, 在需要频繁读写同一块磁盘空间时, 可以用 mmap 代替 read/write, 减少内存的拷贝次数")]),s._v(".")]),s._v(" "),a("p",[a("strong",[s._v("第五, 在需要同步写的场景中, 尽量将写请求合并, 而不是让每个请求都同步写入磁盘, 即可以用 fsync() 取代 O_SYNC")]),s._v(".")]),s._v(" "),a("p",[a("strong",[s._v("第六, 在多个应用程序共享相同磁盘时, 为了保证 I/O 不被某个应用完全占用, 推荐使用 cgroups 的 I/O 子系统, 来限制进程/进程组的 IOPS 以及吞吐量")]),s._v(".")]),s._v(" "),a("p",[a("strong",[s._v("最后, 在使用 CFQ 调度器时, 可以用 ionice 来调整进程的 I/O 调度优先级, 特别是提高核心应用的 I/O 优先级")]),s._v(". ionice 支持三个优先级类: Idle, Best-effort 和 Realtime. 其中, Best-effort 和 Realtime 还分别支持 0-7 的级别, 数值越小, 则表示优先级别越高.")]),s._v(" "),a("h6",{attrs:{id:"_2-文件系统优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-文件系统优化"}},[s._v("#")]),s._v(" (2)文件系统优化")]),s._v(" "),a("p",[s._v("应用程序访问普通文件时, 实际是"),a("strong",[s._v("由文件系统间接负责, 文件在磁盘中的读写")]),s._v(". 所以, 跟文件系统中相关的也有很多优化 I/O 性能的方式.")]),s._v(" "),a("p",[a("strong",[s._v("第一, 可以根据实际负载场景的不同, 选择最适合的文件系统")]),s._v(". 比如 Ubuntu 默认使用 ext4 文件系统, 而 CentOS 7 默认使用 xfs 文件系统. 相比于 ext4, xfs 支持更大的磁盘分区和更大的文件数量, 如 xfs 支持大于 16TB 的磁盘. 但是 xfs 文件系统的缺点在于无法收缩, 而 ext4 则可以.")]),s._v(" "),a("p",[a("strong",[s._v("第二, 在选好文件系统后, 还可以进一步优化文件系统的配置选项, 包括文件系统的特性(如 ext_attr, dir_index), 日志模式(如 journal, ordered, writeback), 挂载选项(如 noatime)等等")]),s._v(". 比如使用 tune2fs 这个工具, 可以调整文件系统的特性(tune2fs 也常用来查看文件系统超级块的内容). 而通过 "),a("code",[s._v("/etc/fstab")]),s._v("​, 或者 mount 命令行参数, 可以调整文件系统的日志模式和挂载选项等.")]),s._v(" "),a("p",[a("strong",[s._v("第三, 可以优化文件系统的缓存")]),s._v(". 比如可以优化 pdflush 脏页的刷新频率(比如设置 dirty_expire_centisecs 和 dirty_writeback_centisecs)以及脏页的限额(比如调整 dirty_background_ratio 和 dirty_ratio 等). 再如还可以优化内核回收目录项缓存和索引节点缓存的倾向, 即调整 vfs_cache_pressure("),a("code",[s._v("/proc/sys/vm/vfs_cache_pressure")]),s._v("​, 默认值 100), 数值越大, 就表示越容易回收.")]),s._v(" "),a("p",[s._v("最"),a("strong",[s._v("后, 在不需要持久化时, 还可以用内存文件系统 tmpfs, 以获得更好的 I/O 性能")]),s._v(". tmpfs 把数据直接保存在内存中, 而不是磁盘中. 比如 "),a("code",[s._v("/dev/shm/")]),s._v("​, 就是大多数 Linux 默认配置的一个内存文件系统, 它的大小默认为总内存的一半.")]),s._v(" "),a("h6",{attrs:{id:"_3-磁盘优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-磁盘优化"}},[s._v("#")]),s._v(" (3)磁盘优化")]),s._v(" "),a("p",[s._v("数据的持久化存储, 最终还是要落到具体的物理磁盘中, 同时磁盘也是整个 I/O 栈的最底层. 从磁盘角度出发, 自然也有很多有效的性能优化方法.")]),s._v(" "),a("p",[a("strong",[s._v("第一, 最简单有效的优化方法, 就是换用性能更好的磁盘, 比如用 SSD 替代 HDD")]),s._v(".")]),s._v(" "),a("p",[a("strong",[s._v("第二, 可以使用 RAID , 把多块磁盘组合成一个逻辑磁盘, 构成冗余独立磁盘阵列")]),s._v(". 这样做既可以提高数据的可靠性, 又可以提升数据的访问性能.")]),s._v(" "),a("p",[a("strong",[s._v("第三, 针对磁盘和应用程序 I/O 模式的特征, 可以选择最适合的 I/O 调度算法")]),s._v(". 比方说, SSD 和虚拟机中的磁盘, 通常用的是 noop 调度算法. 而数据库应用更推荐使用 deadline 算法.")]),s._v(" "),a("p",[a("strong",[s._v("第四, 可以对应用程序的数据, 进行磁盘级别的隔离")]),s._v(". 比如可以为日志, 数据库等 I/O 压力比较重的应用, 配置单独的磁盘.")]),s._v(" "),a("p",[a("strong",[s._v("第五, 在顺序读比较多的场景中, 可以增大磁盘的预读数据")]),s._v(", 比如可以通过下面两种方法, 调整 "),a("code",[s._v("/dev/sdb")]),s._v("​ 的预读大小.")]),s._v(" "),a("ul",[a("li",[s._v("调整内核选项 "),a("code",[s._v("/sys/block/sdb/queue/read_ahead_kb")]),s._v("​, 默认大小是 128 KB, 单位为 KB.")]),s._v(" "),a("li",[s._v("使用 blockdev 工具设置, 比如 "),a("code",[s._v("blockdev --setra 8192 /dev/sdb")]),s._v("​, 注意这里的单位是 512B(0.5KB), 所以它的数值总是 read_ahead_kb 的两倍.")])]),s._v(" "),a("p",[a("strong",[s._v("第六, 可以优化内核块设备 I/O 的选项")]),s._v(". 比如, 可以调整磁盘队列的长度 "),a("code",[s._v("/sys/block/sdb/queue/nr_requests")]),s._v("​, 适当增大队列长度, 可以提升磁盘的吞吐量(当然也会导致 I/O 延迟增大).")]),s._v(" "),a("p",[s._v("最后, 要注意, 磁盘本身出现硬件错误, 也会导致 I/O 性能急剧下降, 所以发现磁盘性能急剧下降时, 还需要确认, 磁盘本身是不是出现了硬件错误. 比如可以查看 dmesg 中是否有硬件 I/O 故障的日志. 还可以使用 badblocks, smartctl 等工具, 检测磁盘的硬件问题, 或用 e2fsck 等来检测文件系统的错误. 如果发现问题, 可以使用 fsck 等工具来修复.")]),s._v(" "),a("h5",{attrs:{id:"_3-小结-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-小结-6"}},[s._v("#")]),s._v(" 3.小结")]),s._v(" "),a("p",[s._v("本节梳理了常见的文件系统和磁盘 I/O 的性能优化思路和方法. 发现 I/O 性能问题后, 不要急于动手优化, 而要先找出最重要的, 可以最大程度提升性能的问题, 然后再从 I/O 栈的不同层入手, 考虑具体的优化方法.")]),s._v(" "),a("p",[s._v("记住, "),a("strong",[s._v("磁盘和文件系统的 I/O, 通常是整个系统中最慢的一个模块. 所以在优化 I/O 问题时, 除了可以优化 I/O 的执行流程, 还可以借助更快的内存, 网络, CPU 等, 减少 I/O 调用")]),s._v(".")]),s._v(" "),a("h3",{attrs:{id:"网络性能篇"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网络性能篇"}},[s._v("#")]),s._v(" 网络性能篇")]),s._v(" "),a("h4",{attrs:{id:"_33-关于linux网络必须知道这些-上"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_33-关于linux网络必须知道这些-上"}},[s._v("#")]),s._v(" 33-关于Linux网络必须知道这些(上)")]),s._v(" "),a("p",[s._v("接下来将进入下一个重要模块---"),a("strong",[s._v("Linux 的网络子系统")]),s._v(". 由于网络处理的流程最复杂, 它跟前面讲到的进程调度, 中断处理, 内存管理以及 I/O 等都密不可分, 所以这里把网络模块作为最后一个资源模块来讲解.")]),s._v(" "),a("p",[s._v("同 CPU, 内存以及 I/O 一样, 网络也是 Linux 系统最核心的功能. 网络是一种把不同计算机或网络设备连接到一起的技术, 它本质上是一种进程间通信方式, 特别是跨系统的进程间通信, 必须要通过网络才能进行. 随着高并发, 分布式, 云计算, 微服务等技术的普及, "),a("strong",[s._v("网络的性能也变得越来越重要")]),s._v(".")]),s._v(" "),a("p",[s._v("那么, "),a("strong",[s._v("Linux 网络又是怎么工作的呢? 又有哪些指标衡量网络的性能呢?")]),s._v("  接下来将一起学习 Linux 网络的工作原理和性能指标.")]),s._v(" "),a("h5",{attrs:{id:"_1-网络模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-网络模型"}},[s._v("#")]),s._v(" 1.网络模型")]),s._v(" "),a("p",[s._v("说到网络, 容易想起七层负载均衡, 四层负载均衡, 或者三层设备, 二层设备等等. 那么, 这里说的二层, 三层, 四层, 七层又都是什么意思呢?")]),s._v(" "),a("p",[s._v("实际上, 这些层都来自国际标准化组织制定的"),a("strong",[s._v("开放式系统互联通信参考模型")]),s._v("(Open System Interconnection Reference Model), 简称为 "),a("strong",[s._v("OSI 网络模型")]),s._v(". 为了解决网络互联中异构设备的兼容性问题, 并解耦复杂的网络包处理流程, OSI 模型把网络互联的框架分为应用层, 表示层, 会话层, 传输层, 网络层, 数据链路层以及物理层等七层, 每个层负责不同的功能. 但是 OSI 模型还是太复杂了, 也没能提供一个可实现的方法. 所以, "),a("strong",[s._v("在 Linux 中, 实际上使用的是另一个更实用的")]),s._v("​"),a("mark",[a("strong",[s._v("四层模型, 即 TCP/IP 网络模型")])]),s._v(".")]),s._v(" "),a("p",[s._v("TCP/IP 模型, 把网络互联的框架分为"),a("strong",[s._v("应用层, 传输层, 网络层, 网络接口层")]),s._v("等四层, 其中,")]),s._v(" "),a("ul",[a("li",[s._v("应用层, 负责向用户提供一组应用程序, 比如 HTTP, FTP, DNS 等.")]),s._v(" "),a("li",[s._v("传输层, 负责端到端的通信, 比如 TCP, UDP 等.")]),s._v(" "),a("li",[s._v("网络层, 负责网络包的封装, 寻址和路由, 比如 IP, ICMP 等.")]),s._v(" "),a("li",[s._v("网络接口层, 负责网络包在物理网络中的传输, 比如 MAC 寻址, 错误侦测以及通过网卡传输网络帧等.")])]),s._v(" "),a("p",[s._v("为了更形象理解 TCP/IP 与 OSI 模型的关系, 下面画了一张图, 如下所示:")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/c17ea403d632dcaf64a847b850b968b4-20230731161933-gmxr9pn.png",alt:""}})]),s._v(" "),a("p",[s._v("当然了, 虽说 Linux 实际按照 TCP/IP 模型, 实现了网络协议栈, 但在平时的学习交流中, 习惯上还是用 OSI 七层模型来描述. 比如, 说到七层和四层负载均衡, 对应的分别是 OSI 模型中的应用层和传输层(而它们对应到 TCP/IP 模型中, 实际上是四层和三层).")]),s._v(" "),a("h5",{attrs:{id:"_2-linux网络栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-linux网络栈"}},[s._v("#")]),s._v(" 2.Linux网络栈")]),s._v(" "),a("p",[s._v("有了 TCP/IP 模型后, 在进行网络传输时, 数据包就会按照协议栈, 对上一层发来的数据进行逐层处理; 然后封装上该层的协议头, 再发送给下一层.")]),s._v(" "),a("p",[s._v("当然, 网络包在每一层的处理逻辑, 都取决于各层采用的网络协议. 比如在应用层, 一个提供 REST API 的应用, 可以使用 HTTP 协议, 把它需要传输的 JSON 数据封装到 HTTP 协议中, 然后向下传递给 TCP 层. 而封装做的事情就很简单了, 只是在原来的负载前后, 增加固定格式的元数据, 原始的负载数据并不会被修改.")]),s._v(" "),a("p",[s._v("比如, 以通过 TCP 协议通信的网络包为例, 通过下面这张图可以看到, 应用程序数据在每个层的封装格式.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/f346868d3d0db7df1f106b84756dd75b-20230731161933-8kjbbiu.png",alt:""}})]),s._v(" "),a("p",[s._v("其中:")]),s._v(" "),a("ul",[a("li",[s._v("传输层在应用程序数据前面增加了 TCP 头;")]),s._v(" "),a("li",[s._v("网络层在 TCP 数据包前增加了 IP 头;")]),s._v(" "),a("li",[s._v("而网络接口层, 又在 IP 数据包前后分别增加了帧头和帧尾.")])]),s._v(" "),a("p",[s._v("这些新增的头部和尾部, 都按照特定的"),a("strong",[s._v("协议格式填充")]),s._v(", 想了解具体格式, 可以查看协议的文档.")]),s._v(" "),a("p",[s._v("这些新增的头部和尾部, 增加了网络包的大小, 但物理链路中并不能传输任意大小的数据包. "),a("strong",[s._v("网络接口配置的最大传输单元(MTU), 就规定了最大的 IP 包大小")]),s._v(". 在最常用的以太网中, MTU 默认值是 1500(这也是 Linux 的默认值). 一旦网络包超过 MTU 的大小, 就会在"),a("strong",[s._v("网络层分片")]),s._v(", 以保证分片后的 IP 包不大于 MTU 值. 显然, MTU 越大, 需要的分包也就越少, 自然, 网络吞吐能力就越好.")]),s._v(" "),a("p",[s._v("理解了 TCP/IP 网络模型和网络包的封装原理后, 很容易能想到, Linux 内核中的网络栈, 其实也类似于 TCP/IP 的四层结构. 如下图所示, 就是 Linux 通用 IP 网络栈的示意图:")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/a8cbf1dce0262c391dc836f337a9ce2e-20230731161933-ckylkx7.png",alt:""}})]),s._v(" "),a("p",[s._v("从上到下来看这个网络栈, 可以发现:")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("最上层的应用程序, 需要通过系统调用, 来跟套接字接口进行交互")]),s._v(";")]),s._v(" "),a("li",[a("strong",[s._v("套接字的下面, 就是传输层, 网络层和网络接口层")]),s._v(";")]),s._v(" "),a("li",[a("strong",[s._v("最底层, 则是网卡驱动程序以及物理网卡设备")]),s._v(".")])]),s._v(" "),a("p",[s._v("这里简单说一下网卡. 网卡是发送和接收网络包的基本设备. 在系统启动过程中, 网卡通过内核中的网卡驱动程序注册到系统中. 而在网络收发过程中, "),a("strong",[s._v("内核通过中断跟网卡进行交互")]),s._v(". 再结合前面提到的 Linux 网络栈, 可以看出, 网络包的处理非常复杂. 所以"),a("strong",[s._v("网卡硬中断只处理最核心的网卡数据读取或发送, 而协议栈中的大部分逻辑, 都会放到软中断中处理")]),s._v(".")]),s._v(" "),a("h5",{attrs:{id:"_3-linux网络收发流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-linux网络收发流程"}},[s._v("#")]),s._v(" 3.Linux网络收发流程")]),s._v(" "),a("p",[s._v("了解了 Linux 网络栈后, 再来"),a("strong",[s._v("看看 Linux 到底是怎么收发网络包")]),s._v("的.")]),s._v(" "),a("p",[s._v("注意, 以下内容都以物理网卡为例. 事实上, Linux 还支持众多的"),a("strong",[s._v("虚拟网络设备")]),s._v(", 而它们的网络收发流程会有一些差别.")]),s._v(" "),a("h6",{attrs:{id:"_1-网络包的接收流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-网络包的接收流程"}},[s._v("#")]),s._v(" (1)网络包的接收流程")]),s._v(" "),a("p",[s._v("先来看"),a("strong",[s._v("网络包的接收")]),s._v("流程.")]),s._v(" "),a("p",[a("strong",[s._v("当一个网络帧到达网卡后, 网卡会通过 DMA 方式, 把这个网络包放到收包队列中; 然后通过硬中断, 告诉中断处理程序已经收到了网络包")]),s._v(".")]),s._v(" "),a("p",[s._v("接着, "),a("strong",[s._v("网卡中断处理程序会为网络帧分配内核数据结构(sk_buff), 并将其拷贝到 sk_buff 缓冲区中; 然后再通过软中断, 通知内核收到了新的网络帧")]),s._v(".")]),s._v(" "),a("p",[s._v("接下来, 内核协议栈从缓冲区中取出网络帧, 并"),a("strong",[s._v("通过网络协议栈, 从下到上逐层处理这个网络帧")]),s._v(". 比如,")]),s._v(" "),a("ul",[a("li",[s._v("在链路层检查报文的合法性, 找出上层协议的类型(比如 IPv4 还是 IPv6), 再去掉帧头, 帧尾, 然后交给网络层.")]),s._v(" "),a("li",[s._v("网络层取出 IP 头, 判断网络包下一步的走向, 比如是交给上层处理还是转发. 当网络层确认这个包是要发送到本机后, 就会取出上层协议的类型(比如 TCP 还是 UDP), 去掉 IP 头, 再交给传输层处理.")]),s._v(" "),a("li",[s._v("传输层取出 TCP 头或者 UDP 头后, 根据 "),a("code",[s._v("<源 IP, 源端口, 目的 IP, 目的端口>")]),s._v("​ 四元组作为标识, 找出对应的 Socket, 并把数据拷贝到 Socket 的接收缓存中.")]),s._v(" "),a("li",[s._v("最后, 应用程序就可以使用 Socket 接口, 读取到新接收到的数据了.")])]),s._v(" "),a("p",[s._v("为了更清晰表示这个流程, 下面画了一张图, 这张图的左半部分表示接收流程, 而图中的粉色箭头则表示网络包的处理路径.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/f94048a825eae20316ccf6e3c68a6550-20230731161933-5vc40b1.png",alt:""}})]),s._v(" "),a("h6",{attrs:{id:"_2-网络包的发送流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-网络包的发送流程"}},[s._v("#")]),s._v(" (2)网络包的发送流程")]),s._v(" "),a("p",[s._v("了解网络包的接收流程后, 就很容易理解网络包的"),a("strong",[s._v("发送流程")]),s._v(". 网络包的发送流程就是上图的右半部分, 很容易发现, 网络包的发送方向, 正好跟接收方向相反.")]),s._v(" "),a("ul",[a("li",[s._v("首先, 应用程序调用 Socket API(比如 sendmsg)发送网络包. 由于这是一个"),a("strong",[s._v("系统调用, 所以会陷入到内核态的套接字层中. 套接字层会把数据包放到 Socket 发送缓冲区中")]),s._v(".")]),s._v(" "),a("li",[s._v("接下来, "),a("strong",[s._v("网络协议栈从 Socket 发送缓冲区中, 取出数据包; 再按照 TCP/IP 栈, 从上到下逐层处理. 比如, 传输层和网络层, 分别为其增加 TCP 头和 IP 头, 执行路由查找确认下一跳的 IP, 并按照 MTU 大小进行分片")]),s._v(".")]),s._v(" "),a("li",[s._v("分片后的网络包, 再送到网络接口层, 进行物理地址寻址, 以找到下一跳的 MAC 地址. 然后添加帧头和帧尾, 放到发包队列中. 这一切完成后, 会有软中断通知驱动程序: 发包队列中有新的网络帧需要发送.")]),s._v(" "),a("li",[s._v("最后, 驱动程序通过 DMA, 从发包队列中读出网络帧, 并通过物理网卡把它发送出去.")])]),s._v(" "),a("h5",{attrs:{id:"_4-小结-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-小结-9"}},[s._v("#")]),s._v(" 4.小结")]),s._v(" "),a("p",[s._v("本节梳理了 Linux 网络的工作原理. 多台服务器通过网卡, 交换机, 路由器等网络设备连接到一起, 构成了相互连接的网络. 由于网络设备的异构性和网络协议的复杂性, 国际标准化组织定义了一个七层的 OSI 网络模型, 但是这个模型过于复杂, 实际工作中的事实标准, 是更为实用的 TCP/IP 模型.")]),s._v(" "),a("p",[s._v("TCP/IP 模型, 把网络互联的框架, 分为应用层, 传输层, 网络层, 网络接口层等四层, 这也是 Linux 网络栈最核心的构成部分.")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("应用程序通过套接字接口发送数据包, 先要在网络协议栈中从上到下进行逐层处理, 最终再送到网卡发送出去.")])]),s._v(" "),a("li",[a("strong",[s._v("而接收时, 同样先经过网络栈从下到上的逐层处理, 最终才会送到应用程序.")])])]),s._v(" "),a("h4",{attrs:{id:"_34-关于linux网络必须知道这些-下"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_34-关于linux网络必须知道这些-下"}},[s._v("#")]),s._v(" 34-关于Linux网络必须知道这些(下)")]),s._v(" "),a("p",[s._v("了解 Linux 网络的基本原理和收发流程后, 你肯定迫不及待想知道, 如何去观察网络的性能情况. 具体而言, "),a("strong",[s._v("哪些指标可以用来衡量 Linux 的网络性能呢")]),s._v("?")]),s._v(" "),a("h5",{attrs:{id:"_1-性能指标-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-性能指标-2"}},[s._v("#")]),s._v(" 1.性能指标")]),s._v(" "),a("p",[s._v("实际上, 通常用"),a("mark",[a("strong",[s._v("带宽, 吞吐量, 延时, PPS(Packet Per Second)等指标衡量网络的性能")])]),s._v(".")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("带宽")]),s._v(", 表示链路的最大传输速率, 单位通常为 b/s (比特/秒).")]),s._v(" "),a("li",[a("strong",[s._v("吞吐量")]),s._v(", 表示"),a("strong",[s._v("单位时间内成功传输的数据量")]),s._v(", 单位通常为 b/s(比特/秒)或者 B/s(字节/秒). 吞吐量受带宽限制, 而吞吐量/带宽, 也就是该网络的使用率.")]),s._v(" "),a("li",[a("strong",[s._v("延时")]),s._v(", 表示从网络请求发出后, 一直到收到远端响应, 所需要的时间延迟. 在不同场景中, 这一指标可能会有不同含义. 比如它可以表示建立连接需要的时间(比如 TCP 握手延时), 或一个数据包往返所需的时间(比如 RTT).")]),s._v(" "),a("li",[a("strong",[s._v("PPS")]),s._v(", 是 Packet Per Second(包/秒)的缩写, 表示"),a("strong",[s._v("以网络包为单位的传输速率")]),s._v(". PPS 通常用来评估网络的转发能力, 比如硬件交换机, 通常可以达到线性转发(即 PPS 可以达到或者接近理论最大值). 而基于 Linux 服务器的转发, 则容易受网络包大小的影响.")])]),s._v(" "),a("p",[s._v("除了这些指标, "),a("strong",[s._v("网络的可用性")]),s._v("(网络能否正常通信), "),a("strong",[s._v("并发连接数")]),s._v("(TCP 连接数量), "),a("strong",[s._v("丢包率")]),s._v("(丢包百分比), "),a("strong",[s._v("重传率")]),s._v("(重新传输的网络包比例)等也是常用的性能指标.")]),s._v(" "),a("h5",{attrs:{id:"_2-网络配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-网络配置"}},[s._v("#")]),s._v(" 2.网络配置")]),s._v(" "),a("p",[s._v("分析网络问题的第一步, 通常是查看网络接口的配置和状态. 可以使用 ifconfig 或者 ip 命令, 来查看网络的配置. 个人更推荐使用 ip 工具, 因为它提供了更丰富的功能和更易用的接口.")]),s._v(" "),a("p",[s._v("ifconfig 和 ip 分别属于软件包 net-tools 和 iproute2, iproute2 是 net-tools 的下一代. 通常情况下它们会在发行版中默认安装. 但如果找不到 ifconfig 或者 ip 命令, 可以安装这两个软件包.")]),s._v(" "),a("p",[s._v("以网络接口 eth0 为例, 可以运行下面的两个命令, 查看它的配置和状态:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ifconfig")]),s._v(" eth0\neth0: "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("flags")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("416")]),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("3")]),s._v("<")]),s._v("UP,BROADCAST,RUNNING,MULTICAST"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" mtu "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1500")]),s._v("\n      inet "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10.240")]),s._v(".0.30 netmask "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("255.240")]),s._v(".0.0 broadcast "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10.255")]),s._v(".255.255\n      inet6 fe80::20d:3aff:fe07:cf2a prefixlen "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" scopeid 0x2"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("0")]),s._v("<")]),s._v("link"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n      ether "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("78")]),s._v(":0d:3a:07:cf:3a txqueuelen "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Ethernet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n      RX packets "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("40809142")]),s._v(" bytes "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9542369803")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9.5")]),s._v(" GB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n      RX errors "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" dropped "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" overruns "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" frame "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n      TX packets "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("32637401")]),s._v(" bytes "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4815573306")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.8")]),s._v(" GB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n      TX errors "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" dropped "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" overruns "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" carrier "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" collisions "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n​\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-s")]),s._v(" addr show dev eth0\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(": eth0: "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("BROADCAST,MULTICAST,UP,LOWER_UP"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" mtu "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1500")]),s._v(" qdisc mq state UP group default qlen "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v("\n  link/ether "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("78")]),s._v(":0d:3a:07:cf:3a brd ff:ff:ff:ff:ff:ff\n  inet "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10.240")]),s._v(".0.30/12 brd "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10.255")]),s._v(".255.255 scope global eth0\n      valid_lft forever preferred_lft forever\n  inet6 fe80::20d:3aff:fe07:cf2a/64 scope "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("link")]),s._v("\n      valid_lft forever preferred_lft forever\n  RX: bytes packets errors dropped overrun mcast\n   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9542432350")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("40809397")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("193")]),s._v("\n  TX: bytes packets errors dropped carrier collsns\n   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4815625265")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("32637658")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])]),a("p",[s._v("可以看到, ifconfig 和 ip 命令输出的指标基本相同, 只是显示格式略微不同. 比如, 它们"),a("strong",[s._v("都包括了网络接口的状态标志, MTU 大小, IP, 子网, MAC 地址以及网络包收发的统计信息")]),s._v(".")]),s._v(" "),a("p",[s._v("这些具体指标的含义, 在文档中都有详细的说明, 不过这里有几个"),a("strong",[s._v("跟网络性能密切相关的指标")]),s._v(", 需要特别关注一下.")]),s._v(" "),a("p",[a("strong",[s._v("第一, 网络接口的状态标志")]),s._v(". ifconfig 输出中的 RUNNING, 或 ip 输出中的 LOWER_UP, 都表示物理网络是连通的, 即网卡已经连接到了交换机或者路由器中. 如果看不到它们, 通常表示网线被拔掉了.")]),s._v(" "),a("p",[a("strong",[s._v("第二, MTU 的大小")]),s._v(". MTU 默认大小是 1500, 根据网络架构的不同(比如是否使用了 VXLAN 等叠加网络), 可能需要调大或者调小 MTU 的数值.")]),s._v(" "),a("p",[a("strong",[s._v("第三, 网络接口的 IP 地址, 子网以及 MAC 地址")]),s._v(". 这些都是保障网络功能正常工作所必需的, 需要确保配置正确.")]),s._v(" "),a("p",[a("strong",[s._v("第四, 网络收发的字节数, 包数, 错误数以及丢包情况")]),s._v(", 特别是 TX 和 RX 部分的 errors, dropped, overruns, carrier 以及 collisions 等指标不为 0 时, 通常表示出现了网络 I/O 问题. 其中:")]),s._v(" "),a("ul",[a("li",[s._v("errors 表示发生错误的数据包数, 比如校验错误, 帧同步错误等;")]),s._v(" "),a("li",[s._v("dropped 表示丢弃的数据包数, 即数据包已经收到了 Ring Buffer, 但因为内存不足等原因丢包;")]),s._v(" "),a("li",[s._v("overruns 表示超限数据包数, 即网络 I/O 速度过快, 导致 Ring Buffer 中的数据包来不及处理(队列满)而导致的丢包;")]),s._v(" "),a("li",[s._v("carrier 表示发生 carrirer 错误的数据包数, 比如双工模式不匹配, 物理电缆出现问题等;")]),s._v(" "),a("li",[s._v("collisions 表示碰撞数据包数.")])]),s._v(" "),a("h5",{attrs:{id:"_3-套接字信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-套接字信息"}},[s._v("#")]),s._v(" 3.套接字信息")]),s._v(" "),a("p",[s._v("ifconfig 和 ip 只显示了网络接口收发数据包的"),a("strong",[s._v("统计信息")]),s._v(", 但在实际的性能问题中, 网络协议栈中的统计信息, 也必须关注. 可以"),a("strong",[s._v("用 netstat 或者 ss 来查看套接字, 网络栈, 网络接口以及路由表的信息")]),s._v(". 个人更推荐使用 ss 来查询网络的连接信息, 因为它比 netstat 提供了更好的性能(速度更快).")]),s._v(" "),a("p",[s._v("比如, 可以执行下面的命令, 查询套接字信息:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# head -n 3 表示只显示前面 3 行")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -l 表示只显示监听套接字")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -n 表示显示数字地址和端口 (而不是名字)")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -p 表示显示进程信息")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("netstat")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-nlp")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("head")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-n")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\nActive Internet connections "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("only servers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name\ntcp        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.53:53           "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(".0.0:*               LISTEN      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("840")]),s._v("/systemd-resolve\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -l 表示只显示监听套接字")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -t 表示只显示 TCP 套接字")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -n 表示显示数字地址和端口 (而不是名字)")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -p 表示显示进程信息")]),s._v("\n$ ss "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-ltnp")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("head")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-n")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\nState    Recv-Q    Send-Q        Local Address:Port        Peer Address:Port\nLISTEN   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("128")]),s._v("           "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.53%lo:53               "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(".0.0:*        users:"),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("((")]),s._v('"systemd'),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v('resolve"'),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("pid"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("840")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("fd"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("))")])]),s._v("\nLISTEN   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("128")]),s._v("                 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(".0.0:22               "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(".0.0:*        users:"),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("((")]),s._v('"sshd"'),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("pid"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1459")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("fd"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("))")])]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[s._v("netstat 和 ss 的输出也是类似的, 都展示了套接字的状态, 接收队列, 发送队列, 本地地址, 远端地址, 进程 PID 和进程名称等.")]),s._v(" "),a("p",[s._v("其中, 接收队列(Recv-Q)和发送队列(Send-Q)需要特别关注, 它们通常应该是 0. 当"),a("strong",[s._v("发现它们不是 0 时, 说明有网络包的堆积发生")]),s._v(". 当然还要注意, 在不同套接字状态下, 它们的含义不同.")]),s._v(" "),a("p",[s._v("当套接字处于连接状态(Established)时,")]),s._v(" "),a("ul",[a("li",[s._v("Recv-Q 表示套接字缓冲还没有被应用程序取走的字节数(即接收队列长度).")]),s._v(" "),a("li",[s._v("而 Send-Q 表示还没有被远端主机确认的字节数(即发送队列长度).")])]),s._v(" "),a("p",[s._v("当套接字处于监听状态(Listening)时,")]),s._v(" "),a("ul",[a("li",[s._v("Recv-Q 表示 syn backlog 的当前值.")]),s._v(" "),a("li",[s._v("而 Send-Q 表示最大的 syn backlog 值.")])]),s._v(" "),a("p",[s._v("而 syn backlog 是 TCP 协议栈中的"),a("strong",[s._v("半连接队列长度")]),s._v(", 相应的也有一个全连接队列(accept queue), 它们都是维护 TCP 状态的重要机制. 所谓"),a("strong",[s._v("半连接")]),s._v(", 就是还没有完成 TCP 三次握手的连接, 连接只进行了一半, 而服务器收到了客户端的 SYN 包后, 就会把这个连接放到半连接队列中, 然后再向客户端发送 SYN+ACK 包. 而"),a("strong",[s._v("全连接")]),s._v(", 则是指服务器收到了客户端的 ACK, 完成了 TCP 三次握手, 然后就会把这个连接挪到全连接队列中. 这些全连接中的套接字, 还需要再被 accept() 系统调用取走, 这样服务器就可以开始真正处理客户端的请求了.")]),s._v(" "),a("h5",{attrs:{id:"_4-协议栈统计信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-协议栈统计信息"}},[s._v("#")]),s._v(" 4.协议栈统计信息")]),s._v(" "),a("p",[s._v("类似的, 使用 netstat 或 ss, 也可以查看协议栈的信息:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("netstat")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-s")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\nTcp:\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3244906")]),s._v(" active connection openings\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("23143")]),s._v(" passive connection openings\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("115732")]),s._v(" failed connection attempts\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2964")]),s._v(" connection resets received\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" connections established\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13025010")]),s._v(" segments received\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("17606946")]),s._v(" segments sent out\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("44438")]),s._v(" segments retransmitted\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),s._v(" bad segments received\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5315")]),s._v(" resets sent\n    InCsumErrors: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n \n$ ss "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-s")]),s._v("\nTotal: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("186")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("kernel "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1446")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nTCP:   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("estab "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(", closed "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(", orphaned "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(", synrecv "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(", timewait "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("/0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(", ports "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n \nTransport Total     IP        IPv6\n*\t  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1446")]),s._v("      -         -\nRAW\t  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nUDP\t  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\nTCP\t  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br")])]),a("p",[s._v("这些协议栈的统计信息都很直观. ss 只显示已经连接, 关闭, 孤儿套接字等简要统计, 而 netstat 则提供的是更详细的网络协议栈信息. 比如, 上面 netstat 的输出示例, 就展示了 TCP 协议的主动连接, 被动连接, 失败重试, 发送和接收的分段数量等各种信息.")]),s._v(" "),a("h5",{attrs:{id:"_5-网络吞吐和pps"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-网络吞吐和pps"}},[s._v("#")]),s._v(" 5.网络吞吐和PPS")]),s._v(" "),a("p",[s._v("接下来再来看看, 如何"),a("strong",[s._v("查看系统当前的网络吞吐量和 PPS")]),s._v(". 在这里, 推荐使用老朋友 sar, 在前面的 CPU, 内存和 I/O 模块中, 前面已经多次用到它.")]),s._v(" "),a("p",[a("strong",[s._v("给 sar 增加 -n 参数就可以查看网络的统计信息")]),s._v(", 比如网络接口(DEV), 网络接口错误(EDEV), TCP, UDP, ICMP 等等. 执行下面的命令, 就可以得到网络接口统计信息:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 数字 1 表示每隔 1 秒输出一组数据")]),s._v("\n$ sar "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-n")]),s._v(" DEV "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nLinux "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.15")]),s._v(".0-1035-azure "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ubuntu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \t01/06/19 \t_x86_64_\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" CPU"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v(":21:40        IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s   %ifutil\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v(":21:41         eth0     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5.79")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.25")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v(":21:41      docker0      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v(":21:41           lo      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("这儿输出的指标比较多, 来简单解释下它们的含义.")]),s._v(" "),a("ul",[a("li",[s._v("rxpck/s 和 txpck/s 分别是"),a("strong",[s._v("接收和发送的 PPS")]),s._v(", 单位为包/秒.")]),s._v(" "),a("li",[s._v("rxkB/s 和 txkB/s 分别是"),a("strong",[s._v("接收和发送的吞吐量")]),s._v(", 单位是 KB/秒.")]),s._v(" "),a("li",[s._v("rxcmp/s 和 txcmp/s 分别是"),a("strong",[s._v("接收和发送的压缩数据包数")]),s._v(", 单位是包/秒.")]),s._v(" "),a("li",[s._v("%ifutil 是网络接口的使用率, 即半双工模式下为 (rxkB/s+txkB/s)/Bandwidth, 而全双工模式下为 max(rxkB/s, txkB/s)/Bandwidth.")])]),s._v(" "),a("p",[s._v("其中, Bandwidth 可以用 ethtool 来查询, 它的单位通常是 Gb/s 或者 Mb/s, 不过注意这里小写字母 b, 表示比特而不是字节. 通常提到的千兆网卡, 万兆网卡等, 单位也都是比特. 如下可以看到, 我的 eth0 网卡就是一个千兆网卡:")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v("$ ethtool eth0 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" grep "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Speed")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Speed")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v("Mb"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("s\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h5",{attrs:{id:"_6-连通性和延时"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-连通性和延时"}},[s._v("#")]),s._v(" 6.连通性和延时")]),s._v(" "),a("p",[s._v("最后"),a("strong",[s._v("通常使用 ping, 来测试远程主机的连通性和延时, 而这基于 ICMP 协议")]),s._v(". 比如, 执行下面的命令, 就可以测试本机到 114.114.114.114 这个 IP 地址的连通性和延时:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -c3 表示发送三次 ICMP 包后停止")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ping")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("114.114")]),s._v(".114.114\nPING "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("114.114")]),s._v(".114.114 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("114.114")]),s._v(".114.114"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("56")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("84")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" bytes of data.\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" bytes from "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("114.114")]),s._v(".114.114: "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("icmp_seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("54")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("time")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("244")]),s._v(" ms\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" bytes from "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("114.114")]),s._v(".114.114: "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("icmp_seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("47")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("time")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("244")]),s._v(" ms\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" bytes from "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("114.114")]),s._v(".114.114: "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("icmp_seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("67")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("time")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("244")]),s._v(" ms\n \n--- "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("114.114")]),s._v(".114.114 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ping")]),s._v(" statistics ---\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" packets transmitted, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" received, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("% packet loss, "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("time")]),s._v(" 2001ms\nrtt min/avg/max/mdev "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("244.023")]),s._v("/244.070/244.105/0.034 ms\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("ping 的输出, 可以分为两部分.")]),s._v(" "),a("ul",[a("li",[s._v("第一部分, "),a("strong",[s._v("是每个 ICMP 请求的信息")]),s._v(", 包括 ICMP 序列号(icmp_seq), TTL(生存时间, 或者跳数)以及往返延时.")]),s._v(" "),a("li",[s._v("第二部分, 则是三次 ICMP 请求的汇总.")])]),s._v(" "),a("p",[s._v("比如上面的示例显示, 发送了 3 个网络包, 并且接收到 3 个响应, 没有丢包发生, 这说明测试主机到 114.114.114.114 是连通的; 平均往返延时(RTT)是 244ms, 也就是从发送 ICMP 开始, 到接收到 114.114.114.114 回复的确认, 总共经历 244ms.")]),s._v(" "),a("h5",{attrs:{id:"_7-小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-小结"}},[s._v("#")]),s._v(" 7.小结")]),s._v(" "),a("p",[s._v("通常使用带宽, 吞吐量, 延时等指标, 来衡量网络的性能; 相应的, 可以用 ifconfig, netstat, ss, sar, ping 等工具, 来查看这些网络的性能指标.")]),s._v(" "),a("h4",{attrs:{id:"_35-基础篇-c10k和c1000k回顾"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_35-基础篇-c10k和c1000k回顾"}},[s._v("#")]),s._v(" 35-基础篇:C10K和C1000K回顾")]),s._v(" "),a("p",[s._v("本节主要来回顾下"),a("strong",[s._v("经典的 C10K 和 C1000K 问题")]),s._v(", 以更好理解 Linux 网络的工作原理, 并进一步分析, 如何做到单机支持 C10M.")]),s._v(" "),a("p",[s._v("注意, "),a("strong",[s._v("C10K 和 C1000K 的首字母 C 是 Client 的缩写. C10K 就是单机同时处理 1 万个请求(并发连接 1 万)的问题, 而 C1000K 也就是单机支持处理 100 万个请求(并发连接 100 万)的问题")]),s._v(".")]),s._v(" "),a("h5",{attrs:{id:"_1-c10k"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-c10k"}},[s._v("#")]),s._v(" 1.C10K")]),s._v(" "),a("p",[s._v("C10K 问题最早由 Dan Kegel 在 1999 年提出. 那时的服务器还只是 32 位系统, 运行着 Linux 2.2 版本(后来又升级到了 2.4 和 2.6, 而 2.6 才支持 x86_64), 只配置了很少的内存(2GB)和千兆网卡.")]),s._v(" "),a("p",[s._v("怎么在这样的系统中支持并发 1 万的请求呢?")]),s._v(" "),a("p",[s._v("从资源上来说, 对 2GB 内存和千兆网卡的服务器来说, 同时处理 10000 个请求, 只要每个请求处理占用不到 200KB(2GB/10000)的内存和 100Kbit (1000Mbit/10000)的网络带宽就可以. 所以, 物理资源是足够的, 接下来自然是软件的问题, 特别是"),a("strong",[s._v("网络的 I/O 模型问题")]),s._v(".")]),s._v(" "),a("p",[s._v("说到 I/O 的模型, 在文件系统的原理中, 曾经介绍过文件 I/O, 其实网络 I/O 模型也类似. 在 C10K 以前, Linux 中网络处理都用同步阻塞的方式, 也就是每个请求都分配一个进程或者线程. 请求数只有 100 个时, 这种方式自然没问题, 但增加到 10000 个请求时, 10000 个进程或线程的调度, 上下文切换乃至它们占用的内存, 都会成为瓶颈.")]),s._v(" "),a("p",[s._v("既然每个请求分配一个线程的方式不合适, 那么为了支持 10000 个并发请求, 这里就有两个问题需要解决.")]),s._v(" "),a("ul",[a("li",[s._v("第一, "),a("strong",[s._v("怎样在一个线程内处理多个请求, 也就是要在一个线程内响应多个网络 I/O")]),s._v(". 以前的同步阻塞方式下, 一个线程只能处理一个请求, 到这里不再适用, 是不是可以用非阻塞 I/O 或者异步 I/O 来处理多个网络请求呢?")]),s._v(" "),a("li",[s._v("第二, "),a("strong",[s._v("怎么更节省资源地处理客户请求, 也就是要用更少的线程来服务这些请求")]),s._v(". 是不是可以继续用原来的 100 个或者更少的线程, 来服务现在的 10000 个请求呢?")])]),s._v(" "),a("p",[s._v("当然, 事实上, 现在 C10K 的问题早就解决了, 在继续学习下面的内容前, 可以先自己思考一下这两个问题.")]),s._v(" "),a("h6",{attrs:{id:"_1-i-o模型优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-i-o模型优化"}},[s._v("#")]),s._v(" (1)I/O模型优化")]),s._v(" "),a("p",[s._v("异步, 非阻塞 I/O 的解决思路, 你应该听说过, 其实就是在网络编程中经常用到的 "),a("strong",[s._v("I/O 多路复用")]),s._v("(I/O Multiplexing). I/O 多路复用是什么意思呢?")]),s._v(" "),a("p",[s._v("详细了解前, 先来讲"),a("strong",[s._v("两种 I/O 事件通知")]),s._v("的方式: "),a("mark",[a("strong",[s._v("水平触发和边缘触发")])]),s._v(", 它们常用在套接字接口的文件描述符中.")]),s._v(" "),a("ul",[a("li",[a("mark",[a("strong",[s._v("水平触发")])]),s._v(": "),a("strong",[s._v("只要文件描述符可以非阻塞地执行 I/O, 就会触发通知. 也就是说, 应用程序可以随时检查文件描述符的状态, 然后再根据状态, 进行 I/O 操作")]),s._v(".")]),s._v(" "),a("li",[a("mark",[a("strong",[s._v("边缘触发")])]),s._v(": "),a("strong",[s._v("只有在文件描述符的状态发生改变(也就是 I/O 请求达到)时, 才发送一次通知. 这时候, 应用程序需要尽可能多地执行 I/O, 直到无法继续读写, 才可以停止. 如果 I/O 没执行完, 或者因为某种原因没来得及处理, 那么这次通知也就丢失了")]),s._v(".")])]),s._v(" "),a("p",[s._v("接下来再回过头来看 "),a("mark",[a("strong",[s._v("I/O 多路复用的方法. 这里其实有很多实现方法")])]),s._v(", 下面来逐个分析一下.")]),s._v(" "),a("p",[a("mark",[a("strong",[s._v("第一种, 使用非阻塞 I/O 和水平触发通知, 比如使用 select 或者 poll")])]),s._v("​ "),a("strong",[s._v(".")])]),s._v(" "),a("p",[s._v("根据刚才水平触发的原理, select 和 poll 需要从文件描述符列表中, 找出哪些可以执行 I/O, 然后进行真正的网络 I/O 读写. 由于 I/O 是非阻塞的, 一个线程中就可以同时监控一批套接字的文件描述符, 这样就达到了单线程处理多请求的目的.")]),s._v(" "),a("p",[s._v("所以, 这种方式的最大优点, 是对应用程序比较友好, 它的 API 非常简单.")]),s._v(" "),a("p",[s._v("但是, 应用软件使用 select 和 poll 时, 需要"),a("strong",[s._v("对这些文件描述符列表进行轮询")]),s._v(", 这样, 请求数多的时候就会比较耗时. 并且 select 和 poll 还有一些其他的限制.")]),s._v(" "),a("p",[s._v("select 使用固定长度的位相量, 表示文件描述符的集合, 因此会有"),a("strong",[s._v("最大描述符数量的限制")]),s._v(". 比如, 在 32 位系统中, 默认限制是 1024. 并且在 select 内部, 检查套接字状态是用轮询的方法, 再加上应用软件使用时的轮询, 就变成了一个 O(n^2) 的关系.")]),s._v(" "),a("p",[s._v("而 poll 改进了 select 的表示方法, 换成了一个没有固定长度的数组, 这样就"),a("strong",[s._v("没有了最大描述符数量的限制")]),s._v("(当然还会受到系统文件描述符限制). 但应用程序在使用 poll 时, 同样需要对文件描述符列表进行轮询, 这样处理耗时跟描述符数量就是 O(N) 的关系.")]),s._v(" "),a("p",[s._v("除此之外, 应用程序每次调用 select 和 poll 时, 还需要把文件描述符的集合, 从用户空间传入内核空间, 由内核修改后, 再传出到用户空间中. 这一来一回的内核空间与用户空间切换, 也增加了处理成本.")]),s._v(" "),a("p",[s._v("有没有什么更好的方式来处理呢? 答案自然是肯定的.")]),s._v(" "),a("p",[a("mark",[a("strong",[s._v("第二种, 使用非阻塞 I/O 和边缘触发通知, 比如 epoll")])]),s._v(".")]),s._v(" "),a("p",[s._v("既然 select 和 poll 有那么多的问题, 就需要继续对其进行优化, 而 epoll 就很好地解决了这些问题.")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("epoll 使用红黑树, 在内核中管理文件描述符的集合")]),s._v(", 这样就不需要应用程序在每次操作时都传入, 传出这个集合.")]),s._v(" "),a("li",[a("strong",[s._v("epoll 使用事件驱动的机制, 只关注有 I/O 事件发生的文件描述符, 不需要轮询扫描整个集合")]),s._v(".")])]),s._v(" "),a("p",[s._v("不过要注意, epoll 是在 Linux 2.6 中才新增的功能(2.4 虽然也有, 但功能不完善). 由于边缘触发只在文件描述符可读或可写事件发生时才通知, 那么应用程序就需要尽可能多地执行 I/O, 并要处理更多的异常事件.")]),s._v(" "),a("p",[a("mark",[a("strong",[s._v("第三种, 使用异步 I/O(Asynchronous I/O, 简称为 AIO)")])]),s._v(" . 在前面文件系统原理的内容中, 曾介绍过异步 I/O 与同步 I/O 的区别. 异步 I/O 允许应用程序同时发起很多 I/O 操作, 而不用等待这些操作完成. 而在 I/O 完成后, 系统会用事件通知(比如信号或者回调函数)的方式, 告诉应用程序. 这时应用程序才会去查询 I/O 操作的结果. 异步 I/O 也是到了 Linux 2.6 才支持的功能, 并且在很长时间里都处于不完善的状态, 比如 glibc 提供的异步 I/O 库, 就一直被社区诟病. 同时, 由于异步 I/O 跟大家的直观逻辑不太一样, 想要使用的话, 一定要"),a("strong",[s._v("小心设计")]),s._v(", 其使用难度比较高.")]),s._v(" "),a("h6",{attrs:{id:"_2-工作模型优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-工作模型优化"}},[s._v("#")]),s._v(" (2)工作模型优化")]),s._v(" "),a("p",[s._v("了解了 I/O 模型后, 请求处理的优化就比较直观了. 使用 I/O 多路复用后, 就可以在一个进程或线程中处理多个请求, 其中又有下面两种不同的工作模型.")]),s._v(" "),a("p",[a("mark",[a("strong",[s._v("第一种, 主进程 + 多个 worker 子进程, 这也是最常用的一种模型")])]),s._v(". 这种方法的一个通用工作模式就是:")]),s._v(" "),a("ul",[a("li",[s._v("主进程执行 bind() + listen() 后, 创建多个子进程;")]),s._v(" "),a("li",[s._v("然后, 在每个子进程中, 都通过 accept() 或 epoll_wait() 来处理相同的套接字.")])]),s._v(" "),a("p",[s._v("比如, 最常用的"),a("strong",[s._v("反向代理服务器 Nginx 就是这么工作")]),s._v("的. 它也是由主进程和多个 worker 进程组成. 主进程主要用来初始化套接字, 并管理子进程的生命周期; 而 worker 进程, 则负责实际的请求处理. 下面画了一张图来表示这个关系.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/1af78daa535fe3042c114d87dce4022b-20230731161933-y58sp06.png",alt:""}})]),s._v(" "),a("p",[s._v("这里要注意, accept() 和 epoll_wait() 调用, 还存在一个"),a("strong",[s._v("惊群")]),s._v("的问题. 换句话说, 当网络 I/O 事件发生时, 多个进程被同时唤醒, 但实际上只有一个进程来响应这个事件, 其他被唤醒的进程都会重新休眠.")]),s._v(" "),a("ul",[a("li",[s._v("其中, accept() 的惊群问题, 已经在 Linux 2.6 中解决了;")]),s._v(" "),a("li",[s._v("而 epoll 的问题, 到了 Linux 4.5 才通过 EPOLLEXCLUSIVE 解决.")])]),s._v(" "),a("p",[a("strong",[s._v("为了避免惊群问题, Nginx 在每个 worker 进程中, 都增加一个了全局锁(accept_mutex). 这些 worker 进程需要首先竞争到锁, 只有竞争到锁的进程, 才会加入到 epoll 中, 这样就确保只有一个 worker 子进程被唤醒.")])]),s._v(" "),a("p",[s._v("不过, 根据前面 CPU 模块的学习, 你应该还记得, 进程的管理, 调度, 上下文切换的成本非常高. 那为什么使用多进程模式的 Nginx, 却具有非常好的性能呢? 这里最主要的一个原因就是, "),a("strong",[s._v("这些 worker 进程, 实际上并不需要经常创建和销毁, 而是在没任务时休眠, 有任务时唤醒. 只有在 worker 由于某些异常退出时, 主进程才需要创建新的进程来代替它")]),s._v(".")]),s._v(" "),a("p",[s._v("当然, 也可以用线程代替进程: 主线程负责套接字初始化和子线程状态的管理, 而子线程则负责实际的请求处理. 由于线程的调度和切换成本比较低, 实际上可以进一步把 epoll_wait() 都放到主线程中, 保证每次事件都只唤醒主线程, 而子线程只需要负责后续的请求处理.")]),s._v(" "),a("p",[a("mark",[a("strong",[s._v("第二种, 监听到相同端口的多进程模型")])]),s._v(". 在这种方式下, 所有的进程都监听相同的接口, 并且开启 SO_REUSEPORT 选项, 由内核负责将请求负载均衡到这些监听进程中去. 这一过程如下图所示.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/0278095fe33dcd677f3decc1c9c0cc4d-20230731161933-bx0se6g.png",alt:""}})]),s._v(" "),a("p",[s._v("由于内核确保了只有一个进程被唤醒, 就不会出现惊群问题了. 比如, Nginx 在 1.9.1 中就已经支持了这种模式.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/8e993b807e76db9fd8a8700ebe54c8fa-20230731161933-3dresop.png",alt:""}})]),s._v(" "),a("p",[s._v("不过要注意, 想要使用 SO_REUSEPORT 选项, 需要用 Linux 3.9 以上的版本才可以.")]),s._v(" "),a("h5",{attrs:{id:"_2-c1000k"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-c1000k"}},[s._v("#")]),s._v(" 2.C1000K")]),s._v(" "),a("p",[s._v("基于 I/O 多路复用和请求处理的优化, C10K 问题很容易就可以解决. 不过, 随着摩尔定律带来的服务器性能提升, 以及互联网的普及, 新兴服务会对性能提出更高的要求.")]),s._v(" "),a("p",[s._v("很快, 原来的 C10K 已经不能满足需求, 所以又有了 "),a("strong",[s._v("C100K 和 C1000K")]),s._v(", 也就是并发从原来的 1 万增加到 10 万, 乃至 100 万. 从 1 万到 10 万, 其实还是基于 C10K 的这些理论, epoll 配合线程池, 再加上 CPU, 内存和网络接口的性能和容量提升. 大部分情况下, C100K 很自然就可以达到.")]),s._v(" "),a("p",[s._v("那么, 再进一步, C1000K 是不是也可以很容易就实现呢? 这其实没有那么简单了.")]),s._v(" "),a("p",[s._v("首先从物理资源使用上来说, "),a("strong",[s._v("100 万个请求需要大量的系统资源")]),s._v(". 比如,")]),s._v(" "),a("ul",[a("li",[s._v("假设每个请求需要 16KB 内存的话, 那么总共就需要大约 15 GB 内存.")]),s._v(" "),a("li",[s._v("而从带宽上来说, 假设只有 20% 活跃连接, 即使每个连接只需要 1KB/s 的吞吐量, 总共也需要 1.6 Gb/s 的吞吐量. 千兆网卡显然满足不了这么大的吞吐量, 所以还需要配置万兆网卡, 或者基于多网卡 Bonding 承载更大的吞吐量.")])]),s._v(" "),a("p",[s._v("其次, 从软件资源上来说, "),a("strong",[s._v("大量的连接也会占用大量的软件资源, 比如文件描述符的数量, 连接状态的跟踪(CONNTRACK), 网络协议栈的缓存大小(比如套接字读写缓存, TCP 读写缓存)")]),s._v(" 等等.")]),s._v(" "),a("p",[s._v("最后, "),a("strong",[s._v("大量请求带来的中断处理")]),s._v(", 也会带来非常高的处理成本. 这样就需要多队列网卡, 中断负载均衡, CPU 绑定, RPS/RFS(软中断负载均衡到多个 CPU 核上), 以及将网络包的处理卸载(Offload)到网络设备(如 TSO/GSO, LRO/GRO, VXLAN OFFLOAD)等各种硬件和软件的优化.")]),s._v(" "),a("p",[a("strong",[s._v("C1000K 的解决方法, 本质上还是构建在 epoll 的非阻塞 I/O 模型上. 只不过, 除了 I/O 模型之外, 还需要从应用程序到 Linux 内核, 再到 CPU, 内存和网络等各个层次的深度优化, 特别是需要借助硬件, 来卸载那些原来通过软件处理的大量功能")]),s._v(".")]),s._v(" "),a("h5",{attrs:{id:"_3-c10m"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-c10m"}},[s._v("#")]),s._v(" 3.C10M")]),s._v(" "),a("p",[s._v("显然, 人们对于性能的要求是无止境的. 再进一步, 有没有可能在单机中, 同时处理 1000 万的请求呢? 这也就是 C10M 问题.")]),s._v(" "),a("p",[s._v("实际上, 在 C1000K 问题中, 各种软件, 硬件的优化很可能都已经做到头了. 特别是当升级完硬件(比如足够多的内存, 带宽足够大的网卡, 更多的网络功能卸载等)后, 可能会发现, 无论怎么优化应用程序和内核中的各种网络参数, 想实现 1000 万请求的并发, 都是极其困难的.")]),s._v(" "),a("p",[s._v("究其根本, "),a("strong",[s._v("还是 Linux 内核协议栈做了太多太繁重的工作. 从网卡中断带来的硬中断处理程序开始, 到软中断中的各层网络协议处理, 最后再到应用程序, 这个路径实在是太长了, 就会导致网络包的处理优化, 到了一定程度后, 就无法更进一步了")]),s._v(".")]),s._v(" "),a("p",[s._v("要解决这个问题, 最重要就是"),a("strong",[s._v("跳过内核协议栈的冗长路径, 把网络包直接送到要处理的应用程序那里去")]),s._v(". 这里有两种常见的机制, "),a("strong",[s._v("DPDK 和 XDP")]),s._v(".")]),s._v(" "),a("p",[s._v("第一种机制, DPDK, 是用户态网络的标准. 它跳过内核协议栈, 直接由用户态进程通过轮询的方式, 来处理网络接收.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/56b324aca34c040e1c95c266f2e338ee-20230731161933-8op4tm3.png",alt:""}})]),s._v(" "),a("p",[s._v("说起轮询, 你肯定会下意识认为它是低效的象征, 但是进一步反问下自己, 它的低效主要体现在哪里呢? 是查询时间明显多于实际工作时间的情况下吧! 那么, 换个角度来想, 如果每时每刻都有新的网络包需要处理, 轮询的优势就很明显了. 比如:")]),s._v(" "),a("ul",[a("li",[s._v("在 PPS 非常高的场景中, 查询时间比实际工作时间少了很多, 绝大部分时间都在处理网络包;")]),s._v(" "),a("li",[s._v("而跳过内核协议栈后, 就省去了繁杂的硬中断, 软中断再到 Linux 网络协议栈逐层处理的过程, 应用程序可以针对应用的实际场景, 有针对性地优化网络包的处理逻辑, 而不需要关注所有的细节.")])]),s._v(" "),a("p",[s._v("此外, DPDK 还通过大页, CPU 绑定, 内存对齐, 流水线并发等多种机制, 优化网络包的处理效率.")]),s._v(" "),a("p",[s._v("第二种机制, "),a("strong",[s._v("XDP")]),s._v("(eXpress Data Path), 则是 Linux 内核提供的一种高性能网络数据路径. 它允许网络包, 在进入内核协议栈之前, 就进行处理, 也可以带来更高的性能. XDP 底层跟之前用到的 bcc-tools 一样, 都是基于 Linux 内核的 eBPF 机制实现的.")]),s._v(" "),a("p",[s._v("XDP 的原理如下图所示:")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/5fbd646b0becda35f05f59e4852fe11e-20230731161933-rjtyb1a.png",alt:""}})]),s._v(" "),a("p",[s._v("可以看到, XDP 对内核的要求比较高, 需要的是 Linux 4.8 以上版本, 并且它也不提供缓存队列. 基于 XDP 的应用程序通常是专用的网络应用, 常见的有 IDS(入侵检测系统), DDoS 防御, "),a("a",{attrs:{href:"https://github.com/cilium/cilium",target:"_blank",rel:"noopener noreferrer"}},[s._v("cilium"),a("OutboundLink")],1),s._v(" 容器网络插件等.")]),s._v(" "),a("h5",{attrs:{id:"_4-小结-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-小结-10"}},[s._v("#")]),s._v(" 4.小结")]),s._v(" "),a("p",[s._v("本节回顾了经典的 C10K 问题, 并进一步延伸到了 C1000K 和 C10M 问题.")]),s._v(" "),a("p",[a("strong",[s._v("C10K 问题的根源, 一方面在于系统有限的资源; 另一方面, 也是更重要的因素, 是同步阻塞的 I/O 模型以及轮询的套接字接口, 限制了网络事件的处理效率")]),s._v(". Linux 2.6 中引入的 epoll , 完美解决了 C10K 的问题, 现在的高性能网络方案都基于 epoll.")]),s._v(" "),a("p",[a("strong",[s._v("从 C10K 到 C100K, 可能只需要增加系统的物理资源就可以满足; 但从 C100K 到 C1000K, 就不仅仅是增加物理资源就能解决的问题了. 这就需要多方面的优化工作了, 从硬件的中断处理和网络功能卸载, 到网络协议栈的文件描述符数量, 连接状态跟踪, 缓存队列等内核的优化, 再到应用程序的工作模型优化, 都是考虑的重点")]),s._v(".")]),s._v(" "),a("p",[s._v("再进一步, 要实现 C10M, 就"),a("strong",[s._v("不只是增加物理资源, 或者优化内核和应用程序可以解决的问题了")]),s._v(". 这时候, 就需要用 XDP 的方式, 在内核协议栈之前处理网络包; 或者用 DPDK 直接跳过网络协议栈, 在用户空间通过轮询的方式直接处理网络包.")]),s._v(" "),a("p",[s._v("当然了, 实际上在大多数场景中, 并不需要单机并发 1000 万的请求. 通过调整系统架构, 把这些请求分发到多台服务器中来处理, 通常是更简单和更容易扩展的方案.")]),s._v(" "),a("h4",{attrs:{id:"_36-套路篇-怎么评估系统的网络性能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_36-套路篇-怎么评估系统的网络性能"}},[s._v("#")]),s._v(" 36-套路篇:怎么评估系统的网络性能?")]),s._v(" "),a("p",[s._v("在大多数场景中, 并不需要单机并发 1000 万请求. 通过调整系统架构, 把请求分发到多台服务器中并行处理, 才是更简单, 扩展性更好的方案.")]),s._v(" "),a("p",[s._v("不过, 这种情况下, 就需要"),a("strong",[s._v("评估系统的网络性能, 以便考察系统的处理能力, 并为容量规划提供基准数据")]),s._v(". 那么, 到底该"),a("strong",[s._v("怎么评估网络的性能")]),s._v("呢?")]),s._v(" "),a("h5",{attrs:{id:"_1-性能指标回顾"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-性能指标回顾"}},[s._v("#")]),s._v(" 1.性能指标回顾")]),s._v(" "),a("p",[s._v("在评估网络性能前, 先来回顾一下, 衡量网络性能的指标. 在 Linux 网络基础篇中曾经说到, "),a("strong",[s._v("带宽, 吞吐量, 延时, PPS 等, 都是最常用的网络性能指标")]),s._v(".")]),s._v(" "),a("p",[s._v("这四个指标中, 带宽跟物理网卡配置是直接关联的. 一般来说, 网卡确定后, 带宽也就确定了(当然, 实际带宽会受限于整个网络链路中最小的那个模块).")]),s._v(" "),a("p",[s._v('另外, 你可能在很多地方听说过"网络带宽测试", 这里测试的实际上不是带宽, 而是'),a("strong",[s._v("网络吞吐量")]),s._v(". Linux 服务器的网络吞吐量一般会比带宽小, 而对交换机等专门的网络设备来说, 吞吐量一般会接近带宽.")]),s._v(" "),a("p",[s._v("最后的 PPS, 则是以网络包为单位的网络传输速率, 通常用在需要大量转发的场景中. 而对 TCP 或者 Web 服务来说, 更多会用并发连接数和每秒请求数(QPS, Query per Second)等指标, 它们更能反应实际应用程序的性能.")]),s._v(" "),a("h5",{attrs:{id:"_2-网络基准测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-网络基准测试"}},[s._v("#")]),s._v(" 2.网络基准测试")]),s._v(" "),a("p",[s._v("熟悉了网络的性能指标后, 接下来再来看看, 如何通过性能测试来确定这些指标的基准值.")]),s._v(" "),a("p",[s._v("可以先思考一个问题. Linux 网络基于 TCP/IP 协议栈, 而不同协议层的行为显然不同. 那么测试之前, 应该弄清楚, 要评估的网络性能, 究竟属于协议栈的哪一层? 换句话说, "),a("strong",[s._v("应用程序基于协议栈的哪一层呢")]),s._v("?")]),s._v(" "),a("p",[s._v("根据前面学过的 TCP/IP 协议栈的原理, 这个问题应该不难回答. 比如:")]),s._v(" "),a("ul",[a("li",[s._v("基于 HTTP 或者 HTTPS 的 Web 应用程序, 显然属于应用层, 需要测试 HTTP/HTTPS 的性能;")]),s._v(" "),a("li",[s._v("而对大多数游戏服务器来说, 为了支持更大的同时在线人数, 通常会基于 TCP 或 UDP, 与客户端进行交互, 这时就需要测试 TCP/UDP 的性能;")]),s._v(" "),a("li",[s._v("当然, 还有一些场景, 是把 Linux 作为一个软交换机或者路由器来用的. 这种情况下, 需要关注网络包的处理能力(即 PPS), 重点关注网络层的转发性能.")])]),s._v(" "),a("p",[s._v("接下来就从下往上, 了解不同协议层的网络性能测试方法. 不过要注意, 低层协议是其上的各层网络协议的基础. 自然, 低层协议的性能, 也就决定了高层的网络性能.")]),s._v(" "),a("p",[s._v("注意, 以下所有的测试方法, 都需要两台 Linux 虚拟机. 其中一台, 可以当作待测试的目标机器; 而另一台, 则可以当作正在运行网络服务的客户端, 用来运行测试工具.")]),s._v(" "),a("h5",{attrs:{id:"_3-各协议层的性能测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-各协议层的性能测试"}},[s._v("#")]),s._v(" 3.各协议层的性能测试")]),s._v(" "),a("h6",{attrs:{id:"_1-转发性能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-转发性能"}},[s._v("#")]),s._v(" (1)转发性能")]),s._v(" "),a("p",[s._v("首先来看, "),a("strong",[s._v("网络接口层和网络层, 它们主要负责网络包的封装, 寻址, 路由以及发送和接收")]),s._v(". 在这两个网络协议层中, 每秒可处理的网络包数 PPS, 就是最重要的性能指标. 特别是 64B 小包的处理能力, 值得特别关注. 那么, 如何来测试网络包的处理能力呢?")]),s._v(" "),a("p",[s._v("说到网络包相关的测试, 你可能会觉得陌生. 不过, 其实在专栏开头的 CPU 性能篇中, 就接触过一个相关工具, 也就是软中断案例中的 "),a("strong",[s._v("hping3")]),s._v(". 在那个案例中, hping3 作为一个 SYN 攻击的工具来使用. 实际上, hping3 更多的用途, 是作为一个测试网络包处理能力的性能工具.")]),s._v(" "),a("p",[s._v("再来介绍另一个更常用的工具, Linux 内核自带的高性能网络测试工具 pktgen. "),a("strong",[s._v("pktgen 支持丰富的自定义选项, 方便根据实际需要构造所需网络包, 从而更准确地测试出目标服务器的性能")]),s._v(".")]),s._v(" "),a("p",[s._v("不过, 在 Linux 系统中, 并不能直接找到 pktgen 命令. 因为 pktgen 作为一个"),a("strong",[s._v("内核线程")]),s._v("来运行, 需要加载 pktgen 内核模块后, 再通过 "),a("code",[s._v("/proc")]),s._v("​ 文件系统来交互. 下面就是 pktgen 启动的两个内核线程和 "),a("code",[s._v("/proc")]),s._v("​ 文件系统的交互文件:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ modprobe pktgen\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-ef")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" pktgen "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-v")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v("\nroot     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("26384")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" 06:17 ?        00:00:00 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("kpktgend_0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nroot     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("26385")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" 06:17 ?        00:00:00 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("kpktgend_1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" /proc/net/pktgen/\nkpktgend_0  kpktgend_1  pgctrl\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("pktgen 在每个 CPU 上启动一个内核线程, 并可以通过 "),a("code",[s._v("/proc/net/pktgen")]),s._v("​ 下面的同名文件, 跟这些线程交互; 而 pgctrl 则主要用来控制这次测试的开启和停止.")]),s._v(" "),a("p",[s._v("如果 modprobe 命令执行失败, 说明你的内核没有配置 CONFIG_NET_PKTGEN 选项. 这就需要配置 pktgen 内核模块(即 CONFIG_NET_PKTGEN=m)后, 重新编译内核, 才可以使用.")]),s._v(" "),a("p",[s._v("在使用 pktgen 测试网络性能时, 需要先给每个内核线程 kpktgend_X 以及测试网卡, 配置 pktgen 选项, 然后再通过 pgctrl 启动测试.")]),s._v(" "),a("p",[s._v("以发包测试为例, 假设发包机器使用的网卡是 eth0, 而目标机器的 IP 地址为 192.168.0.30, MAC 地址为 11:11:11:11:11:11.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/193d508cd4c156e8a7cbc73d1ef838f2-20230731161933-gcw0b5v.png",alt:""}})]),s._v(" "),a("p",[s._v("接下来, 就是一个发包测试的示例.")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 定义一个工具函数, 方便后面配置各种测试选项")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("pgset")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("local")]),s._v(" result\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$PGDEV")]),s._v("\n \n    "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("result")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" $PGDEV "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("fgrep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Result: OK:"')]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$result")]),s._v('"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n         "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$PGDEV")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("fgrep")]),s._v(" Result:\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 为 0 号线程绑定 eth0 网卡")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("PGDEV")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/proc/net/pktgen/kpktgend_0\npgset "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"rem_device_all"')]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 清空网卡绑定")]),s._v("\npgset "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"add_device eth0"')]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 添加 eth0 网卡")]),s._v("\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 配置 eth0 网卡的测试选项")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("PGDEV")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/proc/net/pktgen/eth0\npgset "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"count 1000000"')]),s._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 总发包数量")]),s._v("\npgset "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"delay 5000"')]),s._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 不同包之间的发送延迟 (单位纳秒)")]),s._v("\npgset "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"clone_skb 0"')]),s._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# SKB 包复制")]),s._v("\npgset "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"pkt_size 64"')]),s._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 网络包大小")]),s._v("\npgset "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"dst 192.168.0.30"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 目的 IP")]),s._v("\npgset "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"dst_mac 11:11:11:11:11:11"')]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 目的 MAC")]),s._v("\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 启动测试")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("PGDEV")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/proc/net/pktgen/pgctrl\npgset "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"start"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br")])]),a("p",[s._v("稍等一会儿, 测试完成后, 结果可以从 "),a("code",[s._v("/proc")]),s._v("​ 文件系统中获取. 通过下面代码段中的内容, 可以查看刚才的测试报告:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" /proc/net/pktgen/eth0\nParams: count "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000000")]),s._v("  min_pkt_size: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v("  max_pkt_size: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v("\n     frags: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  delay: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  clone_skb: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  ifname: eth0\n     flows: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" flowlen: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\nCurrent:\n     pkts-sofar: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000000")]),s._v("  errors: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n     started: 1534853256071us  stopped: 1534861576098us idle: 70673us\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\nResult: OK: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8320027")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("c8249354+d70673"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" usec, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("64byte,0frags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  120191pps 61Mb/sec "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("61537792bps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" errors: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("可以看到, 测试报告主要分为三个部分:")]),s._v(" "),a("ul",[a("li",[s._v("第一部分的 Params 是测试选项;")]),s._v(" "),a("li",[s._v("第二部分的 Current 是测试进度, 其中,  packts so far(pkts-sofar)表示已经发送了 100 万个包, 也就表明测试已完成.")]),s._v(" "),a("li",[s._v("第三部分的 Result 是测试结果, 包含测试所用时间, 网络包数量和分片, PPS, 吞吐量以及错误数.")])]),s._v(" "),a("p",[s._v("根据上面的结果发现, PPS 为 12 万, 吞吐量为 61 Mb/s, 没有发生错误. 那么, 12 万的 PPS 好不好呢?")]),s._v(" "),a("p",[s._v("作为对比, 可以计算一下千兆交换机的 PPS. 交换机可以达到线速(满负载时, 无差错转发), 它的 PPS 就是 1000Mbit 除以以太网帧的大小, 即 1000Mbps/((64+20)*8bit) = 1.5 Mpps(其中, 20B 为以太网帧前导和帧间距的大小).")]),s._v(" "),a("p",[s._v("你看, 即使是千兆交换机的 PPS, 也可以达到 150 万 PPS, 比测试得到的 12 万大多了. 所以, 看到这个数值并不用担心, 现在的多核服务器和万兆网卡已经很普遍了, 稍做优化就可以达到数百万的 PPS. 而且, 如果用了上节课讲到的 DPDK 或 XDP, 还能达到千万数量级.")]),s._v(" "),a("h6",{attrs:{id:"_2-tcp-udp性能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-tcp-udp性能"}},[s._v("#")]),s._v(" (2)TCP/UDP性能")]),s._v(" "),a("p",[s._v("掌握了 PPS 的测试方法, 接下来再来看 TCP 和 UDP 的性能测试方法. 说到 TCP 和 UDP 的测试, 我想你已经很熟悉了, 甚至可能一下子就能想到相应的测试工具, 比如 "),a("strong",[s._v("iperf 或者 netperf")]),s._v(".")]),s._v(" "),a("p",[s._v("特别是现在的云计算时代, 在刚拿到一批虚拟机时, 首先要做的, 应该就是用 iperf 测试一下网络性能是否符合预期.")]),s._v(" "),a("p",[a("strong",[s._v("iperf 和 netperf 都是最常用的网络性能测试工具, 测试 TCP 和 UDP 的吞吐量. 它们都以客户端和服务器通信的方式, 测试一段时间内的平均吞吐量.")])]),s._v(" "),a("p",[s._v("接下来就以 iperf 为例, 看一下 TCP 性能的测试方法. 目前, iperf 的最新版本为 iperf3, 可以运行下面的命令来安装:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Ubuntu")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt-get")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" iperf3\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# CentOS")]),s._v("\nyum "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" iperf3\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("然后, 在目标机器上启动 iperf 服务端:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -s 表示启动服务端, -i 表示汇报间隔, -p 表示监听端口")]),s._v("\n$ iperf3 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-s")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-i")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("接着, 在另一台机器上运行 iperf 客户端, 运行测试:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -c 表示启动客户端, 192.168.0.30 为目标服务器的 IP")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -b 表示目标带宽 (单位是 bits/s)")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -t 表示测试时间")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -P 表示并发数, -p 表示目标服务器监听端口")]),s._v("\n$ iperf3 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-b")]),s._v(" 1G "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-t")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-P")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("稍等一会儿(15 秒)测试结束后, 回到目标服务器, 查看 iperf 的报告:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" ID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" Interval           Transfer     Bandwidth\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("SUM"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("-15.04  sec  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v(" Bytes  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v(" bits/sec                  sender\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("SUM"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("-15.04  sec  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.51")]),s._v(" GBytes   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("860")]),s._v(" Mbits/sec                  receiver\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("最后的 SUM 行就是测试的汇总结果, 包括测试时间, 数据传输量以及带宽等. 按照发送和接收, 这一部分又分为了 sender 和 receiver 两行.")]),s._v(" "),a("p",[s._v("从测试结果可以看到, 这台机器 TCP 接收的带宽(吞吐量)为 860 Mb/s, 跟目标的 1Gb/s 相比, 还是有些差距的.")]),s._v(" "),a("h6",{attrs:{id:"_3-http性能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-http性能"}},[s._v("#")]),s._v(" (3)HTTP性能")]),s._v(" "),a("p",[s._v("从传输层再往上, 到了应用层. 有的应用程序, 会直接基于 TCP 或 UDP 构建服务. 当然, 也有大量的应用, 基于"),a("strong",[s._v("应用层的协议")]),s._v("来构建服务, HTTP 就是最常用的一个应用层协议. 比如, 常用的 Apache, Nginx 等各种 Web 服务, 都是基于 HTTP.")]),s._v(" "),a("p",[s._v("要测试 HTTP 的性能, 也有大量的工具可以使用, 比如 "),a("strong",[s._v("ab, webbench")]),s._v(" 等, 都是常用的 HTTP 压力测试工具. 其中, ab 是 Apache 自带的 HTTP 压测工具, 主要测试 HTTP 服务的每秒请求数, 请求延迟, 吞吐量以及请求延迟的分布情况等.")]),s._v(" "),a("p",[s._v("运行下面的命令就可以安装 ab 工具:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Ubuntu")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt-get")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-y")]),s._v(" apache2-utils\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# CentOS")]),s._v("\n$ yum "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-y")]),s._v(" httpd-tools\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("接下来, 在目标机器上, 使用 Docker 启动一个 Nginx 服务, 然后用 ab 来测试它的性能. 首先, 在目标机器上运行下面的命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(":80 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-itd")]),s._v(" nginx\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("而在另一台机器上, 运行 ab 命令, 测试 Nginx 的性能:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -c 表示并发请求数为 1000, -n 表示总的请求数为 10000")]),s._v("\n$ ab "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-n")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),s._v(" http://192.168.0.30/\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\nServer Software:        nginx/1.15.8\nServer Hostname:        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30\nServer Port:            "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v("\n \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n \nRequests per second:    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1078.54")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#/sec] (mean)")]),s._v("\nTime per request:       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("927.183")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("ms"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("mean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nTime per request:       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.927")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("ms"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("mean, across all concurrent requests"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nTransfer rate:          "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("890.00")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("Kbytes/sec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" received\n \nConnection Times "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ms"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n              min  mean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("+/-sd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" median   max\nConnect:        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("27")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("152.1")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1038")]),s._v("\nProcessing:     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("207")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("843.0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9242")]),s._v("\nWaiting:        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("207")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("843.0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9242")]),s._v("\nTotal:         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("233")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("857.7")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("23")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9268")]),s._v("\n \nPercentage of the requests served within a certain "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("time")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ms"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v("%     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("23")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("66")]),s._v("%     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("75")]),s._v("%     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v("%     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("26")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("90")]),s._v("%    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("274")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("95")]),s._v("%   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1195")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("98")]),s._v("%   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2335")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("99")]),s._v("%   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4663")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("%   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9268")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("longest request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br")])]),a("p",[s._v("可以看到, ab 的测试结果分为三个部分, 分别是"),a("strong",[s._v("请求汇总, 连接时间汇总还有请求延迟汇总")]),s._v(". 以上面的结果为例具体来看. 在请求汇总部分, 可以看到:")]),s._v(" "),a("ul",[a("li",[s._v("Requests per second 为 1074;")]),s._v(" "),a("li",[s._v("每个请求的延迟(Time per request)分为两行, 第一行的 927 ms 表示平均延迟, 包括了线程运行的调度时间和网络请求响应时间, 而下一行的 0.927ms , 则表示实际请求的响应时间;")]),s._v(" "),a("li",[s._v("Transfer rate 表示吞吐量(BPS)为 890 KB/s.")])]),s._v(" "),a("p",[s._v("连接时间汇总部分, 则是分别展示了建立连接, 请求, 等待以及汇总等的各类时间, 包括最小, 最大, 平均以及中值处理时间.")]),s._v(" "),a("p",[s._v("最后的请求延迟汇总部分, 则给出了不同时间段内处理请求的百分比, 比如, 90% 的请求, 都可以在 274ms 内完成.")]),s._v(" "),a("h6",{attrs:{id:"_4-应用负载性能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-应用负载性能"}},[s._v("#")]),s._v(" (4)应用负载性能")]),s._v(" "),a("p",[s._v("当用 iperf 或者 ab 等测试工具, 得到 TCP, HTTP 等的性能数据后, 这些数据是否就能表示应用程序的实际性能呢? 答案应该是否定的.")]),s._v(" "),a("p",[s._v("比如, 你的应用程序基于 HTTP 协议, 为最终用户提供一个 Web 服务. 这时使用 ab 工具, 可以得到某个页面的访问性能, 但这个结果跟用户的实际请求, 很可能不一致. 因为用户请求往往会附带着各种各种的负载(payload), 而这些负载会影响 Web 应用程序内部的处理逻辑, 从而影响最终性能.")]),s._v(" "),a("p",[s._v("那么, 为了得到应用程序的实际性能, 就要求性能工具本身可以模拟用户的请求负载, 而 iperf, ab 这类工具就无能为力了. 幸运的是, 还可以用 "),a("strong",[s._v("wrk, TCPCopy, Jmeter 或者 LoadRunner")]),s._v(" 等实现这个目标.")]),s._v(" "),a("p",[s._v("以 wrk 为例, 它是一个 HTTP 性能测试工具, 内置了 LuaJIT, 方便根据实际需求, 生成所需的请求负载, 或者自定义响应的处理方法.")]),s._v(" "),a("p",[s._v("wrk 的命令行参数比较简单. 比如可以用 wrk, 来重新测一下前面已经启动的 Nginx 的性能.")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -c 表示并发连接数 1000, -t 表示线程数为 2")]),s._v("\n$ wrk "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-t")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" http://192.168.0.30/\nRunning 10s "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("test")]),s._v(" @ http://192.168.0.30/\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" threads and "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" connections\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("65")]),s._v(".83ms  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("174")]),s._v(".06ms   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(".99s    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("95.85")]),s._v("%\n    Req/Sec     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(".87k   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("628.73")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(".78k    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("69.00")]),s._v("%\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("96954")]),s._v(" requests "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(".06s, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("78")]),s._v(".59MB "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v("\n  Socket errors: connect "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("write")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("timeout")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("179")]),s._v("\nRequests/sec:   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9641.31")]),s._v("\nTransfer/sec:      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(".82MB\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("这里使用 2 个线程, 并发 1000 连接, 重新测试了 Nginx 的性能. 可以看到, 每秒请求数为 9641, 吞吐量为 7.82MB, 平均延迟为 65ms, 比前面 ab 的测试结果要好很多. 这也说明, 性能工具本身的性能, 对性能测试也是至关重要的. 不合适的性能工具, 并不能准确测出应用程序的最佳性能.")]),s._v(" "),a("p",[s._v("当然 wrk 最大的优势, 是其内置的 LuaJIT, 可以用来实现复杂场景的性能测试. wrk 在调用 Lua 脚本时, 可以将 HTTP 请求分为三个阶段, 即 setup, running, done, 如下图所示:")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/1bc969082f9fd873239a17fc01180265-20230731161933-jk6wlh3.png",alt:""}})]),s._v(" "),a("p",[s._v("比如, 可以在 setup 阶段, 为请求设置认证参数(来自于 wrk 官方"),a("a",{attrs:{href:"https://github.com/wg/wrk/blob/master/scripts/auth.lua",target:"_blank",rel:"noopener noreferrer"}},[s._v("示例"),a("OutboundLink")],1),s._v("):")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("-- example script that demonstrates response handling and\n-- retrieving an authentication token to "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" on all future\n-- requests\n \ntoken "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" nil\npath  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/authenticate"')]),s._v("\n \nrequest "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" function"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("return")]),s._v(" wrk.format"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"GET"')]),s._v(", path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nend\n \nresponse "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" function"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("status, headers, body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" not token and status "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n      token "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" headers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"X-Token"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n      path  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/resource"')]),s._v("\n      wrk.headers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"X-Token"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" token\n   end\nend\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("p",[s._v("而在执行测试时, 通过 -s 选项, 执行脚本的路径:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ wrk "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-t")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-s")]),s._v(" auth.lua http://192.168.0.30/\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("wrk 需要用 Lua 脚本, 来构造请求负载. 这对于大部分场景来说, 可能已经足够了. 不过, 它的缺点也正是, 所有东西都需要代码来构造, 并且工具本身不提供 GUI 环境.")]),s._v(" "),a("p",[s._v("像 Jmeter 或者 LoadRunner(商业产品), 则针对复杂场景提供了脚本录制, 回放, GUI 等更丰富的功能, 使用起来也更加方便.")]),s._v(" "),a("h5",{attrs:{id:"_4-小结-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-小结-11"}},[s._v("#")]),s._v(" 4.小结")]),s._v(" "),a("p",[s._v("性能评估是优化网络性能的前提, 只有在发现网络性能瓶颈时, 才需要进行网络性能优化. 根据 TCP/IP 协议栈的原理, 不同协议层关注的性能重点不完全一样, 也就对应不同的性能测试方法. 比如,")]),s._v(" "),a("ul",[a("li",[s._v("在应用层, 可以使用 wrk, Jmeter 等模拟用户的负载, 测试应用程序的每秒请求数, 处理延迟, 错误数等;")]),s._v(" "),a("li",[s._v("而在传输层, 则可以使用 iperf 等工具, 测试 TCP 的吞吐情况;")]),s._v(" "),a("li",[s._v("再向下, 还可以用 Linux 内核自带的 pktgen, 测试服务器的 PPS.")])]),s._v(" "),a("p",[s._v("由于低层协议是高层协议的基础. 所以, 一般情况下, 需要"),a("strong",[s._v("从上到下")]),s._v("对每个协议层进行性能测试, 然后根据性能测试的结果, 结合 Linux 网络协议栈的原理, 找出导致性能瓶颈的根源, 进而优化网络性能.")]),s._v(" "),a("h4",{attrs:{id:"_37-案例篇-dns解析时快时慢该怎么办"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_37-案例篇-dns解析时快时慢该怎么办"}},[s._v("#")]),s._v(" 37-案例篇:DNS解析时快时慢该怎么办?")]),s._v(" "),a("p",[s._v("DNS(Domain Name System), 即域名系统, 是互联网中最基础的一项服务, 主要提供域名和 IP 地址之间映射关系的查询服务. DNS 不仅方便了人们访问不同的互联网服务, 更为很多应用提供了, "),a("strong",[s._v("动态服务发现和全局负载均衡(Global Server Load Balance, GSLB)的机制")]),s._v(". 这样, DNS 就可以选择离用户最近的 IP 来提供服务. 即使后端服务的 IP 地址发生变化, 用户依然可以用相同域名来访问.")]),s._v(" "),a("p",[s._v("DNS 显然是工作中基础而重要的一个环节. "),a("strong",[s._v("那么 DNS 出现问题时, 又该如何分析和排查呢")]),s._v("?")]),s._v(" "),a("h5",{attrs:{id:"_1-域名与dns解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-域名与dns解析"}},[s._v("#")]),s._v(" 1.域名与DNS解析")]),s._v(" "),a("p",[s._v("域名由一串用点分割开的字符组成, 被用作互联网中的某一台或某一组计算机的名称, 目的就是为了方便识别, 互联网中提供各种服务的主机位置. 要注意, 域名是全球唯一的, 需要通过专门的域名注册商才可以申请注册. 为了组织全球互联网中的众多计算机, 域名同样用点来分开, 形成一个分层的结构. 而每个被点分割开的字符串, 就构成了域名中的一个层级, 并且位置越靠后, 层级越高.")]),s._v(" "),a("p",[s._v("以极客时间的网站 time.geekbang.org 为例, 来理解域名的含义. 这个字符串中, 最后面的 org 是顶级域名, 中间的 geekbang 是二级域名, 而最左边的 time 则是三级域名.")]),s._v(" "),a("p",[s._v("如下图所示, 注意点(.)是所有域名的根, 也就是说所有域名都以点作为后缀, 也可以理解为, 在域名解析的过程中, 所有域名都以点结束.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/fb3136fd28fa98182e42a71efe7ed0e0-20230731161933-t4jgabp.png",alt:""}})]),s._v(" "),a("p",[s._v("通过理解这几个概念, 可以看出, 域名主要是为了方便让人记住, "),a("strong",[s._v("而 IP 地址是机器间的通信的真正机制")]),s._v(". 把域名转换为 IP 地址的服务, 也就是域名解析服务(DNS), 而对应的服务器就是域名服务器, 网络协议则是 DNS 协议.")]),s._v(" "),a("p",[s._v("这里注意, "),a("strong",[s._v("DNS 协议在 TCP/IP 栈中属于应用层, 不过实际传输还是基于 UDP 或者 TCP 协议(UDP 居多), 并且域名服务器一般监听在端口 53 上")]),s._v(".")]),s._v(" "),a("p",[s._v("既然域名以分层的结构进行管理, 相对应的, 域名解析其实也是用递归的方式(从顶级开始, 以此类推), 发送给每个层级的域名服务器, 直到得到解析结果.")]),s._v(" "),a("p",[s._v("不过不要担心, 递归查询的过程并不需要亲自操作, DNS 服务器会替你完成, 要做的只是预先配置一个可用的 DNS 服务器就可以了. 通常来说, 每级 DNS 服务器, 都会有最近解析记录的缓存. 当缓存命中时, 直接用缓存中的记录应答就可以了. 如果缓存过期或者不存在, 才需要用刚刚提到的递归方式查询.")]),s._v(" "),a("p",[s._v("所以, 系统管理员在配置 Linux 系统的网络时, 除了需要配置 IP 地址, 还需要给它"),a("strong",[s._v("配置 DNS 服务器")]),s._v(", 这样它才可以通过域名来访问外部服务.")]),s._v(" "),a("p",[s._v("比如, 我的系统配置的就是 114.114.114.114 这个域名服务器. 可以执行下面的命令, 来查询你的系统配置:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" /etc/resolv.conf\nnameserver "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("114.114")]),s._v(".114.114\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("另外, DNS 服务通过资源记录的方式, 来管理所有数据, 它支持 A, CNAME, MX, NS, PTR 等多种类型的记录. 比如:")]),s._v(" "),a("ul",[a("li",[s._v("A 记录, 用来把域名转换成 IP 地址;")]),s._v(" "),a("li",[s._v("CNAME 记录, 用来创建别名;")]),s._v(" "),a("li",[s._v("而 NS 记录, 则表示该域名对应的域名服务器地址.")])]),s._v(" "),a("p",[s._v("简单来说, 当访问某个网址时, 就需要通过 DNS 的 A 记录, 查询该域名对应的 IP 地址, 然后再通过该 IP 来访问 Web 服务.")]),s._v(" "),a("p",[s._v("比如, 还是以极客时间的网站 time.geekbang.org 为例, 执行下面的 "),a("strong",[s._v("nslookup 命令, 就可以查询到这个域名的 A 记录, 可以看到, 它的 IP 地址是 39.106.233.176")]),s._v(":")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("nslookup")]),s._v(" time.geekbang.org\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 域名服务器及端口信息")]),s._v("\nServer:\t\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("114.114")]),s._v(".114.114\nAddress:\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("114.114")]),s._v(".114.114"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#53")]),s._v("\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 非权威查询结果")]),s._v("\nNon-authoritative answer:\nName:\ttime.geekbang.org\nAddress: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("39.106")]),s._v(".233.17\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("这里要注意, 由于 114.114.114.114 并不是直接管理 time.geekbang.org 的域名服务器, 所以查询结果是非权威的. 使用上面的命令, 只能得到 114.114.114.114 查询的结果.")]),s._v(" "),a("p",[s._v("前面还提到了, 如果没有命中缓存, DNS 查询实际上是一个递归过程, 那有没有方法可以知道整个递归查询的执行呢?")]),s._v(" "),a("p",[s._v("其实除了 nslookup, 另外一个常用的 DNS 解析工具 "),a("strong",[s._v("dig")]),s._v(", 就"),a("strong",[s._v("提供了 trace 功能, 可以展示递归查询的整个过程")]),s._v(". 比如可以执行下面的命令, 得到查询结果:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# +trace 表示开启跟踪查询")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# +nodnssec 表示禁止 DNS 安全扩展")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("dig")]),s._v(" +trace +nodnssec time.geekbang.org\n \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" DiG "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9.11")]),s._v(".3-1ubuntu1.3-Ubuntu "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" +trace +nodnssec time.geekbang.org\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" global options: +cmd\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("322086")]),s._v("\tIN\tNS\tm.root-servers.net.\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("322086")]),s._v("\tIN\tNS\ta.root-servers.net.\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("322086")]),s._v("\tIN\tNS\ti.root-servers.net.\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("322086")]),s._v("\tIN\tNS\td.root-servers.net.\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("322086")]),s._v("\tIN\tNS\tg.root-servers.net.\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("322086")]),s._v("\tIN\tNS\tl.root-servers.net.\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("322086")]),s._v("\tIN\tNS\tc.root-servers.net.\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("322086")]),s._v("\tIN\tNS\tb.root-servers.net.\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("322086")]),s._v("\tIN\tNS\th.root-servers.net.\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("322086")]),s._v("\tIN\tNS\te.root-servers.net.\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("322086")]),s._v("\tIN\tNS\tk.root-servers.net.\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("322086")]),s._v("\tIN\tNS\tj.root-servers.net.\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("322086")]),s._v("\tIN\tNS\tf.root-servers.net.\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" Received "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("239")]),s._v(" bytes from "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("114.114")]),s._v(".114.114"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#53(114.114.114.114) in 1340 ms")]),s._v("\n \norg.\t\t\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172800")]),s._v("\tIN\tNS\ta0.org.afilias-nst.info.\norg.\t\t\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172800")]),s._v("\tIN\tNS\ta2.org.afilias-nst.info.\norg.\t\t\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172800")]),s._v("\tIN\tNS\tb0.org.afilias-nst.org.\norg.\t\t\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172800")]),s._v("\tIN\tNS\tb2.org.afilias-nst.org.\norg.\t\t\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172800")]),s._v("\tIN\tNS\tc0.org.afilias-nst.info.\norg.\t\t\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172800")]),s._v("\tIN\tNS\td0.org.afilias-nst.org.\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" Received "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("448")]),s._v(" bytes from "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("198.97")]),s._v(".190.53"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#53(h.root-servers.net) in 708 ms")]),s._v("\n \ngeekbang.org.\t\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("86400")]),s._v("\tIN\tNS\tdns9.hichina.com.\ngeekbang.org.\t\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("86400")]),s._v("\tIN\tNS\tdns10.hichina.com.\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" Received "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("96")]),s._v(" bytes from "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("199.19")]),s._v(".54.1"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#53(b0.org.afilias-nst.org) in 1833 ms")]),s._v("\n \ntime.geekbang.org.\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("600")]),s._v("\tIN\tA\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("39.106")]),s._v(".233.176\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" Received "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("62")]),s._v(" bytes from "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("140.205")]),s._v(".41.16"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#53(dns10.hichina.com) in 4 ms")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br")])]),a("p",[s._v("dig trace 的输出, 主要包括四部分.")]),s._v(" "),a("ul",[a("li",[s._v("第一部分, 是从 114.114.114.114 查到的一些根域名服务器(.)的 NS 记录.")]),s._v(" "),a("li",[s._v("第二部分, 是从 NS 记录结果中选一个(h.root-servers.net), 并查询顶级域名 org. 的 NS 记录.")]),s._v(" "),a("li",[s._v("第三部分, 是从 org. 的 NS 记录中选择一个(b0.org.afilias-nst.org), 并查询二级域名 geekbang.org. 的 NS 服务器.")]),s._v(" "),a("li",[s._v("最后一部分, 就是从 geekbang.org. 的 NS 服务器(dns10.hichina.com)查询最终主机 time.geekbang.org. 的 A 记录.")])]),s._v(" "),a("p",[s._v("这个输出里展示的各级域名的 NS 记录, 其实就是"),a("strong",[s._v("各级域名服务器的地址")]),s._v(", 可以让你更清楚 DNS 解析的过程.  为了帮你更直观理解递归查询, 我把这个过程整理成了一张流程图.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/75f5cadf4a2953e7f39f5b5cb0b37465-20230731161933-cf5owis.png",alt:""}})]),s._v(" "),a("p",[s._v("当然, 不仅仅是发布到互联网的服务需要域名, 很多时候, 也希望能对局域网内部的主机进行域名解析(即内网域名, 大多数情况下为主机名). Linux 也支持这种行为.")]),s._v(" "),a("p",[s._v("所以, 可以把主机名和 IP 地址的映射关系, 写入本机的 "),a("code",[s._v("/etc/hosts")]),s._v("​ 文件中. 这样指定的主机名就可以在本地直接找到目标 IP. 比如可以执行下面的命令来操作:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" /etc/hosts\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1   localhost localhost.localdomain\n::1         localhost6 localhost6.localdomain6\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.100 domain.com\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("或者, 还可以在内网中, 搭建自定义的 DNS 服务器, 专门用来解析内网中的域名. 而内网 DNS 服务器, 一般还会设置一个或多个上游 DNS 服务器, 用来解析外网的域名.")]),s._v(" "),a("p",[s._v("清楚域名与 DNS 解析的基本原理后, 接下来就来看几个案例, 实战分析 DNS 解析出现问题时, 该如何定位.")]),s._v(" "),a("h5",{attrs:{id:"_2-案例准备"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-案例准备"}},[s._v("#")]),s._v(" 2.案例准备")]),s._v(" "),a("p",[s._v("本次案例还是基于 Ubuntu 18.04, 同样适用于其他的 Linux 系统. 案例环境如下所示:")]),s._v(" "),a("ul",[a("li",[s._v("机器配置: 2 CPU, 8GB 内存.")]),s._v(" "),a("li",[s._v("预先安装 docker 等工具, 如 apt install docker.io.")])]),s._v(" "),a("p",[s._v("可以先打开一个终端, SSH 登录到 Ubuntu 机器中, 然后执行下面的命令, 拉取案例中使用的 Docker 镜像:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" pull feisky/dnsutils\nUsing default tag: latest\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\nStatus: Downloaded newer image "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" feisky/dnsutils:latest\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("然后, 运行下面的命令, 查看主机当前配置的 DNS 服务器:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" /etc/resolv.conf\nnameserver "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("114.114")]),s._v(".114.114\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("可以看到, 我这台主机配置的 DNS 服务器是 114.114.114.114.")]),s._v(" "),a("h5",{attrs:{id:"_3-案例分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-案例分析"}},[s._v("#")]),s._v(" 3.案例分析")]),s._v(" "),a("h6",{attrs:{id:"_1-案例1-dns解析失败"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-案例1-dns解析失败"}},[s._v("#")]),s._v(" (1)案例1:DNS解析失败")]),s._v(" "),a("p",[s._v("首先执行下面的命令. 如果一切正常, 将可以看到下面这个输出:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 进入案例环境的 SHELL 终端中")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-it")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--rm")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-v")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v("mktemp"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v(":/etc/resolv.conf feisky/dnsutils "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v("\nroot@7e9ed6ed4974:/"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("注意, 这儿 root 后面的 7e9ed6ed4974, 是 Docker 生成容器的 ID 前缀, 你的环境中很可能是不同的 ID, 所以直接忽略这一项就可以了.")]),s._v(" "),a("blockquote",[a("p",[s._v("注意: 下面的代码段中, /# 开头的命令都表示在容器内部运行的命令.")])]),s._v(" "),a("p",[s._v("接着继续在容器终端中, 执行 DNS 查询命令, 还是查询 time.geekbang.org 的 IP 地址:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("/"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# nslookup time.geekbang.org")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" connection timed out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" no servers could be reached\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("可以发现, 这个命令阻塞很久后, 还是失败了, 报了 connection timed out 和 no servers could be reached 错误.")]),s._v(" "),a("p",[s._v("看到这里, 估计你的第一反应就是网络不通了, 到底是不是这样呢? 用 ping 工具检查试试. 执行下面的命令, 就可以测试本地到 114.114.114.114 的连通性:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("/"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ping -c3 114.114.114.114")]),s._v("\nPING "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("114.114")]),s._v(".114.114 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("114.114")]),s._v(".114.114"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("56")]),s._v(" data bytes\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" bytes from "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("114.114")]),s._v(".114.114: "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("icmp_seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("56")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("time")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("31.116")]),s._v(" ms\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" bytes from "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("114.114")]),s._v(".114.114: "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("icmp_seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("60")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("time")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("31.245")]),s._v(" ms\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" bytes from "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("114.114")]),s._v(".114.114: "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("icmp_seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("68")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("time")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("31.128")]),s._v(" ms\n--- "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("114.114")]),s._v(".114.114 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ping")]),s._v(" statistics ---\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" packets transmitted, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" packets received, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("% packet loss\nround-trip min/avg/max/stddev "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("31.116")]),s._v("/31.163/31.245/0.058 ms\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("这个输出中, 可以看到"),a("strong",[s._v("网络是通")]),s._v("的. 那要怎么知道 nslookup 命令失败的原因呢? 这里其实有很多方法, 最简单的一种, 就是"),a("strong",[s._v("开启 nslookup 的调试输出")]),s._v(", 查看查询过程中的详细步骤, 排查其中是否有异常.")]),s._v(" "),a("p",[s._v("比如, 可以继续在容器终端中, 执行下面的命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("/"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# nslookup -debug time.geekbang.org")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" Connection to "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#53(127.0.0.1) for time.geekbang.org failed: connection refused.")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" Connection to ::1"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#53(::1) for time.geekbang.org failed: address not available.")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("从这次的输出可以看到, nslookup 连接环回地址(127.0.0.1 和 ::1)的 53 端口失败. 这里就有问题了, 为什么会去连接环回地址, 而不是先前看到的 114.114.114.114 呢?")]),s._v(" "),a("p",[s._v("你可能已经想到了症结所在--"),a("strong",[s._v("有可能是因为容器中没有配置 DNS 服务器")]),s._v(". 那就执行下面的命令确认一下:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("/"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# cat /etc/resolv.conf")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("果然, 这个命令没有任何输出, "),a("strong",[s._v("说明容器里的确没有配置 DNS 服务器")]),s._v(". 到这一步, 很自然的就知道了解决方法. 在 "),a("code",[s._v("/etc/resolv.conf")]),s._v("​ 文件中, 配置上 DNS 服务器就可以了.")]),s._v(" "),a("p",[s._v("可以执行下面的命令, 在配置好 DNS 服务器后, 重新执行 nslookup 命令. 现在发现, 这次可以正常解析了:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("/"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# echo "nameserver 114.114.114.114" > /etc/resolv.conf')]),s._v("\n/"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# nslookup time.geekbang.org")]),s._v("\nServer:\t\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("114.114")]),s._v(".114.114\nAddress:\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("114.114")]),s._v(".114.114"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#53")]),s._v("\n \nNon-authoritative answer:\nName:\ttime.geekbang.org\nAddress: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("39.106")]),s._v(".233.176\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("到这里, 第一个案例就轻松解决了. 最后, 在终端中执行 exit 命令退出容器, Docker 就会自动清理刚才运行的容器.")]),s._v(" "),a("h6",{attrs:{id:"_2-案例2-dns解析不稳定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-案例2-dns解析不稳定"}},[s._v("#")]),s._v(" (2)案例2:DNS解析不稳定")]),s._v(" "),a("p",[s._v("接下来再来看第二个案例. 执行下面的命令, 启动一个新的容器, 并进入它的终端中:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-it")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--rm")]),s._v(" --cap-add"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("NET_ADMIN "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--dns")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8.8")]),s._v(".8.8 feisky/dnsutils "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v("\nroot@0cd3ee0c8ecb:/"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("跟上一个案例一样, 还是运行 nslookup 命令, 解析 time.geekbang.org 的 IP 地址. 不过, 这次要加一个 time 命令, 输出解析所用时间. 如果一切正常, 可能会看到如下输出:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("/"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# time nslookup time.geekbang.org")]),s._v("\nServer:\t\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8.8")]),s._v(".8.8\nAddress:\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8.8")]),s._v(".8.8"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#53")]),s._v("\n \nNon-authoritative answer:\nName:\ttime.geekbang.org\nAddress: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("39.106")]),s._v(".233.176\n \nreal\t0m10.349s\nuser\t0m0.004s\nsys\t0m0.0\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("可以看到, 这次解析非常慢, 居然用了 10 秒. 如果多次运行上面的 nslookup 命令, 可能偶尔还会碰到下面这种错误:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("/"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# time nslookup time.geekbang.org")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" connection timed out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" no servers could be reached\n \nreal\t0m15.011s\nuser\t0m0.006s\nsys\t0m0.006s\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("换句话说, 跟上一个案例类似, 也会出现解析失败的情况. 综合来看, 现在 DNS 解析的结果不但比较慢, 而且还会发生超时失败的情况.")]),s._v(" "),a("p",[s._v("这是为什么呢? 碰到这种问题该怎么处理呢?")]),s._v(" "),a("p",[s._v("其实, 根据前面的讲解可以知道, DNS 解析, 说白了就是"),a("strong",[s._v("客户端与服务器交互的过程")]),s._v(", 并且这个过程还使用了 UDP 协议.")]),s._v(" "),a("p",[s._v("那么, 对于整个流程来说, 解析结果不稳定, 就有很多种可能的情况了. 比方说:")]),s._v(" "),a("ul",[a("li",[s._v("DNS 服务器本身有问题, 响应慢并且不稳定;")]),s._v(" "),a("li",[s._v("或者是, 客户端到 DNS 服务器的网络延迟比较大;")]),s._v(" "),a("li",[s._v("再或者, DNS 请求或者响应包, 在某些情况下被链路中的网络设备弄丢了.")])]),s._v(" "),a("p",[s._v("根据上面 nslookup 的输出, 可以看到, 现在客户端连接的 DNS 是 8.8.8.8, 这是 Google 提供的 DNS 服务. 对 Google 的 DNS 服务器出问题的概率应该比较小. 基本排除了 DNS 服务器的问题, 那是不是第二种可能, 本机到 DNS 服务器的延迟比较大呢?")]),s._v(" "),a("p",[s._v("前面讲过, ping 可以用来测试服务器的延迟. 比如可以运行下面的命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("/"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ping -c3 8.8.8.8")]),s._v("\nPING "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8.8")]),s._v(".8.8 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8.8")]),s._v(".8.8"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("56")]),s._v(" data bytes\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" bytes from "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8.8")]),s._v(".8.8: "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("icmp_seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("31")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("time")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("137.637")]),s._v(" ms\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" bytes from "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8.8")]),s._v(".8.8: "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("icmp_seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("31")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("time")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("144.743")]),s._v(" ms\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" bytes from "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8.8")]),s._v(".8.8: "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("icmp_seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("31")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("time")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("138.576")]),s._v(" ms\n--- "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8.8")]),s._v(".8.8 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ping")]),s._v(" statistics ---\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" packets transmitted, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" packets received, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("% packet loss\nround-trip min/avg/max/stddev "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("137.637")]),s._v("/140.319/144.743/3.152 ms\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("从 ping 的输出可以看到, 这里的延迟已经达到了 140ms, 这也就可以解释, 为什么解析这么慢了. 实际上, 如果多次运行上面的 ping 测试, 还会看到偶尔出现的丢包现象.")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ping")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8.8")]),s._v(".8.8\nPING "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8.8")]),s._v(".8.8 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8.8")]),s._v(".8.8"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("56")]),s._v(" data bytes\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" bytes from "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8.8")]),s._v(".8.8: "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("icmp_seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("time")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("134.032")]),s._v(" ms\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" bytes from "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8.8")]),s._v(".8.8: "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("icmp_seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("time")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("431.458")]),s._v(" ms\n--- "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8.8")]),s._v(".8.8 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ping")]),s._v(" statistics ---\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" packets transmitted, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" packets received, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("33")]),s._v("% packet loss\nround-trip min/avg/max/stddev "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("134.032")]),s._v("/282.745/431.458/148.713 ms\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("这也进一步解释了, 为什么 nslookup 偶尔会失败, 正是网络链路中的丢包导致的.")]),s._v(" "),a("p",[s._v("碰到这种问题该怎么办呢? 显然, 既然延迟太大, 那就换一个延迟更小的 DNS 服务器, 比如电信提供的 114.114.114.114.")]),s._v(" "),a("p",[s._v("配置之前, 可以先用 ping 测试看看, 它的延迟是不是真的比 8.8.8.8 好. 执行下面的命令, 就可以看到, 它的延迟只有 31ms:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("/"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ping -c3 114.114.114.114")]),s._v("\nPING "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("114.114")]),s._v(".114.114 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("114.114")]),s._v(".114.114"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("56")]),s._v(" data bytes\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" bytes from "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("114.114")]),s._v(".114.114: "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("icmp_seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("67")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("time")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("31.130")]),s._v(" ms\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" bytes from "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("114.114")]),s._v(".114.114: "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("icmp_seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("56")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("time")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("31.302")]),s._v(" ms\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" bytes from "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("114.114")]),s._v(".114.114: "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("icmp_seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("56")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("time")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("31.250")]),s._v(" ms\n--- "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("114.114")]),s._v(".114.114 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ping")]),s._v(" statistics ---\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" packets transmitted, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" packets received, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("% packet loss\nround-trip min/avg/max/stddev "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("31.130")]),s._v("/31.227/31.302/0.072 ms\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("这个结果表明, 延迟的确小了很多. 继续执行下面的命令, 更换 DNS 服务器, 然后再次执行 nslookup 解析命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("/"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# echo nameserver 114.114.114.114 > /etc/resolv.conf")]),s._v("\n/"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# time nslookup time.geekbang.org")]),s._v("\nServer:\t\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("114.114")]),s._v(".114.114\nAddress:\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("114.114")]),s._v(".114.114"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#53")]),s._v("\n \nNon-authoritative answer:\nName:\ttime.geekbang.org\nAddress: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("39.106")]),s._v(".233.176\n \nreal    0m0.064s\nuser    0m0.007s\nsys     0m0.006s\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("可以发现, 现在只需要 64ms 就可以完成解析, 比刚才的 10s 要好很多.")]),s._v(" "),a("p",[s._v("到这里问题看似就解决了. 不过, 如果多次运行 nslookup 命令, 估计就不是每次都有好结果了. 比如, 在我的机器中, 就经常需要 1s 甚至更多的时间.")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("/"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# time nslookup time.geekbang.org")]),s._v("\nServer:\t\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("114.114")]),s._v(".114.114\nAddress:\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("114.114")]),s._v(".114.114"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#53")]),s._v("\n \nNon-authoritative answer:\nName:\ttime.geekbang.org\nAddress: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("39.106")]),s._v(".233.176\n \nreal\t0m1.045s\nuser\t0m0.007s\nsys\t0m0.004s\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("1s 的 DNS 解析时间还是太长了, 对很多应用来说也是不可接受的. 那该怎么解决这个问题呢? 我想你一定已经想到了, 那就是"),a("strong",[s._v("使用 DNS 缓存")]),s._v(". 这样, 只有第一次查询时需要去 DNS 服务器请求, 以后的查询, 只要 DNS 记录不过期, 使用缓存中的记录就可以了.")]),s._v(" "),a("p",[s._v("不过要注意, 大家使用的主流 Linux 发行版, 除了最新版本的 Ubuntu (如 18.04 或者更新版本)外, 其他版本并没有自动配置 DNS 缓存.")]),s._v(" "),a("p",[s._v("所以, 想要为系统开启 DNS 缓存, 就需要做额外的配置. 比如, 最简单的方法, 就是使用 "),a("strong",[s._v("dnsmasq")]),s._v(". dnsmasq 是最常用的 DNS 缓存服务之一, 还经常作为 DHCP 服务来使用. 它的安装和配置都比较简单, 性能也可以满足绝大多数应用程序对 DNS 缓存的需求.")]),s._v(" "),a("p",[s._v("继续在刚才的容器终端中, 执行下面的命令, 就可以启动 dnsmasq:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("/"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# /etc/init.d/dnsmasq start")]),s._v("\n * Starting DNS forwarder and DHCP server dnsmasq                    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" OK "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("然后, 修改 "),a("code",[s._v("/etc/resolv.conf")]),s._v("​, 将 DNS 服务器改为 dnsmasq 的监听地址, 这儿是 127.0.0.1. 接着重新执行多次 nslookup 命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("/"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# echo nameserver 127.0.0.1 > /etc/resolv.conf")]),s._v("\n/"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# time nslookup time.geekbang.org")]),s._v("\nServer:\t\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1\nAddress:\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#53")]),s._v("\n \nNon-authoritative answer:\nName:\ttime.geekbang.org\nAddress: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("39.106")]),s._v(".233.176\n \nreal\t0m0.492s\nuser\t0m0.007s\nsys\t0m0.006s\n \n/"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# time nslookup time.geekbang.org")]),s._v("\nServer:\t\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1\nAddress:\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#53")]),s._v("\n \nNon-authoritative answer:\nName:\ttime.geekbang.org\nAddress: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("39.106")]),s._v(".233.176\n \nreal\t0m0.011s\nuser\t0m0.008s\nsys\t0m0.003s\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br")])]),a("p",[s._v("现在可以看到, 只有第一次的解析很慢, 需要 0.5s, 以后的每次解析都很快, 只需要 11ms. 并且后面每次 DNS 解析需要的时间也都很稳定.")]),s._v(" "),a("h5",{attrs:{id:"_4-小结-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-小结-12"}},[s._v("#")]),s._v(" 4.小结")]),s._v(" "),a("p",[s._v("DNS 是互联网中最基础的一项服务, 提供了域名和 IP 地址间映射关系的查询服务. 很多应用程序在最初开发时, 并没考虑 DNS 解析的问题, 后续出现问题后, 排查好几天才能发现, 其实是 DNS 解析慢导致的.")]),s._v(" "),a("p",[s._v("试想, 假如一个 Web 服务的接口, 每次都需要 1s 时间来等待 DNS 解析, 那么无论怎么优化应用程序的内在逻辑, 对用户来说, 这个接口的响应都太慢, 因为响应时间总是会大于 1 秒的.")]),s._v(" "),a("p",[s._v("所以, 在应用程序的开发过程中, "),a("strong",[s._v("必须考虑到 DNS 解析可能带来的性能问题")]),s._v(", 掌握常见的优化方法. 这里总结了几种常见的 DNS 优化方法.")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("对 DNS 解析的结果进行缓存")]),s._v(". 缓存是最有效的方法, 但要注意, 一旦缓存过期, 还是要去 DNS 服务器重新获取新记录. 不过这对大部分应用程序来说都是可接受的.")]),s._v(" "),a("li",[a("strong",[s._v("对 DNS 解析的结果进行预取")]),s._v(". 这是浏览器等 Web 应用中最常用的方法, 也就是说, 不等用户点击页面上的超链接, 浏览器就会在后台自动解析域名, 并把结果缓存起来.")]),s._v(" "),a("li",[a("strong",[s._v("使用 HTTPDNS 取代常规的 DNS 解析")]),s._v(". 这是很多移动应用会选择的方法, 特别是如今域名劫持普遍存在, 使用 HTTP 协议绕过链路中的 DNS 服务器, 就可以避免域名劫持的问题.")]),s._v(" "),a("li",[a("strong",[s._v("基于 DNS 的全局负载均衡(GSLB)")]),s._v(" . 这不仅为服务提供了负载均衡和高可用的功能, 还可以根据用户的位置, 返回距离最近的 IP 地址.")])]),s._v(" "),a("h4",{attrs:{id:"_38-案例篇-怎么使用tcpdump和wireshark分析网络流量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_38-案例篇-怎么使用tcpdump和wireshark分析网络流量"}},[s._v("#")]),s._v(" 38-案例篇:怎么使用tcpdump和Wireshark分析网络流量?")]),s._v(" "),a("p",[s._v("上一节学习了 DNS 性能问题的分析和优化方法. 简单回顾一下, DNS 可以提供域名和 IP 地址的映射关系, 也是一种常用的全局负载均衡(GSLB)实现方法.")]),s._v(" "),a("p",[s._v("通常, 需要暴露到公网的服务, 都会绑定一个域名, 既方便了人们记忆, 也避免了后台服务 IP 地址的变更影响到用户. 不过要注意, DNS 解析受到各种网络状况的影响, 性能可能不稳定. 比如公网延迟增大, 缓存过期导致要重新去上游服务器请求, 或者流量高峰时 DNS 服务器性能不足等, 都会导致 DNS 响应的延迟增大. 此时, 可以借助 nslookup 或者 dig 的调试功能, 分析 DNS 的解析过程, 再配合 ping 等工具调试 DNS 服务器的延迟, 从而定位出性能瓶颈. 通常可以用缓存, 预取, HTTPDNS 等方法, 优化 DNS 的性能.")]),s._v(" "),a("p",[s._v("上一节用到的 ping, 是一个最常用的测试服务延迟的工具. 很多情况下, ping 可以定位出延迟问题, 不过有时候,  ping 本身也会出现意想不到的问题. 这时就需要抓取 ping 命令执行时收发的网络包, 然后分析这些网络包, 进而找出问题根源.")]),s._v(" "),a("p",[a("strong",[s._v("tcpdump 和 Wireshark 就是最常用的网络抓包和分析工具, 更是分析网络性能必不可少的利器")]),s._v(".")]),s._v(" "),a("ul",[a("li",[s._v("tcpdump 仅支持命令行格式使用, 常用在服务器中抓取和分析网络包.")]),s._v(" "),a("li",[s._v("Wireshark 除了可以抓包外, 还提供了强大的图形界面和汇总分析工具, 在分析复杂的网络情景时, 尤为简单和实用.")])]),s._v(" "),a("p",[s._v("因而, 在实际分析网络性能时, "),a("strong",[s._v("先用 tcpdump 抓包, 后用 Wireshark 分析")]),s._v(", 也是一种常用的方法.")]),s._v(" "),a("h5",{attrs:{id:"_1-案例准备-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-案例准备-5"}},[s._v("#")]),s._v(" 1.案例准备")]),s._v(" "),a("p",[s._v("本次案例还是基于 Ubuntu 18.04, 同样适用于其他的 Linux 系统. 案例环境是这样的:")]),s._v(" "),a("ul",[a("li",[s._v("机器配置: 2 CPU, 8GB 内存.")]),s._v(" "),a("li",[s._v("预先安装 tcpdump, Wireshark 等工具.")])]),s._v(" "),a("p",[s._v("由于 Wireshark 的图形界面, 并不能通过 SSH 使用, 所以推荐在本地机器(比如 Windows)中安装.")]),s._v(" "),a("h5",{attrs:{id:"_2-再探ping"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-再探ping"}},[s._v("#")]),s._v(" 2.再探ping")]),s._v(" "),a("p",[s._v("前面讲过, ping 是一种最常用的网络工具, 常用来探测网络主机之间的连通性以及延迟. 虽然 ping 比较简单, 但有时候会发现, ping 工具本身也可能出现异常, 比如运行缓慢, 但实际网络延迟却并不大的情况.")]),s._v(" "),a("p",[s._v("接下来打开一个终端, SSH 登录到案例机器中, 执行下面的命令, 来测试案例机器与极客邦科技官网的连通性和延迟. 如果一切正常, 会看到下面这个输出:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ping 3 次(默认每次发送间隔 1 秒)")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 假设 DNS 服务器还是上一期配置的 114.114.114.114")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ping")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c3")]),s._v(" geektime.org\nPING geektime.org "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("35.190")]),s._v(".27.188"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("56")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("84")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" bytes of data.\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" bytes from "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("35.190")]),s._v(".27.188 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("35.190")]),s._v(".27.188"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("icmp_seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("43")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("time")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("36.8")]),s._v(" ms\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" bytes from "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("35.190")]),s._v(".27.188 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("35.190")]),s._v(".27.188"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("icmp_seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("43")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("time")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("31.1")]),s._v(" ms\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" bytes from "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("35.190")]),s._v(".27.188 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("35.190")]),s._v(".27.188"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("icmp_seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("43")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("time")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("31.2")]),s._v(" ms\n \n--- geektime.org "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ping")]),s._v(" statistics ---\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" packets transmitted, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" received, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("% packet loss, "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("time")]),s._v(" 11049ms\nrtt min/avg/max/mdev "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("31.146")]),s._v("/33.074/36.809/2.649 ms\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("不过要注意, 假如运行时发现 ping 很快就结束了, 那就执行下面的命令, 再重试一下. 至于这条命令的含义, 稍后再做解释.")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 禁止接收从 DNS 服务器发送过来并包含 googleusercontent 的包")]),s._v("\n$ iptables "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-I")]),s._v(" INPUT "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" udp "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--sport")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("53")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-m")]),s._v(" string "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--string")]),s._v(" googleusercontent "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--algo")]),s._v(" bm "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-j")]),s._v(" DROP\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("根据 ping 的输出可以发现, geektime.org 解析后的 IP 地址是 35.190.27.188, 而后三次 ping 请求都得到了响应, 延迟(RTT)都是 30ms 多一点.")]),s._v(" "),a("p",[s._v("但汇总的地方, 就有点儿意思了. 3 次发送, 收到 3 次响应, 没有丢包, 但三次发送和接受的总时间居然超过了 11s(11049ms), 这就有些不可思议了吧. 会想起上一节的 DNS 解析问题, 你可能会怀疑, 这可能是 DNS 解析缓慢的问题. 但到底是不是呢?")]),s._v(" "),a("p",[s._v("再回去看 ping 的输出, 三次 ping 请求中, 用的都是 IP 地址, 说明 ping 只需要在最开始运行时, 解析一次得到 IP, 后面就可以只用 IP 了.")]),s._v(" "),a("p",[s._v("再用 nslookup 试试. 在终端中执行下面的 nslookup 命令, 注意这次同样加了 time 命令, 输出 nslookup 的执行时间:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("time")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("nslookup")]),s._v(" geektime.org\nServer:\t\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("114.114")]),s._v(".114.114\nAddress:\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("114.114")]),s._v(".114.114"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#53")]),s._v("\n \nNon-authoritative answer:\nName:\tgeektime.org\nAddress: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("35.190")]),s._v(".27.188\n \nreal\t0m0.044s\nuser\t0m0.006s\nsys\t0m0.003s\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("可以看到, 域名解析还是很快的, 只需要 44ms, 显然比 11s 短了很多.")]),s._v(" "),a("p",[s._v("到这里, 再往后该怎么分析呢? 其实, "),a("strong",[s._v("这时候就可以用 tcpdump 抓包, 查看 ping 在收发哪些网络包")]),s._v(".")]),s._v(" "),a("p",[s._v("再打开另一个终端(终端二), SSH 登录案例机器后, 执行下面的命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ tcpdump "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-nn")]),s._v(" udp port "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("53")]),s._v(" or "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("host")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("35.190")]),s._v(".27.188\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("当然可以直接用 tcpdump 不加任何参数来抓包, 但那样的话, 就可能抓取到很多不相干的包. 由于已经执行过 ping 命令, 知道了 geekbang.org 的 IP 地址是 35.190.27.188, 也知道 ping 命令会执行 DNS 查询. 所以, 上面这条命令, 就是基于这个规则进行过滤.")]),s._v(" "),a("p",[s._v("来具体解释一下这条命令.")]),s._v(" "),a("ul",[a("li",[s._v("-nn, 表示不解析抓包中的域名(即不反向解析), 协议以及端口号.")]),s._v(" "),a("li",[s._v("udp port 53, 表示只显示 UDP 协议的端口号(包括源端口和目的端口)为 53 的包.")]),s._v(" "),a("li",[s._v("host 35.190.27.188, 表示只显示 IP 地址(包括源地址和目的地址)为 35.190.27.188 的包.")]),s._v(" "),a("li",[s._v('这两个过滤条件中间的 "or", 表示或的关系, 也就是说, 只要满足上面两个条件中的任一个, 就可以展示出来.')])]),s._v(" "),a("p",[s._v("接下来回到终端一, 执行相同的 ping 命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ping")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c3")]),s._v(" geektime.org\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n--- geektime.org "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ping")]),s._v(" statistics ---\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" packets transmitted, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" received, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("% packet loss, "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("time")]),s._v(" 11095ms\nrtt min/avg/max/mdev "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("81.473")]),s._v("/81.572/81.757/0.130 ms\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("命令结束后, 再回到终端二中, 查看 tcpdump 的输出:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("tcpdump: verbose output suppressed, use "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-v")]),s._v(" or "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-vv")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" full protocol decode\nlistening on eth0, link-type EN10MB "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Ethernet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(", capture size "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("262144")]),s._v(" bytes\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":02:31.100564 IP "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.16")]),s._v(".3.4.56669 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("114.114")]),s._v(".114.114.53: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("36909")]),s._v("+ A? geektime.org. "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":02:31.507699 IP "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("114.114")]),s._v(".114.114.53 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.16")]),s._v(".3.4.56669: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("36909")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("/0/0 A "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("35.190")]),s._v(".27.188 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("46")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":02:31.508164 IP "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.16")]),s._v(".3.4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("35.190")]),s._v(".27.188: ICMP "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" request, "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("id")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4356")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("seq")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(", length "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":02:31.539667 IP "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("35.190")]),s._v(".27.188 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.16")]),s._v(".3.4: ICMP "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" reply, "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("id")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4356")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("seq")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(", length "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":02:31.539995 IP "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.16")]),s._v(".3.4.60254 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("114.114")]),s._v(".114.114.53: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("49932")]),s._v("+ PTR? "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("188.27")]),s._v(".190.35.in-addr.arpa. "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("44")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":02:36.545104 IP "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.16")]),s._v(".3.4.60254 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("114.114")]),s._v(".114.114.53: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("49932")]),s._v("+ PTR? "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("188.27")]),s._v(".190.35.in-addr.arpa. "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("44")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":02:41.551284 IP "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.16")]),s._v(".3.4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("35.190")]),s._v(".27.188: ICMP "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" request, "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("id")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4356")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("seq")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(", length "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":02:41.582363 IP "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("35.190")]),s._v(".27.188 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.16")]),s._v(".3.4: ICMP "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" reply, "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("id")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4356")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("seq")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(", length "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":02:42.552506 IP "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.16")]),s._v(".3.4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("35.190")]),s._v(".27.188: ICMP "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" request, "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("id")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4356")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("seq")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(", length "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":02:42.583646 IP "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("35.190")]),s._v(".27.188 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.16")]),s._v(".3.4: ICMP "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" reply, "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("id")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4356")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("seq")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(", length "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("这次输出中, 前两行, 表示 tcpdump 的选项以及接口的基本信息; 从第三行开始, 就是抓取到的网络包的输出. 这些输出的格式, 都是 "),a("code",[s._v("时间戳 协议 源地址.源端口 > 目的地址.目的端口 网络包详细信息")]),s._v("(这是最基本的格式, 可以通过选项增加其他字段).")]),s._v(" "),a("p",[s._v("前面的字段, 都比较好理解. 但网络包的详细信息, 本身根据协议的不同而不同. 所以要理解这些网络包的详细含义, 就要对常用网络协议的基本格式以及交互原理, 有基本的了解. 当然, 实际上, 这些内容都会记录在 IETF( 互联网工程任务组)发布的 "),a("a",{attrs:{href:"https://tools.ietf.org/rfc/index",target:"_blank",rel:"noopener noreferrer"}},[s._v("RFC"),a("OutboundLink")],1),s._v("(请求意见稿)中.")]),s._v(" "),a("p",[s._v("比如, 第一条就表示, 从本地 IP 发送到 114.114.114.114 的 A 记录查询请求, 它的报文格式记录在 RFC1035 中, 可以点击"),a("a",{attrs:{href:"https://www.ietf.org/rfc/rfc1035.txt",target:"_blank",rel:"noopener noreferrer"}},[s._v("这里"),a("OutboundLink")],1),s._v("查看. 在这个 tcpdump 的输出中,")]),s._v(" "),a("ul",[a("li",[s._v("36909+ 表示查询标识值, 它也会出现在响应中, 加号表示启用递归查询.")]),s._v(" "),a("li",[s._v("A? 表示查询 A 记录.")]),s._v(" "),a("li",[s._v("geektime.org. 表示待查询的域名.")]),s._v(" "),a("li",[s._v("30 表示报文长度.")])]),s._v(" "),a("p",[s._v("接下来的一条, 则是从 114.114.114.114 发送回来的 DNS 响应——域名 geektime.org. 的 A 记录值为 35.190.27.188.")]),s._v(" "),a("p",[s._v("第三条和第四条, 是 ICMP echo request 和 ICMP echo reply, 响应包的时间戳 14:02:31.539667, 减去请求包的时间戳 14:02:31.508164 , 就可以得到这次 ICMP 所用时间为 30ms. 这看起来并没有问题.")]),s._v(" "),a("p",[s._v("但随后的两条反向地址"),a("strong",[s._v("解析 PTR 请求")]),s._v(", 就比较可疑了. 因为只看到了请求包, 却没有应答包. 仔细观察它们的时间会发现, 这两条记录都是发出后 5s 才出现下一个网络包, 两条 PTR 记录就消耗了 10s.")]),s._v(" "),a("p",[s._v("再往下看, 最后的四个包, 则是两次正常的 ICMP 请求和响应, 根据时间戳计算其延迟, 也是 30ms.")]),s._v(" "),a("p",[s._v("到这里, 其实也就找到了 ping 缓慢的根源, "),a("strong",[s._v("正是两次 PTR 请求没有得到响应而超时导致的. PTR 反向地址解析的目的, 是从 IP 地址反查出域名")]),s._v(", 但事实上, 并非所有 IP 地址都会定义 PTR 记录, 所以 PTR 查询很可能会失败.")]),s._v(" "),a("p",[s._v("所以, 在使用 ping 时, 如果发现结果中的延迟并不大, 而 ping 命令本身却很慢, 不要慌, 有可能是背后的 PTR 在搞鬼.")]),s._v(" "),a("p",[s._v("知道问题后, 解决起来就比较简单了, 只要禁止 PTR 就可以. 还是老路子, 执行 man ping 命令, 查询使用手册, 就可以找出相应的方法, 即加上 -n 选项禁止名称解析. 比如可以在终端中执行如下命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ping")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-n")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c3")]),s._v(" geektime.org\nPING geektime.org "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("35.190")]),s._v(".27.188"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("56")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("84")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" bytes of data.\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" bytes from "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("35.190")]),s._v(".27.188: "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("icmp_seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("43")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("time")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("33.5")]),s._v(" ms\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" bytes from "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("35.190")]),s._v(".27.188: "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("icmp_seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("43")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("time")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("39.0")]),s._v(" ms\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" bytes from "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("35.190")]),s._v(".27.188: "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("icmp_seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("43")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("time")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("32.8")]),s._v(" ms\n \n--- geektime.org "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ping")]),s._v(" statistics ---\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" packets transmitted, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" received, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("% packet loss, "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("time")]),s._v(" 2002ms\nrtt min/avg/max/mdev "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("32.879")]),s._v("/35.160/39.030/2.755 ms\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("可以发现, 现在只需要 2s 就可以结束, 比刚才的 11s 可是快多了. 到这里, 就一起使用 tcpdump, 解决了一个最常见的 ping 工作缓慢的问题.")]),s._v(" "),a("p",[s._v("案例最后, 如果在开始时, 执行了 iptables 命令, 那也不要忘了删掉它:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ iptables "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-D")]),s._v(" INPUT "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" udp "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--sport")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("53")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-m")]),s._v(" string "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--string")]),s._v(" googleusercontent "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--algo")]),s._v(" bm "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-j")]),s._v(" DROP\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("不过, 删除后你肯定还有疑问, 明明案例跟 Google 没啥关系, 为什么要根据 googleusercontent, 这个毫不相关的字符串来过滤包呢?")]),s._v(" "),a("p",[s._v("实际上, 如果换一个 DNS 服务器, 就可以用 PTR 反查到 35.190.27.188 所对应的域名:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("nslookup")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-type")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("PTR "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("35.190")]),s._v(".27.188 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8.8")]),s._v(".8.8\nServer:\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8.8")]),s._v(".8.8\nAddress:\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8.8")]),s._v(".8.8"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#53")]),s._v("\nNon-authoritative answer:\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("188.27")]),s._v(".190.35.in-addr.arpa\tname "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("188.27")]),s._v(".190.35.bc.googleusercontent.com.\nAuthoritative answers can be found from:\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("虽然查到了 PTR 记录, 但结果并非 geekbang.org, 而是 188.27.190.35.bc.googleusercontent.com. 其实, 这也是为什么, 案例开始时将包含 googleusercontent 的丢弃后, ping 就慢了. 因为 iptables, 实际上是把 PTR 响应给丢了, 所以会导致 PTR 请求超时.")]),s._v(" "),a("p",[s._v("tcpdump 可以说是网络性能分析最有效的利器. 接下来再一起看看 tcpdump 的更多使用方法.")]),s._v(" "),a("h5",{attrs:{id:"_3-tcpdump"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-tcpdump"}},[s._v("#")]),s._v(" 3.tcpdump")]),s._v(" "),a("p",[s._v("tcpdump 也是最常用的一个网络分析工具. 它基于 "),a("a",{attrs:{href:"https://www.tcpdump.org/",target:"_blank",rel:"noopener noreferrer"}},[s._v("libpcap"),a("OutboundLink")],1),s._v(", 利用内核中的 AF_PACKET 套接字, 抓取网络接口中传输的网络包; 并提供了强大的过滤规则, 帮你从大量的网络包中, 挑出最想关注的信息.")]),s._v(" "),a("p",[s._v("tcpdump 展示了每个网络包的详细细节, 这就要求, 在使用前必须要对网络协议有基本了解. 而要了解网络协议的详细设计和实现细节, "),a("a",{attrs:{href:"https://www.rfc-editor.org/rfc-index.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("RFC"),a("OutboundLink")],1),s._v(" 当然是最权威的资料.")]),s._v(" "),a("p",[s._v("再回到 tcpdump 工具本身, 它的基本使用方法, 还是比较简单的, 也就是 "),a("strong",[s._v("tcpdump")]),s._v(" "),a("strong",[s._v("选项过滤表达式")]),s._v(". 当然选项和表达式的外面都加了中括号, 表明它们都是可选的.")]),s._v(" "),a("p",[s._v("为了帮你更快上手 tcpdump 的使用, 这里也整理了一些最常见的用法, 并且绘制成了表格. 首先来看一下常用的几个选项. 在上面的 ping 案例中, 用过  "),a("strong",[s._v("-nn")]),s._v(" 选项, 表示不用对 IP 地址和端口号进行名称解析. 其他常用选项, 用下面这张表格来解释.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/303b6a5fcf0ac9efd4737bd6eb46379a-20230731161933-c74ymae.png",alt:""}})]),s._v(" "),a("p",[s._v("接下来再来看常用的过滤表达式. 刚刚用过的是 udp port 53 or host 35.190.27.188, 表示抓取 DNS 协议的请求和响应包, 以及源地址或目的地址为 35.190.27.188 的包.")]),s._v(" "),a("p",[s._v("其他常用的过滤选项, 也整理成了下面这个表格.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/f535fd4d81f11403d291976c19e46a5d-20230731161933-6uhl5qz.png",alt:""}})]),s._v(" "),a("p",[s._v("最后, 再次强调 tcpdump 的输出格式, 在前面已经介绍了它的基本格式:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("时间戳 协议 源地址.源端口 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" 目的地址.目的端口 网络包详细信息\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("其中, 网络包的详细信息取决于协议, 不同协议展示的格式也不同. 所以, 更详细的使用方法, 还是需要去查询 tcpdump 的 "),a("a",{attrs:{href:"https://www.tcpdump.org/manpages/tcpdump.1.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("man"),a("OutboundLink")],1),s._v(" 手册(执行 man tcpdump 也可以得到).")]),s._v(" "),a("p",[s._v("tcpdump 虽然功能强大, 可是输出格式却并不直观. 特别是当系统中网络包数比较多(比如 PPS 超过几千)的时候, 想从 tcpdump 抓取的网络包中分析问题就实在不容易.")]),s._v(" "),a("h5",{attrs:{id:"_4-wireshark"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-wireshark"}},[s._v("#")]),s._v(" 4.Wireshark")]),s._v(" "),a("p",[s._v("对比之下, Wireshark 则通过图形界面, 以及一系列的汇总分析工具, 提供了更友好的使用界面, 让你可以用更快的速度, 摆平网络性能问题. 接下来看看它. Wireshark 也是最流行的一个网络分析工具, 它最大的好处就是提供了跨平台的图形界面. 跟 tcpdump 类似, Wireshark 也提供了强大的过滤规则表达式, 同时, 还内置了一系列的汇总分析工具.")]),s._v(" "),a("p",[s._v("比如, 拿刚刚的 ping 案例来说, 可以执行下面的命令, 把抓取的网络包保存到 ping.pcap 文件中:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ tcpdump "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-nn")]),s._v(" udp port "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("53")]),s._v(" or "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("host")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("35.190")]),s._v(".27.188 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-w")]),s._v(" ping.pcap\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("接着, 把它拷贝到你安装有 Wireshark 的机器中, 比如可以用 scp 把它拷贝到本地来:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("scp")]),s._v(" host-ip/path/ping.pcap "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("然后, 再用 Wireshark 打开它. 打开后就可以看到下面这个界面:")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/52b1a9311c028ba8fe2eab6e8f335f3a-20230731161933-s5tqy6u.png",alt:""}})]),s._v(" "),a("p",[s._v("从 Wireshark 的界面里可以发现, 它不仅以更规整的格式, 展示了各个网络包的头部信息; 还用了不同颜色, 展示 DNS 和 ICMP 这两种不同的协议. 也可以一眼看出, "),a("strong",[s._v("中间的两条 PTR 查询并没有响应包")]),s._v(".")]),s._v(" "),a("p",[s._v("接着, 在网络包列表中选择某一个网络包后, 在其下方的网络包详情中, 还可以看到, 这个包在协议栈各层的详细信息. 比如, 以编号为 5 的 PTR 包为例:")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/baaff2d6fd537d256f41e900fff8a8bd-20230731161933-sgcyh4u.png",alt:""}})]),s._v(" "),a("p",[s._v("可以看到, IP 层(Internet Protocol)的源地址和目的地址, 传输层的 UDP 协议(Uder Datagram Protocol), 应用层的 DNS 协议(Domain Name System)的概要信息.")]),s._v(" "),a("p",[s._v("继续点击每层左边的箭头, 就可以看到该层协议头的所有信息. 比如点击 DNS 后, 就可以看到 Transaction ID, Flags, Queries 等 DNS 协议各个字段的数值以及含义.")]),s._v(" "),a("p",[s._v("当然, Wireshark 的功能远不止如此. 接下来看一个 HTTP 的例子, 并理解 TCP 三次握手和四次挥手的工作原理.")]),s._v(" "),a("p",[s._v("这个案例将要访问的是 "),a("code",[s._v("http://example.com/")]),s._v("​. 进入终端一, 执行下面的命令, 首先查出 example.com 的 IP. 然后, 执行 tcpdump 命令, 过滤得到的 IP 地址, 并将结果保存到 web.pcap 中.")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("dig")]),s._v(" +short example.com\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("93.184")]),s._v(".216.34\n$ tcpdump "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-nn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("host")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("93.184")]),s._v(".216.34 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-w")]),s._v(" web.pcap\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("实际上, 你可以在 host 表达式中, 直接使用域名, 即 "),a("strong",[s._v("tcpdump -nn host example.com -w web.pcap")]),s._v(".")]),s._v(" "),a("p",[s._v("接下来, 切换到终端二, 执行下面的 curl 命令, 访问 http://example.com:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" http://example.com\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("最后再回到终端一, 按下 Ctrl+C 停止 tcpdump, 并把得到的 web.pcap 拷贝出来.")]),s._v(" "),a("p",[s._v("使用 Wireshark 打开 web.pcap 后, 就可以在 Wireshark 中, 看到如下的界面:")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/cfe1d3c22b1ff4e552f4b36ff8ad1b98-20230731161933-98jh9r8.png",alt:""}})]),s._v(" "),a("p",[s._v("由于 HTTP 基于 TCP, 所以"),a("strong",[s._v("最先看到的三个包, 分别是 TCP 三次握手的包. 接下来, 中间的才是 HTTP 请求和响应包, 而最后的三个包, 则是 TCP 连接断开时的三次挥手包")]),s._v(".")]),s._v(" "),a("p",[s._v("从菜单栏中, 点击 Statistics -> Flow Graph, 然后在弹出的界面中的 Flow type 选择 TCP Flows, 可以更清晰的看到, 整个过程中 TCP 流的执行过程:")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/33312592b0118acd1638ab5d27b84418-20230731161933-rnp8bkv.png",alt:""}})]),s._v(" "),a("p",[s._v("这其实跟各种教程上讲到的, TCP 三次握手和四次挥手很类似, 作为对比, 通常看到的 TCP 三次握手和四次挥手的流程, 基本是这样的:")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/image-20240310145859-j5i5438.png",alt:"image"}})]),s._v(" "),a("p",[s._v("不过, 对比这两张图会发现, 这里抓到的包跟上面的四次挥手, 并不完全一样, 实际挥手过程只有三个包, 而不是四个. 其实, 之所以有三个包, "),a("strong",[s._v('是因为服务器端收到客户端的 FIN 后, 服务器端同时也要关闭连接, 这样就可以把 ACK 和 FIN 合并到一起发送, 节省了一个包, 变成了"三次挥手"')]),s._v(" .")]),s._v(" "),a("p",[s._v("而通常情况下, 服务器端收到客户端的 FIN 后, 很可能还没发送完数据, 所以就会先回复客户端一个 ACK 包. 稍等一会儿, 完成所有数据包的发送后, 才会发送 FIN 包. 这也就是四次挥手了.")]),s._v(" "),a("p",[s._v("抓包后, Wireshark 中就会显示下面这个界面:")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/39dbc30d67d4e41efc3678c16af5577b-20230731161933-5o5hzwo.png",alt:""}})]),s._v(" "),a("h5",{attrs:{id:"_5-小结-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-小结-8"}},[s._v("#")]),s._v(" 5.小结")]),s._v(" "),a("p",[s._v("本节学了 tcpdump 和 Wireshark 的使用方法, 并通过几个案例, 学会了如何运用这两个工具来分析网络的收发过程, 并找出潜在的性能问题.")]),s._v(" "),a("p",[s._v("实际上, "),a("strong",[s._v("根据 IP 地址反查域名, 根据端口号反查协议名称, 是很多网络工具默认的行为, 而这往往会导致性能工具的工作缓慢")]),s._v(". 所以, 通常, 网络性能工具都会提供一个选项(比如 -n 或者 -nn), 来禁止名称解析.")]),s._v(" "),a("p",[s._v("在工作中, 当碰到网络性能问题时, 不要忘记 tcpdump 和 Wireshark 这两个大杀器. 可以用它们抓取实际传输的网络包, 再排查是否有潜在的性能问题.")]),s._v(" "),a("h4",{attrs:{id:"_39-案例篇-怎么缓解ddos攻击带来的性能下降问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_39-案例篇-怎么缓解ddos攻击带来的性能下降问题"}},[s._v("#")]),s._v(" 39-案例篇:怎么缓解DDoS攻击带来的性能下降问题?")]),s._v(" "),a("p",[s._v("本节来看另外一个问题, "),a("strong",[s._v("怎么缓解 DDoS(Distributed Denial of Service)带来的性能下降问题")]),s._v(".")]),s._v(" "),a("h5",{attrs:{id:"_1-ddos简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-ddos简介"}},[s._v("#")]),s._v(" 1.DDoS简介")]),s._v(" "),a("p",[s._v("DDoS 的前身是 DoS(Denail of Service), 即拒绝服务攻击, 指利用大量的合理请求, 来占用过多的目标资源, 从而使目标服务无法响应正常请求.")]),s._v(" "),a("p",[s._v("DDoS(Distributed Denial of Service) 则是在 DoS 的基础上, 采用了"),a("strong",[s._v("分布式架构")]),s._v(", 利用多台主机同时攻击目标主机. 这样, 即使目标服务部署了网络防御设备, 面对大量网络请求时, 还是无力应对.")]),s._v(" "),a("p",[s._v("比如, 目前已知的最大流量攻击, 正是去年 Github 遭受的 DDoS 攻击, 其峰值流量已经达到了 1.35Tbps, PPS 更是超过了 1.2 亿(126.9 million).")]),s._v(" "),a("p",[s._v("从攻击的原理上来看, DDoS 可以分为下面几种类型.")]),s._v(" "),a("ul",[a("li",[s._v("第一种, 耗尽带宽. 无论是服务器还是路由器, 交换机等网络设备, 带宽都有固定的上限. 带宽耗尽后, 就会发生网络拥堵, 从而无法传输其他正常的网络报文.")]),s._v(" "),a("li",[s._v("第二种, 耗尽操作系统的资源. 网络服务的正常运行, 都需要一定的系统资源, 像是 CPU, 内存等物理资源, 以及连接表等软件资源. 一旦资源耗尽, 系统就不能处理其他正常的网络连接.")]),s._v(" "),a("li",[s._v("第三种, 消耗应用程序的运行资源. 应用程序的运行, 通常还需要跟其他的资源或系统交互. 如果应用程序一直忙于处理无效请求, 也会导致正常请求的处理变慢, 甚至得不到响应.")])]),s._v(" "),a("p",[s._v("比如, 构造大量不同的域名来攻击 DNS 服务器, 就会导致 DNS 服务器不停执行迭代查询, 并更新缓存. 这会极大地消耗 DNS 服务器的资源, 使 DNS 的响应变慢.")]),s._v(" "),a("p",[s._v("无论是哪一种类型的 DDoS, 危害都是巨大的. 那么, "),a("strong",[s._v("如何发现系统遭受了 DDoS 攻击, 又该如何应对这种攻击呢")]),s._v("? 接下来就通过一个案例, 一起来看看这些问题.")]),s._v(" "),a("h5",{attrs:{id:"_2-案例准备-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-案例准备-2"}},[s._v("#")]),s._v(" 2.案例准备")]),s._v(" "),a("p",[s._v("下面的案例仍然基于 Ubuntu 18.04, 同样适用于其他的 Linux 系统. 案例环境是这样的:")]),s._v(" "),a("ul",[a("li",[s._v("机器配置: 2 CPU, 8GB 内存.")]),s._v(" "),a("li",[s._v("预先安装 docker, sar , hping3, tcpdump, curl 等工具, 比如 apt-get install docker.io hping3 tcpdump curl.")])]),s._v(" "),a("p",[s._v("本次案例用到三台虚拟机, 我画了一张图来表示它们之间的关系.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/8c705700b67445e82671b9e38a6bf038-20230731161933-5awwian.png",alt:""}})]),s._v(" "),a("p",[s._v('可以看到, 其中一台虚拟机运行 Nginx, 用来模拟待分析的 Web 服务器; 而另外两台作为 Web 服务器的客户端, 其中一台用作 DoS 攻击, 而另一台则是正常的客户端. 使用多台虚拟机的目的, 自然还是为了相互隔离, 避免"交叉感染".')]),s._v(" "),a("p",[s._v("由于案例只使用了一台机器作为攻击源, 所以这里的攻击, 实际上还是传统的 DoS, 而非 DDoS.")]),s._v(" "),a("h5",{attrs:{id:"_3-案例分析-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-案例分析-2"}},[s._v("#")]),s._v(" 3.案例分析")]),s._v(" "),a("p",[s._v("首先在终端一中, 执行下面的命令运行案例, 也就是启动一个最基本的 Nginx 应用:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 运行 Nginx 服务并对外开放 80 端口")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# --network=host 表示使用主机网络(这是为了方便后面排查问题)")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-itd")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("nginx "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--network")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("host nginx\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("然后, 在终端二和终端三中, 使用 curl 访问 Nginx 监听的端口, 确认 Nginx 正常启动. 假设 192.168.0.30 是 Nginx 所在虚拟机的 IP 地址, 那么运行 curl 命令后, 应该会看到下面这个输出界面:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -w 表示只输出 HTTP 状态码及总时间, -o 表示将响应重定向到 /dev/null")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-s")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-w")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Http code: %{http_code}\\nTotal time:%{time_total}s\\n'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-o")]),s._v(" /dev/null http://192.168.0.30/\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\nHttp code: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),s._v("\nTotal time:0.002s\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("从这里可以看到, 正常情况下, 访问 Nginx 只需要 2ms(0.002s).")]),s._v(" "),a("p",[s._v("接着, 在终端二中, 运行 hping3 命令, 来模拟 DoS 攻击:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -S 参数表示设置 TCP 协议的 SYN(同步序列号), -p 表示目的端口为 80")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -i u10 表示每隔 10 微秒发送一个网络帧")]),s._v("\n$ hping3 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-S")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-i")]),s._v(" u10 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("现在, 再回到终端一, 就会发现, 现在不管执行什么命令, 都慢了很多. 不过, 在实践时要注意:")]),s._v(" "),a("ul",[a("li",[s._v("如果现象不那么明显, 那么请尝试把参数里面的 u10 调小(比如调成 u1), 或者加上 –flood 选项;")]),s._v(" "),a("li",[s._v("如果终端一完全没有响应了, 那么请适当调大 u10(比如调成 u30), 否则后面就不能通过 SSH 操作 VM1.")])]),s._v(" "),a("p",[s._v("然后, 到终端三中, 执行下面的命令, 模拟正常客户端的连接:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# --connect-timeout 表示连接超时时间")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-w")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Http code: %{http_code}\\nTotal time:%{time_total}s\\n'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-o")]),s._v(" /dev/null --connect-timeout "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" http://192.168.0.30\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\nHttp code: 000\nTotal time:10.001s\ncurl: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("28")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" Connection timed out after "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),s._v(" milliseconds\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("可以发现, 在终端三中, 正常客户端的连接超时了, 并没有收到 Nginx 服务的响应.")]),s._v(" "),a("p",[s._v("这是发生了什么问题呢? 再回到终端一中, 检查网络状况. 应该还记得多次用过的 sar, 它既可以观察 PPS(每秒收发的报文数), 还可以观察 BPS(每秒收发的字节数).")]),s._v(" "),a("p",[s._v("可以回到终端一中, 执行下面的命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ sar "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-n")]),s._v(" DEV "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n08:55:49        IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s   %ifutil\n08:55:50      docker0      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("\n08:55:50         eth0  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22274.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("629.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1174.64")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("37.78")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.02")]),s._v("\n08:55:50           lo      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("从这次 sar 的输出中可以看到, 网络接收的 PPS 已经达到了 20000 多, 但是 BPS 却只有 1174 kB, 这样每个包的大小就只有 54B(1174*1024/22274=54).")]),s._v(" "),a("p",[s._v("这明显就是个小包了, 不过具体是个什么样的包呢? 那就用 tcpdump 抓包看看吧.")]),s._v(" "),a("p",[s._v("在终端一中, 执行下面的 tcpdump 命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -i eth0 只抓取 eth0 网卡, -n 不解析协议名和主机名")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# tcp port 80 表示只抓取 tcp 协议并且端口号为 80 的网络帧")]),s._v("\n$ tcpdump "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-i")]),s._v(" eth0 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-n")]),s._v(" tcp port "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v("\n09:15:48.287047 IP "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.2.27095 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30: Flags "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("S"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("seq")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1288268370")]),s._v(", win "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("512")]),s._v(", length "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n09:15:48.287050 IP "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.2.27131 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30: Flags "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("S"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("seq")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2084255254")]),s._v(", win "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("512")]),s._v(", length "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n09:15:48.287052 IP "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.2.27116 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30: Flags "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("S"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("seq")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("677393791")]),s._v(", win "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("512")]),s._v(", length "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n09:15:48.287055 IP "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.2.27141 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30: Flags "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("S"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("seq")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1276451587")]),s._v(", win "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("512")]),s._v(", length "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n09:15:48.287068 IP "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.2.27154 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30: Flags "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("S"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("seq")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1851495339")]),s._v(", win "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("512")]),s._v(", length "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("这个输出中, Flags [S] 表示这是一个 SYN 包. "),a("strong",[s._v("大量的 SYN 包表明, 这是一个 SYN Flood 攻击")]),s._v(". 如果用上一节讲过的 Wireshark 来观察, 则可以更直观地看到 SYN Flood 的过程:")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/cd8e2219635c6d55cb2db851bbcaeaa8-20230731161933-lohxa9t.png",alt:""}})]),s._v(" "),a("p",[s._v("实际上, "),a("strong",[s._v("SYN Flood 正是互联网中最经典的 DDoS 攻击方式")]),s._v(". 从上面这个图, 也可以看到它的原理:")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("即客户端构造大量的 SYN 包, 请求建立 TCP 连接")]),s._v(";")]),s._v(" "),a("li",[a("strong",[s._v("而服务器收到包后, 会向源 IP 发送 SYN+ACK 报文, 并等待三次握手的最后一次 ACK 报文, 直到超时")]),s._v(".")])]),s._v(" "),a("p",[a("mark",[a("strong",[s._v("这种等待状态的 TCP 连接, 通常也称为半开连接. 由于连接表的大小有限, 大量的半开连接就会导致连接表迅速占满, 从而无法建立新的 TCP 连接")])]),s._v(".")]),s._v(" "),a("p",[s._v("参考下面这张 TCP 状态图能看到, 此时服务器端的 TCP 连接, 会处于 SYN_RECEIVED 状态:")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/924a9bc699f3e746803cd71a1b5f2f8d-20230731161933-tf4ybiz.png",alt:""}})]),s._v(" "),a("p",[s._v("这其实提示了我们, 查看 TCP 半开连接的方法, 关键在于 SYN_RECEIVED 状态的连接. "),a("strong",[s._v("可以使用 netstat 来查看所有连接的状态, 不过要注意, SYN_REVEIVED 的状态, 通常被缩写为 SYN_RECV")]),s._v(".")]),s._v(" "),a("p",[s._v("继续在终端一中, 执行下面的 netstat 命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -n 表示不解析名字, -p 表示显示连接所属进程")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("netstat")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-n")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" SYN_REC\ntcp        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30:80          "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.2:12503      SYN_RECV    -\ntcp        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30:80          "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.2:13502      SYN_RECV    -\ntcp        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30:80          "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.2:15256      SYN_RECV    -\ntcp        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30:80          "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.2:18117      SYN_RECV    -\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("从结果中, 可以发现大量 SYN_RECV 状态的连接, 并且源 IP 地址为 192.168.0.2.")]),s._v(" "),a("p",[s._v("进一步还可以通过 wc 工具, 来统计所有 SYN_RECV 状态的连接数:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("netstat")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-n")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" SYN_REC "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("wc")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-l")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("193")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("找出源 IP 后, 要解决 SYN 攻击的问题, 只要"),a("strong",[s._v("丢掉相关的包")]),s._v("就可以. 这时, iptables 可以完成这个任务. 可以在终端一中, 执行下面的 iptables 命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ iptables "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-I")]),s._v(" INPUT "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-s")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.2 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" tcp "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-j")]),s._v(" REJECT\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("然后回到终端三中, 再次执行 curl 命令, 查看正常用户访问 Nginx 的情况:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-w")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Http code: %{http_code}\\nTotal time:%{time_total}s\\n'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-o")]),s._v(" /dev/null --connect-timeout "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" http://192.168.0.30\nHttp code: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),s._v("\nTotal time:1.572171s\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("可以发现, 正常用户也可以访问 Nginx 了, 只是响应比较慢, 从原来的 2ms 变成了现在的 1.5s.")]),s._v(" "),a("p",[s._v("不过, 一般来说, SYN Flood 攻击中的源 IP 并不是固定的. 比如可以在 hping3 命令中, 加入 "),a("code",[s._v("--rand-source")]),s._v("​ 选项, 来随机化源 IP. 不过, 这时刚才的方法就不适用了.")]),s._v(" "),a("p",[s._v("幸好, 还有很多其他方法, 实现类似的目标. 比如可以用以下两种方法, 来限制 syn 包的速率:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 限制 syn 并发数为每秒 1 次")]),s._v("\n$ iptables "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-A")]),s._v(" INPUT "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" tcp "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--syn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-m")]),s._v(" limit "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--limit")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("/s "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-j")]),s._v(" ACCEPT\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 限制单个 IP 在 60 秒新建立的连接数为 10")]),s._v("\n$ iptables "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-I")]),s._v(" INPUT "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" tcp "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--dport")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--syn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-m")]),s._v(" recent "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),s._v(" SYN_FLOOD "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--update")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--seconds")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("60")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--hitcount")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-j")]),s._v(" REJECT\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("到这里已经初步限制了 SYN Flood 攻击. 不过这还不够, 因为案例还只是单个的攻击源.")]),s._v(" "),a("p",[s._v("如果是多台机器同时发送 SYN Flood, 这种方法可能就直接无效了. 因为很可能无法 SSH 登录(SSH 也是基于 TCP 的)到机器上去, 更别提执行上述所有的排查命令.")]),s._v(" "),a("p",[s._v("所以, 这还需要"),a("strong",[s._v("事先对系统做一些 TCP 优化")]),s._v(".")]),s._v(" "),a("p",[s._v("比如, SYN Flood 会导致 SYN_RECV 状态的连接急剧增大. 在上面的 netstat 命令中, 也可以看到 190 多个处于半开状态的连接.")]),s._v(" "),a("p",[s._v("不过, 半开状态的连接数是有限制的, 执行下面的命令, 就可以看到, 默认的半连接容量只有 256:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sysctl")]),s._v(" net.ipv4.tcp_max_syn_backlog\nnet.ipv4.tcp_max_syn_backlog "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("256")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("换句话说, SYN 包数再稍微增大一些, 就不能 SSH 登录机器了. 所以, 还应该"),a("strong",[s._v("增大半连接的容量")]),s._v(", 比如可以用下面的命令, 将其增大为 1024:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sysctl")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-w")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("net.ipv4.tcp_max_syn_backlog")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1024")]),s._v("\nnet.ipv4.tcp_max_syn_backlog "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1024")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("另外, 连接每个 SYN_RECV 时, 如果失败的话, 内核还会自动重试, 并且默认的重试次数是 5 次. 可以执行下面的命令, 将其减小为 1 次:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sysctl")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-w")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("net.ipv4.tcp_synack_retries")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nnet.ipv4.tcp_synack_retries "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("除此之外, "),a("strong",[s._v("TCP SYN Cookies 也是一种专门防御 SYN Flood 攻击的方法")]),s._v(". SYN Cookies 基于连接信息(包括源地址, 源端口, 目的地址, 目的端口等)以及一个加密种子(如系统启动时间), 计算出一个哈希值(SHA1), 这个哈希值称为 cookie.")]),s._v(" "),a("p",[s._v("然后, 这个 cookie 就被用作序列号, 来应答 SYN+ACK 包, 并释放连接状态. 当客户端发送完三次握手的最后一次 ACK 后, 服务器就会再次计算这个哈希值, 确认是上次返回的 SYN+ACK 的返回包, 才会进入 TCP 的连接状态.")]),s._v(" "),a("p",[a("strong",[s._v("因而, 开启 SYN Cookies 后, 就不需要维护半开连接状态了, 进而也就没有了半连接数的限制")]),s._v(".")]),s._v(" "),a("p",[s._v("注意, 开启 TCP syncookies 后, 内核选项 net.ipv4.tcp_max_syn_backlog 也就无效了.")]),s._v(" "),a("p",[s._v("可以通过下面的命令, 开启 TCP SYN Cookies:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sysctl")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-w")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("net.ipv4.tcp_syncookies")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nnet.ipv4.tcp_syncookies "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("注意, 上述 sysctl 命令修改的配置都是临时的, 重启后这些配置就会丢失. 所以为了保证配置持久化, 还应该把这些配置, 写入 "),a("code",[s._v("/etc/sysctl.conf")]),s._v("​ 文件中. 比如:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" /etc/sysctl.conf\nnet.ipv4.tcp_syncookies "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nnet.ipv4.tcp_synack_retries "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nnet.ipv4.tcp_max_syn_backlog "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1024")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("不过要记得, 写入 "),a("code",[s._v("/etc/sysctl.conf")]),s._v("​ 的配置, 需要执行 sysctl -p 命令后, 才会动态生效.")]),s._v(" "),a("h5",{attrs:{id:"_4-ddos到底该怎么防御"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-ddos到底该怎么防御"}},[s._v("#")]),s._v(" 4.DDoS到底该怎么防御")]),s._v(" "),a("p",[s._v('本节的主题是"缓解", 而不是"解决" DDoS 问题. '),a("strong",[s._v("为什么不是解决 DDoS, 而只是缓解呢")]),s._v("? 而且案例中的方法, 也只是让 Nginx 服务访问不再超时, 但访问延迟还是比一开始时的 2ms 大得多.")]),s._v(" "),a("p",[s._v("实际上, 当 DDoS 报文到达服务器后, Linux 提供的机制只能缓解, 而无法彻底解决. 即使像是 SYN Flood 这样的小包攻击, 其巨大的 PPS, 也会导致 Linux 内核消耗大量资源, 进而导致其他网络报文的处理缓慢.")]),s._v(" "),a("p",[s._v("虽然可以调整内核参数, 缓解 DDoS 带来的性能问题, 却也会像案例这样, 无法彻底解决它.")]),s._v(" "),a("p",[s._v("在之前的 C10K, C100K 文章中, 也提到过, Linux 内核中冗长的协议栈, 在 PPS 很大时, 就是一个巨大的负担. 对 DDoS 攻击来说, 也是一样的道理. 所以, 当时提到的 C10M 的方法, 用到这里同样适合. 比如可以基于 XDP 或者 DPDK, 构建 DDoS 方案, 在内核网络协议栈前, 或者跳过内核协议栈, 来识别并丢弃 DDoS 报文, 避免 DDoS 对系统其他资源的消耗.")]),s._v(" "),a("p",[s._v("不过, 对于流量型的 DDoS 来说, 当服务器的带宽被耗尽后, 在服务器内部处理就无能为力了. 这时, "),a("strong",[s._v("只能在服务器外部的网络设备中, 设法识别并阻断流量(当然前提是网络设备要能扛住流量攻击)")]),s._v(" . 比如, 购置专业的入侵检测和防御设备, 配置流量清洗设备阻断恶意流量等.")]),s._v(" "),a("p",[s._v("既然 DDoS 这么难防御, 这是不是说明, Linux 服务器内部压根儿就不关注这一点, 而是全部交给专业的网络设备来处理呢?")]),s._v(" "),a("p",[s._v("当然不是, 因为 DDoS 并不一定是因为大流量或者大 PPS, 有时候慢速的请求也会带来巨大的性能下降(这种情况称为慢速 DDoS). 比如, 很多针对应用程序的攻击, 都会伪装成正常用户来请求资源. 这种情况下, 请求流量可能本身并不大, 但响应流量却可能很大, 并且应用程序内部也很可能要耗费大量资源处理. 这时就需要应用程序考虑识别, 并尽早拒绝掉这些恶意流量, 比如合理利用缓存, 增加 WAF(Web Application Firewall), 使用 CDN 等等.")]),s._v(" "),a("h5",{attrs:{id:"_5-小结-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-小结-9"}},[s._v("#")]),s._v(" 5.小结")]),s._v(" "),a("p",[s._v("本节学习了分布式拒绝服务(DDoS)时的缓解方法. DDoS 利用大量的伪造请求, 使目标服务耗费大量资源, 来处理这些无效请求, 进而无法正常响应正常的用户请求.")]),s._v(" "),a("p",[s._v("由于 DDoS 的分布式, 大流量, 难追踪等特点, 目前还没有方法可以完全防御 DDoS 带来的问题, 只能设法缓解这个影响. 比如可以购买专业的流量清洗设备和网络防火墙, 在网络入口处阻断恶意流量, 只保留正常流量进入数据中心的服务器中.")]),s._v(" "),a("p",[s._v("在 Linux 服务器中, 可以通过内核调优, DPDK, XDP 等多种方法, 来增大服务器的抗攻击能力, 降低 DDoS 对正常服务的影响. 而在应用程序中, 可以利用各级缓存, WAF, CDN 等方式, 缓解 DDoS 对应用程序的影响.")]),s._v(" "),a("h4",{attrs:{id:"_40-案例篇-网络请求延迟变大了该怎么办"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_40-案例篇-网络请求延迟变大了该怎么办"}},[s._v("#")]),s._v(" 40-案例篇:网络请求延迟变大了该怎么办?")]),s._v(" "),a("p",[s._v("还有不少其他原因导致的网络延迟, 比如:")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("网络传输慢")]),s._v(", 导致延迟;")]),s._v(" "),a("li",[a("strong",[s._v("Linux 内核协议栈报文处理慢")]),s._v(", 导致延迟;")]),s._v(" "),a("li",[a("strong",[s._v("应用程序数据处理慢")]),s._v(", 导致延迟等等.")])]),s._v(" "),a("p",[s._v("那么, 当碰到这些原因的延迟时该怎么办呢? 又该如何定位网络延迟的根源呢?")]),s._v(" "),a("h5",{attrs:{id:"_1-网络延迟"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-网络延迟"}},[s._v("#")]),s._v(" 1.网络延迟")]),s._v(" "),a("p",[s._v("提到"),a("strong",[s._v("网络延迟")]),s._v("时, 你可能轻松想起它的含义--"),a("strong",[s._v("网络数据传输所用的时间")]),s._v(". 不过要注意, 这个时间可能是单向的, 指从源地址发送到目的地址的单程时间; 也可能是双向的, 即从源地址发送到目的地址, 然后又从目的地址发回响应, 这个往返全程所用的时间.")]),s._v(" "),a("p",[s._v("通常更常用的是双向的往返通信延迟, 比如 ping 测试的结果, 就是"),a("strong",[s._v("往返延时 RTT(Round-Trip Time)")]),s._v(" .")]),s._v(" "),a("p",[s._v("除了网络延迟外, 另一个常用的指标是"),a("strong",[s._v("应用程序延迟")]),s._v(", 它是指从应用程序接收到请求, 再到发回响应, 全程所用的时间. 通常, 应用程序延迟也指的是往返延迟, 是网络数据传输时间加上数据处理时间的和.")]),s._v(" "),a("p",[s._v("可以用 ping 来测试网络延迟. ping 基于 ICMP 协议, 它通过计算 ICMP 回显响应报文与 ICMP 回显请求报文的时间差, 来获得往返延时. 这个过程并不需要特殊认证, 常被很多网络攻击利用, 比如端口扫描工具 nmap, 组包工具 hping3 等等.")]),s._v(" "),a("p",[s._v("所以, 为了避免这些问题, 很多网络服务会"),a("strong",[s._v("把 ICMP 禁止掉")]),s._v(", 这也就导致无法用 ping 来测试网络服务的可用性和往返延时. 这时可以"),a("strong",[s._v("用 traceroute 或 hping3 的 TCP 和 UDP 模式, 来获取网络延迟")]),s._v(".")]),s._v(" "),a("p",[s._v("比如, 以 baidu.com 为例, 可以执行下面的 hping3 命令, 测试机器到百度搜索服务器的网络延迟:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -c 表示发送 3 次请求, -S 表示设置 TCP SYN, -p 表示端口号为 80")]),s._v("\n$ hping3 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-S")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(" baidu.com\nHPING baidu.com "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("eth0 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123.125")]),s._v(".115.110"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": S set, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("40")]),s._v(" headers + "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" data bytes\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("len")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("46")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ip")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123.125")]),s._v(".115.110 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("51")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("id")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("47908")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("sport")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("flags")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("SA "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("win")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8192")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("rtt")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20.9")]),s._v(" ms\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("len")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("46")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ip")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123.125")]),s._v(".115.110 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("51")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("id")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6788")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("sport")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("flags")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("SA "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("win")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8192")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("rtt")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20.9")]),s._v(" ms\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("len")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("46")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ip")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123.125")]),s._v(".115.110 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("51")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("id")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("37699")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("sport")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("flags")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("SA "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("win")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8192")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("rtt")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20.9")]),s._v(" ms\n \n--- baidu.com hping statistic ---\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" packets transmitted, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" packets received, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("% packet loss\nround-trip min/avg/max "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20.9")]),s._v("/20.9/20.9 ms\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("从 hping3 的结果中可以看到, 往返延迟 RTT 为 20.9ms.")]),s._v(" "),a("p",[s._v("当然, 用 traceroute, 也可以得到类似结果:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# --tcp 表示使用 TCP 协议, -p 表示端口号, -n 表示不对结果中的 IP 地址执行反向域名解析")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("traceroute")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--tcp")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-n")]),s._v(" baidu.com\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("traceroute")]),s._v(" to baidu.com "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123.125")]),s._v(".115.110"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),s._v(" hops max, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("60")]),s._v(" byte packets\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  * * *\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("  * * *\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("  * * *\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("  * * *\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("  * * *\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v("  * * *\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v("  * * *\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v("  * * *\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v("  * * *\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("  * * *\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),s._v("  * * *\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v("  * * *\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v("  * * *\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123.125")]),s._v(".115.110  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20.684")]),s._v(" ms *  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20.798")]),s._v(" ms\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[s._v("traceroute 会在路由的"),a("strong",[s._v("每一跳发送三个包")]),s._v(", 并在收到响应后, 输出往返延时. 如果无响应或者响应超时(默认 5s), 就会输出一个星号.")]),s._v(" "),a("p",[s._v("知道了基于 TCP 测试网络服务延迟的方法后, 接下来就通过一个案例, 来学习"),a("strong",[s._v("网络延迟升高时的分析思路")]),s._v(".")]),s._v(" "),a("h5",{attrs:{id:"_2-案例准备-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-案例准备-3"}},[s._v("#")]),s._v(" 2.案例准备")]),s._v(" "),a("p",[s._v("下面的案例仍然基于 Ubuntu 18.04. 案例环境是这样的:")]),s._v(" "),a("ul",[a("li",[s._v("机器配置: 2 CPU, 8GB 内存.")]),s._v(" "),a("li",[s._v("预先安装 docker, hping3, tcpdump, curl, wrk, Wireshark 等工具, 比如 apt-get install docker.io hping3 tcpdump curl.")])]),s._v(" "),a("p",[s._v("本次案例用到两台虚拟机, 我画了一张图来表示它们的关系.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/dff9d8ab6b0f9bcb56c7804198afb5ba-20230731161933-0ay43y0.png",alt:""}})]),s._v(" "),a("h5",{attrs:{id:"_3-案例分析-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-案例分析-3"}},[s._v("#")]),s._v(" 3.案例分析")]),s._v(" "),a("p",[s._v("为了对比得出延迟增大的影响, 首先来运行一个最简单的 Nginx, 也就是用官方的 Nginx 镜像启动一个容器. 在终端一中, 执行下面的命令, 运行官方 Nginx, 它会在 80 端口监听:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--network")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("host "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("good "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-itd")]),s._v(" nginx\nfb4ed7cb9177d10e270f8320a7fb64717eac3451114c9fab3c50e02be2e88ba2\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("继续在终端一中, 执行下面的命令, 运行案例应用, 它会监听 8080 端口:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),s._v(" nginx "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--network")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("host "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-itd")]),s._v(" feisky/nginx:latency\nb99bd136dcfd907747d9c803fdc0255e578bad6d66f4e9c32b826d75b6812724\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("然后在终端二中执行 curl 命令, 验证两个容器已经正常启动. 如果一切正常, 将看到如下的输出:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 80 端口正常")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" http://192.168.0.30\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("DOCTYPE html"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("html"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("em"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("Thank you "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" using nginx."),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("/em"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("/p"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("/body"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("/html"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 8080 端口正常")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" http://192.168.0.30:8080\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("em"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("Thank you "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" using nginx."),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("/em"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("/p"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("/body"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("/html"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("接着再用上面提到的 hping3 来测试它们的延迟, 看看有什么区别. 还是在终端二, 执行下面的命令, 分别测试案例机器 80 端口和 8080 端口的延迟:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 测试 80 端口延迟")]),s._v("\n$ hping3 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-S")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30\nHPING "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("eth0 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": S set, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("40")]),s._v(" headers + "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" data bytes\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("len")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("44")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ip")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" DF "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("id")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("sport")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("flags")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("SA "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("win")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("29200")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("rtt")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.8")]),s._v(" ms\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("len")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("44")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ip")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" DF "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("id")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("sport")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("flags")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("SA "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("win")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("29200")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("rtt")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.7")]),s._v(" ms\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("len")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("44")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ip")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" DF "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("id")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("sport")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("flags")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("SA "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("win")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("29200")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("rtt")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.6")]),s._v(" ms\n \n--- "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30 hping statistic ---\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" packets transmitted, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" packets received, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("% packet loss\nround-trip min/avg/max "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.6")]),s._v("/7.7/7.8 ms\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 测试 8080 端口延迟")]),s._v("\n$ hping3 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-S")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30\nHPING "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("eth0 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": S set, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("40")]),s._v(" headers + "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" data bytes\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("len")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("44")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ip")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" DF "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("id")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("sport")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("flags")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("SA "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("win")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("29200")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("rtt")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.7")]),s._v(" ms\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("len")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("44")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ip")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" DF "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("id")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("sport")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("flags")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("SA "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("win")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("29200")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("rtt")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.6")]),s._v(" ms\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("len")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("44")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ip")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" DF "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("id")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("sport")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("flags")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("SA "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("win")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("29200")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("rtt")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.3")]),s._v(" ms\n \n--- "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30 hping statistic ---\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" packets transmitted, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" packets received, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("% packet loss\nround-trip min/avg/max "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.3")]),s._v("/7.6/7.7 ms\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("从这个输出可以看到, 两个端口的延迟差不多, 都是 7ms. 不过这只是单个请求的情况. 换成并发请求的话, 又会怎么样呢? 接下来就用 wrk 试试.")]),s._v(" "),a("p",[s._v("这次在终端二中, 执行下面的新命令, 分别测试案例机器并发 100 时, 80 端口和 8080 端口的性能:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 测试 80 端口性能")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# wrk --latency -c 100 -t 2 --timeout 2 http://192.168.0.30/")]),s._v("\nRunning 10s "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("test")]),s._v(" @ http://192.168.0.30/\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" threads and "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(" connections\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v(".19ms   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(".32ms "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("319")]),s._v(".61ms   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("97.80")]),s._v("%\n    Req/Sec     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(".20k   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("426.80")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(".25k    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("85.50")]),s._v("%\n  Latency Distribution\n     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v("%    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(".78ms\n     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("75")]),s._v("%    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(".22ms\n     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("90")]),s._v("%    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v(".14ms\n     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("99")]),s._v("%   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v(".53ms\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123558")]),s._v(" requests "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(".01s, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(".15MB "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v("\nRequests/sec:  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12340.91")]),s._v("\nTransfer/sec:     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(".00MB\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 测试 8080 端口性能")]),s._v("\n$ wrk "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--latency")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-t")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--timeout")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" http://192.168.0.30:8080/\nRunning 10s "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("test")]),s._v(" @ http://192.168.0.30:8080/\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" threads and "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(" connections\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("43")]),s._v(".60ms    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(".41ms  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("56")]),s._v(".58ms   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("97.06")]),s._v("%\n    Req/Sec     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(".15k   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("120.29")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(".92k    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("88.50")]),s._v("%\n  Latency Distribution\n     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v("%   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("44")]),s._v(".02ms\n     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("75")]),s._v("%   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("44")]),s._v(".33ms\n     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("90")]),s._v("%   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("47")]),s._v(".62ms\n     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("99")]),s._v("%   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("48")]),s._v(".88ms\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22853")]),s._v(" requests "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(".01s, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),s._v(".55MB "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v("\nRequests/sec:   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2283.31")]),s._v("\nTransfer/sec:      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(".85MB\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("从上面两个输出可以看到, 官方 Nginx(监听在 80 端口)的平均延迟是 9.19ms, 而案例 Nginx 的平均延迟(监听在 8080 端口)则是 43.6ms. 从延迟的分布上来看, 官方 Nginx 90% 的请求, 都可以在 9ms 以内完成; 而案例 Nginx 50% 的请求, 就已经达到了 44 ms.")]),s._v(" "),a("p",[s._v("再结合上面 hping3 的输出, 很容易发现, 案例 Nginx 在并发请求下的延迟增大了很多, 这是怎么回事呢?")]),s._v(" "),a("p",[s._v("分析方法我想你已经想到了, 上节课学过的, "),a("strong",[s._v("使用 tcpdump 抓取收发的网络包, 分析网络的收发过程有没有问题")]),s._v(".")]),s._v(" "),a("p",[s._v("接下来在终端一中, 执行下面的 tcpdump 命令, 抓取 8080 端口上收发的网络包, 并保存到 nginx.pcap 文件:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ tcpdump "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-nn")]),s._v(" tcp port "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-w")]),s._v(" nginx.pcap\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("然后切换到终端二中, 重新执行 wrk 命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 测试 8080 端口性能")]),s._v("\n$ wrk "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--latency")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-t")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--timeout")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" http://192.168.0.30:8080/\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("当 wrk 命令结束后, 再次切换回终端一, 结束 tcpdump 命令. 再把抓取到的 nginx.pcap, 复制到装有 Wireshark 的机器中(如果 VM1 已经带有图形界面, 那么可以跳过复制步骤), 并用 Wireshark 打开它.")]),s._v(" "),a("p",[s._v('由于网络包的数量比较多, 可以先过滤一下. 比如, 在选择一个包后, 可以单击右键并选择 "Follow" -> "TCP Stream", 如下图所示:')]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/e6fe86d36a068f0b4cddecebd3314a0a-20230731161933-i9mgzgs.png",alt:""}})]),s._v(" "),a("p",[s._v("然后关闭弹出来的对话框, 回到 Wireshark 主窗口. 这时候会发现 Wireshark 已经自动帮你设置了一个过滤表达式 tcp.stream eq 24. 如下图所示(图中省去了源和目的 IP 地址):")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/caf7e26663f78025b64351409dd6902b-20230731161933-mq1meec.png",alt:""}})]),s._v(" "),a("p",[s._v('从这里可以看到这个 TCP 连接从三次握手开始的每个请求和响应情况. 当然这可能还不够直观, 可以继续点击菜单栏里的 Statics -> Flow Graph, 选中 "Limit to display filter" 并设置 Flow type 为 "TCP Flows":')]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/f2aba6f1196e316a3066f8c01c0888b7-20230731161933-mnr4xqn.png",alt:""}})]),s._v(" "),a("p",[s._v("注意, 这个图的"),a("strong",[s._v("左边是客户端, 而右边是 Nginx 服务器")]),s._v(". 通过这个图就可以看出, 前面三次握手, 以及第一次 HTTP 请求和响应还是挺快的, 但"),a("strong",[s._v("第二次 HTTP 请求就比较慢")]),s._v("了, 特别是客户端在收到服务器第一个分组后, 40ms 后才发出了 ACK 响应(图中蓝色行).")]),s._v(" "),a("p",[s._v("看到 40ms 这个值, 有没有想起什么东西呢? 实际上, "),a("strong",[s._v("这是 TCP 延迟确认(Delayed ACK)的最小超时时间")]),s._v(".")]),s._v(" "),a("p",[s._v('这里解释一下延迟确认. 这是针对 TCP ACK 的一种优化机制, 也就是说, 不用每次请求都发送一个 ACK, 而是先等一会儿(比如 40ms), 看看有没有"顺风车". 如果这段时间内, 正好有其他包需要发送, 那就捎带着 ACK 一起发送过去. 当然, 如果一直等不到其他包, 那就超时后单独发送 ACK.')]),s._v(" "),a("p",[s._v("因为案例中 40ms 发生在客户端上, 就有理由怀疑, 是客户端"),a("strong",[s._v("开启了延迟确认机制")]),s._v(". 而这儿的客户端, 实际上就是前面运行的 wrk.")]),s._v(" "),a("p",[s._v("查询 TCP 文档(执行 man tcp), 就会发现只有 TCP 套接字专门设置了 TCP_QUICKACK, 才会开启快速确认模式; 否则, 默认情况下采用的就是延迟确认机制:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("TCP_QUICKACK "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("since Linux "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.4")]),s._v(".4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n              Enable  quickack mode "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" or disable quickack mode "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" cleared.  In quickack mode, acks are sent imme‐\n              diately, rather than delayed "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" needed "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" accordance to normal TCP operation.  This flag is  not  perma‐\n              nent,  it only enables a switch to or from quickack mode.  Subsequent operation of the TCP protocol will\n              once again enter/leave quickack mode depending on internal  protocol  processing  and  factors  such  as\n              delayed ack timeouts occurring and data transfer.  This option should not be used "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" code intended to be\n              portable.\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("为了验证猜想, 确认 wrk 的行为, 可以用 strace, 来观察 wrk 为套接字设置了哪些 TCP 选项.")]),s._v(" "),a("p",[s._v("可以切换到终端二中, 执行下面的命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("strace")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-f")]),s._v(" wrk "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--latency")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-t")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--timeout")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" http://192.168.0.30:8080/\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\nsetsockopt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("52")]),s._v(", SOL_TCP, TCP_NODELAY, "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("这样可以看到, wrk 只设置了 TCP_NODELAY 选项, 而没有设置 TCP_QUICKACK. 这说明 wrk 采用的正是延迟确认, 也就解释了上面这个 40ms 的问题.")]),s._v(" "),a("p",[s._v("不过, 别忘了, 这只是客户端的行为, 按理来说, Nginx 服务器不应该受到这个行为的影响. 那是不是分析网络包时, 漏掉了什么线索呢? 回到 Wireshark 重新观察一下.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/c68925f12d475a2d79c972f0504cb3e5-20230731161933-craqsnf.png",alt:""}})]),s._v(" "),a("p",[s._v("仔细观察 Wireshark 的界面, 其中 1173 号包, 就是刚才说到的延迟 ACK 包; 下一行的 1175 则是 Nginx 发送的第二个分组包, 它跟 697 号包组合起来, 构成一个完整的 HTTP 响应(ACK 号都是 85).")]),s._v(" "),a("p",[s._v("第二个分组没跟前一个分组(697 号)一起发送, 而是等到客户端对第一个分组的 ACK 后(1173 号)才发送, 这看起来跟延迟确认有点像, 只不过这儿不再是 ACK, 而是发送数据.")]),s._v(" "),a("p",[s._v("看到这里, 我估计你想起了一个东西--Nagle 算法(纳格算法). 进一步分析案例前, 先简单介绍一下这个算法.")]),s._v(" "),a("p",[a("strong",[s._v("Nagle 算法是 TCP 协议中用于减少小包发送数量的一种优化算法, 目的是为了提高实际带宽的利用率")]),s._v(".")]),s._v(" "),a("p",[s._v("举个例子, 当有效负载只有 1 字节时, 再加上 TCP 头部和 IP 头部分别占用的 20 字节, 整个网络包就是 41 字节, 这样实际带宽的利用率只有 2.4%(1/41). 往大了说, 如果整个网络带宽都被这种小包占满, 那整个网络的有效利用率就太低了.")]),s._v(" "),a("p",[s._v("Nagle 算法正是为了解决这个问题. 它通过"),a("strong",[s._v("合并 TCP 小包, 提高网络带宽的利用率")]),s._v(". Nagle 算法规定, 一个 TCP 连接上, 最多只能有一个未被确认的未完成分组; 在收到这个分组的 ACK 前, 不发送其他分组. 这些小分组会被组合起来, 并在收到 ACK 后, 用同一个分组发送出去.")]),s._v(" "),a("p",[s._v("显然, Nagle 算法本身的想法还是挺好的, 但是知道 Linux 默认的延迟确认机制后, 应该就不这么想了. 因为它们"),a("strong",[s._v("一起使用时, 网络延迟会明显")]),s._v(". 如下图所示:")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/5f81533adec2669c919c9be6db50186b-20230731161933-ngrxr21.png",alt:""}})]),s._v(" "),a("ul",[a("li",[s._v("当 Sever 发送了第一个分组后, 由于 Client 开启了延迟确认, 就需要等待 40ms 后才会回复 ACK.")]),s._v(" "),a("li",[s._v("同时由于 Server 端开启了 Nagle, 而这时还没收到第一个分组的 ACK, Server 也会在这里一直等着.")]),s._v(" "),a("li",[s._v("直到 40ms 超时后, Client 才会回复 ACK, 然后, Server 才会继续发送第二个分组.")])]),s._v(" "),a("p",[s._v("既然可能是 Nagle 的问题, 那该怎么知道, 案例 Nginx 有没有开启 Nagle 呢?")]),s._v(" "),a("p",[s._v("查询 tcp 的文档就会知道, 只有设置了 TCP_NODELAY 后, Nagle 算法才会禁用. 所以只需要查看 Nginx 的 tcp_nodelay 选项就可以了.")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("TCP_NODELAY\n              If set, disable the Nagle algorithm.  This means that segments are always sent as soon as possible, even\n              "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" there is only a small amount of data.  When not set, data is buffered "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("until")]),s._v("  there  is  a  sufficient\n              amount  to  send out, thereby avoiding the frequent sending of small packets, "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("which")]),s._v(" results "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" poor uti‐\n              lization of the network.  This option is overridden by TCP_CORK"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" however, setting this option forces  an\n              explicit flush of pending output, even "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" TCP_CORK is currently set.\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("回到终端一中, 执行下面的命令, 查看案例 Nginx 的配置:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" nginx "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" /etc/nginx/nginx.conf "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" tcp_nodelay\n    tcp_nodelay    off"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("果然可以看到, 案例 Nginx 的 tcp_nodelay 是关闭的, 将其设置为 on, 应该就可以解决了.")]),s._v(" "),a("p",[s._v("改完后, 问题是否就解决了呢? 自然需要验证一下. 修改后的应用已经打包到了 Docker 镜像中, 在终端一中执行下面的命令, 就可以启动它:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除案例应用")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-f")]),s._v(" nginx\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 启动优化后的应用")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),s._v(" nginx "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--network")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("host "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-itd")]),s._v(" feisky/nginx:nodelay\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("接着切换到终端二, 重新执行 wrk 测试延迟:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ wrk "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--latency")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-t")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--timeout")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" http://192.168.0.30:8080/\nRunning 10s "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("test")]),s._v(" @ http://192.168.0.30:8080/\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" threads and "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(" connections\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v(".58ms   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(".98ms "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("350")]),s._v(".08ms   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("97.91")]),s._v("%\n    Req/Sec     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(".22k   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("282.13")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(".93k    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("68.50")]),s._v("%\n  Latency Distribution\n     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v("%    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(".78ms\n     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("75")]),s._v("%    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(".20ms\n     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("90")]),s._v("%    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v(".02ms\n     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("99")]),s._v("%   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("73")]),s._v(".14ms\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123990")]),s._v(" requests "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(".01s, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(".50MB "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v("\nRequests/sec:  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12384.04")]),s._v("\nTransfer/sec:     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(".04MB\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("果然, 现在延迟已经缩短成了 9ms, 跟测试的官方 Nginx 镜像是一样的(Nginx 默认就是开启 tcp_nodelay 的).")]),s._v(" "),a("p",[s._v("作为对比, 用 tcpdump 抓取优化后的网络包(这儿实际上抓取的是官方 Nginx 监听的 80 端口). 可以得到下面的结果:")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/fb9b3b64fe3626b7d6357ca8e2ecbaba-20230731161933-ookurfb.png",alt:""}})]),s._v(" "),a("p",[s._v("从图中可以发现, 由于 Nginx 不用再等 ACK, 536 和 540 两个分组是连续发送的; 而客户端虽然仍开启了延迟确认, 但这时收到了两个需要回复 ACK 的包, 所以也不用等 40ms, 可以直接合并回复 ACK.")]),s._v(" "),a("h5",{attrs:{id:"_4-小结-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-小结-13"}},[s._v("#")]),s._v(" 4.小结")]),s._v(" "),a("p",[s._v("今本节学习了网络延迟增大后的分析方法. 网络延迟, 是最核心的网络性能指标. 由于网络传输, 网络包处理等各种因素的影响, 网络延迟不可避免. 但过大的网络延迟, 会直接影响用户的体验.")]),s._v(" "),a("p",[s._v("所以, "),a("strong",[s._v("在发现网络延迟增大后, 可以用 traceroute, hping3, tcpdump, Wireshark, strace 等多种工具, 来定位网络中的潜在问题")]),s._v(". 比如,")]),s._v(" "),a("ul",[a("li",[s._v("使用 hping3 以及 wrk 等工具, 确认单次请求和并发请求情况的网络延迟是否正常.")]),s._v(" "),a("li",[s._v("使用 traceroute, 确认路由是否正确, 并查看路由中每一跳网关的延迟.")]),s._v(" "),a("li",[s._v("使用 tcpdump 和 Wireshark, 确认网络包的收发是否正常.")]),s._v(" "),a("li",[s._v("使用 strace 等, 观察应用程序对网络套接字的调用情况是否正常.")])]),s._v(" "),a("p",[s._v("这样就可以依次从路由, 网络包的收发, 再到应用程序等, 逐层排查, 直到定位问题根源.")]),s._v(" "),a("h4",{attrs:{id:"_41-案例篇-如何优化nat性能-上"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_41-案例篇-如何优化nat性能-上"}},[s._v("#")]),s._v(" 41-案例篇:如何优化NAT性能?(上)")]),s._v(" "),a("p",[s._v("本节来看看另一个可能导致网络延迟的因素, 即"),a("strong",[s._v("网络地址转换(Network Address Translation), 缩写为 NAT")]),s._v(".")]),s._v(" "),a("p",[s._v("下面先来学习 NAT 的工作原理, 并弄清楚如何优化 NAT 带来的潜在性能问题.")]),s._v(" "),a("h5",{attrs:{id:"_1-nat原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-nat原理"}},[s._v("#")]),s._v(" 1.NAT原理")]),s._v(" "),a("p",[a("strong",[s._v("NAT 技术可以重写 IP 数据包的源 IP 或者目的 IP, 被普遍地用来解决公网 IP 地址短缺的问题")]),s._v(". 它的主要原理就是, 网络中的多台主机, 通过共享同一个公网 IP 地址, 来访问外网资源. 同时由于 NAT 屏蔽了内网网络, 自然也就为局域网中的机器提供了安全隔离.")]),s._v(" "),a("p",[s._v("既可以在支持网络地址转换的"),a("strong",[s._v("路由器(称为 NAT 网关)中配置 NAT")]),s._v(', 也可以在 Linux 服务器中配置 NAT. 如果采用第二种方式, Linux 服务器实际上充当的是"软"路由器的角色.')]),s._v(" "),a("p",[s._v("NAT 的主要目的, 是"),a("strong",[s._v("实现地址转换")]),s._v(". 根据实现方式的不同, NAT 可以分为三类:")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("静态 NAT")]),s._v(", 即内网 IP 与公网 IP 是一对一的永久映射关系;")]),s._v(" "),a("li",[a("strong",[s._v("动态 NAT")]),s._v(", 即内网 IP 从公网 IP 池中, 动态选择一个进行映射;")]),s._v(" "),a("li",[a("strong",[s._v("网络地址端口转换 NAPT(Network Address and Port Translation), 即把内网 IP 映射到公网 IP 的不同端口上, 让多个内网 IP 可以共享同一个公网 IP 地址")]),s._v(".")])]),s._v(" "),a("p",[s._v("NAPT 是目前最流行的 NAT 类型, 在 Linux 中配置的 NAT 也是这种类型. 而根据转换方式的不同, 又可以把 NAPT 分为三类.")]),s._v(" "),a("ul",[a("li",[s._v("第一类是"),a("strong",[s._v("源地址转换 SNAT, 即目的地址不变, 只替换源 IP 或源端口")]),s._v(". SNAT 主要用于, 多个内网 IP 共享同一个公网 IP, 来访问外网资源的场景.")]),s._v(" "),a("li",[s._v("第二类是"),a("strong",[s._v("目的地址转换 DNAT, 即源 IP 保持不变, 只替换目的 IP 或者目的端口")]),s._v(". DNAT 主要通过公网 IP 的不同端口号, 来访问内网的多种服务, 同时会隐藏后端服务器的真实 IP 地址.")]),s._v(" "),a("li",[s._v("第三类是"),a("mark",[a("strong",[s._v("双向地址转换, 即同时使用 SNAT 和 DNAT")])]),s._v(". 当接收到网络包时, 执行 DNAT, 把目的 IP 转换为内网 IP; 而在发送网络包时, 执行 SNAT, 把源 IP 替换为外部 IP.")])]),s._v(" "),a("p",[s._v("双向地址转换, 其实就是外网 IP 与内网 IP 的一对一映射关系, 所以常用在虚拟化环境中, 为虚拟机分配浮动的公网 IP 地址.")]),s._v(" "),a("p",[s._v("为了帮助理解 NAPT, 下面画了一张图. 假设:")]),s._v(" "),a("ul",[a("li",[s._v("本地服务器的内网 IP 地址为 192.168.0.2;")]),s._v(" "),a("li",[s._v("NAT 网关中的公网 IP 地址为 100.100.100.100;")]),s._v(" "),a("li",[s._v("要访问的目的服务器 baidu.com 的地址为 123.125.115.110.")])]),s._v(" "),a("p",[s._v("那么 SNAT 和 DNAT 的过程, 就如下图所示:")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/d2adfddcba1393dd334b7643bdfdf0f5-20230731161933-s5m5ap2.png",alt:""}})]),s._v(" "),a("p",[s._v("从图中可以发现:")]),s._v(" "),a("ul",[a("li",[s._v("当服务器访问 baidu.com 时, "),a("strong",[s._v("NAT 网关会把源地址, 从服务器的内网 IP 192.168.0.2 替换成公网 IP 地址 100.100.100.100")]),s._v(", 然后才发送给 baidu.com;")]),s._v(" "),a("li",[s._v("当 baidu.com 发回响应包时, "),a("strong",[s._v("NAT 网关又会把目的地址, 从公网 IP 地址 100.100.100.100 替换成服务器内网 IP 192.168.0.2, 然后再发送给内网中的服务器")]),s._v(".")])]),s._v(" "),a("p",[s._v("了解了 NAT 的原理后,再来看看, 如何在 Linux 中实现 NAT 的功能.")]),s._v(" "),a("h5",{attrs:{id:"_2-iptables与nat"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-iptables与nat"}},[s._v("#")]),s._v(" 2.iptables与NAT")]),s._v(" "),a("p",[s._v("Linux 内核提供的 Netfilter 框架, 允许对网络数据包进行修改(比如 NAT)和过滤(比如防火墙). 在这个基础上, iptables, ip6tables, ebtables 等工具, 又提供了更易用的命令行接口, 以便系统管理员配置和管理 NAT, 防火墙的规则.")]),s._v(" "),a("p",[s._v("其中, iptables 就是最常用的一种配置工具. 要掌握 iptables 的原理和使用方法, 最核心的就是弄清楚, "),a("strong",[s._v("网络数据包通过 Netfilter 时的工作流向")]),s._v(", 下面这张图就展示了这一过程.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/53775d581d392a66b5386276f761c874-20230731161933-h6w51rf.png",alt:""}})]),s._v(" "),a("p",[s._v("在这张图中, 绿色背景的方框, 表示表(table), 用来管理链. "),a("strong",[s._v("Linux 支持 4 种表, 包括 filter(用于过滤), nat(用于 NAT), mangle(用于修改分组数据) 和 raw(用于原始数据包)等")]),s._v(".")]),s._v(" "),a("p",[s._v("跟 table 一起的白色背景方框, 则表示链(chain), 用来管理具体的 iptables 规则. 每个表中可以包含多条链, 比如:")]),s._v(" "),a("ul",[a("li",[s._v("filter 表中, 内置 INPUT, OUTPUT 和 FORWARD 链;")]),s._v(" "),a("li",[s._v("nat 表中, 内置 PREROUTING, POSTROUTING, OUTPUT 等.")])]),s._v(" "),a("p",[s._v("当然也可以根据需要, 创建你自己的链.")]),s._v(" "),a("p",[s._v("灰色的 conntrack, 表示"),a("strong",[s._v("连接跟踪模块")]),s._v(". 它通过内核中的连接跟踪表(也就是哈希表), 记录网络连接的状态, 是 iptables 状态过滤(-m state)和 NAT 的实现基础.")]),s._v(" "),a("p",[s._v("iptables 的所有规则, 就会放到这些表和链中, 并按照图中"),a("strong",[s._v("顺序和规则的优先级顺序来执行")]),s._v(".")]),s._v(" "),a("p",[s._v("针对今天的主题, 要实现 NAT 功能, 主要是"),a("strong",[s._v("在 nat 表进行操作")]),s._v(". 而 nat 表内置了三个链:")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("PREROUTING")]),s._v(", 用于"),a("strong",[s._v("路由判断前所执行的规则")]),s._v(", 比如, 对接收到的数据包进行 DNAT.")]),s._v(" "),a("li",[a("strong",[s._v("POSTROUTING")]),s._v(", 用于"),a("strong",[s._v("路由判断后所执行的规则")]),s._v(", 比如, 对发送或转发的数据包进行 SNAT 或 MASQUERADE.")]),s._v(" "),a("li",[a("strong",[s._v("OUTPUT")]),s._v(", 类似于 "),a("strong",[s._v("PREROUTING")]),s._v(", 但只处理从本机发送出去的包.")])]),s._v(" "),a("p",[s._v("熟悉 iptables 中的表和链后, 相应的 NAT 规则就比较简单了. 还是以 NAPT 的三个分类为例, 来具体解读一下.")]),s._v(" "),a("h5",{attrs:{id:"_3-snat"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-snat"}},[s._v("#")]),s._v(" 3.SNAT")]),s._v(" "),a("p",[s._v("根据刚才内容可以知道, "),a("strong",[s._v("SNAT 需要在 nat 表的 POSTROUTING 链中配置")]),s._v(". 常用两种方式来配置它.")]),s._v(" "),a("p",[s._v("第一种方法, 是为一个子网统一配置 SNAT, 并由 Linux 选择默认的出口 IP. 这实际上就是经常说的 MASQUERADE:")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v("$ iptables "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("t nat "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("A")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("POSTROUTING")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("s "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("j "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MASQUERADE")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("第二种方法, 是为具体的 IP 地址配置 SNAT, 并指定转换后的源地址:")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v("$ iptables "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("t nat "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("A")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("POSTROUTING")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("s "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("j "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SNAT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("to")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("source "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100.100")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".100")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".100")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h5",{attrs:{id:"_4-dnat"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-dnat"}},[s._v("#")]),s._v(" 4.DNAT")]),s._v(" "),a("p",[s._v("再来看 DNAT, 显然 "),a("strong",[s._v("DNAT 需要在 nat 表的 PREROUTING 或者 OUTPUT 链中配置")]),s._v(", 其中 PREROUTING 链更常用一些(因为它还可以用于转发的包).")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v("$ iptables "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("t nat "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("A")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("PREROUTING")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("d "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100.100")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".100")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".100")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("j "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DNAT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("to")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("destination "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".2")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h5",{attrs:{id:"_5-双向地址转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-双向地址转换"}},[s._v("#")]),s._v(" 5.双向地址转换")]),s._v(" "),a("p",[a("strong",[s._v("双向地址转换, 就是同时添加 SNAT 和 DNAT 规则, 为公网 IP 和内网 IP 实现一对一的映射关系")]),s._v(", 即:")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v("$ iptables "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("t nat "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("A")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("POSTROUTING")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("s "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("j "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SNAT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("to")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("source "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100.100")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".100")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".100")]),s._v("\n$ iptables "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("t nat "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("A")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("PREROUTING")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("d "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100.100")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".100")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".100")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("j "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DNAT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("to")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("destination "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".2")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("在使用 iptables 配置 NAT 规则时, Linux 需要转发来自其他 IP 的网络包, 所以千万不要忘记开启 Linux 的 IP 转发功能.")]),s._v(" "),a("p",[s._v("可以执行下面的命令, 查看这一功能是否开启. 如果输出的结果是 1, 就表示已经开启了 IP 转发:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sysctl")]),s._v(" net.ipv4.ip_forward\nnet.ipv4.ip_forward "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("如果还没开启, 可以执行下面的命令, 手动开启:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sysctl")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-w")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("net.ipv4.ip_forward")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nnet.ipv4.ip_forward "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("当然, 为了避免重启后配置丢失, 不要忘记将配置写入 "),a("code",[s._v("/etc/sysctl.conf")]),s._v("​ 文件中:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" /etc/sysctl.conf "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" ip_forward\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("net.ipv4.ip_forward")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h5",{attrs:{id:"_6-小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-小结"}},[s._v("#")]),s._v(" 6.小结")]),s._v(" "),a("p",[s._v("NAT 技术能够重写 IP 数据包的源 IP 或目的 IP, 所以普遍用来解决公网 IP 地址短缺的问题. 它可以让网络中的多台主机, 通过共享同一个公网 IP 地址, 来访问外网资源. 同时, 由于 NAT 屏蔽了内网网络, 也为局域网中机器起到安全隔离的作用.")]),s._v(" "),a("p",[s._v("Linux 中的 NAT, 基于内核的连接跟踪模块实现. 所以, 它维护每个连接状态的同时, 也会带来很高的性能成本. 具体 NAT 性能问题的分析方法, 将在下节课继续学习.")]),s._v(" "),a("h4",{attrs:{id:"_42-案例篇-如何优化nat性能-下"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_42-案例篇-如何优化nat性能-下"}},[s._v("#")]),s._v(" 42-案例篇:如何优化NAT性能?(下)")]),s._v(" "),a("p",[s._v("上一节学习了 NAT 的原理, 明白了如何在 Linux 中管理 NAT 规则.")]),s._v(" "),a("p",[s._v("Linux 中的 NAT 基于内核的连接跟踪模块实现. 所以, 它维护每个连接状态的同时, 也对网络性能有一定影响. 那么, "),a("strong",[s._v("碰到 NAT 性能问题时, 又该怎么办呢")]),s._v("? 接下来就通过一个案例来学习 NAT 性能问题的分析思路.")]),s._v(" "),a("h5",{attrs:{id:"_1-案例准备-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-案例准备-6"}},[s._v("#")]),s._v(" 1.案例准备")]),s._v(" "),a("p",[s._v("下面的案例仍然基于 Ubuntu 18.04, 同样适用于其他的 Linux 系统. 案例环境是这样的:")]),s._v(" "),a("ul",[a("li",[s._v("机器配置: 2 CPU, 8GB 内存.")]),s._v(" "),a("li",[s._v("预先安装 docker, tcpdump, curl, ab, SystemTap 等工具, 比如")])]),s._v(" "),a("p",[s._v("这里简单介绍一下 SystemTap. "),a("strong",[s._v("SystemTap 是 Linux 的一种动态追踪框架, 它把用户提供的脚本, 转换为内核模块来执行, 用来监测和跟踪内核的行为")]),s._v(". 这里只要知道怎么安装就可以了:")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v("# "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Ubuntu")]),s._v("\napt"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("get install "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("y systemtap"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("runtime systemtap\n# "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Configure")]),s._v(" ddebs source\nec\n \n# "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CentOS")]),s._v("\nyum install systemtap kernel"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("devel yum"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("utils kernel\nstab"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("prep\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("本次案例还是常见的 Nginx, 并且会用 ab 作为它的客户端, 进行压力测试. 案例中总共用到两台虚拟机, 我画了一张图来表示它们的关系.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/827b43c9b3dabf0b01d36ac47ea66ff2-20230731161933-5folo07.png",alt:""}})]),s._v(" "),a("h5",{attrs:{id:"_2-案例分析-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-案例分析-7"}},[s._v("#")]),s._v(" 2.案例分析")]),s._v(" "),a("p",[s._v("为了对比 NAT 带来的性能问题, 首先运行一个不用 NAT 的 Nginx 服务, 并用 ab 测试它的性能.")]),s._v(" "),a("p",[s._v("在终端一中, 执行下面的命令, 启动 Nginx, 注意选项 --network=host, 表示容器使用 Host 网络模式, 即不使用 NAT:")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v("$ docker run "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("name nginx"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("hostnet "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("privileged "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("network"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("host "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("itd feisky"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("nginx"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("然后到终端二中, 执行 curl 命令, 确认 Nginx 正常启动:")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v("$ curl http"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".30")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("em"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thank")]),s._v(" you "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" using nginx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("<"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("em"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("body"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("html"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("继续在终端二中, 执行 ab 命令, 对 Nginx 进行压力测试. 不过在测试前要注意, Linux 默认允许打开的文件描述数比较小, 比如在我的机器中, 这个值只有 1024:")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v("# "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("open")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("files")]),s._v("\n$ ulimit "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1024")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("所以执行 ab 前, 先要把这个选项调大, 比如调成 65536:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 临时增大当前会话的最大文件描述符数")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("ulimit")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-n")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("65536")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("接下来, 再去执行 ab 命令, 进行压力测试:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -c 表示并发请求数为 5000, -n 表示总的请求数为 10 万")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -r 表示套接字接收错误时仍然继续执行, -s 表示设置每个请求的超时时间为 2s")]),s._v("\n$ ab "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-n")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-r")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-s")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" http://192.168.0.30/\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\nRequests per second:    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6576.21")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#/sec] (mean)")]),s._v("\nTime per request:       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("760.317")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("ms"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("mean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nTime per request:       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.152")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("ms"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("mean, across all concurrent requests"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nTransfer rate:          "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5390.19")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("Kbytes/sec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" received\n \nConnection Times "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ms"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n              min  mean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("+/-sd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" median   max\nConnect:        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("177")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("714.3")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7338")]),s._v("\nProcessing:     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("27")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("39.8")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("19")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("961")]),s._v("\nWaiting:        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("23")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("39.5")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("951")]),s._v("\nTotal:          "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("204")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("716.3")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("28")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7349")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("p",[s._v("关于 ab 输出界面的含义, 已经在前面介绍过. 从这次的界面可以看出:")]),s._v(" "),a("ul",[a("li",[s._v("每秒请求数(Requests per second)为 6576;")]),s._v(" "),a("li",[s._v("每个请求的平均延迟(Time per request)为 760ms;")]),s._v(" "),a("li",[s._v("建立连接的平均延迟(Connect)为 177ms.")])]),s._v(" "),a("p",[s._v("记住这几个数值, 这将是接下来案例的基准指标.")]),s._v(" "),a("p",[s._v("接着回到终端一, 停止这个未使用 NAT 的 Nginx 应用:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-f")]),s._v(" nginx-hostnet\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("再执行下面的命令, 启动今天的案例应用. 案例应用监听在 8080 端口, 并且使用了 DNAT, 来实现 Host 的 8080 端口, 到容器的 8080 端口的映射关系:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),s._v(" nginx "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--privileged")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),s._v(":8080 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-itd")]),s._v(" feisky/nginx:nat\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("Nginx 启动后, 可以执行 iptables 命令, 确认 DNAT 规则已经创建:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ iptables "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-nL")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-t")]),s._v(" nat\nChain PREROUTING "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("policy ACCEPT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\ntarget     prot opt "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("source")]),s._v("               destination\nDOCKER     all  --  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(".0.0/0            "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(".0.0/0            ADDRTYPE match dst-type LOCAL\n \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n \nChain DOCKER "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" references"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\ntarget     prot opt "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("source")]),s._v("               destination\nRETURN     all  --  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(".0.0/0            "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(".0.0/0\nDNAT       tcp  --  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(".0.0/0            "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(".0.0/0            tcp dpt:8080 to:172.17.0.2:8080\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("可以看到, 在 PREROUTING 链中, 目的为本地的请求, 会转到 DOCKER 链; "),a("strong",[s._v("而在 DOCKER 链中, 目的端口为 8080 的 tcp 请求, 会被 DNAT 到 172.17.0.2 的 8080 端口")]),s._v(". 其中, 172.17.0.2 就是 Nginx 容器的 IP 地址.")]),s._v(" "),a("p",[s._v("接下来,切换到终端二中, 执行 curl 命令, 确认 Nginx 已经正常启动:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" http://192.168.0.30:8080/\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("em"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("Thank you "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" using nginx."),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("/em"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("/p"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("/body"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("/html"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("然后, 再次执行上述的 ab 命令, 不过这次注意, 要把请求的端口号换成 8080:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -c 表示并发请求数为 5000, -n 表示总的请求数为 10 万")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -r 表示套接字接收错误时仍然继续执行, -s 表示设置每个请求的超时时间为 2s")]),s._v("\n$ ab "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-n")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-r")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-s")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" http://192.168.0.30:8080/\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\napr_pollset_poll: The "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("timeout")]),s._v(" specified has expired "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("70007")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nTotal of "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5602")]),s._v(" requests completed\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("果然, 刚才正常运行的 ab, 现在失败了, 还报了连接超时的错误. 运行 ab 时的 -s 参数, 设置了每个请求的超时时间为 2s, 而从输出可以看到, 这次只完成了 5602 个请求.")]),s._v(" "),a("p",[s._v("既然是为了得到 ab 的测试结果, 不妨把超时时间延长一下试试, 比如延长到 30s. 延迟增大意味着要等更长时间, 为了快点得到结果, 可以同时把总测试次数, 也减少到 10000:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ ab "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-n")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-r")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-s")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),s._v(" http://192.168.0.30:8080/\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\nRequests per second:    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("76.47")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#/sec] (mean)")]),s._v("\nTime per request:       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("65380.868")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("ms"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("mean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nTime per request:       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13.076")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("ms"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("mean, across all concurrent requests"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nTransfer rate:          "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("44.79")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("Kbytes/sec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" received\n \nConnection Times "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ms"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n              min  mean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("+/-sd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" median   max\nConnect:        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1300")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5578.0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("65184")]),s._v("\nProcessing:     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("37916")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("59283.2")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("130682")]),s._v("\nWaiting:        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8.7")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("414")]),s._v("\nTotal:          "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("39216")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("58711.6")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1021")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("130682")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("再重新看看 ab 的输出, 这次的结果显示:")]),s._v(" "),a("ul",[a("li",[s._v("每秒请求数(Requests per second)为 76;")]),s._v(" "),a("li",[s._v("每个请求的延迟(Time per request)为 65s;")]),s._v(" "),a("li",[s._v("建立连接的延迟(Connect)为 1300ms.")])]),s._v(" "),a("p",[s._v("显然, 每个指标都比前面差了很多.")]),s._v(" "),a("p",[s._v("在上一节使用 tcpdump 抓包的方法, 找出了延迟增大的根源. 那么今天的案例, 仍然可以用类似的方法寻找线索. 不过, 现在换个思路, 因为今天已经事先知道了问题的根源--那就是 NAT.")]),s._v(" "),a("p",[s._v("回忆一下 Netfilter 中, 网络包的流向以及 NAT 的原理会发现, 要保证 NAT 正常工作, 就至少需要两个步骤:")]),s._v(" "),a("ul",[a("li",[s._v("第一, 利用 Netfilter 中的钩子函数(Hook), 修改源地址或者目的地址.")]),s._v(" "),a("li",[s._v("第二, 利用连接跟踪模块 conntrack, 关联同一个连接的请求和响应.")])]),s._v(" "),a("p",[s._v("是不是这两个地方出现了问题呢? 用前面提到的动态追踪工具 SystemTap 来试试.")]),s._v(" "),a("p",[s._v("由于今天案例是在压测场景下, 并发请求数大大降低, 并且清楚知道 NAT 是罪魁祸首. 所以有理由怀疑, 内核中发生了"),a("strong",[s._v("丢包现象")]),s._v(".")]),s._v(" "),a("p",[s._v("可以回到终端一中, 创建一个 dropwatch.stp 的脚本文件, 并写入下面的内容:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#! /usr/bin/env stap")]),s._v("\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("############################################################")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Dropwatch.stp")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Author: Neil Horman <nhorman@redhat.com>")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# An example script to mimic the behavior of the dropwatch utility")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# http://fedorahosted.org/dropwatch")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("############################################################")]),s._v("\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Array to hold the list of drop points we find")]),s._v("\nglobal locations\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Note when we turn the monitor on and off")]),s._v("\nprobe begin "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" printf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Monitoring for dropped packets'),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\nprobe end "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" printf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Stopping dropped packet monitor'),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# increment a drop counter for every location we drop at")]),s._v("\nprobe kernel.trace"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"kfree_skb"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" locations"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$location")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Every 5 seconds report our drop locations")]),s._v("\nprobe timer.sec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  printf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  foreach "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("l "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" locations-"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    printf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%d packets dropped at %s'),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('"')]),s._v(",\n           @count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("locations"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("l"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(", symname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("l"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("))")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  delete locations\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br")])]),a("p",[s._v("这个脚本, 跟踪内核函数 kfree_skb() 的调用, 并统计丢包的位置. 文件保存好后, 执行下面的 stap 命令, 就可以运行丢包跟踪脚本. 这里的 stap, 是 SystemTap 的命令行工具:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ stap --all-modules dropwatch.stp\nMonitoring "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" dropped packets\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v('当看到 probe begin 输出的 "Monitoring for dropped packets" 时, 表明 SystemTap 已经将脚本编译为内核模块, 并启动运行了.')]),s._v(" "),a("p",[s._v("接着切换到终端二中, 再次执行 ab 命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ ab "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-n")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-r")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-s")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),s._v(" http://192.168.0.30:8080/\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("然后再次回到终端一中, 观察 stap 命令的输出:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10031")]),s._v(" packets dropped at nf_hook_slow\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("676")]),s._v(" packets dropped at tcp_v4_rcv\n \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7284")]),s._v(" packets dropped at nf_hook_slow\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("268")]),s._v(" packets dropped at tcp_v4_rcv\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("会发现"),a("strong",[s._v("大量丢包都发生在 nf_hook_slow 位置")]),s._v(". 看到这个名字, 应该能想到这是在 Netfilter Hook 的钩子函数中, 出现丢包问题了. 但是不是 NAT, 还不能确定. 接下来还得再跟踪 nf_hook_slow 的执行过程, 这一步可以通过 perf 来完成.")]),s._v(" "),a("p",[s._v("切换到终端二中, 再次执行 ab 命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ ab "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-n")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-r")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-s")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),s._v(" http://192.168.0.30:8080/\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("然后再次切换回终端一, 执行 perf record 和 perf report 命令")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 记录一会(比如 30s)后按 Ctrl+C 结束")]),s._v("\n$ perf record "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-a")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-g")]),s._v(" -- "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),s._v("\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 输出报告")]),s._v("\n$ perf report "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-g")]),s._v(" graph,0\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("在 perf report 界面中, 输入查找命令 / 然后, 在弹出的对话框中, 输入 nf_hook_slow; 最后再展开调用栈, 就可以得到下面这个调用图:")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/c43ce48261fc4a4b86998fed4c63395a-20230731161933-5556tk8.png",alt:""}})]),s._v(" "),a("p",[s._v("从这个图可以看到, "),a("strong",[s._v("nf_hook_slow 调用最多的有三个地方, 分别是 ipv4_conntrack_in, br_nf_pre_routing 以及 iptable_nat_ipv4_in")]),s._v(". 换言之, nf_hook_slow 主要在执行三个动作.")]),s._v(" "),a("ul",[a("li",[s._v("第一, 接收网络包时, 在连接跟踪表中查找连接, 并为新的连接分配跟踪对象(Bucket).")]),s._v(" "),a("li",[s._v("第二, 在 Linux 网桥中转发包. 这是因为案例 Nginx 是一个 Docker 容器, 而容器的网络通过网桥来实现;")]),s._v(" "),a("li",[s._v("第三, 接收网络包时, 执行 DNAT, 即把 8080 端口收到的包转发给容器.")])]),s._v(" "),a("p",[s._v("到这里, 其实就找到了性能下降的三个来源. 这三个来源, "),a("strong",[s._v("都是 Linux 的内核机制")]),s._v(", 所以接下来的优化, 自然也是要从内核入手.")]),s._v(" "),a("p",[s._v("根据以前各个资源模块的内容可以知道, Linux 内核为用户提供了大量的"),a("strong",[s._v("可配置选项")]),s._v(", 这些选项可以通过 proc 文件系统, 或者 sys 文件系统, 来查看和修改. 除此之外, 还可以用 sysctl 这个命令行工具, 来查看和修改内核配置.")]),s._v(" "),a("p",[s._v("比如, 今天的主题是 DNAT, 而 DNAT 的基础是 conntrack, 所以可以先看看, 内核提供了哪些 conntrack 的配置选项.")]),s._v(" "),a("p",[s._v("在终端一中, 继续执行下面的命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sysctl")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-a")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" conntrack\nnet.netfilter.nf_conntrack_count "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("180")]),s._v("\nnet.netfilter.nf_conntrack_max "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v("\nnet.netfilter.nf_conntrack_buckets "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("65536")]),s._v("\nnet.netfilter.nf_conntrack_tcp_timeout_syn_recv "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("60")]),s._v("\nnet.netfilter.nf_conntrack_tcp_timeout_syn_sent "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("120")]),s._v("\nnet.netfilter.nf_conntrack_tcp_timeout_time_wait "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("120")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("可以看到, 这里最重要的三个指标:")]),s._v(" "),a("ul",[a("li",[s._v("net.netfilter.nf_conntrack_count, 表示"),a("strong",[s._v("当前连接跟踪数")]),s._v(";")]),s._v(" "),a("li",[s._v("net.netfilter.nf_conntrack_max, 表示"),a("strong",[s._v("最大连接跟踪数")]),s._v(";")]),s._v(" "),a("li",[s._v("net.netfilter.nf_conntrack_buckets, 表示"),a("strong",[s._v("连接跟踪表的大小")]),s._v(".")])]),s._v(" "),a("p",[s._v("回想一下前面的 ab 命令, 并发请求数是 5000, 而请求数是 100000. 显然, 跟踪表设置成只记录 1000 个连接, 是远远不够的.")]),s._v(" "),a("p",[s._v('实际上, 内核在工作异常时, 会把异常信息记录到日志中. 比如前面的 ab 测试, 内核已经在日志中报出了 "nf_conntrack: table full" 的错误. 执行 dmesg 命令, 就可以看到:')]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("dmesg")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tail")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("104235.156774")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" nf_conntrack: nf_conntrack: table full, dropping packet\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("104243.800401")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" net_ratelimit: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3939")]),s._v(" callbacks suppressed\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("104243.800401")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" nf_conntrack: nf_conntrack: table full, dropping packet\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("104262.962157")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" nf_conntrack: nf_conntrack: table full, dropping packet\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v('其中, net_ratelimit 表示有大量的日志被压缩掉了, 这是内核预防日志攻击的一种措施. 而当看到 "nf_conntrack: table full" 的错误时, 就表明 nf_conntrack_max 太小了.')]),s._v(" "),a("p",[s._v("那是不是, 直接把连接跟踪表调大就可以了呢? 调节前先得明白, 连接跟踪表, 实际上是内存中的一个哈希表. 如果连接跟踪数过大, 也会耗费大量内存.")]),s._v(" "),a("p",[s._v("其实, 上面看到的 nf_conntrack_buckets, 就是哈希表的大小. 哈希表中的每一项, 都是一个链表(称为 Bucket), 而链表长度, 就等于 nf_conntrack_max 除以 nf_conntrack_buckets.")]),s._v(" "),a("p",[s._v("比如可以估算一下, 上述配置的连接跟踪表占用的内存大小:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 连接跟踪对象大小为 376, 链表项大小为 16")]),s._v("\nnf_conntrack_max* 连接跟踪对象大小 +nf_conntrack_buckets* 链表项大小 \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v("*376+65536*16 B\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.4")]),s._v(" MB\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("接下来将 nf_conntrack_max 改大一些, 比如改成 131072(即 nf_conntrack_buckets 的 2 倍):")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sysctl")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-w")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("net.netfilter.nf_conntrack_max")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("131072")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sysctl")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-w")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("net.netfilter.nf_conntrack_buckets")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("65536")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("然后再切换到终端二中, 重新执行 ab 命令. 注意, 这次把超时时间也改回原来的 2s:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ ab "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-n")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-r")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-s")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" http://192.168.0.30:8080/\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\nRequests per second:    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6315.99")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#/sec] (mean)")]),s._v("\nTime per request:       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("791.641")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("ms"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("mean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nTime per request:       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.158")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("ms"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("mean, across all concurrent requests"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nTransfer rate:          "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4985.15")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("Kbytes/sec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" received\n \nConnection Times "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ms"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n              min  mean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("+/-sd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" median   max\nConnect:        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("355")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("793.7")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("29")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7352")]),s._v("\nProcessing:     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("311")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("855.9")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("51")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14481")]),s._v("\nWaiting:        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("292")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("851.5")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("36")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14481")]),s._v("\nTotal:         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("666")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1216.3")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("148")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14645")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("果然, 现在可以看到:")]),s._v(" "),a("ul",[a("li",[s._v("每秒请求数(Requests per second)为 6315(不用 NAT 时为 6576);")]),s._v(" "),a("li",[s._v("每个请求的延迟(Time per request)为 791ms(不用 NAT 时为 760ms);")]),s._v(" "),a("li",[s._v("建立连接的延迟(Connect)为 355ms(不用 NAT 时为 177ms).")])]),s._v(" "),a("p",[s._v("这个结果, 已经比刚才的测试好了很多, 也很接近最初不用 NAT 时的基准结果了.")]),s._v(" "),a("p",[s._v("不过, 你可能还是很好奇, 连接跟踪表里, 到底都包含了哪些东西? 这里的东西, 又是怎么刷新的呢?")]),s._v(" "),a("p",[s._v("实际上, 可以"),a("strong",[s._v("用 conntrack 命令行工具, 来查看连接跟踪表的内容")]),s._v(". 比如:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -L 表示列表, -o 表示以扩展格式显示")]),s._v("\n$ conntrack "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-L")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-o")]),s._v(" extended "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("head")]),s._v("\nipv4     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" tcp      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(" TIME_WAIT "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("src")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.2 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("dst")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.96 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("sport")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("51744")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("dport")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("src")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.17")]),s._v(".0.2 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("dst")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.2 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("sport")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("dport")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("51744")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("ASSURED"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("mark")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("use")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nipv4     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" tcp      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(" TIME_WAIT "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("src")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.2 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("dst")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.96 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("sport")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("51524")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("dport")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("src")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.17")]),s._v(".0.2 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("dst")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.2 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("sport")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("dport")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("51524")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("ASSURED"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("mark")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("use")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("从这里可以发现, 连接跟踪表里的对象, 包括了"),a("strong",[s._v("协议, 连接状态, 源 IP, 源端口, 目的 IP, 目的端口, 跟踪状态等")]),s._v(". 由于这个格式是固定的, 所以可以用 awk, sort 等工具, 对其进行统计分析.")]),s._v(" "),a("p",[s._v("比如, 还是以 ab 为例. 在终端二启动 ab 命令后, 再回到终端一中, 执行下面的命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 统计总的连接跟踪数")]),s._v("\n$ conntrack "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-L")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-o")]),s._v(" extended "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("wc")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-l")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14289")]),s._v("\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 统计 TCP 协议各个状态的连接跟踪数")]),s._v("\n$ conntrack "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-L")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-o")]),s._v(" extended "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("awk")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/^.*tcp.*$/ {sum[$6]++} END {for(i in sum) print i, sum[i]}'")]),s._v("\nSYN_RECV "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("\nCLOSE_WAIT "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v("\nESTABLISHED "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2877")]),s._v("\nFIN_WAIT "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\nSYN_SENT "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2113")]),s._v("\nTIME_WAIT "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9283")]),s._v("\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 统计各个源 IP 的连接跟踪数")]),s._v("\n$ conntrack "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-L")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-o")]),s._v(" extended "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("awk")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{print $7}'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cut")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"="')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-f")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sort")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("uniq")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sort")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-nr")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("head")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-n")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14116")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.2\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.96\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[s._v("这里统计了总连接跟踪数, TCP 协议各个状态的连接跟踪数, 以及各个源 IP 的连接跟踪数. 可以看到, 大部分 TCP 的连接跟踪, 都处于 TIME_WAIT 状态, 并且它们大都来自于 192.168.0.2 这个 IP 地址(也就是运行 ab 命令的 VM2).")]),s._v(" "),a("p",[s._v("这些处于 TIME_WAIT 的连接跟踪记录, 会在超时后清理, 而默认的超时时间是 120s, 可以执行下面的命令来查看:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sysctl")]),s._v(" net.netfilter.nf_conntrack_tcp_timeout_time_wait\nnet.netfilter.nf_conntrack_tcp_timeout_time_wait "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("120")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("所以, 如果连接数非常大, 确实也应该考虑, 适当减小超时时间.")]),s._v(" "),a("h5",{attrs:{id:"_3-小结-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-小结-7"}},[s._v("#")]),s._v(" 3.小结")]),s._v(" "),a("p",[s._v("本节学习了如何排查和优化 NAT 带来的性能问题.")]),s._v(" "),a("p",[s._v("由于 NAT 基于 Linux 内核的连接跟踪机制来实现. 所以在分析 NAT 性能问题时, 可以先从 conntrack 角度来分析, 比如用 systemtap, perf 等, 分析内核中 conntrack 的行文; 然后通过调整 netfilter 内核选项的参数, 来进行优化.")]),s._v(" "),a("p",[s._v("其实, Linux 这种通过连接跟踪机制实现的 NAT, 也常被称为"),a("strong",[s._v("有状态的 NAT")]),s._v(", 而维护状态, 也带来了很高的性能成本. 所以, 除了调整内核行为外, 在不需要状态跟踪的场景下(比如只需要按预定的 IP 和端口进行映射, 而不需要动态映射), 也可以使用无状态的 NAT (比如用 tc 或基于 DPDK 开发), 来进一步提升性能.")]),s._v(" "),a("h4",{attrs:{id:"_43-套路篇-网络性能优化的几个思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_43-套路篇-网络性能优化的几个思路"}},[s._v("#")]),s._v(" 43-套路篇:网络性能优化的几个思路")]),s._v(" "),a("p",[s._v("找到网络性能瓶颈后, 下一步要做的就是优化了, 也就是"),a("strong",[s._v("如何降低网络延迟, 并提高网络的吞吐量")]),s._v(". 学完相关原理和案例后就来讲讲, 优化网络性能问题的思路和一些注意事项.")]),s._v(" "),a("h5",{attrs:{id:"_1-确定优化目标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-确定优化目标"}},[s._v("#")]),s._v(" 1.确定优化目标")]),s._v(" "),a("p",[s._v("跟 CPU 和 I/O 方面的性能优化一样, 优化前考虑下"),a("strong",[s._v("网络性能优化的目标")]),s._v("是什么? 换句话说, 观察到的网络性能指标, 要达到多少才合适呢?")]),s._v(" "),a("p",[s._v("实际上, 虽然网络性能优化的整体目标, 是"),a("strong",[s._v("降低网络延迟(如 RTT)和提高吞吐量(如 BPS 和 PPS)")]),s._v(" , 但具体到不同应用中, 每个指标的优化标准可能会不同, 优先级顺序也大相径庭.")]),s._v(" "),a("p",[s._v("就拿上一节提到的 NAT 网关来说, 由于其直接影响整个数据中心的网络出入性能, 所以 NAT 网关通常需要达到或接近线性转发, 也就是说, PPS 是最主要的性能目标.")]),s._v(" "),a("p",[s._v("再如, 对于数据库, 缓存等系统, 快速完成网络收发, 即低延迟, 是主要的性能目标.")]),s._v(" "),a("p",[s._v("而对于经常访问的 Web 服务来说, 则需要同时兼顾吞吐量和延迟.")]),s._v(" "),a("p",[s._v("所以, 为了更客观合理地评估优化效果, 首先应该明确优化的标准, 即要对系统和应用程序进行基准测试, 得到网络协议栈各层的基准性能.")]),s._v(" "),a("p",[s._v("前面介绍过网络性能测试的方法. 简单回顾一下, Linux 网络协议栈, 是需要掌握的核心原理. 它是基于 TCP/IP 协议族的分层结构, 我用一张图来表示这个结构.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/a8cbf1dce0262c391dc836f337a9ce2e-20230731161933-6nynejz.png",alt:""}})]),s._v(" "),a("p",[s._v("明白了这一点, 在进行基准测试时, 就可以按照协议栈的每一层来测试. 由于底层是其上方各层的基础, 底层性能也就决定了高层性能. 所以要清楚, 底层性能指标, 其实就是对应高层的极限性能. 下面从下到上来理解这一点.")]),s._v(" "),a("p",[s._v("首先是网络接口层和网络层, 它们主要负责网络包的封装, 寻址, 路由, 以及发送和接收. "),a("strong",[s._v("每秒可处理的网络包数 PPS, 就是它们最重要的性能指标(特别是在小包的情况下)")]),s._v(" . 可以用内核自带的发包工具 pktgen, 来测试 PPS 的性能.")]),s._v(" "),a("p",[s._v("再向上到传输层的 TCP 和 UDP, 它们主要负责网络传输. 对它们而言, "),a("strong",[s._v("吞吐量(BPS), 连接数以及延迟, 就是最重要的性能指标")]),s._v(". 可以用 iperf 或 netperf, 来测试传输层的性能. 不过要注意, 网络包的大小, 会直接影响这些指标的值. 所以通常需要测试一系列不同大小网络包的性能.")]),s._v(" "),a("p",[s._v("最后, 再往上到了应用层, "),a("strong",[s._v("最需要关注的是吞吐量(BPS), 每秒请求数以及延迟等指标")]),s._v(". 可以用 wrk, ab 等工具, 来测试应用程序的性能.")]),s._v(" "),a("p",[s._v("不过, 这里要注意的是, 测试场景要尽量模拟生产环境, 这样的测试才更有价值. 比如可以到生产环境中, 录制实际的请求情况, 再到测试中回放.")]),s._v(" "),a("p",[s._v("总之, 根据这些基准指标, 再结合已经观察到的性能瓶颈, 就可以明确性能优化的目标.")]),s._v(" "),a("h5",{attrs:{id:"_2-网络性能工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-网络性能工具"}},[s._v("#")]),s._v(" 2.网络性能工具")]),s._v(" "),a("p",[s._v("同前面学习一样, 建议从指标和工具两个不同维度出发, 整理记忆网络相关的性能工具.")]),s._v(" "),a("p",[s._v("第一个维度, 从网络"),a("mark",[a("strong",[s._v("性能指标")])]),s._v("出发, 更容易把性能工具同系统工作原理关联起来, 对性能问题有宏观的认识和把握. 这样, 当想查看某个性能指标时, 就能清楚知道, 可以用哪些工具.")]),s._v(" "),a("p",[s._v("这里把提供网络性能指标的工具, 做成了一个表格, 方便你梳理关系和理解记忆.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/1fd4401b7a6f35cf6547982640e47cb8-20230731161933-svg3cjt.png",alt:""}})]),s._v(" "),a("p",[s._v("再来看第二个维度, 从"),a("mark",[a("strong",[s._v("性能工具")])]),s._v("出发. 同样的, 也将这些常用工具, 汇总成了一个表格.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/e50dbbe151a8be71a4269693511ce93d-20230731161933-3hyfv0p.png",alt:""}})]),s._v(" "),a("h5",{attrs:{id:"_3-网络性能优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-网络性能优化"}},[s._v("#")]),s._v(" 3.网络性能优化")]),s._v(" "),a("p",[s._v("总的来说, "),a("strong",[s._v("先要获得网络基准测试报告, 然后通过相关性能工具, 定位出网络性能瓶颈")]),s._v(". 再接下来的优化工作, 就是水到渠成的事情了.")]),s._v(" "),a("p",[s._v("当然, 还是那句话, 要优化网络性能, 肯定离不开 Linux 系统的网络协议栈和网络收发流程的辅助. 可以结合下面这张图再回忆一下这部分的知识.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/553918d989c0cd114b3cc5bc2011e620-20230731161933-k10nqfv.png",alt:""}})]),s._v(" "),a("p",[s._v("接下来就可以从"),a("strong",[s._v("应用程序, 套接字, 传输层, 网络层以及链路层")]),s._v("等几个角度, 分别来看网络性能优化的基本思路.")]),s._v(" "),a("h6",{attrs:{id:"_1-应用程序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-应用程序"}},[s._v("#")]),s._v(" (1)应用程序")]),s._v(" "),a("p",[s._v("应用程序, 通常通过套接字接口进行网络操作. 由于网络收发通常比较耗时, 所以应用程序的优化, 主要就是"),a("strong",[s._v("对网络 I/O 和进程自身的工作模型的优化")]),s._v(".")]),s._v(" "),a("p",[s._v("从"),a("mark",[a("strong",[s._v("网络 I/O 的角度")])]),s._v("来说, 主要有下面两种优化思路.")]),s._v(" "),a("ul",[a("li",[s._v("第一种是"),a("strong",[s._v("最常用的 I/O 多路复用技术 epoll")]),s._v(", 主要用来取代 select 和 poll. 这其实是解决 C10K 问题的关键, 也是目前很多网络应用默认使用的机制.")]),s._v(" "),a("li",[s._v("第二种是"),a("strong",[s._v("使用异步 I/O")]),s._v("(Asynchronous I/O, AIO). AIO 允许应用程序同时发起很多 I/O 操作, 而不用等待这些操作完成. 等到 I/O 完成后, 系统会用事件通知的方式, 告诉应用程序结果. 不过, AIO 的使用比较复杂, 需要小心处理很多边缘情况.")])]),s._v(" "),a("p",[s._v("而从"),a("mark",[a("strong",[s._v("进程的工作模型")])]),s._v("来说, 也有两种不同的模型用来优化.")]),s._v(" "),a("ul",[a("li",[s._v("第一种, "),a("strong",[s._v("主进程 + 多个 worker 子进程")]),s._v(". 其中, 主进程负责管理网络连接, 而子进程负责实际的业务处理. 这也是最常用的一种模型.")]),s._v(" "),a("li",[s._v("第二种, "),a("strong",[s._v("监听到相同端口的多进程模型")]),s._v(". 在这种模型下, 所有进程都会监听相同接口, 并且开启 SO_REUSEPORT 选项, 由内核负责, 把请求负载均衡到这些监听进程中去.")])]),s._v(" "),a("p",[s._v("除了网络 I/O 和进程的工作模型外, "),a("mark",[a("strong",[s._v("应用层的网络协议优化")])]),s._v(", 也是至关重要的一点. 下面总结了常见的几种优化方法.")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("使用长连接取代短连接, 可以显著降低 TCP 建立连接的成本")]),s._v(". 在每秒请求次数较多时, 这样做的效果非常明显.")]),s._v(" "),a("li",[a("strong",[s._v("使用内存等方式, 来缓存不常变化的数据")]),s._v(", 可以降低网络 I/O 次数, 同时加快应用程序的响应速度.")]),s._v(" "),a("li",[a("strong",[s._v("使用 Protocol Buffer 等序列化的方式")]),s._v(", 压缩网络 I/O 的数据量, 可以提高应用程序的吞吐.")]),s._v(" "),a("li",[a("strong",[s._v("使用 DNS 缓存, 预取, HTTPDNS 等方式, 减少 DNS 解析的延迟")]),s._v(", 也可以提升网络 I/O 的整体速度.")])]),s._v(" "),a("h6",{attrs:{id:"_2-套接字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-套接字"}},[s._v("#")]),s._v(" (2)套接字")]),s._v(" "),a("p",[s._v("套接字可以屏蔽掉 Linux 内核中不同协议的差异, 为应用程序提供统一的访问接口. 每个套接字, 都有一个读写缓冲区.")]),s._v(" "),a("ul",[a("li",[s._v("读缓冲区, 缓存了远端发过来的数据. 如果读缓冲区已满, 就不能再接收新的数据.")]),s._v(" "),a("li",[s._v("写缓冲区, 缓存了要发出去的数据. 如果写缓冲区已满, 应用程序的写操作就会被阻塞.")])]),s._v(" "),a("p",[s._v("所以, 为了提高网络的吞吐量, 通常需要调整这些缓冲区的大小. 比如:")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("增大每个套接字的缓冲区大小")]),s._v(" net.core.optmem_max;")]),s._v(" "),a("li",[a("strong",[s._v("增大套接字接收缓冲区大小")]),s._v(" net.core.rmem_max 和发送缓冲区大小 net.core.wmem_max;")]),s._v(" "),a("li",[a("strong",[s._v("增大 TCP 接收缓冲区大小")]),s._v(" net.ipv4.tcp_rmem 和发送缓冲区大小 net.ipv4.tcp_wmem.")])]),s._v(" "),a("p",[s._v("至于套接字的内核选项, 我把它们整理成了一个表格:")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/5f62ebae236c0cf7d8668b537488afb8-20230731161933-k8hxpqt.png",alt:""}})]),s._v(" "),a("p",[s._v("不过有几点需要注意.")]),s._v(" "),a("ul",[a("li",[s._v("tcp_rmem 和 tcp_wmem 的三个数值分别是 min, default, max, 系统会根据这些设置, 自动调整 TCP 接收/发送缓冲区的大小.")]),s._v(" "),a("li",[s._v("udp_mem 的三个数值分别是 min, pressure, max, 系统会根据这些设置, 自动调整 UDP 发送缓冲区的大小.")])]),s._v(" "),a("p",[s._v("当然, 表格中的数值只提供参考价值, 具体应该设置多少, 还需要根据实际的网络状况来确定. 比如, 发送缓冲区大小, 理想数值是"),a("strong",[s._v("吞吐量 * 延迟")]),s._v(", 这样才可以达到最大网络利用率.")]),s._v(" "),a("p",[s._v("除此之外, 套接字接口还提供了一些配置选项, 用来修改网络连接的行为:")]),s._v(" "),a("ul",[a("li",[s._v("为 TCP 连接设置 TCP_NODELAY 后, 就可以禁用 Nagle 算法;")]),s._v(" "),a("li",[s._v("为 TCP 连接开启 TCP_CORK 后, 可以让小包聚合成大包后再发送(注意会阻塞小包的发送);")]),s._v(" "),a("li",[s._v("使用 SO_SNDBUF 和 SO_RCVBUF, 可以分别调整套接字发送缓冲区和接收缓冲区的大小.")])]),s._v(" "),a("h6",{attrs:{id:"_3-传输层"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-传输层"}},[s._v("#")]),s._v(" (3)传输层")]),s._v(" "),a("p",[s._v("传输层最重要的是 TCP 和 UDP 协议, 所以这儿的优化, 其实主要就是对这两种协议的优化.")]),s._v(" "),a("p",[s._v("首先来看 TCP 协议的优化.")]),s._v(" "),a("p",[s._v("TCP 提供了面向连接的可靠传输服务. 要优化 TCP, 首先要掌握 TCP 协议的基本原理, 比如流量控制, 慢启动, 拥塞避免, 延迟确认以及状态流图(如下图所示)等.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/de4635aef2aaa36ac9664116ae860487-20230731161933-qstxgyz.png",alt:""}})]),s._v(" "),a("p",[s._v("关于这些原理的细节就不再展开讲解了. 掌握这些原理后, 就可以在不破坏 TCP 正常工作的基础上, 对它进行优化. 下面分几类情况详细说明.")]),s._v(" "),a("p",[s._v("第一类, "),a("strong",[s._v("在请求数比较大的场景下, 可能会看到大量处于 TIME_WAIT 状态的连接, 它们会占用大量内存和端口资源")]),s._v(". 这时可以优化与 TIME_WAIT 状态相关的内核选项, 比如采取下面几种措施.")]),s._v(" "),a("ul",[a("li",[s._v("增大处于 TIME_WAIT 状态的连接数量 net.ipv4.tcp_max_tw_buckets, 并增大连接跟踪表的大小 net.netfilter.nf_conntrack_max.")]),s._v(" "),a("li",[s._v("减小 net.ipv4.tcp_fin_timeout 和 net.netfilter.nf_conntrack_tcp_timeout_time_wait, 让系统尽快释放它们所占用的资源.")]),s._v(" "),a("li",[s._v("开启端口复用 net.ipv4.tcp_tw_reuse. 这样被 TIME_WAIT 状态占用的端口, 还能用到新建的连接中.")]),s._v(" "),a("li",[s._v("增大本地端口的范围 net.ipv4.ip_local_port_range. 这样就可以支持更多连接, 提高整体的并发能力.")]),s._v(" "),a("li",[s._v("增加最大文件描述符的数量. 你可以使用 fs.nr_open 和 fs.file-max, 分别增大进程和系统的最大文件描述符数; 或在应用程序的 systemd 配置文件中, 配置 LimitNOFILE, 设置应用程序的最大文件描述符数.")])]),s._v(" "),a("p",[s._v("第二类, "),a("strong",[s._v("为了缓解 SYN FLOOD 等, 利用 TCP 协议特点进行攻击而引发的性能问题, 可以考虑优化与 SYN 状态相关的内核选项")]),s._v(", 比如采取下面几种措施.")]),s._v(" "),a("ul",[a("li",[s._v("增大 TCP 半连接的最大数量 net.ipv4.tcp_max_syn_backlog, 或者开启 TCP SYN Cookies net.ipv4.tcp_syncookies, 来绕开半连接数量限制的问题(注意, 这两个选项不可同时使用).")]),s._v(" "),a("li",[s._v("减少 SYN_RECV 状态的连接重传 SYN+ACK 包的次数 net.ipv4.tcp_synack_retries.")])]),s._v(" "),a("p",[s._v("第三类, 在长连接的场景中, 通常使用 Keepalive 来检测 TCP 连接的状态, 以便对端连接断开后, 可以自动回收. 但是, 系统默认的 Keepalive 探测间隔和重试次数, 一般都无法满足应用程序的性能要求. 所以, 这时候需要"),a("strong",[s._v("优化与 Keepalive 相关的内核选项")]),s._v(", 比如:")]),s._v(" "),a("ul",[a("li",[s._v("缩短最后一次数据包到 Keepalive 探测包的间隔时间 net.ipv4.tcp_keepalive_time;")]),s._v(" "),a("li",[s._v("缩短发送 Keepalive 探测包的间隔时间 net.ipv4.tcp_keepalive_intvl;")]),s._v(" "),a("li",[s._v("减少 Keepalive 探测失败后, 一直到通知应用程序前的重试次数 net.ipv4.tcp_keepalive_probes.")])]),s._v(" "),a("p",[s._v("讲了这么多 TCP 优化方法, 我也把它们整理成了一个表格, 方便你在需要时参考(数值仅供参考, 具体配置还要结合实际场景来调整):")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/6e6042d50fd83f75fbf5b693830be92d-20230731161933-ef6p9dr.png",alt:""}})]),s._v(" "),a("p",[s._v("优化 TCP 性能时, 还要注意, 如果同时使用不同优化方法, 可能会产生冲突. 比如, 就像网络请求延迟的案例中曾经分析过的, 服务器端开启 Nagle 算法, 而客户端开启延迟确认机制, 就很容易导致网络延迟增大.")]),s._v(" "),a("p",[s._v("另外, 在使用 NAT 的服务器上, 如果开启 net.ipv4.tcp_tw_recycle, 就很容易导致各种连接失败. 实际上, 由于坑太多, 这个选项在内核的 4.1 版本中已经删除了.")]),s._v(" "),a("p",[s._v("说完 TCP, 再来看 UDP 的优化.")]),s._v(" "),a("p",[s._v("UDP 提供了面向数据报的网络协议, 它不需要网络连接, 也不提供可靠性保障. 所以 UDP 优化, 相对于 TCP 来说, 要简单得多. 这里也总结了常见的几种优化方案.")]),s._v(" "),a("ul",[a("li",[s._v("跟上篇套接字部分提到的一样, 增大套接字缓冲区大小以及 UDP 缓冲区范围;")]),s._v(" "),a("li",[s._v("跟前面 TCP 部分提到的一样, 增大本地端口号的范围;")]),s._v(" "),a("li",[s._v("根据 MTU 大小, 调整 UDP 数据包的大小, 减少或者避免分片的发生.")])]),s._v(" "),a("h6",{attrs:{id:"_4-网络层"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-网络层"}},[s._v("#")]),s._v(" (4)网络层")]),s._v(" "),a("p",[s._v("接下来,再来看网络层的优化. 网络层, 负责网络包的封装, 寻址和路由, 包括 IP, ICMP 等常见协议. 在网络层, 最主要的优化, 其实就是对路由, IP 分片以及 ICMP 等进行调优.")]),s._v(" "),a("p",[s._v("第一种, "),a("strong",[s._v("从路由和转发的角度出发")]),s._v(", 可以调整下面的内核选项.")]),s._v(" "),a("ul",[a("li",[s._v("在需要转发的服务器中, 比如用作 NAT 网关的服务器或者使用 Docker 容器时, 开启 IP 转发, 即设置 net.ipv4.ip_forward = 1.")]),s._v(" "),a("li",[s._v("调整数据包的生存周期 TTL, 比如设置 net.ipv4.ip_default_ttl = 64. 注意增大该值会降低系统性能.")]),s._v(" "),a("li",[s._v("开启数据包的反向地址校验, 比如设置 net.ipv4.conf.eth0.rp_filter = 1. 这样可以防止 IP 欺骗, 并减少伪造 IP 带来的 DDoS 问题.")])]),s._v(" "),a("p",[s._v("第二种, "),a("strong",[s._v("从分片的角度出发")]),s._v(", 最主要的是"),a("mark",[a("strong",[s._v("调整 MTU(Maximum Transmission Unit)的大小")])]),s._v(". 通常, MTU 的大小应该根据以太网的标准来设置. 以太网标准规定, 一个网络帧最大为 1518B, 那么去掉以太网头部的 18B 后, 剩余的 1500 就是以太网 MTU 的大小. 在使用 VXLAN, GRE 等叠加网络技术时, 要注意, 网络叠加会使原来的网络包变大, 导致 MTU 也需要调整.")]),s._v(" "),a("p",[s._v("比如, 就以 VXLAN 为例, 它在原来报文的基础上, 增加了 14B 的以太网头部,  8B 的 VXLAN 头部, 8B 的 UDP 头部以及 20B 的 IP 头部. 换句话说, 每个包比原来增大了 50B. 所以, 就需要把交换机, 路由器等的 MTU, 增大到 1550, 或者把 VXLAN 封包前(比如虚拟化环境中的虚拟网卡)的 MTU 减小为 1450. 另外, 现在很多网络设备都支持巨帧, 如果是这种环境, 还可以把 MTU 调大为 9000, 以提高网络吞吐量.")]),s._v(" "),a("p",[s._v("第三种, "),a("strong",[s._v("从 ICMP 的角度出发")]),s._v(", 为了避免 ICMP 主机探测, ICMP Flood 等各种网络问题, 可以通过内核选项, 来"),a("strong",[s._v("限制 ICMP 的行为")]),s._v(".")]),s._v(" "),a("ul",[a("li",[s._v("比如, 可以禁止 ICMP 协议, 即设置 net.ipv4.icmp_echo_ignore_all = 1. 这样外部主机就无法通过 ICMP 来探测主机.")]),s._v(" "),a("li",[s._v("或者, 还可以禁止广播 ICMP, 即设置 net.ipv4.icmp_echo_ignore_broadcasts = 1.")])]),s._v(" "),a("h6",{attrs:{id:"_5-链路层"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-链路层"}},[s._v("#")]),s._v(" (5)链路层")]),s._v(" "),a("p",[s._v("最后再来看链路层的优化方法. 链路层负责网络包在物理网络中的传输, 比如 MAC 寻址, 错误侦测以及通过网卡传输网络帧等. 自然, 链路层的优化, 也是围绕这些基本功能进行的. 接下来从不同的几个方面分别来看.")]),s._v(" "),a("p",[a("strong",[s._v("由于网卡收包后调用的中断处理程序(特别是软中断), 需要消耗大量的 CPU. 所以将这些中断处理程序调度到不同的 CPU 上执行, 就可以显著提高网络吞吐量")]),s._v(". 这通常可以采用下面两种方法.")]),s._v(" "),a("ul",[a("li",[s._v("比如可以为网卡硬中断配置 CPU 亲和性(smp_affinity), 或者开启 irqbalance 服务.")]),s._v(" "),a("li",[s._v("再如, 可以开启 "),a("strong",[s._v("RPS")]),s._v("(Receive Packet Steering)和 "),a("strong",[s._v("RFS")]),s._v("(Receive Flow Steering), 将应用程序和软中断的处理, 调度到相同 CPU 上, 这样就可以增加 CPU 缓存命中率, 减少网络延迟.")])]),s._v(" "),a("p",[s._v("另外, 现在的网卡都有很丰富的功能, 原来在内核中通过软件处理的功能, 可以卸载到网卡中, 通过硬件来执行.")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("TSO")]),s._v("(TCP Segmentation Offload)和 "),a("strong",[s._v("UFO")]),s._v("(UDP Fragmentation Offload): 在 TCP/UDP 协议中直接发送大包; 而 TCP 包的分段(按照 MSS 分段)和 UDP 的分片(按照 MTU 分片)功能, 由网卡来完成 .")]),s._v(" "),a("li",[a("strong",[s._v("GSO")]),s._v("(Generic Segmentation Offload): 在网卡不支持 TSO/UFO 时, 将 TCP/UDP 包的分段, 延迟到进入网卡前再执行. 这样, 不仅可以减少 CPU 的消耗, 还可以在发生丢包时只重传分段后的包.")]),s._v(" "),a("li",[a("strong",[s._v("LRO")]),s._v("(Large Receive Offload): 在接收 TCP 分段包时, 由网卡将其组装合并后, 再交给上层网络处理. 不过要注意, 在需要 IP 转发的情况下, 不能开启 LRO, 因为如果多个包的头部信息不一致, LRO 合并会导致网络包的校验错误.")]),s._v(" "),a("li",[a("strong",[s._v("GRO")]),s._v("(Generic Receive Offload): GRO 修复了 LRO 的缺陷, 并且更为通用, 同时支持 TCP 和 UDP.")]),s._v(" "),a("li",[a("strong",[s._v("RSS")]),s._v("(Receive Side Scaling): 也称为多队列接收, 它基于硬件的多个接收队列, 来分配网络接收进程, 这样可以让多个 CPU 来处理接收到的网络包.")]),s._v(" "),a("li",[a("strong",[s._v("VXLAN")]),s._v(" 卸载: 也就是让网卡来完成 VXLAN 的组包功能.")])]),s._v(" "),a("p",[s._v("最后, 对于"),a("strong",[s._v("网络接口本身")]),s._v(", 也有很多方法, 可以优化网络的吞吐量.")]),s._v(" "),a("ul",[a("li",[s._v("比如, 可以开启网络接口的多队列功能. 这样每个队列就可以用不同的中断号, 调度到不同 CPU 上执行, 从而提升网络的吞吐量.")]),s._v(" "),a("li",[s._v("再如, 可以增大网络接口的缓冲区大小, 以及队列长度等, 提升网络传输的吞吐量(注意, 这可能导致延迟增大).")]),s._v(" "),a("li",[s._v("还可以使用 Traffic Control 工具, 为不同网络流量配置 QoS.")])]),s._v(" "),a("p",[s._v("到这里就从应用程序, 套接字, 传输层, 网络层, 再到链路层, 分别介绍了相应的网络性能优化方法. 通过这些方法的优化后, 网络性能就可以满足绝大部分场景了.")]),s._v(" "),a("p",[s._v("最后, 别忘了一种极限场景. 还记得学过的的 C10M 问题吗? 在"),a("strong",[s._v("单机并发 1000 万的场景中, 对 Linux 网络协议栈进行的各种优化策略, 基本都没有太大效果. 因为这种情况下, 网络协议栈的冗长流程, 其实才是最主要的性能负担")]),s._v(". 这时, 可以用两种方式来优化.")]),s._v(" "),a("ul",[a("li",[s._v("第一种, 使用 DPDK 技术, 跳过内核协议栈, 直接由用户态进程用轮询的方式, 来处理网络请求. 同时, 再结合大页, CPU 绑定, 内存对齐, 流水线并发等多种机制, 优化网络包的处理效率.")]),s._v(" "),a("li",[s._v("第二种, 使用内核自带的 XDP 技术, 在网络包进入内核协议栈前, 就对其进行处理, 这样也可以实现很好的性能.")])]),s._v(" "),a("h5",{attrs:{id:"_4-小结-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-小结-14"}},[s._v("#")]),s._v(" 4.小结")]),s._v(" "),a("p",[s._v("本节梳理了常见的 Linux 网络性能优化方法. 在优化网络的性能时, 可以结合 Linux 系统的网络协议栈和网络收发流程, "),a("strong",[s._v("从应用程序, 套接字, 传输层, 网络层再到链路层等, 对每个层次进行逐层优化")]),s._v(".")]),s._v(" "),a("p",[s._v("实际上, 分析和定位网络瓶颈也是基于这些网络层进行的. 而定位出网络性能瓶颈后, 就可以根据瓶颈所在的协议层, 进行优化. 具体而言:")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("在应用程序中, 主要是优化 I/O 模型, 工作模型以及应用层的网络协议;")])]),s._v(" "),a("li",[a("strong",[s._v("在套接字层中, 主要是优化套接字的缓冲区大小;")])]),s._v(" "),a("li",[a("strong",[s._v("在传输层中, 主要是优化 TCP 和 UDP 协议;")])]),s._v(" "),a("li",[a("strong",[s._v("在网络层中, 主要是优化路由, 转发, 分片以及 ICMP 协议;")])]),s._v(" "),a("li",[a("strong",[s._v("最后, 在链路层中, 主要是优化网络包的收发, 网络功能卸载以及网卡选项.")])])]),s._v(" "),a("p",[s._v("如果这些方法依然不能满足要求, 那就可以考虑使用 DPDK 等用户态方式, 绕过内核协议栈; 或者使用 XDP 在网络包进入内核协议栈前进行处理.")]),s._v(" "),a("h3",{attrs:{id:"综合实战篇"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#综合实战篇"}},[s._v("#")]),s._v(" 综合实战篇")]),s._v(" "),a("h4",{attrs:{id:"_46-案例篇-为什么应用容器化后-启动慢了很多"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_46-案例篇-为什么应用容器化后-启动慢了很多"}},[s._v("#")]),s._v(" 46-案例篇:为什么应用容器化后,启动慢了很多?")]),s._v(" "),a("p",[s._v("接下来将进入最后一个重要模块--综合实战篇.")]),s._v(" "),a("p",[s._v("随着 Kubernetes, Docker 等技术的普及, 越来越多的企业, 都已经走上了应用程序容器化的道路. 我相信, 你在了解学习这些技术的同时, 一定也听说过不少, 基于 Docker 的微服务架构带来的各种优势. 不过, 任何技术都不是银弹. 这些新技术, 在带来诸多便捷功能之外, 也带来了"),a("strong",[s._v("更高的复杂性, 比如性能降低, 架构复杂, 排错困难")]),s._v("等等.")]),s._v(" "),a("p",[s._v("本节就"),a("strong",[s._v("通过一个 Tomcat 案例来看看如何分析应用程序容器化后的性能问题")]),s._v(".")]),s._v(" "),a("h5",{attrs:{id:"_1-案例准备-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-案例准备-7"}},[s._v("#")]),s._v(" 1.案例准备")]),s._v(" "),a("p",[s._v("今天的案例只需要一台虚拟机. 还是基于 Ubuntu 18.04. 案例环境如下所示:")]),s._v(" "),a("ul",[a("li",[s._v("机器配置: 2 CPU, 8GB 内存.")]),s._v(" "),a("li",[s._v("预先安装 docker, curl, jq, pidstat 等工具, 如 apt install docker.io curl jq sysstat.")])]),s._v(" "),a("p",[s._v("其中, jq 工具专门用来在命令行中处理 json. 需要打开两个终端, 登录到同一台虚拟机中, 并安装上述工具.")]),s._v(" "),a("h5",{attrs:{id:"_2-案例分析-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-案例分析-8"}},[s._v("#")]),s._v(" 2.案例分析")]),s._v(" "),a("p",[s._v('今天要分析的案例, 是一个 Tomcat 应用. 案例也基于 Tomcat 的官方镜像构建, 其核心逻辑很简单, 就是分配一点儿内存, 并输出 "Hello, world!".')]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("byte data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" new byte"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("256")]),s._v("*1024*1024"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nout.println"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello, wolrd!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("为了方便运行, 我已经将它打包成了一个 "),a("a",{attrs:{href:"https://github.com/feiskyer/linux-perf-examples/tree/master/tomcat",target:"_blank",rel:"noopener noreferrer"}},[s._v("Docker 镜像"),a("OutboundLink")],1),s._v(" feisky/tomcat:8, 并推送到了 Docker Hub 中. 可以直接按照下面的步骤来运行它.")]),s._v(" "),a("p",[s._v("在终端一中, 执行下面的命令, 启动 Tomcat 应用, 并监听 8080 端口. 如果一切正常, 应该可以看到如下的输出:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -m 表示设置内存为 512MB")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),s._v(" tomcat "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--cpus")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-m")]),s._v(" 512M "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),s._v(":8080 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-itd")]),s._v(" feisky/tomcat:8\nUnable to "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("find")]),s._v(" image "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'feisky/tomcat:8'")]),s._v(" locally\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(": Pulling from feisky/tomcat\n741437d97401: Pull complete\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n22cd96a25579: Pull complete\nDigest: sha256:71871cff17b9043842c2ec99f370cc9f1de7bc121cd2c02d8e2092c6e268f7e2\nStatus: Downloaded newer image "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" feisky/tomcat:8\nWARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.\n2df259b752db334d96da26f19166d662a82283057411f6332f3cbdbcab452249\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("接着在终端二中使用 curl, 访问 Tomcat 监听的 8080 端口, 确认案例已经正常启动:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" localhost:8080\ncurl: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("56")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" Recv failure: Connection reset by peer\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v('不过, 很不幸, curl 返回了 "Connection reset by peer" 的错误, 说明 Tomcat 服务, 并不能正常响应客户端请求.')]),s._v(" "),a("p",[s._v("是不是 Tomcat 启动出问题了呢? 切换到终端一中, 执行 docker logs 命令, 查看容器的日志. 这里注意, 需要加上 -f 参数, 表示跟踪容器的最新日志输出:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" logs "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-f")]),s._v(" tomcat\nUsing CATALINA_BASE:   /usr/local/tomcat\nUsing CATALINA_HOME:   /usr/local/tomcat\nUsing CATALINA_TMPDIR: /usr/local/tomcat/temp\nUsing JRE_HOME:        /docker-java-home/jre\nUsing CLASSPATH:       /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("从这儿可以看到, Tomcat 容器只打印了环境变量, 还没有应用程序初始化的日志. 也就是说, Tomcat 还在启动过程中, 这时候去访问它, 当然没有响应. 为了观察 Tomcat 的启动过程, 在终端一中, 继续保留 docker logs -f 命令, 并在终端二中执行下面的命令, 多次尝试访问 Tomcat.")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("((")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("))")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" localhost:8080"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\ncurl: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("56")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" Recv failure: Connection reset by peer\ncurl: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("56")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" Recv failure: Connection reset by peer\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 这儿会阻塞一会")]),s._v("\nHello, wolrd"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\ncurl: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("52")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" Empty reply from server\ncurl: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" Failed to connect to localhost port "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),s._v(": Connection refused\ncurl: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" Failed to connect to localhost port "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),s._v(": Connection refused\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v('观察一会儿, 可以看到, 一段时间后, curl 终于给出了想要的结果 "Hello, wolrd!". 但是, 随后又出现了 "Empty reply from server", 和一直持续的 "Connection refused" 错误. 换句话说, Tomcat 响应一次请求后, 就再也不响应了.')]),s._v(" "),a("p",[s._v("这是怎么回事呢? 回到终端一中, 观察 Tomcat 的日志, 看看能不能找到什么线索.")]),s._v(" "),a("p",[s._v("从终端一中, 应该可以看到下面的输出:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),s._v("-Feb-2019 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(":43:32.719 INFO "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("localhost-startStop-1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("/usr/local/tomcat/webapps/docs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),s._v("-Feb-2019 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(":43:33.725 INFO "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("localhost-startStop-1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("/usr/local/tomcat/webapps/docs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" has finished "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1,006")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" ms\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),s._v("-Feb-2019 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(":43:33.726 INFO "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("localhost-startStop-1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("/usr/local/tomcat/webapps/manager"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),s._v("-Feb-2019 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(":43:34.521 INFO "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("localhost-startStop-1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("/usr/local/tomcat/webapps/manager"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" has finished "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("795")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" ms\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),s._v("-Feb-2019 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(":43:34.722 INFO "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"http-nio-8080"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),s._v("-Feb-2019 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(":43:35.319 INFO "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ajp-nio-8009"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),s._v("-Feb-2019 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(":43:35.821 INFO "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" org.apache.catalina.startup.Catalina.start Server startup "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24096")]),s._v(" ms\nroot@ubuntu:~"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("从内容上可以看到, Tomcat 在启动 24s 后完成初始化, 并且正常启动. 从日志上来看, 没有什么问题.")]),s._v(" "),a("p",[s._v("不过, 细心的你肯定注意到了最后一行, 明显是"),a("strong",[s._v("回到了 Linux 的 SHELL 终端中")]),s._v(", 而没有继续等待 Docker 输出的容器日志. 输出重新回到 SHELL 终端, 通常表示上一个命令已经结束. 而上一个命令, 是 docker logs -f 命令. 那么它的退出就只有两种可能了, 要么是容器退出了, 要么就是 dockerd 进程退出了.")]),s._v(" "),a("p",[s._v("究竟是哪种情况呢? 这就需要进一步确认了. 可以在终端一中, 执行下面的命令, 查看容器的状态:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-a")]),s._v("\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                            PORTS               NAMES\n0f2b3fcdd257        feisky/tomcat:8     "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"catalina.sh run"')]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" minutes ago       Exited "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("137")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" About a minute ago                       tomcat\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("容器处于 Exited 状态, 说明是第一种情况, 容器已经退出. 不过为什么会这样呢? 显然, 在前面容器的日志里并没有发现线索, 那就只能从 Docker 本身入手了.")]),s._v(" "),a("p",[s._v("可以调用 Docker 的 API, 查询容器的状态, 退出码以及错误信息, 然后确定容器退出的原因. 这些可以通过 docker inspect 命令来完成, 比如可以继续执行下面的命令, 通过 -f 选项设置只输出容器的状态:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示容器状态, jq 用来格式化 json 输出")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" inspect tomcat "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-f")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{{json .State}}'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" jq\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Status"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"exited"')]),s._v(",\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Running"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" false,\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Paused"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" false,\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Restarting"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" false,\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"OOMKilled"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" true,\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Dead"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" false,\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Pid"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(",\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ExitCode"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("137")]),s._v(",\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Error"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v(",\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("这次可以看到, 容器已经处于 exited 状态, OOMKilled 是 true, ExitCode 是 137. 这其中, OOMKilled 表示容器被 OOM 杀死了.")]),s._v(" "),a("p",[s._v("前面提到过, "),a("strong",[s._v("OOM 表示内存不足时, 某些应用会被系统杀死")]),s._v(". 可是, 为什么内存会不足呢? 我们的应用分配了 256 MB 的内存, 而容器启动时, 明明通过 -m 选项, 设置了 512 MB 的内存, 按说应该是足够的.")]),s._v(" "),a("p",[s._v("到这里, 估计你应该还记得, 当 OOM 发生时, 系统会把相关的 OOM 信息, 记录到日志中. 所以可以在终端中执行 dmesg 命令, 查看系统日志, 并定位 OOM 相关的日志:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("dmesg")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("193038.106393")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("java")]),s._v(" invoked oom-killer: "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("gfp_mask")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("0x14000c0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("GFP_KERNEL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("nodemask")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("null"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("order")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("oom_score_adj")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("193038.106396")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("java")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("cpuset")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("0f2b3fcdd2578165ea77266cdc7b1ad43e75877b0ac1889ecda30a78cb78bd53 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("mems_allowed")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("193038.106402")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" CPU: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" PID: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("27424")]),s._v(" Comm: "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("java")]),s._v(" Tainted: G  OE    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.15")]),s._v(".0-1037 "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#39-Ubuntu")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("193038.106404")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" Hardware name: Microsoft Corporation Virtual Machine/Virtual Machine, BIOS 090007  06/02/2017\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("193038.106405")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" Call Trace:\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("193038.106414")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  dump_stack+0x63/0x89\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("193038.106419")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  dump_header+0x71/0x285\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("193038.106422")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  oom_kill_process+0x220/0x440\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("193038.106424")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  out_of_memory+0x2d1/0x4f0\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("193038.106429")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  mem_cgroup_out_of_memory+0x4b/0x80\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("193038.106432")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  mem_cgroup_oom_synchronize+0x2e8/0x320\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("193038.106435")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  ? mem_cgroup_css_online+0x40/0x40\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("193038.106437")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  pagefault_out_of_memory+0x36/0x7b\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("193038.106443")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  mm_fault_error+0x90/0x180\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("193038.106445")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  __do_page_fault+0x4a5/0x4d0\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("193038.106448")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  do_page_fault+0x2e/0xe0\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("193038.106454")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  ? page_fault+0x2f/0x50\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("193038.106456")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  page_fault+0x45/0x50\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("193038.106459")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" RIP: 0033:0x7fa053e5a20d\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("193038.106460")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" RSP: 002b:00007fa0060159e8 EFLAGS: 00010206\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("193038.106462")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" RAX: 0000000000000000 RBX: 00007fa04c4b3000 RCX: 0000000009187440\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("193038.106463")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" RDX: 00000000943aa440 RSI: 0000000000000000 RDI: 000000009b223000\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("193038.106464")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" RBP: 00007fa006015a60 R08: 0000000002000002 R09: 00007fa053d0a8a1\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("193038.106465")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" R10: 00007fa04c018b80 R11: 0000000000000206 R12: 0000000100000768\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("193038.106466")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" R13: 00007fa04c4b3000 R14: 0000000100000768 R15: 0000000010000000\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("193038.106468")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" Task "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" /docker/0f2b3fcdd2578165ea77266cdc7b1ad43e75877b0ac1889ecda30a78cb78bd53 killed as a result of limit of /docker/0f2b3fcdd2578165ea77266cdc7b1ad43e75877b0ac1889ecda30a78cb78bd53\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("193038.106478")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" memory: usage 524288kB, limit 524288kB, failcnt "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("77")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("193038.106480")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" memory+swap: usage 0kB, limit 9007199254740988kB, failcnt "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("193038.106481")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" kmem: usage 3708kB, limit 9007199254740988kB, failcnt "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("193038.106481")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" Memory cgroup stats "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" /docker/0f2b3fcdd2578165ea77266cdc7b1ad43e75877b0ac1889ecda30a78cb78bd53: cache:0KB rss:520580KB rss_huge:450560KB shmem:0KB mapped_file:0KB dirty:0KB writeback:0KB inactive_anon:0KB active_anon:520580KB inactive_file:0KB active_file:0KB unevictable:0KB\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("193038.106494")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" pid "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("   uid  tgid total_vm      rss pgtables_bytes swapents oom_score_adj name\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("193038.106571")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("27281")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("27281")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1153302")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("134371")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1466368")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("             "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("java")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("193038.106574")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" Memory cgroup out of memory: Kill process "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("27281")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" score "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1027")]),s._v(" or sacrifice child\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("193038.148334")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" Killed process "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("27281")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" total-vm:4613208kB, anon-rss:517316kB, file-rss:20168kB, shmem-rss:0kB\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("193039.607503")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" oom_reaper: reaped process "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("27281")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(", now anon-rss:0kB, file-rss:0kB, shmem-rss:0kB\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br")])]),a("p",[s._v("从 dmesg 的输出, 就可以看到很详细的 OOM 记录了. 应该可以看到下面几个关键点.")]),s._v(" "),a("ul",[a("li",[s._v("第一, 被杀死的是一个 java 进程. 从内核调用栈上的 mem_cgroup_out_of_memory 可以看出, 它是因为"),a("strong",[s._v("超过 cgroup 的内存限制")]),s._v(", 而被 OOM 杀死的.")]),s._v(" "),a("li",[s._v("第二, java 进程是在容器内运行的, 而容器内存的使用量和限制都是 512M(524288kB). 目前使用量已经达到了限制, 所以会导致 OOM.")]),s._v(" "),a("li",[s._v("第三, 被杀死的进程, PID 为 27281, 虚拟内存为 4.3G(total-vm:4613208kB), 匿名内存为 505M(anon-rss:517316kB), 页内存为 19M(20168kB). 换句话说, "),a("strong",[s._v("匿名内存是主要的内存占用")]),s._v(". 而且, 匿名内存加上页内存, 总共是 524M, 已经超过了 512M 的限制.")])]),s._v(" "),a("p",[s._v("综合这几点, 可以看出, Tomcat 容器的内存主要用在了匿名内存中, 而匿名内存, 其实就是主动申请分配的堆内存.")]),s._v(" "),a("p",[s._v("不过, 为什么 Tomcat 会申请这么多的堆内存呢? 要知道, Tomcat 是基于 Java 开发的, 所以应该不难想到, 这很可能是 "),a("strong",[s._v("JVM 堆内存配置")]),s._v("的问题. JVM 根据系统的内存总量, 来自动管理堆内存, 不明确配置的话, 堆内存的默认限制是物理内存的四分之一. 不过, 前面已经限制了容器内存为 512 M, java 的堆内存到底是多少呢?")]),s._v(" "),a("p",[s._v("继续在终端中, 执行下面的命令, 重新启动 tomcat 容器, 并调用 java 命令行来查看堆内存大小:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 重新启动容器")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-f")]),s._v(" tomcat\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),s._v(" tomcat "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--cpus")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-m")]),s._v(" 512M "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),s._v(":8080 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-itd")]),s._v(" feisky/tomcat:8\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看堆内存, 注意单位是字节")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" tomcat "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("java")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-XX:+PrintFlagsFinal")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-version")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" HeapSize\n    uintx ErgoHeapSizeLimit                         "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("                                   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("product"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    uintx HeapSizePerGCThread                       "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("87241520")]),s._v("                            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("product"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    uintx InitialHeapSize                          :"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("132120576")]),s._v("                           "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("product"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    uintx LargePageHeapSizeThreshold                "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("134217728")]),s._v("                           "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("product"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    uintx MaxHeapSize                              :"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2092957696")]),s._v("                          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("product"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("可以看到, 初始堆内存的大小(InitialHeapSize)是 126MB, 而最大堆内存则是 1.95GB, 这可比容器限制的 512 MB 大多了.")]),s._v(" "),a("p",[s._v("之所以会这么大, 其实是因为, "),a("strong",[s._v("容器内部看不到 Docker 为它设置的内存限制")]),s._v(". 虽然在启动容器时, 通过 -m 512M 选项, 给容器设置了 512M 的内存限制. 但实际上, 从容器内部看到的限制, 却并不是 512M.")]),s._v(" "),a("p",[s._v("在终端中, 继续执行下面的命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" tomcat "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("free")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-m")]),s._v("\n              total        used        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("free")]),s._v("      shared  buff/cache   available\nMem:           "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7977")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("521")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1941")]),s._v("           "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5514")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7148")]),s._v("\nSwap:             "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("           "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("           "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("果然, "),a("strong",[s._v("容器内部看到的内存, 仍是主机内存")]),s._v(".")]),s._v(" "),a("p",[s._v("知道了问题根源, 解决方法就很简单了, 给 JVM 正确配置内存限制为 512M 就可以了.")]),s._v(" "),a("p",[s._v("比如, 可以执行下面的命令, 通过环境变量 "),a("code",[s._v("JAVA_OPTS='-Xmx512m -Xms512m'")]),s._v("​, 把 JVM 的初始内存和最大内存都设为 512MB:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除问题容器")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-f")]),s._v(" tomcat\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 运行新的容器")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),s._v(" tomcat "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--cpus")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-m")]),s._v(" 512M "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-e")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("JAVA_OPTS")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'-Xmx512m -Xms512m'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),s._v(":8080 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-itd")]),s._v(" feisky/tomcat:8\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("接着再切换到终端二中, 重新在循环中执行 curl 命令, 查看 Tomcat 的响应:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("((")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("))")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" localhost:8080"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\ncurl: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("56")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" Recv failure: Connection reset by peer\ncurl: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("56")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" Recv failure: Connection reset by peer\nHello, wolrd"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n \nHello, wolrd"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n \nHello, wolrd"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v('可以看到, 刚开始时, 显示的还是 "Connection reset by peer" 错误. 稍等一会儿后, 就是连续的 "Hello, wolrd!" 输出了. 这说明 Tomcat 已经正常启动.')]),s._v(" "),a("p",[s._v("这时切换回终端一, 执行 docker logs 命令, 查看 Tomcat 容器的日志:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" logs "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-f")]),s._v(" tomcat\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),s._v("-Feb-2019 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(":52:00.823 INFO "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("localhost-startStop-1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("/usr/local/tomcat/webapps/manager"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),s._v("-Feb-2019 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(":52:01.422 INFO "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("localhost-startStop-1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("/usr/local/tomcat/webapps/manager"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" has finished "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("598")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" ms\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),s._v("-Feb-2019 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(":52:01.920 INFO "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"http-nio-8080"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),s._v("-Feb-2019 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(":52:02.323 INFO "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ajp-nio-8009"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),s._v("-Feb-2019 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(":52:02.523 INFO "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" org.apache.catalina.startup.Catalina.start Server startup "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22798")]),s._v(" ms\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("这次, Tomcat 也正常启动了. 不过, 最后一行的启动时间, 似乎比较刺眼. "),a("strong",[s._v("启动过程, 居然需要 22 秒")]),s._v(", 这也太慢了吧.")]),s._v(" "),a("p",[s._v("由于这个时间是花在容器启动上的, 要排查这个问题, 就要重启容器, 并借助性能分析工具来分析容器进程. 至于工具的选用, 回顾一下前面的案例, 我觉得可以先用 top 看看.")]),s._v(" "),a("p",[s._v("切换到终端二中, 运行 top 命令; 然后再切换到终端一, 执行下面的命令, 重启容器:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除旧容器")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-f")]),s._v(" tomcat\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 运行新容器")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),s._v(" tomcat "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--cpus")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-m")]),s._v(" 512M "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-e")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("JAVA_OPTS")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'-Xmx512m -Xms512m'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),s._v(":8080 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-itd")]),s._v(" feisky/tomcat:8\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("接着, 再切换到终端二, 观察 top 的输出:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v(" - "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(":57:18 up "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" days,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(":50,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" users,  load average: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.02")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("\nTasks: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("131")]),s._v(" total,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" running,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("74")]),s._v(" sleeping,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" stopped,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" zombie\n%Cpu0  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.0")]),s._v(" us,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v(" sy,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" ni, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("96.6")]),s._v(" id,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" wa,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" hi,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" si,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" st\n%Cpu1  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5.7")]),s._v(" us,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v(" sy,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" ni, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("94.0")]),s._v(" id,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" wa,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" hi,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" si,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" st\nKiB Mem "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8169304")]),s._v(" total,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2465984")]),s._v(" free,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("500812")]),s._v(" used,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5202508")]),s._v(" buff/cache\nKiB Swap:        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" total,        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" free,        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" used.  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7353652")]),s._v(" avail Mem\n \n  PID "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("USER")]),s._v("      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("29457")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2791736")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("73704")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("19164")]),s._v(" S  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.9")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":01.61 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("java")]),s._v("                         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("27349")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1121372")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("96760")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("39340")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.2")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(":20.82 dockerd\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("27376")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1031760")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("43768")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21680")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.5")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(":44.47 docker-containe              "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("29430")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7376")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3604")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3128")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.01 docker-containe\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("78132")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9332")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6744")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":16.12 systemd\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("从 top 的输出可以发现,")]),s._v(" "),a("ul",[a("li",[s._v("从系统整体来看, 两个 CPU 的使用率分别是 3% 和 5.7%, 都不算高, 大部分还是空闲的; 可用内存还有 7GB(7353652 avail Mem), 也非常充足.")]),s._v(" "),a("li",[s._v("具体到进程上, java 进程的 CPU 使用率为 10%, 内存使用 0.9%, 其他进程就都很低了.")])]),s._v(" "),a("p",[s._v("这些指标都不算高, 看起来都没啥问题. 不过, 事实究竟如何呢? 还得继续找下去. "),a("strong",[s._v("由于 java 进程的 CPU 使用率最高, 所以要把它当成重点, 继续分析其性能情况")]),s._v(".")]),s._v(" "),a("p",[s._v("说到进程的性能分析工具, 你一定也想起了 pidstat. 接下来就用 pidstat 再来分析一下. 回到终端一中, 执行 pidstat 命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -t 表示显示线程, -p 指定进程号")]),s._v("\n$ pidstat "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-t")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("29457")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(":59:59      "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("UID")]),s._v("      TGID       TID    %usr %system  %guest   %wait    %CPU   CPU  Command\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v(":00:00        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("29457")]),s._v("         -    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("java")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v(":00:00        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("         -     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("29457")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("__java\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v(":00:00        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("         -     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("29458")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("__java\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v(":00:00        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("         -     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("29491")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("__java\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("结果中, 各种 CPU 使用率全是 0, 看起来不对呀. 再想想有没有漏掉什么线索呢? 对了, 这时候容器启动已经结束了, 在没有客户端请求的情况下, Tomcat 本身啥也不用做, CPU 使用率当然是 0.")]),s._v(" "),a("p",[s._v("为了分析启动过程中的问题, 需要再次重启容器. 继续在终端一停止 pidstat 命令; 然后执行下面的命令, 重启容器. 成功重启后, 拿到新的 PID, 再重新运行 pidstat 命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除旧容器")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-f")]),s._v(" tomcat\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 运行新容器")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),s._v(" tomcat "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--cpus")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-m")]),s._v(" 512M "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-e")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("JAVA_OPTS")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'-Xmx512m -Xms512m'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),s._v(":8080 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-itd")]),s._v(" feisky/tomcat:8\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询新容器中进程的 Pid")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("PID")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" inspect tomcat "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-f")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{{.State.Pid}}'")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 执行 pidstat")]),s._v("\n$ pidstat "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-t")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$PID")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(":59:28      "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("UID")]),s._v("      TGID       TID    %usr %system  %guest   %wait    %CPU   CPU  Command\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(":59:29        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("29850")]),s._v("         -   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("java")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(":59:29        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("         -     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("29850")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("__java\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(":59:29        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("         -     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("29897")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("86.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("__java\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(":59:29        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("         -     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("29905")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("97.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("__java\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(":59:29        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("         -     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("29906")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("49.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("__java\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(":59:29        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("         -     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("29908")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("45.00")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("__java\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("p",[s._v("仔细观察这次的输出会发现, 虽然 CPU 使用率(%CPU)很低, 但"),a("strong",[s._v("等待运行的使用率(%wait)却非常高")]),s._v(", 最高甚至已经达到了 97%. 这说明"),a("strong",[s._v("这些线程大部分时间都在等待调度")]),s._v(", 而不是真正的运行. 注: 如果看不到 %wait 指标, 请先升级 sysstat 后再试试.")]),s._v(" "),a("p",[s._v("为什么 CPU 使用率这么低, 线程的大部分时间还要等待 CPU 呢? 由于这个现象因 Docker 而起, 自然的, 应该想到, 这可能是"),a("strong",[s._v("因为 Docker 为容器设置了限制")]),s._v(".")]),s._v(" "),a("p",[s._v("再回顾一下, 案例开始时容器的启动命令. 用 "),a("code",[s._v("--cpus 0.1")]),s._v("​ 为容器设置了 0.1 个 CPU 的限制, 也就是 10% 的 CPU. 这里也就可以解释, 为什么 java 进程只有 10% 的 CPU 使用率, 也会大部分时间都在等待了.")]),s._v(" "),a("p",[s._v("找出原因, 最后的优化也就简单了, 把 CPU 限制增大就可以了. 比如可以执行下面的命令, 将 CPU 限制增大到 1; 然后再重启, 并观察启动日志:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除旧容器")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-f")]),s._v(" tomcat\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 运行新容器")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),s._v(" tomcat "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--cpus")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-m")]),s._v(" 512M "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-e")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("JAVA_OPTS")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'-Xmx512m -Xms512m'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),s._v(":8080 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-itd")]),s._v(" feisky/tomcat:8\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看容器日志")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" logs "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-f")]),s._v(" tomcat\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),s._v("-Feb-2019 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(":54:02.139 INFO "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" org.apache.catalina.startup.Catalina.start Server startup "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2001")]),s._v(" ms\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("现在可以看到, Tomcat 的启动过程, 只需要 2 秒就完成了, 果然比前面的 22 秒快多了.")]),s._v(" "),a("p",[s._v("虽然通过增大 CPU 的限制, 解决了这个问题. 不过再碰到类似问题, 你可能会觉得这种方法太麻烦了. 因为要设置容器的资源限制, 还需要预先评估应用程序的性能. 显然还有更简单的方法, 比如说直接去掉限制, 让容器跑就是了.")]),s._v(" "),a("p",[s._v("不过, 这种简单方法, 却很可能带来更严重的问题. "),a("strong",[s._v("没有资源限制, 就意味着容器可以占用整个系统的资源")]),s._v(". 这样, 一旦任何应用程序发生异常, 都有可能拖垮整台机器.")]),s._v(" "),a("p",[s._v("实际上, 这也是在各大容器平台上最常见的一个问题. "),a("strong",[s._v("一开始图省事不设限, 但当容器数量增长上来的时候, 就会经常出现各种异常问题. 最终查下来, 可能就是因为某个应用资源使用过高, 导致整台机器短期内无法响应. 只有设置了资源限制, 才能确保杜绝类似问题")]),s._v(".")]),s._v(" "),a("h5",{attrs:{id:"_3-小结-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-小结-8"}},[s._v("#")]),s._v(" 3.小结")]),s._v(" "),a("p",[s._v("本节学习了如何分析容器化后应用程序性能下降的问题. 如果在 Docker 容器中运行 Java 应用, 一定要确保, 在设置容器资源限制的同时, 配置好 JVM 的资源选项(比如堆内存等). 当然, 如果可以升级 Java 版本, 那么升级到 Java 10, 就可以自动解决类似问题了.")]),s._v(" "),a("p",[s._v("当碰到容器化的应用程序性能时, 依然可以使用前面讲过的各种方法来分析和定位. 只不过要记得, 容器化后的性能分析, 跟前面内容稍微有些区别, 比如下面这几点.")]),s._v(" "),a("ul",[a("li",[s._v("容器本身通过 cgroups 进行资源隔离, 所以在分析时要考虑 cgroups 对应用程序的影响.")]),s._v(" "),a("li",[s._v("容器的文件系统, 网络协议栈等跟主机隔离. 虽然在容器外面, 也可以分析容器的行为, 不过有时候, 进入容器的命名空间内部, 可能更为方便.")]),s._v(" "),a("li",[s._v("容器的运行可能还会依赖于其他组件, 比如各种网络插件(比如 CNI), 存储插件(比如 CSI), 设备插件(比如 GPU)等, 让容器的性能分析更加复杂. 如果需要分析容器性能, 别忘了考虑它们对性能的影响.")])]),s._v(" "),a("h4",{attrs:{id:"_47-案例篇-服务器总是时不时丢包该怎么办"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_47-案例篇-服务器总是时不时丢包该怎么办"}},[s._v("#")]),s._v(" 47-案例篇:服务器总是时不时丢包该怎么办?")]),s._v(" "),a("p",[s._v("所谓丢包, 是指在网络数据的收发过程中, 由于种种原因, 数据包还没传输到应用程序中, 就被丢弃了. 这些被丢弃包的数量, 除以总的传输包数, 也就是常说的"),a("strong",[s._v("丢包率")]),s._v(". 丢包率是网络性能中最核心的指标之一. "),a("strong",[s._v("丢包通常会带来严重的性能下降, 特别是对 TCP 来说, 丢包通常意味着网络拥塞和重传, 进而还会导致网络延迟增大, 吞吐降低")]),s._v(".")]),s._v(" "),a("p",[s._v("接下来就以最常用的反向代理服务器 Nginx 为例来一起看看, 如何分析网络丢包的问题.")]),s._v(" "),a("h5",{attrs:{id:"_1-案例准备-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-案例准备-8"}},[s._v("#")]),s._v(" 1.案例准备")]),s._v(" "),a("p",[s._v("今天的案例需要用到两台虚拟机, 还是基于 Ubuntu 18.04, 同样适用于其他的 Linux 系统. 我使用的案例环境如下所示:")]),s._v(" "),a("ul",[a("li",[s._v("机器配置: 2 CPU, 8GB 内存.")]),s._v(" "),a("li",[s._v("预先安装 docker, curl, hping3 等工具, 如 apt install docker.io curl hping3.")])]),s._v(" "),a("h5",{attrs:{id:"_2-案例分析-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-案例分析-9"}},[s._v("#")]),s._v(" 2.案例分析")]),s._v(" "),a("p",[s._v("今天要分析的案例是一个 Nginx 应用, 如下图所示, hping3 和 curl 是 Nginx 的客户端.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/eee6c075999a343c251795164687b31b-20230731161933-mtky64j.png",alt:""}})]),s._v(" "),a("p",[s._v("为了方便运行, 我已经把它打包成了一个 Docker 镜像, 并推送到 Docker Hub 中. 可以直接按照下面的步骤来运行它.")]),s._v(" "),a("p",[s._v("在终端一中执行下面的命令, 启动 Nginx 应用, 并在 80 端口监听. 如果一切正常, 应该可以看到如下的输出:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),s._v(" nginx "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--hostname")]),s._v(" nginx "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--privileged")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(":80 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-itd")]),s._v(" feisky/nginx:drop\ndae0202cc27e5082b282a6aeeb1398fcec423c642e63322da2a97b9ebd7538e0\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("然后, 执行 docker ps 命令, 查询容器的状态, 会发现容器已经处于运行状态(Up)了:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v("\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                NAMES\ndae0202cc27e        feisky/nginx:drop   "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/start.sh"')]),s._v("         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" minutes ago       Up "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" minutes        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(".0.0:80-"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v("/tcp   nginx\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("不过, 从 docker ps 的输出, 只能知道容器处于运行状态, 至于 Nginx 是否可以正常处理外部请求, 还需要进一步的确认.")]),s._v(" "),a("p",[s._v("接着切换到终端二中, 执行下面的 hping3 命令, 进一步验证 Nginx 是不是真的可以正常访问了. 注意, 这里没有使用 ping, 是因为 ping 基于 ICMP 协议, 而 Nginx 使用的是 TCP 协议.")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -c 表示发送 10 个请求, -S 表示使用 TCP SYN, -p 指定端口为 80")]),s._v("\n$ hping3 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-S")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30\nHPING "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("eth0 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": S set, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("40")]),s._v(" headers + "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" data bytes\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("len")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("44")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ip")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("63")]),s._v(" DF "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("id")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("sport")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("flags")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("SA "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("win")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5120")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("rtt")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.5")]),s._v(" ms\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("len")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("44")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ip")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("63")]),s._v(" DF "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("id")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("sport")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("flags")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("SA "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("win")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5120")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("rtt")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.4")]),s._v(" ms\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("len")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("44")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ip")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("63")]),s._v(" DF "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("id")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("sport")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("flags")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("SA "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("win")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5120")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("rtt")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.3")]),s._v(" ms\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("len")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("44")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ip")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("63")]),s._v(" DF "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("id")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("sport")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("flags")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("SA "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("win")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5120")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("rtt")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.0")]),s._v(" ms\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("len")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("44")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ip")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("63")]),s._v(" DF "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("id")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("sport")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("flags")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("SA "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("win")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5120")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("rtt")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3027.2")]),s._v(" ms\n \n--- "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30 hping statistic ---\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" packets transmitted, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" packets received, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v("% packet loss\nround-trip min/avg/max "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.0")]),s._v("/609.7/3027.2 ms\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("从 hping3 的输出中可以发现, 发送了 10 个请求包, 却只收到了 5 个回复, 50% 的包都丢了. 再观察每个请求的 RTT 可以发现, RTT 也有非常大的波动变化, 小的时候只有 3ms, 而大的时候则有 3s.")]),s._v(" "),a("p",[s._v("根据这些输出, 基本能判断, 已经发生了"),a("strong",[s._v("丢包现象")]),s._v(". 可以猜测, 3s 的 RTT 很可能是因为丢包后重传导致的. 那到底是哪里发生了丢包呢?")]),s._v(" "),a("p",[s._v("排查之前, 可以回忆一下 Linux 的网络收发流程, 先从理论上分析, 哪里有可能会发生丢包. 为了帮你理解网络丢包的原理, 我画了一张图:")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/7b194e40fb35f34e975ce44a4a210e2e-20230731161933-g4c0jen.png",alt:""}})]),s._v(" "),a("p",[s._v("从图中可以看出, "),a("strong",[s._v("可能发生丢包的位置, 实际上贯穿了整个网络协议栈. 换句话说, 全程都有丢包的可能")]),s._v(". 比如从下往上看:")]),s._v(" "),a("ul",[a("li",[s._v("在两台 VM 连接之间, 可能会发生传输失败的错误, 比如网络拥塞, 线路错误等;")]),s._v(" "),a("li",[s._v("在网卡收包后, 环形缓冲区可能会因为溢出而丢包;")]),s._v(" "),a("li",[s._v("在链路层, 可能会因为网络帧校验失败, QoS 等而丢包;")]),s._v(" "),a("li",[s._v("在 IP 层, 可能会因为路由失败, 组包大小超过 MTU 等而丢包;")]),s._v(" "),a("li",[s._v("在传输层, 可能会因为端口未监听, 资源占用超过内核限制等而丢包;")]),s._v(" "),a("li",[s._v("在套接字层, 可能会因为套接字缓冲区溢出而丢包;")]),s._v(" "),a("li",[s._v("在应用层, 可能会因为应用程序异常而丢包;")]),s._v(" "),a("li",[s._v("此外, 如果配置了 iptables 规则, 这些网络包也可能因为 iptables 过滤规则而丢包.")])]),s._v(" "),a("p",[s._v("当然上面这些问题, 还有可能同时发生在通信的两台机器中. 不过, 由于没对 VM2 做任何修改, 并且 VM2 也只运行了一个最简单的 hping3 命令, 这儿不妨假设它是没有问题的.")]),s._v(" "),a("p",[s._v("为了简化整个排查过程, 还可以进一步假设 VM1 的网络和内核配置也没问题. 这样一来, 有可能发生问题的位置, 就都在"),a("strong",[s._v("容器内部")]),s._v("了.")]),s._v(" "),a("p",[s._v("现在切换回终端一, 执行下面的命令, 进入容器的终端中:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-it")]),s._v(" nginx "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v("\nroot@nginx:/"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("在这里简单说明一下, 接下来的所有分析, 前面带有 "),a("code",[s._v("root@nginx:/#")]),s._v("​ 的操作, 都表示在容器中进行.")]),s._v(" "),a("p",[s._v("实际环境中, 容器内部和外部都有可能发生问题. 不过不要担心, 容器内, 外部的分析步骤和思路都是一样的, 只不过要花更多的时间而已.")]),s._v(" "),a("p",[s._v("那么接下来就可以从协议栈中, "),a("strong",[s._v("逐层排查丢包问题")]),s._v(".")]),s._v(" "),a("h6",{attrs:{id:"_1-链路层"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-链路层"}},[s._v("#")]),s._v(" (1)链路层")]),s._v(" "),a("p",[s._v("首先来看最底下的链路层. 当缓冲区溢出等原因导致网卡丢包时, "),a("strong",[s._v("Linux 会在网卡收发数据的统计信息中, 记录下收发错误的次数")]),s._v(".")]),s._v(" "),a("p",[s._v("可以通过 ethtool 或者 netstat 来查看网卡的丢包记录. 比如可以在容器中执行下面的命令, 查看丢包情况:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("root@nginx:/"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# netstat -i")]),s._v("\nKernel Interface table\nIface      MTU    RX-OK RX-ERR RX-DRP RX-OVR    TX-OK TX-ERR TX-DRP TX-OVR Flg\neth0       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("31")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("             "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" BMRU\nlo       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("65536")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("             "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" LRU\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("输出中的 RX-OK, RX-ERR, RX-DRP, RX-OVR, 分别表示接收时的总包数, 总错误数, 进入 Ring Buffer 后因其他原因(如内存不足)导致的丢包数以及 Ring Buffer 溢出导致的丢包数.")]),s._v(" "),a("p",[s._v("TX-OK, TX-ERR, TX-DRP, TX-OVR 也代表类似的含义, 只不过是指发送时对应的各个指标.")]),s._v(" "),a("p",[s._v("注意, 由于 Docker 容器的虚拟网卡, 实际上是一对 veth pair, 一端接入容器中用作 eth0, 另一端在主机中接入 docker0 网桥中. veth 驱动并没有实现网络统计的功能, 所以使用 ethtool -S 命令, 无法得到网卡收发数据的汇总信息.")]),s._v(" "),a("p",[s._v("从这个输出中, 没有发现任何错误, 说明容器的虚拟网卡没有丢包. 不过要注意, 如果用 tc 等工具配置了 QoS, 那么 tc 规则导致的丢包, 就不会包含在网卡的统计信息中.")]),s._v(" "),a("p",[s._v("所以接下来还要检查一下 eth0 上是否配置了 tc 规则, 并查看有没有丢包. 继续容器终端中, 执行下面的 tc 命令, 不过这次注意添加 -s 选项, 以输出统计信息:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("root@nginx:/"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# tc -s qdisc show dev eth0")]),s._v("\nqdisc netem 800d: root refcnt "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" limit "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" loss "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),s._v("%\n Sent "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("432")]),s._v(" bytes "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(" pkt "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("dropped "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(", overlimits "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" requeues "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n backlog 0b 0p requeues "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("strong",[s._v("从 tc 的输出中可以看到, eth0 上面配置了一个网络模拟排队规则(qdisc netem), 并且配置了丢包率为 30%(loss 30%). 再看后面的统计信息, 发送了 8 个包, 但是丢了 4 个")]),s._v(".")]),s._v(" "),a("p",[s._v("看来应该就是这里, 导致 Nginx 回复的响应包被 netem 模块给丢了.")]),s._v(" "),a("p",[s._v("既然发现了问题, 解决方法也就很简单了, 直接删掉 netem 模块就可以了. 可以继续在容器终端中, 执行下面的命令, 删除 tc 中的 netem 模块:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("root@nginx:/"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# tc qdisc del dev eth0 root netem loss 30%")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("删除后, 问题到底解决了没? 切换到终端二中, 重新执行刚才的 hping3 命令, 看看现在还有没有问题:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ hping3 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-S")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30\nHPING "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("eth0 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": S set, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("40")]),s._v(" headers + "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" data bytes\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("len")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("44")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ip")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("63")]),s._v(" DF "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("id")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("sport")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("flags")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("SA "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("win")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5120")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("rtt")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.9")]),s._v(" ms\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("len")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("44")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ip")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("63")]),s._v(" DF "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("id")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("sport")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("flags")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("SA "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("win")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5120")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("rtt")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1003.8")]),s._v(" ms\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("len")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("44")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ip")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("63")]),s._v(" DF "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("id")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("sport")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("flags")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("SA "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("win")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5120")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("rtt")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.6")]),s._v(" ms\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("len")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("44")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ip")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("63")]),s._v(" DF "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("id")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("sport")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("flags")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("SA "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("win")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5120")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("rtt")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.4")]),s._v(" ms\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("len")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("44")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ip")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("63")]),s._v(" DF "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("id")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("sport")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("flags")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("SA "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("win")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5120")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("rtt")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.0")]),s._v(" ms\n \n--- "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30 hping statistic ---\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" packets transmitted, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" packets received, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v("% packet loss\nround-trip min/avg/max "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.0")]),s._v("/205.9/1003.8 ms\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("不幸的是, 从 hping3 的输出中可以看到, 跟前面现象一样, 还是 50% 的丢包; RTT 的波动也仍旧很大, 从 3ms 到 1s.")]),s._v(" "),a("p",[s._v("显然, 问题还是没解决, 丢包还在继续发生. 不过, 既然链路层已经排查完了, 就继续向上层分析, 看看网络层和传输层有没有问题.")]),s._v(" "),a("h6",{attrs:{id:"_2-网络层和传输层"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-网络层和传输层"}},[s._v("#")]),s._v(" (2)网络层和传输层")]),s._v(" "),a("p",[s._v("在网络层和传输层中, 引发丢包的因素非常多. 不过其实想确认是否丢包, 是非常简单的事, 因为 Linux 已经提供了各个协议的收发汇总情况.")]),s._v(" "),a("p",[s._v("继续在容器终端中, 执行下面的 netstat -s 命令, 就可以看到协议的收发汇总, 以及错误信息了:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("root@nginx:/"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# netstat -s")]),s._v("\nIp:\n    Forwarding: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\t\t\t\t\t// 开启转发\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("31")]),s._v(" total packets received\t\t// 总收包数\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" forwarded\t\t\t\t\t\t// 转发包数\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" incoming packets discarded\t// 接收丢包数\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("25")]),s._v(" incoming packets delivered\t// 接收的数据包数\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),s._v(" requests sent out\t\t\t// 发出的数据包数\nIcmp:\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" ICMP messages received\t\t// 收到的 ICMP 包数\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" input ICMP message failed\t\t// 收到 ICMP 失败数\n    ICMP input histogram:\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" ICMP messages sent\t\t\t//ICMP 发送数\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" ICMP messages failed\t\t\t//ICMP 失败数\n    ICMP output histogram:\nTcp:\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" active connection openings\t// 主动连接数\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" passive connection openings\t// 被动连接数\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),s._v(" failed connection attempts\t// 失败连接尝试数\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" connection resets received\t// 接收的连接重置数\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" connections established\t\t// 建立连接数\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("25")]),s._v(" segments received\t\t\t// 已接收报文数\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21")]),s._v(" segments sent out\t\t\t// 已发送报文数\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" segments retransmitted\t\t// 重传报文数\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" bad segments received\t\t\t// 错误报文数\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" resets sent\t\t\t\t\t// 发出的连接重置数\nUdp:\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" packets received\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\nTcpExt:\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),s._v(" resets received "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" embryonic SYN_RECV sockets\t// 半连接重置数\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" packet headers predicted\n    TCPTimeouts: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v("\t\t// 超时数\n    TCPSynRetrans: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("\t//SYN 重传数\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br")])]),a("p",[a("strong",[s._v("netstat 汇总了 IP, ICMP, TCP, UDP 等各种协议的收发统计信息")]),s._v(". 不过, 我们的目的是排查丢包问题, 所以这里主要观察的是"),a("strong",[s._v("错误数, 丢包数以及重传数")]),s._v(".")]),s._v(" "),a("p",[s._v("根据上面的输出可以看到, "),a("strong",[s._v("只有 TCP 协议发生了丢包和重传")]),s._v(", 分别是:")]),s._v(" "),a("ul",[a("li",[s._v("11 次连接失败重试(11 failed connection attempts)")]),s._v(" "),a("li",[s._v("4 次重传(4 segments retransmitted)")]),s._v(" "),a("li",[s._v("11 次半连接重置(11 resets received for embryonic SYN_RECV sockets)")]),s._v(" "),a("li",[s._v("4 次 SYN 重传(TCPSynRetrans)")]),s._v(" "),a("li",[s._v("7 次超时(TCPTimeouts)")])]),s._v(" "),a("p",[s._v("这个结果告诉我们, TCP 协议有多次超时和失败重试, 并且"),a("strong",[s._v("主要错误是半连接重置")]),s._v(". 换句话说, "),a("strong",[s._v("主要的失败, 都是三次握手失败")]),s._v(".")]),s._v(" "),a("p",[s._v("不过, 虽然在这儿看到了这么多失败, 但具体失败的根源还是无法确定. 所以还需要继续顺着协议栈来分析. 接下来的几层又该如何分析呢?")]),s._v(" "),a("h5",{attrs:{id:"_3-iptables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-iptables"}},[s._v("#")]),s._v(" 3.iptables")]),s._v(" "),a("p",[s._v("首先要知道, 除了网络层和传输层的各种协议, iptables 和内核的连接跟踪机制也可能会导致丢包. 所以这也是发生丢包问题时, 必须要排查的一个因素.")]),s._v(" "),a("p",[s._v("先来看看连接跟踪, 前面已经讲过连接跟踪的优化思路. "),a("strong",[s._v("要确认是不是连接跟踪导致的问题, 其实只需要对比当前的连接跟踪数和最大连接跟踪数即可")]),s._v(".")]),s._v(" "),a("p",[s._v("不过, 由于连接跟踪在 Linux 内核中是全局的(不属于网络命名空间), 需要退出容器终端, 回到主机中来查看.")]),s._v(" "),a("p",[s._v("可以在容器终端中, 执行 "),a("code",[s._v("exit;")]),s._v("​ 然后执行下面的命令, 查看连接跟踪数:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 容器终端中执行 exit")]),s._v("\nroot@nginx:/"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# exit")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v("\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 主机终端中查询内核配置")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sysctl")]),s._v(" net.netfilter.nf_conntrack_max\nnet.netfilter.nf_conntrack_max "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("262144")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sysctl")]),s._v(" net.netfilter.nf_conntrack_count\nnet.netfilter.nf_conntrack_count "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("182")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("从这儿可以看到, 连接跟踪数只有 182, 而最大连接跟踪数则是 262144. 显然这里的丢包, 不可能是连接跟踪导致的.")]),s._v(" "),a("p",[s._v("接着再来看 iptables. 回顾一下 iptables 的原理, 它基于 Netfilter 框架, 通过一系列的规则, 对网络数据包进行过滤(如防火墙)和修改(如 NAT). 这些 iptables 规则, 统一管理在一系列的表中, 包括 filter(用于过滤), nat(用于 NAT), mangle(用于修改分组数据) 和 raw(用于原始数据包)等. 而每张表又可以包括一系列的链, 用于对 iptables 规则进行分组管理.")]),s._v(" "),a("p",[a("strong",[s._v("对于丢包问题来说, 最大的可能就是被 filter 表中的规则给丢弃了")]),s._v(". 要弄清楚这一点, 就需要确认, 那些目标为 DROP 和 REJECT 等会弃包的规则, 有没有被执行到.")]),s._v(" "),a("p",[s._v("可以把所有的 iptables 规则列出来, 根据收发包的特点, 跟 iptables 规则进行匹配. 不过显然, 如果 iptables 规则比较多, 这样做的效率就会很低. 当然, 更简单的方法, 就是直接查询 DROP 和 REJECT 等规则的统计信息, 看看是否为 0. 如果统计值不是 0 , 再把相关的规则拎出来进行分析.")]),s._v(" "),a("p",[s._v("可以通过 iptables -nvL 命令, 查看各条规则的统计信息. 比如可以执行下面的 docker exec 命令, 进入容器终端; 然后再执行下面的 iptables 命令, 就可以看到 filter 表的统计数据了:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在主机中执行")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-it")]),s._v(" nginx "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v("\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在容器中执行")]),s._v("\nroot@nginx:/"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# iptables -t filter -nvL")]),s._v("\nChain INPUT "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("policy ACCEPT "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("25")]),s._v(" packets, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" bytes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n pkts bytes target     prot opt "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v("     out     "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("source")]),s._v("               destination\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("240")]),s._v(" DROP       all  --  *      *       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(".0.0/0            "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(".0.0/0            statistic mode random probability "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.29999999981")]),s._v("\n \nChain FORWARD "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("policy ACCEPT "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" packets, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" bytes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n pkts bytes target     prot opt "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v("     out     "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("source")]),s._v("               destination\n \nChain OUTPUT "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("policy ACCEPT "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),s._v(" packets, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("660")]),s._v(" bytes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n pkts bytes target     prot opt "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v("     out     "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("source")]),s._v("               destination\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("264")]),s._v(" DROP       all  --  *      *       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(".0.0/0            "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(".0.0/0            statistic mode random probability "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.29999999981")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("从 iptables 的输出中可以看到, 两条 DROP 规则的统计数值不是 0, 它们分别在 INPUT 和 OUTPUT 链中. 这两条规则实际上是一样的, 指的是使用 statistic 模块, 进行随机 30% 的丢包.")]),s._v(" "),a("p",[s._v("再观察一下它们的匹配规则. "),a("code",[s._v("0.0.0.0/0")]),s._v('​ 表示匹配所有的源 IP 和目的 IP, 也就是会对所有包都进行随机 30% 的丢包. 看起来这应该就是导致部分丢包的"罪魁祸首"了.')]),s._v(" "),a("p",[s._v("既然找出了原因, 接下来的优化就比较简单了. 比如把这两条规则直接删除就可以了. 可以在容器终端中, 执行下面的两条 iptables 命令, 删除这两条 DROP 规则:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("root@nginx:/"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# iptables -t filter -D INPUT -m statistic --mode random --probability 0.30 -j DROP")]),s._v("\nroot@nginx:/"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# iptables -t filter -D OUTPUT -m statistic --mode random --probability 0.30 -j DROP")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("删除后, 问题是否就被解决了呢? 可以切换到终端二中, 重新执行刚才的 hping3 命令, 看看现在是否正常:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ hping3 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-S")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30\nHPING "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("eth0 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": S set, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("40")]),s._v(" headers + "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" data bytes\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("len")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("44")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ip")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("63")]),s._v(" DF "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("id")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("sport")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("flags")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("SA "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("win")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5120")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("rtt")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11.9")]),s._v(" ms\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("len")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("44")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ip")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("63")]),s._v(" DF "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("id")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("sport")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("flags")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("SA "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("win")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5120")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("rtt")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.8")]),s._v(" ms\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("len")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("44")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ip")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("63")]),s._v(" DF "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("id")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("sport")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("flags")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("SA "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("win")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5120")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("rtt")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15.0")]),s._v(" ms\n \n--- "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30 hping statistic ---\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" packets transmitted, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" packets received, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("% packet loss\nround-trip min/avg/max "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.3")]),s._v("/7.9/15.0 ms\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("这次输出可以看到, 现在已经没有丢包了, 并且延迟的波动变化也很小. 看来丢包问题应该已经解决了.")]),s._v(" "),a("p",[s._v("不过, 到目前为止, 一直使用的 hping3 工具, 只能验证案例 Nginx 的 80 端口处于正常监听状态, 却还没有访问 Nginx 的 HTTP 服务. 所以不要匆忙下结论结束这次优化, 还需要进一步确认, Nginx 能不能正常响应 HTTP 请求.")]),s._v(" "),a("p",[s._v("继续在终端二中, 执行如下的 curl 命令, 检查 Nginx 对 HTTP 请求的响应:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" --max-time "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" http://192.168.0.30\ncurl: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("28")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" Operation timed out after "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3000")]),s._v(" milliseconds with "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" bytes received\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("从 curl 的输出中可以发现, 这次连接超时了. 可是, 刚才明明用 hping3 验证了端口正常, 现在却发现 HTTP 连接超时, 是不是因为 Nginx 突然异常退出了呢?")]),s._v(" "),a("p",[s._v("不妨再次运行 hping3 来确认一下:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ hping3 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-S")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30\nHPING "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("eth0 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": S set, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("40")]),s._v(" headers + "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" data bytes\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("len")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("44")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ip")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("63")]),s._v(" DF "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("id")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("sport")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("flags")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("SA "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("win")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5120")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("rtt")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.8")]),s._v(" ms\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("len")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("44")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ip")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("63")]),s._v(" DF "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("id")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("sport")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("flags")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("SA "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("win")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5120")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("rtt")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.7")]),s._v(" ms\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("len")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("44")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ip")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("63")]),s._v(" DF "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("id")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("sport")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("flags")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("SA "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("win")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5120")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("rtt")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.6")]),s._v(" ms\n \n--- "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30 hping statistic ---\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" packets transmitted, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" packets received, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("% packet loss\nround-trip min/avg/max "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.6")]),s._v("/6.4/7.8 ms\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("奇怪, hping3 的结果显示, Nginx 的 80 端口确确实实还是正常状态. 这该如何是好呢? 别忘了还有个大杀器--抓包操作. 看来有必要抓包看看了.")]),s._v(" "),a("h5",{attrs:{id:"_4-tcpdump"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-tcpdump"}},[s._v("#")]),s._v(" 4.tcpdump")]),s._v(" "),a("p",[s._v("接下来切换回终端一, 在容器终端中, 执行下面的 tcpdump 命令, 抓取 80 端口的包:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("root@nginx:/"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# tcpdump -i eth0 -nn port 80")]),s._v("\ntcpdump: verbose output suppressed, use "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-v")]),s._v(" or "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-vv")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" full protocol decode\nlistening on eth0, link-type EN10MB "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Ethernet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(", capture size "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("262144")]),s._v(" bytes\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("然后切换到终端二中, 再次执行前面的 curl 命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" --max-time "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" http://192.168.0.30/\ncurl: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("28")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" Operation timed out after "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3000")]),s._v(" milliseconds with "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" bytes received\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("等到 curl 命令结束后, 再次切换回终端一, 查看 tcpdump 的输出:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":40:00.589235 IP "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10.255")]),s._v(".255.5.39058 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.17")]),s._v(".0.2.80: Flags "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("S"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("seq")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("332257715")]),s._v(", win "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("29200")]),s._v(", options "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("mss "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1418")]),s._v(",sackOK,TS val "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("486800541")]),s._v(" ecr "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(",nop,wscale "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(", length "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":40:00.589277 IP "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.17")]),s._v(".0.2.80 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10.255")]),s._v(".255.5.39058: Flags "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("S."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("seq")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1630206251")]),s._v(", ack "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("332257716")]),s._v(", win "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4880")]),s._v(", options "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("mss "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("256")]),s._v(",sackOK,TS val "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2509376001")]),s._v(" ecr "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("486800541")]),s._v(",nop,wscale "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(", length "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":40:00.589894 IP "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10.255")]),s._v(".255.5.39058 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.17")]),s._v(".0.2.80: Flags "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(", ack "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(", win "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("229")]),s._v(", options "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("nop,nop,TS val "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("486800541")]),s._v(" ecr "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2509376001")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(", length "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":40:03.589352 IP "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10.255")]),s._v(".255.5.39058 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.17")]),s._v(".0.2.80: Flags "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("F."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("seq")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("76")]),s._v(", ack "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(", win "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("229")]),s._v(", options "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("nop,nop,TS val "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("486803541")]),s._v(" ecr "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2509376001")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(", length "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":40:03.589417 IP "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.17")]),s._v(".0.2.80 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10.255")]),s._v(".255.5.39058: Flags "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(", ack "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(", win "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("40")]),s._v(", options "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("nop,nop,TS val "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2509379001")]),s._v(" ecr "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("486800541")]),s._v(",nop,nop,sack "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("76")]),s._v(":77"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(", length "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("经过这么一系列的操作, 从 tcpdump 的输出中就可以看到:")]),s._v(" "),a("ul",[a("li",[s._v("前三个包是正常的 TCP 三次握手, 这没问题;")]),s._v(" "),a("li",[s._v("但第四个包却是在 3 秒以后了, 并且还是客户端(VM2)发送过来的 FIN 包, 也就说明, 客户端的连接关闭了.")])]),s._v(" "),a("p",[s._v("根据 curl 设置的 3 秒超时选项应该能猜到, 这是因为 curl 命令超时后退出了.")]),s._v(" "),a("p",[s._v("把这一过程, 用 TCP 交互的流程图(实际上来自 Wireshark 的 Flow Graph)来表示, 可以更清楚地看到上面这个问题:")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/04312399f881d2caa43cf5e19e884e6b-20230731161933-pv86bao.png",alt:""}})]),s._v(" "),a("p",[s._v("这里比较奇怪的是, 并没有抓取到 curl 发来的 HTTP GET 请求. 那究竟是网卡丢包了, 还是客户端压根儿就没发过来呢?")]),s._v(" "),a("p",[s._v("可以重新执行 netstat -i 命令, 确认一下网卡有没有丢包问题:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("root@nginx:/"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# netstat -i")]),s._v("\nKernel Interface table\nIface      MTU    RX-OK RX-ERR RX-DRP RX-OVR    TX-OK TX-ERR TX-DRP TX-OVR Flg\neth0       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("157")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("344")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("            "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("94")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" BMRU\nlo       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("65536")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("             "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" LRU\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("从 netstat 的输出中可以看到, 接收丢包数(RX-DRP)是 344, 果然是在网卡接收时丢包了. 不过问题也来了, 为什么刚才用 hping3 时不丢包, 现在换成 GET 就收不到了呢?")]),s._v(" "),a("p",[s._v("还是那句话, 遇到搞不懂的现象, 不妨先去查查工具和方法的原理. 可以对比一下这两个工具:")]),s._v(" "),a("ul",[a("li",[s._v("hping3 实际上只发送了 SYN 包;")]),s._v(" "),a("li",[s._v("而 curl 在发送 SYN 包后, 还会发送 HTTP GET 请求.")])]),s._v(" "),a("p",[s._v("HTTP GET 本质上也是一个 TCP 包, 但跟 SYN 包相比, 它还携带了 HTTP GET 的数据. 那么通过这个对比应该想到了, 这"),a("strong",[s._v("可能是 MTU 配置错误导致")]),s._v("的. 为什么呢?")]),s._v(" "),a("p",[s._v("其实, 仔细观察上面 netstat 的输出界面, 第二列正是每个网卡的 MTU 值. eth0 的 MTU 只有 100, 而以太网的 MTU 默认值是 1500, 这个 100 就显得太小了.")]),s._v(" "),a("p",[s._v("当然, MTU 问题是很好解决的, 把它改成 1500 就可以了. 继续在容器终端中, 执行下面的命令, 把容器 eth0 的 MTU 改成 1500:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("root@nginx:/"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ifconfig eth0 mtu 1500")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("修改完成后, 再切换到终端二中, 再次执行 curl 命令, 确认问题是否真的解决了:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" --max-time "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" http://192.168.0.30/\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("DOCTYPE html"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("html"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("em"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("Thank you "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" using nginx."),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("/em"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("/p"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("/body"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("/html"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("非常不容易呀, 这次终于看到了熟悉的 Nginx 响应, 说明丢包的问题终于彻底解决了.")]),s._v(" "),a("h4",{attrs:{id:"_49-案例篇-内核线程cpu利用率太高该怎么办"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_49-案例篇-内核线程cpu利用率太高该怎么办"}},[s._v("#")]),s._v(" 49-案例篇:内核线程CPU利用率太高该怎么办?")]),s._v(" "),a("p",[s._v("其实, 在排查网络问题时, 我们还经常碰到的一个问题, 就是"),a("strong",[s._v("内核线程的 CPU 使用率很高")]),s._v(". 比如, 在高并发的场景中, 内核线程 ksoftirqd 的 CPU 使用率通常就会比较高. 回顾一下前面学过的 CPU 和网络模块, 你应该知道, 这是"),a("strong",[s._v("网络收发的软中断导致")]),s._v("的. 而要分析 ksoftirqd 这类 CPU 使用率比较高的内核线程, 如果用前面介绍过的那些分析方法, 一般需要借助于其他性能工具, 进行辅助分析. 比如, 还是以 ksoftirqd 为例, 如果怀疑是网络问题, 就可以用 sar, tcpdump 等分析网络流量, 进一步确认网络问题的根源.")]),s._v(" "),a("p",[s._v("不过, 显然这种方法在实际操作中需要步骤比较多, 可能并不算快捷. 你肯定也很想知道, 有没有其他更简单的方法, 可以"),a("strong",[s._v("直接观察内核线程的行为, 更快定位瓶颈")]),s._v("呢?")]),s._v(" "),a("p",[s._v("今天就继续以 ksoftirqd 为例来看看, 如何分析内核线程的性能问题.")]),s._v(" "),a("h5",{attrs:{id:"_1-内核线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-内核线程"}},[s._v("#")]),s._v(" 1.内核线程")]),s._v(" "),a("p",[s._v("既然要讲内核线程的性能问题, 在案例开始之前就先来看看, 有"),a("strong",[s._v("哪些常见的内核线程")]),s._v(".")]),s._v(" "),a("p",[s._v('在 Linux 中, 用户态进程的 "祖先", 都是 PID 号为 1 的 '),a("strong",[s._v("init 进程")]),s._v(". 比如现在主流的 Linux 发行版中, "),a("strong",[s._v("init 都是 systemd 进程; 而其他的用户态进程, 会通过 systemd 来进行管理")]),s._v(".")]),s._v(" "),a("p",[s._v("稍微想一下 Linux 中的各种进程, 除了用户态进程外, 还有大量的"),a("strong",[s._v("内核态线程")]),s._v(". 按说内核态的线程, 应该先于用户态进程启动, 可是 systemd 只管理用户态进程. 那么内核态线程又是谁来管理的呢?")]),s._v(" "),a("p",[s._v("实际上, Linux 在启动过程中, 有三个特殊的进程, 也就是 PID 号最小的三个进程.")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("0 号进程为 idle 进程, 这也是系统创建的第一个进程, 它在初始化 1 号和 2 号进程后, 演变为空闲任务. 当 CPU 上没有其他任务执行时, 就会运行它")]),s._v(".")]),s._v(" "),a("li",[a("strong",[s._v("1 号进程为 init 进程, 通常是 systemd 进程, 在用户态运行, 用来管理其他用户态进程")]),s._v(".")]),s._v(" "),a("li",[a("strong",[s._v("2 号进程为 kthreadd 进程, 在内核态运行, 用来管理内核线程")]),s._v(".")])]),s._v(" "),a("p",[s._v("所以要查找内核线程, 只需要从 2 号进程开始, 查找它的子孙进程即可. 比如可以使用 ps 命令, 来查找 kthreadd 的子进程:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-f")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--ppid")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("UID")]),s._v("         PID   "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("PPID")]),s._v("  C STIME TTY          TIME CMD\nroot          "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(":02 ?        00:00:01 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("kthreadd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nroot          "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(":02 ?        00:00:21 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("ksoftirqd/0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nroot         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(":02 ?        00:11:47 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("rcu_sched"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nroot         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(":02 ?        00:00:18 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("migration/0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\nroot      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11094")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":20 ?        00:00:00 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("kworker/1:0-eve"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nroot      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11647")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":27 ?        00:00:00 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("kworker/0:2-cgr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("从上面的输出能够看到, 内核线程的名称(CMD)都在中括号里(这一点前面内容也有提到过). 所以, 更简单的方法, 就是直接查找名称包含中括号的进程. 比如:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-ef")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"\\[.*\\]"')]),s._v("\nroot         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" 08:14 ?        00:00:00 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("kthreadd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nroot         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" 08:14 ?        00:00:00 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("rcu_gp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nroot         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" 08:14 ?        00:00:00 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("rcu_par_gp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("了解内核线程的基本功能, 对排查问题有非常大的帮助. "),a("strong",[s._v("比如 ksoftirqd 是一个用来处理软中断的内核线程, 并且每个 CPU 上都有一个")]),s._v(". 如果知道了这一点, 那么以后遇到 ksoftirqd 的 CPU 使用高的情况, 就会首先"),a("strong",[s._v("怀疑是软中断的问题")]),s._v(", 然后从软中断的角度来进一步分析.")]),s._v(" "),a("p",[s._v("其实, 除了刚才看到的 kthreadd 和 ksoftirqd 外, 还有很多常见的内核线程, 在性能分析中都经常会碰到, 比如下面这几个内核线程.")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("kswapd0")]),s._v(": 用于内存回收.")]),s._v(" "),a("li",[a("strong",[s._v("kworker")]),s._v(": 用于执行内核工作队列, 分为绑定 CPU (名称格式为 kworker/CPU86330)和未绑定 CPU(名称格式为 kworker/uPOOL86330)两类.")]),s._v(" "),a("li",[a("strong",[s._v("migration")]),s._v(": 在负载均衡过程中, 把进程迁移到 CPU 上. 每个 CPU 都有一个 migration 内核线程.")]),s._v(" "),a("li",[a("strong",[s._v("jbd2")]),s._v("/sda1-8: jbd 是 Journaling Block Device 的缩写, 用来为文件系统提供日志功能, 以保证数据的完整性; 名称中的 sda1-8, 表示磁盘分区名称和设备号. 每个使用了 ext4 文件系统的磁盘分区, 都会有一个 jbd2 内核线程.")]),s._v(" "),a("li",[a("strong",[s._v("pdflush")]),s._v(": 用于将内存中的脏页(被修改过, 但还未写入磁盘的文件页)写入磁盘(已经在 3.10 中合并入了 kworker 中).")])]),s._v(" "),a("p",[s._v("了解这几个容易发生性能问题的内核线程, 有助于更快地定位性能瓶颈.")]),s._v(" "),a("h5",{attrs:{id:"_2-案例准备-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-案例准备-4"}},[s._v("#")]),s._v(" 2.案例准备")]),s._v(" "),a("p",[s._v("今天的案例还是基于 Ubuntu 18.04. 案例环境如下所示:")]),s._v(" "),a("ul",[a("li",[s._v("机器配置: 2 CPU, 8GB 内存.")]),s._v(" "),a("li",[s._v("预先安装 docker, perf, hping3, curl 等工具, 如 apt install docker.io linux-tools-common hping3.")])]),s._v(" "),a("p",[s._v("本次案例用到两台虚拟机, 我画了一张图来表示它们的关系.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/137cb3c594041b43f83436a853906d81-20230731161933-aifrppm.png",alt:""}})]),s._v(" "),a("h5",{attrs:{id:"_3-案例分析-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-案例分析-4"}},[s._v("#")]),s._v(" 3.案例分析")]),s._v(" "),a("p",[s._v("安装完成后, 先在第一个终端, 执行下面的命令运行案例, 也就是一个最基本的 Nginx 应用:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 运行 Nginx 服务并对外开放 80 端口")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-itd")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("nginx "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(":80 nginx\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("然后在第二个终端, 使用 curl 访问 Nginx 监听的端口, 确认 Nginx 正常启动. 假设 192.168.0.30 是 Nginx 所在虚拟机的 IP 地址, 运行 curl 命令后, 应该会看到下面这个输出界面:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" http://192.168.0.30/\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("DOCTYPE html"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("html"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("head"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("title"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("Welcome to nginx"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("/title"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("接着还是在第二个终端中, 运行 hping3 命令, 模拟 Nginx 的客户端请求:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -S 参数表示设置 TCP 协议的 SYN(同步序列号), -p 表示目的端口为 80")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -i u10 表示每隔 10 微秒发送一个网络帧")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 注: 如果你在实践过程中现象不明显, 可以尝试把 10 调小, 比如调成 5 甚至 1")]),s._v("\n$ hping3 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-S")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-i")]),s._v(" u10 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.30\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("现在再回到第一个终端, 应该就会发现异常--系统的响应明显变慢了. 不妨执行 top, 观察一下系统和进程的 CPU 使用情况:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v(" - 08:31:43 up "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("17")]),s._v(" min,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" user,  load average: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.02")]),s._v("\nTasks: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("128")]),s._v(" total,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" running,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("69")]),s._v(" sleeping,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" stopped,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" zombie\n%Cpu0  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v(" us,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v(" sy,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" ni, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("66.8")]),s._v(" id,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v(" wa,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" hi, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("32.4")]),s._v(" si,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" st\n%Cpu1  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" us,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v(" sy,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" ni, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("65.2")]),s._v(" id,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" wa,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" hi, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("34.5")]),s._v(" si,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" st\nKiB Mem "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8167040")]),s._v(" total,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7234236")]),s._v(" free,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("358976")]),s._v(" used,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("573828")]),s._v(" buff/cache\nKiB Swap:        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" total,        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" free,        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" used.  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7560460")]),s._v(" avail Mem\n \n  PID "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("USER")]),s._v("      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.48 ksoftirqd/0\n   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6.9")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.56 ksoftirqd/1\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2489")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("876896")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("38408")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21520")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.5")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":01.50 docker-containe\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3008")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("44536")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3936")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3304")]),s._v(" R   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.09 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("78116")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9000")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6432")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":11.77 systemd\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("从 top 的输出中可以看到, 两个 CPU 的"),a("strong",[s._v("软中断使用率都超过了 30%")]),s._v(" ; 而 CPU 使用率最高的进程, 正好是软中断内核线程 ksoftirqd/0 和 ksoftirqd/1.")]),s._v(" "),a("p",[s._v("虽然已经知道了 ksoftirqd 的基本功能, 可以猜测是因为大量网络收发, 引起了 CPU 使用率升高; 但它到底在执行什么逻辑, 我们却并不知道.")]),s._v(" "),a("p",[s._v("对于普通进程, 要观察其行为有很多方法, 比如 strace, pstack, lsof 等等. 但这些工具"),a("strong",[s._v("并不适合内核线程")]),s._v(", 比如, 如果用 pstack, 或者通过 "),a("code",[s._v("/proc/pid/stack")]),s._v("​ 查看 ksoftirqd/0(进程号为 9)的调用栈时, 分别可以得到以下输出:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ pstack "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v("\nCould not attach to target "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v(": Operation not permitted.\ndetach: No such process\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" /proc/9/stack\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("0")]),s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" smpboot_thread_fn+0x166/0x170\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("0")]),s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" kthread+0x121/0x140\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("0")]),s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" ret_from_fork+0x35/0x40\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("0")]),s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" 0xffffffffffffffff\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("显然, pstack 报出的是不允许挂载进程的错误; 而 "),a("code",[s._v("/proc/9/stack")]),s._v("​ 方式虽然有输出, 但输出中并没有详细的调用栈情况.")]),s._v(" "),a("p",[s._v("那"),a("strong",[s._v("还有没有其他方法, 来观察内核线程 ksoftirqd 的行为")]),s._v("呢?")]),s._v(" "),a("p",[s._v("既然是内核线程, 自然应该用到内核中提供的机制. "),a("strong",[s._v("perf 可以对指定的进程或者事件进行采样, 并且还可以用调用栈的形式, 输出整个调用链上的汇总信息")]),s._v(". 不妨就用 perf, 来试着分析一下进程号为 9 的 ksoftirqd.")]),s._v(" "),a("p",[s._v("继续在终端一中, 执行下面的 perf record 命令; 并指定进程号 9 , 以便记录 ksoftirqd 的行为:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 采样 30s 后退出")]),s._v("\n$ perf record "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-a")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-g")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v(" -- "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("稍等一会儿, 在上述命令结束后, 继续执行 "),a("code",[s._v("perf report")]),s._v("​ 命令, 就可以得到 perf 的汇总报告. 按上下方向键以及回车键, 展开比例最高的 ksoftirqd 后, 就可以得到下面这个调用关系链图:")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/b0901d6304cc0709f9e2093755b7c95d-20230731161933-24gn6vb.png",alt:""}})]),s._v(" "),a("p",[s._v("从这个图中可以清楚看到 ksoftirqd 执行最多的调用过程. 虽然你可能不太熟悉内核源码, 但通过这些函数, 可以大致看出它的调用栈过程.")]),s._v(" "),a("ul",[a("li",[s._v("net_rx_action 和 netif_receive_skb, 表明这是接收网络包(rx 表示 receive).")]),s._v(" "),a("li",[s._v("br_handle_frame , 表明网络包经过了网桥(br 表示 bridge).")]),s._v(" "),a("li",[s._v("br_nf_pre_routing , 表明在网桥上执行了 netfilter 的 PREROUTING(nf 表示 netfilter). PREROUTING 主要用来执行 DNAT, 所以可以猜测这里有 DNAT 发生.")]),s._v(" "),a("li",[s._v("br_pass_frame_up, 表明网桥处理后, 再交给桥接的其他桥接网卡进一步处理. 比如, 在新的网卡上接收网络包, 执行 netfilter 过滤规则等等.")])]),s._v(" "),a("p",[s._v("猜测对不对呢? 实际上, 案例最开始"),a("strong",[s._v("用 Docker 启动了容器, 而 Docker 会自动为容器创建虚拟网卡, 桥接到 docker0 网桥并配置 NAT 规则")]),s._v(". 这一过程, 如下图所示:")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/e18dc46a8269848228bb49e2b1173561-20230731161933-0o1pta4.png",alt:""}})]),s._v(" "),a("p",[s._v("当然了, 前面 perf report 界面的调用链还可以继续展开. 但很不幸, 我的屏幕不够大, 如果展开更多的层级, 最后几个层级会超出屏幕范围. 这样, 即使能看到大部分的调用过程, 却也不能说明后面层级就没问题.")]),s._v(" "),a("p",[s._v("那有没有更好的方法, 来"),a("strong",[s._v("查看整个调用栈的信息")]),s._v("呢?")]),s._v(" "),a("h5",{attrs:{id:"_4-火焰图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-火焰图"}},[s._v("#")]),s._v(" 4.火焰图")]),s._v(" "),a("p",[a("strong",[s._v("针对 perf 汇总数据的展示问题")]),s._v(", Brendan Gragg 发明了"),a("a",{attrs:{href:"http://www.brendangregg.com/flamegraphs.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("火焰图"),a("OutboundLink")],1),s._v(", 通过矢量图的形式, 更直观展示汇总结果. 下图就是一个针对 mysql 的火焰图示例.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/9b28cd55c809afc13a0a1de64eccc9ea-20230731161933-a7b3hro.png",alt:""}})]),s._v(" "),a("p",[s._v("这张图看起来像是跳动的火焰, 因此也就被称为火焰图. 要理解火焰图, 最重要的是区分清楚横轴和纵轴的含义.")]),s._v(" "),a("ul",[a("li",[a("mark",[a("strong",[s._v("横轴表示采样数和采样比例")])]),s._v(". 一个函数"),a("strong",[s._v("占用的横轴越宽, 就代表它的执行时间越长")]),s._v(". 同一层的多个函数, 则是按照字母来排序.")]),s._v(" "),a("li",[a("mark",[a("strong",[s._v("纵轴表示调用栈")])]),s._v(", 由"),a("strong",[s._v("下往上根据调用关系逐个展开")]),s._v(". 换句话说, 上下相邻的两个函数中, 下面的函数, 是上面函数的父函数. 这样, 调用栈越深, 纵轴就越高.")])]),s._v(" "),a("p",[s._v("图中的颜色, 并没有特殊含义, 只是用来区分不同的函数. 火焰图是动态的矢量图格式, 所以它还支持一些动态特性. 比如, 鼠标悬停到某个函数上时, 就会自动显示这个函数的采样数和采样比例. 而当用鼠标点击函数时, 火焰图就会把该层及其上的各层放大, 方便观察这些处于火焰图顶部的调用栈的细节.")]),s._v(" "),a("p",[s._v("上面 mysql 火焰图的示例, 就表示了 CPU 的繁忙情况, 这种火焰图也被称为 on-CPU 火焰图. 如果根据性能分析的目标来划分, 火焰图可以分为下面这几种.")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("on-CPU 火焰图")]),s._v(": 表示 CPU 的繁忙情况, 用在 CPU 使用率比较高的场景中.")]),s._v(" "),a("li",[a("strong",[s._v("off-CPU 火焰图")]),s._v(": 表示 CPU "),a("strong",[s._v("等待 I/O")]),s._v(", 锁等各种资源的阻塞情况.")]),s._v(" "),a("li",[a("strong",[s._v("内存火焰图")]),s._v(": 表示内存的分配和释放情况.")]),s._v(" "),a("li",[a("strong",[s._v("热/冷火焰图")]),s._v(": 表示将 on-CPU 和 off-CPU 结合在一起综合展示.")]),s._v(" "),a("li",[a("strong",[s._v("差分火焰图")]),s._v(": 表示两个火焰图的差分情况, 红色表示增长, 蓝色表示衰减. 差分火焰图常用来比较不同场景和不同时期的火焰图, 以便分析系统变化前后对性能的影响情况.")])]),s._v(" "),a("p",[s._v("了解了火焰图的含义和查看方法后, 接下来再回到案例, 运用火焰图来观察刚才 perf record 得到的记录.")]),s._v(" "),a("h5",{attrs:{id:"_5-火焰图分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-火焰图分析"}},[s._v("#")]),s._v(" 5.火焰图分析")]),s._v(" "),a("p",[s._v("首先需要生成火焰图. 先下载几个能从 perf record 记录生成火焰图的工具, 这些工具都放在 "),a("a",{attrs:{href:"https://github.com/brendangregg/FlameGraph",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://github.com/brendangregg/FlameGraph"),a("OutboundLink")],1),s._v(" 上面. 可以执行下面的命令来下载:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" clone https://github.com/brendangregg/FlameGraph\n$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" FlameGraph\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("安装好工具后, 要生成火焰图, 其实主要需要三个步骤:")]),s._v(" "),a("ol",[a("li",[s._v("执行 perf script, 将 perf record 的记录转换成可读的采样记录;")]),s._v(" "),a("li",[s._v("执行 stackcollapse-perf.pl 脚本, 合并调用栈信息;")]),s._v(" "),a("li",[s._v("执行 flamegraph.pl 脚本, 生成火焰图.")])]),s._v(" "),a("p",[s._v("不过, 在 Linux 中, 可以使用管道, 来简化这三个步骤的执行过程. 假设刚才用 perf record 生成的文件路径为 "),a("code",[s._v("/root/perf.data")]),s._v("​, 执行下面的命令, 就可以直接生成火焰图:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ perf script "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-i")]),s._v(" /root/perf.data "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" ./stackcollapse-perf.pl "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--all")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  ./flamegraph.pl "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" ksoftirqd.svg\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("执行成功后, 使用浏览器打开 ksoftirqd.svg, 就可以看到生成的火焰图了. 如下图所示:")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/21cf81bc135a0276d9f23c778f1e69d3-20230731161933-8dziifh.png",alt:""}})]),s._v(" "),a("p",[s._v("根据刚刚讲过的火焰图原理, 这个图应该从下往上看, "),a("strong",[s._v("沿着调用栈中最宽的函数来分析执行次数最多的函数")]),s._v(". 这儿看到的结果, 其实跟刚才的 perf report 类似, 但直观了很多, 中间这一团火, 很明显就是最需要关注的地方.")]),s._v(" "),a("p",[s._v("我们顺着调用栈由下往上看(顺着图中蓝色箭头), 就可以得到跟刚才 perf report 中一样的结果:")]),s._v(" "),a("ul",[a("li",[s._v("最开始, 还是 net_rx_action 到 netif_receive_skb 处理网络收包;")]),s._v(" "),a("li",[s._v("然后 br_handle_frame 到 br_nf_pre_routing 在网桥中接收并执行 netfilter 钩子函数;")]),s._v(" "),a("li",[s._v("再向上 br_pass_frame_up 到 netif_receive_skb 从网桥转到其他网络设备又一次接收.")])]),s._v(" "),a("p",[s._v("不过最后, 到了 ip_forward 这里, 已经看不清函数名称了. 所以需要点击 ip_forward, 展开最上面这一块调用栈:")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/cb8b6519a17749d56081748304c48db3-20230731161933-n7a7im3.png",alt:""}})]),s._v(" "),a("p",[s._v("这样就可以进一步看到 ip_forward 后的行为, 也就是把网络包发送出去. 根据这个调用过程, 再结合前面学习的网络收发和 TCP/IP 协议栈原理, 这个流程中的网络接收, 网桥以及 netfilter 调用等, 都是导致软中断 CPU 升高的重要因素, 也就是影响网络性能的潜在瓶颈.")]),s._v(" "),a("p",[s._v("不过, 回想一下网络收发的流程, 你可能会觉得它缺了好多步骤.")]),s._v(" "),a("p",[s._v('比如, 这个堆栈中并没有 TCP 相关的调用, 也没有连接跟踪 conntrack 相关的函数. 实际上, 这些流程都在其他更小的火焰中, 可以点击上图左上角的"Reset Zoom", 回到完整火焰图中, 再去查看其他小火焰的堆栈.')]),s._v(" "),a("p",[s._v("所以, "),a("strong",[s._v("在理解这个调用栈时要注意. 从任何一个点出发, 纵向来看的整个调用栈, 其实只是最顶端那一个函数的调用堆栈, 而非完整的内核网络执行流程")]),s._v(". 另外, 整个火焰图不包含任何时间的因素, 所以"),a("strong",[s._v("并不能看出横向各个函数的执行次序")]),s._v(".")]),s._v(" "),a("p",[s._v("到这里就找出了"),a("strong",[s._v("内核线程 ksoftirqd 执行最频繁的函数调用堆栈, 而这个堆栈中的各层级函数, 就是潜在的性能瓶颈来源")]),s._v(". 这样, 后面想要进一步分析, 优化时也就有了根据.")]),s._v(" "),a("h5",{attrs:{id:"_6-小结-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-小结-2"}},[s._v("#")]),s._v(" 6.小结")]),s._v(" "),a("p",[s._v("本节通过 perf 和火焰图方法, 找出了软中断内核线程的热点函数, 其实也就找出了潜在的瓶颈和优化方向. 其实, 如果遇到的是内核线程的资源使用异常, 很多常用的进程级性能工具并不能帮上忙. 这时就可以用内核自带的 perf 来观察它们的行为, 找出热点函数, 进一步定位性能瓶. 当然, perf 产生的汇总报告并不够直观, 所以也推荐用火焰图来协助排查.")]),s._v(" "),a("p",[s._v("实际上, "),a("strong",[s._v("火焰图方法同样适用于普通进程. 比如, 在分析 Nginx, MySQL 等各种应用场景的性能问题时, 火焰图也能帮更快定位热点函数, 找出潜在性能问题")]),s._v(".")]),s._v(" "),a("h4",{attrs:{id:"_50-案例篇-动态追踪怎么用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_50-案例篇-动态追踪怎么用"}},[s._v("#")]),s._v(" 50-案例篇:动态追踪怎么用?")]),s._v(" "),a("p",[s._v("当碰到内核线程的资源使用异常时, 很多常用的进程级性能工具, 并不能直接用到内核线程上. 这时就可以使用内核自带的 perf 来观察它们的行为, 找出热点函数, 进一步定位性能瓶颈. 不过, perf 产生的汇总报告并不直观, 所以通常也推荐用火焰图来协助排查.")]),s._v(" "),a("p",[s._v("其实, 使用 perf 对系统内核线程进行分析时, 内核线程依然还在正常运行中, 所以这种方法也被称为"),a("strong",[s._v("动态追踪技术")]),s._v(".")]),s._v(" "),a("p",[s._v("**动态追踪技术, 通过探针机制, 来采集内核或者应用程序的运行信息, 从而可以不用修改内核和应用程序的代码, 就获得丰富的信息, 帮你分析, 定位想要排查的问题. **")]),s._v(" "),a("p",[s._v("以往, 在排查和调试性能问题时, 往往需要先为应用程序设置一系列的断点(比如使用 GDB), 然后以手动或者脚本(比如 GDB 的 Python 扩展)的方式, 在这些断点处分析应用程序的状态. 或者, 增加一系列的日志, 从日志中寻找线索. 不过, 断点往往会中断应用的正常运行; 而增加新的日志, 往往需要重新编译和部署. 这些方法虽然在今天依然广泛使用, 但在排查复杂的性能问题时, 往往耗时耗力, 更会对应用的正常运行造成巨大影响. 此外, 这类方式还有大量的性能问题. 比如, 出现的概率小, 只有线上环境才能碰到. 这种难以复现的问题, 亦是一个巨大挑战.")]),s._v(" "),a("p",[s._v("而动态追踪技术的出现, 就为这些问题提供了完美的方案: 它既不需要停止服务, 也不需要修改应用程序的代码; 所有一切还按照原来的方式正常运行时, 就可以帮助分析出问题的根源. 同时, 相比以往的进程级跟踪方法(比如 ptrace), 动态追踪往往只会带来很小的性能损耗(通常在 5% 或者更少).")]),s._v(" "),a("p",[s._v("既然动态追踪有这么多好处, "),a("strong",[s._v("那么都有哪些动态追踪的方法, 又该如何使用这些动态追踪方法呢")]),s._v("?")]),s._v(" "),a("h5",{attrs:{id:"_1-动态追踪"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-动态追踪"}},[s._v("#")]),s._v(" 1.动态追踪")]),s._v(" "),a("p",[s._v("说到动态追踪(Dynamic Tracing), 就不得不提源于 Solaris 系统的 DTrace. DTrace 是动态追踪技术的鼻祖, 它提供了一个通用的观测框架, 并可以使用 D 语言进行自由扩展.")]),s._v(" "),a("p",[s._v("DTrace 的工作原理如下图所示. "),a("strong",[s._v("它的运行常驻在内核中, 用户可以通过 dtrace 命令, 把 D 语言编写的追踪脚本, 提交到内核中的运行时来执行")]),s._v(". DTrace 可以跟踪用户态和内核态的所有事件, 并通过一些列的优化措施, 保证最小的性能开销.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/7ac9d9c01adc2f7cfa8132fc14dc5d6f-20230731161933-7da8gc0.png",alt:""}})]),s._v(" "),a("p",[s._v("虽然直到今天, DTrace 本身依然无法在 Linux 中运行, 但它同样对 Linux 动态追踪产生了巨大的影响. 很多工程师都尝试过把 DTrace 移植到 Linux 中, 这其中最著名的就是 RedHat 主推的 SystemTap.")]),s._v(" "),a("p",[s._v("同 DTrace 一样, SystemTap 也定义了一种类似的脚本语言, 方便用户根据需要自由扩展. 不过, 不同于 DTrace, SystemTap 并没有常驻内核的运行时, 它需要先把脚本编译为内核模块, 然后再插入到内核中执行. 这也导致 SystemTap 启动比较缓慢, 并且依赖于完整的调试符号表.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/664373d1f400286f4d622b6689c5b4e6-20230731161933-2lglg2v.png",alt:""}})]),s._v(" "),a("p",[s._v("总的来说, 为了追踪内核或用户空间的事件, "),a("strong",[s._v("Dtrace 和 SystemTap 都会把用户传入的追踪处理函数(一般称为 Action), 关联到被称为探针的检测点上. 这些探针, 实际上也就是各种动态追踪技术所依赖的事件源")]),s._v(".")]),s._v(" "),a("h6",{attrs:{id:"_1-动态追踪的事件源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-动态追踪的事件源"}},[s._v("#")]),s._v(" (1)动态追踪的事件源")]),s._v(" "),a("p",[s._v("根据事件类型的不同, "),a("strong",[s._v("动态追踪所使用的事件源, 可以分为")]),s._v("​"),a("mark",[a("strong",[s._v("静态探针, 动态探针以及硬件事件")])]),s._v("​"),a("strong",[s._v("等三类")]),s._v(". 它们的关系如下图所示:")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/e5a0742e24f8db3bdac0c1831a8a6d12-20230731161933-t0owm0x.png",alt:""}})]),s._v(" "),a("p",[s._v("其中, "),a("strong",[s._v("硬件事件通常由性能监控计数器 PMC(Performance Monitoring Counter)产生")]),s._v(", 包括了各种硬件的性能情况, 比如 CPU 的缓存, 指令周期, 分支预测等等.")]),s._v(" "),a("p",[a("strong",[s._v("静态探针, 是指事先在代码中定义好, 并编译到应用程序或者内核中的探针")]),s._v(". 这些探针只有在开启探测功能时, 才会被执行到; 未开启时并不会执行. 常见的静态探针包括内核中的"),a("strong",[s._v("跟踪点")]),s._v("(tracepoints)和 "),a("strong",[s._v("USDT")]),s._v("(Userland Statically Defined Tracing)探针.")]),s._v(" "),a("ul",[a("li",[s._v("跟踪点(tracepoints), 实际上就是在源码中插入的一些带有控制条件的探测点, 这些探测点允许事后再添加处理函数. 比如在内核中, 最常见的静态跟踪方法就是 printk, 即输出日志. Linux 内核定义了大量的跟踪点, 可以通过内核编译选项, 来开启或者关闭.")]),s._v(" "),a("li",[s._v("USDT 探针, 全称是用户级静态定义跟踪, 需要在源码中插入 DTRACE_PROBE() 代码, 并编译到应用程序中. 不过, 也有很多应用程序内置了 USDT 探针, 比如 MySQL, PostgreSQL 等.")])]),s._v(" "),a("p",[a("strong",[s._v("动态探针, 则是指没有事先在代码中定义, 但却可以在运行时动态添加的探针")]),s._v(", 比如函数的"),a("strong",[s._v("调用和返回")]),s._v("等. 动态探针支持按需在内核或者应用程序中添加探测点, 具有更高的灵活性. 常见的动态探针有两种, 即用于内核态的 kprobes 和用于用户态的 uprobes.")]),s._v(" "),a("ul",[a("li",[s._v("kprobes 用来跟踪内核态的函数, 包括用于函数调用的 kprobe 和用于函数返回的 kretprobe.")]),s._v(" "),a("li",[s._v("uprobes 用来跟踪用户态的函数, 包括用于函数调用的 uprobe 和用于函数返回的 uretprobe.")])]),s._v(" "),a("blockquote",[a("p",[s._v("注意, kprobes 需要内核编译时开启 CONFIG_KPROBE_EVENTS; 而 uprobes 则需要内核编译时开启 CONFIG_UPROBE_EVENTS.")])]),s._v(" "),a("h6",{attrs:{id:"_2-动态追踪机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-动态追踪机制"}},[s._v("#")]),s._v(" (2)动态追踪机制")]),s._v(" "),a("p",[s._v("而在这些探针的基础上, Linux 也提供了一系列的动态追踪机制, 比如 "),a("strong",[s._v("ftrace, perf, eBPF")]),s._v(" 等.")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("ftrace")]),s._v(" 最早用于函数跟踪, 后来又扩展支持了各种事件跟踪功能. ftrace 的使用接口跟之前提到的 procfs 类似, 它通过 debugfs(4.1 以后也支持 tracefs), 以普通文件的形式, 向用户空间提供访问接口. 这样, 不需要额外的工具, 就可以通过挂载点(通常为 "),a("code",[s._v("/sys/kernel/debug/tracing")]),s._v("​ 目录)内的文件读写, 来跟 ftrace 交互, 跟踪内核或者应用程序的运行事件.")]),s._v(" "),a("li",[a("strong",[s._v("perf")]),s._v(" 具有事件记录和分析功能, 这实际上只是一种最简单的静态跟踪机制. 也可以通过 perf 来自定义动态事件(perf probe), 只关注真正感兴趣的事件.")]),s._v(" "),a("li",[a("strong",[s._v("eBPF")]),s._v(" 则在 BPF(Berkeley Packet Filter)的基础上扩展而来, 不仅支持事件跟踪机制, 还可以通过自定义的 BPF 代码(使用 C 语言)来自由扩展. 所以, eBPF 实际上就是常驻于内核的运行时, 可以说就是 Linux 版的 DTrace.")]),s._v(" "),a("li",[s._v("除此之外, 还有很多内核外的工具, 也提供了丰富的动态追踪功能. 最常见的就是前面提到的 "),a("strong",[s._v("SystemTap")]),s._v(", 之前多次使用过的 "),a("strong",[s._v("BCC")]),s._v("(BPF Compiler Collection), 以及常用于容器性能分析的 "),a("strong",[s._v("sysdig")]),s._v(" 等.")])]),s._v(" "),a("p",[s._v("而在分析大量事件时, 使用火焰图可以将大量数据可视化展示, 让你更直观发现潜在的问题.")]),s._v(" "),a("p",[s._v("接下来就通过几个例子来看看, 要怎么使用这些机制, 来动态追踪内核和应用程序的执行情况.")]),s._v(" "),a("h5",{attrs:{id:"_2-ftrace"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-ftrace"}},[s._v("#")]),s._v(" 2.ftrace")]),s._v(" "),a("p",[s._v("先来看 ftrace. 刚刚提到过, "),a("strong",[s._v("ftrace 通过 debugfs(或者 tracefs), 为用户空间提供接口")]),s._v(". 所以使用 ftrace, 往往是从切换到 debugfs 的挂载点开始.")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" /sys/kernel/debug/tracing\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\nREADME                      instances            set_ftrace_notrace  trace_marker_raw\navailable_events            kprobe_events        set_ftrace_pid      trace_options\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("如果这个目录不存在, 则说明系统还没有挂载 debugfs, 可以执行下面的命令来挂载它:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mount")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-t")]),s._v(" debugfs nodev /sys/kernel/debug\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("ftrace 提供了多个跟踪器, 用于跟踪不同类型的信息, 比如函数调用, 中断关闭, 进程调度等. 具体支持的跟踪器取决于系统配置, 可以执行下面的命令, 来查询所有支持的跟踪器:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" available_tracers\nhwlat blk mmiotrace function_graph wakeup_dl wakeup_rt wakeup "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" nop\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("这其中, function 表示跟踪函数的执行, function_graph 则是跟踪函数的调用关系, 也就是生成直观的调用关系图. 这便是最常用的两种跟踪器.")]),s._v(" "),a("p",[s._v("除了跟踪器外, 使用 ftrace 前, 还需要确认跟踪目标, 包括内核函数和内核事件. 其中,")]),s._v(" "),a("ul",[a("li",[s._v("函数就是内核中的函数名.")]),s._v(" "),a("li",[s._v("而事件, 则是内核源码中预先定义的跟踪点.")])]),s._v(" "),a("p",[s._v("同样地, 可以执行下面的命令, 来查询支持的函数和事件:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ cat available_filter_functions\n$ cat available_events\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("明白了这些基本信息, 接下来就以 ls 命令为例看看 ftrace 的使用方法.")]),s._v(" "),a("p",[s._v("为了列出文件, "),a("strong",[s._v("ls 命令会通过 open 系统调用打开目录文件, 而 open 在内核中对应的函数名为 do_sys_open")]),s._v(".  所以要做的第一步, 就是把要跟踪的函数设置为 do_sys_open:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" do_sys_open "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" set_graph_function\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("接下来, 第二步, 配置跟踪选项, 开启函数调用跟踪, 并跟踪调用进程:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ echo function_graph > current_tracer\n$ echo funcgraph-proc > trace_options\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ ···\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("如果这个目录不存在, 则说明系统还没有挂载 debugfs, 可以执行下面的命令来挂载它:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mount")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-t")]),s._v(" debugfs nodev /sys/kernel/debug\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("strong",[s._v("ftrace 提供了多个跟踪器, 用于跟踪不同类型的信息, 比如函数调用, 中断关闭, 进程调度等")]),s._v(". 具体支持的跟踪器取决于系统配置, 可以执行下面的命令, 来查询所有支持的跟踪器:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" available_tracers\nhwlat blk mmiotrace function_graph wakeup_dl wakeup_rt wakeup "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" nop\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("这其中 function 表示跟踪函数的执行, function_graph 则是跟踪函数的调用关系, 也就是生成直观的调用关系图. 这便是最常用的两种跟踪器.")]),s._v(" "),a("p",[s._v("除了跟踪器外, 使用 ftrace 前, 还需要确认跟踪目标, 包括内核函数和内核事件. 其中,")]),s._v(" "),a("ul",[a("li",[s._v("函数就是内核中的函数名.")]),s._v(" "),a("li",[s._v("而事件, 则是内核源码中预先定义的跟踪点.")])]),s._v(" "),a("p",[s._v("同样地, 可以执行下面的命令, 来查询支持的函数和事件:")]),s._v(" "),a("p",[s._v("$cat available_filter_functions$ cat available_events")]),s._v(" "),a("p",[s._v("明白了这些基本信息, 接下来, 我就以 ls 命令为例, 带你一起看看 ftrace 的使用方法.")]),s._v(" "),a("p",[s._v("为了列出文件, ls 命令会通过 open 系统调用打开目录文件, 而 open 在内核中对应的函数名为 do_sys_open.  所以, 我们要做的第一步, 就是把要跟踪的函数设置为 do_sys_open:")]),s._v(" "),a("p",[s._v("$ echo do_sys_open > set_graph_function")]),s._v(" "),a("p",[s._v("接下来, 第二步, 配置跟踪选项, 开启函数调用跟踪, 并跟踪调用进程:")]),s._v(" "),a("p",[s._v("$echo function_graph > current_tracer$ echo funcgraph-proc > trace_options")]),s._v(" "),a("p",[s._v("接着, 第三步, 也就是开启跟踪:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" tracing_on\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("第四步, 执行一个 ls 命令后, 再关闭跟踪:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" tracing_on\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("第五步, 也是最后一步, 查看跟踪结果:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" trace\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# tracer: function_graph")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# CPU  TASK/PID         DURATION                  FUNCTION CALLS")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# |     |    |           |   |                     |   |   |   |")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    ls-12276    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("               "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("do_sys_open")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    ls-12276    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("               "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("getname")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    ls-12276    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("               "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("getname_flags")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    ls-12276    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("               "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("kmem_cache_alloc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    ls-12276    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("               "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("          "),a("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("_cond_resched")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    ls-12276    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.049")]),s._v(" us    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("            rcu_all_qs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    ls-12276    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.791")]),s._v(" us    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    ls-12276    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.041")]),s._v(" us    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("          should_failslab"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    ls-12276    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.040")]),s._v(" us    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("          prefetch_freepointer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    ls-12276    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.039")]),s._v(" us    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("          memcg_kmem_put_cache"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    ls-12276    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.895")]),s._v(" us    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    ls-12276    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("               "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("__check_object_size")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    ls-12276    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.067")]),s._v(" us    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("          __virt_addr_valid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    ls-12276    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.044")]),s._v(" us    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("          __check_heap_object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    ls-12276    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.039")]),s._v(" us    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("          check_stack_object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    ls-12276    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.570")]),s._v(" us    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    ls-12276    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5.790")]),s._v(" us    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    ls-12276    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6.325")]),s._v(" us    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br")])]),a("p",[s._v("在最后得到的输出中:")]),s._v(" "),a("ul",[a("li",[s._v("第一列表示运行的 CPU;")]),s._v(" "),a("li",[s._v("第二列是任务名称和进程 PID;")]),s._v(" "),a("li",[s._v("第三列是函数执行延迟;")]),s._v(" "),a("li",[s._v("最后一列, 则是函数调用关系图.")])]),s._v(" "),a("p",[s._v("可以看到, "),a("strong",[s._v("函数调用图, 通过不同级别的缩进, 直观展示了各函数间的调用关系")]),s._v(".")]),s._v(" "),a("p",[s._v("你应该也发现了 ftrace 的使用缺点--五个步骤实在是麻烦, 用起来并不方便. 不过不用担心, "),a("a",{attrs:{href:"https://git.kernel.org/pub/scm/utils/trace-cmd/trace-cmd.git/",target:"_blank",rel:"noopener noreferrer"}},[s._v("trace-cmd"),a("OutboundLink")],1),s._v(" 已经把这些步骤给包装了起来. 这样就可以在同一个命令行工具里, 完成上述所有过程.")]),s._v(" "),a("p",[s._v("可以执行下面的命令来安装 trace-cmd:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Ubuntu")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt-get")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" trace-cmd\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# CentOS")]),s._v("\n$ yum "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" trace-cmd\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("安装好后, 原本的五步跟踪过程, 就可以简化为下面这两步:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ trace-cmd record "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" function_graph "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-g")]),s._v(" do_sys_open "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-O")]),s._v(" funcgraph-proc "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\n$ trace-cmd report\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n              ls-12418 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("85558.075341")]),s._v(": funcgraph_entry:                   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("do_sys_open")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n              ls-12418 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("85558.075363")]),s._v(": funcgraph_entry:                   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("getname")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n              ls-12418 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("85558.075364")]),s._v(": funcgraph_entry:                   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("getname_flags")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n              ls-12418 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("85558.075364")]),s._v(": funcgraph_entry:                   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("kmem_cache_alloc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n              ls-12418 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("85558.075365")]),s._v(": funcgraph_entry:                   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("          "),a("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("_cond_resched")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n              ls-12418 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("85558.075365")]),s._v(": funcgraph_entry:        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.074")]),s._v(" us   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("            rcu_all_qs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n              ls-12418 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("85558.075366")]),s._v(": funcgraph_exit:         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.143")]),s._v(" us   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n              ls-12418 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("85558.075366")]),s._v(": funcgraph_entry:        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.064")]),s._v(" us   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("          should_failslab"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n              ls-12418 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("85558.075367")]),s._v(": funcgraph_entry:        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.075")]),s._v(" us   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("          prefetch_freepointer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n              ls-12418 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("85558.075368")]),s._v(": funcgraph_entry:        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.085")]),s._v(" us   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("          memcg_kmem_put_cache"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n              ls-12418 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("85558.075369")]),s._v(": funcgraph_exit:         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.447")]),s._v(" us   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n              ls-12418 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("85558.075369")]),s._v(": funcgraph_entry:                   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("__check_object_size")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n              ls-12418 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("85558.075370")]),s._v(": funcgraph_entry:        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.132")]),s._v(" us   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("          __virt_addr_valid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n              ls-12418 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("85558.075370")]),s._v(": funcgraph_entry:        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.093")]),s._v(" us   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("          __check_heap_object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n              ls-12418 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("85558.075371")]),s._v(": funcgraph_entry:        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.059")]),s._v(" us   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("          check_stack_object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n              ls-12418 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("85558.075372")]),s._v(": funcgraph_exit:         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.323")]),s._v(" us   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n              ls-12418 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("85558.075372")]),s._v(": funcgraph_exit:         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8.411")]),s._v(" us   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n              ls-12418 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("85558.075373")]),s._v(": funcgraph_exit:         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9.195")]),s._v(" us   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br")])]),a("p",[s._v("你会发现, trace-cmd 的输出, 跟上述 cat trace 的输出是类似的.")]),s._v(" "),a("p",[s._v("通过这个例子可以知道, "),a("strong",[s._v("当想要了解某个内核函数的调用过程时, 使用 ftrace 就可以跟踪到它的执行过程")]),s._v(".")]),s._v(" "),a("h5",{attrs:{id:"_3-perf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-perf"}},[s._v("#")]),s._v(" 3.perf")]),s._v(" "),a("p",[s._v("perf 已经是老朋友了. 在前面的案例中, 多次用到它来查找应用程序或者内核中的热点函数, 从而定位性能瓶颈. 而在内核线程 CPU 高的案例中, 还使用火焰图动态展示 perf 的事件记录, 从而更直观地发现了问题.")]),s._v(" "),a("p",[s._v("不过, 前面使用 "),a("code",[s._v("perf record/top")]),s._v("​ 时, 都是先对事件进行采样, 然后再根据采样数, 评估各个函数的调用频率. 实际上, perf 的功能远不止于此. 比如:")]),s._v(" "),a("ul",[a("li",[s._v("perf 可以用来分析 CPU cache, CPU 迁移, 分支预测, 指令周期等各种硬件事件;")]),s._v(" "),a("li",[s._v("perf 也可以只对感兴趣的事件进行动态追踪.")])]),s._v(" "),a("p",[s._v("接下来还是以内核函数 do_sys_open, 以及用户空间函数 readline 为例, 看一看 perf 动态追踪的使用方法.")]),s._v(" "),a("p",[s._v("同 ftrace 一样, 也可以通过 perf list, 查询所有支持的事件:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ perf list\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("然后在 perf 的各个子命令中添加 --event 选项, 设置追踪感兴趣的事件. 如果这些预定义的事件不满足实际需要, 还可以使用 perf probe 来动态添加. 而且除了追踪内核事件外, "),a("strong",[s._v("perf 还可以用来跟踪用户空间的函数")]),s._v(".")]),s._v(" "),a("p",[s._v("先来看第一个 perf 示例, "),a("strong",[s._v("内核函数 do_sys_open 的例子")]),s._v(". 可以执行 perf probe 命令, 添加 do_sys_open 探针:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ perf probe "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--add")]),s._v(" do_sys_open\nAdded new event:\n  probe:do_sys_open    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("on do_sys_open"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nYou can now use it "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" all perf tools, such as:\n    perf record "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-e")]),s._v(" probe:do_sys_open "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-aR")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("探针添加成功后, 就可以在所有的 perf 子命令中使用. 比如, 上述输出就是一个 perf record 的示例, 执行它就可以对 10s 内的 do_sys_open 进行采样:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ perf record "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-e")]),s._v(" probe:do_sys_open "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-aR")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" perf record: Woken up "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("times")]),s._v(" to "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("write")]),s._v(" data "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" perf record: Captured and wrote "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.148")]),s._v(" MB perf.data "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("19")]),s._v(" samples"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("而采样成功后, 就可以执行 perf script 来查看采样结果了:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ perf script\n            perf "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12886")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("89565.879875")]),s._v(": probe:do_sys_open: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ffffffffa807b290"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n           "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12889")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("89565.880362")]),s._v(": probe:do_sys_open: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ffffffffa807b290"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n           "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12889")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("89565.880382")]),s._v(": probe:do_sys_open: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ffffffffa807b290"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n           "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12889")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("89565.880635")]),s._v(": probe:do_sys_open: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ffffffffa807b290"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n           "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12889")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("89565.880669")]),s._v(": probe:do_sys_open: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ffffffffa807b290"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("输出中同样也列出了调用 do_sys_open 的任务名称, 进程 PID 以及运行的 CPU 等信息. 不过, 对于 open 系统调用来说, 只知道它被调用了并不够, 需要知道的是, 进程到底在打开哪些文件. 所以实际应用中, 还希望追踪时能显示这些函数的参数.")]),s._v(" "),a("p",[s._v("对于内核函数来说, 当然可以去查看内核源码, 找出它的所有参数. 不过还有更简单的方法, 那就是直接从调试符号表中查询. 执行下面的命令, 就可以知道 do_sys_open 的所有参数:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ perf probe "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-V")]),s._v(" do_sys_open\nAvailable variables at do_sys_open\n        @"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("do_sys_open+"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("0")]),s._v(">")]),s._v("\n                char*   filename\n                int     dfd\n                int     flags\n                struct open_flags       "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("op")]),s._v("\n                umode_t mode\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("从这儿可以看出, 关心的文件路径, 就是第一个字符指针参数(也就是字符串), 参数名称为 filename. 如果这个命令执行失败, 就说明调试符号表还没有安装. 那么可以执行下面的命令, 安装调试信息后重试:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Ubuntu")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt-get")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" linux-image-"),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("uname")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-r")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("-dbgsym\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# CentOS")]),s._v("\n$ yum "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--enablerepo")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("base-debuginfo "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-y")]),s._v(" kernel-debuginfo-"),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("uname")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-r")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("找出参数名称和类型后, 就可以把参数加到探针中了. 不过由于已经添加过同名探针, 所以在这次添加前, 需要先把旧探针给删掉:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 先删除旧的探针")]),s._v("\nperf probe "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--del")]),s._v(" probe:do_sys_open\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 添加带参数的探针")]),s._v("\n$ perf probe "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--add")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'do_sys_open filename:string'")]),s._v("\nAdded new event:\n  probe:do_sys_open    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("on do_sys_open with filename:string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nYou can now use it "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" all perf tools, such as:\n    perf record "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-e")]),s._v(" probe:do_sys_open "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-aR")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("新的探针添加后, 重新执行 record 和 script 子命令, 采样并查看记录:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 重新采样记录")]),s._v("\n$ perf record "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-e")]),s._v(" probe:do_sys_open "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-aR")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看结果")]),s._v("\n$ perf script\n            perf "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13593")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("91846.053622")]),s._v(": probe:do_sys_open: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ffffffffa807b290"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("filename_string")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/proc/13596/status"')]),s._v("\n              "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13596")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("91846.053995")]),s._v(": probe:do_sys_open: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ffffffffa807b290"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("filename_string")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/etc/ld.so.cache"')]),s._v("\n              "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13596")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("91846.054011")]),s._v(": probe:do_sys_open: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ffffffffa807b290"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("filename_string")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/lib/x86_64-linux-gnu/libselinux.so.1"')]),s._v("\n              "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13596")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("91846.054066")]),s._v(": probe:do_sys_open: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ffffffffa807b290"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("filename_string")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v('"/lib/x86_64-linux-gnu/libc.so.6”\n              '),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用完成后不要忘记删除探针")]),s._v("\n$ perf probe "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--del")]),s._v(" probe:do_sys_open\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("现在就可以看到每次调用 open 时打开的文件了. 不过这个结果是不是看着很熟悉呢?")]),s._v(" "),a("p",[s._v("其实, 在使用 strace 跟踪进程的系统调用时, 也经常会看到这些动态库的影子. 比如, 使用 strace 跟踪 ls 时, 可以得到下面的结果:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("strace")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\naccess"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/etc/ld.so.nohwcap"')]),s._v(", F_OK"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-1")]),s._v(" ENOENT "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("No such "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v(" or directory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\naccess"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/etc/ld.so.preload"')]),s._v(", R_OK"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-1")]),s._v(" ENOENT "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("No such "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v(" or directory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nopenat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("AT_FDCWD, "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/etc/ld.so.cache"')]),s._v(", O_RDONLY"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("O_CLOEXEC"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\naccess"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/etc/ld.so.nohwcap"')]),s._v(", F_OK"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-1")]),s._v(" ENOENT "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("No such "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v(" or directory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nopenat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("AT_FDCWD, "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/lib/x86_64-linux-gnu/libselinux.so.1"')]),s._v(", O_RDONLY"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("O_CLOEXEC"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("你估计在想, 既然 strace 也能得到类似结果, 本身又容易操作, 为什么还要用 perf 呢?")]),s._v(" "),a("p",[s._v("实际上, 很多人只看到了 strace 简单易用的好处, 却忽略了它对进程性能带来的影响. 从原理上来说, "),a("strong",[s._v("strace 基于系统调用 ptrace 实现")]),s._v(", 这就带来了两个问题.")]),s._v(" "),a("ul",[a("li",[s._v("由于 ptrace 是系统调用, 就需要在内核态和用户态切换. 当事件数量比较多时, 繁忙的切换必然会"),a("strong",[s._v("影响原有服务的性能")]),s._v(";")]),s._v(" "),a("li",[s._v("ptrace 需要借助 SIGSTOP 信号挂起目标进程. 这种信号控制和进程挂起, 会影响目标进程的行为.")])]),s._v(" "),a("p",[s._v("所以, "),a("strong",[s._v("在性能敏感的应用(比如数据库)中, 并不推荐用 strace (或者其他基于 ptrace 的性能工具)去排查和调试")]),s._v(". 在 strace 的启发下, 结合内核中的 utrace 机制,  perf 也提供了一个 trace 子命令, 是取代 strace 的首选工具. 相对于 ptrace 机制来说, perf trace 基于内核事件, 自然要比进程跟踪的性能好很多.")]),s._v(" "),a("p",[s._v("perf trace 的使用方法如下所示, 跟 strace 其实很像:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ perf trace "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\n         ? "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": ls/14234  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(". "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("continued"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(": execve"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("))")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.177")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.013")]),s._v(" ms"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": ls/14234 brk"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("                                                                  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" 0x555d96be7000\n     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.224")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.014")]),s._v(" ms"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": ls/14234 access"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("filename: 0xad98082                                            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-1")]),s._v(" ENOENT No such "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v(" or directory\n     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.248")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.009")]),s._v(" ms"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": ls/14234 access"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("filename: 0xad9add0, mode: R                                   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-1")]),s._v(" ENOENT No such "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v(" or directory\n     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.267")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.012")]),s._v(" ms"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": ls/14234 openat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("dfd: CWD, filename: 0xad98428, flags: CLOEXEC                  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.288")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.009")]),s._v(" ms"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": ls/14234 fstat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("fd: "),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("3")]),s._v("<")]),s._v("/usr/lib/locale/C.UTF-8/"),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("LC_NAME")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(", statbuf: 0x7ffd2015f230 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.305")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.011")]),s._v(" ms"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": ls/14234 mmap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("len: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("45560")]),s._v(", prot: READ, flags: PRIVATE, fd: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("                    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" 0x7efe0af92000\n     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.324")]),s._v(" Dockerfile  test.sh\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.008")]),s._v(" ms"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": ls/14234 close"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("fd: "),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("3")]),s._v("<")]),s._v("/usr/lib/locale/C.UTF-8/"),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("LC_NAME")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("                          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("不过 perf trace 还可以进行系统级的系统调用跟踪(即跟踪所有进程), 而 strace 只能跟踪特定的进程.")]),s._v(" "),a("p",[a("strong",[s._v("第二个 perf 的例子是用户空间的库函数")]),s._v(". 以 bash 调用的库函数 readline 为例, 使用类似的方法, 可以跟踪库函数的调用(基于 uprobes).")]),s._v(" "),a("p",[s._v("readline 的作用, 是从终端中读取用户输入, 并把这些数据返回调用方. 所以跟 open 系统调用不同的是, 我们更关注 readline 的调用结果.")]),s._v(" "),a("p",[s._v("执行下面的命令, 通过 -x 指定 bash 二进制文件的路径, 就可以动态跟踪库函数. 这其实就是跟踪了所有用户在 bash 中执行的命令:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 为 /bin/bash 添加 readline 探针")]),s._v("\n$ perf probe "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-x")]),s._v(" /bin/bash 'readline%return +0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$retval")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":string’\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 采样记录")]),s._v("\n$ perf record "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-e")]),s._v(" probe_bash:readline__return "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-aR")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看结果")]),s._v("\n$ perf script\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13348")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("93939.142576")]),s._v(": probe_bash:readline__return: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("5626ffac1610 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("- 5626ffa46739"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("arg1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ls"')]),s._v("\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 跟踪完成后删除探针")]),s._v("\n$ perf probe "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--del")]),s._v(" probe_bash:readline__return\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("当然, 如果不确定探针格式, 也可以通过下面的命令, 查询所有支持的函数和函数参数:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询所有的函数")]),s._v("\n$ perf probe "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-x")]),s._v(" /bin/bash —funcs\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询函数的参数")]),s._v("\n$ perf probe "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-x")]),s._v(" /bin/bash "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-V")]),s._v(" readline\nAvailable variables at readline\n        @"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("readline+"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("0")]),s._v(">")]),s._v("\n                char*   prompt\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("跟内核函数类似, 如果想要查看普通应用的函数名称和参数, 那么在应用程序的二进制文件中, 同样需要包含调试信息.")]),s._v(" "),a("h5",{attrs:{id:"_4-ebpf和bcc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-ebpf和bcc"}},[s._v("#")]),s._v(" 4.eBPF和BCC")]),s._v(" "),a("p",[s._v("ftrace 和 perf 的功能已经比较丰富了, 不过它们有一个共同的缺陷, 那就是不够灵活, 没法像 DTrace 那样通过脚本自由扩展.")]),s._v(" "),a("p",[s._v("而 eBPF 就是 Linux 版的 DTrace, 可以通过 C 语言自由扩展(这些扩展通过 LLVM 转换为 BPF 字节码后, 加载到内核中执行). 下面这张图, 就表示了 eBPF 追踪的工作原理:")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/a7b84179f2883c9d71828c171eb8969a-20230731161933-l2kl9rc.png",alt:""}})]),s._v(" "),a("p",[s._v("从图中可以看到, eBPF 的执行需要三步:")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("从用户跟踪程序生成 BPF 字节码")]),s._v(";")]),s._v(" "),a("li",[a("strong",[s._v("加载到内核中运行")]),s._v(";")]),s._v(" "),a("li",[a("strong",[s._v("向用户空间输出结果")]),s._v(".")])]),s._v(" "),a("p",[s._v("所以, 从使用上来说, eBPF 要比 ftrace 和 perf 都更加繁杂. 实际上, 在 eBPF 执行过程中, 编译, 加载还有 maps 等操作, 对所有的跟踪程序来说都是通用的. 把这些过程通过 Python 抽象起来, 也就诞生了 "),a("strong",[s._v("BCC")]),s._v("(BPF Compiler Collection). BCC 把 eBPF 中的各种事件源(比如 kprobe, uprobe, tracepoint 等)和数据操作(称为 Maps), 也都转换成了 Python 接口(也支持 lua). 这样使用 BCC 进行动态追踪时, 编写简单的脚本就可以了.")]),s._v(" "),a("p",[s._v("不过要注意, 因为需要跟内核中的数据结构交互, 真正核心的事件处理逻辑, 还是需要用 C 语言来编写.")]),s._v(" "),a("p",[s._v("BCC 的安装方法如下:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# REHL 7.6")]),s._v("\nyum "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" bcc-tools\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("安装后, BCC 会把所有示例(包括 Python 和 lua), 放到 "),a("code",[s._v("/usr/share/bcc/examples")]),s._v("​ 目录中:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" /usr/share/bcc/examples\nhello_world.py  lua  networking  tracing\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("接下来还是以 do_sys_open 为例来看看, 如何用 eBPF 和 BCC 实现同样的动态跟踪.")]),s._v(" "),a("p",[s._v("通常, 可以把 BCC 应用, 拆分为下面这四个步骤.")]),s._v(" "),a("p",[s._v("第一, 跟所有的 Python 模块使用方法一样, 在使用之前, 先导入要用到的模块:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("from bcc "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("import")]),s._v(" BPF\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("第二, 需要"),a("strong",[s._v("定义事件以及处理事件的函数")]),s._v(". 这个函数需要用 C 语言来编写, 作用是初始化刚才导入的 BPF 对象. 这些用 C 语言编写的处理函数, 要以字符串的形式送到 BPF 模块中处理:")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# define BPF program (""" is used for multi-line string).')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# '#' indicates comments for python, while '//' indicates comments for C.")]),s._v("\nprog "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""\n#include <uapi/linux/ptrace.h>\n#include <uapi/linux/limits.h>\n#include <linux/sched.h>\n// define output data structure in C\nstruct data_t {\n    u32 pid;\n    u64 ts;\n    char comm[TASK_COMM_LEN];\n    char fname[NAME_MAX];\n};\nBPF_PERF_OUTPUT(events);\n \n// define the handler for do_sys_open.\n// ctx is required, while other params depends on traced function.\nint hello(struct pt_regs *ctx, int dfd, const char __user *filename, int flags){\n    struct data_t data = {};\n    data.pid = bpf_get_current_pid_tgid();\n    data.ts = bpf_ktime_get_ns();\n    if (bpf_get_current_comm(&data.comm, sizeof(data.comm)) == 0) {\n        bpf_probe_read(&data.fname, sizeof(data.fname), (void *)filename);\n    }\n    events.perf_submit(ctx, &data, sizeof(data));\n    return 0;\n}\n"""')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# load BPF program")]),s._v("\nb "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" BPF"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("text"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("prog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# attach the kprobe for do_sys_open, and set handler to hello")]),s._v("\nb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("attach_kprobe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("event"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"do_sys_open"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" fn_name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br")])]),a("p",[s._v("第三步, 是定义一个输出函数, 并把输出函数跟 BPF 事件绑定:")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# process event")]),s._v("\nstart "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("print_event")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cpu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("global")]),s._v(" start\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# event’s type is data_t")]),s._v("\n    event "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"events"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" start "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n            start "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ts\n    time_s "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("float")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ts "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000000000")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%-18.9f %-16s %-6d %-16s"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("time_s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("comm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("pid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("fname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# loop with callback to print_event")]),s._v("\nb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"events"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("open_perf_buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("print_event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("最后一步, 就是"),a("strong",[s._v("执行事件循环")]),s._v(", 开始追踪 do_sys_open 的调用:")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# print header")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%-18s %-16s %-6s %-16s"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"TIME(s)"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"COMM"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"PID"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(' "FILE”'),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# start the event polling loop")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("perf_buffer_poll"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("except")]),s._v(" KeyboardInterrupt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        exit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("把上面几个步骤的代码, 保存到文件 trace-open.py 中, 然后就可以用 Python 来运行了. 如果一切正常, 可以看到如下输出:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ python trace-open.py\nTIME"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("            COMM             PID    FILE\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.000000000")]),s._v("        irqbalance       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1073")]),s._v("   /proc/interrupts\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.000175401")]),s._v("        irqbalance       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1073")]),s._v("   /proc/stat\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.000258802")]),s._v("        irqbalance       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1073")]),s._v("   /proc/irq/9/smp_affinity\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.000290102")]),s._v("        irqbalance       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1073")]),s._v("   /proc/irq/0/smp_affinity\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("从输出中, 可以看到 irqbalance 进程(你的环境中可能还会有其他进程)正在打开很多文件, 而 irqbalance 依赖这些文件中读取的内容, 来执行中断负载均衡.")]),s._v(" "),a("p",[s._v("通过这个简单的示例也可以发现, eBPF 和 BCC 的使用, 其实比 ftrace 和 perf 有更高的门槛. 想用 BCC 开发自己的动态跟踪程序, 至少要熟悉 C 语言, Python 语言, 被跟踪事件或函数的特征(比如内核函数的参数和返回格式)以及 eBPF 提供的各种数据操作方法.")]),s._v(" "),a("p",[s._v("不过, 因为强大的灵活性, 虽然 eBPF 在使用上有一定的门槛, 却也无法阻止它成为目前最热门, 最受关注的动态追踪技术.")]),s._v(" "),a("p",[s._v("当然, BCC 软件包也内置了很多已经开发好的实用工具, 默认安装到 "),a("code",[s._v("/usr/share/bcc/tools/")]),s._v("​ 目录中, 它们的使用场景如下图所示:")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/fbb794b3ef2a72806c89a5637ac88114-20230731161933-q72p34k.png",alt:""}})]),s._v(" "),a("p",[s._v("这些工具, 一般都可以直接拿来用. 而在编写其他的动态追踪脚本时, 它们也是最好的参考资料. 不过, 有一点需要你特别注意, 很多 eBPF 的新特性, 都需要比较新的内核版本(如下图所示). 如果某些工具无法运行, 很可能就是因为使用了当前内核不支持的特性.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/ec2d0dd0f33df9623e04de90d1abbedb-20230731161933-mf0yx2z.png",alt:""}})]),s._v(" "),a("h5",{attrs:{id:"_5-sysdig"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-sysdig"}},[s._v("#")]),s._v(" 5.sysdig")]),s._v(" "),a("p",[a("strong",[s._v("sysdig")]),s._v(" 则是随着容器技术的普及而诞生的, 主要用于"),a("strong",[s._v("容器的动态追踪")]),s._v(". sysdig 汇集了一些列性能工具的优势, 可以说是集百家之所长. 我习惯用这个公式来表示 sysdig 的特点: "),a("strong",[s._v("sysdig = strace + tcpdump + htop + iftop + lsof + docker inspect")]),s._v(".")]),s._v(" "),a("p",[s._v("而在最新的版本中(内核版本 >= 4.14), sysdig 还可以通过 eBPF 来进行扩展, 所以也可以用来追踪内核中的各种函数和事件.")]),s._v(" "),a("h5",{attrs:{id:"_6-如何选择追踪工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-如何选择追踪工具"}},[s._v("#")]),s._v(" 6.如何选择追踪工具")]),s._v(" "),a("p",[s._v("这么多动态追踪工具, 在实际场景中到底该怎么选择呢? 还是那句话, "),a("strong",[s._v("具体性能工具的选择, 就要从具体的工作原理来入手")]),s._v(". 比如:")]),s._v(" "),a("ul",[a("li",[s._v("在不需要很高灵活性的场景中, 使用 perf 对性能事件进行采样, 然后再配合火焰图辅助分析, 就是最常用的一种方法;")]),s._v(" "),a("li",[s._v("而需要对事件或函数调用进行统计分析(比如观察不同大小的 I/O 分布)时, 就要用 SystemTap 或者 eBPF, 通过一些自定义的脚本来进行数据处理.")])]),s._v(" "),a("p",[s._v("在这里也总结了几个常见的动态追踪使用场景, 并且分别推荐了适合的工具.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/77c55c47c016179708a71a4af8ca298a-20230731161933-bmxbp4z.png",alt:""}})]),s._v(" "),a("h5",{attrs:{id:"_7-小结-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-小结-2"}},[s._v("#")]),s._v(" 7.小结")]),s._v(" "),a("p",[s._v("本节学习了 perf, eBPF 和 BCC 等动态追踪方法, 并总结了不同场景中如何选择动态追踪方法.")]),s._v(" "),a("p",[s._v("在 Linux 系统中, 常见的"),a("strong",[s._v("动态追踪方法, 包括 ftrace, perf, eBPF 等")]),s._v(". 在大多数性能问题中, 使用 perf 配合火焰图是一个不错的方法. 如果这满足不了你的要求, 那么:")]),s._v(" "),a("ul",[a("li",[s._v("在新版的内核中, eBPF 和 "),a("strong",[s._v("BCC")]),s._v(" 是最灵活的动态追踪方法;")])]),s._v(" "),a("p",[s._v("此外, 在使用动态追踪技术时, 为了得到分析目标的详细信息, 一般需要内核以及应用程序的调试符号表. 动态追踪实际上也是在这些符号(包括函数和事件)上进行的, 所以易读易理解的符号, 有助于加快动态追踪的过程.")]),s._v(" "),a("h4",{attrs:{id:"_52-案例篇-服务吞吐量下降很厉害该怎么分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_52-案例篇-服务吞吐量下降很厉害该怎么分析"}},[s._v("#")]),s._v(" 52-案例篇:服务吞吐量下降很厉害该怎么分析?")]),s._v(" "),a("p",[s._v("除了延迟问题外, 网络请求的吞吐量下降, 是另一个常见的性能问题. 那么针对这种"),a("strong",[s._v("吞吐量下降问题, 又该如何进行分析")]),s._v("呢? 接下来就以最常用的反向代理服务器 Nginx 为例来看看, 如何分析服务吞吐量下降的问题.")]),s._v(" "),a("h5",{attrs:{id:"_1-案例分析-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-案例分析-2"}},[s._v("#")]),s._v(" 1.案例分析")]),s._v(" "),a("p",[s._v("今天要分析的案例是一个 Nginx + PHP 应用, 它们的关系如下图所示:")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/f91f1713c3b5addad03feb18c92a95e4-20230731161933-u6z6mjy.png",alt:""}})]),s._v(" "),a("p",[s._v("其中, wrk 和 curl 是 Nginx 的客户端, 而 PHP 应用则是一个简单的 Hello World:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("?php\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello World!"')]),s._v("\n?"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("为了方便运行, 我已经把案例应用打包成了两个 Docker 镜像, 并推送到 Docker Hub 中. 可以直接按照下面的步骤来运行它.")]),s._v(" "),a("p",[s._v("同时, 为了分析方便, 这两个容器都将"),a("strong",[s._v("运行在 host network 模式")]),s._v("中. 这样就不用切换到容器的网络命名空间, 而可以直接观察它们的套接字状态.")]),s._v(" "),a("p",[s._v("先在终端一中, 执行下面的命令, 启动 Nginx 应用, 并监听在 80 端口. 如果一切正常, 应该可以看到如下的输出:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),s._v(" nginx "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--network")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("host")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--privileged")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-itd")]),s._v(" feisky/nginx-tp\n6477c607c13b37943234755a14987ffb3a31c33a7f04f75bb1c190e710bce19e\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),s._v(" phpfpm "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--network")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("host")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--privileged")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-itd")]),s._v(" feisky/php-fpm-tp\n09e0255159f0c8a647e22cd68bd097bec7efc48b21e5d91618ff29b882fa7c1f\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("然后, 执行 docker ps 命令, 查询容器的状态, 会发现, 容器已经处于运行状态(Up)了:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v("\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES\n09e0255159f0        feisky/php-fpm-tp   "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"php-fpm -F --pid /o…"')]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("28")]),s._v(" seconds ago      Up "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("27")]),s._v(" seconds                           phpfpm\n6477c607c13b        feisky/nginx-tp     "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/init.sh"')]),s._v("               "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("29")]),s._v(" seconds ago      Up "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("28")]),s._v(" seconds                           nginx\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("不过, 从 docker ps 的输出, 只能知道容器处于运行状态. 至于 Nginx 能不能正常处理外部的请求, 还需要进一步确认.")]),s._v(" "),a("p",[s._v('接着, 切换到终端二中, 执行下面的 curl 命令, 进一步验证 Nginx 能否正常访问. 如果看到 "Hello World!" 的输出, 说明 Nginx+PHP 的应用已经正常启动了:')]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" http://192.168.0.30\nHello World"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("接下来就来测试一下, 案例中 Nginx 的吞吐量.")]),s._v(" "),a("p",[s._v("继续在终端二中, 执行 wrk 命令, 来测试 Nginx 的性能:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 默认测试时间为 10s, 请求超时 2s")]),s._v("\n$ wrk "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--latency")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" http://192.168.0.30\nRunning 10s "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("test")]),s._v(" @ http://192.168.0.30\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" threads and "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" connections\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(".82ms   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),s._v(".47ms "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("874")]),s._v(".96ms   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("98.43")]),s._v("%\n    Req/Sec   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("550.55")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(".36k    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(".70k    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("93.10")]),s._v("%\n  Latency Distribution\n     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v("%   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),s._v(".03ms\n     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("75")]),s._v("%   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),s._v(".90ms\n     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("90")]),s._v("%   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("23")]),s._v(".65ms\n     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("99")]),s._v("%  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("215")]),s._v(".03ms\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1910")]),s._v(" requests "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(".10s, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("573")]),s._v(".56KB "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v("\n  Non-2xx or 3xx responses: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1910")]),s._v("\nRequests/sec:    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("189.10")]),s._v("\nTransfer/sec:     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("56")]),s._v(".78KB\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("p",[s._v("从 wrk 的结果中, 可以看到吞吐量(也就是每秒请求数)只有 189, 并且所有 1910 个请求收到的都是异常响应(非 2xx 或 3xx). 这些数据显然表明, 吞吐量太低了, 并且请求处理都失败了. 这是怎么回事呢?")]),s._v(" "),a("p",[s._v("根据 wrk 输出的统计结果可以看到, 总共传输的数据量只有 573 KB, 那就肯定不会是带宽受限导致的. 所以, 应该从请求数的角度来分析.")]),s._v(" "),a("p",[s._v("分析请求数, 特别是 HTTP 的请求数, 有什么好思路吗? 当然就要"),a("strong",[s._v("从 TCP 连接数")]),s._v("入手.")]),s._v(" "),a("h6",{attrs:{id:"_1-连接数优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-连接数优化"}},[s._v("#")]),s._v(" (1)连接数优化")]),s._v(" "),a("p",[s._v("要"),a("strong",[s._v("查看 TCP 连接数的汇总情况, 首选工具自然是 ss 命令")]),s._v(". 为了观察 wrk 测试时发生的问题, 在终端二中再次启动 wrk, 并且把总的测试时间延长到 30 分钟:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 测试时间 30 分钟")]),s._v("\n$ wrk "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--latency")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1800")]),s._v(" http://192.168.0.30\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("然后, 回到终端一中, 观察 TCP 连接数:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ ss "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-s")]),s._v("\nTotal: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("177")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("kernel "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1565")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nTCP:   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1193")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("estab "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(", closed "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1178")]),s._v(", orphaned "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(", synrecv "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(", timewait "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1178")]),s._v("/0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(", ports "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n \nTransport Total     IP        IPv6\n*\t  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1565")]),s._v("      -         -\nRAW\t  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nUDP\t  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\nTCP\t  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\nINET\t  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("\nFRAG\t  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("从这里看出, wrk 并发 1000 请求时, "),a("strong",[s._v("建立连接数只有 5, 而 closed 和 timewait 状态的连接则有 1100 多")]),s._v(". 其实从这儿就可以发现两个问题:")]),s._v(" "),a("ul",[a("li",[s._v("一个是建立连接数太少了;")]),s._v(" "),a("li",[s._v("另一个是 "),a("strong",[s._v("timewait 状态")]),s._v("连接太多了.")])]),s._v(" "),a("p",[s._v("分析问题, 自然要先从相对简单的下手. 先来看第二个关于 timewait 的问题. 在之前的 NAT 案例中, 已经提到过, 内核中的连接跟踪模块, 有可能会导致 timewait 问题. 今天的案例还是基于 Docker 运行, 而 Docker 使用的 iptables, 就会使用连接跟踪模块来管理 NAT. 那么, 怎么确认是不是连接跟踪导致的问题呢?")]),s._v(" "),a("p",[s._v("其实最简单的方法, 就是"),a("strong",[s._v("通过 dmesg 查看系统日志")]),s._v(", 如果有连接跟踪出了问题, 应该会看到 nf_conntrack 相关的日志.")]),s._v(" "),a("p",[s._v("可以继续在终端一中, 运行下面的命令, 查看系统日志:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("dmesg")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tail")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("88356.354329")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" nf_conntrack: nf_conntrack: table full, dropping packet\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("88356.354374")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" nf_conntrack: nf_conntrack: table full, dropping packet\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("从日志中, 可以看到 "),a("code",[s._v("nf_conntrack: table full, dropping packet")]),s._v("​ 的错误日志. 这说明正是"),a("strong",[s._v("连接跟踪")]),s._v("导致的问题.")]),s._v(" "),a("p",[s._v("这种情况下, 应该想起前面学过的两个内核选项--连接跟踪数的最大限制 nf_conntrack_max, 以及当前的连接跟踪数 nf_conntrack_count. 执行下面的命令, 就可以查询这两个选项:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sysctl")]),s._v(" net.netfilter.nf_conntrack_max\nnet.netfilter.nf_conntrack_max "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sysctl")]),s._v(" net.netfilter.nf_conntrack_count\nnet.netfilter.nf_conntrack_count "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("这次的输出中, 可以看到最大的连接跟踪限制只有 200, 并且全部被占用了. 200 的限制显然太小, 不过相应的优化也很简单, 调大就可以了.")]),s._v(" "),a("p",[s._v("执行下面的命令, 将 nf_conntrack_max 增大:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将连接跟踪限制增大到 1048576")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sysctl")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-w")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("net.netfilter.nf_conntrack_max")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1048576")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("连接跟踪限制增大后, 对 Nginx 吞吐量的优化效果如何呢? 不妨再来测试一下. 可以切换到终端二中然后执行下面的 wrk 命令, 重新测试 Nginx 的性能:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 默认测试时间为 10s, 请求超时 2s")]),s._v("\n$ wrk "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--latency")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" http://192.168.0.30\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("54221")]),s._v(" requests "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(".07s, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),s._v(".16MB "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v("\n  Socket errors: connect "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("write")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("timeout")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("110")]),s._v("\n  Non-2xx or 3xx responses: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("45577")]),s._v("\nRequests/sec:   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5382.21")]),s._v("\nTransfer/sec:      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(".50MB\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("从 wrk 的输出中, 可以看到, 连接跟踪的优化效果非常好, 吞吐量已经从刚才的 189 增大到了 5382. 看起来性能提升了将近 30 倍,")]),s._v(" "),a("p",[s._v("不过, 这是不是就能说明已经把 Nginx 的性能优化好了呢?")]),s._v(" "),a("p",[s._v("别急, 再来看看 wrk 汇报的其他数据. 果然, 10s 内的总请求数虽然增大到了 5 万, 但是"),a("strong",[s._v("有 4 万多响应异常")]),s._v(", 说白了, 真正成功的只有 8000 多个(54221-45577=8644).")]),s._v(" "),a("p",[s._v("很明显, 大部分请求的响应都是异常的. 那么该怎么分析响应异常的问题呢?")]),s._v(" "),a("h6",{attrs:{id:"_2-工作进程优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-工作进程优化"}},[s._v("#")]),s._v(" (2)工作进程优化")]),s._v(" "),a("p",[s._v("由于这些响应并非 Socket error, 说明 Nginx 已经收到了请求, 只不过, 响应的状态码并不是期望的 2xx (表示成功)或 3xx(表示重定向). 所以这种情况下, 搞清楚 Nginx 真正的响应就很重要了.")]),s._v(" "),a("p",[s._v("不过这也不难, 切换回终端一, 执行下面的 docker 命令, 查询 Nginx 容器日志就知道了:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" logs nginx "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--tail")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.2 - - "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),s._v("/Mar/2019:2243:27 +0000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"GET / HTTP/1.1"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("499")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.2 - - "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),s._v("/Mar/2019:22:43:27 +0000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"GET / HTTP/1.1"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("499")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.2 - - "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),s._v("/Mar/2019:22:43:27 +0000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"GET / HTTP/1.1"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("499")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("从 Nginx 的日志中, 可以看到响应状态码为 499.")]),s._v(" "),a("p",[a("mark",[a("strong",[s._v("499 并非标准的 HTTP 状态码, 而是由 Nginx 扩展而来, 表示服务器端还没来得及响应时, 客户端就已经关闭连接了. 换句话说, 问题在于服务器端处理太慢, 客户端因为超时(wrk 超时时间为 2s), 主动断开了连接.")])])]),s._v(" "),a("p",[s._v("既然问题出在了服务器端处理慢, 而案例本身是 Nginx+PHP 的应用, 那是不是可以猜测, 是因为 PHP 处理过慢呢?  可以在终端中, 执行下面的 docker 命令, 查询 PHP 容器日志:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" logs phpfpm "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--tail")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),s._v("-Mar-2019 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v(":28:56"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" WARNING: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("pool www"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" server reached max_children setting "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(", consider raising it\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),s._v("-Mar-2019 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v(":43:17"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" WARNING: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("pool www"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" server reached max_children setting "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(", consider raising it\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("从这个日志中, 可以看到两条警告信息, server reached max_children setting (5), 并建议增大 max_children.")]),s._v(" "),a("p",[s._v("max_children 表示 php-fpm 子进程的最大数量, 当然是数值越大, 可以同时处理的请求数就越多. 不过由于这是进程问题, 数量增大, 也会导致更多的内存和 CPU 占用. 所以还不能设置得过大.")]),s._v(" "),a("p",[s._v("一般来说, 每个 php-fpm 子进程可能会占用 20 MB 左右的内存. 所以可以根据内存和 CPU 个数, 估算一个合理的值. 这儿把它设置成了 20, 并将优化后的配置重新打包成了 Docker 镜像. 可以执行下面的命令来执行它:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 停止旧的容器")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-f")]),s._v(" nginx phpfpm\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用新镜像启动 Nginx 和 PHP")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),s._v(" nginx "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--network")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("host")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--privileged")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-itd")]),s._v(" feisky/nginx-tp:1\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),s._v(" phpfpm "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--network")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("host")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--privileged")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-itd")]),s._v(" feisky/php-fpm-tp:1\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("然后切换到终端二, 再次执行下面的 wrk 命令, 重新测试 Nginx 的性能:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 默认测试时间为 10s, 请求超时 2s")]),s._v("\n$ wrk "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--latency")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" http://192.168.0.30\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("47210")]),s._v(" requests "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(".08s, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(".51MB "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v("\n  Socket errors: connect "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("write")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("timeout")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("91")]),s._v("\n  Non-2xx or 3xx responses: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("31692")]),s._v("\nRequests/sec:   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4683.82")]),s._v("\nTransfer/sec:      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(".24MB\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("从 wrk 的输出中, 可以看到, 虽然吞吐量只有 4683, 比刚才的 5382 少了一些; 但是测试期间成功的请求数却多了不少, 从原来的 8000, 增长到了 15000(47210-31692=15518).")]),s._v(" "),a("p",[s._v("不过, 虽然性能有所提升, 可 4000 多的吞吐量显然还是比较差的, 并且大部分请求的响应依然还是异常. 接下来, 该怎么去进一步提升 Nginx 的吞吐量呢?")]),s._v(" "),a("h6",{attrs:{id:"_3-套接字优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-套接字优化"}},[s._v("#")]),s._v(" (3)套接字优化")]),s._v(" "),a("p",[s._v("回想一下网络性能的分析套路, 以及 Linux 协议栈的原理, 可以从"),a("strong",[s._v("套接字, TCP 协议等逐层分析")]),s._v(". 而分析的第一步, 自然还是要观察有没有发生丢包现象.")]),s._v(" "),a("p",[s._v("切换到终端二中, 重新运行测试, 这次还是要用 -d 参数延长测试时间, 以便模拟性能瓶颈的现场:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 测试时间 30 分钟")]),s._v("\n$ wrk "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--latency")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1800")]),s._v(" http://192.168.0.30\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("然后回到终端一中, 观察有没有发生套接字的丢包现象:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 只关注套接字统计")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("netstat")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-s")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" socket\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("73")]),s._v(" resets received "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" embryonic SYN_RECV sockets\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("308582")]),s._v(" TCP sockets finished "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("time")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("wait")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" fast timer\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(" delayed acks further delayed because of locked socket\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("290566")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("times")]),s._v(" the listen queue of a socket overflowed\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("290566")]),s._v(" SYNs to LISTEN sockets dropped\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 稍等一会, 再次运行")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("netstat")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-s")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" socket\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("73")]),s._v(" resets received "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" embryonic SYN_RECV sockets\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("314722")]),s._v(" TCP sockets finished "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("time")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("wait")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" fast timer\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(" delayed acks further delayed because of locked socket\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("344440")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("times")]),s._v(" the listen queue of a socket overflowed\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("344440")]),s._v(" SYNs to LISTEN sockets dropped\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("根据两次统计结果中 socket overflowed 和 sockets dropped 的变化, 可以看到, "),a("strong",[s._v("有大量的套接字丢包, 并且丢包都是套接字队列溢出导致的")]),s._v(". 所以, 接下来应该分析连接队列的大小是不是有异常.")]),s._v(" "),a("p",[s._v("可以执行下面的命令, 查看套接字的队列大小:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ ss "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-ltnp")]),s._v("\nState     Recv-Q     Send-Q            Local Address:Port            Peer Address:Port\nLISTEN    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("                      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(".0.0:80                   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(".0.0:*         users:"),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("((")]),s._v('"nginx"'),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("pid"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10491")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("fd"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v('"nginx"'),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("pid"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10490")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("fd"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v('"nginx"'),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("pid"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10487")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("fd"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("))")])]),s._v("\nLISTEN    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v("          "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("                            *:9000                       *:*         users:"),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("((")]),s._v('"php'),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v('fpm"'),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("pid"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11084")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("fd"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("..."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v('"php'),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v('fpm"'),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("pid"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10529")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("fd"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("))")])]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("这次可以看到, Nginx 和 php-fpm 的监听队列 (Send-Q)只有 10, 而 nginx 的当前监听队列长度 (Recv-Q)已经达到了最大值, php-fpm 也已经接近了最大值. 很明显, 套接字监听队列的长度太小了, 需要增大.")]),s._v(" "),a("p",[s._v("关于套接字监听队列长度的设置, 既可以在应用程序中, 通过套接字接口调整, 也支持通过内核选项来配置. 继续在终端一中, 执行下面的命令, 分别查询 Nginx 和内核选项对监听队列长度的配置:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询 nginx 监听队列长度配置")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" nginx "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" /etc/nginx/nginx.conf "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" backlog\n        listen       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("backlog")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询 php-fpm 监听队列长度")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" phpfpm "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" /opt/bitnami/php/etc/php-fpm.d/www.conf "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" backlog\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" Set listen"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" backlog.\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("listen.backlog "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("511")]),s._v("\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# somaxconn 是系统级套接字监听队列上限")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sysctl")]),s._v(" net.core.somaxconn\nnet.core.somaxconn "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("从输出中可以看到, Nginx 和 somaxconn 的配置都是 10, 而 php-fpm 的配置也只有 511, 显然都太小了. 那么, 优化方法就是增大这三个配置, 比如可以把 Nginx 和 php-fpm 的队列长度增大到 8192, 而把 somaxconn 增大到 65536.")]),s._v(" "),a("p",[s._v("同样地, 也把这些优化后的 Nginx, 重新打包成了两个 Docker 镜像, 可以执行下面的命令来运行它:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 停止旧的容器")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-f")]),s._v(" nginx phpfpm\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用新镜像启动 Nginx 和 PHP")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),s._v(" nginx "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--network")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("host")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--privileged")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-itd")]),s._v(" feisky/nginx-tp:2\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),s._v(" phpfpm "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--network")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("host")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--privileged")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-itd")]),s._v(" feisky/php-fpm-tp:2\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("切换到终端二中, 重新测试 Nginx 的性能:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ wrk "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--latency")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" http://192.168.0.30\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("62247")]),s._v(" requests "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(".06s, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),s._v(".25MB "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v("\n  Non-2xx or 3xx responses: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("62247")]),s._v("\nRequests/sec:   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6185.65")]),s._v("\nTransfer/sec:      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(".81MB\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("现在的吞吐量已经增大到了 6185, 并且在测试的时候, 如果在终端一中重新执行 "),a("code",[s._v("netstat -s grep socket")]),s._v("​, 还会发现, 现在已经没有套接字丢包问题了.")]),s._v(" "),a("p",[s._v("不过, 这次 Nginx 的响应, 再一次全部失败了, 都是 Non-2xx or 3xx. 这是怎么回事呢? 再去终端一中, 查看 Nginx 日志:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" logs nginx "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--tail")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2019")]),s._v("/03/15 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(":52:39 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("crit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#15: *999779 connect() to 127.0.0.1:9000 failed (99: Cannot assign requested address) while connecting to upstream, client: 192.168.0.2, server: localhost, request: "GET / HTTP/1.1", upstream: "fastcgi://127.0.0.1:9000", host: "192.168.0.30"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("可以看到, Nginx 报出了无法连接 fastcgi 的错误, 错误消息是 Connect 时, Cannot assign requested address. 这个错误消息对应的错误代码为 EADDRNOTAVAIL, 表示 "),a("strong",[s._v("IP 地址或者端口号不可用")]),s._v(".")]),s._v(" "),a("p",[s._v("在这里, 显然只能是端口号的问题. 接下来就来分析端口号的情况.")]),s._v(" "),a("h6",{attrs:{id:"_4-端口号优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-端口号优化"}},[s._v("#")]),s._v(" (4)端口号优化")]),s._v(" "),a("p",[s._v("根据网络套接字的原理, 当客户端连接服务器端时, 需要分配一个"),a("strong",[s._v("临时端口号")]),s._v(", 而 Nginx 正是 PHP-FPM 的客户端. "),a("strong",[s._v("端口号的范围并不是无限的, 最多也只有 6 万多")]),s._v(".")]),s._v(" "),a("p",[s._v("执行下面的命令, 就可以查询系统配置的临时端口号范围:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sysctl")]),s._v(" net.ipv4.ip_local_port_range\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("net.ipv4.ip_local_port_range")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20050")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v('可以看到, 临时端口的范围只有 50 个, 显然太小了. 优化方法很容易想到, 增大这个范围就可以了. 比如可以执行下面的命令, 把端口号范围扩展为 "10000 65535":')]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sysctl")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-w")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("net.ipv4.ip_local_port_range")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"10000 65535"')]),s._v("\nnet.ipv4.ip_local_port_range "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("65535")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("优化完成后, 再次切换到终端二中, 测试性能:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ wrk "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--latency")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" http://192.168.0.30/\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("32308")]),s._v(" requests "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(".07s, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(".71MB "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v("\n  Socket errors: connect "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2027")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("write")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("timeout")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("433")]),s._v("\n  Non-2xx or 3xx responses: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),s._v("\nRequests/sec:   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3208.58")]),s._v("\nTransfer/sec:    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("682")]),s._v(".15KB\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("这次, 异常的响应少多了 , 不过吞吐量也下降到了 3208. 并且这次还出现了很多 Socket read errors. 显然, 还得进一步优化.")]),s._v(" "),a("h6",{attrs:{id:"_5-火焰图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-火焰图"}},[s._v("#")]),s._v(" (5)火焰图")]),s._v(" "),a("p",[s._v("前面已经优化了很多配置. 这些配置在优化网络的同时, 却也会带来其他资源使用的上升. 这样来看, 是不是说明其他资源遇到瓶颈了呢?")]),s._v(" "),a("p",[s._v("不妨在终端二中重新启动长时间测试. 然后切换回终端一中, 执行 top , 观察 CPU 和内存的使用:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n%Cpu0  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30.7")]),s._v(" us, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("48.7")]),s._v(" sy,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" ni,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.3")]),s._v(" id,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" wa,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" hi, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18.3")]),s._v(" si,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" st\n%Cpu1  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("28.2")]),s._v(" us, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("46.5")]),s._v(" sy,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" ni,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.0")]),s._v(" id,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" wa,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" hi, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("23.3")]),s._v(" si,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" st\nKiB Mem "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8167020")]),s._v(" total,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5867788")]),s._v(" free,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("490400")]),s._v(" used,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1808832")]),s._v(" buff/cache\nKiB Swap:        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" total,        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" free,        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" used.  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7361172")]),s._v(" avail Mem\n \n  PID "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("USER")]),s._v("      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20379")]),s._v(" systemd+  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("38068")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8692")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2392")]),s._v(" R  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("36.1")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":28.86 nginx\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20381")]),s._v(" systemd+  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("38024")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8700")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2392")]),s._v(" S  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("33.8")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":29.29 nginx\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1558")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1118172")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("85868")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("39044")]),s._v(" S  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("32.8")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.1")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v(":55.79 dockerd\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20313")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11024")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5968")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3956")]),s._v(" S  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("27.2")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":22.78 docker-containe\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13730")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" I   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":10.07 kworker/u4:0-ev\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("从 top 的结果中可以看到, 可用内存还是很充足的, 但系统 CPU "),a("strong",[s._v("使用率(sy)比较高")]),s._v(", 两个 CPU 的系统 CPU 使用率都接近 50%, 且空闲 CPU 使用率只有 2%. 再看进程部分, CPU 主要被两个 Nginx 进程和两个 docker 相关的进程占用, 使用率都是 30% 左右.")]),s._v(" "),a("p",[s._v("CPU 使用率上升了, 该怎么进行分析呢? 可以使用 perf, 再配合前两节讲过的火焰图, 很容易就能找到系统中的热点函数.")]),s._v(" "),a("p",[s._v("保持终端二中的 wrk 继续运行; 在终端一中, 执行 perf 和 flamegraph 脚本, 生成火焰图:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 执行 perf 记录事件")]),s._v("\n$ perf record "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-g")]),s._v("\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 切换到 FlameGraph 安装路径执行下面的命令生成火焰图")]),s._v("\n$ perf script "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-i")]),s._v(" ~/perf.data "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" ./stackcollapse-perf.pl "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--all")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" ./flamegraph.pl "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" nginx.svg\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("然后, 使用浏览器打开生成的 nginx.svg, 就可以看到下面的火焰图:")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/345630d08d8e041c54a20562554244f5-20230731161933-tfljk8w.png",alt:""}})]),s._v(" "),a("p",[s._v("根据火焰图原理, 这个图应该从下往上, 沿着调用栈中最宽的函数, 来分析执行次数最多的函数.")]),s._v(" "),a("p",[s._v("这儿中间的 do_syscall_64, tcp_v4_connect, inet_hash_connect 这个堆栈, 很明显就是最需要关注的地方. "),a("strong",[s._v("inet_hash_connect() 是 Linux 内核中负责分配临时端口号的函数")]),s._v('. 所以这个瓶颈应该还在临时端口的分配上. 在上一步的 "端口号" 优化中, 临时端口号的范围, 已经优化成了 "10000 65535". 这显然是一个非常大的范围, 那么, 端口号的分配为什么又成了瓶颈呢?')]),s._v(" "),a("p",[s._v("一时想不到也没关系, 可以暂且放下, 先看看其他因素的影响. 再顺着 inet_hash_connect 往堆栈上面查看, 下一个热点是 "),a("code",[s._v("__init_check_established")]),s._v("​ 函数. 而这个函数的目的, 是检查端口号是否可用. 结合这一点, 应该可以想到, 如果"),a("strong",[s._v("有大量连接占用着端口, 那么检查端口号可用的函数, 不就会消耗更多的 CPU 吗")]),s._v("?")]),s._v(" "),a("p",[s._v("实际是否如此呢? 可以继续在终端一中运行 ss 命令,  查看连接状态统计:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ ss "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-s")]),s._v("\nTCP:   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("32775")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("estab "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(", closed "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("32768")]),s._v(", orphaned "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(", synrecv "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(", timewait "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("32768")]),s._v("/0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(", ports "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("这回可以看到, "),a("strong",[s._v("有大量连接(这儿是 32768)处于 timewait 状态, 而 timewait 状态的连接, 本身会继续占用端口号")]),s._v(". 如果这些端口号可以重用, 那么自然就可以缩短 "),a("code",[s._v("__init_check_established")]),s._v("​ 的过程. 而 Linux 内核中, 恰好有一个 tcp_tw_reuse 选项, 用来控制端口号的重用.")]),s._v(" "),a("p",[s._v("在终端一中, 运行下面的命令, 查询它的配置:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sysctl")]),s._v(" net.ipv4.tcp_tw_reuse\nnet.ipv4.tcp_tw_reuse "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("可以看到, tcp_tw_reuse 是 0, 也就是禁止状态. 其实看到这里就能理解, 为什么临时端口号的分配会是系统运行的热点了. 当然, 优化方法也很容易, 把它设置成 1 就可以开启了.")]),s._v(" "),a("p",[s._v("这里把优化后的应用, 也打包成了两个 Docker 镜像, 可以执行下面的命令来运行:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 停止旧的容器")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-f")]),s._v(" nginx phpfpm\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用新镜像启动 Nginx 和 PHP")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),s._v(" nginx "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--network")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("host")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--privileged")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-itd")]),s._v(" feisky/nginx-tp:3\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),s._v(" phpfpm "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--network")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("host")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--privileged")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-itd")]),s._v(" feisky/php-fpm-tp:3\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("容器启动后, 切换到终端二中, 再次测试优化后的效果:")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ wrk "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--latency")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" http://192.168.0.30/\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("52119")]),s._v(" requests "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(".06s, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(".81MB "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v("\n  Socket errors: connect "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("850")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("write")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("timeout")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\nRequests/sec:   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5180.48")]),s._v("\nTransfer/sec:      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(".07MB\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("现在的吞吐量已经达到了 5000 多, 并且只有少量的 Socket errors, 也不再有 Non-2xx or 3xx 的响应了. 说明一切终于正常了.")]),s._v(" "),a("h5",{attrs:{id:"_2-小结-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-小结-3"}},[s._v("#")]),s._v(" 2.小结")]),s._v(" "),a("p",[s._v("本节学习了服务吞吐量下降后的分析方法. 其实, 从这个案例可以看出, 性能问题的分析, 总是离不开系统和应用程序的原理. 实际上, 分析性能瓶颈, 最核心的也正是掌握运用这些原理.")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("首先, 利用各种性能工具, 收集想要的性能指标, 从而清楚系统和应用程序的运行状态;")])]),s._v(" "),a("li",[a("strong",[s._v("其次, 拿目前状态跟系统原理进行比较, 不一致的地方, 就是要重点分析的对象.")])])]),s._v(" "),a("p",[s._v("从这个角度出发, 再进一步借助 perf, 火焰图, bcc 等动态追踪工具, 找出热点函数, 就可以定位瓶颈的来源, 确定相应的优化方法.")]),s._v(" "),a("h4",{attrs:{id:"_53-套路篇-系统监控的综合思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_53-套路篇-系统监控的综合思路"}},[s._v("#")]),s._v(" 53-套路篇:系统监控的综合思路")]),s._v(" "),a("p",[s._v('前面介绍了很多性能分析的原理, 思路以及相关的工具. 不过, 在实际的性能分析中, 一个很常见的现象是, 明明发生了性能瓶颈, 但当登录到服务器中想要排查的时候, 却发现瓶颈已经消失了. 或者说, 性能问题总是时不时地发生, 但却很难找出发生规律, 也很难重现. 当面对这样的场景时, 你可能会发现, 前面介绍的各种工具, 方法都"失效"了. 为什么呢? 因为它们都需要在性能问题发生的时刻才有效, 而在这些事后分析的场景中, 就很难发挥它们的威力了.')]),s._v(" "),a("p",[s._v("那该怎么办呢? 置之不理吗? 其实以往, 很多应用都是等到用户抱怨响应慢了, 或者系统崩溃了后, 才发现系统或者应用程序的性能出现了问题. 虽然最终也能发现问题, 但显然, 这种方法是不可取的, 因为严重影响了用户的体验.")]),s._v(" "),a("p",[s._v("而要解决这个问题, 就要"),a("strong",[s._v("搭建监控系统")]),s._v(", 把系统和应用程序的运行状况监控起来, 并定义一系列的策略, 在发生问题时第一时间告警通知. 一个好的监控系统, 不仅可以实时暴露系统的各种问题, 更可以根据这些监控到的状态, 自动分析和定位大致的瓶颈来源, 从而更精确地把问题汇报给相关团队处理.")]),s._v(" "),a("p",[a("strong",[s._v("要做好监控, 最核心的就是全面的, 可量化的指标, 这包括系统和应用两个方面")]),s._v(".")]),s._v(" "),a("p",[a("strong",[s._v("从系统来说, 监控系统要涵盖系统的整体资源使用情况, 比如前面讲过的 CPU, 内存, 磁盘和文件系统, 网络等各种系统资源")]),s._v(".")]),s._v(" "),a("p",[a("strong",[s._v("而从应用程序来说, 监控系统要涵盖应用程序内部的运行状态, 这既包括进程的 CPU, 磁盘 I/O 等整体运行状况, 更需要包括诸如接口调用耗时, 执行过程中的错误, 内部对象的内存使用等应用程序内部的运行状况")]),s._v(".")]),s._v(" "),a("p",[s._v("本节就看看"),a("strong",[s._v("如何对 Linux 系统进行监控. 而在下一节将继续讲解应用程序监控的思路")]),s._v(".")]),s._v(" "),a("h5",{attrs:{id:"_1-use法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-use法"}},[s._v("#")]),s._v(" 1.USE法")]),s._v(" "),a("p",[s._v("在开始监控系统之前, 你肯定最想知道, 怎么才能用简洁的方法, 来描述系统资源的使用情况. 当然可以使用专栏中学到的各种性能工具, 来分别收集各种资源的使用情况. 不过不要忘记, 每种资源的性能指标可都有很多, 使用过多指标本身耗时耗力不说, 也不容易为建立起系统整体的运行状况.")]),s._v(" "),a("p",[s._v("这里介绍一种"),a("strong",[s._v("专门用于性能监控的 USE")]),s._v("(Utilization Saturation and Errors)法. USE 法把系统资源的性能指标, 简化成了三个类别, 即"),a("mark",[a("strong",[s._v("使用率, 饱和度以及错误数")])]),s._v(".")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("使用率, 表示资源用于服务的时间或容量百分比")]),s._v(". 100% 的使用率, 表示容量已经用尽或者全部时间都用于服务.")]),s._v(" "),a("li",[a("strong",[s._v("饱和度, 表示资源的繁忙程度, 通常与等待队列的长度相关")]),s._v(". 100% 的饱和度, 表示资源无法接受更多的请求.")]),s._v(" "),a("li",[a("strong",[s._v("错误数表示发生错误的事件个数")]),s._v(". 错误数越多, 表明系统的问题越严重.")])]),s._v(" "),a("p",[s._v("这三个类别的指标, 涵盖了系统资源的常见性能瓶颈, 所以常被用来快速定位系统资源的性能瓶颈. 这样, 无论是对 CPU, 内存, 磁盘和文件系统, 网络等硬件资源, 还是对文件描述符数, 连接数, 连接跟踪数等软件资源, USE 方法都可以帮你快速定位出是哪一种系统资源出现了性能瓶颈.")]),s._v(" "),a("p",[s._v("每一种系统资源, 又有哪些常见的性能指标呢? 下面把常见的性能指标画了一张表格.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/163f13c72ebc2dfd98b6a3e8a10f7521-20230731161933-nyf2ke6.png",alt:""}})]),s._v(" "),a("p",[s._v("需要注意的是, USE 方法只关注能体现系统资源性能瓶颈的核心指标, 但这并不是说其他指标不重要. 诸如系统日志, 进程资源使用量, 缓存使用量等其他各类指标, 也都需要监控起来. 只不过, 它们通常用作辅助性能分析, 而 USE 方法的指标, 则直接表明了系统的资源瓶颈.")]),s._v(" "),a("h5",{attrs:{id:"_2-监控系统"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-监控系统"}},[s._v("#")]),s._v(" 2.监控系统")]),s._v(" "),a("p",[s._v("掌握 USE 方法以及需要监控的性能指标后, 接下来要做的, 就是建立监控系统, 把这些指标保存下来; 然后, 根据这些监控到的状态, 自动分析和定位大致的瓶颈来源; 最后, 再通过告警系统, 把问题及时汇报给相关团队处理.")]),s._v(" "),a("p",[s._v("可以看出, 一个完整的监控系统通常由"),a("strong",[s._v("数据采集, 数据存储, 数据查询和处理, 告警以及可视化展示等多个模块组成")]),s._v(". 所以, 要从头搭建一个监控系统, 其实也是一个很大的系统工程. 现在已经有很多开源的监控工具可以直接使用, 比如最常见的 Zabbix, Nagios, "),a("strong",[s._v("Prometheus")]),s._v(" 等等.")]),s._v(" "),a("p",[s._v("下面就以 Prometheus 为例介绍这几个组件的基本原理. 如下图所示, 就是 Prometheus 的基本架构:")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/645ddaea0b956970b9d6811128aa6c12-20230731161933-9qj6q8k.png",alt:""}})]),s._v(" "),a("p",[s._v("先看"),a("strong",[s._v("数据采集模块")]),s._v(". 最左边的 Prometheus targets 就是数据采集的对象, 而 Retrieval 则负责采集这些数据. 从图中也可以看到, Prometheus "),a("strong",[s._v("同时支持 Push 和 Pull 两种数据采集模式")]),s._v(".")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("Pull 模式, 由服务器端的采集模块来触发采集")]),s._v(". 只要采集目标提供了 HTTP 接口, 就可以自由接入(这也是最常用的采集模式).")]),s._v(" "),a("li",[a("strong",[s._v("Push 模式, 则是由各个采集目标主动向 Push Gateway(用于防止数据丢失)推送指标, 再由服务器端从 Gateway 中拉取过去")]),s._v("(这是移动应用中最常用的采集模式).")])]),s._v(" "),a("p",[s._v("由于需要监控的对象通常都是动态变化的, Prometheus 还提供了服务发现的机制, 可以自动根据预配置的规则, 动态发现需要监控的对象. 这在 Kubernetes 等容器平台中非常有效.")]),s._v(" "),a("p",[s._v("第二个是"),a("strong",[s._v("数据存储模块")]),s._v(". 为了保持监控数据的持久化, 图中的 TSDB(Time series database)模块, 负责将采集到的数据持久化到 SSD 等磁盘设备中. TSDB 是专门为时间序列数据设计的一种数据库, 特点是以时间为索引, 数据量大并且以追加的方式写入.")]),s._v(" "),a("p",[s._v("第三个是"),a("strong",[s._v("数据查询和处理模块")]),s._v(". 刚才提到的 TSDB, 在存储数据的同时, 其实还提供了数据查询和基本的数据处理功能, 而这也就是 PromQL 语言. PromQL 提供了简洁的查询, 过滤功能, 并且支持基本的数据处理方法, 是告警系统和可视化展示的基础.")]),s._v(" "),a("p",[s._v("第四个是"),a("strong",[s._v("告警模块")]),s._v(". 右上角的 AlertManager 提供了告警的功能, 包括基于 PromQL 语言的触发条件, 告警规则的配置管理以及告警的发送等. 不过, 虽然告警是必要的, 但过于频繁的告警显然也不可取. 所以, AlertManager 还支持通过分组, 抑制或者静默等多种方式来聚合同类告警, 并减少告警数量.")]),s._v(" "),a("p",[s._v("最后一个是"),a("strong",[s._v("可视化展示模块")]),s._v(". Prometheus 的 web UI 提供了简单的可视化界面, 用于执行 PromQL 查询语句, 但结果的展示比较单调. 不过, 一旦配合 Grafana, 就可以构建非常强大的图形界面了.")]),s._v(" "),a("p",[s._v("介绍完了这些组件, 想必你对每个模块都有了比较清晰的认识. 接下来再来继续深入了解这些组件结合起来的整体功能.")]),s._v(" "),a("p",[s._v("比如, 以刚才提到的 USE 方法为例, 使用 Prometheus, 可以收集 Linux 服务器的 CPU, 内存, 磁盘, 网络等各类资源的使用率, 饱和度和错误数指标. 然后, 通过 Grafana 以及 PromQL 查询语句, 就可以把它们以图形界面的方式直观展示出来.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/16bb3faa572f905cc8bd0b30b8227dd1-20230731161933-1kmk5pt.png",alt:""}}),a("img",{attrs:{src:"/img/b1f2fe4b336f18605716bce2c1243e2d-20230731161933-92zzo81.png",alt:""}})]),s._v(" "),a("h5",{attrs:{id:"_3-小结-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-小结-9"}},[s._v("#")]),s._v(" 3.小结")]),s._v(" "),a("p",[s._v("本节一起梳理了系统监控的基本思路. "),a("mark",[a("strong",[s._v("系统监控的核心是资源的使用情况, 包括 CPU, 内存, 磁盘和文件系统, 网络等硬件资源, 以及文件描述符数, 连接数, 连接跟踪数等软件资源. 而这些资源, 都可以通过 USE 法来建立核心性能指标")])]),s._v(".")]),s._v(" "),a("p",[s._v("USE 法把系统资源的性能指标, 简化成了三个类别, "),a("strong",[s._v("即使用率, 饱和度以及错误数")]),s._v(". 这三者任一类别过高时, 都代表相对应的系统资源有可能存在性能瓶颈.")]),s._v(" "),a("p",[s._v("基于 USE 法建立性能指标后, 还需要通过一套完整的监控系统, 把这些指标从采集, 存储, 查询, 处理, 再到告警和可视化展示等串联起来. 可以基于 Zabbix, Prometheus 等各种开源的监控产品, 构建这套监控系统. 这样, 不仅可以将系统资源的瓶颈快速暴露出来, 还可以借助监控的历史, 事后追查定位问题.")]),s._v(" "),a("h4",{attrs:{id:"_54-套路篇-应用监控的一般思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_54-套路篇-应用监控的一般思路"}},[s._v("#")]),s._v(" 54-套路篇:应用监控的一般思路")]),s._v(" "),a("p",[s._v("上一节学习了如何使用 USE 法来监控系统的性能, 除了系统资源需要监控之外, 应用程序的性能监控, 当然也是必不可少的. 本节就看看如何监控应用程序的性能.")]),s._v(" "),a("h5",{attrs:{id:"_1-指标监控"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-指标监控"}},[s._v("#")]),s._v(" 1.指标监控")]),s._v(" "),a("p",[s._v("跟系统监控一样, 在构建应用程序的监控系统之前, 首先也需要确定, 到底需要监控哪些指标. 特别是要清楚, 有哪些指标可以用来快速确认应用程序的性能问题.")]),s._v(" "),a("p",[s._v("对系统资源的监控, USE 法简单有效, 却不代表其适合应用程序的监控. 举个例子, 即使在 CPU 使用率很低的时候, 也不能说明应用程序就没有性能瓶颈. 因为应用程序可能会因为锁或者 RPC 调用等, 导致响应缓慢.")]),s._v(" "),a("p",[s._v("所以, "),a("mark",[a("strong",[s._v("应用程序的核心指标, 不再是资源的使用情况, 而是请求数, 错误率和响应时间")])]),s._v(". 这些指标不仅直接关系到用户的使用体验, 还反映应用整体的可用性和可靠性.")]),s._v(" "),a("p",[s._v('有了请求数, 错误率和响应时间这三个黄金指标之后, 就可以快速知道应用是否发生了性能问题. 但只有这些指标显然还是不够的, 因为发生性能问题后, 还希望能够快速定位"性能瓶颈区". 所以 下面几种指标, 也是监控应用程序时必不可少的.')]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("第一个, 是应用进程的资源使用情况")]),s._v(", 比如进程占用的 CPU, 内存, 磁盘 I/O, 网络等. 使用过多的系统资源, 导致应用程序响应缓慢或者错误数升高, 是一个最常见的性能问题.")]),s._v(" "),a("li",[a("strong",[s._v("第二个, 是应用程序之间调用情况")]),s._v(", 比如调用频率, 错误数, 延时等. 由于应用程序并不是孤立的, 如果其依赖的其他应用出现了性能问题, 应用自身性能也会受到影响.")]),s._v(" "),a("li",[a("strong",[s._v("第三个, 是应用程序内部核心逻辑的运行情况")]),s._v(", 比如关键环节的耗时以及执行过程中的错误等. 由于这是应用程序内部的状态, 从外部通常无法直接获取到详细的性能数据. 所以应用程序在设计和开发时, 就应该把这些指标提供出来, 以便监控系统可以了解其内部运行状态.")])]),s._v(" "),a("p",[s._v("有了应用进程的资源使用指标, 就可以把系统资源的瓶颈跟应用程序关联起来, 从而迅速定位因系统资源不足而导致的性能问题;")]),s._v(" "),a("ul",[a("li",[s._v("有了应用程序之间的调用指标, 可以迅速分析出一个请求处理的调用链中, 到底哪个组件才是导致性能问题的罪魁祸首;")]),s._v(" "),a("li",[s._v("而有了应用程序内部核心逻辑的运行性能, 就可以更进一步, 直接进入应用程序的内部, 定位到底是哪个处理环节的函数导致了性能问题.")])]),s._v(" "),a("p",[s._v("基于这些思路就可以构建出描述应用程序运行状态的性能指标. 再将这些指标纳入监控系统(比如 Prometheus + Grafana)中, 就可以跟系统监控一样, 一方面通过告警系统, 把问题及时汇报给相关团队处理; 另一方面, 通过直观的图形界面, 动态展示应用程序的整体性能.")]),s._v(" "),a("p",[s._v("除此之外, "),a("strong",[s._v("由于业务系统通常会涉及到一连串的多个服务, 形成一个复杂的分布式调用链")]),s._v(". 为了迅速定位这类跨应用的性能瓶颈, 还可以使用 Zipkin, Jaeger, Pinpoint 等各类开源工具, 来构建"),a("strong",[s._v("全链路跟踪系统")]),s._v(".")]),s._v(" "),a("p",[s._v("比如, 下图就是一个 Jaeger 调用链跟踪的示例.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/1cb978774d13626bbb6f1b16b10ef9a6-20230731161933-ccx0ihp.png",alt:""}})]),s._v(" "),a("p",[s._v("全链路跟踪可以帮你迅速定位出, 在一个请求处理过程中, 哪个环节才是问题根源. 比如, 从上图中就可以很容易看到, 这是 Redis 超时导致的问题.")]),s._v(" "),a("p",[s._v("全链路跟踪除了可以帮助快速定位跨应用的性能问题外, 还可以生成线上系统的调用拓扑图. 这些直观的拓扑图, 在分析复杂系统(比如微服务)时尤其有效.")]),s._v(" "),a("h5",{attrs:{id:"_2-日志监控"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-日志监控"}},[s._v("#")]),s._v(" 2.日志监控")]),s._v(" "),a("p",[s._v("性能指标的监控, 可以迅速定位发生瓶颈的位置, 不过只有指标的话往往还不够. 比如, 同样的一个接口, 当请求传入的参数不同时, 就可能会导致完全不同的性能问题. 所以, 除了指标外, 还需要对这些指标的上下文信息进行监控, 而日志正是这些上下文的最佳来源.")]),s._v(" "),a("p",[s._v("对比来看:")]),s._v(" "),a("ul",[a("li",[s._v("指标是特定时间段的数值型测量数据, 通常以时间序列的方式处理, 适合于实时监控.")]),s._v(" "),a("li",[s._v("而日志则完全不同, 日志都是某个时间点的字符串消息, 通常需要对搜索引擎进行索引后, 才能进行查询和汇总分析.")])]),s._v(" "),a("p",[s._v("对日志监控来说, 最经典的方法, 就是使用 ELK 技术栈, 即使用 Elasticsearch, Logstash 和 Kibana 这三个组件的组合. 如下图所示, 就是一个经典的 ELK 架构图:")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/a8591f10e94ee4cd96a22114dcdb5c49-20230731161933-3lcfs7w.png",alt:""}})]),s._v(" "),a("p",[s._v("这其中:")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("Logstash")]),s._v(" 负责对从各个日志源采集日志, 然后进行预处理, 最后再把初步处理过的日志, 发送给 Elasticsearch 进行索引.")]),s._v(" "),a("li",[a("strong",[s._v("Elasticsearch")]),s._v(" 负责对日志进行索引, 并提供了一个完整的全文搜索引擎, 这样就可以方便你从日志中检索需要的数据.")]),s._v(" "),a("li",[a("strong",[s._v("Kibana")]),s._v(" 则负责对日志进行可视化分析, 包括日志搜索, 处理以及绚丽的仪表板展示等.")])]),s._v(" "),a("p",[s._v("下面这张图, 就是一个 Kibana 仪表板的示例, 它直观展示了 Apache 的访问概况.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/dca793acab626fd7ffd5fac16eb675c2-20230731161933-dmw3idq.png",alt:""}})]),s._v(" "),a("p",[s._v("值得注意的是, ELK 技术栈中的 Logstash 资源消耗比较大. 所以, 在资源紧张的环境中, 往往使用资源消耗更低的 "),a("strong",[s._v("Fluentd, 来替代 Logstash(也就是所谓的 EFK 技术栈)")]),s._v(" .")]),s._v(" "),a("h5",{attrs:{id:"_3-小结-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-小结-10"}},[s._v("#")]),s._v(" 3.小结")]),s._v(" "),a("p",[s._v("本节梳理了应用程序监控的基本思路. 应用程序的监控, 可以分为指标监控和日志监控两大部分:")]),s._v(" "),a("ul",[a("li",[s._v("指标监控主要是对一定时间段内性能指标进行测量, 然后再通过时间序列的方式, 进行处理, 存储和告警.")]),s._v(" "),a("li",[s._v("日志监控则可以提供更详细的上下文信息, 通常通过 ELK 技术栈来进行收集, 索引和图形化展示.")])]),s._v(" "),a("p",[s._v("在跨多个不同应用的复杂业务场景中, 还可以构建全链路跟踪系统. 这样可以动态跟踪调用链中各个组件的性能, 生成整个流程的调用拓扑图, 从而加快定位复杂应用的性能问题.")]),s._v(" "),a("h4",{attrs:{id:"_55-套路篇-分析性能问题的一般步骤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_55-套路篇-分析性能问题的一般步骤"}},[s._v("#")]),s._v(" 55-套路篇:分析性能问题的一般步骤")]),s._v(" "),a("p",[s._v("上一节学习了, 应用程序监控的基本思路. 不过, 如果"),a("strong",[s._v("收到监控系统的告警, 发现系统资源或者应用程序出现性能瓶颈, 又该如何进一步分析它的根源呢")]),s._v("? 今天就分别"),a("strong",[s._v("从系统资源瓶颈和应用程序瓶颈这两个角度来看看, 性能分析的一般步骤")]),s._v(".")]),s._v(" "),a("h5",{attrs:{id:"_1-系统资源瓶颈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-系统资源瓶颈"}},[s._v("#")]),s._v(" 1.系统资源瓶颈")]),s._v(" "),a("p",[s._v("首先来看系统资源的瓶颈, 这也是最为常见的性能问题.")]),s._v(" "),a("p",[s._v("在系统监控的综合思路篇中曾经介绍过, 系统资源的瓶颈, 可以通过 USE 法, 即"),a("strong",[s._v("使用率, 饱和度以及错误数这三类指标来衡量")]),s._v(". 系统的资源, 可以分为"),a("strong",[s._v("硬件资源和软件资源")]),s._v("两类.")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("如 CPU, 内存, 磁盘和文件系统以及网络等, 都是最常见的硬件资源")]),s._v(".")]),s._v(" "),a("li",[a("strong",[s._v("而文件描述符数, 连接跟踪数, 套接字缓冲区大小等, 则是典型的软件资源")]),s._v(".")])]),s._v(" "),a("p",[s._v("这样, 在收到监控系统告警时, 就可以对照这些资源列表, 再根据指标的不同来进行定位.")]),s._v(" "),a("p",[s._v("实际上, 专栏前四大模块的核心, 正是学会去分析这些资源瓶颈导致的性能问题. 所以当碰到了系统资源的性能瓶颈时, 前面模块的所有思路, 方法以及工具, 都完全可以照用.")]),s._v(" "),a("p",[s._v("接下来就从 CPU 性能, 内存性能, 磁盘和文件系统 I/O 性能以及网络性能等四个方面, 在回顾一下它们的分析步骤.")]),s._v(" "),a("h6",{attrs:{id:"_1-cpu性能分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-cpu性能分析"}},[s._v("#")]),s._v(" (1)CPU性能分析")]),s._v(" "),a("p",[s._v("第一种最常见的系统资源是 CPU. 关于 CPU 的性能分析方法, 已经整理了一个迅速分析 CPU 性能瓶颈的思路. 还记得这张图吗? 利用 top, vmstat, pidstat, strace 以及 perf 等几个最常见的工具, 获取 CPU 性能指标后, 再结合进程与 CPU 的工作原理, 就可以迅速定位出 CPU 性能瓶颈的来源.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/9f7136a8a70a34f9a2dba73ed8d0471d-20230731161933-ure4v3h.png",alt:""}})]),s._v(" "),a("p",[s._v("实际上, top, pidstat, vmstat 这类工具所汇报的 CPU 性能指标, 都源自 "),a("code",[s._v("/proc")]),s._v("​ 文件系统(比如 "),a("code",[s._v("/proc/loadavg")]),s._v("​, "),a("code",[s._v("/proc/stat")]),s._v("​, "),a("code",[s._v("/proc/softirqs")]),s._v("​ 等). 这些指标, 都应该通过监控系统监控起来. 虽然并非所有指标都需要报警, 但这些指标却可以加快性能问题的定位分析.")]),s._v(" "),a("p",[s._v("比如说, 当收到系统的用户 CPU 使用率过高告警时, 从监控系统中直接查询到, 导致 CPU 使用率过高的进程; 然后再登录到进程所在的 Linux 服务器中, 分析该进程的行为.")]),s._v(" "),a("p",[s._v("可以使用 strace, 查看进程的系统调用汇总; 也可以使用 perf 等工具, 找出进程的热点函数; 甚至还可以使用动态追踪的方法, 来观察进程的当前执行过程, 直到确定瓶颈的根源.")]),s._v(" "),a("h6",{attrs:{id:"_2-内存性能分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-内存性能分析"}},[s._v("#")]),s._v(" (2)内存性能分析")]),s._v(" "),a("p",[s._v("说完了 CPU 的性能分析, 再来看看第二种系统资源, 即内存. 关于内存性能的分析方法, 前面也整理了一个快速分析的思路. 下面这张图, 就是一个迅速定位内存瓶颈的流程. 可以通过 free 和 vmstat 输出的性能指标, 确认内存瓶颈; 然后再根据内存问题的类型, 进一步分析内存的使用, 分配, 泄漏以及缓存等, 最后找出问题的来源.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/1475e842190d3f18fb6e5bff1756a46c-20230731161933-yenci90.png",alt:""}})]),s._v(" "),a("p",[s._v("同 CPU 性能一样, 很多内存的性能指标, 也来源于 "),a("code",[s._v("/proc")]),s._v("​ 文件系统(比如 "),a("code",[s._v("/proc/meminfo")]),s._v("​, "),a("code",[s._v("/proc/slabinfo")]),s._v("​ 等), 它们也都应该通过监控系统监控起来. 这样, 当收到内存告警时, 就可以从监控系统中, 直接得到上图中的各项性能指标, 从而加快性能问题的定位过程.")]),s._v(" "),a("p",[s._v("比如说, 当收到内存不足的告警时, 首先可以从监控系统中. 找出占用内存最多的几个进程. 然后, 再根据这些进程的内存占用历史, 观察是否存在内存泄漏问题. 确定出最可疑的进程后, 再登录到进程所在的 Linux 服务器中, 分析该进程的内存空间或者内存分配, 最后弄清楚进程为什么会占用大量内存.")]),s._v(" "),a("h6",{attrs:{id:"_3-磁盘和文件系统i-o性能分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-磁盘和文件系统i-o性能分析"}},[s._v("#")]),s._v(" (3)磁盘和文件系统I/O性能分析")]),s._v(" "),a("p",[s._v("接下来再来看第三种系统资源, 即磁盘和文件系统的 I/O. 关于磁盘和文件系统的 I/O 性能分析方法, 也已经整理了一个快速分析的思路.")]),s._v(" "),a("p",[s._v("看下面这张图. 当使用 iostat, 发现磁盘 I/O 存在性能瓶颈(比如 I/O 使用率过高, 响应时间过长或者等待队列长度突然增大等)后, 可以再通过 pidstat, vmstat 等, 确认 I/O 的来源. 接着, 再根据来源的不同, 进一步分析文件系统和磁盘的使用率, 缓存以及进程的 I/O 等, 从而揪出 I/O 问题的真凶.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/5e267df614c69627809f9ba80826b6de-20230731161933-xxa98ut.png",alt:""}})]),s._v(" "),a("p",[s._v("同 CPU 和内存性能类似, 很多磁盘和文件系统的性能指标, 也来源于 "),a("code",[s._v("/pro")]),s._v("​c 和 "),a("code",[s._v("/sys")]),s._v("​ 文件系统(比如 /"),a("code",[s._v("proc/diskstats")]),s._v("​, "),a("code",[s._v("/sys/block/sda/stat")]),s._v("​ 等). 自然, 它们也应该通过监控系统监控起来. 这样当收到 I/O 性能告警时, 就可以从监控系统中, 直接得到上图中的各项性能指标, 从而加快性能定位的过程.")]),s._v(" "),a("p",[s._v("比如说, 当发现某块磁盘的 I/O 使用率为 100% 时, 首先可以从监控系统中, 找出 I/O 最多的进程. 然后, 再登录到进程所在的 Linux 服务器中, 借助 strace, lsof, perf 等工具, 分析该进程的 I/O 行为. 最后, 再结合应用程序的原理, 找出大量 I/O 的原因.")]),s._v(" "),a("h6",{attrs:{id:"_4-网络性能分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-网络性能分析"}},[s._v("#")]),s._v(" (4)网络性能分析")]),s._v(" "),a("p",[s._v("最后的网络性能, 其实包含两类资源, 即网络接口和内核资源. 前面曾提到过, 网络性能的分析, 要从 Linux 网络协议栈的原理来切入. 下面这张图, 就是 Linux 网络协议栈的基本原理, 包括应用层, 套机字接口, 传输层, 网络层以及链路层等.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/553918d989c0cd114b3cc5bc2011e620-20230731161933-6zjp6q3.png",alt:""}})]),s._v(" "),a("p",[s._v("而要分析网络的性能, 自然也是要从这几个协议层入手, 通过使用率, 饱和度以及错误数这几类性能指标, 观察是否存在性能问题. 比如:")]),s._v(" "),a("ul",[a("li",[s._v("在链路层, 可以从网络接口的吞吐量, 丢包, 错误以及软中断和网络功能卸载等角度分析;")]),s._v(" "),a("li",[s._v("在网络层, 可以从路由, 分片, 叠加网络等角度进行分析;")]),s._v(" "),a("li",[s._v("在传输层, 可以从 TCP, UDP 的协议原理出发, 从连接数, 吞吐量, 延迟, 重传等角度进行分析;")]),s._v(" "),a("li",[s._v("在应用层, 可以从应用层协议(如 HTTP 和 DNS), 请求数(QPS), 套接字缓存等角度进行分析.")])]),s._v(" "),a("p",[s._v("同前面几种资源类似, 网络的性能指标也都来源于内核, 包括 "),a("code",[s._v("/proc")]),s._v("​ 文件系统(如 "),a("code",[s._v("/proc/net")]),s._v("​), 网络接口以及 conntrack 等内核模块. 这些指标同样需要被监控系统监控. 这样, 当收到网络告警时, 就可以从监控系统中, 查询这些协议层的各项性能指标, 从而更快定位出性能问题.")]),s._v(" "),a("p",[s._v("比如, 当收到网络不通的告警时, 就可以从监控系统中, 查找各个协议层的丢包指标, 确认丢包所在的协议层. 然后, 从监控系统的数据中, 确认网络带宽, 缓冲区, 连接跟踪数等软硬件, 是否存在性能瓶颈. 最后再登录到发生问题的 Linux 服务器中, 借助 netstat, tcpdump, bcc 等工具, 分析网络的收发数据, 并且结合内核中的网络选项以及 TCP 等网络协议的原理, 找出问题的来源.")]),s._v(" "),a("h5",{attrs:{id:"_2-应用程序瓶颈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-应用程序瓶颈"}},[s._v("#")]),s._v(" 2.应用程序瓶颈")]),s._v(" "),a("p",[s._v("除了以上这些来自网络资源的瓶颈外, 还有很多瓶颈, 其实直接来自应用程序. 比如最典型的应用程序性能问题, 就是吞吐量(并发请求数)下降, 错误率升高以及响应时间增大.")]),s._v(" "),a("p",[s._v("不过, 在我看来, 这些应用程序性能问题虽然各种各样, 但就其本质来源, 实际上只有三种, 也就是"),a("strong",[s._v("资源瓶颈, 依赖服务瓶颈以及应用自身的瓶颈")]),s._v(".")]),s._v(" "),a("p",[s._v("第一种"),a("strong",[s._v("资源瓶颈")]),s._v(", 其实还是指刚才提到的 CPU, 内存, 磁盘和文件系统 I/O, 网络以及内核资源等各类软硬件资源出现了瓶颈, 从而导致应用程序的运行受限. 对于这种情况就可以用前面系统资源瓶颈模块提到的各种方法来分析.")]),s._v(" "),a("p",[s._v("第二种"),a("strong",[s._v("依赖服务的瓶颈")]),s._v(", 也就是诸如数据库, 分布式缓存, 中间件等应用程序, 直接或者间接调用的服务出现了性能问题, 从而导致应用程序的响应变慢, 或者错误率升高. 这说白了就是跨应用的性能问题, 使用全链路跟踪系统, 就可以帮你快速定位这类问题的根源.")]),s._v(" "),a("p",[s._v("最后一种, 应用"),a("strong",[s._v("程序自身的性能问题")]),s._v(", 包括了多线程处理不当, 死锁, 业务算法的复杂度过高等等. 对于这类问题, 在前面讲过的应用程序指标监控以及日志监控中, 观察关键环节的耗时和内部执行过程中的错误, 就可以帮你缩小问题的范围.")]),s._v(" "),a("p",[s._v("不过, 由于这是应用程序内部的状态, 外部通常不能直接获取详细的性能数据, 所以就需要应用程序在设计和开发时, 就提供出这些指标, 以便监控系统可以了解应用程序的内部运行状态.")]),s._v(" "),a("p",[s._v("如果这些手段过后还是无法找出瓶颈, 还可以用系统资源模块提到的各类进程分析工具, 来进行分析定位. 比如:")]),s._v(" "),a("ul",[a("li",[s._v("你可以用 strace, 观察系统调用;")]),s._v(" "),a("li",[s._v("使用 perf 和火焰图, 分析热点函数;")]),s._v(" "),a("li",[s._v("甚至使用动态追踪技术, 来分析进程的执行状态.")])]),s._v(" "),a("p",[s._v("当然, 系统资源和应用程序本来就是相互影响, 相辅相成的一个整体. 实际上, 很多资源瓶颈, 也是应用程序自身运行导致的. 比如进程的内存泄漏, 会导致系统内存不足; 进程过多的 I/O 请求, 会拖慢整个系统的 I/O 请求等.")]),s._v(" "),a("p",[s._v("所以, 很多情况下, 资源瓶颈和应用自身瓶颈, 其实都是同一个问题导致的, 并不需要重复分析.")]),s._v(" "),a("h5",{attrs:{id:"_3-小结-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-小结-11"}},[s._v("#")]),s._v(" 3.小结")]),s._v(" "),a("p",[s._v("本节从系统资源瓶颈和应用程序瓶颈这两个角度, 梳理了性能问题分析的一般步骤. 从系统资源瓶颈的角度来说, USE 法是最为有效的方法, 即从使用率, 饱和度以及错误数这三个方面, 来分析 CPU, 内存, 磁盘和文件系统 I/O, 网络以及内核资源限制等各类软硬件资源.")]),s._v(" "),a("p",[s._v("从应用程序瓶颈的角度来说, "),a("strong",[s._v("可以把性能问题的来源, 分为资源瓶颈, 依赖服务瓶颈以及应用自身瓶颈这三类")]),s._v(".")]),s._v(" "),a("ul",[a("li",[s._v("资源瓶颈跟系统资源瓶颈, 本质是一样的.")]),s._v(" "),a("li",[s._v("依赖服务瓶颈, 可以使用全链路跟踪系统进行定位.")]),s._v(" "),a("li",[s._v("而应用自身的问题, 可以通过系统调用, 热点函数, 或者应用自身的指标监控以及日志监控等, 进行分析定位.")])]),s._v(" "),a("p",[s._v("值得注意的是, 虽然我把瓶颈分为了系统和应用两个角度, 但在实际运行时, 这两者往往是相辅相成, 相互影响的. "),a("strong",[s._v("系统是应用的运行环境, 系统的瓶颈会导致应用的性能下降; 而应用的不合理设计, 也会引发系统资源的瓶颈")]),s._v(". 做性能分析, 就是要结合应用程序和操作系统的原理, 揪出引发问题的真凶.")]),s._v(" "),a("h4",{attrs:{id:"_56-套路篇-优化性能问题的一般方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_56-套路篇-优化性能问题的一般方法"}},[s._v("#")]),s._v(" 56-套路篇:优化性能问题的一般方法")]),s._v(" "),a("p",[s._v("我们做性能分析, 就是要"),a("strong",[s._v("结合应用程序和操作系统的原理")]),s._v(', 揪出引发问题的"真凶".')]),s._v(" "),a("p",[s._v("找到性能问题的来源后, 整个优化工作其实也就完成了一大半, 因为这些瓶颈已经指明了优化的方向. 不过, 对于性能优化来说, 又有哪些常见的方法呢?")]),s._v(" "),a("p",[s._v("本节来看看, 性能优化的一般方法. "),a("strong",[s._v("同上一节的性能分析一样, 也可以从系统和应用程序, 这两个不同的角度来进行性能优化")]),s._v(".")]),s._v(" "),a("h5",{attrs:{id:"_1-系统优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-系统优化"}},[s._v("#")]),s._v(" 1.系统优化")]),s._v(" "),a("p",[s._v("首先来看系统的优化. 在上一节曾经介绍过, USE 法可以用来分析系统软硬件资源的瓶颈, 那么相对应的优化方法, 当然也是从这些资源瓶颈入手.")]),s._v(" "),a("p",[s._v("实际上, 除了最核心的系统资源瓶颈分析之外, 也已经包含了这些常见资源瓶颈的优化方法. 接下来, 就从 CPU 性能, 内存性能, 磁盘和文件系统 I/O 性能以及网络性能等四个方面, 带你回顾一下它们的优化方法.")]),s._v(" "),a("h6",{attrs:{id:"_1-cpu优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-cpu优化"}},[s._v("#")]),s._v(" (1)CPU优化")]),s._v(" "),a("p",[s._v("首先来看 CPU 性能的优化方法. 在CPU 性能优化的几个思路中曾经介绍过, "),a("strong",[s._v("CPU 性能优化的核心, 在于排除所有不必要的工作, 充分利用 CPU 缓存并减少进程调度对性能的影响.")])]),s._v(" "),a("p",[s._v("从这几个方面出发, 我相信你已经想到了很多的优化方法. 这里主要强调一下, 最典型的三种优化方法.")]),s._v(" "),a("ul",[a("li",[s._v("第一种, "),a("strong",[s._v("把进程绑定到一个或者多个 CPU 上, 充分利用 CPU 缓存的本地性, 并减少进程间的相互影响")]),s._v(".")]),s._v(" "),a("li",[s._v("第二种, "),a("strong",[s._v("为中断处理程序开启多 CPU 负载均衡, 以便在发生大量中断时, 可以充分利用多 CPU 的优势分摊负载")]),s._v(".")]),s._v(" "),a("li",[s._v("第三种, "),a("strong",[s._v("使用 Cgroups 等方法, 为进程设置资源限制, 避免个别进程消耗过多的 CPU. 同时为核心应用程序设置更高的优先级, 减少低优先级任务的影响")]),s._v(".")])]),s._v(" "),a("h6",{attrs:{id:"_2-内存优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-内存优化"}},[s._v("#")]),s._v(" (2)内存优化")]),s._v(" "),a("p",[s._v("说完了 CPU 的性能优化, 再来看看怎么优化内存的性能. 在"),a("a",{attrs:{href:"https://time.geekbang.org/column/article/76460",target:"_blank",rel:"noopener noreferrer"}},[s._v('如何"快准狠"找到系统内存的问题'),a("OutboundLink")],1),s._v("中, 前面梳理了常见的一些内存问题, 比如可用内存不足, 内存泄漏, Swap 过多, 缺页异常过多以及缓存过多等等. 所以, 说白了, 内存性能的优化, 也就是要解决这些内存使用的问题.")]),s._v(" "),a("p",[s._v("在我看来, 可以通过以下几种方法, 来优化内存的性能.")]),s._v(" "),a("ul",[a("li",[s._v("第一种, "),a("strong",[s._v("除非有必要, Swap 应该禁止掉")]),s._v(". 这样就可以避免 Swap 的额外 I/O 带来内存访问变慢的问题.")]),s._v(" "),a("li",[s._v("第二种, "),a("strong",[s._v("使用 Cgroups 等方法, 为进程设置内存限制")]),s._v(". 这样就可以避免个别进程消耗过多内存, 而影响了其他进程. 对于核心应用, 还应该降低 oom_score, 避免被 OOM 杀死.")]),s._v(" "),a("li",[s._v("第三种, "),a("strong",[s._v("使用大页, 内存池等方法, 减少内存的动态分配, 从而减少缺页异常")]),s._v(".")])]),s._v(" "),a("h6",{attrs:{id:"_3-磁盘和文件系统i-o优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-磁盘和文件系统i-o优化"}},[s._v("#")]),s._v(" (3)磁盘和文件系统I/O优化")]),s._v(" "),a("p",[s._v("接下来再来看第三类系统资源, 即磁盘和文件系统 I/O 的优化方法. 有三种最典型的方法.")]),s._v(" "),a("ul",[a("li",[s._v("第一种, 也是最简单的方法, 通过 SSD 替代 HDD, 或者使用 RAID 等方法, 提升 I/O 性能.")]),s._v(" "),a("li",[s._v("第二种, "),a("strong",[s._v("针对磁盘和应用程序 I/O 模式的特征, 选择最适合的 I/O 调度算法")]),s._v(". 比如, SSD 和虚拟机中的磁盘, 通常用的是 noop 调度算法; 而数据库应用, 更推荐使用 deadline 算法.")]),s._v(" "),a("li",[s._v("第三, "),a("strong",[s._v("优化文件系统和磁盘的缓存, 缓冲区, 比如优化脏页的刷新频率, 脏页限额, 以及内核回收目录项缓存和索引节点缓存的倾向等等")]),s._v(".")])]),s._v(" "),a("p",[s._v("除此之外, 使用不同磁盘隔离不同应用的数据, 优化文件系统的配置选项, 优化磁盘预读, 增大磁盘队列长度等, 也都是常用的优化思路.")]),s._v(" "),a("h6",{attrs:{id:"_4-网络优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-网络优化"}},[s._v("#")]),s._v(" (4)网络优化")]),s._v(" "),a("p",[s._v("最后一个是网络的性能优化. 前面也梳理了一些常见的优化思路. 这些优化方法都是"),a("strong",[s._v("从 Linux 的网络协议栈出发, 针对每个协议层的工作原理进行优化")]),s._v(". 这里同样强调一下最典型的几种网络优化方法.")]),s._v(" "),a("p",[s._v("首先, "),a("strong",[s._v("从内核资源和网络协议")]),s._v("的角度来说, 可以对内核选项进行优化, 比如:")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("可以增大套接字缓冲区, 连接跟踪表, 最大半连接数, 最大文件描述符数, 本地端口范围等内核资源配额")]),s._v(";")]),s._v(" "),a("li",[a("strong",[s._v("也可以减少 TIMEOUT 超时时间, SYN+ACK 重传数, Keepalive 探测时间等异常处理参数;")])]),s._v(" "),a("li",[a("strong",[s._v("还可以开启端口复用, 反向地址校验, 并调整 MTU 大小等降低内核的负担.")])])]),s._v(" "),a("p",[s._v("这些都是内核选项优化的最常见措施.")]),s._v(" "),a("p",[s._v("其次, "),a("strong",[s._v("从网络接口的角度")]),s._v("来说, 可以考虑对网络接口的功能进行优化, 比如:")]),s._v(" "),a("ul",[a("li",[s._v("可以将原来 CPU 上执行的工作, 卸载到网卡中执行, 即开启网卡的 GRO, GSO, RSS, VXLAN 等卸载功能;")]),s._v(" "),a("li",[s._v("也可以开启网络接口的多队列功能, 这样每个队列就可以用不同的中断号, 调度到不同 CPU 上执行;")]),s._v(" "),a("li",[s._v("还可以增大网络接口的缓冲区大小以及队列长度等, 提升网络传输的吞吐量.")])]),s._v(" "),a("p",[s._v("最后, 在极限性能情况(比如 C10M)下, 内核的网络协议栈可能是最主要的性能瓶颈, 所以一般会考虑绕过内核协议栈.")]),s._v(" "),a("ul",[a("li",[s._v("可以使用 DPDK 技术, 跳过内核协议栈, 直接由用户态进程用轮询的方式, 来处理网络请求. 同时再结合大页, CPU 绑定, 内存对齐, 流水线并发等多种机制, 优化网络包的处理效率.")]),s._v(" "),a("li",[s._v("还可以使用内核自带的 XDP 技术, 在网络包进入内核协议栈前, 就对其进行处理. 这样也可以达到目的, 获得很好的性能.")])]),s._v(" "),a("h5",{attrs:{id:"_2-应用程序优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-应用程序优化"}},[s._v("#")]),s._v(" 2.应用程序优化")]),s._v(" "),a("p",[s._v("说完了系统软硬件资源的优化, 接下来再来看看"),a("strong",[s._v("应用程序的优化思路")]),s._v(". 虽然系统的软硬件资源, 是保证应用程序正常运行的基础, 但要知道, "),a("strong",[s._v("性能优化的最佳位置, 还是应用程序内部")]),s._v(". 为什么这么说呢? 举两个例子就明白了.")]),s._v(" "),a("p",[s._v("第一个例子, 是系统 CPU 使用率(sys%)过高的问题. 有时候出现问题, 虽然表面现象是系统 CPU 使用率过高, 但分析过后, 很可能会发现, 应用程序的不合理系统调用才是罪魁祸首. 这种情况下, 优化应用程序内部系统调用的逻辑, 显然要比优化内核要简单也有用得多.")]),s._v(" "),a("p",[s._v("再比如说, 数据库的 CPU 使用率高, I/O 响应慢, 也是最常见的一种性能问题. 这种问题, 一般来说, 并不是因为数据库本身性能不好, 而是应用程序不合理的表结构或者 SQL 查询语句导致的. 这时候, 优化应用程序中数据库表结构的逻辑或者 SQL 语句, 显然要比优化数据库本身, 能带来更大的收益.")]),s._v(" "),a("p",[s._v("所以, 在观察性能指标时, 应该先查看"),a("strong",[s._v("应用程序的响应时间, 吞吐量以及错误率")]),s._v("等指标, 因为它们才是性能优化要解决的终极问题. 以终为始, 从这些角度出发, 一定能想到很多优化方法, 而我比较推荐下面几种方法.")]),s._v(" "),a("ul",[a("li",[s._v("第一, "),a("strong",[s._v("从 CPU 使用的角度来说, 简化代码, 优化算法, 异步处理以及编译器优化等")]),s._v(", 都是常用的降低 CPU 使用率的方法, 这样可以利用有限的 CPU 处理更多的请求.")]),s._v(" "),a("li",[s._v("第二, "),a("strong",[s._v("从数据访问的角度来说, 使用缓存, 写时复制, 增加 I/O 尺寸等")]),s._v(", 都是常用的减少磁盘 I/O 的方法, 这样可以获得更快的数据处理速度.")]),s._v(" "),a("li",[s._v("第三, "),a("strong",[s._v("从内存管理的角度来说, 使用大页, 内存池等方法, 可以预先分配内存, 减少内存的动态分配")]),s._v(", 从而更好地内存访问性能.")]),s._v(" "),a("li",[s._v("第四, "),a("strong",[s._v("从网络的角度来说, 使用 I/O 多路复用, 长连接代替短连接, DNS 缓存等方法")]),s._v(", 可以优化网络 I/O 并减少网络请求数, 从而减少网络延时带来的性能问题.")]),s._v(" "),a("li",[s._v("第五, "),a("strong",[s._v("从进程的工作模型来说, 异步处理, 多线程或多进程等, 可以充分利用每一个 CPU 的处理能力")]),s._v(", 从而提高应用程序的吞吐能力.")])]),s._v(" "),a("p",[s._v("除此之外, 还可以使用消息队列, CDN, 负载均衡等各种方法, 来优化应用程序的架构, 将原来单机要承担的任务, 调度到多台服务器中并行处理. 这样也往往能获得更好的整体性能.")]),s._v(" "),a("h5",{attrs:{id:"_3-小结-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-小结-12"}},[s._v("#")]),s._v(" 3.小结")]),s._v(" "),a("p",[s._v("本节从系统和应用程序这两个角度, 梳理了常见的性能优化方法. 虽然性能优化的方法很多, 不过还是那句话, "),a("strong",[s._v("一定要避免过早优化")]),s._v(". 性能优化往往会提高复杂性, 这一方面降低了可维护性, 另一方面也为适应复杂多变的新需求带来障碍.")]),s._v(" "),a("p",[s._v("所以, 性能优化最好是"),a("strong",[s._v("逐步完善, 动态进行; 不追求一步到位, 而要首先保证, 能满足当前的性能要求")]),s._v(". 发现性能不满足要求或者出现性能瓶颈后, 再根据性能分析的结果, 选择最重要的性能问题进行优化.")]),s._v(" "),a("h4",{attrs:{id:"_57-套路篇-linux性能工具速查"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_57-套路篇-linux性能工具速查"}},[s._v("#")]),s._v(" 57-套路篇:Linux性能工具速查")]),s._v(" "),a("p",[s._v("工欲善其事, 必先利其器. 在性能分析和优化时, 借助合适的性能工具, 可以让整个过程事半功倍. 本节就梳理一下常用的性能工具.")]),s._v(" "),a("h5",{attrs:{id:"_1-性能工具速查"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-性能工具速查"}},[s._v("#")]),s._v(" 1.性能工具速查")]),s._v(" "),a("p",[s._v("在梳理性能工具之前, 首先提一个问题, 那就是在什么情况下, 才需要去查找, 挑选性能工具呢? 可以先自己想一下, 再继续下面的内容.")]),s._v(" "),a("p",[s._v('其实在我看来, 只有当想了解某个性能指标, 却不知道该怎么办的时候, 才会想到, "要是有一个性能工具速查表就好了" 这个问题. 如果已知一个性能工具可用, 更多会去查看这个工具的手册, 找出它的功能, 用法以及注意事项.')]),s._v(" "),a("p",[s._v("关于工具手册的查看, man 应该是最熟悉的方法, 前面多次介绍过. 实际上除了 man 之外, 还有另外一个查询命令手册的方法, 也就是 info. info 可以理解为 man 的详细版本, 提供了诸如节点跳转等更强大的功能. 相对来说, man 的输出比较简洁, 而 info 的输出更详细. 所以通常使用 man 来查询工具的使用方法, 只有在 man 的输出不太好理解时, 才会再去参考 info 文档.")]),s._v(" "),a("p",[s._v("当然, 要查询手册, 前提一定是已知哪个工具可用. 如果还不知道要用哪个工具, 就要根据想了解的指标, 去查找有哪些工具可用. 这其中:")]),s._v(" "),a("ul",[a("li",[s._v("有些工具不需要额外安装, 就可以直接使用, 比如内核的 "),a("code",[s._v("/proc")]),s._v("​ 文件系统;")]),s._v(" "),a("li",[s._v("而有些工具, 则需要安装额外的软件包, 比如 sar, pidstat, iostat 等.")])]),s._v(" "),a("p",[a("strong",[s._v("所以, 在选择性能工具时, 除了要考虑性能指标这个目的外, 还要结合待分析的环境来综合考虑")]),s._v(". 比如, 实际环境是否允许安装软件包, 是否需要新的内核版本等.")]),s._v(" "),a("p",[s._v("明白了工具选择的基本原则后, 来看 Linux 的性能工具. 首先还是要推荐下面这张图, 也就是 Brendan Gregg 整理的性能工具谱图.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/4248fe4cb086c77ccb55e38833104e80-20230731161933-46pobuo.png",alt:""}})]),s._v(" "),a("p",[s._v("这张图从 Linux 内核的各个子系统出发, 汇总了对各个子系统进行性能分析时可以选择的工具. 不过, 虽然这个图是性能分析最好的参考资料之一, 它其实还不够具体.")]),s._v(" "),a("p",[s._v("比如, 当需要查看某个性能指标时, 这张图里对应的子系统部分, 可能有多个性能工具可供选择. 但实际上, 并非所有这些工具都适用, 具体要用哪个, 还需要去查找每个工具的手册, 对比分析做出选择.")]),s._v(" "),a("p",[s._v("那么, 有没有更好的方法来理解这些工具呢? "),a("strong",[s._v("建议从性能指标出发, 根据性能指标的不同, 将性能工具划分为不同类型")]),s._v(". 比如, 最常见的就是可以根据 CPU, 内存, 磁盘 I/O 以及网络的各类性能指标, 将这些工具进行分类.")]),s._v(" "),a("p",[s._v("接下来就从 CPU, 内存, 磁盘 I/O 以及网络等几个角度, 梳理这些常见的 Linux 性能工具, 特别是从性能指标的角度出发, 理清楚到底有哪些工具, 可以用来监测特定的性能指标. 这些工具, 实际上贯穿在专栏各模块的各个案例中. 为了方便查看, 我将它们都整理成了表格, 并增加了每个工具的使用场景.")]),s._v(" "),a("h5",{attrs:{id:"_2-cpu性能工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-cpu性能工具"}},[s._v("#")]),s._v(" 2.CPU性能工具")]),s._v(" "),a("p",[s._v("首先, 从 CPU 的角度来说, 主要的性能指标就是 CPU 的使用率, 上下文切换以及 CPU Cache 的命中率等. 下面这张图就列出了常见的 CPU 性能指标.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/b8346abdf495428ff42da99587a88161-20230731161933-czlgmn4.png",alt:""}})]),s._v(" "),a("p",[s._v("从这些指标出发, 再把 CPU 使用率, 划分为"),a("strong",[s._v("系统和进程")]),s._v("两个维度, 就可以得到下面这个 CPU 性能工具速查表. 注意, 因为每种性能指标都可能对应多种工具, 我在每个指标的说明中, 都帮你总结了这些工具的特点和注意事项.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/5a55218dc6c12ece6a2120ac6a6d6838-20230731161933-cif911u.png",alt:""}})]),s._v(" "),a("h5",{attrs:{id:"_3-内存性能工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-内存性能工具"}},[s._v("#")]),s._v(" 3.内存性能工具")]),s._v(" "),a("p",[s._v("接着来看内存方面. 从内存的角度来说, 主要的性能指标, 就是"),a("strong",[s._v("系统内存的分配和使用, 进程内存的分配和使用以及 SWAP 的用量")]),s._v(". 下面这张图列出了常见的内存性能指标.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/71e9654dd6efb1c41fd3f70830a86653-20230731161933-sjgxvek.png",alt:""}})]),s._v(" "),a("p",[s._v("从这些指标出发, 就可以得到如下表所示的内存性能工具速查表. 同 CPU 性能工具一样, 这儿也梳理了常见工具的特点和注意事项.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/8757d07a3c282c6f7dbddfef22d1f7fa-20230731161933-k01nf79.png",alt:""}})]),s._v(" "),a("h5",{attrs:{id:"_4-磁盘i-o性能工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-磁盘i-o性能工具"}},[s._v("#")]),s._v(" 4.磁盘I/O性能工具")]),s._v(" "),a("p",[s._v("接下来, 从文件系统和磁盘 I/O 的角度来说, 主要性能指标, 就是"),a("strong",[s._v("文件系统的使用, 缓存和缓冲区的使用, 以及磁盘 I/O 的使用率, 吞吐量和延迟")]),s._v("等. 下面这张图列出了常见的 I/O 性能指标.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/1c600925b6b67f0d74015c73b851d6c8-20230731161933-ylxr3uw.png",alt:""}}),s._v("从这些指标出发, 就可以得到, 下面这个文件系统和磁盘 I/O 性能工具速查表. 同 CPU 和内存性能工具一样, 也梳理出了这些工具的特点和注意事项.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/342108393d269b430cdea54da28eddbd-20230731161933-tf4npos.png",alt:""}})]),s._v(" "),a("h5",{attrs:{id:"_5-网络性能工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-网络性能工具"}},[s._v("#")]),s._v(" 5.网络性能工具")]),s._v(" "),a("p",[s._v("最后, 从网络的角度来说, 主要性能指标就是"),a("strong",[s._v("吞吐量, 响应时间, 连接数, 丢包数")]),s._v("等. 根据 TCP/IP 网络协议栈的原理, 可以把这些性能指标, 进一步细化为每层协议的具体指标. 这里同样用一张图, 分别从链路层, 网络层, 传输层和应用层, 列出了各层的主要指标.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/07722b385f540949c373d6a10b81fe5c-20230731161933-ltoh7a9.png",alt:""}})]),s._v(" "),a("p",[s._v("从这些指标出发就可以得到下面的网络性能工具速查表. 同样也梳理了各种工具的特点和注意事项.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/495277fb4b902fa0d2bbfaf0154654c8-20230731161933-qc0ms7x.png",alt:""}})]),s._v(" "),a("h5",{attrs:{id:"_6-基准测试工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-基准测试工具"}},[s._v("#")]),s._v(" 6.基准测试工具")]),s._v(" "),a("p",[s._v("除了性能分析外, 很多时候还需要"),a("strong",[s._v("对系统性能进行基准测试")]),s._v(". 比如,")]),s._v(" "),a("ul",[a("li",[s._v("在文件系统和磁盘 I/O 模块中, 使用 fio 工具, 测试了磁盘 I/O 的性能.")]),s._v(" "),a("li",[s._v("在网络模块中, 使用 iperf, pktgen 等, 测试了网络的性能.")]),s._v(" "),a("li",[s._v("而在很多基于 Nginx 的案例中, 则使用 ab, wrk 等, 测试 Nginx 应用的性能.")])]),s._v(" "),a("p",[s._v("除了专栏里介绍过的这些工具外, 对于 Linux 的各个子系统来说, 还有很多其他的基准测试工具可能会用到. 下面这张图是 Brendan Gregg 整理的 Linux 基准测试工具图谱.")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/47f44dc6603fb74b3e7ccc48291c870c-20230731161933-qmdtit2.png",alt:""}})]),s._v(" "),a("h5",{attrs:{id:"_7-小结-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-小结-3"}},[s._v("#")]),s._v(" 7.小结")]),s._v(" "),a("p",[s._v("本节梳理了常见的性能工具, 并从 CPU, 内存, 文件系统和磁盘 I/O, 网络以及基准测试等不同的角度, 汇总了各类性能指标所对应的性能工具速查表.")]),s._v(" "),a("p",[s._v("当分析性能问题时, 大的来说, 主要有这么两个步骤:")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("第一步, 从性能瓶颈出发, 根据系统和应用程序的运行原理, 确认待分析的性能指标")]),s._v(".")]),s._v(" "),a("li",[a("strong",[s._v("第二步, 根据这些图表, 选出最合适的性能工具, 然后了解并使用工具, 从而更快观测到需要的性能数据")]),s._v(".")])]),s._v(" "),a("p",[s._v("虽然 Linux 的性能指标和性能工具都比较多, 但熟悉了各指标含义后, 自然就会发现这些工具同性能指标间的关联. 顺着这个思路往下走, 掌握这些工具的选用其实并不难.")]),s._v(" "),a("p",[s._v("当然, 正如咱们专栏一直强调的, 不要把性能工具当成性能分析和优化的全部.")]),s._v(" "),a("ul",[a("li",[s._v("一方面, 性能分析和优化的核心, 是对系统和应用程序运行原理的掌握, 而性能工具只是辅助你更快完成这个过程的帮手.")]),s._v(" "),a("li",[s._v("另一方面, 完善的监控系统, 可以提供绝大部分性能分析所需的基准数据. 从这些数据中, 很可能就能大致定位出性能瓶颈, 也就不用再去手动执行各类工具了.")])]),s._v(" "),a("p",[s._v("‍")]),s._v(" "),a("p",[s._v("‍")]),s._v(" "),a("p",[s._v("‍")]),s._v(" "),a("p",[s._v("‍")])])}),[],!1,null,null,null);a.default=e.exports}}]);