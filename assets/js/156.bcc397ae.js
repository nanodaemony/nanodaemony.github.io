(window.webpackJsonp=window.webpackJsonp||[]).push([[156],{466:function(t,s,a){"use strict";a.r(s);var n=a(7),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"_30-redis基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_30-redis基础"}},[t._v("#")]),t._v(" 30.Redis基础")]),t._v(" "),s("h4",{attrs:{id:"基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[t._v("#")]),t._v(" 基础")]),t._v(" "),s("h5",{attrs:{id:"_1-概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述"}},[t._v("#")]),t._v(" 1.概述")]),t._v(" "),s("p",[t._v("Redis 是"),s("strong",[t._v("非关系型(NoSQL) 内存键值数据库")]),t._v(".")]),t._v(" "),s("h6",{attrs:{id:"_1-redis特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-redis特性"}},[t._v("#")]),t._v(" (1)Redis特性")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("速度快")]),t._v(": 单线程模型, 数据都在内存中.")]),t._v(" "),s("li",[t._v("基于"),s("strong",[t._v("键值对")]),t._v("的数据结构服务器: NoSQL 非关系型.")]),t._v(" "),s("li",[t._v("功能丰富: 缓存, 发布订阅, Lua 脚本, 简单事务, 流水线.")]),t._v(" "),s("li",[s("strong",[t._v("可以持久化")]),t._v(": RDB 和 AOF.")]),t._v(" "),s("li",[s("strong",[t._v("主从复制")]),t._v(": 实现数据多个副本.")]),t._v(" "),s("li",[s("strong",[t._v("高可用与分布式")]),t._v(": Redis Sentinel, Redis Cluster.")])]),t._v(" "),s("blockquote",[s("p",[t._v("Redis与Memcached对比")])]),t._v(" "),s("p",[t._v("两者都是"),s("strong",[t._v("非关系型内存键值数据库")]),t._v(", 主要有以下不同:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("数据类型")]),t._v(". Memcached "),s("strong",[t._v("仅支持字符串类型")]),t._v(", 而 Redis 支持五种不同的数据类型, 应用场景丰富.")]),t._v(" "),s("li",[s("strong",[t._v("数据持久化")]),t._v(". Redis 支持两种持久化策略: "),s("strong",[t._v("RDB 快照和 AOF 日志")]),t._v(", 而 Memcached "),s("strong",[t._v("不支持")]),t._v("持久化.")]),t._v(" "),s("li",[s("strong",[t._v("分布式")]),t._v(". Memcached "),s("strong",[t._v("不支持分布式")]),t._v(", 只能通过在客户端使用"),s("strong",[t._v("一致性哈希")]),t._v("来实现分布式存储, 这种方式在存储和查询时都需要先在客户端计算一次数据所在的节点. Redis Cluster 提供"),s("strong",[t._v("分布式")]),t._v("的支持.")]),t._v(" "),s("li",[s("strong",[t._v("内存管理机制")]),t._v(". 在 Redis 中, 并不是所有数据都一直存储在内存中, 可以将一些"),s("strong",[t._v("很久没用的 value 交换到磁盘")]),t._v(", 而 Memcached 的数据则会"),s("strong",[t._v("一直")]),t._v("在内存中. Memcached 将内存分割成"),s("strong",[t._v("特定长度的块")]),t._v("来存储数据, 以完全解决内存碎片的问题. 但这种方式会使得内存的利用率不高, 例如块的大小为 128 bytes, 只存储 100 bytes 的数据, 那么剩下的 28 bytes 就浪费掉了.")])]),t._v(" "),s("h6",{attrs:{id:"_2-redis应用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-redis应用场景"}},[t._v("#")]),t._v(" (2)Redis应用场景")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("缓存")]),t._v(": 将热点数据放到"),s("strong",[t._v("内存")]),t._v("中, 设置内存的"),s("strong",[t._v("最大使用量")]),t._v("以及"),s("strong",[t._v("淘汰策略")]),t._v("来保证缓存命中率. (1)"),s("strong",[t._v("缓存热点数据")]),t._v(": 缓存热点数据, 可以降低数据库压力. (2)"),s("strong",[t._v("缓存 Session")]),t._v(": 可以使用 Redis 来统一存储多台应用服务器的"),s("strong",[t._v("会话信息")]),t._v(". 当应用服务器不再存储用户的会话信息, 使得服务器"),s("strong",[t._v("无状态")]),t._v(", 一个用户可以请求任意一个应用服务器, 从而更容易实现高可用性以及"),s("strong",[t._v("可伸缩性")]),t._v(".")]),t._v(" "),s("li",[s("strong",[t._v("分布式锁实现")]),t._v(": 可以使用 Redis 自带的 "),s("strong",[t._v("SETNX 命令")]),t._v("实现分布式锁, 也可以使用官方提供的 "),s("strong",[t._v("RedLock 分布式锁")]),t._v("实现.")]),t._v(" "),s("li",[s("strong",[t._v("社交网络")]),t._v(": Set 可以实现交集, 并集等操作, 从而实现"),s("strong",[t._v("共同好友")]),t._v("等功能.")]),t._v(" "),s("li",[s("strong",[t._v("排行榜系统")]),t._v(": ZSet 可以实现"),s("strong",[t._v("有序性")]),t._v("操作, 从而实现"),s("strong",[t._v("排行榜")]),t._v("等功能.")]),t._v(" "),s("li",[s("strong",[t._v("计数器")]),t._v(": 可以对 "),s("strong",[t._v("String")]),t._v(" 进行自增自减运算, 从而实现计数器功能. Redis 这种内存型数据库的读写性能非常高, 很适合"),s("strong",[t._v("存储频繁读写的计数量")]),t._v(". 比如视频的播放量, 商品浏览次数等.")]),t._v(" "),s("li",[s("strong",[t._v("查找表")]),t._v(": 例如 "),s("strong",[t._v("DNS")]),t._v(" 记录就很适合使用 Redis 进行存储. 查找表和缓存类似, 也是利用了 "),s("strong",[t._v("Redis 快速")]),t._v("的查找特性. 但查找表的内容不能失效, 而缓存的内容可以失效, 因为缓存不作为可靠的数据来源.")]),t._v(" "),s("li",[s("strong",[t._v("附近位置, 摇一摇")]),t._v(": Redis 的 GEO 功能可以用于实现附近位置, 摇一摇这种基于位置信息的功能.")])]),t._v(" "),s("h5",{attrs:{id:"_2-命令与架构基础🌟"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-命令与架构基础🌟"}},[t._v("#")]),t._v(" 2.命令与架构基础🌟")]),t._v(" "),s("h6",{attrs:{id:"_1-单线程架构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-单线程架构"}},[t._v("#")]),t._v(" (1)单线程架构")]),t._v(" "),s("p",[t._v("Redis 是"),s("strong",[t._v("单线程架构")]),t._v(", 单线程没有并发问题.")]),t._v(" "),s("p",[t._v("注意 Redis 的"),s("mark",[s("strong",[t._v("单线程主要是指 Redis 的网络 IO 和键值对读写是由一个线程来完成的, 这也是 Redis 对外提供键值存储服务的主要流程")])]),t._v(". 但 Redis 的其他功能, 比如持久化, 异步删除, 集群数据同步等, 其实是由额外的线程执行的.")]),t._v(" "),s("blockquote",[s("p",[t._v("为什么单线程还能这么快?")])]),t._v(" "),s("p",[t._v("原因如下:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("纯内存访问")]),t._v(". Redis 数据都存放在"),s("strong",[t._v("内存")]),t._v("中, 访问速度极快.")]),t._v(" "),s("li",[s("strong",[t._v("IO 多路复用架构")]),t._v(". Redis 使用 "),s("strong",[t._v("epoll 作为 IO 多路复用的实现")]),t._v(", 再加上 Redis 自身的事件处理模型将 "),s("strong",[t._v("epoll")]),t._v(" 中的连接, 读写, 关闭等都转化为事件, 在 IO 上浪费时间少.")]),t._v(" "),s("li",[s("strong",[t._v("单线程架构")]),t._v(". 简化了数据结构和算法实现, 同时"),s("strong",[t._v("单线程避免了线程切换")]),t._v("的竞争产生的开销.")])]),t._v(" "),s("blockquote",[s("p",[t._v("单线程可能引发的问题?")])]),t._v(" "),s("p",[t._v("正因为 Redis 是单线程, 所以要小心使用 Redis 指令, "),s("strong",[t._v("对于那些耗时的指令(比如 keys), 一定要谨慎使用")]),t._v(", 一不小心就可能会导致 Redis 卡顿. 如果每个命令"),s("strong",[t._v("执行时间过长")]),t._v(", 会造成其他命令的"),s("strong",[t._v("阻塞")]),t._v(", 这非常难受.")]),t._v(" "),s("h6",{attrs:{id:"_2-命令执行基本流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-命令执行基本流程"}},[t._v("#")]),t._v(" (2)命令执行基本流程")]),t._v(" "),s("p",[t._v("Redis 的 IO 多路复用: Redis 利用 epoll 来实现 IO 多路复用, 将连接信息和事件放到队列中, 依次放到文件事件分派器, 事件分派器将事件分发给事件处理器.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20231226230320-7gvfrv4.png",alt:"image"}})]),t._v(" "),s("p",[t._v("Redis 命令执行流程如下图.")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20211218115418923.png",alt:"",title:"Redis命令执行流程"}})]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("发送命令")])]),t._v(" "),s("li",[s("strong",[t._v("命令排队")])]),t._v(" "),s("li",[s("strong",[t._v("执行命令")])]),t._v(" "),s("li",[s("strong",[t._v("返回结果")])])]),t._v(" "),s("p",[t._v("其中 "),s("strong",[t._v("发送命令 + 响应结果")]),t._v(" 是通过"),s("strong",[t._v("网络")]),t._v("进行的, 使用命令时应尽量"),s("strong",[t._v("减少这个次数")]),t._v(". 由于是"),s("strong",[t._v("单线程")]),t._v("架构, 所以如果命令过多或者前面的命令执行阻塞着, 后面的命令需要在队列中"),s("strong",[t._v("排队执行")]),t._v(". "),s("strong",[t._v("慢查询")]),t._v("主要统计"),s("strong",[t._v("执行命令")]),t._v("的时间.")]),t._v(" "),s("h4",{attrs:{id:"基本命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本命令"}},[t._v("#")]),t._v(" 基本命令")]),t._v(" "),s("h5",{attrs:{id:"_1-全局命令🌟"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-全局命令🌟"}},[t._v("#")]),t._v(" 1.全局命令🌟")]),t._v(" "),s("p",[t._v("一些常见的全部数据结构都"),s("strong",[t._v("通用")]),t._v("的命令.")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("命令")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("释义")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("**keys ***")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("查看所有键, 复杂度 O(N), "),s("strong",[t._v("会遍历所有键, 线上禁止使用")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("dbsize")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("获取键总数, 不会遍历所有键, 直接从遍历获取, 复杂度 O(1)")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("exists key")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("查看"),s("strong",[t._v("键是否存在")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("del key [key ...]")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("删除键")]),t._v(", 可同时删多个键")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("expire key seconds")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("对键添加"),s("strong",[t._v("过期时间")]),t._v(", 返回大于等于 0 即是过期时间, -1 是没有设置, -2 是键不存在")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("ttl key")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("查看键剩余的"),s("strong",[t._v("过期时间")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("type key")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("查看键的"),s("strong",[t._v("数据结构")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("object encoding key")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("获取键的"),s("strong",[t._v("内部编码")])])])])]),t._v(" "),s("h5",{attrs:{id:"_2-键管理命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-键管理命令"}},[t._v("#")]),t._v(" 2.键管理命令")]),t._v(" "),s("h6",{attrs:{id:"_1-单个键管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-单个键管理"}},[t._v("#")]),t._v(" (1)单个键管理")]),t._v(" "),s("blockquote",[s("p",[t._v("键过期")])]),t._v(" "),s("p",[t._v("与键过期相关的指令.")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("expire key seconds\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 键在seconds秒后过期")]),t._v("\nexpire key timestamp\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 键在秒级时间戳timestamp后过期")]),t._v("\nttl key\t\t\t\t    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看键过期剩余时间, 秒级(ttl = time to leave)")]),t._v("\npttl key\t\t\t    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看键过期剩余时间, 毫秒级")]),t._v("\nexpireat key timestamp\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置键的秒级过期时间戳")]),t._v("\npexpire key milliseconds\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 键在milliseconds毫秒后过期")]),t._v("\nsetex \t\t\t\t    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置键并设置过期时间, 多用! ! ")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[t._v("返回值的含义:")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("大于等于 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" 的整数: 键剩余过期时间\n-1: 键没有设置过期时间\n-2: 键不存在\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("与过期相关的命令需要"),s("strong",[t._v("注意")]),t._v(":")]),t._v(" "),s("ul",[s("li",[t._v("如果 expire key 不存在, 返回结果为 0.")]),t._v(" "),s("li",[t._v("如果设置过期时间为负值, 键会立即被删除, 犹如使用了 del 命令一样.")]),t._v(" "),s("li",[t._v("persist 命令可以将键的"),s("strong",[t._v("过期时间清除")]),t._v(", 清除后 ttl 变为 -1, 这样键就不会过期了.")]),t._v(" "),s("li",[t._v("对于"),s("strong",[t._v("字符串类型的键")]),t._v(", 执行 "),s("strong",[t._v("set 命令")]),t._v("会"),s("strong",[t._v("去掉")]),t._v("过期时间(ttl 变为 -1), 这在开发中很容易被忽视. "),s("strong",[t._v("setex 命令")]),t._v("做为 "),s("strong",[t._v("set + expire")]),t._v(" 命令的组合, 即是原子命令, 且少了一次网络时间, 开发多用! !")]),t._v(" "),s("li",[t._v("Redis "),s("strong",[t._v("不支持二级数据结构")]),t._v("(如 hash, list) "),s("strong",[t._v("内部元素的过期功能")]),t._v(". 如不能对 hash 中某个元素设置过期.")])]),t._v(" "),s("blockquote",[s("p",[t._v("迁移键")])]),t._v(" "),s("p",[t._v("有三种方式:")]),t._v(" "),s("ul",[s("li",[t._v("move: 不建议使用. 仅在实例内部用.")]),t._v(" "),s("li",[s("strong",[t._v("dump + restore")]),t._v(": dump 会将键值序列化, 采用 RDB 格式. restore 将序列化的数据还原.")]),t._v(" "),s("li",[s("strong",[t._v("migrate")]),t._v(": 实际就是将 dump, restore, del 三个命令进行组合, 从而简化了流程, 而且具有原子性. "),s("strong",[t._v("推荐使用")]),t._v(".")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("命令")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("作用域")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("原子性")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("支持多个键")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("move")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Redis 实例内部")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("是")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("否")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("dump + restore")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Redis 实例之间")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("否")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("否")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("migrate")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("Redis 实例之间")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("是")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("是")])])])])]),t._v(" "),s("h6",{attrs:{id:"_2-遍历键"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-遍历键"}},[t._v("#")]),t._v(" (2)遍历键")]),t._v(" "),s("p",[t._v("提供了两种遍历键的方式: "),s("strong",[t._v("keys 和 scan")]),t._v(".")]),t._v(" "),s("blockquote",[s("p",[t._v("keys全量遍历键")])]),t._v(" "),s("p",[t._v("全量遍历键, 用来列出所有满足特定正则字符串规则的 key.")]),t._v(" "),s("p",[t._v("注意: 如果包含"),s("strong",[t._v("大量的键")]),t._v(", 就可能会造成 Redis "),s("strong",[t._v("阻塞")]),t._v("! "),s("strong",[t._v("生产环境别用")]),t._v("!")]),t._v(" "),s("blockquote",[s("p",[t._v("scan渐进式遍历键")])]),t._v(" "),s("p",[t._v("采用 scan 命令以"),s("strong",[t._v("渐进式")]),t._v("的方式遍历键, 以"),s("strong",[t._v("解决 keys 指令可能造成的阻塞问题")]),t._v(", 每次 scan 命令的时间"),s("strong",[t._v("复杂度是 O(1)")]),t._v(" . 每次执行 scan 可以想象成只扫描一个字典中的"),s("strong",[t._v("一部分键")]),t._v(", 直到将字典中的所有键遍历完成.")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("scan cursor "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("match pattern"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("count number"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("参数如下:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("cursor: 游标")]),t._v(", 必备参数. 第一次遍历从 0 开始, 每次 scan 遍历完会返回当前的 "),s("strong",[t._v("cursor")]),t._v(" 值, 直到其值为 0, 表示遍历结束.")]),t._v(" "),s("li",[t._v("match pattern: 匹配模式(正则模式), 可选.")]),t._v(" "),s("li",[t._v("count number: 每次要遍历的键的个数, 默认 10.")])]),t._v(" "),s("p",[t._v("注意: 每次 scan 完成都会返回上一次遍历的游标值, 下一次请求时"),s("strong",[t._v("携带")]),t._v("上从这个 cursor 开始遍历. 注意: 如果 scan 过程中如果有键的增删等变化, 可能会造成键的遍历"),s("strong",[t._v("不完全或重复的问题")]),t._v(". 可能出现新增的键可能没有遍历到, 遍历出了重复的键等情况, 也就是说 scan 并不能保证完整的遍历出来所有的键, 这些是在开发时需要考虑的.")]),t._v(" "),s("p",[t._v("此外还有其他集合类型的遍历指令. 如 "),s("strong",[t._v("hscan, sscan, zscan")]),t._v(" 等来解决 hgetall, smembers, zrange 等可能带来的阻塞问题.")]),t._v(" "),s("h4",{attrs:{id:"基础数据结构🌟"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础数据结构🌟"}},[t._v("#")]),t._v(" 基础数据结构🌟")]),t._v(" "),s("h5",{attrs:{id:"_1-string"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-string"}},[t._v("#")]),t._v(" 1.String")]),t._v(" "),s("p",[t._v("非常重要, 其他的都是基于这个来的. 字符串类型的"),s("strong",[t._v("值")]),t._v("可以是: "),s("strong",[t._v("简单字符串, 复复杂字符串(JSON, XML等), 数字(整数, 浮点数), 甚至是二进制(图片, 视频, 音频等)")]),t._v(" , 最大 512M.")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220522192440962.png",alt:""}})]),t._v(" "),s("h6",{attrs:{id:"基本命令-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本命令-2"}},[t._v("#")]),t._v(" 基本命令")]),t._v(" "),s("p",[s("strong",[t._v("(1)设置值")])]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" key value "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("ex seconds"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("px milliseconds"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("nx"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("xx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("ul",[s("li",[s("strong",[t._v("ex seconds")]),t._v(": 设置"),s("strong",[t._v("秒级")]),t._v("过期时间.")]),t._v(" "),s("li",[s("strong",[t._v("px milliseconds")]),t._v(": 设置"),s("strong",[t._v("毫秒级")]),t._v("过期时间.")]),t._v(" "),s("li",[s("strong",[t._v("nx")]),t._v(": 键必须"),s("strong",[t._v("不存在")]),t._v("才可以设置成功, 用于"),s("strong",[t._v("添加")]),t._v(".")]),t._v(" "),s("li",[s("strong",[t._v("xx")]),t._v(": 键必须"),s("strong",[t._v("存在")]),t._v("才可以设置成功, 用于"),s("strong",[t._v("更新")]),t._v(".")])]),t._v(" "),s("p",[t._v("除 set 之外, 还有两个命令: "),s("strong",[t._v("setex")]),t._v(", "),s("strong",[t._v("extnx")]),t._v(". 其作用与上述的 ex 和 nx 选项相同.")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("setex key seconds value\nsetnx key value\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("blockquote",[s("p",[t._v("setnx的应用")])]),t._v(" "),s("p",[t._v("由于 Redis 的"),s("strong",[t._v("单线程")]),t._v("机制, 如果"),s("strong",[t._v("多个")]),t._v("客户端同时执行 setex key seconds value, 根据 setnx 的特性则"),s("strong",[t._v("只有一个")]),t._v("客户端能够设置成功, 所以 setnx 可以作为"),s("strong",[t._v("分布式锁")]),t._v("的一种实现方案.")]),t._v(" "),s("p",[s("strong",[t._v("(2)获取值")])]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("get key\t  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 键不存在返回nil")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v("(3)批量设置值")])]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("mset key value "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key value "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 一次性设置多个值")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v("(4)批量获取值")])]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("mget key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nmget a b c d\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("批量设置与获取可以提高效率, 因为如果执行 N 次单个 get 命令会在网络中"),s("strong",[t._v("往返 N 次")]),t._v(", 而批量操作只会在网络中"),s("strong",[t._v("往返 1 次")]),t._v(", 可以"),s("strong",[t._v("减少 Redis 或网络阻塞")]),t._v(".")]),t._v(" "),s("p",[s("strong",[t._v("(5)计数")])]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("incr key\ndecr key\nincrby key increment\ndecrby key decrement\nincrbyfloat key increment\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[s("strong",[t._v("可以自增, 自减, 设置增量")]),t._v(". Redis 由于其"),s("strong",[t._v("单线程")]),t._v("架构, 计数的时候贼方便, 都"),s("strong",[t._v("不需要使用 CAS 来保证计数准确性")]),t._v(". 比如可以记录某文章, 视频被点赞的次数.")]),t._v(" "),s("p",[s("strong",[t._v("(6)其他")])]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("append key value   \t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在字符串后面追加value, 变长")]),t._v("\nstrlen key\t\t    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 字符串长度")]),t._v("\ngetset key value\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置并返回原值, 返回键原来的值")]),t._v("\ngetrange key start end  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取部分字符串")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("h6",{attrs:{id:"内部编码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内部编码"}},[t._v("#")]),t._v(" 内部编码")]),t._v(" "),s("p",[t._v("Redis 会根据当前值的"),s("strong",[t._v("类型和长度")]),t._v("决定使用哪种内部编码实现.")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("int")]),t._v(": 8 字节的长整形.")]),t._v(" "),s("li",[s("strong",[t._v("embstr")]),t._v(": 小于等于 39 个字节的字符串.")]),t._v(" "),s("li",[s("strong",[t._v("raw")]),t._v(": 大于 39 个字节的字符串.")])]),t._v(" "),s("h6",{attrs:{id:"使用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用场景"}},[t._v("#")]),t._v(" 使用场景")]),t._v(" "),s("p",[s("strong",[t._v("缓存功能")]),t._v(": 推荐的键名定义方式: "),s("strong",[t._v("业务名:对象名🆔[属性]")]),t._v(" .")]),t._v(" "),s("p",[s("strong",[t._v("计数")]),t._v(": 快速计数, 查询缓存, 比如实现"),s("strong",[t._v("视频播放数计数")]),t._v(".")]),t._v(" "),s("p",[s("strong",[t._v("共享 session")]),t._v(": 使用 Redis 存储各个 Web 服务器的 "),s("strong",[t._v("session")]),t._v(" 信息, 集中管理.")]),t._v(" "),s("p",[s("strong",[t._v("限速")]),t._v(": 防止短信功接口不被频繁访问, 限制一分钟内只能请求一次. 限制一个 IP 地址在一分钟内的访问次数.")]),t._v(" "),s("h5",{attrs:{id:"_2-hash"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-hash"}},[t._v("#")]),t._v(" 2.Hash")]),t._v(" "),s("p",[t._v("结构如下, KEY 里面的 "),s("strong",[t._v("value")]),t._v(" 才包含"),s("strong",[t._v("真正的 key 和 value")]),t._v(". 可以看成一个双层的 map.")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220522192945126.png",alt:""}})]),t._v(" "),s("p",[t._v("Hash 类型的"),s("strong",[t._v("值")]),t._v("本身又是一个"),s("strong",[t._v("键值对结构")]),t._v(". 注意业务重点关注 "),s("code",[t._v("Filed : Value")]),t._v("​ 关系.")]),t._v(" "),s("h6",{attrs:{id:"基本命令-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本命令-3"}},[t._v("#")]),t._v(" 基本命令")]),t._v(" "),s("p",[s("strong",[t._v("(1)设置值")])]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("hset key field value\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("hest user:1 name tom\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v("(2)获取值")])]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("hget key field\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("hget user:1 name\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v("(3)删除field")])]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("hdel key field "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("field "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("可以批量删除 field.")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("hdel user:1 name address class\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v("(4)计算field个数")])]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("hlen key\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v("(5)批量设置与获取")])]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("hmget key field "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("field "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 批量获取")]),t._v("\nhmset key field value "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("field value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 批量设置")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[s("strong",[t._v("(6)判断filed是否存在")])]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("hexists key field\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v("(7)其他")])]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("hkeys key  \t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取所有field")]),t._v("\nhvals key\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取所有value")]),t._v("\nhgetall key\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取所有的field-value, 即返回Map")]),t._v("\nhincrby key field \t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 自增, 作用在field上")]),t._v("\nhincrbyfloat key field  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 自增")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("h6",{attrs:{id:"内部编码-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内部编码-2"}},[t._v("#")]),t._v(" 内部编码")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("ziplist")]),t._v("(压缩列表): 当 filed "),s("strong",[t._v("个数少")]),t._v("且没有大的 value 时使用.")]),t._v(" "),s("li",[s("strong",[t._v("hashtable")]),t._v("(哈希表): 当 filed 个数多或有大的 value 时使用.")])]),t._v(" "),s("p",[t._v("ziplist 更加"),s("strong",[t._v("紧凑")]),t._v(", 在数据量较少时可以连续存储元素, 更节约内存.")]),t._v(" "),s("h6",{attrs:{id:"使用场景-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用场景-2"}},[t._v("#")]),t._v(" 使用场景")]),t._v(" "),s("p",[s("strong",[t._v("(1)缓存用户信息")])]),t._v(" "),s("p",[t._v("实现方式:")]),t._v(" "),s("ul",[s("li",[t._v("序列化字符串类型: 将用户信息序列号之后用一个键保存(需要反序列化).")]),t._v(" "),s("li",[t._v("使用 hash: 只用一个键保存 id, 用户信息用 field-value 保存.")])]),t._v(" "),s("p",[t._v("可以用于记录的"),s("strong",[t._v("用户信息")]),t._v(", 比如 key 是用户的 id, field 是用的信息(如名字, 学校等), value 是信息的值. 好处: hash 是紧凑的, 有这个值才设置, 而关系型数据库是稀疏的.")]),t._v(" "),s("p",[t._v("(2)购物车场景")]),t._v(" "),s("p",[t._v("以用户 id 为 key, 商品 id 为 filed, 商品数量为 value.")]),t._v(" "),s("h6",{attrs:{id:"再哈希"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#再哈希"}},[t._v("#")]),t._v(" 再哈希")]),t._v(" "),s("p",[t._v("Redis 中的字典相当于 Java 中的 "),s("strong",[t._v("HashMap")]),t._v(", 内部实现也差不多类似, 都是通过  "),s("strong",[t._v('"数组 + 链表"')]),t._v("  的链地址法来解决部分 "),s("strong",[t._v("哈希冲突")]),t._v(", 同时这样的结构也吸收了两种不同数据结构的优点.")]),t._v(" "),s("p",[s("strong",[t._v("实际上 hash 结构的内部包含两个 hashtable")]),t._v(", 通常情况下"),s("strong",[t._v("只有一个")]),t._v(" hashtable 是"),s("strong",[t._v("有值")]),t._v("的, 但是在字典扩容缩容时, 需要分配新的 hashtable, 然后进行"),s("strong",[t._v("渐进式搬迁")]),t._v(".")]),t._v(" "),s("p",[t._v("大字典的扩容是比较耗时间的, 需要"),s("strong",[t._v("重新申请新的数组")]),t._v(", 然后将"),s("strong",[t._v("旧字典")]),t._v("所有链表中的元素重新挂接到新的数组下面, 这是一个 "),s("strong",[t._v("O(N) 级别")]),t._v("的操作, 作为单线程的 Redis 很难承受这样耗时的过程, 所以 Redis 使用 "),s("strong",[t._v("渐进式 rehash")]),t._v(" 小步搬迁:")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230217001625-ruu5qo1.png",alt:"image"}})]),t._v(" "),s("p",[t._v("渐进式 rehash 会在 rehash 的同时, 保留"),s("strong",[t._v("新旧两个 hash 结构")]),t._v(", 如上图所示. 如果正在迁移那么查询时会"),s("strong",[t._v("同时查询两个 hash 结构")]),t._v(", 然后在后续的定时任务以及 hash 操作指令中, 循序渐进的把旧字典的内容迁移到新字典中. 当搬迁完成了, 就会使用新的 hash 结构取而代之.")]),t._v(" "),s("h6",{attrs:{id:"缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[t._v("#")]),t._v(" 缺点")]),t._v(" "),s("p",[s("strong",[t._v("过期功能不能使用在 field 上, 只能用到 key 上")]),t._v(".")]),t._v(" "),s("p",[t._v("Redis 的集群架构下不适合大规模的使用, 需要注意某些热点的 key 被集中分配到某个结点, 导致结点压力大.")]),t._v(" "),s("h5",{attrs:{id:"_3-list"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-list"}},[t._v("#")]),t._v(" 3.List")]),t._v(" "),s("p",[t._v("列表用于存储多个"),s("strong",[t._v("有序")]),t._v("的字符串, 每个字符串称为元素. 由于元素是"),s("strong",[t._v("有序")]),t._v("的, 所以可以通过"),s("strong",[t._v("索引")]),t._v("来访问元素或者进行"),s("strong",[t._v("范围访问")]),t._v(". 可以充当栈与队列的角色.")]),t._v(" "),s("p",[t._v("列表从左到右索引为 "),s("strong",[t._v("0 ~ N - 1")]),t._v(", 从右到左为  "),s("strong",[t._v("-1 ~ -N")]),t._v(".")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220522210259629.png",alt:""}})]),t._v(" "),s("h6",{attrs:{id:"基本命令-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本命令-4"}},[t._v("#")]),t._v(" 基本命令")]),t._v(" "),s("p",[s("strong",[t._v("(1)插入元素")])]),t._v(" "),s("p",[s("strong",[t._v("左右两边")]),t._v("插入元素: 插入两端.")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("lpush key value "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nrpush key value "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[s("strong",[t._v("指定位置处")]),t._v("插入元素: 找到"),s("strong",[t._v("等于 pivot")]),t._v(" 的元素并在前或后插入元素.")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("linsert key before"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("after pivot value\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v("(2)查找元素")])]),t._v(" "),s("p",[t._v("获取指定范围元素.")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("lrange key start end \nlrange key "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-1")]),t._v(" \t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 列出全部元素")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("获取列表指定索引下标的元素.")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("lindex key index\nlindex name "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-1")]),t._v("\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取最后一个元素")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("获取列表长度.")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("llen key\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v("(3)删除元素")])]),t._v(" "),s("p",[t._v("左右两边弹出删除.")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("lpop key\nrpop key\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("按照索引范围修建列表.")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("ltrim key start end\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v("(4)修改元素")])]),t._v(" "),s("p",[t._v("修改指定索引处的元素.")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("lset key index newValue\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v("(5)阻塞弹出")])]),t._v(" "),s("p",[t._v("阻塞式弹出元素. 从左右阻塞式弹出元素, 即普通弹出的阻塞版本.")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("blpop key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("timeout")]),t._v("\nbrpop key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("timeout")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[s("strong",[t._v("key [key...]")]),t._v(" : 多个列表的键. "),s("strong",[t._v("timeout")]),t._v(": 阻塞时间.")]),t._v(" "),s("ul",[s("li",[t._v("若列表为空, timeout = 3, 则客户端等待 3 秒后返回, 若 timeout = 0, 则此时客户端一直阻塞等下去. 若等待期间插入元素则立即返回.")]),t._v(" "),s("li",[t._v("列表不为空, 立即返回.")])]),t._v(" "),s("blockquote",[s("p",[t._v("使用brpop需要注意的点")])]),t._v(" "),s("p",[t._v("如果是多个键, 那么 brpop 会从左到右遍历键, 一旦有一个键能弹出元素, 客户端立即返回. 如果多个客户端对一个同一个键执行 brpop, 那么最先执行 brpop 命令的客户端可以先获取到弹出值. 然后后面的继续阻塞.")]),t._v(" "),s("h6",{attrs:{id:"内部编码-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内部编码-3"}},[t._v("#")]),t._v(" 内部编码")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("ziplist")]),t._v(": "),s("strong",[t._v("压缩列表")]),t._v(". 元素少且元素长度小时使用, 减少内存消耗.")]),t._v(" "),s("li",[s("strong",[t._v("linkedlist")]),t._v(": "),s("strong",[t._v("链表")]),t._v(". 元素多使用.")])]),t._v(" "),s("h6",{attrs:{id:"使用场景-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用场景-3"}},[t._v("#")]),t._v(" 使用场景")]),t._v(" "),s("p",[s("strong",[t._v("(1)消息队列")])]),t._v(" "),s("p",[t._v("使用 "),s("strong",[t._v("lpush + brpop")]),t._v(" 可以实现"),s("strong",[t._v("阻塞队列")]),t._v(', 生产者客户端使用 lpush 生产, 多个消费者客户端从使用 brpop 命令阻塞式 "抢" 列表中的元素, 多个客户端保证了消费的负载均衡和高可用.')]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("lpush + lpop = Stack")]),t._v("(栈)")]),t._v(" "),s("li",[s("strong",[t._v("lpush + rpop = Queue")]),t._v("(队列)")]),t._v(" "),s("li",[t._v("lpush + ltrim = Capped Collection(有限集合)")]),t._v(" "),s("li",[s("strong",[t._v("lpush + brpop = Message Queue")]),t._v("(消息队列)")])]),t._v(" "),s("p",[s("strong",[t._v("(2)消息流类的场景")])]),t._v(" "),s("p",[t._v("每个"),s("strong",[t._v("用户的文章列表")]),t._v("用 list 存储, 然后可以分页获取列表. 还可以应用到微博, 微信公众号等的消息流.")]),t._v(" "),s("h5",{attrs:{id:"_4-set"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-set"}},[t._v("#")]),t._v(" 4.Set")]),t._v(" "),s("p",[t._v("用于保存多个字符串元素, 与列表不同, set 中元素"),s("strong",[t._v("不能重复")]),t._v(", 并且集合中元素是"),s("strong",[t._v("无序")]),t._v("的. 除增删改查之外还可以做多个集合的"),s("strong",[t._v("交集, 并集, 差集")]),t._v(".")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220522210816969.png",alt:""}})]),t._v(" "),s("h6",{attrs:{id:"基本命令-5"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本命令-5"}},[t._v("#")]),t._v(" 基本命令")]),t._v(" "),s("blockquote",[s("p",[t._v("集合内操作")])]),t._v(" "),s("p",[t._v("添加元素.")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("sadd key element "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("element"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("删除元素.")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("srem key element "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("element"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("计算元素个数: 是 "),s("strong",[t._v("O(1)")]),t._v("  的命令, 不会遍历集合的元素, 而是直接用 Redis 的内部计数变量.")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("scard key\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v("判断元素是否在集合中")]),t._v(": 是则返回 1, 不是返回 0.")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("sismember key element\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("随机返回集合汇总指定个数元素, "),s("strong",[t._v("默认返回一个, 不删除元素")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("srandmember key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("从集合"),s("strong",[t._v("随机弹出元素")]),t._v(", 并且删除该元素.")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("spop key\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v("获取所有元素, 结果无序")]),t._v(". 是比较重的指令, 元素过多会"),s("strong",[t._v("阻塞")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("smembers key\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("blockquote",[s("p",[t._v("集合间操作")])]),t._v(" "),s("p",[t._v("求多个集合的"),s("strong",[t._v("交集")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("sinter key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("求多个集合的"),s("strong",[t._v("并集")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("sunion key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("求多个集合的"),s("strong",[t._v("差集")]),t._v(". 以第一个集合为基准, 减去后面所有集合的并集, 最后看第一个集合还剩多少元素.")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sdiff")]),t._v(" key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("将"),s("strong",[t._v("结果进行保存")]),t._v(". 将集合间交集, 并集, 差集的结果保存在 destination key 中.")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("sinterstore destination key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nsunionstore destination key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nsdiffstore destination key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h6",{attrs:{id:"内部编码-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内部编码-4"}},[t._v("#")]),t._v(" 内部编码")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("intset")]),t._v(": 元素是整数且个数较少时使用.")]),t._v(" "),s("li",[s("strong",[t._v("hashtable")]),t._v(": 元素较多或不全是整数时使用.")])]),t._v(" "),s("h6",{attrs:{id:"使用场景-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用场景-4"}},[t._v("#")]),t._v(" 使用场景")]),t._v(" "),s("p",[s("strong",[t._v("(1)标签")])]),t._v(" "),s("p",[t._v("集合类型的典型场景是"),s("strong",[t._v("标签")]),t._v(". 比如一个用户的兴趣点就是标签, 使用集合间的交并差就可以用在"),s("strong",[t._v("社交")]),t._v("上, 比如计算"),s("strong",[t._v("共同兴趣")]),t._v(".")]),t._v(" "),s("ul",[s("li",[t._v("sadd = Tagging(标签)")]),t._v(" "),s("li",[t._v("spop/srandmember = Random item(生成随机数, 比如抽奖)")]),t._v(" "),s("li",[t._v("sadd + sinter = Social Graph("),s("strong",[t._v("社交需求")]),t._v(")")])]),t._v(" "),s("p",[t._v("(2)抽奖")]),t._v(" "),s("p",[t._v("srandmember 和 spop 等弹出元素的命令可以用于抽奖的场景.")]),t._v(" "),s("p",[t._v("(3)"),s("strong",[t._v("社交关注模型")])]),t._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 诸葛关注的人: \nzhugeSet -"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("guojia, xushu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 杨过关注的人:\nyangguoSet -"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("zhuge, baiqi, guojia, xushu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 郭嘉关注的人: \nguojiaSet -"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("zhuge, yangguo, baiqi, xushu, xunyu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 我和杨过共同关注"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("求交集"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(": \nSINTER zhugeSet yangguoSet -"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("guojia, xushu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 我关注的人也关注他"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("杨过"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(": \nSISMEMBER guojiaSet yangguo \nSISMEMBER xushuSet yangguo\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 我可能认识的人"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("一种简单的实现"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(": \nSDIFF yangguoSet zhugeSet -"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("zhuge, baiqi"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br")])]),s("h5",{attrs:{id:"_5-zset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-zset"}},[t._v("#")]),t._v(" 5.Zset")]),t._v(" "),s("p",[t._v("Zset 在 "),s("strong",[t._v("Set 类型")]),t._v("的基础上增加了一个"),s("strong",[t._v("分数")]),t._v(", 其特性为"),s("strong",[t._v("元素不可重复且多了排序的功能")]),t._v(". 元素不能重复但是 "),s("strong",[t._v("score 可以重复")]),t._v(".")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220522210935147.png",alt:""}})]),t._v(" "),s("p",[t._v("比较一下 列表, 集合, 有序集合.")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("数据结构")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("是否允许元素重复")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("是否有序")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("有序实现方式")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("应用场景")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("List")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("是")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("是")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("索引下标")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("时间轴, 消息队列")]),t._v("等")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("Set")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("否")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("否")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("无")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("标签, 社交系统")]),t._v("等")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("Zset")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("否")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("是")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("分数值")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("排行榜系统")]),t._v("等.")])])])]),t._v(" "),s("h6",{attrs:{id:"命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#命令"}},[t._v("#")]),t._v(" 命令")]),t._v(" "),s("blockquote",[s("p",[t._v("集合内操作")])]),t._v(" "),s("p",[t._v("添加成员.")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("zadd key score member "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("score member"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("计算成员"),s("strong",[t._v("个数")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("zcard key\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("计算某个成员"),s("strong",[t._v("分数")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("zscore key member\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("计算成员"),s("strong",[t._v("排名")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("zrank key member\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 从低到高排名")]),t._v("\nzrevrank key member\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 从高到低排名")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("删除成员.")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("zrem key member "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("member"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v("增加成员分数")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("zincrby key increment member\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("返回"),s("strong",[t._v("指定排名范围")]),t._v("的成员.")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("zrange key start end "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("withscores"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\t    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 从低到高返回")]),t._v("\nzrevrank key start end "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("withscores"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" \t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 从高到低返回")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("返回"),s("strong",[t._v("指定分数范围")]),t._v("的成员, 也有正反两种方式.")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("zrangescore key min max "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("withscores"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("limit offset count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nzrevrankscore key min max "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("withscores"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("limit offset count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("返回指定分数范围成员的"),s("strong",[t._v("个数")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("zcount key min max\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("删除指定"),s("strong",[t._v("排名内")]),t._v("的升序元素.")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("zremrangebyrank key start end\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("删除指定"),s("strong",[t._v("分数范围")]),t._v("的成员.")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("zremrangebyscore key start end\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("blockquote",[s("p",[t._v("集合间操作")])]),t._v(" "),s("p",[t._v("两集合交集.")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("zinterstore destination numkeys key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("weights weight "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("weight"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("aggregate "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("min"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("max"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("两集合并集. 如果每个 key 表示一天的搜索排行, 那么 zunionstore 可以用于计算七日总搜索的"),s("strong",[t._v("排行前十")]),t._v("的场景.")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("zunionstore destination numkeys key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("weights weight "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("weight"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("aggregate "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("min"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("max"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h6",{attrs:{id:"内部编码-5"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内部编码-5"}},[t._v("#")]),t._v(" 内部编码")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("ziplist")]),t._v(": 压缩列表. 元素个数较少且值较小时用.")]),t._v(" "),s("li",[s("strong",[t._v("skiplist")]),t._v(": "),s("strong",[t._v("跳表")]),t._v(". 元素个数多或值大时用. 后面详细介绍跳表.")])]),t._v(" "),s("h6",{attrs:{id:"使用场景-5"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用场景-5"}},[t._v("#")]),t._v(" 使用场景")]),t._v(" "),s("p",[s("strong",[t._v("(1)排行榜系统")])]),t._v(" "),s("p",[t._v("典型应用就是"),s("strong",[t._v("排行榜系统")]),t._v(". 比如按用户点赞数, 按播放数排名. 可以轻易获取排行榜前十的内容.")]),t._v(" "),s("h5",{attrs:{id:"_6-内部编码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-内部编码"}},[t._v("#")]),t._v(" 6.内部编码")]),t._v(" "),s("p",[t._v("前面介绍了五种基本的数据结构, 还有一些拓展的结构都是基于它们实现的. "),s("mark",[s("strong",[t._v("键的类型只能为字符串, 值支持五种数据类型: 字符串, 列表, 集合, 散列表, 有序集合.")])])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("数据类型")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("可以存储的值")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("操作")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("STRING")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("字符串, 整数或者浮点数")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("1.对整个字符串或者字符串的其中一部分执行操作. 2.对整数和浮点数执行自增或者自减操作.")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("LIST")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("列表")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("1.从两端"),s("strong",[t._v("压入或者弹出")]),t._v("元素. 2.对单个或者多个元素. 3.进行修剪, 只保留一个范围内的元素.")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("SET")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("无序")]),t._v("集合")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("1.添加, 获取, 移除单个元素. 2.检查一个元素是否存在于集合中. 3.计算交集, 并集, 差集. 4.从集合里面随机获取元素.")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("HASH")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("包含"),s("strong",[t._v("键值对")]),t._v("的无序散列表")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("1.添加, 获取, 移除单个键值对. 2.获取所有键值对. 3.检查某个键是否存在.")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("ZSET")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("有序集合")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("1.添加, 获取, 删除元素. 2.根据分值范围或者成员来获取元素. 3.计算一个键的排名.")])])])]),t._v(" "),s("p",[t._v("每一种数据结构都有"),s("strong",[t._v("两种以上")]),t._v("的"),s("strong",[t._v("内部编码")]),t._v("实现.")]),t._v(" "),s("blockquote",[s("p",[t._v("为什么这样设计?")])]),t._v(" "),s("p",[s("strong",[t._v("可以改进内部编码但不影响对外的数据结构和命令, 可以平滑升级")]),t._v(". 多种内部编码在不同的应用场景下可以"),s("strong",[t._v("发挥各自的优势")]),t._v(", 比如有的数据结构可以节省内存.")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("数据结构")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("内部编码")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("string")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("raw, int, embstr")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("hash")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("hashtable")]),t._v(", ziplist")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("list")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("linkedlist")]),t._v(", ziplist")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("set")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("hashtable")]),t._v(", intset")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("zset")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("skiplist(跳表)")]),t._v(" , ziplist")])])])]),t._v(" "),s("h4",{attrs:{id:"重要底层数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重要底层数据结构"}},[t._v("#")]),t._v(" 重要底层数据结构")]),t._v(" "),s("h5",{attrs:{id:"_1-字典dictht"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-字典dictht"}},[t._v("#")]),t._v(" 1.字典dictht")]),t._v(" "),s("p",[s("strong",[t._v("dictht")]),t._v(" 是一个"),s("strong",[t._v("散列表")]),t._v("结构, 使用"),s("strong",[t._v("拉链法解决哈希冲突")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("dictht")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    dictEntry "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("table"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" sizemask"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" used"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" dictht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("dictEntry")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("union")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint64_t")]),t._v(" u64"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("int64_t")]),t._v(" s64"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("dictEntry")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" dictEntry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("p",[t._v("Redis 的字典 dict 中包含"),s("strong",[t._v("两个哈希表 dictht")]),t._v(", 这是为了方便"),s("strong",[t._v("进行 rehash 操作")]),t._v(". 在扩容时, 将其中一个 dictht 上的键值对 rehash 到另一个 dictht 上面, 完成之后"),s("strong",[t._v("释放空间并交换")]),t._v("两个 dictht 的角色.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("dict")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    dictType "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("privdata"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    dictht ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" rehashidx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* rehashing not in progress if rehashidx == -1 */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" iterators"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* number of iterators currently running */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" dict"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[s("strong",[t._v("rehash")]),t._v(" 操作不是一次性完成, 而是采用"),s("strong",[t._v("渐进方式")]),t._v(", 这是为了避免一次性执行过多的 rehash 操作给服务器带来过大的"),s("strong",[t._v("负担(阻塞)")]),t._v(" .")]),t._v(" "),s("p",[t._v("渐进式 rehash 通过记录 dict 的 rehashidx 完成, 它从 0 开始, 然后每执行一次 rehash 都会递增. 例如在一次 rehash 中, 要把 dict[0] rehash 到 dict[1], 这一次会把 dict[0] 上 table[rehashidx] 的键值对 rehash 到 dict[1] 上, dict[0] 的 table[rehashidx] 指向 null, 并令 rehashidx++.")]),t._v(" "),s("p",[s("strong",[t._v("在 rehash 期间")]),t._v(", 每次对字典执行添加, 删除, 查找或者更新操作时, 都会"),s("strong",[t._v("执行一次渐进式 rehash")]),t._v(".")]),t._v(" "),s("p",[t._v("采用渐进式 rehash 会导致字典中的数据分散在"),s("strong",[t._v("两个")]),t._v(" dictht 上, 因此对字典的查找操作也需要分别到两个 dictht 去执行.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dictRehash")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" empty_visits "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Max number of empty buckets to visit. */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dictIsRehashing")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("used "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        dictEntry "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("de"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("nextde"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Note that rehashidx can't overflow as we are sure there are more\n         * elements because ht[0].used != 0 */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("assert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("size "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rehashidx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("table"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rehashidx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("mark"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rehashidx"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("empty_visits "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("mark"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        de "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("table"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rehashidx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Move all the keys in this bucket from the old to the new hash HT */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("de"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint64_t")]),t._v(" h"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            nextde "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" de"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Get the index in the new hash table */")]),t._v("\n            h "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dictHashKey")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" de"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sizemask"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            de"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("table"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("h"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("table"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("h"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" de"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("used"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("used"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            de "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextde"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("table"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rehashidx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rehashidx"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Check if we already rehashed the whole table... */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("used "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("zfree")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("table"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("_dictReset")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rehashidx "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* More to rehash... */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br"),s("span",{staticClass:"line-number"},[t._v("39")]),s("br"),s("span",{staticClass:"line-number"},[t._v("40")]),s("br"),s("span",{staticClass:"line-number"},[t._v("41")]),s("br"),s("span",{staticClass:"line-number"},[t._v("42")]),s("br"),s("span",{staticClass:"line-number"},[t._v("43")]),s("br"),s("span",{staticClass:"line-number"},[t._v("44")]),s("br")])]),s("h5",{attrs:{id:"_2-redisobject对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-redisobject对象"}},[t._v("#")]),t._v(" 2.RedisObject对象")]),t._v(" "),s("h6",{attrs:{id:"_1-概述-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述-2"}},[t._v("#")]),t._v(" (1)概述")]),t._v(" "),s("p",[t._v("redisObject 是一个"),s("strong",[t._v("结构体")]),t._v(". Redis 内部"),s("strong",[t._v("使用 redisObject 对象来表示所有的 key 和 value")]),t._v(", 每次在 Redis 数据块中创建一个键值对时, 一个是键对象, 一个是值对象. Redis 存储数据"),s("strong",[t._v("都采用 redisObject 封装")]),t._v(".")]),t._v(" "),s("p",[t._v("redisObject 最主要的信息:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("redisObject")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当前对象使用的数据类型 ")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" type"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当前对象内部编码类型")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" encoding"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 与对象的数据内容相关, 如果是整数, 直接存储数据; 否则表示指向数据的指针")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 记录当前对象被引用的次数, 用于通过引用次数回收内存")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" refcount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 记录最后一次被程序访问的时间,用于辅助 LRU 算法实现内存回收")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" lru"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" robj\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220527224418151.png",alt:""}})]),t._v(" "),s("h6",{attrs:{id:"_2-内存回收与共享"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-内存回收与共享"}},[t._v("#")]),t._v(" (2)内存回收与共享")]),t._v(" "),s("p",[t._v("因为 C 语言"),s("strong",[t._v("不具备自动内存回收功能")]),t._v(", 当将 redisObject 对象作为数据库的键或值而不是作为参数存储时其生命周期是非常长的, 为了解决这个问题, Redis "),s("strong",[t._v("自己构建了一个内存回收机制")]),t._v(", 通过 redisobject 结构中的 "),s("strong",[t._v("refcount")]),t._v(" 实现. 这个属性会随着对象的"),s("strong",[t._v("使用状态而不断变化")]),t._v(". 当对象的引用计数值变为 0 时, 对象所占用的"),s("strong",[t._v("内存就会被释放")]),t._v(". refcount 属性除了能实现内存回收以外, 还能实现内存共享(参考: 共享对象池).")]),t._v(" "),s("p",[t._v("高并发写入场景中, 在条件允许情况下, 建议字符串"),s("strong",[t._v("长度控制在 39 字节")]),t._v("以内, 减少"),s("strong",[t._v("创建 redisObject")]),t._v(" 内存分配次数, 从而提高性能.")]),t._v(" "),s("h5",{attrs:{id:"_3-跳表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-跳表"}},[t._v("#")]),t._v(" 3.跳表")]),t._v(" "),s("p",[s("strong",[t._v("跳表")]),t._v("是 "),s("strong",[t._v("zset")]),t._v(" 的底层数据结构之一. 跳表是基于"),s("strong",[t._v("多指针有序链表")]),t._v("实现的, 可以看成多个"),s("strong",[t._v("有序链表")]),t._v(". 在"),s("strong",[t._v("查找")]),t._v("时, 从"),s("strong",[t._v("上层指针")]),t._v("开始查找, 找到对应的区间之后再到"),s("strong",[t._v("下一层")]),t._v("去查找. 下图演示了查找 22 的过程. 更多参考: 跳表SkipList.")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/1563520325342.png",alt:"1563520325342"}})]),t._v(" "),s("blockquote",[s("p",[t._v("为什么要用跳表而不用其他​数据结构?")])]),t._v(" "),s("p",[t._v("由于 zset 要支持"),s("strong",[t._v("随机的插入和删除")]),t._v(", 所以它"),s("strong",[t._v("不宜使用数组来实现")]),t._v(", 关于排序问题, 也很容易就想到"),s("strong",[t._v("红黑树/平衡树")]),t._v("这样的树形结构, 与红黑树等平衡树相比, 跳表具有以下优点:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("插入速度非常快速, 因为不需要进行旋转等操作来维护平衡性")]),t._v(".")]),t._v(" "),s("li",[t._v("更容易实现.")]),t._v(" "),s("li",[t._v("支持"),s("strong",[t._v("无锁操作")]),t._v(".")])]),t._v(" "),s("p",[t._v("基于以上的一些考虑, Redis 采用了 "),s("strong",[t._v("跳跃表")]),t._v(" 来实现 Zset.")]),t._v(" "),s("h4",{attrs:{id:"redis高级功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis高级功能"}},[t._v("#")]),t._v(" Redis高级功能")]),t._v(" "),s("h5",{attrs:{id:"_1-pipeline流水线"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-pipeline流水线"}},[t._v("#")]),t._v(" 1.Pipeline流水线")]),t._v(" "),s("p",[t._v("流水线技术采用将"),s("strong",[t._v("多条命令打包")]),t._v("的方式将命令发送到 Redis 进行执行, 并将"),s("strong",[t._v("多条命令")]),t._v("的执行结果以"),s("strong",[t._v("打包")]),t._v("的方式返回给客户端, 这样多条命令"),s("strong",[t._v("只在网络中传输一次")]),t._v(", 这就大大"),s("strong",[t._v("节省了网络中传输命令的")]),t._v("时间与开销.")]),t._v(" "),s("p",[t._v("许多客户端带有这个功能, 如 Jedis. 客户端与服务端网络延时越大, 效果越明显. 而且组装后的命令比单个命令逐一执行要快.")]),t._v(" "),s("p",[t._v("需要注意到是用 pipeline 方式打包命令发送, Redis "),s("strong",[t._v("必须在处理完所有命令前先缓存起所有命令的处理结果")]),t._v(". 打包的命令越多, 缓存消耗内存也越多. 所以并不是打包的命令越多越好. 如果一次 Pipeline 操作数据量或命令太多, 可能导致"),s("strong",[t._v("阻塞")]),t._v(", 可以分成几次执行.")]),t._v(" "),s("p",[t._v("pipeline 中发送的每个 command 都会被 server 立即执行, 如果执行失败, 将会在此后的响应中得到信息; 也就是 "),s("mark",[s("strong",[t._v('pipeline 并不是表达 "所有 command 都一起成功" 的语义, 管道中前面命令失败, 后面命令不会有影响, 而是会继续执行后面的目录, 并将所有命令的执行结果一起返回, 包括报错的结果')])]),t._v(".  ****")]),t._v(" "),s("blockquote",[s("p",[t._v("原生的批量操作命令如 mget 一次也能批量操作数据, 和 Pipeline 有什么不同?")])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("原生批量")]),t._v("操作命令是"),s("strong",[t._v("原子")]),t._v("的, "),s("strong",[t._v("Pipeline 是非原子")]),t._v("的.")]),t._v(" "),s("li",[s("strong",[t._v("原生批量")]),t._v("命令是"),s("strong",[t._v("一个命令对应多个 key")]),t._v(", Pipeline 则支持"),s("strong",[t._v("多个命令")]),t._v(".")]),t._v(" "),s("li",[s("strong",[t._v("原生批量")]),t._v("命令是 Redis "),s("strong",[t._v("服务端")]),t._v("支持实现, 而 Pipeline 由"),s("strong",[t._v("客户端和服务器共同支持")]),t._v("实现.")])]),t._v(" "),s("blockquote",[s("p",[t._v("Pipeline使用示例")])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pipeline")]),t._v(" pl "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" jedis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pipelined")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    pl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("incr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pipelineKey"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    pl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 模拟管道报错")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// pl.setbit("test", -1, true);')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" results "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("syncAndReturnAll")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("results"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("h5",{attrs:{id:"_2-事务与lua🌟"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-事务与lua🌟"}},[t._v("#")]),t._v(" 2.事务与Lua🌟")]),t._v(" "),s("p",[t._v("为了保证多条命令组合的"),s("strong",[t._v("原子性")]),t._v(", Redis 提供了"),s("strong",[t._v("简单的事务")]),t._v("功能以及"),s("strong",[t._v("集成 Lua 脚本")]),t._v("来解决.")]),t._v(" "),s("h6",{attrs:{id:"_1-简单事务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-简单事务"}},[t._v("#")]),t._v(" (1)简单事务")]),t._v(" "),s("p",[s("mark",[s("strong",[t._v("Redis 事务需要将多个命令放到 multi 和 exec 命令直接执行")])]),t._v(". 这两个命令直接的命令是原子执行的. 执行 multi 命令后, 后面的命令并"),s("strong",[t._v("不会立即执行")]),t._v(", 而是暂时保存起来, 直到执行 exec 命令才"),s("strong",[t._v("统一执行")]),t._v(". 一个事务包含"),s("strong",[t._v("多个命令")]),t._v(", 服务器在执行事务期间就不会去执行其它客户端的命令请求.")]),t._v(" "),s("p",[t._v("事务中的"),s("strong",[t._v("多个命令被一次性发送")]),t._v("给服务器, 而不是一条一条发送, 这种方式被称为"),s("strong",[t._v("流水线")]),t._v(", 它可以减少客户端与服务器之间的网络通信次数从而提升性能.")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("命令")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("含义")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("MULTI")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("表示"),s("strong",[t._v("开始收集命令")]),t._v(", 后面所有命令都"),s("strong",[t._v("不是马上执行")]),t._v(", 而是加入到一个"),s("strong",[t._v("队列")]),t._v("中")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("EXEC")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("执行")]),t._v(" MULTI 后面命令"),s("strong",[t._v("队列中的所有命令")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("DISCARD")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("取代 exec 命令, 停止事务功能")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("WATCH")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v('"观察", "监控"一个 KEY, 在当前队列外的其他命令操作这个 KEY 时, '),s("strong",[t._v("放弃执行自己")]),t._v("队列的命令, 是一种"),s("strong",[t._v("乐观锁")]),t._v("的策略")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("UNWATCH")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("放弃监控一个 KEY")])])])]),t._v(" "),s("p",[s("mark",[s("strong",[t._v("之所以是简单事务是因为 Redis 在事务失败时不进行回滚, 而是继续执行余下的命令")])]),t._v(", 这与传统事务型数据库不一样, 以下是这种做法的优点: Redis 命令只会因为错误的"),s("strong",[t._v("语法而失败")]),t._v("(并且这些问题不能在入队时发现), 或是命令用在了错误类型的键上面. 从实用性的角度来说, "),s("strong",[t._v("失败的命令是由编程错误")]),t._v("造成的, 这些错误应该在开发过程中被发现, 而不应该出现在生产环境中. 因为不需要对回滚进行支持, 所以 Redis 的内部可以"),s("strong",[t._v("保持简单且快速")]),t._v(".")]),t._v(" "),s("p",[t._v("因此需要"),s("strong",[t._v("加强对生产环境中的错误异常处理")]),t._v(".")]),t._v(" "),s("p",[t._v("Redis 事务的几个特点:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("单独的隔离操作")]),t._v(": 事务中的所有命令会被序列化, 按顺序执行, 在执行的过程中不会被其他客户端发送来的命令打断.")]),t._v(" "),s("li",[s("strong",[t._v("没有隔离级别的概念")]),t._v(": 队列中的命令在事务没有被提交之前不会被实际执行.")]),t._v(" "),s("li",[s("strong",[t._v("不保证原子性")]),t._v(": Redis 中的一个事务中如果存在命令执行失败, 那么其他命令依然会被执行, 没有回滚机制.")]),t._v(" "),s("li",[t._v("Redis 是以"),s("strong",[t._v("乐观锁")]),t._v("的策略操作事务的, 如上述的 WATCH 指令, 没有悲观锁.")])]),t._v(" "),s("blockquote",[s("p",[t._v("事务执行出错怎么办?")])]),t._v(" "),s("p",[t._v("分为两种, 一是"),s("strong",[t._v("命令错误")]),t._v(". 即命令写错了, 这种时候"),s("strong",[t._v("不执行")]),t._v("事务. 第二种是"),s("strong",[t._v("运行时错误")]),t._v(", 语法正确但是发生一些异常, 这种时候前面之前的命令是不会变化的, Redis "),s("mark",[s("strong",[t._v("不支持回滚")])]),t._v(". 需要开发人员自己解决.")]),t._v(" "),s("h6",{attrs:{id:"_2-集成lua脚本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-集成lua脚本"}},[t._v("#")]),t._v(" (2)集成Lua脚本")]),t._v(" "),s("p",[t._v("集成 Lua 脚本可以"),s("strong",[t._v("自己定义指令")]),t._v(". 执行 Lua 脚本用 "),s("strong",[t._v("eval")]),t._v("(单次调用脚本, 每次都传输到服务端) 或 "),s("strong",[t._v("evalsha")]),t._v("(脚本存在服务端, 复用) 命令.")]),t._v(" "),s("p",[t._v("Lua 脚本发送到服务端之后会被当做一个"),s("strong",[t._v("普通命令")]),t._v("排队执行.")]),t._v(" "),s("h5",{attrs:{id:"_3-bitmaps"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-bitmaps"}},[t._v("#")]),t._v(" 3.Bitmaps")]),t._v(" "),s("p",[t._v("实现"),s("strong",[t._v("对位")]),t._v("的操作, 可以节约内存.")]),t._v(" "),s("p",[t._v("Bitmaps 本身也是一种"),s("strong",[t._v("字符串")]),t._v(", 只不过可以对字符串的"),s("strong",[t._v("位")]),t._v("进行操作. 可以把它想成一个以位为单位的数组, 数组中每个单元"),s("strong",[t._v("只能存储 0 或 1")]),t._v(", 数组的下标称为"),s("strong",[t._v("偏移量")]),t._v(".")]),t._v(" "),s("blockquote",[s("p",[t._v("使用场景")])]),t._v(" "),s("ul",[s("li",[t._v("可以用于用户"),s("strong",[t._v("登录统计")]),t._v(", 如活跃用户数统计.")]),t._v(" "),s("li",[t._v("网址"),s("strong",[t._v("黑名单, 白名单")]),t._v(".")])]),t._v(" "),s("blockquote",[s("p",[t._v("基本操作")])]),t._v(" "),s("p",[s("strong",[t._v("设置值")]),t._v(": 设置键的第 offset 个位(从 0 算起)的值.")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("setbit key offset value\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v("获取值")]),t._v(": 获取 offset 处的值.")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("getbit key offset\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v("获取 1 的个数")]),t._v(": 获取 Bitmaps 指定范围内值为 1 的个数(不给范围则为全部).")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("bitcount key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("start end"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v("Bitmaps 间的运算")]),t._v(": 可以做多个 Bitmaps 直接的交集, 并集, 非, 异或等操作并将结果放在 destkey 中.")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("bitop and"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("or"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("not"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("xor destkey key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("计算 Bitmaps 中第一个值为 targetBit 的偏移量.")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("bitops key targetBit "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("start"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("end"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h5",{attrs:{id:"_4-hyperloglog"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-hyperloglog"}},[t._v("#")]),t._v(" 4.HyperLogLog")]),t._v(" "),s("p",[t._v("HyperLogLog 实际也是"),s("strong",[t._v("字符串")]),t._v("类型. 它是一种"),s("strong",[t._v("基数算法")]),t._v(", 通过 HyperLogLog 可以利用"),s("strong",[t._v("极小的内存空间完成独立总数的统计")]),t._v(", 数据集可以是 "),s("strong",[t._v("IP, Email, ID")]),t._v(" 等.")]),t._v(" "),s("p",[t._v("提供了三个命令: "),s("strong",[t._v("pfadd, pfcount, pfmerge")]),t._v(".")]),t._v(" "),s("p",[t._v("HyperLogLog 使用内存量小的惊人, 所以存在一定的"),s("strong",[t._v("误差率")]),t._v(", 官方给 0.81% 误差.")]),t._v(" "),s("blockquote",[s("p",[t._v("使用场景")])]),t._v(" "),s("ul",[s("li",[t._v("只为了计算"),s("strong",[t._v("独立总数")]),t._v(", 不需要获取单条数据.")]),t._v(" "),s("li",[t._v("能够容忍一定的误差率.")])]),t._v(" "),s("h5",{attrs:{id:"_5-发布订阅"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-发布订阅"}},[t._v("#")]),t._v(" 5.发布订阅")]),t._v(" "),s("p",[t._v("Redis 也提供了发布消息, 订阅频道, 取消订阅以及按照模式订阅的"),s("strong",[t._v("基础")]),t._v("发布订阅功能.")]),t._v(" "),s("p",[t._v("相比于专业的消息队列系统, Redis 的发布订阅略显"),s("strong",[t._v("粗糙")]),t._v(", 例如"),s("strong",[t._v("无法实现消息堆积和回溯")]),t._v(". 如果能容忍的场景是可以的, 因为实现简单. 可以用于变更通知.")]),t._v(" "),s("h5",{attrs:{id:"_6-geo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-geo"}},[t._v("#")]),t._v(" 6.GEO")]),t._v(" "),s("p",[t._v("Redis 提供了 GEO("),s("strong",[t._v("地理信息定位")]),t._v(") 的功能, 可以方便的存放"),s("strong",[t._v("地理位置")]),t._v(". 可以用于实现"),s("strong",[t._v("附近位置, 摇一摇")]),t._v("这种基于位置信息的功能. GEO 底层采用 "),s("strong",[t._v("zset")]),t._v(" 实现.")]),t._v(" "),s("p",[t._v("GEO 可以存储地理位置的"),s("strong",[t._v("精度, 维度, 成员信息")]),t._v(". 使用 GEO 可以方便的计算两个位置之间的"),s("strong",[t._v("距离")]),t._v("以及其他位置信息.")]),t._v(" "),s("p",[t._v("在一个地图应用中, 车的数据, 餐馆的数据, 人的数据可能会有百万千万条, 如果使用 "),s("strong",[t._v("Redis")]),t._v(" 的 GEO 数据结构, 它们将"),s("strong",[t._v("全部放在一个")]),t._v(" zset 集合中. 在 "),s("strong",[t._v("Redis")]),t._v(" 的集群中, 集合可能会从一个节点迁移到另一个节点, 如果单个 key 的数据过大, 会对集群的迁移工作造成较大的影响, 在集群环境中单个 key 对应的数据量不宜超过 1M, 否则会导致集群迁移出现卡顿现象, 影响线上服务的正常运行.")]),t._v(" "),s("p",[t._v("所以建议 "),s("strong",[t._v("GEO")]),t._v(" 数据使用 "),s("strong",[t._v("单独的 Redis 实例部署")]),t._v(", 不使用集群环境.")]),t._v(" "),s("p",[t._v("如果数据量过亿甚至更大, 就需要对 "),s("strong",[t._v("GEO")]),t._v(" 数据进行拆分, 按国家拆分, 按省拆分, 按市拆分, 在人口特大城市甚至可以按区拆分. 这样就可以显著降低单个 zset 集合的大小.")]),t._v(" "),s("h5",{attrs:{id:"_7-事件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-事件"}},[t._v("#")]),t._v(" 7.事件")]),t._v(" "),s("p",[t._v("Redis 服务器是一个"),s("strong",[t._v("事件驱动")]),t._v("程序.")]),t._v(" "),s("h6",{attrs:{id:"_1-文件事件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-文件事件"}},[t._v("#")]),t._v(" (1)文件事件")]),t._v(" "),s("p",[s("strong",[t._v("服务器")]),t._v("通过"),s("strong",[t._v("套接字")]),t._v("与客户端或其它服务器进行通信, "),s("strong",[t._v("文件事件就是对套接字操作的抽象")]),t._v(".")]),t._v(" "),s("p",[t._v("Redis 基于 "),s("strong",[t._v("Reactor 模式")]),t._v("开发了自己的网络事件处理器, 使用 IO "),s("strong",[t._v("多路复用")]),t._v("程序来同时监听多个套接字, 并将到达的事件传送给文件事件分派器, 分派器会根据套接字产生的"),s("strong",[t._v("事件类型")]),t._v("调用相应的事件处理器.")]),t._v(" "),s("h6",{attrs:{id:"_2-时间事件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-时间事件"}},[t._v("#")]),t._v(" (2)时间事件")]),t._v(" "),s("p",[t._v("服务器有一些操作需要在"),s("strong",[t._v("给定的时间点")]),t._v("执行, 时间事件是对这类定时操作的抽象.")]),t._v(" "),s("p",[t._v("时间事件又分为:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("定时事件")]),t._v(": 是让一段程序在指定的时间之内执行一次.")]),t._v(" "),s("li",[s("strong",[t._v("周期性事件")]),t._v(": 是让一段程序每隔指定时间就执行一次.")])]),t._v(" "),s("p",[t._v("Redis 将所有时间事件都放在一个"),s("strong",[t._v("无序链表")]),t._v("中, 通过遍历整个链表查找出已到达的时间事件, 并调用相应的事件处理器.")]),t._v(" "),s("h6",{attrs:{id:"_3-事件的调度与执行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-事件的调度与执行"}},[t._v("#")]),t._v(" (3)事件的调度与执行")]),t._v(" "),s("p",[t._v("服务器需要"),s("strong",[t._v("不断监听文件事件的套接字")]),t._v("才能得到待处理的文件事件, 但是不能一直监听, 否则时间事件无法在规定的时间内执行, 因此监听时间应该根据距离现在最近的时间事件来决定.")]),t._v(" "),s("p",[t._v("事件调度与执行由 "),s("strong",[t._v("aeProcessEvents 函数")]),t._v("负责, 伪代码如下:")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("aeProcessEvents")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取到达时间离当前时间最接近的时间事件")]),t._v("\n    time_event "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" aeSearchNearestTimer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 计算最接近的时间事件距离到达还有多少毫秒")]),t._v("\n    remaind_ms "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" time_event"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("when "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" unix_ts_now"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果事件已到达, 那么 remaind_ms 的值可能为负数, 将它设为 0")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" remaind_ms "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        remaind_ms "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 根据remaind_ms的值, 创建timeval")]),t._v("\n    timeval "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" create_timeval_with_ms"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("remaind_ms"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 阻塞并等待文件事件产生, 最大阻塞时间由传入的timeval决定")]),t._v("\n    aeApiPoll"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("timeval"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 处理所有已产生的文件事件")]),t._v("\n    procesFileEvents"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 处理所有已到达的时间事件")]),t._v("\n    processTimeEvents"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br")])]),s("p",[t._v("将 "),s("strong",[t._v("aeProcessEvents 函数")]),t._v("置于一个"),s("strong",[t._v("循环里面")]),t._v(", 加上初始化和清理函数, 就构成了 Redis 服务器的"),s("strong",[t._v("主函数")]),t._v(", 伪代码如下:")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 初始化服务器")]),t._v("\n    init_server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 一直处理事件, 直到服务器关闭为止")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" server_is_not_shutdown"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        aeProcessEvents"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 服务器关闭, 执行清理操作")]),t._v("\n    clean_server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("p",[t._v("从事件处理的角度来看, 服务器运行流程如下:")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220522211928514.png",alt:""}})]),t._v(" "),s("h4",{attrs:{id:"redis客户端"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis客户端"}},[t._v("#")]),t._v(" Redis客户端")]),t._v(" "),s("p",[t._v("Redis 使用"),s("strong",[t._v("单线程")]),t._v("来处理多个客户端的访问.")]),t._v(" "),s("h5",{attrs:{id:"_1-客户端通信协议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-客户端通信协议"}},[t._v("#")]),t._v(" 1.客户端通信协议")]),t._v(" "),s("p",[t._v("客户端与服务端的通信协议建立在 "),s("strong",[t._v("TCP")]),t._v(" 至上. Redis 定义了 "),s("strong",[t._v("RESP")]),t._v("(Redis 序列化协议) 用于客户端与服务端交互. 有了这个通信协议各个编程语言就可以自己实现相应的 Redis 客户端.")]),t._v(" "),s("h5",{attrs:{id:"_2-客户端管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-客户端管理"}},[t._v("#")]),t._v(" 2.客户端管理")]),t._v(" "),s("p",[t._v("Redis 提供了客户端相关的 API 对其"),s("strong",[t._v("状态进行监控和管理")]),t._v(".")]),t._v(" "),s("h6",{attrs:{id:"_1-输入与输出缓冲区"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-输入与输出缓冲区"}},[t._v("#")]),t._v(" (1)输入与输出缓冲区")]),t._v(" "),s("p",[s("strong",[t._v("输入缓冲区")]),t._v(": Redis 为每个客户端分配了输入缓冲区, 作用是将客户端"),s("strong",[t._v("发送的命令进行缓存")]),t._v(", 之后 Redis 会逐渐"),s("strong",[t._v("拉取")]),t._v("指令并执行. 如果有指令执行时间过长, 可能导致输入缓冲区指令堆积严重.")]),t._v(" "),s("p",[s("strong",[t._v("输出缓冲区")]),t._v(": Redis 也为每个客户端分配了输出缓冲区, 作用是"),s("strong",[t._v("保存返回给客户端命令执行的结果")]),t._v(", 为与客户端交互返回结果提供缓冲. 按客户端不同输出缓冲区还可以具体分为普通客户端输出缓冲区, 发布订阅输出缓冲区, 复制输出缓冲区. 实际上输出缓冲区由两部分组成: "),s("strong",[t._v("固定缓冲区(16K) 和动态缓冲区")]),t._v(", 固定缓冲区(使用的是字节数组) 返回比较小的执行结果, 动态缓冲区(使用的是列表) 返回比较大的结果. 固定缓冲区用尽则使用动态缓冲区.")]),t._v(" "),s("h6",{attrs:{id:"_2-客户端管理指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-客户端管理指令"}},[t._v("#")]),t._v(" (2)客户端管理指令")]),t._v(" "),s("p",[s("strong",[t._v("列出与 Redis 服务器相连接的所有客户端连接信息")]),t._v(": 输出每一行就表示一个客户端连接. 每个连接都有一些重要的属性. 如"),s("strong",[t._v("标识属性")]),t._v(": id(唯一 ID), addr(客户端连接 IP 与端口), fd(socket 的文件描述符), name(客户端名字), "),s("strong",[t._v("输入缓冲区属性")]),t._v(": qbuf(输入缓存区总容量), qbuf-free(输入缓存区剩余容量), "),s("strong",[t._v("输出缓冲区属性")]),t._v(": obl, oll, omem, "),s("strong",[t._v("存活状态属性")]),t._v(": age(已连接时间), idle(最近一次空闲时间).")]),t._v(" "),s("div",{staticClass:"language-mysql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("client list\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v("获取客户端信息")]),t._v(": 可以有效的帮助开发和运维找到客户端可能存在的问题.")]),t._v(" "),s("div",{staticClass:"language-mysql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("info client\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h5",{attrs:{id:"_3-jedis"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-jedis"}},[t._v("#")]),t._v(" 3.Jedis")]),t._v(" "),s("p",[s("strong",[t._v("Jedis")]),t._v(" 是 Java 实现的 Redis 客户端. 基础使用是用"),s("strong",[t._v("直连")]),t._v("的方式, 但最好使用 "),s("strong",[t._v("Jedis 连接池")]),t._v("(JedisPool) 的方式进行操作, 这样可以减少连接时创建 "),s("strong",[t._v("TCP 连接")]),t._v("的开销. JedisPool 是"),s("strong",[t._v("单例")]),t._v("的.")]),t._v(" "),s("p",[t._v("Jedis.close() 在"),s("strong",[t._v("直连状态")]),t._v("下是"),s("strong",[t._v("关闭连接")]),t._v(", 如果使用了连接池, 则使用完成后 "),s("strong",[t._v("close 操作不是关闭")]),t._v("连接, 而是"),s("strong",[t._v("归还")]),t._v("到连接池中.")]),t._v(" "),s("p",[t._v("Jedis 还可以实现 "),s("strong",[t._v("Pipeline")]),t._v(" 操作和执行 "),s("strong",[t._v("Lua 脚本")]),t._v("(也有 eval 和 evalsha 两个方法).")]),t._v(" "),s("p",[t._v("引入相关依赖:")]),t._v(" "),s("div",{staticClass:"language-xml line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("redis.clients"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("jedis"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("version")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("2.9.0"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("version")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("示例代码:")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("JedisSingleTest")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("JedisPoolConfig")]),t._v(" jedisPoolConfig "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("JedisPoolConfig")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        jedisPoolConfig"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setMaxTotal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        jedisPoolConfig"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setMaxIdle")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        jedisPoolConfig"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setMinIdle")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// timeout, 这里既是连接超时又是读写超时, 从Jedis 2.8开始有区分connectionTimeout和soTimeout的构造函数")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("JedisPool")]),t._v(" jedisPool "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("JedisPool")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("jedisPoolConfig"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"192.168.0.60"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6379")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Jedis")]),t._v(" jedis "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从redis连接池里拿出一个连接执行命令")]),t._v("\n            jedis "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" jedisPool"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getResource")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("jedis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"single"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"nano"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("jedis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"single"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 管道示例")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 管道的命令执行方式: cat redis.txt | redis-cli -h 127.0.0.1 -a password - p 6379 --pipe")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/* Pipeline pl = jedis.pipelined();\n            for (int i = 0; i < 10; i++) {\n                pl.incr("pipelineKey");\n                pl.set("nano" + i, "nano");\n            }\n            List<Object> results = pl.syncAndReturnAll();\n            System.out.println(results);*/')]),t._v("\n\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// lua脚本模拟一个商品减库存的原子操作")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// lua脚本命令执行方式: redis-cli --eval /tmp/test.lua , 10")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/*jedis.set("product_count_10016", "15");  //初始化商品10016的库存\n            String script = " local count = redis.call(\'get\', KEYS[1]) " +\n                            " local a = tonumber(count) " +\n                            " local b = tonumber(ARGV[1]) " +\n                            " if a >= b then " +\n                            "   redis.call(\'set\', KEYS[1], a-b) " +\n                            "   return 1 " +\n                            " end " +\n                            " return 0 ";\n            Object obj = jedis.eval(script, Arrays.asList("product_count_10016"), Arrays.asList("10"));\n            System.out.println(obj);*/')]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注意这里不是关闭连接, 在JedisPool模式下, Jedis会被归还给资源池. ")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("jedis "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                jedis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br"),s("span",{staticClass:"line-number"},[t._v("39")]),s("br"),s("span",{staticClass:"line-number"},[t._v("40")]),s("br"),s("span",{staticClass:"line-number"},[t._v("41")]),s("br"),s("span",{staticClass:"line-number"},[t._v("42")]),s("br"),s("span",{staticClass:"line-number"},[t._v("43")]),s("br"),s("span",{staticClass:"line-number"},[t._v("44")]),s("br"),s("span",{staticClass:"line-number"},[t._v("45")]),s("br"),s("span",{staticClass:"line-number"},[t._v("46")]),s("br"),s("span",{staticClass:"line-number"},[t._v("47")]),s("br"),s("span",{staticClass:"line-number"},[t._v("48")]),s("br"),s("span",{staticClass:"line-number"},[t._v("49")]),s("br"),s("span",{staticClass:"line-number"},[t._v("50")]),s("br"),s("span",{staticClass:"line-number"},[t._v("51")]),s("br"),s("span",{staticClass:"line-number"},[t._v("52")]),s("br")])]),s("h4",{attrs:{id:"一个简单的论坛系统应用示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一个简单的论坛系统应用示例"}},[t._v("#")]),t._v(" 一个简单的论坛系统应用示例")]),t._v(" "),s("p",[t._v("该论坛系统功能如下:")]),t._v(" "),s("ul",[s("li",[t._v("可以发布文章.")]),t._v(" "),s("li",[t._v("可以对文章进行"),s("strong",[t._v("点赞")]),t._v(".")]),t._v(" "),s("li",[t._v("在首页可以按文章的发布时间或者文章的"),s("strong",[t._v("点赞数进行排序显示")]),t._v(".")])]),t._v(" "),s("blockquote",[s("p",[t._v("文章信息")])]),t._v(" "),s("p",[t._v("文章包括标题, 作者, 赞数等信息, 在关系型数据库中很容易构建一张表来存储这些信息, 在 Redis 中可以使用 "),s("strong",[t._v("HASH")]),t._v(" 来存储每种信息以及其对应的值的映射.")]),t._v(" "),s("p",[t._v("Redis 没有关系型数据库中的"),s("strong",[t._v("表")]),t._v("这一概念来将同种类型的数据存放在一起, 而是使用"),s("strong",[t._v("命名空间")]),t._v("的方式来实现这一功能. "),s("strong",[t._v("键名的前面部分存储命名空间")]),t._v(", 后面部分的内容存储 ID, 通常"),s("strong",[t._v("使用 : 来进行分隔")]),t._v(". 例如下面的 HASH 的键名为 article:92617, 其中 article 为命名空间, ID 为 92617.")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/1563520443633.png",alt:""}})]),t._v(" "),s("blockquote",[s("p",[t._v("点赞功能")])]),t._v(" "),s("p",[t._v("当有用户为一篇文章点赞时, 除了要对该文章的 votes 字段进行加 1 操作, 还必须记录该用户已经对该文章进行了点赞, 防止用户点赞次数超过 1. 可以建立文章的"),s("strong",[t._v("已投票用户")]),t._v("集合来进行记录.")]),t._v(" "),s("p",[t._v("为了节约内存, 规定一篇文章发布满一周之后, 就不能再对它进行投票, 而文章的已投票集合也会被删除, 可以为文章的已投票集合设置一个一周的"),s("strong",[t._v("过期时间")]),t._v("就能实现这个规定.")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/1563520458408.png",alt:""}})]),t._v(" "),s("blockquote",[s("p",[t._v("对文章进行排序")])]),t._v(" "),s("p",[t._v("为了按发布时间和点赞数进行排序, 可以建立一个文章发布时间的"),s("strong",[t._v("有序集合")]),t._v("和一个文章点赞数的有序集合. 下图中的 score 就是这里所说的点赞数; 下面所示的有序集合分值并不直接是时间和点赞数, 而是根据时间和点赞数间接计算出来的.")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/1563520475567.png",alt:""}})]),t._v(" "),s("p",[t._v("‍")]),t._v(" "),s("p",[t._v("‍")]),t._v(" "),s("h4",{attrs:{id:"参考资料"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("Redis 命令")]),t._v("在线查询: "),s("a",{attrs:{href:"http://redisdoc.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://redisdoc.com/"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("Carlson J L. Redis in Action[J]. Media.johnwiley.com.au, 2013.")]),t._v(" "),s("li",[s("a",{attrs:{href:"http://redisbook.com/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("黄健宏. Redis 设计与实现 [M]. 机械工业出版社, 2014."),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://redislabs.com/ebook/foreword/",target:"_blank",rel:"noopener noreferrer"}},[t._v("REDIS IN ACTION"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"http://ticki.github.io/blog/skip-lists-done-right/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Skip Lists: Done Right"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"http://www.cnblogs.com/loveincode/p/7411911.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("论述 Redis 和 Memcached 的差异"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"http://wiki.jikexueyuan.com/project/redis-guide",target:"_blank",rel:"noopener noreferrer"}},[t._v("Redis 3.0 中文版- 分片"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"http://www.scienjus.com/redis-use-case/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Redis 应用场景"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://redis.io/topics/lru-cache",target:"_blank",rel:"noopener noreferrer"}},[t._v("Using Redis as an LRU cache"),s("OutboundLink")],1)])]),t._v(" "),s("p",[s("strong",[t._v("优秀文章")]),t._v(":")]),t._v(" "),s("ul",[s("li",[t._v("阿里云 Redis 开发规范 - "),s("a",{attrs:{href:"https://www.infoq.cn/article/K7dB5AFKI9mr5Ugbs_px",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.infoq.cn/article/K7dB5AFKI9mr5Ugbs_px"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("为什么要防止 bigkey?  - "),s("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=Mzg2NTEyNzE0OA==&mid=2247483677&idx=1&sn=5c320b46f0e06ce9369a29909d62b401&chksm=ce5f9e9ef928178834021b6f9b939550ac400abae5c31e1933bafca2f16b23d028cc51813aec&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://mp.weixin.qq.com/s?__biz=Mzg2NTEyNzE0OA==&mid=2247483677&idx=1&sn=5c320b46f0e06ce9369a29909d62b401&chksm=ce5f9e9ef928178834021b6f9b939550ac400abae5c31e1933bafca2f16b23d028cc51813aec&scene=21#wechat_redirect"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("Redis【入门】就这一篇!  - "),s("a",{attrs:{href:"https://www.wmyskxz.com/2018/05/31/redis-ru-men-jiu-zhe-yi-pian/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.wmyskxz.com/2018/05/31/redis-ru-men-jiu-zhe-yi-pian/"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("《Redis 设计与实现》 - "),s("a",{attrs:{href:"http://redisbook.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://redisbook.com/"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("【官方文档】Redis 数据类型介绍 - "),s("a",{attrs:{href:"http://www.redis.cn/topics/data-types-intro.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://www.redis.cn/topics/data-types-intro.html"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("《Redis 深度历险》 - "),s("a",{attrs:{href:"https://book.douban.com/subject/30386804/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://book.douban.com/subject/30386804/"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("阿里云 Redis 开发规范 - "),s("a",{attrs:{href:"https://www.infoq.cn/article/K7dB5AFKI9mr5Ugbs_px",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.infoq.cn/article/K7dB5AFKI9mr5Ugbs_px"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("Redis 快速入门 - 易百教程 - "),s("a",{attrs:{href:"https://www.yiibai.com/redis/redis_quick_guide.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.yiibai.com/redis/redis_quick_guide.html"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("Redis【入门】就这一篇! - "),s("a",{attrs:{href:"https://www.wmyskxz.com/2018/05/31/redis-ru-men-jiu-zhe-yi-pian/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.wmyskxz.com/2018/05/31/redis-ru-men-jiu-zhe-yi-pian/"),s("OutboundLink")],1)])]),t._v(" "),s("p",[s("strong",[t._v("Redis")]),t._v("数据结构源码分析:")]),t._v(" "),s("ul",[s("li",[t._v("Redis 数据结构-字符串源码分析: "),s("a",{attrs:{href:"https://my.oschina.net/mengyuankan/blog/1926320",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://my.oschina.net/mengyuankan/blog/1926320"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("Redis 数据结构-字典源码分析:  "),s("a",{attrs:{href:"https://my.oschina.net/mengyuankan/blog/1929593",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://my.oschina.net/mengyuankan/blog/1929593"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=e.exports}}]);