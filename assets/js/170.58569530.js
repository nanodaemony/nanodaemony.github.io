(window.webpackJsonp=window.webpackJsonp||[]).push([[170],{478:function(e,s,r){"use strict";r.r(s);var a=r(7),t=Object(a.a)({},(function(){var e=this,s=e._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"_110-zookeeper"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_110-zookeeper"}},[e._v("#")]),e._v(" 110.Zookeeper")]),e._v(" "),s("h3",{attrs:{id:"一-zookeeper基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一-zookeeper基础"}},[e._v("#")]),e._v(" 一.Zookeeper基础")]),e._v(" "),s("h4",{attrs:{id:"基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[e._v("#")]),e._v(" 基础")]),e._v(" "),s("p",[e._v("项目从单体到"),s("strong",[e._v("分布式")]),e._v("转变之后, 会产生"),s("strong",[e._v("多个节点之间协同")]),e._v("的问题. 如: 每天的定时任务由谁哪个节点来执行? RPC 调用时的"),s("strong",[e._v("服务发现")]),e._v("? 如何保证并发请求的"),s("strong",[e._v("幂等")]),e._v("? 这些可以统一归纳为"),s("strong",[e._v("多节点协调问题")]),e._v(", 如果靠节点自身进行协调是不可靠的, 性能上也不可取. 应该由一个"),s("mark",[s("strong",[e._v("独立的服务做协调工作")])]),e._v(", 它必须可靠, 而且保证性能.")]),e._v(" "),s("p",[e._v("ZK 是用于分布式应用的协调服务. "),s("strong",[e._v("分布式应用程序可以使用 ZK 的 API 用于同步, 节点状态, 配置等信息, 服务注册等信息")]),e._v(". 其设计目标是将复杂且容易出错的分布式一致性服务封装起来, 构成一个高效可靠的原语集, 并以一系列简单易用的接口提供给用户使用.")]),e._v(" "),s("p",[e._v("ZK 虽然是个大管家, 但是它不会直接发号施令, 而是"),s("mark",[s("strong",[e._v("只是对各个客户的行为做记录")])]),e._v(", 不然 ZK 就成了一个中心化的结点, 其可靠性依然有问题.")]),e._v(" "),s("p",[s("strong",[e._v("ZK 是一个典型的分布式")]),e._v("​"),s("mark",[s("strong",[e._v("数据一致性")])]),e._v("​**解决方案, 分布式应用程序可以基于 ZK 实现诸如数据发布/订阅, 负载均衡, 命名服务, 分布式协调/通知, 集群管理, Master 选举, 分布式锁和分布式队列等功能. ** 其一致性是通过基于 "),s("strong",[e._v("Paxos")]),e._v(" 算法的 "),s("strong",[e._v("ZAB 协议")]),e._v("完成的.")]),e._v(" "),s("p",[e._v("ZK 作为分布式系统也满足 CAP 定理, 其实现保证了 "),s("mark",[s("strong",[e._v("CP")])]),e._v("(数据一致性与分区容错性).")]),e._v(" "),s("h4",{attrs:{id:"部署与常规配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#部署与常规配置"}},[e._v("#")]),e._v(" 部署与常规配置")]),e._v(" "),s("h5",{attrs:{id:"_1-安装与运行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-安装与运行"}},[e._v("#")]),e._v(" 1.安装与运行")]),e._v(" "),s("p",[e._v("ZooKeeper 基于 Java 开发, 运行依赖 JVM 环境. "),s("strong",[e._v("默认端口号是 2181")]),e._v(".")]),e._v(" "),s("p",[e._v("下载地址: "),s("a",{attrs:{href:"https://zookeeper.apache.org/releases.html#download",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://zookeeper.apache.org/releases.html#download"),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("具体部署流程:")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 下载")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("wget")]),e._v(" https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/current/apache-zookeeper-3.5.5-bin.tar.gz\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 解压")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("tar")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-zxvf")]),e._v(" apache-zookeeper-3.5.5-bin.tar.gz\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 拷贝默认配置")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("zookeeper_home"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("/conf\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cp")]),e._v(" zoo_sample.cfg zoo.cfg\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 启动")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("zookeeper_home"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("/bin/zkServer.sh\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br")])]),s("p",[e._v("Zookeeper 有"),s("strong",[e._v("集群模式")]),e._v("和"),s("strong",[e._v("单机模式")]),e._v("等两种运行模式, 单机模式不过多介绍.")]),e._v(" "),s("h5",{attrs:{id:"_2-集群模式与配置文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-集群模式与配置文件"}},[e._v("#")]),e._v(" 2.集群模式与配置文件")]),e._v(" "),s("p",[e._v("集群模式下一个简单的 zoo.cfg "),s("strong",[e._v("配置文件")]),e._v(".")]),e._v(" "),s("div",{staticClass:"language-yaml line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ZK中的时间配置最小单位(基本单位), 其他时间配置以整数倍tickTime计算, 这里是2秒")]),e._v("\ntickTime=2000\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Leader允许Follower启动时在initLimit时间内完成数据同步, 它表示tickTime时间倍数 即:initLimit*tickTime, 这里是20秒")]),e._v("\ninitLimit=10\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Leader发送心跳包给集群中所有Follower, 若Follower在syncLimit时间内没有响应, 那么Leader就认为该Follower已经挂掉了, 即: syncLimit*tickTime, 这里为10秒")]),e._v("\nsyncLimit=5\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 数据存储目录")]),e._v("\ndataDir=/usr/local/zookeeper/data\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 对客户端提供的端口号")]),e._v("\nclientPort=2181\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 配置ZK的日志目录")]),e._v("\ndataLogDir=/usr/local/zookeeper/logs\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 单个客户端与Zookeeper最大并发连接数")]),e._v("\nmaxClientCnxns=60\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 保存的数据快照数量, 之外的将会被清除")]),e._v("\nautopurge.snapRetainCount=3\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 自动触发清除任务时间间隔, 小时为单位. 默认为0, 表示不自动清除. ")]),e._v("\nautopurge.purgeInterval=1\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ZK集群节点配置, 端口号2888用于集群节点之间数据通信, 端口号3888用于集群中Leader选举")]),e._v("\nserver.1=192.168.123.100"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("2888"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("3888")]),e._v("\nserver.2=192.168.123.101"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("2888"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("3888")]),e._v("\nserver.3=192.168.123.102"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("2888"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("3888")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br")])]),s("p",[e._v("集群模式下的多个服务器配置为:")]),e._v(" "),s("div",{staticClass:"language-yaml line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[e._v("server.id=host"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("port"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("port\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("注意: 其中 id 称为 "),s("strong",[e._v("Server ID")]),e._v(", 标识该机器在集群中的"),s("strong",[e._v("机器序号")]),e._v("; 同时需要在数据目录(即 dataDir 参数指定的目录)下创建一个 "),s("mark",[s("strong",[e._v("myid")])]),e._v(" 文件, 该文件仅有"),s("strong",[e._v("一行内容, 并且是一个数字")]),e._v(", 即对应于每台机器的 "),s("strong",[e._v("Server ID 数字")]),e._v(".")]),e._v(" "),s("p",[s("strong",[e._v("每个服务器都需要上述配置文件和 myid 文件")]),e._v(".")]),e._v(" "),s("h5",{attrs:{id:"_3-集群部署示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-集群部署示例"}},[e._v("#")]),e._v(" 3.集群部署示例")]),e._v(" "),s("p",[e._v("配置语法:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server.<节点ID>=<ip>:<数据同步端口>:<选举端口>\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("ul",[s("li",[e._v("**节点 ID: ** 服务 id 手动指定 1 至 125 之间的数字, 并写到对应服务节点的  "),s("strong",[e._v("{dataDir}/myid")]),e._v(" 文件中.")]),e._v(" "),s("li",[s("strong",[e._v("IP 地址: "),s("strong",[e._v("​"),s("strong",[s("strong",[e._v("节点的远程 IP 地址. 各结点的 IP 地址可以相同, 但这种是")])]),e._v("​")]),e._v("伪集群")]),e._v(", 注意生产环境不能这么做, 因为一台机器无法实现容错.")]),e._v(" "),s("li",[s("strong",[e._v("数据同步端口: "),s("strong",[e._v("​"),s("strong",[s("strong",[e._v("主从")])]),e._v("​")]),e._v("同步数据复制端口")]),e._v(", 注意伪集群时端口号不能重复.")]),e._v(" "),s("li",[s("strong",[e._v("选举端口: "),s("strong",[e._v("​"),s("strong",[s("strong",[e._v("主从节点")])]),e._v("​")]),e._v("选举端口")]),e._v(", 注意伪集群时端口号不能重复.")])]),e._v(" "),s("p",[s("strong",[e._v("集群配置流程:")])]),e._v(" "),s("ul",[s("li",[e._v("分别创建 3 个 data 目录用于存储各节点数据.")])]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" data\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" data/1\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" data/3\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" data/3\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("ul",[s("li",[e._v("创建 myid 文件, 并分别写入 id 号 1,2,3.")])]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" data/1/myid\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" data/3/myid\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" data/2/myid\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("ul",[s("li",[e._v("编写配置文件.")])]),e._v(" "),s("p",[s("strong",[e._v("conf/zoo1.cfg")])]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("tickTime")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2000")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("initLimit")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("10")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("syncLimit")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("dataDir")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("data/1\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("clientPort")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2181")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 集群配置")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("server.1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:2887:3887\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("server.2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:2888:3888\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("server.3")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:2889:3889\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br")])]),s("p",[s("strong",[e._v("conf/zoo2.cfg")])]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("tickTime")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2000")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("initLimit")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("10")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("syncLimit")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("dataDir")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("data/2\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("clientPort")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2182")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 集群配置")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("server.1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:2887:3887\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("server.2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:2888:3888\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("server.3")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:2889:3889\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br")])]),s("p",[s("strong",[e._v("conf/zoo3.cfg")])]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("tickTime")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2000")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("initLimit")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("10")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("syncLimit")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("dataDir")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("data/3\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("clientPort")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2183")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 集群配置")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("server.1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:2887:3887\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("server.2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:2888:3888\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("server.3")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:2889:3889\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br")])]),s("ul",[s("li",[e._v("分别启动结点, 启动时分别选择配置文件启动. 如果当前只有一个启动, 整个集群是不可用的, 只有启动超过一半才行.")])]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("./bin/zkServer.sh start conf/zoo1.cfg\n./bin/zkServer.sh start conf/zoo2.cfg\n./bin/zkServer.sh start conf/zoo3.cfg\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("ul",[s("li",[e._v("分别查看状态.")])]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("./bin/zkServer.sh status conf/zoo1.cfg\nMode: follower\n./bin/zkServer.sh status conf/zoo2.cfg\nMode: leader\n./bin/zkServer.sh status conf/zoo3.cfg\nMode: follower\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])]),s("ul",[s("li",[e._v("分别连接指定节点: zkCli.sh 后加参数  "),s("strong",[e._v("-server")]),e._v(" 表示连接指定 IP 与端口.")])]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("./bin/zkCli.sh "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-server")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:2181\n./bin/zkCli.sh "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-server")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:2182\n./bin/zkCli.sh "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-server")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:2183\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("ul",[s("li",[e._v("任意节点中"),s("strong",[e._v("创建数据")]),e._v(", 查看其它节点已经同步成功.")])]),e._v(" "),s("p",[e._v("注意: -server 参数后"),s("strong",[e._v("同时连接多个服务节点")]),e._v(", 并用逗号隔开 127.0.0.1:2181, 127.0.0.1:2182.")]),e._v(" "),s("p",[e._v("通过 "),s("code",[e._v("./bin/zkServer.sh status <zoo配置文件>")]),e._v("​ 命令可以查看到"),s("strong",[e._v("节点状态")]),e._v(".")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("./bin/zkServer.sh status conf/zoo1.cfg\nMode: follower\n./bin/zkServer.sh status conf/zoo2.cfg\nMode: leader\n./bin/zkServer.sh status conf/zoo3.cfg\nMode: follower\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])]),s("p",[e._v("可以发现中间的 "),s("strong",[e._v("2182")]),e._v(" 是 "),s("strong",[e._v("leader")]),e._v(" 状态.")]),e._v(" "),s("h3",{attrs:{id:"二-zookeeper核心原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二-zookeeper核心原理"}},[e._v("#")]),e._v(" 二.ZooKeeper核心原理")]),e._v(" "),s("h4",{attrs:{id:"系统模型🌟"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#系统模型🌟"}},[e._v("#")]),e._v(" 系统模型🌟")]),e._v(" "),s("h5",{attrs:{id:"_1-数据模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-数据模型"}},[e._v("#")]),e._v(" 1.数据模型")]),e._v(" "),s("p",[e._v('ZooKeeper 的视图结构和 Unix 文件系统类似, 但没有引入文件系统中目录和文件等相关概念, 而是使用了其特有的 "'),s("strong",[e._v("数据结点")]),e._v('" 概念, 称之为 '),s("strong",[e._v("ZNode")]),e._v(".")]),e._v(" "),s("p",[s("strong",[e._v("ZNode")]),e._v(" 是 ZooKeeper 中数据的最小单元, 也称为结点. 每个 ZNode 上都可以保存数据, 同时还可以挂载"),s("strong",[e._v("子结点")]),e._v(", 因此构成了一个层次化的命名空间, 形成"),s("strong",[e._v("一颗树")]),e._v(". 不过 ZNode 没有目录的概念, 不能执行类似 cd 之类的命令.")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20211221223925381.png",alt:""}})]),e._v(" "),s("h6",{attrs:{id:"_1-事务id"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-事务id"}},[e._v("#")]),e._v(" (1)事务ID")]),e._v(" "),s("p",[e._v("在 ZooKeeper 中, 事务是指能够改变 ZooKeeper 服务器状态的操作, 一般包括数据结点"),s("strong",[e._v("创建与删除, 数据结点内容更新")]),e._v("和"),s("strong",[e._v("客户端会话创建与失效")]),e._v("等操作. 对于每一个事务请求, ZooKeeper 都会为其分配一个"),s("strong",[e._v("全局唯一的事务 ID")]),e._v(", 用 "),s("strong",[e._v("ZXID")]),e._v(" 来表示, 通常是一个 64 位的数字. 每一个 ZXID 对应一次"),s("strong",[e._v("更新")]),e._v("操作, 从这些 ZXID 中可以间接地识别出 ZooKeeper 处理这些更新操作请求的全局顺序.")]),e._v(" "),s("h5",{attrs:{id:"_2-结点znode"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-结点znode"}},[e._v("#")]),e._v(" 2.结点ZNode")]),e._v(" "),s("h6",{attrs:{id:"_1-结点类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-结点类型"}},[e._v("#")]),e._v(" (1)结点类型")]),e._v(" "),s("p",[s("strong",[e._v("每个数据结点都有其生命周期, 这取决于结点类型")]),e._v(". 数据结点可以按照 "),s("mark",[s("strong",[e._v("持久与否, 顺序与否")])]),e._v(" 分为四大类.")]),e._v(" "),s("blockquote",[s("p",[s("mark",[s("strong",[e._v("持久结点")])])])]),e._v(" "),s("p",[s("strong",[e._v("默认")]),e._v("结点类型. 持久结点指该数据结点被创建后, 就会"),s("strong",[e._v("一直")]),e._v("存在于 ZooKeeper 服务器上, 直到有删除操作来主动清除这个结点.")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 默认创建持久结点")]),e._v("\ncreate /test "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"test"')]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("blockquote",[s("p",[s("mark",[s("strong",[e._v("持久顺序结点")])])])]),e._v(" "),s("p",[e._v("持久顺序结点的基本特性和持久结点是一致的, 额外的特性表现在"),s("strong",[e._v("顺序性")]),e._v("上. 在 Zookeeper 中, 每个父结点都会为它的"),s("strong",[e._v("第一级子结点")]),e._v("维护一份顺序, 用于记录下"),s("strong",[e._v("每个子结点创建的先后顺序")]),e._v(". 在创建结点过程中, ZooKeeper 会自动为给定结点名(路径)加上一个"),s("strong",[e._v("数字后缀")]),e._v(", 作为一个新的, 完整的结点名. 适合用于"),s("strong",[e._v("分布式选举")]),e._v("等场景.")]),e._v(" "),s("p",[e._v("创建时添加  "),s("strong",[e._v("-s")]),e._v(" 参数即可.")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 创建序号结点")]),e._v("\ncreate "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-s")]),e._v(" /test\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 返回创建的加了序号的实际路径")]),e._v("\nCreated /test0000000001\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 再次创建一个")]),e._v("\ncreate "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-s")]),e._v(" /test\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 返回创建的实际路径2, 序号已递增")]),e._v("\nCreated /test0000000002\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br")])]),s("blockquote",[s("p",[s("mark",[s("strong",[e._v("临时结点")])])])]),e._v(" "),s("p",[s("mark",[s("strong",[e._v("临时结点的生命周期和客户端会话绑定, 如果客户端会话失效断开连接, 那么这个结点就会被自动删除并清理掉")])]),e._v(". 注意, 这里指的是客户端会话失效, 而非 TCP 连接断开. 它可以用于判断客户端是否还在连接, 如果已经断开连接, 那么结点就不在了. "),s("mark",[s("strong",[e._v("临时结点下面不能包含子结点")])]),e._v(", 所以临时结点"),s("strong",[e._v("只能做叶子结点")]),e._v(". 适用于"),s("strong",[e._v("心跳, 服务发现等场景")]),e._v(".")]),e._v(" "),s("p",[e._v("创建时添加参数  "),s("strong",[e._v("-e")]),e._v(" 即可.")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 创建临时结点, 会话端口自动删除")]),e._v("\ncreate "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-e")]),e._v(" /temp "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"test"')]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("blockquote",[s("p",[s("mark",[s("strong",[e._v("临时顺序结点")])])])]),e._v(" "),s("p",[e._v("基本特性和临时结点也是一致的, 同样是在临时结点的基础上增加了顺序的特性.")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("create "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-e")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-s")]),e._v(" /temp/seq\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("h6",{attrs:{id:"_2-结点数据与状态信息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-结点数据与状态信息"}},[e._v("#")]),e._v(" (2)结点数据与状态信息")]),e._v(" "),s("p",[e._v("一个 znode 结点包含如下信息:")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("path")]),e._v(": 唯一路径. 增删改查都是基于 PATH.")]),e._v(" "),s("li",[s("strong",[e._v("childNode")]),e._v(": 子结点列表.")]),e._v(" "),s("li",[s("strong",[e._v("type")]),e._v(": 结点类型.")]),e._v(" "),s("li",[s("strong",[e._v("data")]),e._v(": 数据内容.")]),e._v(" "),s("li",[s("strong",[e._v("stat")]),e._v(": 状态属性.")])]),e._v(" "),s("p",[e._v("每个数据结点除了存储数据内容, 还存储结点本身的一些"),s("strong",[e._v("状态信息")]),e._v(". "),s("strong",[e._v("get 命令")]),e._v("可以获取结点信息, 得到结果的第一行是当前数据结点的"),s("strong",[e._v("数据内容")]),e._v(", 第二行开始就是结点的"),s("strong",[e._v("状态信息")]),e._v(". 典型的有:")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("czxid")]),e._v(". 即 Created ZXID, 表示数据结点"),s("strong",[e._v("被创建时的事务 ID")]),e._v(".")]),e._v(" "),s("li",[s("strong",[e._v("mzxid")]),e._v(". 即 Modified ZXID, 表示数据结点"),s("strong",[e._v("最后一次被更新时的事务 ID")]),e._v(".")]),e._v(" "),s("li",[e._v("ctime. 结点创建时间.")]),e._v(" "),s("li",[e._v("mtime. 结点最后一次被更新时间.")]),e._v(" "),s("li",[s("strong",[e._v("version")]),e._v(". 数据结点的版本号.")]),e._v(" "),s("li",[s("strong",[e._v("cversion")]),e._v(". 子结点的版本号.")]),e._v(" "),s("li",[s("strong",[e._v("aversion")]),e._v(". 结点的 ACL 版本号(权限版本变更次数).")]),e._v(" "),s("li",[e._v("ephemeralOwner. 创建该临时结点的会话的 sessionID, 如果为持久结点则此属性为 0.")]),e._v(" "),s("li",[e._v("numChildren. 子结点个数.")]),e._v(" "),s("li",[s("strong",[e._v("pzxid")]),e._v(". 表示该结点子结点列表最后一次被修改时的事务 ID. 只有子结点列表变更会修改 pzxid, 子结点内容变化不会影响 pzxid.")])]),e._v(" "),s("p",[e._v("例子:")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("cZxid "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" 0x385\nctime "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" Tue Sep "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("24")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("17")]),e._v(":26:28 CST "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2019")]),e._v("\nmZxid "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" 0x385 \nmtime "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" Tue Sep "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("24")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("17")]),e._v(":26:28 CST "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2019")]),e._v("\npZxid "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" 0x385\ncversion "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("\ndataVersion "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v("\naclVersion "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("\nephemeralOwner "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" 0x0\ndataLength "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("17")]),e._v("\nnumChildren "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br")])]),s("h5",{attrs:{id:"_3-结点版本-保证分布式数据原子性操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-结点版本-保证分布式数据原子性操作"}},[e._v("#")]),e._v(" 3.结点版本(保证分布式数据原子性操作)")]),e._v(" "),s("p",[e._v("每个数据结点都有"),s("strong",[e._v("三种类型的版本信息")]),e._v(".")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("version")]),e._v(". 数据结点"),s("strong",[e._v("数据内容的版本号")]),e._v(".")]),e._v(" "),s("li",[s("strong",[e._v("cversion")]),e._v(". 子结点的版本号.")]),e._v(" "),s("li",[s("strong",[e._v("aversion")]),e._v(". 当前结点的 ACL 版本号.")])]),e._v(" "),s("p",[e._v('这里 "'),s("strong",[e._v("版本号")]),e._v('" 分别表示对结点'),s("strong",[e._v("数据内容, 子结点列表, 结点 ACL 信息")]),e._v("的"),s("strong",[e._v("更新次数")]),e._v('. 比如一个数据结点创建后, 其 version 值为 0, 表示的含义是 "当前结点自创建后, 被更新过 0 次". 如果对数据内容进行了更新, version 值就会增加(只要是更新操作, 即使内容不变也会增加, 因为这里强调的是变更次数).')]),e._v(" "),s("p",[e._v('版本在实现 "乐观锁" 场景下十分有用. 乐观锁一般分为: 数据读取, '),s("strong",[e._v("写入校验")]),e._v('和数据写入等步骤. 比如 JDK 的 CAS, 对于值 V, 每次更新前都会对比其值是否是预期值 A, 只有符合预期, 才会将 V 原子化等更新到新值 B. ZooKeeper 中的 version 属性正是用于实现乐观锁机制中的 "写入校验" 的.')]),e._v(" "),s("h5",{attrs:{id:"_4-watcher监听-数据变更通知"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-watcher监听-数据变更通知"}},[e._v("#")]),e._v(" 4.Watcher监听(数据变更通知)")]),e._v(" "),s("h6",{attrs:{id:"_1-概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述"}},[e._v("#")]),e._v(" (1)概述")]),e._v(" "),s("p",[s("strong",[e._v("ZK 通过 Watcher 机制来实现分布式通知功能")]),e._v(". ZK 允许客户端向服务端"),s("strong",[e._v("注册一个 Watcher 监听")]),e._v(", 当服务端的特定事件触发了这个 Watcher, 就会向"),s("strong",[e._v("指定客户端发送一个事件通知")]),e._v("来实现分布式通知功能. 整个 Watcher 注册与通知过程如下图.")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20211225163152279.png",alt:""}})]),e._v(" "),s("p",[e._v("客户端在向 ZK 注册 Watcher 的同时也会将 Watcher 对象存储在客户端的 "),s("strong",[e._v("WatcherManager")]),e._v(" 中, 当 ZooKeeper 服务器触发 Watcher 事件后, 会向客户端发出通知, 客户端线程从 WatcherManager 取出对应的 Watcher 对象"),s("strong",[e._v("执行回调逻辑")]),e._v("(执行 process() 方法).")]),e._v(" "),s("p",[s("strong",[e._v("客户端")]),e._v("会记录 "),s("strong",[e._v("Watcher 与数据结点路径的映射关系")]),e._v(". Watcher 注册完成后, 会被保存到 ZKWatcherManager 对象的 dataWatches 属性中, 其数据结构为 "),s("code",[e._v("Map<String, Set<Watcher>>")]),e._v("​, 用于将数据结点的路径和 Watcher 进行映射后管理起来.")]),e._v(" "),s("h6",{attrs:{id:"_2-watcher特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-watcher特性"}},[e._v("#")]),e._v(" (2)Watcher特性")]),e._v(" "),s("blockquote",[s("p",[e._v("1.一次性")])]),e._v(" "),s("p",[e._v("无论是客户端还是服务端, "),s("mark",[s("strong",[e._v("一旦一个 Watcher 被触发, Zookeeper 都会将其从相应的存储中移除")])]),e._v(". 因此使用 Watcher 时需要进行"),s("mark",[s("strong",[e._v("反复注册")])]),e._v(". 使用后立即失效可以减小服务端压力, 不然需要通知的结点可能很多.")]),e._v(" "),s("blockquote",[s("p",[e._v("2.客户端串行执行")])]),e._v(" "),s("p",[e._v("客户端 Watcher 回调是一个"),s("strong",[e._v("串行同步")]),e._v("的过程. 这保证了顺序.")]),e._v(" "),s("blockquote",[s("p",[e._v("3.轻量性")])]),e._v(" "),s("p",[e._v("当服务端发生了事件后, 会通过 Watcher 机制以 "),s("strong",[e._v("WatchedEvent 消息")]),e._v("的方式告知客户端发送了事件. WatchedEvent 仅包含了"),s("strong",[e._v("通知状态, 事件类型和结点路径")]),e._v("等三部分内容, "),s("mark",[s("strong",[e._v("不包含事件的具体内容")])]),e._v(". 例如某个结点的子结点列表发生了变更, ZooKeeper 会通过 Watcher 告知客户端此事, 但客户端无法从事件中得到数据结点的原始数据和变更后的子结点数据, "),s("strong",[e._v("客户端需要")]),e._v("​"),s("mark",[s("strong",[e._v("主动")])]),e._v("​"),s("strong",[e._v("重新去获取数据")]),e._v(".")]),e._v(" "),s("h5",{attrs:{id:"_5-acl-权限控制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-acl-权限控制"}},[e._v("#")]),e._v(" 5.ACL(权限控制)")]),e._v(" "),s("p",[e._v("ZK 通过 "),s("strong",[e._v("ACL(Access Control List) 权限控制机制")]),e._v("来"),s("strong",[e._v("保证数据安全")]),e._v(". ACL 即"),s("strong",[e._v("访问控制列表")]),e._v(", 可以针对任意用户和组进行细粒度的权限控制.")]),e._v(" "),s("p",[e._v('ACL 包含三部分内容, 分别是权限模式(Scheme), 授权对象(ID)与权限(Permission), 通常采用 "'),s("code",[e._v("scheme : id : permission")]),e._v('​" 来标识一个 ACL 信息.')]),e._v(" "),s("p",[e._v("权限仅对当前结点有效, 不会被子结点继承.")]),e._v(" "),s("blockquote",[s("p",[e._v("权限模式(Scheme)")])]),e._v(" "),s("p",[e._v("权限模式用于确定权限验证时的检验策略. 如:")]),e._v(" "),s("ul",[s("li",[e._v("IP: 通过 IP 地址进行权限控制.")]),e._v(" "),s("li",[e._v('Digest: 类似于 "username:password" 的方式进行权限配置. '),s("strong",[e._v("用户密码")]),e._v("认证模式, 只有在会话中添加了认证才可以防问.")]),e._v(" "),s("li",[e._v("World: 所有用户都能操作数据.")]),e._v(" "),s("li",[e._v("Super: 超级用户.")])]),e._v(" "),s("blockquote",[s("p",[e._v("授权对象(ID)")])]),e._v(" "),s("p",[e._v("授权对象指权限赋予的用户或一个指定的实体, 例如是 IP 地址或机器.")]),e._v(" "),s("blockquote",[s("p",[e._v("权限(Permission)")])]),e._v(" "),s("p",[e._v("权限指通过权限检查后可以执行的操作.")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("CREATE")]),e._v(". "),s("strong",[e._v("子结点")]),e._v("创建权限. 允许授权对象在该结点下创建子结点.")]),e._v(" "),s("li",[s("strong",[e._v("DELETE")]),e._v(". "),s("strong",[e._v("子结点")]),e._v("删除权限. 允许授权对象删除该数据结点的子结点.")]),e._v(" "),s("li",[s("strong",[e._v("READ")]),e._v(". 数据结点的读取权限. 允许授权对象访问该数据结点并读取其数据内容或子结点列表.")]),e._v(" "),s("li",[s("strong",[e._v("WRITE")]),e._v(". 数据结点的更新权限. 允许授权对象对该数据结点进行更新操作.")]),e._v(" "),s("li",[s("strong",[e._v("ADMIN")]),e._v(". 数据结点的管理权限. 允许授权对象对该数据结点进行 ACL 相关的设置.")])]),e._v(" "),s("h4",{attrs:{id:"zk客户端"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#zk客户端"}},[e._v("#")]),e._v(" ZK客户端")]),e._v(" "),s("h5",{attrs:{id:"_1-客户端命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-客户端命令"}},[e._v("#")]),e._v(" 1.客户端命令")]),e._v(" "),s("blockquote",[s("p",[e._v("基本命令列表")])]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("connect host:port")]),e._v(": 重新连接指定 ZooKeeper 服务.")]),e._v(" "),s("li",[s("strong",[e._v("create [-s] [-e] [-c] [-t ttl] path [data] [acl]")]),e._v(" : 创建结点.")]),e._v(" "),s("li",[s("strong",[e._v("delete [-v version] path")]),e._v(": 删除结点(不能存在子结点).")]),e._v(" "),s("li",[s("strong",[e._v("deleteall path")]),e._v(": 删除路径及所有子结点.")]),e._v(" "),s("li",[s("strong",[e._v("setquota -n|-b val path")]),e._v(": 设置结点限额. -n 子结点数, -b 字节数.")]),e._v(" "),s("li",[s("strong",[e._v("listquota path")]),e._v(": 查看结点限额.")]),e._v(" "),s("li",[s("strong",[e._v("delquota [-n|-b] path")]),e._v(": 删除结点限额.")]),e._v(" "),s("li",[s("strong",[e._v("get [-s] [-w] path")]),e._v(": 查看结点数据. -s 包含结点状态, -w 添加监听.")]),e._v(" "),s("li",[s("strong",[e._v("ls [-s] [-w] [-R] path")]),e._v(": 列出子结点. -s 状态, -R 递归查看所有子结点, -w 添加监听.")]),e._v(" "),s("li",[s("strong",[e._v("setAcl [-s] [-v version] [-R] path acl")]),e._v(": 为结点设置 ACL 权限.")]),e._v(" "),s("li",[s("strong",[e._v("stat [-w] path")]),e._v(": 查看结点状态. -w 添加监听.")])]),e._v(" "),s("p",[s("strong",[e._v("node 数据的增删改查")]),e._v(":")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 列出子结点 ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("ls")]),e._v(" /\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 创建结点")]),e._v("\ncreate /student "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"nano"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 查看结点")]),e._v("\nget /student\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 创建子结点 ")]),e._v("\ncreate /student/height "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"32"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 删除结点")]),e._v("\ndelete /student/height\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 删除所有结点包括子结点")]),e._v("\ndeleteall /student\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 修改结点")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),e._v(" /student "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"woman"')]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br")])]),s("h5",{attrs:{id:"_2-java客户端"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-java客户端"}},[e._v("#")]),e._v(" 2.Java客户端")]),e._v(" "),s("p",[e._v("可以使用 Java 客户端进行 ZK 访问与操作. 比如 ZkClient 和 Curator 等.")]),e._v(" "),s("p",[e._v("ZooKeeper 提供的客户端. 依赖:")]),e._v(" "),s("div",{staticClass:"language-xml line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("dependency")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("org.apache.zookeeper"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("</")]),e._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("zookeeper"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("</")]),e._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("version")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("3.5.5"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("</")]),e._v("version")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("</")]),e._v("dependency")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[s("strong",[e._v("初始连接:")])]),e._v(" "),s("p",[e._v("常规的客户端类是 org.apache.zookeeper."),s("strong",[e._v("ZooKeeper")]),e._v(", 实例化该类之后将会"),s("strong",[e._v("自动与集群建立连接")]),e._v(".")]),e._v(" "),s("p",[s("strong",[e._v("监听结点")]),e._v(":")]),e._v(" "),s("p",[e._v("在 "),s("strong",[e._v("getData()")]),e._v("  与 "),s("strong",[e._v("getChildren()")]),e._v("  两个方法中可分别设置"),s("strong",[e._v("监听数据变化和子结点变化")]),e._v(". 通过"),s("strong",[e._v("设置 watch 为 true")]),e._v(", 当前事件触发时会调用 zookeeper() 构建函数中 "),s("strong",[e._v("Watcher.process()")]),e._v("  方法. 也可以添加 watcher 参数来实现"),s("strong",[e._v("自定义监听")]),e._v(". 一般采用后者.")]),e._v(" "),s("p",[e._v("注意: 所有的监听都是"),s("strong",[e._v("一次性的, 如果要持续监听需要触发后在添加一次监听")]),e._v(".")]),e._v(" "),s("h5",{attrs:{id:"_3-会话session"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-会话session"}},[e._v("#")]),e._v(" 3.会话Session")]),e._v(" "),s("p",[e._v("Session 指 ZK "),s("strong",[e._v("服务器与客户端")]),e._v("会话. 一个客户端连接指客户端和服务器之间的一个 "),s("strong",[e._v("TCP 长连接")]),e._v(". 客户端启动时, 首先会与服务器建立一个 TCP 连接, 从第一次连接建立开始, 客户端会话的生命周期也开始了. 通过这个连接, 客户端能够通过"),s("strong",[e._v("心跳检测")]),e._v("与服务器保持有效的会话, 也能够向服务器发送请求并接受响应, 同时还能够通过该"),s("strong",[e._v("连接接收来自服务器的 Watch 事件通知")]),e._v(".")]),e._v(" "),s("p",[e._v("Session 的 sessionTimeout 参数用来设置一个客户端会话的"),s("strong",[e._v("超时时间")]),e._v(". 即使因为网络故障或是客户端主动断开连接等各种原因导致客户端连接断开, 只要在 sessionTimeout 时间内能够重新连接上集群中任意一台服务器, 那么之前创建的会话仍然有效.")]),e._v(" "),s("p",[e._v("在为客户端创建会话之前, 服务端首先会为每个客户端都分配一个 "),s("strong",[e._v("sessionID")]),e._v(". 由于 sessionID 是 Zookeeper 会话的一个重要标识, 许多与会话相关的运行机制都是基于这个 sessionID 的, 因此无论是哪台服务器为客户端分配的 sessionID, 都务必保证"),s("strong",[e._v("全局唯一")]),e._v(".")]),e._v(" "),s("p",[e._v("会话还有对应的"),s("strong",[e._v("事件")]),e._v(", 如 CONNECTION_LOSS(连接丢失事件), SESSION_MOVED(会话转移事件), SESSION_EXPIRED(会话超时失效事件).")]),e._v(" "),s("h5",{attrs:{id:"_4-客户端会话创建过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-客户端会话创建过程"}},[e._v("#")]),e._v(" 4.客户端会话创建过程")]),e._v(" "),s("p",[e._v("Zookeeper 客户端核心组件如下:")]),e._v(" "),s("ul",[s("li",[e._v("Zookeeper 实例. 客户端的入口.")]),e._v(" "),s("li",[e._v("ClientWatchManage. 客户端的 Watcher 管理器.")]),e._v(" "),s("li",[e._v("HostProvider. 客户端地址列表管理器.")]),e._v(" "),s("li",[s("strong",[e._v("ClientCnxn")]),e._v(". 客户端核心线程, 其内部包含 SendThread 和 EventThread 两个线程. SendThread 是一个 IO 线程, 负责 Zookeeper 客户端与服务器之间的网络 IO 通信. EventThread 是一个事件线程, 负责对服务端的事件进行处理.")])]),e._v(" "),s("p",[s("strong",[e._v("(1) 初始化阶段")])]),e._v(" "),s("ul",[s("li",[e._v("初始化 Zookeeper 对象.")]),e._v(" "),s("li",[e._v("设置会话默认 Watcher.")]),e._v(" "),s("li",[e._v("构造 Zookeeper 服务器地址列表管理器 HostProvider.")]),e._v(" "),s("li",[e._v("创建并初始化客户端网络连接器 ClientCnxn. 创建 ClientCnxn 的同时, 还会创建客户端的两个核心队列: outgoingQueue(客户端请求发送队列)和 pendingQueue(服务端响应等待队列).")]),e._v(" "),s("li",[e._v("初始化 SendThread 和 EventThread.")])]),e._v(" "),s("p",[s("strong",[e._v("(2) 会话创建阶段")])]),e._v(" "),s("ul",[s("li",[e._v("启动 SendThread 和 EventThread.")]),e._v(" "),s("li",[e._v("获取一个服务器地址.")]),e._v(" "),s("li",[e._v("创建 TCP 连接. ClientCnxnSocket 负责与服务器创建一个 TCP 长连接.")]),e._v(" "),s("li",[e._v("构造 ConnectRequest 请求.")]),e._v(" "),s("li",[e._v("发送请求.")])]),e._v(" "),s("p",[s("strong",[e._v("(3) 响应处理阶段")])]),e._v(" "),s("ul",[s("li",[e._v("接收服务端响应.")]),e._v(" "),s("li",[e._v("处理 response.")]),e._v(" "),s("li",[e._v("查询 Watcher.")]),e._v(" "),s("li",[e._v("处理事件. EventThread 不断从 waitingEvents 队列中取出待处理的 Watcher 对象, 然后直接调用该对象的 process 方法进行事件回调.")])]),e._v(" "),s("h4",{attrs:{id:"序列化与协议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#序列化与协议"}},[e._v("#")]),e._v(" 序列化与协议")]),e._v(" "),s("p",[e._v("Zookeeper 客户端与服务端会进行一些列网络数据传输, ZooKeeper 使用 "),s("strong",[e._v("Jute")]),e._v(" 序列化组件实现通信数据的序列化与反序列化操作.")]),e._v(" "),s("p",[e._v("Zookeeper 设计了基于 TCP/IP 协议的独有的"),s("strong",[e._v("应用层通信协议")]),e._v(", 实现数据的高效传输.")]),e._v(" "),s("h4",{attrs:{id:"服务器启动流程分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#服务器启动流程分析"}},[e._v("#")]),e._v(" 服务器启动流程分析")]),e._v(" "),s("p",[e._v("Zookeeper 服务端整体架构如下:")]),e._v(" "),s("p",[e._v("​"),s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220106231854447.png",alt:""}}),e._v("​")]),e._v(" "),s("p",[e._v("Zookeeper 服务器的启动大致可以分为以下五个步骤:")]),e._v(" "),s("ol",[s("li",[e._v("配置文件解析.")]),e._v(" "),s("li",[e._v("初始化数据管理器.")]),e._v(" "),s("li",[e._v("初始化网络 IO 管理器.")]),e._v(" "),s("li",[e._v("数据恢复.")]),e._v(" "),s("li",[e._v("对外服务.")])]),e._v(" "),s("h5",{attrs:{id:"_1-单机版服务器启动"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-单机版服务器启动"}},[e._v("#")]),e._v(" 1.单机版服务器启动")]),e._v(" "),s("p",[e._v("单机版服务器的启动其流程图如下.")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220106232948829.png",alt:"image-20220106232948829"}})]),e._v(" "),s("p",[e._v("上图的过程可以分为"),s("strong",[e._v("预启动")]),e._v("和"),s("strong",[e._v("初始化")]),e._v("过程.")]),e._v(" "),s("blockquote",[s("p",[e._v("(1)预启动")])]),e._v(" "),s("ol",[s("li",[e._v("统一由 QuorumPeerMain 作为"),s("strong",[e._v("启动类")]),e._v(". 无论单机或集群, 在 zkServer.cmd 和 zkServer.sh 中都配置了 QuorumPeerMain 作为启动入口类.")]),e._v(" "),s("li",[e._v("解析配置文件 zoo.cfg. zoo.cfg 配置运行时基本参数, 如 tickTime, dataDir, clientPort 等.")]),e._v(" "),s("li",[e._v("创建并启动历史文件清理器 DatadirCleanupManager. 对事务日志和快照数据文件进行定时清理.")]),e._v(" "),s("li",[e._v("判断当前是集群还是单机模式启动. 若是单机模式, 则委托给 ZooKeeperServerMain 进行启动.")]),e._v(" "),s("li",[e._v("再次解析配置文件 zoo.cfg.")]),e._v(" "),s("li",[e._v("创建服务器实例 ZooKeeperServer. ZooKeeper 服务器首先会进行服务器实例的创建, 然后对该服务器实例进行初始化, 包括连接器, 内存数据库, 请求处理器等组件的初始化.")])]),e._v(" "),s("blockquote",[s("p",[e._v("(2)初始化")])]),e._v(" "),s("ol",[s("li",[e._v("创建服务器统计器 ServerStats. ServerStats 是 Zookeeper 服务器运行时的统计器.")]),e._v(" "),s("li",[e._v("创建 Zookeeper 数据管理器 FileTxnSnapLog. FileTxnSnapLog 是 Zookeeper 上层服务器和底层数据存储之间的对接层, 提供了一系列操作数据文件的接口, 如事务日志文件和快照数据文件. Zookeeper 根据 zoo.cfg 文件中解析出的快照数据目录 dataDir 和事务日志目录 dataLogDir 来创建 FileTxnSnapLog.")]),e._v(" "),s("li",[e._v("设置服务器 tickTime 和会话超时时间限制.")]),e._v(" "),s("li",[e._v("创建 ServerCnxnFactory. 通过配置系统属性 zookeper.serverCnxnFactory 来指定使用 Zookeeper 自己实现的 NIO 还是使用 Netty 框架作为 Zookeeper 服务端网络连接工厂.")]),e._v(" "),s("li",[e._v("初始化 ServerCnxnFactory. Zookeeper 会初始化 Thread 作为 ServerCnxnFactory 的主线程, 然后再初始化 NIO 服务器.")]),e._v(" "),s("li",[e._v("启动 ServerCnxnFactory 主线程. 进入 Thread 的 run 方法, 此时服务端还不能处理客户端请求.")]),e._v(" "),s("li",[e._v("恢复本地数据. 启动时, 需要从本地快照数据文件和事务日志文件进行数据恢复.")]),e._v(" "),s("li",[e._v("创建并启动会话管理器. Zookeeper 会创建会话管理器 SessionTracker 进行会话管理.")]),e._v(" "),s("li",[e._v("初始化 Zookeeper 的请求处理链. Zookeeper 请求处理方式为"),s("strong",[e._v("责任链模式")]),e._v("的实现. 会有多个请求处理器依次处理一个客户端请求, 在服务器启动时, 会将这些请求处理器串联成一个请求处理链.")]),e._v(" "),s("li",[e._v("注册 JMX 服务. Zookeeper 会将服务器运行时的一些信息以 JMX 的方式暴露给外部.")]),e._v(" "),s("li",[e._v("注册 Zookeeper 服务器实例. 将 Zookeeper 服务器实例注册给 ServerCnxnFactory, 之后 Zookeeper 就可以对外提供服务.")])]),e._v(" "),s("p",[e._v("至此, 单机版的 Zookeeper 服务器启动完毕.")]),e._v(" "),s("h5",{attrs:{id:"_2-集群版服务器启动"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-集群版服务器启动"}},[e._v("#")]),e._v(" 2.集群版服务器启动")]),e._v(" "),s("p",[e._v("单机和集群服务器的启动在很多地方是一致的, 其流程图如下.")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220106233835547.png",alt:"image-20220106233835547"}})]),e._v(" "),s("p",[e._v("上图的过程可以分为"),s("strong",[e._v("预启动, 初始化, Leader选举, Leader 与 Follower 启动期交互过程, Leader 与 Follower 启动")]),e._v("等过程.")]),e._v(" "),s("blockquote",[s("p",[e._v("(1)预启动")])]),e._v(" "),s("ol",[s("li",[e._v("统一由 QuorumPeerMain 作为启动类.")]),e._v(" "),s("li",[e._v("解析配置文件 zoo.cfg.")]),e._v(" "),s("li",[e._v("创建并启动历史文件清理器 DatadirCleanupFactory.")]),e._v(" "),s("li",[e._v("判断当前是集群还是单机模式的启动. 在集群模式中, 在 zoo.cfg 文件中配置了多个服务器地址, 可以选择集群启动.")])]),e._v(" "),s("blockquote",[s("p",[e._v("(2)初始化")])]),e._v(" "),s("ol",[s("li",[e._v("创建 ServerCnxnFactory.")]),e._v(" "),s("li",[e._v("初始化 ServerCnxnFactory.")]),e._v(" "),s("li",[e._v("创建 Zookeeper 数据管理器 FileTxnSnapLog.")]),e._v(" "),s("li",[e._v("创建 QuorumPeer 实例. Quorum 是集群模式下特有的对象, 是 Zookeeper 服务器实例(ZooKeeperServer)的托管者, QuorumPeer 代表了集群中的一台机器, 在运行期间, QuorumPeer 会不断检测当前服务器实例的运行状态, 同时根据情况发起 Leader 选举.")]),e._v(" "),s("li",[e._v("创建"),s("strong",[e._v("内存数据库")]),e._v(" ZKDatabase. ZKDatabase 负责管理 ZooKeeper 的所有会话记录以及 DataTree 和事务日志的存储.")]),e._v(" "),s("li",[e._v("初始化 QuorumPeer. 将核心组件如 FileTxnSnapLog, ServerCnxnFactory, ZKDatabase 注册到 QuorumPeer 中, 同时配置 QuorumPeer 的参数, 如服务器列表地址, Leader 选举算法和会话超时时间限制等.")]),e._v(" "),s("li",[e._v("恢复本地数据.")]),e._v(" "),s("li",[e._v("启动 ServerCnxnFactory 主线程.")])]),e._v(" "),s("blockquote",[s("p",[e._v("(3)Leader选举")])]),e._v(" "),s("ol",[s("li",[s("strong",[e._v("初始化 Leader 选举")]),e._v(". 集群模式特有, Zookeeper 首先会根据自身的服务器 ID(SID), 最新的 ZXID(lastLoggedZxid) 和当前的服务器 epoch(currentEpoch) 来生成一个"),s("strong",[e._v("初始化投票")]),e._v(", 在初始化过程中, 每个服务器都会给自己投票. 然后根据 zoo.cfg 配置创建相应 Leader 选举算法实现, Zookeeper 提供三种默认算法(LeaderElection, AuthFastLeaderElection, FastLeaderElection), 可通过 zoo.cfg 中的 electionAlg 属性来指定. 在初始化阶段, Zookeeper 会创建 Leader 选举所需的网络 I/O 层 QuorumCnxManager, 同时启动对 Leader 选举端口的监听, 等待集群中其他服务器创建连接.")]),e._v(" "),s("li",[e._v("注册 JMX 服务.")]),e._v(" "),s("li",[e._v("检测当前服务器状态. 运行期间, QuorumPeer 会不断检测当前服务器状态. 正常情况下, Zookeeper 服务器的状态在 LOOKING, LEADING, FOLLOWING/OBSERVING 之间进行切换. 在启动阶段, QuorumPeer 的初始状态是 LOOKING, 因此开始进行 Leader 选举.")]),e._v(" "),s("li",[s("strong",[e._v("Leader 选举")]),e._v(". 通过投票确定 Leader, 其余机器称为 Follower 和 Observer. 具体算法在后面会给出.")])]),e._v(" "),s("blockquote",[s("p",[e._v("(4)Leader和Follower启动期交互过程")])]),e._v(" "),s("ol",[s("li",[s("strong",[e._v("创建 Leader 服务器和 Follower 服务器")]),e._v(". 完成 Leader 选举后, 每个服务器会根据自己服务器的角色创建相应的服务器实例, 并进入各自角色的主流程.")]),e._v(" "),s("li",[e._v("Leader 服务器启动 Follower 接收器 LearnerCnxAcceptor. 运行期间, Leader 服务器需要和所有其余的服务器(统称为 Learner)保持连接以确集群的机器存活情况, LearnerCnxAcceptor 负责接收所有非 Leader 服务器的连接请求.")]),e._v(" "),s("li",[e._v("Leader 服务器开始和 Leader 建立连接. 所有 Learner 会找到 Leader 服务器, 并与其建立连接.")]),e._v(" "),s("li",[e._v("Leader 服务器创建 LearnerHandler. Leader 接收到来自其他机器连接创建请求后, 会创建一个 LearnerHandler 实例, 每个 LearnerHandler 实例都对应一个 Leader 与 Learner 服务器之间的连接, 其负责 Leader 和 Learner 服务器之间几乎所有的消息通信和数据同步.")]),e._v(" "),s("li",[e._v("向 Leader 注册. Learner 完成和 Leader 的连接后, 会向 Leader 进行注册, 即将 Learner 服务器的基本信息(LearnerInfo), 包括 SID 和 ZXID, 发送给 Leader 服务器.")]),e._v(" "),s("li",[e._v("Leader 解析 Learner 信息, 计算新的 epoch. Leader 接收到 Learner 服务器基本信息后, 会解析出该 Learner 的 SID 和 ZXID, 然后根据 ZXID 解析出对应的 epoch_of_learner, 并和当前 Leader 服务器的 epoch_of_leader 进行比较, 如果该 Learner 的 epoch_of_learner 更大, 则更新 Leader 的 epoch_of_leader = epoch_of_learner + 1. 然后 LearnHandler 进行等待, 直到过半 Learner 已经向 Leader 进行了注册, 同时更新了 epoch_of_leader 后, Leader 就可以确定当前集群的 epoch 了.")]),e._v(" "),s("li",[e._v("发送 Leader 状态. 计算出新的 epoch 后, Leader 会将该信息以一个 LEADERINFO 消息的形式发送给 Learner, 并等待 Learner 的响应.")]),e._v(" "),s("li",[e._v("Learner 发送 ACK 消息. Learner 接收到 LEADERINFO 后, 会解析出 epoch 和 ZXID, 然后向 Leader 反馈一个 ACKEPOCH 响应.")]),e._v(" "),s("li",[e._v("数据同步. Leader 收到 Learner 的 ACKEPOCH 后, 即可进行数据同步.")]),e._v(" "),s("li",[e._v("启动 Leader 和 Learner 服务器. 当有过半 Learner 已经完成了数据同步, 那么 Leader 和 Learner 服务器实例就可以启动了.")])]),e._v(" "),s("blockquote",[s("p",[e._v("(5)Leader和Follower启动")])]),e._v(" "),s("ol",[s("li",[e._v("创建启动会话管理器.")]),e._v(" "),s("li",[e._v("初始化 Zookeeper 请求处理链, 集群模式的每个处理器也会在启动阶段串联请求处理链.")]),e._v(" "),s("li",[e._v("注册 JMX 服务.")])]),e._v(" "),s("p",[e._v("至此, 集群版的 Zookeeper 服务器启动完毕.")]),e._v(" "),s("h4",{attrs:{id:"leader选举与zab协议🌟"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#leader选举与zab协议🌟"}},[e._v("#")]),e._v(" Leader选举与ZAB协议🌟")]),e._v(" "),s("h5",{attrs:{id:"_1-集群与服务器角色"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-集群与服务器角色"}},[e._v("#")]),e._v(" 1.集群与服务器角色")]),e._v(" "),s("p",[e._v("ZooKeeper 服务器集群中有 "),s("strong",[e._v("Leader, Follower 和 Observer")]),e._v(" 三种类型角色.")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220106234805740.png",alt:"image-20220106234805740"}})]),e._v(" "),s("p",[e._v("ZooKeeper 集群中的所有机器通过一个 "),s("strong",[e._v("Leader 选举过程")]),e._v('来选定一台 "Leader" 机器, Leader 既可以'),s("strong",[e._v("为客户端提供写服务又能提供读服务")]),e._v(". 除 Leader 外, Follower 和 Observer 都只能提供"),s("strong",[e._v("读服务")]),e._v('. Follower 和 Observer 唯一的区别在于 Observer 机器不参与 Leader 的选举过程, 也不参与写操作的 "'),s("strong",[e._v("过半写成功")]),e._v('" 策略, 因此 Observer 机器可以在不影响写性能的情况下提升集群的读性能.')]),e._v(" "),s("h6",{attrs:{id:"_1-leader"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-leader"}},[e._v("#")]),e._v(" (1)Leader")]),e._v(" "),s("p",[e._v("Leader 服务器是 ZK 集群工作的核心, 是集群中唯一的"),s("strong",[e._v("写请求")]),e._v("处理者, 其主要工作如下:")]),e._v(" "),s("ul",[s("li",[e._v("事务请求的唯一调度和处理者, 保证集群事务处理的顺序性.")]),e._v(" "),s("li",[e._v("集群内部各服务器的调度者.")])]),e._v(" "),s("blockquote",[s("p",[e._v("请求处理链")])]),e._v(" "),s("p",[e._v("Zookeeper "),s("strong",[e._v("使用责任链来处理每个客户端的请求")]),e._v(", Leader 服务器的请求"),s("strong",[e._v("处理链")]),e._v("如下:")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220107201550224.png",alt:"image-20220107201550224"}})]),e._v(" "),s("p",[e._v("典型的处理器有:")]),e._v(" "),s("ul",[s("li",[e._v("PrepRequestProcessor. 请求预处理器.")]),e._v(" "),s("li",[e._v("ProposalRequestProcessor. 事务投票处理器.")]),e._v(" "),s("li",[e._v("SyncRequestProcessor. 事务日志记录处理器.")])]),e._v(" "),s("blockquote",[s("p",[e._v("LearnerHandler")])]),e._v(" "),s("p",[e._v("为了保证整个集群内部的实时通信, 同时为了确保可以控制所有的 Follower/Observer 服务器, Leader 服务器会与每个 Follower/Observer 服务器建立一个 "),s("strong",[e._v("TCP 长连接")]),e._v(". 同时也会为每个 Follower/Observer 服务器创建一个名为 LearnerHandler 的实体. LearnerHandler 是 Learner 服务器的管理者, 主要负责 Follower/Observer 服务器和 Leader 服务器之间的一系列网络通信, 包括数据同步, 请求转发和 Proposal 提议的投票等. Leader 服务器中保存了所有 Follower/Observer 对应的LearnerHandler.")]),e._v(" "),s("h6",{attrs:{id:"_2-follower"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-follower"}},[e._v("#")]),e._v(" (2)Follower")]),e._v(" "),s("p",[e._v("Follower 是 ZooKeeper 集群中的"),s("strong",[e._v("跟随者")]),e._v(", 其主要工作如下:")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("处理客户端非事务性请求(读取数据), 转发事务请求给 Leader 服务器")]),e._v(".")]),e._v(" "),s("li",[e._v("参与事务请求 Proposal 的投票.")]),e._v(" "),s("li",[e._v("参与 Leader 选举投票.")])]),e._v(" "),s("p",[e._v("Follower 也采用了"),s("strong",[e._v("责任链模式")]),e._v("组装的请求处理链来处理每一个客户端请求, 由于不需要对事务请求的投票处理, 因此 Follower 的请求处理链相对简单.")]),e._v(" "),s("h6",{attrs:{id:"_3-observer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-observer"}},[e._v("#")]),e._v(" (3)Observer")]),e._v(" "),s("p",[e._v("Observer 充当"),s("strong",[e._v("观察者")]),e._v("角色, 观察 Zookeeper 集群的最新状态变化并将这些状态同步过来, 其对于非事务请求可以进行独立处理, 对于事务请求, 则会转发给 Leader 服务器进行处理. Observer 不会参与任何形式的投票, 包括事务请求 Proposal 的投票和 Leader 选举投票.")]),e._v(" "),s("h5",{attrs:{id:"_2-zab协议与leader选举概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-zab协议与leader选举概述"}},[e._v("#")]),e._v(" 2.ZAB协议与Leader选举概述")]),e._v(" "),s("p",[s("mark",[s("strong",[e._v("为达成集群数据一致性, ZooKeeper 并没有完全采用 Paxos 算法, 而是使用 ZAB(ZooKeeper Atomic Broadcast 原子广播)协议作为其保证分布式数据一致性的核心算法")])]),e._v(". ZAB 协议并不像 Paxos 算法那样是一种通用的分布式一致性算法, 它是一种"),s("strong",[e._v("特别为 Zookeeper 设计的崩溃可恢复的原子消息广播算法")]),e._v(". 基于该协议, ZooKeeper 实现了一种"),s("strong",[e._v("主备模式")]),e._v("的系统架构来保持集群中各个副本之间的数据一致性.")]),e._v(" "),s("p",[e._v("Leader 选举是保证分布式数据一致性的关键所在. 当 Zookeeper 集群中的一台服务器出现以下两种情况之一时, 需要进入 Leader 选举.")]),e._v(" "),s("ul",[s("li",[e._v("服务器"),s("strong",[e._v("初始化")]),e._v("启动.")]),e._v(" "),s("li",[e._v("服务器"),s("strong",[e._v("运行期间无法和 Leader 保持连接")]),e._v(".")])]),e._v(" "),s("p",[e._v("下面就两种情况进行分析讲解.")]),e._v(" "),s("h6",{attrs:{id:"_1-服务器启动时期的leader选举"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-服务器启动时期的leader选举"}},[e._v("#")]),e._v(" (1)服务器启动时期的Leader选举")]),e._v(" "),s("p",[e._v("进行选举至少需要 2 台服务器, 这里以 3 台机器的集群为例说明. 在集群初始化阶段, 当服务器 Server1 启动时, 其单独无法进行和完成 Leader 选举; 当服务器 Server2 启动时, 此时两台机器可以相互通信, 每台机器都试图找到 Leader, 于是进入 Leader 选举过程.")]),e._v(" "),s("p",[e._v("选举过程如下:")]),e._v(" "),s("ol",[s("li",[s("p",[s("strong",[e._v("每个 Server 发出一个投票")]),e._v(". 由于是初始情况, Server1 和 Server2 都会将"),s("strong",[e._v("自己")]),e._v("作为 Leader 服务器来进行投票, 每次投票会包含所推举的服务器的 myid 和 ZXID, 使用  "),s("strong",[e._v("(myid, ZXID)")]),e._v("  来表示, 此时 Server1 的投票为 (1, 0), Server2 的投票为 (2, 0), 然后各自将这个投票发给集群中其他机器.")])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("接受来自各个服务器的投票")]),e._v(". 集群的每个服务器收到投票后, 首先判断该投票的有效性, 如检查是否是本轮投票, 是否来自 LOOKING 状态的服务器.")])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("处理投票")]),e._v(". 针对每一个投票, 服务器都需要将别人的投票和自己的投票进行 PK, PK 规则如下:")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("优先检查 ZXID")]),e._v(". ZXID 比较大的服务器优先作为 Leader.")]),e._v(" "),s("li",[s("strong",[e._v("如果 ZXID 相同, 那么就比较 myid")]),e._v(". myid 较大的服务器作为 Leader 服务器.")])]),e._v(" "),s("p",[e._v("对于 Server1 而言, 它的投票是 (1, 0), 接收 Server2 的投票为(2, 0), 首先会比较两者的 ZXID, 均为 0, 再比较 myid, 此时 Server2 的 myid 最大, 于是更新自己的投票为 (2, 0), 然后重新投票. 对于 Server2 而言, 其无须更新自己的投票, 只是再次向集群中所有机器发出上一次投票信息即可.")])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("统计投票")]),e._v(". 每次投票后, 服务器都会统计投票信息, 判断是否已经有过半机器接受到相同的投票信息, 对于 Server1, Server2 而言, 都统计出集群中已经有两台机器接受了 (2, 0) 的投票信息, 此时便认为已经选出了 Leader.")])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("改变服务器状态")]),e._v(". 一旦确定了 Leader, 每个服务器就会更新自己的状态, 如果是 Follower, 那么就变更为 FOLLOWING, 如果是 Leader, 就变更为 LEADING.")])])]),e._v(" "),s("h6",{attrs:{id:"_2-服务器运行时期的leader选举"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-服务器运行时期的leader选举"}},[e._v("#")]),e._v(" (2)服务器运行时期的Leader选举")]),e._v(" "),s("p",[e._v("在 ZK 运行期间, 有非 Leader 服务器宕机或新加入也不会影响 Leader, 但一旦 Leader 服务器挂了, 那么整个集群将"),s("strong",[e._v("暂停")]),e._v("对外服务, 进入新一轮 Leader 选举, 其过程和启动时期的选举过程基本一致.")]),e._v(" "),s("p",[e._v("假设正在运行的有 Server1, Server2, Server3 三台服务器, 当前 Leader 是 Server2, 若某一时刻 Leader 挂了, 此时便开始 Leader 选举.")]),e._v(" "),s("p",[e._v("选举过程如下:")]),e._v(" "),s("ol",[s("li",[s("strong",[e._v("变更状态")]),e._v(". Leader 挂后, 余下的非 Observer 服务器都会将自己的状态变更为 LOOKING, 然后开始进入 Leader 选举过程.")]),e._v(" "),s("li",[s("strong",[e._v("每个 Server 发出一个投票")]),e._v(". 在运行期间, 每个服务器上的 ZXID 可能"),s("strong",[e._v("不同")]),e._v(", 此时假定 Server1 的 ZXID 为 123, Server3 的 ZXID 为 122; 在第一轮投票中, Server1 和 Server3 都会投"),s("strong",[e._v("自己")]),e._v(", 产生投票 (1, 123), (3, 122), 然后各自将投票发送给集群中所有机器.")]),e._v(" "),s("li",[s("strong",[e._v("接收来自各个服务器的投票")]),e._v(". 与启动时过程相同.")]),e._v(" "),s("li",[s("strong",[e._v("处理投票")]),e._v(". 与启动时过程相同, 此时 Server1 将会成为 Leader.")]),e._v(" "),s("li",[s("strong",[e._v("统计投票")]),e._v(". 与启动时过程相同.")]),e._v(" "),s("li",[s("strong",[e._v("改变服务器的状态")]),e._v(". 与启动时过程相同.")])]),e._v(" "),s("h5",{attrs:{id:"_3-leader选举算法分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-leader选举算法分析"}},[e._v("#")]),e._v(" 3.Leader选举算法分析")]),e._v(" "),s("p",[e._v("在 3.4.0 后的 ZK 版本只保留了 TCP 版本的 "),s("strong",[e._v("FastLeaderElection")]),e._v(" 选举算法.")]),e._v(" "),s("h6",{attrs:{id:"_1-术语解释"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-术语解释"}},[e._v("#")]),e._v(" (1)术语解释")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("SID(服务器ID)")]),e._v(" : 一个数字, 标识 ZK 集群中的一台机器, 每台机器不能重复. SID 与 "),s("strong",[e._v("myid")]),e._v(" 的值一致.")]),e._v(" "),s("li",[s("strong",[e._v("ZXID(事务ID)")]),e._v(" : ZXID 是一个事务 ID, 用来唯一标识因此服务器状态的变更. 在某一个时刻, 集群中每台机器的 ZXID 值"),s("strong",[e._v("不一定完全都一致")]),e._v(".")]),e._v(" "),s("li",[s("strong",[e._v("Vote(投票)")]),e._v(" : Leader 选举需通过投票实现, 当集群中的机器发现自己无法检测到 Leader 机器的时候, 就会开始尝试进行投票.")]),e._v(" "),s("li",[s("strong",[e._v("Quorum(过半数机器")]),e._v("): 一个量词, 通常指过半数的机器.")])]),e._v(" "),s("h6",{attrs:{id:"_2-算法流程分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-算法流程分析"}},[e._v("#")]),e._v(" (2)算法流程分析")]),e._v(" "),s("p",[e._v("当一台机器进入 Leader 选举时, 当前集群可能会处于以下两种状态:")]),e._v(" "),s("ul",[s("li",[e._v("集群中已经存在 Leader.")]),e._v(" "),s("li",[e._v("集群中不存在 Leader.")])]),e._v(" "),s("p",[e._v("对于"),s("strong",[e._v("集群中已经存在 Leader")]),e._v(" 而言, 比如集群加入新机器. 这种情况下新机器试图去选举 Leader 时, 会被告知当前服务器的 Leader 信息, 对于新机器而言, 仅仅需要和 Leader 机器建立连接并进行状态同步即可.")]),e._v(" "),s("p",[e._v("而在"),s("strong",[e._v("集群中不存在 Leader")]),e._v(" 情况下则会相对复杂, 其步骤如下:")]),e._v(" "),s("blockquote",[s("p",[e._v("1.第一次投票")])]),e._v(" "),s("p",[e._v("无论哪种情况导致进行 Leader 选举, 集群的所有机器都处于"),s("strong",[e._v("试图选举出一个 Leader 的状态")]),e._v(", 即 "),s("strong",[e._v("LOOKING")]),e._v(" 状态, LOOKING 机器会向所有其他机器发送消息, 该消息称为"),s("strong",[e._v("投票")]),e._v(". 投票中包含了 SID(服务器的唯一标识) 和 ZXID(事务ID),  "),s("strong",[e._v("(SID, ZXID) 形式来标识一次投票信息")]),e._v(".")]),e._v(" "),s("p",[e._v("假设集群由 5 台机器组成, SID 分别为 1, 2, 3, 4, 5, ZXID 分别为 9, 9, 9, 8, 8, 并且此时 SID 为 2 的机器是 Leader 机器, 某一时刻, 1, 2 所在机器出现故障, 因此集群开始进行 Leader 选举. 在第一次投票时, 每台机器都会将"),s("strong",[e._v("自己")]),e._v("作为投票对象, 于是 SID 为 3, 4, 5 的机器投票情况分别为 (3, 9), (4, 8), (5, 8).")]),e._v(" "),s("blockquote",[s("p",[e._v("2.变更投票")])]),e._v(" "),s("p",[e._v("每台机器发出投票后, 也会"),s("strong",[e._v("收到")]),e._v("其他机器的投票, 每台机器会根据一定规则来处理收到的其他机器的投票, 并以此来决定是否需要变更自己的投票, 这个规则也是整个 Leader 选举算法的核心所在, 其描述如下:")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("vote_sid")]),e._v(": 接收到的投票中所推举 Leader 服务器的 SID.")]),e._v(" "),s("li",[s("strong",[e._v("vote_zxid")]),e._v(": 接收到的投票中所推举 Leader 服务器的 ZXID.")]),e._v(" "),s("li",[s("strong",[e._v("self_sid")]),e._v(": 当前服务器自己的 SID.")]),e._v(" "),s("li",[s("strong",[e._v("self_zxid")]),e._v(": 当前服务器自己的 ZXID.")])]),e._v(" "),s("p",[e._v("每次对收到的投票的处理, 都是对  "),s("strong",[e._v("(vote_sid, vote_zxid)")]),e._v("  和  "),s("strong",[e._v("(self_sid, self_zxid)")]),e._v("  进行对比的过程.")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("规则一")]),e._v(": 如果 vote_zxid 大于 self_zxid, 就认可当前收到的投票, 并再次将该投票发送出去.")]),e._v(" "),s("li",[s("strong",[e._v("规则二")]),e._v(": 如果 vote_zxid 小于 self_zxid, 那么坚持自己的投票, 不做任何变更.")]),e._v(" "),s("li",[s("strong",[e._v("规则三")]),e._v(": 如果 vote_zxid 等于 self_zxid, 那么就对比两者的 SID, 如果 vote_sid 大于 self_sid, 那么就认可当前收到的投票, 并再次将该投票发送出去.")]),e._v(" "),s("li",[s("strong",[e._v("规则四")]),e._v(": 如果 vote_zxid 等于 self_zxid, 并且 vote_sid 小于 self_sid, 那么坚持自己的投票, 不做任何变更.")])]),e._v(" "),s("p",[e._v("简而言之就是: "),s("mark",[s("strong",[e._v("ZXID 大的优先, ZXID 相同时 SID 大的优先")])]),e._v(".")]),e._v(" "),s("p",[e._v("结合上面规则, 给出下面的集群变更过程.")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220107210442583.png",alt:"image-20220107210442583"}})]),e._v(" "),s("blockquote",[s("p",[e._v("3.确定Leader")])]),e._v(" "),s("p",[e._v("经过第二轮投票后, 集群中的每台机器都会再次接收到其他机器的投票, 然后开始统计投票, 如果一台机器收到了"),s("strong",[e._v("超过半数")]),e._v("的相同投票, 那么这个投票对应的 SID 机器即为 Leader. 此时 Server3 将成为 Leader.")]),e._v(" "),s("p",[e._v("由上面规则可知, "),s("mark",[s("strong",[e._v("通常哪台服务器上的数据越新(ZXID 会越大), 其成为 Leader 的可能性越大, 也就越能够保证数据的恢复. 如果 ZXID 相同, 则 SID 越大机会越大")])]),e._v(".")]),e._v(" "),s("h5",{attrs:{id:"_4-leader选举实现细节"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-leader选举实现细节"}},[e._v("#")]),e._v(" 4.Leader选举实现细节")]),e._v(" "),s("h6",{attrs:{id:"_1-服务器状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-服务器状态"}},[e._v("#")]),e._v(" (1)服务器状态")]),e._v(" "),s("p",[e._v("服务器具有"),s("strong",[e._v("四种状态")]),e._v(", 分别是 LOOKING, FOLLOWING, LEADING, OBSERVING.")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("LOOKING")]),e._v(": 寻找 Leader 状态. 当服务器处于该状态时, 它会认为当前集群中没有 Leader, 因此需要进入 Leader 选举状态.")]),e._v(" "),s("li",[s("strong",[e._v("FOLLOWING")]),e._v(": 跟随者状态. 表明当前服务器角色是 Follower.")]),e._v(" "),s("li",[s("strong",[e._v("LEADING")]),e._v(": 领导者状态. 表明当前服务器角色是 Leader.")]),e._v(" "),s("li",[s("strong",[e._v("OBSERVING")]),e._v(": 观察者状态. 表明当前服务器角色是 Observer.")])]),e._v(" "),s("h6",{attrs:{id:"_2-投票数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-投票数据结构"}},[e._v("#")]),e._v(" (2)投票数据结构")]),e._v(" "),s("p",[e._v("每个投票中包含了两个最基本的信息, 所推举服务器的 "),s("strong",[e._v("SID 和 ZXID")]),e._v(", 投票(Vote) 在 ZK 中包含字段如下:")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("id")]),e._v(": 被推举的 Leader 的 SID.")]),e._v(" "),s("li",[s("strong",[e._v("zxid")]),e._v(": 被推举的 Leader 事务 ID.")]),e._v(" "),s("li",[s("strong",[e._v("electionEpoch")]),e._v(": 逻辑时钟, 用来判断多个投票是否在"),s("strong",[e._v("同一轮选举周期")]),e._v("中, 该值在服务端是一个自增序列, 每次进入新一轮的投票后, 都会对该值进行加 1 操作.")]),e._v(" "),s("li",[s("strong",[e._v("peerEpoch")]),e._v(": 被推举的 Leader 的 epoch.")]),e._v(" "),s("li",[s("strong",[e._v("state")]),e._v(": 当前服务器的状态.")])]),e._v(" "),s("h6",{attrs:{id:"_3-quorumcnxmanager-网络i-o"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-quorumcnxmanager-网络i-o"}},[e._v("#")]),e._v(" (3)QuorumCnxManager(网络I/O)")]),e._v(" "),s("p",[e._v("每台服务器在启动过程中, 会启动一个 QuorumPeerManager, 负责各台服务器之间的底层 Leader 选举过程中的网络通信.")]),e._v(" "),s("blockquote",[s("p",[e._v("1.消息队列")])]),e._v(" "),s("p",[e._v("QuorumCnxManager 内部维护了一系列的队列, 用来保存接收到的, 待发送的消息以及消息的发送器, 除接收队列以外, 其他队列都按照 SID 分组形成队列集合, 如一个集群中除了自身还有 3 台机器, 那么就会为这 3 台机器分别创建一个发送队列, 互不干扰.")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("recvQueue")]),e._v(": 消息接收队列, 用于存放那些从其他服务器接收到的消息.")]),e._v(" "),s("li",[s("strong",[e._v("queueSendMap")]),e._v(": 消息发送队列, 用于保存那些待发送的消息, 按照 SID 进行分组.")]),e._v(" "),s("li",[s("strong",[e._v("senderWorkerMap")]),e._v(": 发送器集合, 每个 SenderWorker 消息发送器, 都对应一台远程 ZK 服务器, 负责消息的发送, 也按照 SID 进行分组.")]),e._v(" "),s("li",[s("strong",[e._v("lastMessageSent")]),e._v(": 最近发送过的消息, 为每个 SID 保留最近发送过的一个消息.")])]),e._v(" "),s("blockquote",[s("p",[e._v("2.建立连接")])]),e._v(" "),s("p",[e._v("为了能够相互投票, ZK 集群中的所有机器都需要两两建立网络连接. QuorumCnxManager 在启动时会创建一个 ServerSocket 来监听 Leader 选举的通信端口(默认为 3888). 开启监听后, ZK 能够不断地接收到来自其他服务器的创建连接请求, 在接收到其他服务器的 TCP 连接请求时, 会进行处理. 一旦连接建立, 就会根据远程服务器的 SID 来创建相应的消息发送器 SendWorker 和消息接收器 RecvWorker, 并启动.")]),e._v(" "),s("blockquote",[s("p",[e._v("3.消息接收与发送")])]),e._v(" "),s("p",[s("strong",[e._v("消息接收")]),e._v(": 由消息接收器 RecvWorker 负责, 由于 Zookeeper 为每个远程服务器都分配一个单独的 RecvWorker, 因此每个 RecvWorker 只需要不断地从这个 TCP 连接中读取消息, 并将其保存到 recvQueue 队列中.")]),e._v(" "),s("p",[s("strong",[e._v("消息发送")]),e._v(": 由于 ZK 为每个远程服务器都分配一个单独的 SendWorker, 因此每个 SendWorker 只需要不断地从对应的消息发送队列中获取出一个消息发送即可, 同时将这个消息放入 lastMessageSent 中. 在 SendWorker 中, 一旦 Zookeeper 发现针对当前服务器的消息发送队列为空, 那么此时需要从 lastMessageSent 中取出一个最近发送过的消息来进行再次发送, 这是为了解决接收方在消息接收前或者接收到消息后服务器挂了, 导致消息尚未被正确处理.")]),e._v(" "),s("h6",{attrs:{id:"_4-fastleaderelection-选举算法核心"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-fastleaderelection-选举算法核心"}},[e._v("#")]),e._v(" (4)FastLeaderElection(选举算法核心)")]),e._v(" "),s("p",[e._v("几个核心概念:")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("外部投票")]),e._v(": 特指其他服务器发来的投票.")]),e._v(" "),s("li",[s("strong",[e._v("内部投票")]),e._v(": 服务器自身当前的投票.")]),e._v(" "),s("li",[s("strong",[e._v("选举轮次")]),e._v(": Leader 选举的轮次, 即 logicalclock.")]),e._v(" "),s("li",[s("strong",[e._v("PK")]),e._v(": 对内部投票和外部投票进行对比来确定是否需要变更内部投票.")])]),e._v(" "),s("blockquote",[s("p",[e._v("1.选票管理")])]),e._v(" "),s("p",[e._v("下图是选票管理过程中相关组件之间的协作关系.")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220107210956395.png",alt:""}})]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("sendqueue")]),e._v(": 选票发送队列, 用于保存待发送的选票.")]),e._v(" "),s("li",[s("strong",[e._v("recvqueue")]),e._v(": 选票接收队列, 用于保存接收到的外部投票.")]),e._v(" "),s("li",[s("strong",[e._v("WorkerReceiver")]),e._v(": 选票接收器. 其会不断地从 QuorumCnxManager 中获取其他服务器发来的选举消息, 并将其转换成一个选票, 然后保存到 recvqueue 中, 在选票接收过程中, 如果发现该外部选票的选举轮次小于当前服务器的, 那么忽略该外部投票, 同时立即发送自己的内部投票.")]),e._v(" "),s("li",[s("strong",[e._v("WorkerSender")]),e._v(": 选票发送器, 不断地从 sendqueue 中获取待发送的选票, 并将其传递到底层 QuorumCnxManager 中.")])]),e._v(" "),s("blockquote",[s("p",[e._v("2.算法核心")])]),e._v(" "),s("p",[e._v("上图展示了 FastLeaderElection 模块是如何与底层网络 I/O 进行交互的. Leader 选举的基本流程如下:")]),e._v(" "),s("p",[e._v("(1) ** 自增选举轮次**. Zookeeper 规定所有有效的投票都必须在同一轮次中, 在开始新一轮投票时, 会首先对 logicalclock 进行自增操作.")]),e._v(" "),s("p",[e._v("(2) ** 初始化选票**. 在开始进行新一轮投票之前, 每个服务器都会初始化自身的选票, 每台服务器在初始化阶段都会将自己推举为 Leader.")]),e._v(" "),s("p",[e._v("(3) ** 发送初始化选票**. 完成选票的初始化后, 服务器就会发起第一次投票. ZK 会将刚刚初始化好的选票放入 sendqueue 中, 由发送器 WorkerSender 发送出去.")]),e._v(" "),s("p",[e._v("(4) ** 接收外部投票**. 每台服务器会不断从 recvqueue 队列中获取外部选票.")]),e._v(" "),s("p",[e._v("(5) ** 判断选举轮次**. 在发送完初始化选票之后, 接着开始处理外部投票. 在处理外部投票时, 会根据"),s("strong",[e._v("选举轮次")]),e._v("来进行不同的处理.")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("外部投票的选举轮次大于内部投票")]),e._v(". 若服务器自身的选举轮次落后于该外部投票对应服务器的选举轮次, 那么就会立即"),s("strong",[e._v("更新自己的选举轮次")]),e._v("(logicalclock), 并清空所有已经收到的投票, 然后使用初始化的投票来进行 PK 以确定是否变更内部投票. 最终再将内部投票发送出去.")]),e._v(" "),s("li",[s("strong",[e._v("外部投票的选举轮次小于内部投票")]),e._v(". 若服务器接收的外选票的选举轮次落后于自身的选举轮次, 那么 ZK 就会直接"),s("strong",[e._v("忽略该外部投票")]),e._v(", 不做任何处理, 并返回步骤 4.")]),e._v(" "),s("li",[s("strong",[e._v("外部投票的选举轮次等于内部投票")]),e._v(". 此时可以开始进行选票 PK.")])]),e._v(" "),s("p",[e._v("(6) ** 选票PK**. 在进行选票 PK 时, 符合任意一个条件就需要变更投票.")]),e._v(" "),s("ul",[s("li",[e._v("若外部投票中推举的 Leader 服务器的"),s("strong",[e._v("选举轮次")]),e._v("大于内部投票, 那么需要变更投票.")]),e._v(" "),s("li",[e._v("若选举轮次一致, 那么就对比两者的 ZXID, 若外部投票的 ZXID 大, 那么需要变更投票.")]),e._v(" "),s("li",[e._v("若两者的 ZXID 一致, 那么就对比两者的 SID, 若外部投票的 SID 大, 那么就需要变更投票.")])]),e._v(" "),s("p",[e._v("(7) ** 变更投票**. 经过 PK 后, 若确定了外部投票优于内部投票, 那么就变更投票, 即使用外部投票的选票信息来覆盖内部投票, 变更完成后, 再次将这个变更后的内部投票发送出去.")]),e._v(" "),s("p",[e._v("(8) ** 选票归档**. 无论是否变更了投票, 都会将刚刚收到的那份外部投票放入选票集合 recvset 中进行归档. recvset 用于记录当前服务器在本轮次的 Leader 选举中收到的所有外部投票 (按照服务队的 SID 区别, 如 {(1, vote1), (2, vote2)...}).")]),e._v(" "),s("p",[e._v("(9) ** 统计投票**. 完成选票归档后, 就可以开始统计投票, 统计投票是为了统计集群中是否已经有过半的服务器认可了当前的内部投票, 如果确定已经有过半服务器认可了该投票, 则终止投票. 否则返回步骤 4.")]),e._v(" "),s("p",[e._v("(10) ** 更新服务器状态**. 若已经确定可以终止投票, 那么就开始更新服务器状态, 服务器首选判断当前被过半服务器认可的投票所对应的 Leader 服务器是否是自己, 若是自己, 则将自己的服务器状态更新为 LEADING, 若不是, 则根据具体情况来确定自己是 FOLLOWING 或是 OBSERVING.")]),e._v(" "),s("p",[e._v("以上 10 个步骤就是 FastLeaderElection 的核心, 其中步骤 4-9 会经过几轮循环, 直到有 Leader 选举产生.")]),e._v(" "),s("h5",{attrs:{id:"_5-数据同步机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-数据同步机制"}},[e._v("#")]),e._v(" 5.数据同步机制")]),e._v(" "),s("p",[e._v("ZK 的数据同步是为了保证各结点中的"),s("strong",[e._v("数据一致性")]),e._v(", 同步时涉及两个流程, 一个是正常的"),s("strong",[e._v("客户端数据提交")]),e._v(", 另一个是集群某个结点宕机在恢复后的"),s("strong",[e._v("数据同步")]),e._v(".")]),e._v(" "),s("p",[s("strong",[e._v("客户端写入请求: 写入请求的大至流程是, Leader 接收客户端写请求, 并同步给各个子结点")]),e._v(". 如下图:")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220107211151215.png",alt:""}})]),e._v(" "),s("p",[e._v("但实际情况要复杂的多, 比如 client 并不知道哪个结点是 Leader, 有可能写的请求会发给 Follower, 由 Follower 再"),s("strong",[e._v("转发")]),e._v("给 Leader 进行"),s("strong",[e._v("同步")]),e._v("处理.")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220107212056670.png",alt:""}})]),e._v(" "),s("p",[e._v("客户端"),s("strong",[e._v("写入流程")]),e._v("说明:")]),e._v(" "),s("ol",[s("li",[e._v("client 向 ZK 中的 server 发送写请求, 如果该 server 不是 Leader, 则会将该写"),s("strong",[e._v("请求转发")]),e._v("给 Leader, Leader 将请求事务以 "),s("strong",[e._v("proposal")]),e._v(" 形式分发给 Follower.")]),e._v(" "),s("li",[e._v("当 Follower 收到 Leader 的 proposal 时, 根据接收的"),s("strong",[e._v("先后顺序")]),e._v("处理 proposal.")]),e._v(" "),s("li",[e._v("当 Leader 收到 Follower 针对某个 proposal "),s("strong",[e._v("过半的 ack 后")]),e._v(", 则发起"),s("strong",[e._v("事务提交")]),e._v(", 重新发起一个 "),s("strong",[e._v("commit")]),e._v(" 的 proposal.")]),e._v(" "),s("li",[e._v("Follower 收到 commit 的 proposal 后, "),s("strong",[e._v("记录事务提交")]),e._v(", 并把数据更新到"),s("strong",[e._v("内存数据库")]),e._v(".")]),e._v(" "),s("li",[e._v("当写成功后, 反馈给 client.")])]),e._v(" "),s("p",[s("strong",[e._v("服务结点初始化同步:")])]),e._v(" "),s("p",[e._v("在集群运行过程当中如果有一个 Follower 结点宕机, 由于宕机结点没过半, 集群仍然能正常服务. 当 Leader 收到新的客户端请求, 此时无法同步给宕机的结点. 造成数据不一致. 为解决这个问题, 当"),s("strong",[e._v("结点启动")]),e._v("时, 第一件事情就是找当前的 Leader, 比对数据是否一致. 如果不一致则开始"),s("strong",[e._v("同步")]),e._v(", 同步完成之后在进行对外提供服务.")]),e._v(" "),s("p",[e._v("如何比对 Leader 的数据"),s("strong",[e._v("版本")]),e._v("呢, 这里通过 "),s("strong",[e._v("ZXID 事务 ID")]),e._v(" 来确认. 比 Leader 低就需要同步.")]),e._v(" "),s("p",[s("strong",[e._v("ZXID: "),s("strong",[e._v("​"),s("strong",[s("strong",[e._v("ZXID 是一个长度 64 位的数字, 其中低 32 位是按照数字递增, "),s("strong",[s("strong",[e._v("​")])])]),e._v("任何数据的变更")])])]),e._v("​"),s("strong",[s("strong",[e._v("都会导致低 32 位的数字简单加 1. 高 32 位是 leader 周期编号, 每当选举出一个新的 Leader 时, 新的 Leader 就从本地事务日志中取出 ZXID, 然后解析出高 32 位的周期编号, 进行")])]),e._v("​"),s("strong",[e._v("加 1")]),e._v(", 再将"),s("strong",[e._v("低 32 位的全部设置为 0")]),e._v(". 这样就保证每次"),s("strong",[e._v("新选举 Leader 后")]),e._v(" ZXID 的"),s("strong",[e._v("唯一且递增")]),e._v(".")]),e._v(" "),s("h4",{attrs:{id:"数据与存储"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据与存储"}},[e._v("#")]),e._v(" 数据与存储")]),e._v(" "),s("p",[e._v("ZK 的数据模型是树结构, 在"),s("strong",[e._v("内存数据库")]),e._v("存储了整棵树的内容, 包括所有结点路径, 结点数据, ACL 信息. ZK 会定时将这个数据存储到磁盘上. 在 ZK 服务器启动期间, 首先会进行数据初始化工作, 将存储在磁盘上的数据文件加载到服务器内存中.")]),e._v(" "),s("h5",{attrs:{id:"_1-内存数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-内存数据"}},[e._v("#")]),e._v(" 1.内存数据")]),e._v(" "),s("p",[s("strong",[e._v("DataTree")]),e._v(" 是内存数据存储的核心, 是一个树结构, "),s("strong",[e._v("代表了内存中一份完整的数据")]),e._v(". DataTree 不包含任何与网络, 客户端连接及请求处理相关的业务逻辑, 是一个独立的组件.")]),e._v(" "),s("p",[s("strong",[e._v("DataNode 是数据存储的最小单元")]),e._v(", 其内部除了保存了结点的数据内容, ACL 列表, 结点状态之外, 还记录了父结点的引用和子结点列表两个属性, 其也提供了对子结点列表进行操作的接口.")]),e._v(" "),s("p",[s("strong",[e._v("ZKDatabase")]),e._v(" 是 ZK 的内存数据库, 管理 ZK 的所有会话, DataTree 存储和事务日志. ZKDatabase 会定时向磁盘 dump 快照数据, 同时在 ZK 启动时, 会通过磁盘的事务日志和快照文件"),s("strong",[e._v("恢复")]),e._v("成一个完整的内存数据库.")]),e._v(" "),s("h5",{attrs:{id:"_2-事务日志"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-事务日志"}},[e._v("#")]),e._v(" 2.事务日志")]),e._v(" "),s("p",[e._v("在配置 ZK 集群时需要配置 dataDir 目录, 其用来存储事务日志文件.")]),e._v(" "),s("h5",{attrs:{id:"_3-数据快照-snapshot"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-数据快照-snapshot"}},[e._v("#")]),e._v(" 3.数据快照(snapshot)")]),e._v(" "),s("p",[e._v("数据快照是 ZK 数据存储中非常核心的运行机制, 数据快照用来记录 ZK 服务器上某一时刻的"),s("strong",[e._v("全量")]),e._v("内存数据内容, 并将其写入指定的"),s("strong",[e._v("磁盘")]),e._v("文件中.")]),e._v(" "),s("h3",{attrs:{id:"三-zookeeper应用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三-zookeeper应用"}},[e._v("#")]),e._v(" 三.ZooKeeper应用")]),e._v(" "),s("p",[e._v("Zookeeper 是一个典型的发布/订阅模式的分布式数据管理与协调框架, 基于分布式的"),s("strong",[e._v("数据发布与订阅")]),e._v("可以有诸多应用场景. 可以用在"),s("strong",[e._v("名字服务, 配置管理, 集群管理, 集群选举, 分布式锁, 队列管理, 消息订阅")]),e._v(" 等场景.")]),e._v(" "),s("h4",{attrs:{id:"命名服务-注册中心🌟"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#命名服务-注册中心🌟"}},[e._v("#")]),e._v(" 命名服务/注册中心🌟")]),e._v(" "),s("p",[e._v("命名服务功能主要是根据指定名字来获取资源或服务的地址, 提供者等信息, 利用其 znode 和 watcher 机制, 将其作为动态注册和获取服务信息的配置中心, 统一管理服务名称和其对应的服务器列表信息, 系统能够实时感知"),s("strong",[e._v("服务器的状态")]),e._v("(上线, 下线, 宕机).")]),e._v(" "),s("p",[e._v("因此 ZK 可以作为"),s("strong",[e._v("注册中心")]),e._v(".")]),e._v(" "),s("h5",{attrs:{id:"_1-负载均衡"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-负载均衡"}},[e._v("#")]),e._v(" 1.负载均衡")]),e._v(" "),s("p",[e._v("轮询服务注册表, 尽可能将服务请求均匀分配到所有注册有效的服务器上.")]),e._v(" "),s("h5",{attrs:{id:"_2-健康检查-心跳监测"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-健康检查-心跳监测"}},[e._v("#")]),e._v(" 2.健康检查/心跳监测")]),e._v(" "),s("p",[e._v("动态维护服务地址注册表, 利用心跳请求实时监控注册服务状态, 删除无效服务节点, 维护有效的地址注册表. 可以让不同的机器都在 ZK 的一个指定节点下创建临时子节点. 不同机器之间可以根据这个临时节点来判断对应的客户端机器是否存活.")]),e._v(" "),s("h5",{attrs:{id:"_3-调用监控"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-调用监控"}},[e._v("#")]),e._v(" 3.调用监控")]),e._v(" "),s("p",[e._v("通过统计注册表各个子节点被"),s("strong",[e._v("访问次数")]),e._v("来监控服务调用情况.")]),e._v(" "),s("h5",{attrs:{id:"_4-动态路由"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-动态路由"}},[e._v("#")]),e._v(" 4.动态路由")]),e._v(" "),s("p",[e._v("可以通过配置注册表参数, 在不修改服务代码的情况下, "),s("strong",[e._v("动态指定服务访问的机器")]),e._v(".")]),e._v(" "),s("h5",{attrs:{id:"_5-动态配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-动态配置"}},[e._v("#")]),e._v(" 5.动态配置")]),e._v(" "),s("p",[e._v("一般发布订阅有两种模式: 推模式和拉模式.")]),e._v(" "),s("ul",[s("li",[e._v("**推模式: ** 服务端主动将数据更新发送给所有订阅的客户端.")]),e._v(" "),s("li",[e._v("**拉模式: ** 客户端主动发起请求以定时轮询的方式获取最新数据.")])]),e._v(" "),s("p",[e._v("发布者将数据发布到 ZK 的一个或多个节点上, 订阅者进行数据订阅以动态获取数据, 从而实现配置信息的集中式管理与数据的动态更新.")]),e._v(" "),s("p",[e._v("ZK 采取了推拉结合的模式. "),s("strong",[e._v("客户端向服务端注册自己需要关注的节点, 一旦节点的数据发生变更, 那么服务端就会向相应的客户端发送 Watcher 事件通知. 客户端收到这个通知之后, 需要主动到服务端获取最新的数据")]),e._v(".")]),e._v(" "),s("p",[e._v("配置中心的数据有几个特点:")]),e._v(" "),s("ul",[s("li",[e._v("数据量较小.")]),e._v(" "),s("li",[e._v("数据内容可以动态变化.")]),e._v(" "),s("li",[e._v("集群多个机器共享配置信息.")])]),e._v(" "),s("p",[e._v("可以把数据库的配置信息存放到 Zookeeper 中, 机器初始化的时候去读取一次数据库配置信息, 并在配置节点上注册一个监听数据变更的 Watcher 监听. 如果配置信息改变, Zookeeper 可以告知机器配置信息发生变更, 机器重新拉取配置信息即可.")]),e._v(" "),s("h4",{attrs:{id:"分布式锁🌟"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分布式锁🌟"}},[e._v("#")]),e._v(" 分布式锁🌟")]),e._v(" "),s("p",[e._v("分布式锁是控制分布式系统之间同步访问共享资源的一种方式.")]),e._v(" "),s("h5",{attrs:{id:"_1-排他锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-排他锁"}},[e._v("#")]),e._v(" 1.排他锁")]),e._v(" "),s("p",[e._v("排他锁(Exclusive Locks, 简称 X 锁), 又称为"),s("strong",[e._v("写锁或独占锁")]),e._v(". 如果事务 T1 对数据对象 O1 加上了排他锁, 那么整个加锁期间, 只允许事务 T1 对 O1 进行读取和操作, 其他任何事务都不能再对这个数据对象进行读写操作, 直到事务释放了排他锁.")]),e._v(" "),s("p",[e._v("排他锁的核心是如何保证当前有且仅有一个事务获得锁, 并且锁被释放后, 所有正在获得锁的事务都能被通知到.")]),e._v(" "),s("h6",{attrs:{id:"_1-定义锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-定义锁"}},[e._v("#")]),e._v(" (1)定义锁")]),e._v(" "),s("p",[e._v("ZK 中通过"),s("strong",[e._v("数据节点")]),e._v("来表示一个锁, 例如 /exclusive/lock 节点就可以被定义为一个锁.")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20211120203357763-7638936.png",alt:""}})]),e._v(" "),s("h6",{attrs:{id:"_2-获取锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-获取锁"}},[e._v("#")]),e._v(" (2)获取锁")]),e._v(" "),s("p",[e._v("在需要获取锁时, "),s("strong",[e._v("所有竞争的客户端")]),e._v("都会试图调用 "),s("strong",[e._v("create()")]),e._v("  接口, 尝试在 /exclusive 节点下创建"),s("mark",[s("strong",[e._v("临时子节点")])]),e._v(" /exclusive/lock. ZK 保证所有客户端最终只有一个客户端能"),s("strong",[e._v("创建成功")]),e._v(", 就可以认为该客户端获取了锁. 其他没获取锁的客户端会在 /exclusive 节点上注册一个子节点变更的 "),s("strong",[e._v("Watcher 监听")]),e._v(", 以便实时监听到 lock 节点的变更情况.")]),e._v(" "),s("h6",{attrs:{id:"_3-释放锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-释放锁"}},[e._v("#")]),e._v(" (3)释放锁")]),e._v(" "),s("p",[e._v("由于 /exclusive/lock 是一个"),s("mark",[s("strong",[e._v("临时节点")])]),e._v(", 因此在以下两种情况下, 都可能释放锁.")]),e._v(" "),s("ul",[s("li",[e._v("当前获取锁的"),s("strong",[e._v("客户端机器发生宕机, 那么此临时节点就会被移除")]),e._v(".")]),e._v(" "),s("li",[e._v("正常"),s("strong",[e._v("执行完")]),e._v("业务逻辑后, 客户端会主动将自己创建的临时节点"),s("strong",[e._v("删除")]),e._v(".")])]),e._v(" "),s("p",[e._v("无论什么情况下移除了 /exclusive/lock 节点, Zookeeper 都会"),s("strong",[e._v("通知所有在 /exclusive 节点上注册了子节点变更 Watcher 监听的客户端")]),e._v(", 客户端收到通知之后, 就会重新发起分布式锁获取, 即"),s("strong",[e._v('重复 "获取锁"')]),e._v("  过程.")]),e._v(" "),s("p",[e._v("整个排他锁获取与释放流程如下.")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20211120202211006-7638936.png",alt:"image-20211120202211006"}})]),e._v(" "),s("h5",{attrs:{id:"_2-共享锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-共享锁"}},[e._v("#")]),e._v(" 2.共享锁")]),e._v(" "),s("p",[e._v("共享锁(Shared Locks, 简称 S 锁), 又称"),s("strong",[e._v("读锁")]),e._v(". 如果事务 T1 对数据对象 O1 加上了"),s("strong",[e._v("共享锁")]),e._v(", 那么当前事务只能对 O1 进行"),s("strong",[e._v("读取操作")]),e._v(", 其他事务也只能对这个数据对象加"),s("strong",[e._v("共享锁")]),e._v(", 直到该数据对象上的"),s("strong",[e._v("所有共享锁都被释放")]),e._v(".")]),e._v(" "),s("p",[e._v("共享锁与排他锁的根本区别在于, "),s("strong",[e._v("加上排他锁后, 数据对象只对一个事务可见, 而加上共享锁后, 数据对所有事务都可见")]),e._v(".")]),e._v(" "),s("h6",{attrs:{id:"_1-定义锁-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-定义锁-2"}},[e._v("#")]),e._v(" (1)定义锁")]),e._v(" "),s("p",[e._v("同样通过 Zookeeper 上的数据节点表示一个锁, 是一个类似于  "),s("strong",[e._v("/shared/[Hostname]-请求类型-序号")]),e._v(" 的"),s("strong",[e._v("临时顺序节点")]),e._v(".")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20211120203629801-7638936.png",alt:""}})]),e._v(" "),s("h6",{attrs:{id:"_2-获取锁-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-获取锁-2"}},[e._v("#")]),e._v(" (2)获取锁")]),e._v(" "),s("p",[e._v("在需要获取共享锁时, 所有客户端都会到 /shared 这个节点下创建一个"),s("mark",[s("strong",[e._v("临时顺序节点")])]),e._v(". 如果当前是"),s("strong",[e._v("读请求")]),e._v(", 那么就创建例如 "),s("code",[e._v("/shared/192.168.0.2-R-000000001")]),e._v("​ 的节点; 如果是"),s("strong",[e._v("写请求")]),e._v(", 那么就创建例如 "),s("code",[e._v("/shared/192.168.0.2-W-000000001")]),e._v("​ 的节点.")]),e._v(" "),s("h6",{attrs:{id:"_3-判断读写顺序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-判断读写顺序"}},[e._v("#")]),e._v(" (3)判断读写顺序")]),e._v(" "),s("p",[e._v("根据共享锁的定义, "),s("strong",[e._v("不同的事务")]),e._v("都可以同时对同一个数据对象进行"),s("strong",[e._v("读取操作")]),e._v(", 而"),s("strong",[e._v("更新操作")]),e._v("必须在当前没有任何事务进行"),s("strong",[e._v("读写操作")]),e._v("的情况下进行. 基于这个原则, 通过 Zookeeper 的节点可以确定分布式读写顺序, 大致可以分为以下四个步骤:")]),e._v(" "),s("ul",[s("li",[e._v("创建完节点后, 获取 /shared 节点下的"),s("strong",[e._v("所有子节点, 并对该节点注册子节点变更的 Watcher 监听")]),e._v(".")]),e._v(" "),s("li",[e._v("确定自己的节点序号在所有子节点的顺序.")]),e._v(" "),s("li",[e._v("对于"),s("strong",[e._v("读请求")]),e._v(". 如果没有比自己序号小的子节点, 或是所有比自己序号小的子节点都是"),s("strong",[e._v("读请求")]),e._v(", 那么表明自己已经成功"),s("strong",[e._v("获取到了共享锁")]),e._v(", 同时开始执行读取逻辑; 如果比自己序号小的子节点中有"),s("strong",[e._v("写请求")]),e._v(", 那么需要进入等待. 对于"),s("strong",[e._v("写请求")]),e._v(". 如果自己不是序号最小的子节点, 就需要进入等待.")]),e._v(" "),s("li",[e._v("接收到 Watcher 通知后, 重复步骤 1.")])]),e._v(" "),s("h6",{attrs:{id:"_4-释放锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-释放锁"}},[e._v("#")]),e._v(" (4)释放锁")]),e._v(" "),s("p",[e._v("释放锁的逻辑和排他锁是一致的. 整个共享锁的获取与释放流程如下图所示.")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20211219124304328-7638936.png",alt:"image-20211219124304328"}})]),e._v(" "),s("h5",{attrs:{id:"_3-羊群效应"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-羊群效应"}},[e._v("#")]),e._v(" 3.羊群效应")]),e._v(" "),s("p",[e._v("上述的共享锁过程基本能满足一般分布式集群竞争锁的需求(一般 10 台机器以内). 但如果"),s("strong",[e._v("机器规模扩大")]),e._v('后, 就会存在问题. 这里重点看看 "判断读写顺序" 的过程. 下面是一个'),s("strong",[e._v("共享锁")]),e._v("的实例.")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20211219125047199-7638936.png",alt:""}})]),e._v(" "),s("p",[e._v("分析一下上面的情况.")]),e._v(" "),s("ul",[s("li",[e._v("host1 这台机器首先进行读操作, 完成读操作后将节点 host1-R-000000001 "),s("strong",[e._v("删除")]),e._v(".")]),e._v(" "),s("li",[e._v("剩下的 4 台机器"),s("strong",[e._v("都收到了这个节点被删除的通知")]),e._v(". 然后"),s("strong",[e._v("重新从 /shared 节点上获取一份最新的子节点列表")]),e._v(".")]),e._v(" "),s("li",[s("strong",[e._v("每个机器判断自己的读写顺序")]),e._v(". 其中 host2 这个机器发现自己已经是序号最小的机器了, 于是开始进行写操作. 其他机器发现没有轮到自己进行读或写操作, 于是继续等待.")]),e._v(" "),s("li",[e._v("重复上述流程...")])]),e._v(" "),s("p",[e._v("可以看到, host1 这个客户端在移除自己的共享锁之后, Zookeeper 发送了"),s("mark",[s("strong",[e._v("子节点变更 Watcher 通知给所有机器")])]),e._v(", 这个通知实际上仅对 host2 机器产生了实际的影响, 对其他的全部机器都没有任何作用.")]),e._v(" "),s("p",[e._v("上述过程可以看到, 在整个分布式锁的竞争过程中, "),s("mark",[s("strong",[e._v('大量的 "Watcher 通知" 和 "子结点列表获取" 两个操作重复进行')])]),e._v(". 且大多数运行的结果都是判断出自己并非是序号最小的结点, 从而继续等待下一轮通知. "),s("strong",[e._v("如果集群规模比较大, 就会对 Zookeeper 服务器造成巨大的性能影响和网络冲击; 而且如果同一时刻有多个结点对应的客户端完成事务或是事务中断引起结点消失, Zookeeper 服务器就会在短时间内向其余客户端发送大量的事件通知")]),e._v(', 这就是  **"**​'),s("mark",[s("strong",[e._v("羊群效应")])]),e._v("​ "),s("strong",[e._v('"')]),e._v(" .")]),e._v(" "),s("p",[e._v("上述的 Zookeeper 分布式共享锁的实现中出现羊群效应的"),s("strong",[e._v("根源在于没有找准客户端真正的关注点")]),e._v(". 前述的分布式锁竞争过程的核心逻辑在于, 判断自己是否是所有子节点中序号最小的. 因此很容易想到"),s("strong",[e._v("每个结点对应的客户端其实只需要关注比自己序号小的那个相关结点的变更情况就可以了, 而不需要关注全局的子列表变更情况")]),e._v(".")]),e._v(" "),s("h5",{attrs:{id:"_4-改进分布式锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-改进分布式锁"}},[e._v("#")]),e._v(" 4.改进分布式锁")]),e._v(" "),s("p",[e._v("前述的共享锁实现思路是对的, 这里的改进主要在于: "),s("mark",[s("strong",[e._v("每个锁竞争者, 只需要关注 /shared 结点下序号比自己小的那个结点是否存在即可")])]),e._v(". 如下图所示.")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20211219131144732-7638936.png",alt:"image-20211219131144732"}})]),e._v(" "),s("p",[e._v("具体步骤如下:")]),e._v(" "),s("ol",[s("li",[e._v('客户端调用 create() 方法创建一个类似与 " '),s("strong",[e._v("/shared/[Hostname]-请求类型-序号")]),e._v('" 的临时顺序结点.')]),e._v(" "),s("li",[e._v("客户端调用 getChildren() 接口来获取所有已经创建的"),s("strong",[e._v("子结点列表")]),e._v(". 注意对比之前的实现: 这里"),s("strong",[e._v("不需要注册任何 Watcher")]),e._v(".")]),e._v(" "),s("li",[e._v("如果无法获取共享锁, 那么就调用 exist() 来"),s("strong",[e._v("向比自己小的那个结点注册 Watcher")]),e._v('. 注意: 这里 "比自己小的结点" 具体得看是读请求还是写请求.')])]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("读请求: 向比自己序号小的最后一个写请求结点注册 Watcher 监听.")])]),e._v(" "),s("li",[s("strong",[e._v("写请求: 向比自己序号小的最后一个结点注册 Watcher 监听.")])])]),e._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[e._v("等待 Watcher 通知, 继续进入步骤 2.")])]),e._v(" "),s("p",[e._v("这个改进过程其实就是尽量去"),s("strong",[e._v("缩小锁的范围")]),e._v(". 具体选哪种实现可以根据"),s("strong",[e._v("具体的场景选择")]),e._v(". 在集群规模不大, 网络资源丰富的情况下, 采用第一种实现是简单实用的选择; 如果集群达到一定规模, 且希望能精细化的控制分布式锁, 那可以采用改进版的分布式锁实现.")]),e._v(" "),s("h4",{attrs:{id:"框架与系统应用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#框架与系统应用"}},[e._v("#")]),e._v(" 框架与系统应用")]),e._v(" "),s("p",[e._v("介绍下 ZK 在各种框架中的应用.")]),e._v(" "),s("blockquote",[s("p",[e._v("Hadoop")])]),e._v(" "),s("p",[e._v("Hadoop 利用 Zookeeper 实现 HA(High Availability).")]),e._v(" "),s("blockquote",[s("p",[e._v("HBase")])]),e._v(" "),s("p",[e._v("HBase 利用 Zookeeper 实现整个系统的分布式协调工作.")]),e._v(" "),s("blockquote",[s("p",[e._v("Kafka")])]),e._v(" "),s("p",[e._v("Kafka 使用 Zookeeper 作为注册系统来对整个集群的 "),s("strong",[e._v("Broker 服务器")]),e._v('进行管理. 在 Zookeeper 上会有一个专门用来进行 Broker 服务器列表记录的结点(记为 Broker 结点), 其路径为 "/brokers/ids". 每个 Broker 服务器在启动时, 都会到 Zookeeper 上进行注册, 即到 Broker 结点下创建属于自己的结点, 其结点路径为 "/brokers/ids/[0-N]".')]),e._v(" "),s("p",[e._v('在 Kafka 中, 使用一个全局唯一的数字(可称为 Broker ID)来代表每一个 Broker 服务器, 不同的 Broker 必须使用不同的  Broker ID 进行注册, 如 "/brokers/ids/1" 和 "/brokers/ids/2" 分别代表了两个 Broker 服务器. 创建完 Broker 结点后, 每个 Broker 会将自己的 IP 地址和端口信息写入到该结点下去.')]),e._v(" "),s("p",[e._v("Broker 创建的结点是一个临时结点, 一旦这个 Broker 服务器宕机或者下线, 对应的 Zookeeper 结点也会删除. 因此可以通过 Zookeeper 上 Broker 结点的变化情况来动态表征 Broker 服务器的可用性.")]),e._v(" "),s("p",[e._v("除了 Broker 之外, Topic 注册也是类似的逻辑.")]),e._v(" "),s("p",[e._v("参考: Kafka与Zookeeper.")]),e._v(" "),s("blockquote",[s("p",[e._v("Dubbo")])]),e._v(" "),s("p",[s("strong",[e._v("Zookeeper 一个最常用的使用场景就是用于担任服务生产者和服务消费者的注册中心(提供发布订阅服务). "),s("strong",[e._v("​"),s("strong",[s("strong",[e._v("服务生产者将自己提供的服务注册到 Zookeeper 中心, 服务的消费者在进行服务调用的时候先到 Zookeeper 中查找服务, 获取到服务生产者的详细信息之后, 再去调用服务生产者的内容与数据. 在 Dubbo 中 Zookeeper 就担任了")])]),e._v("​")]),e._v("注册中心")]),e._v("的角色.")]),e._v(" "),s("p",[e._v("分布式服务节点很多, 不可能在客户端手动配置, 这就需要一个"),s("strong",[e._v("中间服务")]),e._v(", 专门用于"),s("strong",[e._v("帮助客户端发现服务节点")]),e._v(", 就是"),s("strong",[e._v("服务发现")]),e._v(".")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220107212259512-7638936.png",alt:""}})]),e._v(" "),s("p",[e._v("一个完整的"),s("strong",[e._v("注册中心")]),e._v("涵盖以下功能特性:")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("服务注册: "),s("strong",[e._v("​"),s("strong",[s("strong",[e._v("服务端")])]),e._v("​")]),e._v("上线时")]),e._v("将自"),s("strong",[e._v("提供的服务提交给注册中心")]),e._v(".")]),e._v(" "),s("li",[s("strong",[e._v("服务注销: "),s("strong",[e._v("​"),s("strong",[s("strong",[e._v("通知客户端服务端")])]),e._v("​")]),e._v("下线")]),e._v(".")]),e._v(" "),s("li",[s("strong",[e._v("服务订阅")]),e._v(": 动态实时接收服务"),s("strong",[e._v("变更消息")]),e._v(".")]),e._v(" "),s("li",[s("strong",[e._v("可靠性")]),e._v(": 注册服务本身是"),s("strong",[e._v("集群")]),e._v("的, 数据"),s("strong",[e._v("冗余存储")]),e._v(". 避免单点故障, 及数据丢失.")]),e._v(" "),s("li",[s("strong",[e._v("容错性")]),e._v(": 当服务提供者出现宕机, 断电等极端情况时, 注册中心能够"),s("strong",[e._v("动态感知")]),e._v("并通知客户端服务提供者的状态.")])]),e._v(" "),s("p",[e._v("Dubbo 基于 Zookeeper 实现服务"),s("strong",[e._v("注册中心")]),e._v(". 所有服务提供者在 Zookeeper 上创建的结点都是"),s("strong",[e._v("临时结点")]),e._v(", 这利用了临时结点的生命周期与客户端会话相关的特性, 可以表明服务提供者的在线状态.")]),e._v(" "),s("p",[s("strong",[e._v("Dubbo 注册中心存储")]),e._v("结构如下:")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220107214039226-7638936.png",alt:""}})]),e._v(" "),s("p",[s("strong",[e._v("节点说明")])]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[s("strong",[e._v("类别")])]),e._v(" "),s("th",{staticStyle:{"text-align":"center"}},[s("strong",[e._v("属性")])]),e._v(" "),s("th",{staticStyle:{"text-align":"center"}},[s("strong",[e._v("说明")])])])]),e._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[e._v("Root")])]),e._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("strong",[e._v("持久节点")])]),e._v(" "),s("td",{staticStyle:{"text-align":"center"}},[e._v('根节点名称, 默认是 "dubbo"')])]),e._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[e._v("Service")])]),e._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("strong",[e._v("持久节点")])]),e._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("strong",[e._v("服务名称")]),e._v(", 完整的服务类名")])]),e._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[e._v("type")])]),e._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("strong",[e._v("持久节点")])]),e._v(" "),s("td",{staticStyle:{"text-align":"center"}},[e._v("可选值: "),s("strong",[e._v("providers")]),e._v("(提供者), "),s("strong",[e._v("consumers")]),e._v("(消费者), "),s("strong",[e._v("configurators")]),e._v("(动态配置), "),s("strong",[e._v("routers")])])]),e._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[e._v("URL")])]),e._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("strong",[e._v("临时节点")])]),e._v(" "),s("td",{staticStyle:{"text-align":"center"}},[e._v("URL 名称: 包含服务提供者的 IP 端口及配置等信息.")])])])]),e._v(" "),s("p",[e._v("‍")]),e._v(" "),s("p",[e._v("‍")]),e._v(" "),s("p",[e._v("‍")]),e._v(" "),s("p",[e._v("‍")]),e._v(" "),s("p",[e._v("‍")]),e._v(" "),s("p",[e._v("‍")]),e._v(" "),s("p",[e._v("‍")])])}),[],!1,null,null,null);s.default=t.exports}}]);