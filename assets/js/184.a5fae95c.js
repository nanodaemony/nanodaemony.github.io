(window.webpackJsonp=window.webpackJsonp||[]).push([[184],{513:function(s,t,a){"use strict";a.r(t);var _=a(4),n=Object(_.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"_306-mysql设计规范"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_306-mysql设计规范"}},[s._v("#")]),s._v(" 306.MySQL设计规范")]),s._v(" "),t("h4",{attrs:{id:"数据库命名规范"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据库命名规范"}},[s._v("#")]),s._v(" 数据库命名规范")]),s._v(" "),t("ul",[t("li",[s._v("所有数据库对象名称必须使用"),t("strong",[s._v("小写字母")]),s._v("并用下划线分割.")]),s._v(" "),t("li",[s._v("数据库对象名称禁止使用 MySQL 保留关键字, 如果查询的列名包含关键字时, 需要将其用单引号括起来.")]),s._v(" "),t("li",[t("strong",[s._v("临时库表必须以 tmp 为前缀")]),s._v("并以日期为后缀, "),t("strong",[s._v("备份表必须以 bak 为前缀")]),s._v("并以日期(时间戳)为后缀.")]),s._v(" "),t("li",[s._v("所有"),t("strong",[s._v("存储相同数据的列名和列类型必须一致")]),s._v(". 如果查询时关联列类型不一致会自动进行数据类型隐式转换, 会造成列上的索引失效, 导致查询效率降低.")])]),s._v(" "),t("h4",{attrs:{id:"数据库基本设计规范"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据库基本设计规范"}},[s._v("#")]),s._v(" 数据库基本设计规范")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("所有表必须使用 InnoDB 存储引擎")]),s._v(". 没有特殊要求(如 InnoDB 无法满足的功能如: 列存储, 存储空间数据等)的情况下, 所有表必须使用 InnoDB 存储引擎.")]),s._v(" "),t("li",[t("strong",[s._v("数据库和表的字符集统一使用 UTF8")]),s._v(". 兼容性更好, 统一字符集可以避免由于字符集转换产生的乱码, 不同字符集进行比较前需要进行转换会造成索引失效. 如果需要存储 "),t("strong",[s._v("Emoji")]),s._v(" 表情, 需要采用 "),t("strong",[s._v("utf8mb4")]),s._v(" 字符集.")]),s._v(" "),t("li",[s._v("所有表和字段都需要"),t("strong",[s._v("添加 COMMENT 注释")]),s._v(".")]),s._v(" "),t("li",[t("strong",[s._v("尽量控制单表数据量的大小, 建议控制在 500 万行以内")]),s._v(". 500 万并不是 MySQL 数据库的限制, 表过大时修改表结构, 备份, 恢复可能会有问题. 可以用"),t("strong",[s._v("历史数据归档")]),s._v("(应用于日志数据), "),t("strong",[s._v("分库分表")]),s._v("(应用于业务数据)等手段来控制数据量大小.")]),s._v(" "),t("li",[t("strong",[s._v("谨慎使用 MySQL 分区表")]),s._v(". 分区表在物理上表现为"),t("strong",[s._v("多个文件")]),s._v(", 在逻辑上表现为"),t("strong",[s._v("一个表")]),s._v("; 谨慎选择分区键, 跨分区查询效率可能更低; 建议采用"),t("strong",[s._v("物理分表")]),s._v("的方式管理大数据.")]),s._v(" "),t("li",[t("strong",[s._v("尽量做到冷热数据分离, 减小表的宽度")]),s._v(". 减少磁盘 IO, 保证热数据的内存缓存命中率(表越宽, 把表装载进内存缓冲池时所占用的内存也就越大, 也会消耗更多的 IO). 更有效利用缓存, 避免读入无用的冷数据; 把经常一起使用的列放到一个表中, 避免过多的联结操作.")]),s._v(" "),t("li",[t("strong",[s._v("禁止在数据库中存储图片, 文件等大的二进制数据")]),s._v(". 通常文件很大, 会短时间内造成数据量快速增长, 数据库进行数据库读取时, 通常会进行大量的随机 IO 操作, 十分耗时. 大文件通常存储于 "),t("strong",[s._v("OSS")]),s._v(", 数据库只存储"),t("strong",[s._v("文件地址")]),s._v("信息.")]),s._v(" "),t("li",[s._v("禁止在线上做数据库压力测试.")]),s._v(" "),t("li",[s._v("禁止从开发环境, 测试环境直接连接生产环境数据库.")])]),s._v(" "),t("h4",{attrs:{id:"数据库字段设计规范"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据库字段设计规范"}},[s._v("#")]),s._v(" 数据库字段设计规范")]),s._v(" "),t("blockquote",[t("p",[t("strong",[s._v("优先选择符合存储需要的最小的数据类型")])])]),s._v(" "),t("p",[t("strong",[s._v("原因: ​")]),s._v("​"),t("strong",[t("strong",[s._v("列的字段长度越大, 建立索引时所需要的")])]),s._v("​"),t("strong",[s._v("空间")]),s._v("也就越大, 这样一个结点中所能存储的索引分叉的数量也就越少, 在遍历时所需要的 IO 次数也就越多, 索引的性能也就越差.")]),s._v(" "),t("p",[t("strong",[s._v("a. 将字符串转换成数字类型存储, 如: 将 IP 地址转换成整形数据")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("b. 对于非负型的数据(如自增 ID, 整型 IP) 来说, 优先使用无符号整型来存储")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("原因: ​")]),s._v("​"),t("strong",[t("strong",[s._v("无符号相对于有符号可以")])]),s._v("​"),t("strong",[s._v("多出一倍")]),s._v("的存储空间.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("SIGNED "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2147483648")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("~")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2147483647")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("UNSIGNED")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("~")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4294967295")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("VARCHAR(N) 中的 N 代表的是"),t("strong",[s._v("字符数")]),s._v(", 而不是字节数, 使用 UTF8 存储 255 个汉字 VARCHAR(255) = 765 个字节. "),t("strong",[s._v("过大的长度会消耗更多的内存")]),s._v(".")]),s._v(" "),t("blockquote",[t("p",[t("strong",[s._v("避免使用TEXT, BLOB数据类型. TEXT类型可以存储64K的数据")])])]),s._v(" "),t("p",[t("strong",[s._v("a. 建议把 BLOB 或是 TEXT 列分离到单独的扩展表中")])]),s._v(" "),t("p",[s._v("MySQL 内存临时表不支持 TEXT, BLOB 这样的大数据类型, 如果查询中包含这样的数据, 就不能使用内存排序而只能用磁盘排序.")]),s._v(" "),t("p",[s._v("如果一定要使用, 建议把 BLOB 或是 TEXT 列分离到单独的扩展表中, 查询时不要使用 SELECT * 查询全部字段, 而只需要取出必要的列, 不需要 TEXT 列的数据时不要对该列进行查询.")]),s._v(" "),t("p",[t("strong",[s._v("b. TEXT 或 BLOB 类型只能使用前缀索引")])]),s._v(" "),t("p",[s._v("因为 MySQL[1] 对索引字段长度是有限制的, 所以 TEXT 类型只能使用"),t("strong",[s._v("前缀索引")]),s._v(", 并且 TEXT 列"),t("strong",[s._v("不能有默认值")]),s._v(".")]),s._v(" "),t("blockquote",[t("p",[t("strong",[s._v("避免使用 ENUM 类型")])])]),s._v(" "),t("p",[s._v("ENUM 类型的 ORDER BY 操作效率低, 需要额外操作. 禁止使用数值作为 ENUM 的枚举值. 枚举值维护在代码中就行.")]),s._v(" "),t("blockquote",[t("p",[t("strong",[s._v("尽可能把所有列定义为 NOT NULL 并设置默认值")])])]),s._v(" "),t("p",[t("strong",[s._v("原因: ​")]),s._v("索引 NULL 列需要额外的空间来保存, 所以要占用更多的空间. NOT NULL 可以减少业务中出现 NPE 异常.")]),s._v(" "),t("blockquote",[t("p",[t("strong",[s._v("使用 TIMESTAMP(4 个字节) 或 DATETIME 类型(8 个字节) 存储时间")])])]),s._v(" "),t("p",[s._v("TIMESTAMP 存储的时间范围最多到 2038 年. TIMESTAMP 占用 4 字节和 INT 相同, 但比 INT 可读性高. 超出 TIMESTAMP 取值范围的使用 DATETIME 类型存储.")]),s._v(" "),t("blockquote",[t("p",[t("strong",[s._v("财务相关的金额类数据必须使用 DECIMAL 类型")])])]),s._v(" "),t("p",[s._v("DECIMAL 类型为"),t("strong",[s._v("精准浮点数")]),s._v(", 在计算时不会丢失精度. 占用空间由定义的宽度决定, 每 4 个字节可以存储 9 位数字, 并且小数点要占用一个字节. 可用于存储比 BIGINT 更大的整型数据.")]),s._v(" "),t("h4",{attrs:{id:"数据库sql开发规范"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据库sql开发规范"}},[s._v("#")]),s._v(" 数据库SQL开发规范")]),s._v(" "),t("blockquote",[t("p",[t("strong",[s._v("建议使用预编译语句进行数据库操作")])])]),s._v(" "),t("p",[s._v("预编译语句可以"),t("strong",[s._v("减少 SQL 编译时间")]),s._v(", 还可以解决动态 SQL 所带来的 "),t("strong",[s._v("SQL 注入")]),s._v("的问题. 只传参数, 比传递 SQL 语句更高效. 相同语句可以一次解析, 多次使用, 提高处理效率.")]),s._v(" "),t("blockquote",[t("p",[t("strong",[s._v("避免数据类型的隐式转换")])])]),s._v(" "),t("p",[t("strong",[s._v("隐式转换")]),s._v("可能会导致索引失效如:")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" NAME"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" phone "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" customer "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'111'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("blockquote",[t("p",[t("strong",[s._v("禁止使用 SELECT ​*​")]),s._v(", 必须使用 SELECT <字段列表> 查询**")])]),s._v(" "),t("p",[t("strong",[s._v("原因")]),s._v(": 查询全部的字段会消耗更多的 CPU 和 IO 以网络带宽资源, 且无法使用覆盖索引.")]),s._v(" "),t("blockquote",[t("p",[t("strong",[s._v("禁止使用不含字段列表的 INSERT 语句")])])]),s._v(" "),t("p",[s._v("如:")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 不可")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INSERT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INTO")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VALUES")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'b'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'c'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\t\t\t\t\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 可")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INSERT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INTO")]),s._v(" book"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("c1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" c2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" c3"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VALUES")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'b'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'c'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("blockquote",[t("p",[t("strong",[s._v("避免使用子查询, 可以把子查询优化为 JOIN 操作")])])]),s._v(" "),t("p",[s._v("通常子查询在 "),t("strong",[s._v("IN 子句")]),s._v("中, 且子查询中为简单 SQL (不包含 UNION, GROUP BY, ORDER BY, LIMIT 从句) 时, 才可以把子查询转化为关联查询进行优化.")]),s._v(" "),t("p",[t("strong",[s._v("子查询性能差的原因: ​")]),s._v("​"),t("strong",[t("strong",[s._v("子查询的")])]),s._v("​"),t("strong",[s._v("结果集无法使用索引")]),s._v(", 通常子查询的结果集会被存储到"),t("strong",[s._v("临时表")]),s._v("中, 不论是内存临时表还是磁盘临时表"),t("strong",[s._v("都不会存在索引")]),s._v(", 所以查询性能会受到一定的影响. 特别是对于返回结果集比较大的子查询, 其对查询性能的影响也就越大. 由于子查询会产生大量的临时表也没有索引, 所以会消耗过多的 CPU 和 IO 资源, 产生大量的慢查询.")]),s._v(" "),t("blockquote",[t("p",[t("strong",[s._v("避免使用 JOIN 关联太多的表")])])]),s._v(" "),t("p",[s._v("对于 MySQL 来说, 是存在"),t("strong",[s._v("关联缓存")]),s._v("的, 缓存的大小可以由 "),t("strong",[s._v("join_buffer_size")]),s._v(" 参数进行设置. 在 MySQL 中, 对于同一个 SQL 多关联(JOIN)一个表, 就会多分配一个关联缓存, 如果在一个 SQL 中关联的表越多, 所占用的内存也就越大.")]),s._v(" "),t("p",[s._v("如果程序中大量的使用了多表关联的操作, 同时 join_buffer_size 设置的也不合理的情况下, 就容易造成服务器内存溢出的情况, 就会影响到服务器数据库性能的稳定性.")]),s._v(" "),t("p",[s._v("同时对于关联操作来说, 会产生临时表操作, 影响查询效率, 关联表查询建议不超过 3 个.")]),s._v(" "),t("blockquote",[t("p",[t("strong",[s._v("减少同数据库的交互次数")])])]),s._v(" "),t("p",[s._v("数据库更适合处理批量操作, "),t("strong",[s._v("多个相同的操作合并到一起")]),s._v(", 可以提高处理效率.")]),s._v(" "),t("blockquote",[t("p",[t("strong",[s._v("WHERE 从句中禁止对列进行函数转换和计算")])])]),s._v(" "),t("p",[s._v("对列进行函数转换或计算时会导致索引失效.")]),s._v(" "),t("p",[t("strong",[s._v("不推荐:")])]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DATE")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("create_time"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'20190101'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("可以自己转换为范围查询:")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" create_time "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'20190101'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" create_time "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'20190102'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("blockquote",[t("p",[t("strong",[s._v("在明显不会有重复值时使用 UNION ALL 而不是 UNION")])])]),s._v(" "),t("ul",[t("li",[s._v("UNION 会把两个结果集的所有数据放到临时表中后再进行去重操作.")]),s._v(" "),t("li",[s._v("UNION ALL 不会再对结果集进行去重操作.")])]),s._v(" "),t("blockquote",[t("p",[t("strong",[s._v("拆分复杂的大 SQL 为多个小 SQL")])])]),s._v(" "),t("p",[s._v("一个 SQL 只能使用一个 CPU 进行计算; 大 SQL 逻辑上比较复杂, 需要占用大量 CPU 进行计算的 SQL, 拆分后可以通过并行执行来提高处理效率.")]),s._v(" "),t("p",[s._v("‍")]),s._v(" "),t("h4",{attrs:{id:"参考资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[s._v("#")]),s._v(" 参考资料")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247485117&idx=1&sn=92361755b7c3de488b415ec4c5f46d73&chksm=cea24976f9d5c060babe50c3747616cce63df5d50947903a262704988143c2eeb4069ae45420&token=79317275&lang=zh_CN#rd",target:"_blank",rel:"noopener noreferrer"}},[s._v("MySQL高性能优化规范建议"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=n.exports}}]);