(window.webpackJsonp=window.webpackJsonp||[]).push([[239],{545:function(t,_,v){"use strict";v.r(_);var a=v(7),r=Object(a.a)({},(function(){var t=this,_=t._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"_1-开发经验"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-开发经验"}},[t._v("#")]),t._v(" 1.开发经验")]),t._v(" "),_("h5",{attrs:{id:"开发"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#开发"}},[t._v("#")]),t._v(" 开发")]),t._v(" "),_("ul",[_("li",[t._v("能用 private 就用, 不用轻易给 public 方法, 不然别人都可能随便用, 导致一些意想不到的问题, 且难以维护.")]),t._v(" "),_("li",[t._v("方法参数过多时, 可以考虑抽成一个对象.")]),t._v(" "),_("li",[t._v("Thrift 里面不是必须的字段一定要设置成 optional, 不然其 isSet() 方法会默认为 true. 巨坑.")]),t._v(" "),_("li",[t._v("种技术不用去记具体的参数, 配置等各种杂乱的东西. 更应该去理解的是该"),_("strong",[t._v("技术是如何发展, 如何设计")]),t._v("的. 为什么要采取这种方案, 实现. 理解原理比会配置更重要.")]),t._v(" "),_("li",[t._v("修改东西的逻辑, 尽量维护在一个端, 不然维护成本很高, 改动涉及的端也多.")])]),t._v(" "),_("h5",{attrs:{id:"设计"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#设计"}},[t._v("#")]),t._v(" 设计")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("不要过度设计, 大道至简.")])]),t._v(" "),_("li",[t._v("先设计好再开发, 不然容易返工. 一定要解决风险再开发.")]),t._v(" "),_("li",[t._v("用户涉密的信息不要明文存数据库.")]),t._v(" "),_("li",[t._v("对于排行榜之类的需要计算超过多少人的需求, 需要考虑数据量的增长给计算带来的复杂度. 比如随着业务增长, 可能数据量会上亿, 这时候做统计会很慢. 可以考虑的方案: 1. 只取部分数据统计, 比如最近一个月. 2. 定期跑一个大概的百分位占比的汇总表, 这样可以免去查询 DB 的操作.")]),t._v(" "),_("li",[_("strong",[t._v("先考虑业务架构, 再考虑技术架构.")])]),t._v(" "),_("li",[t._v("新技术的引入要慎重, 需要考虑是否对线上有影响.")]),t._v(" "),_("li",[t._v("设计数据库表时, 一定要考虑一下这个表未来数据的增长量, 如果很多的话, 一定要提前进行分库分表.")]),t._v(" "),_("li",[t._v("大道至简. 简单的设计往往更好.")]),t._v(" "),_("li",[t._v("遇到问题时, 可以跳出或者推翻原有的设定, 可以从更高层, 或者更底层看看有没有解决方案.")])]),t._v(" "),_("h5",{attrs:{id:"运维"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#运维"}},[t._v("#")]),t._v(" 运维")]),t._v(" "),_("ul",[_("li",[t._v("对线上环境要有敬畏之心. --- 李建红")])]),t._v(" "),_("p",[t._v("‍")])])}),[],!1,null,null,null);_.default=r.exports}}]);