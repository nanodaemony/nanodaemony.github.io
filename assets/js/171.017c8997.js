(window.webpackJsonp=window.webpackJsonp||[]).push([[171],{500:function(t,s,a){"use strict";a.r(s);var e=a(4),r=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"_7-虚拟机调优及参数总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-虚拟机调优及参数总结"}},[t._v("#")]),t._v(" 7.虚拟机调优及参数总结")]),t._v(" "),s("h4",{attrs:{id:"概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),s("h5",{attrs:{id:"_1-gc调优原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-gc调优原则"}},[t._v("#")]),t._v(" 1.GC调优原则")]),t._v(" "),s("p",[t._v("多数 Java 应用"),s("strong",[t._v("不需要")]),t._v("在服务器上进行 GC 优化; 多数导致 GC 问题的应用, 都不是因为参数设置错误, 而是"),s("strong",[t._v("代码问题")]),t._v("; 在应用上线之前, 先考虑将机器的 "),s("strong",[t._v("JVM 参数设置到最优")]),t._v("; 减少创建对象的数量; "),s("strong",[t._v("减少使用全局变量和大对象")]),t._v("; GC 优化是到最后不得已才采用的手段; 在实际使用中, 分析 GC 情况"),s("strong",[t._v("优化代码")]),t._v("比优化 GC 参数要多得多; "),s("strong",[t._v("JVM 参数大小设置并没有固定标准, 需要根据实际项目情况分析")]),t._v(".")]),t._v(" "),s("p",[t._v("如果满足下面的指标, "),s("strong",[t._v("则一般不需要进行 GC 优化: ​")]),t._v("​"),s("strong",[s("strong",[t._v("MinorGC 执行时间")])]),t._v("​"),s("strong",[t._v("不到 50ms")]),t._v("; Minor GC 执行"),s("strong",[t._v("不频繁")]),t._v(", 约 10 秒一次; Full GC 执行时间"),s("strong",[t._v("不到 1s")]),t._v("; Full GC 执行频率不算频繁, 不低于 10 分钟 1 次.")]),t._v(" "),s("h5",{attrs:{id:"_2-gc调优目的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-gc调优目的"}},[t._v("#")]),t._v(" 2.GC调优目的")]),t._v(" "),s("p",[s("strong",[t._v("虚拟机调优主要就是: 结合实际业务场景和内存分配的策略进行参数配置. 尽量让垃圾对象在年轻代被消灭掉而不是跑到老年代去了, 减少 Full GC, 同时也控制一下 MinorGC 的次数.")])]),t._v(" "),s("ul",[s("li",[t._v("将转移到"),s("strong",[t._v("老年代")]),t._v("的"),s("strong",[t._v("对象数量降低到最小")]),t._v(".")]),t._v(" "),s("li",[s("strong",[t._v("减少 GC 的执行时间")]),t._v(".")])]),t._v(" "),s("h5",{attrs:{id:"_3-gc调优策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-gc调优策略"}},[t._v("#")]),t._v(" 3.GC调优策略")]),t._v(" "),s("p",[s("strong",[t._v("策略 1: ​")]),t._v("​"),s("strong",[s("strong",[t._v("将")])]),t._v("​"),s("strong",[t._v("新对象")]),t._v("预留在"),s("strong",[t._v("新生代")]),t._v(', 由于 Full GC 的成本远高于 Minor GC, 因此尽可能将对象分配在新生代是明智的做法, 实际项目中根据 GC 日志分析新生代空间大小分配是否合理, 适当通过 "-'),s("strong",[t._v("Xmn")]),t._v('" 命令调节新生代大小, '),s("strong",[t._v("最大限度降低新对象直接进入老年代的情况")]),t._v(". 对于 Spring 项目, 一般容器内的"),s("strong",[t._v("核心对象")]),t._v(", 如各种 "),s("strong",[t._v("Service 对象")]),t._v("经过多次 Minor GC 后会被分配到"),s("strong",[t._v("老年代")]),t._v("中, 而一些用于"),s("strong",[t._v("处理业务的临时对象尽量控制其在新生代")]),t._v("中, 比如处理一个订单中有一些订单对象是临时的, 使用完后让其在新生代被回收掉即可, 别让它们存活太多导致移动到老年代中了.")]),t._v(" "),s("p",[s("strong",[t._v("策略 2: ​")]),t._v("​"),s("strong",[s("strong",[t._v("虽然大部分情况下, 将对象分配在新生代是合理的, 但是对于大对象这种做法却值得考量. 大对象如果首次在新生代分配可能会出现空间不足导致很多年龄不够的小对象被分配的老年代, 破坏新生代的对象结构, 可能会出现频繁的 Full GC. 因此对于")])]),t._v("​"),s("strong",[t._v("大对象")]),t._v(", 可以考虑设置"),s("strong",[t._v("直接进入老年代")]),t._v("(当然生命周期较短的大对象对于垃圾回收来说简直就是噩梦). -XX:PretenureSizeThreshold 可以设置直接进入老年代的"),s("strong",[t._v("对象大小")]),t._v(".")]),t._v(" "),s("p",[s("strong",[t._v("策略 3")]),t._v(": 合理设置进入老年代对象的"),s("strong",[t._v("年龄")]),t._v(", "),s("strong",[t._v("-XX:MaxTenuringThreshold")]),t._v(" 可以设置对象进入老年代的年龄大小, 减少老年代的内存占用, 降低 Full GC 发生的频率.")]),t._v(" "),s("p",[s("strong",[t._v("策略 4")]),t._v(": 设置合理的堆大小, 堆大小设置有两个参数: "),s("strong",[t._v("-Xms 初始化堆大小")]),t._v(", "),s("strong",[t._v("-Xmx 最大堆大小")]),t._v(".")]),t._v(" "),s("h5",{attrs:{id:"_4-gc调优步骤"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-gc调优步骤"}},[t._v("#")]),t._v(" 4.GC调优步骤")]),t._v(" "),s("p",[t._v("一般情况下, JVM 调优可通过以下步骤进行:")]),t._v(" "),s("ul",[s("li",[t._v("分析 "),s("strong",[t._v("GC 日志及 dump 文件")]),t._v(", 判断是否需要优化, 确定瓶颈问题点;")]),t._v(" "),s("li",[t._v("确定 JVM 调优"),s("strong",[t._v("量化目标")]),t._v(";")]),t._v(" "),s("li",[t._v("确定 JVM "),s("strong",[t._v("调优参数")]),t._v(";")]),t._v(" "),s("li",[t._v("依次调优内存, 延迟, 吞吐量等指标;")]),t._v(" "),s("li",[t._v("对比观察调优前后的差异;")]),t._v(" "),s("li",[t._v("不断的分析和调整, 直到找到合适的 JVM 参数配置;")]),t._v(" "),s("li",[t._v("找到最合适的参数, 将这些参数应用到所有服务器, 并进行后续跟踪.")])]),t._v(" "),s("h5",{attrs:{id:"_5-参数设置方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-参数设置方式"}},[t._v("#")]),t._v(" 5.参数设置方式")]),t._v(" "),s("p",[s("strong",[t._v("Spring Boot 程序")]),t._v("的 JVM 参数设置格式:")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("java ‐Xms2048M ‐Xmx2048M ‐Xmn1024M ‐Xss512K ‐XX:MetaspaceSize=256M ‐XX:MaxMetaspaceSize=256M ‐jar microservice‐eureka‐server.jar\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("Tomcat 启动直接加在 bin 目录下 catalina.sh 文件里.")]),t._v(" "),s("h4",{attrs:{id:"虚拟机参数调优实例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#虚拟机参数调优实例"}},[t._v("#")]),t._v(" 虚拟机参数调优实例")]),t._v(" "),s("p",[s("strong",[t._v("调优全部都是根据业务具体的场景和 JVM 内存分配机制来的")]),t._v(".")]),t._v(" "),s("h5",{attrs:{id:"_1-电商系统优化jvm参数-parnew-cms"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-电商系统优化jvm参数-parnew-cms"}},[t._v("#")]),t._v(" 1.电商系统优化JVM参数(ParNew+CMS)")]),t._v(" "),s("p",[t._v("大型电商系统后端现在一般都是拆分为多个"),s("strong",[t._v("子系统")]),t._v("部署的, 如商品系统, 库存系统, 订单系统等. 这里以比较核心的订单系统为例, 假设系统日均产生 50W 订单, 当发生促销时, 假设每秒有 1000 单, 共部署 3 台服务器, 每台服务器需每秒处理 300 个订单. 假设每个订单对象 1K, 则每秒产生 300K 的订单对象, 下单过程的各种业务可能会产生其他对象, 这里放大 20 倍, 假设每秒产生 300K * 20 = 6M 的对象. 生成订单可能还涉及查询等操作, 再放大 10 倍, 假设疫苗产生 60M 对象. 但是这些对象会在 1 秒后全部变成垃圾对象.")]),t._v(" "),s("p",[t._v("对于 "),s("strong",[t._v("8G")]),t._v(" 内存的服务器一般是分配 "),s("strong",[t._v("4G")]),t._v(" 内存给 JVM, 一般的 JVM "),s("strong",[t._v("参数配置")]),t._v("如下:")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Xms3072M")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Xmx3072M")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Xmn1536M")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Xss1M")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("XX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MetaspaceSize")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("256")]),t._v("M "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("XX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MaxMetaspaceSize")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("256")]),t._v("M  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("XX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SurvivorRatio")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220521161117900.png",alt:""}})]),t._v(" "),s("p",[t._v("系统按"),s("strong",[t._v("每秒生成 60MB 的速度")]),t._v("来生成对象, 大概运行 "),s("strong",[t._v("20 秒")]),t._v("就会撑满 eden 区, 会触发 Minor GC, 大概会有 95% 以上对象成为垃圾被回收, 可能最后"),s("strong",[t._v("一两秒")]),t._v("生成的对象"),s("strong",[t._v("还被引用着")]),t._v(", 暂估为 "),s("strong",[t._v("100MB")]),t._v(" 左右, 那么这 100M 会被挪到 "),s("strong",[t._v("S0 区")]),t._v(", 根据"),s("strong",[t._v("动态对象年龄判断原则")]),t._v(", 这 "),s("strong",[t._v("100MB")]),t._v(" 对象同龄而且总和大于 S0 区的 "),s("strong",[t._v("50%")]),t._v(", 那么这些对象都会被挪到"),s("strong",[t._v("老年代")]),t._v(", 到了老年代不到"),s("strong",[t._v("一秒")]),t._v("又变成了"),s("strong",[t._v("垃圾对象")]),t._v(", 很明显这里 "),s("strong",[t._v("survivor 区")]),t._v("大小设置有点小.")]),t._v(" "),s("p",[t._v("分析下系统业务就知道, 明显"),s("strong",[t._v("大部分")]),t._v("对象都是"),s("strong",[t._v("短生存周期")]),t._v("的, "),s("strong",[t._v("根本不应该频繁进入老年代")]),t._v(", 也"),s("strong",[t._v("没必要给老年代维持过大的内存空间, 得让对象尽量留在新生代里")]),t._v(".")]),t._v(" "),s("p",[t._v("于是可以"),s("strong",[t._v("更新")]),t._v("下 JVM 参数设置:")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Xms3072M")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Xmx3072M")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Xmn2048M")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Xss1M")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("XX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PermSize")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("256")]),t._v("M "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("XX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MaxPermSize")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("256")]),t._v("M  \n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("XX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SurvivorRatio")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" \n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220521161455182.png",alt:""}})]),t._v(" "),s("p",[t._v("这样就降低了因为"),s("strong",[t._v("对象动态年龄判断原则导致的对象频繁进入老年代")]),t._v("的问题, 其实"),s("strong",[t._v("很多优化无非就是让短期存活的对象尽量都留在 survivor 里, 不要进入老年代, 这样在 Minor GC 的时候这些对象都会被回收, 不会进到老年代从而导致 Full GC")]),t._v(".")]),t._v(" "),s("p",[t._v("对于对象年龄应该为多少才移动到老年代比较合适, 本例中一次 Minor GC 要间隔二三十秒, "),s("strong",[t._v("大多数对象一般在几秒内就会变为垃圾")]),t._v(", 完全可以将默认的 15 岁改小一点, 比如改为 5, 那么意味着对象要经过 "),s("strong",[t._v("5 次 Minor GC")]),t._v(" 才会进入老年代, 整个时间也有一两分钟了, 如果对象这么"),s("strong",[t._v("长时间都没被回收")]),t._v(", 完全可以认为这些对象是会存活的比较长的对象, 可以移动到老年代, 而不是继续一直占用 survivor 区空间.")]),t._v(" "),s("p",[t._v("对于多大的对象直接进入老年代(参数 -XX:PretenureSizeThreshold), 这个一般可以结合业务场景看下有没有什么大对象生成, 预估下大对象的大小, 一般来说设置为 "),s("strong",[t._v("1M")]),t._v(" 就差不多了, 很少有超过 1M 的大对象, 这些对象一般就是系统中初始化分配的缓存对象, 比如"),s("strong",[t._v("大的缓存")]),t._v(" List, Map 之类的对象.")]),t._v(" "),s("p",[t._v("可以再次适当调整 JVM 参数如下:")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Xms3072M")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Xmx3072M")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Xmn2048M")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Xss1M")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("XX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PermSize")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("256")]),t._v("M "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("XX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MaxPermSize")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("256")]),t._v("M  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("XX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SurvivorRatio")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("XX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MaxTenuringThreshold")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("XX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PretenureSizeThreshold")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("M "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("XX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UseParNewGC")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("XX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UseConcMarkSweepGC")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("对于"),s("strong",[t._v("老年代 CMS 的参数")]),t._v("如何设置可以思考下, 首先想下当前这个系统有"),s("strong",[t._v("哪些对象")]),t._v("可能会长期存活躲过 5 次以上  Minor GC 最终进入老年代. "),s("strong",[t._v("无非就是那些 Spring 容器里的 Bean, 线程池对象, 一些初始化缓存数据对象等, 这些加起来充其量也就几十 MB")]),t._v(".")]),t._v(" "),s("p",[t._v("还有就是某次 Minor GC 完了之后还有超过 200M 的对象存活, 那么就会直接"),s("strong",[t._v("进入老年代")]),t._v(", 比如"),s("strong",[t._v("突然某一秒瞬间要处理五六百单, 那么每秒生成的对象可能有一百多 M, 再加上整个系统可能压力剧增, 一个订单要好几秒才能处理完, 下一秒可能又有很多订单过来.")])]),t._v(" "),s("p",[t._v("可以估算下大概每隔"),s("strong",[t._v("五六分钟")]),t._v("出现一次这样的情况, 那么大概"),s("strong",[t._v("半小时到一小时")]),t._v("之间就可能因为老年代满了触发一次 Full GC, Full GC 的触发条件还有之前说过的"),s("strong",[t._v("老年代空间分配担保机制")]),t._v(", 历次的 Minor GC 挪动到老年代的对象大小肯定是非常小的, 所以几乎"),s("strong",[t._v("不会")]),t._v("在 Minor GC 触发之前由于老年代空间分配担保失败而产生 Full GC, 其实在半小时后发生 Full GC, 这时候已经过了抢购的最高峰期, 后续可能几小时才做一次 Full GC. 对于碎片整理, 因为都是 1 小时或几小时才做一次 Full GC, 是可以每做"),s("strong",[t._v("完一次就开始碎片整理")]),t._v(", 或者两到三次之后再做一次也行.")]),t._v(" "),s("p",[t._v("综上只要"),s("strong",[t._v("年轻代")]),t._v("参数设置合理, 老年代 CMS 的参数设置"),s("strong",[t._v("基本都可以用默认值")]),t._v(", 如下所示:")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Xms3072M")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Xmx3072M")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Xmn2048M")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Xss1M")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("XX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PermSize")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("256")]),t._v("M "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("XX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MaxPermSize")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("256")]),t._v("M  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("XX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SurvivorRatio")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("XX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MaxTenuringThreshold")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("XX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PretenureSizeThreshold")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("M "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("XX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UseParNewGC")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("XX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UseConcMarkSweepGC")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("XX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CMSInitiatingOccupancyFaction")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("92")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("XX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UseCMSCompactAtFullCollection")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("XX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CMSFullGCsBeforeCompaction")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("总结一下, 具体场景具体分析, 核心思想就是: 让"),s("strong",[t._v("长久存活的对象早到老年代")]),t._v(", "),s("strong",[t._v("尽量别让短生命周期的对象跑到老年代去")]),t._v(", 让它们在新生代就被处理掉.")]),t._v(" "),s("h4",{attrs:{id:"jvm参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jvm参数"}},[t._v("#")]),t._v(" JVM参数")]),t._v(" "),s("h5",{attrs:{id:"_1-堆内存分配参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-堆内存分配参数"}},[t._v("#")]),t._v(" 1.堆内存分配参数")]),t._v(" "),s("h6",{attrs:{id:"_1-堆内存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-堆内存"}},[t._v("#")]),t._v(" (1)堆内存")]),t._v(" "),s("p",[t._v("与性能有关的最常见实践之一是根据应用程序要求"),s("strong",[t._v("初始化堆内存")]),t._v(". 以下参数指定"),s("strong",[t._v("最小和最大堆")]),t._v("大小, 推荐显式指定堆大小:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("Xms: 堆区初始值")]),t._v(".")]),t._v(" "),s("li",[s("strong",[t._v("Xmx: 堆区最大值")]),t._v(".")])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Xms")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("heap size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("unit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Xmx")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("heap size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("unit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[s("strong",[t._v("heap size")]),t._v(" 表示要初始化内存的具体大小. "),s("strong",[t._v("unit")]),t._v(" 表示要初始化内存的单位. 单位为 "),s("strong",[t._v('"g(GB)", "m(MB)", "k(KB)"')]),t._v(".")]),t._v(" "),s("p",[t._v("示例:")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Xms2G")]),t._v(" 或 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("XX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InitialHeapSize")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2048")]),t._v("m \t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 最小堆内存2G")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Xmx2G")]),t._v(" 或 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("XX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MaxHeapSize")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2048")]),t._v("m      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 最大堆内存2G")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("h6",{attrs:{id:"_2-栈内存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-栈内存"}},[t._v("#")]),t._v(" (2)栈内存")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("Xss: 线程栈最大值")]),t._v(".")])]),t._v(" "),s("p",[t._v("举例:")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Xss256k")]),t._v(" 或 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("XX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadStackSize")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("256")]),t._v("k\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("栈的大小直接决定函数调用的可达深度. JDK5.0 以后每个线程堆栈大小为 "),s("strong",[t._v("1M")]),t._v(", 以前每个线程堆栈大小为 256K. 应该根据应用的线程所需内存大小进行调整. 在相同物理内存下, 减小这个值能生成更多的线程. 但是操作系统对一个进程内的线程数还是有限制的, 不能无限生成, 经验值在 3000~5000 左右.")]),t._v(" "),s("h6",{attrs:{id:"_3-年轻代内存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-年轻代内存"}},[t._v("#")]),t._v(" (3)年轻代内存")]),t._v(" "),s("p",[t._v("根据 Oracle 官方文档, 在堆总可用内存配置完成之后, 第二大影响因素是"),s("strong",[t._v("年轻代")]),t._v("在堆内存所占的"),s("strong",[t._v("比例")]),t._v(". 默认情况下, 年轻代的最小大小为 "),s("strong",[t._v("1310 MB")]),t._v(", 最大大小为无限制.")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("-XX:NewSize: 年轻代最小内存.")])]),t._v(" "),s("li",[s("strong",[t._v("-XX:MaxNewSize: 年轻代最大内存.")])]),t._v(" "),s("li",[s("strong",[t._v("-Xmn: 年轻代最大内存.")])])]),t._v(" "),s("p",[t._v("举例:")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("XX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NewSize")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("256")]),t._v("m\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Xmn512m")]),t._v(" 或 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("XX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MaxNewSize")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("512")]),t._v("m\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("ul",[s("li",[s("strong",[t._v("-XX:NewRatio: 设置新生代和老年代内存的比值.")])])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置新生代(包括 Eden 和两个 Survivor 区)与老年代的比值为 1. 也就是说: 新生代与老年代所占比值为 1:1, 新生代占整个堆栈的 1/2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("XX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NewRatio")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("  \n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("h6",{attrs:{id:"_4-方法区内存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-方法区内存"}},[t._v("#")]),t._v(" (4)方法区内存")]),t._v(" "),s("p",[t._v("方法区在 JDK1.8 之前实现方式是"),s("strong",[t._v("永久代")]),t._v(", JDK1.8 之后实现方式是"),s("strong",[t._v("元空间")]),t._v(". 两者配置的参数不同.")]),t._v(" "),s("p",[t._v("JDK 1.8 "),s("strong",[t._v("之前")]),t._v("永久代还没被彻底移除的时候通常通过下面这些参数来调节"),s("strong",[t._v("永久代")]),t._v("大小.")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("-XX:PermSize=N: 方法区(永久代) 初始大小.")])]),t._v(" "),s("li",[s("strong",[t._v("-XX:MaxPermSize=N: 方法区(永久代) 最大大小,超过这个值将会抛出异常.")])])]),t._v(" "),s("p",[t._v("这两个参数在 JDK1.8 之后就废弃了.")]),t._v(" "),s("p",[t._v("JDK 1.8 的时候, 永久代被"),s("strong",[t._v("彻底移除")]),t._v("了, 取而代之是元空间, "),s("strong",[t._v("元空间使用的是直接内存")]),t._v(". 如果没有指定 "),s("strong",[t._v("Metaspace")]),t._v(" 的大小, 随着更多类的创建, 虚拟机会耗尽所有可用的"),s("strong",[t._v("系统内存")]),t._v(".")]),t._v(" "),s("p",[t._v("与元空间的相关参数如下:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("MetaspaceSize: 元数据区初始大小. ​")]),t._v("指定元空间触发 Full GC 的初始阈值(元空间无固定初始大小), 以字节为单位, 默认是 21M 左右, 达到该值就会触发 Full GC 进行类型卸载, 同时收集器会对该值进行调整: 如果释放了大量的空间, 就适当降低该值; 如果释放了很少的空间, 那么在不超过 -XX: MaxMetaspaceSize(如果设置了的话)的情况下, 适当提高该值.")]),t._v(" "),s("li",[s("strong",[t._v("MaxMetaspaceSize: 元数据区最大值. 默认是 -1, 即不限制, 但受限于本地内存大小. ​")])]),t._v(" "),s("li",[s("strong",[t._v("MaxDirectMemorySize: 最大直接内存(堆外)大小.")])])]),t._v(" "),s("p",[t._v("例子:")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("XX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MetaspaceSize")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),t._v("m\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("XX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MaxMetaspaceSize")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("256")]),t._v("m\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("XX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MaxDirectMemorySize")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("256")]),t._v("m\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("由于调整元空间大小需要进行 Full GC, 这是非常昂贵的操作, 如果应用在启动的时候发生大量 Full GC, 通常都是由于永久代或元空间发生了大小调整, 基于这种情况, 一般建议在 JVM 参数中将 MetaspaceSize 和 MaxMetaspaceSize 设置成一样的值, 并设置得比初始值要大. 比如对于 8G 物理内存的机器, 可以将这两个值都设置为 256M.")]),t._v(" "),s("h5",{attrs:{id:"_2-行为参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-行为参数"}},[t._v("#")]),t._v(" 2.行为参数")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("参数及其默认值")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("-XX:-DisableExplicitGC")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("禁止调用 System.gc(); 但 JVM 的 GC 仍然有效")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("-XX:+MaxFDLimit")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("最大化文件描述符的数量限制")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("-XX:+ScavengeBeforeFullGC")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("新生代 GC 优先于 Full GC 执行")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("-XX:+UseGCOverheadLimit")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("在抛出 OOM 之前限制 JVM 耗费在 GC 上的时间比例")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("-XX:-UseConcMarkSweepGC")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("对老生代采用并发标记交换算法进行 GC")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("-XX:-UseParallelGC")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("启用并行 GC, 收集新生代空间")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("-XX:-UseParallelOldGC")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("对 Full GC 启用并行, 当 -XX:-UseParallelGC 启用时该项自动启用")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("-XX:-UseSerialGC")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("启用串行 GC")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("-XX:+UseThreadPriorities")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("启用本地线程优先级")])])])]),t._v(" "),s("h5",{attrs:{id:"_3-性能调优参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-性能调优参数"}},[t._v("#")]),t._v(" 3.性能调优参数")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("参数及其默认值")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("-XX:LargePageSizeInBytes=4m")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("设置用于 Java 堆的大页面尺寸")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("-XX:MaxHeapFreeRatio=70")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("GC 后 Java 堆中空闲量占的最大比例")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("-XX:MaxNewSize=size")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("新生成对象能占用内存的最大值")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("-XX:MaxPermSize=64m")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("老生代对象能占用内存的最大值")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("-XX:MinHeapFreeRatio=40")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("GC后java堆中空闲量占的最小比例")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("-XX:NewRatio=2")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("新生代内存容量与老生代内存容量的比例")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("-XX:NewSize=2.125m")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("新生代对象生成时占用内存的默认值")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("-XX:ReservedCodeCacheSize=32m")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("保留代码占用的内存容量")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("-XX:ThreadStackSize=512")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("设置线程栈大小, 若为 0 则使用系统默认值")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("-XX:+UseLargePages")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("使用大页面内存")])])])]),t._v(" "),s("p",[t._v("在日常性能调优中基本上都会用到以上黑体的这几个属性.")]),t._v(" "),s("h5",{attrs:{id:"_4-调试参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-调试参数"}},[t._v("#")]),t._v(" 4.调试参数")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("参数及其默认值")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("-XX:-CITime")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("打印消耗在JIT编译的时间")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("-XX:ErrorFile=./hs_err_pid"),s("pid",[t._v(".log")])],1),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("保存错误日志或者数据到文件中")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("-XX:HeapDumpPath=./java_pid<pid>.hprof")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("指定导出堆转储信息时的路径或文件名")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("-XX:-HeapDumpOnOutOfMemoryError")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("当首次遭遇OOM时导出此时堆中相关信息")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("-XX:")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("出现致命ERROR之后运行自定义命令")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v('-XX:OnOutOfMemoryError="'),s("cmd",{attrs:{args:""}},[t._v(";"),s("cmd",{attrs:{args:""}},[t._v('"')])],1)],1),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("当首次遭遇OOM时执行自定义命令")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("-XX:-PrintConcurrentLocks")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("遇到Ctrl-Break后打印并发锁的相关信息, 与jstack -l功能相同")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("-XX:-PrintCommandLineFlags")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("打印在命令行中出现过的标记")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("-XX:-PrintCompilation")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("当一个方法被编译时打印相关信息")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("-XX:-PrintGC")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("每次GC时打印相关信息")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("-XX:-PrintGC Details")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("每次GC时打印详细信息")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("-XX:-PrintGCTimeStamps")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("打印每次GC的时间戳")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("-XX:-TraceClassLoading")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("跟踪类的加载信息")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("-XX:-TraceClassLoadingPreorder")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("跟踪被引用到的所有类的加载信息")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("-XX:-TraceClassResolution")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("跟踪常量池")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("-XX:-TraceClassUnloading")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("跟踪类的卸载信息")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("-XX:-TraceLoaderConstraints")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("跟踪类加载器约束的相关信息")])])])]),t._v(" "),s("p",[t._v("‍")]),t._v(" "),s("h4",{attrs:{id:"参考资料"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.jianshu.com/p/832fc4d4cb53",target:"_blank",rel:"noopener noreferrer"}},[t._v("CMS GC 默认新生代是多大? "),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.cnblogs.com/hongdada/p/10277782.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("CMS GC启动参数优化配置"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://tech.meituan.com/2017/12/29/jvm-optimize.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("从实际案例聊聊Java应用的GC优化-美团技术团队"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.choupangxia.com/2019/11/11/interview-jvm-gc-08/",target:"_blank",rel:"noopener noreferrer"}},[t._v("JVM性能调优详解"),s("OutboundLink")],1),t._v(" (2019-11-11)")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://segmentfault.com/a/1190000010603813",target:"_blank",rel:"noopener noreferrer"}},[t._v("JVM参数使用手册"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://tech.meituan.com/jvm_optimize.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("美团技术: 从实际案例聊聊Java应用的GC优化"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://juejin.cn/post/6844904048013869064#heading-28",target:"_blank",rel:"noopener noreferrer"}},[t._v("大白话带你认识JVM"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=r.exports}}]);