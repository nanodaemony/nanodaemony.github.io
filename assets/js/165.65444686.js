(window.webpackJsonp=window.webpackJsonp||[]).push([[165],{482:function(s,t,a){"use strict";a.r(t);var n=a(7),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"_200-深入拆解tomcat与jetty-极客时间-🌸"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_200-深入拆解tomcat与jetty-极客时间-🌸"}},[s._v("#")]),s._v(" 200.深入拆解Tomcat与Jetty(极客时间)🌸")]),s._v(" "),t("h3",{attrs:{id:"基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[s._v("#")]),s._v(" 基础")]),s._v(" "),t("h4",{attrs:{id:"_0-为什么学习tomcat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-为什么学习tomcat"}},[s._v("#")]),s._v(" 0.为什么学习Tomcat?")]),s._v(" "),t("p",[s._v("Servlet 技术是 Web 开发的原点, 几乎所有的 Java Web 框架(比如 Spring)都是基于 Servlet 的封装, Spring 应用本身就是一个 Servlet, 而 Tomcat 和 Jetty 这样的 Web 容器, 负责加载和运行 Servlet. 可以通过下面这张图来理解 Tomcat 和 Jetty 在 Web 开发中的位置.")]),s._v(" "),t("p",[s._v("​"),t("img",{attrs:{src:"/img/image-20230405155856-ubjww1f.jpg",alt:""}}),s._v("​")]),s._v(" "),t("p",[s._v("Tomcat 和 Jetty 中用到不少 Java 高级技术, 比如 Java 多线程并发编程, Socket 网络编程以及反射等等. 通过对 Tomcat 和 Jetty 源码的学习, 可以学会在什么样的场景下去用这些技术, 这一点至关重要.")]),s._v(" "),t("p",[s._v("还有就是系统设计能力, Tomcat 和 Jetty 作为工业级的中间件, 它们的设计非常优秀, 比如面向接口编程, 组件化, 骨架抽象类, 一键式启停, 对象池技术以及各种设计模式, 比如模板方法, 观察者模式, 责任链模式等, 之后我也开始模仿它们并把这些设计思想运用到实际的工作中.")]),s._v(" "),t("p",[s._v("独当一面的能力, 离不开"),t("strong",[s._v("技术的广度和深度")]),s._v(".")]),s._v(" "),t("p",[s._v("技术的广度体现在你的知识是成体系的, 从前端到后端, 从应用层面到操作系统, 从软件到硬件, 从开发, 测试, 部署到运维…有些领域虽然你不需要挖得很深, 但是你必须知道这其中的“门道”.")]),s._v(" "),t("p",[s._v("而技术的深度体现在对于某种技术, 你不仅知道怎么用, 还知道这项技术如何产生的, 它背后的原理是什么, 以及它为什么被设计成这样, 甚至你还得知道如何去改进它.")]),s._v(" "),t("p",[s._v("总之弄懂了 Tomcat 和 Jetty, 就能体会到大神们是如何设计 Tomcat 和 Jetty 的, 体会他们如何思考问题, 如何写代码. 比如怎样设计服务端程序的 I/O 和线程模型, 怎样写高性能高并发程序, Spring 的 IoC 容器为什么设计成这个样子, 设计一个中间件或者框架有哪些套路等...")]),s._v(" "),t("p",[s._v("有了一定 Java 基础的人, 对于系统设计的体会可能还不够深刻, 编程的时候还停留在完成功能的层次. 这样不仅业务上难有突破, 对于个人成长也很不利. 为了打破这个瓶颈, 就需要在深度上多下功夫, 找准一个点, 深挖下去, 彻底理解它的原理和设计精髓.")]),s._v(" "),t("h4",{attrs:{id:"_1-http与tomcat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-http与tomcat"}},[s._v("#")]),s._v(" 1.HTTP与Tomcat")]),s._v(" "),t("h5",{attrs:{id:"http与tomcat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http与tomcat"}},[s._v("#")]),s._v(" HTTP与Tomcat")]),s._v(" "),t("p",[t("strong",[s._v("HTTP 协议的本质就是一种浏览器与服务器之间约定好的通信格式")]),s._v(". 一次 HTTP 的请求过程如下.")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405160006-9o9saqk.jpg",alt:""}})]),s._v(" "),t("p",[s._v("Tomcat 和 Jetty 作为一个 HTTP 服务器, 在这个过程中都做了些什么事情呢? 主要是"),t("strong",[s._v("接受连接, 解析请求数据, 处理请求和发送响应")]),s._v("这几个步骤. 注意, 可能有成千上万的浏览器同时请求同一个 HTTP 服务器, 因此 Tomcat 和 Jetty 为了提高服务的能力和并发度, 往往会将自己要做的几个事情"),t("strong",[s._v("并行化")]),s._v(", 具体来说就是"),t("strong",[s._v("使用多线程技术")]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"tomcat与session"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tomcat与session"}},[s._v("#")]),s._v(" Tomcat与Session")]),s._v(" "),t("p",[s._v("HTTP 协议有个特点是无状态, 请求与请求之间是没有关系的. 这样会出现一个很尴尬的问题: Web 应用不知道你是谁. 比如你登陆淘宝后, 在购物车中添加了三件商品, 刷新一下网页, 这时系统提示你仍然处于未登录的状态, 购物车也空了, 很显然这种情况是不可接受的. 因此 HTTP 协议需要一种技术让请求与请求之间建立起联系, 并且服务器需要知道这个请求来自哪个用户, 于是 Cookie 技术出现了.")]),s._v(" "),t("p",[s._v("由于 Cookie 以明文的方式存储在本地, 而 Cookie 中往往带有用户信息, 这样就造成了非常大的安全隐患. 而 Session 的出现解决了这个问题, "),t("strong",[s._v("Session 可以理解为")]),s._v("​******服务器**"),t("strong",[t("strong",[s._v("​")]),s._v("端开辟的存储空间, 里面保存了用户的状态")]),s._v(", 用户信息以 Session 的形式存储在服务端. 当用户请求到来时, 服务端可以把用户的请求和用户的 Session 对应起来. 那么 Session 是怎么和请求对应起来的呢? 答案是通过 Cookie, 浏览器在 Cookie 中填充了一个 Session ID 之类的字段用来标识请求.")]),s._v(" "),t("p",[s._v("具体工作过程是这样的: "),t("strong",[s._v("服务器在创建 Session 的同时, 会为该 Session 生成唯一的 Session ID, 当浏览器再次发送请求的时候, 会将这个 Session ID 带上, 服务器接受到请求之后就会依据 Session ID 找到相应的 Session, 找到 Session 后, 就可以在 Session 中获取或者添加内容了")]),s._v(". 而这些内容只会保存在服务器中, 发到客户端的只有 Session ID, 这样相对安全, 也节省了网络流量, 因为不需要在 Cookie 中存储大量用户信息.")]),s._v(" "),t("p",[s._v("那么 Session 在何时何地创建呢? 当然还是在服务器端程序运行的过程中创建的, 不同语言实现的应用程序有不同的创建 Session 的方法. "),t("strong",[s._v("在 Java 中, 是 Web 应用程序在调用 HttpServletRequest 的 getSession 方法时, 由 Web 容器(比如 Tomcat)创建的")]),s._v(".")]),s._v(" "),t("p",[s._v("Tomcat 的 Session 管理器提供了"),t("strong",[s._v("多种持久化方案来存储 Session")]),s._v(", 通常会采用高性能的存储方式, 比如 Redis, 并且通过集群部署的方式, 防止单点故障, 从而提升高可用. 同时, Session 有过期时间, "),t("strong",[s._v("因此 Tomcat 会开启后台线程定期的轮询, 如果 Session 过期了就将 Session 失效")]),s._v(".")]),s._v(" "),t("h4",{attrs:{id:"_2-servlet规范与servlet容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-servlet规范与servlet容器"}},[s._v("#")]),s._v(" 2.Servlet规范与Servlet容器")]),s._v(" "),t("h5",{attrs:{id:"servlet规范"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#servlet规范"}},[s._v("#")]),s._v(" Servlet规范")]),s._v(" "),t("p",[s._v("浏览器发给服务端的是一个 HTTP 格式的请求, HTTP 服务器收到这个请求后, 需要调用服务端程序来处理, 所谓的服务端程序就是写的 Java 类, 一般来说不同的请求需要由不同的 Java 类来处理. 那么 HTTP 服务器怎么知道要调用哪个 Java 类的哪个方法呢. 最直接的做法是在 HTTP 服务器代码里写一大堆 if else 逻辑判断: 如果是 A 请求就调 X 类的 M1 方法, 如果是 B 请求就调 Y 类的 M2 方法. 但这样做明显有问题, 因为 HTTP 服务器的代码跟业务逻辑耦合在一起了, 如果新加一个业务方法还要改 HTTP 服务器的代码.")]),s._v(" "),t("p",[s._v("那该怎么解决这个问题呢? 面向接口编程是解决耦合问题的法宝, 于是一伙人就定义了一个接口, 各种业务类都必须实现这个接口, 这个接口就叫 "),t("strong",[s._v("Servlet 接口")]),s._v(", 有时也把实现了 Servlet 接口的业务类叫作 Servlet.")]),s._v(" "),t("p",[s._v("还有一个问题, 对于特定的请求, HTTP 服务器如何知道由哪个 Servlet 来处理呢? Servlet 又是由谁来实例化呢? 显然 HTTP 服务器不适合做这个工作, 否则又和业务类耦合了.")]),s._v(" "),t("p",[s._v("于是, 又发明了 "),t("strong",[s._v("Servlet 容器, Servlet 容器用来加载和管理业务类")]),s._v(". "),t("strong",[s._v("HTTP 服务器不直接跟业务类打交道, 而是把请求交给 Servlet 容器去处理, Servlet 容器会将请求转发到具体的 Servlet, 如果这个 Servlet 还没创建, 就加载并实例化这个 Servlet, 然后调用这个 Servlet 的接口方法")]),s._v(". 因此 Servlet 接口其实是 "),t("strong",[s._v("Servlet 容器跟具体业务类之间的接口")]),s._v(". 下面通过一张图来加深理解.")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405160035-9i7e2ce.jpg",alt:""}})]),s._v(" "),t("p",[s._v("图的左边表示 HTTP 服务器直接调用具体业务类, 它们是紧耦合的. 再看图的右边, "),t("strong",[s._v("HTTP 服务器不直接调用业务类, 而是把请求交给容器来处理, 容器通过 Servlet 接口调用业务类")]),s._v(". 因此 Servlet 接口和 Servlet 容器的出现, 达到了 "),t("strong",[s._v("HTTP 服务器与业务类解耦")]),s._v("的目的.")]),s._v(" "),t("p",[s._v("而 Servlet 接口和 Servlet 容器这一整套规范叫作 "),t("strong",[s._v("Servlet 规范")]),s._v(". "),t("strong",[s._v("Tomcat 和 Jetty 都按照 Servlet 规范的要求实现了 Servlet 容器, 同时它们也具有 HTTP 服务器的功能")]),s._v(". 如果要实现新的业务功能, 只需要实现一个 Servlet, 并把它注册到 Tomcat(Servlet 容器)中, 剩下的事情就由 Tomcat 处理了.")]),s._v(" "),t("p",[s._v("Tomcat 和 Jetty 都是 Servlet 容器的具体实现, 虽然它们的实现方法各有特点, 但是都遵守了 Servlet 规范, 因此 Web 应用可以在这两个 Servlet 容器中方便的切换.")]),s._v(" "),t("h5",{attrs:{id:"servlet接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#servlet接口"}},[s._v("#")]),s._v(" Servlet接口")]),s._v(" "),t("p",[s._v("Servlet 接口定义了下面五个方法:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Servlet")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("  \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("init")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletConfig")]),s._v(" config"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletConfig")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getServletConfig")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("service")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletRequest")]),s._v(" req"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletResponse")]),s._v(" res"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IOException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getServletInfo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("destroy")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[t("strong",[s._v("其中最重要是的 service() 方法, 具体业务类在这个方法里实现处理逻辑")]),s._v(". 这个方法有两个参数: "),t("strong",[s._v("ServletRequest 和 ServletResponse. ServletRequest 用来封装请求信息, ServletResponse 用来封装响应信息")]),s._v(", 因此**本质上这两个类是对通信协议的封装. **")]),s._v(" "),t("p",[s._v("比如 "),t("strong",[s._v("HTTP 协议中的请求和响应")]),s._v("就是对应了 "),t("strong",[s._v("HttpServletRequest")]),s._v(" 和 "),t("strong",[s._v("HttpServletResponse")]),s._v(" 这两个类. 可以通过 HttpServletRequest 来获取所有请求相关的信息, 包括请求路径, Cookie, HTTP 头, 请求参数等. 此外, 还可以通过 HttpServletRequest 来创建和获取 Session. 而 HttpServletResponse 是用来封装 HTTP 响应的.")]),s._v(" "),t("p",[s._v("接口中还有两个跟"),t("strong",[s._v("生命周期有关的方法 init() 和 destroy()")]),s._v(" , 这是一个比较贴心的设计, "),t("strong",[s._v("Servlet 容器在加载 Servlet 类的时候会调用 init() 方法, 在卸载的时候会调用 destroy() 方法. 可能会在 init() 方法里初始化一些资源, 并在 destroy() 方法里释放这些资源, 比如 Spring MVC 中的 DispatcherServlet, 就是在 init() 方法里创建了自己的 Spring 容器")]),s._v(".")]),s._v(" "),t("p",[s._v("注意 ServletConfig 这个类, "),t("strong",[s._v("ServletConfig 的作用就是封装 Servlet 的初始化参数")]),s._v(". 可以在 web.xml 给 Servlet 配置参数, 并在程序里通过 getServletConfig() 方法拿到这些参数.")]),s._v(" "),t("p",[s._v("既然定义了 Servlet 接口, 有接口一般就有抽象类, 抽象类用来实现接口和封装通用的逻辑, 因此 Servlet 规范提供了 "),t("strong",[s._v("GenericServlet")]),s._v(" 抽象类, 可以通过扩展它来实现 Servlet. 虽然 Servlet 规范并不在乎通信协议是什么, 但是大多数的 Servlet 都是在 HTTP 环境中处理的, 因此 "),t("strong",[s._v("Servet 规范还提供了 HttpServlet 来继承 GenericServlet")]),s._v(", 并且加入了 HTTP 特性. "),t("strong",[s._v("因此一般可以继承 HttpServlet 类来实现自己的 Servlet, 只需要重写两个方法: doGet() 和 doPost()")]),s._v(" .")]),s._v(" "),t("h5",{attrs:{id:"servlet容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#servlet容器"}},[s._v("#")]),s._v(" Servlet容器")]),s._v(" "),t("p",[s._v("前面提到, 为了解耦, HTTP 服务器不直接调用 Servlet, 而是"),t("strong",[s._v("把请求交给 Servlet 容器来处理")]),s._v(", 那 Servlet 容器又是怎么工作的呢? 下面看看两个重要话题: "),t("strong",[s._v("Web 应用的目录格式是什么样的, 以及该怎样扩展和定制化 Servlet 容器的功能")]),s._v(".")]),s._v(" "),t("h6",{attrs:{id:"_1-工作流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-工作流程"}},[s._v("#")]),s._v(" 1.工作流程")]),s._v(" "),t("p",[t("strong",[s._v("当客户请求某个资源时, HTTP 服务器会用一个 ServletRequest 对象把客户的请求信息封装起来, 然后调用 Servlet 容器的 service() 方法, Servlet 容器拿到请求后, 根据请求的 URL 和 Servlet 的映射关系, 找到相应的 Servlet, 如果 Servlet 还没有被加载, 就用反射机制创建这个 Servlet, 并调用 Servlet 的 init() 方法来完成初始化, 接着调用 Servlet 的 service() 方法来处理请求, 把 ServletResponse 对象返回给 HTTP 服务器, HTTP 服务器会把响应发送给客户端")]),s._v(". 同样通过一张图来帮助理解.")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405160035-vakv9dj.jpg",alt:""}})]),s._v(" "),t("h6",{attrs:{id:"_2-web应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-web应用"}},[s._v("#")]),s._v(" 2.Web应用")]),s._v(" "),t("p",[s._v("Servlet 容器会实例化和调用 Servlet, 那 Servlet 是怎么注册到 Servlet 容器中的呢? 一般来说是以 Web 应用程序的方式来部署 Servlet 的, 而根据 Servlet 规范, "),t("strong",[s._v("Web 应用程序有一定的目录结构")]),s._v(", 在这个目录下分别放置了 Servlet 的类文件, 配置文件以及静态资源, Servlet 容器通过读取配置文件, 就能找到并加载 Servlet. Web 应用的目录结构大概是下面这样的:")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("| -  MyWebApp\n      | -  WEB-INF/web.xml        -- 配置文件, 用来配置 Servlet 等\n      | -  WEB-INF/lib/           -- 存放 Web 应用所需各种 JAR 包\n      | -  WEB-INF/classes/       -- 存放应用类, 比如 Servlet 类\n      | -  META-INF/              -- 目录存放工程的一些信息\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("Servlet 规范里定义了 "),t("strong",[s._v("ServletContext ** 这个接口来对应一个 Web 应用. Web 应用部署好后, Servlet 容器在启动时会加载 Web 应用, 并")]),s._v("为每个 Web 应用创建唯一的 ServletContext 对象**. 可以把 ServletContext 看成是一个全局对象, 一个 Web 应用可能有多个 Servlet, 这些 Servlet 可以通过全局的 ServletContext 来共享数据, 这些数据包括 Web 应用的初始化参数, Web 应用目录下的文件资源等. 由于 ServletContext 持有所有 Servlet 实例, 还可以通过它来实现 Servlet 请求的转发.")]),s._v(" "),t("h6",{attrs:{id:"_3-扩展机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-扩展机制"}},[s._v("#")]),s._v(" 3.扩展机制")]),s._v(" "),t("p",[s._v("引入了 Servlet 规范后, 就不需要关心 Socket 网络通信, 不需要关心 HTTP 协议, 也不需要关心业务类是如何被实例化和调用的, 因为这些都被 "),t("strong",[s._v("Servlet 规范标准化")]),s._v("了, 只要关心怎么实现业务逻辑. 这对于程序员来说是件好事, 但也有不方便的一面. 所谓规范就是说大家都要遵守, 就会千篇一律, 但是如果这个规范不能满足业务的个性化需求, 就有问题了, 因此"),t("strong",[s._v("设计一个规范或者一个中间件, 要充分考虑到可扩展性")]),s._v(". Servlet 规范提供了两种扩展机制: **Filter ** 和 "),t("strong",[s._v("Listener")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("Filter 是过滤器")]),s._v(", 这个接口允许对请求和响应做一些统一的定制化处理, 比如可以根据请求的频率来限制访问, 或者根据国家地区的不同来修改响应内容. 过滤器的工作原理是这样的: Web 应用部署完成后, Servlet 容器"),t("strong",[s._v("需要实例化 Filter 并把 Filter 链接成一个 FilterChain. 当请求进来时, 获取第一个 Filter 并调用 doFilter() 方法, doFilter() 方法负责调用这个 FilterChain 中的下一个 Filter")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("Listener 是监听器")]),s._v(", 这是另一种扩展机制. 当 Web 应用在 Servlet 容器中运行时, Servlet 容器内部会不断的发生各种事件, 如 Web 应用的启动和停止, 用户请求到达等.  Servlet 容器提供了一些默认的监听器来监听这些事件, "),t("strong",[s._v("当事件发生时, Servlet 容器会负责调用监听器的方法")]),s._v(". 当然, 可以定义自己的监听器去监听感兴趣的事件, 将监听器配置在 web.xml 中. 比如 Spring 就实现了自己的监听器, 来监听 ServletContext 的启动事件, 目的是当 Servlet 容器启动时, 创建并初始化全局的 Spring 容器.")]),s._v(" "),t("p",[s._v("总结一下 Filter 和 Listener 的本质区别:")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("Filter 是干预过程的")]),s._v(", 它是过程的一部分, 是基于过程行为的.")]),s._v(" "),t("li",[t("strong",[s._v("Listener 是基于状态的")]),s._v(", 任何行为改变同一个状态, 触发的事件是一致的.")])]),s._v(" "),t("h4",{attrs:{id:"_3-实战-运行一个servlet"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-实战-运行一个servlet"}},[s._v("#")]),s._v(" 3.实战:运行一个Servlet")]),s._v(" "),t("p",[s._v("今天就抛弃 IDE, 拒绝框架, 自己纯手工编写一个 Servlet, 并在 Tomcat 中运行起来.")]),s._v(" "),t("p",[s._v("主要的步骤有:")]),s._v(" "),t("ol",[t("li",[s._v("下载并安装 Tomcat.")]),s._v(" "),t("li",[s._v("编写一个继承 HttpServlet 的 Java 类.")]),s._v(" "),t("li",[s._v("将 Java 类文件编译成 Class 文件.")]),s._v(" "),t("li",[s._v("建立 Web 应用的目录结构, 并配置 web.xml.")]),s._v(" "),t("li",[s._v("部署 Web 应用.")]),s._v(" "),t("li",[s._v("启动 Tomcat.")]),s._v(" "),t("li",[s._v("浏览器访问验证结果.")]),s._v(" "),t("li",[s._v("查看 Tomcat 日志.")])]),s._v(" "),t("p",[s._v("Servlet 3.0 规范支持用注解的方式来部署 Servlet, 不需要在 web.xml 里配置, 最后会演示怎么用注解的方式来部署 Servlet.")]),s._v(" "),t("p",[t("strong",[s._v("1.下载并安装Tomcat")])]),s._v(" "),t("p",[s._v("最新版本的 Tomcat 可以直接在"),t("a",{attrs:{href:"https://tomcat.apache.org/download-90.cgi",target:"_blank",rel:"noopener noreferrer"}},[s._v("官网"),t("OutboundLink")],1),s._v("上下载, 根据你的操作系统下载相应的版本, 这里我使用的是 Mac 系统, 下载完成后直接解压, 解压后的目录结构如下.")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405160901-fs7d46p.png",alt:""}})]),s._v(" "),t("p",[s._v("下面简单介绍一下这些目录:")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("/bin")]),s._v(": 存放启动和关闭 Tomcat 的脚本文件.")]),s._v(" "),t("li",[t("strong",[s._v("/conf")]),s._v(": 存放 Tomcat 的各种全局配置文件, 其中最重要的是 "),t("strong",[s._v("server.xml")]),s._v(".")]),s._v(" "),t("li",[t("strong",[s._v("/lib")]),s._v(": 存放 "),t("strong",[s._v("Tomcat 以及所有 Web 应用都可以访问的 JAR 文件")]),s._v(".")]),s._v(" "),t("li",[t("strong",[s._v("/logs")]),s._v(": 存放 Tomcat 执行时产生的日志文件.")]),s._v(" "),t("li",[t("strong",[s._v("/work")]),s._v(": 存放 JSP 编译后产生的 Class 文件.")]),s._v(" "),t("li",[t("strong",[s._v("/webapps")]),s._v(": Tomcat 的 "),t("strong",[s._v("Web 应用目录, 默认情况下把 Web 应用放在这个目录下")]),s._v(".")])]),s._v(" "),t("p",[t("strong",[s._v("2.编写一个继承HttpServlet的Java类")])]),s._v(" "),t("p",[s._v("之前提到, 可以通过继承 HttpServlet 类来实现自己的 Servlet 只需要重写两个方法: doGet() 和 doPost(). 因此这里创建一个 Java 类去继承 HttpServlet 类, 并重写 doGet() 和 doPost() 方法. 首先新建一个名为 MyServlet.java 的文件, 如下:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token import"}},[t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("java"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("io"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IOException")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token import"}},[t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("java"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("io"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("PrintWriter")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token import"}},[t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("javax"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("servlet"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletException")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token import"}},[t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("javax"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("servlet"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("http"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HttpServlet")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token import"}},[t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("javax"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("servlet"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("http"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HttpServletRequest")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token import"}},[t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("javax"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("servlet"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("http"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HttpServletResponse")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyServlet")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HttpServlet")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("doGet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HttpServletRequest")]),s._v(" request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HttpServletResponse")]),s._v(" response"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IOException")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"MyServlet 在处理 get()请求..."')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("PrintWriter")]),s._v(" out "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" response"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getWriter")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        response"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setContentType")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"text/html;charset=utf-8"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<strong>My Servlet!</strong><br>"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("doPost")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HttpServletRequest")]),s._v(" request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HttpServletResponse")]),s._v(" response"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IOException")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"MyServlet 在处理 post()请求..."')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("PrintWriter")]),s._v(" out "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" response"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getWriter")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        response"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setContentType")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"text/html;charset=utf-8"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<strong>My Servlet!</strong><br>"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br")])]),t("p",[s._v("这个 Servlet 完成的功能很简单, 分别在 doGet() 和 doPost() 方法体里返回一段简单的 HTML.")]),s._v(" "),t("p",[t("strong",[s._v("3.将Java文件编译成Class文件")])]),s._v(" "),t("p",[s._v("下一步需要把 MyServlet.java 文件编译成 Class 文件. 接着需要把 Tomcat /lib 目录下的 servlet-api.jar 拷贝到当前目录下, 这是因为 "),t("strong",[s._v("servlet-api.jar 中定义了 Servlet 接口")]),s._v(", 而自定义的 Servlet 类实现了 Servlet 接口, 因此编译 Servlet 类需要这个 JAR 包. 接着执行编译命令:")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("javac -cp ./servlet-api.jar MyServlet.java\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("编译成功后, 你会在当前目录下找到一个叫 MyServlet.class 的文件.")]),s._v(" "),t("p",[t("strong",[s._v("4.建立Web应用的目录结构")])]),s._v(" "),t("p",[s._v("Servlet 是放到 Web 应用部署到 Tomcat 的, 而 Web 应用具有一定的目录结构, 所有按照要求建立 Web 应用文件夹, 名字叫 MyWebApp, 然后在这个目录下建立子文件夹, 像下面这样:")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("MyWebApp/WEB-INF/web.xml\nMyWebApp/WEB-INF/classes/MyServlet.class\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("然后在 web.xml 中配置 Servlet, 内容如下:")]),s._v(" "),t("div",{staticClass:"language-xml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token prolog"}},[s._v('<?xml version="1.0" encoding="UTF-8"?>')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("web-app")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("xmlns")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("http://xmlns.jcp.org/xml/ns/javaee"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("xmlns:")]),s._v("xsi")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("http://www.w3.org/2001/XMLSchema-instance"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("xsi:")]),s._v("schemaLocation")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("http://xmlns.jcp.org/xml/ns/javaee\n  http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("version")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("4.0"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("metadata-complete")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("true"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("description")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" Servlet Example. "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("description")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("display-name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" MyServlet Example "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("display-name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("request-character-encoding")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("UTF-8"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("request-character-encoding")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("servlet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("servlet-name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("myServlet"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("servlet-name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("servlet-class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("MyServlet"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("servlet-class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("servlet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("servlet-mapping")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("servlet-name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("myServlet"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("servlet-name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("url-pattern")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("/myservlet"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("url-pattern")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("servlet-mapping")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("web-app")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br")])]),t("p",[s._v("可以看到在 web.xml 配置了 Servlet 的名字和具体的类, 以及这个 Servlet 对应的 URL 路径. 注意 **servlet 和 servlet-mapping 这两个标签里的 servlet-name 要保持一致. **")]),s._v(" "),t("p",[t("strong",[s._v("5.部署Web应用")])]),s._v(" "),t("p",[s._v("Tomcat 应用的部署非常简单, 将这个目录 MyWebApp 拷贝到 Tomcat 的安装目录下的 webapps 目录即可.")]),s._v(" "),t("p",[t("strong",[s._v("6.启动Tomcat")])]),s._v(" "),t("p",[s._v("找到 Tomcat 安装目录下的 bin 目录, 根据操作系统的不同, 执行相应的启动脚本. Linux 系统则执行 "),t("code",[s._v("startup.sh")]),s._v("​.")]),s._v(" "),t("p",[t("strong",[s._v("7.浏览访问验证结果")])]),s._v(" "),t("p",[s._v("在浏览器里访问这个 URL: "),t("code",[s._v("http://localhost:8080/MyWebApp/myservlet")]),s._v("​, 会得到:")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("My Servlet!\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("这里需要注意, 访问 URL 路径中的 MyWebApp 是 Web 应用的名字, myservlet 是在 web.xml 里配置的 Servlet 的路径.")]),s._v(" "),t("p",[t("strong",[s._v("8.查看Tomcat日志")])]),s._v(" "),t("p",[s._v("打开 Tomcat 的日志目录, 也就是 Tomcat 安装目录下的 logs 目录. Tomcat 的日志信息分为两类: 一是运行日志, 它主要记录运行过程中的一些信息, 尤其是一些异常错误日志信息; 二是访问日志, 它记录访问的时间, IP 地址, 访问的路径等相关信息.")]),s._v(" "),t("p",[s._v("这里简要介绍各个文件的含义.")]),s._v(" "),t("ul",[t("li",[s._v("​"),t("code",[s._v("catalina.***.log")]),s._v("​")])]),s._v(" "),t("p",[s._v("主要是记录 Tomcat 启动过程的信息, 在这个文件可以看到启动的 JVM 参数以及操作系统等日志信息.")]),s._v(" "),t("ul",[t("li",[s._v("​"),t("code",[s._v("catalina.out")]),s._v("​")])]),s._v(" "),t("p",[s._v('catalina.out 是 Tomcat 的标准输出(stdout)和标准错误(stderr), 这是在 Tomcat 的启动脚本里指定的, 如果没有修改的话 stdout 和 stderr 会重定向到这里. 所以在这个文件里可以看到在 MyServlet.java 程序里打印出来的信息: "MyServlet 在处理 get() 请求..."')]),s._v(" "),t("ul",[t("li",[s._v("​"),t("code",[s._v("localhost.**.log")]),s._v("​")])]),s._v(" "),t("p",[s._v("主要记录 Web 应用在初始化过程中遇到的未处理的异常, 会被 Tomcat 捕获而输出这个日志文件.")]),s._v(" "),t("ul",[t("li",[s._v("​"),t("code",[s._v("localhost_access_log.**.txt")]),s._v("​")])]),s._v(" "),t("p",[s._v("存放访问 Tomcat 的请求日志, 包括 IP 地址以及请求的路径, 时间, 请求协议以及状态码等信息.")]),s._v(" "),t("ul",[t("li",[s._v("​"),t("code",[s._v("manager.***.log/host-manager.***.log")]),s._v("​")])]),s._v(" "),t("p",[s._v("存放 Tomcat 自带的 manager 项目的日志信息.")]),s._v(" "),t("p",[t("strong",[s._v("9.用注解的方式部署Servlet")])]),s._v(" "),t("p",[s._v("为了演示用注解的方式来部署 Servlet, 首先修改 Java 代码, 给 Servlet 类加上  **@WebServlet ** 注解, 修改后的代码如下.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token import"}},[t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("java"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("io"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IOException")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token import"}},[t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("java"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("io"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("PrintWriter")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token import"}},[t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("javax"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("servlet"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletException")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token import"}},[t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("javax"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("servlet"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("annotation"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("WebServlet")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token import"}},[t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("javax"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("servlet"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("http"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HttpServlet")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token import"}},[t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("javax"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("servlet"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("http"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HttpServletRequest")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token import"}},[t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("javax"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("servlet"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("http"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HttpServletResponse")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@WebServlet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/myAnnotationServlet"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AnnotationServlet")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HttpServlet")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("doGet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HttpServletRequest")]),s._v(" request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HttpServletResponse")]),s._v(" response"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IOException")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  \n   "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"AnnotationServlet 在处理 get()请求..."')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("PrintWriter")]),s._v(" out "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" response"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getWriter")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        response"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setContentType")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"text/html; charset=utf-8"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<strong>Annotation Servlet!</strong><br>"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("doPost")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HttpServletRequest")]),s._v(" request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HttpServletResponse")]),s._v(" response"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IOException")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"AnnotationServlet 在处理 post()请求..."')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("PrintWriter")]),s._v(" out "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" response"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getWriter")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        response"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setContentType")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"text/html; charset=utf-8"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<strong>Annotation Servlet!</strong><br>"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("  \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br")])]),t("p",[s._v("这段代码里最关键的就是这个注解, 它表明两层意思: 第一层意思是 AnnotationServlet 这个 Java 类是一个 Servlet, 第二层意思是这个 Servlet 对应的 URL 路径是 myAnnotationServlet.")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('@WebServlet("/myAnnotationServlet")\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("创建好 Java 类以后, 同样经过编译, 并放到 MyWebApp 的 class 目录下. 这里要注意的是, "),t("strong",[s._v("需要删除之前的 web.xml")]),s._v(", 因为不需要 web.xml 来配置 Servlet 了. 然后重启 Tomcat, 接下来验证一下这个新的 AnnotationServlet 有没有部署成功. 在浏览器里输入: "),t("code",[s._v("http://localhost:8080/MyWebApp/myAnnotationServlet")]),s._v("​, 得到结果:")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("Annotation Servlet!\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("这说明 AnnotationServlet 部署成功了. 可以通过注解完成 web.xml 所有的配置功能, 包括 Servlet 初始化参数以及配置 Filter 和 Listener 等.")]),s._v(" "),t("h3",{attrs:{id:"整体架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#整体架构"}},[s._v("#")]),s._v(" 整体架构")]),s._v(" "),t("h4",{attrs:{id:"_4-tomcat系统架构-连接器和容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-tomcat系统架构-连接器和容器"}},[s._v("#")]),s._v(" 4.Tomcat系统架构:连接器和容器")]),s._v(" "),t("p",[s._v("这里一步一步分析 Tomcat 的设计思路, 看看 Tomcat 的设计者们当时是怎么回答这个问题的. 一方面可以学到 Tomcat 的总体架构, 学会从宏观上怎么去设计一个复杂系统, 怎么设计顶层模块, 以及模块之间的关系; 另一方面也为深入学习 Tomcat 的工作原理打下基础.")]),s._v(" "),t("h5",{attrs:{id:"tomcat总体架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tomcat总体架构"}},[s._v("#")]),s._v(" Tomcat总体架构")]),s._v(" "),t("p",[s._v("如果要设计一个系统, 首先是要了解需求. 前面已经了解了 Tomcat 要实现 2 个核心功能:")]),s._v(" "),t("ul",[t("li",[s._v("处理 Socket 连接, 负责网络字节流与 Request 和 Response 对象的转化.")]),s._v(" "),t("li",[s._v("加载和管理 Servlet, 以及具体处理 Request 请求.")])]),s._v(" "),t("p",[t("mark",[t("strong",[s._v("因此 Tomcat 设计了两个核心组件连接器(Connector)和容器(Container)来分别做这两件事情. 连接器负责对外交流, 容器负责内部处理")])]),s._v("​ **. **")]),s._v(" "),t("p",[s._v("在开始分析连接器前, 先铺垫一下 Tomcat 支持的多种 I/O 模型和应用层协议.")]),s._v(" "),t("p",[s._v("Tomcat 支持的 I/O 模型有:")]),s._v(" "),t("ul",[t("li",[s._v("NIO: 非阻塞 I/O, 采用 Java NIO 类库实现.")]),s._v(" "),t("li",[s._v("NIO2: 异步 I/O, 采用 JDK 7 最新的 NIO2 类库实现.")]),s._v(" "),t("li",[s._v("APR: 采用 Apache 可移植运行库实现, 是 C/C++ 编写的本地库.")])]),s._v(" "),t("p",[s._v("Tomcat 支持的应用层协议有:")]),s._v(" "),t("ul",[t("li",[s._v("HTTP/1.1: 这是大部分 Web 应用采用的访问协议.")]),s._v(" "),t("li",[s._v("AJP: 用于和 Web 服务器集成(如 Apache).")]),s._v(" "),t("li",[s._v("HTTP/2: HTTP 2.0 大幅度的提升了 Web 性能.")])]),s._v(" "),t("p",[s._v("**Tomcat 为了实现支持多种 I/O 模型和应用层协议, 一个容器可能对接多个连接器, 就好比一个房间有多个门. 但是单独的连接器或者容器都不能对外提供服务, 需要把它们组装起来才能工作, 组装后这个整体叫作 Service 组件. 注意, Service 本身没有做什么重要的事情, 只是在连接器和容器外面多包了一层, 把它们组装在一起. Tomcat 内可能有多个 Service, 这样的设计也是出于灵活性的考虑. 通过在 Tomcat 中配置多个 Service, 可以实现通过不同的端口号来访问同一台机器上部署的不同应用. **")]),s._v(" "),t("p",[s._v("到此得到这样一张关系图:")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405160950-u1ygbo1.jpg",alt:""}})]),s._v(" "),t("p",[s._v("**图中最顶层是 Server, 这里的 Server 指的就是一个 Tomcat 实例. 一个 Server 中有一个或者多个 Service, 一个 Service 中有多个连接器和一个容器. 连接器与容器之间通过标准的 ServletRequest 和 ServletResponse 通信. **")]),s._v(" "),t("p",[s._v("下面分别详细解释一下连接器和容器.")]),s._v(" "),t("h5",{attrs:{id:"连接器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#连接器"}},[s._v("#")]),s._v(" 连接器")]),s._v(" "),t("p",[s._v("**连接器对 Servlet 容器屏蔽了协议及 I/O 模型等的区别, 无论是 HTTP 还是 AJP, 在容器中获取到的都是一个标准的 ServletRequest 对象. **")]),s._v(" "),t("p",[s._v("可以把连接器的功能需求进一步细化, 比如:")]),s._v(" "),t("ul",[t("li",[s._v("监听网络端口.")]),s._v(" "),t("li",[s._v("接受网络连接请求.")]),s._v(" "),t("li",[s._v("读取请求网络字节流.")]),s._v(" "),t("li",[s._v("根据具体应用层协议(HTTP/AJP)解析字节流, 生成统一的 Tomcat Request 对象.")]),s._v(" "),t("li",[s._v("将 Tomcat Request 对象转成标准的 ServletRequest.")]),s._v(" "),t("li",[s._v("调用 Servlet 容器, 得到 ServletResponse.")]),s._v(" "),t("li",[s._v("将 ServletResponse 转成 Tomcat Response 对象.")]),s._v(" "),t("li",[s._v("将 Tomcat Response 转成网络字节流.")]),s._v(" "),t("li",[s._v("将响应字节流写回给浏览器.")])]),s._v(" "),t("p",[s._v("需求列清楚后要考虑的下一个问题是, 连接器应该有哪些子模块? 优秀的模块化设计应该考虑"),t("strong",[s._v("高内聚, 低耦合")]),s._v(".")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("高内聚")]),s._v("是指相关度比较高的功能要尽可能集中, 不要分散.")]),s._v(" "),t("li",[t("strong",[s._v("低耦合")]),s._v("是指两个相关的模块要尽可能减少依赖的部分和降低依赖的程度, 不要让两个模块产生强依赖.")])]),s._v(" "),t("p",[s._v("通过分析连接器的详细功能列表, 可以发现连接器需要完成 3 个"),t("strong",[s._v("高内聚")]),s._v("的功能:")]),s._v(" "),t("ul",[t("li",[s._v("网络通信.")]),s._v(" "),t("li",[s._v("应用层协议解析.")]),s._v(" "),t("li",[s._v("Tomcat Request/Response 与 ServletRequest/ServletResponse 的转化.")])]),s._v(" "),t("p",[s._v("**因此 Tomcat 的设计者设计了 3 个组件来实现这 3 个功能, 分别是 EndPoint, Processor 和 Adapter. **")]),s._v(" "),t("p",[s._v("组件之间通过抽象接口交互. 这样做还有一个好处是**封装变化. ** 这是面向对象设计的精髓, 将系统中经常变化的部分和稳定的部分隔离, 有助于增加复用性, 并降低系统耦合度.")]),s._v(" "),t("p",[s._v("网络通信的 I/O 模型是变化的, 可能是非阻塞 I/O, 异步 I/O 或者 APR. 应用层协议也是变化的, 可能是 HTTP, HTTPS, AJP. 浏览器端发送的请求信息也是变化的.")]),s._v(" "),t("p",[s._v("**但是整体的处理逻辑是不变的, EndPoint 负责提供字节流给 Processor, Processor 负责提供 Tomcat Request 对象给 Adapter, Adapter 负责提供 ServletRequest 对象给容器. **")]),s._v(" "),t("p",[s._v("如果要支持新的 I/O 方案, 新的应用层协议, 只需要实现相关的具体子类, 上层通用的处理逻辑是不变的.")]),s._v(" "),t("p",[s._v("由于 I/O 模型和应用层协议可以自由组合, 比如 NIO + HTTP 或者 NIO2 + AJP. Tomcat 的设计者将网络通信和应用层协议解析放在一起考虑, 设计了一个叫 "),t("strong",[s._v("ProtocolHandler 的接口来封装这两种变化点. 各种协议和通信模型的组合有相应的具体实现类. 比如: Http11NioProtocol 和 AjpNioProtocol")]),s._v(".")]),s._v(" "),t("p",[s._v("除了这些变化点, 系统也存在一些相对稳定的部分, 因此 Tomcat 设计了一系列抽象基类来"),t("strong",[s._v("封装这些稳定的部分")]),s._v(", 抽象基类 "),t("strong",[s._v("AbstractProtocol")]),s._v(" 实现了 ProtocolHandler 接口. 每一种应用层协议有自己的抽象基类, 比如 AbstractAjpProtocol 和 AbstractHttp11Protocol, 具体协议的实现类扩展了协议层抽象基类. 下面整理一下它们的继承关系.")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405160950-36cmbgl.jpg",alt:""}})]),s._v(" "),t("p",[s._v("通过上面的图可以清晰地看到它们的继承和层次关系, 这样设计的目的是"),t("strong",[s._v("尽量将稳定的部分放到抽象基类")]),s._v(", 同时每一种 I/O 模型和协议的组合都有相应的具体实现类, 在使用时就可以自由选择.")]),s._v(" "),t("p",[s._v("小结一下, 连接器模块用三个核心组件: Endpoint, Processor 和 Adapter 来分别做三件事情, 其中 Endpoint 和 Processor 放在一起抽象成了 ProtocolHandler 组件, 它们的关系如下图所示.")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405160951-h8go2yh.jpg",alt:""}})]),s._v(" "),t("p",[s._v("下面详细介绍这两个顶层组件 ProtocolHandler 和 Adapter.")]),s._v(" "),t("h6",{attrs:{id:"_1-protocolhandler组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-protocolhandler组件"}},[s._v("#")]),s._v(" 1.ProtocolHandler组件")]),s._v(" "),t("p",[s._v("从前面可知, "),t("strong",[s._v("连接器用 ProtocolHandler 来处理网络连接和应用层协议, 包含了 2 个重要部件: EndPoint 和 Processor")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("(1)EndPoint")])]),s._v(" "),t("p",[s._v("EndPoint 是通信端点, 即通信监听的接口, 是具体的 Socket 接收和发送处理器, 是对传输层的抽象, 因此 "),t("strong",[s._v("EndPoint 是用来实现 TCP/IP 协议")]),s._v("的.")]),s._v(" "),t("p",[s._v("EndPoint 是一个接口, 对应的抽象实现类是 AbstractEndpoint, 而 AbstractEndpoint 的具体子类, 比如在 NioEndpoint 和 Nio2Endpoint 中, 有两个重要的子组件: "),t("strong",[s._v("Acceptor 和 SocketProcessor")]),s._v(".")]),s._v(" "),t("p",[s._v("其中 Acceptor 用于监听 Socket 连接请求. SocketProcessor 用于处理接收到的 Socket 请求, 它实现 Runnable 接口, 在 Run 方法里调用协议处理组件 Processor 进行处理. 为了提高处理能力, SocketProcessor 被提交到线程池来执行. 而这个线程池叫作执行器(Executor), 后面会详细介绍 Tomcat 如何扩展原生的 Java 线程池.")]),s._v(" "),t("p",[t("strong",[s._v("(2)Processor")])]),s._v(" "),t("p",[s._v("如果说 EndPoint 是用来实现 TCP/IP 协议的, 那么 "),t("strong",[s._v("Processor 用来实现 HTTP 协议")]),s._v(", Processor 接收来自 EndPoint 的 Socket, 读取字节流解析成 Tomcat Request 和 Response 对象, 并通过 Adapter 将其提交到容器处理, Processor 是对应用层协议的抽象.")]),s._v(" "),t("p",[s._v("Processor 是一个接口, 定义了请求的处理等方法. 它的抽象实现类 AbstractProcessor 对一些协议共有的属性进行封装, 没有对方法进行实现. 具体的实现有 AJPProcessor, HTTP11Processor 等, 这些具体实现类实现了特定协议的解析方法和请求处理方式.")]),s._v(" "),t("p",[s._v("再来看看连接器的组件图:")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405160951-uuujwdk.jpg",alt:""}})]),s._v(" "),t("p",[s._v("从图中看到, "),t("strong",[s._v("EndPoint 接收到 Socket 连接后, 生成一个 SocketProcessor 任务提交到线程池去处理, SocketProcessor 的 Run 方法会调用 Processor 组件去解析应用层协议, Processor 通过解析生成 Request 对象后, 会调用 Adapter 的 Service 方法")]),s._v(".")]),s._v(" "),t("h6",{attrs:{id:"_2-adapter组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-adapter组件"}},[s._v("#")]),s._v(" 2.Adapter组件")]),s._v(" "),t("p",[s._v("由于协议不同, 客户端发过来的请求信息也不尽相同, Tomcat 定义了自己的 "),t("strong",[s._v("Request")]),s._v(" 类来“存放”这些请求信息. "),t("strong",[s._v("ProtocolHandler 接口负责解析请求并生成 Tomcat Request 类. ** 但是这个 Request 对象不是标准的 ServletRequest, 也就意味着, 不能用 Tomcat Request 作为参数来调用容器. Tomcat 设计者的解决方案是")]),s._v("引入 CoyoteAdapter, 这是适配器模式的经典运用, 连接器调用 CoyoteAdapter 的 Sevice 方法, 传入的是 Tomcat Request 对象, CoyoteAdapter 负责将 Tomcat Request 转成 ServletRequest, 再调用容器的 Service 方法**.")]),s._v(" "),t("h5",{attrs:{id:"容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#容器"}},[s._v("#")]),s._v(" 容器")]),s._v(" "),t("p",[s._v("前面提到 Tomcat 有两个核心组件: "),t("strong",[s._v("连接器和容器")]),s._v(", 其中连接器负责外部交流, 容器负责内部处理. 具体来说就是, 连接器处理 Socket 通信和应用层协议的解析, 得到 Servlet 请求; 而容器则负责处理 Servlet 请求.")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405161017-eu8rf7s.jpg",alt:""}})]),s._v(" "),t("p",[s._v("这里分析一下容器. 容器顾名思义就是用来装载东西的器具, "),t("strong",[s._v("在 Tomcat 里, 容器就是用来装载 Servlet 的")]),s._v(". 那 Tomcat 的 Servlet 容器是如何设计的呢?")]),s._v(" "),t("h6",{attrs:{id:"_1-容器的层次结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-容器的层次结构"}},[s._v("#")]),s._v(" 1.容器的层次结构")]),s._v(" "),t("p",[s._v("Tomcat 设计了 4 种容器, 分别是 "),t("strong",[s._v("Engine, Host, Context 和 Wrapper")]),s._v(". 这 4 种容器不是平行关系, 而是"),t("strong",[s._v("父子关系")]),s._v(". 下面它们的关系.")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405161017-jslu79o.jpg",alt:""}})]),s._v(" "),t("p",[s._v("为什么要设计成这么多层次的容器, 这不是增加了复杂度吗? 这样 **Tomcat 通过一种分层的架构, 使得 Servlet 容器具有很好的灵活性. **")]),s._v(" "),t("p",[t("strong",[s._v("Context 表示一个 Web 应用程序; Wrapper 表示一个 Servlet, 一个 Web 应用程序中可能会有多个 Servlet; Host 代表的是一个虚拟主机, 或者说一个站点, 可以给 Tomcat 配置多个虚拟主机地址, 而一个虚拟主机下可以部署多个 Web 应用程序; Engine 表示引擎, 用来管理多个虚拟站点, 一个 Service 最多只能有一个 Engine")]),s._v(".")]),s._v(" "),t("p",[s._v("可以再通过 Tomcat 的 server.xml 配置文件来加深对 Tomcat 容器的理解. Tomcat 采用了组件化的设计, 它的构成组件都是可配置的, 其中最外层的是 Server, 其他组件按照一定的格式要求配置在这个顶层容器中.")]),s._v(" "),t("div",{staticClass:"language-xml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("Server")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("                       // 顶层组件, 可以包含多个Service\n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("Service")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("                  // 顶层组件, 可以包含一个Engine, 多个连接器 \n        "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("Connector")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("            // 连机器组件, 代表通信接口\n        "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("Connector")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("    \n        "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("Engine")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("               // 容器组件, 一个Engine组件处理Service中的所有请求, 包含多个Host\n            "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("Host")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("             // 容器组件, 处理特定的Host下的客户请求, 可包含多个Context\n                "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("Context")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("      // 容器组件, 为特定的Web应用处理所有的客户请求\n                "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("Context")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("Host")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("Engine")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("Service")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("Server")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("p",[s._v("那么, Tomcat 是怎么管理这些容器的呢? 你会发现这些容器具有"),t("strong",[s._v("父子关系, 形成一个树形结构")]),s._v(", 你可能马上就想到了设计模式中的"),t("strong",[s._v("组合模式")]),s._v(". 没错, "),t("strong",[s._v("Tomcat 就是用组合模式来管理这些容器的")]),s._v(". 具体实现方法是, "),t("strong",[s._v("所有容器组件都实现了 Container 接口, 因此组合模式可以使得用户对单容器对象和组合容器对象的使用具有一致性")]),s._v(". 这里单容器对象指的是最底层的 Wrapper, 组合容器对象指的是上面的 Context, Host 或者 Engine.")]),s._v(" "),t("p",[t("strong",[s._v("Container 接口")]),s._v("定义如下:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Container")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Lifecycle")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Container")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getParent")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setParent")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Container")]),s._v(" container"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("addChild")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Container")]),s._v(" child"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("removeChild")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Container")]),s._v(" child"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Container")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("findChild")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("为了实现父子关系, "),t("strong",[s._v("Container 接口有")]),s._v(" getParent, SetParent, addChild 和 removeChild 等方法. Container 接口还扩展了 LifeCycle 接口, LifeCycle 接口用来统一管理各组件的生命周期, 后面会详细介绍.")]),s._v(" "),t("h6",{attrs:{id:"_2-请求定位servlet的过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-请求定位servlet的过程"}},[s._v("#")]),s._v(" 2.请求定位Servlet的过程")]),s._v(" "),t("p",[s._v("既然设计了这么多层次的容器, Tomcat 是怎么确定请求是由哪个 Wrapper 容器里的 Servlet 来处理的呢? 答案是, Tomcat 是用 "),t("strong",[s._v("Mapper 组件")]),s._v("来完成这个任务的.")]),s._v(" "),t("p",[s._v("Mapper 组件的功能就是将用户请求的 URL 定位到一个 Servlet, 它的工作原理是: Mapper 组件里保存了 Web 应用的配置信息, 其实就是"),t("strong",[s._v("容器组件与访问路径的映射关系")]),s._v(", 比如 Host 容器里配置的域名, Context 容器里的 Web 应用路径, 以及 Wrapper 容器里 Servlet 映射的路径, 可以想象这些配置信息就是一个"),t("strong",[s._v("多层次的 Map")]),s._v(".")]),s._v(" "),t("p",[s._v("当一个请求到来时, Mapper 组件通过解析请求 URL 里的域名和路径, 再到自己保存的 Map 里去查找, 就能定位到一个 Servlet. 注意, "),t("strong",[s._v("一个请求 URL 最后只会定位到一个 Wrapper 容器, 也就是一个 Servlet")]),s._v(".")]),s._v(" "),t("p",[s._v("下面通过一个例子来解释这个定位的过程.")]),s._v(" "),t("p",[s._v("假如有一个网购系统, 有面向网站管理人员的后台管理系统, 还有面向终端客户的在线购物系统. 这两个系统跑在同一个 Tomcat 上, 为了隔离它们的访问域名, 配置了两个虚拟域名: "),t("code",[s._v("manage.shopping.com")]),s._v("​ 和 "),t("code",[s._v("user.shopping.com")]),s._v("​, 网站管理人员通过 "),t("code",[s._v("manage.shopping.com")]),s._v("​ 域名访问 Tomcat 去管理用户和商品, 而用户管理和商品管理是两个单独的 Web 应用. 终端客户通过 "),t("code",[s._v("user.shopping.com")]),s._v("​ 域名去搜索商品和下订单, 搜索功能和订单管理也是"),t("strong",[s._v("两个独立的 Web 应用")]),s._v(".")]),s._v(" "),t("p",[s._v("针对这样的部署, Tomcat 会"),t("strong",[s._v("创建一个 Service 组件和一个 Engine 容器组件, 在 Engine 容器下创建两个 Host 子容器, 在每个 Host 容器下创建两个 Context 子容器. 由于一个 Web 应用通常有多个 Servlet, Tomcat 还会在每个 Context 容器里创建多个 Wrapper 子容器")]),s._v(". 每个容器都有对应的访问路径, 如下图所示.")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405161017-4f2wapf.jpg",alt:""}})]),s._v(" "),t("p",[s._v("假如有用户访问一个 URL, 比如图中的 "),t("code",[s._v("http://user.shopping.com:8080/order/buy")]),s._v("​, Tomcat 将这个 URL 定位到一个 Servlet 的过程如下:")]),s._v(" "),t("p",[s._v("**首先, 根据协议和端口号选定 Service 和 Engine. **")]),s._v(" "),t("p",[s._v("Tomcat 的"),t("strong",[s._v("每个连接器都监听不同的端口")]),s._v(", 比如 Tomcat 默认的 HTTP 连接器监听 8080 端口, 默认的 AJP 连接器监听 8009 端口. 上面例子中的 URL 访问的是 8080 端口, 因此"),t("strong",[s._v("这个请求会被 HTTP 连接器接收")]),s._v(", 而一个连接器是属于一个 Service 组件的, 这样 "),t("strong",[s._v("Service 组件")]),s._v("就确定了. 一个 Service 组件里除了有多个连接器, 还有一个容器组件, 具体来说就是一个 Engine 容器, 因此 Service 确定了也就意味着 Engine 也确定了.")]),s._v(" "),t("p",[s._v("**然后, 根据域名选定 Host. **")]),s._v(" "),t("p",[s._v("Service 和 Engine 确定后, Mapper 组件通过 URL 中的域名去查找相应的 Host 容器, 比如例子中的 URL 访问的域名是 "),t("code",[s._v("user.shopping.com")]),s._v("​, 因此 Mapper 会找到 Host2 这个容器.")]),s._v(" "),t("p",[s._v("**之后, 根据 URL 路径找到 Context 组件. **")]),s._v(" "),t("p",[s._v("Host 确定以后, Mapper 根据 URL 的路径来匹配相应的 Web 应用的路径, 比如例子中访问的是 /order, 因此找到了 "),t("strong",[s._v("Context4")]),s._v(" 这个 Context 容器.")]),s._v(" "),t("p",[s._v("**最后, 根据 URL 路径找到 Wrapper(Servlet). **")]),s._v(" "),t("p",[s._v("Context 确定后, Mapper 再根据 web.xml 中配置的 Servlet 映射路径来找到具体的 Wrapper 和 Servlet.")]),s._v(" "),t("p",[s._v("到这里应该已经了解了什么是容器, 以及 Tomcat 如何通过一层一层的父子容器找到某个 Servlet 来处理请求. 需要注意的是, 并不是说只有 Servlet 才会去处理请求, 实际上这个查找路径上的父子容器都会对请求做一些处理. 前面说过, 连接器中的 Adapter 会调用容器的 Service 方法来执行 Servlet, 最先拿到请求的是 Engine 容器, Engine 容器对请求做一些处理后, 会把请求传给自己子容器 Host 继续处理, 依次类推, 最后这个请求会传给 Wrapper 容器, Wrapper 会调用最终的 Servlet 来处理. 那么这个调用过程具体是怎么实现的呢? 答案是使用 "),t("strong",[s._v("Pipeline-Valve 管道")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("Pipeline-Valve 是责任链模式")]),s._v(", 责任链模式是指在一个请求处理的过程中有很多处理者依次对请求进行处理, 每个处理者负责做自己相应的处理, 处理完之后将再调用下一个处理者继续处理.")]),s._v(" "),t("p",[t("strong",[s._v("Valve 表示一个处理点")]),s._v(", 比如权限认证和记录日志. 可以来看看 "),t("strong",[s._v("Valve 和 Pipeline 接口")]),s._v("中的关键方法.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Valve")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Valve")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getNext")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setNext")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Valve")]),s._v(" valve"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("invoke")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Request")]),s._v(" request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Response")]),s._v(" response"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("由于 Valve 是一个处理点, 因此 invoke 方法就是来"),t("strong",[s._v("处理请求")]),s._v("的. 注意到 Valve 中有 getNext 和 setNext 方法, 因此大概可以猜到有一个链表将 Valve 链起来了.")]),s._v(" "),t("p",[s._v("继续看 Pipeline 接口:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Pipeline")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Contained")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("addValve")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Valve")]),s._v(" valve"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Valve")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getBasic")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setBasic")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Valve")]),s._v(" valve"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Valve")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getFirst")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("没错, Pipeline 中有 addValve() 方法. "),t("strong",[s._v("Pipeline 中维护了 Valve 链表")]),s._v(", Valve 可以插入到 Pipeline 中, 对请求做某些处理. 还可以发现 Pipeline 中没有 invoke 方法, 因为"),t("strong",[s._v("整个调用链的触发是 Valve 来完成的, Valve 完成自己的处理后, 调用 getNext.invoke() 来触发下一个 Valve 调用")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("每一个容器都有一个 Pipeline 对象, 只要触发这个 Pipeline 的第一个 Valve, 这个容器里 Pipeline 中的 Valve 就都会被调用到")]),s._v(". 但是, 不同容器的 Pipeline 是怎么链式触发的呢, 比如 Engine 中 Pipeline 需要调用下层容器 Host 中的 Pipeline.")]),s._v(" "),t("p",[s._v("这是因为 Pipeline 中还有个 getBasic() 方法. 这个 BasicValve 处于 Valve 链表的"),t("strong",[s._v("末端")]),s._v(", 它是 Pipeline 中必不可少的一个 Valve, 负责调用下层容器的 Pipeline 里的第一个 Valve. 整个流程如下图所示.")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405161017-4comhnb.jpg",alt:""}})]),s._v(" "),t("p",[s._v("**整个调用过程由连接器中的 Adapter 触发的, 它会调用 Engine 的第一个 Valve: **")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Calling the container")]),s._v("\nconnector"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getService")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getContainer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getPipeline")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getFirst")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("invoke")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" response"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("Wrapper 容器的最后一个 Valve 会创建一个 Filter 链, 并调用 doFilter() 方法, 最终会调到 Servlet 的 service() 方法.")]),s._v(" "),t("p",[s._v("你可能会问, 前面不是讲到了 Filter, 似乎也有相似的功能, 那 Valve 和 Filter 有什么区别吗? 它们的区别是:")]),s._v(" "),t("ul",[t("li",[s._v("**Valve 是 Tomcat 的私有机制, 与 Tomcat 的基础架构 /API 是紧耦合的. Servlet API 是公有的标准, 所有的 Web 容器包括 Jetty 都支持 Filter 机制. **")]),s._v(" "),t("li",[s._v("**另一个重要的区别是 Valve 工作在 Web 容器级别, 拦截所有应用的请求; 而 Servlet Filter 工作在应用级别, 只能拦截某个 Web 应用的所有请求. 如果想做整个 Web 容器的拦截器, 必须通过 Valve 来实现. **")])]),s._v(" "),t("p",[s._v("请求的链式调用是基于 Pipeline-Valve 责任链来完成的, 这样的设计使得系统具有良好的可扩展性, 如果需要扩展容器本身的功能, 只需要增加相应的 Valve 即可.")]),s._v(" "),t("h4",{attrs:{id:"_5-tomcat如何实现一键式启停"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-tomcat如何实现一键式启停"}},[s._v("#")]),s._v(" 5.Tomcat如何实现一键式启停?")]),s._v(" "),t("p",[s._v("下面通过一张简化的类图来回顾一下 Tomcat 的基本架构, 看到各种组件的层次关系, 图中的"),t("strong",[s._v("虚线表示一个请求在 Tomcat 中流转的过程")]),s._v(".")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405161039-3vw9z54.png",alt:""}})]),s._v(" "),t("p",[s._v("上面这张图描述了组件之间的静态关系, 如果想让一个系统能够对外提供服务, 需要创建, 组装并启动这些组件; 在服务停止的时候, 我们还需要释放资源, 销毁这些组件, 因此这是一个动态的过程. 也就是说, "),t("strong",[s._v("Tomcat 需要动态地管理这些组件的生命周期")]),s._v(".")]),s._v(" "),t("p",[s._v("如果你需要设计一个比较大的系统或者框架时, 同样也需要考虑这几个问题: **如何统一管理组件的创建, 初始化, 启动, 停止和销毁? 如何做到代码逻辑清晰? 如何方便地添加或者删除组件? 如何做到组件启动和停止不遗漏, 不重复? **")]),s._v(" "),t("p",[s._v("下面就来解决上面的问题. 先来看看组件之间的关系, 仔细观测可以发现这些组件具有两层关系.")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("第一层关系是组件有大有小")]),s._v(", 大组件管理小组件, 比如 Server 管理 Service, Service 又管理连接器和容器.")]),s._v(" "),t("li",[t("strong",[s._v("第二层关系是组件有外有内")]),s._v(", 外层组件控制内层组件, 比如连接器是外层组件, 负责对外交流, 外层组件调用内层组件完成业务功能. 也就是说, **请求的处理过程是由外层组件来驱动的. **")])]),s._v(" "),t("p",[s._v("这两层关系决定了系统在创建组件时应该遵循一定的顺序.")]),s._v(" "),t("ul",[t("li",[s._v('第一个原则是先创建子组件, 再创建父组件, 子组件需要被"注入"到父组件中.')]),s._v(" "),t("li",[s._v('第二个原则是先创建内层组件, 再创建外层组件, 内层组建需要被"注入"到外层组件.')])]),s._v(" "),t("p",[s._v("因此, 最直观的做法就是将图上所有的组件按照先小后大, 先内后外的顺序创建出来, 然后组装在一起. 不知道你注意到没有, 这个思路其实很有问题! 因为这样不仅会造成代码逻辑混乱和组件遗漏, 而且也不利于后期的功能扩展.")]),s._v(" "),t("p",[s._v('为了解决这个问题, 希望找到一种通用的, 统一的方法来管理组件的生命周期, 就像汽车"一键启动"那样的效果.')]),s._v(" "),t("h5",{attrs:{id:"一键式启停-lifecycle接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一键式启停-lifecycle接口"}},[s._v("#")]),s._v(" 一键式启停:LifeCycle接口")]),s._v(" "),t("p",[t("strong",[s._v("设计就是要找到系统的变化点和不变点")]),s._v(". 这里的"),t("strong",[s._v("不变点就是每个组件都要经历创建, 初始化, 启动这几个过程, 这些状态以及状态的转化是不变的")]),s._v(". 而变化点是每个具体组件的初始化方法, 也就是启动方法是不一样的.")]),s._v(" "),t("p",[s._v("因此可以把不变点抽象出来成为一个接口, 这个接口跟生命周期有关, 叫作 "),t("strong",[s._v("LifeCycle")]),s._v(". LifeCycle 接口里应该定义这么几个方法: init(), start(), stop() 和 destroy(), 每个具体的组件去实现这些方法, 做到方法的不一样.")]),s._v(" "),t("p",[s._v("理所当然, 在父组件的 init() 方法里需要创建子组件并调用子组件的 init() 方法. 同样, 在父组件的 start() 方法里也需要调用子组件的 start() 方法, 因此调用者可以无差别的调用各组件的 init() 方法和 start() 方法, 这就是"),t("strong",[s._v("组合模式")]),s._v("的使用, 并且只要调用最顶层组件, 也就是 Server 组件的 init() 和 start() 方法, 整个 Tomcat 就被启动起来了. 下面是 LifeCycle 接口的定义.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Lifecycle")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("init")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("start")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("stop")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("destroy")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("h5",{attrs:{id:"可扩展性-lifecycle事件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可扩展性-lifecycle事件"}},[s._v("#")]),s._v(" 可扩展性:LifeCycle事件")]),s._v(" "),t("p",[s._v("再来考虑另一个问题, 那就是系统的"),t("strong",[s._v("可扩展性")]),s._v(". 因为各个组件 init() 和 start() 方法的具体实现是复杂多变的, 比如在 Host 容器的启动方法里需要扫描 webapps 目录下的 Web 应用, 创建相应的 Context 容器, 如果将来需要增加新的逻辑, 直接修改 start() 方法? 这样会违反开闭原则, 那如何解决这个问题呢? 开闭原则说的是为了扩展系统的功能, 不能直接修改系统中已有的类, 但是可以定义新的类.")]),s._v(" "),t("p",[s._v("我们注意到, 组件的 init() 和 start() 调用是由它的父组件的状态变化触发的, 上层组件的初始化会触发子组件的初始化, 上层组件的启动会触发子组件的启动, 因此可以把"),t("strong",[s._v("组件的生命周期定义成一个个状态, 把状态的转变看作是一个事件")]),s._v(". 而事件是有监听器的, 在监听器里可以实现一些逻辑, 并且监听器也可以方便的添加和删除, 这就是典型的"),t("strong",[s._v("观察者模式")]),s._v(".")]),s._v(" "),t("p",[s._v("具体来说就是在 LifeCycle 接口里加入两个方法: "),t("strong",[s._v("添加监听器和删除监听器")]),s._v(". 除此之外, 还需要定义一个 Enum 来表示"),t("strong",[s._v("组件有哪些状态")]),s._v(", 以及处在什么状态会触发什么样的事件. 因此 "),t("strong",[s._v("LifeCycle 接口和 LifeCycleState 枚举")]),s._v("就定义成了下面这样.")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405161039-r9xwme8.png",alt:""}})]),s._v(" "),t("p",[s._v("可以看到组件的生命周期有 NEW, INITIALIZING, INITIALIZED, STARTING_PREP, STARTING, STARTED 等, 而一旦组件到达相应的状态就"),t("strong",[s._v("触发相应的事件")]),s._v(", 比如 NEW 状态表示组件刚刚被实例化; 而当 init() 方法被调用时, 状态就变成 INITIALIZING 状态, 这个时候就会触发 BEFORE_INIT_EVENT 事件, 如果有监听器在监听这个事件, 它的方法就会被调用.")]),s._v(" "),t("h5",{attrs:{id:"重用性-lifecyclebase抽象基类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重用性-lifecyclebase抽象基类"}},[s._v("#")]),s._v(" 重用性:LifeCycleBase抽象基类")]),s._v(" "),t("p",[s._v("有了接口就要用类去实现接口. 一般来说实现类不止一个, 不同的类在实现接口时往往会有一些相同的逻辑, 如果让各个子类都去实现一遍, 就会有重复代码. "),t("strong",[s._v("那子类如何重用这部分逻辑呢? 其实就是定义一个基类来实现共同的逻辑, 然后让各个子类去继承它, 就达到了重用的目的")]),s._v(".")]),s._v(" "),t("p",[s._v("**而基类中往往会定义一些抽象方法, 所谓的抽象方法就是说基类不会去实现这些方法, 而是调用这些方法来实现骨架逻辑. 抽象方法是留给各个子类去实现的, 并且子类必须实现, 否则无法实例化. **")]),s._v(" "),t("p",[s._v("比如宝马和荣威的底盘和骨架其实是一样的, 只是发动机和内饰等配套是不一样的. 底盘和骨架就是基类, 宝马和荣威就是子类. 仅仅有底盘和骨架还不是一辆真正意义上的车, 只能算是半成品, 因此在底盘和骨架上会留出一些安装接口, 比如安装发动机的接口, 安装座椅的接口, 这些就是抽象方法. 宝马或者荣威上安装的发动机和座椅是不一样的, 也就是具体子类对抽象方法有不同的实现.")]),s._v(" "),t("p",[s._v("回到 LifeCycle 接口, "),t("strong",[s._v("Tomcat 定义了一个基类 LifeCycleBase 来实现 LifeCycle 接口, 把一些公共的逻辑放到基类中去, 比如生命状态的转变与维护, 生命事件的触发以及监听器的添加和删除等, 而子类就负责实现自己的初始化, 启动和停止等方法")]),s._v(". 为了避免跟基类中的方法同名, 这里把具体子类的实现方法改个名字, 在后面加上 Internal, 叫 initInternal(), startInternal() 等. 再来看引入了基类 LifeCycleBase 后的类图:")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405161039-vxv9018.png",alt:""}})]),s._v(" "),t("p",[s._v("从图上可以看到, LifeCycleBase 实现了 LifeCycle 接口中所有的方法, 还定义了相应的抽象方法交给具体子类去实现, 这是典型的"),t("strong",[s._v("模板设计模式")]),s._v(".")]),s._v(" "),t("p",[s._v("还是看一看代码, 下面是 LifeCycleBase 的 init() 方法实现.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("init")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LifecycleException")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//1. 状态检查")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("state"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("equals")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LifecycleState")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("NEW")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("invalidTransition")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Lifecycle")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("BEFORE_INIT_EVENT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//2. 触发 INITIALIZING 事件的监听器")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setStateInternal")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LifecycleState")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("INITIALIZING")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//3. 调用具体子类的初始化方法")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("initInternal")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//4. 触发 INITIALIZED 事件的监听器")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setStateInternal")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LifecycleState")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("INITIALIZED")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Throwable")]),s._v(" t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br")])]),t("p",[s._v("这个方法逻辑比较清楚, 主要完成了四步:")]),s._v(" "),t("p",[s._v("第一步, 检查状态的合法性, 比如当前状态必须是 NEW 然后才能进行初始化.")]),s._v(" "),t("p",[s._v("第二步, 触发 INITIALIZING 事件的监听器:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setStateInternal")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LifecycleState")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("INITIALIZING")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("在这个 setStateInternal() 方法里, 会调用监听器的业务方法.")]),s._v(" "),t("p",[s._v("第三步, 调用具体子类实现的抽象方法 initInternal() 方法. 前面提到过, 为了实现一键式启动, 具体组件在实现 initInternal() 方法时, 又会"),t("strong",[s._v("调用它的子组件的 init() 方法")]),s._v(".")]),s._v(" "),t("p",[s._v("第四步, 子组件初始化后, 触发 INITIALIZED 事件的监听器, 相应监听器的业务方法就会被调用.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setStateInternal")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LifecycleState")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("INITIALIZED")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("总之, "),t("strong",[s._v("LifeCycleBase 调用了抽象方法来实现骨架逻辑")]),s._v(".")]),s._v(" "),t("p",[s._v("既然 LifeCycleBase 负责触发事件, 并调用监听器的方法, 那是什么时候, 谁把监听器注册进来的呢?")]),s._v(" "),t("p",[s._v("分为两种情况:")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("Tomcat 自定义了一些监听器")]),s._v(", 这些监听器是父组件在创建子组件的过程中注册到子组件的. 比如 MemoryLeakTrackingListener 监听器, 用来检测 Context 容器中的内存泄漏, 这个监听器是 Host 容器在创建 Context 容器时注册到 Context 中的.")]),s._v(" "),t("li",[s._v("还可以在 server.xml 中定义自己的监听器, Tomcat 在启动时会解析 server.xml, 创建监听器并注册到容器组件.")])]),s._v(" "),t("h5",{attrs:{id:"生周期管理总体类图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#生周期管理总体类图"}},[s._v("#")]),s._v(" 生周期管理总体类图")]),s._v(" "),t("p",[s._v("总结一下 Tomcat 组件的生命周期的管理, 再来看一张总体类图继续加深印象.")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405161039-ucf2yi3.png",alt:""}})]),s._v(" "),t("p",[s._v("注意, 图中的 "),t("strong",[s._v("StandardServer, StandardService")]),s._v(" 等是 Server 和 Service 组件的"),t("strong",[s._v("具体实现类")]),s._v(", 它们都继承了 LifeCycleBase 类.")]),s._v(" "),t("p",[t("strong",[s._v("StandardEngine, StandardHost, StandardContext 和 StandardWrapper")]),s._v(" 是相应容器组件的具体实现类, 因为它们都是容器, 所以继承了 ContainerBase 抽象基类, 而 ContainerBase 实现了 Container 接口, 也继承了 LifeCycleBase 类, 它们的生命周期管理接口和功能接口是分开的, 这也符合设计中"),t("strong",[s._v("接口分离的原则")]),s._v(".")]),s._v(" "),t("p",[s._v("Tomcat 为了实现一键式启停以及优雅的生命周期管理, 并考虑到了可扩展性和可重用性, 将面向对象思想和设计模式发挥到了极致, 分别运用了"),t("strong",[s._v("组合模式, 观察者模式, 骨架抽象类和模板方法")]),s._v(". 如果你需要维护一堆具有父子关系的实体, 可以考虑使用组合模式. 观察者模式听起来“高大上”, 其实就是当一个事件发生后, 需要执行一连串更新操作. 传统的实现方式是在事件响应代码里直接加更新逻辑, 当更新逻辑加多了之后, 代码会变得臃肿, 并且这种方式是紧耦合的, 侵入式的. 而观察者模式实现了低耦合, 非侵入式的通知与更新机制. 而模板方法在抽象基类中经常用到, 用来实现通用逻辑.")]),s._v(" "),t("h4",{attrs:{id:"_8-tomcat的-高层们-都负责做什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-tomcat的-高层们-都负责做什么"}},[s._v("#")]),s._v(' 8.Tomcat的"高层们"都负责做什么?')]),s._v(" "),t("p",[s._v("通过 Tomcat 的 /bin 目录下的脚本 startup.sh 可以启动 Tomcat, 执行了这个脚本后发生了什么? 可以通过下面这张流程图来了解一下.")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405161100-ut6smnd.png",alt:""}})]),s._v(" "),t("p",[s._v("1.Tomcat 本质上是一个 Java 程序, 因此 startup.sh 脚本会"),t("strong",[s._v("启动一个 JVM 来运行 Tomcat 的启动类 Bootstrap")]),s._v(".")]),s._v(" "),t("p",[s._v("2.Bootstrap 的主要任务是"),t("strong",[s._v("初始化 Tomcat 的类加载器, 并且创建 Catalina")]),s._v(". 关于 Tomcat 为什么需要自己的类加载器, 后面会详细介绍.")]),s._v(" "),t("p",[s._v("3."),t("strong",[s._v("Catalina 是一个启动类, 它通过解析 server.xml, 创建相应的组件, 并调用 Server 的 start() 方法")]),s._v(".")]),s._v(" "),t("p",[s._v("4.Server 组件的职责就是"),t("strong",[s._v("管理 Service 组件, 它会负责调用 Service 的 start() 方法")]),s._v(".")]),s._v(" "),t("p",[s._v("5.Service 组件的职责就是"),t("strong",[s._v("管理连接器和顶层容器 Engine, 因此它会调用连接器和 Engine 的 start() 方法")]),s._v(".")]),s._v(" "),t("p",[s._v("这样 Tomcat 的启动就算完成了. 下面详细介绍一下上面这个启动过程中提到的几个非常关键的启动类和组件.")]),s._v(" "),t("p",[s._v("可以把 Bootstrap 看作是上帝, 它初始化了类加载器, 也就是创造万物的工具.")]),s._v(" "),t("p",[s._v("如果把 Tomcat 比作是一家公司, 那么 Catalina 应该是公司创始人, 因为 Catalina 负责组建团队, 也就是创建 Server 以及它的子组件.")]),s._v(" "),t("p",[s._v("Server 是公司的 CEO, 负责管理多个事业群, 每个事业群就是一个 Service.")]),s._v(" "),t("p",[s._v("Service 是事业群总经理, 它管理两个职能部门: 一个是对外的市场部, 也就是连接器组件; 另一个是对内的研发部, 也就是容器组件.")]),s._v(" "),t("p",[s._v("Engine 则是研发部经理, 因为 Engine 是最顶层的容器组件.")]),s._v(" "),t("p",[s._v("可以看到"),t("strong",[s._v("这些启动类或者组件不处理具体请求")]),s._v(', 它们的任务主要是"管理", '),t("strong",[s._v('管理下层组件的生命周期, 并且给下层组件分配任务, 也就是把请求路由到负责"干活儿"的组件. 因此把它们比作 Tomcat 的"高层"')]),s._v(" .")]),s._v(" "),t("p",[s._v("下面来看看这些 "),t("strong",[s._v('"高层"')]),s._v(" 的实现细节, 进而逐步理解 Tomcat 的工作原理. 另一方面, 软件系统中往往都有一些起管理作用的组件, 可以学习和借鉴 Tomcat 是如何实现这些组件的.")]),s._v(" "),t("h5",{attrs:{id:"catalina"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#catalina"}},[s._v("#")]),s._v(" Catalina")]),s._v(" "),t("p",[s._v("Catalina 的主要任务就是"),t("strong",[s._v("创建 Server")]),s._v(', 它不是直接 new 一个 Server 实例就完事了, 而是需要解析 server.xml, 把在 server.xml 里配置的各种组件一一创建出来, 接着调用 Server 组件的 init() 方法和 start() 方法, 这样整个 Tomcat 就启动起来了. 作为"管理者", Catalina 还需要处理各种"异常"情况, 比如当通过 "Ctrl + C" 关闭 Tomcat 时, Tomcat 将如何优雅的停止并且清理资源呢? 因此 Catalina 在 JVM 中注册一个 "关闭钩子".')]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("start")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//1. 如果持有的 Server 实例为空, 就解析 server.xml 创建出来")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getServer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("mark"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("load")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//2. 如果创建失败, 报错退出")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getServer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("mark"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        log"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("fatal")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sm"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getString")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"catalina.noServer"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//3. 启动 Server")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getServer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("start")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LifecycleException")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 创建并注册关闭钩子")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("useShutdownHook"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("shutdownHook "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            shutdownHook "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CatalinaShutdownHook")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Runtime")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getRuntime")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("addShutdownHook")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("shutdownHook"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 用 await 方法监听停止请求")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("await"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("await")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("stop")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br")])]),t("p",[s._v('什么是"关闭钩子"? 如果需要在 '),t("strong",[s._v("JVM 关闭时做一些清理工作")]),s._v(', 比如将缓存数据刷到磁盘上, 或者清理一些临时文件, 可以向 JVM 注册一个"关闭钩子". "关闭钩子" 其实就是一个线程, JVM 在停止之前会尝试执行这个线程的 run() 方法. 下面来看看 Tomcat 的 "关闭钩子" CatalinaShutdownHook 做了些什么.')]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CatalinaShutdownHook")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("run")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getServer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Catalina")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("stop")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Throwable")]),s._v(" ex"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n           "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("p",[s._v("可以看出 Tomcat 的  "),t("strong",[s._v('"关闭钩子" 实际上就执行了 Server 的 stop() 方法, Server 的 stop() 方法会释放和清理所有的资源')]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"server组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#server组件"}},[s._v("#")]),s._v(" Server组件")]),s._v(" "),t("p",[s._v("Server 组件的具体实现类是 "),t("strong",[s._v("StandardServer")]),s._v(", 来看下 StandardServer 具体实现了哪些功能. Server 继承了 "),t("strong",[s._v("LifeCycleBase")]),s._v(", 它的生命周期被统一管理, 并且它的子组件是 Service, 因此它还需要管理 Service 的生命周期, 也就是说在启动时调用 Service 组件的启动方法, 在停止时调用它们的停止方法. "),t("strong",[s._v("Server 在内部维护了若干 Service 组件")]),s._v(", 它是以数组来保存的, 那 Server 是如何添加一个 Service 到数组中的呢?")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("addService")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Service")]),s._v(" service"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n    service"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setServer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("servicesLock"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 创建一个长度 +1 的新数组")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Service")]),s._v(" results"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Service")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("services"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 将老的数据复制过去")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("arraycopy")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("services"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" results"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" services"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        results"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("services"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" service"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        services "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" results"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 启动 Service 组件")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getState")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isAvailable")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                service"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("start")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LifecycleException")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Ignore")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 触发监听事件")]),s._v("\n        support"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("firePropertyChange")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"service"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" service"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br")])]),t("p",[s._v("从上面的代码可以看出, 它并没有一开始就分配一个很长的数组, 而是"),t("strong",[s._v("在添加的过程中动态地扩展数组长度")]),s._v(", 当添加一个新的 Service 实例时, 会"),t("strong",[s._v("创建一个新数组并把原来数组内容复制到新数组")]),s._v(", 这样做的目的其实是为了节省内存空间.")]),s._v(" "),t("p",[s._v("除此之外, Server 组件还有一个重要的任务是启动一个 Socket 来监听停止端口, 这就是为什么你能通过 shutdown 命令来关闭 Tomcat. 不知道你留意到没有, 上面 Caralina 的启动方法的最后一行代码就是调用了 Server 的 await() 方法. 在 await() 方法里会创建一个 Socket 监听 8005 端口, 并在一个死循环里"),t("strong",[s._v("接收 Socket 上的连接请求")]),s._v(', 如果有新的连接到来就建立连接, 然后从 Socket 中读取数据; 如果读到的数据是停止命令 "SHUTDOWN", 就退出循环, 进入 stop 流程.')]),s._v(" "),t("h5",{attrs:{id:"service组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#service组件"}},[s._v("#")]),s._v(" Service组件")]),s._v(" "),t("p",[s._v("Service 组件的具体实现类是 "),t("strong",[s._v("StandardService")]),s._v(", 先来看看它的定义以及关键的成员变量.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StandardService")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LifecycleBase")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Service")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 名字")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//Server 实例")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Server")]),s._v(" server "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 连接器数组")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Connector")]),s._v(" connectors"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Connector")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" connectorsLock "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 对应的 Engine 容器")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Engine")]),s._v(" engine "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 映射器及其监听器")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Mapper")]),s._v(" mapper "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Mapper")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MapperListener")]),s._v(" mapperListener "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MapperListener")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br")])]),t("p",[s._v("StandardService 继承了 LifecycleBase 抽象类, 此外 StandardService 中还有一些熟悉的组件, 比如 Server, Connector, Engine 和 Mapper.")]),s._v(" "),t("p",[s._v("那为什么还有一个 "),t("strong",[s._v("MapperListener")]),s._v("? 这是因为 Tomcat 支持热部署, 当 Web 应用的部署发生变化时, Mapper 中的映射信息也要跟着变化, "),t("strong",[s._v("MapperListener 就是一个监听器, 它监听容器的变化, 并把信息更新到 Mapper 中, 这是典型的观察者模式")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v('作为"管理"角色的组件, 最重要的是维护其他组件的生命周期')]),s._v(". 此外在启动各种组件时, 要注意它们的依赖关系, 也就是说, 要注意启动的顺序. 来看看 Service 启动方法:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("startInternal")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LifecycleException")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//1. 触发启动监听器")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setState")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LifecycleState")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("STARTING")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//2. 先启动 Engine, Engine 会启动它子容器")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("engine "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("engine"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            engine"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("start")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//3. 再启动 Mapper 监听器")]),s._v("\n    mapperListener"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("start")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//4. 最后启动连接器, 连接器会启动它子组件, 比如 Endpoint")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("connectorsLock"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Connector")]),s._v(" connector"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" connectors"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("connector"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getState")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LifecycleState")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("FAILED")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                connector"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("start")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br")])]),t("p",[s._v("从启动方法可以看到, Service 先启动了 Engine 组件, 再启动 Mapper 监听器, 最后才是启动连接器. 这很好理解, 因为"),t("strong",[s._v("内层组件启动好了才能对外提供服务, 才能启动外层的连接器组件")]),s._v(". 而 Mapper 也依赖容器组件, 容器组件启动好了才能监听它们的变化, 因此 Mapper 和 MapperListener 在容器组件之后启动. 组件停止的顺序跟启动顺序正好相反的, 也是基于它们的依赖关系.")]),s._v(" "),t("h5",{attrs:{id:"engine组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#engine组件"}},[s._v("#")]),s._v(" Engine组件")]),s._v(" "),t("p",[s._v("最后再来看看顶层的容器组件 Engine 具体是如何实现的. Engine 本质是一个"),t("strong",[s._v("容器")]),s._v(", 因此它继承了 ContainerBase 基类, 并且实现了 Engine 接口.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StandardEngine")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ContainerBase")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Engine")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("Engine 的子容器是 Host, 所以"),t("strong",[s._v("它持有了一个 Host 容器的数组")]),s._v(", 这些功能都被抽象到了 ContainerBase 中, ContainerBase 中有这样一个数据结构:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HashMap")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Container")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" children "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HashMap")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v('ContainerBase 用 HashMap 保存了它的子容器, 并且 ContainerBase 还实现了子容器的"增删改查", 甚至连子组件的启动和停止都提供了默认实现, 比如 ContainerBase 会用专门的线程池来启动子容器.')]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" children"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   results"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("startStopExecutor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("submit")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StartChild")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("children"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("所以 Engine 在启动 Host 子容器时就直接重用了这个方法.")]),s._v(" "),t("p",[s._v('那 Engine 自己做了什么呢? 由于容器组件最重要的功能是处理请求, 而 Engine 容器对请求的 "处理", 其实就是把请求'),t("strong",[s._v("转发")]),s._v("给某一个 Host 子容器来处理, 具体是"),t("strong",[s._v("通过 Valve 来实现")]),s._v("的.")]),s._v(" "),t("p",[s._v("每一个容器组件都有一个 "),t("strong",[s._v("Pipeline")]),s._v(", 而 Pipeline 中有一个"),t("strong",[s._v("基础阀(Basic Valve)")]),s._v(" , 而 Engine 容器的基础阀定义如下:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StandardEngineValve")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ValveBase")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("invoke")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Request")]),s._v(" request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Response")]),s._v(" response"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IOException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletException")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  \n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 拿到请求中的 Host 容器")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Host")]),s._v(" host "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getHost")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("host "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  \n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 调用 Host 容器中的 Pipeline 中的第一个 Valve")]),s._v("\n      host"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getPipeline")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getFirst")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("invoke")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" response"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br")])]),t("p",[t("strong",[s._v("这个基础阀实现非常简单, 就是把请求转发到 Host 容器")]),s._v(". 从代码中可以看到, 处理请求的 Host 容器对象是从请求中拿到的, 请求对象中怎么会有 Host 容器呢? 这是因为"),t("strong",[s._v("请求到达 Engine 容器中之前, Mapper 组件已经对请求进行了路由处理, Mapper 组件通过请求的 URL 定位了相应的容器, 并且把容器对象保存到了请求对象中")]),s._v(".")]),s._v(" "),t("p",[s._v("总结 Tomcat 的设计, 当在设计组件时, 需要考虑两个方面:")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("首先要选用合适的数据结构来保存子组件, 比如 Server 用数组来保存 Service 组件, 并且采取动态扩容的方式, 这是因为数组结构简单, 占用内存小; 再比如 ContainerBase 用 HashMap 来保存子容器, 虽然 Map 占用内存会多一点, 但是可以通过 Map 来快速的查找子容器. 因此在实际的工作中, 也需要根据具体的场景和需求来选用合适的数据结构.")])]),s._v(" "),t("li",[t("p",[s._v('其次还需要根据子组件依赖关系来决定它们的启动和停止顺序, 以及如何优雅的停止, 防止异常情况下的资源泄漏. 这正是 "管理者" 应该考虑的事情.')])])]),s._v(" "),t("h4",{attrs:{id:"_9-jetty基础架构分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-jetty基础架构分析"}},[s._v("#")]),s._v(" 9.Jetty基础架构分析")]),s._v(" "),t("p",[s._v("Servlet 容器并非只有 Tomcat 一家, 还有别的架构设计思路吗? 下面看看 Jetty 的设计特点.")]),s._v(" "),t("p",[s._v('和 Tomcat 一样, Jetty 也是一个 "HTTP 服务器 + Servlet 容器", 并且 Jetty 和 Tomcat 在架构设计上有不少相似的地方. 但同时 Jetty 也有自己的特点, 主要是更加小巧, 更易于定制化. Jetty 作为一名后起之秀, 应用范围也越来越广, 比如 Google App Engine 就采用了 Jetty 来作为 Web 容器. Jetty 和 Tomcat 各有特点, 这里重点看看 Jetty 在哪些地方跟 Tomcat 不同. 通过比较它们的差异, 可以继续加深对 Web 容器架构设计的理解, 另一方面也更清楚它们的设计区别, 并根据它们的特点来选用这两款 Web 容器.')]),s._v(" "),t("h5",{attrs:{id:"jetty整体架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jetty整体架构"}},[s._v("#")]),s._v(" Jetty整体架构")]),s._v(" "),t("p",[s._v("简单来说, Jetty Server 就是由多个 "),t("strong",[s._v("Connector")]),s._v("(连接器), 多个 "),t("strong",[s._v("Handler")]),s._v("(处理器), 以及一个线程池组成. 整体结构如下图.")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405161119-s1sa5ui.jpg",alt:""}})]),s._v(" "),t("p",[s._v("跟 Tomcat 一样, "),t("strong",[s._v("Jetty 也有 HTTP 服务器和 Servlet 容器的功能, 因此 Jetty 中的 Connector 组件和 Handler 组件分别来实现这两个功能, 而这两个组件工作时所需要的线程资源都直接从一个全局线程池 ThreadPool 中获取")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("Jetty Server 可以有多个 Connector 在不同的端口上监听客户请求, 而对于请求处理的 Handler 组件, 也可以根据具体场景使用不同的 Handler")]),s._v(". 这样的设计提高了 Jetty 的灵活性, 需要支持 Servlet, 则可以使用 ServletHandler; 需要支持 Session, 则再增加一个 SessionHandler. 也就是说可以不使用 Servlet 或 Session, 只要不配置这个 Handler 就行了.")]),s._v(" "),t("p",[s._v("为了启动和协调上面的核心组件工作, Jetty 提供了一个 "),t("strong",[s._v("Server")]),s._v(" 类来做这个事情, 它负责创建并初始化 Connector, Handler, ThreadPool 组件, 然后调用 start 方法启动它们.")]),s._v(" "),t("p",[s._v("对比一下 Tomcat 的整体架构图, 可以发现 Tomcat 在整体上跟 Jetty 很相似, 但也有一些区别.")]),s._v(" "),t("p",[t("strong",[s._v("它们的第一个区别")]),s._v("是 Jetty 中没有 Service 的概念, Tomcat 中的 Service 包装了多个连接器和一个容器组件, 一个 Tomcat 实例可以配置多个 Service, 不同的 Service 通过不同的连接器监听不同的端口; 而 Jetty 中 "),t("strong",[s._v("Connector 是被所有 Handler 共享的")]),s._v(".")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405161119-ftahlji.jpg",alt:""}})]),s._v(" "),t("p",[t("strong",[s._v("它们的第二个区别")]),s._v("是, 在 Tomcat 中每个连接器都有自己的线程池, 而在 Jetty 中"),t("strong",[s._v("所有的 Connector 共享一个全局的线程池")]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"connector组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#connector组件"}},[s._v("#")]),s._v(" Connector组件")]),s._v(" "),t("p",[s._v("跟 Tomcat 一样, Connector 的主要功能是对 I/O 模型和应用层协议的封装. I/O 模型方面, 最新的 Jetty 9 版本只支持 NIO, 因此 Jetty 的 Connector 设计有明显的 Java NIO 通信模型的痕迹. 至于应用层协议方面, 跟 Tomcat 的 Processor 一样, Jetty 抽象出了 Connection 组件来封装应用层协议的差异.")]),s._v(" "),t("p",[s._v("Java NIO 早已成为程序员的必备技能, 接下来看看 Jetty 是如何实现 NIO 模型的, 以及它是怎么**用 ** Java NIO 的.")]),s._v(" "),t("p",[s._v("Java NIO 的核心组件是 Channel, Buffer 和 Selector.")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("Channel 表示一个连接, 可以理解为一个 Socket, 通过它可以读取和写入数据, 但是并不能直接操作数据, 需要通过 Buffer 来中转.")])]),s._v(" "),t("li",[t("p",[s._v("Selector 可以用来检测 Channel 上的 I/O 事件, 比如读就绪, 写就绪, 连接就绪, 一个 Selector 可以同时处理多个 Channel, 因此单个线程可以监听多个 Channel, 这样会大量减少线程上下文切换的开销.")])])]),s._v(" "),t("p",[s._v("下面通过一个典型的服务端 NIO 程序来回顾一下如何使用这些组件.")]),s._v(" "),t("p",[s._v("首先, 创建服务端 Channel, 绑定监听端口并把 Channel 设置为非阻塞方式.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServerSocketChannel")]),s._v(" server "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServerSocketChannel")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("open")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nserver"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("socket")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("bind")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("InetSocketAddress")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("port"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nserver"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("configureBlocking")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("然后, 创建 Selector, 并在 Selector 中注册 Channel 感兴趣的事件 OP_ACCEPT, 告诉 Selector 如果客户端有新的连接请求到这个端口就通知我.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Selector")]),s._v(" selector "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Selector")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("open")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nserver"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("register")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("selector"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SelectionKey")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("OP_ACCEPT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("接下来, Selector 会在一个"),t("strong",[s._v("死循环")]),s._v('里不断地调用 select() 去查询 I/O 状态, select() 会返回一个 SelectionKey 列表, Selector 会遍历这个列表, 看看是否有 "客户" 感兴趣的事件, 如果有, 就采取相应的动作.')]),s._v(" "),t("p",[s._v("比如下面这个例子, 如果有新的连接请求, 就会建立一个新的连接. 连接建立后, 再注册 Channel 的可读事件到 Selector 中, 告诉 Selector 我对这个 Channel 上是否有新的数据到达感兴趣.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    selector"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("select")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 查询 I/O 事件")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Iterator")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SelectionKey")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" selector"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("selectedKeys")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("iterator")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("hasNext")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" \n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SelectionKey")]),s._v(" key "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("next")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n        i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("remove")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n \n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isAcceptable")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" \n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 建立一个新连接 ")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SocketChannel")]),s._v(" client "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" server"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("accept")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n            client"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("configureBlocking")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n      \n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 连接建立后, 告诉 Selector, 我现在对 I/O 可读事件感兴趣")]),s._v("\n            client"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("register")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("selector"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SelectionKey")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("OP_READ")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" \n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br")])]),t("p",[s._v("简单回顾完服务端 NIO 编程之后, 你会发现服务端在 I/O 通信上主要完成了三件事情: "),t("strong",[s._v("监听连接, I/O 事件查询以及数据读写")]),s._v(". 因此 Jetty 设计了 "),t("strong",[s._v("Acceptor, SelectorManager 和 Connection 来分别做这三件事情")]),s._v(", 下面分别来说说这三个组件.")]),s._v(" "),t("h6",{attrs:{id:"_1-acceptor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-acceptor"}},[s._v("#")]),s._v(" 1.Acceptor")]),s._v(" "),t("p",[s._v("顾名思义, Acceptor 用于"),t("strong",[s._v("接受请求")]),s._v(", 跟 Tomcat 一样, Jetty 也有独立的 Acceptor 线程组用于处理连接请求. 在 Connector 的实现类 ServerConnector 中, 有一个 "),t("code",[s._v("_acceptors")]),s._v("​ 的数组, 在 Connector 启动的时候, 会根据"),t("code",[s._v("_acceptors")]),s._v("​ 数组的长度创建对应数量的 Acceptor, 而 Acceptor 的个数可以配置.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" _acceptors"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Acceptor")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Acceptor")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getExecutor")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("execute")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("Acceptor 是 ServerConnector 中的一个内部类, 同时也是一个 Runnable, Acceptor 线程是通过 getExecutor() 得到的线程池来执行的, 前面提到这是一个全局的线程池.")]),s._v(" "),t("p",[s._v("Acceptor 通过阻塞的方式来接受连接, 这一点跟 Tomcat 也是一样的.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("accept")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" acceptorID"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IOException")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServerSocketChannel")]),s._v(" serverChannel "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" _acceptChannel"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("serverChannel "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" serverChannel"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isOpen")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这里是阻塞的")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SocketChannel")]),s._v(" channel "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" serverChannel"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("accept")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 执行到这里时说明有请求进来了")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("accepted")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("channel"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("接受连接成功后会调用 accepted() 函数, accepted() 函数中会将 SocketChannel 设置为非阻塞模式, 然后交给 Selector 去处理, 因此这也就到了 Selector 的地界了.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("accepted")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SocketChannel")]),s._v(" channel"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IOException")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    channel"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("configureBlocking")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Socket")]),s._v(" socket "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" channel"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("socket")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("configure")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("socket"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// _manager 是 SelectorManager 实例, 里面管理了所有的 Selector 实例")]),s._v("\n    _manager"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("accept")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("channel"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("h6",{attrs:{id:"_2-selectormanager"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-selectormanager"}},[s._v("#")]),s._v(" 2.SelectorManager")]),s._v(" "),t("p",[s._v("Jetty 的 Selector 由 SelectorManager 类管理, 而被管理的 Selector 叫作 ManagedSelector. SelectorManager 内部有一个 ManagedSelector 数组, "),t("strong",[s._v("真正干活的是 ManagedSelector")]),s._v(". 咱们接着上面分析, 看看在 SelectorManager 在 accept 方法里做了什么.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("accept")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SelectableChannel")]),s._v(" channel"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" attachment"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 选择一个 ManagedSelector 来处理 Channel")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ManagedSelector")]),s._v(" selector "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("chooseSelector")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 提交一个任务 Accept 给 ManagedSelector")]),s._v("\n  selector"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("submit")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("selector"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Accept")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("channel"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" attachment"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("SelectorManager 从本身的 Selector 数组中选择一个 Selector 来处理这个 Channel, 并创建一个任务 Accept 交给 ManagedSelector, ManagedSelector 在处理这个任务主要做了两步:")]),s._v(" "),t("p",[s._v("第一步, 调用 Selector 的 register 方法把 Channel "),t("strong",[s._v("注册到 Selector")]),s._v(" 上, 拿到一个 SelectionKey.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[s._v(" _key "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" _channel"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("register")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("selector"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SelectionKey")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("OP_ACCEPT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("第二步, 创建一个 EndPoint 和 Connection, 并跟这个 SelectionKey(Channel)绑在一起:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("createEndPoint")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SelectableChannel")]),s._v(" channel"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SelectionKey")]),s._v(" selectionKey"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IOException")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1. 创建 Endpoint")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("EndPoint")]),s._v(" endPoint "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" _selectorManager"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("newEndPoint")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("channel"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" selectionKey"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2. 创建 Connection")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Connection")]),s._v(" connection "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" _selectorManager"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("newConnection")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("channel"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" endPoint"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" selectionKey"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("attachment")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 3. 把 Endpoint, Connection 和 SelectionKey 绑在一起")]),s._v("\n    endPoint"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setConnection")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("connection"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    selectionKey"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("attach")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("endPoint"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[s._v("上面这两个过程是什么意思呢? 打个比方, 你到餐厅吃饭, 先点菜(注册 I/O 事件), 服务员(ManagedSelector)给你一个单子(SelectionKey), 等菜做好了(I/O 事件到了), 服务员根据单子就知道是哪桌点了这个菜, 于是喊一嗓子某某桌的菜做好了(调用了绑定在 SelectionKey 上的 EndPoint 的方法).")]),s._v(" "),t("p",[s._v("这里需要你特别注意的是, ManagedSelector 并没有调用直接 EndPoint 的方法去处理数据, 而是通过调用 EndPoint 的方法"),t("strong",[s._v("返回一个 Runnable, 然后把这个 Runnable 扔给线程池执行")]),s._v(", 所以你能猜到, 这个 Runnable 才会去真正读数据和处理请求.")]),s._v(" "),t("h6",{attrs:{id:"_3-connection"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-connection"}},[s._v("#")]),s._v(" 3.Connection")]),s._v(" "),t("p",[s._v("这个 Runnable 是 EndPoint 的一个内部类, 它会调用 Connection 的"),t("strong",[s._v("回调方法来处理请求")]),s._v(". Jetty 的 Connection 组件类比就是 Tomcat 的 Processor, 负责具体协议的解析, 得到 Request 对象, 并调用 Handler 容器进行处理. 下面简单介绍一下它的具体实现类 HttpConnection 对请求和响应的处理过程.")]),s._v(" "),t("p",[t("strong",[s._v("请求处理")]),s._v(": HttpConnection 并不会主动向 EndPoint 读取数据, 而是向在 EndPoint 中注册一堆回调方法:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getEndPoint")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("fillInterested")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("_readCallback"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("这段代码就是告诉 EndPoint, 数据到了就调这些回调方法 _readCallback() 吧, 有点异步 I/O 的感觉, 也就是说 Jetty 在"),t("strong",[s._v("应用层面模拟了异步 I/O 模型")]),s._v(".")]),s._v(" "),t("p",[s._v("而在回调方法 _readCallback() 里, 会调用 EndPoint 的接口去读数据, 读完后让 HTTP 解析器去解析字节流, HTTP 解析器会将解析后的数据, 包括请求行, 请求头相关信息存到 Request 对象里.")]),s._v(" "),t("p",[t("strong",[s._v("响应处理")]),s._v(": Connection 调用 Handler 进行业务处理, Handler 会通过 Response 对象来操作响应流, 向流里面写入数据, HttpConnection 再通过 EndPoint 把数据写到 Channel, 这样一次响应就完成了.")]),s._v(" "),t("p",[s._v("到此应该了解了 Connector 的工作原理, 下面画张图再来回顾一下 Connector 的工作流程.")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405161119-eg06rkc.jpg",alt:""}})]),s._v(" "),t("p",[s._v("1.Acceptor 监听连接请求, 当有连接请求到达时就接受连接, 一个连接对应一个 Channel, Acceptor 将 Channel 交给 ManagedSelector 来处理.")]),s._v(" "),t("p",[s._v("2.ManagedSelector 把 Channel 注册到 Selector 上, 并创建一个 EndPoint 和 Connection 跟这个 Channel 绑定, 接着就不断地检测 I/O 事件.")]),s._v(" "),t("p",[s._v("3.I/O 事件到了就调用 EndPoint 的方法拿到一个 Runnable, 并扔给线程池执行.")]),s._v(" "),t("p",[s._v("4.线程池中调度某个线程执行 Runnable.")]),s._v(" "),t("p",[s._v("5.Runnable 执行时, 调用回调函数, 这个回调函数是 Connection 注册到 EndPoint 中的.")]),s._v(" "),t("p",[s._v("6.回调函数内部实现, 其实就是调用 EndPoint 的接口方法来读数据.")]),s._v(" "),t("p",[s._v("7.Connection 解析读到的数据, 生成请求对象并交给 Handler 组件去处理.")]),s._v(" "),t("h6",{attrs:{id:"_4-总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-总结"}},[s._v("#")]),s._v(" 4.总结")]),s._v(" "),t("p",[s._v("Jetty Server 就是由多个 Connector, 多个 Handler, 以及一个线程池组成, 在设计上简洁明了.")]),s._v(" "),t("p",[s._v("Jetty 的 Connector 只支持 NIO 模型, 跟 Tomcat 的 NioEndpoint 组件一样, 它也是通过 Java 的 NIO API 实现的. 我们知道, Java NIO 编程有三个关键组件: Channel, Buffer 和 Selector, 而核心是 Selector. 为了方便使用, Jetty 在原生 Selector 组件的基础上做了一些封装, 实现了 ManagedSelector 组件.")]),s._v(" "),t("p",[s._v("在线程模型设计上 Tomcat 的 NioEndpoint 跟 Jetty 的 Connector 是相似的, 都是用一个 Acceptor 数组监听连接, 用一个 Selector 数组侦测 I/O 事件, 用一个线程池执行请求. 它们的不同点在于, Jetty 使用了一个全局的线程池, 所有的线程资源都是从线程池来分配.")]),s._v(" "),t("p",[s._v("Jetty Connector 设计中的一大特点是, 使用了回调函数来模拟异步 I/O, 比如 Connection 向 EndPoint 注册了一堆回调函数. 它的本质"),t("strong",[s._v("将函数当作一个参数来传递")]),s._v(", 告诉对方, 你准备好了就调这个回调函数.")]),s._v(" "),t("h5",{attrs:{id:"handler组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#handler组件"}},[s._v("#")]),s._v(" Handler组件")]),s._v(" "),t("p",[s._v("前面了 Jetty 的整体架构. 先来回顾一下, Jetty 就是由多个 Connector(连接器), 多个 Handler(处理器), 以及一个线程池组成, 整体结构图如下.")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405161141-6ge7pa7.png",alt:""}})]),s._v(" "),t("p",[s._v("前面分析了 Jetty Connector 组件的设计, "),t("strong",[s._v("Connector 会将 Servlet 请求交给 Handler 去处理")]),s._v(", 那 Handler 又是如何处理请求的呢?")]),s._v(" "),t("p",[t("strong",[s._v("Jetty 的 Handler 在设计上非常有意思, 可以说是 Jetty 的灵魂, Jetty 通过 Handler 实现了高度可定制化")]),s._v(".")]),s._v(" "),t("h6",{attrs:{id:"_1-handler是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-handler是什么"}},[s._v("#")]),s._v(" 1.Handler是什么")]),s._v(" "),t("p",[t("strong",[s._v("Handler 就是一个接口, 它有一堆实现类")]),s._v(", Jetty 的 Connector 组件调用这些接口来处理 Servlet 请求, 先来看看这个接口的定义.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Handler")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LifeCycle")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Destroyable")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 处理请求的方法")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("handle")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" target"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Request")]),s._v(" baseRequest"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HttpServletRequest")]),s._v(" request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HttpServletResponse")]),s._v(" response"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IOException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 每个 Handler 都关联一个 Server 组件, 被 Server 管理")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setServer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Server")]),s._v(" server"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Server")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getServer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 销毁方法相关的资源")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("destroy")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("p",[s._v("可以看到 Handler 接口的定义非常简洁, 主要就是"),t("strong",[s._v("用 handle() 方法用来处理请求")]),s._v(", 跟 Tomcat 容器组件的 service() 方法一样, 它有 ServletRequest 和 ServeletResponse 两个参数. 除此之外, 这个接口中还有 setServer() 和 getServer() 方法, 因为任何一个 Handler 都需要关联一个 Server 组件, 也就是说 Handler 需要被 Server 组件来管理. 一般来说 Handler 会加载一些资源到内存, 因此通过设置 destroy() 方法来销毁.")]),s._v(" "),t("blockquote",[t("p",[s._v("Handler继承关系")])]),s._v(" "),t("p",[s._v("Handler 只是一个接口, 完成具体功能的还是它的子类. 那么 Handler 有哪些子类? 它们的继承关系又是怎样的? 这些子类是如何实现 Servlet 容器功能的?")]),s._v(" "),t("p",[s._v("Jetty 中定义了一些"),t("strong",[s._v("默认 Handler 类")]),s._v(", 并且这些 Handler 类之间的继承关系比较复杂, 先通过一个全景图来了解一下(已经简化).")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405161141-na7x260.png",alt:""}})]),s._v(" "),t("p",[s._v("从图上可以看到, Handler 的种类和层次关系还是比较复杂的:")]),s._v(" "),t("p",[s._v("Handler 接口之下有抽象类 "),t("strong",[s._v("AbstractHandler")]),s._v(", 这一点并不意外, 因为有接口一般就有抽象实现类.")]),s._v(" "),t("p",[s._v("在 AbstractHandler 之下有 "),t("strong",[s._v("AbstractHandlerContainer")]),s._v(", 为什么需要这个类呢? 这其实是个过渡, "),t("strong",[s._v("为了实现链式调用, 一个 Handler 内部必然要有其他 Handler 的引用, 所以这个类的名字里才有 Container, 意思就是这样的 Handler 里包含了其他 Handler 的引用")]),s._v(".")]),s._v(" "),t("p",[s._v("理解了上面的 AbstractHandlerContainer, 就能理解它的两个子类了: "),t("strong",[s._v("HandlerWrapper")]),s._v(" 和 "),t("strong",[s._v("HandlerCollection")]),s._v(". 简单来说就是, HandlerWrapper 和 HandlerCollection 都是 Handler, 但是这些 Handler 里还包括其他 Handler 的引用. 不同的是, HandlerWrapper 只包含一个其他 Handler 的引用, 而 HandlerCollection 中有一个 Handler 数组的引用.")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405161141-j4aue1d.png",alt:""}})]),s._v(" "),t("p",[s._v("接着来看左边的 "),t("strong",[s._v("HandlerWrapper")]),s._v(", 它有两个子类: "),t("strong",[s._v("Server 和 ScopedHandler")]),s._v(".")]),s._v(" "),t("p",[s._v("Server 比较好理解, 它本身是 Handler 模块的入口, 必然要将请求传递给其他 Handler 来处理, 为了触发其他 Handler 的调用, 所以它是一个 HandlerWrapper.")]),s._v(" "),t("p",[s._v('再看 ScopedHandler, 它也是一个比较重要的 Handler, 实现了 "具有上下文信息" 的责任链调用. 为什么要强调 "具有上下文信息" 呢? 那是因为 Servlet 规范规定 Servlet 在执行过程中是有上下文的. 那么这些 Handler 在执行过程中如何访问这个上下文呢? 这个上下文又存在什么地方呢? 答案就是通过 '),t("strong",[s._v("ScopedHandler")]),s._v(" 来实现的.")]),s._v(" "),t("p",[t("strong",[s._v("而 ScopedHandler 有一堆的子类, 这些子类就是用来实现 Servlet 规范的")]),s._v(", 比如 ServletHandler, ContextHandler, SessionHandler, ServletContextHandler 和 WebAppContext.")]),s._v(" "),t("p",[s._v("再看类图的右边, 跟 HandlerWapper 对等的还有 "),t("strong",[s._v("HandlerCollection")]),s._v(", HandlerCollection 其实维护了一个 Handler 数组. 你可能会问, 为什么要发明一个这样的 Handler? 这是因为 "),t("strong",[s._v("Jetty 可能需要同时支持多个 Web 应用")]),s._v(", 如果每个 Web 应用有一个 Handler 入口, 那么多个 Web 应用的 Handler 就成了一个数组, 比如 Server 中就有一个 HandlerCollection, Server 会"),t("strong",[s._v("根据用户请求的 URL 从数组中选取相应的 Handler 来处理, 就是选择特定的 Web 应用来处理请求")]),s._v(".")]),s._v(" "),t("blockquote",[t("p",[s._v("Handler的类型")])]),s._v(" "),t("p",[s._v("虽然从类图上看 Handler 有很多, 但是本质上这些 Handler 分成三种类型:")]),s._v(" "),t("ul",[t("li",[s._v("第一种是"),t("strong",[s._v("协调 Handler")]),s._v(", 这种 Handler 负责将"),t("strong",[s._v("请求路由")]),s._v("到一组 Handler 中去, 比如上图中的 HandlerCollection, 它内部持有一个 Handler 数组, 当请求到来时, 它负责将请求转发到数组中的某一个 Handler.")]),s._v(" "),t("li",[s._v("第二种是"),t("strong",[s._v("过滤器 Handler")]),s._v(", 这种 Handler 自己会"),t("strong",[s._v("处理请求")]),s._v(", 处理完了后再把请求转发到下一个 Handler, 比如图上的 HandlerWrapper, 它内部持有下一个 Handler 的引用. 需要注意的是, 所有继承了 HandlerWrapper 的 Handler 都具有了过滤器 Handler 的特征, 比如 ContextHandler, SessionHandler 和 WebAppContext 等.")]),s._v(" "),t("li",[s._v("第三种是"),t("strong",[s._v("内容 Handler")]),s._v(", 说白了就是这些 Handler 会"),t("strong",[s._v("真正调用 Servlet 来处理请求")]),s._v(", 生成响应的内容, 比如 ServletHandler. 如果浏览器请求的是一个静态资源, 也有相应的 ResourceHandler 来处理这个请求, 返回静态页面.")])]),s._v(" "),t("h6",{attrs:{id:"_2-如何实现servlet规范"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-如何实现servlet规范"}},[s._v("#")]),s._v(" 2.如何实现Servlet规范")]),s._v(" "),t("p",[s._v("上文提到 ServletHandler, ContextHandler 以及 WebAppContext 等实现了 Servlet 规范, 那具体是怎么实现的呢? 为帮助理解, 在这之前先看看如何使用 Jetty 来启动一个 Web 应用.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 新建一个 WebAppContext, WebAppContext 是一个 Handler")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("WebAppContext")]),s._v(" webapp "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("WebAppContext")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nwebapp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setContextPath")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/mywebapp"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nwebapp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setWar")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"mywebapp.war"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 将 Handler 添加到 Server 中去")]),s._v("\nserver"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setHandler")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("webapp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 启动 Server")]),s._v("\nserver"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("start")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nserver"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("join")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[s._v("上面的过程主要分为两步:")]),s._v(" "),t("p",[t("strong",[s._v("第一步创建一个 WebAppContext")]),s._v(", 接着设置一些参数到这个 Handler 中, 就是告诉 WebAppContext 你的 WAR 包放在哪, Web 应用的访问路径是什么.")]),s._v(" "),t("p",[t("strong",[s._v("第二步就是把新创建的 WebAppContext 添加到 Server 中, 然后启动 Server")]),s._v(".")]),s._v(" "),t("p",[s._v("WebAppContext 对应一个 Web 应用. 回忆一下 Servlet 规范中有 Context, Servlet, Filter, Listener 和 Session 等, Jetty 要支持 Servlet 规范, 就需要有相应的 Handler 来分别实现这些功能. 因此, Jetty 设计了 3 个组件: "),t("strong",[s._v("ContextHandler, ServletHandler 和 SessionHandler")]),s._v(" 来实现 Servle 规范中规定的功能, 而 "),t("strong",[s._v("WebAppContext 本身就是一个 ContextHandler")]),s._v(", 另外它还负责管理 ServletHandler 和 SessionHandler.")]),s._v(" "),t("p",[s._v("再来看一下什么是 "),t("mark",[t("strong",[s._v("ContextHandler")])]),s._v(". ContextHandler 会"),t("strong",[s._v("创建并初始化 Servlet 规范里的 ServletContext 对象")]),s._v(", 同时 ContextHandler 还包含了一组能够让你的 Web 应用运行起来的 Handler, 可以这样理解, Context 本身也是一种 Handler, 它里面包含了其他的 Handler, 这些 Handler 能处理某个特定 URL 下的请求. 比如, ContextHandler 包含了一个或者多个 ServletHandler.")]),s._v(" "),t("p",[s._v("再来看 "),t("mark",[t("strong",[s._v("ServletHandler")])]),s._v(", 它"),t("strong",[s._v("实现了 Servlet 规范中的 Servlet, Filter 和 Listener 的功能")]),s._v(". ServletHandler 依赖 FilterHolder, ServletHolder, ServletMapping, FilterMapping 这四大组件. FilterHolder 和 ServletHolder 分别是 Filter 和 Servlet 的包装类, 每一个 Servlet 与路径的映射会被封装成 ServletMapping, 而 Filter 与拦截 URL 的映射会被封装成 FilterMapping.")]),s._v(" "),t("p",[t("mark",[t("strong",[s._v("SessionHandler")])]),s._v(" 从名字就知道它的功能, "),t("strong",[s._v("用来管理 Session")]),s._v(". 除此之外 WebAppContext 还有一些通用功能的 Handler, 比如 SecurityHandler 和 GzipHandler, 同样从名字可以知道这些 Handler 的功能分别是安全控制和压缩 / 解压缩.")]),s._v(" "),t("p",[s._v("WebAppContext 会将这些 Handler 构建成一个执行链, 通过这个链会最终调用到业务 Servlet. 下面通过一张图来理解一下.")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405161141-rb27mbx.jpg",alt:""}})]),s._v(" "),t("p",[s._v("通过对比 Tomcat 的架构图, 可以看到, Jetty 的 Handler 组件和 Tomcat 中的容器组件是大致是对等的概念, Jetty 中的 WebAppContext 相当于 Tomcat 的 Context 组件, 都是对应一个 Web 应用; 而 Jetty 中的 ServletHandler 对应 Tomcat 中的 Wrapper 组件, 它负责初始化和调用 Servlet, 并实现了 Filter 的功能.")]),s._v(" "),t("p",[s._v("对于一些通用组件, 比如安全和解压缩, 在 Jetty 中"),t("strong",[s._v("都被做成了 Handler")]),s._v(", 这是 Jetty Handler 架构的特点.")]),s._v(" "),t("p",[t("strong",[s._v('因此对于 Jetty 来说, 请求处理模块就被抽象成 Handler, 不管是实现了 Servlet 规范的 Handler, 还是实现通用功能的 Handler, 比如安全, 解压缩等, 我们可以任意添加或者裁剪这些 "功能模块", 从而实现高度的可定制化.')])]),s._v(" "),t("h6",{attrs:{id:"_3-总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-总结"}},[s._v("#")]),s._v(" 3.总结")]),s._v(" "),t("p",[s._v("Jetty Server 就是由多个 Connector, 多个 Handler, 以及一个线程池组成.")]),s._v(" "),t("p",[s._v('Jetty 的 Handler 设计是它的一大特色, Jetty 本质就是一个 Handler 管理器, Jetty 本身就提供了一些默认 Handler 来实现 Servlet 容器的功能, 也可以定义自己的 Handler 来添加到 Jetty 中, 这体现了 "'),t("strong",[s._v("微内核 + 插件")]),s._v('" 的设计思想.')]),s._v(" "),t("h4",{attrs:{id:"_11-总结-从tomcat和jetty中提炼组件化设计规范"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-总结-从tomcat和jetty中提炼组件化设计规范"}},[s._v("#")]),s._v(" 11.总结:从Tomcat和Jetty中提炼组件化设计规范")]),s._v(" "),t("p",[s._v("我们经常谈敏捷, 快速迭代和重构, 这些都是为了应对需求的快速变化, 也因此在开始设计一个系统时就要考虑可扩展性. 那究竟该怎样设计才能适应变化呢? 或者要设计成什么样后面才能以最小的成本进行重构呢? 下面来总结一些 Tomcat 和 Jetty 组件化的设计思想, 或许从中可以得到一些启发.")]),s._v(" "),t("h5",{attrs:{id:"组件化及可配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组件化及可配置"}},[s._v("#")]),s._v(" 组件化及可配置")]),s._v(" "),t("p",[t("strong",[s._v("Tomcat 和 Jetty 的整体架构都是基于组件的")]),s._v(", 可以通过 XML 文件或者代码的方式来配置这些组件, 比如可以在 server.xml 配置 Tomcat 的连接器以及容器组件. 相应的, 也可以在 Jetty.xml 文件里组装 Jetty 的 Connector 组件, 以及各种 Handler 组件. 也就是说, "),t("mark",[t("strong",[s._v("Tomcat 和 Jetty 提供了一堆积木, 怎么搭建这些积木由你来决定")])]),s._v(", 可以根据自己的需要灵活选择组件来搭建 Web 容器, 并且也可以自定义组件, 这样的设计为 Web 容器提供了深度可定制化.")]),s._v(" "),t("p",[s._v("那 Web 容器如何实现这种组件化设计呢? 主要有两个要点:")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("第一个是面向接口编程")]),s._v('. 需要对系统的功能按照 "高内聚, 低耦合" 的原则进行拆分, 每个组件都有相应的接口, 组件之间通过接口通信, 这样就可以方便地替换组件了. 比如可以选择不同连接器类型, 只要这些连接器组件实现同一个接口就行.')]),s._v(" "),t("li",[t("strong",[s._v("第二个是 Web 容器提供一个载体把组件组装在一起工作")]),s._v('. 组件的工作无非就是处理请求, 因此容器通过责任链模式把请求依次交给组件去处理. 对于用户来说, 只需要告诉 Web 容器由哪些组件来处理请求. 把组件组织起来需要一个"管理者", 这就是为什么 Tomcat 和 Jetty 都有一个 Server 的概念, '),t("strong",[s._v("Server 就是组件的载体, Server 里包含了连接器组件和容器组件; 容器还需要把请求交给各个子容器组件去处理, Tomcat 和 Jetty 都是责任链模式来实现的")]),s._v(".")])]),s._v(" "),t("p",[s._v("用户通过配置来组装组件, 跟 Spring 中 Bean 的依赖注入相似. Spring 的用户可以通过配置文件或者注解的方式来组装 Bean, Bean 与 Bean 的依赖关系完全由用户自己来定义. 这一点与 Web 容器"),t("strong",[s._v("不同")]),s._v(', Web 容器中组件与组件之间的关系是固定的, 比如 Tomcat 中 Engine 组件下有 Host 组件, Host 组件下有 Context 组件等, 但不能在 Host 组件里 "注入" 一个 Wrapper 组件, 这是由于 Web 容器本身的功能来决定的.')]),s._v(" "),t("h5",{attrs:{id:"组件的创建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组件的创建"}},[s._v("#")]),s._v(" 组件的创建")]),s._v(" "),t("p",[s._v("由于组件是可以配置的, Web 容器在启动之前并不知道要创建哪些组件, 也就是说, 不能通过硬编码的方式来实例化这些组件, 而是需要通过"),t("strong",[s._v("反射机制")]),s._v("来动态地创建. 具体来说, Web 容器不是通过 new 方法来实例化组件对象的, 而是"),t("strong",[s._v("通过 Class.forName 来创建组件")]),s._v(". 无论哪种方式, 在实例化一个类之前, Web 容器需要把组件类加载到 JVM, 这就涉及一个类加载的问题, Web 容器设计了自己类加载器, 后面会详细介绍 Tomcat 的类加载器.")]),s._v(" "),t("p",[s._v("Spring 也是通过反射机制来动态地实例化 Bean, 那么它用到的类加载器是从哪里来的呢? Web 容器给每个 Web 应用创建了一个类加载器, Spring 用到的类加载器是 Web 容器传给它的.")]),s._v(" "),t("h5",{attrs:{id:"组件的生命周期管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组件的生命周期管理"}},[s._v("#")]),s._v(" 组件的生命周期管理")]),s._v(" "),t("p",[s._v("不同类型的组件具有父子层次关系, 父组件处理请求后再把请求传递给某个子组件. 你可能会感到疑惑, Jetty 的中 Handler 不是一条链吗, 看上去像是平行关系? 其实不然, Jetty 中的 Handler 也是分层次的, 比如 WebAppContext 中包含 ServletHandler 和 SessionHandler. 因此也可以把 ContextHandler 和它所包含的 Handler 看作是父子关系.")]),s._v(" "),t("p",[s._v("而 Tomcat 通过容器的概念, 把小容器放到大容器来实现父子关系, 其实它们的本质都是一样的. 这其实涉及如何统一管理这些组件, 如何做到一键式启停.")]),s._v(" "),t("p",[s._v("Tomcat 和 Jetty 都采用了类似的办法来"),t("strong",[s._v("管理组件的生命周期")]),s._v(", 主要有两个要点, "),t("mark",[t("strong",[s._v("一是父组件负责子组件的创建, 启停和销毁")])]),s._v(". 这样只要启动最上层组件, 整个 Web 容器就被启动起来了, 也就实现了一键式启停; "),t("mark",[t("strong",[s._v("二是 Tomcat 和 Jetty 都定义了组件的生命周期状态, 并且把组件状态的转变定义成一个事件, 一个组件的状态变化会触发子组件的变化")])]),s._v(", 比如 Host 容器的启动事件里会触发 Web 应用的扫描和加载, 最终会在 Host 容器下创建相应的 Context 容器, 而 Context 组件的启动事件又会触发 Servlet 的扫描, 进而创建 Wrapper 组件. 那么如何实现这种联动呢? 答案是"),t("strong",[s._v("观察者模式")]),s._v('. 具体来说就是创建监听器去监听容器的状态变化, 在监听器的方法里去实现相应的动作, 这些监听器其实是组件生命周期过程中的 "扩展点".')]),s._v(" "),t("p",[s._v('Spring 也采用了类似的设计, Spring 给 Bean 生命周期状态提供了很多的 "扩展点". 这些扩展点被定义成一个个接口, 只要 Bean 实现了这些接口, Spring 就会负责调用这些接口, 这样做的目的就是, 当 Bean 的创建, 初始化和销毁这些控制权交给 Spring 后, Spring 让你有机会在 Bean 的整个生命周期中执行你的逻辑. 下面通过一张图来理解 Spring Bean 的生命周期过程:')]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405161159-cayup9b.png",alt:""}})]),s._v(" "),t("h5",{attrs:{id:"组件的骨架抽象类和模板模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组件的骨架抽象类和模板模式"}},[s._v("#")]),s._v(" 组件的骨架抽象类和模板模式")]),s._v(" "),t("p",[s._v("具体到组件的设计的与实现, Tomcat 和 Jetty 都大量采用了"),t("strong",[s._v("骨架抽象类和模板模式")]),s._v(". 比如说 Tomcat 中 ProtocolHandler 接口, ProtocolHandler 有抽象基类 AbstractProtocol, 它实现了协议处理层的骨架和通用逻辑, 而具体协议也有抽象基类, 比如 HttpProtocol 和 AjpProtocol. 对于 Jetty 来说, Handler 接口之下有 AbstractHandler, Connector 接口之下有 AbstractorConnector, 这些抽象骨架类实现了一些通用逻辑, 并且会"),t("strong",[s._v("定义一些抽象方法")]),s._v(", 这些抽象方法由子类实现, 抽象骨架类调用抽象方法来实现骨架逻辑.")]),s._v(" "),t("p",[s._v("这是一个通用的设计规范, 不管是 Web 容器还是 Spring, 甚至 JDK 本身都到处使用这种设计, 比如 Java 集合中的 AbstractSet, AbstractMap 等. 值得一提的是, 从 Java 8 开始允许接口有 default 方法, 这样可以把抽象骨架类的通用逻辑放到接口中去.")]),s._v(" "),t("h5",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),t("p",[s._v("这里"),t("mark",[t("strong",[s._v('总结了 Tomcat 和 Jetty 的组件化设计, 可以通过搭积木的方式来定制化自己的 Web 容器. Web 容器为了支持这种组件化设计, 遵循了一些规范, 比如面向接口编程, 用 "管理者" 去组装这些组件, 用反射的方式动态的创建组件, 统一管理组件的生命周期, 并且给组件生命状态的变化提供了扩展点, 组件的具体实现一般遵循骨架抽象类和模板模式')])]),s._v(".")]),s._v(" "),t("h4",{attrs:{id:"_12-实战-优化并提高tomcat启动速度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-实战-优化并提高tomcat启动速度"}},[s._v("#")]),s._v(" 12.实战:优化并提高Tomcat启动速度")]),s._v(" "),t("p",[s._v("在使用 Tomcat 时可能会碰到启动比较慢的问题, 比如系统发布新版本上线时, 可能需要重启服务, 这个时候希望 Tomcat 能快速启动起来提供服务. 下面针对 Tomcat 8.5 和 9.0 版本, 给出几条非常明确的建议.")]),s._v(" "),t("p",[s._v("如果是用嵌入式的方式运行 Tomcat, 比如 Spring Boot, 也可以通过 Spring Boot 的方式去修改 Tomcat 的参数, 调优的原理都是一样的.")]),s._v(" "),t("h5",{attrs:{id:"清理你的tomcat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#清理你的tomcat"}},[s._v("#")]),s._v(" 清理你的Tomcat")]),s._v(" "),t("p",[t("strong",[s._v("1. 清理不必要的 Web 应用")])]),s._v(" "),t("p",[s._v("首先要做的是删除掉 webapps 文件夹下不需要的工程, 一般是 host-manager, example, doc 等这些默认的工程, 可能还有以前添加的但现在用不着的工程, 最好把这些全都删除掉. 如果你看过 Tomcat 的启动日志, 可以发现"),t("strong",[s._v("每次启动 Tomcat, 都会重新布署这些工程")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("2. 清理 XML 配置文件")])]),s._v(" "),t("p",[s._v("Tomcat 在启动的时候会"),t("strong",[s._v("解析所有的 XML 配置文件")]),s._v(", 但 XML 解析的代价可不小, 因此要尽量保持配置文件的简洁, 需要解析的东西越少, 速度自然就会越快.")]),s._v(" "),t("p",[t("strong",[s._v("3. 清理 JAR 文件")])]),s._v(" "),t("p",[s._v("还可以删除所有不需要的 JAR 文件. JVM 的类加载器在加载类时, 需要查找每一个 JAR 文件, 去找到所需要的类. 如果删除了不需要的 JAR 文件, 查找的速度就会快一些. 这里请注意: "),t("strong",[s._v("Web 应用中的 lib 目录下不应该出现 Servlet API 或者 Tomcat 自身的 JAR")]),s._v(", 这些 JAR 由 Tomcat 负责提供. 如果是使用 Maven 来构建应用, 对 Servlet API 的依赖应该指定为"),t("code",[s._v("<scope>provided</scope>")]),s._v("​.")]),s._v(" "),t("p",[t("strong",[s._v("4. 清理其他文件")])]),s._v(" "),t("p",[s._v("及时清理日志, 删除 logs 文件夹下不需要的日志文件. 同样还有 work 文件夹下的 catalina 文件夹, 它其实是 Tomcat 把 JSP 转换为 Class 文件的工作目录. 有时候也许会遇到修改了代码, 重启了 Tomcat, 但是仍没效果, 这时候便可以删除掉这个文件夹, Tomcat 下次启动的时候会重新生成.")]),s._v(" "),t("h5",{attrs:{id:"禁止tomcat-tld扫描"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#禁止tomcat-tld扫描"}},[s._v("#")]),s._v(" 禁止Tomcat TLD扫描")]),s._v(" "),t("p",[s._v("Tomcat 为了支持 JSP, 在应用启动的时候会扫描 JAR 包里面的 TLD 文件, 加载里面定义的标签库.")]),s._v(" "),t("p",[s._v("建议配置一下 Tomcat 不要去扫描这些 JAR 包, 这样可以提高 Tomcat 的启动速度, 并节省 JSP 编译时间.")]),s._v(" "),t("h5",{attrs:{id:"关闭websocket支持"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#关闭websocket支持"}},[s._v("#")]),s._v(" 关闭WebSocket支持")]),s._v(" "),t("p",[s._v("Tomcat 会扫描 WebSocket 注解的 API 实现, 比如 "),t("code",[s._v("@ServerEndpoint")]),s._v("​ 注解的类. 注解扫描一般是比较慢的, 如果不需要使用 WebSockets 就可以关闭它. 具体方法是, 找到 Tomcat 的 "),t("code",[s._v("conf/")]),s._v("​ 目录下的 "),t("code",[s._v("context.xml")]),s._v("​ 文件, 给 Context 标签加一个 **containerSciFilter ** 的属性.")]),s._v(" "),t("p",[s._v("更进一步, 如果不需要 WebSockets 这个功能, 可以把 Tomcat lib 目录下的 "),t("code",[s._v("websocket-api.jar")]),s._v("​ 和 "),t("code",[s._v("tomcat-websocket.jar")]),s._v("​ 这两个 JAR 文件删除掉, 进一步提高性能.")]),s._v(" "),t("h5",{attrs:{id:"并行启动多个web应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#并行启动多个web应用"}},[s._v("#")]),s._v(" 并行启动多个Web应用")]),s._v(" "),t("p",[s._v("Tomcat 启动的时候, 默认情况下 Web 应用都是一个一个启动的, 等所有 Web 应用全部启动完成, Tomcat 才算启动完毕. 如果在一个 Tomcat 下有多个 Web 应用, 为了优化启动速度, 可以配置多个应用程序并行启动, 可以通过修改 "),t("code",[s._v("server.xml")]),s._v("​ 中 Host 元素的 startStopThreads 属性来完成. startStopThreads 的值表示想用多少个线程来启动 Web 应用, 如果设成 0 表示要并行启动 Web 应用.")]),s._v(" "),t("p",[s._v("这里需要注意的是, Engine 元素里也配置了这个参数, 这意味着如果 Tomcat 配置了多个 Host(虚拟主机), Tomcat 会以并行的方式启动多个 Host.")]),s._v(" "),t("h3",{attrs:{id:"连接器-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#连接器-2"}},[s._v("#")]),s._v(" 连接器")]),s._v(" "),t("h4",{attrs:{id:"_14-nioendpoint组件-tomcat如何实现非阻塞io"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_14-nioendpoint组件-tomcat如何实现非阻塞io"}},[s._v("#")]),s._v(" 14.NioEndpoint组件:Tomcat如何实现非阻塞IO?")]),s._v(" "),t("p",[s._v("UNIX 系统下的 I/O 模型有 5 种: 同步阻塞 I/O, 同步非阻塞 I/O, I/O 多路复用, 信号驱动 I/O 和异步 I/O. 这些名词我们好像都似曾相识, 但这些 I/O 通信模型有什么区别? 同步和阻塞似乎是一回事, 到底有什么不同? 等一下, 在这之前问一个终极问题: 什么是 I/O? 为什么需要这些 I/O 模型?")]),s._v(" "),t("p",[s._v("所谓的 "),t("strong",[s._v("I/O 就是计算机内存与外部设备之间拷贝数据的过程")]),s._v(". 由于 CPU 访问内存的速度远远高于外部设备, 因此 CPU 是先把外部设备的数据读到内存里, 然后再进行处理. 请考虑一下这个场景, 当你的程序通过 CPU 向外部设备发出一个读指令时, 数据从外部设备拷贝到内存往往需要一段时间, 这个时候 CPU 没事干了, 你的程序是主动把 CPU 让给别人? 还是让 CPU 不停地查: 数据到了吗, 数据到了吗...")]),s._v(" "),t("p",[t("strong",[s._v("这就是 I/O 模型要解决的问题")]),s._v(". 这里先说说各种 I/O 模型的区别, 然后重点分析 Tomcat 的 "),t("strong",[s._v("NioEndpoint 组件是如何实现非阻塞 I/O 模型")]),s._v("的.")]),s._v(" "),t("h5",{attrs:{id:"java-i-o模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-i-o模型"}},[s._v("#")]),s._v(" Java I/O模型")]),s._v(" "),t("p",[s._v("对于一个网络 I/O 通信过程, 比如网络数据读取, 会涉及两个对象, "),t("strong",[s._v("一个是调用这个 I/O 操作的用户线程, 另外一个就是操作系统内核. 一个进程的地址空间分为用户空间和内核空间, 用户线程不能直接访问内核空间")]),s._v(".")]),s._v(" "),t("p",[s._v("当用户线程发起 I/O 操作后, 网络数据读取操作会经历两个步骤:")]),s._v(" "),t("ul",[t("li",[t("mark",[s._v("**用户线程等待内核将数据从网卡拷贝到内核空间. **")])]),s._v(" "),t("li",[t("mark",[s._v("**内核将数据从内核空间拷贝到用户空间. **")])])]),s._v(" "),t("p",[s._v("各种 I/O 模型的区别就是: 它们实现这两个步骤的方式是不一样的.")]),s._v(" "),t("p",[t("strong",[s._v("同步阻塞 I/O")]),s._v(": 用户线程发起 read 调用后就阻塞了, 让出 CPU. 内核等待网卡数据到来, 把数据从网卡拷贝到内核空间, 接着把数据拷贝到用户空间, 再把用户线程叫醒.")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405161302-sz6gt2s.jpg",alt:""}})]),s._v(" "),t("p",[t("strong",[s._v("同步非阻塞 I/O")]),s._v(": 用户线程不断的发起 read 调用, 数据没到内核空间时, 每次都返回失败, 直到数据到了内核空间, 这一次 read 调用后, 在等待数据从内核空间拷贝到用户空间这段时间里, 线程还是阻塞的, 等数据到了用户空间再把线程叫醒.")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405161302-o6f8wgz.jpg",alt:""}})]),s._v(" "),t("p",[t("strong",[s._v("I/O 多路复用")]),s._v(": "),t("strong",[s._v("用户线程的读取操作分成两步")]),s._v("了, 线程先发起 select 调用, 目的是问内核数据准备好了吗? 等内核把数据准备好了, 用户线程再发起 read 调用. 在等待数据从内核空间拷贝到用户空间这段时间里, 线程还是阻塞的. 那为什么叫 I/O 多路复用呢? "),t("strong",[s._v("因为一次 select 调用可以向内核查多个数据通道(Channel)的状态, 所以叫多路复用")]),s._v(".")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405161302-nyy072b.jpg",alt:""}})]),s._v(" "),t("p",[t("strong",[s._v("异步 I/O")]),s._v(": 用户线程发起 read 调用的同时"),t("strong",[s._v("注册一个回调函数")]),s._v(", read 立即返回, 等内核将数据准备好后, 再调用指定的回调函数完成处理. 在这个过程中, 用户线程一直没有阻塞.")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405161302-6jzsof7.jpg",alt:""}})]),s._v(" "),t("h5",{attrs:{id:"nioendpoint组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nioendpoint组件"}},[s._v("#")]),s._v(" NioEndpoint组件")]),s._v(" "),t("p",[t("strong",[s._v("Tomcat 的 NioEndPoint 组件实现了 I/O 多路复用模型")]),s._v(", 接下来介绍 NioEndpoint 的实现原理, 后面会介绍 Tomcat 如何实现异步 I/O 模型.")]),s._v(" "),t("p",[t("strong",[s._v("总体工作流程")])]),s._v(" "),t("p",[s._v("对于 Java 的多路复用器的使用, 无非是两步:")]),s._v(" "),t("ol",[t("li",[s._v("**创建一个 Seletor, 在它身上注册各种感兴趣的事件, 然后调用 select 方法, 等待感兴趣的事情发生. **")]),s._v(" "),t("li",[s._v("**感兴趣的事情发生了, 比如可以读了, 这时便创建一个新的线程从 Channel 中读数据. **")])]),s._v(" "),t("p",[s._v("Tomcat 的 NioEndpoint 组件虽然实现比较复杂, 但基本原理就是上面两步. 先来看看它有哪些组件, 它"),t("strong",[s._v("一共包含 LimitLatch, Acceptor, Poller, SocketProcessor 和 Executor 共 5 个组件")]),s._v(", 它们的工作过程如下图所示.")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405161302-b8n88nw.jpg",alt:""}})]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("LimitLatch 是连接控制器")]),s._v(", 它负责控制最大连接数, NIO 模式下默认是 10000, 达到这个阈值后, 连接请求被拒绝.")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("Acceptor")]),s._v(" 跑在一个单独的线程里, 它在一个死循环里调用 accept 方法来接收新连接, 一旦有新的连接请求到来, accept 方法返回一个 "),t("strong",[s._v("Channel")]),s._v(" 对象, 接着把 Channel 对象交给 Poller 去处理.")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("Poller 的本质是一个 Selector")]),s._v(", 也跑在单独线程里. Poller 在内部维护一个 Channel 数组, 它在一个死循环里不断检测 Channel 的数据就绪状态, 一旦有 Channel 可读, 就生成一个 SocketProcessor 任务对象扔给 Executor 去处理.")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("Executor 就是线程池")]),s._v(", 负责运行 SocketProcessor 任务类, SocketProcessor 的 run 方法会调用 Http11Processor 来读取和解析请求数据. 我们知道, Http11Processor 是应用层协议的封装, 它会调用容器获得响应, 再把响应通过 Channel 写出.")])])]),s._v(" "),t("p",[s._v("接下来详细介绍一下各组件的设计特点.")]),s._v(" "),t("h6",{attrs:{id:"_1-limitlatch"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-limitlatch"}},[s._v("#")]),s._v(" 1.LimitLatch")]),s._v(" "),t("p",[s._v("LimitLatch 用来控制连接个数, 当连接数到达最大时阻塞线程, 直到后续组件处理完一个连接后将连接数减 1. 请你注意到达最大连接数后操作系统底层还是会接收客户端连接, 但用户层已经不再接收. LimitLatch 的核心代码如下:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LimitLatch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Sync")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AbstractQueuedSynchronizer")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   \n        "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("tryAcquireShared")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" newCount "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" count"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("incrementAndGet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("newCount "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" limit"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                count"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("decrementAndGet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n        "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("tryReleaseShared")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" arg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            count"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("decrementAndGet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Sync")]),s._v(" sync"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AtomicLong")]),s._v(" count"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("volatile")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" limit"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 线程调用这个方法来获得接收新连接的许可, 线程可能被阻塞")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("countUpOrAwait")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("InterruptedException")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      sync"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("acquireSharedInterruptibly")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 调用这个方法来释放一个连接许可, 那么前面阻塞的线程可能被唤醒")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("countDown")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      sync"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("releaseShared")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" result "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getCount")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" result"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br")])]),t("p",[s._v("从上面的代码可以看到, LimitLatch 内步定义了内部类 Sync, 而 Sync 扩展了 AQS, AQS 是 Java 并发包中的一个核心类, 它在内部维护一个状态和一个线程队列, 可以用来"),t("strong",[s._v("控制线程什么时候挂起, 什么时候唤醒")]),s._v(". 可以扩展它来实现自己的同步器, 实际上 Java 并发包里的锁和条件变量等等都是通过 AQS 来实现的, 这里的 LimitLatch 也不例外.")]),s._v(" "),t("p",[s._v("理解上面的代码时有两个要点:")]),s._v(" "),t("ol",[t("li",[s._v("用户线程通过调用 LimitLatch 的 countUpOrAwait() 方法来拿到锁, 如果暂时无法获取, 这个线程会被阻塞到 AQS 的队列中. 那 AQS 怎么知道是阻塞还是不阻塞用户线程呢? 其实这是由 AQS 的使用者来决定的, 也就是内部类 Sync 来决定的, 因为 Sync 类重写了 AQS 的 "),t("strong",[s._v("tryAcquireShared() 方法")]),s._v(". 它的实现逻辑是如果当前连接数 count 小于 limit, 线程能获取锁, 返回 1, 否则返回 -1.")]),s._v(" "),t("li",[s._v("如何用户线程被阻塞到了 AQS 的队列, 那什么时候唤醒呢? 同样是由 Sync 内部类决定, Sync 重写了 AQS 的"),t("strong",[s._v("releaseShared() 方法")]),s._v(", 其实就是当一个连接请求处理完了, 这时又可以接收一个新连接了, 这样前面阻塞的线程将会被唤醒.")])]),s._v(" "),t("p",[s._v("AQS 就是一个骨架抽象类, 它帮我们搭了个架子, 用来控制线程的阻塞和唤醒. 具体什么时候阻塞, 什么时候唤醒由你来决定. 还可以看到, 当前线程数被定义成原子变量 AtomicLong, 而 limit 变量用 volatile 关键字来修饰, 这些都是并发编程的实际运用.")]),s._v(" "),t("h6",{attrs:{id:"_2-acceptor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-acceptor"}},[s._v("#")]),s._v(" 2.Acceptor")]),s._v(" "),t("p",[s._v("Acceptor 实现了 Runnable 接口, 因此可以跑在"),t("strong",[s._v("单独线程")]),s._v("里. "),t("strong",[s._v("一个端口号只能对应一个 ServerSocketChannel")]),s._v(", 因此这个 "),t("strong",[s._v("ServerSocketChannel 是在多个 Acceptor 线程之间共享")]),s._v("的, 它是 Endpoint 的属性, 由 Endpoint 完成初始化和端口绑定. 初始化过程如下:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[s._v("serverSock "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServerSocketChannel")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("open")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nserverSock"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("socket")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("bind")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("addr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getAcceptCount")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nserverSock"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("configureBlocking")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("从上面的初始化代码可以看到两个关键信息:")]),s._v(" "),t("p",[s._v("1.bind() 方法的第二个参数表示操作系统的等待队列长度. 上面提到过, 当应用层面的连接数到达最大值时, 操作系统可以继续接收连接, 那么操作系统能继续接收的最大连接数就是这个队列长度, 可以通过 acceptCount 参数配置, 默认是 100.")]),s._v(" "),t("p",[s._v("2.ServerSocketChannel 被设置成"),t("strong",[s._v("阻塞模式")]),s._v(", 也就是说它是以阻塞的方式接收连接的.")]),s._v(" "),t("p",[t("strong",[s._v("ServerSocketChannel 通过 accept() 接受新的连接, accept() 方法返回获得 SocketChannel 对象, 然后将 SocketChannel 对象封装在一个 PollerEvent 对象中, 并将 PollerEvent 对象压入 Poller 的 Queue 里, 这是个典型的生产者 - 消费者模式, Acceptor 与 Poller 线程之间通过 Queue 通信")]),s._v(".")]),s._v(" "),t("h6",{attrs:{id:"_3-poller"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-poller"}},[s._v("#")]),s._v(" 3.Poller")]),s._v(" "),t("p",[s._v("Poller 本质是一个 Selector, 它内部维护一个 Queue, 这个 Queue 定义如下:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SynchronizedQueue")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("PollerEvent")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" events "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SynchronizedQueue")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("SynchronizedQueue 的方法比如 offer, poll, size 和 clear 方法, 都使用了 Synchronized 关键字进行修饰, 用来保证"),t("strong",[s._v("同一时刻只有一个 Acceptor 线程对 Queue 进行读写")]),s._v(". 同时有多个 Poller 线程在运行, 每个 Poller 线程都有自己的 Queue. 每个 Poller 线程可能同时被多个 Acceptor 线程调用来注册 PollerEvent. 同样 Poller 的个数可以通过 pollers 参数配置.")]),s._v(" "),t("p",[s._v("**Poller 不断的通过内部的 Selector 对象向内核查询 Channel 的状态, 一旦可读就生成任务类 SocketProcessor 交给 Executor 去处理. Poller 的另一个重要任务是循环遍历检查自己所管理的 SocketChannel 是否已经超时, 如果有超时就关闭这个 SocketChannel. **")]),s._v(" "),t("h6",{attrs:{id:"_4-socketprocessor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-socketprocessor"}},[s._v("#")]),s._v(" 4.SocketProcessor")]),s._v(" "),t("p",[s._v("Poller 会创建 SocketProcessor 任务类交给"),t("strong",[s._v("线程池")]),s._v("处理, 而 SocketProcessor 实现了 Runnable 接口, 用来"),t("strong",[s._v("定义 Executor 中线程所执行的任务")]),s._v(", 主要就是调用 Http11Processor 组件来处理请求. "),t("strong",[s._v("Http11Processor 读取 Channel 的数据来生成 ServletRequest 对象")]),s._v(", 这里需要注意:")]),s._v(" "),t("p",[s._v("Http11Processor 并不是直接读取 Channel 的. 这是因为 Tomcat 支持同步非阻塞 I/O 模型和异步 I/O 模型, 在 Java API 中, 相应的 Channel 类也是不一样的, 比如有 AsynchronousSocketChannel 和 SocketChannel, 为了对 Http11Processor 屏蔽这些差异, Tomcat 设计了一个"),t("strong",[s._v("包装类叫作 SocketWrapper, Http11Processor 只调用 SocketWrapper 的方法去读写数据")]),s._v(".")]),s._v(" "),t("h6",{attrs:{id:"_5-executor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-executor"}},[s._v("#")]),s._v(" 5.Executor")]),s._v(" "),t("p",[s._v("Executor 是 Tomcat "),t("strong",[s._v("定制版的线程池")]),s._v(", 它负责创建真正干活的工作线程, 干什么活呢? 就是执行 SocketProcessor 的 run() 方法, 也就是"),t("strong",[s._v("解析请求并通过容器来处理请求, 最终会调用到 Servlet")]),s._v(". 后面会用专门介绍 Tomcat 怎么扩展和使用 Java 原生的线程池.")]),s._v(" "),t("h5",{attrs:{id:"高并发思路"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#高并发思路"}},[s._v("#")]),s._v(" 高并发思路")]),s._v(" "),t("p",[s._v("在弄清楚 NioEndpoint 的实现原理后, 来考虑一个重要的问题, 怎么把这个过程做到高并发呢?")]),s._v(" "),t("p",[s._v("高并发就是能快速地处理大量的请求, 需要"),t("strong",[s._v("合理设计线程模型让 CPU 忙起来, 尽量不要让线程阻塞")]),s._v(", 因为一阻塞, CPU 就闲下来了. 另外就是有多少任务, 就用相应规模的线程数去处理. 可以注意到 "),t("strong",[s._v("NioEndpoint 要完成三件事情: 接收连接, 检测 I/O 事件以及处理请求, 那么最核心的就是把这三件事情分开, 用不同规模的线程去处理, 比如用专门的线程组去跑 Acceptor, 并且 Acceptor 的个数可以配置; 用专门的线程组去跑 Poller, Poller 的个数也可以配置; 最后具体任务的执行也由专门的线程池来处理, 也可以配置线程池的大小")]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"总结-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结-2"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),t("p",[s._v("I/O 模型是为了解决内存和外部设备速度差异的问题. 平时说的"),t("strong",[s._v("阻塞或非阻塞")]),s._v("是指应用程序在"),t("strong",[s._v("发起 I/O 操作时, 是立即返回还是等待")]),s._v(". 而"),t("strong",[s._v("同步和异步")]),s._v(", 是指应用程序在与内核通信时, **数据从内核空间到应用空间的拷贝, 是由内核主动发起还是由应用程序来触发. **")]),s._v(" "),t("p",[s._v("在 Tomcat 中, "),t("strong",[s._v("EndPoint 组件的主要工作就是处理 I/O, 而 NioEndpoint 利用 Java NIO API 实现了多路复用 I/O 模型")]),s._v(". 其中关键的一点是, 读写数据的线程自己不会阻塞在 I/O 等待上, 而是把这个工作交给 Selector. 同时 Tomcat 在这个过程中运用到了很多 Java 并发编程技术, 比如 AQS, 原子类, 并发容器, 线程池等, 都值得细细品味.")]),s._v(" "),t("h4",{attrs:{id:"_15-nio2endpoint组件-tomcat如何实现异步io"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_15-nio2endpoint组件-tomcat如何实现异步io"}},[s._v("#")]),s._v(" 15.Nio2Endpoint组件:Tomcat如何实现异步IO?")]),s._v(" "),t("p",[s._v("前面提到了 5 种 I/O 模型, 相应的 Java 提供了 BIO, NIO 和 NIO.2 这些 API 来实现这些 I/O 模型. BIO 是同步阻塞, NIO 是同步非阻塞, 那 NIO.2 又是什么呢? NIO 已经足够好了, 为什么还要 NIO.2 呢?")]),s._v(" "),t("p",[t("strong",[s._v("NIO 和 NIO.2 最大的区别是, 一个是同步一个是异步")]),s._v(". 异步最大的特点是, 应用程序不需要自己去"),t("strong",[s._v("触发")]),s._v("数据从内核空间到用户空间的"),t("strong",[s._v("拷贝")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v('为什么是应用程序去 "触发" 数据的拷贝, 而不是直接从内核拷贝数据呢? 这是因为应用程序是不能访问内核空间的, 因此数据拷贝肯定是由内核来做, 关键是谁来触发这个动作')]),s._v(".")]),s._v(" "),t("p",[s._v("**是内核主动将数据拷贝到用户空间并通知应用程序. 还是等待应用程序通过 Selector 来查询, 当数据就绪后, 应用程序再发起一个 read 调用, 这时内核再把数据从内核空间拷贝到用户空间. **")]),s._v(" "),t("p",[s._v("需要注意的是, 数据从内核空间拷贝到用户空间这段时间, 应用程序还是阻塞的. 所以可以看到异步的效率是高于同步的, 因为异步模式下应用程序始终不会被阻塞.")]),s._v(" "),t("p",[s._v("下面以网络数据读取为例, 来说明异步模式的工作过程.")]),s._v(" "),t("p",[s._v("**首先, 应用程序在调用 read API 的同时告诉内核两件事情: 数据准备好了以后拷贝到哪个 Buffer, 以及调用哪个回调函数去处理这些数据. 之后, 内核接到这个 read 指令后, 等待网卡数据到达, 数据到了后, 产生硬件中断, 内核在中断程序里把数据从网卡拷贝到内核空间, 接着做 TCP/IP 协议层面的数据解包和重组, 再把数据拷贝到应用程序指定的 Buffer, 最后调用应用程序指定的回调函数. **")]),s._v(" "),t("p",[s._v("可以通过下面这张图来回顾一下同步与异步的区别:")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405161330-quo98wb.jpg",alt:""}})]),s._v(" "),t("p",[s._v('可以看到在异步模式下, 应用程序当了"甩手掌柜", 内核则忙前忙后, 但最大限度提高了 I/O 通信的效率. Windows 的 IOCP 和 Linux 内核 2.6 的 AIO 都提供了异步 I/O 的支持, '),t("strong",[s._v("Java 的 NIO.2 API 就是对操作系统异步 I/O API 的封装")]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"java-nio-2回顾"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-nio-2回顾"}},[s._v("#")]),s._v(" Java NIO.2回顾")]),s._v(" "),t("p",[s._v("本部分重点关注 Tomcat 是如何实现异步 I/O 模型的, 但在这之前, 先来简单回顾下如何用 Java 的 NIO.2 API 来编写一个服务端程序.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Nio2Server")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("listen")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1. 创建一个线程池")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ExecutorService")]),s._v(" es "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Executors")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("newCachedThreadPool")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2. 创建异步通道群组")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AsynchronousChannelGroup")]),s._v(" tg "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AsynchronousChannelGroup")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("withCachedThreadPool")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("es"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 3. 创建服务端异步通道")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AsynchronousServerSocketChannel")]),s._v(" assc "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AsynchronousServerSocketChannel")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("open")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("tg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 4. 绑定监听端口")]),s._v("\n      assc"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("bind")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("InetSocketAddress")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 5. 监听连接, 传入回调类处理连接请求")]),s._v("\n      assc"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("accept")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AcceptHandler")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br")])]),t("p",[s._v("上面的代码主要做了 5 件事情:")]),s._v(" "),t("ol",[t("li",[s._v("创建一个线程池, 这个线程池用来执行来自内核的回调请求.")]),s._v(" "),t("li",[s._v("创建一个 AsynchronousChannelGroup, 并绑定一个线程池.")]),s._v(" "),t("li",[s._v("创建 AsynchronousServerSocketChannel, 并绑定到 AsynchronousChannelGroup.")]),s._v(" "),t("li",[s._v("绑定一个监听端口.")]),s._v(" "),t("li",[s._v("调用 accept() 方法开始监听连接请求, 同时传入一个回调类去处理连接请求. 请注意, accept() 方法的第一个参数是 this 对象, 就是 Nio2Server 对象本身, 下文还会讲为什么要传入这个参数.")])]),s._v(" "),t("p",[s._v("为什么需要创建一个线程池呢? 其实"),t("strong",[s._v("在异步 I/O 模型里, 应用程序不知道数据在什么时候到达, 因此向内核注册回调函数, 当数据到达时, 内核就会调用这个回调函数. 同时为了提高处理速度, 会提供一个线程池给内核使用, 这样不会耽误内核线程的工作, 内核只需要把工作交给线程池就立即返回了")]),s._v(".")]),s._v(" "),t("p",[s._v("再来看看处理连接的回调类 AcceptHandler 是什么样的.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// AcceptHandler 类实现了 CompletionHandler 接口的 completed 方法. 它还有两个模板参数, 第一个是异步通道, 第二个就是 Nio2Server 本身")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AcceptHandler")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CompletionHandler")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AsynchronousSocketChannel")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Nio2Server")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 具体处理连接请求的就是 completed() 方法, 它有两个参数: 第一个是异步通道, 第二个就是上面传入的 NioServer 对象")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("completed")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AsynchronousSocketChannel")]),s._v(" asc"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Nio2Server")]),s._v(" attachment"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("  \n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 调用 accept 方法继续接收其他客户端的请求")]),s._v("\n      attachment"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("assc"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("accept")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("attachment"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1. 先分配好 Buffer, 告诉内核, 数据拷贝到哪里去")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ByteBuffer")]),s._v(" buf "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ByteBuffer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("allocate")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1024")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2. 调用 read 函数读取数据, 除了把 buf 作为参数传入, 还传入读回调类")]),s._v("\n      channel"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("read")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("buf"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" buf"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ReadHandler")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("asc"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br")])]),t("p",[s._v("可以看到它实现了 CompletionHandler 接口, 下面先看看 CompletionHandler 接口的定义.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CompletionHandler")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("A")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("completed")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),s._v(" result"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("A")]),s._v(" attachment"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("failed")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Throwable")]),s._v(" exc"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("A")]),s._v(" attachment"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[t("strong",[s._v("CompletionHandler 接口有两个模板参数 V 和 A, 分别表示 I/O 调用的返回值和附件类")]),s._v(". 比如 accept 的返回值就是 AsynchronousSocketChannel, 而附件类由用户自己决定, 在 accept 的调用中, 传入了一个 Nio2Server. 因此 AcceptHandler 带有了两个模板参数: AsynchronousSocketChannel 和 Nio2Server.")]),s._v(" "),t("p",[s._v("CompletionHandler 有两个方法: "),t("strong",[s._v("completed() 和 failed()")]),s._v(" , 分别在 I/O 操作成功和失败时调用. completed() 方法有两个参数, 其实就是前面说的两个模板参数. 也就是说, Java 的 NIO.2 在"),t("strong",[s._v("调用回调方法时, 会把返回值和附件类当作参数传给 NIO.2 的使用者")]),s._v(".")]),s._v(" "),t("p",[s._v("下面再来看看处理读的回调类 ReadHandler 长什么样子.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ReadHandler")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CompletionHandler")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ByteBuffer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("   \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 读取到消息后的处理  ")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("  \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("completed")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" result"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ByteBuffer")]),s._v(" attachment"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("  \n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// attachment 就是数据, 调用 flip 操作, 其实就是把读的位置移动最前面")]),s._v("\n        attachment"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("flip")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 读取数据")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" \n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("  \n \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("failed")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Throwable")]),s._v(" exc"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("A")]),s._v(" attachment"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[s._v("read() 调用的返回值是一个整型数, 所以回调方法里的"),t("strong",[s._v("第一个参数就是一个整型, 表示有多少数据")]),s._v("被读取到了 Buffer 中. 第二个参数是一个 ByteBuffer, 这是因为在调用 read() 方法时, 把用来"),t("strong",[s._v("存放数据的 ByteBuffer 当作附件类")]),s._v("传进去了, 所以在回调方法里, 有 ByteBuffer 类型的参数, "),t("strong",[s._v("可以直接从这个 ByteBuffer 里获取数据")]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"nio2endpoint"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nio2endpoint"}},[s._v("#")]),s._v(" Nio2Endpoint")]),s._v(" "),t("p",[s._v("掌握了 Java NIO.2 API 的使用以及服务端程序的工作原理之后, 再来理解 Tomcat 的异步 I/O 实现就不难了. 先通过一张图来看看 Nio2Endpoint 有哪些组件.")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405161330-ql4r11f.jpg",alt:""}})]),s._v(" "),t("p",[s._v("从图上看, 总体工作流程跟 NioEndpoint 是相似的.")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("LimitLatch 是连接控制器, 它负责控制最大连接数.")])]),s._v(" "),t("li",[t("p",[s._v("Nio2Acceptor 扩展了 Acceptor, 用异步 I/O 的方式来接收连接, 跑在一个单独的线程里, 也是一个线程组. Nio2Acceptor 接收新的连接后, 得到一个 AsynchronousSocketChannel, Nio2Acceptor 把 AsynchronousSocketChannel 封装成一个 Nio2SocketWrapper, 并创建一个 SocketProcessor 任务类交给线程池处理, 并且 SocketProcessor 持有 Nio2SocketWrapper 对象.")])]),s._v(" "),t("li",[t("p",[s._v("Executor 在执行 SocketProcessor 时, SocketProcessor 的 run() 方法会调用 "),t("strong",[s._v("Http11Processor")]),s._v(" 来处理请求, Http11Processor 会通过 Nio2SocketWrapper 读取和解析请求数据, 请求经过容器处理后, 再把响应通过 Nio2SocketWrapper 写出.")])])]),s._v(" "),t("p",[s._v("需要注意 Nio2Endpoint 跟 NioEndpoint 的一个明显不同点是, "),t("mark",[t("strong",[s._v("Nio2Endpoint 中没有 Poller 组件, 也就是没有 Selector. 这是为什么呢? 因为在异步 I/O 模式下, Selector 的工作交给内核来做了")])]),s._v("​ **. **")]),s._v(" "),t("p",[s._v("接下来详细介绍一下 Nio2Endpoint 各组件的设计.")]),s._v(" "),t("h6",{attrs:{id:"_1-nio2acceptor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-nio2acceptor"}},[s._v("#")]),s._v(" 1.Nio2Acceptor")]),s._v(" "),t("p",[s._v("和 NioEndpint 一样, Nio2Endpoint 的基本思路是用 LimitLatch 组件来控制连接数, 但是 Nio2Acceptor 的监听连接的过程不是在一个死循环里不断的调 accept() 方法, 而是"),t("strong",[s._v("通过回调函数")]),s._v("来完成的. 来看看它的连接监听方法:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[s._v("serverSock"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("accept")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("其实就是调用了 accept() 方法, 注意它的第二个参数是 this, 表明 Nio2Acceptor 自己就是处理连接的回调类, 因此 Nio2Acceptor 实现了 CompletionHandler() 接口. 那么它是如何实现 CompletionHandler 接口的呢?")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Nio2Acceptor")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Acceptor")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AsynchronousSocketChannel")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CompletionHandler")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AsynchronousSocketChannel")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Void")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  \n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("completed")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AsynchronousSocketChannel")]),s._v(" socket"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Void")]),s._v(" attachment"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isRunning")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isPaused")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getMaxConnections")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果没有连接限制, 继续接收新的连接")]),s._v("\n            serverSock"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("accept")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果有连接限制, 就在线程池里跑 Run 方法, Run 方法会检查连接数")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getExecutor")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("execute")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 处理请求")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setSocketOptions")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("socket"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("closeSocket")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("socket"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br")])]),t("p",[s._v("可以看到 CompletionHandler 的两个模板参数分别是 AsynchronousServerSocketChannel 和 Void, 前面说过第一个参数就是 accept() 方法的返回值, 第二个参数是附件类, 由用户自己决定, 这里为 Void. completed() 方法的处理逻辑比较简单:")]),s._v(" "),t("ul",[t("li",[s._v("如果没有连接限制, 继续在本线程中调用 accept() 方法接收新的连接.")]),s._v(" "),t("li",[s._v("如果有连接限制, 就在线程池里跑 run() 方法去接收新的连接. 那为什么要跑 run() 方法呢, 因为在 run() 方法里会检查连接数, 当连接达到最大数时, 线程可能会被 LimitLatch 阻塞. 为什么要放在线程池里跑呢? 这是因为如果放在当前线程里执行, completed() 方法可能被阻塞, 会导致这个回调方法一直不返回.")])]),s._v(" "),t("p",[s._v("接着 completed() 方法会调用 setSocketOptions() 方法, 在这个方法里, 会创建 Nio2SocketWrapper 和 SocketProcessor, 并交给线程池处理.")]),s._v(" "),t("h6",{attrs:{id:"_2-nio2socketwrapper"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-nio2socketwrapper"}},[s._v("#")]),s._v(" 2.Nio2SocketWrapper")]),s._v(" "),t("p",[s._v("Nio2SocketWrapper 的主要作用是"),t("strong",[s._v("封装 Channel")]),s._v(", 并提供接口给 Http11Processor 读写数据. 讲到这里你是不是有个疑问: Http11Processor 是不能阻塞等待数据的, 按照异步 I/O 的套路, Http11Processor 在调用 Nio2SocketWrapper 的 read() 方法时需要注册回调类, read() 调用会立即返回, 问题是立即返回后 Http11Processor 还没有读到数据, 怎么办呢? 这个请求的处理不就失败了吗?")]),s._v(" "),t("p",[s._v("为了解决这个问题, Http11Processor 是"),t("strong",[s._v("通过 2 次 read() 调用来完成数据读取操作")]),s._v("的.")]),s._v(" "),t("ul",[t("li",[s._v("第一次 read 调用: 连接刚刚建立好后, Acceptor 创建 SocketProcessor 任务类交给线程池去处理, Http11Processor 在处理请求的过程中, 会调用 Nio2SocketWrapper 的 read() 方法发出第一次读请求, 同时注册了回调类 readCompletionHandler, 因为数据没读到, Http11Processor 把当前的 Nio2SocketWrapper 标记为数据不完整. "),t("strong",[s._v("接着 SocketProcessor 线程被回收, Http11Processor 并没有阻塞等待数据")]),s._v(". 这里请注意, Http11Processor 维护了一个 Nio2SocketWrapper 列表, 也就是维护了连接的状态.")]),s._v(" "),t("li",[s._v("第二次 read 调用: 当数据到达后, 内核已经把数据拷贝到 Http11Processor 指定的 Buffer 里, 同时回调类 readCompletionHandler 被调用, 在这个回调处理方法里会"),t("strong",[s._v("重新创建一个新的 SocketProcessor 任务来继续处理这个连接")]),s._v(", 而这个新的 SocketProcessor 任务类持有原来那个 Nio2SocketWrapper, 这一次 Http11Processor 可以通过 Nio2SocketWrapper 读取数据了, 因为数据已经到了应用层的 Buffer.")])]),s._v(" "),t("p",[s._v("这个回调类 readCompletionHandler 的源码如下, 最关键的一点是, "),t("strong",[s._v("Nio2SocketWrapper 是作为附件类来传递的")]),s._v(", 这样在回调函数里能拿到所有的上下文.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("readCompletionHandler "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CompletionHandler")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SocketWrapperBase")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Nio2Channel")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("completed")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" nBytes"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SocketWrapperBase")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Nio2Channel")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" attachment"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 通过附件类 SocketWrapper 拿到所有的上下文")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Nio2SocketWrapper")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getEndpoint")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("processSocket")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("attachment"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SocketEvent")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("OPEN_READ")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("failed")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Throwable")]),s._v(" exc"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SocketWrapperBase")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Nio2Channel")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" attachment"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("h5",{attrs:{id:"总结-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结-3"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),t("p",[s._v("在异步 I/O 模型里, 内核做了很多事情, 它把数据准备好, 并拷贝到用户空间, 再通知应用程序去处理, 也就是调用应用程序注册的回调函数. Java 在操作系统 异步 IO API 的基础上进行了封装, 提供了 Java NIO.2 API, 而 Tomcat 的异步 I/O 模型就是基于 Java NIO.2 实现的.")]),s._v(" "),t("p",[s._v("由于 NIO 和 NIO.2 的 API 接口和使用方法完全不同, 可以想象一个系统中如果已经支持同步 I/O, 要再支持异步 I/O, 改动是比较大的, 很有可能不得不重新设计组件之间的接口. 但是 Tomcat 通过充分的抽象, 比如 SocketWrapper 对 Channel 的封装, 再加上 Http11Processor 的两次 read 调用, 巧妙地解决了这个问题, 使得协议处理器 Http11Processor 和 I/O 通信处理器 Endpoint 之间的接口保持不变.")]),s._v(" "),t("h4",{attrs:{id:"_16-aprendpoint组件-tomcat-apr提高io性能的秘密"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_16-aprendpoint组件-tomcat-apr提高io性能的秘密"}},[s._v("#")]),s._v(" 16.AprEndpoint组件:Tomcat APR提高IO性能的秘密")]),s._v(" "),t("p",[s._v("在使用 Tomcat 时, 会在启动日志里看到这样的提示信息:")]),s._v(" "),t("blockquote",[t("p",[s._v("The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: ****")])]),s._v(" "),t("p",[s._v("这句话的意思就是推荐你去安装 APR 库, 可以提高系统性能. 那什么是 APR 呢?")]),s._v(" "),t("p",[s._v("APR(Apache Portable Runtime Libraries)是 Apache 可移植运行时库, 它是用 C 语言实现的, 其目的是向上层应用程序提供一个跨平台的操作系统接口库. Tomcat 可以用它来处理包括文件和网络 I/O, 从而提升性能. 前面提到过, Tomcat 支持的连接器有 NIO, NIO.2 和 APR. 跟 NioEndpoint 一样, AprEndpoint 也实现了非阻塞 I/O, 它们的区别是: NioEndpoint 通过调用 Java 的 NIO API 来实现非阻塞 I/O, 而 AprEndpoint 是通过 JNI 调用 APR 本地库而实现非阻塞 I/O 的.")]),s._v(" "),t("p",[s._v("那同样是非阻塞 I/O, 为什么 Tomcat 会提示使用 APR 本地库的性能会更好呢? 这是因为在某些场景下, 比如需要频繁与操作系统进行交互, Socket 网络通信就是这样一个场景, 特别是如果 Web 应用使用了 TLS 来加密传输, 由于 TLS 协议在握手过程中有多次网络交互, 在这种情况下 Java 跟 C 语言程序相比还是有一定的差距, 而这正是 APR 的强项.")]),s._v(" "),t("p",[s._v("Tomcat 本身是 Java 编写的, 为了调用 C 语言编写的 APR, 需要"),t("strong",[s._v("通过 JNI 方式")]),s._v("来调用. JNI(Java Native Interface) 是 JDK 提供的一个编程接口, 它允许 Java 程序调用其他语言编写的程序或者代码库, 其实 JDK 本身的实现也大量用到 JNI 技术来调用本地 C 程序库.")]),s._v(" "),t("p",[s._v("本部分首先会讲 AprEndpoint 组件的工作过程, 接着会在原理的基础上分析 APR 提升性能的一些秘密.")]),s._v(" "),t("h5",{attrs:{id:"aprendpoint工作过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aprendpoint工作过程"}},[s._v("#")]),s._v(" AprEndpoint工作过程")]),s._v(" "),t("p",[s._v("下面通过一张图来理解 AprEndpoint 的工作过程.")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405161350-110183t.jpg",alt:""}})]),s._v(" "),t("p",[s._v("它跟 NioEndpoint 的图很像, 从左到右有 LimitLatch, Acceptor, Poller, SocketProcessor 和 Http11Processor, 只是 Acceptor 和 Poller 的实现和 NioEndpoint 不同. 接下来分别来讲讲这两个组件.")]),s._v(" "),t("h6",{attrs:{id:"_1-acceptor-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-acceptor-2"}},[s._v("#")]),s._v(" 1.Acceptor")]),s._v(" "),t("p",[s._v("Accpetor 的功能就是监听连接, 接收并建立连接. 它的本质就是调用了四个操作系统 API: socket, bind, listen 和 accept. 那 Java 语言如何直接调用 C 语言 API 呢? 答案就是通过 "),t("strong",[s._v("JNI")]),s._v(". 具体来说就是两步: 先封装一个 Java 类, 在里面定义一堆用 "),t("strong",[s._v("native 关键字")]),s._v("修饰的方法, 像下面这样.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Socket")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 用 native 修饰这个方法, 表明这个函数是 C 语言实现")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("native")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("create")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" family"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" type"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" protocol"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" cont"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n                        \n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("native")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("bind")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" sock"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" sa"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("native")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("listen")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" sock"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" backlog"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("native")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("accept")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" sock"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[s._v("接着用 C 代码实现这些方法, 比如 bind() 函数就是这样实现的:")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 注意函数的名字要符合 JNI 规范的要求")]),s._v("\nJNIEXPORT jint JNICALL \n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Java_org_apache_tomcat_jni_Socket_bind")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("JNIEnv "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" jlong sock"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("jlong sa"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t    jint rv "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" APR_SUCCESS"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("tcn_socket_t")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("s "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("tcn_socket_t")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("sock"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("apr_sockaddr_t")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("apr_sockaddr_t")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" sa"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 调用 APR 库自己实现的 bind 函数")]),s._v("\n\t    rv "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("jint"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("apr_socket_bind")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("sock"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" rv"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("p",[s._v("要注意的是函数名字要符合 JNI 的规范, 以及 Java 和 C 语言如何互相传递参数, 比如在 C 语言有指针, Java 没有指针的概念, 所以在 Java 中用 long 类型来表示指针. "),t("strong",[s._v("AprEndpoint 的 Acceptor 组件就是调用了 APR 实现的四个 API")]),s._v(".")]),s._v(" "),t("h6",{attrs:{id:"_2-poller"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-poller"}},[s._v("#")]),s._v(" 2.Poller")]),s._v(" "),t("p",[s._v("Acceptor 接收到一个新的 Socket 连接后, 按照 NioEndpoint 的实现, 它会把这个 Socket 交给 Poller 去查询 I/O 事件. AprEndpoint 也是这样做的, 不过 AprEndpoint 的 Poller 并不是调用 Java NIO 里的 Selector 来查询 Socket 的状态, "),t("strong",[s._v("而是通过 JNI 调用 APR 中的 poll 方法, 而 APR 又是调用了操作系统的 epoll API 来实现的")]),s._v(".")]),s._v(" "),t("p",[s._v("这里有个特别的地方是在 AprEndpoint 中, 可以配置一个叫 "),t("code",[s._v("deferAccept")]),s._v("​ 的参数, 它对应的是 TCP 协议中的"),t("code",[s._v("TCP_DEFER_ACCEPT")]),s._v("​, 设置这个参数后, 当 TCP 客户端有新的连接请求到达时, "),t("strong",[s._v("TCP 服务端先不建立连接, 而是再等等, 直到客户端有请求数据发过来时再建立连接. 这样的好处是服务端不需要用 Selector 去反复查询请求数据是否就绪")]),s._v(".")]),s._v(" "),t("p",[s._v("这是一种 TCP 协议层的优化, 不是每个操作系统内核都支持, 因为 Java 作为一种跨平台语言, 需要屏蔽各种操作系统的差异, 因此并没有把这个参数提供给用户; 但是对于 APR 来说, 它的目的就是尽可能提升性能, 因此它向用户暴露了这个参数.")]),s._v(" "),t("h5",{attrs:{id:"apr提升性能的秘密"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#apr提升性能的秘密"}},[s._v("#")]),s._v(" APR提升性能的秘密")]),s._v(" "),t("p",[s._v("APR 连接器之所以能提高 Tomcat 的性能, 除了 APR 本身是 C 程序库之外, 还有哪些提速的秘密呢?")]),s._v(" "),t("h6",{attrs:{id:"_1-jvm堆-vs-本地内存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-jvm堆-vs-本地内存"}},[s._v("#")]),s._v(" 1.JVM堆 VS 本地内存")]),s._v(" "),t("p",[s._v("由于 Java 的类实例一般在 JVM 堆上分配, 而 Java 是通过 JNI 调用 C 代码来实现 Socket 通信的, 那么 C 代码在运行过程中需要的内存又是从哪里分配的呢? C 代码能否直接操作 Java 堆?")]),s._v(" "),t("p",[s._v("为了回答这些问题, 先来说说 "),t("strong",[s._v("JVM 和用户进程")]),s._v("的关系. 如果你想运行一个 Java 类文件, 可以用下面的 Java 命令来执行.")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("java my.class\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("这个命令行中的 "),t("code",[s._v("java")]),s._v("​ 其实是"),t("strong",[s._v("一个可执行程序, 这个程序会创建 JVM 来加载和运行 Java 类")]),s._v(". 操作系统会"),t("strong",[s._v("创建一个进程")]),s._v("来执行这个 "),t("code",[s._v("java")]),s._v("​ 可执行程序, 而每个进程都有自己的"),t("strong",[s._v("虚拟地址空间, JVM 用到的内存(包括堆, 栈和方法区)就是从进程的虚拟地址空间上分配的")]),s._v(". 请注意, JVM 内存只是进程空间的一部分, 除此之外进程空间内还有代码段, 数据段, 内存映射区, 内核空间等. 从 JVM 的角度看, JVM 内存之外的部分叫作本地内存, C 程序代码在运行过程中用到的内存就是本地内存中分配的. 下面通过一张图来理解一下.")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405161350-v6dugwu.jpg",alt:""}})]),s._v(" "),t("p",[s._v("Tomcat 的 Endpoint 组件在接收网络数据时需要预先分配好一块 Buffer, 所谓的 Buffer 就是字节数组 "),t("code",[s._v("byte[]")]),s._v("​, Java "),t("strong",[s._v("通过 JNI 调用把这块 Buffer 的地址传给 C 代码, C 代码通过操作系统 API 读取 Socket 并把数据填充到这块 Buffer")]),s._v(". Java NIO API 提供了两种 Buffer 来接收数据: HeapByteBuffer 和 DirectByteBuffer, 下面的代码演示了如何创建两种 Buffer.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 分配 HeapByteBuffer")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ByteBuffer")]),s._v(" buf "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ByteBuffer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("allocate")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1024")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 分配 DirectByteBuffer")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ByteBuffer")]),s._v(" buf "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ByteBuffer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("allocateDirect")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1024")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("创建好 Buffer 后直接传给 Channel 的 read 或者 write 函数, 最终这块 Buffer 会通过 JNI 调用传递给 C 程序.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 将 buf 作为 read 函数的参数")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" bytesRead "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" socketChannel"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("read")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("buf"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("那 HeapByteBuffer 和 DirectByteBuffer 有什么区别呢? HeapByteBuffer 对象本身在 JVM 堆上分配, 并且它持有的字节数组 "),t("code",[s._v("byte[]")]),s._v("​ 也是在 JVM 堆上分配. 但是如果用 **HeapByteBuffer ** 来接收网络数据, "),t("strong",[s._v("需要把数据从内核先拷贝到一个临时的本地内存, 再从临时本地内存拷贝到 JVM 堆")]),s._v(", 而不是直接从内核拷贝到 JVM 堆上. 这是为什么呢? 这是因为数据从内核拷贝到 JVM 堆的过程中, JVM 可能会发生 GC, GC 过程中对象可能会被移动, 也就是说 JVM 堆上的字节数组可能会被移动, 这样的话 Buffer 地址就失效了. 如果这中间经过本地内存中转, 从本地内存到 JVM 堆的拷贝过程中 JVM 可以保证不做 GC.")]),s._v(" "),t("p",[s._v("如果使用 HeapByteBuffer, 那么 JVM 堆和内核之间多了一层中转, 而 DirectByteBuffer 可以用来解决这个问题, "),t("strong",[s._v("DirectByteBuffer 对象本身在 JVM 堆上, 但是它持有的字节数组不是从 JVM 堆上分配的, 而是从本地内存分配的")]),s._v(". DirectByteBuffer 对象中有个 long 类型字段 address, 记录着本地内存的地址, 这样在接收数据的时候, 直接把这个本地内存地址传递给 C 程序, C 程序会将网络数据从内核拷贝到这个本地内存, JVM 可以直接读取这个本地内存, 这种方式比 HeapByteBuffer "),t("strong",[s._v("少了一次拷贝")]),s._v(", 因此一般来说它的速度会比 HeapByteBuffer 快好几倍. 可以通过上面的图加深理解.")]),s._v(" "),t("p",[t("strong",[s._v("Tomcat 中的 AprEndpoint 就是通过 DirectByteBuffer 来接收数据的, 而 NioEndpoint 和 Nio2Endpoint 是通过 HeapByteBuffer 来接收数据的")]),s._v(". 你可能会问, NioEndpoint 和 Nio2Endpoint 为什么不用 DirectByteBuffer 呢? 这是因为本地内存不好管理, 发生内存泄漏难以定位, 从稳定性考虑, NioEndpoint 和 Nio2Endpoint 没有去冒这个险.")]),s._v(" "),t("h6",{attrs:{id:"_2-sendfile"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-sendfile"}},[s._v("#")]),s._v(" 2.sendfile")]),s._v(" "),t("p",[s._v("再来考虑另一个网络通信的场景, 也就是静态文件的处理. 浏览器通过 Tomcat 来获取一个 HTML 文件, 而 Tomcat 的处理逻辑无非是两步:")]),s._v(" "),t("ol",[t("li",[s._v("从磁盘读取 HTML 到内存.")]),s._v(" "),t("li",[s._v("将这段内存的内容通过 Socket 发送出去.")])]),s._v(" "),t("p",[s._v("但是在传统方式下, "),t("strong",[s._v("有很多次的内存拷贝")]),s._v(":")]),s._v(" "),t("ul",[t("li",[s._v("读取文件时, 首先是内核把文件内容读取到内核缓冲区.")]),s._v(" "),t("li",[s._v("如果使用 HeapByteBuffer, 文件数据从内核到 JVM 堆内存需要经过本地内存中转.")]),s._v(" "),t("li",[s._v("同样在将文件内容推入网络时, 从 JVM 堆到内核缓冲区需要经过本地内存中转.")]),s._v(" "),t("li",[s._v("最后还需要把文件从内核缓冲区拷贝到网卡缓冲区.")])]),s._v(" "),t("p",[s._v("从下面的图可知这个过程有 6 次内存拷贝, 并且 read 和 write 等系统调用将导致进程从用户态到内核态的切换, 会耗费大量的 CPU 和内存资源.")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405161350-4yleyiz.jpg",alt:""}})]),s._v(" "),t("p",[s._v("而 Tomcat 的 AprEndpoint 通过"),t("strong",[s._v("操作系统层面的 sendfile 特性")]),s._v("解决了这个问题, sendfile 系统调用方式非常简洁.")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sendfile")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("socket"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" file"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" len"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("它带有两个关键参数: "),t("strong",[s._v("Socket 和文件句柄")]),s._v(". 将文件从磁盘写入 Socket 的过程只有两步:")]),s._v(" "),t("p",[s._v("第一步: 将文件内容读取到内核缓冲区.")]),s._v(" "),t("p",[s._v("第二步: 数据并没有从内核缓冲区复制到 Socket 关联的缓冲区, 只有记录数据位置和长度的描述符被添加到 Socket 缓冲区中; 接着把数据直接从内核缓冲区传递给网卡. 这个过程可以看下面的图.")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405161350-6dxzoz5.jpg",alt:""}})]),s._v(" "),t("h5",{attrs:{id:"总结-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结-4"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),t("p",[s._v("对于一些需要频繁与操作系统进行交互的场景, 比如网络通信, Java 的效率没有 C 语言高, 特别是 TLS 协议握手过程中需要多次网络交互, 这种情况下使用 APR 本地库能够显著提升性能.")]),s._v(" "),t("p",[s._v("除此之外, APR 提升性能的秘密还有: 通过 DirectByteBuffer 避免了 JVM 堆与本地内存之间的内存拷贝; 通过 sendfile 特性避免了内核与应用之间的内存拷贝以及用户态和内核态的切换. 其实很多高性能网络通信组件, 比如 Netty, 都是通过 DirectByteBuffer 来收发网络数据的. 由于本地内存难于管理, Netty 采用了本地内存池技术.")]),s._v(" "),t("h4",{attrs:{id:"_17-executor组件-tomcat如何扩展java线程池"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_17-executor组件-tomcat如何扩展java线程池"}},[s._v("#")]),s._v(" 17.Executor组件:Tomcat如何扩展Java线程池?")]),s._v(" "),t("p",[s._v('在开发中经常会碰到"池"的概念, 比如数据库连接池, 内存池, 线程池, 常量池等. 为什么需要“池”呢? 程序运行的本质, 就是通过使用系统资源(CPU, 内存, 网络, 磁盘等)来完成信息的处理, 比如在 JVM 中创建一个对象实例需要消耗 CPU 和内存资源, 如果你的程序需要频繁创建大量的对象, 并且这些对象的存活时间短, 就意味着需要进行频繁销毁, 那么很有可能这部分代码会成为性能的瓶颈.')]),s._v(" "),t("p",[s._v('而"池"就是用来解决这个问题的, 简单来说, 对象池就是把用过的对象保存起来, 等下一次需要这种对象的时候, 直接从对象池中拿出来重复使用, 避免频繁地创建和销毁. 在 Java 中万物皆对象, 线程也是一个对象, Java 线程是对操作系统线程的封装, 创建 Java 线程也需要消耗系统资源, 因此就有了线程池. JDK 中提供了线程池的默认实现, 也可以通过扩展 Java 原生线程池来实现自己的线程池.')]),s._v(" "),t("p",[s._v("同样, 为了提高处理能力和并发度, Web 容器一般会把"),t("strong",[s._v("处理请求的工作放到线程池里")]),s._v("来执行, Tomcat 扩展了原生的 Java 线程池, 来满足 Web 容器高并发的需求, 下面就来学习一下 Java 线程池的原理, 以及 Tomcat 是如何扩展 Java 线程池的.")]),s._v(" "),t("h5",{attrs:{id:"java线程池"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java线程池"}},[s._v("#")]),s._v(" Java线程池")]),s._v(" "),t("p",[s._v("简单的说, Java 线程池里内部维护一个"),t("strong",[s._v("线程数组和一个任务队列")]),s._v(", 当任务处理不过来的时, 就把任务放到队列里慢慢处理.")]),s._v(" "),t("h6",{attrs:{id:"_1-threadpoolexecutor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-threadpoolexecutor"}},[s._v("#")]),s._v(" 1.ThreadPoolExecutor")]),s._v(" "),t("p",[s._v("先来看看 Java 线程池核心类 ThreadPoolExecutor 的构造函数, 需要知道 ThreadPoolExecutor 是如何使用这些参数的, 这是理解 Java 线程工作原理的关键.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ThreadPoolExecutor")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" corePoolSize"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                          "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" maximumPoolSize"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                          "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" keepAliveTime"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                          "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TimeUnit")]),s._v(" unit"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                          "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BlockingQueue")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Runnable")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" workQueue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                          "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ThreadFactory")]),s._v(" threadFactory"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                          "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RejectedExecutionHandler")]),s._v(" handler"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("每次提交任务时, 如果线程数还没达到核心线程数 "),t("strong",[s._v("corePoolSize")]),s._v(", 线程池就创建新线程来执行. 当线程数达到 **corePoolSize ** 后, 新增的任务就放到工作队列 **workQueue ** 里, 而线程池中的线程则努力地从 **workQueue ** 里拉活来干, 也就是调用 poll 方法来获取任务.")]),s._v(" "),t("p",[s._v("如果任务很多, 并且 "),t("strong",[s._v("workQueue ** 是个有界队列, 队列可能会满, 此时线程池就会")]),s._v("紧急创建新的临时线程**来救场, 如果总的线程数达到了最大线程数 "),t("strong",[s._v("maximumPoolSize")]),s._v(", 则不能再创建新的临时线程了, 转而执行拒绝策略 "),t("strong",[s._v("handler")]),s._v(", 比如抛出异常或者由调用者线程来执行任务等.")]),s._v(" "),t("p",[s._v("如果高峰过去了, 线程池比较闲了怎么办? 临时线程使用 poll("),t("strong",[s._v("keepAliveTime, unit")]),s._v(") 方法从工作队列中拉活干, 请注意 poll 方法设置了超时时间, 如果超时了仍然两手空空没拉到活, 表明它太闲了, 这个线程会被销毁回收.")]),s._v(" "),t("p",[s._v("那还有一个参数 "),t("strong",[s._v("threadFactory ** 是用来做什么的呢? 通过它你可以")]),s._v("扩展原生的线程工厂**, 比如给创建出来的线程取个有意义的名字.")]),s._v(" "),t("h6",{attrs:{id:"_2-fixedthreadpool-cachedthreadpool"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-fixedthreadpool-cachedthreadpool"}},[s._v("#")]),s._v(" 2.FixedThreadPool/CachedThreadPool")]),s._v(" "),t("p",[s._v("Java 提供了一些默认的线程池实现, 比如 FixedThreadPool 和 CachedThreadPool, 它们的本质就是给 ThreadPoolExecutor 设置了不同的参数, 是定制版的 ThreadPoolExecutor.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ExecutorService")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("newFixedThreadPool")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" nThreads"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ThreadPoolExecutor")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nThreads"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" nThreads"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                                  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0L")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TimeUnit")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MILLISECONDS")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                                 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LinkedBlockingQueue")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Runnable")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ExecutorService")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("newCachedThreadPool")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ThreadPoolExecutor")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MAX_VALUE")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                                  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("60L")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TimeUnit")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SECONDS")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                                  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SynchronousQueue")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Runnable")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[s._v("从上面的代码可以看到:")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("FixedThreadPool 有固定长度(nThreads)的线程数组")]),s._v(", 忙不过来时会把任务放到无限长的队列里, 这是因为"),t("strong",[s._v("LinkedBlockingQueue 默认是一个无界队列")]),s._v(".")]),s._v(" "),t("li",[t("strong",[s._v("CachedThreadPool 的 maximumPoolSize 参数值是")]),s._v("​"),t("strong",[s._v("​"),t("code",[s._v("Integer.MAX_VALUE")]),s._v("​")]),s._v("​, 因此它对线程个数不做限制, 忙不过来时无限创建临时线程, 闲下来时再回收. 它的任务队列是 "),t("strong",[s._v("SynchronousQueue")]),s._v(", 表明队列长度为 0.")])]),s._v(" "),t("h5",{attrs:{id:"tomcat线程池"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tomcat线程池"}},[s._v("#")]),s._v(" Tomcat线程池")]),s._v(" "),t("p",[s._v("跟 FixedThreadPool/CachedThreadPool 一样, Tomcat 的线程池也是一个"),t("strong",[s._v("定制版的 ThreadPoolExecutor")]),s._v(".")]),s._v(" "),t("h6",{attrs:{id:"_1-定制版的threadpoolexecutor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-定制版的threadpoolexecutor"}},[s._v("#")]),s._v(" 1.定制版的ThreadPoolExecutor")]),s._v(" "),t("p",[s._v("通过比较 FixedThreadPool 和 CachedThreadPool, 可以发现它们传给 ThreadPoolExecutor 的参数有两个关键点:")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("**是否限制线程个数. **")])]),s._v(" "),t("li",[t("p",[s._v("**是否限制队列长度. **")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code")]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"})])])]),s._v(" "),t("p",[s._v("对于 Tomcat 来说, 这两个资源都需要限制, 也就是说要对高并发进行控制, 否则 CPU 和内存有资源耗尽的风险. 因此 Tomcat 传入的参数是这样的:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 定制版的任务队列")]),s._v("\ntaskqueue "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TaskQueue")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("maxQueueSize"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 定制版的线程工厂")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TaskThreadFactory")]),s._v(" tf "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TaskThreadFactory")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("namePrefix"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" daemon"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getThreadPriority")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 定制版的线程池")]),s._v("\nexecutor "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ThreadPoolExecutor")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getMinSpareThreads")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" \n                                  "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getMaxThreads")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" \n                                  maxIdleTime"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" \n                                  "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TimeUnit")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MILLISECONDS")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                                  taskqueue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" \n                                  tf"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("p",[s._v("可以看到其中的两个关键点:")]),s._v(" "),t("ul",[t("li",[s._v("Tomcat 有自己的定制版任务队列和线程工厂, 并且可以限制任务队列的长度, 它的"),t("strong",[s._v("最大长度是 maxQueueSize")]),s._v(".")]),s._v(" "),t("li",[s._v("Tomcat 对线程数也有限制, 设置了"),t("strong",[s._v("核心线程数(minSpareThreads)和最大线程池数(maxThreads)")]),s._v(" .")])]),s._v(" "),t("p",[s._v("除了资源限制以外, Tomcat 线程池还定制自己的任务处理流程. Java 原生线程池的任务处理逻辑比较简单:")]),s._v(" "),t("ol",[t("li",[s._v("前 corePoolSize 个任务时, 来一个任务就创建一个新线程.")]),s._v(" "),t("li",[s._v("后面再来任务, 就把任务添加到任务队列里让所有的线程去抢, 如果队列满了就创建临时线程.")]),s._v(" "),t("li",[s._v("如果总线程数达到 maximumPoolSize, **执行拒绝策略. **")])]),s._v(" "),t("p",[s._v("Tomcat 线程池扩展了原生的 ThreadPoolExecutor, 通过"),t("strong",[s._v("重写 execute() 方法实现了自己的任务处理逻辑")]),s._v(":")]),s._v(" "),t("ol",[t("li",[s._v("前 corePoolSize 个任务时, 来一个任务就创建一个新线程.")]),s._v(" "),t("li",[s._v("再来任务的话, 就把任务添加到任务队列里让所有的线程去抢, 如果队列满了就创建临时线程.")]),s._v(" "),t("li",[s._v("如果总线程数达到 maximumPoolSize, **则继续尝试把任务添加到任务队列中去. **")]),s._v(" "),t("li",[s._v("**如果缓冲队列也满了, 插入失败, 执行拒绝策略. **")])]),s._v(" "),t("p",[s._v("观察 Tomcat 线程池和 Java 原生线程池的区别, 其实就是在第 3 步, Tomcat 在线程总数达到最大数时, 不是立即执行拒绝策略, 而是再尝试向任务队列添加任务, 添加失败后再执行拒绝策略. 那具体如何实现呢, 其实很简单, 来看一下 Tomcat 线程池的 execute() 方法的核心代码.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ThreadPoolExecutor")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("java"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("util"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("concurrent"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),s._v("ThreadPoolExecutor")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  \n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("execute")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Runnable")]),s._v(" command"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" timeout"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TimeUnit")]),s._v(" unit"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      submittedCount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("incrementAndGet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 调用 Java 原生线程池的 execute 去执行任务")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("super")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("execute")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("command"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RejectedExecutionException")]),s._v(" rx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果总线程数达到 maximumPoolSize, Java 原生线程池执行拒绝策略")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("super")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getQueue")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("instanceof")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TaskQueue")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n              "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TaskQueue")]),s._v(" queue "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TaskQueue")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("super")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getQueue")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n              "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 继续尝试把任务放到任务队列中去")]),s._v("\n                  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("queue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("force")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("command"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" timeout"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" unit"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                      submittedCount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("decrementAndGet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果缓冲队列也满了, 插入失败, 执行拒绝策略. ")]),s._v("\n                      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throw")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RejectedExecutionException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"..."')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n              "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" \n          "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br")])]),t("p",[s._v("从这个方法可以看到, Tomcat 线程池的 execute() 方法会调用 Java 原生线程池的 execute() 去执行任务, 如果总线程数达到 maximumPoolSize, Java 原生线程池的 execute() 方法会抛出 RejectedExecutionException 异常, 但是这个异常会被 Tomcat 线程池的 execute() 方法捕获到, 并继续尝试把这个任务放到任务队列中去; 如果任务队列也满了, 再执行拒绝策略.")]),s._v(" "),t("h6",{attrs:{id:"_2-定制版的任务队列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-定制版的任务队列"}},[s._v("#")]),s._v(" 2.定制版的任务队列")]),s._v(" "),t("p",[s._v("细心的你有没有发现, 在 Tomcat 线程池的 execute() 方法最开始有这么一行:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[s._v("submittedCount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("incrementAndGet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("这行代码的意思把 submittedCount 这个原子变量加一, 并且在任务执行失败, 抛出拒绝异常时, 将这个原子变量减一:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[s._v("submittedCount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("decrementAndGet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("其实 Tomcat 线程池是用这个"),t("strong",[s._v("变量 submittedCount 来维护已经提交到了线程池, 但是还没有执行完的任务个数")]),s._v(". Tomcat 为什么要维护这个变量呢? 这跟 Tomcat 的定制版的任务队列有关. Tomcat 的任务队列 TaskQueue 扩展了 Java 中的 LinkedBlockingQueue, 由于 LinkedBlockingQueue 默认情况下长度是没有限制的, 除非给它一个 capacity. 因此 Tomcat 给了它一个 capacity, TaskQueue 的构造函数中有个整型的参数 capacity, TaskQueue 将 capacity 传给父类 LinkedBlockingQueue 的构造函数.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TaskQueue")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LinkedBlockingQueue")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Runnable")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TaskQueue")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" capacity"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("super")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("capacity"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("这个 capacity 参数是通过 Tomcat 的 maxQueueSize 参数来设置的, 但问题是默认情况下 maxQueueSize 的值是"),t("code",[s._v("Integer.MAX_VALUE")]),s._v("​, 等于没有限制, 这样就带来一个问题: 当前线程数达到核心线程数之后, 再来任务的话线程池会把任务添加到任务队列, 并且总是会成功, 这样永远不会有机会创建新线程了.")]),s._v(" "),t("p",[s._v("为了解决这个问题, TaskQueue 重写了 LinkedBlockingQueue 的 offer() 方法, 在合适的时机返回 false, 返回 false 表示任务添加失败, 这时线程池会创建新的线程. 那什么是合适的时机呢? 看下面 offer() 方法的核心源码:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TaskQueue")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LinkedBlockingQueue")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Runnable")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n   "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 线程池调用任务队列的方法时, 当前线程数肯定已经大于核心线程数了")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("offer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Runnable")]),s._v(" o"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果线程数已经到了最大值, 不能创建新线程了, 只能把任务添加到任务队列. ")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("parent"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getPoolSize")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" parent"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getMaximumPoolSize")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n          "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("super")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("offer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("o"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 执行到这里, 表明当前线程数大于核心线程数, 并且小于最大线程数. ")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 表明是可以创建新线程的, 那到底要不要创建呢? 分两种情况: ")]),s._v("\n  \n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1. 如果已提交的任务数小于当前线程数, 表示还有空闲线程, 无需创建新线程")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("parent"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getSubmittedCount")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("parent"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getPoolSize")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n          "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("super")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("offer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("o"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2. 如果已提交的任务数大于当前线程数, 线程不够用了, 返回 false 去创建新线程")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("parent"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getPoolSize")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("parent"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getMaximumPoolSize")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n          "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 默认情况下总是把任务添加到任务队列")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("super")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("offer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("o"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br")])]),t("p",[s._v("从上面的代码可以看到, "),t("strong",[s._v("只有当前线程数大于核心线程数, 小于最大线程数, 并且已提交的任务个数大于当前线程数时, 也就是说线程不够用了, 但是线程数又没达到极限, 才会去创建新的线程")]),s._v(". 这就是为什么 Tomcat 需要维护已提交任务数这个变量, 它的目的就是"),t("strong",[s._v("在任务队列的长度无限制的情况下, 让线程池有机会创建新的线程")]),s._v(".")]),s._v(" "),t("p",[s._v("当然默认情况下 Tomcat 的任务队列是没有限制的, 可以通过设置 maxQueueSize 参数来限制任务队列的长度.")]),s._v(" "),t("h5",{attrs:{id:"总结-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结-5"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),t("p",[s._v("池化的目的是为了避免频繁地创建和销毁对象, 减少对系统资源的消耗. Java 提供了默认的线程池实现, 也可以扩展 Java 原生的线程池来实现定制自己的线程池, Tomcat 就是这么做的. "),t("strong",[s._v("Tomcat 扩展了 Java 线程池的核心类 ThreadPoolExecutor, 并重写了它的 execute() 方法, 定制了自己的任务处理流程. 同时 Tomcat 还实现了定制版的任务队列, 重写了 offer() 方法, 使得在任务队列长度无限制的情况下, 线程池仍然有机会创建新的线程")]),s._v(".")]),s._v(" "),t("h4",{attrs:{id:"_18-新特性-tomcat如何支持websocket"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_18-新特性-tomcat如何支持websocket"}},[s._v("#")]),s._v(" 18.新特性:Tomcat如何支持WebSocket?")]),s._v(" "),t("p",[s._v('HTTP 协议是 "请求-响应" 模式, 浏览器必须先发请求给服务器, 服务器才会响应这个请求. 也就是说服务器不会主动发送数据给浏览器.')]),s._v(" "),t("p",[s._v("对于实时性要求比较的高的应用, 比如在线游戏, 股票基金实时报价和在线协同编辑等, 浏览器需要实时显示服务器上最新的数据, 因此出现了 Ajax 和 Comet 技术. Ajax 本质上还是轮询, 而 Comet 是在 HTTP 长连接的基础上做了一些 hack, 但是它们的实时性不高, 另外频繁的请求会给服务器带来压力, 也会浪费网络流量和带宽. 于是 HTML5 推出了 "),t("strong",[s._v("WebSocket 标准, 使得浏览器和服务器之间任何一方都可以主动发消息给对方, 这样服务器有新数据时可以主动推送给浏览器.")])]),s._v(" "),t("p",[s._v("这里介绍 WebSocket 的工作原理, 以及作为服务器端的 Tomcat 是如何支持 WebSocket 的. 更重要的是, 希望你在学完之后可以灵活地选用 WebSocket 技术来解决实际工作中的问题.")]),s._v(" "),t("h5",{attrs:{id:"websocket工作原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#websocket工作原理"}},[s._v("#")]),s._v(" WebSocket工作原理")]),s._v(" "),t("p",[s._v("WebSocket 的名字里带有 Socket, 那 Socket 是什么呢? 网络上的两个程序通过一个双向链路进行通信, 这个双向链路的一端称为一个 Socket. 一个 Socket 对应一个 IP 地址和端口号, 应用程序通常通过 Socket 向网络发出请求或者应答网络请求. Socket 不是协议, 它其实是对 TCP/IP 协议层抽象出来的 API.")]),s._v(" "),t("p",[s._v("但 WebSocket 不是一套 API, 跟 HTTP 协议一样, "),t("strong",[s._v("WebSocket 也是一个应用层协议")]),s._v(". 为了跟现有的 HTTP 协议保持兼容, 它通过 HTTP 协议进行一次握手, 握手之后数据就直接从 TCP 层的 Socket 传输, 就与 HTTP 协议无关了. 浏览器发给服务端的请求会带上跟 WebSocket 有关的请求头, 比如 "),t("code",[s._v("Connection: Upgrade")]),s._v("​ 和 "),t("code",[s._v("Upgrade: websocket")]),s._v("​.")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405161452-10t1maz.png",alt:"image"}})]),s._v(" "),t("p",[s._v("如果服务器支持 WebSocket, 同样会在 HTTP 响应里加上 WebSocket 相关的 HTTP 头部.")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405161521-r3e8u27.png",alt:"image"}})]),s._v(" "),t("p",[s._v("这样 WebSocket 连接就建立好了, 接下来 WebSocket 的"),t("strong",[s._v("数据传输会以 frame 形式传输")]),s._v(", 会将一条消息分为几个 frame, 按照先后顺序传输出去. 这样做的好处有:")]),s._v(" "),t("ul",[t("li",[s._v("大数据的传输可以分片传输, 不用考虑数据大小的问题.")]),s._v(" "),t("li",[s._v("和 HTTP 的 chunk 一样, 可以边生成数据边传输, 提高传输效率.")])]),s._v(" "),t("h5",{attrs:{id:"tomcat如何支持websocket"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tomcat如何支持websocket"}},[s._v("#")]),s._v(" Tomcat如何支持WebSocket")]),s._v(" "),t("p",[s._v("在讲 Tomcat 如何支持 WebSocket 之前, 先来开发一个简单的聊天室程序, 需求是: 用户可以通过浏览器加入聊天室, 发送消息, 聊天室的其他人都可以收到消息.")]),s._v(" "),t("h6",{attrs:{id:"_1-websocket聊天室程序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-websocket聊天室程序"}},[s._v("#")]),s._v(" 1.WebSocket聊天室程序")]),s._v(" "),t("p",[s._v("浏览器端 JavaScript 核心代码如下:")]),s._v(" "),t("div",{staticClass:"language-javascript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" Chat "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nChat"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("socket "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nChat"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("connect "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("host")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 判断当前浏览器是否支持 WebSocket")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'WebSocket'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" window"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果支持则创建 WebSocket JS 类")]),s._v("\n        Chat"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("socket "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("WebSocket")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("host"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'MozWebSocket'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" window"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        Chat"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("socket "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MozWebSocket")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("host"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        Console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'WebSocket is not supported by this browser.'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 回调函数, 当和服务器的 WebSocket 连接建立起来后, 浏览器会回调这个方法")]),s._v("\n    Chat"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("socket"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("onopen")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        Console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Info: WebSocket connection opened.'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        document"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getElementById")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'chat'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("onkeydown")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("event")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("event"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("keyCode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                Chat"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sendMessage")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 回调函数, 当和服务器的 WebSocket 连接关闭后, 浏览器会回调这个方法")]),s._v("\n    Chat"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("socket"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("onclose")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        document"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getElementById")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'chat'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("onkeydown "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        Console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Info: WebSocket closed.'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 回调函数, 当服务器有新消息发送到浏览器, 浏览器会回调这个方法")]),s._v("\n    Chat"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("socket"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("onmessage")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("message")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        Console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("message"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("data"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br")])]),t("p",[s._v("上面的代码实现逻辑比较清晰, 就是创建一个 WebSocket JavaScript 对象, 然后实现了几个回调方法: onopen, onclose 和 onmessage. 当连接建立, 关闭和有新消息时, 浏览器会负责调用这些回调方法. 再来看服务器端 Tomcat 的实现代码:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Tomcat 端的实现类加上 @ServerEndpoint 注解, 里面的 value 是 URL 路径")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@ServerEndpoint")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/websocket/chat"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ChatEndpoint")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("GUEST_PREFIX")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Guest"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 记录当前有多少个用户加入到了聊天室, 它是 static 全局变量. 为了多线程安全使用原子变量 AtomicInteger")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AtomicInteger")]),s._v(" connectionIds "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AtomicInteger")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 每个用户用一个 CharAnnotation 实例来维护, 请你注意它是一个全局的 static 变量, 所以用到了线程安全的 CopyOnWriteArraySet")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Set")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ChatEndpoint")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" connections "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CopyOnWriteArraySet")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" nickname"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Session")]),s._v(" session"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ChatEndpoint")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        nickname "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("GUEST_PREFIX")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" connectionIds"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getAndIncrement")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 新连接到达时, Tomcat 会创建一个 Session, 并回调这个函数")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@OnOpen")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("start")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Session")]),s._v(" session"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("session "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" session"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        connections"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" message "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("format")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"* %s %s"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" nickname"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"has joined."')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("broadcast")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("message"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 浏览器关闭连接时, Tomcat 会回调这个函数")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@OnClose")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("end")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        connections"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("remove")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" message "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("format")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"* %s %s"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                nickname"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"has disconnected."')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("broadcast")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("message"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 浏览器发送消息到服务器时, Tomcat 会回调这个函数")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@OnMessage")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("incoming")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" message"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Never trust the client")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" filteredMessage "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("format")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%s: %s"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                nickname"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HTMLFilter")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("filter")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("message"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("broadcast")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("filteredMessage"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Websocket 连接出错时, Tomcat 会回调这个函数")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@OnError")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("onError")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Throwable")]),s._v(" t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Throwable")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        log"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("error")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Chat Error: "')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 向聊天室中的每个用户广播消息")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("broadcast")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" msg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ChatAnnotation")]),s._v(" client "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" connections"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("client"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    client"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("session"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getBasicRemote")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sendText")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("msg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IOException")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n              "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br"),t("span",{staticClass:"line-number"},[s._v("59")]),t("br"),t("span",{staticClass:"line-number"},[s._v("60")]),t("br"),t("span",{staticClass:"line-number"},[s._v("61")]),t("br"),t("span",{staticClass:"line-number"},[s._v("62")]),t("br"),t("span",{staticClass:"line-number"},[s._v("63")]),t("br"),t("span",{staticClass:"line-number"},[s._v("64")]),t("br"),t("span",{staticClass:"line-number"},[s._v("65")]),t("br"),t("span",{staticClass:"line-number"},[s._v("66")]),t("br")])]),t("p",[s._v("根据 Java WebSocket 规范的规定, Java WebSocket 应用程序由一系列的 "),t("strong",[s._v("WebSocket Endpoint")]),s._v(" 组成. "),t("strong",[s._v("Endpoint 是一个 Java 对象, 代表 WebSocket 连接的一端, 就好像处理 HTTP 请求的 Servlet 一样, 可以把它看作是处理 WebSocket 消息的接口")]),s._v(". 跟 Servlet 不同的地方在于, Tomcat 会给每一个 WebSocket 连接创建一个 Endpoint 实例. 可以通过两种方式定义和实现 Endpoint.")]),s._v(" "),t("p",[s._v("第一种方法是"),t("strong",[s._v("编程式")]),s._v("的, 就是编写一个 Java 类继承 "),t("code",[s._v("javax.websocket.Endpoint")]),s._v("​, 并实现它的 onOpen, onClose 和 onError 方法. 这些方法跟 Endpoint 的生命周期有关, Tomcat 负责管理 Endpoint 的生命周期并调用这些方法. 并且当浏览器连接到一个 Endpoint 时, Tomcat 会给这个连接创建一个唯一的 Session("),t("code",[s._v("javax.websocket.Session")]),s._v("​). Session 在 WebSocket 连接握手成功之后创建, 并在连接关闭时销毁. 当触发 Endpoint 各个生命周期事件时, Tomcat 会将当前 Session 作为参数传给 Endpoint 的回调方法, 因此一个 Endpoint 实例对应一个 Session, 通过在 Session 中添加 MessageHandler 消息处理器来接收消息, MessageHandler 中定义了 onMessage 方法. **在这里 Session 的本质是对 Socket 的封装, Endpoint 通过它与浏览器通信. **")]),s._v(" "),t("p",[s._v("第二种定义 Endpoint 的方法是"),t("strong",[s._v("注解式")]),s._v("的, 也就是上面的聊天室程序例子中用到的方式, 即实现一个业务类并给它添加 WebSocket 相关的注解. 首先注意到 "),t("code",[s._v('@ServerEndpoint(value = "/websocket/chat")')]),s._v("​ 注解, 它表明当前业务类 ChatEndpoint 是一个实现了 WebSocket 规范的 Endpoint, 并且注解的 value 值表明 ChatEndpoint 映射的 URL 是 "),t("code",[s._v("/websocket/chat")]),s._v("​. 还看到 ChatEndpoint 类中有 "),t("code",[s._v("@OnOpen")]),s._v("​, "),t("code",[s._v("@OnClose")]),s._v("​, "),t("code",[s._v("@OnError")]),s._v("​和在"),t("code",[s._v("@OnMessage")]),s._v("​ 注解的方法, 从名字就知道它们的功能是什么.")]),s._v(" "),t("p",[s._v("对于程序员来说, 其实只需要专注具体的 Endpoint 的实现, 比如在上面聊天室的例子中, 为了方便向所有人群发消息, ChatEndpoint 在内部使用了一个全局静态的集合 CopyOnWriteArraySet 来维护所有的 ChatEndpoint 实例, 因为每一个 ChatEndpoint 实例对应一个 WebSocket 连接, 也就是代表了一个加入聊天室的用户. **当某个 ChatEndpoint 实例收到来自浏览器的消息时, 这个 ChatEndpoint 会向集合中其他 ChatEndpoint 实例背后的 WebSocket 连接推送消息. **")]),s._v(" "),t("p",[s._v("那么这个过程中, Tomcat 主要做了哪些事情呢? 简单来说就是两件事情: "),t("strong",[s._v("Endpoint 加载和 WebSocket 请求处理")]),s._v(". 下面分别来详细说说 Tomcat 是如何做这两件事情的.")]),s._v(" "),t("h6",{attrs:{id:"_2-websocket加载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-websocket加载"}},[s._v("#")]),s._v(" 2.WebSocket加载")]),s._v(" "),t("p",[s._v("Tomcat 的 WebSocket 加载是通过 SCI 机制完成的. SCI 全称 "),t("strong",[s._v("ServletContainerInitializer")]),s._v(", 是 Servlet 3.0 规范中定义的用来"),t("strong",[s._v("接收 Web 应用启动事件的接口")]),s._v(". 那为什么要监听 Servlet 容器的启动事件呢? 因为这样有机会在 Web 应用启动时做一些"),t("strong",[s._v("初始化工作")]),s._v(", 比如 WebSocket 需要扫描和加载 Endpoint 类. SCI 的使用也比较简单, "),t("strong",[s._v("将实现 ServletContainerInitializer 接口的类增加 HandlesTypes 注解, 并且在注解内指定的一系列类和接口集合")]),s._v(". 比如 Tomcat 为了扫描和加载 Endpoint 而定义的 SCI 类如下:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@HandlesTypes")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServerEndpoint")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServerApplicationConfig")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Endpoint")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("WsSci")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletContainerInitializer")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("onStartup")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Set")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" clazzes"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletContext")]),s._v(" ctx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletException")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("一旦定义好了 SCI, Tomcat 在启动阶段扫描类时, 会将 HandlesTypes 注解中指定的类都扫描出来, 作为 SCI 的 onStartup() 方法的参数, 并调用 SCI 的 onStartup() 方法. 注意到 WsSci 的 HandlesTypes 注解中定义了"),t("code",[s._v("ServerEndpoint.class")]),s._v("​, "),t("code",[s._v("ServerApplicationConfig.class")]),s._v("​ 和 "),t("code",[s._v("Endpoint.class")]),s._v("​, 因此在 Tomcat 的启动阶段会将这些类的类实例(注意不是对象实例)传递给 WsSci 的 onStartup() 方法. 那么 WsSci 的 onStartup() 方法又做了什么事呢?")]),s._v(" "),t("p",[s._v("它会构造一个 WebSocketContainer 实例, 可以把 WebSocketContainer 理解成一个专门处理 WebSocket 请求的 "),t("strong",[s._v("Endpoint 容器")]),s._v(". 也就是说 Tomcat 会把扫描到的 Endpoint 子类和添加了注解 "),t("code",[s._v("@ServerEndpoint")]),s._v("​ 的类注册到这个容器中, 并且这个容器还维护了 URL 到 Endpoint 的映射关系, 这样通过请求 URL 就能找到具体的 Endpoint 来处理 WebSocket 请求.")]),s._v(" "),t("h6",{attrs:{id:"_3-websocket请求处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-websocket请求处理"}},[s._v("#")]),s._v(" 3.WebSocket请求处理")]),s._v(" "),t("p",[s._v("在讲 WebSocket 请求处理之前, 先来回顾一下 Tomcat 连接器的组件图.")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405161429-w1czmc5.jpg",alt:""}})]),s._v(" "),t("p",[s._v("可以看到 Tomcat 用 ProtocolHandler 组件屏蔽应用层协议的差异, 其中 "),t("strong",[s._v("ProtocolHandler 中有两个关键组件: Endpoint 和 Processor")]),s._v(". 需要注意, 这里的 Endpoint 跟上文提到的 WebSocket 中的 Endpoint 完全是"),t("mark",[t("strong",[s._v("两回事")])]),s._v(", "),t("strong",[s._v("连接器中的 Endpoint 组件用来处理 I/O 通信. WebSocket 本质就是一个应用层协议, 因此不能用 HttpProcessor 来处理 WebSocket 请求, 而要用专门 Processor 来处理, 而在 Tomcat 中这样的 Processor 叫作 UpgradeProcessor")]),s._v(".")]),s._v(" "),t("p",[s._v("为什么叫 Upgrade Processor 呢? 这是因为 "),t("strong",[s._v("Tomcat 是将 HTTP 协议升级成 WebSocket 协议的")]),s._v(", 由于 WebSocket 是通过 HTTP 协议来进行握手的, 因此当 WebSocket 的握手请求到来时, HttpProtocolHandler 首先接收到这个请求, 在处理这个 HTTP 请求时, Tomcat 通过一个特殊的 Filter 判断该当前 HTTP "),t("strong",[s._v("请求是否是一个 WebSocket Upgrade 请求")]),s._v("(即包含"),t("code",[s._v("Upgrade: websocket")]),s._v("​的 HTTP 头信息), 如果是, 则在 HTTP 响应里添加 WebSocket 相关的响应头信息, 并进行"),t("strong",[s._v("协议升级")]),s._v(". 具体来说就是用 UpgradeProtocolHandler 替换当前的 HttpProtocolHandler, 相应的, 把当前 Socket 的 Processor 替换成 "),t("strong",[s._v("UpgradeProcessor")]),s._v(", 同时 Tomcat 会创建 WebSocket Session 实例和 Endpoint 实例, 并跟当前的 WebSocket 连接一一对应起来. 这个 WebSocket 连接不会立即关闭, 并且在请求处理中, 不再使用原有的 HttpProcessor, 而是用专门的 UpgradeProcessor, UpgradeProcessor 最终会调用相应的 Endpoint 实例来处理请求. 下面通过一张图来理解一下.")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405161429-as6e7rp.jpg",alt:""}})]),s._v(" "),t("p",[t("strong",[s._v("可以看到, Tomcat 对 WebSocket 请求的处理没有经过 Servlet 容器, 而是通过 UpgradeProcessor 组件直接把请求发到 ServerEndpoint 实例, 并且 Tomcat 的 WebSocket 实现不需要关注具体 I/O 模型的细节, 从而实现了与具体 I/O 方式的解耦.")])]),s._v(" "),t("h5",{attrs:{id:"总结-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结-6"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),t("p",[s._v("WebSocket 技术实现了 Tomcat 与浏览器的双向通信, Tomcat 可以主动向浏览器推送数据, 可以用来实现对数据实时性要求比较高的应用. 这需要浏览器和 Web 服务器同时支持 WebSocket 标准, Tomcat 启动时通过 SCI 技术来扫描和加载 WebSocket 的处理类 ServerEndpoint, 并且建立起了 URL 到 ServerEndpoint 的映射关系.")]),s._v(" "),t("p",[t("strong",[s._v("当第一个 WebSocket 请求到达时, Tomcat 将 HTTP 协议升级成 WebSocket 协议, 并将该 Socket 连接的 Processor 替换成 UpgradeProcessor. 这个 Socket 不会立即关闭, 对接下来的请求, Tomcat 通过 UpgradeProcessor 直接调用相应的 ServerEndpoint 来处理.")])]),s._v(" "),t("h4",{attrs:{id:"_19-比较-jetty的线程策略eatwhatyoukill"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_19-比较-jetty的线程策略eatwhatyoukill"}},[s._v("#")]),s._v(" 19.比较:Jetty的线程策略EatWhatYouKill")]),s._v(" "),t("p",[s._v("前面已经介绍了 Jetty 的总体架构设计, 回顾一下, Jetty 总体上是由一系列 Connector, 一系列 Handler 和一个 ThreadPool 组成, 它们的关系如下图所示:")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405161545-q6zeqaq.jpg",alt:""}})]),s._v(" "),t("p",[s._v("相比较 Tomcat 的连接器, Jetty 的 Connector 在设计上有自己的特点. Jetty 的 Connector 支持 NIO 通信模型, 由于 "),t("strong",[s._v("NIO 模型中的主角就是 Selector")]),s._v(", Jetty 在 Java 原生 Selector 的基础上封装了自己的 Selector, 叫作 ManagedSelector. ManagedSelector 在线程策略方面做了大胆尝试, 将 I/O 事件的侦测和处理放到同一个线程来处理, 充分利用了 CPU 缓存并减少了线程上下文切换的开销.")]),s._v(" "),t("p",[s._v("具体的数字是, 根据 Jetty 的官方测试, 这种"),t("strong",[s._v('名为 "EatWhatYouKill" 的线程策略将吞吐量提高了 8 倍')]),s._v(". 这里来看一看这背后的原理是什么.")]),s._v(" "),t("h5",{attrs:{id:"selector编程的一般思路"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#selector编程的一般思路"}},[s._v("#")]),s._v(" Selector编程的一般思路")]),s._v(" "),t("p",[s._v("常规的 NIO 编程思路是, 将 I/O 事件的侦测和请求的处理分别用不同的线程处理. 具体过程是:")]),s._v(" "),t("p",[s._v("**启动一个线程, 在一个死循环里不断地调用 select 方法, 检测 Channel 的 I/O 状态, 一旦 I/O 事件达到, 比如数据就绪, 就把该 I/O 事件以及一些数据包装成一个 Runnable, 将 Runnable 放到新线程中去处理. **")]),s._v(" "),t("p",[s._v("在这个过程中按照职责划分, 有两个线程在干活, "),t("strong",[s._v("一个是 I/O 事件检测线程, 另一个是 I/O 事件处理线程")]),s._v('. 仔细思考一下这两者的关系, 其实它们是生产者和消费者的关系. I/O 事件侦测线程作为生产者, 负责 "生产" I/O 事件, 也就是负责接活儿的老板; I/O 处理线程是消费者, 它 "消费" 并处理 I/O 事件, 就是干苦力的员工. 把这两个工作用不同的线程来处理, 好处是它们互不干扰和阻塞对方.')]),s._v(" "),t("h5",{attrs:{id:"jetty中的selector编程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jetty中的selector编程"}},[s._v("#")]),s._v(" Jetty中的Selector编程")]),s._v(" "),t("p",[s._v("然而世事无绝对, 将 I/O 事件检测和业务处理这两种工作分开的思路也有缺点. 当 Selector 检测读就绪事件时, "),t("strong",[s._v("数据已经被拷贝到内核中的缓存")]),s._v("了, 同时 CPU 的缓存中也有这些数据了, 由于 CPU 本身的缓存比内存快多了, 这时当应用程序去读取这些数据时, 如果用另一个线程去读, 很有可能这个读线程使用另一个 CPU 核, 而不是之前那个检测数据就绪的 CPU 核, 这样 CPU 缓存中的数据就用不上了, 并且线程切换也需要开销.")]),s._v(" "),t("p",[s._v("因此 Jetty 的 Connector 做了一个大胆尝试, 那就是用"),t("strong",[s._v("把 I/O 事件的生产和消费放到同一个线程来处理")]),s._v(", 如果这两个任务由同一个线程来执行, 如果执行过程中"),t("strong",[s._v("线程不阻塞")]),s._v(", 操作系统会用同一个 CPU 核来执行这两个任务, 这样就能"),t("strong",[s._v("利用 CPU 缓存")]),s._v("了. 那具体是如何做的呢, 还是来详细分析一下 Connector 中的 ManagedSelector 组件.")]),s._v(" "),t("h6",{attrs:{id:"_1-managedselector"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-managedselector"}},[s._v("#")]),s._v(" 1.ManagedSelector")]),s._v(" "),t("p",[s._v("ManagedSelector 的本质就是一个 Selector, 负责 I/O 事件的检测和分发. 为了方便使用, Jetty 在 Java 原生的 Selector 上做了一些扩展, 就变成了 "),t("strong",[s._v("ManagedSelector")]),s._v(", 先来看看它有哪些成员变量:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ManagedSelector")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ContainerLifeCycle")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Dumpable")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 原子变量, 表明当前的 ManagedSelector 是否已经启动")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AtomicBoolean")]),s._v(" _started "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AtomicBoolean")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 表明是否阻塞在 select 调用上")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" _selecting "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 管理器的引用, SelectorManager 管理若干 ManagedSelector 的生命周期")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SelectorManager")]),s._v(" _selectorManager"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//ManagedSelector 不止一个, 为它们每人分配一个 id")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" _id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 关键的执行策略, 生产者和消费者是否在同一个线程处理由它决定")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ExecutionStrategy")]),s._v(" _strategy"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//Java 原生的 Selector")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Selector")]),s._v(" _selector"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//"Selector 更新任务 " 队列')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Deque")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SelectorUpdate")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" _updates "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArrayDeque")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Deque")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SelectorUpdate")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" _updateable "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArrayDeque")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br")])]),t("p",[s._v('这些成员变量中其他的都好理解, 就是 "Selector 更新任务" 队列 '),t("code",[s._v("_updates")]),s._v("​ 和执行策略 "),t("code",[s._v("_strategy")]),s._v("​ 可能不是很直观.")]),s._v(" "),t("h6",{attrs:{id:"_1-selectorupdate接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-selectorupdate接口"}},[s._v("#")]),s._v(" 1.SelectorUpdate接口")]),s._v(" "),t("p",[s._v('为什么需要一个 "Selector 更新任务" 队列呢, 对于 Selector 的用户来说, 对 Selector 的操作无非是将 Channel 注册到 Selector 或者告诉 Selector 我对什么 I/O 事件感兴趣, 那么这些操作其实就是对 Selector 状态的更新, Jetty 把这些操作抽象成 '),t("strong",[s._v("SelectorUpdate 接口")]),s._v(".")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * A selector update to be done when the selector has been woken.\n */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SelectorUpdate")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("update")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Selector")]),s._v(" selector"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("这意味着不能直接操作 ManageSelector 中的 Selector, 而是需要向 ManagedSelector 提交一个任务类, 这个类需要实现 SelectorUpdate 接口 update() 方法, 在 update() 方法里定义想要对 ManagedSelector 做的操作.")]),s._v(" "),t("p",[s._v("比如 Connector 中 Endpoint 组件对读就绪事件感兴趣, 它就向 ManagedSelector 提交了一个内部任务类 ManagedSelector.SelectorUpdate():")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[s._v("_selector"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("submit")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("_updateKeyAction"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("这个 "),t("code",[s._v("_updateKeyAction")]),s._v("​ 就是一个 SelectorUpdate 实例, 它的 update() 方法实现如下:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ManagedSelector"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("SelectorUpdate")]),s._v(" _updateKeyAction "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ManagedSelector"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("SelectorUpdate")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("update")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Selector")]),s._v(" selector"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这里的 updateKey 其实就是调用了 SelectionKey.interestOps(OP_READ);")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("updateKey")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("可以看到在 update() 方法里, 调用了 SelectionKey 类的 interestOps() 方法, 传入的参数是 "),t("code",[s._v("OP_READ")]),s._v("​, 意思是现在我对这个 Channel 上的读就绪事件感兴趣了.")]),s._v(" "),t("p",[s._v("那谁来负责执行这些 update() 方法呢, 答案是 ManagedSelector 自己, 它在一个"),t("strong",[s._v("死循环里拉取这些 SelectorUpdate 任务类逐个执行")]),s._v(".")]),s._v(" "),t("h6",{attrs:{id:"_2-selectable接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-selectable接口"}},[s._v("#")]),s._v(" 2.Selectable接口")]),s._v(" "),t("p",[s._v("那 I/O 事件到达时, ManagedSelector 怎么知道应该调哪个函数来处理呢? 其实也是通过一个"),t("strong",[s._v("任务类接口, 这个接口就是 Selectable")]),s._v(", 它返回一个 Runnable, "),t("strong",[s._v("这个 Runnable 其实就是 I/O 事件就绪时相应的处理逻辑")]),s._v(".")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Selectable")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 当某一个 Channel 的 I/O 事件就绪后, ManagedSelector 会调用的回调函数")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Runnable")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("onSelected")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 当所有事件处理完了之后 ManagedSelector 会调的回调函数, 先忽略. ")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("updateKey")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("ManagedSelector 在检测到某个 Channel 上的 I/O 事件就绪时, 也就是说这个 Channel 被选中了, ManagedSelector 调用这个 Channel 所绑定的附件类的 "),t("strong",[s._v("onSelected() 方法来拿到一个 Runnable")]),s._v(".")]),s._v(" "),t("p",[s._v("这句话有点绕, 其实就是 ManagedSelector 的使用者, 比如 Endpoint 组件在向 ManagedSelector 注册读就绪事件时, 同时也要告诉 ManagedSelector 在事件就绪时执行什么任务, 具体来说就是传入一个附件类, 这个附件类需要实现 Selectable 接口. ManagedSelector "),t("strong",[s._v("通过调用这个 onSelected() 拿到一个 Runnable, 然后把 Runnable 扔给线程池去执行")]),s._v(".")]),s._v(" "),t("p",[s._v("那 Endpoint 的 onSelected() 是如何实现的呢?")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Runnable")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("onSelected")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" readyOps "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" _key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("readyOps")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" fillable "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("readyOps "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SelectionKey")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("OP_READ")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" flushable "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("readyOps "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SelectionKey")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("OP_WRITE")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// return task to complete the job")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Runnable")]),s._v(" task"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" fillable \n            "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("flushable \n                    "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" _runCompleteWriteFillable \n                    "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" _runFillable"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("flushable \n                    "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" _runCompleteWrite \n                    "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" task"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br")])]),t("p",[s._v("上面的代码逻辑很简单, 就是读事件到了就读, 写事件到了就写.")]),s._v(" "),t("h6",{attrs:{id:"_3-executionstrategy"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-executionstrategy"}},[s._v("#")]),s._v(" 3.ExecutionStrategy")]),s._v(" "),t("p",[s._v("铺垫了这么多, 终于要上主菜了. 前面主要介绍了 ManagedSelector 的使用者如何跟 ManagedSelector 交互, 也就是如何注册 Channel 以及 I/O 事件, 提供什么样的处理类来处理 I/O 事件, 接下来"),t("strong",[s._v("看看 ManagedSelector 是如何统一管理和维护用户注册的 Channel 集合")]),s._v(". 再回到开始的讨论, ManagedSelector 将 I/O 事件的生产和消费看作是生产者消费者模式, 为了充分利用 CPU 缓存, 生产和消费尽量放到同一个线程处理, 那这是如何实现的呢? Jetty 定义了 ExecutionStrategy 接口:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ExecutionStrategy")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 只在 HTTP2 中用到, 简单起见, 先忽略这个方法. ")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("dispatch")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 实现具体执行策略, 任务生产出来后可能由当前线程执行, 也可能由新线程来执行")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("produce")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 任务的生产委托给 Producer 内部接口")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Producer")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 生产一个 Runnable(任务)")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Runnable")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("produce")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("p",[s._v("可以看到 ExecutionStrategy 接口比较简单, 它将具体任务的生产委托内部接口 Producer, 而在自己的 produce() 方法里来实现具体执行逻辑, "),t("strong",[s._v("也就是生产出来的任务要么由当前线程执行, 要么放到新线程中执行")]),s._v(". Jetty 提供了一些具体策略实现类: "),t("strong",[s._v("ProduceConsume, ProduceExecuteConsume, ExecuteProduceConsume 和 EatWhatYouKill")]),s._v(". 它们的区别是:")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("ProduceConsume")]),s._v(": 任务生产者"),t("strong",[s._v("自己依次生产和执行任务")]),s._v(", 对应到 NIO 通信模型就是用一个线程来侦测和处理一个 ManagedSelector 上所有的 I/O 事件, 后面的 I/O 事件要等待前面的 I/O 事件处理完, 效率明显不高. 通过图来理解, 图中绿色表示生产一个任务, 蓝色表示执行这个任务.")])]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405161601-qvnftiu.png",alt:"image"}})]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("ProduceExecuteConsume")]),s._v(": 任务生产者"),t("strong",[s._v("开启新线程来运行任务")]),s._v(", 这是典型的 I/O 事件侦测和处理用不同的线程来处理, 缺点是不能利用 CPU 缓存, 并且线程切换成本高. 同样通过一张图来理解, 图中的棕色表示线程切换.")])]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405161545-swc13gz.png",alt:""}})]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("ExecuteProduceConsume")]),s._v(": 任务生产者"),t("strong",[s._v("自己运行任务")]),s._v(', 但是该策略可能会新建一个新线程以继续生产和执行任务. 这种策略也被称为 "吃掉你杀的猎物", 它来自狩猎伦理, 认为一个人不应该杀死他不吃掉的东西, 对应线程来说, 不应该生成自己不打算运行的任务. 它的优点是能利用 CPU 缓存, 但是潜在的问题是如果处理 I/O 事件的业务代码执行时间过长, 会导致线程大量阻塞和线程饥饿.')])]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405161545-cezjxrf.png",alt:""}})]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("EatWhatYouKill")]),s._v(": 这是 Jetty 对 ExecuteProduceConsume 策略的"),t("strong",[s._v("改良")]),s._v(", "),t("strong",[s._v("在线程池线程充足的情况下等同于 ExecuteProduceConsume; 当系统比较忙线程不够时, 切换成 ProduceExecuteConsume 策略")]),s._v(". 为什么要这么做呢, 原因是 ExecuteProduceConsume 是在同一线程执行 I/O 事件的生产和消费, 它使用的线程来自 Jetty 全局的线程池, 这些线程有可能被业务代码阻塞, 如果阻塞得多了, 全局线程池中的线程自然就不够用了, 最坏的情况是连 I/O 事件的侦测都没有线程可用了, 会导致 Connector 拒绝浏览器请求. 于是 Jetty 做了一个优化, "),t("strong",[s._v("在低线程情况下, 就执行 ProduceExecuteConsume 策略, I/O 侦测用专门的线程处理, I/O 事件的处理扔给线程池处理, 其实就是放到线程池的队列里慢慢处理")]),s._v(".")])]),s._v(" "),t("p",[s._v("分析了这几种线程策略, 再来看看 Jetty 是如何实现 ExecutionStrategy 接口的. 答案其实就是实现 produce 接口生产任务, 一旦任务生产出来, ExecutionStrategy 会负责执行这个任务.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SelectorProducer")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ExecutionStrategy"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Producer")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Set")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SelectionKey")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" _keys "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Collections")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("emptySet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Iterator")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SelectionKey")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" _cursor "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Collections")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("emptyIterator")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Runnable")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("produce")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如何 Channel 集合中有 I/O 事件就绪, 调用前面提到的 Selectable 接口获取 Runnable, 直接返回给 ExecutionStrategy 去处理")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Runnable")]),s._v(" task "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("processSelected")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("task "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" task"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    \n           "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果没有 I/O 事件就绪, 就干点杂活, 看看有没有客户提交了更新 Selector 的任务, 就是上面提到的 SelectorUpdate 任务类. ")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("processUpdates")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("updateKeys")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n           "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 继续执行 select 方法, 侦测 I/O 就绪事件")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("select")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br")])]),t("p",[s._v("SelectorProducer 是 ManagedSelector 的内部类, SelectorProducer 实现了 ExecutionStrategy 中的 Producer 接口中的 produce() 方法, 需要向 ExecutionStrategy 返回一个 Runnable. 在这个方法里 SelectorProducer 主要干了三件事情")]),s._v(" "),t("ol",[t("li",[s._v("如果 Channel 集合中有 I/O 事件就绪, 调用前面提到的 Selectable 接口获取 Runnable, 直接返回给 ExecutionStrategy 去处理.")]),s._v(" "),t("li",[s._v("如果没有 I/O 事件就绪, 就干点杂活, 看看有没有客户提交了更新 Selector 上事件注册的任务, 也就是上面提到的 SelectorUpdate 任务类.")]),s._v(" "),t("li",[s._v("干完杂活继续执行 select 方法, 侦测 I/O 就绪事件.")])]),s._v(" "),t("h5",{attrs:{id:"总结-7"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结-7"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),t("p",[s._v("多线程虽然是提高并发的法宝, 但并不是说线程越多越好, CPU 缓存以及线程上下文切换的开销也是需要考虑的. "),t("strong",[s._v("Jetty 巧妙设计了 EatWhatYouKill 的线程策略, 尽量用同一个线程侦测 I/O 事件和处理 I/O 事件, 充分利用了 CPU 缓存, 并减少了线程切换的开销")]),s._v(".")]),s._v(" "),t("h4",{attrs:{id:"_20-总结-tomcat和jetty中的对象池技术"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_20-总结-tomcat和jetty中的对象池技术"}},[s._v("#")]),s._v(" 20.总结:Tomcat和Jetty中的对象池技术")]),s._v(" "),t("p",[s._v("Java 对象, 特别是一个比较大, 比较复杂的 Java 对象, 它们的创建, 初始化和 GC 都需要耗费 CPU 和内存资源, 为了减少这些开销, Tomcat 和 Jetty 都使用了"),t("strong",[s._v("对象池技术")]),s._v(". 所谓的"),t("strong",[s._v("对象池技术, 就是说一个 Java 对象用完之后把它保存起来, 之后再拿出来重复使用, 省去了对象创建, 初始化和 GC 的过程")]),s._v(". 对象池技术是典型的以"),t("strong",[s._v("空间换时间")]),s._v("的思路.")]),s._v(" "),t("p",[s._v("由于维护对象池本身也需要资源的开销, 不是所有场景都适合用对象池. "),t("strong",[s._v("如果你的 Java 对象数量很多并且存在的时间比较短, 对象本身又比较大比较复杂, 对象初始化的成本比较高, 这样的场景就适合用对象池技术")]),s._v(". 比如 Tomcat 和 Jetty 处理 HTTP 请求的场景就符合这个特征, 请求的数量很多, 为了处理单个请求需要创建不少的复杂对象(比如 Tomcat 连接器中 SocketWrapper 和 SocketProcessor), 而且一般来说请求处理的时间比较短, 一旦请求处理完毕, 这些对象就需要被销毁, 因此这个场景适合对象池技术.")]),s._v(" "),t("h5",{attrs:{id:"tomcat的synchronizedstack"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tomcat的synchronizedstack"}},[s._v("#")]),s._v(" Tomcat的SynchronizedStack")]),s._v(" "),t("p",[s._v("Tomcat 用 "),t("strong",[s._v("SynchronizedStack 类")]),s._v("来实现对象池, 下面是它的关键代码.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SynchronizedStack")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 内部维护一个对象数组, 用数组实现栈的功能")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" stack"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这个方法用来归还对象, 用 synchronized 进行线程同步")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("push")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" obj"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        index"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("index "),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("mark"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" size"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("limit "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("mark"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" size "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" limit"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("expand")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 对象不够用了, 扩展对象数组")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                index"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        stack"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("index"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" obj"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这个方法用来获取对象")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("pop")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("index "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" result "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" stack"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("index"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        stack"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("index"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" result"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 扩展对象数组长度, 以 2 倍大小扩展")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("expand")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" newSize "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" size "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("limit "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" newSize "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" limit"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n          newSize "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" limit"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 扩展策略是创建一个数组长度为原来两倍的新数组")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" newStack "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("newSize"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 将老数组对象引用复制到新数组")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("arraycopy")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("stack"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" newStack"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" size"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 将 stack 指向新数组, 老数组可以被 GC 掉了")]),s._v("\n      stack "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" newStack"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      size "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" newSize"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br")])]),t("p",[s._v("这个代码逻辑比较清晰, 主要是 SynchronizedStack 内部维护了一个"),t("strong",[s._v("对象数组")]),s._v(", 并且用数组来实现栈的接口: "),t("strong",[s._v("push() 和 pop() 方法, 这两个方法分别用来归还对象和获取对象")]),s._v(". 你可能好奇为什么 Tomcat 使用一个看起来比较简单的 SynchronizedStack 来做对象容器, 为什么不使用高级一点的并发容器比如 ConcurrentLinkedQueue 呢?")]),s._v(" "),t("p",[s._v("这是"),t("strong",[s._v("因为 SynchronizedStack 用数组而不是链表来维护对象, 可以减少结点维护的内存开销, 并且它本身只支持扩容不支持缩容, 也就是说数组对象在使用过程中不会被重新赋值, 也就不会被 GC")]),s._v(". 这样设计的目的是用最低的内存和 GC 的代价来实现无界容器, 同时 Tomcat 的最大同时请求数是有限制的, 因此不需要担心对象的数量会无限膨胀.")]),s._v(" "),t("h5",{attrs:{id:"jetty的bytebufferpool"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jetty的bytebufferpool"}},[s._v("#")]),s._v(" Jetty的ByteBufferPool")]),s._v(" "),t("p",[s._v("再来看 Jetty 中的"),t("strong",[s._v("对象池 ByteBufferPool")]),s._v(", 它本质是一个 "),t("strong",[s._v("ByteBuffer 对象池")]),s._v(". 当 Jetty 在进行网络数据读写时, 不需要每次都在 JVM 堆上分配一块新的 Buffer, 只需在 ByteBuffer 对象池里拿到一块预先分配好的 Buffer, 这样就避免了频繁的分配内存和释放内存. 这种设计同样可以在高性能通信中间件比如 Mina 和 Netty 中看到. ByteBufferPool 是一个接口:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ByteBufferPool")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ByteBuffer")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("acquire")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" size"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" direct"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("release")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ByteBuffer")]),s._v(" buffer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("接口中的两个方法: acquire() 和 release() 分别用来分配和释放内存, 并且可以通过 acquire() 方法的 direct 参数来指定 buffer 是从 JVM 堆上分配还是从本地内存分配. ArrayByteBufferPool 是 ByteBufferPool 的实现类, 先来看看它的成员变量和构造函数:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArrayByteBufferPool")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ByteBufferPool")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" _min"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 最小 size 的 Buffer 长度")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" _maxQueue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//Queue 最大长度")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 用不同的 Bucket(桶) 来持有不同 size 的 ByteBuffer 对象, 同一个桶中的 ByteBuffer size 是一样的")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ByteBufferPool"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Bucket")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" _direct"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ByteBufferPool"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Bucket")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" _indirect"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ByteBuffer 的 size 增量")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" _inc"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArrayByteBufferPool")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" minSize"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" increment"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" maxSize"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" maxQueue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 检查参数值并设置默认值")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("minSize"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//ByteBuffer 的最小长度")]),s._v("\n            minSize"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("increment"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            increment"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1024")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 默认以 1024 递增")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("maxSize"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            maxSize"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1024")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//ByteBuffer 的最大长度默认是 64K")]),s._v("\n  \n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ByteBuffer 的最小长度必须小于增量")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("minSize"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v("increment"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throw")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IllegalArgumentException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"minSize >= increment"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    \n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 最大长度必须是增量的整数倍")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("maxSize"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v("increment"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" increment"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v("maxSize"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throw")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IllegalArgumentException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"increment must be a divisor of maxSize"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   \n        _min"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("minSize"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        _inc"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("increment"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 创建 maxSize/increment 个桶, 包含直接内存的与 heap 的")]),s._v("\n        _direct"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ByteBufferPool"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Bucket")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("maxSize"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("increment"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        _indirect"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ByteBufferPool"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Bucket")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("maxSize"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("increment"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        _maxQueue"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("maxQueue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" size"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("_direct"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n          size"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v("_inc"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n          _direct"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ByteBufferPool"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Bucket")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("size"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("_maxQueue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n          _indirect"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ByteBufferPool"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Bucket")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("size"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("_maxQueue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br")])]),t("p",[s._v("从上面的代码可以看到, ByteBufferPool 是用不同的桶(Bucket)来管理不同长度的 ByteBuffer, 因为可能需要分配一块 1024 字节的 Buffer, 也可能需要一块 64K 字节的 Buffer. 而桶的内部用一个 ConcurrentLinkedDeque 来放置 ByteBuffer 对象的引用.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Deque")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ByteBuffer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" _queue "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConcurrentLinkedDeque")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("可以通过下面的图再来理解一下:")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405161619-0j3p51e.png",alt:""}})]),s._v(" "),t("p",[s._v("而 Buffer 的分配和释放过程, 就是找到相应的桶, 并对桶中的 Deque 做出队和入队的操作, 而不是直接向 JVM 堆申请和释放内存.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 分配 Buffer")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ByteBuffer")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("acquire")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" size"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" direct"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 找到对应的桶, 没有的话创建一个桶")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ByteBufferPool"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Bucket")]),s._v(" bucket "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("bucketFor")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("size"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("direct"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("bucket"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("newByteBuffer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("size"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("direct"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这里其实调用了 Deque 的 poll 方法")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" bucket"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("acquire")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("direct"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 释放 Buffer")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("release")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ByteBuffer")]),s._v(" buffer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("buffer"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 找到对应的桶")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ByteBufferPool"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Bucket")]),s._v(" bucket "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("bucketFor")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("buffer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("capacity")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("buffer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isDirect")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这里调用了 Deque 的 offerFirst 方法")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("bucket"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n      bucket"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("release")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("buffer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br")])]),t("h5",{attrs:{id:"对象池的思考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对象池的思考"}},[s._v("#")]),s._v(" 对象池的思考")]),s._v(" "),t("p",[t("strong",[s._v("对象池作为全局资源, 高并发环境中多个线程可能同时需要获取对象池中的对象, 因此多个线程在争抢对象时会因为锁竞争而阻塞, 因此使用对象池有线程同步的开销, 而不使用对象池则有创建和销毁对象的开销")]),s._v(". 对于对象池本身的设计来说, 需要尽量做到"),t("strong",[s._v("无锁化")]),s._v(", 比如 Jetty 就使用了 ConcurrentLinkedDeque. 如果内存足够大, 可以考虑用"),t("strong",[s._v("线程本地(ThreadLocal)对象池")]),s._v(", 这样每个线程都有自己的对象池, 线程之间互不干扰.")]),s._v(" "),t("p",[t("strong",[s._v("为了防止对象池的无限膨胀, 必须要对池的大小做限制")]),s._v(". 对象池太小发挥不了作用, 对象池太大的话可能有空闲对象, 这些空闲对象会一直占用内存, 造成内存浪费. 因此需要根据实际情况做一个平衡, 因此对象池本身除了应该有自动扩容的功能, 还需要考虑自动缩容.")]),s._v(" "),t("p",[t("strong",[s._v("所有的池化技术, 包括缓存, 都会面临内存泄露的问题")]),s._v(", 原因是对象池或者缓存的本质是一个 Java 集合类, 比如 List 和 Stack, 这个集合类持有缓存对象的引用, 只要集合类不被 GC, 缓存对象也不会被 GC. 维持大量的对象也比较占用内存空间, 所以必要时需要主动清理这些对象. 以 Java 的线程池 ThreadPoolExecutor 为例, 它提供了 allowCoreThreadTimeOut 和 setKeepAliveTime 两种方法, 可以在超时后销毁线程, 在实际项目中也可以参考这个策略.")]),s._v(" "),t("p",[s._v("另外在使用对象池时, 还有一些小贴士可以参考:")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("对象在用完后, 需要调用对象池的方法将对象归还给对象池.")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code")]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"})])]),s._v(" "),t("li",[t("p",[s._v("对象池中的对象在再次使用时需要重置, 否则会产生脏对象, 脏对象可能持有上次使用的引用, 导致内存泄漏等问题, 并且如果脏对象下一次使用时没有被清理, 程序在运行过程中会发生意想不到的问题.")])]),s._v(" "),t("li",[t("p",[s._v("对象一旦归还给对象池, 使用者就不能对它做任何操作了.")])]),s._v(" "),t("li",[t("p",[s._v("向对象池请求对象时有可能出现的阻塞, 异常或者返回 null 值, 这些都需要做一些额外的处理, 来确保程序的正常运行.")])])]),s._v(" "),t("h5",{attrs:{id:"总结-8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结-8"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),t("p",[s._v("Tomcat 和 Jetty 都用到了对象池技术, 这是因为处理一次 HTTP 请求的时间比较短, 但是这个过程中又需要创建大量复杂对象.")]),s._v(" "),t("p",[t("strong",[s._v("对象池技术可以减少频繁创建和销毁对象带来的成本, 实现对象的缓存和复用. 如果系统需要频繁的创建和销毁对象, 并且对象的创建代价比较大, 这种情况下, 一般来说你会观察到 GC 的压力比较大, 占用 CPU 率比较高, 这个时候就可以考虑使用对象池了.")])]),s._v(" "),t("p",[t("strong",[s._v("还有一种情况是需要对资源的使用做限制, 比如数据库连接, 不能无限制地创建数据库连接, 因此就有了数据库连接池, 也可以考虑把一些关键的资源池化, 对它们进行统一管理, 防止滥用.")])]),s._v(" "),t("h4",{attrs:{id:"_21-总结-tomcat和jetty的高性能-高并发之道"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_21-总结-tomcat和jetty的高性能-高并发之道"}},[s._v("#")]),s._v(" 21.总结:Tomcat和Jetty的高性能, 高并发之道")]),s._v(" "),t("p",[t("strong",[s._v("高性能程序就是高效的利用 CPU, 内存, 网络和磁盘等资源, 在短时间内处理大量的请求")]),s._v('. 那如何衡量"短时间和大量"呢? 其实就是两个关键指标: '),t("strong",[s._v("响应时间和每秒事务处理量(TPS)")]),s._v(" .")]),s._v(" "),t("p",[s._v("那什么是资源的高效利用呢? 有两个原则:")]),s._v(" "),t("ol",[t("li",[t("strong",[s._v("减少资源浪费")]),s._v(". 比如尽量避免线程阻塞, 因为一阻塞就会发生线程上下文切换, 就需要耗费 CPU 资源; 再比如网络通信时数据从内核空间拷贝到 Java 堆内存, 需要通过本地内存中转.")]),s._v(" "),t("li",[t("strong",[s._v("当某种资源成为瓶颈时, 用另一种资源来换取")]),s._v(". 比如缓存和对象池技术就是用内存换 CPU; 数据压缩后再传输就是用 CPU 换网络.")])]),s._v(" "),t("p",[s._v("Tomcat 和 Jetty 中用到了大量的高性能, 高并发的设计, 这里总结了几点: I/O 和线程模型, 减少系统调用, 池化, 零拷贝, 高效的并发编程. 下面详细介绍这些设计.")]),s._v(" "),t("h5",{attrs:{id:"i-o和线程模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#i-o和线程模型"}},[s._v("#")]),s._v(" I/O和线程模型")]),s._v(" "),t("p",[t("strong",[s._v("I/O 模型的本质就是为了缓解 CPU 和外设之间的速度差")]),s._v(". 当线程发起 I/O 请求时, 比如读写网络数据, 网卡数据还没准备好, 这个线程就会被阻塞, 让出 CPU, 也就是说发生了线程切换. 而线程切换是无用功, 并且线程被阻塞后, 它持有内存资源并没有释放, 阻塞的线程越多, 消耗的内存就越大, "),t("strong",[s._v("因此 I/O 模型的目标就是尽量减少线程阻塞")]),s._v(". Tomcat 和 Jetty 都已经抛弃了传统的同步阻塞 I/O, 采用了非阻塞 I/O 或者异步 I/O, 目的是业务线程不需要阻塞在 I/O 等待上.")]),s._v(" "),t("p",[s._v("除了 I/O 模型, "),t("strong",[s._v("线程模型也是影响性能和并发的关键点")]),s._v(". Tomcat 和 Jetty 的总体处理原则是:")]),s._v(" "),t("ul",[t("li",[s._v("连接请求由专门的 Acceptor 线程组处理.")]),s._v(" "),t("li",[s._v("I/O 事件侦测也由专门的 Selector 线程组来处理.")]),s._v(" "),t("li",[s._v("具体的协议解析和业务处理可能交给线程池(Tomcat), 或者交给 Selector 线程来处理(Jetty).")])]),s._v(" "),t("p",[s._v("将这些事情分开的好处是解耦, 并且可以根据实际情况合理设置各部分的线程数. 这里请注意, 线程数并不是越多越好, 因为 CPU 核的个数有限, 线程太多也处理不过来, 会导致大量的线程上下文切换.")]),s._v(" "),t("h5",{attrs:{id:"减少系统调用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#减少系统调用"}},[s._v("#")]),s._v(" 减少系统调用")]),s._v(" "),t("p",[s._v("其实系统调用是非常耗资源的一个过程, 涉及 CPU 从用户态切换到内核态的过程, 因此在编写程序的时候要有意识尽量避免系统调用. 比如在 Tomcat 和 Jetty 中, 系统调用最多的就是网络通信操作了, 一个 Channel 上的 write 就是系统调用, "),t("strong",[s._v("为了降低系统调用的次数, 最直接的方法就是使用缓冲, 当输出数据达到一定的大小才 flush 缓冲区. Tomcat 和 Jetty 的 Channel 都带有输入输出缓冲区")]),s._v(".")]),s._v(" "),t("p",[s._v("还有值得一提的是, Tomcat 和 Jetty 在解析 HTTP 协议数据时,  都采取了"),t("strong",[s._v("延迟解析")]),s._v("的策略, HTTP 的请求体(HTTP Body)直到用的时候才解析. 也就是说, 当 Tomcat 调用 Servlet 的 service() 方法时, 只是读取了和解析了 HTTP 请求头, 并没有读取 HTTP 请求体. "),t("strong",[s._v("直到 Web 应用程序调用了 ServletRequest 对象的 getInputStream() 方法或者 getParameter() 方法时, Tomcat 才会去读取和解析 HTTP 请求体中的数据")]),s._v("; 这意味着如果应用程序没有调用上面那两个方法, HTTP 请求体的数据就不会被读取和解析, 这样就省掉了一次 I/O 系统调用.")]),s._v(" "),t("h5",{attrs:{id:"池化-零拷贝"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#池化-零拷贝"}},[s._v("#")]),s._v(" 池化,零拷贝")]),s._v(" "),t("p",[s._v("前面已经分析过池化和零拷贝. 其实池化的本质就是用内存换 CPU; 而零拷贝就是不做无用功, 减少资源浪费.")]),s._v(" "),t("h5",{attrs:{id:"高效的并发编程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#高效的并发编程"}},[s._v("#")]),s._v(" 高效的并发编程")]),s._v(" "),t("p",[s._v("并发的过程中为了同步多个线程对共享变量的访问, 需要加锁来实现. 而锁的开销是比较大的, 拿锁的过程本身就是个系统调用, 如果锁没拿到线程会阻塞, 又会发生线程上下文切换, 尤其是大量线程同时竞争一把锁时, 会浪费大量的系统资源. 因此要有意识的尽量避免锁的使用, 比如可以使用原子类 CAS 或者并发集合来代替. 如果万不得已需要用到锁, 也要尽量缩小锁的范围和锁的强度. 接下来来看看 Tomcat 和 Jetty 如何做到高效的并发编程的.")]),s._v(" "),t("h6",{attrs:{id:"_1-缩小锁的范围"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-缩小锁的范围"}},[s._v("#")]),s._v(" 1.缩小锁的范围")]),s._v(" "),t("p",[s._v("缩小锁的范围, 其实就是不直接在方法上加 synchronized, 而是使用"),t("strong",[s._v("细粒度的对象锁")]),s._v(".")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("startInternal")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LifecycleException")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setState")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LifecycleState")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("STARTING")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 锁 engine 成员变量")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("engine "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("engine"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            engine"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("start")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 锁 executors 成员变量")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("executors"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Executor")]),s._v(" executor"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" executors"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            executor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("start")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n    mapperListener"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("start")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 锁 connectors 成员变量")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("connectorsLock"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Connector")]),s._v(" connector"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" connectors"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// If it has already failed, don't try and start it")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("connector"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getState")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LifecycleState")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("FAILED")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                connector"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("start")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br")])]),t("p",[s._v("比如上面的代码是 Tomcat 的 StandardService 组件的启动方法, 这个启动方法要启动三种子组件: engine, executors 和 connectors. "),t("strong",[s._v("它没有直接在方法上加锁, 而是用了三把细粒度的锁, 来分别用来锁三个成员变量")]),s._v(". 如果直接在方法上加 synchronized, 多个线程执行到这个方法时需要排队; 而在对象级别上加 synchronized, 多个线程可以并行执行这个方法, 只是在访问某个成员变量时才需要排队.")]),s._v(" "),t("h6",{attrs:{id:"_2-用原子变量和cas取代锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-用原子变量和cas取代锁"}},[s._v("#")]),s._v(" 2.用原子变量和CAS取代锁")]),s._v(" "),t("p",[s._v("下面的代码是 Jetty 线程池的启动方法, 它的主要功能就是根据传入的参数启动相应个数的线程.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("startThreads")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" threadsToStart"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("threadsToStart "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isRunning")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 获取当前已经启动的线程数, 如果已经够了就不需要启动了")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" threads "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" _threadsStarted"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("threads "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" _maxThreads"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 用 CAS 方法将线程数加一, 请注意执行失败走 continue, 继续尝试")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("_threadsStarted"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("compareAndSet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("threads"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" threads "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("continue")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" started "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),s._v(" thread "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("newThread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("_runnable"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            thread"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setDaemon")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isDaemon")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            thread"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setPriority")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getThreadsPriority")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            thread"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("_name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" thread"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            _threads"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("thread"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//_threads 并发集合")]),s._v("\n            _lastShrink"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("set")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("nanoTime")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//_lastShrink 是原子变量")]),s._v("\n            thread"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("start")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            started "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("threadsToStart"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("finally")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果最终线程启动失败, 还需要把线程数减一")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("started"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n                _threadsStarted"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("decrementAndGet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br")])]),t("p",[s._v("可以看到整个函数的实现是一个 "),t("strong",[s._v("while 循环")]),s._v(", 并且是"),t("strong",[s._v("无锁")]),s._v("的. "),t("code",[s._v("_threadsStarted")]),s._v("​ 表示当前线程池已经启动了多少个线程, 它是一个原子变量 AtomicInteger, 首先通过它的 get() 方法拿到值, 如果线程数已经达到最大值, 直接返回. 否则尝试用 CAS 操作将 "),t("code",[s._v("_threadsStarted")]),s._v("​ 的值加一, 如果成功了意味着没有其他线程在改这个值, 当前线程可以继续往下执行; 否则走 continue 分支, 也就是继续重试, 直到成功为止. 在这里当然也可以使用锁来实现, 但是我们的目的是无锁化.")]),s._v(" "),t("h6",{attrs:{id:"_3-并发容器的使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-并发容器的使用"}},[s._v("#")]),s._v(" 3.并发容器的使用")]),s._v(" "),t("p",[s._v('CopyOnWriteArrayList 适用于读多写少的场景, 比如 Tomcat 用它来 "存放" 事件监听器, 这是因为监听器一般在初始化过程中确定后就基本不会改变, 当事件触发时需要遍历这个监听器列表, 所以这个场景符合读多写少的特征.')]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("abstract")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LifecycleBase")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Lifecycle")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 事件监听器集合")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LifecycleListener")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" lifecycleListeners "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CopyOnWriteArrayList")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("h6",{attrs:{id:"_4-volatile关键字的使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-volatile关键字的使用"}},[s._v("#")]),s._v(" 4.volatile关键字的使用")]),s._v(" "),t("p",[s._v("再拿 Tomcat 中的 LifecycleBase 作为例子, 它里面的生命状态就是用 volatile 关键字修饰的. volatile 的目的是为了保证一个线程修改了变量, 另一个线程能够读到这种变化. 对于生命状态来说, 需要在各个线程中保持是最新的值, 因此采用了 volatile 修饰.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("abstract")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LifecycleBase")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Lifecycle")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 当前组件的生命状态, 用 volatile 修饰")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("volatile")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LifecycleState")]),s._v(" state "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LifecycleState")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("NEW")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h5",{attrs:{id:"总结-9"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结-9"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),t("p",[s._v("高性能程序能够高效的利用系统资源, 首先就是减少资源浪费, 比如要减少线程的阻塞, 因为阻塞会导致资源闲置和线程上下文切换, Tomcat 和 Jetty 通过合理的 I/O 模型和线程模型减少了线程的阻塞. 另外系统调用会导致用户态和内核态切换的过程, Tomcat 和 Jetty 通过缓存和延迟解析尽量减少系统调用, 另外还通过零拷贝技术避免多余的数据拷贝.")]),s._v(" "),t("p",[s._v("高效的利用资源还包括另一层含义, 那就是在系统设计的过程中, 经常会用一种资源换取另一种资源, 比如 Tomcat 和 Jetty 中使用的对象池技术, 就是用内存换取 CPU, 将数据压缩后再传输就是用 CPU 换网络.")]),s._v(" "),t("p",[s._v("除此之外, 高效的并发编程也很重要, 多线程虽然可以提高并发度, 也带来了锁的开销, 因此在实际编程过程中要尽量避免使用锁, 比如可以用原子变量和 CAS 操作来代替锁. 如果实在避免不了用锁, 也要尽量减少锁的范围和强度, 比如可以用细粒度的对象锁或者低强度的读写锁. Tomcat 和 Jetty 的代码也很好的实践了这一理念.")]),s._v(" "),t("h4",{attrs:{id:"_22-热点答疑-2-内核如何阻塞与唤醒进程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_22-热点答疑-2-内核如何阻塞与唤醒进程"}},[s._v("#")]),s._v(" 22.热点答疑(2):内核如何阻塞与唤醒进程?")]),s._v(" "),t("p",[s._v("前面学习了 Tomcat 连接器组件的设计, "),t("strong",[s._v("其中最重要的是各种 I/O 模型及其实现")]),s._v(". 而 I/O 模型跟操作系统密切相关, 要彻底理解这些原理, 首先需要弄清楚什么是进程和线程, 什么是虚拟内存和物理内存, 什么是用户空间和内核空间, 线程的阻塞到底意味着什么, 内核又是如何唤醒用户线程的等等这些问题. 掌握这些底层的知识, 对于学习 Tomcat 和 Jetty 的原理, 乃至其他各种后端架构都至关重要, 这些知识可以说是后端开发的基石.")]),s._v(" "),t("h5",{attrs:{id:"进程和线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进程和线程"}},[s._v("#")]),s._v(" 进程和线程")]),s._v(" "),t("p",[s._v('先从 Linux 的进程谈起, 操作系统要运行一个可执行程序, 首先要将程序文件加载到内存, 然后 CPU 去读取和执行程序指令, 而一个进程就是 "一次程序的运行过程", 内核会给每一个进程创建一个名为 '),t("code",[s._v("task_struct")]),s._v("​ 的数据结构, 而内核也是一段程序, 系统启动时就被加载到内存中了.")]),s._v(" "),t("p",[s._v("进程在运行过程中要访问内存, 而物理内存是有限的, 比如 16GB, 那怎么把有限的内存分给不同的进程使用呢? 跟 CPU 的分时共享一样, 内存也是共享的, Linux 给每个进程"),t("strong",[s._v("虚拟出一块很大的地址空间")]),s._v(", 比如 32 位机器上进程的虚拟内存地址空间是 4GB, 从 0x00000000 到 0xFFFFFFFF. 但这 4GB 并不是真实的物理内存, 而是进程访问到了某个虚拟地址, 如果这个地址还没有对应的物理内存页, 就会产生"),t("strong",[s._v("缺页中断")]),s._v(", 分配物理内存, MMU(内存管理单元)会将虚拟地址与物理内存页的映射关系保存在页表中, 再次访问这个虚拟地址, 就能找到相应的物理内存页. 每个进程的这 4GB 虚拟地址空间分布如下图所示:")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405161709-b0l6abr.png",alt:""}})]),s._v(" "),t("p",[t("strong",[s._v("进程的虚拟地址空间总体分为用户空间和内核空间")]),s._v(", 低地址上的 3GB 属于用户空间, 高地址的 1GB 是内核空间, 这是基于安全上的考虑, 用户程序只能访问用户空间, 内核程序可以访问整个进程空间, 并且只有内核可以直接访问各种硬件资源, 比如磁盘和网卡. 那用户程序需要访问这些硬件资源该怎么办呢? 答案是通过"),t("strong",[s._v("系统调用")]),s._v(", 系统调用可以理解为内核实现的函数, 比如应用程序要通过网卡接收数据, 会调用 Socket 的 read 函数:")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ssize_t")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("read")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" fd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("buf"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("size_t")]),s._v(" nbyte"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("CPU 在执行系统调用的过程中会从用户态切换到内核态, CPU 在用户态下执行用户程序, 使用的是用户空间的栈, 访问用户空间的内存; 当 CPU 切换到内核态后, 执行内核代码, 使用的是内核空间上的栈.")]),s._v(" "),t("p",[s._v("从上面这张图可以看到, 用户空间从低到高依次是代码区, 数据区, 堆, 共享库与 mmap 内存映射区, 栈, 环境变量. 其中堆向高地址增长, 栈向低地址增长.")]),s._v(" "),t("p",[s._v("请注意用户空间上还有一个共享库和 mmap 映射区, Linux 提供了内存映射函数 mmap, 它可将文件内容映射到这个内存区域, 用户通过读写这段内存, 从而实现对文件的读取和修改, 无需通过 read/write 系统调用来读写文件, 省去了用户空间和内核空间之间的数据拷贝, Java 的 MappedByteBuffer 就是通过它来实现的; 用户程序用到的系统共享库也是通过 mmap 映射到了这个区域.")]),s._v(" "),t("p",[s._v("开始提到的 "),t("code",[s._v("task_struct")]),s._v("​ 结构体本身是分配在内核空间, 它的 "),t("code",[s._v("vm_struct")]),s._v("​ 成员变量保存了各内存区域的起始和终止地址, 此外 "),t("code",[s._v("task_struct")]),s._v("​ 中还保存了进程的其他信息, 比如进程号, 打开的文件, 创建的 Socket 以及 CPU 运行上下文等.")]),s._v(" "),t("p",[s._v("在 Linux 中, 线程是一个轻量级的进程, 轻量级说的是线程只是一个 CPU 调度单元, 因此线程有自己的 "),t("code",[s._v("task_struct")]),s._v("​ 结构体和运行栈区, 但是线程的其他资源都是跟父进程共用的, 比如虚拟地址空间, 打开的文件和 Socket 等.")]),s._v(" "),t("h5",{attrs:{id:"阻塞与唤醒"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#阻塞与唤醒"}},[s._v("#")]),s._v(" 阻塞与唤醒")]),s._v(" "),t("p",[s._v("当用户线程发起一个阻塞式的 read 调用, 数据未就绪时, 线程就会阻塞, 那阻塞具体是如何实现的呢?")]),s._v(" "),t("p",[s._v("Linux 内核将线程当作一个进程进行 CPU 调度, 内核维护了一个可运行的进程队列, 所有处于 "),t("code",[s._v("TASK_RUNNING")]),s._v("​ 状态的进程都会被放入运行队列中, 本质是用双向链表将 "),t("code",[s._v("task_struct")]),s._v("​ 链接起来, 排队使用 CPU 时间片, 时间片用完重新调度 CPU. "),t("strong",[s._v("所谓调度就是在可运行进程列表中选择一个进程, 再从 CPU 列表中选择一个可用的 CPU, 将进程的上下文恢复到这个 CPU 的寄存器中, 然后执行进程上下文指定的下一条指令")]),s._v(".")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405161709-ocws3zb.png",alt:""}})]),s._v(" "),t("p",[s._v("而阻塞的本质就是将进程的 "),t("code",[s._v("task_struct")]),s._v("​ 移出运行队列, 添加到等待队列, 并且将进程的状态的置为 "),t("code",[s._v("TASK_UNINTERRUPTIBLE")]),s._v("​ 或者 "),t("code",[s._v("TASK_INTERRUPTIBLE")]),s._v("​, 重新触发一次 CPU 调度让出 CPU.")]),s._v(" "),t("p",[s._v("那线程怎么唤醒呢? 线程在加入到等待队列的同时向内核注册了一个"),t("strong",[s._v("回调函数")]),s._v(", 告诉内核我在等待这个 Socket 上的数据, 如果数据到了就唤醒我. 这样"),t("strong",[s._v("当网卡接收到数据时, 产生硬件中断, 内核再通过调用回调函数唤醒进程")]),s._v(". 唤醒的过程就是将进程的 "),t("code",[s._v("task_struct")]),s._v("​ 从等待队列移到运行队列, 并且将 "),t("code",[s._v("task_struct")]),s._v("​ 的状态置为 "),t("code",[s._v("TASK_RUNNING")]),s._v("​, 这样进程就有机会重新获得 CPU 时间片.")]),s._v(" "),t("p",[s._v("这个过程中, 内核还会将数据从内核空间拷贝到用户空间的堆上.")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405161709-othexia.png",alt:""}})]),s._v(" "),t("p",[s._v("当 read 系统调用返回时, CPU 又从内核态切换到用户态, 继续执行 read 调用的下一行代码, 并且能从用户空间上的 Buffer 读到数据了.")]),s._v(" "),t("p",[s._v("总结一次 Socket read 系统调用的过程: 首先 CPU 在用户态执行应用程序的代码, 访问进程虚拟地址空间的用户空间; read 系统调用时 CPU 从用户态切换到内核态, 执行内核代码, 内核检测到 Socket 上的数据未就绪时, 将进程的"),t("code",[s._v("task_struct")]),s._v("​结构体从运行队列中移到等待队列, 并触发一次 CPU 调度, 这时进程会让出 CPU; 当网卡数据到达时, 内核将数据从内核空间拷贝到用户空间的 Buffer, 接着将进程的"),t("code",[s._v("task_struct")]),s._v("​结构体重新移到运行队列, 这样进程就有机会重新获得 CPU 时间片, 系统调用返回, CPU 又从内核态切换到用户态, 访问用户空间的数据.")]),s._v(" "),t("h3",{attrs:{id:"容器-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#容器-2"}},[s._v("#")]),s._v(" 容器")]),s._v(" "),t("h4",{attrs:{id:"_23-host容器-tomcat如何实现热部署和热加载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_23-host容器-tomcat如何实现热部署和热加载"}},[s._v("#")]),s._v(" 23.Host容器:Tomcat如何实现热部署和热加载?")]),s._v(" "),t("p",[s._v("接下来开始介绍 Tomcat 的容器模块, 来聊一聊各容器组件实现的功能, 主要有"),t("strong",[s._v("热部署热加载, 类加载机制以及 Servlet 规范")]),s._v("的实现. 最后还会谈到 Spring Boot 是如何与 Web 容器进行交互的.")]),s._v(" "),t("p",[s._v("首先来看热部署和热加载. 要在运行的过程中升级 Web 应用, 如果不想重启系统, 实现的方式有两种: "),t("strong",[s._v("热加载和热部署")]),s._v(".")]),s._v(" "),t("p",[s._v("那如何实现热部署和热加载呢? 它们跟"),t("strong",[s._v("类加载机制")]),s._v("有关, 具体来说就是:")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("热加载的实现方式是 Web 容器启动一个后台线程, 定期检测类文件的变化, 如果有变化, 就重新加载类, 在这个过程中不会清空 Session, 一般用在开发环境.")])]),s._v(" "),t("li",[s._v("**热部署原理类似, 也是由后台线程定时检测 Web 应用的变化, 但它会重新加载整个 Web 应用. 这种方式会清空 Session, 比热加载更加干净, 彻底, 一般用在生产环境. **")])]),s._v(" "),t("p",[s._v("Tomcat 通过开启后台线程, 使得各个层次的容器组件都有机会完成一些"),t("strong",[s._v("周期性任务")]),s._v(". 在实际工作中, 往往也需要执行一些周期性的任务, 比如监控程序周期性拉取系统的健康状态, 就可以借鉴这种设计.")]),s._v(" "),t("h5",{attrs:{id:"tomcat的后台线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tomcat的后台线程"}},[s._v("#")]),s._v(" Tomcat的后台线程")]),s._v(" "),t("p",[s._v("要说开启后台线程做周期性的任务, 有经验的同学马上会想到线程池中的 "),t("strong",[s._v("ScheduledThreadPoolExecutor")]),s._v(", 它除了具有线程池的功能, 还能够执行周期性的任务. Tomcat 就是通过它来开启后台线程的:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[s._v("bgFuture "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" exec"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("scheduleWithFixedDelay")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n              "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ContainerBackgroundProcessor")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 要执行的 Runnable")]),s._v("\n              backgroundProcessorDelay"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 第一次执行延迟多久")]),s._v("\n              backgroundProcessorDelay"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 之后每次执行间隔多久")]),s._v("\n              "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TimeUnit")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SECONDS")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 时间单位")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("上面的代码调用了 scheduleWithFixedDelay() 方法, 传入了四个参数, 第一个参数就是要周期性执行的任务类 ContainerBackgroundProcessor, 它是一个 Runnable, 同时也是 ContainerBase 的内部类, ContainerBase 是所有容器组件的基类, 来回忆一下容器组件有哪些, 有 Engine, Host, Context 和 Wrapper 等, 它们具有父子关系.")]),s._v(" "),t("h6",{attrs:{id:"_1-containerbackgroundprocessor实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-containerbackgroundprocessor实现"}},[s._v("#")]),s._v(" 1.ContainerBackgroundProcessor实现")]),s._v(" "),t("p",[s._v("下面来看 ContainerBackgroundProcessor 具体是如何实现的.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ContainerBackgroundProcessor")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Runnable")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("run")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// 请注意这里传入的参数是 " 宿主类" 的实例')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("processChildren")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ContainerBase")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("processChildren")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Container")]),s._v(" container"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1. 调用当前容器的 backgroundProcess() 方法. ")]),s._v("\n            container"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("backgroundProcess")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    \n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2. 遍历所有的子容器, 递归调用 processChildren(), 这样当前容器的子孙都会被处理        ")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Container")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" children "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" container"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("findChildren")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" children"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这里请注意, 容器基类有个变量叫做 backgroundProcessorDelay, 如果大于 0, 表明子容器有自己的后台线程, ")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 无需父容器来调用它的 processChildren() 方法. ")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("children"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getBackgroundProcessorDelay")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("processChildren")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("children"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Throwable")]),s._v(" t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" \n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ... ")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br")])]),t("p",[s._v('上面的代码逻辑也是比较清晰的, 首先 ContainerBackgroundProcessor 是一个 Runnable, 它需要实现 run() 方法, 它的 run() 很简单, 就是调用了 processChildren() 方法. 这里有个小技巧, 它把 "宿主类", 也就是 '),t("strong",[s._v("ContainerBase 的类实例当成参数传给了 run() 方法")]),s._v(".")]),s._v(" "),t("p",[s._v("而在 processChildren() 方法里, 就做了两步: 调用当前容器的 backgroundProcess() 方法, 以及递归调用子孙的 backgroundProcess() 方法. 请注意 backgroundProcess() 是 Container 接口中的方法, 也就是说"),t("strong",[s._v("所有类型的容器")]),s._v("都可以实现这个方法, "),t("strong",[s._v("在这个方法里完成需要周期性执行的任务")]),s._v(".")]),s._v(" "),t("p",[s._v("这样的设计意味着什么呢? 只需要在顶层容器, 也就是 Engine 容器中启动一个后台线程, 那么这个线程"),t("strong",[s._v("不但会执行 Engine 容器的周期性任务, 它还会执行所有子容器的周期性任务")]),s._v(".")]),s._v(" "),t("h6",{attrs:{id:"_2-backgroundprocess-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-backgroundprocess-方法"}},[s._v("#")]),s._v(" 2.backgroundProcess()方法")]),s._v(" "),t("p",[s._v("上述代码都是在基类 ContainerBase 中实现的, 那具体容器类需要做什么呢? 其实很简单, 如果有周期性任务要执行, 就实现 backgroundProcess() 方法; 如果没有, 就重用基类 ContainerBase 的方法. ContainerBase 的 backgroundProcess() 方法实现如下:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("backgroundProcess")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1. 执行容器中 Cluster 组件的周期性任务")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cluster")]),s._v(" cluster "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getClusterInternal")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cluster "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        cluster"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("backgroundProcess")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2. 执行容器中 Realm 组件的周期性任务")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Realm")]),s._v(" realm "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getRealmInternal")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("realm "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        realm"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("backgroundProcess")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   \n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 3. 执行容器中 Valve 组件的周期性任务")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Valve")]),s._v(" current "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" pipeline"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getFirst")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("current "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n       current"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("backgroundProcess")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n       current "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" current"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getNext")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// 4. 触发容器的 "周期事件", Host 容器的监听器 HostConfig 就靠它来调用')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("fireLifecycleEvent")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Lifecycle")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("PERIODIC_EVENT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br")])]),t("p",[s._v("从上面的代码可以看到, 不仅每个容器可以有周期性任务, 每个容器中的其他通用组件, 比如跟集群管理有关的 Cluster 组件, 跟安全管理有关的 Realm 组件都可以有自己的周期性任务.")]),s._v(" "),t("p",[s._v("前面提到过, "),t("strong",[s._v("容器之间的链式调用是通过 Pipeline-Valve 机制")]),s._v("来实现的, 从上面的代码可以看到容器中的 Valve 也可以有周期性任务, 并且被 ContainerBase 统一处理.")]),s._v(" "),t("p",[s._v("请特别注意, 在 backgroundProcess() 方法的最后, 还"),t("strong",[s._v('触发了容器的 "周期事件"')]),s._v(' . 我们知道容器的生命周期事件有初始化, 启动和停止等, 那 "周期事件" 又是什么呢? 它跟生命周期事件一样, 是一种扩展机制, 可以这样理解:')]),s._v(" "),t("p",[s._v('又一段时间过去了, 容器还活着, 你想做点什么吗? 如果你想做点什么, 就创建一个监听器来监听这个 "周期事件", 事件到了我负责调用你的方法.')]),s._v(" "),t("p",[s._v("总之, 有了 ContainerBase 中的后台线程和 backgroundProcess() 方法, 各种子容器和通用组件不需要各自弄一个后台线程来处理周期性任务, 这样的设计显得优雅和整洁.")]),s._v(" "),t("h5",{attrs:{id:"tomcat热加载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tomcat热加载"}},[s._v("#")]),s._v(" Tomcat热加载")]),s._v(" "),t("p",[s._v('有了 ContainerBase 的周期性任务处理 "框架", 作为'),t("strong",[s._v("具体容器子类, 只需要实现自己的周期性任务就行")]),s._v(". 而 Tomcat 的热加载, 就是在 Context 容器中实现的. Context 容器的 backgroundProcess() 方法是这样实现的:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("backgroundProcess")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// WebappLoader 周期性的检查 WEB-INF/classes 和 WEB-INF/lib 目录下的类文件")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Loader")]),s._v(" loader "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getLoader")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("loader "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        loader"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("backgroundProcess")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Session 管理器周期性的检查是否有过期的 Session")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Manager")]),s._v(" manager "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getManager")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("manager "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        manager"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("backgroundProcess")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 周期性的检查静态资源是否有变化")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("WebResourceRoot")]),s._v(" resources "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getResources")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("resources "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        resources"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("backgroundProcess")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 调用父类 ContainerBase 的 backgroundProcess 方法")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("super")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("backgroundProcess")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br")])]),t("p",[t("strong",[s._v("从上面的代码可以看到 Context 容器通过 WebappLoader 来检查类文件是否有更新, 通过 Session 管理器来检查是否有 Session 过期, 并且通过资源管理器来检查静态资源是否有更新, 最后还调用了父类 ContainerBase 的 backgroundProcess() 方法")]),s._v(".")]),s._v(" "),t("p",[s._v("这里要重点关注, WebappLoader 是如何实现热加载的, 它主要是调用了 Context 容器的 reload() 方法, 而 Context 的 reload() 方法比较复杂, 总结起来, 主要完成了下面这些任务:")]),s._v(" "),t("ol",[t("li",[s._v("停止和销毁 Context 容器及其所有子容器, 子容器其实就是 Wrapper, 也就是说 Wrapper 里面 Servlet 实例也被销毁了.")]),s._v(" "),t("li",[s._v("停止和销毁 Context 容器关联的 Listener 和 Filter.")]),s._v(" "),t("li",[s._v("停止和销毁 Context 下的 Pipeline 和各种 Valve.")]),s._v(" "),t("li",[s._v("停止和销毁 Context 的类加载器, 以及类加载器加载的类文件资源.")]),s._v(" "),t("li",[s._v("启动 Context 容器, 在这个过程中会重新创建前面四步被销毁的资源.")])]),s._v(" "),t("p",[s._v("在这个过程中, "),t("strong",[s._v("类加载器")]),s._v("发挥着关键作用. 一个 Context 容器对应一个类加载器, 类加载器在销毁的过程中会把它加载的所有类也全部销毁. Context 容器在启动过程中, 会创建一个新的类加载器来加载新的类文件.")]),s._v(" "),t("p",[s._v("在 Context 的 reload() 方法里, 并没有调用 Session 管理器的 distroy() 方法, 也就是说这个 Context 关联的 Session 是没有销毁的. 还需要注意的是, Tomcat 的"),t("strong",[s._v("热加载默认是关闭")]),s._v("的, 需要在 conf 目录下的 Context.xml 文件中设置 reloadable 参数来开启这个功能, 像下面这样:")]),s._v(" "),t("div",{staticClass:"language-xml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("Context")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("reloadable")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("true"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("/>")])]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h5",{attrs:{id:"tomcat热部署"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tomcat热部署"}},[s._v("#")]),s._v(" Tomcat热部署")]),s._v(" "),t("p",[s._v("再来看看热部署, 热部署跟热加载的本质区别是, "),t("strong",[s._v("热部署会重新部署 Web 应用, 原来的 Context 对象会整个被销毁掉, 因此这个 Context 所关联的一切资源都会被销毁, 包括 Session")]),s._v(".")]),s._v(" "),t("p",[s._v("那么 Tomcat 热部署又是由哪个容器来实现的呢? 应该不是由 Context, 因为热部署过程中 Context 容器被销毁了, 那么这个重担就落在 "),t("strong",[s._v("Host")]),s._v(" 身上了, 因为它是 Context 的父容器.")]),s._v(" "),t("p",[s._v("跟 Context 不一样, Host 容器并没有在 backgroundProcess() 方法中实现周期性检测的任务, 而是"),t("strong",[s._v('通过监听器 HostConfig 来实现的, HostConfig 就是前面提到的 "周期事件" 的监听器')]),s._v(', 那 "周期事件" 达到时, HostConfig 会做什么事呢?')]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("lifecycleEvent")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LifecycleEvent")]),s._v(" event"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 执行 check 方法")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("event"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getType")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("equals")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Lifecycle")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("PERIODIC_EVENT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("check")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("它执行了 check() 方法, 接着来看 check() 方法里做了什么.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("check")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("host"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getAutoDeploy")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 检查这个 Host 下所有已经部署的 Web 应用")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("DeployedApplication")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" apps "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("\n            deployed"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("values")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("toArray")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("DeployedApplication")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      \n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" apps"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 检查 Web 应用目录是否有变化")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("checkResources")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("apps"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 执行部署")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("deployApps")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br")])]),t("p",[s._v("其实 HostConfig 会检查 webapps 目录下的所有 Web 应用:")]),s._v(" "),t("ul",[t("li",[s._v("**如果原来 Web 应用目录被删掉了, 就把相应 Context 容器整个销毁掉. **")]),s._v(" "),t("li",[s._v("**是否有新的 Web 应用目录放进来了, 或者有新的 WAR 包放进来了, 就部署相应的 Web 应用. **")])]),s._v(" "),t("p",[s._v('因此 HostConfig 做的事情都是比较 "宏观" 的, 它不会去检查具体类文件或者资源文件是否有变化, 而是检查 Web 应用目录级别的变化.')]),s._v(" "),t("h5",{attrs:{id:"总结-10"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结-10"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),t("p",[s._v("这里介绍了 Tomcat 的热加载和热部署, 它们的目的都是在不重启 Tomcat 的情况下实现 Web 应用的更新.")]),s._v(" "),t("p",[s._v("热加载的粒度比较小, 主要是针对类文件的更新, 通过创建新的类加载器来实现重新加载. 而热部署是针对整个 Web 应用的, Tomcat 会将原来的 Context 对象整个销毁掉, 再重新创建 Context 容器对象.")]),s._v(" "),t("p",[s._v("热加载和热部署的实现都离不开后台线程的周期性检查, Tomcat 在基类 ContainerBase 中统一实现了后台线程的处理逻辑, 并在顶层容器 Engine 启动后台线程, 这样子容器组件甚至各种通用组件都不需要自己去创建后台线程, 这样的设计显得优雅整洁.")]),s._v(" "),t("p",[s._v("‍")]),s._v(" "),t("h4",{attrs:{id:"_24-context容器-上-tomcat如何打破双亲委托机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_24-context容器-上-tomcat如何打破双亲委托机制"}},[s._v("#")]),s._v(" 24.Context容器(上):Tomcat如何打破双亲委托机制?")]),s._v(" "),t("p",[s._v("ClassNotFound 异常表示 JVM 在尝试加载某个类的时候失败了. 想要解决这个问题, 首先需要知道什么是类加载, JVM 是如何加载类的, 以及为什么会出现 ClassNotFound 异常? 弄懂上面这些问题之后, 接着要思考 Tomcat 作为 Web 容器, 它是如何加载和管理 Web 应用下的 Servlet 呢?")]),s._v(" "),t("p",[s._v("Tomcat 正是通过 Context 组件来加载管理 Web 应用的, 所以这里详细分析 Tomcat 的类加载机制. 但在这之前, 有必要预习一下 JVM 的类加载机制, 接着再谈谈 Tomcat 的类加载器如何打破 Java 的双亲委托机制.")]),s._v(" "),t("h5",{attrs:{id:"jvm的类加载器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jvm的类加载器"}},[s._v("#")]),s._v(" JVM的类加载器")]),s._v(" "),t("p",[s._v('Java 的类加载, 就是把字节码格式 ".class" 文件加载到 JVM 的'),t("strong",[s._v("方法区")]),s._v(", 并在 JVM 的"),t("strong",[s._v("堆区")]),s._v("建立一个 "),t("code",[s._v("java.lang.Class")]),s._v("​ 对象的实例, 用来封装 Java 类相关的数据和方法. 那 Class 对象又是什么呢? 你可以把它理解成业务类的模板, JVM 根据这个模板来创建具体业务类对象实例.")]),s._v(" "),t("p",[s._v('JVM 并不是在启动时就把所有的 ".class" 文件都加载一遍, 而是程序在运行过程中'),t("strong",[s._v("用到了这个类才去加载")]),s._v(". JVM 类加载是由类加载器来完成的, JDK 提供一个抽象类 "),t("strong",[s._v("ClassLoader")]),s._v(", 这个抽象类中定义了三个关键方法, 理解清楚它们的作用和关系非常重要.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("abstract")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassLoader")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 每个类加载器都有个父加载器")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassLoader")]),s._v(" parent"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("loadClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  \n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 查找一下这个类是不是已经加载过了")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" c "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("findLoadedClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果没有加载过")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" c "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 先委托给父加载器去加载, 注意这是个递归调用")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("parent "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n              c "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" parent"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("loadClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n              "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果父加载器为空, 查找 Bootstrap 加载器是不是加载过了")]),s._v("\n              c "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("findBootstrapClassOrNull")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果父加载器没加载成功, 调用自己的 findClass 去加载")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("c "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            c "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("findClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  \n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("findClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1. 根据传入的类名 name, 到在特定目录下去寻找类文件, 把.class 文件读入内存")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n  \n       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2. 调用 defineClass 将字节数组转成 Class 对象")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("defineClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("buf"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" off"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" len"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 将字节码数组解析成一个 Class 对象, 用 native 方法实现")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("defineClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("byte")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" off"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" len"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br")])]),t("p",[s._v("从上面的代码可以得到几个关键信息:")]),s._v(" "),t("ul",[t("li",[s._v("JVM 的类加载器是分层次的, 它们有父子关系, 每个类加载器都持有一个 parent 字段, 指向父加载器.")]),s._v(" "),t("li",[s._v("defineClass() 是个工具方法, 它的职责是调用 native 方法把 Java 类的字节码解析成一个 Class 对象, 所谓的 native 方法就是由 C 语言实现的方法, Java 通过 JNI 机制调用.")]),s._v(" "),t("li",[s._v('findClass() 方法的主要职责就是找到 ".class" 文件, 可能来自文件系统或者网络, 找到后把 ".class" 文件读到内存得到字节码数组, 然后调用 defineClass() 方法得到 Class 对象.')]),s._v(" "),t("li",[s._v("loadClass() 是个 public 方法, 说明它才是对外提供服务的接口, 具体实现也比较清晰: 首先检查这个类是不是已经被加载过了, 如果加载过了直接返回, 否则交给父加载器去加载. 请注意, 这是一个"),t("strong",[s._v("递归调用")]),s._v(", 也就是说子加载器持有父加载器的引用, 当一个类加载器需要加载一个 Java 类时, 会先委托父加载器去加载, 然后父加载器在自己的加载路径中搜索 Java 类, 当父加载器在自己的加载范围内找不到时, 才会交还给子加载器加载, 这就是"),t("strong",[s._v("双亲委托机制")]),s._v(".")])]),s._v(" "),t("p",[s._v("JDK 中有哪些默认的类加载器? 它们的本质区别是什么? 为什么需要双亲委托机制? JDK 中有 3 个类加载器, 另外也可以自定义类加载器, 它们的关系如下图所示.")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405161811-bd1zrn7.png",alt:""}})]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("BootstrapClassLoader")]),s._v(" 是启动类加载器, 由 C 语言实现, 用来加载 JVM 启动时所需要的核心类, 比如 "),t("code",[s._v("rt.jar")]),s._v("​, "),t("code",[s._v("resources.jar")]),s._v("​ 等.")]),s._v(" "),t("li",[t("strong",[s._v("ExtClassLoader")]),s._v(" 是扩展类加载器, 用来加载 "),t("code",[s._v("\\jre\\lib\\ext")]),s._v("​ 目录下 JAR 包.")]),s._v(" "),t("li",[t("strong",[s._v("AppClassLoader")]),s._v(" 是系统类加载器, 用来加载 classpath 下的类, 应用程序默认用它来加载类.")]),s._v(" "),t("li",[s._v("自定义类加载器, 用来加载自定义路径下的类.")])]),s._v(" "),t("p",[s._v("这些类加载器的工作原理是一样的, 区别是它们的"),t("strong",[s._v("加载路径不同")]),s._v(", 也就是说 findClass() 这个方法查找的路径不同. 双亲委托机制是为了保证一个 Java 类在 JVM 中是唯一的, 假如你不小心写了一个与 JRE 核心类同名的类, 比如 Object 类, 双亲委托机制能保证加载的是 JRE 里的那个 Object 类, 而不是你写的 Object 类. 这是因为 AppClassLoader 在加载你的 Object 类时, 会委托给 ExtClassLoader 去加载, 而 ExtClassLoader 又会委托给 BootstrapClassLoader, BootstrapClassLoader 发现自己已经加载过了 Object 类, 会直接返回, 不会去加载你写的 Object 类.")]),s._v(" "),t("p",[s._v("请注意, "),t("strong",[s._v("类加载器的父子关系不是通过继承来实现的, 比如 AppClassLoader 并不是 ExtClassLoader 的子类, 而是说 AppClassLoader 的 parent 成员变量指向 ExtClassLoader 对象")]),s._v(". 同样的道理, 如果要自定义类加载器, 不去继承 AppClassLoader, 而是继承 ClassLoader 抽象类, 再重写 findClass() 和 loadClass() 方法即可, "),t("strong",[s._v("Tomcat 就是通过自定义类加载器来实现自己的类加载逻辑")]),s._v(". 因此如果要打破双亲委托机制, 就需要重写 loadClass() 方法, 因为 loadClass() 的默认实现就是双亲委托机制.")]),s._v(" "),t("h5",{attrs:{id:"tomcat的类加载器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tomcat的类加载器"}},[s._v("#")]),s._v(" Tomcat的类加载器")]),s._v(" "),t("p",[s._v("Tomcat 的自定义类加载器 "),t("strong",[s._v("WebAppClassLoader")]),s._v(" 打破了双亲委托机制, 它"),t("strong",[s._v("首先自己尝试去加载某个类, 如果找不到再代理给父类加载器")]),s._v(", 其目的是"),t("strong",[s._v("优先加载 Web 应用自己定义的类")]),s._v(". 具体实现就是重写 ClassLoader 的两个方法: findClass() 和 loadClass().")]),s._v(" "),t("h6",{attrs:{id:"_1-findclass-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-findclass-方法"}},[s._v("#")]),s._v(" 1.findClass()方法")]),s._v(" "),t("p",[s._v("先来看看 findClass() 方法的实现, 为了方便理解和阅读, 下面去掉了一些细节:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("findClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassNotFoundException")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" clazz "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1. 先在 Web 应用目录下查找类 ")]),s._v("\n            clazz "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("findClassInternal")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RuntimeException")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n           "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throw")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("clazz "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2. 如果在本地目录没有找到, 交给父加载器去查找")]),s._v("\n            clazz "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("super")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("findClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RuntimeException")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n           "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throw")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 3. 如果父类也没找到, 抛出 ClassNotFoundException")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("clazz "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throw")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassNotFoundException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" clazz"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br")])]),t("p",[s._v("在 findClass() 方法里, 主要有三个步骤:")]),s._v(" "),t("ol",[t("li",[s._v("**先在 Web 应用本地目录下查找要加载的类. **")]),s._v(" "),t("li",[s._v("**如果没有找到, 交给父加载器去查找, 它的父加载器就是上面提到的系统类加载器 AppClassLoader. **")]),s._v(" "),t("li",[s._v("**如何父加载器也没找到这个类, 抛出 ClassNotFound 异常. **")])]),s._v(" "),t("h6",{attrs:{id:"_2-loadclass-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-loadclass-方法"}},[s._v("#")]),s._v(" 2.loadClass()方法")]),s._v(" "),t("p",[s._v("接着再来看 Tomcat 类加载器的 loadClass() 方法的实现, 同样也去掉了一些细节:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("loadClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" resolve"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassNotFoundException")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getClassLoadingLock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" clazz "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1. 先在本地 cache 查找该类是否已经加载过")]),s._v("\n        clazz "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("findLoadedClass0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("clazz "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("resolve"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("resolveClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("clazz"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" clazz"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2. 从系统类加载器的 cache 中查找是否加载过")]),s._v("\n        clazz "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("findLoadedClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("clazz "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("resolve"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("resolveClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("clazz"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" clazz"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 3. 尝试用 ExtClassLoader 类加载器类加载, 为什么? ")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassLoader")]),s._v(" javaseLoader "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getJavaseClassLoader")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            clazz "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" javaseLoader"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("loadClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("clazz "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("resolve"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("resolveClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("clazz"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" clazz"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassNotFoundException")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Ignore")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 4. 尝试在本地目录搜索 class 并加载")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            clazz "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("findClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("clazz "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("resolve"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("resolveClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("clazz"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" clazz"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassNotFoundException")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Ignore")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 5. 尝试用系统类加载器 (也就是 AppClassLoader) 来加载")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                clazz "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("forName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" parent"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("clazz "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("resolve"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n                        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("resolveClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("clazz"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" clazz"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassNotFoundException")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Ignore")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 6. 上述过程都加载失败, 抛出异常")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throw")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassNotFoundException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br"),t("span",{staticClass:"line-number"},[s._v("59")]),t("br"),t("span",{staticClass:"line-number"},[s._v("60")]),t("br"),t("span",{staticClass:"line-number"},[s._v("61")]),t("br"),t("span",{staticClass:"line-number"},[s._v("62")]),t("br"),t("span",{staticClass:"line-number"},[s._v("63")]),t("br")])]),t("p",[s._v("loadClass() 方法稍微复杂一点, 主要有六个步骤:")]),s._v(" "),t("ol",[t("li",[s._v("先在本地 Cache 查找该类是否已经加载过, 也就是说 Tomcat 的类加载器是否已经加载过这个类.")]),s._v(" "),t("li",[s._v("如果 Tomcat 类加载器没有加载过这个类, 再看看系统类加载器是否加载过.")]),s._v(" "),t("li",[s._v("如果都没有, 就让 "),t("strong",[s._v("ExtClassLoader ** 去加载, 这一步比较关键, 目的")]),s._v("防止 Web 应用自己的类覆盖 JRE 的核心类**. 因为 Tomcat 需要打破双亲委托机制, 假如 Web 应用里自定义了一个叫 Object 的类, 如果先加载这个 Object 类, 就会覆盖 JRE 里面的那个 Object 类, 这就是为什么 Tomcat 的类加载器会"),t("strong",[s._v("优先尝试用 ExtClassLoader 去加载")]),s._v(", 因为 ExtClassLoader 会委托给 BootstrapClassLoader 去加载, BootstrapClassLoader 发现自己已经加载了 Object 类, 直接返回给 Tomcat 的类加载器, 这样 Tomcat 的类加载器就不会去加载 Web 应用下的 Object 类了, 也就避免了覆盖 JRE 核心类的问题.")]),s._v(" "),t("li",[s._v("如果 ExtClassLoader 加载器加载失败, 也就是说 JRE 核心类中没有这类, 那么就在本地 Web 应用目录下查找并加载.")]),s._v(" "),t("li",[s._v("如果本地目录下没有这个类, 说明不是 Web 应用自己定义的类, 那么由"),t("strong",[s._v("系统类加载器去加载")]),s._v(". 这里请注意, Web 应用是通过"),t("code",[s._v("Class.forName")]),s._v("​ 调用交给系统类加载器的, 因为 "),t("code",[s._v("Class.forName")]),s._v("​ 的默认加载器就是系统类加载器.")]),s._v(" "),t("li",[s._v("如果上述加载过程全部失败, 抛出 ClassNotFound 异常.")])]),s._v(" "),t("p",[s._v("从上面的过程可以看到, "),t("strong",[s._v("Tomcat 的类加载器打破了双亲委托机制, 没有一上来就直接委托给父加载器, 而是先在本地目录下加载, 为了避免本地目录下的类覆盖 JRE 的核心类, 先尝试用 JVM 扩展类加载器 ExtClassLoader 去加载. 那为什么不先用系统类加载器 AppClassLoader 去加载? 很显然, 如果是这样的话, 那就变成双亲委托机制了, 这就是 Tomcat 类加载器的巧妙之处")]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"总结-11"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结-11"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),t("p",[s._v("这里介绍了 JVM 的类加载器原理和源码剖析, 以及 Tomcat 的类加载器是如何打破双亲委托机制的, 目的是为了优先加载 Web 应用目录下的类, 然后再加载其他目录下的类, 这也是 Servlet 规范的推荐做法.")]),s._v(" "),t("p",[s._v("要打破双亲委托机制, 需要继承 ClassLoader 抽象类, 并且需要重写它的 loadClass() 方法, 因为 ClassLoader 的默认实现就是双亲委托.")]),s._v(" "),t("h4",{attrs:{id:"_25-context容器-中-tomcat如何隔离web应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_25-context容器-中-tomcat如何隔离web应用"}},[s._v("#")]),s._v(" 25.Context容器(中):Tomcat如何隔离Web应用?")]),s._v(" "),t("p",[s._v("前面提到, Tomcat 通过自定义类加载器 WebAppClassLoader 打破了双亲委托机制, 具体来说就是重写了 JVM 的类加载器 ClassLoader 的 findClass() 方法和 loadClass() 方法, 这样做的目的是"),t("strong",[s._v("优先加载 Web 应用目录下的类")]),s._v(". 除此之外, 你觉得 Tomcat 的类加载器还需要完成哪些需求呢? 或者说在设计上还需要考虑哪些方面?")]),s._v(" "),t("p",[s._v("Tomcat 作为 Servlet 容器, 它负责加载 Servlet 类, 此外它还负责加载 "),t("strong",[s._v("Servlet 所依赖的 JAR 包")]),s._v(". 并且 Tomcat 本身也是也是一个 Java 程序, 因此它需要加载自己的类和依赖的 JAR 包. 首先思考这一下这几个问题:")]),s._v(" "),t("ol",[t("li",[s._v("假如在 Tomcat 中运行了两个 Web 应用程序, 两个 Web 应用中有"),t("strong",[s._v("同名的 Servlet")]),s._v(", 但是功能不同, Tomcat 需要同时加载和管理这两个同名的 Servlet 类, 保证它们不会冲突, 因此 Web 应用之间的类需要隔离.")]),s._v(" "),t("li",[s._v("假如两个 Web 应用都"),t("strong",[s._v("依赖同一个第三方的 JAR 包")]),s._v(", 比如 Spring, 那 Spring 的 JAR 包被加载到内存后, Tomcat 要保证这两个 Web 应用能够共享, 也就是说 Spring 的 JAR 包只被加载一次, 否则随着依赖的第三方 JAR 包增多, JVM 的内存会膨胀.")]),s._v(" "),t("li",[s._v("跟 JVM 一样, 需要隔离 Tomcat 本身的类和 Web 应用的类.")])]),s._v(" "),t("p",[s._v("在了解了 Tomcat 的类加载器在设计时要考虑的这些问题以后, 这里主要来分析一下 Tomcat 是如何通过设计多层次的类加载器来解决这些问题的.")]),s._v(" "),t("h5",{attrs:{id:"tomcat类加载器的层次结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tomcat类加载器的层次结构"}},[s._v("#")]),s._v(" Tomcat类加载器的层次结构")]),s._v(" "),t("p",[s._v("为了解决这些问题, Tomcat 设计了类加载器的层次结构, 它们的关系如下图所示. 下面详细解释为什么要设计这些类加载器, 以及它们如何解决上面这些问题.")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405161829-mcilwn8.png",alt:""}})]),s._v(" "),t("p",[s._v("先来看"),t("strong",[s._v("第 1 个问题")]),s._v(", 假如使用 JVM 默认 AppClassLoader 来加载 Web 应用, AppClassLoader 只能加载一个 Servlet 类, 在加载第二个同名 Servlet 类时, AppClassLoader 会返回第一个 Servlet 类的 Class 实例, 这是因为在 AppClassLoader 看来, 同名的 Servlet 类"),t("strong",[s._v("只被加载一次")]),s._v(".")]),s._v(" "),t("p",[s._v("因此 Tomcat 的解决方案是"),t("strong",[s._v("自定义一个类加载器 WebAppClassLoader, 并且给每个 Web 应用创建一个类加载器实例")]),s._v(". 由于 Context 容器组件对应一个 Web 应用, 因此, 每个 Context 容器负责创建和维护一个 WebAppClassLoader 加载器实例. 这背后的原理是, "),t("strong",[s._v("不同的加载器实例加载的类被认为是不同的类")]),s._v(", 即使它们的类名相同. 这就相当于在 Java 虚拟机内部创建了一个个相互隔离的 Java 类空间, "),t("strong",[s._v("每一个 Web 应用都有自己的类空间, Web 应用之间通过各自的类加载器互相隔离")]),s._v(".")]),s._v(" "),t("h6",{attrs:{id:"_1-sharedclassloader"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-sharedclassloader"}},[s._v("#")]),s._v(" 1.SharedClassLoader")]),s._v(" "),t("p",[s._v("再来看"),t("strong",[s._v("第 2 个问题")]),s._v(", 本质需求是两个 Web 应用之间"),t("strong",[s._v("怎么共享库类")]),s._v(", 并且不能重复加载相同的类. 在双亲委托机制里, 各个子加载器都可以通过父加载器去加载类, 那么把需要共享的类放到父加载器的加载路径下不就行了吗, 应用程序也正是通过这种方式共享 JRE 的核心类. 因此 Tomcat 的设计者"),t("strong",[s._v("又加了一个类加载器 SharedClassLoader, 作为 WebAppClassLoader 的父加载器, 专门来加载 Web 应用之间共享的类")]),s._v(". 如果 WebAppClassLoader 自己没有加载到某个类, 就会委托父加载器 SharedClassLoader 去加载这个类, SharedClassLoader 会在指定目录下加载共享类, 之后返回给 WebAppClassLoader, 这样共享的问题就解决了.")]),s._v(" "),t("h6",{attrs:{id:"_2-catalinaclassloader"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-catalinaclassloader"}},[s._v("#")]),s._v(" 2.CatalinaClassloader")]),s._v(" "),t("p",[s._v("来看"),t("strong",[s._v("第 3 个问题")]),s._v(", 如何隔离 Tomcat 本身的类和 Web 应用的类? 如果"),t("strong",[s._v("要共享可以通过父子关系, 要隔离那就需要兄弟关系")]),s._v("了. 兄弟关系就是指两个类加载器是平行的, 它们可能拥有同一个父加载器, 但是两个兄弟类加载器加载的类是隔离的. 基于此 Tomcat 又设计一个"),t("strong",[s._v("类加载器 CatalinaClassloader, 专门来加载 Tomcat 自身的类")]),s._v(". 这样设计有个问题, 那 Tomcat 和各 Web 应用之间需要共享一些类时该怎么办呢?")]),s._v(" "),t("h6",{attrs:{id:"_3-commonclassloader"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-commonclassloader"}},[s._v("#")]),s._v(" 3.CommonClassLoader")]),s._v(" "),t("p",[s._v("老办法, 还是"),t("strong",[s._v("再增加一个 CommonClassLoader, 作为 CatalinaClassloader 和 SharedClassLoader 的父加载器")]),s._v(". CommonClassLoader 能加载的类都可以被 CatalinaClassLoader 和 SharedClassLoader 使用, 而 CatalinaClassLoader 和 SharedClassLoader 能加载的类则与对方相互隔离. WebAppClassLoader 可以使用 SharedClassLoader 加载到的类, 但各个 WebAppClassLoader 实例之间相互隔离.")]),s._v(" "),t("h5",{attrs:{id:"spring的加载问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring的加载问题"}},[s._v("#")]),s._v(" Spring的加载问题")]),s._v(" "),t("p",[s._v("在 JVM 的实现中有一条隐含的规则, 默认情况下, "),t("strong",[s._v("如果一个类由类加载器 A 加载, 那么这个类的依赖类也是由相同的类加载器加载")]),s._v(". 比如 Spring 作为一个 Bean 工厂, 它需要创建业务类的实例, 并且在创建业务类实例之前需要加载这些类. Spring 是通过调用 "),t("code",[s._v("Class.forName")]),s._v("​ 来加载业务类的, 来看一下 forName() 的源码:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("forName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" className"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" caller "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Reflection")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getCallerClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("forName0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("className"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassLoader")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getClassLoader")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("caller"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" caller"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("可以看到在 forName() 的函数里, 会用调用者也就是 "),t("strong",[s._v("Spring 的加载器去加载业务类")]),s._v(".")]),s._v(" "),t("p",[s._v("前面提到, Web 应用之间共享的 JAR 包可以交给 SharedClassLoader 来加载, 从而避免重复加载. "),t("strong",[s._v("Spring 作为共享的第三方 JAR 包, 它本身是由 SharedClassLoader 来加载的")]),s._v(", Spring 又要去加载业务类, 按照前面那条规则, 加载 Spring 的类加载器也会用来加载业务类, 但是业务类在 Web 应用目录下, 不在 SharedClassLoader 的加载路径下, 这该怎么办呢?")]),s._v(" "),t("p",[t("strong",[s._v("于是线程上下文加载器登场了, 它其实是一种类加载器传递机制")]),s._v('. 为什么叫作 "线程上下文加载器" 呢, 因为这个类加载器保存在线程私有数据里, 只要是同一个线程, 一旦设置了线程上下文加载器, 在线程后续执行过程中就能把这个类加载器取出来用. '),t("strong",[s._v("因此 Tomcat 为每个 Web 应用创建一个 WebAppClassLoarder 类加载器, 并在启动 Web 应用的线程里设置线程上下文加载器, 这样 Spring 在启动时就将线程上下文加载器取出来, 用来加载 Bean")]),s._v(". Spring 取线程上下文加载的代码如下:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[s._v("cl "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("currentThread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getContextClassLoader")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h5",{attrs:{id:"总结-12"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结-12"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),t("p",[s._v("本节介绍了 JVM 的类加载器原理并剖析了源码, 以及 Tomcat 的类加载器的设计. 重点需要理解的是, Tomcat 的 Context 组件为每个 Web 应用创建一个 WebAppClassLoarder 类加载器, 由于"),t("strong",[s._v("不同类加载器实例加载的类是互相隔离的")]),s._v(", 因此达到了隔离 Web 应用的目的, 同时通过 CommonClassLoader 等父加载器来共享第三方 JAR 包. 而共享的第三方 JAR 包怎么加载特定 Web 应用的类呢? 可以通过设置线程上下文加载器来解决. 我们应该牢记的是:")]),s._v(" "),t("ul",[t("li",[s._v("每个 Web 应用自己的 Java 类文件和依赖的 JAR 包, 分别放在 "),t("code",[s._v("WEB-INF/classes")]),s._v("​ 和 "),t("code",[s._v("WEB-INF/lib")]),s._v("​ 目录下面.")]),s._v(" "),t("li",[s._v("多个应用共享的 Java 类文件和 JAR 包, 分别放在 Web 容器指定的共享目录下.")]),s._v(" "),t("li",[s._v("当出现 ClassNotFound 错误时, 应该检查类加载器是否正确.")])]),s._v(" "),t("p",[s._v("线程上下文加载器不仅仅可以用在 Tomcat 和 Spring 类加载的场景里, 核心框架类需要加载具体实现类时都可以用到它, 比如 JDBC 就是通过上下文类加载器来加载不同的数据库驱动的, 感兴趣的话可以深入了解一下.")]),s._v(" "),t("h4",{attrs:{id:"_26-context容器-下-tomcat如何实现servlet规范"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_26-context容器-下-tomcat如何实现servlet规范"}},[s._v("#")]),s._v(" 26.Context容器(下):Tomcat如何实现Servlet规范?")]),s._v(" "),t("p",[s._v("Servlet 容器最重要的任务就是创建 Servlet 的实例并且调用 Servlet, 前面分析了 Tomcat 如何定义自己的类加载器来加载 Servlet, 但加载 Servlet 的类不等于创建 Servlet 的实例, 类加载只是第一步, 类加载好了才能创建类的实例, 也就是说 "),t("strong",[s._v("Tomcat 先加载 Servlet 的类, 然后在 Java 堆上创建了一个 Servlet 实例")]),s._v(".")]),s._v(" "),t("p",[s._v("一个 Web 应用里往往有多个 Servlet, 而在 Tomcat 中一个 Web 应用对应一个 Context 容器, 也就是说一个 Context 容器需要管理多个 Servlet 实例. 但 Context 容器并不直接持有 Servlet 实例, 而是通过子容器 Wrapper 来管理 Servlet, 可以把 Wrapper 容器看作是 Servlet 的包装.")]),s._v(" "),t("p",[s._v("那为什么需要 Wrapper 呢? Context 容器直接维护一个 Servlet 数组不就行了吗? 这是因为 Servlet 不仅仅是一个类实例, 它还有相关的配置信息, 比如它的 URL 映射, 它的初始化参数, 因此设计出了一个包装器, 把 Servlet 本身和它相关的数据包起来, 没错, 这就是面向对象的思想.")]),s._v(" "),t("p",[s._v("那管理好 Servlet 就完事大吉了吗? 别忘了 "),t("strong",[s._v("Servlet 还有两个兄弟: Listener 和 Filter")]),s._v(", 它们也是 Servlet 规范中的重要成员, 因此 Tomcat 也需要创建它们的实例, 也需要在合适的时机去调用它们的方法.")]),s._v(" "),t("p",[s._v("下面就来聊一聊是 Tomcat 如何做到上面这些事的.")]),s._v(" "),t("h5",{attrs:{id:"servlet管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#servlet管理"}},[s._v("#")]),s._v(" Servlet管理")]),s._v(" "),t("p",[s._v("前面提到, Tomcat 是用 Wrapper 容器来管理 Servlet 的, 那 Wrapper 容器具体长什么样子呢? 先来看看它里面有哪些关键的成员变量:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("volatile")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Servlet")]),s._v(" instance "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("毫无悬念, 它拥有一个 Servlet 实例, 并且 Wrapper 通过 loadServlet() 方法来实例化 Servlet. 为了方便阅读, 下面简化了代码:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Servlet")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("loadServlet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletException")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Servlet")]),s._v(" servlet"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1. 创建一个 Servlet 实例")]),s._v("\n    servlet "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Servlet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" instanceManager"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("newInstance")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("servletClass"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \n  \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2. 调用了 Servlet 的 init() 方法, 这是 Servlet 规范要求的")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("initServlet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("servlet"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" servlet"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[s._v("其实 loadServlet() 主要做了两件事: 创建 Servlet 的实例, 并且调用 Servlet 的 init() 方法, 因为这是 Servlet 规范要求的.")]),s._v(" "),t("p",[s._v("那接下来的问题是, 什么时候会调到这个 loadServlet() 方法呢? 为了加快系统的启动速度, 往往会采取"),t("strong",[s._v("资源延迟加载")]),s._v("的策略, Tomcat 也不例外, 默认情况下 Tomcat 在启动时不会加载 Servlet, 除非把 Servlet 的 "),t("code",[s._v("loadOnStartup")]),s._v("​ 参数设置为 "),t("code",[s._v("true")]),s._v("​.")]),s._v(" "),t("p",[s._v("这里还需要注意的是, 虽然 Tomcat 在启动时不会创建 Servlet 实例, 但是"),t("strong",[s._v("会创建 Wrapper 容器")]),s._v(", 就好比尽管枪里面还没有子弹, 先把枪造出来. 那子弹什么时候造呢? 是真正需要开枪的时候, 也就是说"),t("strong",[s._v("有请求来访问某个 Servlet 时, 这个 Servlet 的实例才会被创建")]),s._v(".")]),s._v(" "),t("p",[s._v("那 Servlet 是被谁调用的呢? 回忆一下前面提到过 Tomcat 的 "),t("strong",[s._v("Pipeline-Valve 机制")]),s._v(", 每个容器组件都有自己的 Pipeline, 每个 Pipeline 中有一个 Valve 链, 并且每个容器组件有一个 BasicValve(基础阀). Wrapper 作为一个容器组件, 它也有自己的 Pipeline 和 BasicValve, Wrapper 的 BasicValve 叫 "),t("strong",[s._v("StandardWrapperValve")]),s._v(".")]),s._v(" "),t("p",[s._v("可以想到, 当请求到来时, Context 容器的 BasicValve 会调用 Wrapper 容器中 Pipeline 中的第一个 Valve, 然后会调用到 "),t("strong",[s._v("StandardWrapperValve")]),s._v(". 先来看看它的 invoke() 方法是如何实现的, 同样为了方便阅读, 下面也简化了代码:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("invoke")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Request")]),s._v(" request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Response")]),s._v(" response"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1. 实例化 Servlet")]),s._v("\n    servlet "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" wrapper"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("allocate")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2. 给当前请求创建一个 Filter 链")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ApplicationFilterChain")]),s._v(" filterChain "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ApplicationFilterFactory")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("createFilterChain")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" wrapper"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" servlet"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 3. 调用这个 Filter 链, Filter 链中的最后一个 Filter 会调用 Servlet")]),s._v("\n   filterChain"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("doFilter")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getRequest")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" response"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getResponse")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("p",[s._v("StandardWrapperValve 的 invoke() 方法比较复杂, 去掉其他异常处理的一些细节, 本质上就是三步:")]),s._v(" "),t("ul",[t("li",[s._v("第一步, 创建 Servlet 实例;")]),s._v(" "),t("li",[s._v("第二步, 给当前请求创建一个 Filter 链;")]),s._v(" "),t("li",[s._v("第三步, 调用这个 Filter 链.")])]),s._v(" "),t("p",[s._v("你可能会问, "),t("strong",[s._v("为什么需要给每个请求创建一个 Filter 链")]),s._v("? 这是因为每个请求的请求路径都不一样, 而 Filter 都有相应的路径映射, 因此不是所有的 Filter 都需要来处理当前的请求, 需要根据请求的路径来选择特定的一些 Filter 来处理.")]),s._v(" "),t("p",[s._v("第二个问题是, 为什么没有看到调到 Servlet 的 service() 方法? 这是因为 Filter 链的 doFilter() 方法会负责调用 Servlet, 具体来说就是 Filter 链中的最后一个 Filter 会负责调用 Servlet.")]),s._v(" "),t("p",[s._v("接下来看 Filter 的实现原理.")]),s._v(" "),t("h5",{attrs:{id:"filter管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#filter管理"}},[s._v("#")]),s._v(" Filter管理")]),s._v(" "),t("p",[s._v("与 Servlet 一样, Filter 也可以在 "),t("code",[s._v("web.xml")]),s._v("​ 文件里进行配置, 不同的是, Filter 的作用域是"),t("strong",[s._v("整个 Web 应用")]),s._v(", 因此 "),t("strong",[s._v("Filter 的实例是在 Context 容器中进行管理")]),s._v("的, Context 容器用 Map 集合来保存 Filter.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Map")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("FilterDef")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" filterDefs "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HashMap")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("那上面提到的 Filter 链又是什么呢? "),t("strong",[s._v("Filter 链的存活期很短, 它是跟每个请求对应的. 一个新的请求来了, 就动态创建一个 Filter 链, 请求处理完了, Filter 链也就被回收了")]),s._v(". 理解它的原理也非常关键, 还是来看看源码:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ApplicationFilterChain")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("FilterChain")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  \n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Filter 链中有 Filter 数组, 这个好理解")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ApplicationFilterConfig")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" filters "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ApplicationFilterConfig")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Filter 链中的当前的调用位置")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" pos "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 总共有多少了 Filter")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 每个 Filter 链对应一个 Servlet, 也就是它要调用的 Servlet")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Servlet")]),s._v(" servlet "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("doFilter")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletRequest")]),s._v(" req"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletResponse")]),s._v(" res"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("internalDoFilter")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("response"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   \n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("internalDoFilter")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletRequest")]),s._v(" req"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                                "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletResponse")]),s._v(" res"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 每个 Filter 链在内部维护了一个 Filter 数组")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("pos "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ApplicationFilterConfig")]),s._v(" filterConfig "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" filters"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("pos"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Filter")]),s._v(" filter "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" filterConfig"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getFilter")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n        filter"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("doFilter")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" response"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 所有 Filter 都调到了, 就调用 Servlet 的 service() 方法")]),s._v("\n    servlet"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("service")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" response"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br")])]),t("p",[s._v("从 ApplicationFilterChain 的源码可以看到几个关键信息:")]),s._v(" "),t("ol",[t("li",[s._v("Filter 链中除了有 Filter 对象的数组, 还有一个整数变量 pos, 这个变量用来记录"),t("strong",[s._v("当前被调用的 Filter 在数组中的位置")]),s._v(".")]),s._v(" "),t("li",[s._v("Filter 链中有个 Servlet 实例, 这个好理解, 因为上面提到了, "),t("strong",[s._v("每个 Filter 链最后都会调到一个 Servlet")]),s._v(".")]),s._v(" "),t("li",[s._v("Filter 链本身也实现了 doFilter() 方法, 直接调用了一个内部方法 internalDoFilter().")]),s._v(" "),t("li",[s._v("internalDoFilter() 方法的实现比较有意思, 它做了一个判断, 如果当前 Filter 的位置小于 Filter 数组的长度, 也就是说 Filter 还没调完, 就从 Filter 数组拿下一个 Filter, 调用它的 doFilter() 方法. 否则, 意味着所有 Filter 都调到了, 就调用 Servlet 的 service() 方法.")])]),s._v(" "),t("p",[s._v("但问题是, 方法体里没看到循环, 谁在不停地调用 Filter 链的 doFilter() 方法呢? Filter 是怎么依次调到的呢?")]),s._v(" "),t("p",[s._v("答案是 "),t("strong",[s._v("Filter 本身的 doFilter() 方法会调用 Filter 链的 doFilter() 方法")]),s._v(", 还是来看代码:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("doFilter")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletRequest")]),s._v(" request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletResponse")]),s._v(" response"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("FilterChain")]),s._v(" chain"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  \n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n  \n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 调用 Filter 的方法")]),s._v("\n      chain"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("doFilter")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" response"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("注意 Filter 的 doFilter() 方法有个关键参数 FilterChain, 就是 Filter 链. 并且每个 Filter 在实现 doFilter() 时, 必须要调用 Filter 链的 doFilter() 方法, 而 Filter 链中保存当前 Filter 的位置, 会调用下一个 Filter 的 doFilter() 方法, 这样链式调用就完成了.")]),s._v(" "),t("p",[s._v("Filter 链跟 Tomcat 的 Pipeline-Valve 本质都是"),t("strong",[s._v("责任链模式")]),s._v(", 但是在具体实现上稍有不同, 可以细细体会一下.")]),s._v(" "),t("h5",{attrs:{id:"listener管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#listener管理"}},[s._v("#")]),s._v(" Listener管理")]),s._v(" "),t("p",[s._v("接着看 Servlet 规范里 Listener. 跟 Filter 一样, Listener 也是一种扩展机制, 可以监听容器内部发生的"),t("strong",[s._v("事件")]),s._v(", 主要有两类事件:")]),s._v(" "),t("ul",[t("li",[s._v("第一类是"),t("strong",[s._v("生命状态的变化")]),s._v(", 比如 Context 容器启动和停止, Session 的创建和销毁.")]),s._v(" "),t("li",[s._v("第二类是"),t("strong",[s._v("属性的变化")]),s._v(", 比如 Context 容器某个属性值变了, Session 的某个属性值变了以及新的请求来了等.")])]),s._v(" "),t("p",[s._v("可以在 "),t("code",[s._v("web.xml")]),s._v("​ 配置或者通过注解的方式来添加监听器, 在监听器里实现业务逻辑. 对于 Tomcat 来说, 它需要读取配置文件, 拿到监听器类的名字, 实例化这些类, 并且在合适的时机调用这些监听器的方法.")]),s._v(" "),t("p",[s._v("Tomcat 是"),t("strong",[s._v("通过 Context 容器来管理这些监听器")]),s._v("的. Context 容器将两类事件分开来管理, 分别用不同的集合来存放不同类型事件的监听器:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 监听属性值变化的监听器")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" applicationEventListenersList "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CopyOnWriteArrayList")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 监听生命事件的监听器")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" applicationLifecycleListenersObjects"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("剩下的事情就是"),t("strong",[s._v("触发监听器")]),s._v("了, 比如在 Context 容器的启动方法里, 就触发了所有的 ServletContextListener:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1. 拿到所有的生命周期监听器")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" instances"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getApplicationLifecycleListeners")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" instances"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2. 判断 Listener 的类型是不是 ServletContextListener")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("instances"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("instanceof")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletContextListener")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("continue")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 3. 触发 Listener 的方法")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletContextListener")]),s._v(" lr "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletContextListener")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" instances"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   lr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("contextInitialized")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("event"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("p",[s._v("需要注意的是, 这里的 ServletContextListener 接口是一种留给用户的扩展机制, 用户可以实现这个接口来定义自己的监听器, 监听 Context 容器的启停事件. Spring 就是这么做的. ServletContextListener 跟 Tomcat 自己的生命周期事件 LifecycleListener 是不同的. LifecycleListener 定义在生命周期管理组件中, 由基类 LifeCycleBase 统一管理.")]),s._v(" "),t("h5",{attrs:{id:"总结-13"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结-13"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),t("p",[s._v('Servlet 规范中最重要的就是 Servlet, Filter 和 Listener "三兄弟". Web 容器最重要的职能就是'),t("strong",[s._v("把它们创建出来, 并在适当的时候调用它们的方法")]),s._v(".")]),s._v(" "),t("p",[s._v('Tomcat 通过 Wrapper 容器来管理 Servlet, Wrapper 包装了 Servlet 本身以及相应的参数, 这体现了面向对象中 "封装" 的设计原则.')]),s._v(" "),t("p",[s._v("Tomcat 会给"),t("strong",[s._v("每个请求生成一个 Filter 链")]),s._v(", Filter 链中的最后一个 Filter 会负责调用 Servlet 的 service() 方法.")]),s._v(" "),t("p",[s._v("对于 Listener 来说, 可以定制自己的监听器来监听 Tomcat 内部发生的各种事件: 包括 Web 应用级别的, Session 级别的和请求级别的. Tomcat 中的 Context 容器统一维护了这些监听器, 并负责触发.")]),s._v(" "),t("h4",{attrs:{id:"_27-新特性-tomcat如何支持异步servlet"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_27-新特性-tomcat如何支持异步servlet"}},[s._v("#")]),s._v(" 27.新特性:Tomcat如何支持异步Servlet?")]),s._v(" "),t("p",[s._v("当一个新的请求到达时, Tomcat 和 Jetty 会从线程池里拿出一个线程来处理请求, 这个线程会调用你的 Web 应用, Web 应用在处理请求的过程中, "),t("strong",[s._v("Tomcat 线程会一直阻塞, 直到 Web 应用处理完毕才能再输出响应, 最后 Tomcat 才回收这个线程")]),s._v(".")]),s._v(" "),t("p",[s._v('来思考这样一个问题, 假如 Web 应用需要较长的时间来处理请求(比如数据库查询或者等待下游的服务调用返回), 那么 Tomcat 线程一直不回收, 会占用系统资源, 在极端情况下会导致"线程饥饿", 也就是说 Tomcat 和 Jetty '),t("strong",[s._v("没有更多的线程来处理新的请求")]),s._v(".")]),s._v(" "),t("p",[s._v("那该如何解决这个问题呢? 方案是 Servlet 3.0 中引入的"),t("strong",[s._v("异步 Servlet")]),s._v(". 主要"),t("strong",[s._v("是在 Web 应用里启动一个单独的线程来执行这些比较耗时的请求, 而 Tomcat 线程立即返回, 不再等待 Web 应用将请求处理完, 这样 Tomcat 线程可以立即被回收到线程池, 用来响应其他请求, 降低了系统的资源消耗, 同时还能提高系统的吞吐量")]),s._v(".")]),s._v(" "),t("p",[s._v("这里分析一下如何开发一个异步 Servlet, 以及异步 Servlet 的工作原理, 也就是 Tomcat 是如何支持异步 Servlet 的, 进而彻底理解它的来龙去脉.")]),s._v(" "),t("h5",{attrs:{id:"异步servlet示例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#异步servlet示例"}},[s._v("#")]),s._v(" 异步Servlet示例")]),s._v(" "),t("p",[s._v("先通过一个简单的示例来了解一下异步 Servlet 的实现.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@WebServlet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("urlPatterns "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/async"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" asyncSupported "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AsyncServlet")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HttpServlet")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Web 应用线程池, 用来处理异步 Servlet")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ExecutorService")]),s._v(" executor "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Executors")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("newSingleThreadExecutor")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("service")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HttpServletRequest")]),s._v(" req"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HttpServletResponse")]),s._v(" resp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1. 调用 startAsync 或者异步上下文")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AsyncContext")]),s._v(" ctx "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" req"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("startAsync")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 用线程池来执行耗时操作")]),s._v("\n        executor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("execute")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Runnable")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n            "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("run")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n                "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 在这里做耗时的操作")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    ctx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getResponse")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getWriter")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Handling Async Servlet"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IOException")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n                "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 3. 异步 Servlet 处理完了调用异步上下文的 complete() 方法")]),s._v("\n                ctx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("complete")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br")])]),t("p",[s._v("上面的代码有三个要点:")]),s._v(" "),t("ol",[t("li",[s._v("通过注解的方式来注册 Servlet, 除了 @WebServlet 注解, 还需要加上 asyncSupported=true 的属性, 表明"),t("strong",[s._v("当前的 Servlet 是一个异步 Servlet")]),s._v(".")]),s._v(" "),t("li",[s._v("Web 应用程序需要"),t("strong",[s._v("调用 Request 对象的 startAsync() 方法来拿到一个异步上下文 AsyncContext. 这个上下文保存了请求和响应对象")]),s._v(".")]),s._v(" "),t("li",[s._v("Web 应用需要"),t("strong",[s._v("开启一个新线程来处理耗时的操作, 处理完成后需要调用 AsyncContext 的 complete() 方法. 目的是告诉 Tomcat, 请求已经处理完成")]),s._v(".")])]),s._v(" "),t("p",[s._v("这里注意, 虽然异步 Servlet 允许用更长的时间来处理请求, 但是也有超时限制的, 默认是 30 秒, 如果 30 秒内请求还没处理完, Tomcat 会触发超时机制, 向浏览器返回超时错误, 如果这个时候 Web 应用再调用 "),t("code",[s._v("ctx.complete()")]),s._v("​ 方法, 会得到一个 IllegalStateException 异常.")]),s._v(" "),t("h5",{attrs:{id:"异步servlet原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#异步servlet原理"}},[s._v("#")]),s._v(" 异步Servlet原理")]),s._v(" "),t("p",[s._v("通过上面的例子可以对 Servlet 的异步实现有了基本的理解. 要理解 Tomcat 在这个过程都做了什么事情, 关键就是要弄清楚 "),t("code",[s._v("req.startAsync()")]),s._v("​ 方法和 "),t("code",[s._v("ctx.complete()")]),s._v("​ 方法都做了什么.")]),s._v(" "),t("h6",{attrs:{id:"_1-startasync-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-startasync-方法"}},[s._v("#")]),s._v(" 1.startAsync()方法")]),s._v(" "),t("p",[s._v("startAsync() 方法其实就是创建了一个异步上下文 AsyncContext 对象, "),t("strong",[s._v("AsyncContext 对象的作用是保存请求的中间信息, 比如 Request 和 Response 对象等上下文信息")]),s._v(". 你来思考一下为什么需要保存这些信息呢?")]),s._v(" "),t("p",[s._v("这是因为 Tomcat 的工作线程在 "),t("code",[s._v("Request.startAsync()")]),s._v("​ 调用之后, 就直接结束回到线程池中了, 线程本身不会保存任何信息. 也就是说一个请求到服务端, 执行到一半, 你的 Web 应用正在处理, 这个时候 Tomcat 的工作线程没了, 这就"),t("strong",[s._v("需要有个缓存能够保存原始的 Request 和 Response 对象, 而这个缓存就是 AsyncContext")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("有了 AsyncContext, Web 应用通过它拿到 request 和 response 对象, 拿到 Request 对象后就可以读取请求信息, 请求处理完了还需要通过 Response 对象将 HTTP 响应发送给浏览器.")])]),s._v(" "),t("p",[s._v("除了创建 AsyncContext 对象, startAsync() 还需要完成一个关键任务, 那就是告诉 Tomcat 当前的 Servlet 处理方法返回时, 不要把响应发到浏览器, 因为这个时候, 响应还没生成呢; 并且不能把 Request 对象和 Response 对象销毁, 因为后面 Web 应用还要用呢.")]),s._v(" "),t("p",[s._v("在 Tomcat 中, 负责 flush 响应数据的是 CoyoteAdaptor, 它还会销毁 Request 对象和 Response 对象, 因此需要通过某种机制通知 CoyoteAdaptor, 具体来说是通过下面这行代码:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getCoyoteRequest")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("action")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ActionCode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ASYNC_START")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("可以把它理解为一个 Callback, 在这个 action() 方法里设置了 Request 对象的状态, 设置它为一个异步 Servlet 请求.")]),s._v(" "),t("p",[s._v("连接器是调用 CoyoteAdapter 的 service() 方法来处理请求的, 而 CoyoteAdapter 会调用容器的 service() 方法, 当容器的 service() 方法返回时, "),t("strong",[s._v("CoyoteAdapter 判断当前的请求是不是异步 Servlet 请求, 如果是, 就不会销毁 Request 和 Response 对象, 也不会把响应信息发到浏览器")]),s._v(". 可以通过下面的代码理解一下, 这是 CoyoteAdapter 的 service() 方法, 下面对它进行了简化:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("service")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("org"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("apache"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("coyote"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),s._v("Request")]),s._v(" req"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("org"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("apache"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("coyote"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),s._v("Response")]),s._v(" res"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  \n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 调用容器的 service 方法处理请求")]),s._v("\n    connector"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getService")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getContainer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getPipeline")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n           "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getFirst")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("invoke")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" response"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   \n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果是异步 Servlet 请求, 仅仅设置一个标志, ")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 否则说明是同步 Servlet 请求, 就将响应数据刷到浏览器")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isAsync")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        async "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("finishRequest")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        response"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("finishResponse")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   \n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果不是异步 Servlet 请求, 就销毁 Request 对象和 Response 对象")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("async"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("recycle")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        response"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("recycle")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br")])]),t("p",[s._v("接下来, 当 CoyoteAdaptor 的 service() 方法返回到 ProtocolHandler 组件时, ProtocolHandler 判断返回值, 如果当前请求是一个异步 Servlet 请求, "),t("strong",[s._v("它会把当前 Socket 的协议处理者 Processor 缓存起来, 将 SocketWrapper 对象和相应的 Processor 存到一个 Map 数据结构里")]),s._v(".")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Map")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("S")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Processor")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" connections "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConcurrentHashMap")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("**之所以要缓存是因为这个请求接下来还要接着处理, 还是由原来的 Processor 来处理, 通过 SocketWrapper 就能从 Map 里找到相应的 Processor. **")]),s._v(" "),t("h6",{attrs:{id:"_2-complete-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-complete-方法"}},[s._v("#")]),s._v(" 2.complete()方法")]),s._v(" "),t("p",[s._v("接着再来看关键的 "),t("code",[s._v("ctx.complete()")]),s._v("​ 方法, 当"),t("strong",[s._v("请求处理完成时, Web 应用调用这个方法")]),s._v(". 那么这个方法做了些什么事情呢? "),t("strong",[s._v("最重要的就是把响应数据发送到浏览器")]),s._v(".")]),s._v(" "),t("p",[s._v("这件事情不能由 Web 应用线程来做, 也就是说 "),t("code",[s._v("ctx.complete()")]),s._v("​ 方法不能直接把响应数据发送到浏览器, 因为这件事情应该由 Tomcat 线程来做, 但具体怎么做呢?")]),s._v(" "),t("p",[t("strong",[s._v("由于连接器中的 Endpoint 组件检测到有请求数据达到时, 会创建一个 SocketProcessor 对象交给线程池去处理, 因此 Endpoint 的通信处理和具体请求处理在两个线程里运行.")])]),s._v(" "),t("p",[s._v("在异步 Servlet 的场景里, Web 应用通过调用 "),t("code",[s._v("ctx.complete()")]),s._v("​ 方法时, 也可以生成一个新的 SocketProcessor 任务类, 交给线程池处理. 对于异步 Servlet 请求来说, 相应的 Socket 和协议处理组件 Processor 都被"),t("strong",[s._v("缓存")]),s._v("起来了, 并且这些对象都可以通过 Request 对象拿到.")]),s._v(" "),t("p",[s._v("​"),t("code",[s._v("ctx.complete()")]),s._v("​ 实现如下:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("complete")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 检查状态合法性, 我们先忽略这句")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("check")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 调用 Request 对象的 action 方法, 其实就是通知连接器, 这个异步请求处理完了")]),s._v("\n    request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getCoyoteRequest")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("action")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ActionCode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ASYNC_COMPLETE")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("可以看到 complete() 方法调用了 Request 对象的 action() 方法. 而在 action() 方法里, 则是调用了 Processor 的 processSocketEvent() 方法, 并且传入了操作码 OPEN_READ.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ASYNC_COMPLETE")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("clearDispatches")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("asyncStateMachine"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("asyncComplete")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("processSocketEvent")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SocketEvent")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("OPEN_READ")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("接着看 processSocketEvent() 方法, 它调用 SocketWrapper 的 processSocket() 方法:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("processSocketEvent")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SocketEvent")]),s._v(" event"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" dispatch"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SocketWrapperBase")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" socketWrapper "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getSocketWrapper")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("socketWrapper "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        socketWrapper"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("processSocket")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("event"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" dispatch"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[t("strong",[s._v("而 SocketWrapper 的 processSocket() 方法会创建 SocketProcessor 任务类, 并通过 Tomcat 线程池来处理:")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("processSocket")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SocketWrapperBase")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("S")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" socketWrapper"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SocketEvent")]),s._v(" event"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" dispatch"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  \n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("socketWrapper "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  \n      "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SocketProcessorBase")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("S")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" sc "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" processorCache"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("pop")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sc "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n          sc "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("createSocketProcessor")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("socketWrapper"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" event"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n          sc"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("reset")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("socketWrapper"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" event"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 线程池运行")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Executor")]),s._v(" executor "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getExecutor")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("dispatch "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" executor "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n          executor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("execute")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sc"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n          sc"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("run")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br")])]),t("p",[s._v("请注意 createSocketProcessor() 方法的第二个参数是 SocketEvent, 这里传入的是 OPEN_READ. 通过这个参数就能控制 SocketProcessor 的行为, 因为不需要再把请求发送到容器进行处理, 只需要向浏览器端发送数据, 并且重新在这个 Socket 上监听新的请求就行了.")]),s._v(" "),t("p",[s._v("最后通过一张图理解一下整个过程:")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405161923-311rtzq.png",alt:"image"}})]),s._v(" "),t("h5",{attrs:{id:"总结-14"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结-14"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),t("p",[s._v("非阻塞 I/O 模型可以利用很少的线程处理大量的连接, 提高了并发度, 本质就是通过一个 Selector 线程查询多个 Socket 的 I/O 事件, 减少了线程的阻塞等待.")]),s._v(" "),t("p",[s._v("**同样, 异步 Servlet 机制也是减少了线程的阻塞等待, 将 Tomcat 线程和业务线程分开, Tomca 线程不再等待业务代码的执行. **")]),s._v(" "),t("p",[s._v("那什么样的场景适合异步 Servlet 呢? 适合的场景有很多, 最主要的还是根据实际情况, 如果拿不准是否适合异步 Servlet, 就看一条: "),t("strong",[s._v("如果你发现 Tomcat 的线程不够了, 大量线程阻塞在等待 Web 应用的处理上, 而 Web 应用又没有优化的空间了, 确实需要长时间处理, 这个时候你不妨尝试一下异步 Servlet.")])]),s._v(" "),t("h4",{attrs:{id:"_28-新特性-tomcat和jetty如何处理spring-boot应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_28-新特性-tomcat和jetty如何处理spring-boot应用"}},[s._v("#")]),s._v(" 28.新特性:Tomcat和Jetty如何处理Spring Boot应用?")]),s._v(" "),t("p",[s._v("为了方便开发和部署, Spring Boot 在"),t("strong",[s._v("内部启动了一个嵌入式的 Web 容器")]),s._v(". 由于 Tomcat 和 Jetty 是组件化的设计, 要启动 Tomcat 或者 Jetty 其实就是启动这些组件. 在 Tomcat 独立部署的模式下, 可以通过 startup 脚本来启动 Tomcat, Tomcat 中的 Bootstrap 和 Catalina 会负责初始化类加载器, 并解析 "),t("code",[s._v("server.xml")]),s._v("​ 和启动这些组件.")]),s._v(" "),t("p",[s._v("在"),t("strong",[s._v("内嵌式")]),s._v("的模式下, Bootstrap 和 Catalina 的工作就由 Spring Boot 来做了, "),t("strong",[s._v("Spring Boot 调用了 Tomcat 和 Jetty 的 API 来启动这些组件")]),s._v(". 那 Spring Boot 具体是怎么做的呢? 如何向 SpringBoot 中的 Tomcat 注册 Servlet 或者 Filter 呢? 又如何定制内嵌式的 Tomcat?")]),s._v(" "),t("h5",{attrs:{id:"spring-boot中web容器相关的接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot中web容器相关的接口"}},[s._v("#")]),s._v(" Spring Boot中Web容器相关的接口")]),s._v(" "),t("p",[s._v("既然要支持多种 Web 容器, Spring Boot 对"),t("strong",[s._v("内嵌式 Web 容器")]),s._v("进行了抽象, 定义了 **WebServer ** 接口:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("WebServer")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("start")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("WebServerException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("stop")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("WebServerException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getPort")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("各种 Web 容器比如 Tomcat 和 Jetty 需要去实现这个接口.")]),s._v(" "),t("p",[s._v("Spring Boot 还定义了一个工厂 **ServletWebServerFactory ** 来创建 Web 容器, 返回的对象就是上面提到的 "),t("strong",[s._v("WebServer")]),s._v(".")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletWebServerFactory")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("WebServer")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getWebServer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletContextInitializer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" initializers"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("可以看到 getWebServer() 有个参数, 类型是 "),t("strong",[s._v("ServletContextInitializer")]),s._v(". 它表示 ServletContext 的初始化器, 用于 ServletContext 中的一些配置:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletContextInitializer")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("onStartup")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletContext")]),s._v(" servletContext"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("这里注意, 上面提到的 getWebServer() 方法会调用 ServletContextInitializer 的 onStartup() 方法, 也就是说如果你想在 Servlet 容器启动时做一些事情, 比如注册自己的 Servlet, 可以实现一个 ServletContextInitializer, 在 Web 容器启动时, Spring Boot 会把所有实现了 "),t("strong",[s._v("ServletContextInitializer")]),s._v(" 接口的类收集起来, 统一调它们的 onStartup() 方法.")]),s._v(" "),t("p",[s._v("为了支持对内嵌式 Web 容器的定制化, Spring Boot 还定义了 **WebServerFactoryCustomizerBeanPostProcessor ** 接口, 它是一个 "),t("strong",[s._v("BeanPostProcessor")]),s._v(", 它在 postProcessBeforeInitialization 过程中去寻找 Spring 容器中 "),t("strong",[s._v("WebServerFactoryCustomizer")]),s._v(" 类型的 Bean, 并依次调用 WebServerFactoryCustomizer 接口的 customize() 方法做一些定制化.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("WebServerFactoryCustomizer")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("WebServerFactory")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("customize")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" factory"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h5",{attrs:{id:"内嵌式web容器的创建和启动"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内嵌式web容器的创建和启动"}},[s._v("#")]),s._v(" 内嵌式Web容器的创建和启动")]),s._v(" "),t("p",[t("strong",[s._v("铺垫了这些接口, 再来看看 Spring Boot 是如何实例化和启动一个 Web 容器的")]),s._v(". 由于 Spring 的核心是一个 ApplicationContext, 它的抽象实现类 "),t("strong",[s._v("AbstractApplicationContext")]),s._v(" 实现了著名的 "),t("strong",[s._v("refresh() ** 方法, 它用来新建或者刷新一个 ApplicationContext, 在 refresh() 方法中会调用 "),t("strong",[s._v("onRefresh() 方法")]),s._v(", AbstractApplicationContext 的子类可以")]),s._v("重写这个方法 onRefresh() 方法, 来实现特定 Context 的刷新逻辑**, 因此 "),t("mark",[t("strong",[s._v("ServletWebServerApplicationContext 就是通过重写 onRefresh() 方法来创建内嵌式的 Web 容器")])]),s._v(", 具体创建过程是这样的:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("onRefresh")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("super")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("onRefresh")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 重写 onRefresh 方法, 调用 createWebServer 创建和启动 Tomcat")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("createWebServer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Throwable")]),s._v(" ex"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// createWebServer 的具体实现")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("createWebServer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这里 WebServer 是 Spring Boot 抽象出来的接口, 具体实现类就是不同的 Web 容器")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("WebServer")]),s._v(" webServer "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("webServer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletContext")]),s._v(" servletContext "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getServletContext")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果 Web 容器还没创建")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("webServer "),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("mark"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" servletContext "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("mark"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 通过 Web 容器工厂来创建")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletWebServerFactory")]),s._v(" factory "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getWebServerFactory")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// 注意传入了一个 "SelfInitializer"')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("webServer "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" factory"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getWebServer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletContextInitializer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getSelfInitializer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("servletContext "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getSelfInitializer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("onStartup")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("servletContext"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletException")]),s._v(" var4"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("initPropertySources")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br")])]),t("p",[s._v("再来看看 getWebSever() 具体做了什么, 以 Tomcat 为例, 主要调用 Tomcat 的 API 去创建各种组件:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("WebServer")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getWebServer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletContextInitializer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" initializers"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1. 实例化一个 Tomcat, 可以理解为 Server 组件. ")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Tomcat")]),s._v(" tomcat "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Tomcat")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2. 创建一个临时目录")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("File")]),s._v(" baseDir "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("baseDirectory "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("baseDirectory "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("createTempDir")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"tomcat"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    tomcat"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setBaseDir")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("baseDir"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getAbsolutePath")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 3. 初始化各种组件")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Connector")]),s._v(" connector "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Connector")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("protocol"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    tomcat"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getService")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("addConnector")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("connector"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("customizeConnector")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("connector"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    tomcat"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setConnector")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("connector"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    tomcat"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getHost")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setAutoDeploy")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("configureEngine")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("tomcat"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getEngine")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// 4. 创建定制版的 "Context" 组件. ')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("prepareContext")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("tomcat"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getHost")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" initializers"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getTomcatWebServer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("tomcat"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br")])]),t("p",[s._v("你可能好奇 prepareContext() 方法是做什么的呢? 这里的 Context 是指 "),t("strong",[s._v("Tomcat 中的 Context 组件")]),s._v(", 为了方便控制 Context 组件的行为, Spring Boot 定义了自己的 "),t("strong",[s._v("TomcatEmbeddedContext")]),s._v(", 它扩展了 Tomcat 的 StandardContext:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TomcatEmbeddedContext")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StandardContext")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h5",{attrs:{id:"注册servlet的三种方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注册servlet的三种方式"}},[s._v("#")]),s._v(" 注册Servlet的三种方式")]),s._v(" "),t("h6",{attrs:{id:"_1-servlet注解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-servlet注解"}},[s._v("#")]),s._v(" 1.Servlet注解")]),s._v(" "),t("p",[s._v("在 Spring Boot 启动类上加上 @ServletComponentScan 注解后, "),t("strong",[s._v("使用 @WebServlet, @WebFilter, @WebListener 标记的 Servlet, Filter, Listener 就可以自动注册到 Servlet 容器中")]),s._v(", 无需其他代码, 通过下面的代码示例来理解一下.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@SpringBootApplication")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@ServletComponentScan")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" xxxApplication"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@WebServlet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/hello"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HelloServlet")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HttpServlet")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("在 Web 应用的入口类上加上 @ServletComponentScan,  并且在 Servlet 类上加上 @WebServlet, 这样 SpringBoot 会负责"),t("strong",[s._v("将 Servlet 注册到内嵌的 Tomcat 中")]),s._v(".")]),s._v(" "),t("h6",{attrs:{id:"_2-servletregistrationbean"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-servletregistrationbean"}},[s._v("#")]),s._v(" 2.ServletRegistrationBean")]),s._v(" "),t("p",[s._v("同时 Spring Boot 也提供了 "),t("strong",[s._v("ServletRegistrationBean, FilterRegistrationBean 和 ServletListenerRegistrationBean 这三个类分别用来注册 Servlet, Filter, Listener")]),s._v(". 假如要注册一个 Servlet, 可以这样做:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Bean")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletRegistrationBean")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("servletRegistrationBean")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletRegistrationBean")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HelloServlet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/hello"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("这段代码实现的方法返回一个 ServletRegistrationBean, 并将它当作 Bean 注册到 Spring 中, 因此需要把这段代码放到 Spring Boot 自动扫描的目录中, 或者放到 @Configuration 标识的类中.")]),s._v(" "),t("h6",{attrs:{id:"_3-动态注册"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-动态注册"}},[s._v("#")]),s._v(" 3.动态注册")]),s._v(" "),t("p",[s._v("还可以创建一个类去实现前面提到的 "),t("strong",[s._v("ServletContextInitializer")]),s._v(" 接口, 并把它注册为一个 Bean, Spring Boot 会负责调用这个接口的 onStartup() 方法.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Component")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyServletRegister")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletContextInitializer")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("onStartup")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletContext")]),s._v(" servletContext"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  \n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Servlet 3.0 规范新的 API")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletRegistration")]),s._v(" myServlet "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" servletContext\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("addServlet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"HelloServlet"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HelloServlet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        \n        myServlet"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("addMapping")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/hello"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n        myServlet"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setInitParameter")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"name"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello Servlet"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br")])]),t("p",[s._v("这里注意两点:")]),s._v(" "),t("ul",[t("li",[s._v("ServletRegistrationBean 其实也是通过 ServletContextInitializer 来实现的, 它实现了 ServletContextInitializer 接口.")]),s._v(" "),t("li",[s._v("注意到 onStartup() 方法的参数 ServletContext, 可以通过调用它的 "),t("strong",[s._v("addServlet()")]),s._v("  方法来动态注册新的 Servlet, 这是 Servlet 3.0 以后才有的功能.")])]),s._v(" "),t("h5",{attrs:{id:"web容器的定制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#web容器的定制"}},[s._v("#")]),s._v(" Web容器的定制")]),s._v(" "),t("p",[s._v("再来考虑一个问题, 那就是如何在 Spring Boot 中"),t("strong",[s._v("定制 Web 容器")]),s._v(". 在 Spring Boot 2.0 中, 可以通过两种方式来定制 Web 容器.")]),s._v(" "),t("p",[t("strong",[s._v("第一种方式")]),s._v("是通过通用的 Web 容器工厂 ConfigurableServletWebServerFactory, 来定制一些 Web 容器通用的参数:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Component")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyGeneralCustomizer")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("WebServerFactoryCustomizer")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConfigurableServletWebServerFactory")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("customize")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConfigurableServletWebServerFactory")]),s._v(" factory"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        factory"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setPort")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8081")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        factory"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setContextPath")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/hello"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[t("strong",[s._v("第二种方式")]),s._v("是通过特定 Web 容器的工厂比如 TomcatServletWebServerFactory 来进一步定制. 下面的例子给 Tomcat 增加一个 Valve, 这个 Valve 的功能是向请求头里添加 traceid, 用于分布式追踪. TraceValve 的定义如下:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TraceValve")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ValveBase")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("invoke")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Request")]),s._v(" request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Response")]),s._v(" response"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IOException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletException")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n        request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getCoyoteRequest")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getMimeHeaders")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("addValue")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"traceid"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setString")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1234xxxxabcd"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Valve")]),s._v(" next "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getNext")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" next"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n        next"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("invoke")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" response"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br")])]),t("p",[s._v("跟第一种方式类似, 再添加一个定制器, 代码如下:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Component")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyTomcatCustomizer")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("WebServerFactoryCustomizer")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TomcatServletWebServerFactory")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("customize")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TomcatServletWebServerFactory")]),s._v(" factory"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        factory"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setPort")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8081")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        factory"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setContextPath")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/hello"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        factory"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("addEngineValves")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TraceValve")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("h4",{attrs:{id:"_30-热点答疑-3-spring框架中的设计模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_30-热点答疑-3-spring框架中的设计模式"}},[s._v("#")]),s._v(" 30.热点答疑(3):Spring框架中的设计模式")]),s._v(" "),t("p",[s._v("这里分析一下 Spring 框架里的设计模式. Spring 的核心功能是 IOC 容器以及 AOP 面向切面编程, 同样也是很多 Web 后端工程师每天都要打交道的框架.")]),s._v(" "),t("h5",{attrs:{id:"简单工厂模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简单工厂模式"}},[s._v("#")]),s._v(" 简单工厂模式")]),s._v(" "),t("p",[s._v("我考虑这样一个场景: 当 A 对象需要调用 B 对象的方法时, 需要在 A 中 new 一个 B 的实例, 我们把这种方式叫作"),t("strong",[s._v("硬编码耦合")]),s._v(", 它的缺点是一旦需求发生变化, 比如需要使用 C 类来代替 B 时, 就要改写 A 类的方法. 假如应用中有 1000 个类以硬编码的方式耦合了 B, 那改起来就费劲了. 于是简单工厂模式就登场了, 简单工厂模式又叫静态工厂方法, 其实质是由一个工厂类根据传入的参数, 动态决定应该创建哪一个产品类.")]),s._v(" "),t("p",[s._v("Spring 中的 "),t("strong",[s._v("BeanFactory")]),s._v(" 就是简单工厂模式的体现, BeanFactory 是 Spring IOC 容器中的一个核心接口, 它的定义如下:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BeanFactory")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getBean")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BeansException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getBean")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" requiredType"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getBean")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getBean")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" requiredType"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getBean")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" requiredType"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("containsBean")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isSingleton")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   boolea "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isPrototype")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isTypeMatch")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ResolvableType")]),s._v(" typeToMatch"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isTypeMatch")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" typeToMatch"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getType")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getAliases")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[s._v("可以通过它的具体实现类(比如 ClassPathXmlApplicationContext)来获取 Bean:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BeanFactory")]),s._v(" bf "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassPathXmlApplicationContext")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"spring.xml"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),s._v(" userBean "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" bf"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getBean")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"userBean"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("从上面代码可以看到, 使用者不需要自己来 new 对象, 而是通过工厂类的方法 getBean() 来获取对象实例, 这是典型的简单工厂模式, 只不过 Spring 是用反射机制来创建 Bean 的.")]),s._v(" "),t("h5",{attrs:{id:"工厂方法模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#工厂方法模式"}},[s._v("#")]),s._v(" 工厂方法模式")]),s._v(" "),t("p",[s._v("工厂方法模式说白了其实就是简单工厂模式的一种升级或者说是进一步抽象, 它可以应用于更加复杂的场景, 灵活性也更高. 在简单工厂中, 由工厂类进行所有的逻辑判断, 实例创建; "),t("strong",[s._v("如果不想在工厂类中进行判断, 可以为不同的产品提供不同的工厂, 不同的工厂生产不同的产品, 每一个工厂都只对应一个相应的对象, 这就是工厂方法模式")]),s._v(".")]),s._v(" "),t("p",[s._v("Spring 中的 "),t("strong",[s._v("FactoryBean")]),s._v(" 就是这种思想的体现, FactoryBean 可以理解为工厂 Bean, 先来看看它的定义:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("FactoryBean")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getObject")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getObjectType")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isSingleton")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("这里定义一个类 UserFactoryBean 来实现 FactoryBean 接口, 主要是在 getObject() 方法里 new 一个 User 对象. 这样通过 getBean(id) 获得的是该工厂所产生的 User 的实例, 而不是 UserFactoryBean 本身的实例, 像下面这样:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BeanFactory")]),s._v(" bf "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassPathXmlApplicationContext")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"user.xml"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),s._v(" userBean "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" bf"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getBean")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"userFactoryBean"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h5",{attrs:{id:"单例模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单例模式"}},[s._v("#")]),s._v(" 单例模式")]),s._v(" "),t("p",[s._v("单例模式是指一个类在整个系统运行过程中, 只允许产生一个实例. 那 Spring 是如何实现单例模式的呢? 答案是"),t("strong",[s._v("通过单例注册表")]),s._v("的方式, 具体来说就是使用了 HashMap. 为了方便阅读, 也对代码进行了简化:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("DefaultSingletonBeanRegistry")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 使用了线程安全容器 ConcurrentHashMap, 保存各种单实例对象")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Map")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" singletonObjects "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConcurrentHashMap")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getSingleton")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" beanName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 先到 HashMap 中拿 Object")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" singletonObject "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" singletonObjects"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("beanName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果没拿到通过反射创建一个对象实例, 并添加到 HashMap 中")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("singletonObject "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      singletonObjects"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("beanName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                           "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("forName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("beanName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("newInstance")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   \n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 返回对象实例")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" singletonObjects"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("beanName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br")])]),t("p",[s._v("上面的代码逻辑比较清晰, 先到 HashMap 去拿单实例对象, 没拿到就创建一个添加到 HashMap.")]),s._v(" "),t("h5",{attrs:{id:"代理模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#代理模式"}},[s._v("#")]),s._v(" 代理模式")]),s._v(" "),t("p",[t("strong",[s._v("所谓代理, 是指它与被代理对象实现了相同的接口, 客户端必须通过代理才能与被代理的目标类进行交互, 而代理一般在交互的过程中(交互前后), 进行某些特定的处理, 比如在调用这个方法前做前置处理, 调用这个方法后做后置处理")]),s._v(". 代理模式中有下面几种角色:")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("抽象接口")]),s._v(": 定义目标类及代理类的共同接口, 这样在任何可以使用目标对象的地方都可以使用代理对象.")]),s._v(" "),t("li",[t("strong",[s._v("目标对象")]),s._v(": 定义了代理对象所代表的目标对象, 专注于业务功能的实现.")]),s._v(" "),t("li",[t("strong",[s._v("代理对象")]),s._v(": 代理对象内部含有目标对象的引用, 收到客户端的调用请求时, 代理对象通常不会直接调用目标对象的方法, 而是在调用之前和之后实现一些额外的逻辑.")])]),s._v(" "),t("p",[s._v("代理模式的好处是, 可以在目标对象业务功能的基础上添加一些"),t("strong",[s._v("公共的逻辑")]),s._v(", 比如想给目标对象加入日志, 权限管理和事务控制等功能, 就可以使用代理类来完成, 而没必要修改目标类, 从而使得目标类保持稳定. 这其实是"),t("strong",[s._v("开闭原则")]),s._v("的体现, 不要随意去修改别人已经写好的代码或者方法.")]),s._v(" "),t("p",[t("strong",[s._v("代理又分为静态代理和动态代理两种方式")]),s._v(". 静态代理需要定义接口, 被代理对象(目标对象)与代理对象(Proxy) 一起实现相同的接口, 通过一个例子来理解一下:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 抽象接口")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IStudentDao")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("save")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 目标对象")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StudentDao")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IStudentDao")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("save")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" 保存成功 "')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 代理对象")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StudentDaoProxy")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IStudentDao")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 持有目标对象的引用")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IStudentDao")]),s._v(" target"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StudentDaoProxy")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IStudentDao")]),s._v(" target"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("target "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" target"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 在目标功能对象方法的前后加入事务控制")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("save")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" 开始事务 "')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        target"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("save")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 执行目标对象的方法")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" 提交事务 "')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 创建目标对象")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StudentDao")]),s._v(" target "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StudentDao")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 创建代理对象, 把目标对象传给代理对象, 建立代理关系")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StudentDaoProxy")]),s._v(" proxy "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StudentDaoProxy")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("target"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 执行的是代理的方法")]),s._v("\n    proxy"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("save")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br")])]),t("p",[s._v("而 Spring 的 "),t("strong",[s._v("AOP 采用的是动态代理的方式")]),s._v(', 而动态代理就是指代理类在程序运行时由 JVM 动态创建. 在上面静态代理的例子中, 代理类(StudentDaoProxy)是自己定义好的, 在程序运行之前就已经编译完成. 而动态代理, 代理类并不是在 Java 代码中定义的, 而是在运行时根据在 Java 代码中的"指示"动态生成的. 那怎么 "指示" JDK 去动态地生成代理类呢?')]),s._v(" "),t("p",[s._v("在 Java 的 "),t("code",[s._v("java.lang.reflect")]),s._v("​ 包里提供了一个 Proxy 类和一个 "),t("strong",[s._v("InvocationHandler")]),s._v(" 接口, 通过这个类和这个接口可以生成动态代理对象. 具体来说有如下步骤:")]),s._v(" "),t("ol",[t("li",[s._v("定义一个 InvocationHandler 类, 将需要扩展的逻辑集中放到这个类中, 比如下面的例子模拟了添加事务控制的逻辑.")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyInvocationHandler")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("InvocationHandler")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" obj"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyInvocationHandler")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" obj"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("obj"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("obj"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("invoke")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" proxy"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Method")]),s._v(" method"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Throwable")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" 开始事务 "')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" result "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" method"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("invoke")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" 开始事务 "')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" result"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br")])]),t("ol",{attrs:{start:"2"}},[t("li",[s._v("使用 Proxy 的 newProxyInstance() 方法动态的创建代理对象:")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 创建目标对象 StudentDao")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IStudentDao")]),s._v(" stuDAO "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StudentDao")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 创建 MyInvocationHandler 对象")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("InvocationHandler")]),s._v(" handler "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyInvocationHandler")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("stuDAO"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 使用 Proxy.newProxyInstance 动态的创建代理对象 stuProxy")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IStudentDao")]),s._v(" stuProxy "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IStudentDao")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Proxy")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("newProxyInstance")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("stuDAO"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getClassLoader")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" stuDAO"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getInterfaces")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" handler"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 动用代理对象的方法")]),s._v("\n  stuProxy"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("save")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[s._v("**上面的代码实现和静态代理一样的功能, 相比于静态代理, 动态代理的优势在于可以很方便地对代理类的函数进行统一的处理, 而不用修改每个代理类中的方法. **")]),s._v(" "),t("p",[t("strong",[s._v("Spring 实现了通过动态代理对类进行方法级别的切面增强")]),s._v(", 解释一下这句话, 其实就是动态生成目标对象的代理类, 并在代理类的方法中设置拦截器, 通过执行拦截器中的逻辑增强了代理方法的功能, 从而实现 AOP.")]),s._v(" "),t("h3",{attrs:{id:"通用组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#通用组件"}},[s._v("#")]),s._v(" 通用组件")]),s._v(" "),t("h4",{attrs:{id:"_31-logger组件-tomcat的日志框架及实战"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_31-logger组件-tomcat的日志框架及实战"}},[s._v("#")]),s._v(" 31.Logger组件:Tomcat的日志框架及实战")]),s._v(" "),t("p",[s._v("每一个系统都有一些通用的模块, 比如日志模块, 异常处理模块, 工具类等, 对于 Tomcat 来说, 比较重要的通用模块有日志, Session 管理和集群管理. 下面来介绍这些通用模块.")]),s._v(" "),t("p",[s._v("日志模块作为一个通用的功能, 在系统里通常会使用第三方的日志框架. Java 的日志框架有很多, 比如: JUL(Java Util Logging), Log4j, Logback, Log4j2, Tinylog 等. 除此之外, 还有 JCL(Apache Commons Logging)和 SLF4J 这样的“门面日志”. 下面是 SLF4J 与日志框架 Logback, Log4j 的关系图:")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405162108-n8et45j.png",alt:""}})]),s._v(" "),t("p",[s._v('先来解释一下什么是"门面日志". "门面日志" 利用了设计模式中的门面模式思想, '),t("strong",[s._v("对外提供一套通用的日志记录的 API, 而不提供具体的日志输出服务, 如果要实现日志输出, 需要集成其他的日志框架, 比如 Log4j, Logback, Log4j2 等")]),s._v(".")]),s._v(" "),t("p",[s._v("这种门面模式的好处在于, 记录日志的 "),t("strong",[s._v("API 和日志输出的服务分离开")]),s._v(", 代码里面只需要关注记录日志的 API, "),t("strong",[s._v("通过 SLF4J 指定的接口记录日志; 而日志输出通过引入 JAR 包的方式即可指定其他的日志框架")]),s._v(". ** 当需要改变系统的日志输出服务时, 不用修改代码, 只需要改变引入日志输出框架 JAR 包**.")]),s._v(" "),t("p",[s._v("这里就来看看 Tomcat 的日志模块是如何实现的. 默认情况下, Tomcat 使用自身的 JULI 作为 Tomcat 内部的日志处理系统. JULI 的日志门面采用了 JCL; 而 JULI 的具体实现是构建在 Java 原生的日志系统 "),t("code",[s._v("java.util.logging")]),s._v("​ 之上的, 所以在看 JULI 的日志系统之前, 先简单介绍一下 Java 的日志系统.")]),s._v(" "),t("h5",{attrs:{id:"java日志系统"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java日志系统"}},[s._v("#")]),s._v(" Java日志系统")]),s._v(" "),t("p",[s._v("Java 的日志包在 "),t("code",[s._v("java.util.logging")]),s._v("​ 路径下, 包含了几个比较重要的组件, 通过一张图来理解一下:")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405162108-gmhlkau.png",alt:""}})]),s._v(" "),t("p",[s._v("从图上看到这样几个重要的组件:")]),s._v(" "),t("ul",[t("li",[s._v("Logger: 用来记录日志的类.")]),s._v(" "),t("li",[s._v("Handler: 规定了日志的输出方式, 如控制台输出, 写入文件.")]),s._v(" "),t("li",[s._v("Level: 定义了日志的不同等级.")]),s._v(" "),t("li",[s._v("Formatter: 将日志信息格式化, 比如纯文本, XML.")])]),s._v(" "),t("p",[s._v("可以通过下面的代码来使用这些组件:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Logger")]),s._v(" logger "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Logger")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getLogger")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"com.mycompany.myapp"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    logger"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setLevel")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Level")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("FINE")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    logger"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setUseParentHandlers")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Handler")]),s._v(" hd "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConsoleHandler")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    hd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setLevel")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Level")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("FINE")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    logger"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("addHandler")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("hd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    logger"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("info")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"start log"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("h5",{attrs:{id:"juli"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#juli"}},[s._v("#")]),s._v(" JULI")]),s._v(" "),t("p",[s._v("JULI 对日志的处理方式与 Java 自带的基本一致, 但是 Tomcat 中可以包含多个应用, 而每个应用的日志系统应该相互独立. Java 的原生日志系统是每个 JVM 有一份日志的配置文件, 这不符合 Tomcat 多应用的场景, 所以 JULI 重新实现了一些日志接口.")]),s._v(" "),t("p",[t("strong",[s._v("DirectJDKLog")])]),s._v(" "),t("p",[s._v("Log 的基础实现类是 DirectJDKLog, 这个类相对简单, 就包装了一下 Java 的 Logger 类. 但是它也在原来的基础上进行了一些修改, 比如修改默认的格式化方式.")]),s._v(" "),t("p",[t("strong",[s._v("LogFactory")])]),s._v(" "),t("p",[s._v("Log 使用了工厂模式来向外提供实例, LogFactory 是一个单例, 可以通过 SeviceLoader 为 Log 提供自定义的实现版本, 如果没有配置, 就默认使用 DirectJDKLog.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LogFactory")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 通过 ServiceLoader 尝试加载 Log 的实现类")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServiceLoader")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" logLoader "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServiceLoader")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("load")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Constructor")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" m"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Log")]),s._v(" log"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" logLoader"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" c"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("log"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            m"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getConstructor")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("NoSuchMethodException")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SecurityException")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throw")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Error")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如何没有定义 Log 的实现类, discoveredLogConstructor 为 null")]),s._v("\n    discoveredLogConstructor "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" m"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br")])]),t("p",[s._v("下面的代码是 LogFactory 的 getInstance() 方法:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Log")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getInstance")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LogConfigurationException")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果 discoveredLogConstructor 为 null, 也就没有定义 Log 类, 默认用 DirectJDKLog")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("discoveredLogConstructor "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("DirectJDKLog")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getInstance")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" discoveredLogConstructor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("newInstance")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ReflectiveOperationException")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IllegalArgumentException")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throw")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LogConfigurationException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("p",[t("strong",[s._v("Handler")])]),s._v(" "),t("p",[s._v("在 JULI 中就自定义了两个 Handler: FileHandler 和 AsyncFileHandler. FileHandler 可以简单地理解为一个在特定位置写文件的工具类, 有一些写操作常用的方法, 如 open, write(publish), close, flush 等, 使用了读写锁. 其中的日志信息通过 Formatter 来格式化.")]),s._v(" "),t("p",[s._v("AsyncFileHandler 继承自 FileHandler, 实现了异步的写操作. 其中缓存存储是通过阻塞双端队列 LinkedBlockingDeque 来实现的. 当应用要通过这个 Handler 来记录一条消息时, 消息会先被存储到队列中, 而在后台会有一个专门的线程来处理队列中的消息, 取出的消息会通过父类的 publish 方法写入相应文件内. 这样就可以在大量日志需要写入的时候起到缓冲作用, 防止都阻塞在写日志这个动作上. 需要注意的是, 我们可以为阻塞双端队列设置不同的模式, 在不同模式下, 对新进入的消息有不同的处理方式, 有些模式下会直接丢弃一些日志:")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("OVERFLOW_DROP_LAST: 丢弃栈顶的元素 \nOVERFLOW_DROP_FIRSH: 丢弃栈底的元素 \nOVERFLOW_DROP_FLUSH: 等待一定时间并重试, 不会丢失元素 \nOVERFLOW_DROP_CURRENT: 丢弃放入的元素\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[t("strong",[s._v("Formatter")])]),s._v(" "),t("p",[s._v("Formatter 通过一个 format 方法将日志记录 LogRecord 转化成格式化的字符串, JULI 提供了三个新的 Formatter.")]),s._v(" "),t("ul",[t("li",[s._v("OnlineFormatter: 基本与 Java 自带的 SimpleFormatter 格式相同, 不过把所有内容都写到了一行中.")]),s._v(" "),t("li",[s._v("VerbatimFormatter: 只记录了日志信息, 没有任何额外的信息.")]),s._v(" "),t("li",[s._v("JdkLoggerFormatter: 格式化了一个轻量级的日志信息.")])]),s._v(" "),t("p",[t("strong",[s._v("日志配置")])]),s._v(" "),t("p",[s._v("Tomcat 的日志配置文件为 Tomcat 文件夹下"),t("code",[s._v("conf/logging.properties")]),s._v("​. 拆解一下这个配置文件, 首先可以看到各种 Handler 的配置:")]),s._v(" "),t("div",{staticClass:"language-properties line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-properties"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("handlers")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("1catalina.org.apache.juli.AsyncFileHandler, 2localhost.org.apache.juli.AsyncFileHandler, 3manager.org.apache.juli.AsyncFileHandler, 4host-manager.org.apache.juli.AsyncFileHandler, java.util.logging.ConsoleHandler.handlers = 1catalina.org.apache.juli.AsyncFileHandler, java.util.logging.ConsoleHandler")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("以 "),t("code",[s._v("1catalina.org.apache.juli.AsyncFileHandler")]),s._v("​ 为例, 数字是为了区分同一个类的不同实例; catalina, localhost, manager 和 host-manager 是 Tomcat 用来区分不同系统日志的标志; 后面的字符串表示了 Handler 具体类型, 如果要添加 Tomcat 服务器的自定义 Handler, 需要在字符串里添加.")]),s._v(" "),t("p",[s._v("接下来是每个 Handler 设置日志等级, 目录和文件前缀, 自定义的 Handler 也要在这里配置详细信息:")]),s._v(" "),t("div",{staticClass:"language-properties line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-properties"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("1catalina.org.apache.juli.AsyncFileHandler.level")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("FINE")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("1catalina.org.apache.juli.AsyncFileHandler.directory")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("${catalina.base}/logs")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("1catalina.org.apache.juli.AsyncFileHandler.prefix")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("catalina.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("1catalina.org.apache.juli.AsyncFileHandler.maxDays")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("90")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("1catalina.org.apache.juli.AsyncFileHandler.encoding")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("UTF-8")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h5",{attrs:{id:"tomcat-slf4j-logback"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tomcat-slf4j-logback"}},[s._v("#")]),s._v(" Tomcat+SLF4J+Logback")]),s._v(" "),t("p",[s._v("前面提到, "),t("strong",[s._v("SLF4J 和 JCL 都是日志门面")]),s._v(", 那它们有什么区别呢? 它们的区别主要体现在日志服务类的绑定机制上. JCL 采用运行时动态绑定的机制, 在运行时动态寻找和加载日志框架实现.")]),s._v(" "),t("p",[s._v("SLF4J 日志输出服务绑定则相对简单很多, "),t("strong",[s._v("在编译时就静态绑定日志框架")]),s._v(", 只需要提前引入需要的日志框架. 另外 Logback 可以说 Log4j 的进化版, 在性能和可用性方面都有所提升.")]),s._v(" "),t("p",[s._v('基于此来实战一下如何将 Tomcat 默认的日志框架切换成为 "SLF4J + Logback". 具体的步骤是:')]),s._v(" "),t("ol",[t("li",[s._v("根据 Tomcat 版本, 从"),t("a",{attrs:{href:"https://github.com/tomcat-slf4j-logback/tomcat-slf4j-logback/releases",target:"_blank",rel:"noopener noreferrer"}},[s._v("这里"),t("OutboundLink")],1),s._v("下载所需要文件. 解压后你会看到一个类似于 Tomcat 目录结构的文件夹.")]),s._v(" "),t("li",[s._v("替换或拷贝下列这些文件到 Tomcat 的安装目录:")])]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405162108-xcx2xlr.jpg",alt:""}})]),s._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[s._v("删除 "),t("code",[s._v("<Tomcat>/conf/logging.properties")]),s._v("​")]),s._v(" "),t("li",[s._v("启动 Tomcat")])]),s._v(" "),t("h4",{attrs:{id:"_32-manager组件-tomcat的session管理机制解析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_32-manager组件-tomcat的session管理机制解析"}},[s._v("#")]),s._v(" 32.Manager组件:Tomcat的Session管理机制解析")]),s._v(" "),t("p",[t("strong",[s._v("可以通过 Request 对象的 getSession() 方法来获取 Session, 并通过 Session 对象来读取和写入属性值")]),s._v(". 而 Session 的管理是由 Web 容器来完成的, 主要是对 Session 的创建和销毁, 除此之外 Web 容器还需要将 Session 状态的变化通知给监听者.")]),s._v(" "),t("p",[s._v("当然 Session 管理还可以交给 Spring 来做, 好处是与特定的 Web 容器解耦, "),t("strong",[s._v("Spring Session 的核心原理是通过 Filter 拦截 Servlet 请求, 将标准的 ServletRequest 包装一下, 换成 Spring 的 Request 对象, 这样当调用 Request 对象的 getSession() 方法时, Spring 会创建和管理 Session")]),s._v(".")]),s._v(" "),t("p",[s._v("那么 Tomcat 的 Session 管理机制还需要了解吗? 还是有必要, 因为只有了解这些原理, 才能更好的理解 Spring Session, 以及 Spring Session 为什么设计成这样. 这里就从 Session 的创建, Session 的清理以及 Session 的事件通知这几个方面来了解 Tomcat 的 Session 管理机制.")]),s._v(" "),t("h5",{attrs:{id:"session的创建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#session的创建"}},[s._v("#")]),s._v(" Session的创建")]),s._v(" "),t("p",[s._v("Tomcat 中主要由每个 "),t("strong",[s._v("Context 容器内的一个 Manager 对象来管理 Session")]),s._v(". 默认实现类为 StandardManager. 下面通过它的接口来了解一下 StandardManager 的功能:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Manager")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Context")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getContext")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setContext")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Context")]),s._v(" context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SessionIdGenerator")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getSessionIdGenerator")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setSessionIdGenerator")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SessionIdGenerator")]),s._v(" sessionIdGenerator"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getSessionCounter")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setSessionCounter")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" sessionCounter"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getMaxActive")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setMaxActive")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" maxActive"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getActiveSessions")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getExpiredSessions")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setExpiredSessions")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" expiredSessions"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getRejectedSessions")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getSessionMaxAliveTime")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setSessionMaxAliveTime")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" sessionMaxAliveTime"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getSessionAverageAliveTime")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getSessionCreateRate")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getSessionExpireRate")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Session")]),s._v(" session"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("changeSessionId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Session")]),s._v(" session"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("changeSessionId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Session")]),s._v(" session"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" newId"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Session")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("createEmptySession")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Session")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("createSession")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" sessionId"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Session")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("findSession")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IOException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Session")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("findSessions")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("load")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassNotFoundException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IOException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("remove")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Session")]),s._v(" session"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("remove")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Session")]),s._v(" session"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" update"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("addPropertyChangeListener")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("PropertyChangeListener")]),s._v(" listener"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("removePropertyChangeListener")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("PropertyChangeListener")]),s._v(" listener"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("unload")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IOException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("backgroundProcess")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("willAttributeDistribute")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br")])]),t("p",[s._v("不出意外在接口中看到了添加和删除 Session 的方法; 另外还有 load() 和 unload() 方法, 它们的作用是分别是将 Session 持久化到存储介质和从存储介质加载 Session.")]),s._v(" "),t("p",[s._v("当调用 "),t("code",[s._v("HttpServletRequest.getSession(true)")]),s._v('​时, 这个参数 true 的意思是"如果当前请求还没有 Session, 就创建一个新的". 那 Tomcat 在背后做了些什么呢?')]),s._v(" "),t("p",[s._v("HttpServletRequest 是一个接口, Tomcat 实现了这个接口, 具体实现类是: "),t("code",[s._v("org.apache.catalina.connector.Request")]),s._v("​.")]),s._v(" "),t("p",[s._v("但这并不是我们拿到的 Request, Tomcat 为了避免把一些实现细节暴露出来, 还有基于安全上的考虑, "),t("strong",[s._v("定义了 Request 的包装类, 叫作 RequestFacade")]),s._v(", 可以通过代码来理解一下:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Request")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HttpServletRequest")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RequestFacade")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HttpServletRequest")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Request")]),s._v(" request "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HttpSession")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getSession")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" create"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getSession")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("create"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("因此我们拿到的 Request 类其实是 "),t("strong",[s._v("RequestFacade")]),s._v(", RequestFacade 的 getSession() 方法调用的是 Request 类的 getSession() 方法, 继续来看 Session 具体是如何创建的:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Context")]),s._v(" context "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getContext")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("context "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Manager")]),s._v(" manager "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getManager")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("manager "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \nsession "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" manager"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("createSession")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sessionId"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nsession"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("access")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("p",[s._v("从上面的代码可以看出, Request 对象中持有 Context 容器对象, 而 Context 容器持有 Session 管理器 Manager, 这样通过 Context 组件就能拿到 Manager 组件, 最后由 Manager 组件来创建 Session.")]),s._v(" "),t("p",[s._v("因此最后还是到了 "),t("strong",[s._v("StandardManager")]),s._v(", StandardManager 的父类叫 ManagerBase, 这个 createSession 方法定义在 ManagerBase 中, StandardManager 直接重用这个方法.")]),s._v(" "),t("p",[s._v("接着来看 ManagerBase 的 createSession() 是如何实现的:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Session")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("createSession")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" sessionId"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 首先判断 Session 数量是不是到了最大值, 最大 Session 数可以通过参数设置")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("maxActiveSessions "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getActiveSessions")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" maxActiveSessions"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        rejectedSessions"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throw")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TooManyActiveSessionsException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n                sm"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getString")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"managerBase.createSession.ise"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                maxActiveSessions"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 重用或者创建一个新的 Session 对象, 请注意在 Tomcat 中就是 StandardSession")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 它是 HttpSession 的具体实现类, 而 HttpSession 是 Servlet 规范中定义的接口")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Session")]),s._v(" session "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("createEmptySession")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 初始化新 Session 的值")]),s._v("\n    session"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setNew")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    session"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setValid")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    session"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setCreationTime")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("currentTimeMillis")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    session"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setMaxInactiveInterval")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getContext")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getSessionTimeout")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("60")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" sessionId"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("generateSessionId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    session"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这里会将 Session 添加到 ConcurrentHashMap 中")]),s._v("\n    sessionCounter"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 将创建时间添加到 LinkedList 中, 并且把最先添加的时间移除")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 主要还是方便清理过期 Session")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SessionTiming")]),s._v(" timing "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SessionTiming")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("session"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getCreationTime")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sessionCreationTiming"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        sessionCreationTiming"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("timing"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        sessionCreationTiming"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("poll")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" session\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br")])]),t("p",[s._v("到此明白了 Session 是如何创建出来的, 创建出来后 Session 会被保存到一个 "),t("strong",[s._v("ConcurrentHashMap")]),s._v(" 中:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Map")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Session")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" sessions "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConcurrentHashMap")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("请注意 Session 的具体实现类是 "),t("strong",[s._v("StandardSession")]),s._v(", StandardSession 同时实现了 "),t("code",[s._v("javax.servlet.http.HttpSession")]),s._v("​和"),t("code",[s._v("org.apache.catalina.Session")]),s._v("​ 接口, 并且对程序员暴露的是 StandardSessionFacade 外观类, 保证了 StandardSession 的安全, 避免了程序员调用其内部方法进行不当操作. StandardSession 的核心成员变量如下:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StandardSession")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HttpSession")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Session")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Serializable")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConcurrentMap")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" attributes "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConcurrentHashMap")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" creationTime "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0L")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("transient")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("volatile")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" expiring "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("transient")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StandardSessionFacade")]),s._v(" facade "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("volatile")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" lastAccessedTime "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" creationTime"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("transient")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArrayList")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SessionListener")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" listeners "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArrayList")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("transient")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Manager")]),s._v(" manager "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("volatile")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" maxInactiveInterval "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("volatile")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" isNew "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("volatile")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" isValid "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("transient")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Map")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" notes "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Hashtable")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("transient")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Principal")]),s._v(" principal "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("h5",{attrs:{id:"session的清理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#session的清理"}},[s._v("#")]),s._v(" Session的清理")]),s._v(" "),t("p",[s._v("再来看看 Tomcat 是如何清理过期的 Session. 在 Tomcat 热加载与热部署部分讲到容器组件会开启一个 ContainerBackgroundProcessor 后台线程, 调用自己以及子容器的 backgroundProcess 进行一些后台逻辑的处理, 和 Lifecycle 一样, 这个动作也是具有传递性的, 也就是说子容器还会把这个动作传递给自己的子容器. 可以参考下图来理解这个过程.")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405162152-2ymjieo.jpg",alt:""}})]),s._v(" "),t("p",[s._v("其中父容器会遍历所有的子容器并调用其 backgroundProcess() 方法, 而 StandardContext 重写了该方法, 它会调用 StandardManager 的 backgroundProcess() 进而完成 Session 的清理工作, 下面是 StandardManager 的 backgroundProcess() 方法的代码:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("backgroundProcess")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// processExpiresFrequency 默认值为 6, 而 backgroundProcess 默认每隔 10s 调用一次, 也就是说除了任务执行的耗时, 每隔 60s 执行一次")]),s._v("\n    count "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("count "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" processExpiresFrequency"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("count "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 默认每隔 60s 执行一次 Session 清理")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("processExpires")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * 单线程处理, 不存在线程安全问题\n */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("processExpires")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 获取所有的 Session")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Session")]),s._v(" sessions"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("findSessions")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("   \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" expireHere "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" sessions"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Session 的过期是在 isValid() 方法里处理的")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sessions"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("sessions"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isValid")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            expireHere"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br")])]),t("p",[t("strong",[s._v("backgroundProcess() 由 Tomcat 后台线程调用")]),s._v(", 默认是每隔 10 秒调用一次, 但是 Session 的清理动作不能太频繁, 因为需要遍历 Session 列表, 会耗费 CPU 资源, 所以在 backgroundProcess() 方法中做了取模处理, backgroundProcess() 调用 6 次, 才执行一次 Session 清理, 也就是说 Session 清理"),t("strong",[s._v("每 60 秒执行一次")]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"session事件通知"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#session事件通知"}},[s._v("#")]),s._v(" Session事件通知")]),s._v(" "),t("p",[s._v("按照 Servlet 规范, 在 Session 的生命周期过程中, "),t("strong",[s._v("要将事件通知监听者")]),s._v(", Servlet 规范定义了 Session 的监听器接口:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HttpSessionListener")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("EventListener")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Session 创建时调用")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sessionCreated")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HttpSessionEvent")]),s._v(" se"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Session 销毁时调用")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sessionDestroyed")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HttpSessionEvent")]),s._v(" se"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("注意到这两个方法的参数都是 HttpSessionEvent, 所以 Tomcat 需要先创建 HttpSessionEvent 对象, 然后遍历 Context 内部的 LifecycleListener, 并且判断是否为 HttpSessionListener 实例, 如果是的话则调用 HttpSessionListener 的 sessionCreated() 方法进行事件通知. 这些事情都是在 Session 的 setId() 方法中完成的:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[s._v("session"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" notify"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果这个 id 已经存在, 先从 Manager 中删除")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("manager "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        manager"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("remove")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 添加新的 Session")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("manager "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        manager"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这里面完成了 HttpSessionListener 事件通知")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("notify"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("tellNew")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br")])]),t("p",[s._v("从代码看到 setId() 方法调用了 tellNew() 方法, 那 tellNew() 又是如何实现的呢?")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("tellNew")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 通知 org.apache.catalina.SessionListener")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("fireSessionEvent")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Session")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SESSION_CREATED_EVENT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 获取 Context 内部的 LifecycleListener 并判断是否为 HttpSessionListener")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Context")]),s._v(" context "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" manager"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getContext")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" listeners"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getApplicationLifecycleListeners")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("listeners "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" listeners"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  \n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 创建 HttpSessionEvent")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HttpSessionEvent")]),s._v(" event "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HttpSessionEvent")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getSession")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" listeners"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 判断是否是 HttpSessionListener")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("listeners"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("instanceof")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HttpSessionListener")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("continue")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n          \n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HttpSessionListener")]),s._v(" listener "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HttpSessionListener")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" listeners"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 注意这是容器内部事件")]),s._v("\n            context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("fireContainerEvent")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"beforeSessionCreated"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" listener"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("   \n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 触发 Session Created 事件")]),s._v("\n            listener"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sessionCreated")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("event"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      \n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 注意这也是容器内部事件")]),s._v("\n            context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("fireContainerEvent")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"afterSessionCreated"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" listener"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      \n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br")])]),t("p",[s._v("上面代码的逻辑是, 先通过 StandardContext 将 HttpSessionListener 类型的 Listener 取出, 然后依次调用它们的 sessionCreated() 方法.")]),s._v(" "),t("h5",{attrs:{id:"总结-15"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结-15"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),t("p",[s._v("这里从 Request 谈到了 Session 的创建, 销毁和事件通知, 里面涉及不少相关的类, 下图是这些类的关系:")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405162152-33c5ovy.jpg",alt:""}})]),s._v(" "),t("p",[s._v("Servlet 规范中定义了 HttpServletRequest 和 HttpSession 接口, Tomcat 实现了这些接口, 但具体实现细节并没有暴露给开发者, 因此定义了"),t("strong",[s._v("两个包装类, RequestFacade 和 StandardSessionFacade")]),s._v(".")]),s._v(" "),t("p",[s._v("Tomcat 是通过 Manager 来管理 Session 的, 默认实现是 StandardManager. StandardContext 持有 StandardManager 的实例, 并存放了 HttpSessionListener 集合, Session 在创建和销毁时, 会通知监听器.")]),s._v(" "),t("h4",{attrs:{id:"_33-cluster组件-tomcat的集群通信原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_33-cluster组件-tomcat的集群通信原理"}},[s._v("#")]),s._v(" 33.Cluster组件:Tomcat的集群通信原理")]),s._v(" "),t("p",[s._v("为了支持水平扩展和高可用, Tomcat 提供了集群部署的能力, 但与此同时也带来了"),t("strong",[s._v("分布式系统的一个通用问题")]),s._v(", 那就是如何在集群中的"),t("strong",[s._v("多个节点之间保持数据的一致性")]),s._v(", 比如会话(Session)信息.")]),s._v(" "),t("p",[s._v("要实现这一点, 基本上有两种方式, 一种是把所有 Session 数据放到一台服务器或者一个数据库中, 集群中的所有节点通过访问这台 Session 服务器来获取数据. 另一种方式就是在集群中的节点间进行 Session 数据的同步拷贝, 这里又分为两种策略: 第一种是将一个节点的 Session 拷贝到集群中其他所有节点; 第二种是只将一个节点上的 Session 数据拷贝到另一个备份节点.")]),s._v(" "),t("p",[t("strong",[s._v("对于 Tomcat 的 Session 管理来说, 这两种方式都支持")]),s._v(". 这里就来看看第二种方式的实现原理, 也就是 "),t("strong",[s._v("Tomcat 集群通信")]),s._v("的原理和配置方法, 最后通过官网上的一个例子来了解下 Tomcat 集群到底是如何工作的.")]),s._v(" "),t("h5",{attrs:{id:"集群通信原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#集群通信原理"}},[s._v("#")]),s._v(" 集群通信原理")]),s._v(" "),t("p",[s._v("要实现集群通信, 首先要知道集群中都有哪些成员. Tomcat 是通过"),t("strong",[s._v("组播")]),s._v('(Multicast)来实现的. 那什么是组播呢? 为了理解组播, 先来说说什么是"单播". 网络节点之间的通信就好像是人们之间的对话一样, 一个人对另外一个人说话, 此时信息的接收和传递只在两个节点之间进行, 比如你在收发电子邮件, 浏览网页时, 使用的就是单播, 也就是 "点对点通信".')]),s._v(" "),t("p",[s._v("如果一台主机需要将同一个消息发送多个主机逐个传输, 效率就会比较低, 于是就出现组播技术. 组播是"),t("strong",[s._v("一台主机向指定的一组主机发送数据报包")]),s._v(", 组播通信的过程是这样的: 每一个 Tomcat 节点在启动时和运行时都会周期性(默认 500 毫秒)发送组播心跳包, 同一个集群内的节点都在相同的"),t("strong",[s._v("组播地址")]),s._v("和"),t("strong",[s._v("端口")]),s._v("监听这些信息; 在一定的时间内(默认 3 秒)不发送"),t("strong",[s._v("组播报文")]),s._v("的节点就会被认为已经崩溃了, 会从集群中删去. 因此通过组播, 集群中每个成员都能维护一个集群成员列表.")]),s._v(" "),t("h5",{attrs:{id:"集群通信配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#集群通信配置"}},[s._v("#")]),s._v(" 集群通信配置")]),s._v(" "),t("p",[s._v("有了集群成员的列表, 集群中的节点就能通过 "),t("strong",[s._v("TCP")]),s._v(" 连接向其他节点传输 Session 数据. Tomcat 通过 SimpleTcpCluster 类来进行"),t("strong",[s._v("会话复制")]),s._v("(In-Memory Replication). 要开启集群功能, 只需要将 "),t("code",[s._v("server.xml")]),s._v("​ 里的这一行的注释去掉就行:")]),s._v(" "),t("div",{staticClass:"language-xml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('\x3c!-- \n<Cluster className="org.apache.catalina.ha.tcp.SimpleTcpCluster"/>\n--\x3e')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("变成这样:")]),s._v(" "),t("div",{staticClass:"language-xml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("Cluster")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("className")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("org.apache.catalina.ha.tcp.SimpleTcpCluster"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("/>")])]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("虽然只是简单的一行配置, 但这一行配置等同于下面这样的配置, 也就是说 Tomcat 给我们设置了很多默认参数, 这些参数都跟集群通信有关.")]),s._v(" "),t("div",{staticClass:"language-xml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('\x3c!-- \n  SimpleTcpCluster 是用来复制 Session 的组件. 复制 Session 有同步和异步两种方式: \n  同步模式下, 向浏览器的发送响应数据前, 需要先将 Session 拷贝到其他节点完; \n  异步模式下, 无需等待 Session 拷贝完成就可响应. 异步模式更高效, 但是同步模式\n  可靠性更高. \n  同步异步模式由 channelSendOptions 参数控制, 默认值是 8, 为异步模式; 4 是同步模式. \n  在异步模式下, 可以通过加上 " 拷贝确认 "(Acknowledge)来提高可靠性, 此时\n  channelSendOptions 设为 10\n--\x3e')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("Cluster")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("className")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("org.apache.catalina.ha.tcp.SimpleTcpCluster"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v("\n                 "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("channelSendOptions")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("8"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("\x3c!--\n    Manager 决定如何管理集群的 Session 信息. \n    Tomcat 提供了两种 Manager: BackupManager 和 DeltaManager. \n    BackupManager－集群下的某一节点的 Session, 将复制到一个备份节点. \n    DeltaManager－ 集群下某一节点的 Session, 将复制到所有其他节点. \n    DeltaManager 是 Tomcat 默认的集群 Manager. \n  \n    expireSessionsOnShutdown－设置为 true 时, 一个节点关闭时, \n    将导致集群下的所有 Session 失效\n    notifyListenersOnReplication－集群下节点间的 Session 复制, \n    删除操作, 是否通知 session listeners\n  \n    maxInactiveInterval－集群下 Session 的有效时间 (单位:s). \n    maxInactiveInterval 内未活动的 Session, 将被 Tomcat 回收. \n    默认值为 1800(30min)\n  --\x3e")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("Manager")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("className")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("org.apache.catalina.ha.session.DeltaManager"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v("\n                   "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("expireSessionsOnShutdown")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("false"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v("\n                   "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("notifyListenersOnReplication")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("true"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("/>")])]),s._v("\n \n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("\x3c!--\n    Channel 是 Tomcat 节点之间进行通讯的工具. \n    Channel 包括 5 个组件: Membership, Receiver, Sender, \n    Transport, Interceptor\n   --\x3e")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("Channel")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("className")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("org.apache.catalina.tribes.group.GroupChannel"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("\x3c!--\n      Membership 维护集群的可用节点列表. 它可以检查到新增的节点, \n      也可以检查没有心跳的节点\n      className－指定 Membership 使用的类\n      address－组播地址\n      port－组播端口\n      frequency－发送心跳 (向组播地址发送 UDP 数据包) 的时间间隔 (单位:ms). \n      dropTime－Membership 在 dropTime(单位:ms) 内未收到某一节点的心跳, \n      则将该节点从可用节点列表删除. 默认值为 3000. \n     --\x3e")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("Membership")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("className")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("org.apache.catalina.tribes.membership.\n         McastService"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("address")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("228.0.0.4"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("port")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("45564"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("frequency")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("500"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("dropTime")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("3000"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("/>")])]),s._v("\n   \n     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("\x3c!--\n       Receiver 用于各个节点接收其他节点发送的数据. \n       接收器分为两种: BioReceiver(阻塞式), NioReceiver(非阻塞式)\n \n       className－指定 Receiver 使用的类\n       address－接收消息的地址\n       port－接收消息的端口\n       autoBind－端口的变化区间, 如果 port 为 4000, autoBind 为 100, \n                 接收器将在 4000-4099 间取一个端口进行监听. \n       selectorTimeout－NioReceiver 内 Selector 轮询的超时时间\n       maxThreads－线程池的最大线程数\n     --\x3e")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("Receiver")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("className")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("org.apache.catalina.tribes.transport.nio.\n         NioReceiver"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("address")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("auto"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("port")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("4000"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("autoBind")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("100"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("selectorTimeout")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("5000"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("maxThreads")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("6"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("/>")])]),s._v("\n \n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("\x3c!--\n         Sender 用于向其他节点发送数据, Sender 内嵌了 Transport 组件, \n         Transport 真正负责发送消息. \n      --\x3e")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("Sender")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("className")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("org.apache.catalina.tribes.transport.\n          ReplicationTransmitter"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("\x3c!--\n            Transport 分为两种: bio.PooledMultiSender(阻塞式)\n            和 nio.PooledParallelSender(非阻塞式), PooledParallelSender\n            是从 tcp 连接池中获取连接, 可以实现并行发送, 即集群中的节点可以\n            同时向其他所有节点发送数据而互不影响. \n           --\x3e")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("Transport")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("className")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("org.apache.catalina.tribes.\n          transport.nio.PooledParallelSender"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("/>")])]),s._v("   \n       "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("Sender")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n   \n       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("\x3c!--\n         Interceptor : Cluster 的拦截器\n         TcpFailureDetector－TcpFailureDetector 可以拦截到某个节点关闭\n         的信息, 并尝试通过 TCP 连接到此节点, 以确保此节点真正关闭, 从而更新集\n         群可用节点列表           \n        --\x3e")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("Interceptor")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("className")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("org.apache.catalina.tribes.group.\n       interceptors.TcpFailureDetector"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("/>")])]),s._v("\n   \n       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("\x3c!--\n         MessageDispatchInterceptor－查看 Cluster 组件发送消息的\n         方式是否设置为 Channel.SEND_OPTIONS_ASYNCHRONOUS, 如果是, \n         MessageDispatchInterceptor 先将等待发送的消息进行排队, \n         然后将排好队的消息转给 Sender. \n        --\x3e")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("Interceptor")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("className")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("org.apache.catalina.tribes.group.\n       interceptors.MessageDispatchInterceptor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("/>")])]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("Channel")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n \n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("\x3c!--\n    Valve : Tomcat 的拦截器, \n    ReplicationValve－在处理请求前后打日志; 过滤不涉及 Session 变化的请求.            \n    --\x3e")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("Valve")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("className")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("org.apache.catalina.ha.tcp.ReplicationValve"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("filter")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("/>")])]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("Valve")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("className")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("org.apache.catalina.ha.session.\n  JvmRouteBinderValve"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("/>")])]),s._v("\n \n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("\x3c!--\n    Deployer 用于集群的 farm 功能, 监控应用中文件的更新, 以保证集群中所有节点\n    应用的一致性, 如某个用户上传文件到集群中某个节点的应用程序目录下, Deployer\n    会监测到这一操作并把文件拷贝到集群中其他节点相同应用的对应目录下以保持\n    所有应用的一致, 这是一个相当强大的功能. \n  --\x3e")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("Deployer")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("className")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("org.apache.catalina.ha.deploy.FarmWarDeployer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("tempDir")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("/tmp/war-temp/"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("deployDir")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("/tmp/war-deploy/"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("watchDir")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("/tmp/war-listen/"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("watchEnabled")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("false"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("/>")])]),s._v("\n \n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("\x3c!--\n    ClusterListener : 监听器, 监听 Cluster 组件接收的消息\n    使用 DeltaManager 时, Cluster 接收的信息通过 ClusterSessionListener\n    传递给 DeltaManager, 从而更新自己的 Session 列表. \n    --\x3e")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("ClusterListener")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("className")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("org.apache.catalina.ha.session.\n  ClusterSessionListener"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("/>")])]),s._v("\n  \n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("Cluster")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br"),t("span",{staticClass:"line-number"},[s._v("59")]),t("br"),t("span",{staticClass:"line-number"},[s._v("60")]),t("br"),t("span",{staticClass:"line-number"},[s._v("61")]),t("br"),t("span",{staticClass:"line-number"},[s._v("62")]),t("br"),t("span",{staticClass:"line-number"},[s._v("63")]),t("br"),t("span",{staticClass:"line-number"},[s._v("64")]),t("br"),t("span",{staticClass:"line-number"},[s._v("65")]),t("br"),t("span",{staticClass:"line-number"},[s._v("66")]),t("br"),t("span",{staticClass:"line-number"},[s._v("67")]),t("br"),t("span",{staticClass:"line-number"},[s._v("68")]),t("br"),t("span",{staticClass:"line-number"},[s._v("69")]),t("br"),t("span",{staticClass:"line-number"},[s._v("70")]),t("br"),t("span",{staticClass:"line-number"},[s._v("71")]),t("br"),t("span",{staticClass:"line-number"},[s._v("72")]),t("br"),t("span",{staticClass:"line-number"},[s._v("73")]),t("br"),t("span",{staticClass:"line-number"},[s._v("74")]),t("br"),t("span",{staticClass:"line-number"},[s._v("75")]),t("br"),t("span",{staticClass:"line-number"},[s._v("76")]),t("br"),t("span",{staticClass:"line-number"},[s._v("77")]),t("br"),t("span",{staticClass:"line-number"},[s._v("78")]),t("br"),t("span",{staticClass:"line-number"},[s._v("79")]),t("br"),t("span",{staticClass:"line-number"},[s._v("80")]),t("br"),t("span",{staticClass:"line-number"},[s._v("81")]),t("br"),t("span",{staticClass:"line-number"},[s._v("82")]),t("br"),t("span",{staticClass:"line-number"},[s._v("83")]),t("br"),t("span",{staticClass:"line-number"},[s._v("84")]),t("br"),t("span",{staticClass:"line-number"},[s._v("85")]),t("br"),t("span",{staticClass:"line-number"},[s._v("86")]),t("br"),t("span",{staticClass:"line-number"},[s._v("87")]),t("br"),t("span",{staticClass:"line-number"},[s._v("88")]),t("br"),t("span",{staticClass:"line-number"},[s._v("89")]),t("br"),t("span",{staticClass:"line-number"},[s._v("90")]),t("br"),t("span",{staticClass:"line-number"},[s._v("91")]),t("br"),t("span",{staticClass:"line-number"},[s._v("92")]),t("br"),t("span",{staticClass:"line-number"},[s._v("93")]),t("br"),t("span",{staticClass:"line-number"},[s._v("94")]),t("br"),t("span",{staticClass:"line-number"},[s._v("95")]),t("br"),t("span",{staticClass:"line-number"},[s._v("96")]),t("br"),t("span",{staticClass:"line-number"},[s._v("97")]),t("br"),t("span",{staticClass:"line-number"},[s._v("98")]),t("br"),t("span",{staticClass:"line-number"},[s._v("99")]),t("br"),t("span",{staticClass:"line-number"},[s._v("100")]),t("br"),t("span",{staticClass:"line-number"},[s._v("101")]),t("br"),t("span",{staticClass:"line-number"},[s._v("102")]),t("br"),t("span",{staticClass:"line-number"},[s._v("103")]),t("br"),t("span",{staticClass:"line-number"},[s._v("104")]),t("br"),t("span",{staticClass:"line-number"},[s._v("105")]),t("br"),t("span",{staticClass:"line-number"},[s._v("106")]),t("br"),t("span",{staticClass:"line-number"},[s._v("107")]),t("br"),t("span",{staticClass:"line-number"},[s._v("108")]),t("br"),t("span",{staticClass:"line-number"},[s._v("109")]),t("br"),t("span",{staticClass:"line-number"},[s._v("110")]),t("br"),t("span",{staticClass:"line-number"},[s._v("111")]),t("br"),t("span",{staticClass:"line-number"},[s._v("112")]),t("br"),t("span",{staticClass:"line-number"},[s._v("113")]),t("br"),t("span",{staticClass:"line-number"},[s._v("114")]),t("br"),t("span",{staticClass:"line-number"},[s._v("115")]),t("br"),t("span",{staticClass:"line-number"},[s._v("116")]),t("br"),t("span",{staticClass:"line-number"},[s._v("117")]),t("br"),t("span",{staticClass:"line-number"},[s._v("118")]),t("br"),t("span",{staticClass:"line-number"},[s._v("119")]),t("br"),t("span",{staticClass:"line-number"},[s._v("120")]),t("br"),t("span",{staticClass:"line-number"},[s._v("121")]),t("br"),t("span",{staticClass:"line-number"},[s._v("122")]),t("br"),t("span",{staticClass:"line-number"},[s._v("123")]),t("br"),t("span",{staticClass:"line-number"},[s._v("124")]),t("br"),t("span",{staticClass:"line-number"},[s._v("125")]),t("br"),t("span",{staticClass:"line-number"},[s._v("126")]),t("br"),t("span",{staticClass:"line-number"},[s._v("127")]),t("br"),t("span",{staticClass:"line-number"},[s._v("128")]),t("br"),t("span",{staticClass:"line-number"},[s._v("129")]),t("br"),t("span",{staticClass:"line-number"},[s._v("130")]),t("br"),t("span",{staticClass:"line-number"},[s._v("131")]),t("br"),t("span",{staticClass:"line-number"},[s._v("132")]),t("br"),t("span",{staticClass:"line-number"},[s._v("133")]),t("br"),t("span",{staticClass:"line-number"},[s._v("134")]),t("br"),t("span",{staticClass:"line-number"},[s._v("135")]),t("br"),t("span",{staticClass:"line-number"},[s._v("136")]),t("br"),t("span",{staticClass:"line-number"},[s._v("137")]),t("br"),t("span",{staticClass:"line-number"},[s._v("138")]),t("br"),t("span",{staticClass:"line-number"},[s._v("139")]),t("br")])]),t("p",[s._v("从上面的的参数列表可以看到, 默认情况下 Session 管理组件 DeltaManager 会在节点之间"),t("strong",[s._v("拷贝 Session")]),s._v(", DeltaManager 采用的一种 "),t("strong",[s._v("all-to-all")]),s._v(" 的工作方式, "),t("strong",[s._v("即集群中的节点会把 Session 数据向所有其他节点拷贝")]),s._v(", 而不管其他节点是否部署了当前应用. 当集群节点数比较少时, 比如少于 4 个, 这种 all-to-all 的方式是不错的选择; 但是当集群中的节点数量比较多时, 数据拷贝的开销成指数级增长, 这种情况下可以考虑 BackupManager, BackupManager 只向一个备份节点拷贝数据.")]),s._v(" "),t("p",[s._v("在大体了解了 Tomcat 集群实现模型后, 就可以对集群作出更优化的配置了. Tomcat 推荐了一套配置, 使用了比 DeltaManager 更高效的 BackupManager, 并且通过 ReplicationValve 设置了请求过滤.")]),s._v(" "),t("p",[s._v("这里还请注意在一台服务器部署多个节点时需要修改 Receiver 的侦听端口, 另外为了在节点间高效地拷贝数据, 所有 Tomcat 节点最好采用相同的配置, 具体配置如下:")]),s._v(" "),t("div",{staticClass:"language-xml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("Cluster")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("className")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("org.apache.catalina.ha.tcp.SimpleTcpCluster"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v("\n                 "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("channelSendOptions")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("6"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("Manager")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("className")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("org.apache.catalina.ha.session.BackupManager"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v("\n                   "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("expireSessionsOnShutdown")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("false"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v("\n                   "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("notifyListenersOnReplication")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("true"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v("\n                   "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("mapSendOptions")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("6"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("/>")])]),s._v("\n   \n     "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("Channel")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("className")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("org.apache.catalina.tribes.group.\n     GroupChannel"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n   \n     "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("Membership")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("className")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("org.apache.catalina.tribes.membership.\n     McastService"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("address")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("228.0.0.4"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("port")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("45564"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("frequency")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("500"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("dropTime")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("3000"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("/>")])]),s._v("\n   \n     "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("Receiver")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("className")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("org.apache.catalina.tribes.transport.nio.\n     NioReceiver"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("address")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("auto"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("port")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("5000"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("selectorTimeout")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("100"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("maxThreads")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("6"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("/>")])]),s._v("\n \n     "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("Sender")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("className")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("org.apache.catalina.tribes.transport.\n     ReplicationTransmitter"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("Transport")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("className")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("org.apache.catalina.tribes.transport.\n          nio.PooledParallelSender"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("/>")])]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("Sender")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n   \n     "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("Interceptor")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("className")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("org.apache.catalina.tribes.group.\n     interceptors.TcpFailureDetector"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("/>")])]),s._v("\n   \n     "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("Interceptor")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("className")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("org.apache.catalina.tribes.group.\n     interceptors.MessageDispatchInterceptor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("/>")])]),s._v("\n   \n     "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("Interceptor")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("className")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("org.apache.catalina.tribes.group.\n     interceptors.ThroughputInterceptor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("/>")])]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("Channel")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n \n   "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("Valve")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("className")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("org.apache.catalina.ha.tcp.ReplicationValve"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("filter")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v(".*\\.gif|.*\\.js|.*\\.jpeg|.*\\.jpg|.*\\.png|.*\\\n               .htm|.*\\.html|.*\\.css|.*\\.txt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("/>")])]),s._v("\n \n   "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("Deployer")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("className")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("org.apache.catalina.ha.deploy.FarmWarDeployer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("tempDir")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("/tmp/war-temp/"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("deployDir")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("/tmp/war-deploy/"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("watchDir")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("/tmp/war-listen/"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("watchEnabled")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("false"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("/>")])]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("ClusterListener")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("className")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("org.apache.catalina.ha.session.\n    ClusterSessionListener"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("/>")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("Cluster")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br")])]),t("h5",{attrs:{id:"集群工作过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#集群工作过程"}},[s._v("#")]),s._v(" 集群工作过程")]),s._v(" "),t("p",[s._v("Tomcat 的官网给出了一个例子, 来说明 Tomcat 集群模式下是如何工作的, 以及 Tomcat 集群是如何实现高可用的. 比如集群由 Tomcat A 和 Tomcat B 两个 Tomcat 实例组成, 按照时间先后顺序发生了如下事件:")]),s._v(" "),t("p",[t("strong",[s._v("1. Tomcat A 启动")])]),s._v(" "),t("p",[s._v("Tomcat A 启动过程中, 当 Host 对象被创建时, 一个 Cluster 组件(默认是 SimpleTcpCluster)被关联到这个 Host 对象. 当某个应用在 "),t("code",[s._v("web.xml")]),s._v("​ 中设置了 Distributable 时, Tomcat 将为此应用的上下文环境创建一个 DeltaManager. SimpleTcpCluster 启动 Membership 服务和 Replication 服务.")]),s._v(" "),t("p",[t("strong",[s._v("2. Tomcat B 启动(在 Tomcat A 之后启动)")])]),s._v(" "),t("p",[s._v("首先 Tomcat B 会执行和 Tomcat A 一样的操作, 然后 SimpleTcpCluster 会建立一个由 Tomcat A 和 Tomcat B 组成的 Membership. 接着 Tomcat B 向集群中的 Tomcat A 请求 Session 数据, 如果 Tomcat A 没有响应 Tomcat B 的拷贝请求, Tomcat B 会在 60 秒后 time out. 在 Session 数据拷贝完成之前 Tomcat B 不会接收浏览器的请求.")]),s._v(" "),t("p",[t("strong",[s._v("3. Tomcat A 接收 HTTP 请求, 创建 Session 1")])]),s._v(" "),t("p",[s._v("Tomcat A 响应客户请求, 在把结果发送回客户端之前, ReplicationValve 会拦截当前请求(如果 Filter 中配置了不需拦截的请求类型, 这一步就不会进行, 默认配置下拦截所有请求), 如果发现当前请求更新了 Session, 就调用 Replication 服务建立 TCP 连接将 Session 拷贝到 Membership 列表中的其他节点即 Tomcat B. 在拷贝时, 所有保存在当前 Session 中的可序列化的对象都会被拷贝, 而不仅仅是发生更新的部分.")]),s._v(" "),t("p",[t("strong",[s._v("4. Tomcat A 崩溃")])]),s._v(" "),t("p",[s._v("当 Tomcat A 崩溃时, Tomcat B 会被告知 Tomcat A 已从集群中退出, 然后 Tomcat B 就会把 Tomcat A 从自己的 Membership 列表中删除. 并且 Tomcat B 的 Session 更新时不再往 Tomcat A 拷贝, 同时负载均衡器会把后续的 HTTP 请求全部转发给 Tomcat B. 在此过程中所有的 Session 数据不会丢失.")]),s._v(" "),t("p",[t("strong",[s._v("5. Tomcat B 接收 Tomcat A 的请求")])]),s._v(" "),t("p",[s._v("Tomcat B 正常响应本应该发往 Tomcat A 的请求, 因为 Tomcat B 保存了 Tomcat A 的所有 Session 数据.")]),s._v(" "),t("p",[t("strong",[s._v("6. Tomcat A 重新启动")])]),s._v(" "),t("p",[s._v("Tomcat A 按步骤 1, 2 操作启动, 加入集群, 并从 Tomcat B 拷贝所有 Session 数据, 拷贝完成后开始接收请求.")]),s._v(" "),t("p",[t("strong",[s._v("7. Tomcat A 接收请求, Session 1 被用户注销")])]),s._v(" "),t("p",[s._v("Tomcat 继续接收发往 Tomcat A 的请求, Session 1 设置为失效. 请注意这里的失效并非因为 Tomcat A 处于非活动状态超过设置的时间, 而是应用程序执行了注销的操作(比如用户登出)而引起的 Session 失效. 这时 Tomcat A 向 Tomcat B 发送一个 Session 1 Expired 的消息, Tomcat B 收到消息后也会把 Session 1 设置为失效.")]),s._v(" "),t("p",[t("strong",[s._v("8. Tomcat B 接收到一个新请求, 创建 Session 2")])]),s._v(" "),t("p",[s._v("同理这个新的 Session 也会被拷贝到 Tomcat A.")]),s._v(" "),t("p",[t("strong",[s._v("9. Tomcat A 上的 Session 2 过期")])]),s._v(" "),t("p",[s._v("因超时原因引起的 Session 失效 Tomcat A 无需通知 Tomcat B, Tomcat B 同样知道 Session 2 已经超时. 因此对于 Tomcat 集群有一点非常重要, "),t("strong",[s._v("所有节点的操作系统时间必须一致")]),s._v(". 不然会出现某个节点 Session 已过期而在另一节点此 Session 仍处于活动状态的现象.")]),s._v(" "),t("h5",{attrs:{id:"总结-16"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结-16"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),t("p",[s._v("这里分析了 Tomcat 的集群工作原理和配置方式, 还通过官网上的一个例子说明了 Tomcat 集群的工作过程. Tomcat 集群对 Session 的拷贝支持两种方式: DeltaManager 和 BackupManager.")]),s._v(" "),t("p",[s._v("当集群中节点比较少时, 可以采用 DeltaManager, 因为 Session 数据在集群中各个节点都有备份, 任何一个节点崩溃都不会对整体造成影响, 可靠性比较高.")]),s._v(" "),t("p",[s._v("当集群中节点数比较多时, 可以采用 BackupManager, 这是因为一个节点的 Session 只会拷贝到另一个节点, 数据拷贝的开销比较少, 同时只要这两个节点不同时崩溃, Session 数据就不会丢失.")]),s._v(" "),t("h3",{attrs:{id:"性能优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#性能优化"}},[s._v("#")]),s._v(" 性能优化")]),s._v(" "),t("h4",{attrs:{id:"_34-jvm-gc原理及调优的基本思路"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_34-jvm-gc原理及调优的基本思路"}},[s._v("#")]),s._v(" 34.JVM GC原理及调优的基本思路")]),s._v(" "),t("p",[s._v("和 Web 应用程序一样, Tomcat 作为一个 Java 程序也跑在 JVM 中, 因此如果要对 Tomcat 进行调优, 需要先了解 JVM 调优的原理. 而对于 JVM 调优来说, 主要是 JVM 垃圾收集的优化, 一般来说是因为有问题才需要优化, 所以对于 JVM GC 来说, 如果观察到 Tomcat 进程的 CPU 使用率比较高, 并且在 GC 日志中发现 GC 次数比较频繁, GC 停顿时间长, 这表明需要对 GC 进行优化了.")]),s._v(" "),t("p",[s._v("在对 GC 调优的过程中, 不仅需要知道 GC 的原理, 更重要的是要熟练使用各种监控和分析工具, 具备 GC 调优的实战能力. CMS 和 G1 是时下使用率比较高的两款垃圾收集器, 从 Java 9 开始, 采用 G1 作为默认垃圾收集器, 而 G1 的目标也是逐步取代 CMS.")]),s._v(" "),t("h5",{attrs:{id:"cms-vs-g1"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cms-vs-g1"}},[s._v("#")]),s._v(" CMS vs G1")]),s._v(" "),t("p",[s._v("CMS 收集器将 Java 堆分为"),t("strong",[s._v("年轻代")]),s._v("(Young)或"),t("strong",[s._v("年老代")]),s._v("(Old). 这主要是因为有研究表明, 超过 90％ 的对象在第一次 GC 时就被回收掉, 但是少数对象往往会存活较长的时间.")]),s._v(" "),t("p",[s._v("CMS 还将年轻代内存空间分为"),t("strong",[s._v("幸存者空间")]),s._v("(Survivor)和"),t("strong",[s._v("伊甸园空间")]),s._v("(Eden). 新的对象始终在 Eden 空间上创建. 一旦一个对象在一次垃圾收集后还幸存, 就会被移动到幸存者空间. 当一个对象在多次垃圾收集之后还存活时, 它会移动到年老代. 这样做的目的是在年轻代和年老代采用不同的收集算法, 以达到较高的收集效率, 比如在年轻代采用"),t("strong",[s._v("复制-整理算法")]),s._v(", 在年老代采用"),t("strong",[s._v("标记-清理算法")]),s._v(". 因此 CMS 将 Java 堆分成如下区域:")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405162238-fon1zjr.png",alt:""}})]),s._v(" "),t("p",[s._v("与 CMS 相比, G1 收集器有两大特点:")]),s._v(" "),t("ul",[t("li",[s._v('G1 可以并发完成大部分 GC 的工作, 这期间不会"Stop-The-World".')]),s._v(" "),t("li",[s._v("G1 使用"),t("strong",[s._v("非连续空间")]),s._v(", 这使 G1 能够有效地处理非常大的堆. 此外, G1 可以同时收集年轻代和年老代. G1 并没有将 Java 堆分成三个空间(Eden, Survivor 和 Old), 而是将堆分成许多(通常是几百个)非常小的区域. 这些区域是固定大小的(默认情况下大约为 2MB). 每个区域都分配给一个空间.  G1 收集器的 Java 堆如下图所示:")])]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405162238-efnv7sg.png",alt:""}})]),s._v(" "),t("p",[s._v('图上的 U 表示 "未分配" 区域. G1 将堆拆分成小的区域, 一个最大的好处是可以做局部区域的垃圾回收, 而不需要每次都回收整个区域比如年轻代和年老代, 这样回收的停顿时间会比较短. 具体的收集过程是:')]),s._v(" "),t("ul",[t("li",[s._v("将所有存活的对象将从"),t("strong",[s._v("收集的区域")]),s._v("复制到"),t("strong",[s._v("未分配的区域")]),s._v(', 比如收集的区域是 Eden 空间, 把 Eden 中的存活对象复制到未分配区域, 这个未分配区域就成了 Survivor 空间. 理想情况下, 如果一个区域全是垃圾(意味着一个存活的对象都没有), 则可以直接将该区域声明为 "未分配".')]),s._v(" "),t("li",[s._v("为了优化收集时间, G1 总是优先选择垃圾最多的区域, 从而最大限度地减少后续分配和释放堆空间所需的工作量. 这也是 G1 收集器名字的由来---Garbage-First.")])]),s._v(" "),t("h5",{attrs:{id:"gc调优原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gc调优原则"}},[s._v("#")]),s._v(" GC调优原则")]),s._v(" "),t("p",[s._v("GC 是有代价的, 因此调优的根本原则是"),t("strong",[s._v("每一次 GC 都回收尽可能多的对象")]),s._v(", 也就是减少无用功. 因此在做具体调优的时候, 针对 CMS 和 G1 两种垃圾收集器, 分别有一些相应的策略.")]),s._v(" "),t("p",[t("strong",[s._v("CMS收集器")])]),s._v(" "),t("p",[s._v("对于 CMS 收集器来说, 最重要的是"),t("strong",[s._v("合理地设置年轻代和年老代的大小")]),s._v(". 年轻代太小的话, 会导致频繁的 Minor GC, 并且很有可能存活期短的对象也不能被回收, GC 的效率就不高. 而年老代太小的话, 容纳不下从年轻代过来的新对象, 会频繁触发单线程 Full GC, 导致较长时间的 GC 暂停, 影响 Web 应用的响应时间.")]),s._v(" "),t("p",[t("strong",[s._v("G1收集器")])]),s._v(" "),t("p",[s._v("对于 G1 收集器来说, 不推荐直接设置年轻代的大小, 这一点跟 CMS 收集器不一样, 这是因为 G1 收集器会根据算法动态决定年轻代和年老代的大小. 因此对于 G1 收集器, 需要关心的是 "),t("strong",[s._v("Java 堆的总大小")]),s._v("("),t("code",[s._v("-Xmx")]),s._v("​).")]),s._v(" "),t("p",[s._v("此外 G1 还有一个较关键的参数是 "),t("code",[s._v("-XX:MaxGCPauseMillis = n")]),s._v("​, 这个参数是用来限制最大的 GC 暂停时间, 目的是尽量不影响请求处理的响应时间. G1 将根据先前收集的信息以及检测到的垃圾量, 估计它可以立即收集的最大区域数量, 从而尽量保证 GC 时间不会超出这个限制. 因此 G1 相对来说更加智能, 使用起来更加简单.")]),s._v(" "),t("h5",{attrs:{id:"内存调优实战"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内存调优实战"}},[s._v("#")]),s._v(" 内存调优实战")]),s._v(" "),t("p",[s._v("下面通过一个例子实战一下 Java 堆设置得过小, 导致频繁的 GC, 下面通过 GC 日志分析工具来观察 GC 活动并定位问题.")]),s._v(" "),t("ol",[t("li",[s._v("首先建立一个 Spring Boot 程序, 作为调优对象, 代码如下:")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@RestController")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("GcTestController")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Queue")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Greeting")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" objCache "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConcurrentLinkedDeque")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@RequestMapping")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/greeting"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Greeting")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("greeting")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Greeting")]),s._v(" greeting "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Greeting")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello World!"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("objCache"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("size")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("200000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            objCache"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("clear")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            objCache"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("greeting"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" greeting"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Data")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@AllArgsConstructor")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Greeting")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" message"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br")])]),t("p",[s._v("上面的代码就是创建了一个对象池, 当对象池中的对象数到达 200000 时才清空一次, 用来模拟年老代对象.")]),s._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[s._v("用下面的命令启动测试程序:")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("java -Xmx32m -Xss256k -verbosegc -Xlog:gc*,gc+ref=debug,gc+heap=debug,gc+age=trace:file=gc-%p-%t.log:tags,uptime,time,level:filecount=2,filesize=100m -jar target/demo-0.0.1-SNAPSHOT.jar\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("给程序设置的堆的大小为 32MB, 目的是能看到 Full GC. 除此之外, 还打开了 verbosegc 日志, 注意这里使用的版本是 Java 12, 默认的垃圾收集器是 G1.")]),s._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[s._v("使用 JMeter 压测工具向程序发送测试请求, 访问的路径是 "),t("code",[s._v("/greeting")]),s._v("​.")])]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405162238-68cyxrn.png",alt:""}})]),s._v(" "),t("ol",{attrs:{start:"4"}},[t("li",[s._v("使用 GCViewer 工具打开 GC 日志, 可以看到这样的图:")])]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405162238-xb85yys.png",alt:""}})]),s._v(" "),t("p",[s._v("解释一下这张图:")]),s._v(" "),t("ul",[t("li",[s._v("图中上部的蓝线表示已使用堆的大小, 可以看到它周期的上下震荡, 这是对象池要扩展到 200000 才会清空.")]),s._v(" "),t("li",[s._v("图底部的绿线表示年轻代 GC 活动, 从图上看到当堆的使用率上去了, 会触发频繁的 GC 活动.")]),s._v(" "),t("li",[s._v("图中的竖线表示 Full GC, 从图上看到, 伴随着 Full GC, 蓝线会下降, 这说明 Full GC 收集了年老代中的对象.")])]),s._v(" "),t("p",[s._v("基于上面的分析, 可以得出一个结论, 那就是 Java 堆的大小不够. 解释一下为什么得出这个结论:")]),s._v(" "),t("ul",[t("li",[s._v("GC 活动频繁: 年轻代 GC(绿色线)和年老代 GC(黑色线)都比较密集. 这说明内存空间不够, 也就是 Java 堆的大小不够.")]),s._v(" "),t("li",[s._v("Java 的堆中对象在 GC 之后能够被回收, 说明不是内存泄漏.")])]),s._v(" "),t("p",[s._v("通过 GCViewer 还发现累计 GC 暂停时间有 55.57 秒, 如下图所示:")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405162238-r5luoqv.png",alt:""}})]),s._v(" "),t("p",[s._v("因此的解决方案是调大 Java 堆的大小, 像下面这样:")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("java -Xmx2048m -Xss256k -verbosegc -Xlog:gc*,gc+ref=debug,gc+heap=debug,gc+age=trace:file=gc-%p-%t.log:tags,uptime,time,level:filecount=2,filesize=100m -jar target/demo-0.0.1-SNAPSHOT.jar\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("生成的新的 GC log 分析图如下:")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405162238-cum3ngs.png",alt:""}})]),s._v(" "),t("p",[s._v("可以看到, 没有发生 Full GC, 并且年轻代 GC 也没有那么频繁了, 并且累计 GC 暂停时间只有 3.05 秒.")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405162238-onegv55.png",alt:""}})]),s._v(" "),t("h4",{attrs:{id:"_35-如何监控tomcat的性能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_35-如何监控tomcat的性能"}},[s._v("#")]),s._v(" 35.如何监控Tomcat的性能?")]),s._v(" "),t("p",[s._v("本节来聊如何监控 Tomcat 的各种指标, 因为只有掌握了这些指标和信息, 才能对 Tomcat 内部发生的事情一目了然, 明白系统的瓶颈在哪里, 进而做出调优的决策.")]),s._v(" "),t("p",[s._v("首先来看看到底都需要监控 Tomcat 哪些关键指标, 接着来具体学习如何通过 JConsole 来监控它们. 如果系统没有暴露 JMX 接口, 还可以通过命令行来查看 Tomcat 的性能指标.")]),s._v(" "),t("p",[s._v("Web 应用的响应时间是关注的一个重点, 最后通过一个实战案例, 来看看 Web 应用的下游服务响应时间比较长的情况下, Tomcat 的各项指标是什么样子的.")]),s._v(" "),t("h5",{attrs:{id:"tomcat的关键指标"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tomcat的关键指标"}},[s._v("#")]),s._v(" Tomcat的关键指标")]),s._v(" "),t("p",[s._v("Tomcat 的关键指标有"),t("strong",[s._v("吞吐量, 响应时间, 错误数, 线程池, CPU 以及 JVM 内存")]),s._v(".")]),s._v(" "),t("p",[s._v("其中前三个指标是最关心的"),t("strong",[s._v("业务指标")]),s._v(", Tomcat 作为服务器, 就是要能够又快有好地处理请求, 因此吞吐量要大, 响应时间要短, 并且错误数要少.")]),s._v(" "),t("p",[s._v("而后面三个指标是跟"),t("strong",[s._v("系统资源")]),s._v("有关的, 当某个资源出现瓶颈就会影响前面的业务指标, 比如线程池中的线程数量不足会影响吞吐量和响应时间; 但是线程数太多会耗费大量 CPU, 也会影响吞吐量; 当内存不足时会触发频繁地 GC, 耗费 CPU, 最后也会反映到业务指标上来.")]),s._v(" "),t("p",[s._v("那如何监控这些指标呢? Tomcat 可以通过 "),t("strong",[s._v("JMX")]),s._v(" 将上述指标暴露出来的. JMX(Java Management Extensions, 即 Java 管理扩展)是一个为应用程序, 设备, 系统等植入监控管理功能的框架. JMX 使用管理 MBean 来监控业务资源, 这些 MBean 在 JMX MBean 服务器上注册, 代表 JVM 中运行的应用程序或服务. 每个 MBean 都有一个属性列表. JMX 客户端可以连接到 MBean Server 来读写 MBean 的属性值. 可以通过下面这张图来理解一下 JMX 的工作原理:")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405162457-wtmtkez.png",alt:""}})]),s._v(" "),t("p",[s._v("Tomcat 定义了一系列 MBean 来对外暴露系统状态, 接下来看看如何通过 JConsole 来监控这些指标.")]),s._v(" "),t("h5",{attrs:{id:"通过jconsole监控tomcat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#通过jconsole监控tomcat"}},[s._v("#")]),s._v(" 通过JConsole监控Tomcat")]),s._v(" "),t("p",[s._v("首先需要开启 JMX 的远程监听端口, 具体来说就是设置若干 JVM 参数. 可以在 Tomcat 的 bin 目录下新建一个名为 "),t("code",[s._v("setenv.sh")]),s._v("​ 的文件(或者 "),t("code",[s._v("setenv.bat")]),s._v("​, 根据操作系统类型), 然后输入下面的内容:")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('export JAVA_OPTS="${JAVA_OPTS} -Dcom.sun.management.jmxremote"export JAVA_OPTS="${JAVA_OPTS} -Dcom.sun.management.jmxremote.port=9001"export JAVA_OPTS="${JAVA_OPTS} -Djava.rmi.server.hostname=x.x.x.x"export JAVA_OPTS="${JAVA_OPTS} -Dcom.sun.management.jmxremote.ssl=false"export JAVA_OPTS="${JAVA_OPTS} -Dcom.sun.management.jmxremote.authenticate=false"\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("重启 Tomcat, 这样 JMX 的监听端口 9001 就开启了, 接下来通过 JConsole 来连接这个端口.")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("jconsole x.x.x.x:9001\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("可以看到 JConsole 的主界面:")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405162457-82gv2n0.png",alt:""}})]),s._v(" "),t("p",[s._v("前面提到的需要监控的关键指标有"),t("strong",[s._v("吞吐量, 响应时间, 错误数, 线程池, CPU 以及 JVM 内存")]),s._v(", 接下来看看怎么在 JConsole 上找到这些指标.")]),s._v(" "),t("p",[t("strong",[s._v("吞吐量, 响应时间, 错误数")])]),s._v(" "),t("p",[s._v('在 MBeans 标签页下选择 GlobalRequestProcessor, 这里有 Tomcat 请求处理的统计信息. 可以看到 Tomcat 中的各种连接器, 展开"http-nio-8080", 可以看到这个连接器上的统计信息, 其中 maxTime 表示最长的响应时间, processingTime 表示平均响应时间, requestCount 表示吞吐量, errorCount 就是错误数.')]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405162457-zx5xjbq.png",alt:""}})]),s._v(" "),t("p",[t("strong",[s._v("线程池")])]),s._v(" "),t("p",[s._v('选择"线程"标签页, 可以看到当前 Tomcat 进程中有多少线程, 如下图所示:')]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405162457-5yudkqb.png",alt:""}})]),s._v(" "),t("p",[s._v("图的左下方是线程列表, 右边是线程的运行栈, 这些都是非常有用的信息. 如果大量线程阻塞, 通过观察线程栈, 能看到线程阻塞在哪个函数, 有可能是 I/O 等待, 或者是死锁.")]),s._v(" "),t("p",[t("strong",[s._v("CPU")])]),s._v(" "),t("p",[s._v("在主界面可以找到 CPU 使用率指标, 请注意这里的 CPU 使用率指的是 Tomcat 进程占用的 CPU, 不是主机总的 CPU 使用率.")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405162457-iowmjst.png",alt:""}})]),s._v(" "),t("p",[t("strong",[s._v("JVM 内存")])]),s._v(" "),t("p",[s._v('选择"内存"标签页, 能看到 Tomcat 进程的 JVM 内存使用情况.')]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405162457-wq7qshv.png",alt:""}})]),s._v(" "),t("p",[s._v('还可以查看 JVM 各内存区域的使用情况, 大的层面分堆区和非堆区. 堆区里有分为 Eden, Survivor 和 Old. 选择 "VM Summary" 标签, 可以看到虚拟机内的详细信息.')]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405162457-meinc5r.png",alt:""}})]),s._v(" "),t("h5",{attrs:{id:"命令行查看tomcat指标"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#命令行查看tomcat指标"}},[s._v("#")]),s._v(" 命令行查看Tomcat指标")]),s._v(" "),t("p",[s._v("极端情况下如果 Web 应用占用过多 CPU 或者内存, 又或者程序中发生了死锁, 导致 Web 应用对外没有响应, 监控系统上看不到数据, 这个时候需要登陆到目标机器, 通过命令行来查看各种指标.")]),s._v(" "),t("p",[s._v("(1) 首先通过 ps 命令找到 Tomcat 进程, 拿到进程 ID.")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-ef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" tomcat\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("(2) 接着查看进程状态的大致信息, 通过 "),t("code",[s._v("cat/proc/<pid>/status")]),s._v("​ 命令:")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405162457-5rygbma.png",alt:""}})]),s._v(" "),t("p",[s._v("(3) 监控进程的 CPU 和内存资源使用情况:")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405162457-cz4qiar.png",alt:""}})]),s._v(" "),t("p",[s._v("(4) 查看 Tomcat 的网络连接, 比如 Tomcat 在 8080 端口上监听连接请求, 通过下面的命令查看连接列表:")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405162457-l4hlmeo.png",alt:""}})]),s._v(" "),t("p",[s._v('还可以分别统计处在 "已连接" 状态和 "TIME_WAIT" 状态的连接数:')]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("netstat")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-na")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" ESTAB "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("wc")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-l")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v("\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("netstat")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-na")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" TIME_WAIT "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("wc")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-l")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("43")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("(5) 通过 ifstat 来查看网络流量, 大致可以看出 Tomcat 当前的请求数和负载状况.")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405162457-77iof34.png",alt:""}})]),s._v(" "),t("h5",{attrs:{id:"实战案例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实战案例"}},[s._v("#")]),s._v(" 实战案例")]),s._v(" "),t("p",[s._v("在这个实战案例中, 会创建一个 Web 应用, 根据传入的参数 latency 来休眠相应的秒数, 目的是模拟当前的 Web 应用在访问下游服务时遇到的延迟. 然后用 JMeter 来压测这个服务, 通过 JConsole 来观察 Tomcat 的各项指标, 分析和定位问题.")]),s._v(" "),t("p",[s._v("主要的步骤有:")]),s._v(" "),t("p",[s._v("(1) 创建一个 Spring Boot 程序, 加入下面代码所示的一个 RestController:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@RestController")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("DownStreamLatency")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@RequestMapping")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/greeting/latency/{seconds}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Greeting")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("greeting")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@PathVariable")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" seconds"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("seconds "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("InterruptedException")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("printStackTrace")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Greeting")]),s._v(" greeting "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Greeting")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello World!"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" greeting"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br")])]),t("p",[s._v("上面的程序会读取 URL 传过来的 seconds 参数, 先休眠相应的秒数, 再返回请求. 这样做的目的是, 客户端压测工具能够控制服务端的延迟.")]),s._v(" "),t("p",[s._v("为了方便观察 Tomcat 的线程数跟延迟之间的关系, 还需要加大 Tomcat 的最大线程数, 可以在 "),t("code",[s._v("application.properties")]),s._v("​ 文件中加入这样一行:")]),s._v(" "),t("div",{staticClass:"language-properties line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-properties"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("server.tomcat.max-threads")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("1000")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("server.tomcat.max-threads")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("1000")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("(2) 启动 JMeter 开始压测, 这里将压测的线程数设置为 100:")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405162457-pvhfecw.png",alt:""}})]),s._v(" "),t("p",[s._v("注意, 还需要将客户端的 Timeout 设置为 1000 毫秒, 这是因为 JMeter 的测试线程在收到响应之前, "),t("strong",[s._v("不会发出下一次请求")]),s._v(", 这就意味没法按照固定的吞吐量向服务端加压. 而加了 Timeout 以后, JMeter 会有固定的吞吐量向 Tomcat 发送请求.")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405162457-3eve09q.png",alt:""}})]),s._v(" "),t("p",[s._v("(3) 开启测试, 这里分三个阶段, 第一个阶段将服务端休眠时间设为 2 秒, 然后暂停一段时间. 第二和第三阶段分别将休眠时间设置成 4 秒和 6 秒.")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405162457-li13uu9.png",alt:""}})]),s._v(" "),t("p",[s._v("(4) 最后通过 JConsole 来观察结果:")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405162457-j4uljme.png",alt:""}})]),s._v(" "),t("p",[s._v("下面从线程数, 内存和 CPU 这三个指标来分析 Tomcat 的性能问题.")]),s._v(" "),t("ul",[t("li",[s._v("首先看线程数, 在第一阶段时间之前, 线程数大概是 40, 第一阶段压测开始后, 线程数增长到 250. 为什么是 250 呢? 这是因为 JMeter 每秒会发出 100 个请求, 每一个请求休眠 2 秒, 因此 Tomcat 需要 200 个工作线程来干活; 此外 Tomcat 还有一些其他线程用来处理网络通信和后台任务, 所以总数是 250 左右. 第一阶段压测暂停后, 线程数又下降到 40, 这是因为线程池会回收空闲线程. 第二阶段测试开始后, 线程数涨到了 420, 这是因为每个请求休眠了 4 秒; 同理, 看到第三阶段测试的线程数是 620.")]),s._v(" "),t("li",[s._v("再来看 CPU, 在三个阶段的测试中, CPU 的峰值始终比较稳定, 这是因为 JMeter 控制了总体的吞吐量, 因为服务端用来处理这些请求所需要消耗的 CPU 基本也是一样的.")]),s._v(" "),t("li",[s._v("各测试阶段的内存使用量略有增加, 这是因为线程数增加了, 创建线程也需要消耗内存.")])]),s._v(" "),t("p",[s._v("从上面的测试结果可以得出一个结论: "),t("strong",[s._v("对于一个 Web 应用来说, 下游服务的延迟越大, Tomcat 所需要的线程数越多, 但是 CPU 保持稳定")]),s._v(". 所以如果碰到线程数飙升但是 CPU 没有增加的情况, 这个时候可以怀疑 Web 应用所依赖的下游服务是不是出了问题, 响应时间是否变长了.")]),s._v(" "),t("h5",{attrs:{id:"总结-17"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结-17"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),t("p",[s._v("Tomcat 的关键的性能指标主要有**吞吐量, 响应时间, 错误数, 线程池, CPU 以及 JVM 内存. **")]),s._v(" "),t("p",[s._v("在实际工作中, 需要通过观察这些指标来诊断系统遇到的性能问题, 找到性能瓶颈. 如果监控到 CPU 上升, 这时可以看看吞吐量是不是也上升了, 如果是那说明正常; 如果不是的话, 可以看看 GC 的活动, 如果 GC 活动频繁, 并且内存居高不下, 基本可以断定是内存泄漏.")]),s._v(" "),t("h4",{attrs:{id:"_36-tomcat-io和线程池的并发调优"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_36-tomcat-io和线程池的并发调优"}},[s._v("#")]),s._v(" 36.Tomcat IO和线程池的并发调优")]),s._v(" "),t("p",[s._v("Tomcat 的调优涉及 "),t("mark",[t("strong",[s._v("I/O 模型和线程池调优, JVM 内存调优以及网络优化")])]),s._v("等, 本节分析 I/O 模型和线程池调优, 由于 Web 应用程序跑在 Tomcat 的工作线程中, 因此 Web 应用对请求的处理时间也直接影响 Tomcat 整体的性能, 而 Tomcat 和 Web 应用在运行过程中所用到的资源都来自于操作系统, 因此调优需要将服务端看作是一个整体来考虑.")]),s._v(" "),t("p",[s._v("**所谓的 I/O 调优指的是选择 NIO, NIO.2 还是 APR, 而线程池调优指的是给 Tomcat 的线程池设置合适的参数, 使得 Tomcat 能够又快又好地处理请求. **")]),s._v(" "),t("h5",{attrs:{id:"i-o模型的选择"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#i-o模型的选择"}},[s._v("#")]),s._v(" I/O模型的选择")]),s._v(" "),t("p",[t("strong",[s._v("I/O 调优实际上是连接器类型的选择, 一般情况下默认都是 NIO")]),s._v(", 在绝大多数情况下都是够用的, 除非你的 Web 应用用到了 TLS 加密传输, 而且对性能要求极高, 这个时候可以考虑 APR, 因为 APR 通过 OpenSSL 来处理 TLS 握手和加 / 解密. OpenSSL 本身用 C 语言实现, 它还对 TLS 通信做了优化, 所以性能比 Java 要高.")]),s._v(" "),t("p",[s._v("什么时候考虑选择 NIO.2? 一般建议是如果 Tomcat 跑在 Windows 平台上, 并且 HTTP 请求的数据量比较大, 可以考虑 NIO.2, 这是因为 Windows 从操作系统层面实现了真正意义上的异步 I/O, 如果传输的数据量比较大, 异步 I/O 的效果就能显现出来.")]),s._v(" "),t("p",[s._v("如果 "),t("strong",[s._v("Tomcat 跑在 Linux 平台上, 建议使用 NIO")]),s._v(", 这是因为 Linux 内核没有很完善地支持异步 I/O 模型, 因此 JVM 并没有采用原生的 Linux 异步 I/O, 而是在应用层面通过 epoll 模拟了异步 I/O 模型, 只是 Java NIO 的使用者感觉不到而已. 因此可以这样理解, 在 Linux 平台上, "),t("strong",[s._v("Java NIO 和 Java NIO.2 底层都是通过 epoll 来实现的, 但是 Java NIO 更加简单高效")]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"线程池调优"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线程池调优"}},[s._v("#")]),s._v(" 线程池调优")]),s._v(" "),t("p",[t("strong",[s._v("跟 I/O 模型紧密相关的是线程池, 线程池的调优就是设置合理的线程池参数")]),s._v(". 先来看看 Tomcat 线程池中有哪些关键参数:")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405162514-3jn10hn.jpg",alt:""}})]),s._v(" "),t("p",[s._v("**这里面最核心的就是如何确定 **​"),t("mark",[t("strong",[s._v("maxThreads")])]),s._v("​ ** 的值, 如果这个参数设置小了, Tomcat 会发生线程饥饿, 并且请求的处理会在队列中排队等待, 导致响应时间变长; 如果 maxThreads 参数值过大, 同样也会有问题, 因为服务器的 CPU 的核数有限, 线程数太多会导致线程在 CPU 上来回切换, 耗费大量的切换开销. **")]),s._v(" "),t("p",[s._v("那 maxThreads 设置成多少才算是合适呢? 为了理解清楚这个问题, 先来看看什么是利特尔法则(Little’s Law).")]),s._v(" "),t("p",[t("strong",[s._v("利特尔法则")])]),s._v(" "),t("blockquote",[t("p",[s._v("系统中的请求数 = 请求的到达速率 × 每个请求处理时间")])]),s._v(" "),t("p",[s._v("其实这个公式很好理解, 举个例子: 我们去超市购物结账需要排队, 如何估算一个队列有多长呢? 队列中如果每个人都买很多东西, 那么结账的时间就越长, 队列也会越长; 同理, 短时间一下有很多人来收银台结账, 队列也会变长. 因此队列的长度等于新人加入队列的频率乘以平均每个人处理的时间.")]),s._v(" "),t("p",[s._v("**计算出了队列的长度, 那么就创建相应数量的线程来处理请求, 这样既能以最快的速度处理完所有请求, 同时又没有额外的线程资源闲置和浪费. **")]),s._v(" "),t("p",[s._v("假设一个单核服务器在接收请求:")]),s._v(" "),t("ul",[t("li",[s._v("如果每秒 10 个请求到达, 平均处理一个请求需要 1 秒, 那么服务器任何时候都有 10 个请求在处理, 即需要 10 个线程.")]),s._v(" "),t("li",[s._v("如果每秒 10 个请求到达, 平均处理一个请求需要 2 秒, 那么服务器在每个时刻都有 20 个请求在处理, 因此需要 20 个线程.")]),s._v(" "),t("li",[s._v("如果每秒 10000 个请求到达, 平均处理一个请求需要 1 秒, 那么服务器在每个时刻都有 10000 个请求在处理, 因此需要 10000 个线程.")])]),s._v(" "),t("p",[s._v("因此可以总结出一个公式:")]),s._v(" "),t("blockquote",[t("p",[s._v("线程池大小 = 每秒请求数 × 平均请求处理时间")])]),s._v(" "),t("p",[s._v("这是"),t("strong",[s._v("理想")]),s._v("的情况, 也就是说线程一直在忙着干活, 没有被阻塞在 I/O 等待上. 实际上任务在执行中, 线程不可避免会发生阻塞, 比如阻塞在 I/O 等待上, 等待数据库或者下游服务的数据返回, 虽然通过非阻塞 I/O 模型可以减少线程的等待, 但是数据在用户空间和内核空间拷贝过程中, 线程还是阻塞的. 线程一阻塞就会让出 CPU, 线程闲置下来, 就好像工作人员不可能 24 小时不间断地处理客户的请求, 解决办法就是增加工作人员的数量, 一个人去休息另一个人再顶上. "),t("strong",[s._v("对应到线程池就是增加线程数量, 因此 I/O 密集型应用需要设置更多的线程")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("线程 I/O 时间与 CPU 时间")])]),s._v(" "),t("p",[s._v("至此又得到一个线程池个数的计算公式, 假设服务器是单核的:")]),s._v(" "),t("blockquote",[t("p",[s._v("线程池大小 = (线程 I/O 阻塞时间 + 线程 CPU 时间 )/ 线程 CPU 时间")])]),s._v(" "),t("p",[s._v("其中: "),t("strong",[s._v("线程 I/O 阻塞时间 + 线程 CPU 时间 = 平均请求处理时间")])]),s._v(" "),t("p",[s._v("对比一下两个公可以发现, "),t("strong",[s._v("平均请求处理时间")]),s._v("在两个公式里都出现了, 这说明请求时间越长, 需要更多的线程是毫无疑问的.")]),s._v(" "),t("p",[s._v("不同的是第一个公式是用"),t("strong",[s._v("每秒请求数")]),s._v("来乘以请求处理时间; 而第二个公式用"),t("strong",[s._v("请求处理时间")]),s._v("来除以"),t("strong",[s._v("线程 CPU 时间")]),s._v(", 请注意 CPU 时间是小于请求处理时间的.")]),s._v(" "),t("p",[s._v("虽然这两个公式是从不同的角度来看待问题的, 但都是"),t("strong",[s._v("理想情况")]),s._v(", 都有一定的前提条件.")]),s._v(" "),t("ol",[t("li",[s._v("请求处理时间越长, 需要的线程数越多, 但前提是 CPU 核数要足够, 如果一个 CPU 来支撑 10000 TPS 并发, 创建 10000 个线程, 显然不合理, 会造成大量线程上下文切换.")]),s._v(" "),t("li",[s._v("请求处理过程中, I/O 等待时间越长, 需要的线程数越多, 前提是 CUP 时间和 I/O 时间的比率要计算的足够准确.")]),s._v(" "),t("li",[s._v("请求进来的速率越快, 需要的线程数越多, 前提是 CPU 核数也要跟上.")])]),s._v(" "),t("h5",{attrs:{id:"实际场景下如何确定线程数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实际场景下如何确定线程数"}},[s._v("#")]),s._v(" 实际场景下如何确定线程数")]),s._v(" "),t("p",[s._v("那么在实际情况下, 线程池的个数如何确定呢? "),t("mark",[t("strong",[s._v("这是一个迭代的过程, 先用上面两个公式大概算出理想的线程数, 再反复压测调整, 从而达到最优")])]),s._v(".")]),s._v(" "),t("p",[s._v("一般来说, 如果系统的 TPS 要求足够大, 用第一个公式算出来的线程数往往会比公式二算出来的要大. 建议选取这两个值中间更靠近公式二的值. 也就是"),t("strong",[s._v("先设置一个较小的线程数, 然后进行压测, 当达到系统极限时(错误数增加, 或者响应时间大幅增加), 再逐步加大线程数, 当增加到某个值, 再增加线程数也无济于事, 甚至 TPS 反而下降, 那这个值可以认为是最佳线程数")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("线程池中其他的参数, 最好就用默认值, 能不改就不改, 除非在压测的过程发现了瓶颈")]),s._v(". 如果发现了问题就需要调整, 比如 maxQueueSize, 如果大量任务来不及处理都堆积在 maxQueueSize 中, 会导致内存耗尽, 这个时候就需要给 maxQueueSize 设一个限制. 当然, 这是一个比较极端的情况了.")]),s._v(" "),t("p",[s._v("再比如 minSpareThreads 参数, 默认是 25 个线程, 如果你发现系统在闲的时候用不到 25 个线程, 就可以调小一点; 如果系统在大部分时间都比较忙, 线程池中的线程总是远远多于 25 个, 这个时候就可以把这个参数调大一点, 因为这样线程池就不需要反复地创建和销毁线程了.")]),s._v(" "),t("h4",{attrs:{id:"_37-tomcat内存溢出的原因分析及调优"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_37-tomcat内存溢出的原因分析及调优"}},[s._v("#")]),s._v(" 37.Tomcat内存溢出的原因分析及调优")]),s._v(" "),t("p",[s._v("程序员几乎都会碰到 java.lang.OutOfMemoryError 异常, JVM 在抛出 java.lang.OutOfMemoryError 时, 除了会打印出一行描述信息, 还会打印堆栈跟踪, 因此可以通过这些信息来找到导致异常的原因. 在寻找原因前, 先来看看有哪些因素会导致 OutOfMemoryError, 其中内存泄漏是导致 OutOfMemoryError 的一个比较常见的原因, 最后通过一个实战案例来定位内存泄漏.")]),s._v(" "),t("h5",{attrs:{id:"内存溢出场景及方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内存溢出场景及方案"}},[s._v("#")]),s._v(" 内存溢出场景及方案")]),s._v(" "),t("blockquote",[t("p",[s._v("java.lang.OutOfMemoryError: Java heap space")])]),s._v(" "),t("p",[s._v("JVM 无法在堆中分配对象时, 会抛出这个异常, 导致这个异常的原因可能有三种:")]),s._v(" "),t("p",[s._v("(1) 内存泄漏. Java 应用程序一直持有 Java 对象的引用, 导致对象无法被 GC 回收, 比如对象池和内存池中的对象无法被 GC 回收.")]),s._v(" "),t("p",[s._v("(2) 配置问题. 有可能是通过 JVM 参数指定的堆大小(或者未指定的默认大小), 对于应用程序来说是不够的. 解决办法是通过 JVM 参数加大堆的大小.")]),s._v(" "),t("p",[s._v('(3) finalize() 方法的过度使用. 如果想在 Java 类实例被 GC 之前执行一些逻辑, 比如清理对象持有的资源, 可以在 Java 类中定义 finalize() 方法, 这样 JVM GC 不会立即回收这些对象实例, 而是将对象实例添加到一个叫 "java.lang.ref.Finalizer.ReferenceQueue" 的队列中, 执行对象的 finalize() 方法, 之后才会回收这些对象. Finalizer 线程会和主线程竞争 CPU 资源, 但由于优先级低, 所以处理速度跟不上主线程创建对象的速度, 因此 ReferenceQueue 队列中的对象就越来越多, 最终会抛出 OutOfMemoryError. 解决办法是尽量不要给 Java 类定义 finalize() 方法.')]),s._v(" "),t("blockquote",[t("p",[s._v("java.lang.OutOfMemoryError: GC overhead limit exceeded")])]),s._v(" "),t("p",[s._v("出现这种 OutOfMemoryError 的原因是, 垃圾收集器一直在运行, 但是 GC 效率很低, 比如 Java 进程花费超过 98％ 的 CPU 时间来进行一次 GC, 但是"),t("strong",[s._v("回收的内存少于 2％ 的 JVM 堆, 并且连续 5 次 GC 都是这种情况")]),s._v(", 就会抛出 OutOfMemoryError.")]),s._v(" "),t("p",[s._v("解决办法是查看 GC 日志或者生成 Heap Dump, 确认一下是不是内存泄漏, 如果不是内存泄漏可以考虑增加 Java 堆的大小. 当然还可以通过参数配置来告诉 JVM 无论如何也不要抛出这个异常, 方法是配置 "),t("code",[s._v("-XX:-UseGCOverheadLimit")]),s._v("​, 但是不推荐这么做, 因为这只是延迟了 OutOfMemoryError 的出现.")]),s._v(" "),t("blockquote",[t("p",[s._v("java.lang.OutOfMemoryError: Requested array size exceeds VM limit")])]),s._v(" "),t("p",[s._v('从错误消息也能猜到, 抛出这种异常的原因是"'),t("strong",[s._v("请求的数组大小超过 JVM 限制")]),s._v('", 应用程序尝试分配一个超大的数组. 比如应用程序尝试分配 512MB 的数组, 但最大堆大小为 256MB, 则将抛出 OutOfMemoryError, 并且请求的数组大小超过 VM 限制.')]),s._v(" "),t("p",[s._v("通常这也是一个配置问题(JVM 堆太小), 或者是应用程序的一个 Bug, 比如程序错误地计算了数组的大小, 导致尝试创建一个大小为 1GB 的数组.")]),s._v(" "),t("blockquote",[t("p",[s._v("java.lang.OutOfMemoryError: MetaSpace")])]),s._v(" "),t("p",[t("strong",[s._v("如果 JVM 的元空间用尽")]),s._v(", 则会抛出这个异常. 由于 JVM 元空间的内存在本地内存中分配, 但是它的大小受参数 MaxMetaSpaceSize 的限制. 当元空间大小超过 MaxMetaSpaceSize 时, JVM 将抛出带有 MetaSpace 字样的 OutOfMemoryError. 解决办法是加大 MaxMetaSpaceSize 参数的值.")]),s._v(" "),t("blockquote",[t("p",[s._v("java.lang.OutOfMemoryError: Request size bytes for reason. Out of swap space")])]),s._v(" "),t("p",[t("strong",[s._v("当本地堆内存分配失败或者本地内存快要耗尽时")]),s._v(', Java HotSpot VM 代码会抛出这个异常, VM 会触发 "致命错误处理机制", 它会生成 "致命错误" 日志文件, 其中包含崩溃时线程, 进程和操作系统的有用信息. 如果碰到此类型的 OutOfMemoryError, 需要根据 JVM 抛出的错误信息来进行诊断; 或者使用操作系统提供的 DTrace 工具来跟踪系统调用, 看看是什么样的程序代码在不断地分配本地内存.')]),s._v(" "),t("blockquote",[t("p",[s._v("java.lang.OutOfMemoryError: Unable to create native threads")])]),s._v(" "),t("p",[s._v("抛出这个异常的过程大概是这样的:")]),s._v(" "),t("p",[s._v("(1) Java 程序向 JVM 请求创建一个新的 Java 线程.")]),s._v(" "),t("p",[s._v("(2) JVM 本地代码(Native Code)代理该请求, 通过调用操作系统 API 去创建一个操作系统级别的线程 Native Thread.")]),s._v(" "),t("p",[s._v("(3) 操作系统尝试创建一个新的 Native Thread, 需要同时分配一些内存给该线程, 每一个 Native Thread 都有一个线程栈, 线程栈的大小由 JVM 参数 "),t("code",[s._v("-Xss")]),s._v("​ 决定.")]),s._v(" "),t("p",[s._v("(4) 由于各种原因, 操作系统创建新的线程可能会失败, 下面会详细谈到.")]),s._v(" "),t("p",[s._v('(5) JVM 抛出 "java.lang.OutOfMemoryError: Unable to create new native thread" 错误.')]),s._v(" "),t("p",[s._v("因此关键在于第四步线程创建失败, JVM 就会抛出 OutOfMemoryError, 那具体有"),t("strong",[s._v("哪些因素会导致线程创建失败")]),s._v("呢?")]),s._v(" "),t("p",[s._v("(1) "),t("strong",[s._v("内存大小限制")]),s._v(": 前面提到, Java 创建一个线程需要消耗一定的栈空间, 并通过 "),t("code",[s._v("-Xss")]),s._v("​ 参数指定. 注意栈空间如果过小, 可能会导致 StackOverflowError, 尤其是在递归调用的情况下; 但是栈空间过大会占用过多内存, 而对于一个 32 位 Java 应用来说, 用户进程空间是 4GB, 内核占用 1GB, 那么用户空间就剩下 3GB, 因此它能创建的线程数大致可以通过这个公式算出来:")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("Max memory(3GB) = [-Xmx] + [-XX:MaxMetaSpaceSize] + number_of_threads * [-Xss]\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("不过对于 64 位的应用, 由于虚拟进程空间近乎无限大, 因此不会因为线程栈过大而耗尽虚拟地址空间. 注意, 64 位的 Java 进程能分配的最大内存数仍然受物理内存大小的限制.")]),s._v(" "),t("p",[s._v("(2) "),t("strong",[s._v("ulimit 限制")]),s._v(", 在 Linux 下执行 "),t("code",[s._v("ulimit -a")]),s._v("​, 可以看到 ulimit 对各种资源的限制.")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("ulimit")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-a")]),s._v("\ncore "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v(" size          "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("blocks, -c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" unlimited\ndata seg size           "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("kbytes, -d"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" unlimited\nscheduling priority             "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("-e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v(" size               "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("blocks, -f"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" unlimited\npending signals                 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("-i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1028666")]),s._v("\nmax locked memory       "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("kbytes, -l"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v("\nmax memory size         "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("kbytes, -m"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" unlimited\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("open")]),s._v(" files                      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("-n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1048576")]),s._v("\npipe size            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("512")]),s._v(" bytes, -p"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v("\nPOSIX message queues     "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("bytes, -q"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("819200")]),s._v("\nreal-time priority              "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("-r"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\nstack size              "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("kbytes, -s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8192")]),s._v("         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 线程栈大小")]),s._v("\ncpu "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("time")]),s._v("               "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("seconds, -t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" unlimited\nmax user processes              "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("-u"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" unlimited    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 一个进程能创建的最大线程数")]),s._v("\nvirtual memory          "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("kbytes, -v"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" unlimited\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v(" locks                      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("-x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" unlimited\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br")])]),t("p",[s._v('其中的 "max user processes" 就是一个进程能创建的最大线程数, 可以修改这个参数:')]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ulimit -u 65535")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("(3) "),t("strong",[s._v("参数 "),t("strong",[s._v("​")]),s._v("​"),t("code",[s._v("sys.kernel.threads-max")]),s._v("​")]),s._v("​ "),t("strong",[s._v("限制")]),s._v(". 这个参数限制操作系统全局的线程数, 通过下面的命令可以查看它的值.")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" /proc/sys/kernel/threads-max\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1030516")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("这表明当前系统能创建的总的线程是 1030516. 当然调整这个参数, 具体办法是:")]),s._v(" "),t("p",[s._v("在 "),t("code",[s._v("/etc/sysctl.conf")]),s._v("​ 配置文件中, 加入 "),t("code",[s._v("sys.kernel.threads-max = 999999")]),s._v("​.")]),s._v(" "),t("p",[s._v("(4) "),t("strong",[s._v("参数 "),t("strong",[s._v("​")]),s._v("​"),t("code",[s._v("sys.kernel.pid_max")]),s._v("​")]),s._v("​ "),t("strong",[s._v("限制")]),s._v(", 这个参数表示系统全局的 PID 号数值的限制, 每一个线程都有 ID, ID 的值超过这个数, 线程就会创建失败. 跟 "),t("code",[s._v("sys.kernel.threads-max")]),s._v("​ 参数一样, 也可以将 "),t("code",[s._v("sys.kernel.pid_max")]),s._v("​ 调大, 方法是在 "),t("code",[s._v("/etc/sysctl.conf")]),s._v("​ 配置文件中, 加入 "),t("code",[s._v("sys.kernel.pid_max = 999999")]),s._v("​.")]),s._v(" "),t("p",[s._v("对于线程创建失败的 OutOfMemoryError, 除了调整各种参数, 还需要从程序本身找找原因, 看看是否真的需要这么多线程, 有可能是程序的 Bug 导致创建过多的线程.")]),s._v(" "),t("h5",{attrs:{id:"内存泄漏定位实战"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内存泄漏定位实战"}},[s._v("#")]),s._v(" 内存泄漏定位实战")]),s._v(" "),t("p",[s._v("先创建一个 Web 应用, 不断地 new 新对象放到一个 List 中, 来模拟 Web 应用中的内存泄漏. 然后通过各种工具来观察 GC 的行为, 最后通过生成 Heap Dump 来找到泄漏点.")]),s._v(" "),t("p",[s._v("内存泄漏模拟程序比较简单, 创建一个 Spring Boot 应用, 定义如下所示的类:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token import"}},[t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("org"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("springframework"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("scheduling"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("annotation"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Scheduled")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token import"}},[t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("org"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("springframework"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("stereotype"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Component")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token import"}},[t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("java"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("util"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LinkedList")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token import"}},[t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("java"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("util"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Component")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MemLeaker")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" objs "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LinkedList")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Scheduled")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("fixedRate "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("run")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("50000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            objs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br")])]),t("p",[s._v("这个程序做的事情就是每隔 1 秒向一个 List 中添加 50000 个对象. 接下来运行并通过工具观察它的 GC 行为:")]),s._v(" "),t("p",[s._v("(1) 运行程序并打开 verbosegc, 将 GC 的日志输出到 gc.log 文件中.")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("java -verbose:gc -Xloggc:gc.log -XX:+PrintGCDetails -jar mem-0.0.1-SNAPSHOT.jar\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("(2) 使用"),t("code",[s._v("jstat")]),s._v("​命令观察 GC 的过程:")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("jstat -gc 94223 2000 1000\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("94223 是程序的进程 ID, 2000 表示每隔 2 秒执行一次, 1000 表示持续执行 1000 次. 下面是命令的输出:")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405162534-2mas2x2.png",alt:""}})]),s._v(" "),t("p",[s._v("其中每一列的含义是:")]),s._v(" "),t("ul",[t("li",[s._v("S0C: 第一个 Survivor 区总的大小;")]),s._v(" "),t("li",[s._v("S1C: 第二个 Survivor 区总的大小;")]),s._v(" "),t("li",[s._v("S0U: 第一个 Survivor 区已使用内存的大小;")]),s._v(" "),t("li",[s._v("S1U: 第二个 Survivor 区已使用内存的大小.")])]),s._v(" "),t("p",[s._v("后面的列中 E 代表 Eden, O 代表 Old, M 代表 Metadata; YGC 表示 Minor GC 的总时间, YGCT 表示 Minor GC 的次数; FGC 表示 Full GC.")]),s._v(" "),t("p",[s._v("通过这个工具能大概看到各个内存区域的大小, 已经 GC 的次数和所花的时间. verbosegc 参数对程序的影响比较小, 因此很适合在生产环境现场使用.")]),s._v(" "),t("p",[s._v("(3) 通过 GCViewer 工具查看 GC 日志, 用 GCViewer 打开第一步产生的 gc.log, 会看到这样的图:")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405162534-3n59227.png",alt:""}})]),s._v(" "),t("p",[s._v("图中红色的线表示年老代占用的内存, 可以看到它一直在增加, 而黑色的竖线表示一次 Full GC. 可以看到后期 JVM 在频繁地 Full GC, 但是"),t("strong",[s._v("年老代的内存并没有降下来, 这是典型的内存泄漏的特征")]),s._v(".")]),s._v(" "),t("p",[s._v("除了内存泄漏, 还可以通过 GCViewer 来观察 Minor GC 和 Full GC 的频次, 已及每次的内存回收量.")]),s._v(" "),t("p",[s._v("(4) 为了找到内存泄漏点, 通过 jmap 工具生成 Heap Dump:")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("jmap -dump:live,format=b,file=94223.bin 94223\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("(5) 用 Eclipse Memory Analyzer 打开 Dump 文件, 通过内存泄漏分析, 得到这样一个分析报告:")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405162534-2iypr18.png",alt:""}})]),s._v(" "),t("p",[s._v("从报告中可以看到, JVM 内存中有一个长度为 4000 万的 List, 至此也就找到了泄漏点.")]),s._v(" "),t("h4",{attrs:{id:"_38-tomcat拒绝连接原因分析及网络优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_38-tomcat拒绝连接原因分析及网络优化"}},[s._v("#")]),s._v(" 38.Tomcat拒绝连接原因分析及网络优化")]),s._v(" "),t("p",[s._v("本节来看看网络通信中可能会碰到的各种错误. 网络通信方面的错误和异常也是在实际工作中经常碰到的, 需要理解异常背后的原理, 才能更快更精准地定位问题, 从而找到解决办法.")]),s._v(" "),t("p",[s._v("下面会先讲讲 Java Socket 网络编程常见的异常有哪些, 然后通过一个实验来重现其中的 Connection reset 异常, 并且通过配置 Tomcat 的参数来解决这个问题.")]),s._v(" "),t("h5",{attrs:{id:"常见异常"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见异常"}},[s._v("#")]),s._v(" 常见异常")]),s._v(" "),t("blockquote",[t("p",[s._v("java.net.SocketTimeoutException")])]),s._v(" "),t("p",[t("strong",[s._v("指超时错误")]),s._v(". 超时分为"),t("strong",[s._v("连接超时")]),s._v("和"),t("strong",[s._v("读取超时")]),s._v(", 连接超时是指在调用 Socket.connect 方法的时候超时, 而读取超时是调用 Socket.read 方法时超时. 连接超时往往是由于网络不稳定造成的, 但是读取超时不一定是网络延迟造成的, 很有可能是下游服务的响应时间过长.")]),s._v(" "),t("blockquote",[t("p",[s._v("java.net.BindException: Address already in use: JVM_Bind")])]),s._v(" "),t("p",[t("strong",[s._v("指端口被占用")]),s._v(". 当服务器端调用 new ServerSocket(port) 或者 Socket.bind 函数时, 如果端口已经被占用, 就会抛出这个异常. 可以用 "),t("code",[s._v("netstat –an")]),s._v("​ 命令来查看端口被谁占用了, 换一个没有被占用的端口就能解决.")]),s._v(" "),t("blockquote",[t("p",[s._v("java.net.ConnectException: Connection refused: connect")])]),s._v(" "),t("p",[t("strong",[s._v("指连接被拒绝")]),s._v(". 当客户端调用 new Socket(ip, port) 或者 Socket.connect 函数时, 可能会抛出这个异常. 原因是指定 IP 地址的机器没有找到; 或者是机器存在, 但这个机器上没有开启指定的监听端口.")]),s._v(" "),t("p",[s._v("解决办法是从客户端机器 ping 一下服务端 IP, 假如 ping 不通, 可以看看 IP 是不是写错了; 假如能 ping 通, 需要确认服务端的服务是不是崩溃了.")]),s._v(" "),t("blockquote",[t("p",[s._v("java.net.SocketException: Socket is closed")])]),s._v(" "),t("p",[t("strong",[s._v("指连接已关闭")]),s._v(". 出现这个异常的原因是"),t("strong",[s._v("通信的一方主动关闭了 Socket 连接(调用了 Socket 的 close 方法), 接着又对 Socket 连接进行了读写操作")]),s._v(', 这时操作系统会报 "Socket 连接已关闭" 的错误.')]),s._v(" "),t("blockquote",[t("p",[s._v("java.net.SocketException: Connection reset/Connect reset by peer: Socket write error")])]),s._v(" "),t("p",[t("strong",[s._v("指连接被重置")]),s._v(". 这里有两种情况, 分别对应两种错误, "),t("strong",[s._v("通信的一方已经将 Socket 关闭, 可能是主动关闭或者是因为异常退出")]),s._v(", (1) 这时如果通信的另一方还在"),t("strong",[s._v("写数据")]),s._v(", 就会触发这个异常(Connect reset by peer); (2) 如果对方还在尝试从 TCP 连接中"),t("strong",[s._v("读数据")]),s._v(", 则会抛出 Connection reset 异常.")]),s._v(" "),t("p",[s._v("为了避免这些异常发生, 在编写网络通信程序时要确保:")]),s._v(" "),t("ul",[t("li",[s._v("**程序退出前要主动关闭所有的网络连接. **")]),s._v(" "),t("li",[s._v("**检测通信的另一方的关闭连接操作, 当发现另一方关闭连接后自己也要关闭该连接. **")])]),s._v(" "),t("blockquote",[t("p",[s._v("java.net.SocketException: Broken pipe")])]),s._v(" "),t("p",[t("strong",[s._v("指通信管道已坏")]),s._v('. 发生这个异常的场景是, 通信的一方在收到 "Connect reset by peer: Socket write error" 后, 如果'),t("strong",[s._v("再继续写数据")]),s._v("则会抛出 Broken pipe 异常, 解决方法同上.")]),s._v(" "),t("blockquote",[t("p",[s._v("java.net.SocketException: Too many open files")])]),s._v(" "),t("p",[t("strong",[s._v("指进程打开文件句柄数超过限制")]),s._v(". 当并发用户数比较大时, 服务器可能会报这个异常. 这是因为每创建一个 Socket 连接就需要一个文件句柄, 此外服务端程序在处理请求时可能也需要打开一些文件.")]),s._v(" "),t("p",[s._v("可以通过 "),t("code",[s._v("lsof -p pid")]),s._v("​ 命令查看进程打开了哪些文件, 是不是有资源泄露, 也就是说进程打开的这些文件本应该被关闭, 但由于程序的 Bug 而没有被关闭.")]),s._v(" "),t("p",[s._v("如果没有资源泄露, 可以通过设置增加最大文件句柄数. 具体方法是通过 "),t("code",[s._v("ulimit -a")]),s._v("​ 来查看系统目前资源限制, 通过 "),t("code",[s._v("ulimit -n 10240")]),s._v("​ 修改最大文件数.")]),s._v(" "),t("h5",{attrs:{id:"tomcat网络参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tomcat网络参数"}},[s._v("#")]),s._v(" Tomcat网络参数")]),s._v(" "),t("p",[s._v("接下来看看 Tomcat 两个比较关键的参数: "),t("mark",[t("strong",[s._v("maxConnections 和 acceptCount")])]),s._v(". 在解释这个参数之前, 先简单回顾下 TCP 连接的建立过程: 客户端向服务端发送 SYN 包, 服务端回复 SYN＋ACK, 同时将这个处于 SYN_RECV 状态的连接保存到"),t("strong",[s._v("半连接队列")]),s._v(". 客户端返回 ACK 包完成三次握手, 服务端将 ESTABLISHED 状态的连接移入"),t("strong",[s._v("accept 队列")]),s._v(", 等待应用程序(Tomcat)调用 accept 方法将连接取走. 这里涉及两个队列:")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("半连接队列")]),s._v(": 保存 SYN_RECV 状态的连接. 队列长度由 "),t("code",[s._v("net.ipv4.tcp_max_syn_backlog")]),s._v("​ 设置.")]),s._v(" "),t("li",[t("strong",[s._v("accept 队列")]),s._v(": 保存 ESTABLISHED 状态的连接. 队列长度为 "),t("code",[s._v("min(net.core.somaxconn, backlog)")]),s._v("​. 其中 backlog 是创建 ServerSocket 时指定的参数, 最终会传递给 listen 方法:")])]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("listen")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" sockfd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" backlog"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("如果设置的 backlog 大于 "),t("code",[s._v("net.core.somaxconn")]),s._v("​, accept 队列的长度将被设置为 "),t("code",[s._v("net.core.somaxconn")]),s._v("​, 而这个 backlog 参数就是 Tomcat 中的 "),t("strong",[s._v("acceptCount ** 参数, 默认值是 100, 但请注意 "),t("code",[s._v("net.core.somaxconn")]),s._v("​ 的默认值是 128. 可以想象在高并发情况下当 Tomcat 来不及处理新的连接时, 这些")]),s._v("连接都被堆积在 accept 队列**中, 而 **acceptCount ** 参数可以控制 accept 队列的长度, 超过这个长度时, 内核会向客户端发送 RST, 这样客户端会触发上文提到的  "),t("strong",[s._v('"Connection reset" 异常')]),s._v(".")]),s._v(" "),t("p",[s._v("而 Tomcat 中的 "),t("strong",[s._v("maxConnections ** 是")]),s._v("指 Tomcat 在任意时刻接收和处理的最大连接数**. 当 Tomcat 接收的连接数达到 maxConnections 时, Acceptor 线程不会再从 accept 队列中取走连接, 这时 accept 队列中的连接会越积越多.")]),s._v(" "),t("p",[s._v("maxConnections 的默认值与连接器类型有关: NIO 的默认值是 10000, APR 默认是 8192.")]),s._v(" "),t("p",[s._v("**所以可以发现 Tomcat 的最大并发连接数等于 **​"),t("mark",[t("strong",[s._v("maxConnections + acceptCount")])]),s._v("​ "),t("strong",[s._v(". 如果 acceptCount 设置得过大, 请求等待时间会比较长; 如果 acceptCount 设置过小, 高并发情况下, 客户端会立即触发 Connection reset 异常.")])]),s._v(" "),t("h5",{attrs:{id:"tomcat网络调优实战"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tomcat网络调优实战"}},[s._v("#")]),s._v(" Tomcat网络调优实战")]),s._v(" "),t("p",[s._v('接下来通过一个直观的例子来加深对上面两个参数的理解. 先重现流量高峰时 accept 队列堆积的情况, 这样会导致客户端触发 "Connection reset" 异常, 然后通过调整参数解决这个问题. 主要步骤有:')]),s._v(" "),t("p",[s._v("(1) 通过 JMeter 创建一个测试计划, 一个线程组, 一个请求, 如下图所示.")]),s._v(" "),t("p",[t("strong",[s._v("测试计划")]),s._v(":")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405162552-ek8x6vq.png",alt:""}})]),s._v(" "),t("p",[t("strong",[s._v("线程组")]),s._v("(线程数这里设置为 1000, 模拟大流量):")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405162552-xjskmao.png",alt:""}})]),s._v(" "),t("p",[t("strong",[s._v("请求")]),s._v("(请求的路径是 Tomcat 自带的例子程序):")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405162553-b88ed3i.png",alt:""}})]),s._v(" "),t("p",[s._v("(2) 启动 Tomcat.")]),s._v(" "),t("p",[s._v('(3) 开启 JMeter 测试, 在 View Results Tree 中会看到大量失败的请求, 请求的响应里有 "Connection reset" 异常, 也就是前面提到的, 当 accept 队列溢出时, 服务端的内核发送了 RST 给客户端, 使得客户端抛出了这个异常.')]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405162553-581oils.png",alt:""}})]),s._v(" "),t("p",[s._v("(4) 修改内核参数, 在 "),t("code",[s._v("/etc/sysctl.conf")]),s._v("​ 中增加一行 "),t("code",[s._v("net.core.somaxconn=2048")]),s._v("​, 然后执行命令 "),t("code",[s._v("sysctl -p")]),s._v("​.")]),s._v(" "),t("p",[s._v("(5) 修改 Tomcat 参数 acceptCount 为 2048, 重启 Tomcat.")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405162553-eebcvda.png",alt:""}})]),s._v(" "),t("p",[s._v("(6) 再次启动 JMeter 测试, 这一次所有的请求会成功, 也看不到异常了. 可以通过下面的命令看到系统中 ESTABLISHED 的连接数增大了, 这是因为加大了 accept 队列的长度.")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405162553-z8bo9vz.png",alt:""}})]),s._v(" "),t("h5",{attrs:{id:"总结-18"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结-18"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),t("p",[s._v("Tomcat 中两个比较重要的参数: acceptCount 和 maxConnections. acceptCount 用来控制内核的 TCP 连接队列长度, maxConnections 用于控制 Tomcat 层面的最大连接数. 在实战环节, 通过调整 acceptCount 和相关的内核参数 "),t("code",[s._v("somaxconn")]),s._v("​, 增加了系统的并发度.")]),s._v(" "),t("h4",{attrs:{id:"_39-tomcat进程占用cpu过高怎么办"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_39-tomcat进程占用cpu过高怎么办"}},[s._v("#")]),s._v(" 39.Tomcat进程占用CPU过高怎么办?")]),s._v(" "),t("p",[s._v("CPU 资源经常会成为系统性能的一个瓶颈, 这其中的原因是多方面的, 可能是内存泄露导致频繁 GC, 进而引起 CPU 使用率过高; 又可能是代码中的 Bug 创建了大量的线程, 导致 CPU 上下文切换开销.")]),s._v(" "),t("p",[s._v("本节就来聊聊 Tomcat 进程的 CPU 使用率过高怎么办, 以及怎样一步一步找到问题的根因.")]),s._v(" "),t("h5",{attrs:{id:"java进程cpu使用率高-的解决思路是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java进程cpu使用率高-的解决思路是什么"}},[s._v("#")]),s._v(' "Java进程CPU使用率高"的解决思路是什么?')]),s._v(" "),t("p",[s._v("通常所说的 CPU 使用率过高, 这里面其实隐含着一个用来比较高与低的"),t("strong",[s._v("基准值")]),s._v(", 比如 JVM 在峰值负载下的平均 CPU 利用率为 40％, 如果 CPU 使用率飙到 80% 就可以被认为是不正常的.")]),s._v(" "),t("p",[s._v("典型的 JVM 进程包含多个 Java 线程, 其中一些在等待工作, 另一些则正在执行任务. 在单个 Java 程序的情况下, 线程数可以非常低, 而对于处理大量并发事务的互联网后台来说, 线程数可能会比较高.")]),s._v(" "),t("p",[s._v("对于 CPU 的问题, "),t("mark",[t("strong",[s._v("最重要的是要找到是哪些线程在消耗 CPU, 通过线程栈定位到问题代码; 如果没有找到个别线程的 CPU 使用率特别高, 就可以考虑是不是线程上下文切换导致了 CPU 使用率过高")])]),s._v(". 下面通过一个实例来学习 CPU 问题定位的过程.")]),s._v(" "),t("h5",{attrs:{id:"定位高cpu使用率的线程和代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定位高cpu使用率的线程和代码"}},[s._v("#")]),s._v(" 定位高CPU使用率的线程和代码")]),s._v(" "),t("p",[s._v("(1) 写一个模拟程序来模拟 CPU 使用率过高的问题, 这个程序会在线程池中创建 4096 个线程. 代码如下:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@SpringBootApplication")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@EnableScheduling")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("DemoApplication")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 创建线程池, 其中有 4096 个线程. ")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ExecutorService")]),s._v(" executor "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Executors")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("newFixedThreadPool")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4096")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 全局变量, 访问它需要加锁. ")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" count"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   \n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 以固定的速率向线程池中加入任务")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Scheduled")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("fixedRate "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("lockContention")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IntStream")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("range")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("forEach")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" executor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("submit")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("::")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("incrementSync")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   \n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 具体任务, 就是将 count 数加一")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("incrementSync")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      count "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("count "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   \n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SpringApplication")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("run")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("DemoApplication")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br")])]),t("p",[s._v("(2) 在 Linux 环境下启动程序:")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("java -Xss256k -jar demo-0.0.1-SNAPSHOT.jar\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("请注意, 这里将线程栈大小指定为 256KB. 对于测试程序来说, 操作系统的默认值 8192KB 过大, 因为需要创建 4096 个线程.")]),s._v(" "),t("p",[s._v("(3) 使用 top 命令, 可以看到 Java 进程的 CPU 使用率达到了 262.3%, 注意到进程 ID 是 4361.")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405162626-jxhv490.png",alt:""}})]),s._v(" "),t("p",[s._v("(4) 接着用更精细化的 top 命令查看这个 Java 进程中各线程使用 CPU 的情况:")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# top -H -p 4361")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("img",{attrs:{src:"/img/image-20230405162626-56eqgtb.png",alt:""}})]),s._v(" "),t("p",[s._v('从图上可以看到, 有个叫 "scheduling-1" 的线程占用了较多的 CPU, 达到了 42.5%. 因此下一步要找出这个线程在做什么事情.')]),s._v(" "),t("p",[s._v("(5) 为了找出线程在做什么事情, 需要用 jstack 命令生成线程快照, 具体方法是:")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("jstack 4361\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("jstack 的输出比较大, 可以将输出写入文件:")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("jstack 4361 > 4361.log\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v('然后打开 4361.log, 定位到第 4 步中找到的名为 "scheduling-1" 的线程, 发现它的线程栈如下:')]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405162626-g49iue1.png",alt:""}})]),s._v(" "),t("p",[s._v("从线程栈中看到了 "),t("code",[s._v("AbstractExecutorService.submit")]),s._v("​ 这个函数调用, 说明它是 Spring Boot 启动的"),t("strong",[s._v("周期性")]),s._v("任务线程, 向线程池中提交任务, 这个线程消耗了大量 CPU.")]),s._v(" "),t("h5",{attrs:{id:"进一步分析上下文切换开销"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进一步分析上下文切换开销"}},[s._v("#")]),s._v(" 进一步分析上下文切换开销")]),s._v(" "),t("p",[s._v('一般来说, 通过上面的过程就能定位到大量消耗 CPU 的线程以及有问题的代码, 比如死循环. 但是对于这个实例的问题, 可以发现这样一个情况: Java 进程占用的 CPU 是 262.3%,  而 "scheduling-1" 线程只占用了 42.5% 的 CPU, 那还有将近 220% 的 CPU 被谁占用了呢?')]),s._v(" "),t("p",[s._v("前面在第 4 步用 "),t("code",[s._v("top -H -p 4361")]),s._v('​ 命令看到的线程列表中还有许多名为 "pool-1-thread-x" 的线程, 它们单个的 CPU 使用率不高, 但是似乎'),t("strong",[s._v("数量比较多")]),s._v(". 其实这些就是线程池中干活的线程. 那剩下的 220% 的 CPU 是不是被这些线程消耗了呢?")]),s._v(" "),t("p",[s._v('要弄清楚这个问题, 还需要看 jstack 的输出结果, 主要是看这些线程池中的线程是不是真的在干活, 还是在"休息"呢?')]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405162626-it84tut.png",alt:""}})]),s._v(" "),t("p",[s._v('通过上面的图可以发现这些 "pool-1-thread-x" 线程'),t("strong",[s._v("基本都处于 WAITING 的状态")]),s._v(", 那什么是 WAITING 状态呢? 或者说 Java 线程都有哪些状态呢? 可以通过下面的图来理解一下:")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405162626-r87lrn9.png",alt:""}})]),s._v(" "),t("p",[s._v('从图上看到"Blocking"和"Waiting"是两个不同的状态, 要注意它们的区别:')]),s._v(" "),t("ul",[t("li",[s._v("Blocking 指的是一个线程因为等待临界区的锁(Lock 或者 synchronized 关键字)而被阻塞的状态, 需要注意处于这个状态的线程**还没有拿到锁. **")]),s._v(" "),t("li",[s._v("Waiting 指的是一个线程"),t("strong",[s._v("拿到了锁")]),s._v(", 但是需要等待其他线程执行某些操作. 比如调用了 Object.wait(), Thread.join() 或者 LockSupport.park() 方法时, 进入 Waiting 状态. "),t("strong",[s._v("前提是这个线程已经拿到锁了")]),s._v(", 并且在进入 Waiting 状态前, 操作系统层面会自动释放锁, 当等待条件满足, 外部调用了 Object.notify() 或者 LockSupport.unpark() 方法, 线程会重新竞争锁, 成功获得锁后才能进入到 Runnable 状态继续执行.")])]),s._v(" "),t("p",[s._v('回到 "pool-1-thread-x" 线程, 这些线程都处在 "Waiting" 状态, 从线程栈可以看到, 这些线程 "等待" 在 getTask() 方法调用上, '),t("strong",[s._v("线程尝试从线程池的队列中取任务")]),s._v(', 但是队列为空, 所以通过 LockSupport.park() 调用进到了 "Waiting" 状态. 那 "pool-1-thread-x" 线程有多少个呢? 通过下面这个命令来统计一下, 结果是 4096, 正好跟线程池中的线程数相等.')]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# grep -o 'pool-1-thread' 4361.log | wc -l")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4096")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("回到前面, 那剩下的 220% 的 CPU 到底被谁消耗了呢? 分析到这里, 应该怀疑 "),t("strong",[s._v("CPU 的上下文切换开销了")]),s._v(", 可以看到 Java 进程中的线程数比较多. 下面通过 vmstat 命令来查看一下操作系统层面的"),t("strong",[s._v("线程上下文切换活动")]),s._v(":")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405162626-l8yho7i.png",alt:""}})]),s._v(" "),t("p",[s._v("其中 "),t("strong",[s._v("cs 那一栏表示线程上下文切换次数, in 表示 CPU 中断次数")]),s._v(", 可以发现这两个数字非常高, 基本证实了猜测, 线程上下文切切换消耗了大量 CPU. 那么问题来了, 具体是哪个进程导致的呢?")]),s._v(" "),t("p",[s._v("停止 Spring Boot 测试程序, 再次运行 vmstat 命令, 会看到 in 和 cs 都大幅下降了, 这样就证实了引起线程上下文切换开销的 Java 进程正是 "),t("strong",[s._v("4361")]),s._v(".")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405162626-6ki4o8h.png",alt:""}})]),s._v(" "),t("h5",{attrs:{id:"总结-19"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结-19"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),t("p",[s._v("当遇到 CPU 过高的问题时, 首先要定位是哪个进程的导致的, 之后可以通过 "),t("code",[s._v("top -H -p pid")]),s._v("​ 命令定位到具体的线程. 其次还要通 jstack 查看线程的状态, 看看线程的个数或者线程的状态, 如果线程数过多, 可以怀疑是线程上下文切换的开销, 可以通过 vmstat 和 pidstat 这两个工具进行确认.")]),s._v(" "),t("h4",{attrs:{id:"_41-热点答疑-4-tomcat和jetty有哪些不同"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_41-热点答疑-4-tomcat和jetty有哪些不同"}},[s._v("#")]),s._v(" 41.热点答疑(4):Tomcat和Jetty有哪些不同?")]),s._v(" "),t("p",[s._v("这里总结一下 Tomcat 和 Jetty 的区别, 并通过一个实战案例来比较一下 Tomcat 和 Jetty 在实际场景下的表现, 帮你在做选型时有更深的理解.")]),s._v(" "),t("p",[s._v("先来概括一下 Tomcat 和 Jetty 两者最大的区别. 大体来说, Tomcat 的核心竞争力是"),t("strong",[s._v("成熟稳定")]),s._v(", 因为它经过了多年的市场考验, 应用也相当广泛, 对于比较复杂的企业级应用支持得更加全面. 也因为如此, Tomcat 在整体结构上比 Jetty 更加复杂, 功能扩展方面可能不如 Jetty 那么方便.")]),s._v(" "),t("p",[s._v("而 Jetty 比较年轻, 设计上更加"),t("strong",[s._v("简洁小巧")]),s._v(", 配置也比较简单, 功能也支持方便地扩展和裁剪, 比如可以把 Jetty 的 SessionHandler 去掉, 以节省内存资源, 因此 Jetty 还可以运行在小型的嵌入式设备中, 比如手机和机顶盒. 当然, 也可以自己开发一个 Handler, 加入 Handler 链中用来扩展 Jetty 的功能. 值得一提的是, Hadoop 和 Solr 都嵌入了 Jetty 作为 Web 服务器.")]),s._v(" "),t("p",[s._v("从设计的角度来看, Tomcat 的架构基于一种"),t("strong",[s._v("多级容器的模式")]),s._v(", 这些容器组件具有父子关系, 所有组件依附于这个骨架, 而且这个骨架是不变的, 在扩展 Tomcat 的功能时也需要基于这个骨架, 因此 Tomcat 在设计上相对来说比较复杂. 当然 Tomcat 也提供了较好的扩展机制, 比如可以自定义一个 Valve, 但相对来说学习成本还是比较大的. 而 Jetty 采用 Handler "),t("strong",[s._v("责任链模式")]),s._v(". 由于 Handler 之间的关系比较松散, Jetty 提供 HandlerCollection 可以帮助开发者方便地构建一个 Handler 链, 同时也提供了 ScopeHandler 帮助开发者控制 Handler 链的访问顺序.")]),s._v(" "),t("p",[s._v("说了一堆理论, 你可能觉得还是有点抽象, 接下来通过一个实例, 来压测一下 Tomcat 和 Jetty, 看看在同等流量压力下, Tomcat 和 Jetty 分别在吞吐量, 延迟和错误率的表现如何.")]),s._v(" "),t("p",[s._v("测试的计划是这样的, 这里用 IO 与并发调优小节的 Spring Boot 应用程序. 首先用 Spring Boot 默认的 Tomcat 作为内嵌式 Web 容器, 经过一轮压测后, 将内嵌式的 Web 容器换成 Jetty, 再做一轮测试, 然后比较结果.")]),s._v(" "),t("p",[s._v("这里会在每个请求的处理过程中休眠 1 秒, 适当地模拟 Web 应用的 I/O 等待时间. JMeter 客户端的线程数为 100, 压测持续 10 分钟. 在 JMeter 中创建一个 Summary Report, 在这个页面上, 可以看到各种统计指标.")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405164102-i23825n.png",alt:""}})]),s._v(" "),t("p",[s._v("第一步, 压测 Tomcat. 启动 Spring Boot 程序和 JMeter, 持续 10 分钟, 以下是测试结果, 结果分为两部分:")]),s._v(" "),t("p",[t("strong",[s._v("吞吐量, 延迟和错误率")])]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405164102-sbluqm6.png",alt:""}})]),s._v(" "),t("p",[t("strong",[s._v("资源使用情况")])]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405164102-okyeyfz.png",alt:""}})]),s._v(" "),t("p",[s._v("第二步, 将 Spring Boot 的 Web 容器替换成 Jetty, 具体步骤是在 pom.xml 文件中的 spring-boot-starter-web 依赖修改下面这样:")]),s._v(" "),t("div",{staticClass:"language-xml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("dependency")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("groupId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("org.springframework.boot"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("groupId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("artifactId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("spring-boot-starter-web"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("artifactId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("exclusions")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("exclusion")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("groupId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("org.springframework.boot"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("groupId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("artifactId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("spring-boot-starter-tomcat"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("artifactId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("exclusion")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("exclusions")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("dependency")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("dependency")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("groupId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("org.springframework.boot"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("groupId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("artifactId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("spring-boot-starter-jetty"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("artifactId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("dependency")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[s._v("编译打包, 启动 Spring Boot, 再启动 JMeter 压测, 以下是测试结果:")]),s._v(" "),t("p",[t("strong",[s._v("吞吐量, 延迟和错误率")])]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405164102-jp640x6.png",alt:""}})]),s._v(" "),t("p",[t("strong",[s._v("资源使用情况")])]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405164102-pnofrdr.png",alt:""}})]),s._v(" "),t("p",[s._v("下面通过一个表格来对比 Tomcat 和 Jetty:")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/image-20230405164102-6beqtux.jpg",alt:""}})]),s._v(" "),t("p",[s._v("从表格中的数据可以看到:")]),s._v(" "),t("ul",[t("li",[s._v("**Jetty 在吞吐量和响应速度方面稍有优势, 并且 Jetty 消耗的线程和内存资源明显比 Tomcat 要少, 这也恰好说明了 Jetty 在设计上更加小巧和轻量级的特点. **")]),s._v(" "),t("li",[s._v("**但是 Jetty 有 2.45% 的错误率, 而 Tomcat 没有任何错误, 并且经过多次测试都是这个结果. 因此可以认为 Tomcat 比 Jetty 更加成熟和稳定. **")])]),s._v(" "),t("p",[s._v("当然由于测试场景的限制, 以上数据并不能完全反映 Tomcat 和 Jetty 的真实能力. 但是它可以在做实际选型的时候提供一些参考: "),t("strong",[s._v("如果系统的目标是资源消耗尽量少, 并且对稳定性要求没有那么高, 可以选择轻量级的 Jetty; 如果系统是比较关键的企业级应用, 建议还是选择 Tomcat 比较稳妥")]),s._v(".")]),s._v(" "),t("p",[s._v("最后用一句话总结 Tomcat 和 Jetty 的区别: **Tomcat 好比是一位工作多年比较成熟的工程师, 轻易不会出错, 不会掉链子, 但是他有自己的想法, 不会轻易做出改变. 而 Jetty 更像是一位年轻的后起之秀, 脑子转得很快, 可塑性也很强, 但有时候也会犯一点小错误. **")]),s._v(" "),t("p",[s._v("‍")]),s._v(" "),t("p",[s._v("‍")]),s._v(" "),t("p",[s._v("‍")]),s._v(" "),t("p",[s._v("‍")]),s._v(" "),t("p",[s._v("‍")]),s._v(" "),t("p",[s._v("‍")]),s._v(" "),t("p",[s._v("‍")]),s._v(" "),t("p",[s._v("‍")]),s._v(" "),t("p",[s._v("‍")]),s._v(" "),t("p",[s._v("‍")]),s._v(" "),t("p",[s._v("‍")]),s._v(" "),t("p",[s._v("‍")]),s._v(" "),t("p",[s._v("‍")])])}),[],!1,null,null,null);t.default=e.exports}}]);