(window.webpackJsonp=window.webpackJsonp||[]).push([[127],{439:function(t,s,a){"use strict";a.r(s);var n=a(7),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"_5-spring-aop基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-spring-aop基础"}},[t._v("#")]),t._v(" 5.Spring AOP基础")]),t._v(" "),s("h4",{attrs:{id:"基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[t._v("#")]),t._v(" 基础")]),t._v(" "),s("h5",{attrs:{id:"_1-基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-基础"}},[t._v("#")]),t._v(" 1.基础")]),t._v(" "),s("p",[t._v("AOP(Aspect-Oriented Programming 面向切面编程)能够将那些与业务无关, "),s("strong",[t._v("却被业务模块共同调用的逻辑封装起来")]),t._v(", 便于"),s("strong",[t._v("减少系统的重复代码")]),t._v(", "),s("strong",[t._v("降低模块间的耦合度")]),t._v(", 并"),s("strong",[t._v("有利于未来的可拓展性和可维护性")]),t._v(". AOP 是 OOP 的延续, 是函数式编程的一种衍生范型.")]),t._v(" "),s("p",[t._v("核心思想: "),s("strong",[t._v("约定编程")]),t._v(".")]),t._v(" "),s("p",[t._v("AOP 主要用来"),s("strong",[t._v("解决")]),t._v("在不改变原有业务逻辑的情况下, 增强横切逻辑代码, 根本上解决耦合, 避免横切逻辑代码重复的问题.")]),t._v(" "),s("p",[t._v("应用场景: "),s("strong",[t._v("数据库事务, 日志功能, 权限管理, 记录运行时间, 应用统计功能")]),t._v("等.")]),t._v(" "),s("p",[t._v("AOP 就是典型的"),s("strong",[t._v("代理模式")]),t._v("的体现.")]),t._v(" "),s("h5",{attrs:{id:"_2-aop实例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-aop实例"}},[t._v("#")]),t._v(" 2.AOP实例")]),t._v(" "),s("p",[t._v("有两个接口, 分别进行加减法计算, 为避免计算出现问题, 需要对每次接口的入参进行日志记录, 第一版实现如下.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230711213644-bo0a0i6.png",alt:"image"}})]),t._v(" "),s("p",[t._v('该方案有个问题, 就是后续每次新增一个接口, 就需要拷贝一次 "记录入参" 的代码. 这里可以提出一个公共方法, 每个接口都调用这个方法, 于是第二版实现如下.')]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230711213714-0lwx2uj.png",alt:"image"}})]),t._v(" "),s("p",[t._v("这个方案中每个接口都得显式调用这个方法. 这里可以通过"),s("strong",[t._v("某种策略识别出所有要加入日志记录的接口")]),t._v(", 然后在接口调用时, 将日志记录的工作注入到接口调用的地方(切点), 这就是 AOP 的核心思想. 第三版的实现如下.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/image-20230711213738-j2txb5p.png",alt:"image"}})]),t._v(" "),s("p",[t._v("这样接口只需要关心具体业务, 而不需要关注该业务之外打日志的逻辑. "),s("strong",[t._v("这就是面向切面编程的思想.")])]),t._v(" "),s("h5",{attrs:{id:"_3-基本术语"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-基本术语"}},[t._v("#")]),t._v(" 3.基本术语")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("连接点")]),t._v("(Joinpoint): 在程序执行过程中某个特定的点, 比如"),s("strong",[t._v("某方法调用的时候或处理异常")]),t._v("的时候. 在 AOP 中, 一个连接点总是表示一个"),s("strong",[t._v("方法的执行")]),t._v(".")]),t._v(" "),s("li",[s("strong",[t._v("通知/增强")]),t._v("(Advice): Advice 定义了将会"),s("strong",[t._v("织入到连接点方法的具体增强逻辑")]),t._v(". 包括  "),s("strong",[t._v('"around", "before" 和 "after"')]),t._v("  等不同类型的增强. 包括 Spring 在内的许多 AOP 框架都是以拦截器做通知模型, 并维护一个以连接点为中心的拦截器链.")]),t._v(" "),s("li",[s("strong",[t._v("切点")]),t._v("(Pointcut): 匹配连接点的"),s("strong",[t._v("表达式语句")]),t._v(", 它定义了相应 Advice 将要发生的地方. 可以用于指定一组连接点, 代表要在这一组 Joinpoint 中织入增强逻辑. 通知和一个切入点表达式关联, 并在满足这个切入点的连接点上运行.")]),t._v(" "),s("li",[s("strong",[t._v("切面")]),t._v("(Aspect): 切面是对系统中的横切关注点逻辑进行模块化封装的 AOP "),s("strong",[t._v("概念实体")]),t._v(". 类似于 Java 中的类"),s("strong",[t._v("声明")]),t._v(", 在 Aspect 中可以包含多个切点以及相关的增强定义.")]),t._v(" "),s("li",[s("strong",[t._v("织入")]),t._v("(Weaving): 织入指的是将 Advice 连接到 Pointcut 指定的 Joinpoint 处的"),s("strong",[t._v("过程")]),t._v(", 也称为: 将 Advice 织入到 Pointcut 指定的 Joinpoint 处. 织入实现把"),s("strong",[t._v("切面连接到其它的应用程序类型或对象上")]),t._v(", 并创建一个被通知的对象. 织入可以在编译时(如 AspectJ), 类加载时和运行时(如 Spring AOP)完成.")]),t._v(" "),s("li",[s("strong",[t._v("目标对象")]),t._v("(Target Object): 符合 Pointcut 所指定的条件, 被织入 Advice 的对象. 被一个或者多个切面所通知的对象, 也被称做被通知(advised)对象. 既然 Spring AOP 是通过运行时代理实现的, 这个对象永远是一个被代理对象.")]),t._v(" "),s("li",[s("strong",[t._v("AOP 代理")]),t._v("(AOP Proxy): AOP 框架创建的对象, 用来实现切面契约(例如通知方法执行等). 在 Spring 中, AOP 代理采用 JDK 动态代理或 CGLIB 代理.")])]),t._v(" "),s("p",[t._v("对于上面的例子来说:")]),t._v(" "),s("ul",[s("li",[t._v('Jointpoint: "加法接口" 或 "减法接口" 每次被调用时所处的'),s("strong",[t._v("程序执行点")]),t._v("都是一个连接点 Jointpoint.")]),t._v(" "),s("li",[t._v('Pointcut: 就是用于指定 "加法接口" 和 "减法接口" 的一个 "表达式", 当然这个表达式还可以指定很多其他的接口, 表达式常见的格式为: "execution(* com.nano.service '),s("em",[t._v("...")]),t._v(' (..))".')]),t._v(" "),s("li",[t._v("Aspect: 是定义 Advice, Pointcut 的地方.")]),t._v(" "),s("li",[t._v('Advice: 就是要在 "加法接口" 和 "减法接口" 织入的日志记录'),s("strong",[t._v("增强逻辑")]),t._v(".")]),t._v(" "),s("li",[t._v('Weaving: 就是指将日记记录逻辑加到 "加法接口" 和 "减法接口" 的'),s("strong",[t._v("过程")]),t._v(".")]),t._v(" "),s("li",[t._v('Target: 就是定义了 "加法接口" 和 "减法接口" 的'),s("strong",[t._v("对象实例")]),t._v(".")])]),t._v(" "),s("h4",{attrs:{id:"应用实例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用实例"}},[t._v("#")]),t._v(" 应用实例")]),t._v(" "),s("h5",{attrs:{id:"_1-controller异常监控"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-controller异常监控"}},[t._v("#")]),t._v(" 1.Controller异常监控")]),t._v(" "),s("p",[t._v("对 Controller 层进行"),s("strong",[t._v("异常监控报警")]),t._v("的 Interceptor 如下.")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Aspect")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Component")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ControllerAlertInterceptor")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Logger")]),t._v(" logger "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LoggerFactory")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getLogger")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ControllerAlertInterceptor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Pointcut")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"execution(* com.nano.controller..*Controller.*(..))"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("controllerMonitor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * 记录Controller层异常.\n     * 收集尽量多的信息, 方便定位问题. 同时发送报警监控\n     *\n     * @param jp 切点\n     * @param ex 异常类型\n     * @throws Throwable 异常对象\n     */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@AfterThrowing")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("throwing "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ex"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" pointcut "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"controllerMonitor()"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alertControllerHandleException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("JoinPoint")]),t._v(" jp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Throwable")]),t._v(" ex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Throwable")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" shotSig "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" jp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getSignature")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toShortString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1.分析/过滤异常信息")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2.发送报警信息")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br")])]),s("h5",{attrs:{id:"_2-多个切面"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-多个切面"}},[t._v("#")]),t._v(" 2.多个切面")]),t._v(" "),s("p",[s("strong",[t._v("多个切面可以监控同一个方法")]),t._v(", 当调用方法时, 使用  "),s("strong",[t._v("@Order")]),t._v(" 注解或实现 Order 接口可以定义不同切面的"),s("strong",[t._v("执行顺序")]),t._v(".")]),t._v(" "),s("h4",{attrs:{id:"aop实现方式与原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aop实现方式与原理"}},[t._v("#")]),t._v(" AOP实现方式与原理")]),t._v(" "),s("h5",{attrs:{id:"_1-spring-aop和aspectj-aop"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-spring-aop和aspectj-aop"}},[t._v("#")]),t._v(" 1.Spring AOP和AspectJ AOP")]),t._v(" "),s("p",[t._v("AOP 有 Spring 自带的 Spring AOP 以及集成的 AspectJ AOP 实现.")]),t._v(" "),s("p",[s("mark",[s("strong",[t._v("Spring AOP 属于运行时增强, 而 AspectJ 是编译时增强. Spring AOP 基于代理(Proxying)实现, 而 AspectJ 则是基于字节码操作实现")])]),t._v(".")]),t._v(" "),s("p",[t._v("Spring AOP 是纯 Java 实现, 在运行期对目标对象进行代理, 织入增强代码. AspectJ 是第三方技术, Spring 已经整合 AspectJ, 提供对 AspectJ 注解的支持. AspectJ 应该算的上是 Java 生态系统中最"),s("strong",[t._v("完整")]),t._v("的 AOP 框架, 开发 AOP 程序更加容易, 是企业主流用法.")]),t._v(" "),s("p",[t._v("如果项目中切面比较少, 那么两者性能差异不大. 但是当切面"),s("strong",[t._v("很多时")]),t._v(", 最好选择 "),s("strong",[t._v("AspectJ")]),t._v(", 它比 Spring AOP "),s("strong",[t._v("快很多")]),t._v(".")]),t._v(" "),s("h5",{attrs:{id:"_2-aop实现原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-aop实现原理"}},[t._v("#")]),t._v(" 2.AOP实现原理")]),t._v(" "),s("p",[s("strong",[t._v("AOP 是基于动态代理实现的")]),t._v(", 如果要代理的对象"),s("strong",[t._v("实现了特定接口, 那么会使用 JDK 动态代理创建代理对象")]),t._v(". 要代理的对象"),s("strong",[t._v("没有实现接口, 则会使用 CGLIB 生成一个被代理对象的子类对象来作为代理对象")]),t._v(", 当然实现接口的对象也可以配置使用 CGLIB 代理.")]),t._v(" "),s("h6",{attrs:{id:"_1-jdk动态代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-jdk动态代理"}},[t._v("#")]),t._v(" (1)JDK动态代理")]),t._v(" "),s("p",[t._v("JDK 动态代理可以在"),s("strong",[t._v("运行时动态生成字节码")]),t._v(". JDKProxy 返回的动态代理类是目标类所"),s("strong",[t._v("实现接口")]),t._v("的另一个实现版本, 它实现了对目标类的代理. 注意: 必须要"),s("strong",[t._v("有接口")]),t._v("才能进行代理, 代理后对象必须"),s("strong",[t._v("转换为接口类型")]),t._v(".")]),t._v(" "),s("p",[t._v("参考: JDK动态代理")]),t._v(" "),s("h6",{attrs:{id:"_2-cglib动态代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-cglib动态代理"}},[t._v("#")]),t._v(" (2)CGLIB动态代理")]),t._v(" "),s("p",[t._v("CGLIB 代理返回的动态代理类是目标代理类的一个"),s("strong",[t._v("子类")]),t._v(". CGLIB 继承被代理的类后, "),s("strong",[t._v("覆写方法并织入通知")]),t._v(", 动态生成字节码并运行. 注意被代理的类"),s("strong",[t._v("不能是 final 的")]),t._v(", 因为不能被继承而无法生成子类.")]),t._v(" "),s("p",[t._v("参考: CGLIB动态代理.")]),t._v(" "),s("p",[t._v("‍")]),t._v(" "),s("p",[t._v("‍")]),t._v(" "),s("p",[t._v("‍")])])}),[],!1,null,null,null);s.default=r.exports}}]);