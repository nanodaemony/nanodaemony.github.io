(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{416:function(s,t,_){"use strict";_.r(t);var v=_(4),a=Object(v.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"_2-进程管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-进程管理"}},[s._v("#")]),s._v(" 2.进程管理")]),s._v(" "),t("h4",{attrs:{id:"进程与线程🌟"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进程与线程🌟"}},[s._v("#")]),s._v(" 进程与线程🌟")]),s._v(" "),t("h5",{attrs:{id:"_1-进程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-进程"}},[s._v("#")]),s._v(" 1.进程")]),s._v(" "),t("p",[s._v("进程是"),t("strong",[s._v("资源分配")]),s._v("的基本单位. 下图显示了 4 个程序创建了 4 个进程, 它们可以并发地执行.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/1563375046921.png",alt:""}})]),s._v(" "),t("h5",{attrs:{id:"_2-线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-线程"}},[s._v("#")]),s._v(" 2.线程")]),s._v(" "),t("p",[s._v("线程是**==独立调度=="),t("strong",[s._v("的基本单位. 一个进程中可以有多个线程, 它们")]),s._v("共享**进程资源. 如 QQ 和浏览器是两个进程, 浏览器进程里面有很多线程, 例如 HTTP 请求线程, 事件响应线程, 渲染线程等等, 线程的并发执行使得在浏览器中点击一个新链接从而发起 HTTP 请求时, 浏览器还可以响应用户的其它事件.")]),s._v(" "),t("p",[s._v("线程可以分为"),t("strong",[s._v("用户级线程和内核线程")]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"_3-进程与线程区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-进程与线程区别"}},[s._v("#")]),s._v(" 3.进程与线程区别")]),s._v(" "),t("h6",{attrs:{id:"_1-资源与调度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-资源与调度"}},[s._v("#")]),s._v(" (1)资源与调度")]),s._v(" "),t("p",[t("strong",[s._v("进程是")]),s._v("​**==资源分配=="),t("strong",[s._v("​")]),s._v("的基本单位**, 但是线程"),t("strong",[s._v("不拥有")]),s._v("资源, 线程可以访问隶属进程的资源.")]),s._v(" "),t("p",[t("strong",[s._v("线程是")]),s._v("​**==独立调度=="),t("strong",[s._v("​")]),s._v("的基本单位**, 在"),t("strong",[s._v("同一进程")]),s._v("中, 线程的切换"),t("strong",[s._v("不会引起进程切换")]),s._v(", 从一个进程中的线程切换到另一个进程中的线程时, 会引起进程切换.")]),s._v(" "),t("p",[t("strong",[s._v("进程有自己独立的地址空间")]),s._v(", 每启动一个进程, 系统都会为其分配地址空间, 建立数据表来维护代码段, 堆栈段和数据段; "),t("strong",[s._v("线程没有独立的地址空间")]),s._v(", 它使用相同的地址空间共享数据.")]),s._v(" "),t("h6",{attrs:{id:"_2-系统开销"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-系统开销"}},[s._v("#")]),s._v(" (2)系统开销")]),s._v(" "),t("p",[t("strong",[s._v("进程在创建, 撤销, 切换时的开销远大于线程.")])]),s._v(" "),t("p",[s._v("由于创建或撤销进程时, 系统都要为之分配或回收资源, 如内存空间, I/O 等, 其开销"),t("strong",[s._v("远大于")]),s._v("创建或撤销线程时的开销. 类似地, 在进行进程切换时, 涉及当前执行进程 CPU 环境的保存及新调度进程 CPU 环境的设置, 而"),t("strong",[s._v("线程切换")]),s._v("时只需保存和设置少量"),t("strong",[s._v("寄存器")]),s._v("内容, "),t("strong",[s._v("开销很小")]),s._v(".")]),s._v(" "),t("h6",{attrs:{id:"_3-通信方面"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-通信方面"}},[s._v("#")]),s._v(" (3)通信方面")]),s._v(" "),t("p",[s._v("线程间可以通过"),t("strong",[s._v("直接读写同一进程")]),s._v("中的"),t("strong",[s._v("数据")]),s._v("进行通信, 但是"),t("strong",[s._v("进程通信需要通过一定的 IPC")]),s._v("(Inter-Process Communication, 进程间通信)方法.")]),s._v(" "),t("h6",{attrs:{id:"_4-其他"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-其他"}},[s._v("#")]),s._v(" (4)其他")]),s._v(" "),t("p",[s._v("每个"),t("strong",[s._v("线程")]),s._v("都有一个"),t("strong",[s._v("程序计数器")]),s._v("(记录要执行的下一条指令), 一组寄存器(保存当前线程的工作变量), 堆栈(记录执行历史).")]),s._v(" "),t("h5",{attrs:{id:"_4-协程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-协程"}},[s._v("#")]),s._v(" 4.协程")]),s._v(" "),t("p",[s._v("协程(Coroutines) "),t("strong",[s._v("比线程更加轻量")]),s._v(", 正如一个进程可以拥有多个线程一样, 一个线程可以拥有多个协程. 协程不是进程也不是线程, 而是一个特殊的函数, 这个函数可以在某个地方"),t("strong",[s._v("挂起")]),s._v(", 并且可以重新在挂起处外继续运行. 协程与进程, 线程相比并不是一个维度的概念.")]),s._v(" "),t("p",[s._v("协程不是被操作系统内核所管理的, 而是"),t("strong",[s._v("完全由程序控制")]),s._v(", 也就是在"),t("strong",[s._v("用户态")]),s._v("执行. 这样带来的好处是"),t("strong",[s._v("性能大幅度的提升")]),s._v(", 因为不会像线程切换那样消耗资源.")]),s._v(" "),t("p",[t("strong",[s._v("协程上下文切换")]),s._v(": 协程的切换者是用户(应用程序), 切换时机由应用程序来决定. 协程的切换内容是硬件上下文, 切换内存保存在用户自己的变量(用户栈或堆)中. 协程的切换过程"),t("strong",[s._v("只有用户态")]),s._v(", 即没有陷入内核态, 因此切换效率高.")]),s._v(" "),t("h5",{attrs:{id:"_5-linux中的进程与线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-linux中的进程与线程"}},[s._v("#")]),s._v(" 5.Linux中的进程与线程")]),s._v(" "),t("p",[s._v("Linux 中线程和进程"),t("strong",[s._v("基本没有区别")]),s._v(", 因为 Linux 内核并没有把线程和进程区别对待.")]),s._v(" "),t("p",[s._v("系统调用 "),t("strong",[s._v("fork()")]),s._v(" 可以新建一个"),t("strong",[s._v("子进程")]),s._v(", 函数 "),t("strong",[s._v("pthread()")]),s._v(" 可以"),t("strong",[s._v("新建一个线程")]),s._v(". 但无论线程还是进程, 都是用 "),t("strong",[s._v("task_struct 数据结构")]),s._v("表示, "),t("strong",[s._v("唯一的区别就是共享的数据区域不同")]),s._v(". 线程看起来跟进程没有区别, 只是"),t("strong",[s._v("线程的某些数据区域和其父进程是共享的, 而子进程是拷贝副本, 而不是共享")]),s._v(". 比如说 "),t("strong",[s._v("mm 结构和 files 结构")]),s._v("在线程中都是"),t("strong",[s._v("共享")]),s._v("的.")]),s._v(" "),t("p",[t("strong",[s._v("进程与子进程")]),s._v(":")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220528140804113.png",alt:"",title:"父进程与子进程的关系"}})]),s._v(" "),t("p",[t("strong",[s._v("进程与子线程")]),s._v(":")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220528140840663.png",alt:"",title:"进程与子线程"}})]),s._v(" "),t("p",[s._v("由于共享数据的存在, 所以"),t("strong",[s._v("多线程")]),s._v("程序要利用"),t("strong",[s._v("锁")]),s._v("机制, 避免多个线程同时往"),t("strong",[s._v("同一区域写入数据")]),s._v(", 否则可能造成数据不一致.")]),s._v(" "),t("p",[t("strong",[s._v("注意")]),s._v(": 只有 Linux 系统将线程看做共享数据的进程, 不对其做特殊看待, 其他的很多操作系统是对线程和进程区别对待的, 线程有其特有的数据结构.")]),s._v(" "),t("p",[s._v("对于新建进程时"),t("strong",[s._v("内存区域拷贝")]),s._v("的问题, Linux 采用了 "),t("strong",[s._v("copy-on-write 的策略优化")]),s._v(", 也就是并不真正复制父进程的内存空间, 而是等到"),t("strong",[s._v("需要写操作时才去复制")]),s._v(". "),t("strong",[s._v("所以 Linux 中新建进程和新建线程都是很迅速的")]),s._v(".")]),s._v(" "),t("h4",{attrs:{id:"进程基础🌟"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进程基础🌟"}},[s._v("#")]),s._v(" 进程基础🌟")]),s._v(" "),t("p",[s._v("编译好的"),t("strong",[s._v("可执行文件")]),s._v("只是一个"),t("strong",[s._v("文件")]),s._v("而不是进程, "),t("strong",[s._v("可执行文件必须要载入内存")]),s._v(", 包装成一个进程才能真正跑起来.")]),s._v(" "),t("p",[s._v("当一个"),t("strong",[s._v("可执行文件被加载到内存时")]),s._v(", 这个程序就成为进程. 进程包含内容: "),t("strong",[s._v("程序代码")]),s._v("(文本段), "),t("strong",[s._v("程序计数器")]),s._v(", 进程堆栈(临时数据如函数参数, 返回参数与局部变量等), "),t("strong",[s._v("数据段")]),s._v("(全局变量等), 还可能包含"),t("strong",[s._v("堆")]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"_1-进程控制块-进程描述符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-进程控制块-进程描述符"}},[s._v("#")]),s._v(" 1.进程控制块(进程描述符)")]),s._v(" "),t("h6",{attrs:{id:"_1-概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述"}},[s._v("#")]),s._v(" (1)概述")]),s._v(" "),t("p",[t("strong",[s._v("进程需要依靠操作系统创建, 每个进程都有它的固有属性, 如进程号(PID), 进程状态, 打开的文件等等.")])]),s._v(" "),t("p",[t("strong",[s._v("操作系统使用进程控制块表示每个进程")]),s._v(". "),t("strong",[s._v("进程控制块(也叫进程描述符)")]),s._v(" (Process Control Block, "),t("strong",[s._v("PCB")]),s._v(") 描述进程的"),t("strong",[s._v("基本信息和运行状态")]),s._v(", 所谓创建进程和撤销进程, 都是指对 PCB 的操作. 下图是 PCB 的结构:")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220528140935464.png",alt:"",title:"PCB结构"}})]),s._v(" "),t("p",[s._v("它包含进程相关的信息:")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("进程状态")]),s._v(": 包含新的, 就绪, 运行, 等待, 停止等.")]),s._v(" "),t("li",[t("strong",[s._v("程序计数器")]),s._v(": 表示进程将要执行的"),t("strong",[s._v("下一个指令")]),s._v("的地址.")]),s._v(" "),t("li",[t("strong",[s._v("CPU 寄存器")]),s._v(": 中断时记录寄存器的值, 这些状态信息与程序计数器需要一起保存, 以便进程"),t("strong",[s._v("恢复")]),s._v("后能够正确执行.")]),s._v(" "),t("li",[t("strong",[s._v("CPU 调度信息")]),s._v(": 包含进程优先级, 调度队列的指针等.")]),s._v(" "),t("li",[t("strong",[s._v("内存管理信息")]),s._v(": 根据操作系统使用的内存系统, 这类信息可以包括基地址和界限寄存器的值, 页表或段表等.")]),s._v(" "),t("li",[t("strong",[s._v("记账信息")]),s._v(": 包括 CPU 使用时间, 作业或者进程数量等统计信息.")]),s._v(" "),t("li",[t("strong",[s._v("IO 状态信息")]),s._v(": 包含分配给进程的 "),t("strong",[s._v("IO 设备列表, 打开文件列表")]),s._v("等.")])]),s._v(" "),t("p",[s._v("在支持多线程的系统中, "),t("strong",[s._v("PCB 被扩展到包括每个线程的信息")]),s._v(".")]),s._v(" "),t("h6",{attrs:{id:"_2-linux进程表示"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-linux进程表示"}},[s._v("#")]),s._v(" (2)Linux进程表示")]),s._v(" "),t("p",[s._v("在 Linux 中, 线程, 进程使用的是相同的核心数据结构. Linux 中使用一个 "),t("strong",[s._v("task_struct")]),s._v(" 结构来表示进程控制块, 包含了该进程的信息.")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("task_struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("volatile")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" state"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 进程状态!")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" flags"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 与管理有关的状态信息")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" prio"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" static_prio"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" normal_prio"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 优先级, 静态优先级")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("list_head")]),s._v(" tasks"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 进程链表")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("list_head")]),s._v(" ptrace_children"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("list_head")]),s._v(" ptrace_list"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("mm_struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("mm"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("active_mm"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 指向进程存储空间的指针")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("pid_t")]),s._v(" pid"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("                         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 进程的pid")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("pid_t")]),s._v(" tgid"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("task_struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("real_parent"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 真父进程指针")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("task_struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("parent"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 父进程指针")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("list_head")]),s._v(" children"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\t        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 子进程链表")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("list_head")]),s._v(" sibling"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\t        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 兄弟进程链表")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("task_struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("group_leader"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// threadgroup leader")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("timespec")]),s._v(" start_time"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \t\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// monotonic time")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("timespec")]),s._v(" real_start_time"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// boot based time")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("thread_struct")]),s._v(" thread"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" rt_priority"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("          "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 实时优先级")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("fs_struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("fs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("               "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 进程所在文件目录")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("files_struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("files"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 进程打开文件指针!!!")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("dentry")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("proc_dentry"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// proc文件的dentry")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("backing_dev_info")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("backing_dev_info"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("signal_struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("signal"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 信号")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("sighand_struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("sighand"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//...")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br")])]),t("p",[t("strong",[s._v("task_struct")]),s._v(" 就是 Linux 内核对于一个进程的描述, 也称为 "),t("strong",[s._v("进程描述符")]),s._v(".")]),s._v(" "),t("p",[s._v("比较有意思的是 "),t("strong",[s._v("mm 指针和 files 指针")]),s._v(". "),t("strong",[s._v("mm 指针")]),s._v("指向的是进程的"),t("strong",[s._v("虚拟内存")]),s._v(", 也就是"),t("strong",[s._v("载入资源和可执行文件")]),s._v("的地方; "),t("strong",[s._v("files 指针")]),s._v("指向一个"),t("strong",[s._v("数组")]),s._v(", 该数组装着"),t("strong",[s._v("该进程打开的所有文件的指针")]),s._v(".")]),s._v(" "),t("p",[s._v("在 Linux 内核中, 所有"),t("strong",[s._v("活动进程")]),s._v("通过 "),t("strong",[s._v("task_struct 的双向链表")]),s._v("表示. 内核采用"),t("strong",[s._v("一个指针 current 指向当前正在执行的进程")]),s._v(", 通过这个指针即可修改进程的状态.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20200915133041895.png",alt:"",title:"task_struct双向链表"}})]),s._v(" "),t("p",[s._v("2.文件描述符")]),s._v(" "),t("p",[s._v("task_struct 中的 "),t("strong",[s._v("files")]),s._v(" 是一个"),t("strong",[s._v("文件指针数组")]),s._v(', "'),t("strong",[s._v("文件描述符")]),s._v('" 就是'),t("strong",[s._v("指这个文件指针数组的索引")]),s._v(".")]),s._v(" "),t("p",[s._v("每个进程被"),t("strong",[s._v("创建")]),s._v("时, "),t("strong",[s._v("files 指针数组的前三位被填入默认值, 分别指向标准输入流, 标准输出流, 标准错误流")]),s._v(". 一般来说一个进程会"),t("strong",[s._v("从 files[0] 读取输入")]),s._v(", 将"),t("strong",[s._v("输出写入 files[1]")]),s._v(", 将"),t("strong",[s._v("错误信息写入 files[2]")]),s._v(".")]),s._v(" "),t("p",[s._v("文件描述符默认情况下 0 是输入, 1 是输出, 2 是错误. 见下图.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220528143635251.png",alt:"",title:"默认文件描述符"}})]),s._v(" "),t("p",[s._v("Linux 中"),t("strong",[s._v("一切都被抽象成文件")]),s._v(", 设备也是文件, 可以进行"),t("strong",[s._v("读和写")]),s._v(". 一般计算机中输入流是"),t("strong",[s._v("键盘")]),s._v(", 输出流是"),t("strong",[s._v("显示器")]),s._v(", 错误流也是"),t("strong",[s._v("显示器")]),s._v(", 所以现在这个进程和内核连了三根线. 因为硬件都是由内核管理的, 进程需要通过"),t("strong",[s._v("系统调用")]),s._v("让内核进程访问硬件资源.")]),s._v(" "),t("p",[s._v("例如 C 语言的 "),t("strong",[s._v("printf()")]),s._v(" 函数是向命令行打印字符, 从进程角度来看, 就是向 "),t("strong",[s._v("files[1] 写入数据")]),s._v("; 同理 scanf() 函数就是进程试图从 "),t("strong",[s._v("files[0]")]),s._v(" 这个文件中读取数据.")]),s._v(" "),t("p",[s._v("如果应用程序需要其他资源, 比如"),t("strong",[s._v("打开一个文件进行读写")]),s._v(", 可以通过系统调用让内核把文件打开, 这个文件就"),t("strong",[s._v("会被放到 files 指针数组的第 4 个位置")]),s._v(":")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220528143744382.png",alt:"",title:"读写文件"}})]),s._v(" "),t("p",[t("strong",[s._v("输入重定向")]),s._v("就很好理解了, 由于应用程序从标准输入流 "),t("strong",[s._v("files[0]")]),s._v(" 读取数据, 所以只要把 "),t("strong",[s._v("files[0] 指向一个文件")]),s._v(", 那么程序就会从这个文件中读取数据, 而不是键盘.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220528143824689.png",alt:"",title:"输入重定向"}})]),s._v(" "),t("p",[s._v("同理"),t("strong",[s._v("输出重定向")]),s._v("就是把标准输出流 files[1] 指向"),t("strong",[s._v("一个文件")]),s._v(", 那么程序输出就"),t("strong",[s._v("不会写入到显示器")]),s._v(", 而是写入这个文件.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220528143856549.png",alt:"",title:"输出重定向"}})]),s._v(" "),t("p",[t("strong",[s._v("管道符")]),s._v("也类似, 就是把一个进程的"),t("strong",[s._v("输出流")]),s._v("和另一个进程的"),t("strong",[s._v("输入流")]),s._v("接起一条 "),t("strong",[s._v("管道")]),s._v(", 数据就在其中传递.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220528143936728.png",alt:"",title:"管道符"}})]),s._v(" "),t("p",[s._v("不管是设备, 其他进程, socket 套接字还是文件, 全部都可以进行读写, "),t("strong",[s._v("统一装进一个简单的 files 数组")]),s._v(", 进程通过简单的"),t("strong",[s._v("文件描述符访问相应资源")]),s._v(", 具体细节交给操作系统, 优美高效.")]),s._v(" "),t("h4",{attrs:{id:"进程运行状态🌟"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进程运行状态🌟"}},[s._v("#")]),s._v(" 进程运行状态🌟")]),s._v(" "),t("h5",{attrs:{id:"_1-进程状态-五状态模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-进程状态-五状态模型"}},[s._v("#")]),s._v(" 1.进程状态-五状态模型")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220528144206758.png",alt:"",title:"进程五状态模型"}})]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("就绪状态")]),s._v("(ready): 等待被调度")]),s._v(" "),t("li",[t("strong",[s._v("运行状态")]),s._v("(running)")]),s._v(" "),t("li",[s._v("阻塞状态(waiting): 等待资源")])]),s._v(" "),t("p",[s._v("注意:")]),s._v(" "),t("ul",[t("li",[s._v("只有"),t("strong",[s._v("就绪态和运行态")]),s._v("可以"),t("strong",[s._v("相互转换")]),s._v(", 其它都是"),t("strong",[s._v("单向转换")]),s._v(". 就绪状态的进程通过"),t("strong",[s._v("调度算法")]),s._v("而获得 CPU 时间, 转为运行状态; 而运行状态的进程, 在分配给它的 CPU 时间片用完之后就会转为就绪状态, 等待下一次调度. 缺少 CPU 时间会从运行态转换为就绪态.")]),s._v(" "),t("li",[s._v("阻塞状态是缺少需要的资源从而由运行状态转换而来, 该资源不占用 CPU 时间.")])]),s._v(" "),t("h5",{attrs:{id:"_2-进程创建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-进程创建"}},[s._v("#")]),s._v(" 2.进程创建")]),s._v(" "),t("p",[s._v("进程在执行过程中可以创建多个新的进程, 原来的进程为"),t("strong",[s._v("父进程")]),s._v(", 新进程为子进程, 从而形成一颗"),t("strong",[s._v("进程树")]),s._v(".")]),s._v(" "),t("p",[s._v("一般使用**进程标识符(PID)**来唯一标识进程. 比如 Linux 的 "),t("strong",[s._v("init 进程的 PID 为 1")]),s._v(", 它是所有用户进程的父进程.")]),s._v(" "),t("p",[t("strong",[s._v("通过系统调用 fork() 创建新进程. 新进程的地址空间复制了原来进程的地址空间, 这种机制允许父进程与子进程直接轻松通信. 对于新进程, 系统调用 fork() 返回值为 0, 而对于创建这个新进程的 fork() 返回值为新创建子进程的 PID")]),s._v(". 下图是通过系统调用 fork() 创建进程.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220528144313837.png",alt:"",title:"进程创建"}})]),s._v(" "),t("h5",{attrs:{id:"_3-进程终止"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-进程终止"}},[s._v("#")]),s._v(" 3.进程终止")]),s._v(" "),t("p",[s._v("当进程创建新进程后, 可能有两种执行方式:")]),s._v(" "),t("ul",[t("li",[s._v("父进程与子进程"),t("strong",[s._v("并发执行")]),s._v(".")]),s._v(" "),t("li",[s._v("父进程"),t("strong",[s._v("等待直到某个子进程或全部子进程执行完")]),s._v(".")])]),s._v(" "),t("p",[t("strong",[s._v("父进程可以通过系统调用 wait() 来等待子进程的终止")]),s._v(". wait() 可以通过参数让父进程获得子进程的"),t("strong",[s._v("退出状态")]),s._v("以及子进程的 PID, 这样父进程就知道是哪个子进程终止了.")]),s._v(" "),t("p",[s._v("当一个子进程执行完毕后, 可以通过"),t("strong",[s._v("系统调用 exit() 请求操作系统删除自己")]),s._v(", 此时"),t("strong",[s._v("进程终止")]),s._v(". 此时子进程返回"),t("strong",[s._v("状态值")]),s._v("给父进程(通过系统调用 wait()), 这样父进程就知道子进程的终止信息. 进程终止后所有的进程资源会被操作系统释放.")]),s._v(" "),t("p",[s._v("虽然进程"),t("strong",[s._v("终止后")]),s._v("所有的进程资源会被操作系统释放, 但是它在"),t("strong",[s._v("进程表中的条目依然存在")]),s._v(", 直到它的"),t("strong",[s._v("父进程调用了 wait()")]),s._v(", 这是因为进程表也包含了进程的退出状态.")]),s._v(" "),t("p",[s._v("当进程已经"),t("strong",[s._v("终止")]),s._v("但是其父进程"),t("strong",[s._v("尚未调用 wait() 系统调用")]),s._v("时, 这种进程就成为**==僵尸进程=="),t("strong",[s._v(". "),t("strong",[s._v("所有进程终止时都会过渡")]),s._v("到这种状态, 但一般而言僵尸只是短暂的存在. 一旦父进程调用了 wait() 系统调用, 僵尸进程的进程标识符和它在进程表中的条目就会被")]),s._v("完全释放**.")]),s._v(" "),t("p",[s._v("如果"),t("strong",[s._v("父进程没有调用 wait() 系统调用自己就终止")]),s._v("了, 那么子进程就变成"),t("strong",[s._v("孤儿进程")]),s._v(". Linux 下会将 "),t("strong",[s._v("init")]),s._v(" 进程作为孤儿进程的父进程, "),t("strong",[s._v("init 进程会定时调用 wait()")]),s._v(", 以便收集任何孤儿进程的退出状态, 并释放孤儿进程的进程标识符和进程表条目.")]),s._v(" "),t("h4",{attrs:{id:"进程调度🌟"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进程调度🌟"}},[s._v("#")]),s._v(" 进程调度🌟")]),s._v(" "),t("p",[t("strong",[s._v("进程调度器")]),s._v("选择一个就绪进程到 CPU 上执行.")]),s._v(" "),t("h5",{attrs:{id:"_1-调度程序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-调度程序"}},[s._v("#")]),s._v(" 1.调度程序")]),s._v(" "),t("p",[s._v("进程的整个生命周期中会在各种"),t("strong",[s._v("调度队列")]),s._v("之间进行迁移, 操作系统为了"),t("strong",[s._v("调度必须按一定方式从这些队列中选择进程")]),s._v(". 进程选择通过"),t("strong",[s._v("调度器或者调度程序")]),s._v("来执行.")]),s._v(" "),t("p",[s._v("根据进程类型进行调度: IO 密集型进程与 CPU 密集型进程.")]),s._v(" "),t("h5",{attrs:{id:"_2-调度队列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-调度队列"}},[s._v("#")]),s._v(" 2.调度队列")]),s._v(" "),t("p",[s._v("进程进入操作系统时, 会被加入到"),t("strong",[s._v("作业队列")]),s._v("中, 这个队列包括系统中的"),t("strong",[s._v("所有进程")]),s._v(". 有两种队列:")]),s._v(" "),t("p",[t("strong",[s._v("就绪队列(Ready Queue)")]),s._v(": 驻留在内存中处于就绪态的等待运行的进程保存在就绪队列中. 这个队列通常用链表实现, 其头结点有两个指针, 分别指向链表的第一个和最后一个 PCB 块, 每个 PCB 块还包含一个指针, 指向就绪队列的下一个 PCB.")]),s._v(" "),t("p",[t("strong",[s._v("设备队列")]),s._v(": 如果进程执行后需要等待特定事件的发生, 如 "),t("strong",[s._v("IO")]),s._v(" 请求的完成, 那么进程被加入到"),t("strong",[s._v("设备队列")]),s._v("中, "),t("strong",[s._v("每个设备都有自己的设备队列, 用于保存等待该特定 IO 设备的进程列表")]),s._v(". 如下图中下面的几个都是设备队列, 比如磁带单元, 终端单元等.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20200915133156611.png",alt:"",title:"调度队列"}})]),s._v(" "),t("p",[t("strong",[s._v("关系")]),s._v(": 新的进程放到"),t("strong",[s._v("就绪队列")]),s._v(", 进程执行过程中如果进程可能发出 "),t("strong",[s._v("IO 请求")]),s._v("并被放到 "),t("strong",[s._v("IO 队列")]),s._v("(属于设备队列)中, IO 完成之后进程再次被放到就绪队列中, 重复上述的流程直到进程完成被删除.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20200915133310327.png",alt:""}})]),s._v(" "),t("h5",{attrs:{id:"_3-进程切换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-进程切换"}},[s._v("#")]),s._v(" 3.进程切换")]),s._v(" "),t("p",[t("strong",[s._v("切换 CPU 到另一个进程需要保存当前进程状态和恢复另一个进程的状态, 这个过程为")]),s._v("​=="),t("strong",[s._v("上下文(进程)切换")]),s._v("==. 上下文切换的开销是纯粹的时间开销, 因为这个时间内啥都没干就是保存进程状态.")]),s._v(" "),t("p",[t("strong",[s._v("进程切换的时候会把进程上下文信息全部保存到 PCB 中, 包括 CPU 寄存器的值, 进程状态和内存管理信息等. 当进程获取 CPU 执行权限时又从 PCB 中重新加载状态")]),s._v(". 如下图所示为进程间 CPU 的切换过程.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20210919191257247.png",alt:"",title:"进程间CPU切换过程"}})]),s._v(" "),t("p",[t("strong",[s._v("中断")]),s._v("导致 CPU 从执行当前任务改变到执行内核程序, 当中断发生时, 系统需要保存当前运行在 CPU 上的"),t("strong",[s._v("进程上下文")]),s._v(", 以便在处理后能够恢复上下文, 即先挂起进程, 再恢复进程.")]),s._v(" "),t("h4",{attrs:{id:"进程调度算法🌟"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进程调度算法🌟"}},[s._v("#")]),s._v(" 进程调度算法🌟")]),s._v(" "),t("p",[s._v("CPU 调度处理的问题是: 从"),t("strong",[s._v("就绪队列")]),s._v("中选择进程以便为其分配 CPU, "),t("strong",[s._v("如何选择进程")]),s._v("就是进程调度算法. "),t("strong",[s._v("不同操作系统")]),s._v("的调度算法"),t("strong",[s._v("目标不同")]),s._v(", 因此需要针对"),t("strong",[s._v("不同系统环境")]),s._v("来讨论调度算法.")]),s._v(" "),t("h5",{attrs:{id:"_1-批处理系统"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-批处理系统"}},[s._v("#")]),s._v(" 1.批处理系统")]),s._v(" "),t("p",[t("strong",[s._v("批处理系统")]),s._v("没有太多的用户操作, 在该系统中, 调度算法目标是"),t("strong",[s._v("保证吞吐量和周转时间")]),s._v("(从提交到终止的时间).")]),s._v(" "),t("h6",{attrs:{id:"_1-先来先服务-fcfs"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-先来先服务-fcfs"}},[s._v("#")]),s._v(" (1)先来先服务(FCFS)")]),s._v(" "),t("p",[s._v("先请求 CPU 的进程首先分配到 CPU, 可以通过 FIFO 队列实现. 当一个进程进入就绪队列时, 这个进程的 PCB 就会被链接到队列尾部. FCFS 算法是非抢占的.")]),s._v(" "),t("p",[s._v("按照"),t("strong",[s._v("请求的顺序")]),s._v("进行调度. 有利于长作业, 但不利于短作业, 因为短作业必须一直等待前面的长作业执行完毕才能执行, 而长作业又需要执行很长时间, 可能造成"),t("strong",[s._v("短作业等待时间过长")]),s._v(", 同时造成所有进程的平均等待时间较长.")]),s._v(" "),t("h6",{attrs:{id:"_2-短作业优先-sjf"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-短作业优先-sjf"}},[s._v("#")]),s._v(" (2)短作业优先(SJF)")]),s._v(" "),t("p",[s._v("按估计运行时间"),t("strong",[s._v("最短")]),s._v("的顺序进行调度. 长作业有可能会饿死, 处于一直等待短作业执行完毕的状态. 因为如果一直有短作业到来, 那么长作业永远得不到调度. 最短作业优先算法的"),t("strong",[s._v("平均等待时间较低")]),s._v(".")]),s._v(" "),t("h6",{attrs:{id:"_3-最短剩余时间优先-srtn"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-最短剩余时间优先-srtn"}},[s._v("#")]),s._v(" (3)最短剩余时间优先(SRTN)")]),s._v(" "),t("p",[s._v("按估计"),t("strong",[s._v("剩余时间最短")]),s._v("的顺序进行调度.")]),s._v(" "),t("h5",{attrs:{id:"_2-交互式系统"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-交互式系统"}},[s._v("#")]),s._v(" 2.交互式系统")]),s._v(" "),t("p",[s._v("交互式系统有"),t("strong",[s._v("大量的用户交互操作")]),s._v(", 在该系统中调度算法的目标是"),t("strong",[s._v("快速地进行响应")]),s._v(".")]),s._v(" "),t("h6",{attrs:{id:"_1-时间片轮转算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-时间片轮转算法"}},[s._v("#")]),s._v(" (1)时间片轮转算法")]),s._v(" "),t("p",[s._v("将所有"),t("strong",[s._v("就绪进程")]),s._v("按 "),t("strong",[s._v("先来先服务(FCFS)"),t("strong",[s._v("​"),t("strong",[t("strong",[s._v("的原则排成一个")])]),s._v("​")]),s._v("队列")]),s._v(", 每次调度时, 把 CPU 时间分配给"),t("strong",[s._v("队首进程")]),s._v(", 该进程可以执行一个"),t("strong",[s._v("时间片")]),s._v(". 当时间片用完时, 由计时器发出时钟"),t("strong",[s._v("中断")]),s._v(", 调度程序便"),t("strong",[s._v("停止")]),s._v("该进程的执行, 并将它送往"),t("strong",[s._v("就绪队列的末尾")]),s._v(", 同时继续把 CPU 时间分配给"),t("strong",[s._v("队首")]),s._v("的进程.")]),s._v(" "),t("p",[s._v("时间片轮转算法的效率和"),t("strong",[s._v("时间片的大小")]),s._v("有很大关系:")]),s._v(" "),t("ul",[t("li",[s._v("由于"),t("strong",[s._v("进程切换")]),s._v("需要"),t("strong",[s._v("保存进程信息")]),s._v("并且载入新进程的信息, 如果时间片太小, 会导致"),t("strong",[s._v("进程切换太频繁")]),s._v(", 在进程切换上就会花过多时间.")]),s._v(" "),t("li",[s._v("而如果"),t("strong",[s._v("时间片过长")]),s._v(", 那么"),t("strong",[s._v("实时性")]),s._v("就不能得到保证.")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220528144847484.png",alt:"",title:"时间片轮转算法"}})]),s._v(" "),t("h6",{attrs:{id:"_2-优先级调度算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-优先级调度算法"}},[s._v("#")]),s._v(" (2)优先级调度算法")]),s._v(" "),t("p",[s._v("为"),t("strong",[s._v("每个进程")]),s._v("分配一个"),t("strong",[s._v("优先级")]),s._v(", 按优先级进行调度. 为了防止低优先级的进程"),t("strong",[s._v("永远等不到调度")]),s._v(", 可以随着"),t("strong",[s._v("时间的推移增加等待进程的优先级")]),s._v(".")]),s._v(" "),t("h6",{attrs:{id:"_3-多级反馈队列算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-多级反馈队列算法"}},[s._v("#")]),s._v(" (3)多级反馈队列算法")]),s._v(" "),t("p",[s._v("如果一个进程需要执行 "),t("strong",[s._v("100")]),s._v(" 个时间片, 如果采用"),t("strong",[s._v("时间片轮转调度")]),s._v("算法, 那么需要"),t("strong",[s._v("交换 100 次")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("多级队列")]),s._v("是为这种需要"),t("strong",[s._v("连续执行多个时间片")]),s._v("的进程设计的, 它设置了"),t("strong",[s._v("多个队列")]),s._v(", "),t("strong",[s._v("每个队列时间片大小都不同")]),s._v(", 如 "),t("strong",[s._v("1, 2, 4, 8")]),s._v(" ,... 进程在"),t("strong",[s._v("第一个队列没执行完")]),s._v(", 就会被移到"),t("strong",[s._v("下一个队列")]),s._v(". 这种方式下, 之前的进程只需要交换 7 次.")]),s._v(" "),t("p",[t("strong",[s._v("新就绪")]),s._v("的进程总是进入"),t("strong",[s._v("最高优先级队列的队尾")]),s._v(", 并按 FCFS 原则等待调度; 当轮到该进程执行时, 若它能在规定的时间片内"),t("strong",[s._v("完成")]),s._v(", 便可准备撤离系统, 否则将其转入"),t("strong",[s._v("第二级队列末尾")]),s._v(", 再同样按 FCFS 原则等待调度; 如果它在第二级队列上运行一个时间片后"),t("strong",[s._v("仍未完成")]),s._v(", 再依次将它转入第"),t("strong",[s._v("三级队列")]),s._v(", ……, 如此下去, 当一个长作业从第一级队列降到最后一级队列时, 便在该队列中"),t("strong",[s._v("采取 RR 算法")]),s._v("运行.")]),s._v(" "),t("p",[s._v("每个"),t("strong",[s._v("队列优先级")]),s._v("也不同, 最"),t("strong",[s._v("上面的优先级最高")]),s._v(". 因此只有"),t("strong",[s._v("上一个队列没有进程在排队")]),s._v(", 才能调度"),t("strong",[s._v("当前队列")]),s._v("上的进程.")]),s._v(" "),t("p",[s._v("可以将这种调度算法看成是"),t("strong",[s._v("时间片轮转调度算法和优先级调度算法")]),s._v("的**==结合==**.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220528144924956.png",alt:"",title:"多级反馈队列算法"}})]),s._v(" "),t("p",[t("strong",[s._v("UNIX")]),s._v(" 操作系统便是采取的这种调度算法.")]),s._v(" "),t("h5",{attrs:{id:"_3-实时操作系统"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-实时操作系统"}},[s._v("#")]),s._v(" 3.实时操作系统")]),s._v(" "),t("p",[s._v("实时系统要求一个请求在一个确定时间内得到响应. 比如 "),t("strong",[s._v("UCOSII")]),s._v(". 分为硬实时和软实时.")]),s._v(" "),t("h5",{attrs:{id:"_4-linux进程调度算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-linux进程调度算法"}},[s._v("#")]),s._v(" 4.Linux进程调度算法")]),s._v(" "),t("p",[s._v("Linux 内核 V2.6 中, "),t("strong",[s._v("完全公平调度程序")]),s._v("(CFS)是默认的调度算法. Linux 系统的调度基于"),t("strong",[s._v("调度类")]),s._v(", 每个类都有一个特定的"),t("strong",[s._v("优先级")]),s._v(". 内核针对不同的调度类采用不同的"),t("strong",[s._v("调度算法")]),s._v(", 以便满足系统与进程的需要.")]),s._v(" "),t("p",[s._v("每个可运行的任务放置在**==红黑树=="),t("strong",[s._v("上, 它的键是基于 "),t("strong",[s._v("vruntime 值")]),s._v("的, 当一个任务变为")]),s._v("可运行"),t("strong",[s._v("的时候, 它被添加到树上, 当任务变成不可运行时(如阻塞等待 IO 时), 它从树上被")]),s._v("删除**. 一般来说, 得到"),t("strong",[s._v("较少处理时间的任务(vruntime 值较小)会偏向树的左侧, 得到较多处理时间的任务会偏向树的右侧")]),s._v(".")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220528145407447.png",alt:"",title:"Linux进程红黑树"}})]),s._v(" "),t("h4",{attrs:{id:"进程间通信ipc🌟"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进程间通信ipc🌟"}},[s._v("#")]),s._v(" 进程间通信IPC🌟")]),s._v(" "),t("h5",{attrs:{id:"_1-概述-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述-2"}},[s._v("#")]),s._v(" 1.概述")]),s._v(" "),t("p",[s._v("IPC(Inter-Process Communication) 即进程间通信, 用于解决两个进程直接如何交换数据的问题.")]),s._v(" "),t("p",[s._v("进程同步与进程通信很容易混淆, 它们的区别在于: (1)"),t("strong",[s._v("进程同步")]),s._v(": "),t("strong",[s._v("控制多个进程按一定顺序执行")]),s._v(". (2)"),t("strong",[s._v("进程通信")]),s._v(": "),t("strong",[s._v("进程间传输信息")]),s._v(". 进程通信是一种手段, 而进程同步是一种目的. 一般为达到进程同步的目的, 需要让进程进行通信而传输一些进程同步所需的信息.")]),s._v(" "),t("h5",{attrs:{id:"_2-进程间通信模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-进程间通信模型"}},[s._v("#")]),s._v(" 2.进程间通信模型")]),s._v(" "),t("p",[s._v("进程间通信有两个常用模型: "),t("strong",[s._v("消息传递模型与共享内存模型")]),s._v(".")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20200915140808640.png",alt:"",title:"消息传递模型与共享内存模型"}})]),s._v(" "),t("p",[t("strong",[s._v("消息传递模型")]),s._v(": 通信的进程通过"),t("strong",[s._v("相互交换消息")]),s._v("来传递消息, 消息交换可以直接进行, 也可以通过一个共同的邮箱(如消息队列)来间接进行. 适用于分布式系统间的进程通信.")]),s._v(" "),t("p",[t("strong",[s._v("共享内存模型")]),s._v(": 建立一块供协作进程"),t("strong",[s._v("共享的内存区域")]),s._v(", 进程通过向此共享区域"),t("strong",[s._v("读写数据")]),s._v("来交换信息. 进程通过系统调用 shared_memory_create() 和 shared_memory_attach() 创建共享内存, 并访问其他进程拥有的内存区域. 共享内存模型的"),t("strong",[s._v("速度最快")]),s._v(". 共享内存系统仅在"),t("strong",[s._v("建立")]),s._v("共享内存区域时需要进行系统调用, 一旦共享内存建立完成, 所有的访问都可以作为"),t("strong",[s._v("常规的内存访问")]),s._v(", 无需借助内核. 不过共享内存模型容易出现数据保护与同步方面的问题, 即"),t("strong",[s._v("数据不一致")]),s._v("的问题.")]),s._v(" "),t("h5",{attrs:{id:"_3-实现方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-实现方式"}},[s._v("#")]),s._v(" 3.实现方式")]),s._v(" "),t("h6",{attrs:{id:"_1-普通管道"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-普通管道"}},[s._v("#")]),s._v(" (1)普通管道")]),s._v(" "),t("p",[s._v("管道类似于两个进程间的"),t("strong",[s._v("桥梁")]),s._v(", 可通过管道在进程间传递少量的字符流或字节流.")]),s._v(" "),t("p",[s._v("普通管道(无名管道)允许两个进程按生产者-消费者模式进行通信: 生产者向管道一端写, 消费者从管道另一端读. 所以普通管道"),t("strong",[s._v("只允许单向通信")]),s._v(", 如果需要双向通信需要采用两个管道, 两个管道向不同的方向发送数据.")]),s._v(" "),t("p",[t("strong",[s._v("管道")]),s._v("通过系统调用 "),t("strong",[s._v("==pipe()==")]),s._v(" 函数创建, 并通过文件描述符 int fd[] 来访问, "),t("strong",[s._v("fd[0] 为管道输入端, fd[1] 为管道输出端")]),s._v(". 这与前述的 "),t("strong",[s._v("files 文件指针数组")]),s._v("对应.")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("<unistd.h>")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("pipe")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" fd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("Unix 将"),t("strong",[s._v("管道")]),s._v("作为一种特殊类型的"),t("strong",[s._v("文件")]),s._v(", 因此可以用普通的系统调用 read() 和 write() 来访问管道.")]),s._v(" "),t("p",[t("strong",[s._v("普通管道只能被创建它的进程访问")]),s._v(". 通常父进程创建一个管道, 并使用它来与其子进程进行通信(该子进程通过 fork() 创建). 由于子进程继承了父进程的打开文件, 而普通管道也是一种特殊的文件, 所以子进程也继承了父进程的管道.")]),s._v(" "),t("p",[t("strong",[s._v("普通管道")]),s._v("可用于"),t("strong",[s._v("具有亲缘关系进程间")]),s._v("的通信, 允许一个进程和另一个与它有"),t("strong",[s._v("共同祖先的进程")]),s._v("之间进行通信. 它具有以下限制:")]),s._v(" "),t("ul",[t("li",[s._v("只支持"),t("strong",[s._v("半双工")]),s._v("通信(单向交替传输).")]),s._v(" "),t("li",[t("strong",[s._v("只能")]),s._v("在"),t("strong",[s._v("父子进程")]),s._v("中使用.")]),s._v(" "),t("li",[s._v("普通管道仅在进程相互通信时才存在, 一旦进程完成通信且终止后普通管道就"),t("strong",[s._v("不存在")]),s._v("了.")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220528145537487.png",alt:"",title:"普通管道"}})]),s._v(" "),t("p",[s._v('管道经常用于将一个命令的输出作为另一个命令的输入. 典型的应用就是命令行中的 "|" 操作符, 譬如:')]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-ef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("java")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v('ps 与 grep 都有独立的进程, 以上命令就是通过管道操作符 "|" 将 ps 命令的标准输出连接到 grep 命令的标准输入上.')]),s._v(" "),t("h6",{attrs:{id:"_2-命名管道"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-命名管道"}},[s._v("#")]),s._v(" (2)命名管道")]),s._v(" "),t("p",[t("strong",[s._v("命名管道也叫 FIFO")]),s._v(", 克服了管道只能在父子进程中使用的限制, 也克服了管道"),t("strong",[s._v("没有名字")]),s._v("的限制. 因此除具有管道所具有的功能外, 它还允许"),t("strong",[s._v("无亲缘关系进程间")]),s._v("的通信, 一个典型的场景是一个命名管道有几个写者. 区别: "),t("strong",[s._v("普通(无名)管道")]),s._v(": 只存在于内存中的文件; "),t("strong",[s._v("命名管道")]),s._v(": 存在于实际的磁盘介质或者文件系统.")]),s._v(" "),t("p",[s._v("命名管道通过系统调用 "),t("strong",[s._v("mkfifo()")]),s._v(" 来创建. 命名管道在文件系统中有对应的"),t("strong",[s._v("文件名")]),s._v(", 其表现就类似于文件系统上的一个"),t("strong",[s._v("文件")]),s._v(", 因此当进程通信完成之后, 命名管道将"),t("strong",[s._v("继续存在")]),s._v(", 直到被显式的删除. 可以通过系统调用 open(), read(), write(), close() 等进行操作.")]),s._v(" "),t("p",[s._v("命名管道虽然运行双向通信, 但是是"),t("strong",[s._v("半双工")]),s._v("的.")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("<sys/stat.h>")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkfifo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("path"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("mode_t")]),s._v(" mode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkfifoat")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" fd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("path"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("mode_t")]),s._v(" mode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("FIFO 常用于"),t("strong",[s._v("客户-服务器")]),s._v("应用程序中, FIFO 用作"),t("strong",[s._v("汇聚点")]),s._v(", 在"),t("strong",[s._v("客户进程和服务器进程")]),s._v("之间传递数据.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220528145645324.png",alt:"",title:"FIFO"}})]),s._v(" "),t("h6",{attrs:{id:"_3-信号"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-信号"}},[s._v("#")]),s._v(" (3)信号")]),s._v(" "),t("p",[s._v("信号用于通知目标进程有某种事件发生. 除了进程间通信外, 进程还可以给进程自身发送信号. 信号的典型应用是 kill 命令, 譬如:")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("kill")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-9")]),s._v(" pid\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("以上命令即表示由 Shell 进程向指定 PID 的进程发送 SIGKILL 信号.")]),s._v(" "),t("h6",{attrs:{id:"_4-信号量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-信号量"}},[s._v("#")]),s._v(" (4)信号量")]),s._v(" "),t("p",[s._v("信号量是一个"),t("strong",[s._v("计数器")]),s._v(", 用于为"),t("strong",[s._v("多个进程")]),s._v("提供对"),t("strong",[s._v("共享数据对象")]),s._v("的访问. 信号量是一种"),t("strong",[s._v("进程间的同步与协作")]),s._v("方式. 这种通信方式主要用于解决与同步相关的问题并避免竞争条件.")]),s._v(" "),t("h6",{attrs:{id:"_5-消息队列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-消息队列"}},[s._v("#")]),s._v(" (5)消息队列")]),s._v(" "),t("p",[s._v("以上几种方式只适合传递少量消息, POSIX 标准中定义了可用于进程间数据量较多的通信的消息队列.")]),s._v(" "),t("p",[t("strong",[s._v("消息队列")]),s._v("是消息的"),t("strong",[s._v("链表")]),s._v(", 具有特定的格式, 存放在内存中并由"),t("strong",[s._v("消息队列标识符")]),s._v("标识. "),t("strong",[s._v("消息队列存放在内核")]),s._v("中, 只有在"),t("strong",[s._v("内核重启")]),s._v("(即操作系统重启)或显式地删除消息队列时才会被真正的删除. 消息队列可以实现消息的随机查询, 消息不一定要以先进先出的次序读取, 也可以按消息的类型读取. 比 FIFO 更有优势.")]),s._v(" "),t("p",[s._v("相比 FIFO, 消息队列具有以下优点:")]),s._v(" "),t("ul",[t("li",[s._v("消息队列可以"),t("strong",[s._v("独立于")]),s._v("读写进程存在, 从而避免了 FIFO 中同步管道的打开和关闭时可能产生的困难.")]),s._v(" "),t("li",[s._v("避免了 FIFO 的"),t("strong",[s._v("同步阻塞")]),s._v("问题, 不需要进程自己提供同步方法.")]),s._v(" "),t("li",[s._v("读进程可以根据消息类型有"),t("strong",[s._v("选择地接收")]),s._v("消息, 而不像 FIFO 那样只能默认地接收.")])]),s._v(" "),t("p",[s._v("但是消息队列的实时性相对受限.")]),s._v(" "),t("h6",{attrs:{id:"_6-共享内存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-共享内存"}},[s._v("#")]),s._v(" (6)共享内存")]),s._v(" "),t("p",[s._v("原本每个进程的内存地址空间都是相互隔离的, 但操作系统提供了让进程主动创建, 映射, 分离, 控制某一块内存的程序接口.")]),s._v(" "),t("p",[s._v("共享内存机制允许"),t("strong",[s._v("多个进程访问同一块公共内存空间")]),s._v(", 不同进程可以及时看到对方进程中对"),t("strong",[s._v("共享内存中数据的更新")]),s._v(". 这种方式需要依靠某种"),t("strong",[s._v("同步操作")]),s._v(", 如"),t("strong",[s._v("互斥锁和信号量")]),s._v("等. 需要使用"),t("strong",[s._v("信号量")]),s._v("用来"),t("strong",[s._v("同步对共享存储的访问")]),s._v(".")]),s._v(" "),t("p",[s._v("由于数据"),t("strong",[s._v("不需要")]),s._v("在进程之间"),t("strong",[s._v("复制")]),s._v(", 所以这是效率最高的进程间通信形式.")]),s._v(" "),t("p",[t("strong",[s._v("多个进程")]),s._v("可以将"),t("strong",[s._v("同一个文件映射")]),s._v("到它们的"),t("strong",[s._v("地址空间从而实现共享内存")]),s._v(".")]),s._v(" "),t("h6",{attrs:{id:"_7-套接字接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-套接字接口"}},[s._v("#")]),s._v(" (7)套接字接口")]),s._v(" "),t("p",[s._v("消息队列与共享内存只适合"),t("strong",[s._v("单机多进程")]),s._v("间的通信, "),t("strong",[s._v("套接字接口")]),s._v("则是更普适的进程间通信机制. 套接字接口不仅适用于"),t("strong",[s._v("本地相同机器")]),s._v("的不同进程间通信, 由于 Socket 是网络栈的统一接口, 它也能用于基于网络的跨机进程间通信.")]),s._v(" "),t("p",[s._v("套接字是支持 TCP/IP 网络通信的基本操作单元, 可以看做是不同主机之间的进程进行双向通信的端点, 用套接字中的相关函数来完成通信过程.")]),s._v(" "),t("p",[s._v("出于效率考虑, 当仅限于"),t("strong",[s._v("本机")]),s._v("进程间通信时, 套接字接口是被优化过的, 不会经过网络协议栈, 不需要打包拆包, 计算校验和, 维护序号和应答等操作, 只是简单地将应用层数据从一个进程复制到另一个进程, 这种进程间通信方式即"),t("strong",[s._v("本地套接字接口")]),s._v(".")]),s._v(" "),t("p",[s._v("Java 中"),t("strong",[s._v("面向连接")]),s._v("的 TCP 套接字使用 Socket 类, "),t("strong",[s._v("无连接")]),s._v("的 UDP 套接字使用 DatagramSocket 类.")]),s._v(" "),t("h4",{attrs:{id:"进程同步🌟"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进程同步🌟"}},[s._v("#")]),s._v(" 进程同步🌟")]),s._v(" "),t("p",[s._v("进程同步即控制"),t("strong",[s._v("多个进程")]),s._v("按一定"),t("strong",[s._v("顺序")]),s._v("执行. 区分两个概念:")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("同步")]),s._v(": 多个进程按一定"),t("strong",[s._v("顺序")]),s._v("执行.")]),s._v(" "),t("li",[t("strong",[s._v("互斥")]),s._v(": 多个进程在同一时刻只有"),t("strong",[s._v("一个进程")]),s._v("能进入临界区.")])]),s._v(" "),t("h5",{attrs:{id:"_1-临界区"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-临界区"}},[s._v("#")]),s._v(" 1.临界区")]),s._v(" "),t("p",[s._v("对"),t("strong",[s._v("临界资源")]),s._v("进行访问的那段代码称为"),t("strong",[s._v("临界区")]),s._v(". 当一个进程在临界区内执行时, 其他进程不允许在临界区内执行. 为了互斥访问临界资源, 每个进程在进入临界区之前, 需要先进行"),t("strong",[s._v("检查")]),s._v(".")]),s._v(" "),t("p",[s._v("临界区问题的解决方案通常有两种: 一是基于"),t("strong",[s._v("软件")]),s._v("的解决方案, 这种方案一般不保证能够在现代计算机体系结构上正确工作. 另一种方案是基于"),t("strong",[s._v("硬件")]),s._v("同步的解决方案, 典型的代表是通过加锁来保护临界区, 使用 CAS 硬件指令来解决临界区问题.")]),s._v(" "),t("h5",{attrs:{id:"_2-互斥锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-互斥锁"}},[s._v("#")]),s._v(" 2.互斥锁")]),s._v(" "),t("p",[s._v("临界区问题基于硬件的解决方案不但复杂而且不能为程序员直接使用. 因此操作系统构造了相关的软件工具, 最简单的就是互斥锁. 可以用互斥锁保护临界区, 从而防止竞争条件. "),t("strong",[s._v("一个进程在进入临界区时应该获取到锁, 它在退出临界区是释放锁")]),s._v(".")]),s._v(" "),t("p",[s._v("互斥锁可以通过 acquire() 获取锁和 release() 释放锁, 每个互斥锁都有一个布尔类型的变量 available 表示锁是否可用.")]),s._v(" "),t("h5",{attrs:{id:"_3-信号量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-信号量"}},[s._v("#")]),s._v(" 3.信号量")]),s._v(" "),t("p",[s._v("信号量通常用于控制访问具有"),t("strong",[s._v("多个实例")]),s._v("的某种资源, 信号量的初值为可用资源数量.")]),s._v(" "),t("p",[t("strong",[s._v("信号量")]),s._v("(Semaphore)是一个"),t("strong",[s._v("整型变量")]),s._v(", 可以对其执行 "),t("strong",[s._v("wait 和 signal")]),s._v(" 操作.")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("wait")]),s._v(": 如果信号量"),t("strong",[s._v("大于 0")]),s._v(", 执行 -1 操作; 如果信号量"),t("strong",[s._v("等于 0")]),s._v(", 进程"),t("strong",[s._v("睡眠")]),s._v(", 等待信号量大于 0;")]),s._v(" "),t("li",[t("strong",[s._v("signal")]),s._v(": 对信号量执行 +1 操作, 唤醒睡眠的进程让其完成 down 操作.")])]),s._v(" "),t("p",[s._v("wait 和 signal 等对于整型变量的操作需要是"),t("strong",[s._v("原子的")]),s._v(", 不能分割, 通常的做法是在执行这些操作的时候屏蔽中断.")]),s._v(" "),t("p",[s._v("如果信号量的取值"),t("strong",[s._v("只能为 0 或者 1")]),s._v(", 那么就成为了 "),t("strong",[s._v("互斥量(Mutex)")]),s._v(", "),t("strong",[s._v("0 表示临界区已经加锁, 1 表示临界区解锁")]),s._v(".")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" semaphore"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nsemaphore mutex "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("P1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("down")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("mutex"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 临界区")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("up")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("mutex"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("P2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("down")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("mutex"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 临界区")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("up")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("mutex"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("h4",{attrs:{id:"线程🌟"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线程🌟"}},[s._v("#")]),s._v(" 线程🌟")]),s._v(" "),t("h5",{attrs:{id:"_1-概述-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述-3"}},[s._v("#")]),s._v(" 1.概述")]),s._v(" "),t("p",[s._v("线程是 "),t("strong",[s._v("CPU")]),s._v(" 使用的"),t("strong",[s._v("基本单元")]),s._v(", 它包括线程 ID, 程序计数器, 寄存器组和堆栈. 同一个进程的线程"),t("strong",[s._v("共享")]),s._v("代码段, 数据段与其他操作系统资源. 下图是多线程进程.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20200924094449070.png",alt:"",title:"进程与多线程"}})]),s._v(" "),t("h5",{attrs:{id:"_2-多线程模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-多线程模型"}},[s._v("#")]),s._v(" 2.多线程模型")]),s._v(" "),t("p",[s._v("线程分为用户线程与内核线程. 用户线程位于内核之上, 其管理无需内核支持, 而内核线程由操作系统支持与管理.")]),s._v(" "),t("h5",{attrs:{id:"_3-线程同步"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-线程同步"}},[s._v("#")]),s._v(" 3.线程同步")]),s._v(" "),t("p",[t("strong",[s._v("线程同步")]),s._v("是两个或多个共享关键资源"),t("strong",[s._v("线程的并发执行")]),s._v(". 应该同步线程以避免关键的资源使用冲突. 操作系统一般有如下线程同步方式:")]),s._v(" "),t("ol",[t("li",[t("strong",[s._v("信号量(Semphares)")]),s._v(": 允许同一时刻"),t("strong",[s._v("多个线程")]),s._v("访问"),t("strong",[s._v("同一资源")]),s._v(", 但是需要控制同一时刻"),t("strong",[s._v("访问此资源的最大线程数量")]),s._v(". 如 JDK 中的 Semphare 类.")]),s._v(" "),t("li",[t("strong",[s._v("互斥量(Mutex)")]),s._v(": 互斥量是信号量的一种"),t("strong",[s._v("特殊形式")]),s._v(". 采用"),t("strong",[s._v("互斥对象机制")]),s._v(", 只有拥有互斥对象的线程才有访问公共资源的权限. 因为互斥对象"),t("strong",[s._v("只有一个")]),s._v(", 所以可以保证公共资源不会被多个线程同时访问. 如 Java 中 "),t("strong",[s._v("synchronized")]),s._v(" 关键词和各种 "),t("strong",[s._v("Lock")]),s._v(" 都是这种机制.")]),s._v(" "),t("li",[t("strong",[s._v("事件(Event)")]),s._v(": "),t("strong",[s._v("Wait/Notify 机制")]),s._v(", 通过通知操作的方式来保持多线程同步, 还可以方便的实现多线程优先级的比较操作.")])]),s._v(" "),t("h4",{attrs:{id:"进程死锁🌟"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进程死锁🌟"}},[s._v("#")]),s._v(" 进程死锁🌟")]),s._v(" "),t("p",[s._v("正常情况下资源访问步骤: "),t("strong",[s._v("申请, 使用, 释放")]),s._v(".")]),s._v(" "),t("p",[s._v("当一个"),t("strong",[s._v("进程")]),s._v("申请资源时, 如果资源不可用, 那么进程进入等待状态. 有时候不同进程申请的资源被其他的等待进程互相占用, 那么进程就有可能一直等待对方的资源而再也无法改变状态, 这就产生死锁.")]),s._v(" "),t("h5",{attrs:{id:"_1-死锁概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-死锁概述"}},[s._v("#")]),s._v(" 1.死锁概述")]),s._v(" "),t("h6",{attrs:{id:"_1-死锁的必要条件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-死锁的必要条件"}},[s._v("#")]),s._v(" (1)死锁的必要条件")]),s._v(" "),t("p",[s._v("发生死锁的四个必要条件如下, 四个条件必须"),t("strong",[s._v("同时成立")]),s._v("才能形成死锁.")]),s._v(" "),t("ol",[t("li",[t("strong",[s._v("互斥条件")]),s._v(": 一个资源在任意一个时刻"),t("strong",[s._v("只能由一个进程持有")]),s._v(".")]),s._v(" "),t("li",[t("strong",[s._v("请求与保持条件")]),s._v(": 一个进程因请求资源而"),t("strong",[s._v("阻塞")]),s._v("时, 对"),t("strong",[s._v("已持有的资源保持不放")]),s._v(".")]),s._v(" "),t("li",[t("strong",[s._v("不可抢占条件")]),s._v(": 线程已持有的资源在未使用完之前"),t("strong",[s._v("不能被其他线程强行剥夺")]),s._v(", 只有自己使用完后才释放资源.")]),s._v(" "),t("li",[t("strong",[s._v("循环等待条件")]),s._v(": 若干进程之间形成一种头尾相接的"),t("strong",[s._v("循环等待资源关系")]),s._v(".")])]),s._v(" "),t("h6",{attrs:{id:"_2-资源分配图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-资源分配图"}},[s._v("#")]),s._v(" (2)资源分配图")]),s._v(" "),t("p",[t("strong",[s._v("系统资源分配图")]),s._v("可以更精确的描述死锁, 它是一个"),t("strong",[s._v("有向图")]),s._v(". "),t("strong",[s._v("资源分配图")]),s._v("中方框表示"),t("strong",[s._v("资源")]),s._v(", 圆圈表示"),t("strong",[s._v("进程")]),s._v(". 假如进程为 P, 资源为 R. "),t("strong",[s._v("P → R")]),s._v(" 说明进程正在"),t("strong",[s._v("申请")]),s._v("这个资源, "),t("strong",[s._v("R → P")]),s._v(" 说明这个资源的一个实例已经"),t("strong",[s._v("分配")]),s._v("给了这个进程.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220528151925905.png",alt:"",title:"资源分配图"}})]),s._v(" "),t("p",[s._v("如果资源分配图"),t("strong",[s._v("没有环")]),s._v(", 那就没有发生死锁; 如果分配图"),t("strong",[s._v("有环")]),s._v(", 那么"),t("strong",[s._v("可能")]),s._v("存在死锁(不是一定). 如果一个资源"),t("strong",[s._v("只有一个实例")]),s._v(", 那么如果有环就"),t("strong",[s._v("肯定出现死锁")]),s._v("了; 如果一个资源有"),t("strong",[s._v("多个实例")]),s._v(", 即使存在环也"),t("strong",[s._v("不一定存在死锁")]),s._v("(如下右图).")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220528151905365.png",alt:"",title:"带环的资源分配图"}})]),s._v(" "),t("h5",{attrs:{id:"_2-死锁处理方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-死锁处理方法"}},[s._v("#")]),s._v(" 2.死锁处理方法")]),s._v(" "),t("p",[t("strong",[s._v("处理死锁")]),s._v("主要有以下几种方法: "),t("strong",[s._v("死锁预防, 鸵鸟策略, 死锁检测, 死锁恢复, 死锁避免")]),s._v("等. 下面分别叙述.")]),s._v(" "),t("h5",{attrs:{id:"_3-死锁预防"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-死锁预防"}},[s._v("#")]),s._v(" 3.死锁预防")]),s._v(" "),t("p",[s._v("在程序运行之前"),t("strong",[s._v("预防发生死锁")]),s._v(". 避免死锁只要破坏产生死锁的四个条件中的"),t("strong",[s._v("其中一个")]),s._v("就可以了.")]),s._v(" "),t("p",[t("strong",[s._v("(1) 破坏互斥条件")]),s._v(". 这个条件"),t("strong",[s._v("没有办法破坏")]),s._v(", 因为用锁本来就是想让他们互斥的(临界资源需要互斥访问).")]),s._v(" "),t("p",[t("strong",[s._v("(2) 破坏请求与保持条件")]),s._v(". 一次性申请所有的资源.")]),s._v(" "),t("p",[t("strong",[s._v("(3) 破坏不可抢占条件")]),s._v(". "),t("strong",[s._v("占用部分资源的线程进一步申请其他资源时")]),s._v(", 如果申请不到, "),t("strong",[s._v("可以主动释放它占有的资源")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("(4) 破坏环路等待")]),s._v(". 靠按序申请资源来预防. 按"),t("strong",[s._v("某一顺序申请资源, 释放资源则反序释放")]),s._v(". 破坏循环等待条件.")]),s._v(" "),t("h5",{attrs:{id:"_4-死锁避免"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-死锁避免"}},[s._v("#")]),s._v(" 4.死锁避免")]),s._v(" "),t("p",[s._v("在程序"),t("strong",[s._v("运行时")]),s._v("避免发生死锁.")]),s._v(" "),t("p",[t("strong",[s._v("安全状态")]),s._v(": 如果没有死锁发生, 并且即使所有进程突然请求对资源的最大需求, 也仍然存在某种调度次序能够使得每一个进程运行完毕, 则称该状态是安全的.")]),s._v(" "),t("p",[s._v("安全状态的检测与死锁的检测类似, 因为安全状态必须要求不能发生死锁.")]),s._v(" "),t("h5",{attrs:{id:"_5-鸵鸟策略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-鸵鸟策略"}},[s._v("#")]),s._v(" 5.鸵鸟策略")]),s._v(" "),t("p",[s._v("像鸵鸟把头埋在沙子里, "),t("strong",[s._v("假装根本没发生问题")]),s._v(". 因为解决死锁问题的代价很高, 因此鸵鸟策略这种"),t("strong",[s._v("不采取任务措施")]),s._v("的方案可能会获得更高的性能. 当发生死锁时如果对用户造成的影响不大, 或发生死锁的概率很低, 可以采用鸵鸟策略. 大多数操作系统如 Linux 和 Windows, 处理死锁问题的办法仅仅是"),t("strong",[s._v("忽略它")]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"_6-死锁检测"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-死锁检测"}},[s._v("#")]),s._v(" 6.死锁检测")]),s._v(" "),t("p",[s._v("不试图阻止死锁, 而是当"),t("strong",[s._v("检测到死锁发生时")]),s._v(", 采取措施进行"),t("strong",[s._v("恢复")]),s._v(".")]),s._v(" "),t("h6",{attrs:{id:"_1-每种类型一个资源的死锁检测"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-每种类型一个资源的死锁检测"}},[s._v("#")]),s._v(" (1)每种类型一个资源的死锁检测")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220528152558776.png",alt:"",title:"每种类型一个资源的死锁检测"}})]),s._v(" "),t("p",[t("strong",[s._v("资源分配图")]),s._v("中方框表示"),t("strong",[s._v("资源")]),s._v(", 圆圈表示"),t("strong",[s._v("进程")]),s._v(". 从图中可以抽取出环, 它满足了"),t("strong",[s._v("环路等待")]),s._v("条件, 因此会发生死锁.")]),s._v(" "),t("p",[s._v("每种类型一个资源的死锁检测算法是通过**==检测有向图是否存在环==**来实现, 从一个节点出发进行深度优先搜索, 对访问过的节点进行标记, 如果访问了已经标记的节点, 就表示有向图存在环, 也就是检测到死锁的发生.")]),s._v(" "),t("h6",{attrs:{id:"_2-每种类型多个资源的死锁检测"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-每种类型多个资源的死锁检测"}},[s._v("#")]),s._v(" (2)每种类型多个资源的死锁检测")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220528153024976.png",alt:"",title:"每种类型多个资源的死锁检测"}})]),s._v(" "),t("p",[s._v("上图中, 有"),t("strong",[s._v("三个进程四个资源")]),s._v(", 每个数据代表的含义如下:")]),s._v(" "),t("ul",[t("li",[s._v("E 向量: 资源总量.")]),s._v(" "),t("li",[s._v("A 向量: 资源剩余量.")]),s._v(" "),t("li",[s._v("C 矩阵: 每个进程所拥有的资源数量, 每一行都代表一个进程拥有资源的数量.")]),s._v(" "),t("li",[s._v("R 矩阵: 每个进程请求的资源数量.")])]),s._v(" "),t("p",[s._v("进程 P1 和 P2 所请求的资源都得不到满足, 只有进程 P3 可以, 让 P3 执行, 之后释放 P3 拥有的资源, 此时 A = (2 2 2 0). P2 可以执行, 执行后释放 P2 拥有的资源, A = (4 2 2 1) . P1 也可以执行. 所有进程都可以顺利执行, 没有死锁.")]),s._v(" "),t("p",[s._v("算法总结如下: 每个进程"),t("strong",[s._v("最开始时都不被标记")]),s._v(", 执行过程有可能被标记. 当算法结束时, "),t("strong",[s._v("任何没有被标记的进程都是死锁进程")]),s._v(".")]),s._v(" "),t("ol",[t("li",[s._v("寻找一个没有标记的进程 P"),t("sub",[s._v("i")]),s._v(", 它所请求的资源小于等于 A.")]),s._v(" "),t("li",[s._v("如果找到了这样一个进程, 那么将 C 矩阵的第 i 行向量加到 A 中, 标记该进程, 并转回 1.")]),s._v(" "),t("li",[s._v("如果没有这样一个进程, 算法终止.")])]),s._v(" "),t("h5",{attrs:{id:"_7-死锁恢复"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-死锁恢复"}},[s._v("#")]),s._v(" 7.死锁恢复")]),s._v(" "),t("p",[s._v("(1)利用"),t("strong",[s._v("抢占")]),s._v("恢复. (2)利用"),t("strong",[s._v("回滚")]),s._v("恢复. (3)通过"),t("strong",[s._v("杀死进程")]),s._v("恢复.")]),s._v(" "),t("p",[s._v("‍")]),s._v(" "),t("h4",{attrs:{id:"参考资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[s._v("#")]),s._v(" 参考资料")]),s._v(" "),t("ul",[t("li",[s._v("协程: jianshu.com/p/6dde7f92951e")]),s._v(" "),t("li",[s._v("labuladong文章: Linux的进程, 线程, 文件描述符是什么")])])])}),[],!1,null,null,null);t.default=a.exports}}]);