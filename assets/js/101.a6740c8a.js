(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{415:function(s,t,a){"use strict";a.r(t);var r=a(7),n=Object(r.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"_210-mysql索引🌟"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_210-mysql索引🌟"}},[s._v("#")]),s._v(" 210.MySQL索引🌟")]),s._v(" "),t("h4",{attrs:{id:"索引基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#索引基础"}},[s._v("#")]),s._v(" 索引基础")]),s._v(" "),t("h5",{attrs:{id:"_1-定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-定义"}},[s._v("#")]),s._v(" 1.定义")]),s._v(" "),t("blockquote",[t("p",[s._v("什么是索引")])]),s._v(" "),t("p",[s._v("索引是帮助高效获取数据的"),t("mark",[t("strong",[s._v("数据结构(本质)")])]),s._v(" . 索引就像是一本字典的"),t("strong",[s._v("目录")]),s._v(", 可以用于快速定位需要查找的内容.")]),s._v(" "),t("h5",{attrs:{id:"_2-索引使用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-索引使用场景"}},[s._v("#")]),s._v(" 2.索引使用场景")]),s._v(" "),t("blockquote",[t("p",[s._v("适合索引的场景")])]),s._v(" "),t("p",[s._v("经常用作"),t("strong",[s._v("查询条件")]),s._v("的字段需要创建索引, 经常需要"),t("strong",[s._v("排序, 分组和统计")]),s._v("的字段也需要建立索引, 查询中与其他表"),t("strong",[s._v("关联")]),s._v("的字段, 外键关系建立索引.")]),s._v(" "),t("p",[s._v("考虑使用"),t("strong",[s._v("索引覆盖")]),s._v(". 对数据很少被更新的表, 如果用户经常只查询其中的几个字段, 可以考虑在这几个字段上建立索引, 从而将表的扫描改变为索引的扫描.")]),s._v(" "),t("p",[s._v("对于"),t("strong",[s._v("非常小")]),s._v("的表, 大部分情况下简单的全表扫描比建立索引更高效; 对于"),t("strong",[s._v("中到大型的表, 索引就非常有效")]),s._v("; 但是对于"),t("strong",[s._v("特大型")]),s._v("的表, 建立和维护索引的代价将会随之增长, 可以考虑"),t("strong",[s._v("分库分表")]),s._v(".")]),s._v(" "),t("blockquote",[t("p",[s._v("不需要索引的场景")])]),s._v(" "),t("p",[s._v("表的记录太少时不需要创建索引.")]),s._v(" "),t("p",[s._v("数据"),t("strong",[s._v("重复")]),s._v("且分布非常均匀的"),t("strong",[s._v("字段")]),s._v("不需要创建索引, 如 true, false 之类.")]),s._v(" "),t("p",[s._v("查询时 WHERE 条件里"),t("strong",[s._v("用不到")]),s._v("的字段不需要创建索引.")]),s._v(" "),t("h5",{attrs:{id:"_3-索引的优点与代价"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-索引的优点与代价"}},[s._v("#")]),s._v(" 3.索引的优点与代价")]),s._v(" "),t("blockquote",[t("p",[s._v("优点")])]),s._v(" "),t("ul",[t("li",[s._v("可以大大减少服务器需要扫描的"),t("strong",[s._v("数据行数")]),s._v(", 加快数据的"),t("strong",[s._v("检索速度")]),s._v(".")]),s._v(" "),t("li",[s._v("帮助服务器"),t("strong",[s._v("避免进行排序和分组")]),s._v(", 以及"),t("strong",[s._v("避免创建临时表")]),s._v(".")]),s._v(" "),t("li",[s._v("B+ 树索引是"),t("strong",[s._v("有序")]),s._v("的, 将"),t("strong",[s._v("随机 I/O")]),s._v(" 变为"),t("strong",[s._v("顺序 I/O")]),s._v(", 会将相邻的数据都"),t("strong",[s._v("存储在一起")]),s._v(", 可以"),t("strong",[s._v("用于 ORDER BY 和 GROUP BY 操作")]),s._v(".")]),s._v(" "),t("li",[s._v("可以通过创建"),t("strong",[s._v("唯一索引")]),s._v(", 可以保证数据库表中每一行数据的"),t("strong",[s._v("唯一性")]),s._v(". 可以加速表和表之间的"),t("strong",[s._v("联结")]),s._v(", 特别是在实现数据的完整性方面特别有意义.")])]),s._v(" "),t("blockquote",[t("p",[s._v("索引的代价")])]),s._v(" "),t("p",[s._v("索引有很多优点, 但是不能滥用索引.")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("占用物理空间")]),s._v("。除了数据表占用数据空间之外, 每一个索引还要占一定的物理空间.")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("消耗额外的内存")]),s._v(". 在运行的时候, 索引会被加载到内存里面, 消耗"),t("strong",[s._v("内存空间")]),s._v(".")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("创建索引和维护索引要额外的开销")]),s._v(". 当对表中的数据进行增加, 删除和修改的时候, 索引也需要维护和变更. 这种开销的随着"),t("strong",[s._v("数据量")]),s._v("的增加而增加.")])])]),s._v(" "),t("h5",{attrs:{id:"_4-索引语法操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-索引语法操作"}},[s._v("#")]),s._v(" 4.索引语法操作")]),s._v(" "),t("blockquote",[t("p",[s._v("创建索引")])]),s._v(" "),t("p",[s._v("建表时可以直接创建索引, 也可以单独用 "),t("strong",[s._v("CREATE INDEX 或 ALTER TABLE")]),s._v(" 为表增加索引.")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("ALTER TABLE")]),s._v(": 用来创建"),t("strong",[s._v("普通索引, UNIQUE 索引或 PRIMARY KEY 索引")]),s._v(". 例如:")])]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ALTER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" table_name "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ADD")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INDEX")]),s._v(" index_name "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("column_list"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ALTER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" table_name "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ADD")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("UNIQUE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("column_list"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ALTER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" table_name "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ADD")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PRIMARY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("KEY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("column_list"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("其中 column_list 指出"),t("strong",[s._v("对哪些列进行索引, 多列时各列之间用逗号分隔")]),s._v(". 索引名 index_name 可选, 缺省时 MySQL 将根据第一个索引列赋一个名称.")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("CREATE INDEX")]),s._v(": 可对表"),t("strong",[s._v("增加普通索引或 UNIQUE 索引")]),s._v(". 例如:")])]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INDEX")]),s._v(" index_name "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" table_name "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("column_list"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("UNIQUE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INDEX")]),s._v(" index_name "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" table_name "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("column_list"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("这种方式索引名不可选. 不能用 CREATE INDEX 语句创建 PRIMARY KEY 索引.")]),s._v(" "),t("blockquote",[t("p",[s._v("创建唯一索引")])]),s._v(" "),t("p",[s._v("在创建索引时, 可以规定索引"),t("strong",[s._v("能否包含重复值")]),s._v(". 如果不能包含, 则索引应该创建为 "),t("strong",[s._v("PRIMARY KEY 或 UNIQUE 索引")]),s._v(". 对于单列唯一性索引, 这保证单列不包含重复的值. "),t("strong",[s._v("对于多列惟一性索引, 保证多个值的组合不重复")]),s._v(".")]),s._v(" "),t("blockquote",[t("p",[s._v("删除索引")])]),s._v(" "),t("p",[s._v("使用 "),t("strong",[s._v("DROP INDEX")]),s._v(" 语句来删除索引.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除索引index_name")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ALTER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" table_name "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DROP")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INDEX")]),s._v(" index_name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除主键索引")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ALTER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" table_name "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DROP")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PRIMARY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("KEY")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("如果从表中删除了"),t("strong",[s._v("某列")]),s._v(", 则索引会受到影响. 对于多列组合的联合索引, 如果删除其中的某列, 则该列也会从索引中删除.")]),s._v(" "),t("h4",{attrs:{id:"选择b-树实现索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#选择b-树实现索引"}},[s._v("#")]),s._v(" 选择B+树实现索引")]),s._v(" "),t("h5",{attrs:{id:"_1-为什么选择b-树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-为什么选择b-树"}},[s._v("#")]),s._v(" 1.为什么选择B+树")]),s._v(" "),t("p",[t("strong",[s._v("红黑树, B 树")]),s._v("等平衡树也可以用来实现索引, 但是"),t("strong",[s._v("文件系统及数据库系统普遍采用 B+ 树作为实现索引的数据结构")]),s._v(". 一个数据结构是否适合数据库索引, 取决于这种数据结构的增删改查性能. 并且在关系型数据库里面, 还额外要求对范围查询友好, 减少内存消耗.")]),s._v(" "),t("blockquote",[t("p",[s._v("为啥不用红黑树？")])]),s._v(" "),t("p",[s._v("与 B+ 树相比, 平衡二叉树, "),t("strong",[s._v("红黑树在同等数据量下, 高度更高, 性能更差")]),s._v(", 而且它们会频繁执行再平衡过程, 来保证树形结构平衡.")]),s._v(" "),t("blockquote",[t("p",[s._v("为啥不用B树?")])]),s._v(" "),t("p",[t("strong",[s._v("B 树的结点会同时存数据与索引, 其非叶子节点可能也会存储数据, 且叶子节点之间不含有指针")]),s._v(". 通常一个结点大小有限制, 如果一个结点存储的数据过多, 就会导致能存储的索引变少, 树的分叉变少, 使得树的高度变高, 加载到内存中的索引数量也会变少. 如果内存放不下非叶子节点, 那么就意味着查询非叶子节点的时候都需要"),t("strong",[s._v("磁盘 IO")]),s._v(".")]),s._v(" "),t("p",[s._v("所以索引实现一般用 B+ 树.")]),s._v(" "),t("blockquote",[t("p",[s._v("选择B+树实现索引")])]),s._v(" "),t("p",[s._v("B+ 树是基于 B 树和"),t("strong",[s._v("叶子节点顺序访问指针")]),s._v("进行实现, 它具有 B 树的平衡性, 并且通过"),t("strong",[s._v("顺序访问指针")]),s._v("来提高区间查询的性能. 具体结构参考: B+Tree.")]),s._v(" "),t("p",[t("strong",[s._v("存储")]),s._v(": B+ 树中非叶子节点不存储数据, "),t("strong",[s._v("只存储索引(冗余)")]),s._v(" , 因此可以放更多的索引. 但是 B+ 树存储索引时存在"),t("strong",[s._v("冗余")]),s._v(", 比如下图中索引 3 可能在索引中出现多次.")]),s._v(" "),t("p",[s._v("​"),t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20240824155331-7xjv86t.png",alt:"image"}}),s._v("​")]),s._v(" "),t("h5",{attrs:{id:"_2-选择b-树的好处"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-选择b-树的好处"}},[s._v("#")]),s._v(" 2.选择B+树的好处")]),s._v(" "),t("blockquote",[t("p",[s._v("优势1：树高更低, 查询性能更好")])]),s._v(" "),t("p",[s._v("平衡树查找操作的时间复杂度和"),t("strong",[s._v("树高 h 相关")]),s._v(", O(h) = O(log"),t("sub",[s._v("d")]),s._v("N), 其中 d 为每个节点的出度. 由于 B+ 的非叶子结点只用于存储索引，所以相比其他数据结构来说，一个索引页可以存储的索引数量更多，整颗树就更加"),t("strong",[s._v("矮平")]),s._v(". B+ 树的高度和二叉树之类的比起来更低, 树的高度代表了查询的耗时, 所以"),t("strong",[s._v("查询性能更好")]),s._v(".")]),s._v(" "),t("p",[s._v("InnoDB 中一个结点大小参数 "),t("strong",[s._v("Innodb_page_size")]),s._v(" 默认为 "),t("strong",[s._v("16K")]),s._v(". 如果存放的是 "),t("strong",[s._v("INT 类型")]),s._v("的索引, 则一个结点可以存"),t("strong",[s._v("上千个值")]),s._v(", 可以有上千个分叉.")]),s._v(" "),t("blockquote",[t("p",[s._v("优势2: 便于实现范围查询与排序")])]),s._v(" "),t("p",[s._v("B+ 树的叶子节点都通过指针串联起来了, "),t("strong",[s._v("适合范围查询与进行排序")]),s._v(".")]),s._v(" "),t("blockquote",[t("p",[s._v("优势3: 内存中可以存放更多索引数据(易忽略)")])]),s._v(" "),t("p",[s._v("B+ 树的非叶子节点没有存放数据, 所以"),t("strong",[s._v("可以把更多的索引数据加载到内存中")]),s._v(".")]),s._v(" "),t("p",[s._v("事实上, 在讨论使用索引提高查询性能的时候, "),t("strong",[s._v("一个默认的前提就是索引本身会全部装进内存中, 只有真实的数据行会放在磁盘上")]),s._v(". 否则索引也放在磁盘上的话, 使用索引的效果也就不明显了.")]),s._v(" "),t("p",[s._v("​"),t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/8be51ff8f95900e1a1597431b5e6a025-20231223175001-sy9w53g.png",alt:"图片"}}),s._v("​")]),s._v(" "),t("blockquote",[t("p",[s._v("优势4: 磁盘预读特性")])]),s._v(" "),t("p",[s._v("为减少磁盘 I/O 操作, 磁盘往往不是严格按需读取, 而是每次都会"),t("strong",[s._v("预读")]),s._v(". 预读过程中, 磁盘进行"),t("strong",[s._v("顺序读取")]),s._v(", 顺序读取不需要进行磁盘寻道, 并且只需要很短的旋转时间, 速度非常快. 操作系统一般将内存和磁盘分成"),t("strong",[s._v("固定大小的块")]),s._v(", 每一块称为"),t("strong",[s._v("一页")]),s._v(", 内存与磁盘以"),t("strong",[s._v("页为单位")]),s._v("交换数据. "),t("strong",[s._v("数据库将索引的一个节点的大小设置为页的大小, 使得一次 IO 就能完全载入一个节点. 利用预读特性, 相邻的节点也能够被预先载入")]),s._v(".")]),s._v(" "),t("h4",{attrs:{id:"索引分类与实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#索引分类与实现"}},[s._v("#")]),s._v(" 索引分类与实现")]),s._v(" "),t("p",[t("strong",[s._v("索引是在")]),s._v("​"),t("mark",[t("strong",[s._v("存储引擎层")])]),s._v("​"),t("strong",[s._v("实现的, 而不是 server 层, 所以不同存储引擎有不同的索引类型和实现")]),s._v(", 不同存储引擎可以采用 "),t("strong",[s._v("B+Tree, Hash")]),s._v(" 等不同的数据结构实现索引.")]),s._v(" "),t("p",[s._v("MySQL 的索引站在不同的角度, 就有不同的说法.")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("根据叶子节点是否存储数据来划分")]),s._v(", 可以分成"),t("strong",[s._v("聚簇索引")]),s._v("和"),t("strong",[s._v("非聚簇索引")]),s._v(".")]),s._v(" "),t("li",[t("strong",[s._v("如果某个索引包含某个查询的所有列")]),s._v(", 那么这个索引就是"),t("strong",[s._v("覆盖索引")]),s._v(".")]),s._v(" "),t("li",[t("strong",[s._v("如果索引的值必须是唯一的")]),s._v(", 不能重复, 那么这个索引就是"),t("strong",[s._v("唯一索引.")])]),s._v(" "),t("li",[t("strong",[s._v("如果索引的某个列, 只包含该列值的前一部分")]),s._v(", 那么这个索引就是"),t("strong",[s._v("前缀索引")]),s._v(". 比如在一个类型是 varchar(128) 的列上, 选择前 64 个字符作为索引.")]),s._v(" "),t("li",[t("strong",[s._v("如果某个索引由多个列组成")]),s._v(", 那么这个索引就是联合索引.")]),s._v(" "),t("li",[t("strong",[s._v("全文索引")]),s._v(" 是指用于支持文本模糊查询的索引.")]),s._v(" "),t("li",[t("strong",[s._v("哈希索引")]),s._v(" 是指使用哈希算法的索引, 但是 MySQL 的 InnoDB 引擎并不支持这种索引.")])]),s._v(" "),t("p",[t("mark",[t("strong",[s._v("一个索引可以同时是覆盖索引, 唯一索引, 前缀索引和组合索引, 站在不同的角度去看待索引就会有不同的说法")])]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"_1-聚簇索引与非聚簇索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-聚簇索引与非聚簇索引"}},[s._v("#")]),s._v(" 1.聚簇索引与非聚簇索引")]),s._v(" "),t("p",[t("strong",[s._v("如果索引叶子节点存储的是数据行, 那么它就是聚簇索引, 否则就是非聚簇索引")]),s._v(". 简单来说, "),t("strong",[s._v("某个数据表本身就可以看作是一棵使用主键搭建起来 B+ 树, 这棵树的叶子节点放着表的所有行. 而其他索引也是 B+ 树, 不同的是它们的叶子节点存放的是主键")]),s._v(".")]),s._v(" "),t("p",[s._v("聚簇索引也叫主键索引，非聚簇索引也叫辅助索引或者二级索引。")]),s._v(" "),t("h6",{attrs:{id:"主键索引-聚簇索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#主键索引-聚簇索引"}},[s._v("#")]),s._v(" 主键索引(聚簇索引)")]),s._v(" "),t("p",[t("strong",[s._v("InnoDB 的主键索引就是")]),s._v("​"),t("mark",[t("strong",[s._v("聚簇索引")])]),s._v("​ "),t("strong",[s._v(", 它通过主键聚集索引")]),s._v(". 聚集索引的含义:")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("表数据文件本身就是按 B+ 树组织的一个索引结构文件")]),s._v(".")]),s._v(" "),t("li",[t("strong",[s._v("叶子节点包含了完整的数据记录")]),s._v(".")])]),s._v(" "),t("p",[s._v("其组织方式如下. 其中非叶子结点全是索引值, 不存储任何数据; 在"),t("strong",[s._v("叶子结点上索引是主键值")]),s._v("(黄色格子), 同时叶子结点下面保存了"),t("strong",[s._v("全部完整的数据")]),s._v(". 这也是聚簇的含义.")]),s._v(" "),t("p",[s._v("​"),t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20240824155423-7bgbdih.png",alt:"image"}}),s._v("​")]),s._v(" "),t("p",[s._v("聚簇索引并不是一种单独的索引类型, 而是一种"),t("strong",[s._v("数据存储方式")]),s._v('. 当表有聚簇索引时, 它的数据行实际上存放在索引的叶子页中. "聚簇" 表示数据行和相邻的键值紧凑地存储在一起. 因为无法同时把数据行存放在两个不同的地方, 所以'),t("mark",[t("strong",[s._v("一个表只能有一个聚簇索引")])]),s._v(".")]),s._v(" "),t("p",[s._v("如果没有定义主键, InnoDB 会选择一个唯一的非空索引代替. 如果没有这样的索引, InnoDB 会隐式定义一个主键来作为聚簇索引.")]),s._v(" "),t("p",[t("strong",[s._v("聚簇索引的每一个叶子节点都包含了主键值, 事务 ID, 用于事务和 MVCC 的回滚指针以及所有的剩余列")]),s._v(".")]),s._v(" "),t("h6",{attrs:{id:"非主键索引-二级索引-辅助索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#非主键索引-二级索引-辅助索引"}},[s._v("#")]),s._v(" 非主键索引(二级索引/辅助索引)")]),s._v(" "),t("p",[s._v("对于"),t("strong",[s._v("非主键索引(二级索引)")]),s._v(" , InnoDB 组织方式大致如下. "),t("strong",[s._v("非主键索引叶子")]),s._v("结点存储的是"),t("mark",[t("strong",[s._v("主键的值")])]),s._v(', 这样的策略减少了当出现行移动或者数据页分裂时二级索引的维护工作. **二级索引并非像主键索引那样存储全部数据, 而是得到主键值之后通过主键进行查找, 也就是所谓的 "**​'),t("mark",[t("strong",[s._v("回表")])]),s._v("​ "),t("strong",[s._v('" 查询')]),s._v(".")]),s._v(" "),t("p",[s._v("回表查询时数据行可能存放在磁盘里, 所以触发磁盘 IO 之后能够读取出来. 磁盘 IO 是非常慢的, 因此回表性能极差, 在实践中要尽可能"),t("strong",[s._v("避免回表")]),s._v(".")]),s._v(" "),t("p",[s._v("​"),t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20240824162428-qrj68o2.png",alt:"image"}}),s._v("​")]),s._v(" "),t("p",[s._v("为什么这样做? 这是为了保证"),t("strong",[s._v("一致性和节省存储空间")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("一致性")]),s._v("是指当插入一条数据的时候, 如果"),t("strong",[s._v("非主键索引上也存储全部元素")]),s._v(", 那就需要同时保证在不同的地方都"),t("strong",[s._v("全部插入数据")]),s._v(", 这就难以保证一致性; "),t("strong",[s._v("只在主键索引下面存放完整数据")]),s._v(", 只需要维护"),t("strong",[s._v("一份完整数据")]),s._v(", 既能保证一致性也能"),t("strong",[s._v("节省空间")]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"_2-联合索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-联合索引"}},[s._v("#")]),s._v(" 2.联合索引")]),s._v(" "),t("p",[t("strong",[s._v("两个或更多个字段上的索引被称作联合索引")]),s._v(". 对于联合索引, MySQL "),t("strong",[s._v("从左到右")]),s._v("的使用索引中的字段, 一个查询可以只使用索引中的"),t("strong",[s._v("一部分")]),s._v(", 但只能是"),t("strong",[s._v("最左侧的部分")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("联合索引的存储结构就是把多个字段同时放到了叶子结点的 Key 中了")]),s._v(". 联合索引怎么比大小排序? 比如有三个索引字段 (a, b, c), 那么此时比较大小是"),t("strong",[s._v("依次")]),s._v("比较索引字段, 先比较 a 字段, 再比较 b 字段. 注意: 如果索引相同, 那么是"),t("strong",[s._v("挨着排存储在结点")]),s._v("中的, 只要保证右边的值大于等于左边的即可.")]),s._v(" "),t("p",[s._v("下面是一个创建联合索引的例子.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("KEY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("idx_age_name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("联合索引")]),s._v("在 InnoDB 中的组织方式如下, 可以看到"),t("strong",[s._v("多个索引字段存储到了一起")]),s._v(", 索引叶子结点中, "),t("strong",[s._v("黄色的部分是联合索引的全部值")]),s._v(".")]),s._v(" "),t("p",[s._v("​"),t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20240824162428-qrj68o2.png",alt:"image"}}),s._v("​")]),s._v(" "),t("p",[s._v("少用单值索引, 比如有一个表有 5 个字段需要建索引, 如果创建 5 个单值索引, 那么就会有"),t("strong",[s._v("五棵 B+ 树")]),s._v("结构存放在 InnoDB 引擎的  "),t("strong",[s._v(".ibd 文件")]),s._v("中. 如果使用"),t("strong",[s._v("联合索引")]),s._v(", 如果把五个字段联合起来"),t("strong",[s._v("建立联合索引")]),s._v(", 那么只会有一棵 B+ 树. 可以节约一些存储空间.")]),s._v(" "),t("h5",{attrs:{id:"_3-哈希索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-哈希索引"}},[s._v("#")]),s._v(" 3.哈希索引")]),s._v(" "),t("p",[s._v("哈希索引能以 O(1) 时间进行查找, 但失去了"),t("strong",[s._v("有序性")]),s._v(":")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("无法用于排序与分组")]),s._v(".")]),s._v(" "),t("li",[s._v("只支持"),t("strong",[s._v("精确查找")]),s._v(", 无法用于"),t("strong",[s._v("部分查找和范围查找")]),s._v(".")])]),s._v(" "),t("p",[s._v("哈希索引底层基于哈希表实现, 就是对需要"),t("strong",[s._v("查询的字段做一次哈希")]),s._v(", 然后进行查找.")]),s._v(" "),t("p",[t("strong",[s._v("InnoDB 存储引擎")]),s._v('有一个特殊的功能叫 "'),t("mark",[t("strong",[s._v("自适应哈希索引")])]),s._v('", 当某个索引值被使用的'),t("strong",[s._v("非常频繁")]),s._v("时, 会在 "),t("strong",[s._v("B+Tree 索引之上")]),s._v("再创建一个"),t("strong",[s._v("哈希索引")]),s._v(", 这样就让 B+Tree 索引具有哈希索引的一些优点, 比如"),t("strong",[s._v("快速")]),s._v("的哈希查找.")]),s._v(" "),t("h4",{attrs:{id:"索引特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#索引特性"}},[s._v("#")]),s._v(" 索引特性")]),s._v(" "),t("h5",{attrs:{id:"_1-覆盖索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-覆盖索引"}},[s._v("#")]),s._v(" 1.覆盖索引")]),s._v(" "),t("blockquote",[t("p",[s._v("定义")])]),s._v(" "),t("p",[t("strong",[s._v("如果查询的列全部都在某个索引里面, 那么数据库可以直接返回索引存储的这些列的值, 而不必回表查询了. 那么这个索引在这个查询下就是一个覆盖索引")]),s._v(". 所以覆盖索引并不是一个独立的索引, 而是某个索引相对于某个查询而言的.")]),s._v(" "),t("blockquote",[t("p",[s._v("覆盖索引优点")])]),s._v(" "),t("p",[s._v("覆盖索引的优点:")]),s._v(" "),t("ul",[t("li",[s._v("索引通常小于数据行的大小, 只读取索引能大大减少数据访问量.")]),s._v(" "),t("li",[t("mark",[t("strong",[s._v("避免进行索引的二次查询(回表查询)")])]),s._v(" . 如果能够实现覆盖索引, 覆盖索引(也是辅助索引)的索引中就能包含所有需要查询的字段, 就"),t("mark",[t("strong",[s._v("无需再访问主键索引进行回表查询")])]),s._v(", 减少了 IO 操作, 提升了查询效率.")])]),s._v(" "),t("blockquote",[t("p",[s._v("示例")])]),s._v(" "),t("p",[s._v("比如下图的二级索引, 如果某业务只需要查询 name 和 age 两个字段, 且如果 name 和 age 组成联合索引, 那么直接通过联合索引的"),t("strong",[s._v("索引列就能覆盖需要的值")]),s._v('了, 而不需要再次回表查询其他无关紧要的数据, 这个也体现了 "覆盖" 的含义.')]),s._v(" "),t("p",[s._v("​"),t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20240824162428-qrj68o2.png",alt:"image"}}),s._v("​")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 全查数据")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'LiLei'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("23")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" position "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'manager'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 只查所需要的字段")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" age "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'LiLei'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("23")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" position "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'manager'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("blockquote",[t("p",[s._v("基于覆盖索引的优化")])]),s._v(" "),t("p",[s._v("针对这个特性, 优化 SQL 性能里面有两种常见的说法.")]),s._v(" "),t("ol",[t("li",[t("strong",[s._v("只查询需要的列")]),s._v(". 减少 "),t("code",[s._v("SELECT *")]),s._v("​ 语句的使用, 这会把所有数据查出来, 尽量只查业务需要的字段, 尽量实现覆盖索引, 减少回表查询次数.")]),s._v(" "),t("li",[t("strong",[s._v("针对最频繁的查询来设计覆盖索引")]),s._v(".")])]),s._v(" "),t("p",[s._v("这两种说法本质上都是为了"),t("mark",[t("strong",[s._v("避免回表")])]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"_2-最左前缀法则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-最左前缀法则"}},[s._v("#")]),s._v(" 2.最左前缀法则")]),s._v(" "),t("p",[s._v("使用联合索引时需要遵守"),t("mark",[t("strong",[s._v("最左前缀法则")])]),s._v(". 指查询从索引的"),t("strong",[s._v("最左前列开始并且不跳过索引中的列")]),s._v(". 也就是要命中索引的话, "),t("strong",[s._v("必须包含左边的字段, 一个或多个都可以")]),s._v(". 结合上面联合索引的组织图, 可以看到联合索引是"),t("strong",[s._v("从左往右挨着比较")]),s._v("的. 如果缺少左边的字段, 那么其实也就是挨着比较, 也就相当于走"),t("strong",[s._v("全表")]),s._v("扫描了.")]),s._v(" "),t("p",[s._v("用一个例子来解释最左匹配原则的运行机制. 比如创建了一个在 A, B, C 三个列上的组合索引 "),t("code",[s._v("<A, B, C>")]),s._v("​. 下面用一个表格来展示一下索引列的值的关系.")]),s._v(" "),t("p",[s._v("​"),t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/47eb1d5a892461ac54ee312937293c9d-20231223175001-ij999cd.png",alt:"图片"}}),s._v("​")]),s._v(" "),t("p",[s._v("可以看到: "),t("mark",[t("strong",[s._v("A 是绝对有序的; 在 A 确定的情况下, B 是有序的; 在 A 和 B 都确定的情况下, C 是有序的")])]),s._v(".")]),s._v(" "),t("p",[s._v("那么反过来说:")]),s._v(" "),t("ul",[t("li",[s._v("如果 A 的值不确定, 那么 B 和 C 都是无序的. 例如当 A 取值可能为 1 或者 2 的时候, B 的取值可能是 "),t("code",[s._v("(23, 44, 31)")]),s._v("​.")]),s._v(" "),t("li",[s._v("如果 A 的值确定, 但是 B 的值不确定, 那么 C 是无序的. 例如当 A=1 而 B 可能是 44 或者 31 的时候, C 的值可能是 "),t("code",[s._v("(122, 132, 109)")]),s._v("​.")])]),s._v(" "),t("p",[s._v("所以执行一个 "),t("code",[s._v("WHERE A=a1 AND B=b1 AND C=c1")]),s._v("​ 的查询就类似于:")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" a in A "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("mark"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" a1 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" b in B "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("mark"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" b1 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" c in C "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" c "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" c1 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n              "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这就是要的数据, 拿到主键之后去磁盘里面加载出来")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("p",[s._v("从这个角度出发就能理解其他最左匹配原则的情况了.")]),s._v(" "),t("ul",[t("li",[s._v("如果查询条件是 "),t("code",[s._v("WHERE A = a1 AND B = b1")]),s._v("​, 那么可以推断出来, 数据库只会应用外层的两重循环, 不会对 C 进行过滤.")])]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" a in A "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("mark"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" a1 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" b in B "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("mark"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" b1 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这就是要的结果, 去磁盘里面读取")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("ul",[t("li",[s._v("如果查询条件是 "),t("code",[s._v("WHERE A = a1 OR B = b1")]),s._v("​, 那么这个查询"),t("strong",[s._v("并不会")]),s._v("使用这个索引.")])]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" a in A "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" a1 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      as "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("append")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("as"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" b in B "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" b1 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      bs "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("append")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("bs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// as 和 bs 的并集就是要的结果")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("ul",[t("li",[s._v("如果查询条件是 "),t("code",[s._v("WHERE A=a1 AND B > b1 AND C = c1")]),s._v("​, 那么这个查询只会使用索引的 A 和 B 两列.")])]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" a in A "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" a1 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" b in B "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" b1 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// C 是无序的, 所以用不了. 可以从前面的表格里面看出来")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 比如 b > 23 之后, 对应的 C 是乱序的")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这就是要的结果, 去磁盘里面读取")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("ul",[t("li",[s._v("如果查询条件是 "),t("code",[s._v("WHERE A !=a1")]),s._v("​, 那么这个查询也不会使用索引.")])]),s._v(" "),t("p",[s._v("这里整理了一个简单的口诀用于判断会不会使用索引. 按照组成索引的列的顺序, 从左往右: "),t("mark",[t("strong",[s._v("AND 用 OR 不用, 正用反不用, 范围则中断")])]),s._v(". 这个口诀是一个简化之后的版本, 还有一些意外情况是不符合这个口诀描述的规律的. 比如 "),t("code",[s._v("M = 1 OR N = 2")]),s._v("​, 如果单列 M 上有一个索引, 并且单列 N 上也有一个索引, 那么还是可能会使用 M 和 N 上的两个索引.")]),s._v(" "),t("p",[s._v("在实践中, 用索引还是不用索引, 就一个原则: "),t("mark",[t("strong",[s._v("看 EXPLAIN 命令的输出")])]),s._v(".")]),s._v(" "),t("blockquote",[t("p",[s._v("具体例子")])]),s._v(" "),t("p",[s._v("如联合索引是 "),t("strong",[s._v("key index_name (A, B, C)")]),s._v(" , 索引字段为 A(name), B(age), C(position). 则:")]),s._v(" "),t("ul",[t("li",[s._v("查询条件为 "),t("strong",[s._v("A, AB, ABC")]),s._v(" 时, "),t("strong",[s._v("会走索引")]),s._v(".")]),s._v(" "),t("li",[s._v("查询条件为 "),t("strong",[s._v("BC")]),s._v(", "),t("strong",[s._v("不会走索引")]),s._v(".")]),s._v(" "),t("li",[s._v("查询条件为 "),t("strong",[s._v("AC")]),s._v(", 只会走字段 "),t("strong",[s._v("A 的索引")]),s._v(".")])]),s._v(" "),t("p",[s._v("Case1: 这里查询条件只含 B 和 C, "),t("strong",[s._v("不会")]),s._v("走索引.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" position "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'manager'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("Case 2: 这里查询条件只含 C, "),t("strong",[s._v("不会")]),s._v("走索引.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" position "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'manager'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("Case 3: 这里查询条件只含 A, 即最左前缀, "),t("strong",[s._v("会")]),s._v("走索引.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'LiLei'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("Case 4: 这里查询条件含 A 和 B(写的顺序无所谓), 满足最左前缀, "),t("strong",[s._v("会")]),s._v("走索引.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'LiLei'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'LiLei'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h5",{attrs:{id:"_3-索引下推"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-索引下推"}},[s._v("#")]),s._v(" 3.索引下推")]),s._v(" "),t("h6",{attrs:{id:"定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[s._v("#")]),s._v(" 定义")]),s._v(" "),t("p",[s._v("索引下推(Index Condition Pushdown，简称 ICP)，是 MySQL5.6 版本的新特性，它能"),t("strong",[s._v("减少回表查询次数，提高查询效率")]),s._v("。")]),s._v(" "),t("p",[s._v("MySQL 服务层负责 SQL 语法解析、生成执行计划等，并调用存储引擎层去执行数据的存储和检索。"),t("strong",[s._v("索引下推的下推其实就是指将部分上层（服务层）负责的事情，交给了下层（引擎层）去处理")]),s._v("。")]),s._v(" "),t("p",[s._v("来具体看一下，在没有使用 ICP 的情况下，MySQL 的查询：")]),s._v(" "),t("ul",[t("li",[s._v("存储引擎读取索引记录；")]),s._v(" "),t("li",[s._v("根据索引中的主键值，定位并读取完整的行记录（回表）；")]),s._v(" "),t("li",[s._v("存储引擎把记录交给 Server 层去检测该记录是否满足 WHERE 条件。")])]),s._v(" "),t("p",[s._v("使用 ICP 的情况下，查询过程：")]),s._v(" "),t("ul",[t("li",[s._v("存储引擎读取索引记录（不是完整的行记录）；")]),s._v(" "),t("li",[t("strong",[s._v("判断 WHERE 条件部分能否用索引中的列来做检查，条件不满足，则处理下一行索引记录")]),s._v("；")]),s._v(" "),t("li",[s._v("条件满足，使用索引中的主键去定位并读取完整的行记录（回表）；")]),s._v(" "),t("li",[s._v("存储引擎把记录交给 Server 层，Server 层检测该记录是否满足 WHERE 条件的其余部分。")])]),s._v(" "),t("h6",{attrs:{id:"示例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[s._v("#")]),s._v(" 示例")]),s._v(" "),t("p",[s._v("加入有一张用户表 "),t("code",[s._v("tuser")]),s._v("​，表里创建联合索引（name, age）。")]),s._v(" "),t("p",[s._v("现在有一个需求：检索出表中名字第一个字是张，而且年龄是 10 岁的所有用户。SQL 如下：")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" tuser "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'张%'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" age"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("假设数据如下：")]),s._v(" "),t("p",[s._v("​"),t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20250219215442-sty5h8m.png",alt:"image"}}),s._v("​")]),s._v(" "),t("p",[s._v("索引最左匹配原则，这个语句在搜索索引树的时候，只能用 "),t("code",[s._v("张")]),s._v("​，找到的第一个满足条件的记录 id 为 1。那接下来的步骤是什么呢？")]),s._v(" "),t("blockquote",[t("p",[s._v("没有使用ICP")])]),s._v(" "),t("p",[s._v("在 MySQL 5.6 之前，也就是没有使用 ICP 的情况下，存储引擎根据通过联合索引找到 "),t("code",[s._v("name like '张%'")]),s._v("​ 的主键 id（1、4），"),t("strong",[s._v("逐一进行回表扫描，去聚簇索引找到完整的行记录")]),s._v("，之后由 server 层再对数据根据 "),t("code",[s._v("age = 10")]),s._v("​ 进行筛选。")]),s._v(" "),t("p",[s._v("​"),t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20250219215637-z4sp7p0.png",alt:"image"}}),s._v("​")]),s._v(" "),t("p",[s._v("可以看到需要"),t("strong",[s._v("回表两次")]),s._v("，这就把联合索引的另一个字段 "),t("code",[s._v("age")]),s._v("​ 浪费了。")]),s._v(" "),t("blockquote",[t("p",[s._v("使用了ICP")])]),s._v(" "),t("p",[s._v("而 MySQL 5.6 以后，如果使用了 ICP，那么存储引擎会根据（name，age）联合索引，找到 "),t("code",[s._v("name like '张%'")]),s._v("​，由于联合索引中包含 "),t("code",[s._v("age")]),s._v("​ 列，所以"),t("strong",[s._v("存储引擎")]),s._v("直接再联合索引里按照 "),t("code",[s._v("age = 10")]),s._v("​ 就能进行过滤。也就是"),t("strong",[s._v("存储引擎先进行一遍过滤，再把过滤后的数据进行回表扫描")]),s._v("。这个过程筛选过滤的过程就是由服务器层下沉到了存储引擎层，所以就叫索引下推。")]),s._v(" "),t("p",[s._v("​"),t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20250219220051-au0oho5.png",alt:"image"}}),s._v("​")]),s._v(" "),t("p",[s._v("可以看到"),t("strong",[s._v("只回表了一次")]),s._v("。")]),s._v(" "),t("p",[s._v("除此之外还可以看一下执行计划，看到 "),t("code",[s._v("Extra")]),s._v("​ 一列里 "),t("code",[s._v("Using index condition")]),s._v("​，这就是用到了索引下推。")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-----------------------+")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" select_type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" partitions "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" possible_keys "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("key")]),s._v("      "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" key_len "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" ref  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rows")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" filtered "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Extra                 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-----------------------+")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SIMPLE")]),s._v("      "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" tuser "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v("       "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" range "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" na_index      "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" na_index "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("102")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("25.00")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Using")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("index")]),s._v(" condition "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("----+-------------+-------+------------+-------+---------------+----------+---------+------+------+-------")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h6",{attrs:{id:"使用条件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用条件"}},[s._v("#")]),s._v(" 使用条件")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("只能用于 range、 ref、 eq_ref、ref_or_null 访问方法。")])]),s._v(" "),t("li",[t("p",[s._v("只能用于 InnoDB 和 MyISAM 存储引擎及其分区表。")])]),s._v(" "),t("li",[t("p",[t("mark",[t("strong",[s._v("对 InnoDB 存储引擎来说，索引下推只适用于二级索引（也叫辅助索引）。因为索引下推的目的是为了减少回表次数，也就是要减少 IO 操作。对于 InnoDB 的聚簇索引来说，数据和索引是在一起的，也就不存在回表这一说")])]),s._v("。")])]),s._v(" "),t("li",[t("p",[s._v("引用了子查询的条件不能下推。")])]),s._v(" "),t("li",[t("p",[s._v("引用了存储函数的条件不能下推，因为存储引擎无法调用存储函数。")])])]),s._v(" "),t("h4",{attrs:{id:"主键规则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#主键规则"}},[s._v("#")]),s._v(" 主键规则")]),s._v(" "),t("p",[s._v("InnoDB 设计的数据文件就是依附于 B+ 树的, "),t("strong",[s._v("所有数据都依附在主键上, 所以必须有主键")]),s._v(". 如果建表时没有主键, 那么存储引擎会自动找一个可以充当唯一索引的字段当做主键; 如果找不到就会"),t("strong",[s._v("自动生成")]),s._v("一个 rowId 当做主键.")]),s._v(" "),t("h5",{attrs:{id:"_1-索引与主键选择"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-索引与主键选择"}},[s._v("#")]),s._v(" 1.索引与主键选择")]),s._v(" "),t("blockquote",[t("p",[s._v("为什么推荐使用整型的自增主键?")])]),s._v(" "),t("p",[s._v("推荐使用自增整型主键.")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("主键为啥推荐用整型")]),s._v("? 索引的查找都是"),t("strong",[s._v("基于比较")]),s._v("的, 用整型非常方便.")]),s._v(" "),t("li",[t("strong",[s._v("为什么推荐自增")]),s._v("? 如果是自增的话, 新的数据"),t("strong",[s._v("直接顺序")]),s._v("放就行了, 如果不是自增, 如果插入数据的索引结点"),t("strong",[s._v("已经存满之后")]),s._v(", 此时为了维护 B+Tree 的平衡, 会导致前面的索引结点进行"),t("mark",[t("strong",[s._v("页分裂与平衡, 影响性能")])]),s._v(".")])]),s._v(" "),t("p",[t("strong",[s._v("不要使用更新频繁的列作为主键. 不要使用 UUID, MD5, HASH 字符串列作为主键, 它们无法保证数据的顺序增长且可能占用更多空间")]),s._v(". 主键值应该"),t("strong",[s._v("尽量短")]),s._v(", 由于一个结点的大小是固定的, 如果主键长度较大, 会导致一个结点存储的索引值个数变少, 导致 B+ 树的分叉变少, 进而导致树变高而影响性能.")]),s._v(" "),t("h4",{attrs:{id:"索引失效"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#索引失效"}},[s._v("#")]),s._v(" 索引失效")]),s._v(" "),t("p",[t("strong",[s._v("有一些情况会出现未使用索引从而进行全表扫描的情况")]),s._v(". 最终数据库会不会用索引, 也是一个比较难说的事情, "),t("strong",[s._v("跟查询有关, 也跟数据量有关")]),s._v(". 在实践中, 是否使用索引以及使用什么索引, 都要以 EXPLAIN 为准.")]),s._v(" "),t("blockquote",[t("p",[s._v("MySQL优化器认为不需要走索引")])]),s._v(" "),t("p",[s._v("MySQL 优化器会对执行的 SQL 进行分析，并选择其认为比较好的执行方式，其中就涉及索引的选择。因此有的情况下，即使存在索引可能也不会使用，比如：")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("字段区分度不大")]),s._v(". 比如 status 列只有 0 和 1 两个值, 那么数据库也有可能不用.")]),s._v(" "),t("li",[t("strong",[s._v("数据量太小")]),s._v(", 或者 MySQL 觉得全表扫描反而更快的时候.")])]),s._v(" "),t("p",[s._v('这里说的是 "可能不使用索引", 不是说一定不使用索引.')]),s._v(" "),t("p",[s._v("这种情况下，还可以使用 FORCE INDEX(强迫使用索引), USE INDEX(使用索引)或者 IGNORE INDEX(忽略索引)之类的 SQL 提示来让数据库选择使用指定的索引, 但是使用这一类功能的时候, 要千万注意数据库是怎么支持的. 有些数据库是根本不管这些提示, 有些则是特定情况下不管. 当然"),t("strong",[s._v("最佳实践还是不要用这些东西")]),s._v(", 逼不得已的时候比如说要优化性能了再考虑使用.")]),s._v(" "),t("blockquote",[t("p",[s._v("在索引列上做任何操作, 比如计算, 函数, 自动或手动类型转换等导致索引失效")])]),s._v(" "),t("p",[s._v("在进行查询时, "),t("strong",[s._v("索引列不能是表达式的一部分, 也不要对其施加函数或者成为函数的参数, 否则无法使用索引")]),s._v(". 这是因为函数或者计算操作需要先进行数值转换, 函数或者操作的结果值在索引树中并不存在, 因此只能依次进行计算, 而不会走索引.")]),s._v(" "),t("p",[s._v("查询中有函数时直接不走索引(注意新版本已经 新增函数索引 相关的支持了).")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用了函数")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("left")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Jack'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("date")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("hire_time"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'2018-09-30'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 对索引列进行运算")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" actor_id "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" actor "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" actor_id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("这种情况可以根据查询需求"),t("strong",[s._v("转换函数操作")]),s._v("为范围查询从而使用索引.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" hire_time "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'2018-09-30'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" hire_time "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'2018-09-30'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("blockquote",[t("p",[s._v("范围查找之后的索引失效")])]),s._v(" "),t("p",[t("mark",[t("strong",[s._v("MySQL 优化器会根据检索比例, 表大小等多个因素整体评估是否使用索引")])]),s._v(". 在使用不等于 "),t("code",[s._v("(!=), not in, not exists")]),s._v("​ 等范围查询的时候, 如果 MySQL 估计使用"),t("strong",[s._v("全表扫秒比使用索引快")]),s._v(", 则不使用索引. (参考: 优化器确定执行方案).")]),s._v(" "),t("p",[s._v("例如列 key 均匀分布在 1 和 100 之间, 下面的查询如果走索引可能会"),t("strong",[s._v("检索两棵索引树")]),s._v("(一棵二级索引树, 一棵聚簇索引树), 这时候可能还不如直接走聚簇索引"),t("strong",[s._v("全表查")]),s._v("来得快, 所以下面的查询可能就不走索引.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" table_name "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("key")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("key")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("99")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("下面的句子中第一句走三个索引, 但是第二个 SQL 可能只走了两个索引, 也就是 age 是范围查找. 这里 age 后面的索引失效了, 也就是只会走 name 和 age 两个索引, position 失效了.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'LiLei'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" position "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'manager'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'LiLei'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" position "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'manager'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("blockquote",[t("p",[s._v("使用不等于(!= 或 <>)导致索引失效")])]),s._v(" "),t("p",[s._v("索引查询一般进行"),t("strong",[s._v("相等比较")]),s._v(", 比较不相等其实也就是"),t("strong",[s._v("全表扫描")]),s._v("了.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'LiLei'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("blockquote",[t("p",[s._v("IS NULL, IS NOT NULL 无法使用索引")])]),s._v(" "),t("p",[s._v("这与使用不等于失效的原因类似. "),t("strong",[s._v("因此建议所有字段设置为 NOT NULL, 并设置默认值, 这样保证索引命中")]),s._v(". 否则可能导致引擎放弃使用索引而进行"),t("strong",[s._v("全表扫描")]),s._v(". 同时默认值也能"),t("strong",[s._v("防止业务代码中出现 NPE")]),s._v(".")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("IS")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("blockquote",[t("p",[s._v("模糊查询 LIKE 以通配符开头导致索引失效")])]),s._v(" "),t("p",[t("strong",[s._v("根据最左前缀法则, 通配符 % 在前面无法走索引")]),s._v(", 直接全表扫描.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%Lei'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("% 在后面是可以走索引的.")]),s._v("  这是知道前缀的情况, 此时"),t("strong",[s._v("对比前缀")]),s._v("即可.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Lei%'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("问题: 解决 like '%字符串%' 索引不被使用的方法?")])]),s._v(" "),t("ul",[t("li",[s._v("查询的字段使用"),t("strong",[s._v("覆盖索引而不是查询所有字段")]),s._v(".")])]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" position "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%Lei%'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("如果不能使用覆盖索引则可以使用"),t("strong",[s._v("搜索引擎")]),s._v(", 如 ES.")])]),s._v(" "),t("blockquote",[t("p",[s._v("数据类型的隐式转换导致索引失效")])]),s._v(" "),t("p",[s._v("如果列数据类型为"),t("strong",[s._v("字符串")]),s._v(", 则 WHERE 条件中必须"),t("strong",[s._v("将字符常量值加引号")]),s._v(", 否则即使该列上存在索引, 也不会被使用. 因为执行的时候可能做了一次函数转换, 导致索引失效. 下面第一句走索引, 第二句不走索引.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'1000'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("blockquote",[t("p",[s._v("使用OR有可能引起索引失效")])]),s._v(" "),t("p",[s._v("对于 OR 查询可能不会使用索引, "),t("strong",[s._v("MySQL 优化器会根据检索比例, 表大小等多个因素整体评估是否使用索引")]),s._v(".")]),s._v(" "),t("p",[s._v("例如:")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" key1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("OR")]),s._v(" key2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'b'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("如果在 key1 上有索引而在 key2 上没有索引, 则该查询也不会走索引.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'LiLei'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("or")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'HanMeimei'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("blockquote",[t("p",[s._v("使用联合索引失效")])]),s._v(" "),t("p",[s._v("使用"),t("strong",[s._v("联合索引")]),s._v("时, 如果不满足最左前缀法则时可能不会走索引.")]),s._v(" "),t("h4",{attrs:{id:"索引优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#索引优化"}},[s._v("#")]),s._v(" 索引优化")]),s._v(" "),t("h5",{attrs:{id:"_1-确保使用索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-确保使用索引"}},[s._v("#")]),s._v(" 1.确保使用索引")]),s._v(" "),t("p",[s._v("对于没有使用索引的情况, 考虑建立并使用索引. "),t("strong",[s._v("很多业务场景会基于已有的数据表进行持续的迭代，可能迭代的过程中，引入了新的查询但是没有考虑新增索引")]),s._v(".")]),s._v(" "),t("p",[s._v("对于建立了索引的情况, 确保确实使用到了索引, 也就是避免上述的各种会导致索引失效的情况.")]),s._v(" "),t("h5",{attrs:{id:"_2-联合索引优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-联合索引优化"}},[s._v("#")]),s._v(" 2.联合索引优化")]),s._v(" "),t("p",[t("strong",[s._v("在需要使用多个列作为条件进行查询时, 使用联合索引比使用多个单值索引性能更好")]),s._v(".")]),s._v(" "),t("p",[s._v("例如下面的语句中, 最好把 actor_id 和 film_id 设置为联合索引.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" film_id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" actor_ id "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" film_actor "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" actor_id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" film_id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h5",{attrs:{id:"_3-覆盖索引优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-覆盖索引优化"}},[s._v("#")]),s._v(" 3.覆盖索引优化")]),s._v(" "),t("p",[t("strong",[s._v("覆盖索引就是索引里面本身已经包含了所有需要查询的字段值. 因此可以根据业务查询特征, 对查询的列建立联合索引, 进而实现覆盖索引的效果")]),s._v(". 参考: 覆盖索引.")]),s._v(" "),t("p",[t("strong",[s._v("减少 SELECT * 语句的使用, 这会把所有数据查出来, 尽量只查业务需要的字段, 尽量实现覆盖索引, 减少回表查询次数")]),s._v(". 因为如果有的列没有建索引, 为了拿到这部分数据, 就一定会触发回表查询.")]),s._v(" "),t("h5",{attrs:{id:"_4-索引列优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-索引列优化"}},[s._v("#")]),s._v(" 4.索引列优化")]),s._v(" "),t("h6",{attrs:{id:"索引列顺序优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#索引列顺序优化"}},[s._v("#")]),s._v(" 索引列顺序优化")]),s._v(" "),t("p",[t("mark",[t("strong",[s._v("将区分度(选择性)最高的放在联合索引的最左侧")])]),s._v(".")]),s._v(" "),t("blockquote",[t("p",[s._v("区分度(选择性) = 列中不同值的数量 / 列的总行数.")])]),s._v(" "),t("p",[t("strong",[s._v("索引选择性指: 不重复的索引值和记录总数的比值, 一般字段取值范围更广的选择性更强")]),s._v(". 选择性最大值为 1, 此时每个记录都有唯一的索引与其对应.")]),s._v(" "),t("p",[t("strong",[s._v("选择性越高, 查询效率也越高, 所以尽量把选择性高的字段放在联合索引的左侧, 这样能更快的过滤更多的数据")]),s._v(".")]),s._v(" "),t("p",[s._v("例如下面显示的结果中 customer_id 的选择性比 staff_id 更高, 因此最好把 customer_id 列放在多列索引的前面.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("COUNT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DISTINCT")]),s._v(" staff_id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("COUNT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" staff_id_selectivity"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("COUNT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DISTINCT")]),s._v(" customer_id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("COUNT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" customer_id_selectivity"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("COUNT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" payment"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("div",{staticClass:"language-html line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-html"}},[t("code",[s._v("staff_id_selectivity: 0.0001\ncustomer_id_selectivity: 0.0373\nCOUNT(*): 16049\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h6",{attrs:{id:"索引列选择优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#索引列选择优化"}},[s._v("#")]),s._v(" 索引列选择优化")]),s._v(" "),t("p",[t("strong",[s._v("尽量把字段长度小的列放在联合索引的最左侧")]),s._v(".")]),s._v(" "),t("p",[s._v("因为字段长度越小, 一页能存储的数据量越大, IO 性能也就越好. 建立索引的目的是希望通过索引进行数据查找, 减少随机 IO, 增加查询性能, 如果索引能过滤出越少的数据, 则从磁盘中读入的数据也就越少.")]),s._v(" "),t("blockquote",[t("p",[s._v("索引列选择")])]),s._v(" "),t("ul",[t("li",[s._v("频繁出现在 "),t("strong",[s._v("WHERE 中的列")]),s._v(", 主要是为了避免全表扫描.")]),s._v(" "),t("li",[s._v("频繁出现在 "),t("strong",[s._v("ORDER BY 的列")]),s._v(", 这是为了避免数据库在查询出来结果之后再次排序. 在所有的排序场景中, 都应该尽量利用索引来排序, 这样能够有效减轻数据库的负担, 加快响应速度.")])]),s._v(" "),t("h5",{attrs:{id:"_5-冗余和重复索引优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-冗余和重复索引优化"}},[s._v("#")]),s._v(" 5.冗余和重复索引优化")]),s._v(" "),t("p",[t("strong",[s._v("重复索引是指在相同的列上按照相同的顺序创建的相同类型的索引")]),s._v(". 应该避免这样创建重复索引, 发现以后也应该立即移除, 会增加维护的成本和浪费存储空间, 以及增加查询优化器生成执行计划的时间.")]),s._v(" "),t("p",[s._v("冗余索引和重复索引有一些不同. 如果创建了索引(A, B), 再创建索引(A)就是冗余索引, 因为这只是前一个索引的前缀索引. 大多数情况下都不需要冗余索引, 应该尽量扩展已有的索引而不是创建新索引.")]),s._v(" "),t("ul",[t("li",[s._v("重复索引示例: PRIMARY KEY(id), INDEX(id), UNIQUE INDEX(id)")]),s._v(" "),t("li",[s._v("冗余索引示例: INDEX(a, b, c), INDEX(a, b), INDEX(a)")])]),s._v(" "),t("h4",{attrs:{id:"索引设计经验"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#索引设计经验"}},[s._v("#")]),s._v(" 索引设计经验")]),s._v(" "),t("blockquote",[t("p",[s._v("代码先行, 索引后上")])]),s._v(" "),t("p",[s._v("一般应该等到主体业务功能开发完毕, 把涉及到该表相关 SQL 都要拿出来分析之后再建立索引.")]),s._v(" "),t("blockquote",[t("p",[s._v("限制每张表上的索引数量, 建议单张表索引不超过5个")])]),s._v(" "),t("p",[s._v("索引并不是越多越好! 索引可以提高效率同样可以降低效率.")]),s._v(" "),t("p",[s._v("索引可以增加查询效率, 但同样也会降低数据"),t("strong",[s._v("插入和更新")]),s._v("的效率, 甚至有些情况下会降低查询效率. 因为 MySQL 优化器在选择如何优化查询时, 会根据统一信息, 对每一个可以用到的索引来进行评估, 以生成出一个最好的执行计划, 如果同时有很多个索引都可以用于查询, 就会增加 MySQL 优化器生成执行计划的时间, 同样会降低查询性能.")]),s._v(" "),t("blockquote",[t("p",[s._v("禁止给表中的每一列都建立单独的索引")])]),s._v(" "),t("p",[s._v("如果几个列是同时查询的, 可以设计成"),t("strong",[s._v("联合索引, 而不是给每个列都单独建一个索引(单值索引)")]),s._v(" . 联合索引"),t("strong",[s._v("尽量覆盖条件")]),s._v(".")]),s._v(" "),t("blockquote",[t("p",[s._v("对于需要建立索引的字段建议")])]),s._v(" "),t("ul",[t("li",[s._v("出现在 SELECT, UPDATE, DELETE 语句的 WHERE 条件中的字段.")]),s._v(" "),t("li",[s._v("包含在 ORDER BY, GROUP BY, DISTINCT 中的字段.")]),s._v(" "),t("li",[s._v("不要给每个字段都建立一个索引, 将一起查询中的字段建立"),t("strong",[s._v("联合索引")]),s._v("效果更好.")])]),s._v(" "),t("blockquote",[t("p",[s._v("对于频繁的查询优先考虑使用覆盖索引")])]),s._v(" "),t("p",[s._v("只查询业务需要的字段, 使用覆盖索引, 避免进行回表查询.")]),s._v(" "),t("blockquote",[t("p",[s._v("索引与外键")])]),s._v(" "),t("p",[t("strong",[s._v("尽量避免使用外键约束")]),s._v(". 外键会影响父表和子表的写操作从而降低性能, 不建议使用外键约束, 但一定要在表与表之间的"),t("strong",[s._v("关联键")]),s._v("上建立索引. 虽然外键可用于保证数据的参照完整性, 但建议在"),t("strong",[s._v("业务端")]),s._v("实现.")]),s._v(" "),t("blockquote",[t("p",[s._v("长字符串可以考虑建立前缀索引")])]),s._v(" "),t("p",[s._v("如果对较长的大字段做索引可能会比较占用磁盘空间, 导致每个索引页存放的索引值较少. 因此可以只对该字段的前缀建立索引, 比如针对这个字段的前 20 个字符建立索引, 也就是将前 20 个字符放在索引树里, 比如 KEY index(name(20),age,position). 但是前缀索引在 ORDER BY 操作的时候会失效, 因为只存储了部分数据.")]),s._v(" "),t("p",[s._v("此时在 WHERE 条件里搜索的时候, 如果是根据 name 字段来搜索, 那么此时就会先到索引树里根据 name 字段的前 20 个字符去搜索, 定位到之后前 20 个字符的前缀匹配的部分数据之后, 再回到聚簇索引提取出来完整的 name 字段值进行比对.")]),s._v(" "),t("blockquote",[t("p",[s._v("对慢查询做优化")])]),s._v(" "),t("p",[s._v("定期排查系统中的慢查询 SQL, 做针对性的优化. 有的慢查就是因为缺少索引导致的.")]),s._v(" "),t("p",[s._v("‍")]),s._v(" "),t("p",[s._v("‍")]),s._v(" "),t("h4",{attrs:{id:"参考资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[s._v("#")]),s._v(" 参考资料")]),s._v(" "),t("ul",[t("li",[s._v("美团技术团队的帖子: "),t("a",{attrs:{href:"https://www.cnblogs.com/php-rearch/p/5034118.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://www.cnblogs.com/php-rearch/p/5034118.html"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=n.exports}}]);