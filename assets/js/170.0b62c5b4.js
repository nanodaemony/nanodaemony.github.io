(window.webpackJsonp=window.webpackJsonp||[]).push([[170],{498:function(s,t,a){"use strict";a.r(t);var n=a(4),r=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"_6-程序编译与代码优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-程序编译与代码优化"}},[s._v("#")]),s._v(" 6.程序编译与代码优化")]),s._v(" "),t("p",[s._v("下面从虚拟机层面来看看虚拟机在"),t("strong",[s._v("编译期间与运行期")]),s._v("对编写的代码采用了哪些"),t("strong",[s._v("优化手段")]),s._v(".")]),s._v(" "),t("h4",{attrs:{id:"代码执行模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#代码执行模式"}},[s._v("#")]),s._v(" 代码执行模式")]),s._v(" "),t("p",[s._v("虚拟机执行代码的几种模式:")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("解释模式")]),s._v("(Interpreted Mode): "),t("strong",[s._v("只使用解释器")]),s._v("(-Xint 强制 JVM 使用"),t("strong",[s._v("解释模式")]),s._v("), 执行一行 JVM "),t("strong",[s._v("字节码")]),s._v("就编译一行为机器码.")]),s._v(" "),t("li",[t("strong",[s._v("编译模式")]),s._v("(Compiled Mode): "),t("strong",[s._v("只使用编译器")]),s._v("(-Xcomp JVM 使用编译模式), 先将所有 JVM 字节码"),t("strong",[s._v("一次编译")]),s._v("为机器码, 然后一次性执行所有机器码.")]),s._v(" "),t("li",[t("strong",[s._v("混合模式")]),s._v("(Mixed Mode): 依然使用"),t("strong",[s._v("解释模式")]),s._v('执行代码, 但是对于一些 "'),t("strong",[s._v("热点")]),s._v('" 代码采用'),t("strong",[s._v("编译模式")]),s._v("执行. JVM 一般采用"),t("strong",[s._v("混合模式")]),s._v("执行代码.")])]),s._v(" "),t("p",[t("strong",[s._v("解释模式启动快")]),s._v(", 对于只需要执行部分代码, 并且大多数代码"),t("strong",[s._v("只会执行一次")]),s._v("的情况比较适合; "),t("strong",[s._v("编译模式启动慢")]),s._v(", 但是后期"),t("strong",[s._v("执行速度快")]),s._v(", 而且比较占用内存, 因为机器码的数量至少是 JVM 字节码的十倍以上, 这种模式适合代码可能会被反复执行的场景; "),t("strong",[s._v('混合模式是 JVM 默认采用的执行代码方式, 一开始还是解释执行, 但是对于少部分 "热点" 代码会采用编译模式执行, 这些热点代码对应的机器码会被缓存起来, 下次再执行无需再编译, 这就是常见的 JIT')]),s._v("(Just In Time Compiler)"),t("strong",[s._v("即时编译技术")]),s._v(". 在"),t("strong",[s._v("即时编译过程")]),s._v("中 JVM 可能会对的代码最一些"),t("strong",[s._v("优化")]),s._v(", 比如"),t("strong",[s._v("对象逃逸分析")]),s._v("等.")]),s._v(" "),t("p",[s._v("Java 程序在运行的时候, 主要就是执行字节码指令, 一般这些指令会按照顺序解释执行, 这种就是解释执行. 但是那些被频繁调用的代码, 比如调用次数很高或者在 for 循环里的那些代码,如果按照解释执行, 效率是非常低的. 这些代码称为热点代码. 为了提高热点代码的执行效率, 在运行时, 虚拟机将会把这些代码编译成与本地平台相关的机器码, 并进行各种层次的优化. 完成这个任务的编译器, 就称为即时编译器(Just In Time Compiler), 简称 JIT 编译器.")]),s._v(" "),t("h4",{attrs:{id:"编译期优化-早期优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编译期优化-早期优化"}},[s._v("#")]),s._v(" 编译期优化(早期优化)")]),s._v(" "),t("p",[s._v("Java 语言的「"),t("strong",[s._v("编译期")]),s._v("」其实是一段「"),t("strong",[s._v("不确定")]),s._v("」的操作过程. 可能是:")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("前端编译器")]),s._v(": (如 "),t("strong",[s._v("Javac")]),s._v(")把 .java 文件编译成 .class 文件的过程.")]),s._v(" "),t("li",[t("strong",[s._v("即时编译器")]),s._v(": 程序"),t("strong",[s._v("运行期")]),s._v("的即时编译器("),t("strong",[s._v("JIT 编译器")]),s._v(") 把字节码文件编译成机器码的过程.")]),s._v(" "),t("li",[t("strong",[s._v("静态提前编译器")]),s._v(": (AOT 编译器, Ahead Of Time Compiler) "),t("strong",[s._v("直接")]),s._v("把 *.java 文件编译成本地机器码的过程.")])]),s._v(" "),t("p",[t("strong",[s._v("Javac")]),s._v(" 这类编译器对代码的运行效率"),t("strong",[s._v("几乎没有")]),s._v("任何优化措施, 虚拟机设计团队把对性能的"),t("strong",[s._v("优化")]),s._v("都放到了"),t("strong",[s._v("后端的即时编译器")]),s._v("中, 这样可以让那些"),t("strong",[s._v("不是")]),s._v("由 Javac 产生的 class 文件, 如 Groovy, Kotlin 等语言产生的 class 文件, "),t("strong",[s._v("也能享受到编译器优化带来的好处")]),s._v(".")]),s._v(" "),t("p",[s._v("但是 "),t("strong",[s._v("Javac")]),s._v(" 做了很多针对 Java 语言编码过程的优化措施来"),t("strong",[s._v("改善程序员的编码风格")]),s._v(", 提升编码效率. 相当多新生的 Java 语法特性, 都是靠"),t("strong",[s._v("编译器")]),s._v("的「"),t("strong",[s._v("语法糖")]),s._v("」来实现的, 而不是依赖虚拟机的底层改进来支持.")]),s._v(" "),t("p",[s._v("所以"),t("strong",[s._v("即时编译器")]),s._v("在"),t("strong",[s._v("运行期")]),s._v("的优化过程对于程序运行来说更重要, 而"),t("strong",[s._v("前端编译器")]),s._v("在编译期的优化过程对于"),t("strong",[s._v("程序编码")]),s._v("来说更加友好.")]),s._v(" "),t("h5",{attrs:{id:"_1-javac编译器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-javac编译器"}},[s._v("#")]),s._v(" 1.Javac编译器")]),s._v(" "),t("p",[s._v("Javac 编译器的编译过程大致可分为 3 个步骤.")]),s._v(" "),t("h6",{attrs:{id:"_1-解析与填充符号表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-解析与填充符号表"}},[s._v("#")]),s._v(" (1)解析与填充符号表")]),s._v(" "),t("p",[s._v("完成词法分析和语法分析之后, 下一步就是"),t("strong",[s._v("填充符号表的过程")]),s._v(". 符号表是由一组符号地址和符号信息构成的表格. 在语义分析中, 符号表所登记的内容将用于语义检查和产生中间代码. 在目标代码生成阶段, 当对符号名进行地址分配时, 符号表是"),t("strong",[s._v("地址分配")]),s._v("的依据. 语法分析后编译器获得了程序代码的"),t("strong",[s._v("抽象语法树")]),s._v("表示.")]),s._v(" "),t("h6",{attrs:{id:"_2-注解处理器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-注解处理器"}},[s._v("#")]),s._v(" (2)注解处理器")]),s._v(" "),t("p",[s._v("注解是在 JDK1.5 中新增的, 有了编译器注解处理的标准 API 后, 代码就可以干涉编译器的行为, 比如在编译期生成 "),t("strong",[s._v("class 文件")]),s._v(".")]),s._v(" "),t("h6",{attrs:{id:"_3-语义分析与字节码生成"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-语义分析与字节码生成"}},[s._v("#")]),s._v(" (3)语义分析与字节码生成")]),s._v(" "),t("p",[t("strong",[s._v("字节码生成")]),s._v("是 Javac 编译过程的最后一个阶段, 字节码生成阶段不仅仅是把前面各个步骤所生成的信息(语法树, 符号表)转化成字节码写到磁盘中, 编译器还进行了"),t("strong",[s._v("少量的代码添加和转换")]),s._v("工作.")]),s._v(" "),t("p",[s._v("在字节码生成阶段, 除了生成构造器以外, 还有一些其它的"),t("strong",[s._v("代码替换")]),s._v("工作用于优化程序的实现逻辑, 如把字符串的加操作替换为 StringBiulder 或 StringBuffer.")]),s._v(" "),t("h5",{attrs:{id:"_2-java语法糖"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-java语法糖"}},[s._v("#")]),s._v(" 2.Java语法糖")]),s._v(" "),t("p",[s._v("语法糖不会提供实质性的功能改进, 但能提升开发效率, 语法的严谨性, 减少编码出错的机会. 语法糖是 javac 编译器提供的.")]),s._v(" "),t("h6",{attrs:{id:"_1-泛型与类型擦除"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-泛型与类型擦除"}},[s._v("#")]),s._v(" (1)泛型与类型擦除")]),s._v(" "),t("p",[s._v("泛型顾名思义就是"),t("strong",[s._v("类型泛化")]),s._v(", 本质是参数化类型的应用, 即操作的数据类型被指定为一个参数. 这种参数可以用在类, 接口和方法的创建中, 分别称为泛型类, 泛型接口和泛型方法.")]),s._v(" "),t("p",[s._v("在 Java 还没有泛型的时候, 只能通过 Object 是所有类型的父类和强制类型转换两个特点的配合来实现类型泛化. 例如 HashMap 的 get() 方法返回的就是一个 Object 对象, 那么"),t("strong",[s._v("只有开发者和运行期的虚拟机才知道这个 Object 到底是什么类型的对象")]),s._v(". 在编译期间, 编译器无法检查这个 Object 的强制类型转换是否成功, 许多 "),t("strong",[s._v("ClassCastException")]),s._v(" 风险就会转嫁到运行期.")]),s._v(" "),t("p",[s._v("Java 中"),t("strong",[s._v("泛型只在程序源码")]),s._v("中存在, 在编译后的字节码文件中, 就已经替换为原来的"),t("strong",[s._v("原生类型")]),s._v(", 并且在相应的地方插入了"),t("strong",[s._v("强制类型转换的代码")]),s._v(". 所以泛型实际上是 Java 的一个语法糖, 泛型的实现方法称为"),t("strong",[s._v("类型擦除")]),s._v(".")]),s._v(" "),t("h6",{attrs:{id:"_2-自动装箱-拆箱与遍历循环"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-自动装箱-拆箱与遍历循环"}},[s._v("#")]),s._v(" (2)自动装箱, 拆箱与遍历循环")]),s._v(" "),t("p",[s._v("自动装箱, 拆箱与遍历循环也是 Java 的语法糖. 下面是示例:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SyntaxSugars")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" list "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Arrays")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("asList")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" sum "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" list"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            sum "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"sum = "')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" sum"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[s._v("自动装箱, 拆箱与遍历循环"),t("strong",[s._v("编译之后")]),s._v(":")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SyntaxSugars")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),s._v(" list "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Arrays")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("asList")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("valueOf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("valueOf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("valueOf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("valueOf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("valueOf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" sum "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Iterator")]),s._v(" iterable "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" list"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("iterator")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" iterable"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("hasNext")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" iterable"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("next")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("intValue")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            sum "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"sum = "')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" sum"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br")])]),t("p",[s._v("第一段代码包含了"),t("strong",[s._v("泛型, 自动装箱, 自动拆箱, 遍历循环和变长参数")]),s._v(" 5 种语法糖, 第二段代码则展示了它们在编译后的变化.")]),s._v(" "),t("h6",{attrs:{id:"_3-条件编译"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-条件编译"}},[s._v("#")]),s._v(" (3)条件编译")]),s._v(" "),t("p",[s._v("Java 中"),t("strong",[s._v("条件编译")]),s._v("的实现也是一颗语法糖, 根据布尔常量值的真假, 编译器会把分支中"),t("strong",[s._v("不成立的代码块消除")]),s._v(".")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"block 1"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"block 2"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("上述代码经过编译后 class 文件的"),t("strong",[s._v("反编译")]),s._v("结果:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"block 1"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h4",{attrs:{id:"运行期优化-晚期优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#运行期优化-晚期优化"}},[s._v("#")]),s._v(" 运行期优化(晚期优化)")]),s._v(" "),t("h5",{attrs:{id:"_1-即时编译器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-即时编译器"}},[s._v("#")]),s._v(" 1.即时编译器")]),s._v(" "),t("p",[s._v("在部分商业虚拟机中, Java 最初是通过"),t("strong",[s._v("解释器解释执行")]),s._v("的, 当虚拟机发现某个方法或者代码块的运行"),t("strong",[s._v("特别频繁")]),s._v('时, 就会把这些代码认定为 "'),t("strong",[s._v("热点代码")]),s._v('".')]),s._v(" "),t("p",[s._v("为了提高热点代码的执行效率, 在运行时, JVM 将会把这些热点代码编译成与"),t("strong",[s._v("本地平台相关的机器码")]),s._v(", 并进行各种层次的优化, 完成这个任务的编译器称为**==即时编译器(JIT, Just In Time)==**.")]),s._v(" "),t("p",[s._v("即时编译器不是虚拟机必须的部分, Java 虚拟机规范并没有规定虚拟机内部必须要有即时编译器存在, 更没有限定或指导即时编译器应该如何实现. 但是 JIT 编译性能的好坏, 代码优化程度的高低却是衡量一款商用虚拟机优秀与否的最关键指标之一.")]),s._v(" "),t("p",[s._v("由于 Java 虚拟机规范中没有限定即时编译器如何实现, 所以"),t("strong",[s._v("即时编译器完全取决于虚拟机的具体实现")]),s._v(". 此处以 HotSpot 为例明, 主流虚拟机中 JIT 的实现有颇多相似之处.")]),s._v(" "),t("h6",{attrs:{id:"_1-解释器与编译器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-解释器与编译器"}},[s._v("#")]),s._v(" (1)解释器与编译器")]),s._v(" "),t("p",[s._v("尽管并不是所有的 Java 虚拟机都采用解释器与编译器并存的架构, 但许多主流的商用虚拟机, 如 HotSpot, J9 等, 都"),t("strong",[s._v("同时包含解释器与编译器")]),s._v(".")]),s._v(" "),t("blockquote",[t("p",[s._v("解释器与编译器两者各有优势")])]),s._v(" "),t("ul",[t("li",[s._v("当程序需要"),t("strong",[s._v("迅速启动和执行")]),s._v("的时候, "),t("strong",[s._v("解释器")]),s._v("可以首先发挥作用, "),t("strong",[s._v("省去编译的时间, 立即执行")]),s._v(". 在程序运行后, 随着时间的推移, 编译器逐渐发挥作用, 把越来越多的代码编译成本地机器码之后, 可以获得更高的执行效率.")]),s._v(" "),t("li",[s._v("当程序运行环境中内存资源限制较大(如部分嵌入式系统), 可以使用"),t("strong",[s._v("解释执行来节约内存")]),s._v(", 反之可以使用"),t("strong",[s._v("编译执行来提升效率")]),s._v(".")])]),s._v(" "),t("h6",{attrs:{id:"_2-编译对象与触发条件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-编译对象与触发条件"}},[s._v("#")]),s._v(" (2)编译对象与触发条件")]),s._v(" "),t("p",[s._v("程序在运行过程中会被即时编译器编译的"),t("strong",[s._v("对象")]),s._v("即"),t("strong",[s._v("热点代码")]),s._v(", 主要有两类:")]),s._v(" "),t("ul",[t("li",[s._v("被多次调用的"),t("strong",[s._v("方法")]),s._v(".")]),s._v(" "),t("li",[s._v("被多次执行的"),t("strong",[s._v("循环体")]),s._v(".")])]),s._v(" "),t("p",[s._v("这两种情况都是对"),t("strong",[s._v("整个方法")]),s._v("进行"),t("strong",[s._v("即时编译")]),s._v(".")]),s._v(" "),t("blockquote",[t("p",[s._v("热点探测-如何进行热点代码判断? 啥时候触发?")])]),s._v(" "),t("p",[s._v('即时编译器的触发条件. 判断一段代码是不是热点代码, 是不是需要触发即时编译, 这样的行为称为 "'),t("strong",[s._v("热点探测")]),s._v('".')]),s._v(" "),t("p",[s._v("HotSpot 虚拟机采用"),t("strong",[s._v("基于计数器的热点探测")]),s._v(": 采用这种方法的虚拟机会为每个方法(甚至代码块) 建立"),t("strong",[s._v("计数器")]),s._v(", 统计方法的执行次数, 如果执行次数超过一定的阈值就认为它是热点方法.")]),s._v(" "),t("p",[s._v("因此 HotSpot 为每个方法准备了"),t("strong",[s._v("两类计数器")]),s._v(": "),t("strong",[s._v("方法调用计数器")]),s._v("和"),t("strong",[s._v("回边计数器")]),s._v(".")]),s._v(" "),t("p",[s._v("在确定虚拟机运行参数的情况下, 这两个计数器都有一个确定的"),t("strong",[s._v("阈值")]),s._v(", 当"),t("strong",[s._v("计数器超过阈值就会触发 JIT 即时编译")]),s._v(".")]),s._v(" "),t("h6",{attrs:{id:"_3-方法调用计数器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-方法调用计数器"}},[s._v("#")]),s._v(" (3)方法调用计数器")]),s._v(" "),t("p",[s._v("方法调用计数器用于"),t("strong",[s._v("统计方法被调用的次数")]),s._v(". 当一个方法被调用时, 会首先检查该方法"),t("strong",[s._v("是否存在被 JIT 编译")]),s._v("过的版本, 如果存在, 则优先使用编译后的本地代码来执行. 如果不存在, 则将此方法的调用计数器加 1, 然后判断方法调用计数器与回边计数器之和是否超过方法调用计数器的阈值. 如果超过阈值, 将会向即时编译器提交一个该方法的代码编译请求.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220522155456984.png",alt:""}})]),s._v(" "),t("p",[s._v("如果不做任何设置, 方法调用计数器统计的是一个相对的执行频率(非绝对次数), 即"),t("strong",[s._v("一段时间内方法调用的次数")]),s._v(". 当超过一定的时间限度, 如果方法的调用次数仍然不足以让它提交给即时编译器编译, 那这个方法的调用计数器值就会被减少.")]),s._v(" "),t("p",[s._v("方法调用计数器的默认阈值在服务端模式下是 10000 次, 可通过参数 -XX: CompileThreshold 来设定.")]),s._v(" "),t("h6",{attrs:{id:"_4-回边计数器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-回边计数器"}},[s._v("#")]),s._v(" (4)回边计数器")]),s._v(" "),t("p",[s._v("回边计数器的作用是"),t("strong",[s._v("统计一个方法中循环体代码执行的次数")]),s._v(', 在字节码中遇到控制流向后跳转的指令称为 "回边". 该值用于计算是否触发 C1 编译的阈值, 在不开启分层编译的情况下, 在服务端模式下是 10700.')]),s._v(" "),t("p",[s._v("当解释器遇到一条回边指令时, 会先查找将要执行的代码片段是否已经有编译好的版本, 如果有, 它将优先执行已编译的代码, 否则就把回边计数器值加 1, 然后判断方法调用计数器和回边计数器值之和是否超过计数器的阈值. 当超过阈值时, 将会提交一个 OSR 编译请求, 并且把回边计数器的值降低一些, 以便继续在解释器中执行循环, 等待编译器输出编译结果.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220522155952582.png",alt:""}})]),s._v(" "),t("p",[s._v("回边计数器统计的就是该方法循环执行的"),t("strong",[s._v("绝对次数")]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"_2-即时编译器实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-即时编译器实现"}},[s._v("#")]),s._v(" 2.即时编译器实现")]),s._v(" "),t("p",[s._v("在 JDK1.8 的 HotSpot 虚拟机中, 内置了两个 JIT, 分别为 C1 编译器和 C2 编译器.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/%E7%A8%8B%E5%BA%8F%E7%BC%96%E8%AF%91%E4%B8%8E%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96-%E5%8D%B3%E6%97%B6%E7%BC%96%E8%AF%91%E5%99%A8.png",alt:"https://www.processon.com/diagraming/642d0c4a6dd8285b4b706e70"}})]),s._v(" "),t("h6",{attrs:{id:"_1-c1编译器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-c1编译器"}},[s._v("#")]),s._v(" (1)C1编译器")]),s._v(" "),t("p",[s._v("C1 编译器是一个简单快速的编译器, 主要的关注点在于局部性的优化, 适用于执行时间较短或对启动性能有要求的程序, 例如, GUI 应用对界面启动速度就有一定要求, C1 也被称为 Client Compiler.")]),s._v(" "),t("p",[s._v("C1 编译器几乎不会对代码进行优化.")]),s._v(" "),t("h6",{attrs:{id:"_2-c2编译器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-c2编译器"}},[s._v("#")]),s._v(" (2)C2编译器")]),s._v(" "),t("p",[s._v("C2 编译器是为"),t("strong",[s._v("长期运行的服务器端应用程序做性能调优的编译器")]),s._v(", 适用于执行时间较长或对峰值性能有要求的程序. 根据各自的适配性, 这种即时编译也被称为 Server Compiler.")]),s._v(" "),t("p",[s._v("但是 C2 代码已超级复杂, 无人能维护! 所以才会开发 Java 编写的 Graal 编译器取代C2(JDK 10开始).")]),s._v(" "),t("h6",{attrs:{id:"_3-分层编译"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-分层编译"}},[s._v("#")]),s._v(" (3)分层编译")]),s._v(" "),t("p",[s._v("在 Java7 之前, 需要根据程序的特性来选择对应的 JIT, 虚拟机默认采用解释器和其中一个编译器配合工作.")]),s._v(" "),t("p",[s._v("Java7 及以后引入了分层编译, 这种方式"),t("strong",[s._v("综合了 C1 的启动性能优势和 C2 的峰值性能优势")]),s._v(", 当然也可以通过参数强制指定虚拟机的即时编译模式.")]),s._v(" "),t("p",[s._v("在 Java8 中, 默认开启分层编译. 使用 java -version 输出的结果中, mixed mode 则表示开启了分层编译.")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("java")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-version")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("java")]),s._v(" version "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1.8.0_181"')]),s._v("\nJava"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("TM"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" SE Runtime Environment "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("build "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.8")]),s._v(".0_181-b13"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nJava HotSpot"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("TM"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v("-Bit Server VM "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("build "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("25.181")]),s._v("-b13, mixed mode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h5",{attrs:{id:"_3-编译优化技术"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-编译优化技术"}},[s._v("#")]),s._v(" 3.编译优化技术")]),s._v(" "),t("p",[t("strong",[s._v("以编译方式执行本地代码比解释执行方式更快")]),s._v(", 一方面是因为节约了虚拟机解释执行字节码额外消耗的时间; 另一方面是因为虚拟机设计团队几乎把所有对代码的"),t("strong",[s._v("优化")]),s._v("措施都集中到了"),t("strong",[s._v("即时编译器")]),s._v("中. 下面是 HotSpot 虚拟机的 JIT "),t("strong",[s._v("编译器在编译代码")]),s._v("时采用的一些优化技术.")]),s._v(" "),t("h6",{attrs:{id:"_1-优化技术概览"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-优化技术概览"}},[s._v("#")]),s._v(" (1)优化技术概览")]),s._v(" "),t("p",[s._v("代码优化技术有很多, 实现这些优化也很有难度, 但是大部分还是比较好理解的.")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("方法内联")])]),s._v(" "),t("li",[t("strong",[s._v("冗余消除")])]),s._v(" "),t("li",[t("strong",[s._v("复写传播")])]),s._v(" "),t("li",[t("strong",[s._v("无用代码消除")])])]),s._v(" "),t("p",[s._v("从一段简单的代码开始, 看看虚拟机会做哪些代码优化.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("B")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    y "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    z "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    sum "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" y "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" z"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("p",[s._v("需要明确的是, 这些"),t("strong",[s._v("代码优化")]),s._v("是建立在代码的某种中间表示或者"),t("strong",[s._v("机器码")]),s._v("上的, 绝"),t("strong",[s._v("不是建立在 Java 源码")]),s._v("上. 这里之所使用 Java 代码来介绍是为了方便演示.")]),s._v(" "),t("p",[s._v("上面这段代码看起来简单, 但是有许多可以优化的地方.")]),s._v(" "),t("p",[t("strong",[s._v("第一步")]),s._v("是进行"),t("strong",[s._v("方法内联")]),s._v(", 方法内联的"),t("strong",[s._v("重要性")]),s._v("要高于其它优化措施. 方法内联的目的主要有两个, 一是"),t("strong",[s._v("去除方法调用的成本")]),s._v("(比如建立栈帧), 二是为其它优化建立良好的基础, 方法内联膨胀之后可以便于更大范围上采取后续的优化手段, 从而获得更好的优化效果. 因此, 各种编译器一般都会把内联优化放在优化序列的最前面.")]),s._v(" "),t("p",[s._v("内联优化后的代码如下:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    y "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    z "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    sum "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" y "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" z"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("第二步进行"),t("strong",[s._v("冗余消除")]),s._v(', 代码中 "z = b.value" 可以被替换成 "z = y". 这样就'),t("strong",[s._v("不用再去")]),s._v("访问对象 b 的局部变量. 如果把 b.value 看做是一个表达式, 那也可以把这项优化工作看成是"),t("strong",[s._v("公共子表达式")]),s._v("消除. 优化后的代码如下:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    y "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    z "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    sum "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" y "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" z"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("第三步进行"),t("strong",[s._v("复写传播")]),s._v(", 因为这段代码里没有必要使用一个额外的变量 z, 它与变量 y 是完全等价的, 因此可以使用 y 来代替 z. 复写传播后的代码如下:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    y "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    y "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    sum "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" y "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("第四步进行"),t("strong",[s._v("无用代码消除")]),s._v(". 无用代码可能是永远不会执行的或完全没有意义的代码. 上述代码中 y = y 是没有意义的, 因此进行无用代码消除后的代码是这样的:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    y "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    sum "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" y "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("经过这"),t("strong",[s._v("四次优化")]),s._v("后, 最新优化后的代码和优化前的代码所达到的效果是一致的, 但是优化后的代码执行效率会更高.")]),s._v(" "),t("p",[s._v("接下来再讲讲如下几项优化技术是如何运作的, 它们分别是: 公共子表达式消除, 数组边界检查消除, "),t("strong",[s._v("逃逸分析")]),s._v(".")]),s._v(" "),t("h6",{attrs:{id:"_2-公共子表达式消除"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-公共子表达式消除"}},[s._v("#")]),s._v(" (2)公共子表达式消除")]),s._v(" "),t("p",[s._v("如果一个"),t("strong",[s._v("表达式 E")]),s._v(" 已经计算过了, 并且从先前的计算到现在 E 中所有变量的值都没有发生变化, 那么 E 的这次出现就成了公共子表达式. 对于这种表达式, 没有必要花时间再对它进行计算, 只需要直接使用前面计算过的表达式结果代替 E 就好了. 如果这种优化仅限于程序的基本块内, 便称为局部公共子表达式消除, 如果这种优化的范围覆盖了多个基本块, 那就称为全局公共子表达式消除.")]),s._v(" "),t("h6",{attrs:{id:"_3-数组边界检查消除"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-数组边界检查消除"}},[s._v("#")]),s._v(" (3)数组边界检查消除")]),s._v(" "),t("p",[s._v("如果有一个数组 array[], 在 Java 中访问数组元素 array[i] 的时候, 系统会自动进行"),t("strong",[s._v("上下界的范围检查")]),s._v(", 即检查 i 必须满足 i >= 0 && i < array.length, 否则会抛出一个运行时异常: java.lang.ArrayIndexOutOfBoundsException, 这就是数组边界检查.")]),s._v(" "),t("p",[s._v("对于虚拟机执行子系统来说, 每次数组元素的读写都带有一次"),t("strong",[s._v("隐含的条件判定")]),s._v("操作, 对于拥有大量数组访问的代码, 这是不小的性能开销. 为了安全, 数组边界检查是必须做的, 但是数组边界检查并不一定每次都要进行. 比如在循环的时候访问数组, 如果编译器只要通过数据流分析就知道循环变量是不是在区间 [0, array.length] 之内, 那在整个循环中就可以把数组的上下界检查消除.")]),s._v(" "),t("h6",{attrs:{id:"_4-逃逸分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-逃逸分析"}},[s._v("#")]),s._v(" (4)逃逸分析")]),s._v(" "),t("p",[s._v("逃逸分析就是在"),t("strong",[s._v("即时编译")]),s._v("的过程中进行的优化行为.")]),s._v(" "),t("p",[s._v("逃逸分析不是直接优化代码的手段, 而是"),t("strong",[s._v("为其它优化手段提供依据")]),s._v("的分析技术. 逃逸分析的基本行为就是"),t("strong",[s._v("分析对象的动态作用域")]),s._v(": 当一个对象在方法中被定义后, 它可能被"),t("strong",[s._v("外部方法所引用, 例如作为调用参数传递到其它方法中, 称为方法逃逸")]),s._v(". 甚至还有可能被外部线程访问到, 例如赋值给类变量或"),t("strong",[s._v("可以在其他线程中访问的实例变量")]),s._v(", 称为"),t("strong",[s._v("线程逃逸")]),s._v(".")]),s._v(" "),t("p",[s._v("当一个对象在方法中被定义后, 它可能被"),t("strong",[s._v("外部方法所引用")]),s._v(", 例如作为调用参数"),t("strong",[s._v("传递")]),s._v("到其他地方中.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("test1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),s._v(" user "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    user"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    user"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Lucy"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// TODO保存到数据库")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" user"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("test2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),s._v(" user "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    user"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    user"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Lucy"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// TODO保存到数据库")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[s._v("test1 方法中的 user 对象"),t("strong",[s._v("被返回")]),s._v("了, 这个对象的"),t("strong",[s._v("作用域范围不确定")]),s._v(", 而 Test2 中 User 对象仅在这个方法内有效而不会逃逸, 方法结束也就可以认为是"),t("strong",[s._v("无效")]),s._v("对象了, 所以这里 JVM "),t("strong",[s._v("可能")]),s._v("直接把 User 这个"),t("strong",[s._v("对象分配到栈内存中(方法对应的栈帧)"),t("strong",[s._v("​"),t("strong",[t("strong",[s._v("上, 而")])]),s._v("​")]),s._v("不是分配到堆")]),s._v("中, 栈帧可以随着方法的调用而被"),t("strong",[s._v("销毁")]),s._v(", 这个对象也被随之销毁了; 如果分配到堆上, 无用的对象还要等着 GC 去清理, 这样就可以节省一部分堆空间. 当然如果对象比较大, 或者栈空间不够, 即使对象不会逃逸可能也会放到堆中去.")]),s._v(" "),t("p",[s._v("所以这里也统一能看出: "),t("strong",[s._v("新对象可能分配到堆中, 也可能分配到栈中. ​")])]),s._v(" "),t("p",[s._v("JVM 对于这种情况可以通过开启逃逸分析参数(-XX:+DoEscapeAnalysis) 来优化对象内存分配位置, JDK7 之后默认开启逃逸分析, 如果要关闭使用参数 -XX:-DoEscapeAnalysis.")]),s._v(" "),t("p",[s._v("‍")]),s._v(" "),t("p",[s._v("‍")]),s._v(" "),t("h4",{attrs:{id:"参考资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[s._v("#")]),s._v(" 参考资料")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://www.cnblogs.com/baronzhang/p/11108322.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("深入理解Java虚拟机(程序编译与代码优化)"),t("OutboundLink")],1),s._v("​"),t("a",{attrs:{href:"https://www.cnblogs.com/baronzhang/p/11108322.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://www.cnblogs.com/baronzhang/p/11108322.html"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=r.exports}}]);