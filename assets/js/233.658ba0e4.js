(window.webpackJsonp=window.webpackJsonp||[]).push([[233],{564:function(s,t,e){"use strict";e.r(t);var a=e(4),n=Object(a.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"_35-redis内存-阻塞-运维"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_35-redis内存-阻塞-运维"}},[s._v("#")]),s._v(" 35.Redis内存&阻塞&运维")]),s._v(" "),t("p",[s._v("Redis 是"),t("strong",[s._v("内存数据库")]),s._v(", 理解 Redis 内存十分关键.")]),s._v(" "),t("h4",{attrs:{id:"内存消耗🌟"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内存消耗🌟"}},[s._v("#")]),s._v(" 内存消耗🌟")]),s._v(" "),t("p",[s._v("内存消耗分为"),t("strong",[s._v("自身内存")]),s._v("消耗和"),t("strong",[s._v("子进程内存")]),s._v("消耗.")]),s._v(" "),t("h5",{attrs:{id:"_1-内存使用统计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-内存使用统计"}},[s._v("#")]),s._v(" 1.内存使用统计")]),s._v(" "),t("p",[s._v("内存统计信息通过 "),t("strong",[s._v("info memory")]),s._v(" 指令查看. 重点指标如下.")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",{staticStyle:{"text-align":"center"}},[s._v("属性名")]),s._v(" "),t("th",{staticStyle:{"text-align":"center"}},[s._v("属性说明")])])]),s._v(" "),t("tbody",[t("tr",[t("td",{staticStyle:{"text-align":"center"}},[t("strong",[s._v("used_memory")])]),s._v(" "),t("td",{staticStyle:{"text-align":"center"}},[s._v("Redis 分配的内存"),t("strong",[s._v("总量")]),s._v(", 即内部存储的所有数据内存占用量")])]),s._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[t("strong",[s._v("used_memory_rss")])]),s._v(" "),t("td",{staticStyle:{"text-align":"center"}},[s._v("从"),t("strong",[s._v("操作系统")]),s._v("角度显示 Redis 进程占用的物理内存总量")])]),s._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[t("strong",[s._v("used_memory_peak")])]),s._v(" "),t("td",{staticStyle:{"text-align":"center"}},[s._v("内存"),t("strong",[s._v("使用的最大值")]),s._v(", 表示 used_memory "),t("strong",[s._v("峰值")])])]),s._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[s._v("used_memory_peak_human")]),s._v(" "),t("td",{staticStyle:{"text-align":"center"}},[s._v("以"),t("strong",[s._v("可读的格式")]),s._v("返回 used_memory peak")])]),s._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[t("strong",[s._v("mem_fragmentation_ratio")])]),s._v(" "),t("td",{staticStyle:{"text-align":"center"}},[s._v("used_memory_rss/used_memory "),t("strong",[s._v("比值")]),s._v(", 表示"),t("strong",[s._v("内存碎片率")])])]),s._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[s._v("mem_allocator")]),s._v(" "),t("td",{staticStyle:{"text-align":"center"}},[s._v("Redis 所使用的内存分配器 默认为 jemalloc")])])])]),s._v(" "),t("p",[s._v("重点关注: "),t("strong",[s._v("used_memory_rss")]),s._v(", "),t("strong",[s._v("used_memory")]),s._v(", 及两者比值 "),t("strong",[s._v("mem_fragmentation_ratio")]),s._v(".")]),s._v(" "),t("ul",[t("li",[s._v("当 "),t("strong",[s._v("mem_fragmentation_ratio > 1")]),s._v(" 时, 说明 used_memory_rss-used_memory 多出的部分"),t("strong",[s._v("内存并没有用于数据存储")]),s._v(", 而是被内存碎片所消耗, 如果两者相差很大, "),t("strong",[s._v("说明内存碎片率严重")]),s._v(".")]),s._v(" "),t("li",[s._v("当 "),t("strong",[s._v("mem_fragmentation_ratio < 1")]),s._v(" 时, 这种情况一般出现在操作系统把 Redis 内存"),t("strong",[s._v("交换到硬盘导致")]),s._v(", 由于硬盘速度远远慢于内存, Redis 性能会变得很差.")])]),s._v(" "),t("h5",{attrs:{id:"_2-内存消耗划分"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-内存消耗划分"}},[s._v("#")]),s._v(" 2.内存消耗划分")]),s._v(" "),t("p",[s._v("Redis 进程内存消耗主要有四个部分: "),t("strong",[s._v("自身内存, 对象内存, 缓冲内存, 内存碎片")]),s._v(".")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220527224014153.png",alt:""}})]),s._v(" "),t("h6",{attrs:{id:"_1-自身内存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-自身内存"}},[s._v("#")]),s._v(" (1)自身内存")]),s._v(" "),t("p",[s._v("自身内存很小.")]),s._v(" "),t("h6",{attrs:{id:"_2-对象内存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-对象内存"}},[s._v("#")]),s._v(" (2)对象内存")]),s._v(" "),t("p",[s._v("占用最多的内存, 即保存用户的"),t("strong",[s._v("所有数据")]),s._v(". 所有数据采用 key-value 的方式进行存储. 键都是字符串, 所以应该避免过长的键. 不同数据结构占用内存不同.")]),s._v(" "),t("h6",{attrs:{id:"_3-缓冲区内存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-缓冲区内存"}},[s._v("#")]),s._v(" (3)缓冲区内存")]),s._v(" "),t("p",[s._v("缓冲内存就是"),t("strong",[s._v("缓冲区")]),s._v("内存. 主要包括: "),t("strong",[s._v("客户端缓冲, 复制积压缓冲区, AOF 缓冲区")]),s._v(".")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220527224046540.png",alt:""}})]),s._v(" "),t("p",[t("strong",[s._v("① 客户端缓冲区")]),s._v(": 指所有接入到 Redis 服务器 TCP 连接的"),t("strong",[s._v("输入输出缓冲")]),s._v(". "),t("strong",[s._v("输入缓冲")]),s._v("无法控制, 最大空间为 1G. "),t("strong",[s._v("输出缓冲")]),s._v("通过参数 client-output-buffer-limit 控制. 客户端分为普通客户端, 从客户端, 订阅客户端, 配置情况不同.")]),s._v(" "),t("p",[t("strong",[s._v("② 复制积压缓冲区")]),s._v(": Redis 有一个"),t("strong",[s._v("可重用的固定大小缓冲区用于实现部分复制")]),s._v("功能, 通过 repl-backlog-size 参数控制, 默认 1MB. 复制积压缓冲区"),t("strong",[s._v("整个主节点只有一个")]),s._v(", 所有从节点"),t("strong",[s._v("共享")]),s._v("此缓冲区, 因此可以"),t("strong",[s._v("设置较大")]),s._v("的缓冲区空间, 如 100MB, 这部分内存投入是有价值的, 可以"),t("strong",[s._v("有效避免全量复制")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("③ AOF缓冲区")]),s._v(": 用于在 "),t("strong",[s._v("AOF 重写期间保存最近的写入命令")]),s._v(". 此空间的消耗用户无法控制, 消耗的内存取决于 AOF 重写时间和写入命令量, 这部分空间占用通常很小.")]),s._v(" "),t("h6",{attrs:{id:"_4-内存碎片"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-内存碎片"}},[s._v("#")]),s._v(" (4)内存碎片")]),s._v(" "),t("p",[s._v("为更好的管理和重复利用内存, 分配内存策略一般采用"),t("strong",[s._v("固定范围的内存块")]),s._v("进行分配. 在 64 位系统中将内存空间划分为: 小, 大, 巨大三个范围. 每个范围内又划分为多个小的"),t("strong",[s._v("内存块单位")]),s._v(". 比如保存 5KB 对象可能会采用 8KB 的块存储, 剩下的 3KB 空间变为了"),t("strong",[s._v("内存碎片")]),s._v("不能再分配给其他对象存储.")]),s._v(" "),t("p",[s._v("正常的碎片率 "),t("strong",[s._v("mem_fragmentation_ratio")]),s._v(" 在 "),t("strong",[s._v("1.03")]),s._v(" 左右.")]),s._v(" "),t("blockquote",[t("p",[s._v("高内存碎片率的原因?")])]),s._v(" "),t("p",[s._v("当存储的数据"),t("strong",[s._v("长短差异较大")]),s._v("时候, 以下场景容易出现"),t("strong",[s._v("高内存碎片")]),s._v("问题:")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("频繁做更新操作")]),s._v(", 例如频繁对已存在的键执行 append, setrange 等更新操作.")]),s._v(" "),t("li",[s._v("大量过期"),t("strong",[s._v("键删除")]),s._v(", 键对象过期删除后, 释放的空间无法得到充分利用, 导致碎片率上升.")])]),s._v(" "),t("blockquote",[t("p",[s._v("出现高内存碎片率的解决方法?")])]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("数据对齐")]),s._v(": 尽量做数据对齐, 比如数据尽量采用数字类型或者固定长度字符串等, 这要看具体业务.")]),s._v(" "),t("li",[t("strong",[s._v("安全重启")]),s._v(": 重启节点可以做到内存碎片重启整理, 因此可以利用高可用架构, 如 sentinel 或 cluster, 将碎片率过高的主节点转换为"),t("strong",[s._v("从节点")]),s._v(", 进行安全重启.")])]),s._v(" "),t("h5",{attrs:{id:"_3-子进程内存消耗"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-子进程内存消耗"}},[s._v("#")]),s._v(" 3.子进程内存消耗")]),s._v(" "),t("p",[s._v("主要是指执行 "),t("strong",[s._v("RDB, AOF 重写")]),s._v("时 Redis 创建的"),t("strong",[s._v("子进程内存")]),s._v("消耗. Redis 执行 fork 操作产生的子进程内存占用量对外表现为与父进程"),t("strong",[s._v("相同")]),s._v(", 理论上需要"),t("strong",[s._v("一倍的物理内存")]),s._v("来完成重写操作. 但 Linux 具有"),t("strong",[s._v("写时复制")]),s._v("技术, 父子进程会"),t("strong",[s._v("共享相同的物理内存页")]),s._v(", 当"),t("strong",[s._v("父进程处理写请求")]),s._v("时会对"),t("strong",[s._v("需要修改的页复制出一份副本完成写操作")]),s._v(", 而子进程依然"),t("strong",[s._v("读取 fork 时整个父进程的内存快照")]),s._v(".")]),s._v(" "),t("h4",{attrs:{id:"内存管理🌟"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内存管理🌟"}},[s._v("#")]),s._v(" 内存管理🌟")]),s._v(" "),t("p",[s._v("Redis 主要通过"),t("strong",[s._v("控制内存上限和回收策略")]),s._v("来实现内存管理.")]),s._v(" "),t("h5",{attrs:{id:"_1-设置内存上限"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-设置内存上限"}},[s._v("#")]),s._v(" 1.设置内存上限")]),s._v(" "),t("p",[s._v("Redis 使用 "),t("strong",[s._v("maxmemory")]),s._v(" 参数限制"),t("strong",[s._v("最大可用内存")]),s._v(". 限制内存目的:")]),s._v(" "),t("ol",[t("li",[s._v("用于缓存场景, 当超出内存上限 maxmemory 时使用 LRU 等"),t("strong",[s._v("删除策略释放空间")]),s._v(".")]),s._v(" "),t("li",[s._v("防止所用内存"),t("strong",[s._v("超过")]),s._v("服务器物理内存.")])]),s._v(" "),t("p",[s._v("maxmemory 限制的是 Redis "),t("strong",[s._v("实际使用的内存量")]),s._v(", 即 used_memory 统计的内存. 由于存在"),t("strong",[s._v("内存碎片")]),s._v(", "),t("strong",[s._v("实际内存消耗")]),s._v("可能比 maxmemory 设置的"),t("strong",[s._v("更大")]),s._v(", 使用时要小心这部分内存"),t("strong",[s._v("溢出")]),s._v(".")]),s._v(" "),t("p",[s._v("可以通过 "),t("strong",[s._v("config set maxmemory")]),s._v(" 动态修改最大可用内存, 实现动态伸缩 Redis 内存.")]),s._v(" "),t("h5",{attrs:{id:"_2-内存回收策略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-内存回收策略"}},[s._v("#")]),s._v(" 2.内存回收策略")]),s._v(" "),t("p",[s._v("内存回收策略也叫内存淘汰机制. 内存回收机制主要体现在两个方面:")]),s._v(" "),t("ul",[t("li",[s._v("删除到达"),t("strong",[s._v("过期")]),s._v("时间的键对象.")]),s._v(" "),t("li",[s._v("内存使用达到 "),t("strong",[s._v("maxmemory")]),s._v(" 上限时触发内存溢出控制策略.")])]),s._v(" "),t("h6",{attrs:{id:"_1-缓存过期策略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-缓存过期策略"}},[s._v("#")]),s._v(" (1)缓存过期策略")]),s._v(" "),t("p",[s._v("缓存过期策略就是"),t("strong",[s._v("删除过期键对象")]),s._v("的策略.")]),s._v(" "),t("p",[s._v("一般项目中的 token 或一些登录信息, 尤其是短信验证码都有时间限制, 如果自己判断过期会严重影响项目性能. 当 set key 的时候, 都可以给一个过期时间, 通过过期时间可以指定这个 key 可以存活的时间.")]),s._v(" "),t("p",[s._v("如果假设设置了一批 key 只能存活 1 个小时, 那么接下来 1 小时后, Redis 是怎么对这批 key 进行删除的?")]),s._v(" "),t("p",[s._v("精准维护每个键过期时间会导致消耗大量的 CPU, 对于单线程的 Redis 来说"),t("strong",[s._v("成本过高")]),s._v(", 因此采用"),t("strong",[s._v("惰性删除")]),s._v("和"),t("strong",[s._v("定时任务删除")]),s._v("机制实现过期键的内存回收.")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("惰性删除: 用于当客户端读取带有超时属性")]),s._v("的键时, 如果"),t("strong",[s._v("已经超过键设置的过期时间")]),s._v(", 会"),t("strong",[s._v("执行删除操作并返回空")]),s._v(", 这种策略是出于节省 CPU 成本考虑, 不需要单独维护 TTL 链表来处理过期键. 但单独用这种方式"),t("strong",[s._v("存在内存泄露的问题")]),s._v(", 因为如果过期键"),t("strong",[s._v("一直没有访问")]),s._v("将无法得到及时的删除, 从而导致内存不能及时释放.")]),s._v(" "),t("li",[t("strong",[s._v("定时删除任务: ​")]),s._v("Redis 内部维护一个"),t("strong",[s._v("定时任务")]),s._v(", 默认每隔 100ms 就"),t("strong",[s._v("随机抽取")]),s._v("一些设置了过期时间的 key, 检查其是否过期, 如果过期就删除. 定时任务中删除过期键逻辑采用了"),t("strong",[s._v("自适应算法")]),s._v(", 根据键的过期比例, 使用"),t("strong",[s._v("快慢两种速率")]),s._v("模式回收键. 可以用作惰性删除的补充. 从每个数据库随机检查 20 个键如果超过 25% 的键过期了则循环执行回收逻辑直到不足 25%. 为什么要随机呢? 假如 Redis 存了几十万个 key, 每隔 100ms 就遍历所有的设置过期时间的 key 的话, 就会给 CPU 带来很大的负载.")])]),s._v(" "),t("p",[s._v("但仅仅设置过期时间还是有问题的. 如果定期删除漏掉了很多过期 key, 然后也没及时去查, 也就没走惰性删除. 如果大量过期 key 堆积在内存里, 导致 Redis 内存快耗尽了. 这时候就会启用 "),t("strong",[s._v("Redis 内存淘汰机制.")])]),s._v(" "),t("h6",{attrs:{id:"_2-内存淘汰机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-内存淘汰机制"}},[s._v("#")]),s._v(" (2)内存淘汰机制")]),s._v(" "),t("p",[s._v("MySQL 里有 2000w 数据, Redis 中只存 20w 数据, 如何保证 Redis 中的数据都是热点数据? 这就需要内存淘汰机制.")]),s._v(" "),t("p",[s._v("内存淘汰机制就是"),t("strong",[s._v("内存溢出控制策略")]),s._v(". 即 Redis 内存使用达到 "),t("strong",[s._v("maxmemory 上限")]),s._v("时触发内存溢出控制策略. 具体由 "),t("strong",[s._v("maxmemory-policy")]),s._v(" 参数控制内存溢出后的剔除策略.")]),s._v(" "),t("p",[s._v("Redis 支持 6 种策略.")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",{staticStyle:{"text-align":"center"}},[s._v("策略")]),s._v(" "),t("th",{staticStyle:{"text-align":"center"}},[s._v("说明")])])]),s._v(" "),t("tbody",[t("tr",[t("td",{staticStyle:{"text-align":"center"}},[s._v("noeviction")]),s._v(" "),t("td",{staticStyle:{"text-align":"center"}},[t("strong",[s._v("默认")]),s._v("策略, "),t("strong",[s._v("拒绝写入")]),s._v(", 不删除数据, 只响应读操作")])]),s._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[t("strong",[s._v("volatitle-lru")])]),s._v(" "),t("td",{staticStyle:{"text-align":"center"}},[s._v("根据 "),t("strong",[s._v("LRU 算法")]),s._v("删除"),t("strong",[s._v("过期的键")]),s._v(", 直到腾出足够空间, 如果"),t("strong",[s._v("没有可删除的键")]),s._v("则会"),t("strong",[s._v("退到默认策略")])])]),s._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[t("strong",[s._v("allkeys-lru")])]),s._v(" "),t("td",{staticStyle:{"text-align":"center"}},[s._v("根据 "),t("strong",[s._v("LRU 算法")]),s._v("删除键, 不管是否超时, "),t("strong",[s._v("直到腾出足够空间")])])]),s._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[s._v("allkeys-random")]),s._v(" "),t("td",{staticStyle:{"text-align":"center"}},[t("strong",[s._v("随机删除所有键")]),s._v(", 直到腾出足够空间为止")])]),s._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[t("strong",[s._v("volatitle-random")])]),s._v(" "),t("td",{staticStyle:{"text-align":"center"}},[t("strong",[s._v("随机删除过期键")]),s._v(", 直到腾出足够空间")])]),s._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[t("strong",[s._v("volatitle-ttl")])]),s._v(" "),t("td",{staticStyle:{"text-align":"center"}},[s._v("根据键对象的 TTL, 删除"),t("strong",[s._v("最近要过期")]),s._v("的键. 没有可删除的键则回退默认策略")])])])]),s._v(" "),t("p",[s._v("如果"),t("strong",[s._v("内存频繁溢出, 会频繁触发内存回收操作, 非常影响性能")]),s._v(". 如果当前 Redis 有从节点 , 回收内存操作对应的删除命令会"),t("strong",[s._v("同步")]),s._v("到从节点, 导致"),t("strong",[s._v("写放大")]),s._v("的问题.")]),s._v(" "),t("h4",{attrs:{id:"内存优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内存优化"}},[s._v("#")]),s._v(" 内存优化")]),s._v(" "),t("h5",{attrs:{id:"_1-redisobject对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-redisobject对象"}},[s._v("#")]),s._v(" 1.RedisObject对象")]),s._v(" "),t("h6",{attrs:{id:"_1-概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述"}},[s._v("#")]),s._v(" (1)概述")]),s._v(" "),t("p",[s._v("redisObject 是一个"),t("strong",[s._v("结构体")]),s._v(". Redis 内部使用 redisObject 对象来表示"),t("strong",[s._v("所有的 key 和 value")]),s._v(", 每次在 Redis 数据块中创建一个键值对时, 一个是键对象, 一个是值对象. Redis 存储数据"),t("strong",[s._v("都采用 redisObject 封装")]),s._v(".")]),s._v(" "),t("p",[s._v("redisObject 最主要的信息:")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("redisObject")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 当前对象使用的数据类型 ")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" type"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 当前对象内部编码类型")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" encoding"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 与对象的数据内容相关, 如果是整数, 直接存储数据; 否则表示指向数据的指针")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ptr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 记录当前对象被引用的次数, 用于通过引用次数回收内存")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" refcount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 记录最后一次被程序访问的时间,用于辅助 LRU 算法实现内存回收")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" lru"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" robj\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220527224418151.png",alt:""}})]),s._v(" "),t("h6",{attrs:{id:"_2-内存回收与共享"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-内存回收与共享"}},[s._v("#")]),s._v(" (2)内存回收与共享")]),s._v(" "),t("p",[s._v("因为 C 语言不具备自动内存回收功能, 当将 redisObject 对象作为数据库的键或值而不是作为参数存储时其生命周期是非常长的, 为了解决这个问题, Redis "),t("strong",[s._v("自己构建了一个内存回收机制")]),s._v(", 通过 redisobject 结构中的 "),t("strong",[s._v("refcount")]),s._v(" 实现. 这个属性会随着对象的"),t("strong",[s._v("使用状态而不断变化")]),s._v(". 当对象的引用计数值变为 0 时, 对象所占用的"),t("strong",[s._v("内存就会被释放")]),s._v(". refcount 属性除了能实现内存回收以外, 还能实现内存共享.")]),s._v(" "),t("p",[s._v("高并发写入场景中, 在条件允许情况下, 建议字符串"),t("strong",[s._v("长度控制在 39 字节")]),s._v("以内, 减少"),t("strong",[s._v("创建 redisObject")]),s._v(" 内存分配次数, 从而提高性能.")]),s._v(" "),t("h5",{attrs:{id:"_2-缩减键值对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-缩减键值对象"}},[s._v("#")]),s._v(" 2.缩减键值对象")]),s._v(" "),t("p",[t("strong",[s._v("减少内存")]),s._v("最直接的就是缩减 key 和 value "),t("strong",[s._v("长度")]),s._v(".")]),s._v(" "),t("p",[s._v("常见需求是把业务对象"),t("strong",[s._v("序列化")]),s._v("成二进制数组放入 Redis, 可以采用"),t("strong",[s._v("高效")]),s._v("的序列化工具降低数组大小, 也可以使用一些压缩算法对值压缩.")]),s._v(" "),t("h5",{attrs:{id:"_3-共享对象池"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-共享对象池"}},[s._v("#")]),s._v(" 3.共享对象池")]),s._v(" "),t("p",[t("strong",[s._v("共享对象池")]),s._v("指在 Redis 内部维护 "),t("strong",[s._v("[0-9999] 的整数对象池")]),s._v(", 只保留一万个整数为了防止对象池浪费. 创建大量的"),t("strong",[s._v("整数")]),s._v("类型 redisObject 存在内存开销, 每个 redisObject 内部结构至少占用 16 个字节, 甚至超过了整数自身空间消耗. 所以 Redis 内存维护一个 [0-9999] 整数对象池, 用于"),t("strong",[s._v("节约内存")]),s._v(". 除了整数值对象, 其他类型如 list, hash, set, zset 内部元素也可以使用整数对象池. 因此开发中在满足需求的前提下, 尽可能使用"),t("strong",[s._v("整数对象")]),s._v("以节省内存.")]),s._v(" "),t("p",[s._v("可见当数据"),t("strong",[s._v("大量使用 [0-9999] 的整数")]),s._v("时, 共享对象池可以节约大量内存. 当多一个引用时, 数据的"),t("strong",[s._v("引用数")]),s._v("会 + 1.")]),s._v(" "),t("p",[t("strong",[s._v("注意")]),s._v(": 当设置 maxmemory 并"),t("strong",[s._v("启用 LRU 相关淘汰策略")]),s._v(": volatile-lru, allkeys-lru 时, Redis "),t("strong",[s._v("禁止使用")]),s._v("共享对象池.")]),s._v(" "),t("blockquote",[t("p",[s._v("为啥开启maxmemory和LRU淘汰策略后对象池无效?")])]),s._v(" "),t("p",[s._v("LRU 算法晓获取对象"),t("strong",[s._v("最后被访问时间")]),s._v(", 以便淘汰"),t("strong",[s._v("最长未访问")]),s._v("数据, 每个对象最后访问时间存储在 redisObject 对象的 "),t("strong",[s._v("lru 字段")]),s._v(". 对象共享意味着多个引用共享"),t("strong",[s._v("同一个")]),s._v(" redisObject, 这时 lru 字段也会"),t("strong",[s._v("被共享")]),s._v(", 导致"),t("strong",[s._v("无法获取")]),s._v("每个对象的最后访问时间. 如果没有设置 maxmemory, 直到内存被用尽 Redis 也不会触发内存回收. 所以"),t("strong",[s._v("共享对象池与 maxmemory + LRU 策略冲突, 使用时需要注意")]),s._v(".")]),s._v(" "),t("p",[s._v("此外, 对于 "),t("strong",[s._v("ziplist 编码")]),s._v("的值对象, 即使内部数据为整数也"),t("strong",[s._v("无法")]),s._v("使用共享对象池, 因为 ziplist 使用"),t("strong",[s._v("压缩且内存连续")]),s._v("的结构, 对象共享判断成本过高.")]),s._v(" "),t("blockquote",[t("p",[s._v("为啥只有整数对象池?")])]),s._v(" "),t("p",[s._v("首先整数对象池"),t("strong",[s._v("复用几率最大")]),s._v(", 其次对象共享的一个关键操作就是判断相等性, 而整数"),t("strong",[s._v("比较算法")]),s._v("时间复杂度 "),t("strong",[s._v("O(1)")]),s._v(".")]),s._v(" "),t("p",[s._v("如果"),t("strong",[s._v("字符串判断相等性")]),s._v(", 时间复杂度 O(N) 特别是长字符串更消耗性能, 此外浮点数在 Redis 内部使用字符串存储. 对于更复杂的数据结构如 hash/list 等, 相等性判断需要 O(N^2). 这样的开销显然不合理, 因此 Redis 只保留整数共享对象池.")]),s._v(" "),t("h5",{attrs:{id:"_4-字符串优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-字符串优化"}},[s._v("#")]),s._v(" 4.字符串优化")]),s._v(" "),t("p",[s._v("字符串对象是 Redis 内部最常用的数据类型. 所有"),t("strong",[s._v("键都是字符串")]),s._v("类型, 值对象数据除了整数之外都使用字符串存储.")]),s._v(" "),t("p",[s._v("Redis 没有采用原生 C 语言字符串类型而是自己实现了字符串结构: "),t("strong",[s._v("内部简单动态字符串(SDS)")]),s._v(". SDS 存在空间预分配机制, 字符串之所以采用预分配的方式是"),t("strong",[s._v("防止修改操作需要不断重分配内存和字节数据拷贝")]),s._v(". 但这同样会造成"),t("strong",[s._v("内存浪费")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("优化:")])]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("减少字符串频繁修改操作如 append, setrange 等. 直接使用 set 修改字符串, 降低预分配带来的内存浪费和内存碎片化.")])]),s._v(" "),t("li",[t("strong",[s._v("字符串重构")]),s._v(": 不一定把每份数据作为字符串整体存储, 如 JSON 数据可以使用 hash 结构, 使用"),t("strong",[s._v("二级结构")]),s._v("存储也能节省内存.")])]),s._v(" "),t("h5",{attrs:{id:"_5-编码优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-编码优化"}},[s._v("#")]),s._v(" 5.编码优化")]),s._v(" "),t("p",[s._v("编码就是具体使用哪种"),t("strong",[s._v("底层数据结构")]),s._v("来实现. 编码不同将直接影响数据的内存占用和读写效率. 通过不同编码实现"),t("strong",[s._v("效率和空间的平衡")]),s._v(".")]),s._v(" "),t("p",[s._v("比如存储只有 10 个元素的"),t("strong",[s._v("列表")]),s._v(", 当使用"),t("strong",[s._v("双向链表")]),s._v("数据结构时, 必然需要维护大量的内部字段如: 前置指针, 后置指针, 数据指针等, 造成空间浪费, 如果采用"),t("strong",[s._v("连续线性内存结构")]),s._v("的压缩列表(ziplist) 将会节省大量内存而由于数据长度较小, 存取操作时间复杂度即使为 O(N^2) 也可以满足要求. "),t("strong",[s._v("ziplist 编码")]),s._v("是应用范围最广的一种, 可以分别作为 hash/ list / zset /类型的底层数据结构实现. ziplist 就是"),t("strong",[s._v("效率和空间的平衡")]),s._v("的重要体现.")]),s._v(" "),t("p",[s._v("编码类型转换在 Redis 写入数据时"),t("strong",[s._v("自动完成")]),s._v(", 这个转换过程是"),t("strong",[s._v("不可逆")]),s._v("的. 转换规则只能从"),t("strong",[s._v("小内存编码向大内存编码")]),s._v("转换.")]),s._v(" "),t("p",[t("strong",[s._v("intset")]),s._v(" 是集合(set) 类型编码的一种, 当使用"),t("strong",[s._v("整数集合")]),s._v("时尽量使用 intset 编码.")]),s._v(" "),t("p",[s._v("使用 "),t("strong",[s._v("object encoding {key}")]),s._v(" 命令可以获取编码类型.")]),s._v(" "),t("h5",{attrs:{id:"_6-控制键的数量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-控制键的数量"}},[s._v("#")]),s._v(" 6.控制键的数量")]),s._v(" "),t("p",[s._v("当使用 Redis 存储大量数据时, 通常会存在"),t("strong",[s._v("大量键")]),s._v(", 过多的键同样会消耗大量内存.")]),s._v(" "),t("p",[s._v("对于存储相同的数据内容利用 Redis 的数据结构"),t("strong",[s._v("降低外层键的数量")]),s._v(", 可以节省内存, 如使用 hash 结构.")]),s._v(" "),t("p",[s._v("对于"),t("strong",[s._v("大量小对象")]),s._v("的存储场景, 非常适合用 "),t("strong",[s._v("ziplist 编码的 hash 类型")]),s._v("控制键的规模来降低内存.")]),s._v(" "),t("h3",{attrs:{id:"redis阻塞"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis阻塞"}},[s._v("#")]),s._v(" Redis阻塞")]),s._v(" "),t("p",[s._v("Redis 是单线程架构, 阻塞起来很难受, 总结一下可能导致 Redis 阻塞的情况. 主要分为内在原因和外在原因.")]),s._v(" "),t("p",[t("strong",[s._v("内在原因")]),s._v(": 不合理的使用 API 或数据结构, CPU 饱和, 持久化阻塞等.")]),s._v(" "),t("p",[t("strong",[s._v("外在原因")]),s._v(": CPU 竞争, 内存交换, 网络问题等.")]),s._v(" "),t("h4",{attrs:{id:"阻塞发现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#阻塞发现"}},[s._v("#")]),s._v(" 阻塞发现")]),s._v(" "),t("p",[s._v("如何发现阻塞问题? 先分析是不是 Redis 内在原因, 如果不是, 再定位可能的外在原因.")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("应用层可以加入异常监控逻辑")]),s._v(", 比如引入日志系统, 统计阻塞的情况.")]),s._v(" "),t("li",[s._v("可以借助一些 Redis 监控系统进行阻塞监控.")]),s._v(" "),t("li",[s._v("可以通过定期分析 Redis 日志的方式来发现阻塞的问题.")]),s._v(" "),t("li",[s._v("使用 Redis 提供的慢查询功能进行慢查询分析, 如 slowlog get {n} 获取慢查询记录. 但慢查询只记录命令执行的时间, 而阻塞原因是多种多样的.")])]),s._v(" "),t("h4",{attrs:{id:"阻塞内在原因"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#阻塞内在原因"}},[s._v("#")]),s._v(" 阻塞内在原因")]),s._v(" "),t("h5",{attrs:{id:"_1-api或数据结构使用不合理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-api或数据结构使用不合理"}},[s._v("#")]),s._v(" 1.API或数据结构使用不合理")]),s._v(" "),t("p",[s._v("有的命令时间复杂度是 "),t("strong",[s._v("O(N)")]),s._v(" 的, 如果数据量比较大("),t("strong",[s._v("大对象")]),s._v("), 就容易造成阻塞. "),t("strong",[s._v("应该避免在大对象上执行复杂度超过 O(N) 的命令.")])]),s._v(" "),t("p",[s._v("这类原因适合用"),t("strong",[s._v("慢查询记录")]),s._v("来进行查找. 大对象的查找可以通过 "),t("strong",[s._v("redis-cli --bigkeys")]),s._v(" 命令进行扫描寻找.")]),s._v(" "),t("p",[s._v("解决方法:")]),s._v(" "),t("ul",[t("li",[s._v("修改为时间"),t("strong",[s._v("复杂度较低")]),s._v("的算法. 比如 hegtall 修改为 hmget, 禁用 keys, sort 命令等.")]),s._v(" "),t("li",[t("strong",[s._v("调整大对象")]),s._v(". 将大对象数据拆分成多个小对象, 防止一次操作读取过多数据.")])]),s._v(" "),t("h5",{attrs:{id:"_2-cpu饱和"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-cpu饱和"}},[s._v("#")]),s._v(" 2.CPU饱和")]),s._v(" "),t("p",[s._v("Redis 执行命令只会用一个 CPU, CPU 饱和指 Redis 把单核 CPU 使用到了接近 100%. 使用 "),t("strong",[s._v("top 命令")]),s._v("可以识别出 Redis 进程是否占用了较多 CPU.")]),s._v(" "),t("h5",{attrs:{id:"_3-持久化阻塞🌟"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-持久化阻塞🌟"}},[s._v("#")]),s._v(" 3.持久化阻塞🌟")]),s._v(" "),t("p",[s._v("持久化过程挺多造成阻塞的原因.")]),s._v(" "),t("h6",{attrs:{id:"_1-fork阻塞"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-fork阻塞"}},[s._v("#")]),s._v(" (1)fork阻塞")]),s._v(" "),t("p",[s._v("fork 操作发生在"),t("strong",[s._v("执行 RDB 或 AOF 的重写")]),s._v("时, 主线程调用 fork 产生"),t("strong",[s._v("子进程")]),s._v("完成持久化操作. 这个过程也可能阻塞.")]),s._v(" "),t("p",[s._v("可以执行 "),t("strong",[s._v("info stats")]),s._v(" 命令获取到 "),t("strong",[s._v("latest_fork_usec")]),s._v(" 指标查看最近一次 fork 操作的耗时.")]),s._v(" "),t("h6",{attrs:{id:"_2-aof刷盘阻塞"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-aof刷盘阻塞"}},[s._v("#")]),s._v(" (2)AOF刷盘阻塞")]),s._v(" "),t("p",[s._v("开启 AOF 持久化时, 文件刷盘方式一般采用每秒 1 次, 后台线程每秒对 AOF 文件做 "),t("strong",[s._v("fsync")]),s._v(" 操作. 当主线程发现距离上一次的 fsync 成功"),t("strong",[s._v("超过 2 秒")]),s._v("时, 为了数据安全性它会"),t("strong",[s._v("阻塞")]),s._v("直到后台线程执行 fsync "),t("strong",[s._v("成功")]),s._v(".")]),s._v(" "),t("p",[s._v("这种阻塞行为主要是由"),t("strong",[s._v("硬盘压力")]),s._v("引起的, 比如其他进程正在大量占用硬盘资源, 导致 Redis 进程刷盘超时. 可以使用 "),t("strong",[s._v("iotop")]),s._v(" 指令查看进程使用"),t("strong",[s._v("硬盘资源")]),s._v("的情况.")]),s._v(" "),t("h6",{attrs:{id:"_3-hugepage写操作阻塞"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-hugepage写操作阻塞"}},[s._v("#")]),s._v(" (3)HugePage写操作阻塞")]),s._v(" "),t("p",[s._v("子进程在执行重写期间利用 Linux 写时复制技术降低内存开销, 因此只有在写操作的时候 Redis 才复制要修改的内存页.")]),s._v(" "),t("p",[s._v("对于"),t("strong",[s._v("开启了 Transparent HugePage")]),s._v(" 的操作系统, 每次"),t("strong",[s._v("写命令")]),s._v("引起的复制内存页单位由 4K 变为 2MB, 增大了 512 倍, 会"),t("strong",[s._v("拖慢写操作")]),s._v("执行时间.")]),s._v(" "),t("h4",{attrs:{id:"阻塞外在原因"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#阻塞外在原因"}},[s._v("#")]),s._v(" 阻塞外在原因")]),s._v(" "),t("h5",{attrs:{id:"_1-cpu竞争"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-cpu竞争"}},[s._v("#")]),s._v(" 1.CPU竞争")]),s._v(" "),t("p",[s._v("Redis 是典型的 CPU 密集型应用, 不建议和其他密集型服务一起部署. 其他进程可能竞争 CPU. 如果做了 CPU 绑定, 那么子进程和父进程会共享使用同一个 CPU, 子进程占用 CPU 通常较大, 对于开启了持久化或者参与复制的主节点不建议绑定 CPU.")]),s._v(" "),t("h5",{attrs:{id:"_2-内存交换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-内存交换"}},[s._v("#")]),s._v(" 2.内存交换")]),s._v(" "),t("p",[s._v("Redis 是基于内存工作的, 如果"),t("strong",[s._v("发生了内存交换")]),s._v("那对性能影响"),t("strong",[s._v("极大")]),s._v(". 排查方式如下.")]),s._v(" "),t("ul",[t("li",[s._v("查询 Redis 进程号.")])]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("redis-cli "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6739")]),s._v(" info server "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" process_id\nprocess_id:4476\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("ul",[t("li",[s._v("根据进程号查看内存交换信息.")])]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" /proc/4476/smaps "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" Swap\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("为防止内存交换, 需要保证机器"),t("strong",[s._v("内存充足")]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"_3-网络问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-网络问题"}},[s._v("#")]),s._v(" 3.网络问题")]),s._v(" "),t("p",[s._v("网络也可能出现问题导致阻塞, 如: "),t("strong",[s._v("连接拒绝, 网络延迟, 网卡软中断")]),s._v("等.")]),s._v(" "),t("h3",{attrs:{id:"redis运维"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis运维"}},[s._v("#")]),s._v(" Redis运维")]),s._v(" "),t("p",[s._v("总结一下 Redis 运维指南.")]),s._v(" "),t("h4",{attrs:{id:"linux相关优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#linux相关优化"}},[s._v("#")]),s._v(" Linux相关优化")]),s._v(" "),t("p",[s._v("Redis 部署在 Linux 上, 所以 Linux 配置也会影响 Redis 性能.")]),s._v(" "),t("ul",[t("li",[s._v("Transparent Huge Pages(THP) 建议关闭掉.")]),s._v(" "),t("li",[s._v("建议对 Redis 所有节点所在机器使用 "),t("strong",[s._v("NTP")]),s._v(" 服务.")]),s._v(" "),t("li",[s._v("合理设置 ulimit 保证网络连接正常.")]),s._v(" "),t("li",[s._v("合理设置 tcp-backlog 参数.")])]),s._v(" "),t("h4",{attrs:{id:"redis安全建议"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis安全建议"}},[s._v("#")]),s._v(" Redis安全建议")]),s._v(" "),t("ul",[t("li",[s._v("需要设置 Redis 密码.")]),s._v(" "),t("li",[s._v("合理的防火墙可以防止攻击.")]),s._v(" "),t("li",[s._v("可以适当错开 Redis 默认端口启动, 防止被攻击.")])]),s._v(" "),t("h4",{attrs:{id:"redis部署"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis部署"}},[s._v("#")]),s._v(" Redis部署")]),s._v(" "),t("blockquote",[t("p",[s._v("一个问题: 生产环境中的 Redis 是怎么部署的?")])]),s._v(" "),t("p",[s._v("看看你了解不了解你们公司的 Redis 生产集群的部署架构, 如果你不了解, 那么确实你就很失职了, 你的 Redis 是主从架构? 集群架构? 用了哪种集群方案? 有没有做高可用保证? 有没有开启持久化机制确保可以进行数据恢复? 线上 Redis 给几个 G 的内存? 设置了哪些参数? 压测后你们 Redis 集群承载多少 QPS?")]),s._v(" "),t("p",[s._v("Demo: "),t("strong",[s._v("Redis cluster, 10 台机器, 5 台机器部署了 Redis 主实例, 另外 5 台机器部署了 Redis 的从实例")]),s._v(", 每个主实例挂了一个从实例, 5 个节点对外提供读写服务, "),t("strong",[s._v("每个节点的读写高峰 QPS 可能可以达到每秒 5 万, 5 台机器最多是 25 万读写请求/s.")])]),s._v(" "),t("p",[s._v("机器是什么配置? "),t("strong",[s._v("32G 内存+ 8 核 CPU + 1T 磁盘")]),s._v(", 但是分配给 Redis 进程的是 10G 内存, 一般线上生产环境, Redis 的内存尽量"),t("strong",[s._v("不要超过 10G, 超过 10G 可能会有问题")]),s._v(".")]),s._v(" "),t("p",[s._v("5 台机器对外提供读写, 一共有 "),t("strong",[s._v("50G")]),s._v(" 内存.")]),s._v(" "),t("p",[s._v("因为每个主实例都挂了一个从实例, 所以是高可用的, 任何一个主实例宕机, 都会自动故障迁移, Redis 从实例会自动变成主实例继续提供读写服务.")]),s._v(" "),t("h4",{attrs:{id:"其他"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[s._v("#")]),s._v(" 其他")]),s._v(" "),t("h5",{attrs:{id:"_1-bigkey"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-bigkey"}},[s._v("#")]),s._v(" 1.bigkey")]),s._v(" "),t("p",[s._v("bigkey 可能造成数据倾斜, 超时阻塞, 网络拥塞, 是 Redis 生产环境的一颗定时炸弹. 删除 bigkey 通常使用"),t("strong",[s._v("渐进式")]),s._v("遍历的方式进行, 防止出现阻塞.")]),s._v(" "),t("h5",{attrs:{id:"_2-热点key"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-热点key"}},[s._v("#")]),s._v(" 2.热点key")]),s._v(" "),t("p",[s._v("可以通过客户端, 代理, monitor, 抓包等方式找到热点 key 进行分析.")]),s._v(" "),t("h4",{attrs:{id:"redis配置文件详解🌟"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis配置文件详解🌟"}},[s._v("#")]),s._v(" Redis配置文件详解🌟")]),s._v(" "),t("p",[s._v("注意: 如果想在一台机器上不同端口启动多个 Redis 服务, 就把后面的配置文件修改下, 后面加上配置文件路径启动即可. 端口和数据, 日志等改下.")]),s._v(" "),t("p",[s._v("Redis 配置文件样例:")]),s._v(" "),t("div",{staticClass:"language-properties line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-properties"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 配置yes使Redis以守护进程运行")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("daemonize")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("yes")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 当Redis以守护进程方式运行时, Redis默认会把pid写入/var/run/redis.pid文件, 可以通过pidfile指定")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("pidfile")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("/var/run/redis.pid")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Redis监听端口, 默认端口为6379, 如果指定0端口, 表示Redis不监听TCP连接")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("port")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("6379")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 绑定的主机地址, 可以绑定单一接口, 如果没有绑定, 所有接口都会监听到来的连接")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# bind 127.0.0.1")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Specify the path for the unix socket that will be used to listen for")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# incoming connections. There is no default, so Redis will not listen")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# on a unix socket when not specified.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# unixsocket /tmp/redis.sock")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# unixsocketperm 755")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 当客户端闲置多长时间后关闭连接, 如果指定为0, 表示关闭该功能")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("timeout")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("0")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定日志记录级别, 包含: debug, verbose, notice, warning, 默认为verbose")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("loglevel")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("verbose")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 日志记录方式, 默认为标准输出")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("logfile")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("/var/log/redis.log")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置数据库的数量, 默认数据库为0, 可以使用select <dbid>命令在连接上指定数据库id")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# dbid是从0到'databases'-1的数目")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("databases")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("16")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("################################ SNAPSHOTTING #################################")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定在多长时间内, 有多少次更新操作, 就将数据同步到数据文件, 可以多个条件配合")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Save the DB on disk:")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   save <seconds> <changes>")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   Will save the DB if both the given number of seconds and the given")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   number of write operations against the DB occurred.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   满足以下条件将会同步数据:")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   900秒(15分钟)内有1个更改")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   300秒(5分钟)内有10个更改")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   60秒内有10000个更改")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   Note: 可以把所有“save”行注释掉, 这样就取消同步操作了")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("save")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("900 1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("save")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("300 10")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("save")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("60 10000")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定存储至本地数据库时是否压缩数据, 默认为yes")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("rdbcompression")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("yes")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定本地数据库文件名, 默认值为dump.rdb")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("dbfilename")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("/usr/local/redis/dump.rdb")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 工作目录.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定本地数据库存放目录, 文件名由上一个dbfilename配置项指定")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 注意: 只能指定一个目录, 不能指定文件名")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("dir")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("/usr/local/redis")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("################################# 复制相关 #################################")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 主从复制. 使用slaveof从 Redis服务器复制一个Redis实例. 注意, 该配置仅限于当前slave有效")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置当本机为slav服务时, 设置master服务的ip地址及端口, 在Redis启动时, 它会自动从master进行数据同步")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# slaveof <masterip> <masterport>")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 当master服务设置了密码保护时, slave服务连接master的密码")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# 下文的"requirepass"配置项可以指定密码')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# masterauth <master-password>")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# When a slave lost the connection with the master, or when the replication")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# is still in progress, the slave can act in two different ways:")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 1) if slave-serve-stale-data is set to 'yes' (the default) the slave will")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#    still reply to client requests, possibly with out of data data, or the")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#    data set may just be empty if this is the first synchronization.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 2) if slave-serve-stale data is set to 'no' the slave will reply with")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#    an error "SYNC with master in progress" to all the kind of commands')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#    but to INFO and SLAVEOF.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("slave-serve-stale-data")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("yes")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Slaves send PINGs to server in a predefined interval. It's possible to change")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# this interval with the repl_ping_slave_period option. The default value is 10")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# seconds.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# repl-ping-slave-period 10")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# The following option sets a timeout for both Bulk transfer I/O timeout and")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# master data or ping response timeout. The default value is 60 seconds.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# It is important to make sure that this value is greater than the value")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# specified for repl-ping-slave-period otherwise a timeout will be detected")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# every time there is low traffic between the master and the slave.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# repl-timeout 60")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("################################## SECURITY ###################################")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置Redis连接密码, 如果配置了连接密码, 客户端在连接Redis时需要通过auth <password>命令提供密码, 默认关闭")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# requirepass foobared")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Command renaming.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# It is possilbe to change the name of dangerous commands in a shared")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# environment. For instance the CONFIG command may be renamed into something")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# of hard to guess so that it will be still available for internal-use")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# tools but not available for general clients.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Example:")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# It is also possilbe to completely kill a command renaming it into")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# an empty string:")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# rename-command CONFIG ""')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("################################### LIMITS ####################################")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置同一时间最大客户端连接数, 默认无限制, Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数, ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果设置maxclients 0, 表示不作限制. 当客户端连接数到达限制时, Redis会关闭新的连接并向客户端返回max Number of clients reached错误信息")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# maxclients 128")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Don't use more memory than the specified amount of bytes.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# When the memory limit is reached Redis will try to remove keys with an")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# EXPIRE set. It will try to start freeing keys that are going to expire")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# in little time and preserve keys with a longer time to live.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Redis will also try to remove objects from free lists if possible.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# If all this fails, Redis will start to reply with errors to commands")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# that will use more memory, like SET, LPUSH, and so on, and will continue")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# to reply to most read-only commands like GET.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# WARNING: maxmemory can be a good idea mainly if you want to use Redis as a")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 'state' server or cache, not as a real DB. When Redis is used as a real")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# database the memory usage will grow over the weeks, it will be obvious if")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# it is going to use too much memory in the long run, and you'll have the time")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# to upgrade. With maxmemory after the limit is reached you'll start to get")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# errors for write operations, and this may even lead to DB inconsistency.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定Redis最大内存限制, Redis在启动时会把数据加载到内存中, 达到最大内存后, Redis会先尝试清除已到期或即将到期的Key, ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 当此方法处理后, 仍然到达最大内存设置, 将无法再进行写入操作, 但仍然可以进行读取操作. ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Redis新的vm机制, 会把Key存放内存, Value会存放在swap区")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# maxmemory <bytes>")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# MAXMEMORY POLICY: how Redis will select what to remove when maxmemory")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# is reached? You can select among five behavior:")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# volatile-lru -> remove the key with an expire set using an LRU algorithm")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# allkeys-lru -> remove any key accordingly to the LRU algorithm")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# volatile-random -> remove a random key with an expire set")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# allkeys->random -> remove a random key, any key")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# volatile-ttl -> remove the key with the nearest expire time (minor TTL)")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# noeviction -> don't expire at all, just return an error on write operations")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Note: with all the kind of policies, Redis will return an error on write")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#       operations, when there are not suitable keys for eviction.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#       At the date of writing this commands are: set setnx setex append")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#       incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#       sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#       zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#       getset mset msetnx exec sort")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# The default is:")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# maxmemory-policy volatile-lru")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# LRU and minimal TTL algorithms are not precise algorithms but approximated")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# algorithms (in order to save memory), so you can select as well the sample")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# size to check. For instance for default Redis will check three keys and")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# pick the one that was used less recently, you can change the sample size")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# using the following configuration directive.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# maxmemory-samples 3")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("############################## APPEND ONLY MODE ###############################")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Note that you can have both the async dumps and the append only file if you")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# like (you have to comment the "save" statements above to disable the dumps).')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Still if append only mode is enabled Redis will load the data from the")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# log file at startup ignoring the dump.rdb file.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定是否在每次更新操作后进行日志记录, Redis在默认情况下是异步的把数据写入磁盘, 如果不开启, 可能会在断电时导致一段时间内的数据丢失. ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 因为redis本身同步数据文件是按上面save条件来同步的, 所以有的数据会在一段时间内只存在于内存中. 默认为no")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# IMPORTANT: Check the BGREWRITEAOF to check how to rewrite the append")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# log file in background when it gets too big.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("appendonly")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("no")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定更新日志文件名, 默认为appendonly.aof")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# appendfilename appendonly.aof")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# The fsync() call tells the Operating System to actually write data on disk")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# instead to wait for more data in the output buffer. Some OS will really flush ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# data on disk, some other OS will just try to do it ASAP.")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定更新日志条件, 共有3个可选值: ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# no:表示等操作系统进行数据缓存同步到磁盘(快)")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# always:表示每次更新操作后手动调用fsync()将数据写到磁盘(慢, 安全)")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# everysec:表示每秒同步一次(折衷, 默认值)")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("appendfsync")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("everysec")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# appendfsync no")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# When the AOF fsync policy is set to always or everysec, and a background")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# saving process (a background save or AOF log background rewriting) is")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# performing a lot of I/O against the disk, in some Linux configurations")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Redis may block too long on the fsync() call. Note that there is no fix for")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# this currently, as even performing fsync in a different thread will block")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# our synchronous write(2) call.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# In order to mitigate this problem it's possible to use the following option")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# that will prevent fsync() from being called in the main process while a")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# BGSAVE or BGREWRITEAOF is in progress.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# This means that while another child is saving the durability of Redis is")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# the same as "appendfsync none", that in pratical terms means that it is')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# possible to lost up to 30 seconds of log in the worst scenario (with the")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# default Linux settings).")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# If you have latency problems turn this to "yes". Otherwise leave it as')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "no" that is the safest pick from the point of view of durability.')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("no-appendfsync-on-rewrite")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("no")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Automatic rewrite of the append only file.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Redis is able to automatically rewrite the log file implicitly calling")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# BGREWRITEAOF when the AOF log size will growth by the specified percentage.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# This is how it works: Redis remembers the size of the AOF file after the")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# latest rewrite (or if no rewrite happened since the restart, the size of")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# the AOF at startup is used).")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# This base size is compared to the current size. If the current size is")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# bigger than the specified percentage, the rewrite is triggered. Also")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# you need to specify a minimal size for the AOF file to be rewritten, this")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# is useful to avoid rewriting the AOF file even if the percentage increase")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# is reached but it is still pretty small.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Specify a precentage of zero in order to disable the automatic AOF")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# rewrite feature.")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("auto-aof-rewrite-percentage")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("100")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("auto-aof-rewrite-min-size")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("64mb")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("################################## SLOW LOG ###################################")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# The Redis Slow Log is a system to log queries that exceeded a specified")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# execution time. The execution time does not include the I/O operations")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# like talking with the client, sending the reply and so forth,")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# but just the time needed to actually execute the command (this is the only")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# stage of command execution where the thread is blocked and can not serve")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# other requests in the meantime).")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# You can configure the slow log with two parameters: one tells Redis")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# what is the execution time, in microseconds, to exceed in order for the")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# command to get logged, and the other parameter is the length of the")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# slow log. When a new command is logged the oldest one is removed from the")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# queue of logged commands.")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# The following time is expressed in microseconds, so 1000000 is equivalent")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# to one second. Note that a negative number disables the slow log, while")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# a value of zero forces the logging of every command.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("slowlog-log-slower-than")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("10000")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# There is no limit to this length. Just be aware that it will consume memory.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# You can reclaim memory used by the slow log with SLOWLOG RESET.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("slowlog-max-len")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("1024")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("################################ VIRTUAL MEMORY ###############################")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### WARNING! Virtual Memory is deprecated in Redis 2.4")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### The use of Virtual Memory is strongly discouraged.")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### WARNING! Virtual Memory is deprecated in Redis 2.4")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### The use of Virtual Memory is strongly discouraged.")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Virtual Memory allows Redis to work with datasets bigger than the actual")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# amount of RAM needed to hold the whole dataset in memory.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# In order to do so very used keys are taken in memory while the other keys")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# are swapped into a swap file, similarly to what operating systems do")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# with memory pages.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定是否启用虚拟内存机制, 默认值为no, ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# VM机制将数据分页存放, 由Redis将访问量较少的页即冷数据swap到磁盘上, 访问多的页面由磁盘自动换出到内存中")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 把vm-enabled设置为yes, 根据需要设置好接下来的三个VM参数, 就可以启动VM了")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("vm-enabled")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("no")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# vm-enabled yes")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# This is the path of the Redis swap file. As you can guess, swap files")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# can't be shared by different Redis instances, so make sure to use a swap")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# file for every redis process you are running. Redis will complain if the")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# swap file is already in use.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Redis交换文件最好的存储是SSD(固态硬盘)")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 虚拟内存文件路径, 默认值为/tmp/redis.swap, 不可多个Redis实例共享")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# *** WARNING *** if you are using a shared hosting the default of putting")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# the swap file under /tmp is not secure. Create a dir with access granted")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# only to Redis user and configure Redis to create the swap file there.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("vm-swap-file")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("/tmp/redis.swap")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# With vm-max-memory 0 the system will swap everything it can. Not a good")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# default, just specify the max amount of RAM you can in bytes, but it's")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# better to leave some margin. For instance specify an amount of RAM")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# that's more or less between 60 and 80% of your free RAM.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将所有大于vm-max-memory的数据存入虚拟内存, 无论vm-max-memory设置多少, 所有索引数据都是内存存储的(Redis的索引数据就是keys)")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 也就是说当vm-max-memory设置为0的时候, 其实是所有value都存在于磁盘. 默认值为0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("vm-max-memory")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("0")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Redis swap文件分成了很多的page, 一个对象可以保存在多个page上面, 但一个page上不能被多个对象共享, vm-page-size是要根据存储的数据大小来设定的. ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 建议如果存储很多小对象, page大小最后设置为32或64bytes; 如果存储很大的对象, 则可以使用更大的page, 如果不确定, 就使用默认值")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("vm-page-size")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("32")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置swap文件中的page数量由于页表(一种表示页面空闲或使用的bitmap)是存放在内存中的, 在磁盘上每8个pages将消耗1byte的内存")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# swap空间总容量为 vm-page-size * vm-pages")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# With the default of 32-bytes memory pages and 134217728 pages Redis will")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# use a 4 GB swap file, that will use 16 MB of RAM for the page table.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# It's better to use the smallest acceptable value for your application,")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# but the default is large in order to work in most conditions.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("vm-pages")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("134217728")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Max number of VM I/O threads running at the same time.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# This threads are used to read/write data from/to swap file, since they")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# also encode and decode objects from disk to memory or the reverse, a bigger")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# number of threads can help with big objects even if they can't help with")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# I/O itself as the physical device may not be able to couple with many")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# reads/writes operations at the same time.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置访问swap文件的I/O线程数, 最后不要超过机器的核数, 如果设置为0, 那么所有对swap文件的操作都是串行的, 可能会造成比较长时间的延迟, 默认值为4")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("vm-max-threads")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("4")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("############################### ADVANCED CONFIG ###############################")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Hashes are encoded in a special way (much more memory efficient) when they")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# have at max a given numer of elements, and the biggest element does not")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# exceed a given threshold. You can configure this limits with the following")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# configuration directives.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定在超过一定的数量或者最大的元素超过某一临界值时, 采用一种特殊的哈希算法")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("hash-max-zipmap-entries")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("512")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("hash-max-zipmap-value")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("64")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Similarly to hashes, small lists are also encoded in a special way in order")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# to save a lot of space. The special representation is only used when")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# you are under the following limits:")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("list-max-ziplist-entries")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("512")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("list-max-ziplist-value")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("64")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Sets have a special encoding in just one case: when a set is composed")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# of just strings that happens to be integers in radix 10 in the range")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# of 64 bit signed integers.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# The following configuration setting sets the limit in the size of the")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# set in order to use this special memory saving encoding.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("set-max-intset-entries")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("512")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Similarly to hashes and lists, sorted sets are also specially encoded in")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# order to save a lot of space. This encoding is only used when the length and")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# elements of a sorted set are below the following limits:")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("zset-max-ziplist-entries")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("128")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("zset-max-ziplist-value")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("64")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# order to help rehashing the main Redis hash table (the one mapping top-level")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# keys to values). The hash table implementation redis uses (see dict.c)")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# performs a lazy rehashing: the more operation you run into an hash table")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# that is rhashing, the more rehashing "steps" are performed, so if the')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# server is idle the rehashing is never complete and some more memory is used")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# by the hash table.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# The default is to use this millisecond 10 times every second in order to")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# active rehashing the main dictionaries, freeing memory when possible.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# If unsure:")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# use "activerehashing no" if you have hard latency requirements and it is')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# not a good thing in your environment that Redis can reply form time to time")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# to queries with 2 milliseconds delay.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定是否激活重置哈希, 默认为开启")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("activerehashing")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("yes")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("################################## INCLUDES ###################################")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定包含其他的配置文件, 可以在同一主机上多个Redis实例之间使用同一份配置文件, 而同时各实例又拥有自己的特定配置文件")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# include /path/to/local.conf")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# include /path/to/other.conf")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br"),t("span",{staticClass:"line-number"},[s._v("59")]),t("br"),t("span",{staticClass:"line-number"},[s._v("60")]),t("br"),t("span",{staticClass:"line-number"},[s._v("61")]),t("br"),t("span",{staticClass:"line-number"},[s._v("62")]),t("br"),t("span",{staticClass:"line-number"},[s._v("63")]),t("br"),t("span",{staticClass:"line-number"},[s._v("64")]),t("br"),t("span",{staticClass:"line-number"},[s._v("65")]),t("br"),t("span",{staticClass:"line-number"},[s._v("66")]),t("br"),t("span",{staticClass:"line-number"},[s._v("67")]),t("br"),t("span",{staticClass:"line-number"},[s._v("68")]),t("br"),t("span",{staticClass:"line-number"},[s._v("69")]),t("br"),t("span",{staticClass:"line-number"},[s._v("70")]),t("br"),t("span",{staticClass:"line-number"},[s._v("71")]),t("br"),t("span",{staticClass:"line-number"},[s._v("72")]),t("br"),t("span",{staticClass:"line-number"},[s._v("73")]),t("br"),t("span",{staticClass:"line-number"},[s._v("74")]),t("br"),t("span",{staticClass:"line-number"},[s._v("75")]),t("br"),t("span",{staticClass:"line-number"},[s._v("76")]),t("br"),t("span",{staticClass:"line-number"},[s._v("77")]),t("br"),t("span",{staticClass:"line-number"},[s._v("78")]),t("br"),t("span",{staticClass:"line-number"},[s._v("79")]),t("br"),t("span",{staticClass:"line-number"},[s._v("80")]),t("br"),t("span",{staticClass:"line-number"},[s._v("81")]),t("br"),t("span",{staticClass:"line-number"},[s._v("82")]),t("br"),t("span",{staticClass:"line-number"},[s._v("83")]),t("br"),t("span",{staticClass:"line-number"},[s._v("84")]),t("br"),t("span",{staticClass:"line-number"},[s._v("85")]),t("br"),t("span",{staticClass:"line-number"},[s._v("86")]),t("br"),t("span",{staticClass:"line-number"},[s._v("87")]),t("br"),t("span",{staticClass:"line-number"},[s._v("88")]),t("br"),t("span",{staticClass:"line-number"},[s._v("89")]),t("br"),t("span",{staticClass:"line-number"},[s._v("90")]),t("br"),t("span",{staticClass:"line-number"},[s._v("91")]),t("br"),t("span",{staticClass:"line-number"},[s._v("92")]),t("br"),t("span",{staticClass:"line-number"},[s._v("93")]),t("br"),t("span",{staticClass:"line-number"},[s._v("94")]),t("br"),t("span",{staticClass:"line-number"},[s._v("95")]),t("br"),t("span",{staticClass:"line-number"},[s._v("96")]),t("br"),t("span",{staticClass:"line-number"},[s._v("97")]),t("br"),t("span",{staticClass:"line-number"},[s._v("98")]),t("br"),t("span",{staticClass:"line-number"},[s._v("99")]),t("br"),t("span",{staticClass:"line-number"},[s._v("100")]),t("br"),t("span",{staticClass:"line-number"},[s._v("101")]),t("br"),t("span",{staticClass:"line-number"},[s._v("102")]),t("br"),t("span",{staticClass:"line-number"},[s._v("103")]),t("br"),t("span",{staticClass:"line-number"},[s._v("104")]),t("br"),t("span",{staticClass:"line-number"},[s._v("105")]),t("br"),t("span",{staticClass:"line-number"},[s._v("106")]),t("br"),t("span",{staticClass:"line-number"},[s._v("107")]),t("br"),t("span",{staticClass:"line-number"},[s._v("108")]),t("br"),t("span",{staticClass:"line-number"},[s._v("109")]),t("br"),t("span",{staticClass:"line-number"},[s._v("110")]),t("br"),t("span",{staticClass:"line-number"},[s._v("111")]),t("br"),t("span",{staticClass:"line-number"},[s._v("112")]),t("br"),t("span",{staticClass:"line-number"},[s._v("113")]),t("br"),t("span",{staticClass:"line-number"},[s._v("114")]),t("br"),t("span",{staticClass:"line-number"},[s._v("115")]),t("br"),t("span",{staticClass:"line-number"},[s._v("116")]),t("br"),t("span",{staticClass:"line-number"},[s._v("117")]),t("br"),t("span",{staticClass:"line-number"},[s._v("118")]),t("br"),t("span",{staticClass:"line-number"},[s._v("119")]),t("br"),t("span",{staticClass:"line-number"},[s._v("120")]),t("br"),t("span",{staticClass:"line-number"},[s._v("121")]),t("br"),t("span",{staticClass:"line-number"},[s._v("122")]),t("br"),t("span",{staticClass:"line-number"},[s._v("123")]),t("br"),t("span",{staticClass:"line-number"},[s._v("124")]),t("br"),t("span",{staticClass:"line-number"},[s._v("125")]),t("br"),t("span",{staticClass:"line-number"},[s._v("126")]),t("br"),t("span",{staticClass:"line-number"},[s._v("127")]),t("br"),t("span",{staticClass:"line-number"},[s._v("128")]),t("br"),t("span",{staticClass:"line-number"},[s._v("129")]),t("br"),t("span",{staticClass:"line-number"},[s._v("130")]),t("br"),t("span",{staticClass:"line-number"},[s._v("131")]),t("br"),t("span",{staticClass:"line-number"},[s._v("132")]),t("br"),t("span",{staticClass:"line-number"},[s._v("133")]),t("br"),t("span",{staticClass:"line-number"},[s._v("134")]),t("br"),t("span",{staticClass:"line-number"},[s._v("135")]),t("br"),t("span",{staticClass:"line-number"},[s._v("136")]),t("br"),t("span",{staticClass:"line-number"},[s._v("137")]),t("br"),t("span",{staticClass:"line-number"},[s._v("138")]),t("br"),t("span",{staticClass:"line-number"},[s._v("139")]),t("br"),t("span",{staticClass:"line-number"},[s._v("140")]),t("br"),t("span",{staticClass:"line-number"},[s._v("141")]),t("br"),t("span",{staticClass:"line-number"},[s._v("142")]),t("br"),t("span",{staticClass:"line-number"},[s._v("143")]),t("br"),t("span",{staticClass:"line-number"},[s._v("144")]),t("br"),t("span",{staticClass:"line-number"},[s._v("145")]),t("br"),t("span",{staticClass:"line-number"},[s._v("146")]),t("br"),t("span",{staticClass:"line-number"},[s._v("147")]),t("br"),t("span",{staticClass:"line-number"},[s._v("148")]),t("br"),t("span",{staticClass:"line-number"},[s._v("149")]),t("br"),t("span",{staticClass:"line-number"},[s._v("150")]),t("br"),t("span",{staticClass:"line-number"},[s._v("151")]),t("br"),t("span",{staticClass:"line-number"},[s._v("152")]),t("br"),t("span",{staticClass:"line-number"},[s._v("153")]),t("br"),t("span",{staticClass:"line-number"},[s._v("154")]),t("br"),t("span",{staticClass:"line-number"},[s._v("155")]),t("br"),t("span",{staticClass:"line-number"},[s._v("156")]),t("br"),t("span",{staticClass:"line-number"},[s._v("157")]),t("br"),t("span",{staticClass:"line-number"},[s._v("158")]),t("br"),t("span",{staticClass:"line-number"},[s._v("159")]),t("br"),t("span",{staticClass:"line-number"},[s._v("160")]),t("br"),t("span",{staticClass:"line-number"},[s._v("161")]),t("br"),t("span",{staticClass:"line-number"},[s._v("162")]),t("br"),t("span",{staticClass:"line-number"},[s._v("163")]),t("br"),t("span",{staticClass:"line-number"},[s._v("164")]),t("br"),t("span",{staticClass:"line-number"},[s._v("165")]),t("br"),t("span",{staticClass:"line-number"},[s._v("166")]),t("br"),t("span",{staticClass:"line-number"},[s._v("167")]),t("br"),t("span",{staticClass:"line-number"},[s._v("168")]),t("br"),t("span",{staticClass:"line-number"},[s._v("169")]),t("br"),t("span",{staticClass:"line-number"},[s._v("170")]),t("br"),t("span",{staticClass:"line-number"},[s._v("171")]),t("br"),t("span",{staticClass:"line-number"},[s._v("172")]),t("br"),t("span",{staticClass:"line-number"},[s._v("173")]),t("br"),t("span",{staticClass:"line-number"},[s._v("174")]),t("br"),t("span",{staticClass:"line-number"},[s._v("175")]),t("br"),t("span",{staticClass:"line-number"},[s._v("176")]),t("br"),t("span",{staticClass:"line-number"},[s._v("177")]),t("br"),t("span",{staticClass:"line-number"},[s._v("178")]),t("br"),t("span",{staticClass:"line-number"},[s._v("179")]),t("br"),t("span",{staticClass:"line-number"},[s._v("180")]),t("br"),t("span",{staticClass:"line-number"},[s._v("181")]),t("br"),t("span",{staticClass:"line-number"},[s._v("182")]),t("br"),t("span",{staticClass:"line-number"},[s._v("183")]),t("br"),t("span",{staticClass:"line-number"},[s._v("184")]),t("br"),t("span",{staticClass:"line-number"},[s._v("185")]),t("br"),t("span",{staticClass:"line-number"},[s._v("186")]),t("br"),t("span",{staticClass:"line-number"},[s._v("187")]),t("br"),t("span",{staticClass:"line-number"},[s._v("188")]),t("br"),t("span",{staticClass:"line-number"},[s._v("189")]),t("br"),t("span",{staticClass:"line-number"},[s._v("190")]),t("br"),t("span",{staticClass:"line-number"},[s._v("191")]),t("br"),t("span",{staticClass:"line-number"},[s._v("192")]),t("br"),t("span",{staticClass:"line-number"},[s._v("193")]),t("br"),t("span",{staticClass:"line-number"},[s._v("194")]),t("br"),t("span",{staticClass:"line-number"},[s._v("195")]),t("br"),t("span",{staticClass:"line-number"},[s._v("196")]),t("br"),t("span",{staticClass:"line-number"},[s._v("197")]),t("br"),t("span",{staticClass:"line-number"},[s._v("198")]),t("br"),t("span",{staticClass:"line-number"},[s._v("199")]),t("br"),t("span",{staticClass:"line-number"},[s._v("200")]),t("br"),t("span",{staticClass:"line-number"},[s._v("201")]),t("br"),t("span",{staticClass:"line-number"},[s._v("202")]),t("br"),t("span",{staticClass:"line-number"},[s._v("203")]),t("br"),t("span",{staticClass:"line-number"},[s._v("204")]),t("br"),t("span",{staticClass:"line-number"},[s._v("205")]),t("br"),t("span",{staticClass:"line-number"},[s._v("206")]),t("br"),t("span",{staticClass:"line-number"},[s._v("207")]),t("br"),t("span",{staticClass:"line-number"},[s._v("208")]),t("br"),t("span",{staticClass:"line-number"},[s._v("209")]),t("br"),t("span",{staticClass:"line-number"},[s._v("210")]),t("br"),t("span",{staticClass:"line-number"},[s._v("211")]),t("br"),t("span",{staticClass:"line-number"},[s._v("212")]),t("br"),t("span",{staticClass:"line-number"},[s._v("213")]),t("br"),t("span",{staticClass:"line-number"},[s._v("214")]),t("br"),t("span",{staticClass:"line-number"},[s._v("215")]),t("br"),t("span",{staticClass:"line-number"},[s._v("216")]),t("br"),t("span",{staticClass:"line-number"},[s._v("217")]),t("br"),t("span",{staticClass:"line-number"},[s._v("218")]),t("br"),t("span",{staticClass:"line-number"},[s._v("219")]),t("br"),t("span",{staticClass:"line-number"},[s._v("220")]),t("br"),t("span",{staticClass:"line-number"},[s._v("221")]),t("br"),t("span",{staticClass:"line-number"},[s._v("222")]),t("br"),t("span",{staticClass:"line-number"},[s._v("223")]),t("br"),t("span",{staticClass:"line-number"},[s._v("224")]),t("br"),t("span",{staticClass:"line-number"},[s._v("225")]),t("br"),t("span",{staticClass:"line-number"},[s._v("226")]),t("br"),t("span",{staticClass:"line-number"},[s._v("227")]),t("br"),t("span",{staticClass:"line-number"},[s._v("228")]),t("br"),t("span",{staticClass:"line-number"},[s._v("229")]),t("br"),t("span",{staticClass:"line-number"},[s._v("230")]),t("br"),t("span",{staticClass:"line-number"},[s._v("231")]),t("br"),t("span",{staticClass:"line-number"},[s._v("232")]),t("br"),t("span",{staticClass:"line-number"},[s._v("233")]),t("br"),t("span",{staticClass:"line-number"},[s._v("234")]),t("br"),t("span",{staticClass:"line-number"},[s._v("235")]),t("br"),t("span",{staticClass:"line-number"},[s._v("236")]),t("br"),t("span",{staticClass:"line-number"},[s._v("237")]),t("br"),t("span",{staticClass:"line-number"},[s._v("238")]),t("br"),t("span",{staticClass:"line-number"},[s._v("239")]),t("br"),t("span",{staticClass:"line-number"},[s._v("240")]),t("br"),t("span",{staticClass:"line-number"},[s._v("241")]),t("br"),t("span",{staticClass:"line-number"},[s._v("242")]),t("br"),t("span",{staticClass:"line-number"},[s._v("243")]),t("br"),t("span",{staticClass:"line-number"},[s._v("244")]),t("br"),t("span",{staticClass:"line-number"},[s._v("245")]),t("br"),t("span",{staticClass:"line-number"},[s._v("246")]),t("br"),t("span",{staticClass:"line-number"},[s._v("247")]),t("br"),t("span",{staticClass:"line-number"},[s._v("248")]),t("br"),t("span",{staticClass:"line-number"},[s._v("249")]),t("br"),t("span",{staticClass:"line-number"},[s._v("250")]),t("br"),t("span",{staticClass:"line-number"},[s._v("251")]),t("br"),t("span",{staticClass:"line-number"},[s._v("252")]),t("br"),t("span",{staticClass:"line-number"},[s._v("253")]),t("br"),t("span",{staticClass:"line-number"},[s._v("254")]),t("br"),t("span",{staticClass:"line-number"},[s._v("255")]),t("br"),t("span",{staticClass:"line-number"},[s._v("256")]),t("br"),t("span",{staticClass:"line-number"},[s._v("257")]),t("br"),t("span",{staticClass:"line-number"},[s._v("258")]),t("br"),t("span",{staticClass:"line-number"},[s._v("259")]),t("br"),t("span",{staticClass:"line-number"},[s._v("260")]),t("br"),t("span",{staticClass:"line-number"},[s._v("261")]),t("br"),t("span",{staticClass:"line-number"},[s._v("262")]),t("br"),t("span",{staticClass:"line-number"},[s._v("263")]),t("br"),t("span",{staticClass:"line-number"},[s._v("264")]),t("br"),t("span",{staticClass:"line-number"},[s._v("265")]),t("br"),t("span",{staticClass:"line-number"},[s._v("266")]),t("br"),t("span",{staticClass:"line-number"},[s._v("267")]),t("br"),t("span",{staticClass:"line-number"},[s._v("268")]),t("br"),t("span",{staticClass:"line-number"},[s._v("269")]),t("br"),t("span",{staticClass:"line-number"},[s._v("270")]),t("br"),t("span",{staticClass:"line-number"},[s._v("271")]),t("br"),t("span",{staticClass:"line-number"},[s._v("272")]),t("br"),t("span",{staticClass:"line-number"},[s._v("273")]),t("br"),t("span",{staticClass:"line-number"},[s._v("274")]),t("br"),t("span",{staticClass:"line-number"},[s._v("275")]),t("br"),t("span",{staticClass:"line-number"},[s._v("276")]),t("br"),t("span",{staticClass:"line-number"},[s._v("277")]),t("br"),t("span",{staticClass:"line-number"},[s._v("278")]),t("br"),t("span",{staticClass:"line-number"},[s._v("279")]),t("br"),t("span",{staticClass:"line-number"},[s._v("280")]),t("br"),t("span",{staticClass:"line-number"},[s._v("281")]),t("br"),t("span",{staticClass:"line-number"},[s._v("282")]),t("br"),t("span",{staticClass:"line-number"},[s._v("283")]),t("br"),t("span",{staticClass:"line-number"},[s._v("284")]),t("br"),t("span",{staticClass:"line-number"},[s._v("285")]),t("br"),t("span",{staticClass:"line-number"},[s._v("286")]),t("br"),t("span",{staticClass:"line-number"},[s._v("287")]),t("br"),t("span",{staticClass:"line-number"},[s._v("288")]),t("br"),t("span",{staticClass:"line-number"},[s._v("289")]),t("br"),t("span",{staticClass:"line-number"},[s._v("290")]),t("br"),t("span",{staticClass:"line-number"},[s._v("291")]),t("br"),t("span",{staticClass:"line-number"},[s._v("292")]),t("br"),t("span",{staticClass:"line-number"},[s._v("293")]),t("br"),t("span",{staticClass:"line-number"},[s._v("294")]),t("br"),t("span",{staticClass:"line-number"},[s._v("295")]),t("br"),t("span",{staticClass:"line-number"},[s._v("296")]),t("br"),t("span",{staticClass:"line-number"},[s._v("297")]),t("br"),t("span",{staticClass:"line-number"},[s._v("298")]),t("br"),t("span",{staticClass:"line-number"},[s._v("299")]),t("br"),t("span",{staticClass:"line-number"},[s._v("300")]),t("br"),t("span",{staticClass:"line-number"},[s._v("301")]),t("br"),t("span",{staticClass:"line-number"},[s._v("302")]),t("br"),t("span",{staticClass:"line-number"},[s._v("303")]),t("br"),t("span",{staticClass:"line-number"},[s._v("304")]),t("br"),t("span",{staticClass:"line-number"},[s._v("305")]),t("br"),t("span",{staticClass:"line-number"},[s._v("306")]),t("br"),t("span",{staticClass:"line-number"},[s._v("307")]),t("br"),t("span",{staticClass:"line-number"},[s._v("308")]),t("br"),t("span",{staticClass:"line-number"},[s._v("309")]),t("br"),t("span",{staticClass:"line-number"},[s._v("310")]),t("br"),t("span",{staticClass:"line-number"},[s._v("311")]),t("br"),t("span",{staticClass:"line-number"},[s._v("312")]),t("br"),t("span",{staticClass:"line-number"},[s._v("313")]),t("br"),t("span",{staticClass:"line-number"},[s._v("314")]),t("br"),t("span",{staticClass:"line-number"},[s._v("315")]),t("br"),t("span",{staticClass:"line-number"},[s._v("316")]),t("br"),t("span",{staticClass:"line-number"},[s._v("317")]),t("br"),t("span",{staticClass:"line-number"},[s._v("318")]),t("br"),t("span",{staticClass:"line-number"},[s._v("319")]),t("br"),t("span",{staticClass:"line-number"},[s._v("320")]),t("br"),t("span",{staticClass:"line-number"},[s._v("321")]),t("br"),t("span",{staticClass:"line-number"},[s._v("322")]),t("br"),t("span",{staticClass:"line-number"},[s._v("323")]),t("br"),t("span",{staticClass:"line-number"},[s._v("324")]),t("br"),t("span",{staticClass:"line-number"},[s._v("325")]),t("br"),t("span",{staticClass:"line-number"},[s._v("326")]),t("br"),t("span",{staticClass:"line-number"},[s._v("327")]),t("br"),t("span",{staticClass:"line-number"},[s._v("328")]),t("br"),t("span",{staticClass:"line-number"},[s._v("329")]),t("br"),t("span",{staticClass:"line-number"},[s._v("330")]),t("br"),t("span",{staticClass:"line-number"},[s._v("331")]),t("br"),t("span",{staticClass:"line-number"},[s._v("332")]),t("br"),t("span",{staticClass:"line-number"},[s._v("333")]),t("br"),t("span",{staticClass:"line-number"},[s._v("334")]),t("br"),t("span",{staticClass:"line-number"},[s._v("335")]),t("br"),t("span",{staticClass:"line-number"},[s._v("336")]),t("br"),t("span",{staticClass:"line-number"},[s._v("337")]),t("br"),t("span",{staticClass:"line-number"},[s._v("338")]),t("br"),t("span",{staticClass:"line-number"},[s._v("339")]),t("br"),t("span",{staticClass:"line-number"},[s._v("340")]),t("br"),t("span",{staticClass:"line-number"},[s._v("341")]),t("br"),t("span",{staticClass:"line-number"},[s._v("342")]),t("br"),t("span",{staticClass:"line-number"},[s._v("343")]),t("br"),t("span",{staticClass:"line-number"},[s._v("344")]),t("br"),t("span",{staticClass:"line-number"},[s._v("345")]),t("br"),t("span",{staticClass:"line-number"},[s._v("346")]),t("br"),t("span",{staticClass:"line-number"},[s._v("347")]),t("br"),t("span",{staticClass:"line-number"},[s._v("348")]),t("br"),t("span",{staticClass:"line-number"},[s._v("349")]),t("br"),t("span",{staticClass:"line-number"},[s._v("350")]),t("br"),t("span",{staticClass:"line-number"},[s._v("351")]),t("br"),t("span",{staticClass:"line-number"},[s._v("352")]),t("br"),t("span",{staticClass:"line-number"},[s._v("353")]),t("br"),t("span",{staticClass:"line-number"},[s._v("354")]),t("br"),t("span",{staticClass:"line-number"},[s._v("355")]),t("br"),t("span",{staticClass:"line-number"},[s._v("356")]),t("br"),t("span",{staticClass:"line-number"},[s._v("357")]),t("br"),t("span",{staticClass:"line-number"},[s._v("358")]),t("br"),t("span",{staticClass:"line-number"},[s._v("359")]),t("br"),t("span",{staticClass:"line-number"},[s._v("360")]),t("br"),t("span",{staticClass:"line-number"},[s._v("361")]),t("br"),t("span",{staticClass:"line-number"},[s._v("362")]),t("br"),t("span",{staticClass:"line-number"},[s._v("363")]),t("br"),t("span",{staticClass:"line-number"},[s._v("364")]),t("br"),t("span",{staticClass:"line-number"},[s._v("365")]),t("br"),t("span",{staticClass:"line-number"},[s._v("366")]),t("br"),t("span",{staticClass:"line-number"},[s._v("367")]),t("br"),t("span",{staticClass:"line-number"},[s._v("368")]),t("br"),t("span",{staticClass:"line-number"},[s._v("369")]),t("br"),t("span",{staticClass:"line-number"},[s._v("370")]),t("br"),t("span",{staticClass:"line-number"},[s._v("371")]),t("br"),t("span",{staticClass:"line-number"},[s._v("372")]),t("br"),t("span",{staticClass:"line-number"},[s._v("373")]),t("br"),t("span",{staticClass:"line-number"},[s._v("374")]),t("br"),t("span",{staticClass:"line-number"},[s._v("375")]),t("br"),t("span",{staticClass:"line-number"},[s._v("376")]),t("br"),t("span",{staticClass:"line-number"},[s._v("377")]),t("br"),t("span",{staticClass:"line-number"},[s._v("378")]),t("br"),t("span",{staticClass:"line-number"},[s._v("379")]),t("br"),t("span",{staticClass:"line-number"},[s._v("380")]),t("br")])]),t("p",[s._v("‍")]),s._v(" "),t("h4",{attrs:{id:"参考资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[s._v("#")]),s._v(" 参考资料")]),s._v(" "),t("ul",[t("li",[s._v("《Redis 开发与运维》")])])])}),[],!1,null,null,null);t.default=n.exports}}]);