(window.webpackJsonp=window.webpackJsonp||[]).push([[200],{505:function(s,t,a){"use strict";a.r(t);var n=a(7),r=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"_20-树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_20-树"}},[s._v("#")]),s._v(" 20.树")]),s._v(" "),t("p",[s._v("本部分介绍数据结构-树.")]),s._v(" "),t("h4",{attrs:{id:"树基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#树基础"}},[s._v("#")]),s._v(" 树基础")]),s._v(" "),t("p",[s._v("树 (Tree) 是 n (n ≥ 0) 个结点的有限集 T, 并且当 n＞0 时满足下列条件:")]),s._v(" "),t("ul",[t("li",[s._v("有且仅有一个特定的称为"),t("strong",[s._v("根")]),s._v(" (Root) 的结点;")]),s._v(" "),t("li",[s._v("当 n＞1时, 其余结点可以划分为 m(m＞0) 个互不相交的有限集 T1, T2 , …, Tm, 每个集 Ti (1≤ i ≤ m) 均为树, 且称为树 T 的"),t("strong",[s._v("子树")]),s._v(" (SubTree).")])]),s._v(" "),t("p",[s._v("一颗树的示例.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20210910224531268.png",alt:"image-20210910224531268"}})]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("结点:")]),s._v("  存储数据元素和指向子树的链接, 由数据元素和构造数据元素之间关系的引用组成.")]),s._v(" "),t("li",[t("strong",[s._v("子结点:")]),s._v("  树中一个结点的子树的根结点称为这个结点的子结点, 如图中的 A 的子结点有 B, C, D.")]),s._v(" "),t("li",[t("strong",[s._v("父结点:")]),s._v("  树中某个结点有子结点(即该结点的度不为 0), 该结点称为它子结点的父结点. 图中 B, C, D 的父结点是 A.")]),s._v(" "),t("li",[t("strong",[s._v("兄弟结点:")]),s._v("  具有相同双亲结点 (即同一个前驱) 的结点称为兄弟结点, 如图中 B, C, D 为兄弟结点.")]),s._v(" "),t("li",[t("strong",[s._v("结点的度:")]),s._v(" "),t("strong",[t("strong",[s._v("结点所有")])]),s._v("​"),t("strong",[s._v("子树的个数")]),s._v("称为该结点的"),t("strong",[s._v("度")]),s._v(", 如图中 A 的度为 3, B 的度为 2.")]),s._v(" "),t("li",[t("strong",[s._v("树的度:")]),s._v(" "),t("strong",[t("strong",[s._v("树中所有结点的度的最大值称为")])]),s._v("​"),t("strong",[s._v("树的度")]),s._v(", 如图该树的度为 3.")]),s._v(" "),t("li",[t("strong",[s._v("叶子结点:")]),s._v(" "),t("strong",[t("strong",[s._v("度为 0 的结点称为")])]),s._v("​"),t("strong",[s._v("叶子结点")]),s._v(". 如图中的 K, L, F, G, M, I, J.")]),s._v(" "),t("li",[t("strong",[s._v("非叶子结点:")]),s._v("  度不为 0 的结点称为分支结点. 如图中的 A, B, C, D, E, H.")]),s._v(" "),t("li",[t("strong",[s._v("结点的层次:")]),s._v("  从根结点到树中某结点所经路径的分支数称为该结点的层次.")]),s._v(" "),t("li",[t("strong",[s._v("树的深度:")]),s._v(" "),t("strong",[t("strong",[s._v("树中所有结点的层次的最大值称为该树的")])]),s._v("​"),t("strong",[s._v("深度")]),s._v(" (也就是最下面那个结点的层次).")]),s._v(" "),t("li",[t("strong",[s._v("二叉树")]),s._v(": 每个结点"),t("strong",[s._v("最多两个子节点")]),s._v("的树为二叉树.")]),s._v(" "),t("li",[t("strong",[s._v("满二叉树")]),s._v(": 如果二叉树的叶子结点都在"),t("strong",[s._v("最后一层")]),s._v(", 并且结点总数 = 2 ^ n - 1 (n 为层数), 则此为"),t("strong",[s._v("满二叉树")]),s._v(".")]),s._v(" "),t("li",[t("strong",[s._v("完全二叉树")]),s._v(": 如果二叉树除了最后一层之外均为满的, 且最后一层的子节点"),t("strong",[s._v("从左到右")]),s._v("排列, 此成为"),t("strong",[s._v("完全二叉树")]),s._v(".")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20210910224902392.png",alt:"image-20210910224902392"}})]),s._v(" "),t("h4",{attrs:{id:"搜索二叉树bst"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#搜索二叉树bst"}},[s._v("#")]),s._v(" 搜索二叉树BST")]),s._v(" "),t("h5",{attrs:{id:"_1-基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-基础"}},[s._v("#")]),s._v(" 1.基础")]),s._v(" "),t("p",[s._v("搜索二叉树也可称为"),t("strong",[s._v("二叉查找树")]),s._v(".")]),s._v(" "),t("p",[t("mark",[t("strong",[s._v("搜索二叉树中每个节点的值都大于等于其左子树中的所有节点的值而小于等于右子树的所有节点的值, 这样的特性使得搜索二叉树的中序遍历结果单调递增")])]),s._v(". 如果有相同的值, 可以将该节点放在左子节点或右子节点.")]),s._v(" "),t("h5",{attrs:{id:"_2-基本实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-基本实现"}},[s._v("#")]),s._v(" 2.基本实现")]),s._v(" "),t("blockquote",[t("p",[s._v("数据结构与结点类")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BST")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Key")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Comparable")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Key")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Value")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("OrderedST")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Key")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Value")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" root"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Key")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Value")]),s._v(" val"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" left"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" right"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 以该节点为根的子树节点总数")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("N")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 红黑树中使用")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" color"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Key")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Value")]),s._v(" val"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("N")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("val "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" val"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("this"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),s._v("N")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("N")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("size")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("size")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("root"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("size")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),s._v("N")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("recalculateSize")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),s._v("N")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("size")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("left"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("size")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("right"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br")])]),t("blockquote",[t("p",[s._v("get()查找元素")])]),s._v(" "),t("p",[s._v("如果被查找的键和根节点的键相等, 查找命中; 否则"),t("strong",[s._v("递归")]),s._v("地在子树中查找: 如果被查找的键较小就在左子树中查找, 较大就在右子树中查找.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Value")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Key")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("root"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Value")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Key")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Base case")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" cmp "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("compareTo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cmp "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("val"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cmp "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("left"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("right"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("blockquote",[t("p",[s._v("getMin()查找最小元素")])]),s._v(" "),t("p",[s._v("最小值在最"),t("strong",[s._v("左边")]),s._v(", 最大值在最"),t("strong",[s._v("右边")]),s._v(". 从"),t("strong",[s._v("根")]),s._v("开始并且只要有"),t("strong",[s._v("左子结点")]),s._v("就"),t("strong",[s._v("递归往左")]),s._v("进行查找, "),t("strong",[s._v("终止点")]),s._v("就是"),t("strong",[s._v("最小")]),s._v("的元素. 如果往"),t("strong",[s._v("右")]),s._v("递归就是寻找"),t("strong",[s._v("最大")]),s._v("值.")]),s._v(" "),t("p",[s._v("可以有"),t("strong",[s._v("递归或者迭代")]),s._v("方式实现, 下列的代码使用"),t("strong",[s._v("递归查找最小值")]),s._v(".")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Key")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("min")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("min")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("root"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("min")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x "),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("mark"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("left "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("mark"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("min")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("left"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("blockquote",[t("p",[s._v("put()插入元素")])]),s._v(" "),t("p",[s._v("当插入的键不存在于树中, 需要创建一个"),t("strong",[s._v("新节点")]),s._v(", 并且更新上层节点的链接指向该节点, 使得该节点正确地链接到树中. 如果结点已存在则不管了, 或者更新值. 以下使用"),t("strong",[s._v("递归")]),s._v("方式插入结点.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Key")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Value")]),s._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    root "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("root"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Key")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Value")]),s._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Base case")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" cmp "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("compareTo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cmp "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("val "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cmp "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("left "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("left"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("right "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("right"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("recalculateSize")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br")])]),t("blockquote",[t("p",[s._v("delete()删除元素")])]),s._v(" "),t("p",[s._v("如果待删除的节点只有一个子树, 那么只需要让指向待删除节点的链接指向唯一的子树即可; 否则, 让右子树的"),t("strong",[s._v("最小节点")]),s._v("替换该节点.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20200520203759092.png",alt:"image-20200520203759092"}})]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("delete")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Key")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    root "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("delete")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("root"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("delete")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Key")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Base case")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" cmp "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("compareTo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 寻找目标结点")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cmp "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("left "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("delete")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("left"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cmp "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("right "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("delete")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("right"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 找到目标结点")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 只有一个子结点")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("right "),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("mark"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("left"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("left "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("mark"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("right"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" t "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("min")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("right"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("right "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("deleteMin")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("right"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("left "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("left"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("recalculateSize")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br")])]),t("h5",{attrs:{id:"_3-结构分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-结构分析"}},[s._v("#")]),s._v(" 3.结构分析")]),s._v(" "),t("p",[s._v("二叉查找树的算法运行时间取决于"),t("strong",[s._v("树的形状")]),s._v(", 而树的形状又取决于键被插入的"),t("strong",[s._v("先后顺序")]),s._v(".")]),s._v(" "),t("p",[s._v("如果插入的结点不合理, 那么这个 BST 树会变得"),t("strong",[s._v("不平衡")]),s._v(", 甚至"),t("strong",[s._v("退化成为链表")]),s._v(". 二叉查找树所有操作在最坏的情况下所需要的时间都和树的高度成正比. 最好的情况下树是"),t("strong",[s._v("完全平衡")]),s._v("的, 每条空链接和根节点的距离都为 "),t("strong",[s._v("logN")]),s._v(".")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/1563524133741.png",alt:""}})]),s._v(" "),t("p",[s._v("在最坏的情况下, "),t("strong",[s._v("树的高度为 N")]),s._v(". 退化成一个"),t("strong",[s._v("链表")]),s._v(".")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/1563524151414.png",alt:""}})]),s._v(" "),t("p",[s._v("解决方案在下一节: "),t("strong",[s._v("平衡二叉树 AVL 树.")])]),s._v(" "),t("h4",{attrs:{id:"平衡二叉树avl"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#平衡二叉树avl"}},[s._v("#")]),s._v(" 平衡二叉树AVL")]),s._v(" "),t("p",[s._v("平衡二叉树的常见"),t("strong",[s._v("实现方法有红黑树, AVL")]),s._v(", 替罪羊树, Treap, 伸展树等.")]),s._v(" "),t("h5",{attrs:{id:"_1-概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述"}},[s._v("#")]),s._v(" 1.概述")]),s._v(" "),t("p",[s._v("如果按照不合适的顺序构造搜索二叉树, 则其可能退化为一个链表. "),t("strong",[s._v("解决方案: 平衡二叉树(AVL)")]),s._v(" .")]),s._v(" "),t("p",[s._v("平衡二叉树也叫"),t("strong",[s._v("平衡二叉搜索树")]),s._v("(Self-balancing binary search tree)又被称为 "),t("strong",[s._v("AVL 树")]),s._v(", 可以保证"),t("strong",[s._v("查询效率较高")]),s._v(".")]),s._v(" "),t("p",[s._v("实现要点: 每次"),t("strong",[s._v("新增/删除")]),s._v("节点后"),t("strong",[s._v("判断平衡性")]),s._v(", 然后通过"),t("strong",[s._v("调整")]),s._v("使整棵树重新平衡.")]),s._v(" "),t("h5",{attrs:{id:"_2-原理图示"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-原理图示"}},[s._v("#")]),s._v(" 2.原理图示")]),s._v(" "),t("p",[s._v("AVL 树大部分操作都和 BST 树相同, 只有在"),t("strong",[s._v("插入或删除")]),s._v("结点后, 有可能造成整棵树"),t("strong",[s._v("失去平衡")]),s._v(". 只有那些在被插入/删除结点到根节点的路径上的结点有可能出现失衡, 因为只有那些结点的子树结构发生了变化.")]),s._v(" "),t("p",[s._v("4 种不平衡情况如下:")]),s._v(" "),t("p",[t("strong",[s._v("(1) 左子树的左子树插入结点 (左左)")]),s._v(" : "),t("strong",[s._v("右旋")]),s._v("(单旋转)")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20200520204646827.png",alt:""}})]),s._v(" "),t("p",[t("strong",[s._v("(2) 右子树的右子树插入节点 (右右): 左旋")]),s._v("(单旋转)")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20200520204815521.png",alt:""}})]),s._v(" "),t("p",[t("strong",[s._v("(3) 左子树的右子树插入节点 (左右): 先左旋, 再右旋")]),s._v("(双旋转)")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20200520204928569.png",alt:""}})]),s._v(" "),t("p",[t("strong",[s._v("(4) 右子树的左子树插入节点 (右左): 先右旋, 再左旋")]),s._v("(双旋转)")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20200520205011615.png",alt:""}})]),s._v(" "),t("h4",{attrs:{id:"_2-3树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3树"}},[s._v("#")]),s._v(" 2-3树")]),s._v(" "),t("h5",{attrs:{id:"_1-基础结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-基础结构"}},[s._v("#")]),s._v(" 1.基础结构")]),s._v(" "),t("p",[t("strong",[s._v("2-3")]),s._v(" 查找树引入了 "),t("strong",[s._v("2 节点和 3 节点")]),s._v(", 目的是为了让"),t("strong",[s._v("树平衡")]),s._v(". 一颗"),t("strong",[s._v("完美平衡的 2-3 查找树的所有空链接到根节点的距离应该是相同的")]),s._v(".")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/1563523596755.png",alt:""}})]),s._v(" "),t("p",[s._v("2-3 树是"),t("strong",[s._v("最简单的 B 树")]),s._v("结构, 具有如下特点:")]),s._v(" "),t("ul",[t("li",[s._v("2-3 树的所有"),t("strong",[s._v("叶子节点")]),s._v("都在"),t("strong",[s._v("同一层")]),s._v(". (只要是 B 树都满足这个条件)")]),s._v(" "),t("li",[s._v("2-3 树是由"),t("strong",[s._v("二节点和三节点")]),s._v("构成的树.")]),s._v(" "),t("li",[s._v("有"),t("strong",[s._v("两个子节点")]),s._v("的节点叫"),t("strong",[s._v("二节点")]),s._v(", 二节点要么"),t("strong",[s._v("没有")]),s._v("子节点, 要么有"),t("strong",[s._v("两个")]),s._v("子节点.")]),s._v(" "),t("li",[s._v("有"),t("strong",[s._v("三个子节点")]),s._v("的节点叫"),t("strong",[s._v("三节点")]),s._v(", 三节点要么"),t("strong",[s._v("没有")]),s._v("子节点, 要么有"),t("strong",[s._v("三个")]),s._v("子节点.")]),s._v(" "),t("li",[s._v("2-3 树中结点的顺序"),t("strong",[s._v("也要满足排序树")]),s._v("的特点, 即左边的结点的值"),t("strong",[s._v("大于")]),s._v("根结点的值, 根结点的值"),t("strong",[s._v("小于")]),s._v("右结点的值.")])]),s._v(" "),t("p",[s._v("2-3 查找树插入操作的变换都是"),t("strong",[s._v("局部")]),s._v("的, 除了相关的节点和链接之外"),t("strong",[s._v("不必修改")]),s._v("或者检查树的其它部分, 而这些"),t("strong",[s._v("局部变换不会影响树的全局有序性和平衡性")]),s._v(".")]),s._v(" "),t("p",[s._v("2-3 查找树的查找和插入操作复杂度和插入顺序无关, 在最坏的情况下"),t("strong",[s._v("查找和插入操作")]),s._v("访问的节点必然不超过 "),t("strong",[s._v("logN")]),s._v(" 个, 含有 10 亿个节点的 2-3 查找树最多只需要访问 "),t("strong",[s._v("30 个节点")]),s._v("就能进行任意的查找和插入操作.")]),s._v(" "),t("p",[s._v("2-3 树是一棵自平衡的"),t("strong",[s._v("多路查找树")]),s._v(", 它并不是一棵二叉树, 具有如下性质:")]),s._v(" "),t("ul",[t("li",[s._v("每个节点有 "),t("strong",[s._v("1 个或 2 个 key")]),s._v(", 对应的子节点为 2 个子节点(称为 "),t("strong",[s._v("2- 结点")]),s._v(")或 3 个子节点(称为 "),t("strong",[s._v("3- 结点")]),s._v(");")]),s._v(" "),t("li",[s._v("所有"),t("strong",[s._v("叶子节点到根节点的长度一致")]),s._v(";")]),s._v(" "),t("li",[s._v("每个节点的 key 从左到右保持了"),t("strong",[s._v("从小到大的顺序")]),s._v(", 两个 key 之间的子树中所有的 key 一定大于它的父节点的左 key, 小于父节点的右 key.")])]),s._v(" "),t("p",[s._v("如下图所示.")]),s._v(" "),t("p",[s._v("​"),t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20191225164229220.png",alt:"image-20191225164229220"}}),s._v("​")]),s._v(" "),t("p",[s._v("因为 2-3 树是一棵自平衡的多路查找树, 所以构建跟维系一棵 2-3 树, 就比二叉平衡树要"),t("strong",[s._v("复杂的多")]),s._v("了.")]),s._v(" "),t("h5",{attrs:{id:"_2-构造过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-构造过程"}},[s._v("#")]),s._v(" 2.构造过程")]),s._v(" "),t("p",[s._v("插入操作和 BST 的插入操作有很大区别, BST 的插入操作是先进行一次未命中的查找, 然后再将节点插入到对应的空链接上. 但是 2-3 查找树如果也这么做的话, 那么就会破坏了平衡性. "),t("strong",[s._v("它是将新节点插入到叶子节点上")]),s._v(".")]),s._v(" "),t("p",[s._v("根据"),t("strong",[s._v("叶子节点的类型")]),s._v("不同, 有不同的处理方式:")]),s._v(" "),t("ul",[t("li",[s._v("如果插入到 "),t("strong",[s._v("2- 节点")]),s._v("上, 那么直接将新节点和原来的节点"),t("strong",[s._v("组成 3- 节点")]),s._v("即可.")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/1563523611923.png",alt:""}})]),s._v(" "),t("ul",[t("li",[s._v("如果是插入到 "),t("strong",[s._v("3- 节点")]),s._v("上, 就会产生一个"),t("strong",[s._v("临时 4- 节点")]),s._v("时, 需要将 4- 节点"),t("strong",[s._v("分裂成 3- 个 2- 节点")]),s._v(", 并将"),t("strong",[s._v("中间的")]),s._v(" 2- 节点"),t("strong",[s._v("移到上层节点")]),s._v("中. 如果上移操作继续产生临时 4- 节点则一直进行"),t("strong",[s._v("分裂上移")]),s._v(", 直到不存在临时 4- 节点.")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/1563523626358.png",alt:""}})]),s._v(" "),t("p",[s._v("所以整个"),t("strong",[s._v("插入过程")]),s._v("中树是"),t("strong",[s._v("由下往上")]),s._v("生长的.")]),s._v(" "),t("p",[s._v("2-3 树的插入操作, 首先一定是在"),t("strong",[s._v("叶子节点")]),s._v(", 另外如果 2-3 树中已存在当前插入的 key, 则更新值,  下面就在这两点的前提下, 进行 2-3 树插入流程的分析:")]),s._v(" "),t("ul",[t("li",[s._v("如果待插入的节点只有 1 个 key, 则直接插入即可;")]),s._v(" "),t("li",[s._v("如果待插入的节点有 2 个 key, 则对节点进行分裂, 即 2 个 key 加上待插入的 key, 这 3 个 key 分裂成 1 个key 跟两个子节点, 然后将分裂之后的 3 个 key 中的父节点看作向上层插入的 key, 然后重复(1), (2)步骤, 直到满足 2-3 树的定义性质.")])]),s._v(" "),t("p",[s._v("如下图所示, 插入 “7”, 而此时节点 “5” 只有一个key, 则直接插入即可, 形成节点 “"),t("strong",[s._v("5 7")]),s._v("”."),t("br"),s._v("\n​"),t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20191225165048088.png",alt:"image-20191225165048088"}}),s._v("​")]),s._v(" "),t("p",[s._v("此时如果再插入 “6”, 而节点 “5 7” 已经有 2 个 key 了, 所以需要先进行"),t("strong",[s._v("分裂")]),s._v(".")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20191225165400980.png",alt:""}})]),s._v(" "),t("p",[s._v("“5 7” 节点与新插入的 “6” 分裂之后, 如下图所示.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20191225165509187.png",alt:""}})]),s._v(" "),t("p",[s._v("此时需要将 “6” "),t("strong",[s._v("向父节点插入")]),s._v(", 而父节点 “13 30” 又包含 2 个 key, 则需要"),t("strong",[s._v("再次分裂")]),s._v(", 即如下图所示, “13 30” 与 “6” 分裂成父节点为 “13”, 子节点为 “6” 跟 “30”.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20191225165619226.png",alt:""}})]),s._v(" "),t("p",[s._v("再将节点 “13” 看作"),t("strong",[s._v("向父节点插入")]),s._v(", 而此时父节点 “50” 只有一个key, 则将 “13” 与 “50” 直接"),t("strong",[s._v("合并")]),s._v("即可, 如下图所示, 完成节点的插入调整.")]),s._v(" "),t("p",[s._v("​"),t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20191225170706510.png",alt:"image-20191225170706510"}}),s._v("​")]),s._v(" "),t("h4",{attrs:{id:"_2-3-4树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-4树"}},[s._v("#")]),s._v(" 2-3-4树")]),s._v(" "),t("p",[s._v("2-3-4 树只是在 2-3 树的基础上进行了扩展. "),t("strong",[s._v("2-3-4 树也是一棵自平衡的多路查找树")]),s._v(", 具有如下性质:")]),s._v(" "),t("ul",[t("li",[s._v("任一节点只能是 1 个或 2 个或 3 个 key, 对应的子节点为 2 个子节点或 3 个子节点或 4 个子节点;")]),s._v(" "),t("li",[t("strong",[s._v("所有叶子节点到根节点的长度一致")]),s._v(";")]),s._v(" "),t("li",[s._v("每个节点的 key 从左到右保持了"),t("strong",[s._v("从小到大")]),s._v("的顺序, 两个 key 之间的子树中所有的 key 一定大于它的父节点的左 key, 小于父节点的右 key, 对于 3 个 key 的节点, 两两 key 之间也是如此.")])]),s._v(" "),t("p",[s._v("如下图所示.")]),s._v(" "),t("p",[s._v("​"),t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20191225171218999.png",alt:"image-20191225171218999"}}),s._v("​")]),s._v(" "),t("p",[s._v("2-3-4 树插入节点跟删除节点的处理, 实际上跟 2-3 树"),t("strong",[s._v("很像")]),s._v(", 特别是插入节点, 基本上跟 2-3 树是一模一样, 只是"),t("strong",[s._v("分裂的条件由 2 个 key 变成了 3 个 key而已")]),s._v(".")]),s._v(" "),t("h4",{attrs:{id:"红黑树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#红黑树"}},[s._v("#")]),s._v(" 红黑树")]),s._v(" "),t("h5",{attrs:{id:"_1-红黑树与2-3树的关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-红黑树与2-3树的关系"}},[s._v("#")]),s._v(" 1.红黑树与2-3树的关系")]),s._v(" "),t("p",[s._v("红黑树也是"),t("strong",[s._v("二叉查找树")]),s._v(", 二叉查找树这一数据结构并不难, 而红黑树之所以难是难在它是"),t("strong",[s._v("自平衡")]),s._v("的二叉查找树, 在进行插入和删除等可能会破坏树的平衡的操作时, 需要"),t("strong",[s._v("重新自处理达到平衡状态")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("2-3 树")]),s._v("不太好写代码, 所以红黑树借鉴了 2-3 树的思想对其进行了转换, "),t("strong",[s._v("方便编码")]),s._v(". 红黑树的思想是用"),t("strong",[s._v("标准的二叉查找树")]),s._v("(完全由 "),t("strong",[s._v("2- 结点")]),s._v("构成)和一些"),t("strong",[s._v("额外的信息")]),s._v("(替换 3- 结点)来"),t("strong",[s._v("表示 2-3 树")]),s._v(".")]),s._v(" "),t("p",[s._v("如下图中上半部分示一个 2-3 树的 3- 结点, 改变成红黑树如下.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/1577275033695.png",alt:""}})]),s._v(" "),t("p",[s._v("红黑树将树中的"),t("strong",[s._v("连接")]),s._v("分成两种:")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("红链接")]),s._v(": 将"),t("strong",[s._v("两个 2- 结点连接起来构成一个 3- 结点")]),s._v(".")]),s._v(" "),t("li",[t("strong",[s._v("黑链接")]),s._v(": 2-3 树中的"),t("strong",[s._v("普通结点")]),s._v(".")])]),s._v(" "),t("p",[s._v("可以将 "),t("strong",[s._v("3- 结点")]),s._v("视为一条"),t("strong",[s._v("左斜的红色")]),s._v("链接.")]),s._v(" "),t("p",[s._v("一种"),t("strong",[s._v("等价")]),s._v("的定义:")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("红链接")]),s._v("均为"),t("strong",[s._v("左连接")]),s._v(".")]),s._v(" "),t("li",[t("strong",[s._v("没有")]),s._v("任何一个结点"),t("strong",[s._v("同时和两条红链接")]),s._v("相连.")]),s._v(" "),t("li",[s._v("红黑树是"),t("strong",[s._v("完美黑色平衡")]),s._v("的, 即任意"),t("strong",[s._v("空链接")]),s._v("到"),t("strong",[s._v("根节点路径上的黑链接数量相同")]),s._v(".")])]),s._v(" "),t("p",[s._v("如果将"),t("strong",[s._v("红链接")]),s._v("链接的结点"),t("strong",[s._v("合并")]),s._v(", 得到的就是一颗 2-3 树. "),t("strong",[s._v("红黑树既是 2-3 树, 又是二叉查找树.")]),s._v(" "),t("strong",[t("strong",[s._v("如果把红链接")])]),s._v("​"),t("strong",[s._v("画平")]),s._v(", 即可明显看出任意"),t("strong",[s._v("空链接")]),s._v("到"),t("strong",[s._v("根节点路径上的黑链接数量相同")]),s._v(", 放平后红黑树就是 2-3 树. 如下图所示.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/1577275605952.png",alt:""}})]),s._v(" "),t("p",[s._v("红黑树与 "),t("strong",[s._v("2-3")]),s._v(" 树的一一对应关系如下图.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/1577275936573.png",alt:""}})]),s._v(" "),t("h5",{attrs:{id:"_2-红黑树的特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-红黑树的特点"}},[s._v("#")]),s._v(" 2.红黑树的特点")]),s._v(" "),t("p",[s._v("红黑树的特点如下:")]),s._v(" "),t("ol",[t("li",[t("strong",[s._v("根节点")]),s._v("必为"),t("strong",[s._v("黑色")]),s._v(".")]),s._v(" "),t("li",[t("strong",[s._v("叶子节点都为黑色")]),s._v(", 且为 null.")]),s._v(" "),t("li",[s._v("连接"),t("strong",[s._v("红色节点")]),s._v("的两个子节点都为"),t("strong",[s._v("黑色")]),s._v("(红黑树"),t("strong",[s._v("不会出现相邻的红色节点")]),s._v(").")]),s._v(" "),t("li",[s._v("从任意节点出发, 到其"),t("strong",[s._v("每个叶子节点的路径中包含相同数量的黑色节点")]),s._v("(由于是 2-3 树, 所以叶子节点都在"),t("strong",[s._v("同一层")]),s._v(").")]),s._v(" "),t("li",[s._v("新插入的结点为"),t("strong",[s._v("红色")]),s._v(".")]),s._v(" "),t("li",[t("strong",[s._v("红链接")]),s._v("均为"),t("strong",[s._v("左连接")]),s._v(".")])]),s._v(" "),t("h5",{attrs:{id:"_3-颜色表示"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-颜色表示"}},[s._v("#")]),s._v(" 3.颜色表示")]),s._v(" "),t("p",[s._v("由于红黑树是二叉树, 为了表示 2-3 树, 所以需要一些额外的信息, 因此在红黑树节点中加入了一个"),t("strong",[s._v("表示颜色的布尔变量")]),s._v(". 这里的一个关键是"),t("strong",[s._v("一个节点的颜色")]),s._v("指的是"),t("strong",[s._v("指向这个节点的链接的颜色")]),s._v(".")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/1577276030606.png",alt:""}})]),s._v(" "),t("p",[t("strong",[s._v("结点类")]),s._v("如下.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("RED")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 定义RED为true")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("BLACK")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" root"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 结点类")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 键")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Key")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 值")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Value")]),s._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这棵树的总结点数")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("N")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 左右子树")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" left"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" right"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 父节点指向它的链接的颜色 ")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" color"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Key")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Value")]),s._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("N")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" color"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("value "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("this"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),s._v("N")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("N")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("color "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" color"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isRed")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("mark"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("color "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("mark"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("RED")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br")])]),t("h5",{attrs:{id:"_4-旋转"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-旋转"}},[s._v("#")]),s._v(" 4.旋转")]),s._v(" "),t("p",[t("strong",[s._v("旋转")]),s._v("是一项非常重要的操作. 在"),t("strong",[s._v("不改变树的有序性")]),s._v("的情况下, 将某个"),t("strong",[s._v("红链接从左链接变成右链接")]),s._v(", 或者从右链接变成左链接, 这在处理一些情况比如对应于 2-3 树中向 3 节点"),t("strong",[s._v("插入元素")]),s._v("的时候, "),t("strong",[s._v("更新整个树")]),s._v("是很有用的.")]),s._v(" "),t("p",[t("strong",[s._v("红黑树自平衡基本操作")]),s._v(": 头结点往左偏就是左旋, 头结点往右偏就是右旋.")]),s._v(" "),t("ol",[t("li",[t("strong",[s._v("变色")]),s._v(": 在不违反上述红黑树规则特点情况下, 将红黑树某个 node 节点颜色"),t("strong",[s._v("由红变黑")]),s._v(", 或者"),t("strong",[s._v("由黑变红")]),s._v(".")]),s._v(" "),t("li",[t("strong",[s._v("左旋")]),s._v(": "),t("strong",[s._v("逆时针")]),s._v("旋转两个节点, 让一个节点被其右子节点取代, 而该节点成为右子节点的左子节点.")]),s._v(" "),t("li",[t("strong",[s._v("右旋")]),s._v(": "),t("strong",[s._v("顺时针")]),s._v("旋转两个节点, 让一个节点被其左子节点取代, 而该节点成为左子节点的右子节点.")])]),s._v(" "),t("p",[s._v("旋转操作会"),t("strong",[s._v("改变红链接的指向")]),s._v(".")]),s._v(" "),t("blockquote",[t("p",[s._v("左旋转")])]),s._v(" "),t("p",[s._v("因为合法的"),t("strong",[s._v("红链接")]),s._v("都为"),t("strong",[s._v("左链接")]),s._v(", 如果出现右链接为红链接, 那么就需要进行"),t("strong",[s._v("左旋")]),s._v("转操作.")]),s._v(" "),t("p",[s._v("下面是左旋转 h 的右链接.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/1577276247175.png",alt:""}})]),s._v(" "),t("blockquote",[t("p",[s._v("右旋转")])]),s._v(" "),t("p",[s._v("进行"),t("strong",[s._v("右旋转")]),s._v("是为了转换两个连续的"),t("strong",[s._v("左红链接")]),s._v(". 下面是"),t("strong",[s._v("右旋转")]),s._v(" h 的左链接.")]),s._v(" "),t("p",[s._v("​"),t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/1577276320045.png",alt:""}}),s._v("​")]),s._v(" "),t("blockquote",[t("p",[s._v("颜色转换")])]),s._v(" "),t("p",[s._v("一个 "),t("strong",[s._v("4-")]),s._v("  节点在红黑树中表现为"),t("strong",[s._v("一个节点的左右子节点都是红色")]),s._v("的. "),t("strong",[s._v("分裂 4- 节点")]),s._v("除了需要将子节点的"),t("strong",[s._v("颜色由红变黑")]),s._v("之外, 同时需要将"),t("strong",[s._v("父节点的颜色由黑变红")]),s._v(", 从 "),t("strong",[s._v("2-3 树")]),s._v("的角度看就是将"),t("strong",[s._v("中间节点移到上层节点")]),s._v(".")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/1563523728805.png",alt:""}})]),s._v(" "),t("p",[t("strong",[s._v("flipColors()")]),s._v("  的操作.")]),s._v(" "),t("p",[s._v("​"),t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/1577276403912.png",alt:""}}),s._v("​")]),s._v(" "),t("p",[s._v("可以看出这个函数就对应于 2-3 树中将"),t("strong",[s._v("中间元素插入父节点")]),s._v("的操作, 因为它把原来的"),t("strong",[s._v("两条红链接变成黑链接")]),s._v(", 相当于"),t("strong",[s._v("分裂")]),s._v("成了两个 2 节点, 而"),t("strong",[s._v("中间元素")]),s._v("因为颜色是"),t("strong",[s._v("红")]),s._v("的, 所以就加入了父节点.")]),s._v(" "),t("p",[t("strong",[s._v("注意: 根节点都是黑色的")]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"_5-查找元素"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-查找元素"}},[s._v("#")]),s._v(" 5.查找元素")]),s._v(" "),t("p",[s._v("红黑树的查找算法和二叉查找树的查找算法是"),t("strong",[s._v("完全一样")]),s._v("的. 对于查找算法来说, 红黑树中节点或者说链接的"),t("strong",[s._v("颜色是没有用到")]),s._v("的, 但是没有关系, 虽然红黑树只是黑链接平衡, 但是即使"),t("strong",[s._v("不考虑颜色")]),s._v("的查找, 整个树也不会出现像二叉树里面那种最极端的情况, 所以性能依然是有保障的.")]),s._v(" "),t("h5",{attrs:{id:"_6-插入元素"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-插入元素"}},[s._v("#")]),s._v(" 6.插入元素")]),s._v(" "),t("p",[s._v("红黑树的插入的算法是比较"),t("strong",[s._v("复杂")]),s._v("的, 对于 2-3 树来说相对较简单, 但是在具体实现的时候, 每个 3 节点中是有着具体结构的, 那么我们在插入后就要"),t("strong",[s._v("调节")]),s._v("这些具体的结构, 才能实现 2-3 树中的功能.")]),s._v(" "),t("h6",{attrs:{id:"_1-向单个2-节点插入新键"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-向单个2-节点插入新键"}},[s._v("#")]),s._v(" (1)向单个2-节点插入新键")]),s._v(" "),t("p",[s._v("在 2-3 树中向 2- 节点插入非常简单, 直接"),t("strong",[s._v("合并")]),s._v("成一个 3- 节点就行. 但是具体实现时, 因为相对于父节点可能有大有小, 那么在插入的时候就可能在父节点的"),t("strong",[s._v("左边或者右边")]),s._v(", 而"),t("strong",[s._v("红链接只能是左链接")]),s._v(", 那么当在"),t("strong",[s._v("右边插入")]),s._v("的时候, "),t("strong",[s._v("就需要进行旋转操作将右链接变成左链接")]),s._v(".")]),s._v(" "),t("p",[s._v("过程如下:")]),s._v(" "),t("p",[s._v("​"),t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/1577276662417.png",alt:""}}),s._v("​")]),s._v(" "),t("h6",{attrs:{id:"_2-向树底部的2-节点插入新键"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-向树底部的2-节点插入新键"}},[s._v("#")]),s._v(" (2)向树底部的2-节点插入新键")]),s._v(" "),t("p",[s._v("跟上述的过程类似, 如果是在右边插入新键那么需要进行"),t("strong",[s._v("旋转")]),s._v("操作, 让红链接到"),t("strong",[s._v("左边")]),s._v(".")]),s._v(" "),t("p",[s._v("​"),t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/1577276742966.png",alt:""}}),s._v("​")]),s._v(" "),t("h6",{attrs:{id:"_3-向3-节点插入新键"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-向3-节点插入新键"}},[s._v("#")]),s._v(" (3)向3-节点插入新键")]),s._v(" "),t("p",[s._v("向 3- 节点插入就更加复杂了, 因为此时不仅有插入方向的问题, 还有"),t("strong",[s._v("父节点也是红色")]),s._v("的问题, 要调整几个节点的结构, 实现 2-3 树中将中间节点插入到父节点的操作. 这里主要分三种情况.")]),s._v(" "),t("blockquote",[t("p",[s._v("I 新键大于原树两个键")])]),s._v(" "),t("p",[s._v("如果插入后一个节点的两个子节点都是红色的, 那么我们通过 "),t("strong",[s._v("flipColors")]),s._v("() 可以很容易的实现 2-3 树中将中间节点插入父节点, 两边节点独立成两个 2 节点, 同时保持有序性(这里默认中间节点是黑色的, 因为默认在插入之前整个树是有序的, 这个可以通过正确的插入来保证).")]),s._v(" "),t("blockquote",[t("p",[s._v("II 新键小于原树两个键")])]),s._v(" "),t("p",[s._v("第二种情况下, 需要先将第一个红链接进行右旋转, 这样就变成了第一种情况, 可以按照情况1 处理.")]),s._v(" "),t("blockquote",[t("p",[s._v("III 新键介于原树两个键之间")])]),s._v(" "),t("p",[s._v("第三种情况下, 需要先将下面的红链接进行左旋转就变成了第二种情况, 然后就可以按照第二种情况处理.")]),s._v(" "),t("p",[s._v("如下图所示.")]),s._v(" "),t("p",[s._v("​"),t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/1577276916596.png",alt:""}}),s._v("​")]),s._v(" "),t("p",[s._v("红黑树的插入代码")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Key")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Value")]),s._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    root "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("root"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    root"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("color "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("BLACK")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Key")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Value")]),s._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" node "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("color "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("RED")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" cmp "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("compareTo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cmp "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("val "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cmp "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("left "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("left"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n        x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("right "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("right"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isRed")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("right"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isRed")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("left"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("rotateLeft")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isRed")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("left"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isRed")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("left"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("left"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("rotateRight")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isRed")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("left"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isRed")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("right"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("flipColors")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("recalculateSize")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br")])]),t("p",[s._v("可以看到该插入操作和二叉查找树的插入操作"),t("strong",[s._v("类似")]),s._v(", 只是在最后加入了"),t("strong",[s._v("旋转和颜色变换操作")]),s._v("即可.")]),s._v(" "),t("p",[t("strong",[s._v("根节点一定为黑色")]),s._v(", 因为根节点没有上层节点, 也就没有上层节点的左链接指向根节点. "),t("strong",[s._v("flipColors")]),s._v("() 有可能会使得根节点的颜色变为红色, 每当根节点由红色变成黑色时树的"),t("strong",[s._v("黑链接高度加 1")]),s._v(".")]),s._v(" "),t("p",[s._v("这里面值得注意的一点就是那三行 if 条件句, 因为是放在"),t("strong",[s._v("递归")]),s._v("语句之后的, 所以是相当于沿着树往下走到底或者找到相等值, 处理完再返回的时候运行的, 可以看到这三句刚好可以将"),t("strong",[s._v("情况三处理")]),s._v("完成, 同时也容易检验, 这个语句是完全可以兼容前两种情况. 所以不断再返回根节点的过程运行这三句, 相当于 2-3 树中把可能的多余节点移到根节点的过程. 最后树是平衡的.")]),s._v(" "),t("p",[s._v("插入操作总结:")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("如果")]),s._v("​"),t("mark",[t("strong",[s._v("右子")])]),s._v("​"),t("strong",[s._v("节点是")]),s._v("​"),t("mark",[t("strong",[s._v("红色")])]),s._v("​"),t("strong",[s._v("的而")]),s._v("​"),t("mark",[t("strong",[s._v("左子节点是黑色")])]),s._v("​"),t("strong",[s._v("的, 进行")]),s._v("​"),t("mark",[t("strong",[s._v("左旋转")])]),s._v(".")]),s._v(" "),t("li",[t("strong",[s._v("如果左子节点是红色的且它的左子节点是红色的, 进行右旋转")]),s._v(".")]),s._v(" "),t("li",[t("strong",[s._v("如果左右子节点均为红色, 进行颜色转换")]),s._v(".")])]),s._v(" "),t("p",[s._v("如下图所示.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/1577277149678.png",alt:""}})]),s._v(" "),t("h5",{attrs:{id:"_7-删除元素"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-删除元素"}},[s._v("#")]),s._v(" 7.删除元素")]),s._v(" "),t("p",[s._v("删除比较麻烦, 先考虑删除"),t("strong",[s._v("最小值")]),s._v(", 当删除一个 "),t("strong",[s._v("3- 节点")]),s._v("中的元素的时候倒还好, 直接删除之后留下了一个 2- 节点, 树的平衡性没有发生变化. 但是直接删除 "),t("strong",[s._v("2- 节点")]),s._v("会造成树的高度的变化. 所以还是要处理一下, 从上往下进行变换, 最终的目标就是保证在删除的时候当前节点不只是一个 2- 节点.")]),s._v(" "),t("h6",{attrs:{id:"_1-删除最小值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-删除最小值"}},[s._v("#")]),s._v(" (1)删除最小值")]),s._v(" "),t("p",[s._v("最小值在"),t("strong",[s._v("最左边")]),s._v(", 沿着左边下去的时候需要合并三个 2 节点形成一个 4- 节点, 或者右边是三节点的话从右边节点“借”一个形成一个 3- 节点或者 4- 节点, 这样就能保证当前节点大于 2- 节点.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/1577277497212.png",alt:""}})]),s._v(" "),t("p",[s._v("代码如下")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("moveRedLeft")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" h"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这个函数是用来处理2节点的")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("flipColors")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("h"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// 把上面的节点"拉下来", 形成一个大节点')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isRed")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("h"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("right"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("left"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n        h"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("right "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("rotateRight")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("h"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("right"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        h "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("rotateLeft")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("h"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("flipColors")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("h"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 注意! ! ! 《算法4》书中这一章的习题中的代码缺少这一行, 这一行代表借了一个节点之后, 再还一个给父节点. 否则我们就连着兄弟节点一起变成一个大节点了. ")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" h"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("delMin")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isRed")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("root"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("left"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isRed")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("root"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("right"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        root"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("color "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("RED")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    root "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("delMin")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("root"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isEmpty")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" root"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("color "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("BLACK")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("delMin")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" h"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("h"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("left "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 意味着h的左子节点为一个2节点")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isRed")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("h"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("left"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isRed")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("h"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("left"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("left"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        h"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("moveRedLeft")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("h"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    h"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("left"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("delMin")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("h"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("left"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("balance")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("h"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br")])]),t("h5",{attrs:{id:"_8-红黑树的性能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-红黑树的性能"}},[s._v("#")]),s._v(" 8.红黑树的性能")]),s._v(" "),t("p",[s._v("红黑树大多数的操作所需要的时间都是"),t("strong",[s._v("对数级别")]),s._v("的, 一颗大小为 N 的红黑树的高度"),t("strong",[s._v("不会")]),s._v("超过 "),t("strong",[s._v("2logN")]),s._v(". "),t("strong",[s._v("最坏")]),s._v("的情况下是它所对应的 "),t("strong",[s._v("2-3 树")]),s._v(", 构成最左边的路径节点全部都是 3 节点而其余都是 2 节点.")]),s._v(" "),t("h4",{attrs:{id:"多路查找树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多路查找树"}},[s._v("#")]),s._v(" 多路查找树")]),s._v(" "),t("p",[s._v("在二叉树中, 每个节点有数据项, 最多有两个子节点. 如果允许每个节点可以有更多的数据项和更多的子节点, 就是"),t("strong",[s._v("多叉树")]),s._v("(multiway tree). 2-3 树, 2-3-4 树就是"),t("strong",[s._v("多叉树")]),s._v(", 多叉树通过重新组织节点"),t("strong",[s._v("减少树的高度")]),s._v(", 能对二叉树进行优化.")]),s._v(" "),t("h5",{attrs:{id:"_1-b-tree"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-b-tree"}},[s._v("#")]),s._v(" 1.B-Tree")]),s._v(" "),t("h6",{attrs:{id:"_1-基础-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-基础-2"}},[s._v("#")]),s._v(" (1)基础")]),s._v(" "),t("p",[s._v("B-Tree 就是常说的 "),t("strong",[s._v("B 树")]),s._v(", 一定不要读成 B 减树. B-Tree 是为"),t("strong",[s._v("磁盘")]),s._v("等外存储设备设计的一种"),t("strong",[s._v("平衡查找树")]),s._v(".")]),s._v(" "),t("p",[s._v("B 树这种数据结构常常用于实现"),t("strong",[s._v("数据库索引")]),s._v(", 因为它的"),t("strong",[s._v("查找效率")]),s._v("比较高. "),t("strong",[s._v("B 树")]),s._v("通过重新组织节点, "),t("strong",[s._v("降低树的高度")]),s._v(", 并且减少 IO 读写次数来提升效率.")]),s._v(" "),t("p",[t("strong",[s._v("文件系统及数据库系统利用了磁盘预读原理, 将一个节点的大小设为等于一个页(页得大小通常为 4k), 这样每个节点只需要一次 I/O 就可以完全载入")]),s._v(". 将树的度 M 设置为 1024, 在 600 亿个元素中最多只需要 "),t("strong",[s._v("4 次 I/O")]),s._v(" 操作就可以读取到想要的元素, B 树广泛应用于"),t("strong",[s._v("文件存储系统以及数据库系统")]),s._v("中. 系统从磁盘读取数据到"),t("strong",[s._v("内存")]),s._v("时是以磁盘"),t("strong",[s._v("块")]),s._v("(block)为基本单位的, 位于同一个磁盘块中的数据会被一次性读取出来, 而不是需要什么取什么.")]),s._v(" "),t("h6",{attrs:{id:"_3-b树图示"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-b树图示"}},[s._v("#")]),s._v(" (3)B树图示")]),s._v(" "),t("p",[s._v("下图是一个 B-Tree 图示.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/1569758570040.png",alt:""}})]),s._v(" "),t("p",[t("strong",[s._v("操作图示")])]),s._v(" "),t("p",[s._v("B 树的"),t("strong",[s._v("插入及平衡化")]),s._v("操作和 2-3 树很相似, 下面是往 B 树中依次插入下列数据的过程.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("21")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("32")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("23")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("45")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("65")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/btreebuild.gif",alt:"1569758570040"}})]),s._v(" "),t("p",[t("strong",[s._v("插入或者删除元素")]),s._v("都会导致节点发生"),t("strong",[s._v("裂变反应")]),s._v(", 有时候会非常麻烦, 但正因为如此才让 B 树能够始终保持多路平衡, 这也是 B 树自身的一个优势: "),t("strong",[s._v("自平衡")]),s._v("; B 树主要应用于"),t("strong",[s._v("文件系统")]),s._v("以及部分数据库索引, 如 MongoDB; 大部分关系型数据库"),t("strong",[s._v("索引")]),s._v("其实是使用 "),t("strong",[s._v("B+ 树")]),s._v("实现.")]),s._v(" "),t("blockquote",[t("p",[s._v("B树与磁盘的映射示例")])]),s._v(" "),t("p",[s._v("B-Tree 中的每个节点根据实际情况可以包含大量的"),t("strong",[s._v("关键字信息和分支")]),s._v(', 如下图所示为一个 3 阶的 B-Tree(注: 图中的 "磁盘块" 应修改为 "'),t("strong",[s._v("页")]),s._v('", 因为 InnoDB 存储引擎中默认每个页的大小为 '),t("strong",[s._v("16KB")]),s._v(", 而"),t("strong",[s._v("磁盘块默认为 4KB")]),s._v(", 而 B-/B+ 树"),t("strong",[s._v("一个节点应该是一个页")]),s._v("):")]),s._v(" "),t("p",[s._v("​"),t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20191227120934661.png",alt:"image-20191227120934661"}}),s._v("​")]),s._v(" "),t("p",[s._v("每个"),t("strong",[s._v("节点")]),s._v("占用一个"),t("strong",[s._v("盘")]),s._v("块的磁盘空间, 一个节点上有两个升序排序的关键字和三个指向子树根节点的指针, 指针存储的是"),t("strong",[s._v("子节点")]),s._v("所在磁盘块的地址. 两个关键词划分成的"),t("strong",[s._v("三个范围域")]),s._v("对应三个指针指向的子树的数据的"),t("strong",[s._v("范围域")]),s._v(". 以根节点为例, 关键字为 17 和 35, P1 指针指向的子树的数据范围为小于 17, P2 指针指向的子树的数据范围为17~35, P3 指针指向的子树的数据范围为大于 35.")]),s._v(" "),t("p",[t("strong",[s._v("模拟查找关键字 29 的过程:")])]),s._v(" "),t("ul",[t("li",[s._v("根据根节点找到"),t("strong",[s._v("磁盘块 1")]),s._v(", 读入内存. 【磁盘 I/O 操作第 1 次】 比较关键字 29 在区间(17,35), 找到磁盘块 1 的指针 P2.")]),s._v(" "),t("li",[s._v("根据 P2 指针找到"),t("strong",[s._v("磁盘块 3")]),s._v(", 读入内存. 【磁盘 I/O 操作第 2 次】 比较关键字 29 在区间(26,30), 找到磁盘块 3 的指针 P2.")]),s._v(" "),t("li",[s._v("根据 P2 指针找到"),t("strong",[s._v("磁盘块 8")]),s._v(", 读入内存. 【磁盘 I/O 操作第 3 次】 在磁盘块 8 中的关键字列表中找到关键字 29.")])]),s._v(" "),t("p",[s._v("分析上面过程, 发现需要 3 次磁盘 I/O 操作, 和 3 次内存查找操作. 由于内存中的关键字是一个有序表结构, 可以利用"),t("strong",[s._v("二分法")]),s._v("查找提高效率. 而 "),t("strong",[s._v("3 次磁盘 I/O")]),s._v(" 操作是影响整个 B-Tree 查找效率的"),t("strong",[s._v("决定因素")]),s._v(". B-Tree 相对于 AVLTree 缩减了节点个数, 使每次磁盘 I/O 取到内存的数据都发挥了作用, 从而"),t("strong",[s._v("提高了查询效率")]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"_2-b-tree"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-b-tree"}},[s._v("#")]),s._v(" 2.B+Tree")]),s._v(" "),t("h6",{attrs:{id:"_1-概述-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述-2"}},[s._v("#")]),s._v(" (1)概述")]),s._v(" "),t("p",[s._v("B+ 树是在 B 树基础上的一种"),t("strong",[s._v("优化")]),s._v(", 使其更适合实现"),t("strong",[s._v("外存储索引")]),s._v("结构, "),t("strong",[s._v("InnoDB 存储引擎就是用 B+Tree 实现其索引结构.")])]),s._v(" "),t("p",[s._v("从 B 树结构图中可以看到"),t("strong",[s._v("每个节点中不仅包含数据的 key 值, 还有 data 值")]),s._v(". 而每一个页的存储空间是有限的, 如果 data 数据较大时将会导致每个节点(即一个页)能存储的 key 的数量很小, 当存储的"),t("strong",[s._v("数据量很大")]),s._v("时同样会导致 B-Tree 的深度较大, 增大查询时的磁盘 I/O 次数, 进而影响查询效率.")]),s._v(" "),t("p",[s._v("在 "),t("strong",[s._v("B+Tree")]),s._v(" 中, 所有"),t("mark",[t("strong",[s._v("数据记录节点都是按照键值大小顺序存放在同一层的叶子节点上, 而非叶子节点上只存储 key 值信息")])]),s._v(", 这样可以大大"),t("strong",[s._v("加大每个节点存储的 key 值数量")]),s._v(", 降低 B+Tree 的"),t("strong",[s._v("高度")]),s._v(".")]),s._v(" "),t("p",[s._v("B+Tree 相对于 B-Tree 有几点不同:")]),s._v(" "),t("ul",[t("li",[s._v("B+Tree "),t("strong",[s._v("非叶子节点只存储键值信息")]),s._v(".")]),s._v(" "),t("li",[s._v("B+Tree "),t("strong",[s._v("所有叶子节点之间都有一个链指针")]),s._v(".")]),s._v(" "),t("li",[s._v("B+Tree "),t("strong",[s._v("数据记录都存放在叶子节点中")]),s._v(".")])]),s._v(" "),t("p",[t("strong",[s._v("B+Tree 的特性")]),s._v(":")]),s._v(" "),t("ol",[t("li",[s._v("有 n 棵子树的非叶子结点中含有 n 个关键字(B 树是 n - 1 个), 这些关键字"),t("strong",[s._v("不保存数据")]),s._v(", 只用来"),t("strong",[s._v("索引")]),s._v(", 所有"),t("strong",[s._v("数据都保存在叶子节点")]),s._v("(B 树是"),t("strong",[s._v("每个关键字都保存数据")]),s._v(").")]),s._v(" "),t("li",[s._v("所有的叶子结点中包含了全部关键字的信息, 及指向含这些"),t("strong",[s._v("关键字记录的指针")]),s._v(", 且叶子结点本身依关键字的大小自小而大顺序链接.")]),s._v(" "),t("li",[s._v("所有的"),t("strong",[s._v("非叶子结点")]),s._v("可以看成是"),t("strong",[s._v("索引部分")]),s._v(", 结点中仅含其子树中的最大(或最小)关键字.")]),s._v(" "),t("li",[s._v("通常在 B+ 树上有"),t("strong",[s._v("两个头指针")]),s._v(", 一个指向"),t("strong",[s._v("根结点")]),s._v(", 一个指向"),t("strong",[s._v("关键字最小的叶子结点")]),s._v(".")]),s._v(" "),t("li",[s._v("同一个数字会在不同节点中重复出现, "),t("strong",[s._v("根节点")]),s._v("的最大元素就是 B+ 树的"),t("strong",[s._v("最大元素")]),s._v(".")])]),s._v(" "),t("p",[s._v("将上一节中的 B-Tree 优化, 由于 B+Tree 的非叶子节点只存储键值信息, 假设每个磁盘块能"),t("strong",[s._v("存储 4 个键值")]),s._v("及指针信息, 则变成 B+Tree 后其结构如下图所示:")]),s._v(" "),t("p",[s._v("​"),t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20191227121050334.png",alt:"image-20191227121050334"}}),s._v("​")]),s._v(" "),t("p",[s._v("通常在 B+Tree 上有"),t("strong",[s._v("两个头指针")]),s._v(", 一个指向"),t("strong",[s._v("根节点")]),s._v(", 另一个指向"),t("strong",[s._v("关键字最小的叶子节点")]),s._v(", 而且"),t("strong",[s._v("所有叶子节点")]),s._v("(即数据节点)之间是一种"),t("strong",[s._v("链式环结构")]),s._v(". 因此可以对 B+Tree 进行"),t("strong",[s._v("两种查找运算")]),s._v(": 一种是对于"),t("mark",[t("strong",[s._v("主键的范围查找和分页查找")])]),s._v(", 另一种是从"),t("strong",[s._v("根节点开始进行随机查找")]),s._v(".")]),s._v(" "),t("p",[s._v("下图是 B+Tree 的另一个图示.")]),s._v(" "),t("p",[s._v("​"),t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/1569758212200.png",alt:"1569758212200"}}),s._v("​")]),s._v(" "),t("p",[s._v("说明:")]),s._v(" "),t("ul",[t("li",[s._v("B+ 树元素"),t("strong",[s._v("自底向上")]),s._v("插入.")]),s._v(" "),t("li",[s._v("B+ 树的搜索与 B 树也基本相同, "),t("strong",[s._v("区别是 B+ 树只有达到叶子结点才命中")]),s._v("(B 树可以在非叶子结点命中), 其性能也等价于在关键字全集做一次"),t("strong",[s._v("二分")]),s._v("查找.")]),s._v(" "),t("li",[s._v("所有"),t("strong",[s._v("关键字")]),s._v("都出现在"),t("strong",[s._v("叶子结点")]),s._v("的链表中(即"),t("strong",[s._v("数据只能在叶子节点")]),s._v("【也叫稠密索引】), 且链表中的关键字(数据)恰好是"),t("strong",[s._v("有序")]),s._v("的.")]),s._v(" "),t("li",[s._v("B+ 树的特点是能够"),t("strong",[s._v("保持数据稳定有序")]),s._v(", 其插入与修改拥有较稳定的对数时间复杂度.")]),s._v(" "),t("li",[t("strong",[s._v("不可能")]),s._v("在非叶子结点命中.")]),s._v(" "),t("li",[s._v("非叶子结点相当于是叶子结点的索引(稀疏索引), 叶子结点相当于是存储(关键字)数据的数据层.")]),s._v(" "),t("li",[s._v("B 树和 B+ 树各有自己的应用场景, 不能说 B+ 树完全比 B 树好, 反之亦然.")])]),s._v(" "),t("h6",{attrs:{id:"_2-b-tree与数据库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-b-tree与数据库"}},[s._v("#")]),s._v(" (2)B+Tree与数据库")]),s._v(" "),t("p",[t("strong",[s._v("B+树有一个最大的好处就是方便扫库, B树必须用中序遍历的方法按序扫库")]),s._v(", 而 B+ 树直接从"),t("strong",[s._v("叶子结点")]),s._v("挨个扫一遍即可.  "),t("strong",[s._v("B+树支持 range-query (区间查询)非常方便, 而 B 树不支持")]),s._v(". 这是数据库选用 B+ 树的最主要原因.")]),s._v(" "),t("p",[s._v("可能上面例子中只有 22 条数据记录, 看不出 B+Tree 的优点, 下面做一个推算:")]),s._v(" "),t("p",[s._v("InnoDB 存储引擎中"),t("strong",[s._v("页的大小为 16KB")]),s._v(", 一般表的"),t("strong",[s._v("主键类型")]),s._v("为 INT(占用 4 个字节)或 BIGINT(占用 8 个字节), 指针类型也一般为 4 或 8个字节, 也就是说一个"),t("strong",[s._v("页")]),s._v("(B+Tree中的一个节点)中大概存储 16KB/(8B+8B) = 1K 个"),t("strong",[s._v("键值")]),s._v("(因为是估值, 为方便计算, 这里的 K 取值为10"),t("sup",[s._v("3")]),s._v("). 也就是说一个深度为 3 的 B+Tree 索引可以维护 10"),t("sup",[s._v("3 * 10")]),s._v("3 * 10^3 = 10 亿条记录.")]),s._v(" "),t("p",[s._v("InnoDB 存储引擎中有"),t("strong",[s._v("页(Page)")]),s._v(" 的概念, "),t("strong",[s._v("页是其磁盘管理的最小单位")]),s._v(". InnoDB 存储引擎中默认每个页的大小为 16KB, 可通过参数 "),t("strong",[s._v("innodb_page_size")]),s._v(" 将页的大小设置为 4K, 8K, 16K, 在 MySQL 中可通过如下命令查看页的大小:")]),s._v(" "),t("div",{staticClass:"language-mysql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("mysql> show variables like 'innodb_page_size';\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("而系统一个磁盘块的存储空间往往没有这么大, 因此 InnoDB 每次申请磁盘空间时都会是"),t("strong",[s._v("若干地址连续磁盘块来达到页的大小 16KB")]),s._v(". InnoDB 在把磁盘数据读入到磁盘时会以"),t("strong",[s._v("页")]),s._v("为基本单位, 在查询数据时如果一个页中的每条数据都能有助于定位数据记录的位置, 这将会"),t("strong",[s._v("减少磁盘 I/O 次数")]),s._v(", 提高查询效率.")]),s._v(" "),t("p",[s._v("实际情况中每个节点可能不能填充满, 因此在数据库中, B+Tree 的高度一般都在 "),t("strong",[s._v("2 ~ 4 层")]),s._v(". MySQL 的 InnoDB 存储引擎在设计时是将"),t("strong",[s._v("根节点常驻内存")]),s._v("的, 也就是说查找"),t("strong",[s._v("某一键值的行记录时最多只需要 1~3 次磁盘 I/O")]),s._v(" 操作.")]),s._v(" "),t("p",[s._v("数据库中的 B+Tree 索引可以分为"),t("strong",[s._v("聚集索引")]),s._v("(clustered index)和"),t("strong",[s._v("辅助索引")]),s._v("(secondary index). 上面的 B+Tree 示例图在数据库中的实现即为"),t("strong",[s._v("聚集索引")]),s._v(", 聚集索引的 B+Tree 中的"),t("strong",[s._v("叶子节点")]),s._v("存放的是"),t("strong",[s._v("整张表的行记录数据")]),s._v(". 辅助索引与聚集索引的区别在于"),t("strong",[s._v("辅助索引的叶子节点并不包含行记录的全部数据")]),s._v(", 而是"),t("strong",[s._v("存储相应行数据的聚集索引键")]),s._v(", 即主键. 当通过"),t("strong",[s._v("辅助索引")]),s._v("来查询数据时, InnoDB 存储引擎会"),t("strong",[s._v("遍历辅助索引找到主键")]),s._v(", 然后再"),t("strong",[s._v("通过主键在聚集索引")]),s._v("中找到完整的行记录数据.")]),s._v(" "),t("p",[s._v("‍")]),s._v(" "),t("p",[s._v("‍")]),s._v(" "),t("h4",{attrs:{id:"参考资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[s._v("#")]),s._v(" 参考资料")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://blog.csdn.net/jisuanjiguoba/article/details/81092812",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://blog.csdn.net/jisuanjiguoba/article/details/81092812"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"https://blog.csdn.net/qq_21993785/article/details/80576642",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://blog.csdn.net/qq_21993785/article/details/80576642"),t("OutboundLink")],1)]),s._v(" "),t("li",[s._v("B-Tree与二叉查找树的对比 "),t("a",{attrs:{href:"http://m.elecfans.com/article/662237.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("http://m.elecfans.com/article/662237.html"),t("OutboundLink")],1)])]),s._v(" "),t("p",[s._v("‍")])])}),[],!1,null,null,null);t.default=r.exports}}]);