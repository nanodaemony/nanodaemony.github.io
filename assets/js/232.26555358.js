(window.webpackJsonp=window.webpackJsonp||[]).push([[232],{562:function(s,t,n){"use strict";n.r(t);var a=n(4),e=Object(a.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"_34-redis集群"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_34-redis集群"}},[s._v("#")]),s._v(" 34.Redis集群")]),s._v(" "),t("p",[s._v("Redis Cluster 是 Redis 的"),t("strong",[s._v("分布式")]),s._v("解决方案. 当遇到单机"),t("strong",[s._v("内存, 并发, 流量等瓶颈")]),s._v("时可以采用 cluster 架构的解决方案.")]),s._v(" "),t("h4",{attrs:{id:"数据分布理论"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据分布理论"}},[s._v("#")]),s._v(" 数据分布理论")]),s._v(" "),t("p",[s._v("分布式数据库首先要解决把"),t("strong",[s._v("整个数据集")]),s._v("按照分区规则"),t("strong",[s._v("映射到多个节点")]),s._v("的问题, 即把数据集划分到多个节点上, 每个"),t("strong",[s._v("节点")]),s._v("负责整体数据的一个"),t("strong",[s._v("子集")]),s._v(". 数据分区是"),t("strong",[s._v("分布式存储的核心")]),s._v(".")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220523215154473.png",alt:""}})]),s._v(" "),t("p",[s._v("需要重点关注的是"),t("strong",[s._v("数据分区方案")]),s._v(". 常见的分区规则有"),t("strong",[s._v("哈希分区和顺序分区")]),s._v("两种.")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("哈希分区")]),s._v(": 离散度好, 数据分布业务无关, 无法顺序访问. 代表产品: "),t("strong",[s._v("Redis Cluster")]),s._v(", Dynamo, Cassandra.")]),s._v(" "),t("li",[t("strong",[s._v("顺序分区")]),s._v(": 离散度易倾斜, 数据分布业务相关, 可顺序访问. 代表产品: "),t("strong",[s._v("HBase")]),s._v(", Bigtable.")])]),s._v(" "),t("h5",{attrs:{id:"_1-哈希数据分区方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-哈希数据分区方案"}},[s._v("#")]),s._v(" 1.哈希数据分区方案")]),s._v(" "),t("p",[s._v("常见的哈希分区规则有几种.")]),s._v(" "),t("h6",{attrs:{id:"_1-节点取模分区"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-节点取模分区"}},[s._v("#")]),s._v(" (1)节点取模分区")]),s._v(" "),t("p",[s._v("使用特定的数据, 如 Redis 的"),t("strong",[s._v("键或用户 ID")]),s._v(", 再根据节点数量 N 使用公式: "),t("strong",[s._v("hash(key) % N")]),s._v(" 计算出哈希值, 用来决定数据"),t("strong",[s._v("映射")]),s._v("到哪一个节点上.")]),s._v(" "),t("p",[s._v("这种方案存在一个问题: 当节点数量变化时, 如扩容或收缩节点, 数据节点映射关系都需要"),t("strong",[s._v("重新计算再哈希")]),s._v(", 会导致数据的大量"),t("strong",[s._v("重新迁移")]),s._v(". 所以扩容时通常采用"),t("strong",[s._v("翻倍扩容")]),s._v(", 避免数据映射全部被打乱导致全量迁移的情况.")]),s._v(" "),t("h6",{attrs:{id:"_2-一致性哈希分区🌟"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-一致性哈希分区🌟"}},[s._v("#")]),s._v(" (2)一致性哈希分区🌟")]),s._v(" "),t("p",[t("strong",[s._v("一致性哈希分区")]),s._v("(Distributed Hash Table)实现思路是为系统中"),t("strong",[s._v("每个节点分配一个 token")]),s._v(", 范围一般在 0 ~ 232, 这些 token 构成一个"),t("strong",[s._v("哈希环")]),s._v(". 数据读写执行节点查找操作时, 先根据 key 计算 hash 值, 然后"),t("strong",[s._v("顺时针找到第一个大于等于该哈希值")]),s._v("的 token 节点并存储数据.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20200527211945450-3785508.png",alt:"image-20200527211945450"}})]),s._v(" "),t("p",[s._v("与哈希取余分区相比, 一致性哈希分区将 "),t("strong",[s._v("增减节点的影响限制在相邻节点")]),s._v(". 以上图为例, 如果在 node1 和 node2 之间增加 node5, 则只有 node2 中的一部分数据会迁移到 node5; 如果去掉 node2, 则原 node2 中的数据只会迁移到 node4 中, 只有 node4 会受影响.")]),s._v(" "),t("p",[s._v("一致性哈希分区的主要问题在于, 当 "),t("strong",[s._v("节点数量较少")]),s._v(" 时, 增加或删减节点, 对"),t("strong",[s._v("单个节点")]),s._v("的影响可能很大, "),t("strong",[s._v("造成数据的严重不平衡")]),s._v(". 还是以上图为例, 如果去掉 node2, node4 中的数据由总数据的 1/4 左右变为 1/2 左右, 与其他节点相比负载过高.")]),s._v(" "),t("p",[s._v("正因为一致性哈希分区的这些缺点, 一些分布式系统采用"),t("strong",[s._v("虚拟槽")]),s._v("对一致性哈希进行改进.")]),s._v(" "),t("h6",{attrs:{id:"_3-虚拟槽分区🌟"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-虚拟槽分区🌟"}},[s._v("#")]),s._v(" (3)虚拟槽分区🌟")]),s._v(" "),t("p",[s._v("这种方案在"),t("strong",[s._v("一致性哈希分区的基础上")]),s._v(", 引入 "),t("strong",[s._v("虚拟节点")]),s._v(" 的概念. Redis 集群使用的便是该方案, 其中的"),t("strong",[s._v("虚拟节点")]),s._v("称为"),t("strong",[s._v("槽(slot)")]),s._v(". 槽是介于数据和实际节点之间的虚拟概念, 每个实际节点包含一定数量的槽, 每个槽包含哈希值在一定范围内的数据.")]),s._v(" "),t("p",[s._v("虚拟槽分区巧妙地使用了"),t("strong",[s._v("哈希空间")]),s._v(", 使用分散度良好的"),t("strong",[s._v("哈希函数")]),s._v("把所有数据映射到一个"),t("strong",[s._v("固定范围")]),s._v("的整数集合中, "),t("strong",[s._v("把整数定义为槽")]),s._v(". 这个范围一般"),t("strong",[s._v("远远大于节点数")]),s._v(", 比如 Redis Cluster 槽范围是 "),t("strong",[s._v("0 ~ 16383")]),s._v(".")]),s._v(" "),t("p",[s._v("在使用了槽的一致性哈希分区中, "),t("strong",[s._v("槽是数据管理和迁移的基本单位")]),s._v(". "),t("strong",[s._v("槽解耦了数据和实际节点间的关系")]),s._v(", 增加或删除节点对系统的影响很小. 假设系统中有 4 个实际节点, 假设为其分配 16 个槽(0 - 15), 那么槽 0 - 3 位于 node1; 4 - 7 位于 node2; 以此类推....如果此时删除 node2, 只需要"),t("strong",[s._v("将槽 4-7 重新分配")]),s._v("即可, 例如槽 4-5 分配给 node1, 槽 6 分配给 node3, 槽 7 分配给 node4; 可以看出删除 node2 后, 数据在其他节点的分布"),t("strong",[s._v("仍然较为均衡")]),s._v(".")]),s._v(" "),t("p",[s._v("采用大范围槽的主要目的是为了方便数据"),t("strong",[s._v("拆分和集群扩展")]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"_2-redis数据分区🌟"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-redis数据分区🌟"}},[s._v("#")]),s._v(" 2.Redis数据分区🌟")]),s._v(" "),t("p",[t("strong",[s._v("Redis Cluster")]),s._v(" 就是"),t("strong",[s._v("采用虚拟槽分区")]),s._v(". 所有键根据哈希函数映射到 "),t("strong",[s._v("0 ~ 16383")]),s._v(" 整数槽内, 计算公式: "),t("strong",[s._v("slot = CRC16(key) & 16383")]),s._v(". 每一个节点负责维护一部分"),t("strong",[s._v("槽以及槽所映射的键值数据")]),s._v(".")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220523220809355.png",alt:""}})]),s._v(" "),t("p",[s._v("一个集群中分槽的例子.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220523220845778.png",alt:""}})]),s._v(" "),t("p",[s._v("当前集群有 "),t("strong",[s._v("5 个节点")]),s._v(", 每个节点平均大约负责 "),t("strong",[s._v("3276")]),s._v(" 个槽. 由于采用"),t("strong",[s._v("高质量的哈希算法")]),s._v(", 每个槽所映射的数据通常比较均匀, 将数据平均划分到 5 个节点进行"),t("strong",[s._v("数据分区")]),s._v(".")]),s._v(" "),t("h4",{attrs:{id:"集群的作用与功能限制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#集群的作用与功能限制"}},[s._v("#")]),s._v(" 集群的作用与功能限制")]),s._v(" "),t("h5",{attrs:{id:"_1-集群的作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-集群的作用"}},[s._v("#")]),s._v(" 1.集群的作用")]),s._v(" "),t("p",[t("strong",[s._v("数据分区: ​")]),s._v("数据分区(或称数据分片)是集群最核心的功能. 集群将数据分散到多个节点, 一方面突破了 Redis 单机内存大小的限制, "),t("strong",[s._v("存储容量大大增加")]),s._v("; "),t("strong",[s._v("另一方面")]),s._v("每个主节点都可以对外提供读服务和写服务, "),t("strong",[s._v("大大提高了集群的响应能力")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("高可用: ​")]),s._v("​"),t("strong",[t("strong",[s._v("集群支持")])]),s._v("​"),t("strong",[s._v("主从复制")]),s._v("和主节点的"),t("strong",[s._v("自动故障转移")]),s._v("(与哨兵类似), 当任一节点发生故障时, 集群仍然可以对外提供服务.")]),s._v(" "),t("h5",{attrs:{id:"_2-集群的功能限制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-集群的功能限制"}},[s._v("#")]),s._v(" 2.集群的功能限制")]),s._v(" "),t("p",[s._v("Redis 集群相对单机在功能上存在一些限制.")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("key 批量操作支持有限")]),s._v(". 如 mset, mget, 目前只支持具有"),t("strong",[s._v("相同 slot 值")]),s._v("的 key 执行批量操作. 对于映射为不同 slot 值的 key 由于执行 mget, mget 等操作可能存在于多个节点上因此不被支持.")]),s._v(" "),t("li",[t("strong",[s._v("key 事务操作支持有限")]),s._v(". 同理只支持多 key 在"),t("strong",[s._v("同一节点")]),s._v("上的事务操作, 当多个 key 分布在不同的节点上时无法使用事务功能.")]),s._v(" "),t("li",[s._v("key 作为数据分区的最小粒度, 因此"),t("strong",[s._v("不能将一个大")]),s._v("的键值对象如 hash, list 等映射到不同的节点.")]),s._v(" "),t("li",[s._v("不支持多数据库空间. 单机下的 Redis 可以支持 16 个数据库, 集群模式下"),t("strong",[s._v("只能使用一个")]),s._v("数据库空间, 即 db0.")]),s._v(" "),t("li",[s._v("复制结构"),t("strong",[s._v("只支持一层")]),s._v(", 从节点只能复制主节点, 不支持嵌套树状复制结构.")])]),s._v(" "),t("h4",{attrs:{id:"集群搭建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#集群搭建"}},[s._v("#")]),s._v(" 集群搭建")]),s._v(" "),t("p",[s._v("集群架构如下. 集群中的每一个 Redis 节点都"),t("strong",[s._v("互相两两相连")]),s._v(", 客户端任意"),t("strong",[s._v("直连")]),s._v("到集群中的"),t("strong",[s._v("任意一台")]),s._v(", 就可以对其他 Redis 节点进行"),t("strong",[s._v("读写")]),s._v("操作.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220523222556276.png",alt:""}})]),s._v(" "),t("p",[s._v("搭建集群的三个步骤:")]),s._v(" "),t("ul",[t("li",[s._v("准备节点.")]),s._v(" "),t("li",[s._v("节点握手.")]),s._v(" "),t("li",[s._v("分配槽.")])]),s._v(" "),t("h5",{attrs:{id:"_1-节点准备"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-节点准备"}},[s._v("#")]),s._v(" 1.节点准备")]),s._v(" "),t("p",[s._v("Redis 集群一般由多个节点组成, 节点数量"),t("strong",[s._v("至少")]),s._v("为 "),t("strong",[s._v("6 个")]),s._v("才能保证组成完整高可用的集群. 每个节点需要"),t("strong",[s._v("开启配置 cluster-enabled yes")]),s._v(", 让 Redis 运行在集群模式下.")]),s._v(" "),t("p",[s._v("建议为集群内所有节点"),t("strong",[s._v("统一目录")]),s._v(", 一般划分三个目录: "),t("strong",[s._v("conf, data, log")]),s._v(", 分别存放"),t("strong",[s._v("配置, 数据和日志")]),s._v("相关文件. 把 6 个节点"),t("strong",[s._v("配置")]),s._v("统一放在 conf 目录下, 集群相关配置如下:")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 节点端口")]),s._v("\nport "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6379")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 开启集群模式")]),s._v("\ncluster-enabled "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("yes")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 节点超时时间, 单位毫秒")]),s._v("\ncluster-node-timeout "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("15000")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 集群内部配置文件")]),s._v("\ncluster-config-file "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"nodes-6379.conf"')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("其他配置和"),t("strong",[s._v("单机模式一致")]),s._v("即可, 这里配置文件命名规则 "),t("strong",[s._v("redis-{port}.conf")]),s._v(", 准备好配置后"),t("strong",[s._v("启动所有节点")]),s._v(".")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ redis-server conf/redis-6379.conf\n$ redis-server conf/redis-6380.conf\n$ redis-server conf/redis-6381.conf\n$ redis-server conf/redis-6382.conf\n$ redis-server conf/redis-6383.conf\n$ redis-server conf/redis-6384.conf\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("检查"),t("strong",[s._v("节点日志")]),s._v("是否正确, 日志内容如下:")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" log/redis-6379.log\n* No cluster configuration found, I'm cfb28ef1deee4e0fa78da86abe5d24566744411e\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Server started, Redis version 3.0.7")]),s._v("\n* The server is now ready to accept connections on port "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6379")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("6379 节点"),t("strong",[s._v("启动成功")]),s._v(", 第一次启动时如果没有集群配置文件, 它会"),t("strong",[s._v("自动创建")]),s._v("一份.")]),s._v(" "),t("p",[s._v("集群模式的 Redis 除了原有的配置文件之外"),t("strong",[s._v("又加了一份集群配置文件")]),s._v(". 当集群内节点信息发生变化, 如添加节点, 节点下线, 故障转移等. 节点会"),t("strong",[s._v("自动保存")]),s._v("集群状态到配置文件中. 需要注意的是, Redis "),t("strong",[s._v("自动维护集群配置文件")]),s._v(", 不要手动修改, 防止节点重启时产生集群信息错乱.")]),s._v(" "),t("p",[s._v("节点 6379 首次启动后生成集群配置如下:")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" data/nodes-6379.conf\ncfb28ef1deee4e0fa78da86abe5d24566744411e "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6379 myself,master - "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" connected\nvars currentEpoch "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" lastVoteEpoch "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("文件内容记录了集群"),t("strong",[s._v("初始状态")]),s._v(", 这里最重要的是"),t("strong",[s._v("节点 ID")]),s._v(", 它是一个 40 位 16 进制字符串, 用于"),t("strong",[s._v("唯一标识集群内一个节点")]),s._v(", 之后很多集群操作都要借助于节点 ID 完成. 注意: 节点 ID "),t("strong",[s._v("不同于运行 ID")]),s._v(". 节点 ID 在集群初始化时"),t("strong",[s._v("只创建一次")]),s._v(", 节点重启时会加载集群配置文件进行"),t("strong",[s._v("重用")]),s._v(", 而 Redis 的"),t("strong",[s._v("运行 ID 每次重启都会变化")]),s._v(".")]),s._v(" "),t("p",[s._v("在节点 6380 执行 "),t("strong",[s._v("cluster nodes")]),s._v(" 命令获取集群节点状态:")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:638"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("0")]),s._v(">")]),s._v(" cluster nodes\n8e41673d59c9568aa9d29fb174ce733345b3e8f1 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6380 myself,master - "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" connected\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("每个节点目前只能识别出"),t("strong",[s._v("自己")]),s._v("的节点信息. 如果启动 6 个节点, 但每个节点彼此并不知道对方的存在, 需要通过"),t("strong",[s._v("节点握手")]),s._v("让 6 个节点彼此"),t("strong",[s._v("建立联系")]),s._v("从而组成一个集群.")]),s._v(" "),t("h5",{attrs:{id:"_2-节点握手"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-节点握手"}},[s._v("#")]),s._v(" 2.节点握手")]),s._v(" "),t("p",[s._v("节点握手是指一批运行在集群模式下的节点通过 "),t("strong",[s._v("Gossip 协议")]),s._v("彼此通信, 达到感知对方的过程. 节点握手是集群彼此通信的第一步, 由"),t("strong",[s._v("客户端")]),s._v("发起命令: "),t("strong",[s._v("cluster meet {ip} {port}")]),s._v(". 两个结点直接先用 "),t("strong",[s._v("meet")]),s._v(" 消息进行握手(成功后回复 pong 消息), 然后使用 "),t("strong",[s._v("ping/pong")]),s._v(" 消息维护"),t("strong",[s._v("正常通信")]),s._v(".")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220523223000635.png",alt:""}})]),s._v(" "),t("p",[s._v("只需要在集群内"),t("strong",[s._v("任意节点")]),s._v("上执行 cluster meet 命令"),t("strong",[s._v("加入新节点")]),s._v(", 握手状态会通过"),t("strong",[s._v("消息")]),s._v("在集群内"),t("strong",[s._v("传播")]),s._v(", 这样其他节点会"),t("strong",[s._v("自动发现新节点并发起握手流程")]),s._v(".")]),s._v(" "),t("p",[s._v("最后执行 cluster nodes 命令确认 6 个节点都彼此感知并组成集群:")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" cluster nodes\n4fa7eac4080f0b667ffeab9b87841da49b84a6e4 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6384 master - "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1468073975551")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" connected\ncfb28ef1deee4e0fa78da86abe5d24566744411e "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6379 myself,master - "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" connected\nbe9485a6a729fc98c5151374bc30277e89a461d8 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6383 master - "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1468073978579")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" connected\n40622f9e7adc8ebd77fca0de9edfe691cb8a74fb "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6382 master - "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1468073980598")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" connected\n8e41673d59c9568aa9d29fb174ce733345b3e8f1 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6380 master - "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1468073974541")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" connected\n40b8d09d44294d2e23c7c768efc8fcd153446746 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6381 master - "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1468073979589")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" connected\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("p",[s._v("节点建立握手之后集群"),t("strong",[s._v("还不能正常工作")]),s._v(", 这时集群处于"),t("strong",[s._v("下线状态")]),s._v(", 所有数据读写都被禁止. 因为目前所有的"),t("strong",[s._v("槽")]),s._v("没有分配到节点, 因此"),t("strong",[s._v("集群无法完成槽到节点的映射")]),s._v(". 只有当 16384 个槽"),t("strong",[s._v("全部分配")]),s._v("给节点后, 集群才进入"),t("strong",[s._v("在线状态")]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"_3-分配数据槽"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-分配数据槽"}},[s._v("#")]),s._v(" 3.分配数据槽")]),s._v(" "),t("p",[s._v("Redis 集群把所有的数据映射到 "),t("strong",[s._v("16384 个槽")]),s._v("中. 每个 key 会映射为一个"),t("strong",[s._v("固定的槽")]),s._v(", 只有当节点分配了槽, 才能响应与这些槽关联的键命令.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220523224414128.png",alt:""}})]),s._v(" "),t("p",[s._v("Redis 集群中内置了 "),t("strong",[s._v("16384")]),s._v(" 个哈希槽. 当客户端连接到 Redis 集群后, 会同时得到一份关于这个"),t("strong",[s._v("集群的配置信息")]),s._v(", 当客户端具体对某一个 "),t("strong",[s._v("key 值")]),s._v("进行操作时, 会计算出它的一个 "),t("strong",[s._v("Hash 值")]),s._v(", 然后把"),t("strong",[s._v("结果对 16384 求余数")]),s._v(", 这样每个 key 都会"),t("strong",[s._v("对应一个编号在 0-16383 之间的哈希槽")]),s._v(", Redis 会根据节点数量 "),t("strong",[s._v("大致均等")]),s._v(" 的将哈希槽映射到不同的节点.")]),s._v(" "),t("p",[s._v("通过 "),t("strong",[s._v("cluster addslots")]),s._v(" 命令为节点分配槽. 这里利用 bash 特性批量设置槽, 命令如下:")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ redis-cli "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-h")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1 "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6379")]),s._v(" cluster addslots "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".5461"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n$ redis-cli "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-h")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1 "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6380")]),s._v(" cluster addslots "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5462")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".10922"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n$ redis-cli "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-h")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1 "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6381")]),s._v(" cluster addslots "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10923")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".16383"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("把 16384 个 slot 平均分配给 6379, 6380, 6381 "),t("strong",[s._v("三个")]),s._v("节点. 执行 cluster info 查看集群状态, 如下所示:")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" cluster info\ncluster_state:ok\ncluster_slots_assigned:16384\ncluster_slots_ok:16384\ncluster_slots_pfail:0\ncluster_slots_fail:0\ncluster_known_nodes:6\ncluster_size:3\ncluster_current_epoch:5\ncluster_my_epoch:0\ncluster_stats_messages_sent:4874\ncluster_stats_messages_received:4726\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("p",[s._v("当前集群状态是 OK, 集群进入"),t("strong",[s._v("在线状态")]),s._v(". 所有的槽都已经分配给节点, 执行 cluster nodes 命令可以看到"),t("strong",[s._v("节点和槽的分配关系")]),s._v(":")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" cluster nodes\n4fa7eac4080f0b667ffeab9b87841da49b84a6e4 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6384 master - "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1468076240123")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" connected\ncfb28ef1deee4e0fa78da86abe5d24566744411e "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6379 myself,master - "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" connected\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("-5461\nbe9485a6a729fc98c5151374bc30277e89a461d8 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6383 master - "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1468076239622")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" connected\n40622f9e7adc8ebd77fca0de9edfe691cb8a74fb "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6382 master - "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1468076240628")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" connected\n8e41673d59c9568aa9d29fb174ce733345b3e8f1 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6380 master - "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1468076237606")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" connected\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5462")]),s._v("-10922\n40b8d09d44294d2e23c7c768efc8fcd153446746 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6381 master - "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1468076238612")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" connected\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10923")]),s._v("-16383\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("p",[s._v("目前还有三个节点"),t("strong",[s._v("没有使用")]),s._v(", 作为一个完整的集群, 每个负责"),t("strong",[s._v("处理槽的节点应该具有从节点")]),s._v(", 保证当它出现故障时可以"),t("strong",[s._v("自动进行故障转移")]),s._v(". 集群模式下, Reids 节点角色分为"),t("strong",[s._v("主节点和从节点")]),s._v(". 首次启动的节点和"),t("strong",[s._v("被分配槽的节点都是主节点")]),s._v(", 从节点负责"),t("strong",[s._v("复制")]),s._v("主节点槽信息和相关的数据.")]),s._v(" "),t("p",[s._v("使用 "),t("strong",[s._v("cluster replicate {nodeId}")]),s._v(" 命令让一个节点成为"),t("strong",[s._v("从节点")]),s._v(". 其中命令执行必须在对应的"),t("strong",[s._v("从节点上")]),s._v("执行, nodeId 是要复制主节点的节点 ID, 命令如下:")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:638"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("2")]),s._v(">")]),s._v("cluster replicate cfb28ef1deee4e0fa78da86abe5d24566744411e\nOK\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:638"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("3")]),s._v(">")]),s._v("cluster replicate 8e41673d59c9568aa9d29fb174ce733345b3e8f1\nOK\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:638"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("4")]),s._v(">")]),s._v("cluster replicate 40b8d09d44294d2e23c7c768efc8fcd153446746\nOK\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("Redis 集群模式下的主从复制使用了之前介绍的 Redis 复制流程, 依然"),t("strong",[s._v("支持全量和部分复制. ​")]),s._v("​"),t("strong",[t("strong",[s._v("复制完成后, 整个集群的")])]),s._v("​"),t("strong",[s._v("结构")]),s._v("如下图所示.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220523224624184.png",alt:""}})]),s._v(" "),t("p",[s._v("上述即依照 Redis 协议"),t("strong",[s._v("手动建立")]),s._v("一个集群. 它由 6 个节点构成, 3 个主节点负责处理槽和相关数据, 3 个从节点负责故障转移. 手动比较复杂, Redis 官方提供了 "),t("strong",[s._v("redis-trib.rb")]),s._v(" 工具方便快速搭建集群, 用这个工具需要安装 Ruby 环境.")]),s._v(" "),t("h5",{attrs:{id:"_4-集群搭建完整demo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-集群搭建完整demo"}},[s._v("#")]),s._v(" 4.集群搭建完整demo")]),s._v(" "),t("p",[t("strong",[s._v("(1)第一步: 创建集群节点配置文件")])]),s._v(" "),t("p",[s._v("创建一个名为 "),t("strong",[s._v("redis-cluster")]),s._v(" 的目录:")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" ~/Desktop/redis-cluster\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("然后创建"),t("strong",[s._v("六个")]),s._v("配置文件, 分别命名为: "),t("strong",[s._v("redis_7000.conf/redis_7001.conf.....redis_7005.conf")]),s._v(", 然后根据不同的端口号修改对应的端口值就好了:")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 后台执行")]),s._v("\ndaemonize "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("yes")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 端口号")]),s._v("\nport "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7000")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 为每一个集群节点指定一个 pid_file")]),s._v("\npidfile ~/Desktop/redis-cluster/redis_7000.pid\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 启动集群模式")]),s._v("\ncluster-enabled "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("yes")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 每一个集群节点都有一个配置文件, 这个文件是不能手动编辑的. 确保每一个集群节点的配置文件不通")]),s._v("\ncluster-config-file nodes-7000.conf\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 集群节点的超时时间, 单位: ms, 超时后集群会认为该节点失败")]),s._v("\ncluster-node-timeout "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5000")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 最后将 appendonly 改成 yes(AOF 持久化)")]),s._v("\nappendonly "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("yes")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[s._v("记得把对应上述配置文件中"),t("strong",[s._v("根端口对应的配置都修改掉")]),s._v("(port/ pidfile/ cluster-config-file).")]),s._v(" "),t("p",[t("strong",[s._v("(2)第二步: 分别启动6个Redis实例")])]),s._v(" "),t("p",[s._v("根据 6 个配置文件启动 6 个 Redis 实例.")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ redis-server ~/redis-cluster/redis_7000.conf\n$ redis-server ~/redis-cluster/redis_7001.conf\n$ redis-server ~/redis-cluster/redis_7002.conf\n$ redis-server ~/redis-cluster/redis_7003.conf\n$ redis-server ~/redis-cluster/redis_7004.conf\n$ redis-server ~/redis-cluster/redis_7005.conf\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("执行 "),t("strong",[s._v("ps -ef | grep redis")]),s._v(" 查看是否启动成功:")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/7896890-452c3152054c36f1.png",alt:""}})]),s._v(" "),t("p",[s._v("可以看到 6 个 Redis 节点都以集群方式成功启动, "),t("strong",[s._v("但现在每个节点还处于独立的状态")]),s._v(", 也就是说它们每一个都各自成了一个集群, 还没有互相联系起来, 需要手动地把它们之间建立起联系.")]),s._v(" "),t("p",[t("strong",[s._v("(3)第三步: 建立集群")])]),s._v(" "),t("p",[s._v("执行下列命令:")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ redis-cli "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--cluster")]),s._v(" create --cluster-replicas "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:7000 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:7001 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:7002 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:7003 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:7004 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:7005\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("这里 "),t("strong",[s._v("--replicas 1")]),s._v(" 的意思是: 希望为集群中的"),t("strong",[s._v("每个主节点创建一个从节点")]),s._v(".")]),s._v(" "),t("p",[s._v("观察输出:")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/7896890-d5ab644e76e9cc87.png",alt:""}})]),s._v(" "),t("p",[s._v("看到 "),t("strong",[s._v("[OK]")]),s._v(" 就表示集群已经搭建成功了, 这里成功创建了"),t("strong",[s._v("三主三从")]),s._v("的集群.")]),s._v(" "),t("p",[t("strong",[s._v("(4)第四步: 验证集群")])]),s._v(" "),t("p",[s._v("先使用 "),t("strong",[s._v("redis-cli")]),s._v(" 任意连接一个节点:")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("redis-cli "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-h")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1 "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7000")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[t("strong",[s._v("-c 表示集群模式; -h 指定 ip 地址; -p 指定端口.")])])]),s._v(" "),t("p",[s._v('然后随便 "set" 一些值观察控制台输入:')]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:700"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("0")]),s._v(">")]),s._v(" SET name wmyskxz\n-"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" Redirected to slot "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5798")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" located at "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:7001\nOK\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("可以看到 Redis 自动进行了 "),t("strong",[s._v("Redirected 操作")]),s._v("跳转到了 7001 这个实例上.")]),s._v(" "),t("p",[s._v("再使用 "),t("strong",[s._v("cluster info(查看集群信息) 和 cluster nodes")]),s._v("(查看节点列表) 来分别看看(任意节点输入均可):")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:700"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("1")]),s._v(">")]),s._v(" CLUSTER INFO\ncluster_state:ok\ncluster_slots_assigned:16384\ncluster_slots_ok:16384\ncluster_slots_pfail:0\ncluster_slots_fail:0\ncluster_known_nodes:6\ncluster_size:3\ncluster_current_epoch:6\ncluster_my_epoch:2\ncluster_stats_messages_ping_sent:1365\ncluster_stats_messages_pong_sent:1358\ncluster_stats_messages_meet_sent:4\ncluster_stats_messages_sent:2727\ncluster_stats_messages_ping_received:1357\ncluster_stats_messages_pong_received:1369\ncluster_stats_messages_meet_received:1\ncluster_stats_messages_received:2727\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:700"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("1")]),s._v(">")]),s._v(" CLUSTER NODES\n56a04742f36c6e84968cae871cd438935081e86f "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:7003@17003 slave 4ec8c022e9d546c9b51deb9d85f6cf867bf73db6 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1584428884000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" connected\n4ec8c022e9d546c9b51deb9d85f6cf867bf73db6 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:7000@17000 master - "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1584428884000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" connected "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("-5460\ne2539c4398b8258d3f9ffa714bd778da107cb2cd "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:7005@17005 slave a3406db9ae7144d17eb7df5bffe8b70bb5dd06b8 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1584428885222")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(" connected\nd31cd1f423ab1e1849cac01ae927e4b6950f55d9 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:7004@17004 slave 236cefaa9cdc295bc60a5bd1aed6a7152d4f384d "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1584428884209")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" connected\n236cefaa9cdc295bc60a5bd1aed6a7152d4f384d "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:7001@17001 myself,master - "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1584428882000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" connected "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5461")]),s._v("-10922\na3406db9ae7144d17eb7df5bffe8b70bb5dd06b8 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:7002@17002 master - "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1584428884000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" connected "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10923")]),s._v("-16383\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br")])]),t("h4",{attrs:{id:"结点通信机制🌟"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#结点通信机制🌟"}},[s._v("#")]),s._v(" 结点通信机制🌟")]),s._v(" "),t("h5",{attrs:{id:"_1-通信流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-通信流程"}},[s._v("#")]),s._v(" 1.通信流程")]),s._v(" "),t("p",[s._v("在分布式存储中需要提供维护"),t("strong",[s._v("节点元数据信息")]),s._v("的机制, 所谓"),t("strong",[s._v("元数据")]),s._v("是指: 节点负责哪些数据, 是否出现故障等状态信息. 常见的元数据维护方式分为: "),t("strong",[s._v("集中式和 P2P 方式")]),s._v(". Redis 集群采用 P2P 的 "),t("strong",[s._v("Gossip(流言)协议")]),s._v(", Gossip 协议工作"),t("strong",[s._v("原理")]),s._v("就是"),t("strong",[s._v("节点彼此不断通信交换信息, 一段时间后所有的节点都会知道集群完整的信息, 这种方式类似流言传播")]),s._v(".")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220523225023888.png",alt:""}})]),s._v(" "),t("p",[s._v("通信过程说明:")]),s._v(" "),t("ul",[t("li",[s._v("集群中的"),t("strong",[s._v("每个节点")]),s._v("都会单独开辟一个 "),t("strong",[s._v("TCP")]),s._v(" 通道, 用于节点之间彼此通信, 通信端口号在基础端口上加 "),t("strong",[s._v("10000")]),s._v(".")]),s._v(" "),t("li",[s._v("每个节点在"),t("strong",[s._v("固定周期")]),s._v("内通过特定规则选择几个节点发送 "),t("strong",[s._v("ping 消息")]),s._v(".")]),s._v(" "),t("li",[s._v("接收到 ping 消息的节点用 "),t("strong",[s._v("pong 消息")]),s._v("作为响应.")])]),s._v(" "),t("p",[s._v("集群中每个节点通过一定规则挑选要通信的节点, 每个节点可能知道全部节点, 也可能仅知道部分节点, 只要这些节点彼此可以正常通信, "),t("strong",[s._v("最终它们会达到一致的状态. ​")]),s._v("​"),t("strong",[t("strong",[s._v("当节点出故障, 新节点加入, 主从角色变化, 槽信息变更等事件发生时, 通过")])]),s._v("​"),t("strong",[s._v("不断的 ping/pong 消息通信")]),s._v(", 经过一段时间后所有的节点都会知道"),t("strong",[s._v("整个集群全部节点的最新状态")]),s._v(", 从而达到"),t("strong",[s._v("集群状态同步")]),s._v("的目的.")]),s._v(" "),t("h5",{attrs:{id:"_2-gossip消息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-gossip消息"}},[s._v("#")]),s._v(" 2.Gossip消息")]),s._v(" "),t("p",[s._v("Gossip 协议的主要职责就是"),t("strong",[s._v("信息交换")]),s._v(". 信息交换的载体就是节点彼此发送的 Gossip 消息. 常用的 Gossip 消息类型可分为: "),t("strong",[s._v("ping 消息, pong 消息, meet 消息, fail 消息")]),s._v("等.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220523225127890.png",alt:""}})]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("meet 消息")]),s._v(": 用于通知"),t("strong",[s._v("新节点")]),s._v("加入.")]),s._v(" "),t("li",[t("strong",[s._v("ping 消息")]),s._v(": 用于检测节点"),t("strong",[s._v("是否在线和交换彼此状态")]),s._v("信息. ping 消息发送"),t("strong",[s._v("封装")]),s._v("了自身节点和部分其他节点的状态数据.")]),s._v(" "),t("li",[t("strong",[s._v("pong 消息")]),s._v(": 当接收到 ping, meet 消息时, 作为响应"),t("strong",[s._v("消息回复")]),s._v("给发送方确认消息正常通信.")]),s._v(" "),t("li",[t("strong",[s._v("fail 消息")]),s._v(": 当节点判定集群内另一个节点下线时, 会向集群内广播一个 fail 消息.")])]),s._v(" "),t("p",[s._v("所有的消息格式划分为: "),t("strong",[s._v("消息头和消息体")]),s._v(". 消息头包含发送节点自身状态数据, 接收节点根据消息头就可以获取到发送节点的相关数据.")]),s._v(" "),t("p",[s._v("集群内所有的消息都"),t("strong",[s._v("采用相同的消息头结构")]),s._v(" clusterMsg, 是一个"),t("strong",[s._v("结构体")]),s._v(".")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("union")]),s._v(" clusterMsgData "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/** ping,meet,pong消息体 */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/** gossip消息结构数组 */")]),s._v("\n        clusterMsgDataGossip gossip"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" ping"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/** FAIL消息体 */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        clusterMsgDataFail about"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" fail"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("p",[t("strong",[s._v("消息体")]),s._v(" clusterMsgData 定义发送消息的"),t("strong",[s._v("数据")]),s._v(". 通过消息头判断消息类型和状态, 通过消息体传送数据.")]),s._v(" "),t("h4",{attrs:{id:"集群伸缩🌟"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#集群伸缩🌟"}},[s._v("#")]),s._v(" 集群伸缩🌟")]),s._v(" "),t("p",[s._v("集群伸缩的原理可以抽象为"),t("strong",[s._v("槽和对应数据在不同节点之间的灵活移动")]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"_1-集群扩容"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-集群扩容"}},[s._v("#")]),s._v(" 1.集群扩容")]),s._v(" "),t("p",[t("strong",[s._v("集群扩容")]),s._v("即需要把当前的节点的"),t("strong",[s._v("槽和数据分一些给新的节点")]),s._v("(进行移动). 过程如下:")]),s._v(" "),t("ul",[t("li",[s._v("准备新节点.")]),s._v(" "),t("li",[s._v("加入集群.")]),s._v(" "),t("li",[s._v("迁移槽和数据.")]),s._v(" "),t("li",[s._v("添加从节点.")])]),s._v(" "),t("p",[s._v("新节点的配置建议和集群内的节点配置保持一致, 配置后启动新节点即可. 新节点采用 "),t("strong",[s._v("cluster meet 命令")]),s._v("加入到集群中. 一旦与集群任意一个建立联系, 各个节点最终都会感知. 但是新加入的节点"),t("strong",[s._v("没有分配槽")]),s._v("也是无法进行读写的.")]),s._v(" "),t("p",[s._v("需要迁移槽和数据. 确定哪些槽需要迁移到新的节点, 保证迁移之后各个节点槽的数量"),t("strong",[s._v("均匀")]),s._v(". 数据迁移是"),t("strong",[s._v("逐个槽")]),s._v("进行的.")]),s._v(" "),t("p",[s._v("迁移过程如下:")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("1. 对目标节点发送 cluster setslot {slot} importing {sourceNodeId} 命令, 让目标节点准备导入槽的数据. \n2. 对源节点发送 cluster setslot {slot} migrating {targetNodeId} 命令, 让源节点准备迁出槽的数据. \n3. 源节点循环执行 cluster getkeysinslot {slot} {count} 命令, 每次获取 count 个属于槽的键. \n4. 在源节点上执行 migrate {targetIp} {targetPort} key 0 {timeout} 命令把指定 key 迁移. \n5. 重复执行步骤 3-4 直到槽下所有的键数据迁移到目标节点. \n6. 向集群内所有主节点发送 cluster setslot {slot} node {targetNodeId} 命令, 通知槽分配给目标节点. \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("图示如下:")]),s._v(" "),t("p",[s._v("​"),t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220523230141253.png",alt:""}})]),s._v(" "),t("p",[s._v("可以使用 redis-trib 工具的 "),t("strong",[s._v("reshard")]),s._v(" 命令简化数据迁移的工作量. 由于槽用于 "),t("strong",[s._v("hash 运算")]),s._v("本身顺序没有意义, 所以"),t("strong",[s._v("无需强制要求节点负责槽的顺序性")]),s._v(", 也就是一个结点上槽不一定是连续的. 数据迁移完之后, 集群又多了一个主节点, 此时应该再给这个结点"),t("strong",[s._v("配备一个从节点")]),s._v(". 此时扩容完成.")]),s._v(" "),t("h5",{attrs:{id:"_2-集群收缩"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-集群收缩"}},[s._v("#")]),s._v(" 2.集群收缩")]),s._v(" "),t("p",[s._v("集群收缩即将集群中的节点"),t("strong",[s._v("安全下线")]),s._v(". 如果下线的结点分配有槽, 需要将槽和数据迁移到其他节点, 保证下线后数据完整性. 需要将这个下线节点的槽"),t("strong",[s._v("均匀分配到其他节点")]),s._v(". 也可以使用 "),t("strong",[s._v("reshard")]),s._v(" 命令进行迁移, reshard 迁移的目标节点只能有一个, 所以下图需要执行 3 次命令.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220527223057254.png",alt:""}})]),s._v(" "),t("p",[s._v("如果下线的结点没有负责槽或本身是从节点, 则可以通过 "),t("strong",[s._v("cluster forget {downNodeId}")]),s._v(" 通知集群内其他节点"),t("strong",[s._v("忘记")]),s._v("这个下线结点, 这样其他节点就不再与这个结点进行 Gossip 通信, 之后即可正常关闭.")]),s._v(" "),t("p",[s._v("如果下线主节点但"),t("strong",[s._v("不下线从节点")]),s._v(", 则需要把这个存留的从节点"),t("strong",[s._v("指向")]),s._v("其他节点. 如果主从节点"),t("strong",[s._v("都下线")]),s._v(", 建议先下线从节点再下线主节点, 防止不必要的"),t("strong",[s._v("全量复制")]),s._v(".")]),s._v(" "),t("h4",{attrs:{id:"请求路由🌟"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#请求路由🌟"}},[s._v("#")]),s._v(" 请求路由🌟")]),s._v(" "),t("p",[s._v("与客户端通信时, Redis 集群为了追求性能最大化, "),t("strong",[s._v("没有采用代理")]),s._v("的方式, 而是采用"),t("strong",[s._v("客户端直连节点")]),s._v("的方式进行.")]),s._v(" "),t("h5",{attrs:{id:"_1-请求重定向moved"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-请求重定向moved"}},[s._v("#")]),s._v(" 1.请求重定向MOVED")]),s._v(" "),t("p",[s._v("在集群模式下, "),t("strong",[s._v("Redis 接收任何键相关命令时首先计算键对应的槽, 再根据槽找出所对应的节点, 如果节点是自身(槽命中), 则处理键命令; 否则回复 MOVED 重定向错误, 告诉客户端请求正确的节点. 这个过程就是 MOVED 重定向.")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220527223213996.png",alt:""}})]),s._v(" "),t("p",[s._v("可以借助 "),t("strong",[s._v("cluster keyslot {key}")]),s._v(" 命令返回 key 对应的"),t("strong",[s._v("槽")]),s._v(".")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220527223250869.png",alt:""}})]),s._v(" "),t("p",[t("strong",[s._v("返回的重定向信息包含了键所对应的槽和负责该槽的节点地址. ​")]),s._v("​"),t("strong",[t("strong",[s._v("根据这些信息客户端可以")])]),s._v("​"),t("strong",[s._v("重新发起请求")]),s._v(". 注意: 集群中的节点对于不属于它的键操作"),t("strong",[s._v("只回复重定向响应, 不会进行命令转发")]),s._v(".")]),s._v(" "),t("p",[s._v("Redis 槽计算是根据"),t("strong",[s._v("键")]),s._v("的有效部分使用 "),t("strong",[s._v("CRC16 函数计算出散列值")]),s._v(", 然后对 16384 "),t("strong",[s._v("取模")]),s._v(", 可以得到"),t("strong",[s._v("映射的槽")]),s._v(". 计算出键对应的槽之后, 需要查找槽对应的节点. 集群内通过"),t("strong",[s._v("消息交换")]),s._v("每个节点都会知道"),t("strong",[s._v("所有节点的槽信息")]),s._v(", 内部"),t("strong",[s._v("保存")]),s._v("在 "),t("strong",[s._v("clusterState")]),s._v(" 结构中.")]),s._v(" "),t("p",[s._v("根据 MOVED 重定向机制, 客户端可以随机连接集群内"),t("strong",[s._v("任一节点")]),s._v("获取键的信息.")]),s._v(" "),t("h5",{attrs:{id:"_2-ask重定向"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-ask重定向"}},[s._v("#")]),s._v(" 2.ASK重定向")]),s._v(" "),t("p",[s._v("如果当键"),t("strong",[s._v("正在迁移")]),s._v("的时候集群收到对键的操作命令, 如果数据"),t("strong",[s._v("都在")]),s._v("原来的节点, 直接执行并返回. 然而此时可能一部分键在旧的节点上, 而"),t("strong",[s._v("另一部分数据已经迁移到新的节点")]),s._v("上, 这时候集群就会回复 "),t("strong",[s._v("ASK 重定向异常")]),s._v(". 客户端解析这个异常信息并再次发起请求.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220527223441500.png",alt:""}})]),s._v(" "),t("p",[s._v("执行流程如下:")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220527223519148.png",alt:""}})]),s._v(" "),t("p",[s._v("注意在集群下进行"),t("strong",[s._v("键迁移时")]),s._v("如果使用 "),t("strong",[s._v("mget, mset 等批量操作")]),s._v("时, slot 迁移数据期间由于键列表"),t("strong",[s._v("无法保证在同一结点")]),s._v(", 可能导致"),t("strong",[s._v("大量错误")]),s._v(". 虽然集群环境下优先使用 Pipeline 方式进行批量操作, 但是 Pipeline 依然无法解决上述问题. 所以迁移键的时候别进行批量操作!")]),s._v(" "),t("blockquote",[t("p",[s._v("ASK 重定向和 MOVED 重定向的区别?")])]),s._v(" "),t("p",[s._v("两者都是对客户端的重定向控制, 但是有本质区别.")]),s._v(" "),t("p",[t("strong",[s._v("ASK 重定")]),s._v(": 向说明集群正在"),t("strong",[s._v("进行 slot 数据迁移")]),s._v(", 客户端无法知道什么时候迁移完成, 因此只能"),t("strong",[s._v("临时性的重定向")]),s._v(", 客户端也"),t("strong",[s._v("不会更新 slots 缓存")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("MOVED 重定向")]),s._v(": 说明键对应的槽已经"),t("strong",[s._v("明确迁移到了")]),s._v("新的节点, 类似于"),t("strong",[s._v("永久重定向")]),s._v(", 客户端需要"),t("strong",[s._v("更新 slots 缓存")]),s._v(".")]),s._v(" "),t("h4",{attrs:{id:"故障转移🌟"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#故障转移🌟"}},[s._v("#")]),s._v(" 故障转移🌟")]),s._v(" "),t("p",[s._v("Redis 集群自身实现了高可用, "),t("strong",[s._v("不需要 Sentinel")]),s._v(", 但是机制类似于 Redis Sentinel.")]),s._v(" "),t("h5",{attrs:{id:"_1-故障发现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-故障发现"}},[s._v("#")]),s._v(" 1.故障发现")]),s._v(" "),t("p",[s._v("集群间通过 "),t("strong",[s._v("ping/pong")]),s._v(" 消息实现结点通信, 消息不但可以传播节点槽信息, 还能传播其他"),t("strong",[s._v("状态信息")]),s._v(", 比如: 主从状态, 节点故障等. 故障发现也是基于消息传播机制实现的, 也是分为"),t("strong",[s._v("主观下线和客观下线")]),s._v(". 节点的状态使用 "),t("strong",[s._v("clusterState")]),s._v(" 结构体的 "),t("strong",[s._v("flags 属性")]),s._v("进行定义.")]),s._v(" "),t("h6",{attrs:{id:"_1-主观下线"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-主观下线"}},[s._v("#")]),s._v(" (1)主观下线")]),s._v(" "),t("p",[s._v("集群中每个节点都会定期给其他节点发送 ping 消息, 接收节点回复 pong 进行响应. 如果响应超时, 则发送节点认为对方存在故障, 标记为"),t("strong",[s._v("主观下线状态")]),s._v("(pfail 状态). 主观下线是"),t("strong",[s._v("一个节点")]),s._v("对于另一个节点不可用的判断, 仅代表这一个节点的意见, 可能存在"),t("strong",[s._v("误判")]),s._v(".")]),s._v(" "),t("h6",{attrs:{id:"_2-客观下线"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-客观下线"}},[s._v("#")]),s._v(" (2)客观下线")]),s._v(" "),t("p",[s._v("当某个节点认为一个节点不可用时, 会得到主观下线的结论, 然后相应的节点状态会随消息在集群内传播. 客观下线则是需要"),t("strong",[s._v("多个")]),s._v("节点"),t("strong",[s._v("达成共识")]),s._v(", 都认为一个节点不可用. "),t("strong",[s._v("当半数以上持有槽的主节点都标记某个结点是主观下线时, 触发客观下线流程. ​")]),s._v("​"),t("strong",[t("strong",[s._v("注意只是")])]),s._v("​"),t("strong",[s._v("主节点")]),s._v("参与决策. 每个节点收到的其他节点发送的"),t("strong",[s._v("主观下线信息")]),s._v("是具有"),t("strong",[s._v("有效期")]),s._v("的, 如果时间过长, 主观下线信息会过期.")]),s._v(" "),t("p",[s._v("集群中的节点"),t("strong",[s._v("每次")]),s._v("收到其他节点的主观下线状态信息时, "),t("strong",[s._v("都会尝试触发客观下线")]),s._v(". 首先会计算有效的主观下线报告数量, 如果数量大于槽节点的"),t("strong",[s._v("一半")]),s._v(", 则更新为"),t("strong",[s._v("客观下线")]),s._v(", 同时向集群广播下线节点的 fail 消息.")]),s._v(" "),t("p",[s._v("广播下线节点的 fail 消息可以通知集群内所有的节点"),t("strong",[s._v("标记故障节点为客观下线状态")]),s._v("并立即生效, 同时通知故障节点的"),t("strong",[s._v("从节点触发故障转移流程")]),s._v("(如果故障的就是从节点就不需要了). 如果不可用的节点持有槽, 则需要进行"),t("strong",[s._v("故障转移")]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"_2-故障转移与恢复"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-故障转移与恢复"}},[s._v("#")]),s._v(" 2.故障转移与恢复")]),s._v(" "),t("p",[s._v("故障节点客观下线后, 如果是持有槽的"),t("strong",[s._v("主节点")]),s._v(", "),t("strong",[s._v("则需要在它的从节点中选出一个替换它")]),s._v(", 实现集群的高可用.")]),s._v(" "),t("p",[s._v("过程如下:")]),s._v(" "),t("p",[t("strong",[s._v("(1) 资格检查. ​")]),s._v("​"),t("strong",[t("strong",[s._v("每个从节点")])]),s._v("​"),t("strong",[s._v("都要")]),s._v("检查最后与主节点直接的短线时间, 如果过长则不具有资格. 可能存在多个有资格成为主节点的从节点.")]),s._v(" "),t("p",[t("strong",[s._v("(2) 设置选举时间. ​")]),s._v("​"),t("strong",[t("strong",[s._v("每个从节点都会触发选举来选择")])]),s._v("​"),t("strong",[s._v("自己作为主节点")]),s._v(". 但是选谁? 当从节点符合故障转移资格后, "),t("strong",[s._v("更新")]),s._v("触发故障选举的时间, 只有达到时间后才能触发选举. 每个"),t("strong",[s._v("从节点进行选举的时间是不一样")]),s._v("的, 这个触发时间记录在 clusterState 结构体中. 这里采用"),t("strong",[s._v("延迟触发机制")]),s._v(". "),t("strong",[s._v("复制偏移量越大的从节点的触发选举的时间越早, 因为它的数据完整性最高.")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220527223721040.png",alt:""}})]),s._v(" "),t("p",[s._v("所以从节点中"),t("strong",[s._v("复制偏移量最大")]),s._v("的节点将"),t("strong",[s._v("提前触发选举")]),s._v(", 它成为主节点的几率也"),t("strong",[s._v("更大")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("(3) 发起选举")]),s._v(". 当从节点定时任务监测到达故障选举时间到达之后, 发起选举流程, 即更新配置纪元和广播选举消息.")]),s._v(" "),t("p",[t("strong",[s._v("(4) 选举投票")]),s._v(". 持有槽的主节点才会处理选举消息, 每个节点具有"),t("strong",[s._v("一票")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("(5) 替换主节点")]),s._v(". 选举成功的从节点触发替换主节点操作. 当前从节点取消复制变成主节点. 之后自己接管原来主节点负责的槽. 然后向集群"),t("strong",[s._v("广播")]),s._v("自己成为主节点的状态信息.")]),s._v(" "),t("p",[s._v("整个故障转移过程也会产生大量的日志, 可以模拟一下故障场景, 好好看看日志.")]),s._v(" "),t("h4",{attrs:{id:"集群运维"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#集群运维"}},[s._v("#")]),s._v(" 集群运维")]),s._v(" "),t("h5",{attrs:{id:"_1-带宽消耗问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-带宽消耗问题"}},[s._v("#")]),s._v(" 1.带宽消耗问题")]),s._v(" "),t("p",[s._v("集群的带宽消耗主要为: "),t("strong",[s._v("读写命令消耗 + Gossip 消息消耗")]),s._v(". Gossip 消息"),t("strong",[s._v("别太频繁")]),s._v(", 不然可能占用较多带宽.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220527223759299.png",alt:""}})]),s._v(" "),t("p",[s._v("官方建议集群最大规模不要超过 1000.")]),s._v(" "),t("h5",{attrs:{id:"_2-集群倾斜问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-集群倾斜问题"}},[s._v("#")]),s._v(" 2.集群倾斜问题")]),s._v(" "),t("h6",{attrs:{id:"_1-数据倾斜"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-数据倾斜"}},[s._v("#")]),s._v(" (1)数据倾斜")]),s._v(" "),t("p",[s._v("主要有几种:")]),s._v(" "),t("ul",[t("li",[s._v("节点和槽分配严重不均匀. 可以使用 "),t("strong",[s._v("redis-trib.rb 工具的 rebalance")]),s._v(" 命令进行平衡.")]),s._v(" "),t("li",[s._v("不同槽对应键数量差异过大. 主要是发现键多的槽")]),s._v(" "),t("li",[s._v("集合对象包含大量元素. 使用 redis-cli --bigkeys 找出大集合对象, 然后可以考虑分解.")]),s._v(" "),t("li",[s._v("内存相关配置不一致.")])]),s._v(" "),t("h6",{attrs:{id:"_2-请求倾斜"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-请求倾斜"}},[s._v("#")]),s._v(" (2)请求倾斜")]),s._v(" "),t("p",[s._v("对特点的节点请求过多, 造成负载不均衡.")]),s._v(" "),t("ul",[t("li",[s._v("合理设计键, 让请求均匀.")]),s._v(" "),t("li",[s._v("对热点的大集合对象进行拆分, 避免都请求到一个节点.")]),s._v(" "),t("li",[s._v("对于一致性要求不高的场合可以使用本地缓存减少热键调用.")])]),s._v(" "),t("h5",{attrs:{id:"_3-集群读写分离"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-集群读写分离"}},[s._v("#")]),s._v(" 3.集群读写分离")]),s._v(" "),t("p",[s._v("集群模式下的读写分离成本比较高, 可以直接"),t("strong",[s._v("拓展主节点")]),s._v("的数量来提高集群性能, 一般"),t("strong",[s._v("不建议")]),s._v("集群模式下做读写分离.")]),s._v(" "),t("p",[s._v("‍")]),s._v(" "),t("h4",{attrs:{id:"参考资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[s._v("#")]),s._v(" 参考资料")]),s._v(" "),t("ul",[t("li",[s._v("《Redis开发与运维》")])])])}),[],!1,null,null,null);t.default=e.exports}}]);