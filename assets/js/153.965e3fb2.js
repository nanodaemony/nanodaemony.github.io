(window.webpackJsonp=window.webpackJsonp||[]).push([[153],{464:function(s,t,a){"use strict";a.r(t);var n=a(7),r=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"_10-缓存基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-缓存基础"}},[s._v("#")]),s._v(" 10.缓存基础")]),s._v(" "),t("h4",{attrs:{id:"缓存基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存基础"}},[s._v("#")]),s._v(" 缓存基础")]),s._v(" "),t("h5",{attrs:{id:"_1-概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述"}},[s._v("#")]),s._v(" 1.概述")]),s._v(" "),t("blockquote",[t("p",[s._v("缓存能够提高性能的原因")])]),s._v(" "),t("ul",[t("li",[s._v("缓存数据通常位于"),t("strong",[s._v("内存等介质")]),s._v("中, 数据"),t("strong",[s._v("读取")]),s._v("特别快.")]),s._v(" "),t("li",[s._v("缓存数据可以位于"),t("strong",[s._v("靠近用户的地理位置")]),s._v("上.")]),s._v(" "),t("li",[s._v("可以将计算结果进行缓存, 从而"),t("strong",[s._v("避免重复计算")]),s._v(".")])]),s._v(" "),t("h5",{attrs:{id:"_2-基本概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-基本概念"}},[s._v("#")]),s._v(" 2.基本概念")]),s._v(" "),t("p",[t("strong",[s._v("缓存命中率")]),s._v(": 当某个请求能够通过访问缓存而得到响应时, 称为"),t("strong",[s._v("缓存命中")]),s._v(". 缓存命中率越高, 缓存利用率也就越高.")]),s._v(" "),t("p",[t("strong",[s._v("最大空间")]),s._v(": 缓存通常位于内存中, 内存空间通常比磁盘空间小的多, 因此缓存的最大空间不可能非常大. 当缓存存放的数据量"),t("strong",[s._v("超过最大空间")]),s._v("时, 就需要"),t("strong",[s._v("淘汰")]),s._v("部分数据来存放新的数据.")]),s._v(" "),t("h4",{attrs:{id:"缓存实现与缓存位置🌟"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存实现与缓存位置🌟"}},[s._v("#")]),s._v(" 缓存实现与缓存位置🌟")]),s._v(" "),t("h5",{attrs:{id:"_1-浏览器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-浏览器"}},[s._v("#")]),s._v(" 1.浏览器")]),s._v(" "),t("p",[s._v("当 HTTP 响应"),t("strong",[s._v("允许")]),s._v("进行缓存时, 浏览器会将 HTML, CSS, JavaScript, 图片等"),t("strong",[s._v("静态")]),s._v("资源进行缓存.")]),s._v(" "),t("h5",{attrs:{id:"_2-isp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-isp"}},[s._v("#")]),s._v(" 2.ISP")]),s._v(" "),t("p",[t("strong",[s._v("网络服务提供商")]),s._v("(ISP) 是网络访问的"),t("strong",[s._v("第一跳")]),s._v(", 通过将"),t("strong",[s._v("数据缓存在 ISP 中")]),s._v("能够大大提高用户的"),t("strong",[s._v("访问速度")]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"_3-cdn"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-cdn"}},[s._v("#")]),s._v(" 3.CDN")]),s._v(" "),t("p",[t("strong",[s._v("内容分发网络")]),s._v("(Content distribution network, CDN) 是一种"),t("strong",[s._v("互连的网络系统")]),s._v(", 它利用"),t("strong",[s._v("更靠近用户的服务器")]),s._v("从而更快更可靠地将 HTML, CSS, JavaScript, 音乐, 图片, 视频等"),t("strong",[s._v("静态资源分发给用户")]),s._v(".")]),s._v(" "),t("p",[s._v("CDN 主要有以下优点:")]),s._v(" "),t("ul",[t("li",[s._v("更快地将数据分发给用户.")]),s._v(" "),t("li",[s._v("通过部署多台服务器, 从而提高系统整体的带宽性能.")]),s._v(" "),t("li",[s._v("多台服务器可以看成是一种"),t("strong",[s._v("冗余机制")]),s._v(", 从而具有高可用性.")])]),s._v(" "),t("h5",{attrs:{id:"_4-反向代理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-反向代理"}},[s._v("#")]),s._v(" 4.反向代理")]),s._v(" "),t("p",[s._v("反向代理位于服务器之前, 请求与响应都需要经过反向代理. 通过将"),t("strong",[s._v("数据缓存在反向代理")]),s._v(", 在用户请求反向代理时就可以直接使用缓存进行响应.")]),s._v(" "),t("h5",{attrs:{id:"_5-本地缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-本地缓存"}},[s._v("#")]),s._v(" 5.本地缓存")]),s._v(" "),t("p",[s._v("使用 "),t("strong",[s._v("Guava Cache")]),s._v(" 将数据缓存在"),t("strong",[s._v("服务器本地内存")]),s._v("中, 服务器代码可以直接读取本地内存中的缓存, 速度非常快.")]),s._v(" "),t("p",[s._v("缓存分为"),t("strong",[s._v("本地缓存和分布式缓存")]),s._v(". Java "),t("strong",[s._v("自带的 ConcurrentHashMap 或 Guava")]),s._v(" 实现的是本地缓存, 最主要的特点是轻量以及快速, "),t("strong",[s._v("生命周期")]),s._v("随着 JVM 的销毁而结束, 并且在多实例的情况下, "),t("strong",[s._v("每个实例都需要各自保存一份缓存")]),s._v(", 多个机器"),t("strong",[s._v("缓存不具有一致性")]),s._v(". 通常用于保存变化较少的数据.")]),s._v(" "),t("h5",{attrs:{id:"_6-分布式缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-分布式缓存"}},[s._v("#")]),s._v(" 6.分布式缓存")]),s._v(" "),t("p",[s._v("使用 Redis, Memcache 等"),t("strong",[s._v("分布式缓存")]),s._v("将数据缓存在分布式缓存系统中. 相对于本地缓存来说, 分布式缓存需单独部署, 可以根据需求分配硬件资源. "),t("strong",[s._v("服务器集群都可以访问分布式缓存")]),s._v(", 而本地缓存需要在服务器集群之间进行同步, 实现难度和性能开销上都更大.")]),s._v(" "),t("p",[s._v("在多实例情况下, 各实例共用一份缓存数据, "),t("strong",[s._v("缓存数据具有一致性")]),s._v(". 由于需要保证 Redis 服务的"),t("strong",[s._v("高可用")]),s._v(", 整个程序架构上较为复杂.")]),s._v(" "),t("h5",{attrs:{id:"_7-数据库缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-数据库缓存"}},[s._v("#")]),s._v(" 7.数据库缓存")]),s._v(" "),t("p",[s._v("MySQL 等数据库具有自己的"),t("strong",[s._v("查询缓存机制")]),s._v("来提高查询效率.")]),s._v(" "),t("h5",{attrs:{id:"_8-java内部缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-java内部缓存"}},[s._v("#")]),s._v(" 8.Java内部缓存")]),s._v(" "),t("p",[s._v("Java 为了优化空间, 提高字符串, 基本数据类型包装类的创建效率, 设计了字符串常量池及 Byte, Short, Character, Integer, Long, Boolean 这六种包装类"),t("strong",[s._v("缓冲池")]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"_9-cpu多级缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-cpu多级缓存"}},[s._v("#")]),s._v(" 9.CPU多级缓存")]),s._v(" "),t("p",[s._v("CPU 为了解决运算速度与"),t("strong",[s._v("主存 IO 速度不匹配")]),s._v("的问题, 引入了"),t("strong",[s._v("多级缓存")]),s._v("结构, 同时使用 MESI 等缓存一致性协议来"),t("strong",[s._v("解决多核 CPU 缓存数据一致性的问题")]),s._v(".")]),s._v(" "),t("h4",{attrs:{id:"缓存淘汰-更新-策略🌟"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存淘汰-更新-策略🌟"}},[s._v("#")]),s._v(" 缓存淘汰(更新)策略🌟")]),s._v(" "),t("p",[s._v("缓存淘汰算法通常用于缓存使用量"),t("strong",[s._v("超过了预设最大值")]),s._v("的时候, 实现对现有数据进行剔除.")]),s._v(" "),t("h6",{attrs:{id:"_1-fifo-lru-lfu算法剔除"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-fifo-lru-lfu算法剔除"}},[s._v("#")]),s._v(" (1)FIFO/LRU/LFU算法剔除")]),s._v(" "),t("p",[t("strong",[s._v("先进先出策略")]),s._v(" FIFO(First In First Out): 在实时性场景下, 需要经常访问最新的数据, 那么就可以使用 FIFO, 使得最先进入的数据被淘汰.")]),s._v(" "),t("p",[t("strong",[s._v("最近最久未使用策略")]),s._v(" LRU(Least Recently Used): 优先淘汰"),t("strong",[s._v("最久未使用")]),s._v("的数据, 也就是上次"),t("strong",[s._v("被访问时间距离现在最久")]),s._v("的数据. 该策略可以保证内存中的数据都是热点数据, 也就是经常被访问的数据, 从而保证缓存命中率.")]),s._v(" "),t("p",[t("strong",[s._v("最不经常使用策略")]),s._v(" LFU(Least Frequently Used): 优先淘汰一段时间内使用"),t("strong",[s._v("次数最少")]),s._v("的数据.")]),s._v(" "),t("h6",{attrs:{id:"_2-超时剔除"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-超时剔除"}},[s._v("#")]),s._v(" (2)超时剔除")]),s._v(" "),t("p",[s._v("通过给缓存数据"),t("strong",[s._v("设置超时时间")]),s._v(", 让其在过期时间后"),t("strong",[s._v("自动删除")]),s._v(", 如 Redis 提供的 "),t("strong",[s._v("expire")]),s._v(" 命令.")]),s._v(" "),t("h6",{attrs:{id:"_3-主动更新"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-主动更新"}},[s._v("#")]),s._v(" (3)主动更新")]),s._v(" "),t("p",[s._v("对于"),t("strong",[s._v("高一致性要求")]),s._v("场景下, 需要在真实数据更新后, "),t("strong",[s._v("立即")]),s._v("更新缓存数据.")]),s._v(" "),t("h4",{attrs:{id:"缓存问题🌟"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存问题🌟"}},[s._v("#")]),s._v(" 缓存问题🌟")]),s._v(" "),t("p",[t("strong",[s._v("缓存")]),s._v("也可能存在一些问题.")]),s._v(" "),t("h5",{attrs:{id:"_1-缓存穿透"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-缓存穿透"}},[s._v("#")]),s._v(" 1.缓存穿透")]),s._v(" "),t("h6",{attrs:{id:"_1-概述-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述-2"}},[s._v("#")]),s._v(" (1)概述")]),s._v(" "),t("p",[s._v("缓存穿透指的是"),t("strong",[s._v("对某个缓存中一定不存在的数据进行请求, 该请求将会穿透缓存到达数据库")]),s._v(". 举个例子: 某个黑客故意制造缓存中"),t("strong",[s._v("不存在的 key")]),s._v(" 发起"),t("strong",[s._v("大量请求")]),s._v(", 导致大量请求落到数据库.")]),s._v(" "),t("p",[s._v("正常缓存处理流程:")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20211218174357591.png",alt:""}})]),s._v(" "),t("p",[s._v("缓存穿透情况:")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20211218174250613.png",alt:""}})]),s._v(" "),t("p",[s._v("一般 MySQL 默认的最大连接数在 150 左右, 这个可以通过 "),t("strong",[s._v("show variables like '%max_connections%';")]),s._v("  命令来查看. 最大连接数一个还只是一个指标, CPU, 内存, 磁盘, 网络等无力条件都是其运行指标, 这些指标都会限制其并发能力! 所以一般 3000 个并发请求就能打死大部分数据库了.")]),s._v(" "),t("h6",{attrs:{id:"_2-解决方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-解决方案"}},[s._v("#")]),s._v(" (2)解决方案")]),s._v(" "),t("p",[s._v("首先可以在"),t("strong",[s._v("应用层")]),s._v("记录一下"),t("strong",[s._v("缓存穿透的次数")]),s._v(", 方便问题查找与预警.")]),s._v(" "),t("blockquote",[t("p",[s._v("参数校验")])]),s._v(" "),t("p",[t("strong",[s._v("最基本")]),s._v("的就是首先"),t("strong",[s._v("做好参数校验")]),s._v(", 一些不合法的参数请求直接"),t("strong",[s._v("抛出异常信息")]),s._v("返回给客户端. 比如查询的"),t("strong",[s._v("数据库 id 不能小于")]),s._v(" 0, 传入的邮箱"),t("strong",[s._v("格式不对")]),s._v("的时候直接返回错误消息给客户端等等.")]),s._v(" "),t("blockquote",[t("p",[s._v("缓存无效key")])]),s._v(" "),t("p",[s._v("如果缓存和数据库"),t("strong",[s._v("都查不到")]),s._v("某个 key 的数据就"),t("strong",[s._v("写一个")]),s._v("这个键的"),t("strong",[s._v("空对象")]),s._v("到 Redis 中去并"),t("strong",[s._v("设置过期时间")]),s._v(", 具体命令如下:")]),s._v(" "),t("div",{staticClass:"language-mysql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("SET key value EX 10086\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("这种方式可以解决请求的 "),t("strong",[s._v("key 变化不频繁")]),s._v("的情况, 但如果黑客恶意攻击, 每次构建不同的请求 key, 会导致 Redis 中缓存大量无效的 key. 很明显这种方案并不能从根本上解决此问题. 如果用这种方式来解决穿透问题的话, "),t("strong",[s._v("尽量将无效")]),s._v("的 key 的过期时间设置"),t("strong",[s._v("短一点")]),s._v("比如 1 分钟.")]),s._v(" "),t("p",[s._v("整体流程大致如下:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getObjectInclNullById")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 从缓存中获取数据")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" cacheValue "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" cache"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 缓存为空")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cacheValue "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 从数据库中获取")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" storageValue "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" storage"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 缓存空对象")]),s._v("\n        cache"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("set")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" storageValue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果存储数据为空, 需要设置一个较短的过期时间(300秒)")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("storageValue "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 必须设置过期时间, 否则如果键变化较大可能造成Redis内存不够用")]),s._v("\n            cache"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("expire")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("60")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" storageValue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" cacheValue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br")])]),t("blockquote",[t("p",[s._v("使用布隆过滤器")])]),s._v(" "),t("p",[s._v("需要做的就是"),t("strong",[s._v("判断 key 是否合法")]),s._v(". "),t("strong",[s._v("事先")]),s._v("把所有"),t("strong",[s._v("可能存在的请求的值都存放在布隆过滤器")]),s._v("中, 当用户请求过来, 先判断"),t("strong",[s._v("请求的值是否存在于布隆过滤器")]),s._v("中. "),t("strong",[s._v("不存在")]),s._v("则直接返回"),t("strong",[s._v("请求参数错误")]),s._v("信息给客户端, 存在时才会走下面的流程. 布隆过滤器在缓存层"),t("strong",[s._v("之前")]),s._v(". 如下图所示.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20211218174647325.png",alt:""}})]),s._v(" "),t("p",[s._v("这种方法适用于数据"),t("strong",[s._v("命中率不高, 数据相对固定")]),s._v(", 实时性低(通常是"),t("strong",[s._v("数据集较大")]),s._v(") 的场景.")]),s._v(" "),t("p",[s._v("使用 BloomFilter 布隆过滤器的话, 需要"),t("strong",[s._v("提前将已存在的 KEY 始化存储")]),s._v("到 BloomFilter 缓存中. 整个逻辑如下: 根据 KEY 查询 BloomFilter 缓存. 如果"),t("strong",[s._v("不存在对应的值, 直接返回")]),s._v("; 如果存在就说明是大概率是系统预先存入的键, 这时候就可以去 Redis 中查询是否存在缓存. 如果存在缓存值, 直接返回; 如果不存在则继续到数据库去查数据. 找到的数据可以再次存储到 Redis 中, 并且可以"),t("strong",[s._v("更新 BloomFilter")]),s._v(" 缓存记录.")]),s._v(" "),t("p",[s._v("BloomFilter 的实现参考: 实现布隆过滤器.")]),s._v(" "),t("h5",{attrs:{id:"_2-缓存雪崩"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-缓存雪崩"}},[s._v("#")]),s._v(" 2.缓存雪崩")]),s._v(" "),t("h6",{attrs:{id:"_1-概述-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述-3"}},[s._v("#")]),s._v(" (1)概述")]),s._v(" "),t("p",[s._v("缓存雪崩"),t("strong",[s._v("指由于数据没有被加载到缓存中, 或缓存数据在同一时间大面积过期失效, 或缓存服务器宕机等, 导致大量请求同时打到数据库, 造成数据库压力过大")]),s._v(". 在系统缓存命中率较高时, 缓存分担了很大一部分数据请求. 当发生缓存雪崩时, 数据库无法处理这么大的请求, 导致数据库崩溃. 就像"),t("strong",[s._v("雪崩")]),s._v("一样.")]),s._v(" "),t("h6",{attrs:{id:"_2-解决方案-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-解决方案-2"}},[s._v("#")]),s._v(" (2)解决方案")]),s._v(" "),t("ul",[t("li",[s._v("为了防止缓存在同一时间大面积过期导致的缓存雪崩, 可以通过"),t("strong",[s._v("观察用户行为")]),s._v(", 合理设置"),t("strong",[s._v("缓存过期时间")]),s._v(". 热点数据设置永不过期, 一般数据错开过期时间, 比如设置"),t("strong",[s._v("随机过期值")]),s._v("而不是全部一样.")]),s._v(" "),t("li",[s._v("为了防止缓存服务器宕机出现的缓存雪崩, 可以使用"),t("strong",[s._v("分布式缓存")]),s._v(", 保证"),t("strong",[s._v("缓冲层的高可用")]),s._v(". 分布式缓存中每一个节点只缓存部分的数据, 当某个节点宕机时可以保证其它节点的缓存仍然可用, 实现"),t("strong",[s._v("高可用")]),s._v(".")]),s._v(" "),t("li",[s._v("可以进行"),t("strong",[s._v("缓存预热")]),s._v(", "),t("strong",[s._v("提前放一些数据到缓存中")]),s._v(", 避免在系统刚启动不久由于还未将大量数据进行缓存而导致缓存雪崩.")]),s._v(" "),t("li",[t("strong",[s._v("依赖隔离组件为后端限流并降级")]),s._v(". 可以考虑进行"),t("strong",[s._v("服务降级")]),s._v(", 并对重要的资源进行"),t("strong",[s._v("隔离")]),s._v(".")])]),s._v(" "),t("p",[s._v("另一种说法:")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("事前")]),s._v(": 尽量保证整个 Redis 集群的"),t("strong",[s._v("高可用性")]),s._v(", 发现机器宕机尽快补上. 选择合适的"),t("strong",[s._v("内存淘汰策略")]),s._v(".")]),s._v(" "),t("li",[t("strong",[s._v("事中")]),s._v(": "),t("strong",[s._v("本地缓存")]),s._v(" + "),t("strong",[s._v("限流与降级")]),s._v(", 避免 MySQL 崩掉.")]),s._v(" "),t("li",[t("strong",[s._v("事后")]),s._v(": 利用 Redis "),t("strong",[s._v("持久化")]),s._v("机制保存的数据"),t("strong",[s._v("尽快恢复缓存")]),s._v(".")])]),s._v(" "),t("h5",{attrs:{id:"_3-缓存一致性问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-缓存一致性问题"}},[s._v("#")]),s._v(" 3.缓存一致性问题")]),s._v(" "),t("h6",{attrs:{id:"_1-概述-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述-4"}},[s._v("#")]),s._v(" (1)概述")]),s._v(" "),t("p",[t("strong",[s._v("由于数据更新, 可能导致缓存层和存储层的数据不一致")]),s._v(". 缓存一致性要求数据"),t("strong",[s._v("更新的同时缓存数据也能够实时更新")]),s._v(".")]),s._v(" "),t("p",[s._v("更新 DB 和操作缓存两个动作之间, 明显"),t("strong",[s._v("缺乏原子性")]),s._v(", 有可能更新 DB 完成, 但是操作缓存失败(淘汰或者更新), 反之亦然. 所以两者之间必然是存在断层的.")]),s._v(" "),t("h6",{attrs:{id:"_2-解决方案-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-解决方案-3"}},[s._v("#")]),s._v(" (2)解决方案")]),s._v(" "),t("p",[t("strong",[s._v("可以考虑先更新数据库, 再删除缓存")]),s._v(". 如果采用先淘汰缓存, 后更新 DB 操作, 如果在 DB 更新完成之前, 来了一个新的读请求, 那么就会查询出数据库的旧数据, 缓存到 Redis, 导致 DB 更新完成之后, 两者数据不一致. 如果先更新 DB, 然后操作缓存失败, 客户端读取到的是旧的数据, 此时也是存在 DB 与缓存不一致. 但是实际业务上, 更多"),t("strong",[s._v("还是以 DB 数据为准")]),s._v(", 这种读取到旧数据的业务影响可能比读取到为未更新到 DB 的数据影响要小. 使用缓存本身就能容忍有一定的脏数据出现.")]),s._v(" "),t("p",[s._v("要保证缓存一致性需要付出很大的代价, "),t("mark",[t("strong",[s._v("缓存数据最好是那些对一致性要求不高的数据, 允许缓存数据存在一些脏数据")])]),s._v(".")]),s._v(" "),t("h5",{attrs:{id:"_4-缓存无底洞"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-缓存无底洞"}},[s._v("#")]),s._v(" 4.缓存无底洞")]),s._v(" "),t("h6",{attrs:{id:"_1-概述-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述-5"}},[s._v("#")]),s._v(" (1)概述")]),s._v(" "),t("p",[s._v('缓存 "无底洞" 指的是为了满足业务要求'),t("strong",[s._v("添加了大量缓存节点")]),s._v(", 但是"),t("strong",[s._v("性能不但没有好转反而下降")]),s._v("了的现象.")]),s._v(" "),t("p",[t("strong",[s._v("产生原因")]),s._v(": 缓存系统通常"),t("strong",[s._v("采用 hash 函数将 key 映射到对应的缓存节点")]),s._v(", 随着缓存节点数目的增加, "),t("strong",[s._v("键值分布到更多的节点上")]),s._v(", 导致客户端一次批量操作会涉及"),t("strong",[s._v("多次网络操作")]),s._v(", 这意味着批量操作的"),t("strong",[s._v("耗时会随着节点数目的增加而不断增大")]),s._v(". 此外, 网络连接数变多, 对节点的性能也有一定影响.")]),s._v(" "),t("h6",{attrs:{id:"_2-解决方案-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-解决方案-4"}},[s._v("#")]),s._v(" (2)解决方案")]),s._v(" "),t("ul",[t("li",[s._v("优化"),t("strong",[s._v("批量数据")]),s._v("操作命令.")]),s._v(" "),t("li",[s._v("减少网络通信"),t("strong",[s._v("次数")]),s._v(".")]),s._v(" "),t("li",[s._v("降低"),t("strong",[s._v("接入成本")]),s._v(", 使用长连接, 连接池, "),t("strong",[s._v("NIO")]),s._v(" 等.")])]),s._v(" "),t("p",[t("strong",[s._v("分布式")]),s._v("条件下, 以 Redis 的 "),t("strong",[s._v("mget")]),s._v(" 指令为例, 有"),t("strong",[s._v("四种批量操作的解决方案")]),s._v(".")]),s._v(" "),t("ul",[t("li",[s._v("串行命令. 逐次执行 n 个 get 命令.")]),s._v(" "),t("li",[s._v('串行 IO. 在客户端缓存"'),t("strong",[s._v("键-槽-节点")]),s._v('"的对应关系, 在同一个节点的数据使用 Pipeline 请求完成.')]),s._v(" "),t("li",[s._v("并行 IO. 使用多线程方式进行串行 IO.")]),s._v(" "),t("li",[s._v("hash_tag 实现. Redis cluster 的 hash_tag 功能可以将多个 key 强制分配到一个节点上, 减少操作.")])]),s._v(" "),t("h4",{attrs:{id:"数据分布方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据分布方式"}},[s._v("#")]),s._v(" 数据分布方式")]),s._v(" "),t("p",[s._v("分布式数据库首先要解决把"),t("strong",[s._v("整个数据集")]),s._v("按照分区规则"),t("strong",[s._v("映射到多个节点")]),s._v("的问题, 即把数据集划分到多个节点上, 每个"),t("strong",[s._v("节点")]),s._v("负责整体数据的一个"),t("strong",[s._v("子集")]),s._v(". 数据分区是"),t("strong",[s._v("分布式存储的核心")]),s._v(".")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20220523215154473.png",alt:""}})]),s._v(" "),t("p",[s._v("需要重点关注的是"),t("strong",[s._v("数据分区方案")]),s._v(". 常见的分区规则有"),t("strong",[s._v("哈希分区和顺序分区")]),s._v("两种.")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("顺序分区")]),s._v(": 离散度易倾斜, 数据分布业务相关, 可顺序访问. 代表产品: "),t("strong",[s._v("HBase")]),s._v(", Bigtable.")]),s._v(" "),t("li",[t("strong",[s._v("哈希分区")]),s._v(": 离散度好, 数据分布业务无关, 无法顺序访问. 代表产品: "),t("strong",[s._v("Redis Cluster")]),s._v(", Dynamo, Cassandra.")])]),s._v(" "),t("h5",{attrs:{id:"_1-顺序分布"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-顺序分布"}},[s._v("#")]),s._v(" 1.顺序分布")]),s._v(" "),t("p",[s._v("将数据划分为"),t("strong",[s._v("多个连续")]),s._v("的部分, 按数据的 ID 或者时间分布到不同节点上. 例如 User 表的 ID 范围为 1 ~ 7000, 使用顺序分布可以将其划分成多个子表, 对应的主键范围为 1 ~ 1000, 1001 ~ 2000, ..., 6001 ~ 7000.")]),s._v(" "),t("p",[s._v("顺序分布相比于哈希分布的主要优点如下:")]),s._v(" "),t("ul",[t("li",[s._v("能保持数据原有的"),t("strong",[s._v("顺序")]),s._v(".")]),s._v(" "),t("li",[s._v("能够准确控制每台服务器存储的数据量, 从而使得存储空间的利用率最大.")])]),s._v(" "),t("h5",{attrs:{id:"_2-哈希分布"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-哈希分布"}},[s._v("#")]),s._v(" 2.哈希分布")]),s._v(" "),t("p",[t("strong",[s._v("哈希分布")]),s._v("就是将数据计算哈希值之后, 按照"),t("strong",[s._v("哈希值")]),s._v("映射结果分配到不同的节点上. 例如有 N 个节点, 数据的主键为 key, 则将该数据分配的节点序号为: "),t("strong",[s._v("hash(key) % N")]),s._v(".")]),s._v(" "),t("blockquote",[t("p",[s._v("普通哈希分布的问题")])]),s._v(" "),t("p",[s._v("传统的哈希分布算法存在一个问题: 当节点数量变化时, 如"),t("strong",[s._v("扩容或收缩节点")]),s._v(", 数据节点映射关系都需要"),t("strong",[s._v("重新计算再哈希")]),s._v(", 会导致数据的大量"),t("strong",[s._v("重新迁移")]),s._v(". 所以扩容时通常采用"),t("strong",[s._v("翻倍扩容")]),s._v(", 避免数据映射全部被打乱导致全量迁移的情况.")]),s._v(" "),t("h5",{attrs:{id:"_3-一致性哈希分布🌟"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-一致性哈希分布🌟"}},[s._v("#")]),s._v(" 3.一致性哈希分布🌟")]),s._v(" "),t("p",[t("strong",[s._v("Distributed Hash Table")]),s._v("(DHT) 是一种"),t("strong",[s._v("哈希分布方式")]),s._v(", 可以解决传统哈希分布在服务器节点数量变化再哈希时"),t("strong",[s._v("大量数据迁移")]),s._v("的问题.")]),s._v(" "),t("h6",{attrs:{id:"_1-基本原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-基本原理"}},[s._v("#")]),s._v(" (1)基本原理")]),s._v(" "),t("p",[t("strong",[s._v("一致性哈希分区")]),s._v("(Distributed Hash Table)实现思路是为系统中"),t("strong",[s._v("每个节点分配一个 token")]),s._v(", 范围一般在 "),t("code",[s._v("0 ~ 2^32")]),s._v("​, 这些 token 构成一个"),t("strong",[s._v("哈希环")]),s._v(". 每个服务器"),t("strong",[s._v("节点都会被配置到哈希环")]),s._v("上.")]),s._v(" "),t("p",[s._v("数据读写执行节点查找操作时, 先根据 key 计算 hash 值, "),t("strong",[s._v("存放到哈希环中顺时针方向第一个大于等于该哈希值 token 的节点上")]),s._v(".")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://nano-note.oss-cn-beijing.aliyuncs.com/images/image-20200527211945450.png",alt:"image-20200527211945450"}})]),s._v(" "),t("p",[s._v("一致性哈希分区将"),t("strong",[s._v("增加或者删除节点时只会影响到哈希环中相邻的节点")]),s._v(". 以上图为例, 如果在 node1 和 node2 之间增加 node5, 则只有 node2 中的一部分数据会迁移到 node5; 如果去掉 node2, 则原 node2 中的数据只会迁移到 node4 中, 只有 node4 会受影响.")]),s._v(" "),t("blockquote",[t("p",[s._v("一致性哈希分布的问题")])]),s._v(" "),t("p",[s._v("上面描述的一致性哈希依然可能存在数据"),t("strong",[s._v("分布不均匀")]),s._v("的问题, 不同节点存储的"),t("strong",[s._v("数据量")]),s._v("有可能会存在"),t("strong",[s._v("很大的不同")]),s._v(". 数据不均匀主要是因为"),t("strong",[s._v("节点在哈希环上分布的不均匀")]),s._v(", 这种情况在"),t("strong",[s._v("节点数量很少")]),s._v("的情况下尤其明显.")]),s._v(" "),t("p",[s._v("当"),t("strong",[s._v("节点数量较少")]),s._v("时, 增加或删减节点, 对"),t("strong",[s._v("单个节点")]),s._v("的影响可能很大, "),t("strong",[s._v("造成数据的严重不平衡")]),s._v(". 还是以上图为例, 如果去掉 node2, node4 中的数据由总数据的 1/4 左右变为 1/2 左右, 与其他节点相比负载过高.")]),s._v(" "),t("h6",{attrs:{id:"_2-虚拟节点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-虚拟节点"}},[s._v("#")]),s._v(" (2)虚拟节点")]),s._v(" "),t("p",[s._v("正因为一致性哈希分区可能存在数据分布不均的缺点, 可以采用"),t("strong",[s._v("虚拟槽")]),s._v("对一致性哈希进行改进.")]),s._v(" "),t("p",[t("strong",[s._v("解决方式是在一致性哈希分区的基础上, 增加多个虚拟节点, 然后将虚拟节点映射到真实节点上")]),s._v(". 虚拟节点的数量比真实节点来得"),t("strong",[s._v("多")]),s._v(", 那么虚拟节点在哈希环上分布的均匀性就会比原来的真实节点好, 从而使得数据分布也更加均匀.")]),s._v(" "),t("p",[s._v("Redis 集群使用的便是该方案, 其中的"),t("strong",[s._v("虚拟节点")]),s._v("称为"),t("strong",[s._v("槽(slot)")]),s._v(" . 槽是介于数据和实际节点之间的虚拟概念, 每个实际节点包含一定数量的槽, 每个槽包含哈希值在一定范围内的数据. 参考: Redis数据分区.")]),s._v(" "),t("p",[s._v("虚拟槽分区巧妙地使用了"),t("strong",[s._v("哈希空间")]),s._v(", 使用分散度良好的"),t("strong",[s._v("哈希函数")]),s._v("把所有数据映射到一个"),t("strong",[s._v("固定范围")]),s._v("的整数集合中, "),t("strong",[s._v("把整数定义为槽")]),s._v(". 这个范围一般"),t("strong",[s._v("远远大于节点数")]),s._v(", 比如 Redis Cluster 槽范围是 "),t("strong",[s._v("0 ~ 16383")]),s._v(".")]),s._v(" "),t("p",[s._v("在使用了槽的一致性哈希分区中, "),t("strong",[s._v("槽是数据管理和迁移的基本单位")]),s._v(". "),t("strong",[s._v("槽解耦了数据和实际节点间的关系")]),s._v(", 增加或删除节点对系统的影响很小. 假设系统中有 4 个实际节点, 假设为其分配 16 个槽(0 - 15), 那么槽 0 - 3 位于 node1; 4 - 7 位于 node2; 以此类推....如果此时删除 node2, 只需要"),t("strong",[s._v("将槽 4-7 重新分配")]),s._v("即可, 例如槽 4-5 分配给 node1, 槽 6 分配给 node3, 槽 7 分配给 node4; 可以看出删除 node2 后, 数据在其他节点的分布"),t("strong",[s._v("仍然较为均衡")]),s._v(".")]),s._v(" "),t("h6",{attrs:{id:"_3-应用实例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-应用实例"}},[s._v("#")]),s._v(" (3)应用实例")]),s._v(" "),t("p",[t("strong",[s._v("给图片加水印的例子")]),s._v(". 假设需要给图片加水印, 水印的背景总共有 10 个, 需要根据 imageId 选择映射到哪个水印背景. 如果采用普通的 Hash 并对水印数量取模的方式来选择图片, 那么一但新增或者减少水印图片, 那么可能导致大部分的图片映射到的水印背景发生变化. 如果采用一致性 Hash 的实现, 那么增加水印背景的数量后, 大部分的图片还是会映射到原来的水印背景上, 这样看起来更加一致.")]),s._v(" "),t("h4",{attrs:{id:"缓存与数据库的双写一致性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存与数据库的双写一致性"}},[s._v("#")]),s._v(" 缓存与数据库的双写一致性")]),s._v(" "),t("p",[s._v("只要用"),t("strong",[s._v("缓存")]),s._v(", 就可能会涉及到缓存与数据库双存储双写, 只要是双写, 就一定会有数据一致性的问题, "),t("strong",[s._v("如何解决一致性问题")]),s._v("?")]),s._v(" "),t("p",[s._v("最经典的"),t("strong",[s._v("缓存 + 数据库读写")]),s._v("的模式, 就是 "),t("strong",[s._v("Cache Aside Pattern")]),s._v(".")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("读的时候, 先读缓存, 缓存没有的话, 就读数据库, 然后取出数据后放入缓存, 同时返回响应")]),s._v(".")]),s._v(" "),t("li",[t("strong",[s._v("更新的时候, 先更新数据库, 然后再删除缓存.")])])]),s._v(" "),t("p",[t("strong",[s._v("为什么是删除缓存, 而不是更新缓存?")])]),s._v(" "),t("p",[s._v("因为在复杂点的缓存场景中, 缓存不仅是数据库中直接取出来的值. 比如可能更新了某个表的一个字段, 然后其对应的缓存, 是需要查询另外两个表的数据并进行"),t("strong",[s._v("运算")]),s._v(", 才能计算出缓存的最新值.")]),s._v(" "),t("p",[s._v("举个例子, 对于更新缓存的方案, 一个缓存涉及的表的字段, 在 1 分钟内就修改了 100 次, 那么缓存更新 100 次; 但是这个缓存在 1 分钟内"),t("strong",[s._v("只被读取了 1 次")]),s._v(", 有大量的冷数据. 而如果是删除缓存的话, 那么在 1 分钟内, 这个缓存不过就"),t("strong",[s._v("重新计算一次")]),s._v("而已, 开销大幅度降低.")]),s._v(" "),t("p",[t("strong",[s._v("用到缓存才去算缓存")]),s._v(". "),t("strong",[s._v("删除缓存而不是更新缓存, 就是一个 lazy 计算的思想")]),s._v(", 不要每次都重新做复杂的计算, 不管它会不会用到, 而是让它到需要被使用的时候再重新计算.")]),s._v(" "),t("p",[s._v("问题: "),t("strong",[s._v("先更新数据库, 再删除缓存")]),s._v(". 如果"),t("strong",[s._v("删除缓存失败")]),s._v("了, 那么会"),t("strong",[s._v("导致数据库中是新数据, 缓存中是旧数据")]),s._v(", 数据就出现了"),t("strong",[s._v("不一致")]),s._v(".")]),s._v(" "),t("p",[s._v("解决思路: "),t("strong",[s._v("先删除缓存, 再更新数据库")]),s._v(". 如果"),t("strong",[s._v("数据库更新失败了, 那么数据库中是旧数据")]),s._v(", 缓存中是"),t("strong",[s._v("空的")]),s._v(", 那么数据不会不一致. 因为读的时候缓存没有, 所以去读了数据库中的旧数据, 然后更新到缓存中.")]),s._v(" "),t("p",[s._v("问题: 数据发生了变更, 先删除了缓存, 然后要去修改数据库, "),t("strong",[s._v("此时还没修改")]),s._v(". 一个请求过来, 去读缓存, 发现缓存空了, 去查询数据库, "),t("strong",[s._v("查到了修改前的旧数据")]),s._v(", 放到了"),t("strong",[s._v("缓存")]),s._v("中. 随后数据变更的程序完成了数据库的修改. 此时数据库和缓存中的数据不一致了.")]),s._v(" "),t("p",[t("strong",[s._v("为什么上亿流量高并发场景下, 缓存会出现这个问题?")])]),s._v(" "),t("p",[s._v("只有在对一个数据在并发的进行读写的时候, 才可能会出现这种问题. 其实如果说并发量很低的话, 特别是读并发很低, 日活就 1 W, 那么很少的情况下, 会出现刚才描述的那种不一致的场景. 但如果日活上亿, 每秒并发读可能成千上万, 每秒只要有数据更新的请求, 就"),t("strong",[s._v("可能会出现上述的数据库 + 缓存不一致的情况")]),s._v(".")]),s._v(" "),t("p",[t("strong",[s._v("解决方案如下:")])]),s._v(" "),t("p",[s._v("更新数据的时候, 根据"),t("strong",[s._v("数据的唯一标识")]),s._v(', 将操作路由之后, 发送到一个 JVM 内部队列中. 读取数据的时候, 如果发现数据不在缓存中, 那么将重新执行 "读取数据+更新缓存" 的操作, 根据唯一标识路由之后, 也发送到同一个 JVM 内部队列中.')]),s._v(" "),t("p",[s._v("一个队列对应一个工作线程, 每个工作线程"),t("strong",[s._v("串行")]),s._v("拿到对应的操作, 然后一条一条的执行. 这样的话, 一个数据变更的操作, 先删除缓存, 然后再去更新数据库, 但是还没完成更新. 此时如果一个读请求过来, 没有读到缓存, 那么可以先将缓存更新的请求发送到队列中, 此时会在队列中积压, 然后同步等待缓存更新完成.")]),s._v(" "),t("p",[s._v("这里有一个"),t("strong",[s._v("优化点")]),s._v(", 一个队列中, 其实"),t("strong",[s._v("多个更新缓存请求串在一起是没意义的")]),s._v(", 因此可以做过滤, 如果发现队列中已经有一个更新缓存的请求了, 那么就不用再放个更新请求操作进去了, 直接等待前面的更新操作请求完成即可.")]),s._v(" "),t("p",[s._v("待那个队列对应的工作线程完成了上一个操作的数据库的修改之后, 才会去执行下一个操作, 也就是缓存更新的操作, 此时会从数据库中读取最新的值, 然后写入缓存中.")]),s._v(" "),t("p",[s._v("如果请求还在等待时间范围内, 不断轮询发现可以取到值了, 那么就直接返回; 如果请求等待的时间超过一定时长, 那么这一次直接从数据库中读取当前的旧值.")]),s._v(" "),t("h4",{attrs:{id:"lru实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#lru实现"}},[s._v("#")]),s._v(" LRU实现")]),s._v(" "),t("p",[s._v("以下是基于 "),t("strong",[s._v("双向链表 + HashMap")]),s._v(" 的 LRU 算法实现, 对算法的解释如下:")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("访问")]),s._v("某个节点时, 将其从原来的位置"),t("strong",[s._v("删除")]),s._v(", 并重新插入到"),t("strong",[s._v("链表头部")]),s._v(". 这样就能保证链表"),t("strong",[s._v("尾部")]),s._v("存储的就是"),t("strong",[s._v("最近最久未使用")]),s._v("的节点, 当节点数量"),t("strong",[s._v("大于")]),s._v("缓存最大空间时就"),t("strong",[s._v("淘汰")]),s._v("链表尾部的节点.")]),s._v(" "),t("li",[s._v("为了使"),t("strong",[s._v("删除")]),s._v("操作时间复杂度为 "),t("strong",[s._v("O(1)")]),s._v(" , 就不能采用遍历的方式找到某个节点. "),t("strong",[s._v("HashMap")]),s._v(" 存储着 "),t("strong",[s._v("Key 到节点")]),s._v("的映射, 通过 Key 就能以 O(1) 的时间得到节点, 然后再以 O(1) 的时间将其从"),t("strong",[s._v("双向队列")]),s._v("中删除.")]),s._v(" "),t("li",[s._v("采⽤这两种数据结构的组合, get 操作就可以在 "),t("strong",[s._v("O(1)")]),s._v("  时间复杂度内完成了. 由于 put 操作要删除的节点⼀般是尾部节点, 所以可以⽤⼀个变量 tail 时刻记录尾部节点的位置, 这样 put 操作也可以在 O(1) 时间内完成了.")])]),s._v(" "),t("p",[s._v("先来一个结点类.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LRUNode")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LRUNode")]),s._v(" next"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LRUNode")]),s._v(" pre"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LRUNode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("value "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[s._v("注意: 不管是 put 方法还是 get 方法, "),t("strong",[s._v("都需要将访问的结点重新放到链表头部")]),s._v(", 所以会抽出一个公共的方法.")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LRUCache")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Map")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LRUNode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" map "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HashMap")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LRUNode")]),s._v(" head"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LRUNode")]),s._v(" tail"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 缓存最⼤容量大于1")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" capacity"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LRUCache")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" capacity"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("capacity "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" capacity"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/** 插入元素 */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 说明缓存中没有任何元素")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("head "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            head "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LRUNode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            tail "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" head"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            map"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" head"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 说明缓存中已经存在这个元素了")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LRUNode")]),s._v(" node "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" map"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("node "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 更新值")]),s._v("\n            node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("value "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 把这个结点从链表删除并且插⼊到头结点")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("removeAndInsert")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 说明当前缓存不存在这个值")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LRUNode")]),s._v(" newHead "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LRUNode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 此处溢出则需要删除最近最近未使用的节点")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("map"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("size")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" capacity"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                map"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("remove")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("tail"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 删除尾结点")]),s._v("\n                tail "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" tail"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("pre"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                tail"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            map"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" newHead"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 将新的结点插入链表头部")]),s._v("\n            newHead"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" head"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            head"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("pre "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" newHead"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            head "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" newHead"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/** 从缓存中取值 */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LRUNode")]),s._v(" node "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" map"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果有值则需要将这个结点放到链表头部")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("node "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 把这个节点删除并插⼊到头结点")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("removeAndInsert")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("removeAndInsert")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LRUNode")]),s._v(" node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 特殊情况先判断, 例如该节点是头结点或是尾部节点")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("node "),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("mark"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" head"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("node "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("mark"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" tail"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            tail "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("pre"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            tail"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("pre"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("pre "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("pre"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 插⼊到头结点")]),s._v("\n        node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" head"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("pre "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        head"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("pre "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        head "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br"),t("span",{staticClass:"line-number"},[s._v("59")]),t("br"),t("span",{staticClass:"line-number"},[s._v("60")]),t("br"),t("span",{staticClass:"line-number"},[s._v("61")]),t("br"),t("span",{staticClass:"line-number"},[s._v("62")]),t("br"),t("span",{staticClass:"line-number"},[s._v("63")]),t("br"),t("span",{staticClass:"line-number"},[s._v("64")]),t("br"),t("span",{staticClass:"line-number"},[s._v("65")]),t("br"),t("span",{staticClass:"line-number"},[s._v("66")]),t("br"),t("span",{staticClass:"line-number"},[s._v("67")]),t("br"),t("span",{staticClass:"line-number"},[s._v("68")]),t("br"),t("span",{staticClass:"line-number"},[s._v("69")]),t("br"),t("span",{staticClass:"line-number"},[s._v("70")]),t("br"),t("span",{staticClass:"line-number"},[s._v("71")]),t("br"),t("span",{staticClass:"line-number"},[s._v("72")]),t("br"),t("span",{staticClass:"line-number"},[s._v("73")]),t("br"),t("span",{staticClass:"line-number"},[s._v("74")]),t("br"),t("span",{staticClass:"line-number"},[s._v("75")]),t("br")])]),t("p",[t("strong",[s._v("LinkedHashMap")]),s._v(" 也可以用来实现"),t("strong",[s._v("固定大小")]),s._v("的 LRU 缓存, 当 LRU 缓存已经满了的时候, 它会把最老的键值对移出缓存. LinkedHashMap 提供了一个称为 "),t("strong",[s._v("removeEldestEntry()")]),s._v("  的方法, 该方法会被 put() 和 putAll() 调用来删除最老的键值对. 参考: LinkedHashMap缓存应用.")]),s._v(" "),t("p",[s._v("‍")]),s._v(" "),t("p",[s._v("‍")]),s._v(" "),t("h4",{attrs:{id:"参考资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[s._v("#")]),s._v(" 参考资料")]),s._v(" "),t("ul",[t("li",[s._v("大规模分布式存储系统")]),s._v(" "),t("li",[t("a",{attrs:{href:"https://tech.meituan.com/cache_about.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("缓存那些事"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"https://my.oschina.net/jayhu/blog/732849",target:"_blank",rel:"noopener noreferrer"}},[s._v("一致性哈希算法"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E5%85%A7%E5%AE%B9%E5%82%B3%E9%81%9E%E7%B6%B2%E8%B7%AF",target:"_blank",rel:"noopener noreferrer"}},[s._v("内容分发网络"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=r.exports}}]);